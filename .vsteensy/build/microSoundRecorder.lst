
.vsteensy/build/microSoundRecorder.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00013d48 l    d  .fini	00000000 .fini
00013d4c l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
200141d0 l    d  .usbbuffers	00000000 .usbbuffers
20014530 l    d  .data	00000000 .data
20015180 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000087dc l     F .text	0000000c startup_default_early_hook
000087e8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
20015180 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
20015184 l       .bss	00000000 object.8610
00013cf4 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 myAPP.cpp
00000a0c l     F .text	00000034 getTime(char*) [clone .constprop.41]
00000a40 l     F .text	00000034 getDate(char*) [clone .constprop.42]
0000248c l     F .text	00000308 _GLOBAL__sub_I_acqParameters
200158a8 l     O .bss	00000004 loop::t4
1fff0200 l     O .dmabuffers	00000400 i2s_rx_buffer_32
1fff0600 l     O .dmabuffers	000238c0 setup::data
20019aac l     O .bss	00000028 makeFilename(char*)::filename
20019ba4 l     O .bss	00000004 loop::t3
20019bb0 l     O .bss	00000030 wavHeader(unsigned long)::wheader
20019c0c l     O .bss	00000004 loop::loopCount
2001a6e4 l     O .bss	00000002 loop::state
2001a6e8 l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
000027b0 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00002c94 l     F .text	00000018 refreshCache(long) [clone .part.0]
2001a6ec l     O .bss	00000004 cacheTime
2001a6f0 l     O .bss	00000007 tm
2001a6f8 l     O .bss	00000004 sysTime
2001a6fc l     O .bss	00000001 Status
2001a704 l     O .bss	00000004 prevMillis
200145c8 l     O .data	00000004 syncInterval
000134e4 l     O .text	0000000c monthDays
2001a708 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
00002f6c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00002f84 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00002f9c l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00002fb4 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00002fcc l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 input_adc.cpp
00002fe4 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 output_dac.cpp
00002ffc l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 output_tdm.cpp
00003014 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_adcs.cpp
0000302c l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
0000305c l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_dacs.cpp
00003074 l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
0000308c l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
000030a4 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
000030bc l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
000030d4 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
000030ec l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00003104 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
2001a79c l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SD.cpp
0000331c l     F .text	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 SdVolume.cpp
0000341c l     F .text	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 NXP_SDHC.cpp
00003600 l     F .text	00000094 SDHC_CMD_Do(unsigned long)
00003694 l     F .text	00000044 SDHC_CMD12_StopTransferWaitForBusy()
2001aa00 l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 SdFile.cpp
000038ac l     F .text	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 Sd2Card.cpp
00004050 l     F .text	00000010 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
2001aa14 l     O .bss	00000004 settings
2001aa18 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00004914 l     F .text	0000001e FsCache::sync() [clone .part.2]
000049a0 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000049d4 l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000055a0 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
000056bc l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00005e78 l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00006294 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00006b70 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00006b88 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000716c l     F .text	00000030 sdIrs()
0000719c l     F .text	00000018 isBusyCommandComplete()
000071b4 l     F .text	00000010 isBusyCommandInhibit()
000071c4 l     F .text	0000000c isBusyDMA()
000071d0 l     F .text	00000014 isBusyFifoRead()
000071e4 l     F .text	00000014 isBusyFifoWrite()
000071f8 l     F .text	00000018 isBusyTransferComplete()
00007210 l     F .text	000000cc setSdclk(unsigned long)
00007340 l     F .text	00000028 waitTimeout(bool (*)())
00007368 l     F .text	0000004c yieldTimeout(bool (*)())
000073e4 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
00007460 l     F .text	00000064 readReg16(unsigned long, void*)
000074c4 l     F .text	0000002c isBusyCMD13()
0000750c l     F .text	00000020 waitDmaStatus() [clone .part.6]
0000752c l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007720 l     F .text	00000078 transferStop()
00007ad0 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
2001aa24 l     O .bss	00000001 m_version2
2001aa28 l     O .bss	00000010 m_cid
2001aa38 l     O .bss	00000004 m_busyFcn
2001aa3c l     O .bss	00000001 m_highCapacity
2001aa40 l     O .bss	00000004 m_ocr
2001aa44 l     O .bss	00000004 m_rca
2001aa48 l     O .bss	00000004 m_irqstat
20014714 l     O .data	00000001 m_errorCode
2001aa4c l     O .bss	00000001 m_initDone
2001aa50 l     O .bss	00000010 m_csd
2001aa60 l     O .bss	00000001 m_dmaBusy
2001aa64 l     O .bss	00000004 m_sdClkKhz
2001aa68 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
2001aa6d l     O .bss	00000001 tx_noautoflush
2001aa70 l     O .bss	00000004 tx_packet
2001aa74 l     O .bss	00000001 transmit_previous_timeout
2001aa78 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
2001aa7d l     O .bss	00000001 calibrating
20014715 l     O .data	00000001 analog_config_bits
2001aa7e l     O .bss	00000001 analog_reference_internal
20014716 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
0000881c l     F .text	0000004c digitalWrite.part.1
00008868 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
2001471c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
2001aa84 l     O .bss	00000004 ep0_tx_ptr
2001aa88 l     O .bss	00000010 rx_last
2001aa98 l     O .bss	00000002 ep0_tx_len
2001aa9c l     O .bss	00000040 ep0_rx0_buf
2001aadc l     O .bss	00000010 rx_first
2001aaec l     O .bss	00000001 ep0_tx_data_toggle
2001aaf0 l     O .bss	00000040 ep0_rx1_buf
2001ab30 l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
2001ab40 l     O .bss	00000010 tx_last
2001ab50 l     O .bss	00000008 setup
2001ab58 l     O .bss	00000001 ep0_tx_bdt_bank
2001ab5c l     O .bss	00000008 reply_buffer
2001ab68 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
2001ab8c l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
2001ac18 l     O .bss	00000004 rts_pin
2001ac1c l     O .bss	00000001 rx_buffer_head
2001ac1d l     O .bss	00000001 rx_buffer_tail
2001ac20 l     O .bss	00000028 tx_buffer
2001ac48 l     O .bss	00000040 rx_buffer
2001ac88 l     O .bss	00000001 transmitting
2001ac89 l     O .bss	00000001 tx_buffer_tail
2001ac8c l     O .bss	00000004 transmit_pin
2001ac90 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
2001ac94 l     O .bss	00000004 rts_pin
2001ac98 l     O .bss	00000001 transmitting
2001ac99 l     O .bss	00000001 rx_buffer_tail
2001ac9c l     O .bss	00000028 tx_buffer
2001acc4 l     O .bss	00000040 rx_buffer
2001ad04 l     O .bss	00000001 rx_buffer_head
2001ad05 l     O .bss	00000001 tx_buffer_tail
2001ad08 l     O .bss	00000004 transmit_pin
2001ad0c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
2001ad10 l     O .bss	00000004 rts_pin
2001ad14 l     O .bss	00000001 rx_buffer_head
2001ad15 l     O .bss	00000001 rx_buffer_tail
2001ad18 l     O .bss	00000028 tx_buffer
2001ad40 l     O .bss	00000040 rx_buffer
2001ad80 l     O .bss	00000001 transmitting
2001ad81 l     O .bss	00000001 tx_buffer_tail
2001ad84 l     O .bss	00000004 transmit_pin
2001ad88 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
2001ad8c l     O .bss	00000004 rts_pin
2001ad90 l     O .bss	00000001 rx_buffer_head
2001ad91 l     O .bss	00000001 rx_buffer_tail
2001ad94 l     O .bss	00000040 tx_buffer
2001add4 l     O .bss	00000040 rx_buffer
2001ae14 l     O .bss	00000001 transmitting
2001ae15 l     O .bss	00000001 tx_buffer_tail
2001ae18 l     O .bss	00000004 transmit_pin
2001ae1c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
2001ae20 l     O .bss	00000004 rts_pin
2001ae24 l     O .bss	00000001 rx_buffer_head
2001ae25 l     O .bss	00000001 rx_buffer_tail
2001ae28 l     O .bss	00000028 tx_buffer
2001ae50 l     O .bss	00000040 rx_buffer
2001ae90 l     O .bss	00000001 transmitting
2001ae91 l     O .bss	00000001 tx_buffer_tail
2001ae94 l     O .bss	00000004 transmit_pin
2001ae98 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
20014730 l     O .data	00000012 device_descriptor
2001475c l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
2001ae9c l     O .bss	00000004 rts_pin
2001aea0 l     O .bss	00000001 rx_buffer_head
2001aea1 l     O .bss	00000001 rx_buffer_tail
2001aea4 l     O .bss	00000028 tx_buffer
2001aecc l     O .bss	00000040 rx_buffer
2001af0c l     O .bss	00000001 transmitting
2001af0d l     O .bss	00000001 tx_buffer_tail
2001af10 l     O .bss	00000004 transmit_pin
2001af14 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000ba78 l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000cabc l     F .text	00000038 sulp
000138dc l     O .text	00000014 fpi.6173
00013900 l     O .text	00000014 fpinan.6209
00013918 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000d9f0 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00013940 l     O .text	00000010 zeroes.7258
00013994 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
000139a4 l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001020c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0001022c l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00011420 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
00013cd8 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoll.c
0001257c l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
0001274c l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
000128d8 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
200147d8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
20015180 l       .bss	00000000 __bss_start__
2001af64 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000087d4  w    F .text	00000006 adc0_isr
0000b270 g     F .text	0000002c .hidden __aeabi_dcmpun
00008450 g     F .text	0000001c usb_serial_available
20019eac g     O .bss	00000008 I2S_32::dma
000124a8 g     F .text	0000005e __any_on
0000b234 g     F .text	00000012 .hidden __aeabi_dcmple
0000a4c8 g     F .text	00000020 serial4_available
0000c87c g     F .text	000000ba strcpy
0000b170 g     F .text	0000007a .hidden __cmpdf2
2001ab98 g     O .bss	00000004 AudioStream::memory_pool
000078dc g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009c7c  w    F .text	000000c4 yield
00005c90 g     F .text	000001e8 FatFile::write(void const*, unsigned int)
0000b170 g     F .text	0000007a .hidden __eqdf2
00006ae4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00003918 g     F .text	0000002a SdFile::addCluster()
00004430 g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20014744 g     O .data	00000018 usb_string_manufacturer_name_default
0000a5c0 g     F .text	00000020 serial_available
00005c18 g     F .text	00000076 FatFile::truncate()
200146a4 g     O .data	0000006c Wire1
0000ace0 g     F .text	0000005a .hidden __floatdidf
0000878c  w    F .text	00000048 hard_fault_isr
000087d4  w    F .text	00000006 dma_ch6_isr
2001ab9c g     O .bss	00000001 AudioStream::update_scheduled
2001aa1c g     O .bss	00000004 FsDateTime::callback
20014560 g     O .data	00000028 acqParameters
00009d9c g     F .text	00000020 Print::println()
000031c8 g     F .text	00000130 TwoWire::isr()
0000a39c g     F .text	00000020 serial2_available
2001ac14 g     O .bss	00000002 AudioStream::memory_used
000087d4  w    F .text	00000006 uart0_lon_isr
00004330 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00008c94 g     F .text	000000c8 usb_rx_memory
00009d40  w    F .text	00000002 serialEvent5()
00006ab8  w    F .text	00000004 SdSpiCard::errorCode() const
20019ad4 g     O .bss	00000084 delay1
000087d4  w    F .text	00000006 dma_ch8_isr
00001464 g     F .text	000008d8 doMenu()
0000a6ec g     F .text	00000020 serial6_available
0000c2fc g     F .text	00000002 __malloc_unlock
00003bb0 g     F .text	00000068 Sd2Card::chipSelectHigh()
2001aa20 g     O .bss	00000004 FsVolume::m_cwv
000057c0 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
000086ac g     F .text	000000e0 analog_init
00008d5c g     F .text	00000084 usb_tx
0000d9d0 g     F .text	00000020 _strtod_r
000087d4  w    F .text	00000006 portcd_isr
000100bc g     F .text	0000004a _vdprintf_r
00003b98 g     F .text	00000018 SdFile::write(unsigned char)
00012ca8 g     F .text	00000082 _sfread_r
0000c194 g     F .text	000000c6 memmove
00009bd4 g     F .text	00000098 MillisTimer::runFromTimer()
2001a764 g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000bab4 g     F .text	00000014 __locale_ctype_ptr
00011c20 g     F .text	0000004c _Balloc
000087d4  w    F .text	00000006 can1_rx_warn_isr
00013d54 g       .ARM.exidx	00000000 __exidx_end
000087d4  w    F .text	00000006 dma_error_isr
00006144 g     F .text	0000003c FatPartition::freeChain(unsigned long)
2001ab84 g     O .bss	00000001 EventResponder::runningFromYield
000081f8 g     F .text	0000001a SdSpiArduinoDriver::receive()
00006ca8 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
000032f8 g     F .text	0000000c i2c0_isr
00009d70 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b160 g     F .text	0000008a .hidden __gtdf2
0000ba1c g     F .text	0000000c __errno
000087d4  w    F .text	00000006 portd_isr
000087d4  w    F .text	00000006 enet_error_isr
00013530 g     O .text	00000020 TwoWire::i2c2_hardware
00000f88 g     F .text	00000078 makeFilename(char*)
2001ab70 g     O .bss	00000004 EventResponder::firstInterrupt
20019e10 g     O .bss	00000014 patchCord2
00011ba4 g     F .text	00000004 __localeconv_l
00006ae8  w    F .text	0000000e SdSpiCard::~SdSpiCard()
000087d4  w    F .text	00000006 tpm1_isr
00004dcc g     F .text	00000018 ExFatPartition::rootLength()
00000be8  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00006abc  w    F .text	00000004 SdSpiCard::errorData() const
00009d5c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013644 g     O .text	00000200 digital_pin_to_info_PGM
0000609c g     F .text	000000a8 FatPartition::allocContiguous(unsigned long, unsigned long*)
2001af60 g     O .bss	00000004 errno
00006d24 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
00008214 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
000065c0 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
00004d14 g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000c7a8 g     F .text	00000004 __seofread
00013d54 g       .ARM.exidx	00000000 _etext
000029a8 g     F .text	00000134 _spi_dma_rxISR0()
20015180 g       .bss	00000000 _sbss
000039a8 g     F .text	000001f0 SdFile::write(void const*, unsigned int)
000006fc g     F .text	00000240 mProcess::update()
0000b1fc g     F .text	00000010 .hidden __aeabi_cdcmple
000072e8 g     F .text	0000000c SdioCard::errorData() const
2001a7fc g     O .bss	00000200 SdVolume::cacheBuffer_
0000a29c  w    F .text	00000002 serialEvent6()
0000b3d8 g     F .text	00000160 .hidden __aeabi_fadd
000079ec g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000b3d4 g     F .text	00000164 .hidden __subsf3
0000892c g     F .text	0000001c digitalRead
000087d4  w    F .text	00000006 porte_isr
000020c8 g     F .text	000003c4 loop
0000a020 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
000087d4  w    F .text	00000006 portb_isr
000087d4  w    F .text	00000006 spi1_isr
0000a4e8 g     F .text	000000d8 uart3_status_isr
00009e80  w    F .text	00000002 serialEvent1()
0000409c g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000087d4  w    F .text	00000006 mcm_isr
20019be4 g     O .bss	00000014 patchCord3
00007f10 g     F .text	000000cc SdioCard::readData(unsigned char*)
00009b6c g     F .text	00000068 MillisTimer::addToActiveList()
0000a210 g     F .text	00000028 Stream::peekNextDigit()
20019e40 g     O .bss	00000058 process1
000009d4  w    F .text	0000001c c_uSD::~c_uSD()
00003510 g     F .text	000000f0 SdVolume::allocContiguous(unsigned long, unsigned long*)
00006bec g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
2001ab74 g     O .bss	00000004 EventResponder::lastInterrupt
0000b6b8 g     F .text	00000024 .hidden __aeabi_f2lz
0000a3bc g     F .text	0000010c uart1_status_isr
00006948 g     F .text	00000028 FsBaseFile::close()
000082a4 g     F .text	00000134 memcpy
000087d4  w    F .text	00000006 randnum_isr
00011a08 g     F .text	00000180 __hexnan
0000b1ec g     F .text	00000020 .hidden __aeabi_cdrcmple
00000614  w    F .text	000000e8 mDelay<2, 12>::update()
00004d4c g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
00005a34 g     F .text	0000002a FatFile::peek()
0000db50 g     F .text	000016e4 _svfprintf_r
2001aa10 g     O .bss	00000004 SdFile::dateTime_
0000ac70 g     F .text	00000022 .hidden __floatsidf
2001aa80 g     O .bss	00000004 systick_millis_count
0000b168 g     F .text	00000082 .hidden __ltdf2
2001a7f4 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
0000878c  w    F .text	00000048 bus_fault_isr
000087d4  w    F .text	00000006 watchdog_isr
0000b688 g     F .text	00000000 .hidden __aeabi_uldivmod
00003304 g     F .text	0000000c i2c1_isr
2001ab64 g     O .bss	00000001 usb_configuration
000087d4  w    F .text	00000006 dma_ch11_isr
00000518  w    F .text	00000006 SdCardInterface::status()
00007aa0 g     F .text	00000030 SdioCard::syncDevice()
0000779c g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
000033c0 g     F .text	0000005c SdVolume::cacheRawBlock(unsigned long, unsigned char)
00000a74  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00005a60 g     F .text	00000040 FatFile::readDirCache(bool)
00009e68  w    F .text	00000002 serialEvent2()
00012400 g     F .text	00000060 __ratio
00003310 g     F .text	0000000c i2c2_isr
2001aba0 g     O .bss	00000070 AudioStream::memory_pool_available_mask
2001a73c g     O .bss	00000008 AudioOutputAnalog::dma
20014744  w    O .data	00000018 usb_string_manufacturer_name
2001af58 g     O .bss	00000008 usb_rx_byte_count_data
000087d4  w    F .text	00000006 pit1_isr
0000bac8 g     F .text	00000010 malloc
20019bac g     O .bss	00000004 maxNoise
000087d4  w    F .text	00000006 dma_ch4_isr
00013510 g     O .text	00000020 TwoWire::i2c1_hardware
20019eb4 g     O .bss	00000828 queue
0000a14c g     F .text	00000084 software_isr
00012eac  w    O .text	00000024 vtable for FsFile
00011b88 g     F .text	0000001c iswspace
000087d4  w    F .text	00000006 dma_ch7_isr
00003128  w    F .text	0000001e TwoWire::read()
0000b540 g     F .text	0000001c .hidden __aeabi_i2f
00002794  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00013be8 g     O .text	000000c8 __mprec_tens
000098ac g     F .text	000000f4 usb_init
2001ac12 g     O .bss	00000002 AudioStream::memory_pool_first_mask
00006ad0  w    F .text	00000004 SdSpiCard::type() const
0000b2ec g     F .text	00000040 .hidden __fixunsdfsi
000087d4  w    F .text	00000006 lptmr_isr
2001af20 g     O .bss	00000004 __malloc_top_pad
000088fc g     F .text	00000024 rtc_set
00012c6c g     F .text	0000003a __ssrefill_r
00006af8 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005234 g     F .text	000000e2 ExFatFile::truncate()
20014530 g     O .data	00000000 .hidden __dso_handle
0000ac50 g     F .text	0000001e .hidden __aeabi_ui2d
00000b78  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
00011ba8 g     F .text	0000001c _localeconv_r
00012ac4 g     F .text	00000024 _strtoull_r
000088e0 g     F .text	00000010 attachInterruptVector
000081b0 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00011e34 g     F .text	00000012 __i2b
20014530 g       .data	00000000 _sdata
2001a6e0 g     O .bss	00000004 maxValue
000134f0 g     O .text	00000020 TwoWire::i2c0_hardware
00005f24 g     F .text	0000000e FatCache::sync()
0000b728 g     F .text	000002e2 .hidden __udivmoddi4
0000a9cc g     F .text	00000000 .hidden __aeabi_drsub
000055d4 g     F .text	00000034 FatFile::addCluster()
0000c6e0 g     F .text	00000024 _sbrk_r
00006d78 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
000073c4 g     F .text	00000020 SdioCard::type() const
000001d0 g     F .text	000001f0 ResetHandler
000083d8 g     F .text	00000048 usb_serial_getchar
000087d4  w    F .text	00000006 can1_bus_off_isr
000087d4  w    F .text	00000006 ftm2_isr
2001af4c g     O .bss	00000008 usb_cdc_line_coding
00008920 g     F .text	0000000a digitalWrite
2001ab7c g     O .bss	00000004 EventResponder::lastYield
000087d4  w    F .text	00000006 uart5_status_isr
0000a70c g     F .text	000000e4 lpuart0_status_isr
00004074 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00013870 g     O .text	00000004 usb_endpoint_config_table
000087d4  w    F .text	00000006 dma_ch9_isr
00000bcc  w    F .text	0000001c Print::write(char const*)
00000af8  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
000087d4  w    F .text	00000006 pit2_isr
0000b220 g     F .text	00000012 .hidden __aeabi_dcmplt
0000a8b8 g     F .text	00000020 serial3_available
2001af1c g     O .bss	00000004 __malloc_max_sbrked_mem
00003c18 g     F .text	000000b4 Sd2Card::chipSelectLow()
00008948 g     F .text	0000000a pinMode
00007074 g     F .text	00000042 SdSpiCard::writeStop()
20019c10 g     O .bss	00000200 tempBuffer
00008be0 g     F .text	0000004c usb_free
000087d4  w    F .text	00000006 i2c3_isr
0000ac94 g     F .text	0000003a .hidden __extendsfdf2
00012e7c  w    O .text	0000000c vtable for mDelay<2, 12>
0000f234 g     F .text	00000e88 __ssvfscanf_r
0000af90 g     F .text	000001d0 .hidden __aeabi_ddiv
0000a9d8 g     F .text	00000276 .hidden __adddf3
2001a7f8 g     O .bss	00000004 SdVolume::sdCard_
200145cc g     O .data	0000006c Wire2
00007138 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00012274 g     F .text	000000d0 __b2d
00001f94  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
00013d4c g       .ARM.exidx	00000000 __exidx_start
0000ad3c g     F .text	00000254 .hidden __aeabi_dmul
00000a00  w    F .text	0000000c DMAChannel::~DMAChannel()
00006f6c g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
000087d4  w    F .text	00000006 pit0_isr
2001ab80 g     O .bss	00000004 EventResponder::firstYield
00003944 g     F .text	00000064 SdFile::seekSet(unsigned long)
000138c8 g     O .text	00000004 _global_impure_ptr
000087d4  w    F .text	00000006 can1_error_isr
00003fc4 g     F .text	0000008c Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
00000b44  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
200156a8 g     O .bss	00000200 aux
0000c300 g     F .text	000003de _realloc_r
0000ba28 g     F .text	00000050 __libc_init_array
2001af64 g       .bss	00000000 __bss_end
0000311c  w    F .text	0000000c TwoWire::available()
000087d4  w    F .text	00000006 can0_wakeup_isr
00004904 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000072f4 g     F .text	0000001c SdioCard::readCID(CID*)
00013ae4 g     O .text	00000100 __hexdig
000050bc g     F .text	000000ea ExFatFile::addDirCluster()
000005c4  w    F .text	0000004e mRecordQueue<250>::update()
000087d4  w    F .text	00000006 flash_cmd_isr
000070e4 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
000037dc g     F .text	000000d0 SDHC_CardWriteBlock(void const*, unsigned long)
00013cb0 g     O .text	00000028 __mprec_bigtens
00011d00 g     F .text	00000098 __s2b
00009d44  w    F .text	00000004 usb_serial_class::clear()
0000ac50 g     F .text	0000001e .hidden __floatunsidf
0000a8d8 g     F .text	000000d8 uart2_status_isr
000087ec g     F .text	0000002c _sbrk
00000474 g     F .text	000000a4 I2S_32::isr32()
000120c8 g     F .text	00000042 __mcmp
2001ab88 g     O .bss	00000004 MillisTimer::listWaiting
2001a744 g     O .bss	00000008 AudioOutputTDM::dma
20014718 g     O .data	00000004 __brkval
2001aa7c g     O .bss	00000001 usb_cdc_line_rtsdtr
00008664 g     F .text	00000048 usb_serial_flush_callback
00013ce4 g     F .text	00000000 _init
0000569c g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
000087d4  w    F .text	00000006 svcall_isr
00009e84 g     F .text	0000006c AudioStream::initialize_memory(audio_block_struct*, unsigned int)
000087d4  w    F .text	00000006 dma_ch15_isr
0000b32c g     F .text	0000009e .hidden __aeabi_d2f
00002ea8 g     F .text	00000020 day()
0000b3d4 g     F .text	00000164 .hidden __aeabi_fsub
00013550 g     O .text	00000024 vtable for TwoWire
000087d4  w    F .text	00000006 uart1_error_isr
0001118c g     F .text	00000028 __libc_fini_array
0000caf8 g     F .text	00000ed8 _strtod_l
000119d8 g     F .text	00000030 __match
000087d4  w    F .text	00000006 usbhs_phy_isr
2001a74c g     O .bss	00000008 AudioInputAnalogStereo::dma0
20019e24 g     O .bss	00000018 acq
2001af64 g       .bss	00000000 _ebss
00007964 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005770 g     F .text	00000050 FatFile::preAllocate(unsigned long)
2001a774 g     O .bss	00000008 AudioOutputADAT::dma
00000ae4  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00005ec4 g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
00011d98 g     F .text	00000040 __hi0bits
0000b29c g     F .text	0000004e .hidden __fixdfsi
000087d4 g     F .text	00000006 unused_isr
000087d4  w    F .text	00000006 spi0_isr
0000b56c g     F .text	0000007c .hidden __floatdisf
000087d4  w    F .text	00000006 dma_ch3_isr
00012edc g     O .text	0000000c vtable for mProcess
00000a00  w    F .text	0000000c DMAChannel::~DMAChannel()
20015aac g     O .bss	00004000 diskBuffer
20019b70 g     O .bss	00000020 text
0000130c g     F .text	00000114 c_uSD::loadConfig(unsigned long*, int, long*, int)
00002ee8 g     F .text	00000024 year()
0000a2a0 g     F .text	00000004 operator delete(void*, unsigned int)
000087d4  w    F .text	00000006 flash_error_isr
0000a9d8 g     F .text	00000276 .hidden __aeabi_dadd
0000b168 g     F .text	00000082 .hidden __ledf2
00000d04 g     F .text	000000d4 I2S_32::begin()
0000a2a4 g     F .text	00000020 serial5_available
000087d4  w    F .text	00000006 uart5_error_isr
0000b6dc g     F .text	0000004c .hidden __aeabi_f2ulz
000087d4  w    F .text	00000006 rtc_seconds_isr
00013450 g     O .text	00000094 SPIClass::spi0_hardware
000087d4  w    F .text	00000006 pdb_isr
00011f78 g     F .text	000000a0 __pow5mult
0000acd0 g     F .text	0000006a .hidden __aeabi_ul2d
0000878c  w    F .text	00000048 usage_fault_isr
000087d4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00006018 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
000087d4  w    F .text	00000006 dma_ch14_isr
000009f0 g     F .text	00000004 getTeensy3Time()
00000000  w      *UND*	00000000 __deregister_frame_info
2001af54 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009c6c g     F .text	00000010 systick_isr
000087d4  w    F .text	00000006 rtc_alarm_isr
00000dd8 g     F .text	000000b4 I2S_dividers(unsigned long*, unsigned long, unsigned long)
00006ebc g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
2001ab90 g     O .bss	00000004 AudioStream::first_update
000087d4  w    F .text	00000006 dma_ch2_isr
00001000 g     F .text	0000006c wavHeader(unsigned long)
20014720 g     O .data	00000010 Serial
2001ab94 g     O .bss	00000002 AudioStream::memory_used_max
000087d4  w    F .text	00000006 ftm1_isr
000009f4  w    F .text	0000000c AudioConnection::~AudioConnection()
00009d64  w    F .text	00000006 usb_serial_class::write(unsigned char)
000087dc  w    F .text	0000000c startup_early_hook
000087d4  w    F .text	00000006 dma_ch13_isr
00004e78 g     F .text	0000008c ExFatFile::addCluster()
000087d4  w    F .text	00000006 uart2_error_isr
00008420 g     F .text	00000030 usb_serial_peekchar
0000b25c g     F .text	00000012 .hidden __aeabi_dcmpgt
0000c090 g     F .text	00000000 memchr
00005fb0 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
200147bc g     O .data	00000016 usb_string_serial_number_default
0000878c g     F .text	00000048 fault_isr
00011250 g     F .text	000001d0 _free_r
00007798 g     F .text	00000004 SdioCard::readStop()
00004940 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000ba90 g     F .text	0000001c __locale_mb_cur_max
0000b248 g     F .text	00000012 .hidden __aeabi_dcmpge
000087d4  w    F .text	00000006 usb_charge_isr
00002f0c g     F .text	00000044 setTime(long)
00009d54  w    F .text	00000004 usb_serial_class::flush()
00012be8 g     F .text	00000082 _sungetc_r
000087d4  w    F .text	00000006 cmt_isr
0000a9d4 g     F .text	0000027a .hidden __aeabi_dsub
00006180 g     F .text	00000114 FatPartition::init(BlockDeviceInterface*, unsigned char)
000087d4  w    F .text	00000006 usbhs_isr
2001517c g     O .data	00000004 __malloc_sbrk_base
00009d4c  w    F .text	00000004 usb_serial_class::read()
000087d4  w    F .text	00000006 ftm3_isr
00012728 g     F .text	00000024 _strtoll_r
2001a6dc g     O .bss	00000002 I2S_32::block_offset
000087d4  w    F .text	00000006 tsi0_isr
2001519c g     O .bss	0000050c uSD
0000acd0 g     F .text	0000006a .hidden __floatundidf
00008818  w    F .text	00000002 __cxa_pure_virtual
00012018 g     F .text	000000ae __lshift
000087d4  w    F .text	00000006 spi2_isr
00004e20 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
2001a754 g     O .bss	00000008 AudioInputAnalogStereo::dma1
0000b540 g     F .text	0000001c .hidden __floatsisf
00012ae8 g     F .text	00000100 __ssprint_r
00009e6c  w    F .text	00000002 serialEvent4()
00012da4 g     F .text	0000005e _vasnprintf_r
00009d6c  w    F .text	00000002 serialEvent()
2001aaed g     O .bss	00000001 usb_reboot_timer
00012e70  w    O .text	0000000c vtable for mRecordQueue<250>
2001a70c g     O .bss	00000008 AudioOutputPWM::dma
00010168 g     F .text	000000a4 __register_exitproc
00004804 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00002f50 g     F .text	0000001c setSyncProvider(long (*)())
0000ca1c g     F .text	000000a0 strncmp
00000b78  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
0000846c g     F .text	00000038 usb_serial_flush_input
00012ed0 g     O .text	0000000c vtable for I2S_32
00011e48 g     F .text	00000130 __multiply
000085ac g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
2001af24 g     O .bss	00000028 __malloc_current_mallinfo
00012344 g     F .text	000000ba __d2b
000087d4  w    F .text	00000006 can0_bus_off_isr
000073b4  w    F .text	0000000e SdioCard::~SdioCard()
00000c0c g     F .text	000000f8 I2S_32::config_i2s()
2001ab59 g     O .bss	00000001 usb_rx_memory_needed
00007868 g     F .text	00000074 SdioCard::writeStart(unsigned long)
000128b4 g     F .text	00000024 _strtoul_r
00008de0 g     F .text	00000acc usb_isr
0000ba10 g     F .text	0000000c __cxa_atexit
00004160 g     F .text	0000019e ExFatFile::read(void*, unsigned int)
0000a11c g     F .text	00000030 AudioStream::update_setup()
0000ac70 g     F .text	00000022 .hidden __aeabi_i2d
0000b6b8 g     F .text	00000024 .hidden __fixsfdi
00004a00 g     F .text	0000000e FsCache::sync()
0000a294 g     F .text	00000006 Stream::parseInt()
20014588 g     O .data	00000040 SPI
0000c130 g     F .text	00000062 memcmp
20019b6c g     O .bss	00000004 I2S_32::block_right
00013844  w    O .text	00000028 vtable for usb_serial_class
00008234 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
000087d4  w    F .text	00000006 uart3_error_isr
0000b55c g     F .text	0000008c .hidden __floatundisf
20014538 g     O .data	00000005 postfix
000082a0  w    F .text	00000004 sdCsWrite(unsigned char, bool)
0000a1d0 g     F .text	00000040 Stream::timedPeek()
0000c750 g     F .text	00000058 sscanf
2001ab78 g     O .bss	00000004 MillisTimer::listActive
0000ba0c  w    F .text	00000002 .hidden __aeabi_ldiv0
2001a784 g     O .bss	00000008 AudioInputI2SHex::dma
000087d4  w    F .text	00000006 porta_isr
0000af90 g     F .text	000001d0 .hidden __divdf3
00012460 g     F .text	00000046 __copybits
200141d0 g     O .usbbuffers	00000360 usb_buffer_memory
00006dd4 g     F .text	00000098 SdSpiCard::sectorCount()
20019b90 g     O .bss	00000014 patchCord5
000087d4  w    F .text	00000006 low_voltage_isr
20014d70 g     O .data	00000408 __malloc_av_
0000b538 g     F .text	00000024 .hidden __aeabi_ui2f
000087d4  w    F .text	00000006 can0_error_isr
00008a34 g     F .text	0000016c _init_Teensyduino_internal_
20014534 g     O .data	00000004 outptr
0000ad3c g     F .text	00000254 .hidden __muldf3
0000860c g     F .text	00000058 usb_serial_flush_output
000087d4  w    F .text	00000006 dma_ch12_isr
2001a714 g     O .bss	00000008 AudioInputI2S::dma
0000c2f8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000062bc g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
000087d4  w    F .text	00000006 can1_wakeup_isr
20014000 g     O .dmabuffers	000001d0 _VectorsRam
0000824c g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00012e04 g     F .text	0000005e _calloc_r
000087d4  w    F .text	00000006 pit3_isr
2001a700 g     O .bss	00000004 getTimePtr
000087d4  w    F .text	00000006 enet_rx_isr
0000505c g     F .text	0000005e ExFatFile::sync()
000074f0 g     F .text	0000001c SdioCard::isBusy()
000087d4  w    F .text	00000006 portc_isr
00006f34 g     F .text	00000038 SdSpiCard::readStop()
00000e8c g     F .text	000000fc I2S_modification(unsigned long, unsigned short, int)
2001a75c g     O .bss	00000008 AudioInputI2SQuad::dma
0000c25c g     F .text	0000009a memset
00009e70 g     F .text	00000010 main
000034a0 g     F .text	00000070 SdVolume::fatGet(unsigned long, unsigned long*) const
2001a724 g     O .bss	00000008 AudioOutputI2S::dma
2001af18 g     O .bss	00000004 __malloc_max_total_mem
00004a10 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000b56c g     F .text	0000007c .hidden __aeabi_l2f
20019e3c g     O .bss	00000004 I2S_32::block_left
00002da8 g     F .text	000000a0 now()
00005318 g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
0000878c  w    F .text	00000048 memmanage_fault_isr
20014540 g     O .data	00000020 snipParameters
0000a7f0 g     F .text	0000007c usb_init_serialnumber
00001420 g     F .text	00000042 setRTCTime(int, int, int, int, int, int)
0000db28 g     F .text	00000024 _strtol_r
0000b32c g     F .text	0000009e .hidden __truncdfsf2
00013d48 g       .text	00000000 __init_array_end
00010358 g     F .text	00000e34 _dtoa_r
0000bae8 g     F .text	00000570 _malloc_r
000087d4  w    F .text	00000006 debugmonitor_isr
00010120 g     F .text	0000001a __ascii_wctomb
0000ace0 g     F .text	0000005a .hidden __aeabi_l2d
2001a72c g     O .bss	00000008 AudioInputI2SOct::dma
00012d2c g     F .text	00000078 __submore
00009aa4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00002adc g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
5f82e909 g       *ABS*	00000000 __rtc_localtime
00008954 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
0000106c g     F .text	00000070 c_uSD::init()
0000b55c g     F .text	0000008c .hidden __aeabi_ul2f
000087d4  w    F .text	00000006 cmp1_isr
0000b6dc g     F .text	0000004c .hidden __fixunssfdi
000087d4  w    F .text	00000006 ftm0_isr
20019be0 g     O .bss	00000002 mustStore
00004f04 g     F .text	00000158 ExFatFile::syncDir()
000111b4 g     F .text	0000009c _malloc_trim_r
200147b8 g     O .data	00000004 string0
000036d8 g     F .text	00000104 SDHC_CardReadBlock(void*, unsigned long)
000084a4 g     F .text	00000108 usb_serial_write
000087e8  w    F .text	00000002 startup_late_hook
00009d50  w    F .text	00000004 usb_serial_class::available()
000010dc g     F .text	00000108 c_uSD::close()
00005c0c g     F .text	0000000c FatFile::sync()
200147a0  w    O .data	00000016 usb_string_product_name
00008998 g     F .text	0000009c delay
0000b170 g     F .text	0000007a .hidden __nedf2
000087d4  w    F .text	00000006 tpm0_isr
2001ab6c g     O .bss	00000002 dma_channel_allocated_mask
00013d48 g     F .fini	00000000 _fini
20014710 g     O .data	00000004 SdVolume::cacheBlockNumber_
000031a0 g     F .text	00000026 TwoWire::write(unsigned char)
2001a71c g     O .bss	00000008 AudioOutputPT8211::dma
00002ec8 g     F .text	00000020 month()
00001fbc g     F .text	0000010c c_uSD::write(short*, long)
00006e6c g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00009dcc g     F .text	0000001c Print::printf(char const*, ...)
0000c704 g     F .text	0000004c sprintf
000087d4  w    F .text	00000006 i2s0_rx_isr
000087d4  w    F .text	00000006 uart4_error_isr
00005750 g     F .text	0000001e FatFile::close()
00005f34 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
00010220 g     F .text	0000000c atexit
0000733c  w    F .text	00000002 SdioCard::~SdioCard()
00000acc  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0001013c g     F .text	0000002c _write_r
00000520 g     F .text	000000a4 I2S_32::update()
2001a7a0 g     O .bss	00000054 SD
0000764c g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
20019ba8 g     O .bss	00000001 I2S_32::update_responsibility
0000b3cc g     F .text	0000016c .hidden __aeabi_frsub
00009f98 g     F .text	00000054 AudioStream::release(audio_block_struct*)
000087d4  w    F .text	00000006 can0_message_isr
0000a9b4 g     F .text	0000000c nanf
20014c00 g     O .data	00000004 _impure_ptr
000087d4  w    F .text	00000006 can1_message_isr
00004300 g     F .text	0000002e ExFatFile::peek()
00012e88  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
2001a794 g     O .bss	00000008 AudioOutputSPDIF::dma
00011bc4 g     F .text	0000005c _mbrtowc_r
000087d4  w    F .text	00000006 nmi_isr
20014638 g     O .data	0000006c Wire
00006508 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00009fec g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
000072dc g     F .text	0000000c SdioCard::errorCode() const
00005880 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000b30  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00013cf0 g       .text	00000000 __preinit_array_end
0000093c g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00006ae4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
2001a77c g     O .bss	00000008 AudioInputTDM::dma
000087d4  w    F .text	00000006 sdhc_isr
00002e68 g     F .text	00000020 minute()
00004ac4 g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
000051a8 g     F .text	0000008a ExFatFile::preAllocate(unsigned long long)
00004c88 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00006fbc g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000c058 g     F .text	0000002a __ascii_mbtowc
00006bac g     F .text	0000003e SdSpiCard::isBusy()
00012220 g     F .text	00000054 __ulp
00013594 g     O .text	00000058 vtable for SdSpiCard
00009ef0 g     F .text	000000a8 AudioStream::allocate()
200158ac g     O .bss	00000200 header
00006dcc  w    F .text	00000008 SdSpiCard::readCID(CID*)
00003148  w    F .text	00000016 TwoWire::peek()
00003160  w    F .text	00000002 TwoWire::flush()
00001d3c g     F .text	000001c0 setup
00013874 g     O .text	00000054 usb_descriptor_list
00008c2c g     F .text	0000003c usb_rx
00007440 g     F .text	00000020 SdioCard::status()
00003ccc g     F .text	00000054 Sd2Card::waitNotBusy(unsigned int)
000087d4  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000b2ec g     F .text	00000040 .hidden __aeabi_d2uiz
000011e4 g     F .text	00000128 c_uSD::storeConfig(unsigned long*, int, long*, int)
20019b58 g     O .bss	00000014 patchCord1
000087d4  w    F .text	00000006 uart0_error_isr
20019bf8 g     O .bss	00000014 patchCord4
00008ba0 g     F .text	00000040 usb_malloc
0000589c g     F .text	00000198 FatFile::read(void*, unsigned int)
000087d4  w    F .text	00000006 i2s0_isr
00005890 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00006ab4 g     F .text	00000004 operator new(unsigned int, unsigned long*)
00006dc4  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
00009a6c g     F .text	00000038 DMAChannel::release()
000085c4 g     F .text	00000048 usb_serial_write_buffer_free
00006c6c g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
000087d4  w    F .text	00000006 enet_timer_isr
0000a038 g     F .text	00000068 AudioConnection::connect()
0000b20c g     F .text	00000012 .hidden __aeabi_dcmpeq
00003dd8 g     F .text	00000060 Sd2Card::waitStartBlock()
00002cac g     F .text	000000fc makeTime(tmElements_t const&)
2001a78c g     O .bss	00000008 AudioInputPDM::dma
00003164 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
00009dbc  w    F .text	0000000e _write
20015180 g       .data	00000000 _edata
00004d28 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
0000733c  w    F .text	00000002 SdioCard::~SdioCard()
000087d4  w    F .text	00000006 i2s0_tx_isr
000087d4  w    F .text	00000006 adc1_isr
000070b8 g     F .text	0000002c SdSpiCard::syncDevice()
00005608 g     F .text	00000094 FatFile::addDirCluster()
00009d58  w    F .text	00000004 usb_serial_class::availableForWrite()
2001453e g     O .data	00000002 I2S_32::shift
000087d4  w    F .text	00000006 cmp0_isr
0000a86c g     F .text	0000004c ultoa
00013574 g     O .text	00000018 vtable for SdFile
00002e88 g     F .text	00000020 second()
00001efc  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
00006970 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00009b24 g     F .text	00000044 EventResponder::runFromInterrupt()
20015178 g     O .data	00000004 __malloc_trim_threshold
00009d48  w    F .text	00000004 usb_serial_class::peek()
0000a0a0 g     F .text	0000007a AudioConnection::disconnect()
00003ef8 g     F .text	000000cc Sd2Card::writeData(unsigned char, unsigned char const*)
0000b538 g     F .text	00000024 .hidden __floatunsisf
0001210c g     F .text	00000114 __mdiff
0000732c g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b29c g     F .text	0000004e .hidden __aeabi_d2iz
00004cbc g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
2001aa6c g     O .bss	00000001 usb_cdc_transmit_flush_timer
2001ac16 g     O .bss	00000002 AudioStream::cpu_cycles_total
000087d4  w    F .text	00000006 pit_isr
00002e48 g     F .text	00000020 hour()
00003d20 g     F .text	000000b8 Sd2Card::cardCommand(unsigned char, unsigned long)
00007798 g     F .text	00000004 SdioCard::writeStop()
00003340 g     F .text	00000080 SdVolume::cacheFlush()
00006ad4  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012508 g     F .text	00000072 __sccl
00004060 g     F .text	00000014 ExFatFile::close()
000139d0 g     O .text	00000101 _ctype_
000087d4  w    F .text	00000006 dac0_isr
00006ac0  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00013cf0 g       .text	00000000 __init_array_start
0000ba0c  w    F .text	00000002 .hidden __aeabi_idiv0
000087d4  w    F .text	00000006 can1_tx_warn_isr
0000b270 g     F .text	0000002c .hidden __unorddf2
00003e38 g     F .text	000000c0 Sd2Card::SD_readBlock(unsigned long, unsigned char*)
0000a5e0 g     F .text	0000010c uart0_status_isr
000087d4  w    F .text	00000006 mcg_isr
0000a238 g     F .text	0000005a Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
000099a0 g     F .text	000000cc DMAChannel::begin(bool)
0000c940 g     F .text	000000dc strlen
0000baac g     F .text	00000006 __locale_ctype_ptr_l
0000b1fc g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b160 g     F .text	0000008a .hidden __gedf2
00005aa0 g     F .text	00000094 FatFile::seekSet(unsigned long)
000114c8 g     F .text	00000510 __gethex
200147a0 g     O .data	00000016 usb_string_product_name_default
2001a76c g     O .bss	00000008 AudioOutputI2SQuad::dma
00010108 g     F .text	00000018 vdprintf
000087d4  w    F .text	00000006 dma_ch1_isr
000075e0 g     F .text	0000006c SdioCard::sectorCount()
20019e98 g     O .bss	00000014 patchCord6
000069f0 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
000009d4  w    F .text	0000001c c_uSD::~c_uSD()
00008c68 g     F .text	0000002c usb_tx_packet_count
0000c7ac g     F .text	000000ce strchr
000135ec g     O .text	00000058 vtable for SdioCard
0000ac94 g     F .text	0000003a .hidden __aeabi_f2d
000087d4  w    F .text	00000006 dma_ch5_isr
000087d4  w    F .text	00000006 can0_rx_warn_isr
000087d4  w    F .text	00000006 can0_tx_warn_isr
0000a2c4 g     F .text	000000d8 uart4_status_isr
00007fdc g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
2001a734 g     O .bss	00000008 AudioInputAnalog::dma
2001ac10 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00008120 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000a9d4 g     F .text	0000027a .hidden __subdf3
00013cf0 g       .text	00000000 __preinit_array_start
00012e64  w    O .text	0000000c vtable for AudioStream
00004ba4 g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00011dd8 g     F .text	0000005a __lo0bits
00004c4c g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00005b34 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000b5e8 g     F .text	00000000 .hidden __aeabi_ldivmod
0000a9b0  w    F .text	00000002 serialEvent3()
0000a9c0 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
000088f0 g     F .text	0000000c rtc_get
000087d4  w    F .text	00000006 cmp2_isr
0000b3d8 g     F .text	00000160 .hidden __addsf3
00009b68 g     F .text	00000004 pendablesrvreq_isr
000009f4  w    F .text	0000000c AudioConnection::~AudioConnection()
0000046c  w    F .text	00000004 Print::availableForWrite()
20014c04 g     O .data	0000016c __global_locale
000087d4  w    F .text	00000006 wakeup_isr
00007b7c g     F .text	00000394 SdioCard::begin(SdioConfig)
00004934 g     F .text	0000000c FsCache::invalidate()
000087d4  w    F .text	00000006 cmp3_isr
00002ae4 g     F .text	000001b0 breakTime(long, tmElements_t&)
00009de8 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00005f40 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000bad8 g     F .text	00000010 free
2001a9fc g     O .bss	00000001 SdVolume::cacheDirty_
000087d4  w    F .text	00000006 tpm2_isr
00011c80 g     F .text	00000080 __multadd
00011c6c g     F .text	00000012 _Bfree
000087d4  w    F .text	00000006 dma_ch0_isr
200147bc  w    O .data	00000016 usb_string_serial_number
000087d4  w    F .text	00000006 enet_tx_isr
00004de4 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00008050 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00007310 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	........i...m...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	.2...3..........
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	M...............
     150:	................
     160:	.........3......
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	87dc <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	8a34 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	88fc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	88fc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	ba28 <__libc_init_array>

	startup_late_hook();
     32c:	bl	87e8 <startup_late_hook>
	main();
     330:	bl	9e70 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x20015180
     360:	.word	0x00013d50
     364:	.word	0x20014530
     368:	.word	0x20015180
     36c:	.word	0x2001af64
     370:	.word	0x20014000
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x5f82e909
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x20015180
     42c:	.word	0x00000000
     430:	.word	0x00013d4c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x20015184
     460:	.word	0x00013d4c
     464:	.word	0x20015180
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <I2S_32::isr32()>:
  uint32_t daddr, offset;
  const int32_t *src, *end;
  int16_t *dest_left, *dest_right;
  audio_block_t *left, *right;

  daddr = (uint32_t)(dma.TCD->DADDR);
     474:	ldr	r2, [pc, #124]	; (4f4 <I2S_32::isr32()+0x80>)

  dma.clearInterrupt();
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     476:	ldr	r3, [pc, #128]	; (4f8 <I2S_32::isr32()+0x84>)
  uint32_t daddr, offset;
  const int32_t *src, *end;
  int16_t *dest_left, *dest_right;
  audio_block_t *left, *right;

  daddr = (uint32_t)(dma.TCD->DADDR);
     478:	ldr	r1, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     47a:	ldr	r0, [pc, #128]	; (4fc <I2S_32::isr32()+0x88>)
     47c:	ldr	r1, [r1, #16]

  dma.attachInterrupt(isr32); 
}

void I2S_32::isr32(void)
{
     47e:	push	{r4, r5, r6}

  daddr = (uint32_t)(dma.TCD->DADDR);

  dma.clearInterrupt();
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     480:	cmp	r1, r3
     482:	ldrb	r2, [r2, #4]
     484:	strb	r2, [r0, #0]
     486:	bcs.n	49a <I2S_32::isr32()+0x26>
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
    if (I2S_32::update_responsibility) AudioStream::update_all();
     488:	ldr	r2, [pc, #116]	; (500 <I2S_32::isr32()+0x8c>)
     48a:	ldrb	r2, [r2, #0]
     48c:	cbz	r2, 4ec <I2S_32::isr32()+0x78>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     48e:	ldr	r2, [pc, #116]	; (504 <I2S_32::isr32()+0x90>)
     490:	movs	r1, #1
     492:	str	r1, [r2, #0]
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     494:	add.w	r6, r3, #512	; 0x200
     498:	b.n	4a0 <I2S_32::isr32()+0x2c>
    if (I2S_32::update_responsibility) AudioStream::update_all();
  } else {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
    src = (int32_t *)&i2s_rx_buffer_32[0];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
     49a:	mov	r6, r3
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
    if (I2S_32::update_responsibility) AudioStream::update_all();
  } else {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
    src = (int32_t *)&i2s_rx_buffer_32[0];
     49c:	sub.w	r3, r3, #512	; 0x200
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
  }
  
   // extract 16 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES" samples
  left = I2S_32::block_left;
     4a0:	ldr	r1, [pc, #100]	; (508 <I2S_32::isr32()+0x94>)
  right = I2S_32::block_right;
     4a2:	ldr	r2, [pc, #104]	; (50c <I2S_32::isr32()+0x98>)
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
  }
  
   // extract 16 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES" samples
  left = I2S_32::block_left;
     4a4:	ldr	r1, [r1, #0]
  right = I2S_32::block_right;
     4a6:	ldr	r0, [r2, #0]
  if (left != NULL && right != NULL) {
     4a8:	cbz	r1, 4e8 <I2S_32::isr32()+0x74>
     4aa:	cbz	r0, 4e8 <I2S_32::isr32()+0x74>
    offset = I2S_32::block_offset;
     4ac:	ldr	r5, [pc, #96]	; (510 <I2S_32::isr32()+0x9c>)
     4ae:	ldrh	r4, [r5, #0]
    if (offset <= AUDIO_BLOCK_SAMPLES/2) {
     4b0:	cmp	r4, #64	; 0x40
     4b2:	bhi.n	4e8 <I2S_32::isr32()+0x74>
      dest_left = &(left->data[offset]);
     4b4:	lsls	r2, r4, #1
     4b6:	add	r1, r2
      dest_right = &(right->data[offset]);
     4b8:	add	r0, r2
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
     4ba:	add.w	r2, r4, #64	; 0x40
     4be:	ldr	r4, [pc, #84]	; (514 <I2S_32::isr32()+0xa0>)
     4c0:	strh	r2, [r5, #0]
     4c2:	adds	r1, #2
     4c4:	adds	r0, #2
      do {
        *dest_left++ = (*src++)>>I2S_32::shift;
     4c6:	ldr.w	r2, [r3], #8
     4ca:	ldrsh.w	r5, [r4]
     4ce:	asrs	r2, r5
     4d0:	strh.w	r2, [r1, #2]!
        *dest_right++ = (*src++)>>I2S_32::shift;
     4d4:	ldr.w	r2, [r3, #-4]
     4d8:	ldrsh.w	r5, [r4]
      } while (src < end);
     4dc:	cmp	r6, r3
      dest_left = &(left->data[offset]);
      dest_right = &(right->data[offset]);
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
      do {
        *dest_left++ = (*src++)>>I2S_32::shift;
        *dest_right++ = (*src++)>>I2S_32::shift;
     4de:	asr.w	r2, r2, r5
     4e2:	strh.w	r2, [r0, #2]!
      } while (src < end);
     4e6:	bhi.n	4c6 <I2S_32::isr32()+0x52>
    }
  }
}
     4e8:	pop	{r4, r5, r6}
     4ea:	bx	lr
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     4ec:	add.w	r6, r3, #512	; 0x200
     4f0:	b.n	4a0 <I2S_32::isr32()+0x2c>
     4f2:	nop
     4f4:	.word	0x20019eac
     4f8:	.word	0x1fff0400
     4fc:	.word	0x4000801f
     500:	.word	0x20019ba8
     504:	.word	0xe000e208
     508:	.word	0x20019e3c
     50c:	.word	0x20019b6c
     510:	.word	0x2001a6dc
     514:	.word	0x2001453e

00000518 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     518:	mov.w	r0, #4294967295
     51c:	bx	lr
     51e:	nop

00000520 <I2S_32::update()>:
    }
  }
}

void I2S_32::update(void)
{
     520:	push	{r3, r4, r5, r6, r7, lr}
     522:	mov	r6, r0
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
     524:	bl	9ef0 <AudioStream::allocate()>
  if (new_left != NULL) {
     528:	mov	r4, r0
     52a:	cbz	r0, 568 <I2S_32::update()+0x48>
    new_right = allocate();
     52c:	bl	9ef0 <AudioStream::allocate()>
    if (new_right == NULL) {
     530:	mov	r5, r0
     532:	cmp	r0, #0
     534:	beq.n	5ac <I2S_32::update()+0x8c>
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     536:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     538:	ldr	r3, [pc, #124]	; (5b8 <I2S_32::update()+0x98>)
     53a:	ldrh	r2, [r3, #0]
     53c:	cmp	r2, #127	; 0x7f
     53e:	bhi.n	574 <I2S_32::update()+0x54>
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
  } else if (new_left != NULL) {
     540:	cmp	r4, #0
     542:	beq.n	5a8 <I2S_32::update()+0x88>
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
     544:	ldr	r1, [pc, #116]	; (5bc <I2S_32::update()+0x9c>)
     546:	ldr	r2, [r1, #0]
     548:	cbz	r2, 55c <I2S_32::update()+0x3c>
      block_right = new_right;
      block_offset = 0;
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
     54a:	cpsie	i
      release(new_left);
     54c:	mov	r0, r4
     54e:	bl	9f98 <AudioStream::release(audio_block_struct*)>
      release(new_right);
     552:	mov	r0, r5
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     554:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
      release(new_left);
      release(new_right);
     558:	b.w	9f98 <AudioStream::release(audio_block_struct*)>
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
      block_right = new_right;
     55c:	ldr	r0, [pc, #96]	; (5c0 <I2S_32::update()+0xa0>)
  } else if (new_left != NULL) {
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
     55e:	str	r4, [r1, #0]
      block_right = new_right;
      block_offset = 0;
     560:	strh	r2, [r3, #0]
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
      block_right = new_right;
     562:	str	r5, [r0, #0]
      block_offset = 0;
      __enable_irq();
     564:	cpsie	i
     566:	pop	{r3, r4, r5, r6, r7, pc}
  }
}

void I2S_32::update(void)
{
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     568:	mov	r5, r0
    if (new_right == NULL) {
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     56a:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     56c:	ldr	r3, [pc, #72]	; (5b8 <I2S_32::update()+0x98>)
     56e:	ldrh	r2, [r3, #0]
     570:	cmp	r2, #127	; 0x7f
     572:	bls.n	540 <I2S_32::update()+0x20>
      { block_left->data[64]=1<<10;
        block_right->data[32]=1<<9;
        count=0;
      }
#endif
    out_left = block_left;
     574:	ldr	r2, [pc, #68]	; (5bc <I2S_32::update()+0x9c>)
    block_left = new_left;
    out_right = block_right;
     576:	ldr	r1, [pc, #72]	; (5c0 <I2S_32::update()+0xa0>)
      { block_left->data[64]=1<<10;
        block_right->data[32]=1<<9;
        count=0;
      }
#endif
    out_left = block_left;
     578:	ldr	r7, [r2, #0]
    block_left = new_left;
     57a:	str	r4, [r2, #0]
    out_right = block_right;
    block_right = new_right;
    block_offset = 0;
     57c:	movs	r2, #0
        count=0;
      }
#endif
    out_left = block_left;
    block_left = new_left;
    out_right = block_right;
     57e:	ldr	r4, [r1, #0]
    block_right = new_right;
    block_offset = 0;
     580:	strh	r2, [r3, #0]
      }
#endif
    out_left = block_left;
    block_left = new_left;
    out_right = block_right;
    block_right = new_right;
     582:	str	r5, [r1, #0]
    block_offset = 0;
    __enable_irq();
     584:	cpsie	i
    
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
     586:	mov	r1, r7
     588:	mov	r0, r6
     58a:	bl	9fec <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     58e:	mov	r0, r7
     590:	bl	9f98 <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     594:	mov	r0, r6
     596:	mov	r1, r4
     598:	movs	r2, #1
     59a:	bl	9fec <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     59e:	mov	r0, r4
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     5a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
     5a4:	b.w	9f98 <AudioStream::release(audio_block_struct*)>
    }
  } else {
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
     5a8:	cpsie	i
     5aa:	pop	{r3, r4, r5, r6, r7, pc}
  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
  if (new_left != NULL) {
    new_right = allocate();
    if (new_right == NULL) {
      release(new_left);
     5ac:	mov	r0, r4
     5ae:	bl	9f98 <AudioStream::release(audio_block_struct*)>
      new_left = NULL;
     5b2:	mov	r4, r5
     5b4:	b.n	536 <I2S_32::update()+0x16>
     5b6:	nop
     5b8:	.word	0x2001a6dc
     5bc:	.word	0x20019e3c
     5c0:	.word	0x20019b6c

000005c4 <mRecordQueue<250>::update()>:
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     5c4:	push	{r4, lr}
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     5c6:	movs	r1, #0
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     5c8:	mov	r4, r0
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     5ca:	bl	a020 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     5ce:	cbz	r0, 5fc <mRecordQueue<250>::update()+0x38>
	if (!enabled) {
     5d0:	ldrh.w	r3, [r4, #1040]	; 0x410
     5d4:	uxth	r3, r3
     5d6:	cbz	r3, 5fe <mRecordQueue<250>::update()+0x3a>
		release(block);
		return;
	}
	h = head + 1;
     5d8:	ldrh.w	r3, [r4, #1036]	; 0x40c
	if (h >= mq) h = 0;
	if (h == tail) {
     5dc:	ldrh.w	r2, [r4, #1038]	; 0x40e
	if (!block) return;
	if (!enabled) {
		release(block);
		return;
	}
	h = head + 1;
     5e0:	adds	r3, #1
     5e2:	uxth	r3, r3
	if (h >= mq) h = 0;
     5e4:	cmp	r3, #250	; 0xfa
     5e6:	it	cs
     5e8:	movcs	r3, #0
	if (h == tail) {
     5ea:	uxth	r2, r2
     5ec:	cmp	r3, r2
     5ee:	beq.n	606 <mRecordQueue<250>::update()+0x42>
		release(block); // drop incomming data
    dropCount++; // flag for main to know
	} else {
		queue[h] = block; // store incomming data
     5f0:	add.w	r2, r3, #8
     5f4:	str.w	r0, [r4, r2, lsl #2]
		head = h;
     5f8:	strh.w	r3, [r4, #1036]	; 0x40c
     5fc:	pop	{r4, pc}
	}
}
     5fe:	ldmia.w	sp!, {r4, lr}
	uint16_t h;

	block = receiveReadOnly();
	if (!block) return;
	if (!enabled) {
		release(block);
     602:	b.w	9f98 <AudioStream::release(audio_block_struct*)>
		return;
	}
	h = head + 1;
	if (h >= mq) h = 0;
	if (h == tail) {
		release(block); // drop incomming data
     606:	bl	9f98 <AudioStream::release(audio_block_struct*)>
    dropCount++; // flag for main to know
     60a:	ldr	r3, [r4, #24]
     60c:	adds	r3, #1
     60e:	str	r3, [r4, #24]
     610:	pop	{r4, pc}
     612:	nop

00000614 <mDelay<2, 12>::update()>:
template <int nch, int mq>
void mDelay<nch,mq>::update(void)
{
  audio_block_t *block;

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
     614:	ldrh.w	r3, [r0, #130]	; 0x82
     618:	uxth	r3, r3
  for(int ii=0; ii<nch; ii++) for (int jj=0; jj<mq; jj++) queue[ii][jj]=NULL;
  head=mq;
}

template <int nch, int mq>
void mDelay<nch,mq>::update(void)
     61a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     61e:	mov	r5, r0
{
  audio_block_t *block;

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
     620:	cbz	r3, 62c <mDelay<2, 12>::update()+0x18>
     622:	ldrh.w	r3, [r0, #130]	; 0x82
     626:	uxth	r3, r3
     628:	cmp	r3, #11
     62a:	bls.n	654 <mDelay<2, 12>::update()+0x40>
  for(int ii=0; ii<nch; ii++) for (int jj=0; jj<mq; jj++) queue[ii][jj]=NULL;
  head=mq;
}

template <int nch, int mq>
void mDelay<nch,mq>::update(void)
     62c:	movs	r4, #0

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
    {
      block = receiveReadOnly(ii);
     62e:	mov	r1, r4
     630:	mov	r0, r5
     632:	bl	a020 <AudioStream::receiveReadOnly(unsigned int)>
      if(block)
      {
        transmit(block,ii);
     636:	uxtb	r2, r4
  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
    {
      block = receiveReadOnly(ii);
      if(block)
     638:	mov	r6, r0
{
  audio_block_t *block;

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
     63a:	adds	r4, #1
    {
      block = receiveReadOnly(ii);
      if(block)
      {
        transmit(block,ii);
     63c:	mov	r1, r0
  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
    {
      block = receiveReadOnly(ii);
      if(block)
     63e:	cbz	r0, 64c <mDelay<2, 12>::update()+0x38>
      {
        transmit(block,ii);
     640:	mov	r0, r5
     642:	bl	9fec <AudioStream::transmit(audio_block_struct*, unsigned char)>
        release(block);        
     646:	mov	r0, r6
     648:	bl	9f98 <AudioStream::release(audio_block_struct*)>
{
  audio_block_t *block;

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
     64c:	cmp	r4, #2
     64e:	bne.n	62e <mDelay<2, 12>::update()+0x1a>
     650:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    return;
  }
  //
  
  uint16_t h = (head + 1) % mq;
     654:	ldrh.w	r2, [r0, #128]	; 0x80
     658:	ldr	r4, [pc, #156]	; (6f8 <mDelay<2, 12>::update()+0xe4>)
     65a:	uxth	r2, r2
     65c:	adds	r2, #1
     65e:	smull	r3, r4, r4, r2
     662:	asrs	r3, r2, #31
     664:	rsb	r4, r3, r4, asr #1
     668:	add.w	r4, r4, r4, lsl #1
     66c:	sub.w	r4, r2, r4, lsl #2
  for(int ii=0;ii<nch;ii++)
     670:	movs	r7, #0
     672:	add.w	r6, r7, r7, lsl #1
     676:	add.w	r6, r4, r6, lsl #2
     67a:	add.w	r6, r5, r6, lsl #2
  {
    if(queue[ii][h]) release(queue[ii][h]);
     67e:	ldr	r3, [r6, #32]
     680:	cbz	r3, 688 <mDelay<2, 12>::update()+0x74>
     682:	ldr	r0, [r6, #32]
     684:	bl	9f98 <AudioStream::release(audio_block_struct*)>
    block = receiveReadOnly(ii);
     688:	mov	r1, r7
     68a:	mov	r0, r5
     68c:	bl	a020 <AudioStream::receiveReadOnly(unsigned int)>
    return;
  }
  //
  
  uint16_t h = (head + 1) % mq;
  for(int ii=0;ii<nch;ii++)
     690:	adds	r7, #1
     692:	cmp	r7, #2
  {
    if(queue[ii][h]) release(queue[ii][h]);
    block = receiveReadOnly(ii);
    if(block)
    {
      queue[ii][h]=block;
     694:	str	r0, [r6, #32]
    return;
  }
  //
  
  uint16_t h = (head + 1) % mq;
  for(int ii=0;ii<nch;ii++)
     696:	bne.n	672 <mDelay<2, 12>::update()+0x5e>
    }
    return;
  }
  //
  
  uint16_t h = (head + 1) % mq;
     698:	uxth	r4, r4
      queue[ii][h]=block;
    }
    else
      queue[ii][h]=NULL;
  }
  head = h;
     69a:	strh.w	r4, [r5, #128]	; 0x80

  uint16_t index = ((head  + mq) - numDelay) % mq;
     69e:	ldrh.w	r3, [r5, #128]	; 0x80
     6a2:	ldrh.w	r1, [r5, #130]	; 0x82
     6a6:	ldr	r6, [pc, #80]	; (6f8 <mDelay<2, 12>::update()+0xe4>)
     6a8:	uxth	r3, r3
     6aa:	add.w	r2, r3, #12
     6ae:	uxth	r3, r1
     6b0:	subs	r3, r2, r3
     6b2:	smull	r2, r6, r6, r3
     6b6:	asrs	r2, r3, #31
     6b8:	rsb	r6, r2, r6, asr #1
     6bc:	add.w	r6, r6, r6, lsl #1
     6c0:	sub.w	r3, r3, r6, lsl #2
  for(int ii=0;ii<nch;ii++)
     6c4:	movs	r7, #0
     6c6:	uxth	r6, r3
  {
    if(queue[ii][index])
    {
      transmit(queue[ii][index],ii);
      release(queue[ii][index]);
      queue[ii][index]=NULL;
     6c8:	mov	r8, r7
     6ca:	add.w	r4, r7, r7, lsl #1
     6ce:	add.w	r4, r6, r4, lsl #2
     6d2:	add.w	r4, r5, r4, lsl #2
  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
  {
    if(queue[ii][index])
    {
      transmit(queue[ii][index],ii);
     6d6:	uxtb	r2, r7
  head = h;

  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
  {
    if(queue[ii][index])
     6d8:	ldr	r3, [r4, #32]
      queue[ii][h]=NULL;
  }
  head = h;

  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
     6da:	adds	r7, #1
  {
    if(queue[ii][index])
    {
      transmit(queue[ii][index],ii);
     6dc:	mov	r0, r5
  head = h;

  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
  {
    if(queue[ii][index])
     6de:	cbz	r3, 6f0 <mDelay<2, 12>::update()+0xdc>
    {
      transmit(queue[ii][index],ii);
     6e0:	ldr	r1, [r4, #32]
     6e2:	bl	9fec <AudioStream::transmit(audio_block_struct*, unsigned char)>
      release(queue[ii][index]);
     6e6:	ldr	r0, [r4, #32]
     6e8:	bl	9f98 <AudioStream::release(audio_block_struct*)>
      queue[ii][index]=NULL;
     6ec:	str.w	r8, [r4, #32]
      queue[ii][h]=NULL;
  }
  head = h;

  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
     6f0:	cmp	r7, #2
     6f2:	bne.n	6ca <mDelay<2, 12>::update()+0xb6>
     6f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     6f8:	.word	0x2aaaaaab

000006fc <mProcess::update()>:
  for(int ii=0; ii< ndat; ii++) {avg+=aux[ii]; }
  return avg/ndat;
}

void mProcess::update(void)
{
     6fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  audio_block_t *inp1, *inp2;//, *tmp1, *tmp2;
  inp1=receiveReadOnly(0);
     700:	movs	r1, #0
  for(int ii=0; ii< ndat; ii++) {avg+=aux[ii]; }
  return avg/ndat;
}

void mProcess::update(void)
{
     702:	sub	sp, #12
     704:	mov	r4, r0
  audio_block_t *inp1, *inp2;//, *tmp1, *tmp2;
  inp1=receiveReadOnly(0);
     706:	bl	a020 <AudioStream::receiveReadOnly(unsigned int)>
  inp2=receiveReadOnly(1);
     70a:	movs	r1, #1
}

void mProcess::update(void)
{
  audio_block_t *inp1, *inp2;//, *tmp1, *tmp2;
  inp1=receiveReadOnly(0);
     70c:	mov	r5, r0
  inp2=receiveReadOnly(1);
     70e:	mov	r0, r4
     710:	bl	a020 <AudioStream::receiveReadOnly(unsigned int)>
     714:	mov	r6, r0
  
  if(!inp1 && !inp2) return; // have no input data
     716:	cmp	r5, #0
     718:	beq.w	906 <mProcess::update()+0x20a>
  if(thresh<0) // don't run detector
     71c:	ldr	r3, [r4, #56]	; 0x38
     71e:	cmp	r3, #0
     720:	blt.w	8f0 <mProcess::update()+0x1f4>
  nest2=1<<10;
}

// 6dB/octave high-pass filter
inline void mDiff(int32_t *aux, int16_t *inp, int16_t ndat, int16_t old)
{ aux[0]=(inp[0]-old);
     724:	mov	r1, r5
     726:	ldr	r3, [pc, #516]	; (92c <mProcess::update()+0x230>)
     728:	ldrsh.w	r2, [r1, #4]!
     72c:	str	r2, [r3, #0]
     72e:	mov	ip, r3
     730:	mov	lr, r3
     732:	add.w	r0, r3, #508	; 0x1fc
     736:	mov	r3, r1
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
     738:	ldrsh.w	r2, [r1, #2]
     73c:	ldrsh.w	r3, [r3]
     740:	subs	r3, r2, r3
     742:	str.w	r3, [lr, #4]!
     746:	cmp	r0, lr
     748:	add.w	r1, r1, #2
     74c:	bne.n	736 <mProcess::update()+0x3a>
     74e:	ldr	r1, [pc, #480]	; (930 <mProcess::update()+0x234>)
     750:	mov.w	lr, #0
     754:	mov	r2, r1
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
  { aux[ii] = aux[ii]*aux[ii];  // assume data are 16 bit
     756:	ldr.w	r3, [r2, #4]!
     75a:	mul.w	r3, r3, r3
     75e:	cmp	lr, r3
     760:	it	lt
     762:	movlt	lr, r3
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
     764:	cmp	r2, r0
  { aux[ii] = aux[ii]*aux[ii];  // assume data are 16 bit
     766:	str	r3, [r2, #0]
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
     768:	bne.n	756 <mProcess::update()+0x5a>
  //
  // first channel
  if(inp1)
  {
    mDiff(aux, inp1->data, ndat, 0);
    max1Val = mSig(aux, ndat);
     76a:	str.w	lr, [r4, #40]	; 0x28
  }
  return maxVal;
}

inline int32_t avg(int32_t *aux, int16_t ndat)
{ int64_t avg=0;
     76e:	movs	r2, #0
     770:	movs	r3, #0
  for(int ii=0; ii< ndat; ii++) {avg+=aux[ii]; }
     772:	ldr.w	r7, [r1, #4]!
     776:	adds	r2, r2, r7
     778:	adc.w	r3, r3, r7, asr #31
     77c:	cmp	r1, r0
     77e:	bne.n	772 <mProcess::update()+0x76>
  // first channel
  if(inp1)
  {
    mDiff(aux, inp1->data, ndat, 0);
    max1Val = mSig(aux, ndat);
    avg1Val = avg(aux, ndat);
     780:	cmp	r2, #0
     782:	sbcs.w	r1, r3, #0
     786:	blt.w	8e2 <mProcess::update()+0x1e6>
     78a:	lsrs	r2, r2, #7
     78c:	orr.w	r2, r2, r3, lsl #25
     790:	str	r2, [r4, #48]	; 0x30
    max1Val = 0;
    avg1Val = 0;
  }
  
  // second channel
  if(inp2)
     792:	cmp	r6, #0
     794:	beq.w	91a <mProcess::update()+0x21e>
  nest2=1<<10;
}

// 6dB/octave high-pass filter
inline void mDiff(int32_t *aux, int16_t *inp, int16_t ndat, int16_t old)
{ aux[0]=(inp[0]-old);
     798:	mov	r1, r6
     79a:	ldr	r0, [pc, #400]	; (92c <mProcess::update()+0x230>)
     79c:	ldrsh.w	r3, [r1, #4]!
     7a0:	str.w	r3, [ip]
     7a4:	add.w	r7, r0, #508	; 0x1fc
     7a8:	mov	r3, r1
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
     7aa:	ldrsh.w	r2, [r1, #2]
     7ae:	ldrsh.w	r3, [r3]
     7b2:	subs	r3, r2, r3
     7b4:	str.w	r3, [r0, #4]!
     7b8:	cmp	r7, r0
     7ba:	add.w	r1, r1, #2
     7be:	bne.n	7a8 <mProcess::update()+0xac>
     7c0:	ldr	r1, [pc, #364]	; (930 <mProcess::update()+0x234>)
     7c2:	movs	r0, #0
     7c4:	mov	r2, r1
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
  { aux[ii] = aux[ii]*aux[ii];  // assume data are 16 bit
     7c6:	ldr.w	r3, [r2, #4]!
     7ca:	mul.w	r3, r3, r3
     7ce:	cmp	r0, r3
     7d0:	it	lt
     7d2:	movlt	r0, r3
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
     7d4:	cmp	r2, r7
  { aux[ii] = aux[ii]*aux[ii];  // assume data are 16 bit
     7d6:	str	r3, [r2, #0]
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
     7d8:	bne.n	7c6 <mProcess::update()+0xca>
  
  // second channel
  if(inp2)
  {
    mDiff(aux, inp2->data, ndat, 0);//out2? out2->data[ndat-1]: tmp2->data[0]);
    max2Val = mSig(aux, ndat);
     7da:	str	r0, [r4, #44]	; 0x2c
  }
  return maxVal;
}

inline int32_t avg(int32_t *aux, int16_t ndat)
{ int64_t avg=0;
     7dc:	movs	r2, #0
     7de:	movs	r3, #0
  for(int ii=0; ii< ndat; ii++) {avg+=aux[ii]; }
     7e0:	ldr.w	r0, [r1, #4]!
     7e4:	adds	r2, r2, r0
     7e6:	adc.w	r3, r3, r0, asr #31
     7ea:	cmp	r7, r1
     7ec:	bne.n	7e0 <mProcess::update()+0xe4>
  // second channel
  if(inp2)
  {
    mDiff(aux, inp2->data, ndat, 0);//out2? out2->data[ndat-1]: tmp2->data[0]);
    max2Val = mSig(aux, ndat);
    avg2Val = avg(aux, ndat);
     7ee:	cmp	r2, #0
     7f0:	sbcs.w	r1, r3, #0
     7f4:	blt.n	8da <mProcess::update()+0x1de>
     7f6:	lsrs	r2, r2, #7
     7f8:	orr.w	r2, r2, r3, lsl #25
     7fc:	str	r2, [r4, #52]	; 0x34
    max2Val = 0;
    avg2Val = 0;
  }
  
  //  done with processing of input data: release input buffers
  if(inp1) release(inp1);
     7fe:	cbz	r5, 806 <mProcess::update()+0x10a>
     800:	mov	r0, r5
     802:	bl	9f98 <AudioStream::release(audio_block_struct*)>
  if(inp2) release(inp2);
     806:	mov	r0, r6
     808:	bl	9f98 <AudioStream::release(audio_block_struct*)>
     80c:	ldr	r6, [r4, #44]	; 0x2c
     80e:	ldr.w	r9, [r4, #52]	; 0x34
  // if sigCount>0, new detections will reset sigCount to max value (extr+ndel)
  // if sigCount reaches 0, storage will be closed.
  // new detections are only accepted if sigCount gets less than -inhib
  //

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) sigCount=extr+ndel; // retrigger extraction
     812:	ldr	r3, [r4, #32]
  
  //  done with processing of input data: release input buffers
  if(inp1) release(inp1);
  if(inp2) release(inp2);

  int32_t det1 = (max1Val > thresh*nest1);
     814:	ldr	r2, [r4, #56]	; 0x38
     816:	ldr	r0, [r4, #80]	; 0x50
     818:	ldr	r1, [r4, #72]	; 0x48
     81a:	ldr.w	r8, [r4, #40]	; 0x28
  int32_t det2 = (max2Val > thresh*nest2);
     81e:	ldr	r7, [r4, #84]	; 0x54
  // if sigCount>0, new detections will reset sigCount to max value (extr+ndel)
  // if sigCount reaches 0, storage will be closed.
  // new detections are only accepted if sigCount gets less than -inhib
  //

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) sigCount=extr+ndel; // retrigger extraction
     820:	cmp	r3, #0
  
  //  done with processing of input data: release input buffers
  if(inp1) release(inp1);
  if(inp2) release(inp2);

  int32_t det1 = (max1Val > thresh*nest1);
     822:	mul.w	r5, r0, r2
     826:	rsb	r1, r1, #0
  // if sigCount>0, new detections will reset sigCount to max value (extr+ndel)
  // if sigCount reaches 0, storage will be closed.
  // new detections are only accepted if sigCount gets less than -inhib
  //

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) sigCount=extr+ndel; // retrigger extraction
     82a:	ble.n	8ea <mProcess::update()+0x1ee>
     82c:	cmp	r8, r5
     82e:	ble.n	8d0 <mProcess::update()+0x1d4>
     830:	ldr	r2, [r4, #68]	; 0x44
     832:	ldr	r3, [r4, #76]	; 0x4c
     834:	add	r3, r2
     836:	str	r3, [r4, #32]
  if(sigCount>0) detCount++;
     838:	cmp	r3, #0
     83a:	ble.n	842 <mProcess::update()+0x146>
     83c:	ldr	r2, [r4, #36]	; 0x24
     83e:	adds	r2, #1
     840:	str	r2, [r4, #36]	; 0x24

  // reduce sigCount to a minimal value providing the possibility of a guard window
  // between two detections
  sigCount--; if(sigCount< -inhib) sigCount = -inhib; 
     842:	subs	r3, #1
     844:	cmp	r3, r1
     846:	itet	lt
     848:	movlt	r3, r1
     84a:	strge	r3, [r4, #32]
     84c:	strlt	r1, [r4, #32]

  // update background noise estimate
  uint32_t winx;
  // change averaging window according to detection status
  if(sigCount<0) winx=win0; else winx=win1;
     84e:	cmp	r3, #0
     850:	ite	lt
     852:	ldrlt	r5, [r4, #60]	; 0x3c
     854:	ldrge	r5, [r4, #64]	; 0x40
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
     856:	ldr	r1, [r4, #48]	; 0x30
     858:	umull	r2, r3, r0, r5
     85c:	mov.w	fp, r0, asr #31
     860:	subs	r0, r1, r0
     862:	adds.w	sl, r2, r0
     866:	mla	r3, r5, fp, r3
     86a:	adc.w	fp, r3, r0, asr #31
     86e:	mov	r2, r5
     870:	mov	r0, sl
     872:	movs	r3, #0
     874:	mov	r1, fp
     876:	bl	b5e8 <__aeabi_ldivmod>
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   
     87a:	asrs	r3, r7, #31
  // update background noise estimate
  uint32_t winx;
  // change averaging window according to detection status
  if(sigCount<0) winx=win0; else winx=win1;
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
     87c:	mov	sl, r0
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   
     87e:	umull	r0, r1, r7, r5
     882:	rsb	r7, r7, r9
     886:	adds	r0, r0, r7
     888:	mla	r1, r5, r3, r1
     88c:	adc.w	r1, r1, r7, asr #31
     890:	mov	r2, r5
     892:	movs	r3, #0
  // update background noise estimate
  uint32_t winx;
  // change averaging window according to detection status
  if(sigCount<0) winx=win0; else winx=win1;
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
     894:	str.w	sl, [r4, #80]	; 0x50
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   
     898:	bl	b5e8 <__aeabi_ldivmod>

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     89c:	ldr	r2, [pc, #148]	; (934 <mProcess::update()+0x238>)
  uint32_t winx;
  // change averaging window according to detection status
  if(sigCount<0) winx=win0; else winx=win1;
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   
     89e:	str	r0, [r4, #84]	; 0x54

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     8a0:	ldr	r3, [r2, #0]
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
     8a2:	cmp	r0, sl
     8a4:	it	lt
     8a6:	movlt	r0, sl
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     8a8:	cmp	r0, r3
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
     8aa:	str	r0, [sp, #4]
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     8ac:	ite	hi
     8ae:	ldrhi	r1, [sp, #4]
     8b0:	ldrls	r1, [r2, #0]
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
  maxValue=(tmp>maxValue)? tmp:maxValue;
     8b2:	ldr	r3, [pc, #132]	; (938 <mProcess::update()+0x23c>)
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     8b4:	str	r1, [r2, #0]
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
  maxValue=(tmp>maxValue)? tmp:maxValue;
     8b6:	ldr	r2, [r3, #0]

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
     8b8:	cmp	r6, r8
     8ba:	it	lt
     8bc:	movlt	r6, r8
  maxValue=(tmp>maxValue)? tmp:maxValue;
     8be:	cmp	r6, r2

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
     8c0:	str	r6, [sp, #4]
  maxValue=(tmp>maxValue)? tmp:maxValue;
     8c2:	ite	hi
     8c4:	ldrhi	r2, [sp, #4]
     8c6:	ldrls	r2, [r3, #0]
     8c8:	str	r2, [r3, #0]
}
     8ca:	add	sp, #12
     8cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // if sigCount>0, new detections will reset sigCount to max value (extr+ndel)
  // if sigCount reaches 0, storage will be closed.
  // new detections are only accepted if sigCount gets less than -inhib
  //

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) sigCount=extr+ndel; // retrigger extraction
     8d0:	mul.w	r2, r7, r2
     8d4:	cmp	r2, r6
     8d6:	bge.n	838 <mProcess::update()+0x13c>
     8d8:	b.n	830 <mProcess::update()+0x134>
  // second channel
  if(inp2)
  {
    mDiff(aux, inp2->data, ndat, 0);//out2? out2->data[ndat-1]: tmp2->data[0]);
    max2Val = mSig(aux, ndat);
    avg2Val = avg(aux, ndat);
     8da:	adds	r2, #127	; 0x7f
     8dc:	adc.w	r3, r3, #0
     8e0:	b.n	7f6 <mProcess::update()+0xfa>
  // first channel
  if(inp1)
  {
    mDiff(aux, inp1->data, ndat, 0);
    max1Val = mSig(aux, ndat);
    avg1Val = avg(aux, ndat);
     8e2:	adds	r2, #127	; 0x7f
     8e4:	adc.w	r3, r3, #0
     8e8:	b.n	78a <mProcess::update()+0x8e>
  // if sigCount>0, new detections will reset sigCount to max value (extr+ndel)
  // if sigCount reaches 0, storage will be closed.
  // new detections are only accepted if sigCount gets less than -inhib
  //

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) sigCount=extr+ndel; // retrigger extraction
     8ea:	cmp	r3, r1
     8ec:	bgt.n	842 <mProcess::update()+0x146>
     8ee:	b.n	82c <mProcess::update()+0x130>
  inp2=receiveReadOnly(1);
  
  if(!inp1 && !inp2) return; // have no input data
  if(thresh<0) // don't run detector
  {
    if(inp1) release(inp1);
     8f0:	mov	r0, r5
     8f2:	bl	9f98 <AudioStream::release(audio_block_struct*)>
    if(inp2) release(inp2);
     8f6:	cmp	r6, #0
     8f8:	beq.n	8ca <mProcess::update()+0x1ce>
     8fa:	mov	r0, r6
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
  maxValue=(tmp>maxValue)? tmp:maxValue;
}
     8fc:	add	sp, #12
     8fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  if(!inp1 && !inp2) return; // have no input data
  if(thresh<0) // don't run detector
  {
    if(inp1) release(inp1);
    if(inp2) release(inp2);
     902:	b.w	9f98 <AudioStream::release(audio_block_struct*)>
{
  audio_block_t *inp1, *inp2;//, *tmp1, *tmp2;
  inp1=receiveReadOnly(0);
  inp2=receiveReadOnly(1);
  
  if(!inp1 && !inp2) return; // have no input data
     906:	cmp	r0, #0
     908:	beq.n	8ca <mProcess::update()+0x1ce>
  if(thresh<0) // don't run detector
     90a:	ldr	r3, [r4, #56]	; 0x38
     90c:	cmp	r3, #0
     90e:	blt.n	8fa <mProcess::update()+0x1fe>
     910:	ldr.w	ip, [pc, #24]	; 92c <mProcess::update()+0x230>
    max1Val = mSig(aux, ndat);
    avg1Val = avg(aux, ndat);
  }
  else
  {
    max1Val = 0;
     914:	str	r5, [r4, #40]	; 0x28
    avg1Val = 0;
     916:	str	r5, [r4, #48]	; 0x30
     918:	b.n	798 <mProcess::update()+0x9c>
    max2Val = mSig(aux, ndat);
    avg2Val = avg(aux, ndat);
  }
  else
  {
    max2Val = 0;
     91a:	str	r6, [r4, #44]	; 0x2c
    avg2Val = 0;
     91c:	str	r6, [r4, #52]	; 0x34
  }
  
  //  done with processing of input data: release input buffers
  if(inp1) release(inp1);
     91e:	mov	r0, r5
     920:	bl	9f98 <AudioStream::release(audio_block_struct*)>
     924:	ldr	r6, [r4, #44]	; 0x2c
     926:	ldr.w	r9, [r4, #52]	; 0x34
     92a:	b.n	812 <mProcess::update()+0x116>
     92c:	.word	0x200156a8
     930:	.word	0x200156a4
     934:	.word	0x20019bac
     938:	.word	0x2001a6e0

0000093c <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

#include <TimeLib.h>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     93c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     940:	mov	r7, r1
     942:	mov	r6, r2
     944:	mov	r8, r0
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     946:	bl	2ee8 <year()>
     94a:	mov	r4, r0
     94c:	bl	2ec8 <month()>
     950:	mov	r5, r0
     952:	bl	2ea8 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     956:	subw	r3, r4, #1980	; 0x7bc
     95a:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     95c:	cmp	r3, #127	; 0x7f
     95e:	bhi.n	966 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     960:	uxtb	r2, r5
     962:	cmp	r2, #12
     964:	bls.n	9be <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     966:	movs	r3, #0
     968:	strh.w	r3, [r8]

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(hour(), minute(), second());
     96c:	bl	2e48 <hour()>
     970:	mov	r4, r0
     972:	bl	2e68 <minute()>
     976:	mov	r5, r0
     978:	bl	2e88 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     97c:	uxtb	r3, r4
     97e:	cmp	r3, #23
     980:	bhi.n	988 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     982:	uxtb	r3, r5
     984:	cmp	r3, #59	; 0x3b
     986:	bls.n	9a0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     988:	movs	r3, #0
     98a:	strh	r3, [r7, #0]

  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
     98c:	bl	2e88 <second()>
     990:	tst.w	r0, #1
     994:	ite	ne
     996:	movne	r3, #100	; 0x64
     998:	moveq	r3, #0
     99a:	strb	r3, [r6, #0]
     99c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     9a0:	uxtb	r3, r0
     9a2:	cmp	r3, #59	; 0x3b
     9a4:	bhi.n	988 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     9a6:	lsls	r4, r4, #11
     9a8:	lsls	r3, r5, #5
     9aa:	and.w	r4, r4, #522240	; 0x7f800
     9ae:	and.w	r3, r3, #8160	; 0x1fe0
     9b2:	orrs	r3, r4
     9b4:	ubfx	r0, r0, #1, #7
     9b8:	orrs	r3, r0
     9ba:	uxth	r3, r3
     9bc:	b.n	98a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     9be:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     9c0:	cmp	r0, #31
     9c2:	bhi.n	966 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     9c4:	lsls	r5, r5, #5
     9c6:	and.w	r5, r5, #8160	; 0x1fe0
     9ca:	orrs	r0, r5
     9cc:	orr.w	r3, r0, r3, lsl #9
     9d0:	uxth	r3, r3
     9d2:	b.n	968 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

000009d4 <c_uSD::~c_uSD()>:
int16_t diskBuffer[BUFFERSIZE];
int16_t *outptr = diskBuffer;

char header[512];

class c_uSD
     9d4:	push	{r4, lr}
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     9d6:	ldr	r3, [pc, #20]	; (9ec <c_uSD::~c_uSD()+0x18>)
     9d8:	str.w	r3, [r0, #1196]	; 0x4ac
     9dc:	mov	r4, r0
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     9de:	addw	r0, r0, #1212	; 0x4bc
     9e2:	bl	6948 <FsBaseFile::close()>
     9e6:	mov	r0, r4
     9e8:	pop	{r4, pc}
     9ea:	nop
     9ec:	.word	0x00012e90

000009f0 <getTeensy3Time()>:
#ifdef __cplusplus
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     9f0:	b.w	88f0 <rtc_get>

000009f4 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     9f4:	push	{r4, lr}
     9f6:	mov	r4, r0
		disconnect();
     9f8:	bl	a0a0 <AudioConnection::disconnect()>
	}
     9fc:	mov	r0, r4
     9fe:	pop	{r4, pc}

00000a00 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     a00:	push	{r4, lr}
     a02:	mov	r4, r0
		release();
     a04:	bl	9a6c <DMAChannel::release()>
	}
     a08:	mov	r0, r4
     a0a:	pop	{r4, pc}

00000a0c <getTime(char*) [clone .constprop.41]>:
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
    return text;  
}

static char * getTime(char *text)
     a0c:	push	{r4, r5, r6, lr}
     a0e:	sub	sp, #8
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
     a10:	bl	2e48 <hour()>
     a14:	mov	r5, r0
     a16:	bl	2e68 <minute()>
     a1a:	mov	r6, r0
     a1c:	bl	2e88 <second()>
     a20:	ldr	r4, [pc, #20]	; (a38 <getTime(char*) [clone .constprop.41]+0x2c>)
     a22:	str	r0, [sp, #0]
     a24:	mov	r3, r6
     a26:	mov	r2, r5
     a28:	mov	r0, r4
     a2a:	ldr	r1, [pc, #16]	; (a3c <getTime(char*) [clone .constprop.41]+0x30>)
     a2c:	bl	c704 <sprintf>
    return text;
}
     a30:	mov	r0, r4
     a32:	add	sp, #8
     a34:	pop	{r4, r5, r6, pc}
     a36:	nop
     a38:	.word	0x20019b70
     a3c:	.word	0x00012ee8

00000a40 <getDate(char*) [clone .constprop.42]>:
*/


#include <TimeLib.h>

static char * getDate(char *text)
     a40:	push	{r4, r5, r6, lr}
     a42:	sub	sp, #8
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
     a44:	bl	2ee8 <year()>
     a48:	mov	r5, r0
     a4a:	bl	2ec8 <month()>
     a4e:	mov	r6, r0
     a50:	bl	2ea8 <day()>
     a54:	ldr	r4, [pc, #20]	; (a6c <getDate(char*) [clone .constprop.42]+0x2c>)
     a56:	str	r0, [sp, #0]
     a58:	mov	r3, r6
     a5a:	mov	r2, r5
     a5c:	mov	r0, r4
     a5e:	ldr	r1, [pc, #16]	; (a70 <getDate(char*) [clone .constprop.42]+0x30>)
     a60:	bl	c704 <sprintf>
    return text;  
}
     a64:	mov	r0, r4
     a66:	add	sp, #8
     a68:	pop	{r4, r5, r6, pc}
     a6a:	nop
     a6c:	.word	0x20019b70
     a70:	.word	0x00012ef8

00000a74 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     a74:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     a76:	cbz	r2, a92 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     a78:	ldrb	r3, [r2, #0]
     a7a:	and.w	r3, r3, #8
     a7e:	and.w	r0, r3, #255	; 0xff
     a82:	cbz	r3, ac6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     a84:	ldr	r3, [r2, #28]
     a86:	ldr	r0, [r2, #20]
     a88:	subs	r0, r3, r0
     a8a:	it	mi
     a8c:	mvnmi.w	r0, #2147483648	; 0x80000000
     a90:	bx	lr
     a92:	ldr	r1, [r0, #76]	; 0x4c
     a94:	cbz	r1, ac8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     a96:	ldrb.w	r3, [r1, #49]	; 0x31
     a9a:	and.w	r3, r3, #8
     a9e:	and.w	r0, r3, #255	; 0xff
     aa2:	cbz	r3, ac6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     aa4:	ldrd	r2, r3, [r1, #16]
     aa8:	ldrd	r0, r1, [r1]
     aac:	subs	r0, r2, r0
     aae:	push	{r4, r5}
     ab0:	sbc.w	r1, r3, r1
     ab4:	movs	r5, #0
     ab6:	mvn.w	r4, #2147483648	; 0x80000000
     aba:	cmp	r5, r1
     abc:	it	eq
     abe:	cmpeq	r4, r0
     ac0:	bcs.n	ac4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     ac2:	mov	r0, r4
    return BaseFile::available();
  }
     ac4:	pop	{r4, r5}
     ac6:	bx	lr
     ac8:	mov	r0, r1
     aca:	bx	lr

00000acc <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     acc:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     ace:	cbz	r3, ad6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     ad0:	mov	r0, r3
     ad2:	b.w	5a34 <FatFile::peek()>
     ad6:	ldr	r0, [r0, #76]	; 0x4c
     ad8:	cbz	r0, ade <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     ada:	b.w	4300 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     ade:	mov.w	r0, #4294967295
     ae2:	bx	lr

00000ae4 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     ae4:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     ae6:	cbz	r3, aee <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     ae8:	mov	r0, r3
     aea:	b.w	5c0c <FatFile::sync()>
     aee:	ldr	r0, [r0, #76]	; 0x4c
     af0:	cbz	r0, af6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     af2:	b.w	505c <ExFatFile::sync()>
     af6:	bx	lr

00000af8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     af8:	push	{lr}
     afa:	ldr	r3, [r0, #72]	; 0x48
     afc:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     afe:	cbz	r3, b1a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     b00:	mov	r0, r3
     b02:	movs	r2, #1
     b04:	add.w	r1, sp, #7
     b08:	bl	589c <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     b0c:	cmp	r0, #1
     b0e:	bne.n	b2a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     b10:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     b14:	add	sp, #12
     b16:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     b1a:	ldr	r0, [r0, #76]	; 0x4c
     b1c:	cbz	r0, b2a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     b1e:	movs	r2, #1
     b20:	add.w	r1, sp, #7
     b24:	bl	4160 <ExFatFile::read(void*, unsigned int)>
     b28:	b.n	b0c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     b2a:	mov.w	r0, #4294967295
     b2e:	b.n	b14 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000b30 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     b30:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     b32:	cbz	r3, b3a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     b34:	mov	r0, r3
     b36:	b.w	5c90 <FatFile::write(void const*, unsigned int)>
     b3a:	ldr	r0, [r0, #76]	; 0x4c
     b3c:	cbz	r0, b42 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     b3e:	b.w	5318 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     b42:	bx	lr

00000b44 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     b44:	push	{lr}
     b46:	ldr	r3, [r0, #72]	; 0x48
     b48:	sub	sp, #12
     b4a:	strb.w	r1, [sp, #7]
     b4e:	cbz	r3, b62 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     b50:	mov	r0, r3
     b52:	movs	r2, #1
     b54:	add.w	r1, sp, #7
     b58:	bl	5c90 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     b5c:	add	sp, #12
     b5e:	ldr.w	pc, [sp], #4
     b62:	ldr	r0, [r0, #76]	; 0x4c
     b64:	cmp	r0, #0
     b66:	beq.n	b5c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     b68:	movs	r2, #1
     b6a:	add.w	r1, sp, #7
     b6e:	bl	5318 <ExFatFile::write(void const*, unsigned int)>
     b72:	add	sp, #12
     b74:	ldr.w	pc, [sp], #4

00000b78 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     b78:	movs	r3, #0
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
     b7a:	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
     b7c:	ldr	r4, [pc, #68]	; (bc4 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
     b7e:	strb	r1, [r0, #9]
     b80:	str	r2, [r0, #16]
     b82:	str	r4, [r0, #0]
			active = false;
     b84:	strb	r3, [r0, #8]
			destination_list = NULL;
     b86:	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
     b88:	cbz	r1, b9c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				inputQueue[i] = NULL;
     b8a:	mov	r1, r3
     b8c:	b.n	b90 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
     b8e:	ldr	r2, [r0, #16]
     b90:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     b94:	ldrb	r2, [r0, #9]
     b96:	adds	r3, #1
     b98:	cmp	r2, r3
     b9a:	bgt.n	b8e <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     b9c:	ldr	r3, [pc, #40]	; (bc8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x50>)
     b9e:	ldr	r2, [r3, #0]
     ba0:	cbnz	r2, ba6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
     ba2:	b.n	bbe <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x46>
     ba4:	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     ba6:	ldr	r3, [r2, #20]
     ba8:	cmp	r3, #0
     baa:	bne.n	ba4 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
				p->next_update = this;
     bac:	str	r0, [r2, #20]
			}
			next_update = NULL;
     bae:	movs	r3, #0
     bb0:	str	r3, [r0, #20]
			cpu_cycles = 0;
     bb2:	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
     bb4:	strh	r3, [r0, #6]
			numConnections = 0;
     bb6:	strb	r3, [r0, #10]
		}
     bb8:	ldr.w	r4, [sp], #4
     bbc:	bx	lr
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     bbe:	str	r0, [r3, #0]
     bc0:	b.n	bae <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
     bc2:	nop
     bc4:	.word	0x00012e6c
     bc8:	.word	0x2001ab90

00000bcc <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     bcc:	push	{r4, r5, r6, lr}
     bce:	mov	r4, r0
     bd0:	mov	r0, r1
     bd2:	mov	r5, r1
     bd4:	bl	c940 <strlen>
     bd8:	ldr	r3, [r4, #0]
     bda:	mov	r2, r0
     bdc:	mov	r1, r5
     bde:	mov	r0, r4
     be0:	ldr	r3, [r3, #4]
     be2:	ldmia.w	sp!, {r4, r5, r6, lr}
     be6:	bx	r3

00000be8 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     be8:	push	{r3, r4, r5, lr}
     bea:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     bec:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     bee:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     bf0:	bl	c940 <strlen>
     bf4:	ldr	r3, [r4, #0]
     bf6:	mov	r2, r0
     bf8:	mov	r1, r5
     bfa:	ldr	r3, [r3, #4]
     bfc:	mov	r0, r4
     bfe:	blx	r3
     c00:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     c02:	mov	r0, r4
     c04:	bl	9d9c <Print::println()>
     c08:	add	r0, r5
     c0a:	pop	{r3, r4, r5, pc}

00000c0c <I2S_32::config_i2s()>:
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     c0c:	ldr	r3, [pc, #160]	; (cb0 <I2S_32::config_i2s()+0xa4>)
  SIM_SCGC7 |= SIM_SCGC7_DMA;
     c0e:	ldr	r1, [pc, #164]	; (cb4 <I2S_32::config_i2s()+0xa8>)
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     c10:	ldr	r2, [r3, #0]
  SIM_SCGC7 |= SIM_SCGC7_DMA;
  SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

  // if either transmitter or receiver is enabled, do nothing
  if (I2S0_TCSR & I2S_TCSR_TE) return;
     c12:	ldr	r0, [pc, #164]	; (cb8 <I2S_32::config_i2s()+0xac>)
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     c14:	orr.w	r2, r2, #32768	; 0x8000
     c18:	str	r2, [r3, #0]
  SIM_SCGC7 |= SIM_SCGC7_DMA;
     c1a:	ldr	r2, [r1, #0]
     c1c:	orr.w	r2, r2, #2
     c20:	str	r2, [r1, #0]
  SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     c22:	ldr	r2, [r3, #0]
     c24:	orr.w	r2, r2, #2
     c28:	str	r2, [r3, #0]

  // if either transmitter or receiver is enabled, do nothing
  if (I2S0_TCSR & I2S_TCSR_TE) return;
     c2a:	ldr	r3, [r0, #0]
     c2c:	cmp	r3, #0
     c2e:	blt.n	cae <I2S_32::config_i2s()+0xa2>
  if (I2S0_RCSR & I2S_RCSR_RE) return;
     c30:	ldr	r3, [pc, #136]	; (cbc <I2S_32::config_i2s()+0xb0>)
     c32:	ldr	r3, [r3, #0]
     c34:	cmp	r3, #0
     c36:	blt.n	cae <I2S_32::config_i2s()+0xa2>

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
     c38:	ldr	r2, [pc, #132]	; (cc0 <I2S_32::config_i2s()+0xb4>)
     c3a:	mov.w	r3, #1124073472	; 0x43000000
     c3e:	str	r3, [r2, #0]
  while (I2S0_MCR & I2S_MCR_DUF) ;
     c40:	ldr	r3, [r2, #0]
     c42:	cmp	r3, #0
     c44:	blt.n	c40 <I2S_32::config_i2s()+0x34>
  #define MCLK_SRC  0  // system clock
#endif
#endif

void I2S_32::config_i2s(void)
{
     c46:	push	{r4, r5, r6, r7, lr}
  if (I2S0_RCSR & I2S_RCSR_RE) return;

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
  while (I2S0_MCR & I2S_MCR_DUF) ;
  I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
     c48:	ldr	r4, [pc, #120]	; (cc4 <I2S_32::config_i2s()+0xb8>)

  // configure transmitter
  I2S0_TMR = 0;
     c4a:	ldr	r0, [pc, #124]	; (cc8 <I2S_32::config_i2s()+0xbc>)
  I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     c4c:	ldr.w	lr, [pc, #168]	; cf8 <I2S_32::config_i2s()+0xec>
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
     c50:	ldr	r1, [pc, #120]	; (ccc <I2S_32::config_i2s()+0xc0>)
  I2S0_TCR3 = I2S_TCR3_TCE;
     c52:	ldr	r3, [pc, #124]	; (cd0 <I2S_32::config_i2s()+0xc4>)
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
     c54:	ldr	r2, [pc, #124]	; (cd4 <I2S_32::config_i2s()+0xc8>)
  I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
     c56:	ldr	r7, [pc, #128]	; (cd8 <I2S_32::config_i2s()+0xcc>)

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
     c58:	ldr	r6, [pc, #128]	; (cdc <I2S_32::config_i2s()+0xd0>)
  I2S0_RCR1 = I2S_RCR1_RFW(1);
     c5a:	ldr	r5, [pc, #132]	; (ce0 <I2S_32::config_i2s()+0xd4>)
  if (I2S0_RCSR & I2S_RCSR_RE) return;

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
  while (I2S0_MCR & I2S_MCR_DUF) ;
  I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
     c5c:	movw	ip, #4112	; 0x1010
     c60:	str.w	ip, [r4]

  // configure transmitter
  I2S0_TMR = 0;
     c64:	movs	r4, #0
     c66:	str	r4, [r0, #0]
  I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     c68:	movs	r0, #1
     c6a:	str.w	r0, [lr]
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
     c6e:	ldr.w	lr, [pc, #140]	; cfc <I2S_32::config_i2s()+0xf0>
     c72:	str.w	lr, [r1]
  I2S0_TCR3 = I2S_TCR3_TCE;
     c76:	mov.w	r1, #65536	; 0x10000
     c7a:	str	r1, [r3, #0]
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
     c7c:	ldr	r3, [pc, #100]	; (ce4 <I2S_32::config_i2s()+0xd8>)
     c7e:	str	r3, [r2, #0]

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
     c80:	ldr.w	lr, [pc, #124]	; d00 <I2S_32::config_i2s()+0xf4>
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
  I2S0_TCR3 = I2S_TCR3_TCE;
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
  I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
     c84:	ldr	r2, [pc, #96]	; (ce8 <I2S_32::config_i2s()+0xdc>)
     c86:	str	r2, [r7, #0]

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
     c88:	str	r4, [r6, #0]
  I2S0_RCR1 = I2S_RCR1_RFW(1);
     c8a:	str	r0, [r5, #0]
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
     c8c:	add.w	r0, r0, #1191182336	; 0x47000000
     c90:	str.w	r0, [lr]
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     c94:	ldr	r4, [pc, #84]	; (cec <I2S_32::config_i2s()+0xe0>)
  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
     c96:	str	r1, [r7, #120]	; 0x78
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
  CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
     c98:	ldr	r0, [pc, #84]	; (cf0 <I2S_32::config_i2s()+0xe4>)
  CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     c9a:	ldr	r1, [pc, #88]	; (cf4 <I2S_32::config_i2s()+0xe8>)
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     c9c:	str.w	r3, [r6, #-80]
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     ca0:	mov.w	r3, #1536	; 0x600
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
     ca4:	str	r2, [r5, #16]

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     ca6:	str	r3, [r4, #0]
  CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
     ca8:	str	r3, [r0, #0]
  CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     caa:	str	r3, [r1, #0]
     cac:	pop	{r4, r5, r6, r7, pc}
     cae:	bx	lr
     cb0:	.word	0x4004803c
     cb4:	.word	0x40048040
     cb8:	.word	0x4002f000
     cbc:	.word	0x4002f080
     cc0:	.word	0x4002f100
     cc4:	.word	0x4002f104
     cc8:	.word	0x4002f060
     ccc:	.word	0x4002f008
     cd0:	.word	0x4002f00c
     cd4:	.word	0x4002f010
     cd8:	.word	0x4002f014
     cdc:	.word	0x4002f0e0
     ce0:	.word	0x4002f084
     ce4:	.word	0x00011f1b
     ce8:	.word	0x1f1f1f00
     cec:	.word	0x4004b008
     cf0:	.word	0x4004b00c
     cf4:	.word	0x4004b018
     cf8:	.word	0x4002f004
     cfc:	.word	0x07000001
     d00:	.word	0x4002f088

00000d04 <I2S_32::begin()>:
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);

void I2S_32::begin(void)
{ 
     d04:	push	{r3, r4, r5, r6, r7, lr}

  dma.begin(true); // Allocate the DMA channel first
     d06:	ldr	r4, [pc, #164]	; (dac <I2S_32::begin()+0xa8>)
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     d08:	ldr	r6, [pc, #164]	; (db0 <I2S_32::begin()+0xac>)
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);

void I2S_32::begin(void)
{ 
     d0a:	mov	r5, r0

  dma.begin(true); // Allocate the DMA channel first
     d0c:	movs	r1, #1
     d0e:	mov	r0, r4
     d10:	bl	99a0 <DMAChannel::begin(bool)>

  config_i2s();
     d14:	mov	r0, r5
     d16:	bl	c0c <I2S_32::config_i2s()>

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     d1a:	ldr	r3, [pc, #152]	; (db4 <I2S_32::begin()+0xb0>)
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     d1c:	ldr	r2, [pc, #152]	; (db8 <I2S_32::begin()+0xb4>)
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
     d1e:	ldr	r0, [pc, #156]	; (dbc <I2S_32::begin()+0xb8>)

  dma.begin(true); // Allocate the DMA channel first

  config_i2s();

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     d20:	mov.w	r1, #1024	; 0x400
     d24:	str	r1, [r3, #0]
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     d26:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     d28:	movs	r1, #0

  config_i2s();

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     d2a:	str	r2, [r3, #0]
  dma.TCD->SOFF = 0;
     d2c:	strh	r1, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
     d2e:	ldrb	r2, [r4, #4]
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
     d30:	str	r0, [r3, #16]
     d32:	add.w	r2, r2, #1073741824	; 0x40000000
     d36:	add.w	r2, r2, #135168	; 0x21000

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     d3a:	movw	r0, #514	; 0x202
     d3e:	strh	r0, [r3, #6]
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     d40:	str	r6, [r3, #24]
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     d42:	mov.w	r5, #256	; 0x100
  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
     d46:	movs	r0, #4
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d48:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
     d4a:	movs	r6, #140	; 0x8c
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     d4c:	strh	r5, [r3, #22]
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
     d4e:	str	r1, [r3, #12]
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     d50:	strh	r5, [r3, #30]
  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
     d52:	str	r0, [r3, #8]
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d54:	strh	r7, [r3, #28]
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
     d56:	strh	r0, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
     d58:	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
     d5a:	strb	r6, [r2, #0]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
     d5c:	bl	a11c <AudioStream::update_setup()>
     d60:	ldr	r1, [pc, #92]	; (dc0 <I2S_32::begin()+0xbc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     d62:	ldr	r3, [pc, #96]	; (dc4 <I2S_32::begin()+0xc0>)
     d64:	ldrb	r2, [r4, #4]
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     d66:	ldr	r7, [pc, #96]	; (dc8 <I2S_32::begin()+0xc4>)
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
     d68:	strb	r0, [r1, #0]
     d6a:	strb	r2, [r3, #0]
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     d6c:	ldr	r1, [r7, #0]
     d6e:	ldrb	r2, [r4, #4]
  I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
     d70:	ldr	r4, [pc, #88]	; (dcc <I2S_32::begin()+0xc8>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d72:	ldr	r5, [pc, #92]	; (dd0 <I2S_32::begin()+0xcc>)
     d74:	ldr	r6, [pc, #92]	; (dd4 <I2S_32::begin()+0xd0>)

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     d76:	orr.w	r1, r1, #2449473536	; 0x92000000
     d7a:	orr.w	r1, r1, #1
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d7e:	asrs	r3, r2, #5
     d80:	str	r1, [r7, #0]
     d82:	lsls	r3, r3, #2
  I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
     d84:	ldr	r0, [r4, #0]
     d86:	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d8a:	add.w	r7, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d8e:	add.w	r3, r3, #57600	; 0xe100
     d92:	and.w	r2, r2, #31
     d96:	movs	r1, #1
     d98:	orr.w	r0, r0, #2415919104	; 0x90000000
     d9c:	lsl.w	r2, r1, r2
     da0:	str	r0, [r4, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     da2:	str.w	r6, [r5, r7, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     da6:	str	r2, [r3, #0]
     da8:	pop	{r3, r4, r5, r6, r7, pc}
     daa:	nop
     dac:	.word	0x20019eac
     db0:	.word	0xfffffc00
     db4:	.word	0x4004b014
     db8:	.word	0x4002f0a0
     dbc:	.word	0x1fff0200
     dc0:	.word	0x20019ba8
     dc4:	.word	0x4000801b
     dc8:	.word	0x4002f080
     dcc:	.word	0x4002f000
     dd0:	.word	0x20014000
     dd4:	.word	0x00000475

00000dd8 <I2S_dividers(unsigned long*, unsigned long, unsigned long)>:

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     dd8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ddc:	mov	r9, r0
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     dde:	ldr	r0, [r0, #8]

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     de0:	vpush	{d8-d9}
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     de4:	adds	r0, #1

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     de6:	vmov	s17, r1
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     dea:	movs	r1, #0

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     dec:	vmov	s16, r2
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     df0:	bl	b56c <__aeabi_l2f>
     df4:	vldr	s15, [pc, #140]	; e84 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xac>
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     df8:	vldr	s18, [pc, #140]	; e88 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xb0>
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     dfc:	vmov	s14, r0
     e00:	vdiv.f32	s13, s15, s14
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
     e04:	movs	r0, #1
// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
     e06:	mov	r8, r0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     e08:	movs	r4, #1
     e0a:	movs	r5, #0
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     e0c:	movw	r6, #257	; 0x101
     e10:	movs	r7, #0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     e12:	vcvt.f32.u32	s15, s17
     e16:	vcvt.f32.u32	s16, s16
    float mn=1.0; 
     e1a:	vmov.f32	s14, #112	; 0x3f800000  1.0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     e1e:	vmul.f32	s15, s16, s15
     e22:	vdiv.f32	s17, s13, s15
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
     e26:	vmov	s15, r4
     e2a:	vcvt.f32.s32	s15, s15
     e2e:	vmul.f32	s15, s15, s17
     e32:	vcvt.s32.f32	s16, s15
     e36:	vcvt.f32.s32	s16, s16
     e3a:	vsub.f32	s16, s15, s16
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     e3e:	vcmpe.f32	s16, s14
     e42:	vmrs	APSR_nzcv, fpscr
     e46:	bpl.n	e60 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     e48:	vcmpe.f32	s15, s18
     e4c:	vmrs	APSR_nzcv, fpscr
     e50:	bpl.n	e60 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     e52:	vmov	r0, s15
     e56:	bl	b6b8 <__aeabi_f2lz>
     e5a:	mov	r8, r4
     e5c:	vmov.f32	s14, s16
     e60:	adds	r4, #1
     e62:	adc.w	r5, r5, #0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     e66:	cmp	r5, r7
     e68:	it	eq
     e6a:	cmpeq	r4, r6
     e6c:	bne.n	e26 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x4e>
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
    iscl[1] = (int) (i2-1);
    iscl[2] = (int) (i3-1);
}
     e6e:	vpop	{d8-d9}
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     e72:	add.w	r3, r8, #4294967295
    iscl[1] = (int) (i2-1);
     e76:	subs	r0, #1
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     e78:	str.w	r3, [r9]
    iscl[1] = (int) (i2-1);
     e7c:	str.w	r0, [r9, #4]
    iscl[2] = (int) (i3-1);
}
     e80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e84:	.word	0x4c371b00
     e88:	.word	0x45800000

00000e8c <I2S_modification(unsigned long, unsigned short, int)>:
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     e8c:	push	{r4, r5, r6, r7, lr}

  if(nch==8)
     e8e:	cmp	r2, #8
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     e90:	sub	sp, #44	; 0x2c

  if(nch==8)
    iscl[2]=0;
     e92:	ite	eq
     e94:	moveq	r3, #0
  else
    iscl[2]=1;
     e96:	movne	r3, #1
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     e98:	mov	r6, r1
     e9a:	mov	r4, r2
     e9c:	mov	r7, r0
  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     e9e:	mul.w	r2, r1, r2
     ea2:	mov	r1, r0
     ea4:	add	r0, sp, #28
{ uint32_t iscl[3];

  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
     ea6:	str	r3, [sp, #36]	; 0x24
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     ea8:	bl	dd8 <I2S_dividers(unsigned long*, unsigned long, unsigned long)>
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     eac:	vldr	s15, [sp, #28]
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     eb0:	ldr	r2, [sp, #32]
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     eb2:	vldr	s13, [pc, #180]	; f68 <I2S_modification(unsigned long, unsigned short, int)+0xdc>
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     eb6:	ldr	r5, [sp, #36]	; 0x24
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     eb8:	ldr	r3, [sp, #28]
     eba:	str	r6, [sp, #4]
     ebc:	vcvt.f32.u32	s14, s15
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     ec0:	adds	r2, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     ec2:	vmov.f32	s15, #112	; 0x3f800000  1.0
     ec6:	vadd.f32	s15, s14, s15
     eca:	vmov	s14, r2
     ece:	vmul.f32	s15, s15, s13
     ed2:	vcvt.f32.u32	s14, s14
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     ed6:	adds	r5, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     ed8:	vdiv.f32	s13, s15, s14
     edc:	adds	r1, r3, #1
     ede:	str	r1, [sp, #8]
     ee0:	mov	r3, r7
     ee2:	str	r2, [sp, #12]
     ee4:	str	r5, [sp, #16]
     ee6:	ldr	r2, [pc, #132]	; (f6c <I2S_modification(unsigned long, unsigned short, int)+0xe0>)
     ee8:	ldr	r1, [pc, #132]	; (f70 <I2S_modification(unsigned long, unsigned short, int)+0xe4>)
     eea:	ldr	r0, [pc, #136]	; (f74 <I2S_modification(unsigned long, unsigned short, int)+0xe8>)
     eec:	vmov	s15, r5
     ef0:	vmov.f32	s12, #96	; 0x3f000000  0.5
     ef4:	vcvt.f32.u32	s14, s15
     ef8:	vmul.f32	s13, s13, s12
     efc:	vmov	s15, r4
     f00:	vdiv.f32	s12, s13, s14
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
     f04:	ldr	r5, [pc, #112]	; (f78 <I2S_modification(unsigned long, unsigned short, int)+0xec>)

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
     f06:	ldr	r4, [pc, #116]	; (f7c <I2S_modification(unsigned long, unsigned short, int)+0xf0>)
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     f08:	vmov	s14, r6
     f0c:	vcvt.f32.s32	s15, s15
     f10:	vcvt.f32.s32	s14, s14
     f14:	vmul.f32	s15, s15, s14
     f18:	vdiv.f32	s14, s12, s15
     f1c:	vcvt.s32.f32	s14, s14
     f20:	vstr	s14, [sp]
     f24:	bl	9dcc <Print::printf(char const*, ...)>
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     f28:	ldr	r1, [pc, #84]	; (f80 <I2S_modification(unsigned long, unsigned short, int)+0xf4>)
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
     f2a:	ldr	r0, [pc, #88]	; (f84 <I2S_modification(unsigned long, unsigned short, int)+0xf8>)
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     f2c:	ldr	r3, [r1, #0]
     f2e:	bic.w	r3, r3, #2415919104	; 0x90000000
     f32:	str	r3, [r1, #0]

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
     f34:	ldr	r2, [sp, #28]
     f36:	ldr	r3, [sp, #32]
     f38:	lsls	r2, r2, #12
     f3a:	and.w	r2, r2, #1044480	; 0xff000
     f3e:	ubfx	r3, r3, #0, #12
     f42:	orrs	r3, r2
     f44:	str	r3, [r5, #0]

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
     f46:	ldrb.w	r3, [sp, #36]	; 0x24
     f4a:	orr.w	r3, r3, #117440512	; 0x7000000
     f4e:	str	r3, [r4, #0]
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
     f50:	ldrb.w	r3, [sp, #36]	; 0x24
     f54:	orr.w	r3, r3, #1191182336	; 0x47000000
     f58:	str	r3, [r0, #0]
//  I2S0_RCR4 = I2S_RCR4_FRSZ(nch-1) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
//    | I2S_RCR4_FSE | I2S_RCR4_FSD;

  //restart I2S
  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     f5a:	ldr	r3, [r1, #0]
     f5c:	orr.w	r3, r3, #2415919104	; 0x90000000
     f60:	str	r3, [r1, #0]
}
     f62:	add	sp, #44	; 0x2c
     f64:	pop	{r4, r5, r6, r7, pc}
     f66:	nop
     f68:	.word	0x4cb71b00
     f6c:	.word	0x05b8d800
     f70:	.word	0x00012f08
     f74:	.word	0x20014720
     f78:	.word	0x4002f104
     f7c:	.word	0x4002f008
     f80:	.word	0x4002f080
     f84:	.word	0x4002f088

00000f88 <makeFilename(char*)>:
  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
}

char *makeFilename(char * prefix)
{ static char filename[40];
     f88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f8c:	sub	sp, #24
     f8e:	mov	r5, r0

  sprintf(filename, "%s_%04d_%02d_%02d_%02d_%02d_%02d%s", prefix, 
     f90:	bl	2ee8 <year()>
     f94:	mov	r6, r0
     f96:	bl	2ec8 <month()>
     f9a:	mov	sl, r0
     f9c:	bl	2ea8 <day()>
     fa0:	mov	r7, r0
     fa2:	bl	2e48 <hour()>
     fa6:	mov	r8, r0
     fa8:	bl	2e68 <minute()>
     fac:	mov	r9, r0
     fae:	bl	2e88 <second()>
                    year(), month(), day(), hour(), minute(), second(), postfix);
     fb2:	ldr	r4, [pc, #60]	; (ff0 <makeFilename(char*)+0x68>)
     fb4:	ldr	r1, [pc, #60]	; (ff4 <makeFilename(char*)+0x6c>)
     fb6:	str	r0, [sp, #16]
     fb8:	mov	r3, r6
     fba:	mov	r2, r5
     fbc:	str	r1, [sp, #20]
     fbe:	str.w	sl, [sp]
     fc2:	ldr	r1, [pc, #52]	; (ff8 <makeFilename(char*)+0x70>)
     fc4:	str.w	r9, [sp, #12]
     fc8:	str.w	r8, [sp, #8]
     fcc:	str	r7, [sp, #4]
     fce:	mov	r0, r4
     fd0:	bl	c704 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     fd4:	mov	r0, r4
     fd6:	bl	c940 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     fda:	mov	r1, r0
     fdc:	mov	r0, r4
     fde:	bl	84a4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     fe2:	ldr	r0, [pc, #24]	; (ffc <makeFilename(char*)+0x74>)
     fe4:	bl	9d9c <Print::println()>
#if DO_DEBUG>0
  Serial.println(filename);
#endif
  return filename;  
}
     fe8:	mov	r0, r4
     fea:	add	sp, #24
     fec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ff0:	.word	0x20019aac
     ff4:	.word	0x20014538
     ff8:	.word	0x00012f20
     ffc:	.word	0x20014720

00001000 <wavHeader(unsigned long)>:

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
    1000:	ldr	r3, [pc, #80]	; (1054 <wavHeader(unsigned long)+0x54>)
    1002:	ldr	r1, [pc, #84]	; (1058 <wavHeader(unsigned long)+0x58>)
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
    1004:	ldr	r2, [pc, #84]	; (105c <wavHeader(unsigned long)+0x5c>)

	return header;
}

char * wavHeader(uint32_t fileSize)
{
    1006:	push	{r4, r5, r6, r7}
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
    1008:	str	r2, [r3, #28]

	return header;
}

char * wavHeader(uint32_t fileSize)
{
    100a:	mov	r2, r0

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
    100c:	ldmia	r1, {r0, r1}
  strcpy(wheader+8,"WAVE");
    100e:	ldr	r6, [pc, #80]	; (1060 <wavHeader(unsigned long)+0x60>)

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
    1010:	str	r0, [r3, #0]
  strcpy(wheader+8,"WAVE");
    1012:	ldmia.w	r6, {r0, r1}
  strcpy(wheader+12,"fmt ");
    1016:	ldr	r5, [pc, #76]	; (1064 <wavHeader(unsigned long)+0x64>)
  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
    1018:	str	r0, [r3, #8]
  strcpy(wheader+12,"fmt ");
    101a:	ldmia.w	r5, {r0, r1}
  strcpy(wheader+36,"data");
    101e:	ldr	r4, [pc, #72]	; (1068 <wavHeader(unsigned long)+0x68>)
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
    1020:	str	r0, [r3, #12]
  strcpy(wheader+36,"data");
    1022:	ldmia.w	r4, {r0, r1}
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
    1026:	subs	r2, #44	; 0x2c
    1028:	bic.w	r2, r2, #3
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
    102c:	add.w	r7, r2, #36	; 0x24
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
    1030:	movs	r6, #1
  *(int16_t*)(wheader+22)=nchan;// numChannels 
    1032:	movs	r5, #2
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
    1034:	movw	r4, #48000	; 0xbb80
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
    1038:	str	r0, [r3, #36]	; 0x24
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
    103a:	movs	r1, #4
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
    103c:	str	r2, [r3, #40]	; 0x28
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
    103e:	movs	r2, #16
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
    1040:	str	r7, [r3, #4]
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
    1042:	strh	r6, [r3, #20]
  *(int16_t*)(wheader+22)=nchan;// numChannels 
    1044:	strh	r5, [r3, #22]
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
    1046:	str	r4, [r3, #24]
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
    1048:	mov	r0, r3
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
    104a:	strh	r1, [r3, #32]
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
    104c:	str	r2, [r3, #16]
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
    104e:	strh	r2, [r3, #34]	; 0x22
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
    1050:	pop	{r4, r5, r6, r7}
    1052:	bx	lr
    1054:	.word	0x20019bb0
    1058:	.word	0x00012f64
    105c:	.word	0x00017700
    1060:	.word	0x00012f6c
    1064:	.word	0x00012f74
    1068:	.word	0x00012f7c

0000106c <c_uSD::init()>:
//____________________________ FS Interface implementation______________________
void c_uSD::init()
{
    106c:	push	{r4, r5, r6, lr}
    106e:	mov	r4, r0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    1070:	add.w	r5, r0, #1160	; 0x488
    1074:	mov	r0, r5
    1076:	mov.w	r1, #0
    107a:	bl	7b7c <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    107e:	str.w	r5, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
    1082:	cbz	r5, 108e <c_uSD::init()+0x22>
    1084:	mov	r0, r5
    1086:	bl	72dc <SdioCard::errorCode() const>
    108a:	mov	r5, r0
    108c:	cbz	r0, 10ae <c_uSD::init()+0x42>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    108e:	ldr	r6, [pc, #60]	; (10cc <c_uSD::init()+0x60>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1090:	ldr	r5, [pc, #60]	; (10d0 <c_uSD::init()+0x64>)
  {
//    sd.errorHalt("sd.begin failed");
    while(1)
    {
      // blink code suggests insertion of an SD card
            pinMode(13,OUTPUT);
    1092:	movs	r1, #1
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1094:	movs	r4, #32
    1096:	movs	r0, #13
    1098:	bl	8948 <pinMode>
    109c:	str	r4, [r6, #0]
            digitalWriteFast(13,HIGH);
            delay(200);
    109e:	movs	r0, #200	; 0xc8
    10a0:	bl	8998 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    10a4:	str	r4, [r5, #0]
            digitalWriteFast(13,LOW);
            delay(200);
    10a6:	movs	r0, #200	; 0xc8
    10a8:	bl	8998 <delay>
    10ac:	b.n	1092 <c_uSD::init()+0x26>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    10ae:	ldr.w	r1, [r4, #1156]	; 0x484
    10b2:	mov	r0, r4
    10b4:	bl	69f0 <FsVolume::begin(BlockDeviceInterface*)>
    10b8:	cmp	r0, #0
    10ba:	beq.n	108e <c_uSD::init()+0x22>
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
    10bc:	ldr	r3, [pc, #20]	; (10d4 <c_uSD::init()+0x68>)
    10be:	ldr	r2, [pc, #24]	; (10d8 <c_uSD::init()+0x6c>)
  //
  nbuf=0;
    10c0:	strh.w	r5, [r4, #1278]	; 0x4fe
  state=0;
    10c4:	strh.w	r5, [r4, #1276]	; 0x4fc
            delay(200);
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
    10c8:	str	r2, [r3, #0]
  //
  nbuf=0;
  state=0;
}
    10ca:	pop	{r4, r5, r6, pc}
    10cc:	.word	0x400ff084
    10d0:	.word	0x400ff088
    10d4:	.word	0x2001aa1c
    10d8:	.word	0x0000093d

000010dc <c_uSD::close()>:
    state=close();
  }
  return state;
}
int16_t c_uSD::close(void)
{   // close file
    10dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10e0:	mov	r5, r0
    10e2:	ldr.w	r0, [r0, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    10e6:	cmp	r0, #0
    10e8:	beq.n	116e <c_uSD::close()+0x92>
    10ea:	bl	5c18 <FatFile::truncate()>
    10ee:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    10f2:	cmp	r3, #0
    10f4:	beq.n	1180 <c_uSD::close()+0xa4>
    10f6:	ldr.w	sl, [r3, #28]
    10fa:	mov.w	r9, #0
    10fe:	mov	r8, sl
    file.truncate();
    #ifdef GEN_WAV_FILE
       uint32_t fileSize = file.size();
       memcpy(header,wavHeader(fileSize),44);
    1100:	mov	r0, sl
    1102:	bl	1000 <wavHeader(unsigned long)>
    1106:	ldr	r7, [pc, #216]	; (11e0 <c_uSD::close()+0x104>)
    1108:	mov	r4, r0
    110a:	add.w	lr, r0, #32
    110e:	ldr	r0, [r4, #0]
    1110:	ldr	r1, [r4, #4]
    1112:	ldr	r2, [r4, #8]
    1114:	ldr	r3, [r4, #12]
    1116:	mov	r6, r7
    1118:	stmia	r6!, {r0, r1, r2, r3}
    111a:	adds	r4, #16
    111c:	cmp	r4, lr
    111e:	mov	r7, r6
    1120:	bne.n	110e <c_uSD::close()+0x32>
    1122:	ldr	r0, [r4, #0]
    1124:	ldr	r1, [r4, #4]
    1126:	ldr	r2, [r4, #8]
    1128:	stmia	r7!, {r0, r1, r2}
    112a:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    112e:	cmp	r0, #0
    1130:	beq.n	11b4 <c_uSD::close()+0xd8>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1132:	movs	r1, #0
    1134:	bl	5aa0 <FatFile::seekSet(unsigned long)>
    1138:	ldr.w	r0, [r5, #1268]	; 0x4f4
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    113c:	cbz	r0, 1192 <c_uSD::close()+0xb6>
    113e:	mov.w	r2, #512	; 0x200
    1142:	ldr	r1, [pc, #156]	; (11e0 <c_uSD::close()+0x104>)
    1144:	bl	5c90 <FatFile::write(void const*, unsigned int)>
    1148:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    114c:	cbnz	r0, 11ac <c_uSD::close()+0xd0>
    114e:	ldr.w	r0, [r5, #1272]	; 0x4f8
    1152:	cbz	r0, 115c <c_uSD::close()+0x80>
    1154:	mov	r2, r8
    1156:	mov	r3, r9
    1158:	bl	4330 <ExFatFile::seekSet(unsigned long long)>
       file.seek(0);
       file.write(header,512);
       file.seek(fileSize);
    #endif
    file.close();
    115c:	addw	r0, r5, #1212	; 0x4bc
    1160:	bl	6948 <FsBaseFile::close()>
//#if DO_DEBUG>0
//    Serial.println("file Closed");    
//#endif
    state=0;  // flag to open new file
    1164:	movs	r0, #0
    1166:	strh.w	r0, [r5, #1276]	; 0x4fc
    return state;
}
    116a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    116e:	ldr.w	r0, [r5, #1272]	; 0x4f8
    1172:	cbz	r0, 11c6 <c_uSD::close()+0xea>
    1174:	bl	5234 <ExFatFile::truncate()>
    1178:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    117c:	cmp	r3, #0
    117e:	bne.n	10f6 <c_uSD::close()+0x1a>
    1180:	ldr.w	r3, [r5, #1272]	; 0x4f8
    1184:	cbz	r3, 11d2 <c_uSD::close()+0xf6>
    1186:	ldrd	r8, r9, [r3, #16]
    118a:	mov.w	r9, #0
    118e:	mov	sl, r8
    1190:	b.n	1100 <c_uSD::close()+0x24>
    1192:	ldr.w	r0, [r5, #1272]	; 0x4f8
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1196:	cmp	r0, #0
    1198:	beq.n	115c <c_uSD::close()+0x80>
    119a:	mov.w	r2, #512	; 0x200
    119e:	ldr	r1, [pc, #64]	; (11e0 <c_uSD::close()+0x104>)
    11a0:	bl	5318 <ExFatFile::write(void const*, unsigned int)>
    11a4:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    11a8:	cmp	r0, #0
    11aa:	beq.n	114e <c_uSD::close()+0x72>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    11ac:	mov	r1, sl
    11ae:	bl	5aa0 <FatFile::seekSet(unsigned long)>
    11b2:	b.n	115c <c_uSD::close()+0x80>
           m_xFile ? m_xFile->seekSet(pos) : false;
    11b4:	ldr.w	r0, [r5, #1272]	; 0x4f8
    11b8:	cmp	r0, #0
    11ba:	beq.n	115c <c_uSD::close()+0x80>
    11bc:	movs	r2, #0
    11be:	movs	r3, #0
    11c0:	bl	4330 <ExFatFile::seekSet(unsigned long long)>
    11c4:	b.n	1138 <c_uSD::close()+0x5c>
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    11c6:	mov	sl, r0
    11c8:	mov.w	r8, #0
    11cc:	mov.w	r9, #0
    11d0:	b.n	1100 <c_uSD::close()+0x24>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    11d2:	mov	sl, r3
    11d4:	mov.w	r8, #0
    11d8:	mov.w	r9, #0
    11dc:	b.n	1100 <c_uSD::close()+0x24>
    11de:	nop
    11e0:	.word	0x200158ac

000011e4 <c_uSD::storeConfig(unsigned long*, int, long*, int)>:

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
    11e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    11e8:	ldr	r4, [pc, #272]	; (12fc <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x118>)
    11ea:	sub	sp, #44	; 0x2c
    11ec:	ldr	r4, [r4, #0]
    11ee:	ldr.w	r9, [sp, #80]	; 0x50
    11f2:	str	r3, [sp, #4]
    11f4:	mov	r5, r0
    11f6:	mov	sl, r1
    11f8:	mov	r8, r2
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
    11fa:	addw	fp, r0, #1212	; 0x4bc
    11fe:	cbz	r4, 120e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x2a>
    1200:	mov	r1, r4
    1202:	movw	r3, #1537	; 0x601
    1206:	ldr	r2, [pc, #248]	; (1300 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x11c>)
    1208:	mov	r0, fp
    120a:	bl	6970 <FsBaseFile::open(FsVolume*, char const*, int)>
  for(int ii=0; ii<n1; ii++)
    120e:	cmp.w	r8, #0
    1212:	ble.n	12f6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x112>
    1214:	sub.w	r7, sl, #4
    1218:	movs	r6, #0
    121a:	add	r4, sp, #8
    121c:	b.n	1228 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    121e:	bl	5c90 <FatFile::write(void const*, unsigned int)>
    1222:	adds	r6, #1
    1224:	cmp	r8, r6
    1226:	beq.n	1262 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
    1228:	ldr.w	r2, [r7, #4]!
    122c:	ldr	r1, [pc, #212]	; (1304 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
    122e:	mov	r0, r4
    1230:	bl	c704 <sprintf>
    1234:	mov	r0, r4
    1236:	bl	c940 <strlen>
    123a:	ldr.w	r3, [r5, #1268]	; 0x4f4
    123e:	mov	lr, r0
    1240:	mov	r2, r0
    1242:	mov	r1, r4
    1244:	mov	r0, r3
    1246:	cmp	r3, #0
    1248:	bne.n	121e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3a>
    124a:	ldr.w	r3, [r5, #1272]	; 0x4f8
    124e:	mov	r2, lr
    1250:	mov	r1, r4
    1252:	mov	r0, r3
    1254:	cmp	r3, #0
    1256:	beq.n	1222 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3e>
}

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
    1258:	adds	r6, #1
    125a:	bl	5318 <ExFatFile::write(void const*, unsigned int)>
    125e:	cmp	r8, r6
    1260:	bne.n	1228 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
    1262:	cmp.w	r9, #0
    1266:	ble.n	12b4 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
    1268:	ldr	r3, [sp, #4]
    126a:	movs	r6, #0
    126c:	subs	r7, r3, #4
    126e:	b.n	127a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
    1270:	bl	5c90 <FatFile::write(void const*, unsigned int)>
    1274:	adds	r6, #1
    1276:	cmp	r9, r6
    1278:	beq.n	12b4 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
    127a:	ldr.w	r2, [r7, #4]!
    127e:	ldr	r1, [pc, #132]	; (1304 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
    1280:	mov	r0, r4
    1282:	bl	c704 <sprintf>
    1286:	mov	r0, r4
    1288:	bl	c940 <strlen>
    128c:	ldr.w	r3, [r5, #1268]	; 0x4f4
    1290:	mov	lr, r0
    1292:	mov	r2, r0
    1294:	mov	r1, r4
    1296:	mov	r0, r3
    1298:	cmp	r3, #0
    129a:	bne.n	1270 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x8c>
    129c:	ldr.w	r3, [r5, #1272]	; 0x4f8
    12a0:	mov	r2, lr
    12a2:	mov	r1, r4
    12a4:	mov	r0, r3
    12a6:	cmp	r3, #0
    12a8:	beq.n	1274 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x90>
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
    12aa:	adds	r6, #1
    12ac:	bl	5318 <ExFatFile::write(void const*, unsigned int)>
    12b0:	cmp	r9, r6
    12b2:	bne.n	127a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
    12b4:	add.w	r2, sl, r8, lsl #2
    12b8:	ldr	r1, [pc, #76]	; (1308 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x124>)
    12ba:	mov	r0, r4
    12bc:	bl	c704 <sprintf>
    12c0:	ldr.w	r0, [r5, #1268]	; 0x4f4
    12c4:	cbz	r0, 12da <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xf6>
    12c6:	mov	r1, r4
    12c8:	movs	r2, #6
    12ca:	bl	5c90 <FatFile::write(void const*, unsigned int)>
  file.write((uint8_t *)text,6);

  file.close();
    12ce:	mov	r0, fp
    12d0:	bl	6948 <FsBaseFile::close()>
  
}
    12d4:	add	sp, #44	; 0x2c
    12d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12da:	ldr.w	r0, [r5, #1272]	; 0x4f8
    12de:	cmp	r0, #0
    12e0:	beq.n	12ce <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xea>
    12e2:	mov	r1, r4
    12e4:	movs	r2, #6
    12e6:	bl	5318 <ExFatFile::write(void const*, unsigned int)>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
  file.write((uint8_t *)text,6);

  file.close();
    12ea:	mov	r0, fp
    12ec:	bl	6948 <FsBaseFile::close()>
  
}
    12f0:	add	sp, #44	; 0x2c
    12f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12f6:	add	r4, sp, #8
    12f8:	b.n	1262 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
    12fa:	nop
    12fc:	.word	0x2001aa20
    1300:	.word	0x00012f84
    1304:	.word	0x00012f98
    1308:	.word	0x00012f90

0000130c <c_uSD::loadConfig(unsigned long*, int, long*, int)>:

void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
    130c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1310:	ldr	r4, [pc, #252]	; (1410 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x104>)
    1312:	sub	sp, #44	; 0x2c
    1314:	ldr	r4, [r4, #0]
    1316:	ldr.w	r9, [sp, #80]	; 0x50
    131a:	cmp	r4, #0
    131c:	beq.n	139a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
    131e:	addw	fp, r0, #1212	; 0x4bc
    1322:	str	r3, [sp, #4]
    1324:	mov	r8, r2
    1326:	mov	sl, r1
    1328:	mov	r5, r0
    132a:	mov	r1, r4
    132c:	mov	r0, fp
    132e:	movs	r3, #0
    1330:	ldr	r2, [pc, #224]	; (1414 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
    1332:	bl	6970 <FsBaseFile::open(FsVolume*, char const*, int)>
    1336:	cbz	r0, 139a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  //
  for(int ii=0; ii<n1; ii++)
    1338:	cmp.w	r8, #0
    133c:	ldr.w	r3, [r5, #1268]	; 0x4f4
    1340:	ble.n	13a0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x94>
    1342:	mov	r7, sl
    1344:	movs	r6, #0
    1346:	add	r4, sp, #8
    1348:	b.n	136a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x5e>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    134a:	bl	589c <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
    134e:	cmp	r0, #0
    1350:	ldr	r1, [pc, #196]	; (1418 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
    1352:	ble.n	135c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x50>
    1354:	mov	r2, r7
    1356:	mov	r0, r4
    1358:	bl	c750 <sscanf>
    135c:	ldr.w	r3, [r5, #1268]	; 0x4f4
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
    1360:	adds	r6, #1
    1362:	cmp	r8, r6
    1364:	add.w	r7, r7, #4
    1368:	beq.n	13a2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x96>
    136a:	movs	r2, #12
    136c:	mov	r1, r4
    136e:	mov	r0, r3
    1370:	cmp	r3, #0
    1372:	bne.n	134a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
    1374:	ldr.w	r0, [r5, #1272]	; 0x4f8
    1378:	cmp	r0, #0
    137a:	beq.n	1360 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x54>
    137c:	movs	r2, #12
    137e:	mov	r1, r4
    1380:	bl	4160 <ExFatFile::read(void*, unsigned int)>
    1384:	b.n	134e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x42>
    1386:	cbz	r3, 13ea <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xde>
    1388:	mov	r0, r3
    138a:	movs	r2, #6
    138c:	mov	r1, r4
    138e:	bl	589c <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
    1392:	cbnz	r0, 13fc <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
  { text[5]=0;
    sscanf(text,"%s",(char *) &param1[n1]);
  }  
  file.close();
    1394:	mov	r0, fp
    1396:	bl	6948 <FsBaseFile::close()>
}
    139a:	add	sp, #44	; 0x2c
    139c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13a0:	add	r4, sp, #8
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
    13a2:	cmp.w	r9, #0
    13a6:	ble.n	1386 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
    13a8:	ldr	r6, [sp, #4]
    13aa:	movs	r7, #0
    13ac:	b.n	13ce <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xc2>
    13ae:	bl	589c <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
    13b2:	cmp	r0, #0
    13b4:	ldr	r1, [pc, #96]	; (1418 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
    13b6:	ble.n	13c0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb4>
    13b8:	mov	r2, r6
    13ba:	mov	r0, r4
    13bc:	bl	c750 <sscanf>
    13c0:	ldr.w	r3, [r5, #1268]	; 0x4f4
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
    13c4:	adds	r7, #1
    13c6:	cmp	r9, r7
    13c8:	add.w	r6, r6, #4
    13cc:	beq.n	1386 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
    13ce:	movs	r2, #12
    13d0:	mov	r1, r4
    13d2:	mov	r0, r3
    13d4:	cmp	r3, #0
    13d6:	bne.n	13ae <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
    13d8:	ldr.w	r0, [r5, #1272]	; 0x4f8
    13dc:	cmp	r0, #0
    13de:	beq.n	13c4 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb8>
    13e0:	movs	r2, #12
    13e2:	mov	r1, r4
    13e4:	bl	4160 <ExFatFile::read(void*, unsigned int)>
    13e8:	b.n	13b2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa6>
    13ea:	ldr.w	r0, [r5, #1272]	; 0x4f8
    13ee:	cbz	r0, 13fc <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
    13f0:	movs	r2, #6
    13f2:	mov	r1, r4
    13f4:	bl	4160 <ExFatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
    13f8:	cmp	r0, #0
    13fa:	beq.n	1394 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
  { text[5]=0;
    13fc:	movs	r3, #0
    sscanf(text,"%s",(char *) &param1[n1]);
    13fe:	add.w	r2, sl, r8, lsl #2
    1402:	mov	r0, r4
    1404:	ldr	r1, [pc, #20]	; (141c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x110>)
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
  { text[5]=0;
    1406:	strb.w	r3, [sp, #13]
    sscanf(text,"%s",(char *) &param1[n1]);
    140a:	bl	c750 <sscanf>
    140e:	b.n	1394 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
    1410:	.word	0x2001aa20
    1414:	.word	0x00012f84
    1418:	.word	0x00012fa0
    141c:	.word	0x00012f40

00001420 <setRTCTime(int, int, int, int, int, int)>:
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
    return text;
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
    1420:	push	{r4, r5, r6, lr}
    1422:	sub	sp, #8
    1424:	mov	r6, r0
    1426:	ldr	r4, [sp, #28]
    1428:	ldr	r5, [sp, #24]
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
    142a:	strb.w	r3, [sp, #4]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    142e:	add	r0, sp, #8
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
    1430:	cmp	r4, #99	; 0x63
      yr = yr - 1970;
    1432:	ite	gt
    1434:	subwgt	r4, r4, #1970	; 0x7b2
  else
      yr += 30;  
    1438:	addle	r4, #30
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    143a:	strb.w	r2, [r0, #-8]!
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
    143e:	strb.w	r1, [sp, #1]
      yr = yr - 1970;
  else
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
    1442:	strb.w	r4, [sp, #6]
  tm.Month = mnth;
    1446:	strb.w	r5, [sp, #5]
  tm.Day = dy;
  tm.Hour = hr;
    144a:	strb.w	r6, [sp, #2]
  tm.Minute = min;
  tm.Second = sec;

  uint32_t tt = makeTime(tm);
    144e:	bl	2cac <makeTime(tmElements_t const&)>
    1452:	mov	r4, r0
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
	static void set(unsigned long t) __attribute__((always_inline)) { rtc_set(t); }
    1454:	bl	88fc <rtc_set>
  Teensy3Clock.set(tt); // for RTC
  setTime(tt); // local
    1458:	mov	r0, r4
    145a:	bl	2f0c <setTime(long)>
}
    145e:	add	sp, #8
    1460:	pop	{r4, r5, r6, pc}
    1462:	nop

00001464 <doMenu()>:
      }
    }  
}

int16_t doMenu(void)
{
    1464:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1468:	ldr	r5, [pc, #724]	; (1740 <doMenu()+0x2dc>)
      }
    }  
}

int16_t doMenu(void)
{
    146a:	sub	sp, #12
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    146c:	bl	8450 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!Serial.available());
    1470:	cmp	r0, #0
    1472:	beq.n	146c <doMenu()+0x8>
        virtual int read() { return usb_serial_getchar(); }
    1474:	bl	83d8 <usb_serial_getchar>
    1478:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    147a:	mov	r1, r4
    147c:	ldr	r0, [pc, #708]	; (1744 <doMenu()+0x2e0>)
    147e:	bl	c7ac <strchr>
    1482:	cmp	r0, #0
    1484:	beq.n	146c <doMenu()+0x8>
    { switch (c)
    1486:	cmp	r4, #63	; 0x3f
    1488:	beq.n	14aa <doMenu()+0x46>
    148a:	ble.w	15ec <doMenu()+0x188>
    148e:	cmp	r4, #97	; 0x61
    1490:	beq.w	1750 <doMenu()+0x2ec>
    1494:	cmp	r4, #120	; 0x78
    1496:	bne.n	146c <doMenu()+0x8>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = Serial.parseInt(); break;
    1498:	ldr	r0, [pc, #684]	; (1748 <doMenu()+0x2e4>)
    149a:	bl	a294 <Stream::parseInt()>
    149e:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    14a0:	cmp	r0, #0
    14a2:	beq.n	146c <doMenu()+0x8>
  return ret;
}
    14a4:	add	sp, #12
    14a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    14aa:	bl	8450 <usb_serial_available>
  Serial.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!Serial.available());
    14ae:	cmp	r0, #0
    14b0:	beq.n	14aa <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    14b2:	bl	83d8 <usb_serial_getchar>
    14b6:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    14b8:	mov	r1, r4
    14ba:	ldr	r0, [pc, #656]	; (174c <doMenu()+0x2e8>)
    14bc:	bl	c7ac <strchr>
    14c0:	cmp	r0, #0
    14c2:	beq.n	146c <doMenu()+0x8>
    { switch (c)
    14c4:	subs	r4, #49	; 0x31
    14c6:	cmp	r4, #70	; 0x46
    14c8:	bhi.n	146c <doMenu()+0x8>
    14ca:	add	r3, pc, #4	; (adr r3, 14d0 <doMenu()+0x6c>)
    14cc:	ldr.w	pc, [r3, r4, lsl #2]
    14d0:	.word	0x000018d9
    14d4:	.word	0x000018e5
    14d8:	.word	0x000018f1
    14dc:	.word	0x000018fd
    14e0:	.word	0x0000146d
    14e4:	.word	0x0000146d
    14e8:	.word	0x0000146d
    14ec:	.word	0x0000146d
    14f0:	.word	0x0000146d
    14f4:	.word	0x0000146d
    14f8:	.word	0x0000146d
    14fc:	.word	0x0000146d
    1500:	.word	0x0000146d
    1504:	.word	0x0000146d
    1508:	.word	0x0000146d
    150c:	.word	0x0000146d
    1510:	.word	0x0000146d
    1514:	.word	0x0000146d
    1518:	.word	0x0000146d
    151c:	.word	0x0000146d
    1520:	.word	0x0000146d
    1524:	.word	0x0000146d
    1528:	.word	0x0000146d
    152c:	.word	0x0000146d
    1530:	.word	0x0000146d
    1534:	.word	0x0000146d
    1538:	.word	0x0000146d
    153c:	.word	0x0000146d
    1540:	.word	0x0000146d
    1544:	.word	0x0000146d
    1548:	.word	0x0000146d
    154c:	.word	0x0000146d
    1550:	.word	0x0000146d
    1554:	.word	0x0000146d
    1558:	.word	0x0000146d
    155c:	.word	0x0000146d
    1560:	.word	0x0000146d
    1564:	.word	0x0000146d
    1568:	.word	0x0000146d
    156c:	.word	0x0000146d
    1570:	.word	0x0000146d
    1574:	.word	0x0000146d
    1578:	.word	0x0000146d
    157c:	.word	0x0000146d
    1580:	.word	0x0000146d
    1584:	.word	0x0000146d
    1588:	.word	0x0000146d
    158c:	.word	0x0000146d
    1590:	.word	0x00001909
    1594:	.word	0x0000146d
    1598:	.word	0x00001915
    159c:	.word	0x00001923
    15a0:	.word	0x00001933
    15a4:	.word	0x0000146d
    15a8:	.word	0x0000146d
    15ac:	.word	0x00001941
    15b0:	.word	0x0000194f
    15b4:	.word	0x0000146d
    15b8:	.word	0x0000195d
    15bc:	.word	0x0000146d
    15c0:	.word	0x0000146d
    15c4:	.word	0x0000196b
    15c8:	.word	0x00001977
    15cc:	.word	0x00001983
    15d0:	.word	0x0000146d
    15d4:	.word	0x00001991
    15d8:	.word	0x0000199d
    15dc:	.word	0x000019ab
    15e0:	.word	0x0000146d
    15e4:	.word	0x0000146d
    15e8:	.word	0x000019bb
  {
    while(!Serial.available());
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    15ec:	cmp	r4, #33	; 0x21
    15ee:	bne.w	146c <doMenu()+0x8>
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    15f2:	add.w	r6, r5, #12
    15f6:	ldmia.w	r6, {r6, r7, r8}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    15fa:	bl	8450 <usb_serial_available>
    //int T4=acqParameters.T4; mot used
    //
    while(!Serial.available());
    15fe:	cmp	r0, #0
    1600:	beq.n	15fa <doMenu()+0x196>
        virtual int read() { return usb_serial_getchar(); }
    1602:	bl	83d8 <usb_serial_getchar>
    1606:	uxtb	r4, r0
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    1608:	mov	r1, r4
    160a:	ldr	r0, [pc, #320]	; (174c <doMenu()+0x2e8>)
    160c:	bl	c7ac <strchr>
    1610:	cmp	r0, #0
    1612:	beq.w	146c <doMenu()+0x8>
    { switch (c)
    1616:	subs	r4, #49	; 0x31
    1618:	cmp	r4, #70	; 0x46
    161a:	bhi.w	146c <doMenu()+0x8>
    161e:	add	r3, pc, #4	; (adr r3, 1624 <doMenu()+0x1c0>)
    1620:	ldr.w	pc, [r3, r4, lsl #2]
    1624:	.word	0x000019c9
    1628:	.word	0x000019e1
    162c:	.word	0x00001a81
    1630:	.word	0x00001a97
    1634:	.word	0x0000146d
    1638:	.word	0x0000146d
    163c:	.word	0x0000146d
    1640:	.word	0x0000146d
    1644:	.word	0x0000146d
    1648:	.word	0x0000146d
    164c:	.word	0x0000146d
    1650:	.word	0x0000146d
    1654:	.word	0x0000146d
    1658:	.word	0x0000146d
    165c:	.word	0x0000146d
    1660:	.word	0x0000146d
    1664:	.word	0x0000146d
    1668:	.word	0x0000146d
    166c:	.word	0x0000146d
    1670:	.word	0x0000146d
    1674:	.word	0x0000146d
    1678:	.word	0x0000146d
    167c:	.word	0x0000146d
    1680:	.word	0x0000146d
    1684:	.word	0x0000146d
    1688:	.word	0x0000146d
    168c:	.word	0x0000146d
    1690:	.word	0x0000146d
    1694:	.word	0x0000146d
    1698:	.word	0x0000146d
    169c:	.word	0x0000146d
    16a0:	.word	0x0000146d
    16a4:	.word	0x0000146d
    16a8:	.word	0x0000146d
    16ac:	.word	0x0000146d
    16b0:	.word	0x0000146d
    16b4:	.word	0x0000146d
    16b8:	.word	0x0000146d
    16bc:	.word	0x0000146d
    16c0:	.word	0x0000146d
    16c4:	.word	0x0000146d
    16c8:	.word	0x0000146d
    16cc:	.word	0x0000146d
    16d0:	.word	0x0000146d
    16d4:	.word	0x0000146d
    16d8:	.word	0x0000146d
    16dc:	.word	0x0000146d
    16e0:	.word	0x0000146d
    16e4:	.word	0x00001ab5
    16e8:	.word	0x0000146d
    16ec:	.word	0x00001be7
    16f0:	.word	0x00001bff
    16f4:	.word	0x00001c59
    16f8:	.word	0x0000146d
    16fc:	.word	0x0000146d
    1700:	.word	0x00001c75
    1704:	.word	0x00001ad1
    1708:	.word	0x0000146d
    170c:	.word	0x00001aed
    1710:	.word	0x0000146d
    1714:	.word	0x0000146d
    1718:	.word	0x00001b09
    171c:	.word	0x00001b21
    1720:	.word	0x00001b3d
    1724:	.word	0x0000146d
    1728:	.word	0x00001b55
    172c:	.word	0x00001b71
    1730:	.word	0x00001b8d
    1734:	.word	0x0000146d
    1738:	.word	0x0000146d
    173c:	.word	0x000018bd
    1740:	.word	0x20014560
    1744:	.word	0x0001300c
    1748:	.word	0x20014720
    174c:	.word	0x00013014
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1750:	ldr	r3, [r5, #0]
    1752:	ldr	r1, [pc, #684]	; (1a00 <doMenu()+0x59c>)
    1754:	ldr	r0, [pc, #684]	; (1a04 <doMenu()+0x5a0>)
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
  Serial.printf("%c %s time\n\r",         't',getTime(text));
  Serial.println();
  #if MDET
  Serial.printf("%c %5d processing type\r\n",       'c',snipParameters.iproc);
    1756:	ldr	r6, [pc, #688]	; (1a08 <doMenu()+0x5a4>)
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1758:	movs	r2, #111	; 0x6f
    175a:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d acq_time\n\r",    'a',acqParameters.ad);
    175e:	mov	r2, r4
    1760:	ldr	r3, [r5, #4]
    1762:	ldr	r1, [pc, #680]	; (1a0c <doMenu()+0x5a8>)
    1764:	ldr	r0, [pc, #668]	; (1a04 <doMenu()+0x5a0>)
    1766:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d rep_rate\n\r",    'r',acqParameters.ar);
    176a:	ldr	r3, [r5, #8]
    176c:	ldr	r1, [pc, #672]	; (1a10 <doMenu()+0x5ac>)
    176e:	ldr	r0, [pc, #660]	; (1a04 <doMenu()+0x5a0>)
    1770:	movs	r2, #114	; 0x72
    1772:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d first_hour\n\r",  '1',acqParameters.T1);
    1776:	ldr	r3, [r5, #12]
    1778:	ldr	r1, [pc, #664]	; (1a14 <doMenu()+0x5b0>)
    177a:	ldr	r0, [pc, #648]	; (1a04 <doMenu()+0x5a0>)
    177c:	movs	r2, #49	; 0x31
    177e:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d second_hour\n\r", '2',acqParameters.T2);
    1782:	ldr	r3, [r5, #16]
    1784:	ldr	r1, [pc, #656]	; (1a18 <doMenu()+0x5b4>)
    1786:	ldr	r0, [pc, #636]	; (1a04 <doMenu()+0x5a0>)
    1788:	movs	r2, #50	; 0x32
    178a:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d third_hour\n\r",  '3',acqParameters.T3);
    178e:	ldr	r3, [r5, #20]
    1790:	ldr	r1, [pc, #648]	; (1a1c <doMenu()+0x5b8>)
    1792:	ldr	r0, [pc, #624]	; (1a04 <doMenu()+0x5a0>)
    1794:	movs	r2, #51	; 0x33
    1796:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d last_hour\n\r",   '4',acqParameters.T4);
    179a:	ldr	r3, [r5, #24]
    179c:	ldr	r1, [pc, #640]	; (1a20 <doMenu()+0x5bc>)
    179e:	ldr	r0, [pc, #612]	; (1a04 <doMenu()+0x5a0>)
    17a0:	movs	r2, #52	; 0x34
    17a2:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.println();
    17a6:	ldr	r0, [pc, #604]	; (1a04 <doMenu()+0x5a0>)
    17a8:	bl	9d9c <Print::println()>
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
    17ac:	ldr	r3, [pc, #628]	; (1a24 <doMenu()+0x5c0>)
    17ae:	ldr	r1, [pc, #632]	; (1a28 <doMenu()+0x5c4>)
    17b0:	ldr	r0, [pc, #592]	; (1a04 <doMenu()+0x5a0>)
    17b2:	movs	r2, #110	; 0x6e
    17b4:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
    17b8:	bl	a40 <getDate(char*) [clone .constprop.42]>
    17bc:	movs	r2, #100	; 0x64
    17be:	mov	r3, r0
    17c0:	ldr	r1, [pc, #616]	; (1a2c <doMenu()+0x5c8>)
    17c2:	ldr	r0, [pc, #576]	; (1a04 <doMenu()+0x5a0>)
    17c4:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %s time\n\r",         't',getTime(text));
    17c8:	bl	a0c <getTime(char*) [clone .constprop.41]>
    17cc:	movs	r2, #116	; 0x74
    17ce:	mov	r3, r0
    17d0:	ldr	r1, [pc, #604]	; (1a30 <doMenu()+0x5cc>)
    17d2:	ldr	r0, [pc, #560]	; (1a04 <doMenu()+0x5a0>)
    17d4:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.println();
    17d8:	ldr	r0, [pc, #552]	; (1a04 <doMenu()+0x5a0>)
    17da:	bl	9d9c <Print::println()>
  #if MDET
  Serial.printf("%c %5d processing type\r\n",       'c',snipParameters.iproc);
    17de:	ldr	r3, [r6, #0]
    17e0:	ldr	r1, [pc, #592]	; (1a34 <doMenu()+0x5d0>)
    17e2:	ldr	r0, [pc, #544]	; (1a04 <doMenu()+0x5a0>)
    17e4:	movs	r2, #99	; 0x63
    17e6:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d threshold\r\n",             'h',snipParameters.thresh);
    17ea:	ldr	r3, [r6, #4]
    17ec:	ldr	r1, [pc, #584]	; (1a38 <doMenu()+0x5d4>)
    17ee:	ldr	r0, [pc, #532]	; (1a04 <doMenu()+0x5a0>)
    17f0:	movs	r2, #104	; 0x68
    17f2:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d noise window\r\n",          'w',snipParameters.win0);
    17f6:	ldr	r3, [r6, #8]
    17f8:	ldr	r1, [pc, #576]	; (1a3c <doMenu()+0x5d8>)
    17fa:	ldr	r0, [pc, #520]	; (1a04 <doMenu()+0x5a0>)
    17fc:	movs	r2, #119	; 0x77
    17fe:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d slow window\r\n",           's',snipParameters.win1);
    1802:	ldr	r3, [r6, #12]
    1804:	ldr	r1, [pc, #568]	; (1a40 <doMenu()+0x5dc>)
    1806:	ldr	r0, [pc, #508]	; (1a04 <doMenu()+0x5a0>)
    1808:	movs	r2, #115	; 0x73
    180a:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d extraction window\r\n",     'e',snipParameters.extr);
    180e:	ldr	r3, [r6, #16]
    1810:	ldr	r1, [pc, #560]	; (1a44 <doMenu()+0x5e0>)
    1812:	ldr	r0, [pc, #496]	; (1a04 <doMenu()+0x5a0>)
    1814:	movs	r2, #101	; 0x65
    1816:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d inhibit window\r\n",        'i',snipParameters.inhib);
    181a:	ldr	r3, [r6, #20]
    181c:	ldr	r1, [pc, #552]	; (1a48 <doMenu()+0x5e4>)
    181e:	ldr	r0, [pc, #484]	; (1a04 <doMenu()+0x5a0>)
    1820:	movs	r2, #105	; 0x69
    1822:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d noise repetition rate\r\n", 'k',snipParameters.nrep);
    1826:	ldr	r3, [r6, #24]
    1828:	ldr	r1, [pc, #544]	; (1a4c <doMenu()+0x5e8>)
    182a:	ldr	r0, [pc, #472]	; (1a04 <doMenu()+0x5a0>)
    182c:	movs	r2, #107	; 0x6b
    182e:	bl	9dcc <Print::printf(char const*, ...)>
  Serial.printf("%c %5d pre trigger delay\r\n",     'p',snipParameters.ndel);
    1832:	ldr	r3, [r6, #28]
    1834:	ldr	r1, [pc, #536]	; (1a50 <doMenu()+0x5ec>)
    1836:	ldr	r0, [pc, #460]	; (1a04 <doMenu()+0x5a0>)
    1838:	movs	r2, #112	; 0x70
    183a:	bl	9dcc <Print::printf(char const*, ...)>
  #endif
  //
  Serial.println();
    183e:	ldr	r0, [pc, #452]	; (1a04 <doMenu()+0x5a0>)
    1840:	bl	9d9c <Print::println()>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1844:	movs	r1, #23
    1846:	ldr	r0, [pc, #524]	; (1a54 <doMenu()+0x5f0>)
    1848:	bl	84a4 <usb_serial_write>
    184c:	ldr	r0, [pc, #436]	; (1a04 <doMenu()+0x5a0>)
    184e:	bl	9d9c <Print::println()>
    1852:	movs	r1, #64	; 0x40
    1854:	ldr	r0, [pc, #512]	; (1a58 <doMenu()+0x5f4>)
    1856:	bl	84a4 <usb_serial_write>
    185a:	ldr	r0, [pc, #424]	; (1a04 <doMenu()+0x5a0>)
    185c:	bl	9d9c <Print::println()>
    1860:	movs	r1, #32
    1862:	ldr	r0, [pc, #504]	; (1a5c <doMenu()+0x5f8>)
    1864:	bl	84a4 <usb_serial_write>
    1868:	ldr	r0, [pc, #408]	; (1a04 <doMenu()+0x5a0>)
    186a:	bl	9d9c <Print::println()>
    186e:	movs	r1, #88	; 0x58
    1870:	ldr	r0, [pc, #492]	; (1a60 <doMenu()+0x5fc>)
    1872:	bl	84a4 <usb_serial_write>
    1876:	ldr	r0, [pc, #396]	; (1a04 <doMenu()+0x5a0>)
    1878:	bl	9d9c <Print::println()>
    187c:	movs	r1, #38	; 0x26
    187e:	ldr	r0, [pc, #484]	; (1a64 <doMenu()+0x600>)
    1880:	bl	84a4 <usb_serial_write>
    1884:	ldr	r0, [pc, #380]	; (1a04 <doMenu()+0x5a0>)
    1886:	bl	9d9c <Print::println()>
    188a:	movs	r1, #69	; 0x45
    188c:	ldr	r0, [pc, #472]	; (1a68 <doMenu()+0x604>)
    188e:	bl	84a4 <usb_serial_write>
    1892:	ldr	r0, [pc, #368]	; (1a04 <doMenu()+0x5a0>)
    1894:	bl	9d9c <Print::println()>
    1898:	movs	r1, #50	; 0x32
    189a:	ldr	r0, [pc, #464]	; (1a6c <doMenu()+0x608>)
    189c:	bl	84a4 <usb_serial_write>
    18a0:	ldr	r0, [pc, #352]	; (1a04 <doMenu()+0x5a0>)
    18a2:	bl	9d9c <Print::println()>
    18a6:	movs	r1, #43	; 0x2b
    18a8:	ldr	r0, [pc, #452]	; (1a70 <doMenu()+0x60c>)
    18aa:	bl	84a4 <usb_serial_write>
    18ae:	ldr	r0, [pc, #340]	; (1a04 <doMenu()+0x5a0>)
    18b0:	bl	9d9c <Print::println()>
  Serial.println("exter '!cval' to read value c=(0,a,r,1,2,3,4,n,d,t,c,h,w,s,m,i,k,p) and val is new value");
  Serial.println("  e.g.: !110 will set first hour to 10");
  Serial.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  Serial.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  Serial.println("        x-1 with exit and start immediately");
  Serial.println();
    18b4:	ldr	r0, [pc, #332]	; (1a04 <doMenu()+0x5a0>)
    18b6:	bl	9d9c <Print::println()>
    18ba:	b.n	146c <doMenu()+0x8>
                  break;
        //
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    18bc:	ldr	r0, [pc, #324]	; (1a04 <doMenu()+0x5a0>)
    18be:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    18c2:	cmp	r0, #0
    18c4:	blt.w	1d0a <doMenu()+0x8a6>
    if(val>maxVal) val=maxVal;
    18c8:	cmp.w	r0, #131072	; 0x20000
    18cc:	it	ge
    18ce:	movge.w	r0, #131072	; 0x20000
                  break;
        //
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    18d2:	ldr	r3, [pc, #308]	; (1a08 <doMenu()+0x5a4>)
    18d4:	str	r0, [r3, #8]
    18d6:	b.n	146c <doMenu()+0x8>
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
    18d8:	ldr	r2, [r5, #12]
    18da:	ldr	r1, [pc, #408]	; (1a74 <doMenu()+0x610>)
    18dc:	ldr	r0, [pc, #292]	; (1a04 <doMenu()+0x5a0>)
    18de:	bl	9dcc <Print::printf(char const*, ...)>
    18e2:	b.n	146c <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
    18e4:	ldr	r2, [r5, #16]
    18e6:	ldr	r1, [pc, #396]	; (1a74 <doMenu()+0x610>)
    18e8:	ldr	r0, [pc, #280]	; (1a04 <doMenu()+0x5a0>)
    18ea:	bl	9dcc <Print::printf(char const*, ...)>
    18ee:	b.n	146c <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
    18f0:	ldr	r2, [r5, #20]
    18f2:	ldr	r1, [pc, #384]	; (1a74 <doMenu()+0x610>)
    18f4:	ldr	r0, [pc, #268]	; (1a04 <doMenu()+0x5a0>)
    18f6:	bl	9dcc <Print::printf(char const*, ...)>
    18fa:	b.n	146c <doMenu()+0x8>
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
    18fc:	ldr	r2, [r5, #24]
    18fe:	ldr	r1, [pc, #372]	; (1a74 <doMenu()+0x610>)
    1900:	ldr	r0, [pc, #256]	; (1a04 <doMenu()+0x5a0>)
    1902:	bl	9dcc <Print::printf(char const*, ...)>
    1906:	b.n	146c <doMenu()+0x8>
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
    1908:	ldr	r2, [r5, #4]
    190a:	ldr	r1, [pc, #360]	; (1a74 <doMenu()+0x610>)
    190c:	ldr	r0, [pc, #244]	; (1a04 <doMenu()+0x5a0>)
    190e:	bl	9dcc <Print::printf(char const*, ...)>
    1912:	b.n	146c <doMenu()+0x8>
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        #if MDET
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
    1914:	ldr	r3, [pc, #240]	; (1a08 <doMenu()+0x5a4>)
    1916:	ldr	r1, [pc, #352]	; (1a78 <doMenu()+0x614>)
    1918:	ldr	r2, [r3, #0]
    191a:	ldr	r0, [pc, #232]	; (1a04 <doMenu()+0x5a0>)
    191c:	bl	9dcc <Print::printf(char const*, ...)>
    1920:	b.n	146c <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
    1922:	bl	a40 <getDate(char*) [clone .constprop.42]>
    1926:	ldr	r1, [pc, #340]	; (1a7c <doMenu()+0x618>)
    1928:	mov	r2, r0
    192a:	ldr	r0, [pc, #216]	; (1a04 <doMenu()+0x5a0>)
    192c:	bl	9dcc <Print::printf(char const*, ...)>
    1930:	b.n	146c <doMenu()+0x8>
        #if MDET
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
    1932:	ldr	r3, [pc, #212]	; (1a08 <doMenu()+0x5a4>)
    1934:	ldr	r1, [pc, #320]	; (1a78 <doMenu()+0x614>)
    1936:	ldr	r2, [r3, #16]
    1938:	ldr	r0, [pc, #200]	; (1a04 <doMenu()+0x5a0>)
    193a:	bl	9dcc <Print::printf(char const*, ...)>
    193e:	b.n	146c <doMenu()+0x8>
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        #if MDET
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
    1940:	ldr	r3, [pc, #196]	; (1a08 <doMenu()+0x5a4>)
    1942:	ldr	r1, [pc, #308]	; (1a78 <doMenu()+0x614>)
    1944:	ldr	r2, [r3, #4]
    1946:	ldr	r0, [pc, #188]	; (1a04 <doMenu()+0x5a0>)
    1948:	bl	9dcc <Print::printf(char const*, ...)>
    194c:	b.n	146c <doMenu()+0x8>
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
        case 'i': Serial.printf("%04d\r\n",snipParameters.inhib);break;
    194e:	ldr	r3, [pc, #184]	; (1a08 <doMenu()+0x5a4>)
    1950:	ldr	r1, [pc, #292]	; (1a78 <doMenu()+0x614>)
    1952:	ldr	r2, [r3, #20]
    1954:	ldr	r0, [pc, #172]	; (1a04 <doMenu()+0x5a0>)
    1956:	bl	9dcc <Print::printf(char const*, ...)>
    195a:	b.n	146c <doMenu()+0x8>
        case 'k': Serial.printf("%04d\r\n",snipParameters.nrep);break;
    195c:	ldr	r3, [pc, #168]	; (1a08 <doMenu()+0x5a4>)
    195e:	ldr	r1, [pc, #280]	; (1a78 <doMenu()+0x614>)
    1960:	ldr	r2, [r3, #24]
    1962:	ldr	r0, [pc, #160]	; (1a04 <doMenu()+0x5a0>)
    1964:	bl	9dcc <Print::printf(char const*, ...)>
    1968:	b.n	146c <doMenu()+0x8>
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
    196a:	ldr	r2, [pc, #184]	; (1a24 <doMenu()+0x5c0>)
    196c:	ldr	r1, [pc, #268]	; (1a7c <doMenu()+0x618>)
    196e:	ldr	r0, [pc, #148]	; (1a04 <doMenu()+0x5a0>)
    1970:	bl	9dcc <Print::printf(char const*, ...)>
    1974:	b.n	146c <doMenu()+0x8>
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
    1976:	ldr	r2, [r5, #0]
    1978:	ldr	r1, [pc, #248]	; (1a74 <doMenu()+0x610>)
    197a:	ldr	r0, [pc, #136]	; (1a04 <doMenu()+0x5a0>)
    197c:	bl	9dcc <Print::printf(char const*, ...)>
    1980:	b.n	146c <doMenu()+0x8>
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
        case 'i': Serial.printf("%04d\r\n",snipParameters.inhib);break;
        case 'k': Serial.printf("%04d\r\n",snipParameters.nrep);break;
        case 'p': Serial.printf("%04d\r\n",snipParameters.ndel);break;
    1982:	ldr	r3, [pc, #132]	; (1a08 <doMenu()+0x5a4>)
    1984:	ldr	r1, [pc, #240]	; (1a78 <doMenu()+0x614>)
    1986:	ldr	r2, [r3, #28]
    1988:	ldr	r0, [pc, #120]	; (1a04 <doMenu()+0x5a0>)
    198a:	bl	9dcc <Print::printf(char const*, ...)>
    198e:	b.n	146c <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
    1990:	ldr	r2, [r5, #8]
    1992:	ldr	r1, [pc, #224]	; (1a74 <doMenu()+0x610>)
    1994:	ldr	r0, [pc, #108]	; (1a04 <doMenu()+0x5a0>)
    1996:	bl	9dcc <Print::printf(char const*, ...)>
    199a:	b.n	146c <doMenu()+0x8>
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        #if MDET
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
    199c:	ldr	r3, [pc, #104]	; (1a08 <doMenu()+0x5a4>)
    199e:	ldr	r1, [pc, #216]	; (1a78 <doMenu()+0x614>)
    19a0:	ldr	r2, [r3, #12]
    19a2:	ldr	r0, [pc, #96]	; (1a04 <doMenu()+0x5a0>)
    19a4:	bl	9dcc <Print::printf(char const*, ...)>
    19a8:	b.n	146c <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
    19aa:	bl	a0c <getTime(char*) [clone .constprop.41]>
    19ae:	ldr	r1, [pc, #204]	; (1a7c <doMenu()+0x618>)
    19b0:	mov	r2, r0
    19b2:	ldr	r0, [pc, #80]	; (1a04 <doMenu()+0x5a0>)
    19b4:	bl	9dcc <Print::printf(char const*, ...)>
    19b8:	b.n	146c <doMenu()+0x8>
        #if MDET
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
    19ba:	ldr	r3, [pc, #76]	; (1a08 <doMenu()+0x5a4>)
    19bc:	ldr	r1, [pc, #184]	; (1a78 <doMenu()+0x614>)
    19be:	ldr	r2, [r3, #8]
    19c0:	ldr	r0, [pc, #64]	; (1a04 <doMenu()+0x5a0>)
    19c2:	bl	9dcc <Print::printf(char const*, ...)>
    19c6:	b.n	146c <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    19c8:	ldr	r0, [pc, #56]	; (1a04 <doMenu()+0x5a0>)
    19ca:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    19ce:	cmp	r0, #0
    19d0:	blt.w	1d06 <doMenu()+0x8a2>
    19d4:	cmp	r0, #24
    19d6:	mov	r3, r0
    19d8:	it	ge
    19da:	movge	r3, #24
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    19dc:	str	r3, [r5, #12]
    19de:	b.n	146c <doMenu()+0x8>
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    19e0:	ldr	r0, [pc, #32]	; (1a04 <doMenu()+0x5a0>)
    19e2:	bl	a294 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    19e6:	cmp	r6, #23
    19e8:	bgt.w	1ca0 <doMenu()+0x83c>
  {
    if(val<minVal) val=minVal;
    19ec:	cmp	r6, r0
    19ee:	bgt.n	19fc <doMenu()+0x598>
    if(val>maxVal) val=maxVal;
    19f0:	cmp	r0, #24
    19f2:	it	gt
    19f4:	movgt	r0, #24
    19f6:	bgt.w	1ca6 <doMenu()+0x842>
    19fa:	mov	r6, r0
    19fc:	mov	r0, r6
    19fe:	b.n	1ca6 <doMenu()+0x842>
    1a00:	.word	0x00013038
    1a04:	.word	0x20014720
    1a08:	.word	0x20014540
    1a0c:	.word	0x0001304c
    1a10:	.word	0x00013060
    1a14:	.word	0x00013074
    1a18:	.word	0x00013088
    1a1c:	.word	0x000130a0
    1a20:	.word	0x000130b4
    1a24:	.word	0x20014580
    1a28:	.word	0x000130c8
    1a2c:	.word	0x000130d8
    1a30:	.word	0x000130e8
    1a34:	.word	0x000130f8
    1a38:	.word	0x00013114
    1a3c:	.word	0x00013128
    1a40:	.word	0x00013140
    1a44:	.word	0x00013158
    1a48:	.word	0x00013174
    1a4c:	.word	0x0001318c
    1a50:	.word	0x000131ac
    1a54:	.word	0x000131c8
    1a58:	.word	0x000131e0
    1a5c:	.word	0x00013224
    1a60:	.word	0x00013248
    1a64:	.word	0x000132a4
    1a68:	.word	0x000132cc
    1a6c:	.word	0x00013314
    1a70:	.word	0x00013348
    1a74:	.word	0x00013028
    1a78:	.word	0x00013030
    1a7c:	.word	0x00012f90
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    1a80:	ldr	r0, [pc, #684]	; (1d30 <doMenu()+0x8cc>)
    1a82:	bl	a294 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    1a86:	cmp	r7, #23
    1a88:	bgt.w	1c96 <doMenu()+0x832>
  {
    if(val<minVal) val=minVal;
    1a8c:	cmp	r7, r0
    1a8e:	ble.w	1cd4 <doMenu()+0x870>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    1a92:	str	r7, [r5, #20]
    1a94:	b.n	146c <doMenu()+0x8>
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1a96:	ldr	r0, [pc, #664]	; (1d30 <doMenu()+0x8cc>)
    1a98:	bl	a294 <Stream::parseInt()>
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1a9c:	cmp	r6, r8
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    1a9e:	mov	r4, r8
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1aa0:	ble.w	1cac <doMenu()+0x848>
  {
    if(val<minVal) val=minVal;
    1aa4:	cmp	r8, r0
    1aa6:	bgt.n	1ab0 <doMenu()+0x64c>
    if(val>maxVal) val=maxVal;
    1aa8:	cmp	r6, r0
    1aaa:	blt.w	1cce <doMenu()+0x86a>
    1aae:	mov	r4, r0
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    1ab0:	mov	r6, r4
    1ab2:	b.n	1cce <doMenu()+0x86a>
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1ab4:	ldr	r0, [pc, #632]	; (1d30 <doMenu()+0x8cc>)
    1ab6:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1aba:	cmp	r0, #0
    1abc:	blt.w	1ce8 <doMenu()+0x884>
    1ac0:	cmp.w	r0, #131072	; 0x20000
    1ac4:	mov	r3, r0
    1ac6:	it	ge
    1ac8:	movge.w	r3, #131072	; 0x20000
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1acc:	str	r3, [r5, #4]
    1ace:	b.n	146c <doMenu()+0x8>
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1ad0:	ldr	r0, [pc, #604]	; (1d30 <doMenu()+0x8cc>)
    1ad2:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1ad6:	cmp	r0, #0
    1ad8:	blt.w	1d2a <doMenu()+0x8c6>
    if(val>maxVal) val=maxVal;
    1adc:	cmp.w	r0, #131072	; 0x20000
    1ae0:	it	ge
    1ae2:	movge.w	r0, #131072	; 0x20000
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1ae6:	ldr	r3, [pc, #588]	; (1d34 <doMenu()+0x8d0>)
    1ae8:	str	r0, [r3, #20]
    1aea:	b.n	146c <doMenu()+0x8>
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1aec:	ldr	r0, [pc, #576]	; (1d30 <doMenu()+0x8cc>)
    1aee:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1af2:	cmp	r0, #0
    1af4:	blt.w	1d26 <doMenu()+0x8c2>
    if(val>maxVal) val=maxVal;
    1af8:	cmp.w	r0, #131072	; 0x20000
    1afc:	it	ge
    1afe:	movge.w	r0, #131072	; 0x20000
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1b02:	ldr	r3, [pc, #560]	; (1d34 <doMenu()+0x8d0>)
    1b04:	str	r0, [r3, #24]
    1b06:	b.n	146c <doMenu()+0x8>
    1b08:	ldr	r4, [pc, #556]	; (1d38 <doMenu()+0x8d4>)
    1b0a:	adds	r6, r4, #4
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1b0c:	bl	83d8 <usb_serial_getchar>
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
    1b10:	strb.w	r0, [r4, #1]!
    1b14:	cmp	r4, r6
    1b16:	bne.n	1b0c <doMenu()+0x6a8>
                  acqParameters.name[4]=0; break;
    1b18:	movs	r3, #0
    1b1a:	strb.w	r3, [r5, #36]	; 0x24
    1b1e:	b.n	146c <doMenu()+0x8>
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1b20:	ldr	r0, [pc, #524]	; (1d30 <doMenu()+0x8cc>)
    1b22:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1b26:	cmp	r0, #0
    1b28:	blt.w	1d22 <doMenu()+0x8be>
    1b2c:	cmp.w	r0, #131072	; 0x20000
    1b30:	mov	r3, r0
    1b32:	it	ge
    1b34:	movge.w	r3, #131072	; 0x20000
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1b38:	str	r3, [r5, #0]
    1b3a:	b.n	146c <doMenu()+0x8>
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'p': snipParameters.ndel   = boundaryCheck(Serial.parseInt(),0,MDEL); break;
    1b3c:	ldr	r0, [pc, #496]	; (1d30 <doMenu()+0x8cc>)
    1b3e:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1b42:	cmp	r0, #0
    1b44:	blt.w	1d1e <doMenu()+0x8ba>
    if(val>maxVal) val=maxVal;
    1b48:	cmp	r0, #10
    1b4a:	it	ge
    1b4c:	movge	r0, #10
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'p': snipParameters.ndel   = boundaryCheck(Serial.parseInt(),0,MDEL); break;
    1b4e:	ldr	r3, [pc, #484]	; (1d34 <doMenu()+0x8d0>)
    1b50:	str	r0, [r3, #28]
    1b52:	b.n	146c <doMenu()+0x8>
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1b54:	ldr	r0, [pc, #472]	; (1d30 <doMenu()+0x8cc>)
    1b56:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1b5a:	cmp	r0, #0
    1b5c:	blt.w	1d1a <doMenu()+0x8b6>
    1b60:	cmp.w	r0, #131072	; 0x20000
    1b64:	mov	r3, r0
    1b66:	it	ge
    1b68:	movge.w	r3, #131072	; 0x20000
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1b6c:	str	r3, [r5, #8]
    1b6e:	b.n	146c <doMenu()+0x8>
        //
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1b70:	ldr	r0, [pc, #444]	; (1d30 <doMenu()+0x8cc>)
    1b72:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1b76:	cmp	r0, #0
    1b78:	blt.w	1d16 <doMenu()+0x8b2>
    if(val>maxVal) val=maxVal;
    1b7c:	cmp.w	r0, #131072	; 0x20000
    1b80:	it	ge
    1b82:	movge.w	r0, #131072	; 0x20000
        //
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1b86:	ldr	r3, [pc, #428]	; (1d34 <doMenu()+0x8d0>)
    1b88:	str	r0, [r3, #12]
    1b8a:	b.n	146c <doMenu()+0x8>
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
    1b8c:	ldr	r0, [pc, #416]	; (1d30 <doMenu()+0x8cc>)
    1b8e:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1b92:	subs	r4, r0, #0
    1b94:	blt.w	1d12 <doMenu()+0x8ae>
    if(val>maxVal) val=maxVal;
    1b98:	cmp	r4, #23
    1b9a:	it	ge
    1b9c:	movge	r4, #23
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
    1b9e:	ldr	r0, [pc, #400]	; (1d30 <doMenu()+0x8cc>)
    1ba0:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1ba4:	subs	r6, r0, #0
    1ba6:	blt.w	1d0e <doMenu()+0x8aa>
    if(val>maxVal) val=maxVal;
    1baa:	cmp	r6, #59	; 0x3b
    1bac:	it	ge
    1bae:	movge	r6, #59	; 0x3b
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
    1bb0:	ldr	r0, [pc, #380]	; (1d30 <doMenu()+0x8cc>)
    1bb2:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1bb6:	subs	r7, r0, #0
    1bb8:	blt.w	1cfa <doMenu()+0x896>
    if(val>maxVal) val=maxVal;
    1bbc:	cmp	r7, #59	; 0x3b
    1bbe:	it	ge
    1bc0:	movge	r7, #59	; 0x3b
    setRTCTime(hour(),minute(),second(),day, month, year);
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    setRTCTime(hour,minutes,seconds,day(),month(),year());
    1bc2:	bl	2ea8 <day()>
    1bc6:	mov	r8, r0
    1bc8:	bl	2ec8 <month()>
    1bcc:	mov	r9, r0
    1bce:	bl	2ee8 <year()>
    1bd2:	str.w	r9, [sp]
    1bd6:	str	r0, [sp, #4]
    1bd8:	mov	r3, r8
    1bda:	mov	r2, r7
    1bdc:	mov	r1, r6
    1bde:	mov	r0, r4
    1be0:	bl	1420 <setRTCTime(int, int, int, int, int, int)>
    1be4:	b.n	146c <doMenu()+0x8>
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
    1be6:	ldr	r0, [pc, #328]	; (1d30 <doMenu()+0x8cc>)
    1be8:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1bec:	cmp	r0, #0
    1bee:	blt.w	1cf6 <doMenu()+0x892>
    if(val>maxVal) val=maxVal;
    1bf2:	cmp	r0, #1
    1bf4:	it	ge
    1bf6:	movge	r0, #1
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
    1bf8:	ldr	r3, [pc, #312]	; (1d34 <doMenu()+0x8d0>)
    1bfa:	str	r0, [r3, #0]
    1bfc:	b.n	146c <doMenu()+0x8>
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    1bfe:	ldr	r0, [pc, #304]	; (1d30 <doMenu()+0x8cc>)
    1c00:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1c04:	cmp.w	r0, #2000	; 0x7d0
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    1c08:	mov	r4, r0
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1c0a:	blt.n	1c90 <doMenu()+0x82c>
    if(val>maxVal) val=maxVal;
    1c0c:	movw	r3, #3000	; 0xbb8
    1c10:	cmp	r0, r3
    1c12:	it	ge
    1c14:	movge	r4, r3
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
    1c16:	ldr	r0, [pc, #280]	; (1d30 <doMenu()+0x8cc>)
    1c18:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1c1c:	subs	r7, r0, #0
    1c1e:	ble.n	1d02 <doMenu()+0x89e>
    if(val>maxVal) val=maxVal;
    1c20:	cmp	r7, #12
    1c22:	it	ge
    1c24:	movge	r7, #12
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
    1c26:	ldr	r0, [pc, #264]	; (1d30 <doMenu()+0x8cc>)
    1c28:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1c2c:	subs	r6, r0, #0
    1c2e:	ble.n	1cfe <doMenu()+0x89a>
    if(val>maxVal) val=maxVal;
    1c30:	cmp	r6, #31
    1c32:	it	ge
    1c34:	movge	r6, #31
  setTime(tt); // local
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    setRTCTime(hour(),minute(),second(),day, month, year);
    1c36:	bl	2e48 <hour()>
    1c3a:	mov	r8, r0
    1c3c:	bl	2e68 <minute()>
    1c40:	mov	r9, r0
    1c42:	bl	2e88 <second()>
    1c46:	mov	r1, r9
    1c48:	mov	r2, r0
    1c4a:	str	r4, [sp, #4]
    1c4c:	mov	r0, r8
    1c4e:	str	r7, [sp, #0]
    1c50:	mov	r3, r6
    1c52:	bl	1420 <setRTCTime(int, int, int, int, int, int)>
    1c56:	b.n	146c <doMenu()+0x8>
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1c58:	ldr	r0, [pc, #212]	; (1d30 <doMenu()+0x8cc>)
    1c5a:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1c5e:	cmp	r0, #0
    1c60:	blt.n	1cf2 <doMenu()+0x88e>
    if(val>maxVal) val=maxVal;
    1c62:	cmp.w	r0, #131072	; 0x20000
    1c66:	it	ge
    1c68:	movge.w	r0, #131072	; 0x20000
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1c6c:	ldr	r3, [pc, #196]	; (1d34 <doMenu()+0x8d0>)
    1c6e:	str	r0, [r3, #16]
    1c70:	b.w	146c <doMenu()+0x8>
                  setTime(hour,minutes,seconds);
                  break;
        //
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
    1c74:	ldr	r0, [pc, #184]	; (1d30 <doMenu()+0x8cc>)
    1c76:	bl	a294 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1c7a:	adds	r3, r0, #1
    1c7c:	blt.n	1cec <doMenu()+0x888>
    if(val>maxVal) val=maxVal;
    1c7e:	cmp.w	r0, #131072	; 0x20000
    1c82:	it	ge
    1c84:	movge.w	r0, #131072	; 0x20000
                  setTime(hour,minutes,seconds);
                  break;
        //
        #if MDET
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
    1c88:	ldr	r3, [pc, #168]	; (1d34 <doMenu()+0x8d0>)
    1c8a:	str	r0, [r3, #4]
    1c8c:	b.w	146c <doMenu()+0x8>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1c90:	mov.w	r4, #2000	; 0x7d0
    1c94:	b.n	1c16 <doMenu()+0x7b2>
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if((val>maxVal) && (val<minVal)) val=maxVal;
    1c96:	cmp	r0, #24
    1c98:	it	ge
    1c9a:	movge	r0, #24
    1c9c:	mov	r7, r0
    1c9e:	b.n	1a92 <doMenu()+0x62e>
    1ca0:	cmp	r0, #24
    1ca2:	it	ge
    1ca4:	movge	r0, #24
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    1ca6:	str	r0, [r5, #16]
    1ca8:	b.w	146c <doMenu()+0x8>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    1cac:	cmp	r0, #0
    1cae:	blt.n	1ce0 <doMenu()+0x87c>
    if(val>modVal) val=modVal;
    1cb0:	cmp	r0, #24
    1cb2:	it	ge
    1cb4:	movge	r0, #24
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    1cb6:	cmp	r6, r0
    1cb8:	bge.n	1ce4 <doMenu()+0x880>
    1cba:	cmp	r8, r0
    1cbc:	ble.n	1ce4 <doMenu()+0x880>
    { if(val>(minVal+maxVal)/2) val = minVal; else val=maxVal;
    1cbe:	add.w	r3, r6, r8
    1cc2:	add.w	r3, r3, r3, lsr #31
    1cc6:	cmp.w	r0, r3, asr #1
    1cca:	it	gt
    1ccc:	movgt	r6, r8
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1cce:	str	r6, [r5, #24]
    1cd0:	b.w	146c <doMenu()+0x8>
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
    1cd4:	cmp	r0, #24
    1cd6:	it	gt
    1cd8:	movgt	r7, #24
    1cda:	bgt.w	1a92 <doMenu()+0x62e>
    1cde:	b.n	1c9c <doMenu()+0x838>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    1ce0:	movs	r0, #0
    1ce2:	b.n	1cb6 <doMenu()+0x852>
    if(val>modVal) val=modVal;
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    1ce4:	mov	r6, r0
    1ce6:	b.n	1cce <doMenu()+0x86a>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1ce8:	movs	r3, #0
    1cea:	b.n	1acc <doMenu()+0x668>
    1cec:	mov.w	r0, #4294967295
    1cf0:	b.n	1c88 <doMenu()+0x824>
    1cf2:	movs	r0, #0
    1cf4:	b.n	1c6c <doMenu()+0x808>
    1cf6:	movs	r0, #0
    1cf8:	b.n	1bf8 <doMenu()+0x794>
    1cfa:	movs	r7, #0
    1cfc:	b.n	1bc2 <doMenu()+0x75e>
    1cfe:	movs	r6, #1
    1d00:	b.n	1c36 <doMenu()+0x7d2>
    1d02:	movs	r7, #1
    1d04:	b.n	1c26 <doMenu()+0x7c2>
    1d06:	movs	r3, #0
    1d08:	b.n	19dc <doMenu()+0x578>
    1d0a:	movs	r0, #0
    1d0c:	b.n	18d2 <doMenu()+0x46e>
    1d0e:	movs	r6, #0
    1d10:	b.n	1bb0 <doMenu()+0x74c>
    1d12:	movs	r4, #0
    1d14:	b.n	1b9e <doMenu()+0x73a>
    1d16:	movs	r0, #0
    1d18:	b.n	1b86 <doMenu()+0x722>
    1d1a:	movs	r3, #0
    1d1c:	b.n	1b6c <doMenu()+0x708>
    1d1e:	movs	r0, #0
    1d20:	b.n	1b4e <doMenu()+0x6ea>
    1d22:	movs	r3, #0
    1d24:	b.n	1b38 <doMenu()+0x6d4>
    1d26:	movs	r0, #0
    1d28:	b.n	1b02 <doMenu()+0x69e>
    1d2a:	movs	r0, #0
    1d2c:	b.n	1ae6 <doMenu()+0x682>
    1d2e:	nop
    1d30:	.word	0x20014720
    1d34:	.word	0x20014540
    1d38:	.word	0x2001457f

00001d3c <setup>:
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
//int started=0;
extern "C" void setup() {
    1d3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // put your setup code here, to run once:
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    1d40:	movs	r0, #3
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
//int started=0;
extern "C" void setup() {
    1d42:	sub	sp, #12
  // put your setup code here, to run once:
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    1d44:	movs	r1, #2
    1d46:	bl	8948 <pinMode>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);
    1d4a:	ldr	r0, [pc, #352]	; (1eac <setup+0x170>)
    1d4c:	ldr	r4, [pc, #352]	; (1eb0 <setup+0x174>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d4e:	ldr	r5, [pc, #356]	; (1eb4 <setup+0x178>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d50:	ldr	r7, [pc, #356]	; (1eb8 <setup+0x17c>)
    1d52:	ldr	r6, [pc, #360]	; (1ebc <setup+0x180>)
    1d54:	bl	2f50 <setSyncProvider(long (*)())>
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d58:	ldrb	r3, [r4, #0]

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    1d5a:	movs	r0, #3
    1d5c:	cmp	r3, #0
    1d5e:	beq.w	1e9e <setup+0x162>
    1d62:	ldrb	r3, [r5, #0]
    1d64:	lsls	r2, r3, #31
    1d66:	bpl.w	1e9e <setup+0x162>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d6a:	ldr	r3, [r7, #0]
    1d6c:	ldr	r2, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d6e:	subs	r3, r3, r2
    1d70:	cmp	r3, #14
    1d72:	bls.w	1e9e <setup+0x162>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1d76:	movs	r1, #18
    1d78:	ldr	r0, [pc, #324]	; (1ec0 <setup+0x184>)

  //
  uSD.init();

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1d7a:	ldr	r5, [pc, #328]	; (1ec4 <setup+0x188>)
    1d7c:	bl	84a4 <usb_serial_write>
    1d80:	ldr	r0, [pc, #324]	; (1ec8 <setup+0x18c>)
    1d82:	bl	9d9c <Print::println()>
  // for 16bit resolution
  temperature = -0.0293 * analogRead(70) + 440.5;
*/

#define MAUDIO (MAX_Q+MDEL+50)
	AudioMemory (MAUDIO); // 600 blocks use about 200 kB (requires Teensy 3.6)
    1d86:	mov.w	r1, #560	; 0x230
    1d8a:	ldr	r0, [pc, #320]	; (1ecc <setup+0x190>)
    1d8c:	bl	9e84 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
}

void I2S_stop(void)
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1d90:	ldr	r2, [pc, #316]	; (1ed0 <setup+0x194>)
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1d92:	ldr	r0, [pc, #320]	; (1ed4 <setup+0x198>)
    1d94:	ldr	r3, [r2, #0]
    1d96:	bic.w	r3, r3, #2415919104	; 0x90000000
    1d9a:	str	r3, [r2, #0]

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1d9c:	movs	r4, #8
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1d9e:	bl	106c <c_uSD::init()>

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1da2:	mov	r3, r5
    1da4:	str	r4, [sp, #0]
    1da6:	mov	r2, r4
    1da8:	ldr	r1, [pc, #300]	; (1ed8 <setup+0x19c>)
    1daa:	ldr	r0, [pc, #296]	; (1ed4 <setup+0x198>)
    1dac:	bl	130c <c_uSD::loadConfig(unsigned long*, int, long*, int)>
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
    1db0:	ldr	r3, [pc, #296]	; (1edc <setup+0x1a0>)
    1db2:	ldr	r3, [r3, #0]
    1db4:	lsls	r3, r3, #19
    1db6:	bmi.n	1dca <setup+0x8e>
#endif

  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    1db8:	bl	1464 <doMenu()>
    if(ret<0) ;  // should shutdown now (not implemented) // keep compiler happy
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1dbc:	str	r4, [sp, #0]
    1dbe:	mov	r2, r4
    1dc0:	mov	r3, r5
    1dc2:	ldr	r1, [pc, #276]	; (1ed8 <setup+0x19c>)
    1dc4:	ldr	r0, [pc, #268]	; (1ed4 <setup+0x198>)
    1dc6:	bl	11e4 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
  
  #elif (ACQ == _I2S_QUAD)
    I2S_modification(F_SAMP,16,4); // I2S_Quad not modified for 32 bit (therefore 16 bit)
  
  #elif((ACQ == _I2S_32) || (ACQ == _I2S_32_MONO))
    I2S_modification(F_SAMP,32,2);
    1dca:	movs	r2, #2
    1dcc:	movs	r1, #32
    1dce:	movw	r0, #48000	; 0xbb80
    1dd2:	bl	e8c <I2S_modification(unsigned long, unsigned short, int)>
public:

	I2S_32(void) : AudioStream(0, NULL) {begin();}
  void begin(void);
  virtual void update(void);
  void digitalShift(int16_t val){I2S_32::shift=val;}
    1dd6:	ldr	r4, [pc, #264]	; (1ee0 <setup+0x1a4>)
{
public:

  mDelay(int del) : AudioStream(nch, inputQueueArray), head(mq), numDelay(del){ reset(); }
  void reset(void);
  void setDelay(int16_t ndel) {numDelay=ndel;}
    1dd8:	ldr	r3, [pc, #264]	; (1ee4 <setup+0x1a8>)
  state=0;
}

void c_uSD::setPrefix(char *prefix)
{
  strcpy(name,prefix);
    1dda:	ldr	r1, [pc, #268]	; (1ee8 <setup+0x1ac>)
    1ddc:	ldr	r0, [pc, #268]	; (1eec <setup+0x1b0>)
    1dde:	ldr	r7, [pc, #272]	; (1ef0 <setup+0x1b4>)
    1de0:	movs	r2, #10
    1de2:	movs	r6, #12
    1de4:	strh.w	r2, [r3, #130]	; 0x82
    1de8:	strh	r6, [r4, #0]
    1dea:	bl	c87c <strcpy>
 
void mProcess::begin(SNIP_Parameters_s *param)
{  
//  blockCount=0;
  
  thresh=param->thresh;
    1dee:	ldr	r3, [pc, #260]	; (1ef4 <setup+0x1b8>)
    1df0:	ldr	r2, [r5, #4]
  win0=param->win0;
    1df2:	ldr	r4, [r5, #8]
  win1=param->win1;
    1df4:	ldr	r0, [r5, #12]
 
void mProcess::begin(SNIP_Parameters_s *param)
{  
//  blockCount=0;
  
  thresh=param->thresh;
    1df6:	str	r2, [r3, #56]	; 0x38
  extr=param->extr;
  inhib=param->inhib;
  ndel=param->ndel;

  sigCount= -1; // start with no detection
  detCount=0;
    1df8:	movs	r1, #0
  // lets start
  #if MDET
    process1.begin(&snipParameters); 
  #endif

  for(int ii=0; ii<NCH; ii++) queue[ii].begin();
    1dfa:	mov	r8, r1
  
  thresh=param->thresh;
  win0=param->win0;
  win1=param->win1;
  extr=param->extr;
  inhib=param->inhib;
    1dfc:	ldr	r2, [r5, #20]
  ndel=param->ndel;

  sigCount= -1; // start with no detection
  detCount=0;
    1dfe:	str	r1, [r3, #36]	; 0x24
void mProcess::begin(SNIP_Parameters_s *param)
{  
//  blockCount=0;
  
  thresh=param->thresh;
  win0=param->win0;
    1e00:	str	r4, [r3, #60]	; 0x3c
  win1=param->win1;
  extr=param->extr;
    1e02:	ldr	r1, [r5, #16]
{  
//  blockCount=0;
  
  thresh=param->thresh;
  win0=param->win0;
  win1=param->win1;
    1e04:	str	r0, [r3, #64]	; 0x40
  extr=param->extr;
  inhib=param->inhib;
  ndel=param->ndel;
    1e06:	ldr	r5, [r5, #28]
//  blockCount=0;
  
  thresh=param->thresh;
  win0=param->win0;
  win1=param->win1;
  extr=param->extr;
    1e08:	str	r1, [r3, #68]	; 0x44
  ndel=param->ndel;

  sigCount= -1; // start with no detection
  detCount=0;

  nest1=1<<10;
    1e0a:	mov.w	r0, #1024	; 0x400
  win1=param->win1;
  extr=param->extr;
  inhib=param->inhib;
  ndel=param->ndel;

  sigCount= -1; // start with no detection
    1e0e:	mov.w	r4, #4294967295
  
  thresh=param->thresh;
  win0=param->win0;
  win1=param->win1;
  extr=param->extr;
  inhib=param->inhib;
    1e12:	str	r2, [r3, #72]	; 0x48
  ndel=param->ndel;
    1e14:	str	r5, [r3, #76]	; 0x4c

  sigCount= -1; // start with no detection
    1e16:	str	r4, [r3, #32]
{
	uint16_t t;

	if (userblock) {
		release(userblock);
		userblock = NULL;
    1e18:	mov	fp, r8
  detCount=0;

  nest1=1<<10;
    1e1a:	str	r0, [r3, #80]	; 0x50
  nest2=1<<10;
    1e1c:	str	r0, [r3, #84]	; 0x54
    1e1e:	mov	r9, r7
	}
	t = tail;
    1e20:	movw	sl, #1044	; 0x414
template <int mq>
void mRecordQueue<mq>::clear(void)
{
	uint16_t t;

	if (userblock) {
    1e24:	ldr.w	r0, [r9, #1032]	; 0x408
    1e28:	cbz	r0, 1e32 <setup+0xf6>
		release(userblock);
    1e2a:	bl	9f98 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1e2e:	str.w	fp, [r9, #1032]	; 0x408
	}
	t = tail;
    1e32:	mla	r5, sl, r8, r7
    1e36:	ldrh.w	r4, [r5, #1038]	; 0x40e
	while (t != head) {
    1e3a:	ldrh.w	r3, [r5, #1036]	; 0x40c

	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
    1e3e:	uxth	r4, r4
	while (t != head) {
    1e40:	uxth	r3, r3
    1e42:	cmp	r4, r3
    1e44:	beq.n	1e70 <setup+0x134>
		if (++t >= mq) t = 0;
		release(queue[t]);
    1e46:	add.w	r6, r8, r8, lsl #6
    1e4a:	add.w	r6, r8, r6, lsl #2
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
		if (++t >= mq) t = 0;
    1e4e:	adds	r4, #1
    1e50:	uxth	r4, r4
    1e52:	cmp	r4, #249	; 0xf9
    1e54:	it	hi
    1e56:	movhi	r4, #0
    1e58:	mov	r3, r4
		release(queue[t]);
    1e5a:	add	r3, r6
    1e5c:	adds	r3, #8
    1e5e:	ldr.w	r0, [r7, r3, lsl #2]
    1e62:	bl	9f98 <AudioStream::release(audio_block_struct*)>
	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
    1e66:	ldrh.w	r3, [r5, #1036]	; 0x40c
    1e6a:	uxth	r3, r3
    1e6c:	cmp	r3, r4
    1e6e:	bne.n	1e4e <setup+0x112>
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1e70:	movs	r2, #1
	t = tail;
	while (t != head) {
		if (++t >= mq) t = 0;
		release(queue[t]);
	}
	tail = t;
    1e72:	mla	r3, sl, r8, r7
    1e76:	add	r8, r2
    1e78:	cmp.w	r8, #2
    1e7c:	strh.w	r4, [r3, #1038]	; 0x40e
    1e80:	addw	r9, r9, #1044	; 0x414
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1e84:	strh.w	r2, [r3, #1040]	; 0x410
    1e88:	bne.n	1e24 <setup+0xe8>
    1e8a:	movs	r1, #12
    1e8c:	ldr	r0, [pc, #104]	; (1ef8 <setup+0x1bc>)
    1e8e:	bl	84a4 <usb_serial_write>
    1e92:	ldr	r0, [pc, #52]	; (1ec8 <setup+0x18c>)
  //
  Serial.println("End of Setup");
//  started=0;
}
    1e94:	add	sp, #12
    1e96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e9a:	b.w	9d9c <Print::println()>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    1e9e:	bl	892c <digitalRead>
    1ea2:	cmp	r0, #0
    1ea4:	beq.w	1d58 <setup+0x1c>
    1ea8:	b.n	1d76 <setup+0x3a>
    1eaa:	nop
    1eac:	.word	0x000009f1
    1eb0:	.word	0x2001ab64
    1eb4:	.word	0x2001aa7c
    1eb8:	.word	0x2001aa80
    1ebc:	.word	0x2001af54
    1ec0:	.word	0x00013374
    1ec4:	.word	0x20014540
    1ec8:	.word	0x20014720
    1ecc:	.word	0x1fff0600
    1ed0:	.word	0x4002f080
    1ed4:	.word	0x2001519c
    1ed8:	.word	0x20014560
    1edc:	.word	0x400ff010
    1ee0:	.word	0x2001453e
    1ee4:	.word	0x20019ad4
    1ee8:	.word	0x20014580
    1eec:	.word	0x2001569e
    1ef0:	.word	0x20019eb4
    1ef4:	.word	0x20019e40
    1ef8:	.word	0x00013388

00001efc <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    1efc:	mov	r5, r0
    1efe:	ldr.w	r0, [r0, #1156]	; 0x484
    1f02:	push	{r3, lr}
    1f04:	mov	r4, r1
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1f06:	cbz	r0, 1f38 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1f08:	ldr	r3, [r0, #0]
    1f0a:	ldr	r3, [r3, #36]	; 0x24
    1f0c:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    1f0e:	cbnz	r0, 1f38 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1f10:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1f14:	cbz	r3, 1f20 <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    1f16:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1f18:	cbz	r3, 1f2e <SdBase<FsVolume>::errorHalt(Print*)+0x32>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    1f1a:	bl	9c7c <yield>
    1f1e:	b.n	1f1a <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1f20:	ldr.w	r3, [r5, #1148]	; 0x47c
    1f24:	cbz	r3, 1f2e <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    1f26:	ldrb.w	r3, [r3, #1084]	; 0x43c
    1f2a:	cmp	r3, #0
    1f2c:	bne.n	1f1a <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1f2e:	mov	r0, r4
    1f30:	ldr	r1, [pc, #84]	; (1f88 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1f32:	bl	be8 <Print::println(__FlashStringHelper const*)>
    1f36:	b.n	1f1a <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1f38:	ldr	r1, [pc, #80]	; (1f8c <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1f3a:	mov	r0, r4
    1f3c:	bl	bcc <Print::write(char const*)>
    1f40:	ldr.w	r0, [r5, #1156]	; 0x484
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1f44:	cbz	r0, 1f84 <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    1f46:	ldr	r3, [r0, #0]
    1f48:	ldr	r3, [r3, #36]	; 0x24
    1f4a:	blx	r3
    1f4c:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1f4e:	movs	r3, #0
    1f50:	movs	r2, #16
    1f52:	mov	r0, r4
    1f54:	bl	9de8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1f58:	ldr	r1, [pc, #52]	; (1f90 <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1f5a:	mov	r0, r4
    1f5c:	bl	bcc <Print::write(char const*)>
    1f60:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1f64:	cbz	r0, 1f80 <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    1f66:	ldr	r3, [r0, #0]
    1f68:	ldr	r3, [r3, #40]	; 0x28
    1f6a:	blx	r3
    1f6c:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1f6e:	movs	r3, #0
    1f70:	movs	r2, #16
    1f72:	mov	r0, r4
    1f74:	bl	9de8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1f78:	mov	r0, r4
    1f7a:	bl	9d9c <Print::println()>
    1f7e:	b.n	1f1a <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1f80:	mov	r1, r0
    1f82:	b.n	1f6e <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1f84:	movs	r1, #41	; 0x29
    1f86:	b.n	1f4e <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    1f88:	.word	0x000133a8
    1f8c:	.word	0x00013398
    1f90:	.word	0x000133a4

00001f94 <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1f94:	ldr	r4, [pc, #28]	; (1fb4 <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1f96:	push	{r3, lr}
    1f98:	mov	r5, r0
    1f9a:	mov	r6, r1
    1f9c:	mov	r0, r4
    1f9e:	ldr	r1, [pc, #24]	; (1fb8 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1fa0:	bl	bcc <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1fa4:	mov	r1, r6
    1fa6:	mov	r0, r4
    1fa8:	bl	be8 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1fac:	mov	r1, r4
    1fae:	mov	r0, r5
    1fb0:	bl	1efc <SdBase<FsVolume>::errorHalt(Print*)>
    1fb4:	.word	0x20014720
    1fb8:	.word	0x000133bc

00001fbc <c_uSD::write(short*, long)>:
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1fbc:	push	{r4, r5, r6, lr}
    1fbe:	mov	r4, r0
  if(state == 0)
    1fc0:	ldrsh.w	r0, [r0, #1276]	; 0x4fc
{
  strcpy(name,prefix);
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1fc4:	mov	r6, r1
    1fc6:	mov	r5, r2
  if(state == 0)
    1fc8:	cbz	r0, 1fd8 <c_uSD::write(short*, long)+0x1c>
    #endif
    state=1; // flag that file is open
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
    1fca:	subs	r3, r0, #1
    1fcc:	uxth	r3, r3
    1fce:	cmp	r3, #1
    1fd0:	bls.n	201e <c_uSD::write(short*, long)+0x62>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
  }
  
  if(state == 3)
    1fd2:	cmp	r0, #3
    1fd4:	beq.n	2090 <c_uSD::write(short*, long)+0xd4>
  {
    state=close();
  }
  return state;
}
    1fd6:	pop	{r4, r5, r6, pc}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    1fd8:	addw	r0, r4, #1282	; 0x502
    1fdc:	bl	f88 <makeFilename(char*)>
    if(!filename) {state=-1; return state;} // flag to do not anything
    1fe0:	cmp	r0, #0
    1fe2:	beq.n	209c <c_uSD::write(short*, long)+0xe0>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1fe4:	ldr	r3, [pc, #204]	; (20b4 <c_uSD::write(short*, long)+0xf8>)
    1fe6:	ldr	r1, [r3, #0]
    1fe8:	cmp	r1, #0
    1fea:	beq.n	206a <c_uSD::write(short*, long)+0xae>
    1fec:	mov	r2, r0
    1fee:	movw	r3, #1538	; 0x602
    1ff2:	addw	r0, r4, #1212	; 0x4bc
    1ff6:	bl	6970 <FsBaseFile::open(FsVolume*, char const*, int)>
    1ffa:	cbz	r0, 206a <c_uSD::write(short*, long)+0xae>
    1ffc:	ldr.w	r0, [r4, #1268]	; 0x4f4
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    2000:	cbz	r0, 204e <c_uSD::write(short*, long)+0x92>
   *
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
    2002:	mov.w	r1, #41943040	; 0x2800000
    2006:	bl	5770 <FatFile::preAllocate(unsigned long)>
    200a:	cbz	r0, 2062 <c_uSD::write(short*, long)+0xa6>
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    #ifdef  GEN_WAV_FILE // keep first record
          memcpy(header,(const char *)data,512);
    200c:	mov.w	r2, #512	; 0x200
    2010:	mov	r1, r6
    2012:	ldr	r0, [pc, #164]	; (20b8 <c_uSD::write(short*, long)+0xfc>)
    2014:	bl	82a4 <memcpy>
    #endif
    state=1; // flag that file is open
    nbuf=0;
    2018:	movs	r3, #0
    201a:	strh.w	r3, [r4, #1278]	; 0x4fe
    201e:	ldr.w	r0, [r4, #1268]	; 0x4f4
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    2022:	movs	r3, #2
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    2024:	lsls	r5, r5, #1
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    2026:	strh.w	r3, [r4, #1276]	; 0x4fc
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    202a:	cbz	r0, 2072 <c_uSD::write(short*, long)+0xb6>
    202c:	mov	r1, r6
    202e:	mov	r2, r5
    2030:	bl	5c90 <FatFile::write(void const*, unsigned int)>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    2034:	cmp	r0, r5
    2036:	bne.n	20aa <c_uSD::write(short*, long)+0xee>
    nbuf++;
    2038:	ldrh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    203c:	ldrsh.w	r2, [r4, #1280]	; 0x500
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    2040:	adds	r3, #1
    2042:	strh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    2046:	cbnz	r2, 2084 <c_uSD::write(short*, long)+0xc8>
    2048:	ldrsh.w	r0, [r4, #1276]	; 0x4fc
    204c:	b.n	1fd2 <c_uSD::write(short*, long)+0x16>
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    204e:	ldr.w	r0, [r4, #1272]	; 0x4f8
    2052:	cbz	r0, 2062 <c_uSD::write(short*, long)+0xa6>
    2054:	mov.w	r2, #41943040	; 0x2800000
    2058:	movs	r3, #0
    205a:	bl	51a8 <ExFatFile::preAllocate(unsigned long long)>
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    205e:	cmp	r0, #0
    2060:	bne.n	200c <c_uSD::write(short*, long)+0x50>
    2062:	mov	r0, r4
    2064:	ldr	r1, [pc, #84]	; (20bc <c_uSD::write(short*, long)+0x100>)
    2066:	bl	1f94 <SdBase<FsVolume>::errorHalt(char const*)>
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    206a:	mov	r0, r4
    206c:	ldr	r1, [pc, #80]	; (20c0 <c_uSD::write(short*, long)+0x104>)
    206e:	bl	1f94 <SdBase<FsVolume>::errorHalt(char const*)>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2072:	ldr.w	r0, [r4, #1272]	; 0x4f8
    2076:	cmp	r0, #0
    2078:	beq.n	2034 <c_uSD::write(short*, long)+0x78>
    207a:	mov	r1, r6
    207c:	mov	r2, r5
    207e:	bl	5318 <ExFatFile::write(void const*, unsigned int)>
    2082:	b.n	2034 <c_uSD::write(short*, long)+0x78>
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
    2084:	movs	r2, #0
    2086:	movs	r3, #3
    2088:	strh.w	r2, [r4, #1280]	; 0x500
    208c:	strh.w	r3, [r4, #1276]	; 0x4fc
  }
  
  if(state == 3)
  {
    state=close();
    2090:	mov	r0, r4
    2092:	bl	10dc <c_uSD::close()>
    2096:	strh.w	r0, [r4, #1276]	; 0x4fc
  }
  return state;
    209a:	pop	{r4, r5, r6, pc}
int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    209c:	movw	r3, #65535	; 0xffff
    20a0:	strh.w	r3, [r4, #1276]	; 0x4fc
    20a4:	mov.w	r0, #4294967295
    20a8:	pop	{r4, r5, r6, pc}
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    20aa:	mov	r0, r4
    20ac:	ldr	r1, [pc, #20]	; (20c4 <c_uSD::write(short*, long)+0x108>)
    20ae:	bl	1f94 <SdBase<FsVolume>::errorHalt(char const*)>
    20b2:	nop
    20b4:	.word	0x2001aa20
    20b8:	.word	0x200158ac
    20bc:	.word	0x000133f0
    20c0:	.word	0x000133dc
    20c4:	.word	0x000133c4

000020c8 <loop>:
  int16_t mustStore=1;
#else
  int16_t mustStore=0;
#endif

extern "C" void loop() {
    20c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    20cc:	ldr	r4, [pc, #728]	; (23a8 <loop+0x2e0>)
    20ce:	ldrh.w	r3, [r4, #1036]	; 0x40c
  t = tail;
    20d2:	ldrh.w	r1, [r4, #1038]	; 0x40e
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    20d6:	uxth	r3, r3
  t = tail;
    20d8:	uxth	r1, r1
  if (h >= t) return h - t;
    20da:	cmp	r1, r3
  return mq + h - t;
    20dc:	itte	hi
    20de:	addhi.w	r2, r3, #250	; 0xfa
    20e2:	subhi	r3, r2, r1
{
  uint16_t h, t;

  h = head;
  t = tail;
  if (h >= t) return h - t;
    20e4:	subls	r3, r3, r1
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    20e6:	ldrh.w	r2, [r4, #2080]	; 0x820
  t = tail;
    20ea:	ldrh.w	r1, [r4, #2082]	; 0x822
  if (h >= t) return h - t;
    20ee:	uxth	r3, r3
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    20f0:	uxth	r2, r2
  t = tail;
    20f2:	uxth	r1, r1
  // put your main code here, to run repeatedly:
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
    20f4:	adds	r3, #0
    20f6:	it	ne
    20f8:	movne	r3, #1
  if (h >= t) return h - t;
    20fa:	cmp	r1, r2
  return mq + h - t;
    20fc:	it	hi
    20fe:	addhi	r2, #250	; 0xfa
    2100:	subs	r2, r2, r1
    2102:	uxth	r2, r2
  int16_t mustStore=1;
#else
  int16_t mustStore=0;
#endif

extern "C" void loop() {
    2104:	sub	sp, #36	; 0x24
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    2106:	cmp	r2, #0
    2108:	beq.w	2262 <loop+0x19a>

  if(have_data)
    210c:	cmp	r3, #0
    210e:	beq.w	2262 <loop+0x19a>
    2112:	ldr	r1, [pc, #660]	; (23a8 <loop+0x2e0>)
    2114:	movs	r2, #0
    2116:	add	r6, sp, #24
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2118:	movw	r7, #1044	; 0x414
template <int mq>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
    211c:	ldr.w	r3, [r1, #1032]	; 0x408
    2120:	cmp	r3, #0
    2122:	beq.w	242a <loop+0x362>
    2126:	movs	r3, #0
      
    #endif
    //
    // fetch data from queues
    int16_t * data[NCH];
    for(int ii=0; ii<NCH; ii++) data[ii] = (int16_t *)queue[ii].readBuffer();
    2128:	str.w	r3, [r6, r2, lsl #2]
    212c:	adds	r2, #1
    212e:	cmp	r2, #2
    2130:	addw	r1, r1, #1044	; 0x414
    2134:	bne.n	211c <loop+0x54>
    2136:	ldr	r3, [pc, #628]	; (23ac <loop+0x2e4>)
    2138:	ldr	r1, [sp, #24]
    213a:	ldr	r2, [sp, #28]
    213c:	add.w	r5, r3, #512	; 0x200
    2140:	subs	r1, #2
    2142:	subs	r2, #2
    // multiplex data
    int16_t *tmp = tempBuffer;
    for(int ii=0;ii<AUDIO_BLOCK_SAMPLES;ii++) for(int jj=0; jj<NCH; jj++) *tmp++ = *data[jj]++;
    2144:	ldrsh.w	r0, [r1, #2]!
    2148:	strh.w	r0, [r3, #-4]
    214c:	ldrsh.w	r0, [r2, #2]!
    2150:	strh.w	r0, [r3, #-2]
    2154:	adds	r3, #4
    2156:	cmp	r3, r5
    2158:	bne.n	2144 <loop+0x7c>
}

template <int mq>
void mRecordQueue<mq>::freeBuffer(void)
{
	if (userblock == NULL) return;
    215a:	ldr.w	r0, [r4, #1032]	; 0x408
    215e:	ldr	r5, [pc, #584]	; (23a8 <loop+0x2e0>)
    2160:	cbz	r0, 216c <loop+0xa4>
	release(userblock);
    2162:	bl	9f98 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    2166:	movs	r3, #0
    2168:	str.w	r3, [r5, #1032]	; 0x408
}

template <int mq>
void mRecordQueue<mq>::freeBuffer(void)
{
	if (userblock == NULL) return;
    216c:	ldr.w	r0, [r4, #2076]	; 0x81c
    2170:	ldr	r5, [pc, #564]	; (23a8 <loop+0x2e0>)
    2172:	cbz	r0, 217e <loop+0xb6>
	release(userblock);
    2174:	bl	9f98 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    2178:	movs	r3, #0
    217a:	str.w	r3, [r5, #2076]	; 0x81c
    217e:	ldr	r2, [pc, #560]	; (23b0 <loop+0x2e8>)
    // release queues
    for(int ii=0; ii<NCH; ii++) queue[ii].freeBuffer();

    #if(MDET)
      mustStore = process1.getSigCount() >  0;
    2180:	ldr	r3, [pc, #560]	; (23b4 <loop+0x2ec>)
    2182:	ldr	r2, [r2, #32]
    #endif

    if(mustStore)
    {
      if(state==0)
    2184:	ldr	r6, [pc, #560]	; (23b8 <loop+0x2f0>)
    for(int ii=0;ii<AUDIO_BLOCK_SAMPLES;ii++) for(int jj=0; jj<NCH; jj++) *tmp++ = *data[jj]++;
    // release queues
    for(int ii=0; ii<NCH; ii++) queue[ii].freeBuffer();

    #if(MDET)
      mustStore = process1.getSigCount() >  0;
    2186:	cmp	r2, #0
    2188:	ite	gt
    218a:	movgt	r2, #1
    218c:	movle	r2, #0
    218e:	strh	r2, [r3, #0]
    #endif

    if(mustStore)
    2190:	ble.w	2324 <loop+0x25c>
    {
      if(state==0)
    2194:	ldrsh.w	r0, [r6]
      { // generate header before file is opened
        #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
          uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
          //
          int ndat=outptr-diskBuffer;
    2198:	ldr	r5, [pc, #544]	; (23bc <loop+0x2f4>)
      mustStore = process1.getSigCount() >  0;
    #endif

    if(mustStore)
    {
      if(state==0)
    219a:	cmp	r0, #0
    219c:	beq.w	235a <loop+0x292>
    21a0:	ldr	r7, [r5, #0]
      
      // number of data in tempBuffer
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    21a2:	ldr	r3, [pc, #540]	; (23c0 <loop+0x2f8>)
    21a4:	rsb	r8, r7, r3
    21a8:	mov.w	r8, r8, asr #1

      tmp = tempBuffer;
      if (nout>ndat)
    21ac:	cmp.w	r8, #256	; 0x100
      
      // number of data in tempBuffer
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    21b0:	mov	r9, r7

      tmp = tempBuffer;
      if (nout>ndat)
    21b2:	bgt.w	2410 <loop+0x348>
    21b6:	ldr	r3, [pc, #524]	; (23c4 <loop+0x2fc>)
        ndat=0;
      }
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
    21b8:	ldrsh.w	r3, [r3, #1280]	; 0x500
    21bc:	cbz	r3, 21c6 <loop+0xfe>
    21be:	add.w	r8, r8, r8, lsr #31
    21c2:	bic.w	r8, r8, #1
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    21c6:	cmp.w	r8, #0
    21ca:	ble.w	2480 <loop+0x3b8>
    21ce:	ldr.w	lr, [pc, #564]	; 2404 <loop+0x33c>
    21d2:	mov	r3, r7
    21d4:	mov.w	r7, r8, lsl #1
    21d8:	adds	r0, r3, r7
    21da:	mov	r2, lr
    21dc:	ldrsh.w	r1, [r2], #2
    21e0:	strh.w	r1, [r3], #2
    21e4:	cmp	r0, r3
    21e6:	bne.n	21dc <loop+0x114>
    21e8:	add	r7, lr
    21ea:	mov	r9, r0
      }
      
      if(nout==0) //buffer has been filled, so write to disk
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
    21ec:	bl	8954 <micros>
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    21f0:	ldr.w	sl, [pc, #476]	; 23d0 <loop+0x308>
    21f4:	rsb	r2, sl, r9
    21f8:	asrs	r2, r2, #1
      }
      
      if(nout==0) //buffer has been filled, so write to disk
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
    21fa:	mov	fp, r0
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    21fc:	mov	r1, sl
    21fe:	ldr	r0, [pc, #452]	; (23c4 <loop+0x2fc>)
    2200:	bl	1fbc <c_uSD::write(short*, long)>
    2204:	strh	r0, [r6, #0]
        t1=micros();
    2206:	bl	8954 <micros>
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
    220a:	ldr	r2, [pc, #444]	; (23c8 <loop+0x300>)
    220c:	ldr	r3, [r2, #0]
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
    220e:	rsb	r0, fp, r0
        if(t2<t3) t3=t2; // accumulate some time statistics
    2212:	cmp	r0, r3
        if(t2>t4) t4=t2;
    2214:	ldr	r3, [pc, #436]	; (23cc <loop+0x304>)
      
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
    2216:	it	cc
    2218:	strcc	r0, [r2, #0]
        if(t2>t4) t4=t2;
    221a:	ldr	r2, [r3, #0]
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
        ndat-=nbuf;
    221c:	rsb	r8, r8, #256	; 0x100
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
        if(t2>t4) t4=t2;
    2220:	cmp	r0, r2
    2222:	it	hi
    2224:	strhi	r0, [r3, #0]
    2226:	ldr	r2, [pc, #424]	; (23d0 <loop+0x308>)

        ptr=(int16_t *)diskBuffer;
      }

      if(ndat>0) // save residual data
    2228:	cmp.w	r8, #0
    222c:	beq.n	223e <loop+0x176>
    222e:	movs	r3, #0
      {
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    2230:	adds	r3, #1
    2232:	ldrh.w	r1, [r7], #2
    2236:	strh.w	r1, [r2], #2
    223a:	cmp	r8, r3
    223c:	bgt.n	2230 <loop+0x168>
      }
      
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position

      if(!state)
    223e:	ldrsh.w	r3, [r6]
      {
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
      }
      
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position
    2242:	str	r2, [r5, #0]

      if(!state)
    2244:	cbnz	r3, 2262 <loop+0x19a>
      { // store config again if you wanted time of latest file stored
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    2246:	movs	r2, #8
    2248:	str	r2, [sp, #0]
    224a:	ldr	r3, [pc, #392]	; (23d4 <loop+0x30c>)
    224c:	ldr	r1, [pc, #392]	; (23d8 <loop+0x310>)
    224e:	ldr	r0, [pc, #372]	; (23c4 <loop+0x2fc>)
    2250:	bl	11e4 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
    2254:	movs	r1, #6
    2256:	ldr	r0, [pc, #388]	; (23dc <loop+0x314>)
    2258:	bl	84a4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    225c:	ldr	r0, [pc, #384]	; (23e0 <loop+0x318>)
    225e:	bl	9d9c <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2262:	ldr	r7, [pc, #384]	; (23e4 <loop+0x31c>)
#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
    2264:	ldr	r0, [pc, #384]	; (23e8 <loop+0x320>)
    2266:	ldr	r3, [r7, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    2268:	ldr	r6, [pc, #384]	; (23ec <loop+0x324>)
    226a:	str	r3, [sp, #20]
  if(millis()>t0+1000)
    226c:	ldr	r3, [r0, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    226e:	ldr	r2, [r6, #0]
	return ret;
    2270:	ldr	r1, [sp, #20]
  if(millis()>t0+1000)
    2272:	add.w	r3, r3, #1000	; 0x3e8

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    2276:	adds	r2, #1
  if(millis()>t0+1000)
    2278:	cmp	r3, r1

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    227a:	str	r2, [r6, #0]
  if(millis()>t0+1000)
    227c:	bcs.n	231c <loop+0x254>
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    227e:	ldr.w	fp, [pc, #328]	; 23c8 <loop+0x300>
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    2282:	ldr.w	lr, [pc, #388]	; 2408 <loop+0x340>
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    2286:	ldr.w	r1, [fp]
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    228a:	ldr	r5, [pc, #356]	; (23f0 <loop+0x328>)
    228c:	ldr	r3, [pc, #308]	; (23c4 <loop+0x2fc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    228e:	ldr	r7, [r7, #0]
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    2290:	ldr.w	sl, [pc, #312]	; 23cc <loop+0x304>
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    2294:	ldrh.w	r3, [r3, #1278]	; 0x4fe
    2298:	str	r7, [sp, #24]
    229a:	cmp	r1, lr
    229c:	it	hi
    229e:	movhi.w	r1, #4294967295
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    22a2:	ldrh.w	lr, [r5]
    22a6:	str	r1, [sp, #0]
    22a8:	ldr.w	r1, [sl]
	return ret;
    22ac:	ldr	r7, [sp, #24]
    22ae:	str.w	lr, [sp, #8]
    22b2:	str	r1, [sp, #4]
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();
    22b4:	str	r7, [r0, #0]

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    22b6:	ldr	r1, [pc, #316]	; (23f4 <loop+0x32c>)
    22b8:	ldr	r0, [pc, #292]	; (23e0 <loop+0x318>)
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    t4=0;
    
  #if MDET
    Serial.printf(" | %4d; %10d %8d %8d; %4d %4d",
    22ba:	ldr.w	r8, [pc, #336]	; 240c <loop+0x344>
    22be:	ldr	r7, [pc, #312]	; (23f8 <loop+0x330>)
    22c0:	ldr.w	r9, [pc, #236]	; 23b0 <loop+0x2e8>
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    22c4:	bl	9dcc <Print::printf(char const*, ...)>
      //
    AudioMemoryUsageMaxReset();
    22c8:	ldr	r1, [pc, #304]	; (23fc <loop+0x334>)
    t3=1<<31;
    t4=0;
    
  #if MDET
    Serial.printf(" | %4d; %10d %8d %8d; %4d %4d",
    22ca:	ldr.w	r3, [r8]

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    AudioMemoryUsageMaxReset();
    22ce:	ldrh	r1, [r1, #0]
    22d0:	strh	r1, [r5, #0]
    t3=1<<31;
    t4=0;
    
  #if MDET
    Serial.printf(" | %4d; %10d %8d %8d; %4d %4d",
    22d2:	ldr	r1, [r7, #0]
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(), process1.getDetCount());
    22d4:	str	r1, [sp, #0]
    22d6:	ldr.w	r1, [r9, #36]	; 0x24
    22da:	str	r1, [sp, #12]
    22dc:	ldr.w	r1, [r9, #32]
    22e0:	str	r1, [sp, #8]
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    t4=0;
    22e2:	movs	r5, #0
    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    22e4:	mov.w	r1, #2147483648	; 0x80000000
    t4=0;
    
  #if MDET
    Serial.printf(" | %4d; %10d %8d %8d; %4d %4d",
    22e8:	ldr.w	r0, [r8]
    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    22ec:	str.w	r1, [fp]
    t4=0;
    
  #if MDET
    Serial.printf(" | %4d; %10d %8d %8d; %4d %4d",
    22f0:	ldr.w	lr, [r7]
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(), process1.getDetCount());
    22f4:	ldr	r2, [r4, #24]
    22f6:	udiv	r0, r0, lr
    22fa:	ldr	r1, [pc, #260]	; (2400 <loop+0x338>)
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    t4=0;
    22fc:	str.w	r5, [sl]
    
  #if MDET
    Serial.printf(" | %4d; %10d %8d %8d; %4d %4d",
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(), process1.getDetCount());
    2300:	str	r0, [sp, #4]
    2302:	ldr	r0, [pc, #220]	; (23e0 <loop+0x318>)
    2304:	bl	9dcc <Print::printf(char const*, ...)>
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    2308:	ldr	r0, [pc, #212]	; (23e0 <loop+0x318>)
  void begin(SNIP_Parameters_s *param);
  virtual void update(void);
  void setThreshold(int32_t val) {thresh=val;}
  int32_t getSigCount(void) {return sigCount;}
  int32_t getDetCount(void) {return detCount;}
  void resetDetCount(void) {detCount=0;}
    230a:	str.w	r5, [r9, #36]	; 0x24
    Serial.printf(" | %4d; %10d %8d %8d; %4d %4d",
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(), process1.getDetCount());
            
    queue[0].dropCount=0;
    230e:	str	r5, [r4, #24]
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    2310:	bl	9d9c <Print::println()>
    loopCount=0;
    maxValue=0;
    2314:	str.w	r5, [r8]

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    loopCount=0;
    2318:	str	r5, [r6, #0]
    maxValue=0;
    maxNoise=0;
    231a:	str	r5, [r7, #0]
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
    231c:	wfi
}
    231e:	add	sp, #36	; 0x24
    2320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        #if DO_DEBUG>0
          Serial.println("closed");
        #endif
      }
    }
    else if(state>0)
    2324:	ldrsh.w	r3, [r6]
    2328:	cmp	r3, #0
    232a:	ble.n	2262 <loop+0x19a>
    { // close file
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
    232c:	ldr	r5, [pc, #140]	; (23bc <loop+0x2f4>)
    232e:	ldr.w	sl, [pc, #160]	; 23d0 <loop+0x308>
    2332:	ldr	r3, [r5, #0]
    2334:	rsb	r3, sl, r3
      if(nbuf>0)
    2338:	asrs	r2, r3, #1
    233a:	bne.w	2474 <loop+0x3ac>
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
      }
      state=uSD.close();
    233e:	ldr	r0, [pc, #132]	; (23c4 <loop+0x2fc>)
    2340:	bl	10dc <c_uSD::close()>
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    2344:	movs	r2, #8
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
      if(nbuf>0)
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
      }
      state=uSD.close();
    2346:	strh	r0, [r6, #0]
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    2348:	ldr	r3, [pc, #136]	; (23d4 <loop+0x30c>)
    234a:	str	r2, [sp, #0]
    234c:	ldr	r1, [pc, #136]	; (23d8 <loop+0x310>)
    234e:	ldr	r0, [pc, #116]	; (23c4 <loop+0x2fc>)
    2350:	bl	11e4 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
      outptr = diskBuffer;
    2354:	str.w	sl, [r5]
    2358:	b.n	2262 <loop+0x19a>
    if(mustStore)
    {
      if(state==0)
      { // generate header before file is opened
        #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
          uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
    235a:	bl	1000 <wavHeader(unsigned long)>
          //
          int ndat=outptr-diskBuffer;
    235e:	ldr.w	lr, [r5]
    2362:	ldr	r2, [pc, #108]	; (23d0 <loop+0x308>)
    2364:	rsb	r7, r2, lr
    2368:	asrs	r7, r7, #1
          if(ndat>0)
    236a:	cmp	r7, #0
    236c:	ble.n	2388 <loop+0x2c0>
    236e:	add.w	r7, r7, #2147483648	; 0x80000000
    2372:	subs	r7, #1
    2374:	add.w	r7, r2, r7, lsl #1
    2378:	subs	r3, r2, #2
    237a:	adds	r2, #42	; 0x2a
          { // shift exisiting data after header, which is always at beginnig of file
            for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
    237c:	ldrsh.w	r1, [r3, #2]!
    2380:	strh.w	r1, [r2, #2]!
    2384:	cmp	r7, r3
    2386:	bne.n	237c <loop+0x2b4>
    2388:	ldr	r2, [pc, #68]	; (23d0 <loop+0x308>)
    238a:	subs	r3, r0, #4
    238c:	adds	r0, #40	; 0x28
          }
          // copy header to disk buffer
          uint32_t *ptr=(uint32_t *) diskBuffer;
          for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
    238e:	ldr.w	r1, [r3, #4]!
    2392:	str.w	r1, [r2], #4
    2396:	cmp	r3, r0
    2398:	bne.n	238e <loop+0x2c6>
          outptr+=22; //(44 bytes)
    239a:	add.w	r7, lr, #44	; 0x2c
          uint32_t *ptr=(uint32_t *) diskBuffer;
          // copy to disk buffer
          for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
          outptr+=256; //(512 bytes)
        #endif
        state=1;
    239e:	movs	r3, #1
            for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
          }
          // copy header to disk buffer
          uint32_t *ptr=(uint32_t *) diskBuffer;
          for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
          outptr+=22; //(44 bytes)
    23a0:	str	r7, [r5, #0]
          uint32_t *ptr=(uint32_t *) diskBuffer;
          // copy to disk buffer
          for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
          outptr+=256; //(512 bytes)
        #endif
        state=1;
    23a2:	strh	r3, [r6, #0]
    23a4:	b.n	21a2 <loop+0xda>
    23a6:	nop
    23a8:	.word	0x20019eb4
    23ac:	.word	0x20019c14
    23b0:	.word	0x20019e40
    23b4:	.word	0x20019be0
    23b8:	.word	0x2001a6e4
    23bc:	.word	0x20014534
    23c0:	.word	0x20019aac
    23c4:	.word	0x2001519c
    23c8:	.word	0x20019ba4
    23cc:	.word	0x200158a8
    23d0:	.word	0x20015aac
    23d4:	.word	0x20014540
    23d8:	.word	0x20014560
    23dc:	.word	0x00013408
    23e0:	.word	0x20014720
    23e4:	.word	0x2001aa80
    23e8:	.word	0x2001a6e8
    23ec:	.word	0x20019c0c
    23f0:	.word	0x2001ab94
    23f4:	.word	0x00013410
    23f8:	.word	0x20019bac
    23fc:	.word	0x2001ac14
    2400:	.word	0x00013430
    2404:	.word	0x20019c10
    2408:	.word	0x000186a0
    240c:	.word	0x2001a6e0
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;

      tmp = tempBuffer;
      if (nout>ndat)
    2410:	ldr	r3, [pc, #112]	; (2484 <loop+0x3bc>)
    2412:	subs	r2, r7, #2
    2414:	add.w	r0, r3, #512	; 0x200
      { // sufficient space for all data
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    2418:	ldrsh.w	r1, [r3], #2
    241c:	strh.w	r1, [r2, #2]!
    2420:	cmp	r3, r0
    2422:	bne.n	2418 <loop+0x350>
    2424:	add.w	r2, r7, #512	; 0x200
    2428:	b.n	223e <loop+0x176>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    242a:	mla	r5, r7, r2, r4
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
    242e:	mov	lr, r3
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2430:	ldrh.w	r0, [r5, #1038]	; 0x40e
	if (t == head) return NULL;
    2434:	ldrh.w	ip, [r5, #1036]	; 0x40c
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2438:	uxth	r0, r0
	if (t == head) return NULL;
    243a:	uxth.w	ip, ip
	if (++t >= mq) t = 0;
    243e:	adds	r5, r0, #1
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    2440:	cmp	r0, ip
	if (++t >= mq) t = 0;
    2442:	uxth	r5, r5
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    2444:	beq.w	2128 <loop+0x60>
	if (++t >= mq) t = 0;
    2448:	cmp	r5, #249	; 0xf9
	userblock = queue[t];
    244a:	add.w	r3, r2, r2, lsl #6
    244e:	it	ls
    2450:	movls	lr, r5
    2452:	add.w	r3, r2, r3, lsl #2
    2456:	add	r3, lr
    2458:	add.w	r3, r3, #8
	tail = t;
    245c:	mla	r0, r7, r2, r4

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
	userblock = queue[t];
    2460:	ldr.w	r3, [r4, r3, lsl #2]
    2464:	str.w	r3, [r1, #1032]	; 0x408
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
    2468:	it	hi
    246a:	movhi	r5, lr
	userblock = queue[t];
	tail = t;
	return (void *) userblock->data;
    246c:	adds	r3, #4
	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
	userblock = queue[t];
	tail = t;
    246e:	strh.w	r5, [r0, #1038]	; 0x40e
    2472:	b.n	2128 <loop+0x60>
    else if(state>0)
    { // close file
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
      if(nbuf>0)
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
    2474:	mov	r1, sl
    2476:	ldr	r0, [pc, #16]	; (2488 <loop+0x3c0>)
    2478:	bl	1fbc <c_uSD::write(short*, long)>
    247c:	strh	r0, [r6, #0]
    247e:	b.n	233e <loop+0x276>
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;

      tmp = tempBuffer;
    2480:	ldr	r7, [pc, #0]	; (2484 <loop+0x3bc>)
    2482:	b.n	21ec <loop+0x124>
    2484:	.word	0x20019c10
    2488:	.word	0x2001519c

0000248c <_GLOBAL__sub_I_acqParameters>:
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    248c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2490:	ldr	r4, [pc, #660]	; (2728 <_GLOBAL__sub_I_acqParameters+0x29c>)

audio_block_t * I2S_32:: block_left = NULL;
audio_block_t * I2S_32:: block_right = NULL;
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);
    2492:	ldr	r2, [pc, #664]	; (272c <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2494:	ldr	r1, [pc, #664]	; (2730 <_GLOBAL__sub_I_acqParameters+0x2a4>)
    2496:	ldr	r0, [pc, #668]	; (2734 <_GLOBAL__sub_I_acqParameters+0x2a8>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2498:	ldr	r5, [pc, #668]	; (2738 <_GLOBAL__sub_I_acqParameters+0x2ac>)
    249a:	ldr	r7, [pc, #672]	; (273c <_GLOBAL__sub_I_acqParameters+0x2b0>)
    249c:	bl	a9c0 <__aeabi_atexit>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    24a0:	ldr	r2, [r4, #0]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    24a2:	str	r7, [r5, #0]
    24a4:	movs	r3, #0
    24a6:	strb	r3, [r5, #9]
    24a8:	str	r3, [r5, #16]
			active = false;
    24aa:	strb	r3, [r5, #8]
			destination_list = NULL;
    24ac:	str	r3, [r5, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    24ae:	cbnz	r2, 24b4 <_GLOBAL__sub_I_acqParameters+0x28>
    24b0:	b.n	2720 <_GLOBAL__sub_I_acqParameters+0x294>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    24b2:	mov	r2, r3
    24b4:	ldr	r3, [r2, #20]
    24b6:	cmp	r3, #0
    24b8:	bne.n	24b2 <_GLOBAL__sub_I_acqParameters+0x26>
				p->next_update = this;
    24ba:	str	r5, [r2, #20]
			}
			next_update = NULL;
    24bc:	mov.w	r8, #0
template <int mq>
class mRecordQueue : public AudioStream
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
    24c0:	ldr	r6, [pc, #636]	; (2740 <_GLOBAL__sub_I_acqParameters+0x2b4>)

class I2S_32 : public AudioStream
{
public:

	I2S_32(void) : AudioStream(0, NULL) {begin();}
    24c2:	ldr	r3, [pc, #640]	; (2744 <_GLOBAL__sub_I_acqParameters+0x2b8>)
    24c4:	ldr	r0, [pc, #624]	; (2738 <_GLOBAL__sub_I_acqParameters+0x2ac>)
    24c6:	str.w	r8, [r5, #20]
			cpu_cycles = 0;
    24ca:	strh.w	r8, [r5, #4]
			cpu_cycles_max = 0;
    24ce:	strh.w	r8, [r5, #6]
			numConnections = 0;
    24d2:	strb.w	r8, [r5, #10]
    24d6:	str	r3, [r5, #0]
    24d8:	ldr.w	r9, [pc, #660]	; 2770 <_GLOBAL__sub_I_acqParameters+0x2e4>
    24dc:	bl	d04 <I2S_32::begin()>
    24e0:	add.w	r2, r6, #28
    24e4:	movs	r1, #1
    24e6:	mov	r0, r6
    24e8:	bl	b78 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    24ec:	strh.w	r8, [r6, #1036]	; 0x40c
    24f0:	add.w	r2, r6, #1072	; 0x430
    24f4:	movs	r1, #1
    24f6:	strh.w	r8, [r6, #1038]	; 0x40e
    24fa:	addw	r0, r6, #1044	; 0x414
    24fe:	str.w	r8, [r6, #1032]	; 0x408
    2502:	strh.w	r8, [r6, #1040]	; 0x410
    2506:	str.w	r9, [r6]
    250a:	bl	b78 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    250e:	ldr	r3, [pc, #568]	; (2748 <_GLOBAL__sub_I_acqParameters+0x2bc>)
    2510:	strh.w	r8, [r6, #2080]	; 0x820
    2514:	mov.w	lr, #2
    2518:	add.w	r1, r3, #24
    251c:	strh.w	r8, [r6, #2082]	; 0x822
    2520:	strb.w	lr, [r3, #9]
			active = false;
			destination_list = NULL;
    2524:	mov	r2, r8
    2526:	str.w	r9, [r6, #1044]	; 0x414
    252a:	str.w	r8, [r6, #2076]	; 0x81c
    252e:	strh.w	r8, [r6, #2084]	; 0x824
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    2532:	mov	r0, r8

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2534:	str	r7, [r3, #0]
			active = false;
    2536:	strb.w	r8, [r3, #8]
			destination_list = NULL;
    253a:	str.w	r8, [r3, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    253e:	str	r1, [r3, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    2540:	mov	lr, r3
    2542:	b.n	2548 <_GLOBAL__sub_I_acqParameters+0xbc>
    2544:	ldr.w	r1, [lr, #16]
				inputQueue[i] = NULL;
    2548:	str.w	r0, [r1, r2, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    254c:	ldrb	r1, [r3, #9]
    254e:	ldr	r7, [pc, #504]	; (2748 <_GLOBAL__sub_I_acqParameters+0x2bc>)
    2550:	adds	r2, #1
    2552:	cmp	r1, r2
    2554:	bgt.n	2544 <_GLOBAL__sub_I_acqParameters+0xb8>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2556:	ldr	r1, [r4, #0]
    2558:	ldr	r2, [pc, #460]	; (2728 <_GLOBAL__sub_I_acqParameters+0x29c>)
    255a:	cbnz	r1, 2560 <_GLOBAL__sub_I_acqParameters+0xd4>
    255c:	b.n	2724 <_GLOBAL__sub_I_acqParameters+0x298>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    255e:	mov	r1, r2
    2560:	ldr	r2, [r1, #20]
    2562:	cmp	r2, #0
    2564:	bne.n	255e <_GLOBAL__sub_I_acqParameters+0xd2>
				p->next_update = this;
    2566:	str	r3, [r1, #20]
			}
			next_update = NULL;
    2568:	movs	r1, #0
template <int nch, int mq>
class mDelay : public AudioStream
{
public:

  mDelay(int del) : AudioStream(nch, inputQueueArray), head(mq), numDelay(del){ reset(); }
    256a:	mov.w	lr, #12
    256e:	ldr	r7, [pc, #476]	; (274c <_GLOBAL__sub_I_acqParameters+0x2c0>)
    2570:	strh.w	lr, [r3, #128]	; 0x80
    2574:	movs	r4, #2
    2576:	mov	r2, r1
    2578:	str	r1, [r3, #20]
			cpu_cycles = 0;
    257a:	strh	r1, [r3, #4]
			cpu_cycles_max = 0;
    257c:	strh	r1, [r3, #6]
			numConnections = 0;
    257e:	strb	r1, [r3, #10]
};

template <int nch, int mq>
void mDelay<nch,mq>::reset(void)
{
  for(int ii=0; ii<nch; ii++) for (int jj=0; jj<mq; jj++) queue[ii][jj]=NULL;
    2580:	mov	r0, r1
template <int nch, int mq>
class mDelay : public AudioStream
{
public:

  mDelay(int del) : AudioStream(nch, inputQueueArray), head(mq), numDelay(del){ reset(); }
    2582:	str	r7, [r3, #0]
    2584:	strh.w	r4, [r3, #130]	; 0x82
};

template <int nch, int mq>
void mDelay<nch,mq>::reset(void)
{
  for(int ii=0; ii<nch; ii++) for (int jj=0; jj<mq; jj++) queue[ii][jj]=NULL;
    2588:	add.w	r1, r2, #8
    258c:	adds	r2, #1
    258e:	cmp	r2, #12
    2590:	str.w	r0, [r3, r1, lsl #2]
    2594:	bne.n	2588 <_GLOBAL__sub_I_acqParameters+0xfc>
    2596:	movs	r2, #0
    2598:	mov	r0, r2
    259a:	add.w	r1, r2, #20
    259e:	adds	r2, #1
    25a0:	cmp	r2, #12
    25a2:	str.w	r0, [r3, r1, lsl #2]
    25a6:	ldr	r7, [pc, #416]	; (2748 <_GLOBAL__sub_I_acqParameters+0x2bc>)
    25a8:	mov.w	r4, #0
    25ac:	bne.n	259a <_GLOBAL__sub_I_acqParameters+0x10e>

class mProcess: public AudioStream
{
public:

  mProcess(SNIP_Parameters_s *param) : AudioStream(2, inputQueueArray) {}
    25ae:	ldr.w	fp, [pc, #452]	; 2774 <_GLOBAL__sub_I_acqParameters+0x2e8>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    25b2:	ldr.w	r8, [pc, #452]	; 2778 <_GLOBAL__sub_I_acqParameters+0x2ec>
  head=mq;
    25b6:	strh.w	r2, [r7, #128]	; 0x80
    25ba:	movs	r1, #2
    25bc:	add.w	r2, fp, #24
    25c0:	mov	r0, fp
    25c2:	bl	b78 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    25c6:	ldr.w	r9, [pc, #436]	; 277c <_GLOBAL__sub_I_acqParameters+0x2f0>
    25ca:	ldr	r3, [pc, #388]	; (2750 <_GLOBAL__sub_I_acqParameters+0x2c4>)
    25cc:	str.w	r3, [fp]
		{ isConnected = false;
		  connect(); }
    25d0:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    25d2:	stmia.w	r8, {r5, fp}
    25d6:	strb.w	r4, [r8, #8]
    25da:	strb.w	r4, [r8, #9]
    25de:	str.w	r4, [r8, #12]
		{ isConnected = false;
    25e2:	strb.w	r4, [r8, #16]
		  connect(); }
    25e6:	bl	a038 <AudioConnection::connect()>
    AudioConnection     patchCord4(acq,1, queue[1],0);
  #else
    #include "mProcess.h"
    mProcess process1(&snipParameters);

    AudioConnection     patchCord1(acq,0, process1,0);
    25ea:	ldr	r2, [pc, #320]	; (272c <_GLOBAL__sub_I_acqParameters+0x2a0>)
    25ec:	ldr	r1, [pc, #356]	; (2754 <_GLOBAL__sub_I_acqParameters+0x2c8>)
    25ee:	mov	r0, r8
    25f0:	bl	a9c0 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    25f4:	ldr.w	r8, [pc, #392]	; 2780 <_GLOBAL__sub_I_acqParameters+0x2f4>
    25f8:	str.w	r4, [r9, #12]
    25fc:	mov.w	sl, #1
		{ isConnected = false;
		  connect(); }
    2600:	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2602:	stmia.w	r9, {r5, fp}
		{ isConnected = false;
    2606:	strb.w	r4, [r9, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    260a:	strb.w	sl, [r9, #8]
    260e:	strb.w	sl, [r9, #9]
		{ isConnected = false;
		  connect(); }
    2612:	bl	a038 <AudioConnection::connect()>
    AudioConnection     patchCord2(acq,1, process1,1);
    2616:	ldr	r2, [pc, #276]	; (272c <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2618:	ldr	r1, [pc, #312]	; (2754 <_GLOBAL__sub_I_acqParameters+0x2c8>)
    261a:	mov	r0, r9
    261c:	bl	a9c0 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2620:	ldr.w	r9, [pc, #352]	; 2784 <_GLOBAL__sub_I_acqParameters+0x2f8>
    2624:	strb.w	r4, [r8, #8]
		{ isConnected = false;
		  connect(); }
    2628:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    262a:	stmia.w	r8, {r5, r7}
    262e:	strb.w	r4, [r8, #9]
    2632:	str.w	r4, [r8, #12]
		{ isConnected = false;
    2636:	strb.w	r4, [r8, #16]
		  connect(); }
    263a:	bl	a038 <AudioConnection::connect()>
    #if MDEL == 0
      AudioConnection     patchCord3(acq,0, queue[0],0);
      AudioConnection     patchCord4(acq,1, queue[1],0);
    #else
      AudioConnection     patchCord3(acq,0, delay1,0);
    263e:	ldr	r2, [pc, #236]	; (272c <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2640:	ldr	r1, [pc, #272]	; (2754 <_GLOBAL__sub_I_acqParameters+0x2c8>)
    2642:	mov	r0, r8
    2644:	bl	a9c0 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2648:	ldr.w	r8, [pc, #316]	; 2788 <_GLOBAL__sub_I_acqParameters+0x2fc>
    264c:	str.w	r4, [r9, #12]
		{ isConnected = false;
		  connect(); }
    2650:	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2652:	stmia.w	r9, {r5, r7}
		{ isConnected = false;
    2656:	strb.w	r4, [r9, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    265a:	strb.w	sl, [r9, #8]
    265e:	strb.w	sl, [r9, #9]
		{ isConnected = false;
		  connect(); }
    2662:	bl	a038 <AudioConnection::connect()>
      AudioConnection     patchCord4(acq,1, delay1,1);
    2666:	ldr	r2, [pc, #196]	; (272c <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2668:	ldr	r1, [pc, #232]	; (2754 <_GLOBAL__sub_I_acqParameters+0x2c8>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    266a:	ldr	r5, [pc, #236]	; (2758 <_GLOBAL__sub_I_acqParameters+0x2cc>)
    266c:	mov	r0, r9
    266e:	bl	a9c0 <__aeabi_atexit>
		{ isConnected = false;
		  connect(); }
    2672:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2674:	str.w	r7, [r8]
    2678:	str.w	r6, [r8, #4]
    267c:	strb.w	r4, [r8, #8]
    2680:	strb.w	r4, [r8, #9]
    2684:	str.w	r4, [r8, #12]
		{ isConnected = false;
    2688:	strb.w	r4, [r8, #16]
		  connect(); }
    268c:	bl	a038 <AudioConnection::connect()>
      AudioConnection     patchCord5(delay1,0, queue[0],0);
    2690:	ldr	r2, [pc, #152]	; (272c <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2692:	ldr	r1, [pc, #192]	; (2754 <_GLOBAL__sub_I_acqParameters+0x2c8>)
    2694:	mov	r0, r8
    2696:	bl	a9c0 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    269a:	ldr	r3, [pc, #192]	; (275c <_GLOBAL__sub_I_acqParameters+0x2d0>)
    269c:	str	r3, [r5, #4]
		{ isConnected = false;
		  connect(); }
    269e:	mov	r0, r5
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    26a0:	strb.w	sl, [r5, #8]
    26a4:	str	r7, [r5, #0]
    26a6:	strb	r4, [r5, #9]
    26a8:	str	r4, [r5, #12]
		{ isConnected = false;
    26aa:	strb	r4, [r5, #16]
		  connect(); }
    26ac:	bl	a038 <AudioConnection::connect()>
      AudioConnection     patchCord6(delay1,1, queue[1],0);
    26b0:	mov	r0, r5
    26b2:	ldr	r2, [pc, #120]	; (272c <_GLOBAL__sub_I_acqParameters+0x2a0>)
    26b4:	ldr	r1, [pc, #156]	; (2754 <_GLOBAL__sub_I_acqParameters+0x2c8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    26b6:	ldr	r5, [pc, #168]	; (2760 <_GLOBAL__sub_I_acqParameters+0x2d4>)
    26b8:	bl	a9c0 <__aeabi_atexit>
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    26bc:	ldr	r3, [pc, #164]	; (2764 <_GLOBAL__sub_I_acqParameters+0x2d8>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    26be:	ldr	r0, [pc, #168]	; (2768 <_GLOBAL__sub_I_acqParameters+0x2dc>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    26c0:	ldr.w	lr, [pc, #200]	; 278c <_GLOBAL__sub_I_acqParameters+0x300>
    26c4:	str.w	r4, [r3, #1144]	; 0x478
    26c8:	movs	r7, #40	; 0x28
    26ca:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    26ce:	strb.w	r4, [r3, #1168]	; 0x490
    26d2:	strb.w	r4, [r3, #1194]	; 0x4aa
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    26d6:	strb.w	r4, [r3, #1200]	; 0x4b0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    26da:	strb.w	r4, [r3, #1208]	; 0x4b8
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    26de:	str.w	r4, [r3, #1268]	; 0x4f4
    26e2:	str.w	r4, [r3, #1272]	; 0x4f8
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    26e6:	strh.w	r4, [r3, #1280]	; 0x500
    26ea:	mov.w	r6, #1000	; 0x3e8
    26ee:	movw	r4, #65535	; 0xffff
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    26f2:	ldr.w	ip, [pc, #156]	; 2790 <_GLOBAL__sub_I_acqParameters+0x304>
    26f6:	strb.w	r7, [r3, #1191]	; 0x4a7
    26fa:	str.w	r0, [r3, #1172]	; 0x494
    26fe:	str.w	ip, [r3, #1160]	; 0x488
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2702:	mov	r0, r3
    2704:	str.w	lr, [r3, #1180]	; 0x49c
    2708:	str.w	r6, [r3, #1204]	; 0x4b4
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    270c:	str.w	r5, [r3, #1196]	; 0x4ac
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    2710:	strh.w	r4, [r3, #1276]	; 0x4fc
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2714:	ldr	r2, [pc, #20]	; (272c <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2716:	ldr	r1, [pc, #84]	; (276c <_GLOBAL__sub_I_acqParameters+0x2e0>)
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    2718:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    271c:	b.w	a9c0 <__aeabi_atexit>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    2720:	str	r5, [r4, #0]
    2722:	b.n	24bc <_GLOBAL__sub_I_acqParameters+0x30>
    2724:	str	r7, [r2, #0]
    2726:	b.n	2568 <_GLOBAL__sub_I_acqParameters+0xdc>
    2728:	.word	0x2001ab90
    272c:	.word	0x20014530
    2730:	.word	0x00000a01
    2734:	.word	0x20019eac
    2738:	.word	0x20019e24
    273c:	.word	0x00012e6c
    2740:	.word	0x20019eb4
    2744:	.word	0x00012ed8
    2748:	.word	0x20019ad4
    274c:	.word	0x00012e84
    2750:	.word	0x00012ee4
    2754:	.word	0x000009f5
    2758:	.word	0x20019e98
    275c:	.word	0x2001a2c8
    2760:	.word	0x00012eb4
    2764:	.word	0x2001519c
    2768:	.word	0x0001359c
    276c:	.word	0x000009d5
    2770:	.word	0x00012e78
    2774:	.word	0x20019e40
    2778:	.word	0x20019b58
    277c:	.word	0x20019e10
    2780:	.word	0x20019be4
    2784:	.word	0x20019bf8
    2788:	.word	0x20019b90
    278c:	.word	0x38011001
    2790:	.word	0x000135f4

00002794 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2794:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2796:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2798:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    279a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    279c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    279e:	beq.n	27a8 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    27a0:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    27a4:	b.w	9aa4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    27a8:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    27aa:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    27ae:	bx	r3

000027b0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    27b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27b4:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    27b6:	ldr	r5, [r4, #12]
    27b8:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    27bc:	ldr	r5, [pc, #484]	; (29a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    27be:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    27c0:	bne.n	2868 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    27c2:	lsls	r7, r3, #31
    27c4:	bpl.w	292e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    27c8:	cmp	r1, #0
    27ca:	beq.w	2994 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    27ce:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    27d0:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    27d2:	it	ne
    27d4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    27d8:	str	r5, [r4, #52]	; 0x34
    27da:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    27dc:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    27e0:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    27e4:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    27e8:	cmp.w	ip, #0
    27ec:	beq.w	2940 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    27f0:	cbz	r1, 27fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    27f2:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    27f4:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    27f8:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    27fc:	ldr	r5, [r0, #4]
    27fe:	ldrb	r6, [r5, #8]
			if (count == 2)
    2800:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2804:	add.w	r6, r6, #4294967295
    2808:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    280c:	ite	eq
    280e:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2812:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2816:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2818:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    281a:	sub.w	ip, ip, #2
    281e:	b.n	2832 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2820:	cbz	r2, 2826 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    2822:	strb	r4, [r2, #0]
    2824:	adds	r2, #1
						} 
						count_read--;
    2826:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2828:	and.w	r5, r5, #61440	; 0xf000
    282c:	cmp	r5, r6
    282e:	bls.n	285e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    2830:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2832:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2834:	tst.w	r5, #240	; 0xf0
    2838:	beq.n	2828 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    283a:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    283c:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    2840:	mov	r7, r2
    2842:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2846:	bne.n	2820 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2848:	cbz	r2, 2852 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    284a:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    284e:	strb	r4, [r2, #1]
    2850:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2852:	and.w	r5, r5, #61440	; 0xf000
    2856:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    2858:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    285c:	bhi.n	2830 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    285e:	cmp.w	ip, #0
    2862:	beq.n	2940 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2864:	ldr	r4, [r0, #0]
    2866:	b.n	27f0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2868:	lsls	r5, r3, #31
    286a:	bpl.n	2906 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    286c:	cmp	r1, #0
    286e:	beq.w	2984 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2872:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2874:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2876:	it	ne
    2878:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    287c:	str	r5, [r4, #52]	; 0x34
    287e:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2880:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    2884:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2888:	cmp.w	lr, #0
    288c:	beq.n	2912 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    288e:	cbz	r1, 289c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    2890:	ldrb.w	ip, [r1, #1]
    2894:	ldrb	r5, [r1, #0]
    2896:	adds	r1, #2
    2898:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    289c:	ldr	r5, [r0, #4]
    289e:	ldrb	r6, [r5, #8]
			if (count == 2)
    28a0:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    28a4:	add.w	r6, r6, #4294967295
    28a8:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    28ac:	ite	eq
    28ae:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    28b2:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    28b6:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    28b8:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    28ba:	sub.w	lr, lr, #2
    28be:	b.n	28d2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    28c0:	cbz	r2, 28c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    28c2:	strb	r4, [r2, #0]
    28c4:	adds	r2, #1
						} 
						count_read--;
    28c6:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    28c8:	and.w	r5, r5, #61440	; 0xf000
    28cc:	cmp	r5, r6
    28ce:	bls.n	28fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    28d0:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    28d2:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    28d4:	tst.w	r5, #240	; 0xf0
    28d8:	beq.n	28c8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    28da:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    28de:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    28e0:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    28e2:	bne.n	28c0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    28e4:	cbz	r2, 28f0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    28e6:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    28ea:	asrs	r4, r4, #8
    28ec:	strb	r4, [r2, #1]
    28ee:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    28f0:	and.w	r5, r5, #61440	; 0xf000
    28f4:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    28f6:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    28fa:	bhi.n	28d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    28fc:	cmp.w	lr, #0
    2900:	beq.n	2912 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    2902:	ldr	r4, [r0, #0]
    2904:	b.n	288e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2906:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2908:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    290c:	cmp.w	lr, #0
    2910:	bne.n	288e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2912:	cbz	r3, 295c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2914:	ldr	r4, [r0, #0]
			sr = port().SR;
    2916:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2918:	tst.w	r1, #240	; 0xf0
    291c:	beq.n	2916 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    291e:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2920:	lsls	r4, r3, #31
    2922:	bpl.n	2960 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    2924:	cbz	r2, 292a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    2926:	strb	r1, [r2, #0]
    2928:	adds	r2, #1
					count_read--;
    292a:	subs	r3, #1
    292c:	b.n	2912 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    292e:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2932:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2934:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2938:	cmp.w	ip, #0
    293c:	bne.w	27f0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2940:	cbz	r3, 295c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    2942:	ldr	r4, [r0, #0]
			sr = port().SR;
    2944:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2946:	tst.w	r1, #240	; 0xf0
    294a:	beq.n	2944 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    294c:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    294e:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2950:	bpl.n	2972 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    2952:	cbz	r2, 2958 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    2954:	strb	r1, [r2, #0]
    2956:	adds	r2, #1
					count_read--;
    2958:	subs	r3, #1
    295a:	b.n	2940 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    295c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2960:	cbz	r2, 296e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    2962:	mov	r4, r2
						*p_read++ = w >> 8;
    2964:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    2966:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    296a:	strb	r5, [r2, #1]
    296c:	mov	r2, r4
					}
					count_read -= 2;
    296e:	subs	r3, #2
    2970:	b.n	2912 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2972:	cbz	r2, 2980 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    2974:	mov	r4, r2
    2976:	asrs	r5, r1, #8
    2978:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    297c:	strb	r1, [r2, #1]
    297e:	mov	r2, r4
					}
					count_read -= 2;
    2980:	subs	r3, #2
    2982:	b.n	2940 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2984:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2988:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    298a:	it	ne
    298c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2990:	str	r5, [r4, #52]	; 0x34
    2992:	b.n	2880 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2994:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2998:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    299a:	it	ne
    299c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    29a0:	str	r5, [r4, #52]	; 0x34
    29a2:	b.n	27dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    29a4:	.word	0x801f0400

000029a8 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    29a8:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    29aa:	ldr	r3, [pc, #280]	; (2ac4 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    29ac:	ldr	r2, [pc, #280]	; (2ac8 <_spi_dma_rxISR0()+0x120>)
    29ae:	ldr	r0, [r3, #56]	; 0x38
    29b0:	ldr	r4, [r3, #52]	; 0x34
    29b2:	ldrb	r1, [r0, #4]
    29b4:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    29b6:	ldr	r1, [pc, #276]	; (2acc <_spi_dma_rxISR0()+0x124>)
    29b8:	ldrb	r2, [r4, #4]
    29ba:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    29bc:	ldr	r2, [r3, #48]	; 0x30
    29be:	ldrb	r0, [r0, #4]
    29c0:	strb	r0, [r1, #0]
    29c2:	cmp	r2, #0
    29c4:	beq.n	2a54 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    29c6:	ldr	r1, [r3, #4]
    29c8:	ldr	r1, [r1, #12]
    29ca:	cmp	r2, r1
    29cc:	bhi.n	2a4c <_spi_dma_rxISR0()+0xa4>
    29ce:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    29d0:	ldrh	r4, [r1, #30]
    29d2:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    29d4:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    29d8:	bmi.n	2aa6 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    29da:	ubfx	r0, r0, #0, #15
    29de:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    29e0:	ldrh	r0, [r1, #30]
    29e2:	uxth	r0, r0
    29e4:	strh	r0, [r1, #22]
    29e6:	ldr	r1, [r3, #56]	; 0x38
    29e8:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    29ea:	ldrh	r0, [r1, #30]
    29ec:	lsls	r0, r0, #16
    29ee:	bmi.n	2a96 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    29f0:	ubfx	r0, r2, #0, #15
    29f4:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    29f6:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    29f8:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    29fa:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    29fc:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2a00:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2a02:	it	ne
    2a04:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    2a06:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    2a08:	ldr	r1, [r3, #52]	; 0x34
    2a0a:	ldr	r0, [pc, #184]	; (2ac4 <_spi_dma_rxISR0()+0x11c>)
    2a0c:	ldr	r1, [r1, #0]
    2a0e:	ldr	r5, [r1, #0]
    2a10:	add.w	r4, r0, #44	; 0x2c
    2a14:	cmp	r5, r4
    2a16:	beq.n	2a86 <_spi_dma_rxISR0()+0xde>
    2a18:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2a1a:	ldr	r4, [r0, #12]
    2a1c:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2a20:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2a22:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2a24:	itete	ne
    2a26:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    2a28:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2a2a:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2a2c:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2a2e:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2a32:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2a34:	str	r4, [r0, #52]	; 0x34
    2a36:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2a38:	ldr	r3, [pc, #148]	; (2ad0 <_spi_dma_rxISR0()+0x128>)
    2a3a:	ldrb	r1, [r1, #4]
    2a3c:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    2a3e:	ldr	r1, [pc, #132]	; (2ac4 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    2a40:	cbz	r2, 2a48 <_spi_dma_rxISR0()+0xa0>
    2a42:	ldr	r2, [r1, #52]	; 0x34
    2a44:	ldrb	r2, [r2, #4]
    2a46:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2a48:	pop	{r4, r5, r6, r7}
    2a4a:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    2a4c:	subs	r2, r2, r1
    2a4e:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2a50:	movs	r2, #1
    2a52:	b.n	2a08 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2a54:	ldr	r0, [r3, #60]	; 0x3c
    2a56:	ldr	r1, [r3, #0]
    2a58:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    2a5a:	ldr	r4, [pc, #120]	; (2ad4 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    2a5c:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    2a5e:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2a60:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2a62:	ldr	r5, [r5, #0]
    2a64:	ldr	r6, [pc, #112]	; (2ad8 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2a66:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2a6a:	movs	r7, #3
    2a6c:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2a6e:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2a70:	strb.w	r7, [r3, #45]	; 0x2d
    2a74:	bne.n	2ab6 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2a76:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2a78:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2a7a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2a7c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2a7e:	beq.n	2abe <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2a80:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2a82:	b.w	9aa4 <EventResponder::triggerEventNotImmediate()>
    2a86:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2a88:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2a8c:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2a8e:	orr.w	r0, r0, #2147483648	; 0x80000000
    2a92:	str	r0, [r1, #52]	; 0x34
    2a94:	b.n	2a36 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2a96:	ldrh	r4, [r1, #30]
    2a98:	ubfx	r0, r2, #0, #9
    2a9c:	and.w	r4, r4, #65024	; 0xfe00
    2aa0:	orrs	r0, r4
    2aa2:	strh	r0, [r1, #30]
    2aa4:	b.n	29f6 <_spi_dma_rxISR0()+0x4e>
    2aa6:	ldrh	r4, [r1, #30]
    2aa8:	ubfx	r0, r0, #0, #9
    2aac:	and.w	r4, r4, #65024	; 0xfe00
    2ab0:	orrs	r0, r4
    2ab2:	strh	r0, [r1, #30]
    2ab4:	b.n	29e0 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2ab6:	mov	r3, r5
    2ab8:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2aba:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2abc:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2abe:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2ac0:	pop	{r4, r5, r6, r7}
    2ac2:	bx	r3
    2ac4:	.word	0x20014588
    2ac8:	.word	0x4000801f
    2acc:	.word	0x4000801c
    2ad0:	.word	0x4000801b
    2ad4:	.word	0xff0f0000
    2ad8:	.word	0x00002795

00002adc <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    2adc:	cbz	r3, 2ae2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2ade:	b.w	27b0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    2ae2:	bx	lr

00002ae4 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    2ae4:	ldr	r2, [pc, #400]	; (2c78 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2ae6:	ldr	r3, [pc, #404]	; (2c7c <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    2ae8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2aec:	ldr	r6, [pc, #400]	; (2c80 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2aee:	ldr.w	sl, [pc, #416]	; 2c90 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2af2:	ldr	r4, [pc, #400]	; (2c84 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2af4:	ldr.w	r9, [pc, #400]	; 2c88 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    2af8:	umull	r5, r2, r2, r0
    2afc:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2b00:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2b04:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2b08:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2b0c:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2b10:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2b12:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2b14:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2b18:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2b1c:	rsb	r6, fp, r7
    2b20:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2b24:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2b26:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2b28:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2b2a:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2b2e:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2b32:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2b36:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2b3a:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2b3c:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2b40:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2b44:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2b48:	adds	r6, #1
    2b4a:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2b4c:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2b4e:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2b50:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2b52:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    2b54:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2b56:	movw	fp, #365	; 0x16d
    2b5a:	mov.w	r8, #100	; 0x64
    2b5e:	mov.w	sl, #400	; 0x190
    2b62:	b.n	2b82 <breakTime(long, tmElements_t&)+0x9e>
    2b64:	rsb	r5, r6, r5, asr #7
    2b68:	mls	r5, sl, r5, r3
    2b6c:	cbnz	r0, 2bcc <breakTime(long, tmElements_t&)+0xe8>
    2b6e:	cmp	r5, #0
    2b70:	ite	ne
    2b72:	movne	r0, fp
    2b74:	moveq.w	r0, #366	; 0x16e
    2b78:	add	r2, r0
    2b7a:	cmp	ip, r2
    2b7c:	add.w	r4, r4, #1
    2b80:	bcc.n	2baa <breakTime(long, tmElements_t&)+0xc6>
    2b82:	uxtb	r7, r4
    2b84:	addw	r3, r7, #1970	; 0x7b2
    2b88:	smull	r0, r5, r9, r3
    2b8c:	asrs	r6, r3, #31
    2b8e:	rsb	r0, r6, r5, asr #5
    2b92:	ands.w	lr, r3, #3
    2b96:	mls	r0, r8, r0, r3
    2b9a:	beq.n	2b64 <breakTime(long, tmElements_t&)+0x80>
    2b9c:	movw	r0, #365	; 0x16d
    2ba0:	add	r2, r0
    2ba2:	cmp	ip, r2
    2ba4:	add.w	r4, r4, #1
    2ba8:	bcs.n	2b82 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    2baa:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2bac:	cmp.w	lr, #0
    2bb0:	bne.n	2bd2 <breakTime(long, tmElements_t&)+0xee>
    2bb2:	ldr	r0, [pc, #212]	; (2c88 <breakTime(long, tmElements_t&)+0x1a4>)
    2bb4:	asrs	r6, r3, #31
    2bb6:	smull	r4, r0, r0, r3
    2bba:	rsb	r4, r6, r0, asr #5
    2bbe:	movs	r5, #100	; 0x64
    2bc0:	mls	r4, r5, r4, r3
    2bc4:	cbz	r4, 2c36 <breakTime(long, tmElements_t&)+0x152>
    2bc6:	mov.w	r4, #366	; 0x16e
    2bca:	b.n	2bd8 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2bcc:	mov.w	r0, #366	; 0x16e
    2bd0:	b.n	2b78 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2bd2:	movw	r4, #365	; 0x16d
    2bd6:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2bd8:	ldr	r0, [pc, #172]	; (2c88 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    2bda:	ldr	r5, [pc, #176]	; (2c8c <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2bdc:	smull	r7, r0, r0, r3
    2be0:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    2be4:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2be6:	rsb	r6, r6, r0, asr #7
    2bea:	movs	r4, #100	; 0x64
    2bec:	mov.w	r0, #400	; 0x190
    2bf0:	mls	r6, r0, r6, r3
    2bf4:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    2bf8:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2bfc:	movs	r0, #1
    2bfe:	movs	r3, #0
    2c00:	b.n	2c08 <breakTime(long, tmElements_t&)+0x124>
    2c02:	adds	r0, #1
    2c04:	uxtb	r0, r0
    2c06:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    2c08:	cmp	r3, #1
    2c0a:	uxtb	r7, r3
    2c0c:	beq.n	2c50 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2c0e:	ldrb	r4, [r3, r5]
    2c10:	cmp	r4, r2
    2c12:	bhi.n	2c28 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    2c14:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    2c16:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    2c1a:	bne.n	2c02 <breakTime(long, tmElements_t&)+0x11e>
    2c1c:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2c1e:	adds	r2, #1
    2c20:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    2c22:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    2c24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c28:	adds	r7, #1
    2c2a:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2c2c:	adds	r2, #1
    2c2e:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    2c30:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    2c32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2c36:	mov.w	r4, #400	; 0x190
    2c3a:	rsb	r0, r6, r0, asr #7
    2c3e:	mls	r0, r4, r0, r3
    2c42:	cmp	r0, #0
    2c44:	movw	r4, #365	; 0x16d
    2c48:	it	eq
    2c4a:	moveq.w	r4, #366	; 0x16e
    2c4e:	b.n	2bd8 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2c50:	cmp.w	lr, #0
    2c54:	bne.n	2c6c <breakTime(long, tmElements_t&)+0x188>
    2c56:	cmp.w	r8, #0
    2c5a:	bne.n	2c74 <breakTime(long, tmElements_t&)+0x190>
    2c5c:	cmp	r6, #0
    2c5e:	ite	ne
    2c60:	movne	r4, #28
    2c62:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2c64:	cmp	r2, r4
    2c66:	bcc.n	2c70 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    2c68:	subs	r2, r2, r4
    2c6a:	b.n	2c02 <breakTime(long, tmElements_t&)+0x11e>
    2c6c:	movs	r4, #28
    2c6e:	b.n	2c64 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2c70:	movs	r7, #2
    2c72:	b.n	2c1e <breakTime(long, tmElements_t&)+0x13a>
    2c74:	movs	r4, #29
    2c76:	b.n	2c64 <breakTime(long, tmElements_t&)+0x180>
    2c78:	.word	0xc22e4507
    2c7c:	.word	0x88888889
    2c80:	.word	0x91a2b3c5
    2c84:	.word	0xaaaaaaab
    2c88:	.word	0x51eb851f
    2c8c:	.word	0x000134e4
    2c90:	.word	0x24924925

00002c94 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    2c94:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    2c96:	ldr	r1, [pc, #12]	; (2ca4 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    2c98:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    2c9a:	bl	2ae4 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    2c9e:	ldr	r3, [pc, #8]	; (2ca8 <refreshCache(long) [clone .part.0]+0x14>)
    2ca0:	str	r4, [r3, #0]
    2ca2:	pop	{r4, pc}
    2ca4:	.word	0x2001a6f0
    2ca8:	.word	0x2001a6ec

00002cac <makeTime(tmElements_t const&)>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(const tmElements_t &tm){   
    2cac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    2cb0:	ldr	r1, [pc, #228]	; (2d98 <makeTime(tmElements_t const&)+0xec>)
    2cb2:	ldrb	r6, [r0, #6]
    2cb4:	mul.w	r1, r1, r6
  for (i = 0; i < tm.Year; i++) {
    2cb8:	cbz	r6, 2cfc <makeTime(tmElements_t const&)+0x50>
    2cba:	addw	ip, r6, #1970	; 0x7b2
    2cbe:	movw	r3, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    2cc2:	ldr.w	lr, [pc, #216]	; 2d9c <makeTime(tmElements_t const&)+0xf0>
    2cc6:	movs	r7, #100	; 0x64
    2cc8:	mov.w	r8, #400	; 0x190
    2ccc:	b.n	2cea <makeTime(tmElements_t const&)+0x3e>
    2cce:	tst.w	r3, #3
    2cd2:	bne.n	2ce8 <makeTime(tmElements_t const&)+0x3c>
    2cd4:	rsb	r2, r2, r5, asr #7
    2cd8:	mls	r2, r8, r2, r3
    2cdc:	cbnz	r4, 2ce0 <makeTime(tmElements_t const&)+0x34>
    2cde:	cbnz	r2, 2ce8 <makeTime(tmElements_t const&)+0x3c>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    2ce0:	add.w	r1, r1, #86016	; 0x15000
    2ce4:	add.w	r1, r1, #384	; 0x180
    2ce8:	adds	r3, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    2cea:	smull	r2, r5, lr, r3
    2cee:	asrs	r2, r3, #31
    2cf0:	rsb	r4, r2, r5, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    2cf4:	cmp	r3, ip
    if (LEAP_YEAR(i)) {
    2cf6:	mls	r4, r7, r4, r3
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    2cfa:	bne.n	2cce <makeTime(tmElements_t const&)+0x22>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2cfc:	ldrb	r7, [r0, #5]
    2cfe:	cmp	r7, #1
    2d00:	ble.n	2d62 <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2d02:	ldr	r4, [pc, #152]	; (2d9c <makeTime(tmElements_t const&)+0xf0>)
    2d04:	ldr	r2, [pc, #152]	; (2da0 <makeTime(tmElements_t const&)+0xf4>)
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2d06:	ldr.w	lr, [pc, #156]	; 2da4 <makeTime(tmElements_t const&)+0xf8>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2d0a:	addw	r3, r6, #1970	; 0x7b2
    2d0e:	smull	r4, r6, r4, r3
    2d12:	asrs	r4, r3, #31
    2d14:	rsb	ip, r4, r6, asr #5
    2d18:	movs	r5, #100	; 0x64
    2d1a:	rsb	r6, r4, r6, asr #7
    2d1e:	mov.w	r4, #400	; 0x190
    2d22:	mls	ip, r5, ip, r3
    2d26:	mls	r6, r4, r6, r3
    2d2a:	and.w	r5, r3, #3
    2d2e:	movs	r3, #1
    2d30:	b.n	2d42 <makeTime(tmElements_t const&)+0x96>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2d32:	ldrb	r4, [r2, #0]
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2d34:	adds	r3, #1
    2d36:	cmp	r3, r7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2d38:	mla	r1, lr, r4, r1
    2d3c:	add.w	r2, r2, #1
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2d40:	beq.n	2d62 <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2d42:	cmp	r3, #2
    2d44:	bne.n	2d32 <makeTime(tmElements_t const&)+0x86>
    2d46:	cmp	r5, #0
    2d48:	bne.n	2d32 <makeTime(tmElements_t const&)+0x86>
    2d4a:	cmp.w	ip, #0
    2d4e:	beq.n	2d88 <makeTime(tmElements_t const&)+0xdc>
      seconds += SECS_PER_DAY * 29;
    2d50:	add.w	r1, r1, #2490368	; 0x260000
    2d54:	add.w	r1, r1, #15232	; 0x3b80
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2d58:	adds	r3, #1
    2d5a:	cmp	r3, r7
    2d5c:	add.w	r2, r2, #1
    2d60:	bne.n	2d42 <makeTime(tmElements_t const&)+0x96>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
    2d62:	ldrb	r3, [r0, #1]
    2d64:	ldrb	r5, [r0, #2]
    2d66:	ldrb	r4, [r0, #0]
    2d68:	ldrb	r2, [r0, #4]
    2d6a:	ldr	r0, [pc, #56]	; (2da4 <makeTime(tmElements_t const&)+0xf8>)
    2d6c:	rsb	r3, r3, r3, lsl #4
    2d70:	mov.w	r6, #3600	; 0xe10
    2d74:	lsls	r3, r3, #2
    2d76:	mla	r3, r6, r5, r3
    2d7a:	add	r3, r4
    2d7c:	subs	r2, #1
    2d7e:	mla	r0, r0, r2, r3
}
    2d82:	add	r0, r1
    2d84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2d88:	cmp	r6, #0
    2d8a:	bne.n	2d32 <makeTime(tmElements_t const&)+0x86>
      seconds += SECS_PER_DAY * 29;
    2d8c:	add.w	r1, r1, #2490368	; 0x260000
    2d90:	add.w	r1, r1, #15232	; 0x3b80
    2d94:	b.n	2d58 <makeTime(tmElements_t const&)+0xac>
    2d96:	nop
    2d98:	.word	0x01e13380
    2d9c:	.word	0x51eb851f
    2da0:	.word	0x000134e4
    2da4:	.word	0x00015180

00002da8 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    2da8:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2daa:	ldr	r4, [pc, #128]	; (2e2c <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2dac:	ldr	r6, [pc, #128]	; (2e30 <now()+0x88>)
    2dae:	ldr	r3, [r4, #0]
    2db0:	ldr	r2, [r6, #0]
    2db2:	ldr	r5, [pc, #128]	; (2e34 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    2db4:	sub	sp, #12
    2db6:	ldr	r0, [r5, #0]
    2db8:	str	r3, [sp, #0]
	return ret;
    2dba:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2dbc:	subs	r3, r3, r2
    2dbe:	cmp.w	r3, #1000	; 0x3e8
    2dc2:	bcc.n	2de4 <now()+0x3c>
    2dc4:	adds	r0, #1
    2dc6:	b.n	2dca <now()+0x22>
    2dc8:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2dca:	ldr	r3, [r4, #0]
    2dcc:	str	r3, [sp, #0]
	return ret;
    2dce:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    2dd0:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2dd4:	subs	r3, r3, r2
    2dd6:	cmp.w	r3, #1000	; 0x3e8
    2dda:	add.w	r1, r0, #1
    2dde:	bcs.n	2dc8 <now()+0x20>
    2de0:	str	r0, [r5, #0]
    2de2:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    2de4:	ldr	r7, [pc, #80]	; (2e38 <now()+0x90>)
    2de6:	ldr	r3, [r7, #0]
    2de8:	cmp	r0, r3
    2dea:	bcc.n	2e0c <now()+0x64>
    if (getTimePtr != 0) {
    2dec:	ldr	r3, [pc, #76]	; (2e3c <now()+0x94>)
    2dee:	ldr	r3, [r3, #0]
    2df0:	cbz	r3, 2e0c <now()+0x64>
      time_t t = getTimePtr();
    2df2:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2df4:	ldr	r3, [pc, #72]	; (2e40 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    2df6:	cbnz	r0, 2e10 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2df8:	ldr	r1, [pc, #72]	; (2e44 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2dfa:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2dfc:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2dfe:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2e00:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2e02:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2e04:	it	ne
    2e06:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2e08:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2e0a:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    2e0c:	add	sp, #12
    2e0e:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e10:	ldr	r2, [r4, #0]
    2e12:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2e14:	ldr	r3, [r3, #0]
  Status = timeSet;
    2e16:	ldr	r2, [pc, #44]	; (2e44 <now()+0x9c>)
	return ret;
    2e18:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2e1a:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    2e1c:	add	r3, r0
  Status = timeSet;
    2e1e:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2e20:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2e22:	str	r3, [r7, #0]
  Status = timeSet;
    2e24:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    2e26:	add	sp, #12
    2e28:	pop	{r4, r5, r6, r7, pc}
    2e2a:	nop
    2e2c:	.word	0x2001aa80
    2e30:	.word	0x2001a704
    2e34:	.word	0x2001a6f8
    2e38:	.word	0x2001a708
    2e3c:	.word	0x2001a700
    2e40:	.word	0x200145c8
    2e44:	.word	0x2001a6fc

00002e48 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    2e48:	push	{r3, lr}
  return hour(now()); 
    2e4a:	bl	2da8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2e4e:	ldr	r3, [pc, #16]	; (2e60 <hour()+0x18>)
    2e50:	ldr	r3, [r3, #0]
    2e52:	cmp	r0, r3
    2e54:	beq.n	2e5a <hour()+0x12>
    2e56:	bl	2c94 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    2e5a:	ldr	r3, [pc, #8]	; (2e64 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    2e5c:	ldrb	r0, [r3, #2]
    2e5e:	pop	{r3, pc}
    2e60:	.word	0x2001a6ec
    2e64:	.word	0x2001a6f0

00002e68 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    2e68:	push	{r3, lr}
  return minute(now()); 
    2e6a:	bl	2da8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2e6e:	ldr	r3, [pc, #16]	; (2e80 <minute()+0x18>)
    2e70:	ldr	r3, [r3, #0]
    2e72:	cmp	r0, r3
    2e74:	beq.n	2e7a <minute()+0x12>
    2e76:	bl	2c94 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    2e7a:	ldr	r3, [pc, #8]	; (2e84 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    2e7c:	ldrb	r0, [r3, #1]
    2e7e:	pop	{r3, pc}
    2e80:	.word	0x2001a6ec
    2e84:	.word	0x2001a6f0

00002e88 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    2e88:	push	{r3, lr}
  return second(now()); 
    2e8a:	bl	2da8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2e8e:	ldr	r3, [pc, #16]	; (2ea0 <second()+0x18>)
    2e90:	ldr	r3, [r3, #0]
    2e92:	cmp	r0, r3
    2e94:	beq.n	2e9a <second()+0x12>
    2e96:	bl	2c94 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    2e9a:	ldr	r3, [pc, #8]	; (2ea4 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    2e9c:	ldrb	r0, [r3, #0]
    2e9e:	pop	{r3, pc}
    2ea0:	.word	0x2001a6ec
    2ea4:	.word	0x2001a6f0

00002ea8 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    2ea8:	push	{r3, lr}
  return(day(now())); 
    2eaa:	bl	2da8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2eae:	ldr	r3, [pc, #16]	; (2ec0 <day()+0x18>)
    2eb0:	ldr	r3, [r3, #0]
    2eb2:	cmp	r0, r3
    2eb4:	beq.n	2eba <day()+0x12>
    2eb6:	bl	2c94 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    2eba:	ldr	r3, [pc, #8]	; (2ec4 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    2ebc:	ldrb	r0, [r3, #4]
    2ebe:	pop	{r3, pc}
    2ec0:	.word	0x2001a6ec
    2ec4:	.word	0x2001a6f0

00002ec8 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    2ec8:	push	{r3, lr}
  return month(now()); 
    2eca:	bl	2da8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2ece:	ldr	r3, [pc, #16]	; (2ee0 <month()+0x18>)
    2ed0:	ldr	r3, [r3, #0]
    2ed2:	cmp	r0, r3
    2ed4:	beq.n	2eda <month()+0x12>
    2ed6:	bl	2c94 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    2eda:	ldr	r3, [pc, #8]	; (2ee4 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    2edc:	ldrb	r0, [r3, #5]
    2ede:	pop	{r3, pc}
    2ee0:	.word	0x2001a6ec
    2ee4:	.word	0x2001a6f0

00002ee8 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    2ee8:	push	{r3, lr}
  return year(now()); 
    2eea:	bl	2da8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2eee:	ldr	r3, [pc, #20]	; (2f04 <year()+0x1c>)
    2ef0:	ldr	r3, [r3, #0]
    2ef2:	cmp	r0, r3
    2ef4:	beq.n	2efa <year()+0x12>
    2ef6:	bl	2c94 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    2efa:	ldr	r3, [pc, #12]	; (2f08 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    2efc:	ldrb	r0, [r3, #6]
}
    2efe:	addw	r0, r0, #1970	; 0x7b2
    2f02:	pop	{r3, pc}
    2f04:	.word	0x2001a6ec
    2f08:	.word	0x2001a6f0

00002f0c <setTime(long)>:
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    2f0c:	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f0e:	ldr	r3, [pc, #40]	; (2f38 <setTime(long)+0x2c>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2f10:	ldr	r2, [pc, #40]	; (2f3c <setTime(long)+0x30>)
    2f12:	ldr	r3, [r3, #0]
    2f14:	ldr	r2, [r2, #0]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2f16:	ldr	r6, [pc, #40]	; (2f40 <setTime(long)+0x34>)
  nextSyncTime = (uint32_t)t + syncInterval;
    2f18:	ldr	r5, [pc, #40]	; (2f44 <setTime(long)+0x38>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2f1a:	ldr	r1, [pc, #44]	; (2f48 <setTime(long)+0x3c>)
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2f1c:	str	r0, [r6, #0]
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    2f1e:	sub	sp, #12
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2f20:	add	r0, r2
    2f22:	str	r3, [sp, #4]
	return ret;
    2f24:	ldr	r4, [sp, #4]
  Status = timeSet;
    2f26:	ldr	r3, [pc, #36]	; (2f4c <setTime(long)+0x40>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2f28:	str	r0, [r5, #0]
  Status = timeSet;
    2f2a:	movs	r2, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2f2c:	str	r4, [r1, #0]
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    2f2e:	strb	r2, [r3, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 
    2f30:	add	sp, #12
    2f32:	pop	{r4, r5, r6}
    2f34:	bx	lr
    2f36:	nop
    2f38:	.word	0x2001aa80
    2f3c:	.word	0x200145c8
    2f40:	.word	0x2001a6f8
    2f44:	.word	0x2001a708
    2f48:	.word	0x2001a704
    2f4c:	.word	0x2001a6fc

00002f50 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    2f50:	ldr	r1, [pc, #12]	; (2f60 <setSyncProvider(long (*)())+0x10>)
    2f52:	ldr	r2, [pc, #16]	; (2f64 <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2f54:	ldr	r3, [pc, #16]	; (2f68 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    2f56:	ldr	r1, [r1, #0]
    2f58:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2f5a:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    2f5c:	b.w	2da8 <now()>
    2f60:	.word	0x2001a6f8
    2f64:	.word	0x2001a708
    2f68:	.word	0x2001a700

00002f6c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    2f6c:	ldr	r2, [pc, #8]	; (2f78 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    2f6e:	ldr	r1, [pc, #12]	; (2f7c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    2f70:	ldr	r0, [pc, #12]	; (2f80 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    2f72:	b.w	a9c0 <__aeabi_atexit>
    2f76:	nop
    2f78:	.word	0x20014530
    2f7c:	.word	0x00000a01
    2f80:	.word	0x2001a70c

00002f84 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    2f84:	ldr	r2, [pc, #8]	; (2f90 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    2f86:	ldr	r1, [pc, #12]	; (2f94 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    2f88:	ldr	r0, [pc, #12]	; (2f98 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    2f8a:	b.w	a9c0 <__aeabi_atexit>
    2f8e:	nop
    2f90:	.word	0x20014530
    2f94:	.word	0x00000a01
    2f98:	.word	0x2001a714

00002f9c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    2f9c:	ldr	r2, [pc, #8]	; (2fa8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    2f9e:	ldr	r1, [pc, #12]	; (2fac <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    2fa0:	ldr	r0, [pc, #12]	; (2fb0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    2fa2:	b.w	a9c0 <__aeabi_atexit>
    2fa6:	nop
    2fa8:	.word	0x20014530
    2fac:	.word	0x00000a01
    2fb0:	.word	0x2001a71c

00002fb4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    2fb4:	ldr	r2, [pc, #8]	; (2fc0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    2fb6:	ldr	r1, [pc, #12]	; (2fc4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    2fb8:	ldr	r0, [pc, #12]	; (2fc8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    2fba:	b.w	a9c0 <__aeabi_atexit>
    2fbe:	nop
    2fc0:	.word	0x20014530
    2fc4:	.word	0x00000a01
    2fc8:	.word	0x2001a724

00002fcc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    2fcc:	ldr	r2, [pc, #8]	; (2fd8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    2fce:	ldr	r1, [pc, #12]	; (2fdc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    2fd0:	ldr	r0, [pc, #12]	; (2fe0 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    2fd2:	b.w	a9c0 <__aeabi_atexit>
    2fd6:	nop
    2fd8:	.word	0x20014530
    2fdc:	.word	0x00000a01
    2fe0:	.word	0x2001a72c

00002fe4 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    2fe4:	ldr	r2, [pc, #8]	; (2ff0 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    2fe6:	ldr	r1, [pc, #12]	; (2ff4 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    2fe8:	ldr	r0, [pc, #12]	; (2ff8 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    2fea:	b.w	a9c0 <__aeabi_atexit>
    2fee:	nop
    2ff0:	.word	0x20014530
    2ff4:	.word	0x00000a01
    2ff8:	.word	0x2001a734

00002ffc <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    2ffc:	ldr	r2, [pc, #8]	; (3008 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    2ffe:	ldr	r1, [pc, #12]	; (300c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    3000:	ldr	r0, [pc, #12]	; (3010 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    3002:	b.w	a9c0 <__aeabi_atexit>
    3006:	nop
    3008:	.word	0x20014530
    300c:	.word	0x00000a01
    3010:	.word	0x2001a73c

00003014 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    3014:	ldr	r2, [pc, #8]	; (3020 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    3016:	ldr	r1, [pc, #12]	; (3024 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    3018:	ldr	r0, [pc, #12]	; (3028 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    301a:	b.w	a9c0 <__aeabi_atexit>
    301e:	nop
    3020:	.word	0x20014530
    3024:	.word	0x00000a01
    3028:	.word	0x2001a744

0000302c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    302c:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    302e:	ldr	r5, [pc, #28]	; (304c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    3030:	ldr	r4, [pc, #28]	; (3050 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    3032:	ldr	r0, [pc, #32]	; (3054 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    3034:	mov	r2, r5
    3036:	mov	r1, r4
    3038:	bl	a9c0 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    303c:	mov	r2, r5
    303e:	mov	r1, r4
    3040:	ldr	r0, [pc, #20]	; (3058 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    3042:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    3046:	b.w	a9c0 <__aeabi_atexit>
    304a:	nop
    304c:	.word	0x20014530
    3050:	.word	0x00000a01
    3054:	.word	0x2001a74c
    3058:	.word	0x2001a754

0000305c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    305c:	ldr	r2, [pc, #8]	; (3068 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    305e:	ldr	r1, [pc, #12]	; (306c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    3060:	ldr	r0, [pc, #12]	; (3070 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    3062:	b.w	a9c0 <__aeabi_atexit>
    3066:	nop
    3068:	.word	0x20014530
    306c:	.word	0x00000a01
    3070:	.word	0x2001a75c

00003074 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    3074:	ldr	r2, [pc, #8]	; (3080 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    3076:	ldr	r1, [pc, #12]	; (3084 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    3078:	ldr	r0, [pc, #12]	; (3088 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    307a:	b.w	a9c0 <__aeabi_atexit>
    307e:	nop
    3080:	.word	0x20014530
    3084:	.word	0x00000a01
    3088:	.word	0x2001a764

0000308c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    308c:	ldr	r2, [pc, #8]	; (3098 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    308e:	ldr	r1, [pc, #12]	; (309c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    3090:	ldr	r0, [pc, #12]	; (30a0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    3092:	b.w	a9c0 <__aeabi_atexit>
    3096:	nop
    3098:	.word	0x20014530
    309c:	.word	0x00000a01
    30a0:	.word	0x2001a76c

000030a4 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    30a4:	ldr	r2, [pc, #8]	; (30b0 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    30a6:	ldr	r1, [pc, #12]	; (30b4 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    30a8:	ldr	r0, [pc, #12]	; (30b8 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    30aa:	b.w	a9c0 <__aeabi_atexit>
    30ae:	nop
    30b0:	.word	0x20014530
    30b4:	.word	0x00000a01
    30b8:	.word	0x2001a774

000030bc <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    30bc:	ldr	r2, [pc, #8]	; (30c8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    30be:	ldr	r1, [pc, #12]	; (30cc <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    30c0:	ldr	r0, [pc, #12]	; (30d0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    30c2:	b.w	a9c0 <__aeabi_atexit>
    30c6:	nop
    30c8:	.word	0x20014530
    30cc:	.word	0x00000a01
    30d0:	.word	0x2001a77c

000030d4 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    30d4:	ldr	r2, [pc, #8]	; (30e0 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    30d6:	ldr	r1, [pc, #12]	; (30e4 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    30d8:	ldr	r0, [pc, #12]	; (30e8 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    30da:	b.w	a9c0 <__aeabi_atexit>
    30de:	nop
    30e0:	.word	0x20014530
    30e4:	.word	0x00000a01
    30e8:	.word	0x2001a784

000030ec <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    30ec:	ldr	r2, [pc, #8]	; (30f8 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    30ee:	ldr	r1, [pc, #12]	; (30fc <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    30f0:	ldr	r0, [pc, #12]	; (3100 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    30f2:	b.w	a9c0 <__aeabi_atexit>
    30f6:	nop
    30f8:	.word	0x20014530
    30fc:	.word	0x00000a01
    3100:	.word	0x2001a78c

00003104 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    3104:	ldr	r2, [pc, #8]	; (3110 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    3106:	ldr	r1, [pc, #12]	; (3114 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    3108:	ldr	r0, [pc, #12]	; (3118 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    310a:	b.w	a9c0 <__aeabi_atexit>
    310e:	nop
    3110:	.word	0x20014530
    3114:	.word	0x00000a01
    3118:	.word	0x2001a794

0000311c <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    311c:	ldrb.w	r2, [r0, #57]	; 0x39
    3120:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    3124:	subs	r0, r2, r0
    3126:	bx	lr

00003128 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3128:	ldrb.w	r3, [r0, #56]	; 0x38
    312c:	ldrb.w	r2, [r0, #57]	; 0x39
    3130:	cmp	r2, r3
    3132:	bls.n	3140 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    3134:	adds	r2, r3, #1
    3136:	add	r3, r0
    3138:	strb.w	r2, [r0, #56]	; 0x38
    313c:	ldrb	r0, [r3, #24]
    313e:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3140:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    3144:	bx	lr
    3146:	nop

00003148 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3148:	ldrb.w	r3, [r0, #56]	; 0x38
    314c:	ldrb.w	r2, [r0, #57]	; 0x39
    3150:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    3152:	itte	hi
    3154:	addhi	r3, r3, r0
    3156:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3158:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    315c:	bx	lr
    315e:	nop

00003160 <TwoWire::flush()>:
	virtual void flush(void) {
    3160:	bx	lr
    3162:	nop

00003164 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    3164:	push	{r3, r4, r5, lr}
    3166:	mov	r5, r0
	if (transmitting || slave_mode) {
    3168:	ldrh.w	r0, [r0, #94]	; 0x5e
    316c:	cbz	r0, 3194 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    316e:	ldrb.w	r3, [r5, #93]	; 0x5d
    3172:	mov	r4, r2
    3174:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    3178:	cmp	r4, r2
    317a:	bhi.n	3196 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    317c:	add.w	r0, r5, #59	; 0x3b
    3180:	add	r0, r3
    3182:	mov	r2, r4
    3184:	bl	82a4 <memcpy>
		txBufferLength += quantity;
    3188:	ldrb.w	r3, [r5, #93]	; 0x5d
    318c:	add	r3, r4
    318e:	strb.w	r3, [r5, #93]	; 0x5d
    3192:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    3194:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    3196:	movs	r0, #1
    3198:	mov	r4, r2
    319a:	strb	r0, [r5, #4]
    319c:	b.n	317c <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    319e:	nop

000031a0 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    31a0:	ldrh.w	r3, [r0, #94]	; 0x5e
    31a4:	cbz	r3, 31c2 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    31a6:	ldrb.w	r3, [r0, #93]	; 0x5d
    31aa:	cmp	r3, #32
    31ac:	bhi.n	31be <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    31ae:	adds	r2, r0, r3
    31b0:	adds	r3, #1
    31b2:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    31b6:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    31b8:	strb.w	r1, [r2, #59]	; 0x3b
    31bc:	bx	lr
    31be:	movs	r3, #1
    31c0:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    31c2:	movs	r0, #0
    31c4:	bx	lr
    31c6:	nop

000031c8 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    31c8:	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    31ca:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    31cc:	ldrb	r4, [r2, #3]
    31ce:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    31d0:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    31d2:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    31d4:	bpl.n	3220 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    31d6:	movs	r3, #16
    31d8:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    31da:	lsls	r3, r4, #25
    31dc:	bpl.n	321e <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    31de:	and.w	r4, r4, #4
    31e2:	and.w	r3, r4, #255	; 0xff
    31e6:	cmp	r4, #0
    31e8:	beq.n	32a0 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    31ea:	ldr	r1, [pc, #264]	; (32f4 <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    31ec:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    31ee:	movs	r3, #0
    31f0:	strb	r3, [r1, #0]
			txBufferLength = 0;
    31f2:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    31f6:	cmp	r2, #0
    31f8:	beq.n	32c8 <TwoWire::isr()+0x100>
				user_onRequest();
    31fa:	blx	r2
			}
			if (txBufferLength == 0) {
    31fc:	ldrb.w	r3, [r5, #93]	; 0x5d
    3200:	cmp	r3, #0
    3202:	beq.n	32c8 <TwoWire::isr()+0x100>
    3204:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3206:	movs	r2, #208	; 0xd0
    3208:	strb	r2, [r3, #2]
    320a:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    320c:	ldrb.w	r2, [r5, #59]	; 0x3b
    3210:	strb	r2, [r3, #4]
    3212:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    3214:	movs	r2, #1
    3216:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    321a:	movs	r2, #2
    321c:	strb	r2, [r3, #3]
    321e:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    3220:	and.w	r3, r4, #64	; 0x40
    3224:	and.w	r0, r3, #255	; 0xff
    3228:	cmp	r3, #0
    322a:	bne.n	31de <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    322c:	ldrb	r3, [r2, #6]
    322e:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    3230:	and.w	r1, r3, #96	; 0x60
    3234:	cmp	r1, #96	; 0x60
    3236:	beq.n	32d6 <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    3238:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    323a:	and.w	r3, r3, #16
    323e:	and.w	r1, r3, #255	; 0xff
    3242:	cbz	r3, 3272 <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    3244:	ands.w	r4, r4, #1
    3248:	bne.n	32ba <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    324a:	ldrb.w	r3, [r5, #92]	; 0x5c
    324e:	ldrb.w	r1, [r5, #93]	; 0x5d
    3252:	cmp	r1, r3
    3254:	bls.n	32ee <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    3256:	adds	r1, r3, #1
    3258:	add	r3, r5
    325a:	strb.w	r1, [r5, #92]	; 0x5c
    325e:	ldrb.w	r3, [r3, #59]	; 0x3b
    3262:	strb	r3, [r2, #4]
    3264:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3266:	movs	r2, #208	; 0xd0
    3268:	strb	r2, [r3, #2]
    326a:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    326c:	movs	r2, #2
    326e:	strb	r2, [r3, #3]
    3270:	b.n	321e <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    3272:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    3276:	ldrb	r3, [r2, #6]
    3278:	orr.w	r3, r3, #32
    327c:	strb	r3, [r2, #6]
    327e:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3280:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    3284:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3286:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    3288:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    328a:	bhi.n	321a <TwoWire::isr()+0x52>
    328c:	ldr	r0, [pc, #100]	; (32f4 <TwoWire::isr()+0x12c>)
    328e:	ldrb	r0, [r0, #0]
    3290:	cmp	r0, #0
    3292:	beq.n	321a <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    3294:	adds	r0, r5, r1
    3296:	adds	r1, #1
    3298:	strb.w	r1, [r5, #57]	; 0x39
    329c:	strb	r2, [r0, #24]
    329e:	b.n	321a <TwoWire::isr()+0x52>
    32a0:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    32a2:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    32a6:	movs	r3, #192	; 0xc0
    32a8:	strb	r3, [r2, #2]
    32aa:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    32ac:	ldr	r2, [pc, #68]	; (32f4 <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    32ae:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    32b0:	movs	r1, #1
    32b2:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    32b4:	movs	r2, #2
    32b6:	strb	r2, [r3, #3]
    32b8:	b.n	321e <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    32ba:	movs	r3, #192	; 0xc0
    32bc:	strb	r3, [r2, #2]
    32be:	ldr	r3, [r5, #16]
			data = port().D;
    32c0:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    32c2:	movs	r2, #2
    32c4:	strb	r2, [r3, #3]
    32c6:	b.n	321e <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    32c8:	movs	r2, #1
				txBuffer[0] = 0;
    32ca:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    32cc:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    32d0:	strb.w	r3, [r5, #59]	; 0x3b
    32d4:	b.n	3204 <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    32d6:	and.w	r3, r3, #223	; 0xdf
    32da:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    32dc:	ldr	r3, [r5, #104]	; 0x68
    32de:	cbz	r3, 32ea <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    32e0:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    32e4:	ldrb.w	r0, [r5, #57]	; 0x39
    32e8:	blx	r3
    32ea:	ldr	r2, [r5, #16]
    32ec:	b.n	3238 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    32ee:	strb	r4, [r2, #4]
    32f0:	b.n	3264 <TwoWire::isr()+0x9c>
    32f2:	nop
    32f4:	.word	0x2001a79c

000032f8 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    32f8:	ldr	r0, [pc, #4]	; (3300 <i2c0_isr+0x8>)
    32fa:	b.w	31c8 <TwoWire::isr()>
    32fe:	nop
    3300:	.word	0x20014638

00003304 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    3304:	ldr	r0, [pc, #4]	; (330c <i2c1_isr+0x8>)
    3306:	b.w	31c8 <TwoWire::isr()>
    330a:	nop
    330c:	.word	0x200146a4

00003310 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    3310:	ldr	r0, [pc, #4]	; (3318 <i2c2_isr+0x8>)
    3312:	b.w	31c8 <TwoWire::isr()>
    3316:	nop
    3318:	.word	0x200145cc

0000331c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    331c:	ldr	r3, [pc, #24]	; (3338 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    331e:	ldr	r2, [pc, #28]	; (333c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    3320:	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    3322:	movs	r1, #2
    3324:	movs	r2, #0
    3326:	str	r1, [r3, #4]
    3328:	strb	r2, [r3, #2]
    332a:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    332e:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    3332:	strb.w	r2, [r3, #50]	; 0x32
    3336:	bx	lr
    3338:	.word	0x2001a7a0
    333c:	.word	0x0001357c

00003340 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    3340:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    3342:	ldr	r4, [pc, #104]	; (33ac <SdVolume::cacheFlush()+0x6c>)
    3344:	ldrb	r3, [r4, #0]
    3346:	cbnz	r3, 334c <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    3348:	movs	r0, #1
}
    334a:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    334c:	ldr	r5, [pc, #96]	; (33b0 <SdVolume::cacheFlush()+0x70>)
    334e:	ldr	r3, [pc, #100]	; (33b4 <SdVolume::cacheFlush()+0x74>)
    3350:	ldr	r0, [r5, #0]
    3352:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3354:	ldrb	r3, [r0, #0]
    3356:	cmp	r3, #254	; 0xfe
    3358:	beq.n	338a <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    335a:	ldr	r2, [pc, #92]	; (33b8 <SdVolume::cacheFlush()+0x78>)
    335c:	bl	3fc4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    3360:	cbz	r0, 3386 <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    3362:	ldr	r6, [pc, #88]	; (33bc <SdVolume::cacheFlush()+0x7c>)
    3364:	ldr	r1, [r6, #0]
    3366:	cbnz	r1, 3370 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    3368:	movs	r3, #0
    336a:	strb	r3, [r4, #0]
  }
  return true;
    336c:	movs	r0, #1
    336e:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    3370:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3372:	ldrb	r3, [r0, #0]
    3374:	cmp	r3, #254	; 0xfe
    3376:	beq.n	3398 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    3378:	ldr	r2, [pc, #60]	; (33b8 <SdVolume::cacheFlush()+0x78>)
    337a:	bl	3fc4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    337e:	cbz	r0, 3386 <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    3380:	movs	r3, #0
    3382:	str	r3, [r6, #0]
    3384:	b.n	3368 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    3386:	movs	r0, #0
    3388:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    338a:	ldr	r0, [pc, #44]	; (33b8 <SdVolume::cacheFlush()+0x78>)
    338c:	bl	37dc <SDHC_CardWriteBlock(void const*, unsigned long)>
    3390:	clz	r0, r0
    3394:	lsrs	r0, r0, #5
    3396:	b.n	3360 <SdVolume::cacheFlush()+0x20>
    3398:	ldr	r0, [pc, #28]	; (33b8 <SdVolume::cacheFlush()+0x78>)
    339a:	bl	37dc <SDHC_CardWriteBlock(void const*, unsigned long)>
    339e:	clz	r0, r0
    33a2:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    33a4:	cmp	r0, #0
    33a6:	bne.n	3380 <SdVolume::cacheFlush()+0x40>
    33a8:	b.n	3386 <SdVolume::cacheFlush()+0x46>
    33aa:	nop
    33ac:	.word	0x2001a9fc
    33b0:	.word	0x2001a7f8
    33b4:	.word	0x20014710
    33b8:	.word	0x2001a7fc
    33bc:	.word	0x2001a7f4

000033c0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    33c0:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    33c2:	ldr	r5, [pc, #72]	; (340c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    33c4:	ldr	r3, [r5, #0]
    33c6:	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    33c8:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    33ca:	beq.n	33f0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    33cc:	mov	r4, r0
    if (!cacheFlush()) return false;
    33ce:	bl	3340 <SdVolume::cacheFlush()>
    33d2:	cbnz	r0, 33d8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    33d4:	movs	r0, #0
    33d6:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    33d8:	ldr	r3, [pc, #52]	; (3410 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    33da:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    33dc:	ldrb	r3, [r0, #0]
    33de:	cmp	r3, #254	; 0xfe
    33e0:	beq.n	33fc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    33e2:	ldr	r2, [pc, #48]	; (3414 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    33e4:	mov	r1, r4
    33e6:	bl	3e38 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    33ea:	cmp	r0, #0
    33ec:	beq.n	33d4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    33ee:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    33f0:	ldr	r3, [pc, #36]	; (3418 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
    33f2:	ldrb	r1, [r3, #0]
    33f4:	orrs	r1, r6
    33f6:	strb	r1, [r3, #0]
  return true;
    33f8:	movs	r0, #1
}
    33fa:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    33fc:	mov	r1, r4
    33fe:	ldr	r0, [pc, #20]	; (3414 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    3400:	bl	36d8 <SDHC_CardReadBlock(void*, unsigned long)>
    3404:	clz	r0, r0
    3408:	lsrs	r0, r0, #5
    340a:	b.n	33ea <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    340c:	.word	0x20014710
    3410:	.word	0x2001a7f8
    3414:	.word	0x2001a7fc
    3418:	.word	0x2001a9fc

0000341c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    341c:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    341e:	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    3422:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3424:	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    3426:	ldr	r3, [pc, #104]	; (3490 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3428:	mov	r5, r0
    342a:	mov	r6, r1
    342c:	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    342e:	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3430:	beq.n	3460 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    3432:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    3436:	cmp	r4, r3
    3438:	bne.n	3468 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    343a:	and.w	r6, r6, #127	; 0x7f
    343e:	ldr	r2, [pc, #84]	; (3494 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    3440:	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3444:	ldr	r1, [pc, #80]	; (3498 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    3446:	ldrb	r0, [r5, #24]
    3448:	ldrb	r2, [r1, #0]
    344a:	cmp	r0, #1
    344c:	orr.w	r2, r2, #1
    3450:	strb	r2, [r1, #0]
    3452:	bls.n	3486 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    3454:	ldr	r1, [r5, #8]
    3456:	ldr	r2, [pc, #68]	; (349c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    3458:	add	r3, r1
    345a:	str	r3, [r2, #0]
  return true;
    345c:	movs	r0, #1
    345e:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3460:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    3464:	cmp	r4, r3
    3466:	beq.n	347a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    3468:	movs	r1, #0
    346a:	mov	r0, r4
    346c:	bl	33c0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3470:	cbz	r0, 3488 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    3472:	ldrb.w	r3, [r5, #32]
    3476:	cmp	r3, #16
    3478:	bne.n	348a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    347a:	uxtb	r6, r6
    347c:	ldr	r2, [pc, #20]	; (3494 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    347e:	mov	r3, r4
    3480:	strh.w	r7, [r2, r6, lsl #1]
    3484:	b.n	3444 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    3486:	movs	r0, #1
}
    3488:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    348a:	mov	r3, r4
    348c:	b.n	343a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    348e:	nop
    3490:	.word	0x20014710
    3494:	.word	0x2001a7fc
    3498:	.word	0x2001a9fc
    349c:	.word	0x2001a7f4

000034a0 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    34a0:	ldr	r3, [r0, #12]
    34a2:	adds	r3, #1
    34a4:	cmp	r3, r1
    34a6:	bcc.n	34da <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    34a8:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    34aa:	ldrb.w	r3, [r0, #32]
    34ae:	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    34b0:	ldr	r3, [pc, #84]	; (3508 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    34b2:	mov	r4, r0
    34b4:	mov	r6, r2
    34b6:	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    34b8:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    34ba:	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    34bc:	beq.n	34de <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    34be:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    34c2:	cmp	r0, r3
    34c4:	bne.n	34e6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    34c6:	and.w	r1, r5, #127	; 0x7f
    34ca:	ldr	r3, [pc, #64]	; (350c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    34cc:	ldr.w	r3, [r3, r1, lsl #2]
    34d0:	bic.w	r3, r3, #4026531840	; 0xf0000000
    34d4:	str	r3, [r6, #0]
    34d6:	movs	r0, #1
  }
  return true;
}
    34d8:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    34da:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    34dc:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    34de:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    34e2:	cmp	r0, r3
    34e4:	beq.n	34f6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    34e6:	movs	r1, #0
    34e8:	bl	33c0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    34ec:	cbz	r0, 3504 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    34ee:	ldrb.w	r3, [r4, #32]
    34f2:	cmp	r3, #16
    34f4:	bne.n	34c6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    34f6:	uxtb	r1, r5
    34f8:	ldr	r3, [pc, #16]	; (350c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    34fa:	ldrh.w	r3, [r3, r1, lsl #1]
    34fe:	str	r3, [r6, #0]
    3500:	movs	r0, #1
    3502:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    3504:	movs	r0, #0
    3506:	pop	{r4, r5, r6, pc}
    3508:	.word	0x20014710
    350c:	.word	0x2001a7fc

00003510 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3510:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3514:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3516:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3518:	cbz	r7, 3576 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    351a:	adds	r7, #1

    // don't save new start location
    setStart = false;
    351c:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    3520:	ldr	r3, [r0, #12]
    3522:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3526:	cbz	r3, 356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3528:	mov	fp, r1
    352a:	mov	r6, r0
    352c:	mov	r9, r2
    352e:	mov	r4, r7
    3530:	movs	r5, #0
    3532:	b.n	3540 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    3534:	mov	r4, r3
    3536:	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3538:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    353a:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    353c:	cmp	r3, r5
    353e:	bls.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    3540:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    3542:	it	cc
    3544:	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3546:	mov	r1, r4
    3548:	add	r2, sp, #4
    354a:	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    354c:	it	cc
    354e:	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3550:	bl	34a0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3554:	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    3556:	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3558:	cbz	r0, 356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    355a:	ldr	r2, [sp, #4]
    355c:	cmp	r2, #0
    355e:	bne.n	3534 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    3560:	cmp	fp, r1
    3562:	beq.n	3586 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    3564:	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3566:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3568:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    356a:	cmp	r3, r5
    356c:	bhi.n	3540 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    356e:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    3570:	add	sp, #12
    3572:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    3576:	sub.w	sl, r1, #1
    357a:	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    357e:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    3580:	mov.w	sl, sl, lsr #5
    3584:	b.n	3520 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3586:	cmp	r4, #1
    3588:	bls.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    358a:	ldr	r3, [r6, #12]
    358c:	adds	r3, #1
    358e:	cmp	r4, r3
    3590:	bhi.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3592:	mvn.w	r2, #4026531840	; 0xf0000000
    3596:	mov	r1, r4
    3598:	mov	r0, r6
    359a:	bl	341c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    359e:	cmp	r0, #0
    35a0:	beq.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    35a2:	cmp	r7, r4
    35a4:	bcs.n	35d0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    35a6:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    35a8:	cmp	r4, #1
    35aa:	bls.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    35ac:	ldr	r3, [r6, #12]
    35ae:	adds	r3, #1
    35b0:	cmp	r4, r3
    35b2:	bhi.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    35b4:	adds	r2, r4, #1
    35b6:	mov	r1, r4
    35b8:	mov	r0, r6
    35ba:	bl	341c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    35be:	cmp	r0, #0
    35c0:	beq.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    35c2:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    35c4:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    35c8:	beq.n	35d0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    35ca:	cmp	r4, #1
    35cc:	bne.n	35ac <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    35ce:	b.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    35d0:	ldr.w	r1, [r9]
    35d4:	cbz	r1, 35ee <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    35d6:	cmp	r1, #1
    35d8:	bls.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    35da:	ldr	r3, [r6, #12]
    35dc:	adds	r3, #1
    35de:	cmp	r1, r3
    35e0:	bhi.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    35e2:	mov	r2, r7
    35e4:	mov	r0, r6
    35e6:	bl	341c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    35ea:	cmp	r0, #0
    35ec:	beq.n	356e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    35ee:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    35f2:	cmp.w	sl, #0
    35f6:	beq.n	35fc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    35f8:	adds	r7, #1
    35fa:	str	r7, [r6, #0]

  return true;
    35fc:	movs	r0, #1
    35fe:	b.n	3570 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

00003600 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3600:	ldr	r1, [pc, #128]	; (3684 <SDHC_CMD_Do(unsigned long)+0x84>)

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    3602:	ldr	r2, [pc, #132]	; (3688 <SDHC_CMD_Do(unsigned long)+0x88>)

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3604:	ldr	r3, [r1, #0]
    3606:	orr.w	r3, r3, #128	; 0x80
    360a:	str	r3, [r1, #0]

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    360c:	mov	r1, r2
    360e:	ldr	r3, [r2, #0]
    3610:	lsls	r3, r3, #31
    3612:	bmi.n	360e <SDHC_CMD_Do(unsigned long)+0xe>
    3614:	ldr	r3, [r1, #0]
    3616:	lsls	r3, r3, #30
    3618:	bmi.n	360e <SDHC_CMD_Do(unsigned long)+0xe>
  SDHC_XFERTYP = xfertyp;
    361a:	ldr	r3, [pc, #112]	; (368c <SDHC_CMD_Do(unsigned long)+0x8c>)
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    361c:	push	{r4, r5}

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    361e:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    3622:	ldr	r5, [pc, #96]	; (3684 <SDHC_CMD_Do(unsigned long)+0x84>)
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;
    3624:	str	r0, [r3, #0]
    3626:	b.n	362a <SDHC_CMD_Do(unsigned long)+0x2a>
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    3628:	cbz	r2, 3654 <SDHC_CMD_Do(unsigned long)+0x54>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    362a:	ldr	r1, [r5, #0]
    362c:	ldr	r3, [pc, #96]	; (3690 <SDHC_CMD_Do(unsigned long)+0x90>)
    362e:	ldr	r4, [pc, #84]	; (3684 <SDHC_CMD_Do(unsigned long)+0x84>)
    3630:	ands	r3, r1
    timeout--;
    3632:	subs	r2, #1
  } while (!result && (timeout));
    3634:	cmp	r3, #0
    3636:	beq.n	3628 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    3638:	cbz	r2, 3654 <SDHC_CMD_Do(unsigned long)+0x54>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    363a:	cmp	r3, #1
    363c:	bne.n	3654 <SDHC_CMD_Do(unsigned long)+0x54>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    363e:	ldr	r3, [r4, #0]
    3640:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3644:	ldr	r3, [r4, #0]
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    3646:	beq.n	3668 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3648:	orr.w	r3, r3, #65537	; 0x10001
    364c:	str	r3, [r4, #0]
      return SDHC_RESULT_NOT_READY;
    364e:	movs	r0, #3
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    3650:	pop	{r4, r5}
    3652:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    3654:	ldr	r2, [pc, #44]	; (3684 <SDHC_CMD_Do(unsigned long)+0x84>)
    3656:	ldr	r3, [r2, #0]
    3658:	orr.w	r3, r3, #983040	; 0xf0000
    365c:	orr.w	r3, r3, #1
    3660:	str	r3, [r2, #0]
      return SDHC_RESULT_ERROR;
    3662:	movs	r0, #1
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    3664:	pop	{r4, r5}
    3666:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    3668:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    366c:	ldr	r3, [r4, #0]
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    366e:	beq.n	367a <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3670:	orr.w	r3, r3, #65537	; 0x10001
    3674:	str	r3, [r4, #0]
      return SDHC_RESULT_NO_RESPONSE;
    3676:	movs	r0, #5
    3678:	b.n	3664 <SDHC_CMD_Do(unsigned long)+0x64>
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    367a:	orr.w	r3, r3, #1
    367e:	str	r3, [r4, #0]
    3680:	b.n	3664 <SDHC_CMD_Do(unsigned long)+0x64>
    3682:	nop
    3684:	.word	0x400b1030
    3688:	.word	0x400b1024
    368c:	.word	0x400b100c
    3690:	.word	0x000e0001

00003694 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    3694:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    3696:	ldr	r5, [pc, #52]	; (36cc <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3698:	ldr	r0, [pc, #52]	; (36d0 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    369a:	ldr	r6, [pc, #56]	; (36d4 <SDHC_CMD12_StopTransferWaitForBusy()+0x40>)
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    369c:	movs	r3, #0
    369e:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    36a0:	bl	3600 <SDHC_CMD_Do(unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    36a4:	movw	r4, #999	; 0x3e7

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    36a8:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    36aa:	ldr	r2, [r6, #0]
    36ac:	lsls	r2, r2, #29
    36ae:	bpl.n	36b4 <SDHC_CMD12_StopTransferWaitForBusy()+0x20>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    36b0:	ldr	r0, [pc, #28]	; (36d0 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    36b2:	cbz	r3, 36b8 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
    36b4:	mov	r0, r3
    36b6:	pop	{r4, r5, r6, pc}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    36b8:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    36ba:	bl	3600 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    36be:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    36c0:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    36c2:	bne.n	36aa <SDHC_CMD12_StopTransferWaitForBusy()+0x16>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    36c4:	cmp	r0, #0
    36c6:	it	eq
    36c8:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    36ca:	pop	{r4, r5, r6, pc}
    36cc:	.word	0x400b1008
    36d0:	.word	0x0cdb0000
    36d4:	.word	0x400b1024

000036d8 <SDHC_CardReadBlock(void*, unsigned long)>:
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    36d8:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    36da:	ldr	r3, [pc, #224]	; (37bc <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    36dc:	ldrb	r2, [r3, #0]
    36de:	cbz	r2, 36e4 <SDHC_CardReadBlock(void*, unsigned long)+0xc>
     return SDHC_RESULT_NOT_READY;
    36e0:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);

  return result;
}
    36e2:	pop	{r3, r4, r5, r6, r7, pc}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    36e4:	ldrb	r3, [r3, #1]
    36e6:	mov	r6, r0
    36e8:	cbnz	r3, 36ec <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    36ea:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    36ec:	ldr	r5, [pc, #208]	; (37c0 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    36ee:	ldr	r4, [pc, #212]	; (37c4 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    36f0:	ldr	r3, [pc, #212]	; (37c8 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    36f2:	ldr	r0, [pc, #216]	; (37cc <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    36f4:	movw	r7, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    36f8:	mov.w	r2, #66048	; 0x10200

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    36fc:	str	r7, [r5, #0]
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    36fe:	str	r1, [r4, #0]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3700:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3702:	bl	3600 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    3706:	cmp	r0, #0
    3708:	bne.n	36e2 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
    370a:	ldr	r3, [pc, #196]	; (37d0 <SDHC_CardReadBlock(void*, unsigned long)+0xf8>)
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
		*pData++ = SDHC_DATPORT;
    370c:	ldr	r1, [pc, #196]	; (37d4 <SDHC_CardReadBlock(void*, unsigned long)+0xfc>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    370e:	ldr	r3, [r3, #0]
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    3710:	adds	r4, #28
    3712:	add.w	r2, r6, #64	; 0x40
    3716:	add.w	r0, r6, #576	; 0x240
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    371a:	ldr	r3, [r5, #0]
    371c:	ldr	r7, [pc, #160]	; (37c0 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    371e:	orr.w	r6, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3722:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    3726:	str	r6, [r5, #0]
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3728:	bne.n	37a8 <SDHC_CardReadBlock(void*, unsigned long)+0xd0>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    372a:	ldr	r3, [r4, #0]
    372c:	lsls	r6, r3, #20
    372e:	bpl.n	372a <SDHC_CardReadBlock(void*, unsigned long)+0x52>
		*pData++ = SDHC_DATPORT;
    3730:	ldr	r3, [r1, #0]
    3732:	str.w	r3, [r2, #-64]
		*pData++ = SDHC_DATPORT;
    3736:	ldr	r3, [r1, #0]
    3738:	str.w	r3, [r2, #-60]
		*pData++ = SDHC_DATPORT;
    373c:	ldr	r3, [r1, #0]
    373e:	str.w	r3, [r2, #-56]
		*pData++ = SDHC_DATPORT;
    3742:	ldr	r3, [r1, #0]
    3744:	str.w	r3, [r2, #-52]
		*pData++ = SDHC_DATPORT;
    3748:	ldr	r3, [r1, #0]
    374a:	str.w	r3, [r2, #-48]
		*pData++ = SDHC_DATPORT;
    374e:	ldr	r3, [r1, #0]
    3750:	str.w	r3, [r2, #-44]
		*pData++ = SDHC_DATPORT;
    3754:	ldr	r3, [r1, #0]
    3756:	str.w	r3, [r2, #-40]
		*pData++ = SDHC_DATPORT;
    375a:	ldr	r3, [r1, #0]
    375c:	str.w	r3, [r2, #-36]
		*pData++ = SDHC_DATPORT;
    3760:	ldr	r3, [r1, #0]
    3762:	str.w	r3, [r2, #-32]
		*pData++ = SDHC_DATPORT;
    3766:	ldr	r3, [r1, #0]
    3768:	str.w	r3, [r2, #-28]
		*pData++ = SDHC_DATPORT;
    376c:	ldr	r3, [r1, #0]
    376e:	str.w	r3, [r2, #-24]
		*pData++ = SDHC_DATPORT;
    3772:	ldr	r3, [r1, #0]
    3774:	str.w	r3, [r2, #-20]
		*pData++ = SDHC_DATPORT;
    3778:	ldr	r3, [r1, #0]
    377a:	str.w	r3, [r2, #-16]
		*pData++ = SDHC_DATPORT;
    377e:	ldr	r3, [r1, #0]
    3780:	str.w	r3, [r2, #-12]
		*pData++ = SDHC_DATPORT;
    3784:	ldr	r3, [r1, #0]
    3786:	str.w	r3, [r2, #-8]
		*pData++ = SDHC_DATPORT;
    378a:	ldr	r3, [r1, #0]
    378c:	str.w	r3, [r2, #-4]
    3790:	adds	r2, #64	; 0x40
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    3792:	cmp	r2, r0
    3794:	bne.n	371a <SDHC_CardReadBlock(void*, unsigned long)+0x42>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    3796:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    3798:	ldr	r1, [pc, #36]	; (37c0 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    379a:	ldr	r3, [r1, #0]
    379c:	ldr	r2, [pc, #32]	; (37c0 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    379e:	lsls	r3, r3, #30
    37a0:	bpl.n	379a <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    37a2:	ldr	r3, [pc, #52]	; (37d8 <SDHC_CardReadBlock(void*, unsigned long)+0x100>)
    37a4:	str	r3, [r2, #0]

  return result;
    37a6:	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    37a8:	orr.w	r3, r3, #7340032	; 0x700000
    37ac:	orr.w	r3, r3, #32
    37b0:	str	r3, [r7, #0]
			SDHC_CMD12_StopTransferWaitForBusy();
    37b2:	bl	3694 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    37b6:	movs	r0, #1
    37b8:	b.n	3798 <SDHC_CardReadBlock(void*, unsigned long)+0xc0>
    37ba:	nop
    37bc:	.word	0x2001aa00
    37c0:	.word	0x400b1030
    37c4:	.word	0x400b1008
    37c8:	.word	0x400b1004
    37cc:	.word	0x113a0010
    37d0:	.word	0x400b1010
    37d4:	.word	0x400b1020
    37d8:	.word	0x01000022

000037dc <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    37dc:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    37de:	ldr	r3, [pc, #172]	; (388c <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    37e0:	ldrb	r2, [r3, #0]
    37e2:	cbz	r2, 37e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    37e4:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    37e6:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    37e8:	ldrb	r3, [r3, #1]
    37ea:	mov	r4, r0
    37ec:	cbnz	r3, 37f0 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    37ee:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    37f0:	ldr	r5, [pc, #156]	; (3890 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    37f2:	ldr	r0, [pc, #160]	; (3894 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb8>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    37f4:	ldr	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    37f6:	ldr	r3, [pc, #160]	; (3898 <SDHC_CardWriteBlock(void const*, unsigned long)+0xbc>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    37f8:	str	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    37fa:	mov.w	r2, #66048	; 0x10200
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    37fe:	str	r1, [r0, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3800:	ldr	r0, [pc, #152]	; (389c <SDHC_CardWriteBlock(void const*, unsigned long)+0xc0>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3802:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3804:	bl	3600 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    3808:	cmp	r0, #0
    380a:	bne.n	37e6 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
    380c:	ldr	r3, [pc, #144]	; (38a0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc4>)
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    380e:	ldr	r6, [pc, #148]	; (38a4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc8>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    3810:	ldr	r3, [r3, #0]
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    3812:	mov	r1, r5
    3814:	add.w	r7, r4, #512	; 0x200
    3818:	ldr	r3, [r1, #0]
    381a:	ldr	r2, [pc, #116]	; (3890 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    381c:	lsls	r0, r3, #27
    381e:	bpl.n	3818 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3820:	ldr	r3, [r5, #0]
    3822:	tst.w	r3, #7340032	; 0x700000
    3826:	bne.n	385e <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    3828:	add.w	r2, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    382c:	ldr.w	r3, [r4], #4
    3830:	str	r3, [r6, #0]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    3832:	cmp	r2, r4
    3834:	bne.n	382c <SDHC_CardWriteBlock(void const*, unsigned long)+0x50>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    3836:	ldr	r3, [r1, #0]
    3838:	ldr.w	lr, [pc, #84]	; 3890 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>
    383c:	orr.w	r3, r3, #16
    3840:	str	r3, [r1, #0]

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3842:	ldr	r3, [r1, #0]
    3844:	ands.w	r0, r3, #7340032	; 0x700000
    3848:	bne.n	3872 <SDHC_CardWriteBlock(void const*, unsigned long)+0x96>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    384a:	cmp	r7, r2
    384c:	bne.n	3818 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    384e:	ldr	r1, [pc, #64]	; (3890 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    3850:	ldr	r3, [r1, #0]
    3852:	ldr	r2, [pc, #60]	; (3890 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    3854:	lsls	r3, r3, #30
    3856:	bpl.n	3850 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    3858:	ldr	r3, [pc, #76]	; (38a8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xcc>)
    385a:	str	r3, [r2, #0]

  return result;
    385c:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    385e:	ldr	r3, [r2, #0]
    3860:	orr.w	r3, r3, #7340032	; 0x700000
    3864:	orr.w	r3, r3, #16
    3868:	str	r3, [r2, #0]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    386a:	bl	3694 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    386e:	movs	r0, #1
    3870:	b.n	384e <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    3872:	ldr.w	r3, [lr]
    3876:	orr.w	r3, r3, #7340032	; 0x700000
    387a:	orr.w	r3, r3, #16
    387e:	str.w	r3, [lr]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    3882:	bl	3694 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    3886:	movs	r0, #1
    3888:	b.n	384e <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    388a:	nop
    388c:	.word	0x2001aa00
    3890:	.word	0x400b1030
    3894:	.word	0x400b1008
    3898:	.word	0x400b1004
    389c:	.word	0x183a0000
    38a0:	.word	0x400b1010
    38a4:	.word	0x400b1020
    38a8:	.word	0x01000012

000038ac <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    38ac:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    38ae:	ldrsb.w	r3, [r0, #5]
    38b2:	cmp	r3, #0
    38b4:	blt.n	38be <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    38b6:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    38ba:	b.w	3340 <SdVolume::cacheFlush()>
    38be:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    38c0:	movs	r1, #1
    38c2:	ldr	r0, [r0, #16]
    38c4:	bl	33c0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    38c8:	cbz	r0, 390a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    38ca:	ldrb	r5, [r4, #20]
    38cc:	ldr	r3, [pc, #64]	; (3910 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    38ce:	adds.w	r5, r3, r5, lsl #5
    38d2:	beq.n	390a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    38d4:	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    38d6:	ldr	r2, [pc, #60]	; (3914 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    38d8:	cmp	r3, #1
    38da:	itt	ls
    38dc:	ldrls	r3, [r4, #24]
    38de:	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    38e0:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    38e2:	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    38e4:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    38e6:	lsrs	r3, r3, #16
    38e8:	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    38ea:	cbz	r2, 38fa <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    38ec:	add.w	r1, r5, #22
    38f0:	add.w	r0, r5, #24
    38f4:	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    38f6:	ldrh	r3, [r5, #24]
    38f8:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    38fa:	ldrb	r3, [r4, #5]
    38fc:	and.w	r3, r3, #127	; 0x7f
    3900:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    3902:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    3906:	b.w	3340 <SdVolume::cacheFlush()>
}
    390a:	movs	r0, #0
    390c:	pop	{r3, r4, r5, pc}
    390e:	nop
    3910:	.word	0x2001a7fc
    3914:	.word	0x2001aa10

00003918 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    3918:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    391a:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    391e:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3920:	movs	r1, #1
    3922:	ldr	r0, [r0, #32]
    3924:	bl	3510 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    3928:	cbz	r0, 3940 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    392a:	ldr	r3, [r4, #28]
    392c:	cbnz	r3, 393e <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    392e:	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    3930:	ldr	r2, [r4, #8]
    3932:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    3934:	orn	r3, r3, #127	; 0x7f
    3938:	strb	r3, [r4, #5]
    393a:	movs	r0, #1
    393c:	pop	{r4, pc}
  }
  return true;
    393e:	movs	r0, #1
}
    3940:	pop	{r4, pc}
    3942:	nop

00003944 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    3944:	push	{r3, r4, r5, r6, r7, lr}
    3946:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    3948:	cbz	r3, 3950 <SdFile::seekSet(unsigned long)+0xc>
    394a:	ldr	r2, [r0, #24]
    394c:	cmp	r2, r1
    394e:	bcs.n	3954 <SdFile::seekSet(unsigned long)+0x10>
    3950:	movs	r0, #0
    3952:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    3954:	cmp	r3, #2
    3956:	mov	r7, r1
    3958:	mov	r5, r0
    395a:	beq.n	3992 <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    395c:	cbz	r7, 39a0 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    395e:	ldr	r3, [r5, #32]
    3960:	ldr	r1, [r5, #12]
    3962:	ldrb	r4, [r3, #16]
    3964:	subs	r2, r1, #1
    3966:	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    396a:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    396c:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    396e:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    3970:	cmp	r2, r4
    3972:	bls.n	3998 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    3974:	ldr	r3, [r5, #28]
    3976:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    3978:	add.w	r6, r5, #8
    397c:	b.n	398c <SdFile::seekSet(unsigned long)+0x48>
    397e:	ldr	r1, [r5, #8]
    3980:	ldr	r0, [r5, #32]
    3982:	bl	34a0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3986:	subs	r4, #1
    3988:	cmp	r0, #0
    398a:	beq.n	3950 <SdFile::seekSet(unsigned long)+0xc>
    398c:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    398e:	cmp	r4, #0
    3990:	bne.n	397e <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    3992:	str	r7, [r5, #12]
    return true;
    3994:	movs	r0, #1
    3996:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    3998:	cmp	r1, #0
    399a:	beq.n	3974 <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    399c:	subs	r4, r4, r2
    399e:	b.n	3978 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    39a0:	str	r7, [r5, #8]
    curPosition_ = 0;
    39a2:	str	r7, [r5, #12]
    return true;
    39a4:	movs	r0, #1
    39a6:	pop	{r3, r4, r5, r6, r7, pc}

000039a8 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    39a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39ac:	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    39ae:	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    39b0:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    39b2:	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    39b4:	mov	r7, r0
    39b6:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    39b8:	beq.n	39c6 <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    39ba:	movs	r3, #1
    39bc:	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    39be:	movs	r0, #0
}
    39c0:	add	sp, #20
    39c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    39c6:	ldrb	r2, [r0, #5]
    39c8:	lsls	r1, r2, #30
    39ca:	bpl.n	39ba <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    39cc:	lsls	r3, r2, #29
    39ce:	bpl.n	39e2 <SdFile::write(void const*, unsigned int)+0x3a>
    39d0:	ldr	r4, [r7, #12]
    39d2:	ldr	r1, [r7, #24]
    39d4:	cmp	r4, r1
    39d6:	beq.w	3b42 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    39da:	bl	3944 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    39de:	cmp	r0, #0
    39e0:	beq.n	39ba <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    39e2:	ldr	r3, [sp, #4]
    39e4:	ldr	r4, [r7, #12]
    39e6:	cmp	r3, #0
    39e8:	beq.n	3a80 <SdFile::write(void const*, unsigned int)+0xd8>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    39ea:	ldr.w	r9, [pc, #420]	; 3b90 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    39ee:	ldr.w	sl, [pc, #420]	; 3b94 <SdFile::write(void const*, unsigned int)+0x1ec>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    39f2:	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    39f6:	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    39f8:	ldrb	r6, [r0, #4]
    39fa:	subs	r6, #1
    39fc:	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    3a00:	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3a04:	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    3a08:	bne.n	3a92 <SdFile::write(void const*, unsigned int)+0xea>
    3a0a:	cmp	r4, #0
    3a0c:	bne.n	3a92 <SdFile::write(void const*, unsigned int)+0xea>
      // start of new cluster
      if (curCluster_ == 0) {
    3a0e:	ldr	r1, [r7, #8]
    3a10:	cmp	r1, #0
    3a12:	bne.n	3afc <SdFile::write(void const*, unsigned int)+0x154>
        if (firstCluster_ == 0) {
    3a14:	ldr	r2, [r7, #28]
    3a16:	cmp	r2, #0
    3a18:	beq.w	3b22 <SdFile::write(void const*, unsigned int)+0x17a>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    3a1c:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3a1e:	rsb	r5, r4, #512	; 0x200
    3a22:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3a24:	cmp	r5, r8
    3a26:	bls.n	3a9e <SdFile::write(void const*, unsigned int)+0xf6>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3a28:	ldrb	r5, [r0, #16]
    3a2a:	ldr	r1, [r0, #20]
    3a2c:	subs	r2, #2
    3a2e:	lsls	r2, r5
    3a30:	add	r6, r1
    3a32:	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3a34:	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3a38:	cbnz	r4, 3a42 <SdFile::write(void const*, unsigned int)+0x9a>
    3a3a:	ldr	r0, [r7, #12]
    3a3c:	ldr	r2, [r7, #24]
    3a3e:	cmp	r0, r2
    3a40:	bcs.n	3ae2 <SdFile::write(void const*, unsigned int)+0x13a>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3a42:	mov	r0, r6
    3a44:	movs	r1, #1
    3a46:	bl	33c0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3a4a:	cmp	r0, #0
    3a4c:	beq.n	39ba <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3a4e:	add	r4, r9
      uint8_t* end = dst + n;
    3a50:	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    3a54:	cmp	r4, lr
    3a56:	beq.n	3a74 <SdFile::write(void const*, unsigned int)+0xcc>
    3a58:	add.w	r1, fp, #4294967295
    3a5c:	subs	r2, r4, #1
    3a5e:	add.w	r6, lr, #4294967295
    3a62:	ldrb.w	r0, [r1, #1]!
    3a66:	strb.w	r0, [r2, #1]!
    3a6a:	cmp	r6, r2
    3a6c:	bne.n	3a62 <SdFile::write(void const*, unsigned int)+0xba>
    3a6e:	rsb	r4, r4, lr
    3a72:	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    3a74:	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3a76:	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    3a7a:	add	r4, r5
    3a7c:	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3a7e:	bne.n	39f6 <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3a80:	ldr	r3, [r7, #24]
    3a82:	cmp	r3, r4
    3a84:	bcs.n	3b4c <SdFile::write(void const*, unsigned int)+0x1a4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    3a86:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3a88:	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    3a8a:	orr.w	r2, r2, #128	; 0x80
    3a8e:	strb	r2, [r7, #5]
    3a90:	b.n	3b5e <SdFile::write(void const*, unsigned int)+0x1b6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3a92:	rsb	r5, r4, #512	; 0x200
    3a96:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3a98:	cmp	r5, r8
    3a9a:	ldr	r2, [r7, #8]
    3a9c:	bhi.n	3a28 <SdFile::write(void const*, unsigned int)+0x80>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3a9e:	ldrb	r1, [r0, #16]
    3aa0:	ldr	r0, [r0, #20]
    3aa2:	subs	r2, #2
    3aa4:	lsls	r2, r1
    3aa6:	add	r6, r0
    if (n == 512) {
    3aa8:	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3aac:	add	r6, r2
    if (n == 512) {
    3aae:	bne.n	3a38 <SdFile::write(void const*, unsigned int)+0x90>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3ab0:	ldr.w	r2, [sl]
    3ab4:	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    3ab6:	itt	eq
    3ab8:	moveq.w	r2, #4294967295
    3abc:	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    3ac0:	ldr	r2, [pc, #188]	; (3b80 <SdFile::write(void const*, unsigned int)+0x1d8>)
    3ac2:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3ac4:	ldrb	r2, [r0, #0]
    3ac6:	cmp	r2, #254	; 0xfe
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    3ac8:	mov	r1, r6
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3aca:	beq.n	3b34 <SdFile::write(void const*, unsigned int)+0x18c>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    3acc:	mov	r2, fp
    3ace:	bl	3fc4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3ad2:	cmp	r0, #0
    3ad4:	beq.w	39ba <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    3ad8:	add.w	fp, fp, #512	; 0x200
    3adc:	mov.w	r5, #512	; 0x200
    3ae0:	b.n	3a74 <SdFile::write(void const*, unsigned int)+0xcc>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3ae2:	bl	3340 <SdVolume::cacheFlush()>
    3ae6:	cmp	r0, #0
    3ae8:	beq.w	39ba <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3aec:	ldr	r1, [pc, #148]	; (3b84 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    3aee:	str.w	r6, [sl]
    3af2:	ldrb	r2, [r1, #0]
    3af4:	orr.w	r2, r2, #1
    3af8:	strb	r2, [r1, #0]
    3afa:	b.n	3a4e <SdFile::write(void const*, unsigned int)+0xa6>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3afc:	add	r2, sp, #12
    3afe:	bl	34a0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3b02:	cmp	r0, #0
    3b04:	beq.w	39c0 <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    3b08:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3b0a:	ldr	r3, [pc, #124]	; (3b88 <SdFile::write(void const*, unsigned int)+0x1e0>)
    3b0c:	ldrb.w	r5, [r0, #32]
    3b10:	ldr	r2, [sp, #12]
    3b12:	movw	r1, #65528	; 0xfff8
    3b16:	cmp	r5, #16
    3b18:	it	ne
    3b1a:	movne	r1, r3
    3b1c:	cmp	r2, r1
    3b1e:	bcc.w	3a1c <SdFile::write(void const*, unsigned int)+0x74>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    3b22:	mov	r0, r7
    3b24:	bl	3918 <SdFile::addCluster()>
    3b28:	cmp	r0, #0
    3b2a:	beq.w	39ba <SdFile::write(void const*, unsigned int)+0x12>
    3b2e:	ldr	r0, [r7, #32]
    3b30:	ldr	r2, [r7, #8]
    3b32:	b.n	3a1e <SdFile::write(void const*, unsigned int)+0x76>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    3b34:	mov	r0, fp
    3b36:	bl	37dc <SDHC_CardWriteBlock(void const*, unsigned long)>
    3b3a:	clz	r0, r0
    3b3e:	lsrs	r0, r0, #5
    3b40:	b.n	3ad2 <SdFile::write(void const*, unsigned int)+0x12a>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3b42:	ldr	r3, [sp, #4]
    3b44:	cmp	r3, #0
    3b46:	bne.w	39ea <SdFile::write(void const*, unsigned int)+0x42>
    3b4a:	b.n	3b5e <SdFile::write(void const*, unsigned int)+0x1b6>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    3b4c:	ldr	r3, [pc, #60]	; (3b8c <SdFile::write(void const*, unsigned int)+0x1e4>)
    3b4e:	ldrb	r2, [r7, #5]
    3b50:	ldr	r3, [r3, #0]
    3b52:	cbz	r3, 3b5e <SdFile::write(void const*, unsigned int)+0x1b6>
    3b54:	ldr	r3, [sp, #4]
    3b56:	cbz	r3, 3b5e <SdFile::write(void const*, unsigned int)+0x1b6>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3b58:	orr.w	r2, r2, #128	; 0x80
    3b5c:	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    3b5e:	lsls	r2, r2, #28
    3b60:	bpl.n	3b76 <SdFile::write(void const*, unsigned int)+0x1ce>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    3b62:	ldrb	r3, [r7, #6]
    3b64:	cmp	r3, #0
    3b66:	beq.w	39ba <SdFile::write(void const*, unsigned int)+0x12>
    3b6a:	mov	r0, r7
    3b6c:	bl	38ac <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    3b70:	cmp	r0, #0
    3b72:	beq.w	39ba <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3b76:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3b78:	add	sp, #20
    3b7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b7e:	nop
    3b80:	.word	0x2001a7f8
    3b84:	.word	0x2001a9fc
    3b88:	.word	0x0ffffff8
    3b8c:	.word	0x2001aa10
    3b90:	.word	0x2001a7fc
    3b94:	.word	0x20014710

00003b98 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3b98:	push	{lr}
    3b9a:	sub	sp, #12
    3b9c:	add	r3, sp, #8
  return write(&b, 1);
    3b9e:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3ba0:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    3ba4:	mov	r1, r3
    3ba6:	bl	39a8 <SdFile::write(void const*, unsigned int)>
}
    3baa:	add	sp, #12
    3bac:	ldr.w	pc, [sp], #4

00003bb0 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    3bb0:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    3bb2:	movs	r1, #1
    3bb4:	ldrb	r0, [r0, #0]
    3bb6:	bl	8920 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    3bba:	ldr	r2, [pc, #68]	; (3c00 <Sd2Card::chipSelectHigh()+0x50>)
    3bbc:	ldrb	r3, [r2, #0]
    3bbe:	cbz	r3, 3bf2 <Sd2Card::chipSelectHigh()+0x42>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3bc0:	ldr	r1, [pc, #64]	; (3c04 <Sd2Card::chipSelectHigh()+0x54>)
    3bc2:	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    3bc4:	movs	r4, #0
    3bc6:	mov	r0, r3
    3bc8:	strb	r4, [r2, #0]
    3bca:	cbz	r3, 3bf2 <Sd2Card::chipSelectHigh()+0x42>
			if (interruptMasksUsed & 0x01) {
    3bcc:	lsls	r2, r3, #31
    3bce:	bpl.n	3bd8 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    3bd0:	ldr	r2, [pc, #52]	; (3c08 <Sd2Card::chipSelectHigh()+0x58>)
    3bd2:	ldr	r0, [r1, #28]
    3bd4:	str	r0, [r2, #0]
    3bd6:	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3bd8:	lsls	r4, r3, #30
    3bda:	bpl.n	3be4 <Sd2Card::chipSelectHigh()+0x34>
				NVIC_ISER1 = interruptSave[1];
    3bdc:	ldr	r3, [pc, #44]	; (3c0c <Sd2Card::chipSelectHigh()+0x5c>)
    3bde:	ldr	r2, [r1, #32]
    3be0:	ldrb	r0, [r1, #11]
    3be2:	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3be4:	lsls	r2, r0, #29
    3be6:	bmi.n	3bf4 <Sd2Card::chipSelectHigh()+0x44>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    3be8:	lsls	r3, r0, #28
    3bea:	bpl.n	3bf2 <Sd2Card::chipSelectHigh()+0x42>
				NVIC_ISER3 = interruptSave[3];
    3bec:	ldr	r3, [pc, #32]	; (3c10 <Sd2Card::chipSelectHigh()+0x60>)
    3bee:	ldr	r2, [r1, #40]	; 0x28
    3bf0:	str	r2, [r3, #0]
    3bf2:	pop	{r4, pc}
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    3bf4:	ldr	r3, [pc, #28]	; (3c14 <Sd2Card::chipSelectHigh()+0x64>)
    3bf6:	ldr	r2, [r1, #36]	; 0x24
    3bf8:	ldrb	r0, [r1, #11]
    3bfa:	str	r2, [r3, #0]
    3bfc:	b.n	3be8 <Sd2Card::chipSelectHigh()+0x38>
    3bfe:	nop
    3c00:	.word	0x2001aa18
    3c04:	.word	0x20014588
    3c08:	.word	0xe000e100
    3c0c:	.word	0xe000e104
    3c10:	.word	0xe000e10c
    3c14:	.word	0xe000e108

00003c18 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    3c18:	ldr	r3, [pc, #140]	; (3ca8 <Sd2Card::chipSelectLow()+0x90>)
    3c1a:	ldrb	r2, [r3, #0]
    3c1c:	cbz	r2, 3c26 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3c1e:	ldrb	r0, [r0, #0]
    3c20:	movs	r1, #0
    3c22:	b.w	8920 <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    3c26:	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3c28:	ldr	r2, [pc, #128]	; (3cac <Sd2Card::chipSelectLow()+0x94>)
    3c2a:	ldr	r1, [pc, #132]	; (3cb0 <Sd2Card::chipSelectLow()+0x98>)
    3c2c:	ldrb	r4, [r2, #11]
    3c2e:	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    3c30:	movs	r5, #1
    3c32:	strb	r5, [r3, #0]
    3c34:	cmp	r4, #0
    3c36:	beq.n	3c86 <Sd2Card::chipSelectLow()+0x6e>
			__disable_irq();
    3c38:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3c3a:	ldrb	r4, [r2, #11]
    3c3c:	lsls	r6, r4, #31
    3c3e:	mov	r3, r4
    3c40:	bpl.n	3c50 <Sd2Card::chipSelectLow()+0x38>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3c42:	ldr	r5, [pc, #112]	; (3cb4 <Sd2Card::chipSelectLow()+0x9c>)
    3c44:	ldr	r3, [r2, #12]
    3c46:	ldr	r6, [r5, #0]
    3c48:	ands	r3, r6
    3c4a:	str	r3, [r2, #28]
				NVIC_ICER0 = interruptSave[0];
    3c4c:	str	r3, [r5, #0]
    3c4e:	mov	r3, r4
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3c50:	lsls	r5, r4, #30
    3c52:	bpl.n	3c62 <Sd2Card::chipSelectLow()+0x4a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3c54:	ldr	r5, [pc, #96]	; (3cb8 <Sd2Card::chipSelectLow()+0xa0>)
    3c56:	ldr	r4, [r2, #16]
    3c58:	ldr	r6, [r5, #0]
    3c5a:	ldrb	r3, [r2, #11]
    3c5c:	ands	r4, r6
    3c5e:	str	r4, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
    3c60:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3c62:	lsls	r4, r3, #29
    3c64:	bpl.n	3c74 <Sd2Card::chipSelectLow()+0x5c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3c66:	ldr	r5, [pc, #84]	; (3cbc <Sd2Card::chipSelectLow()+0xa4>)
    3c68:	ldr	r4, [r2, #20]
    3c6a:	ldr	r6, [r5, #0]
    3c6c:	ldrb	r3, [r2, #11]
    3c6e:	ands	r4, r6
    3c70:	str	r4, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    3c72:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    3c74:	lsls	r3, r3, #28
    3c76:	bpl.n	3c84 <Sd2Card::chipSelectLow()+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3c78:	ldr	r4, [pc, #68]	; (3cc0 <Sd2Card::chipSelectLow()+0xa8>)
    3c7a:	ldr	r3, [r2, #24]
    3c7c:	ldr	r5, [r4, #0]
    3c7e:	ands	r3, r5
    3c80:	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    3c82:	str	r3, [r4, #0]
			}
			#endif
			__enable_irq();
    3c84:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    3c86:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    3c88:	ldr	r2, [r3, #12]
    3c8a:	cmp	r2, r1
    3c8c:	beq.n	3c9e <Sd2Card::chipSelectLow()+0x86>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    3c8e:	ldr	r4, [pc, #52]	; (3cc4 <Sd2Card::chipSelectLow()+0xac>)
    3c90:	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3c92:	ldr	r2, [pc, #52]	; (3cc8 <Sd2Card::chipSelectLow()+0xb0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    3c94:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    3c96:	orr.w	r4, r1, #1073741824	; 0x40000000
    3c9a:	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3c9c:	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3c9e:	ldrb	r0, [r0, #0]
    3ca0:	movs	r1, #0
}
    3ca2:	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3ca4:	b.w	8920 <digitalWrite>
    3ca8:	.word	0x2001aa18
    3cac:	.word	0x20014588
    3cb0:	.word	0x2001aa14
    3cb4:	.word	0xe000e180
    3cb8:	.word	0xe000e184
    3cbc:	.word	0xe000e188
    3cc0:	.word	0xe000e18c
    3cc4:	.word	0x003f4001
    3cc8:	.word	0x803f0000

00003ccc <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    3ccc:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cce:	ldr	r0, [pc, #72]	; (3d18 <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3cd0:	ldr	r2, [pc, #72]	; (3d1c <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    3cd2:	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    3cd4:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cd6:	mov	r6, r2
    3cd8:	str	r3, [sp, #0]
	return ret;
    3cda:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3cdc:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3ce0:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ce2:	ldr	r3, [r2, #0]
    3ce4:	orr.w	r3, r3, #1024	; 0x400
    3ce8:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3cea:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3cec:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cee:	ldr	r3, [r2, #44]	; 0x2c
    3cf0:	cmp	r3, #0
    3cf2:	bge.n	3cee <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    3cf4:	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    3cf6:	uxtb	r3, r3
    3cf8:	cmp	r3, #255	; 0xff
    3cfa:	beq.n	3d10 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cfc:	ldr	r3, [r0, #0]
    3cfe:	str	r3, [sp, #4]
	return ret;
    3d00:	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    3d02:	subs	r3, r3, r7
    3d04:	cmp	r3, r1
    3d06:	bcc.n	3ce2 <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    3d08:	movs	r0, #0
}
    3d0a:	add	sp, #8
    3d0c:	pop	{r4, r5, r6, r7}
    3d0e:	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    3d10:	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    3d12:	add	sp, #8
    3d14:	pop	{r4, r5, r6, r7}
    3d16:	bx	lr
    3d18:	.word	0x2001aa80
    3d1c:	.word	0x4002c000

00003d20 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    3d20:	push	{r3, r4, r5, r6, r7, lr}
    3d22:	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    3d24:	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    3d28:	mov	r6, r2
    3d2a:	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    3d2c:	bl	3ccc <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d30:	ldr	r3, [pc, #160]	; (3dd4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    3d32:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3d34:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d38:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3d3c:	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d40:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3d42:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d44:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3d46:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d48:	ldr	r3, [r2, #44]	; 0x2c
    3d4a:	cmp	r3, #0
    3d4c:	bge.n	3d48 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d4e:	ldr	r1, [pc, #132]	; (3dd4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d50:	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3d52:	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d56:	ldr	r2, [r1, #0]
    3d58:	lsr.w	r3, r6, r0
    3d5c:	orr.w	r2, r2, #1024	; 0x400
    3d60:	uxtb	r3, r3
    3d62:	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    3d64:	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    3d66:	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d68:	ldr	r3, [r1, #44]	; 0x2c
    3d6a:	cmp	r3, #0
    3d6c:	bge.n	3d68 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    3d6e:	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    3d70:	cmn.w	r0, #8
    3d74:	bne.n	3d56 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    3d76:	cbz	r5, 3dce <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    3d78:	cmp	r5, #8
    3d7a:	ite	eq
    3d7c:	moveq	r1, #135	; 0x87
    3d7e:	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d80:	ldr	r3, [pc, #80]	; (3dd4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    3d82:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3d84:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d88:	orr.w	r2, r2, #1024	; 0x400
    3d8c:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3d8e:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d90:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3d92:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d94:	ldr	r3, [r2, #44]	; 0x2c
    3d96:	cmp	r3, #0
    3d98:	bge.n	3d94 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d9a:	ldr	r2, [pc, #56]	; (3dd4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d9c:	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d9e:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3da0:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3da4:	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3da6:	ldr	r3, [r2, #0]
    3da8:	orr.w	r3, r3, #1024	; 0x400
    3dac:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3dae:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3db0:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3db2:	ldr	r3, [r2, #44]	; 0x2c
    3db4:	cmp	r3, #0
    3db6:	bge.n	3db2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    3db8:	ldr	r3, [r6, #56]	; 0x38
    3dba:	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    3dbc:	lsls	r3, r3, #24
    3dbe:	strb	r0, [r4, #1]
    3dc0:	bmi.n	3dc4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    3dc2:	pop	{r3, r4, r5, r6, r7, pc}
    3dc4:	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    3dc6:	cmp.w	r7, #256	; 0x100
    3dca:	bne.n	3da6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    3dcc:	pop	{r3, r4, r5, r6, r7, pc}
    3dce:	movs	r1, #149	; 0x95
    3dd0:	b.n	3d80 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    3dd2:	nop
    3dd4:	.word	0x4002c000

00003dd8 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    3dd8:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dda:	ldr	r1, [pc, #84]	; (3e30 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ddc:	ldr	r2, [pc, #84]	; (3e34 <Sd2Card::waitStartBlock()+0x5c>)
    3dde:	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    3de0:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3de2:	mov	r6, r2
    3de4:	str	r3, [sp, #0]
	return ret;
    3de6:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3de8:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3dec:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3dee:	ldr	r3, [r2, #0]
    3df0:	orr.w	r3, r3, #1024	; 0x400
    3df4:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3df6:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3df8:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3dfa:	ldr	r3, [r2, #44]	; 0x2c
    3dfc:	cmp	r3, #0
    3dfe:	bge.n	3dfa <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    3e00:	ldr	r3, [r6, #56]	; 0x38
    3e02:	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    3e04:	cmp	r3, #255	; 0xff
    3e06:	strb	r3, [r0, #1]
    3e08:	bne.n	3e20 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e0a:	ldr	r3, [r1, #0]
    3e0c:	str	r3, [sp, #4]
	return ret;
    3e0e:	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    3e10:	subs	r3, r3, r7
    3e12:	cmp.w	r3, #300	; 0x12c
    3e16:	bls.n	3dee <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    3e18:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    3e1a:	add	sp, #8
    3e1c:	pop	{r4, r5, r6, r7}
    3e1e:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    3e20:	sub.w	r0, r3, #254	; 0xfe
    3e24:	clz	r0, r0
    3e28:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    3e2a:	add	sp, #8
    3e2c:	pop	{r4, r5, r6, r7}
    3e2e:	bx	lr
    3e30:	.word	0x2001aa80
    3e34:	.word	0x4002c000

00003e38 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3e38:	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    3e3a:	ldrb	r3, [r0, #2]
    3e3c:	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3e3e:	mov	r6, r1
    3e40:	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    3e42:	it	ne
    3e44:	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3e46:	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    3e48:	bl	3c18 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    3e4c:	mov	r2, r6
    3e4e:	movs	r1, #17
    3e50:	mov	r0, r4
    3e52:	bl	3d20 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3e56:	cbnz	r0, 3e60 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    3e58:	mov	r0, r4
    3e5a:	bl	3dd8 <Sd2Card::waitStartBlock()>
    3e5e:	cbnz	r0, 3e6a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    3e60:	mov	r0, r4
    3e62:	bl	3bb0 <Sd2Card::chipSelectHigh()>
  return false;
    3e66:	movs	r0, #0
}
    3e68:	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3e6a:	ldr	r3, [pc, #128]	; (3eec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3e6c:	ldr	r1, [pc, #128]	; (3ef0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3e6e:	ldr	r2, [pc, #132]	; (3ef4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    3e70:	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3e72:	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3e74:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3e76:	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3e78:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3e7a:	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3e7c:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    3e7e:	add.w	r0, r5, #506	; 0x1fa
    3e82:	adds	r1, r5, #2
    3e84:	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3e88:	ldr	r3, [r2, #44]	; 0x2c
    3e8a:	tst.w	r3, #240	; 0xf0
    3e8e:	beq.n	3e88 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3e90:	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    3e94:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    3e96:	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    3e9a:	asrs	r3, r3, #8
    3e9c:	strb.w	r3, [r1, #-2]
    3ea0:	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    3ea2:	cmp	r7, r1
    3ea4:	bne.n	3e88 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    3ea6:	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    3eaa:	cmp	r0, r5
    3eac:	bcs.n	3eca <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3eae:	ldr	r2, [pc, #60]	; (3eec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3eb0:	mov	r6, r2
    3eb2:	ldr	r3, [r2, #44]	; 0x2c
    3eb4:	tst.w	r3, #240	; 0xf0
    3eb8:	beq.n	3eb2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    3eba:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    3ebc:	asrs	r1, r3, #8
    3ebe:	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    3ec2:	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    3ec4:	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    3ec8:	bcc.n	3eb2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3eca:	ldr	r3, [pc, #32]	; (3eec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3ecc:	ldr	r1, [pc, #36]	; (3ef4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3ece:	ldr	r2, [pc, #32]	; (3ef0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3ed0:	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3ed2:	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3ed4:	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3ed6:	ldr	r3, [r1, #44]	; 0x2c
    3ed8:	ldr	r2, [pc, #16]	; (3eec <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3eda:	tst.w	r3, #240	; 0xf0
    3ede:	beq.n	3ed6 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    3ee0:	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    3ee2:	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    3ee4:	bl	3bb0 <Sd2Card::chipSelectHigh()>
  return true;
    3ee8:	movs	r0, #1
    3eea:	pop	{r3, r4, r5, r6, r7, pc}
    3eec:	.word	0x4002c000
    3ef0:	.word	0x9000ffff
    3ef4:	.word	0x801f0400

00003ef8 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    3ef8:	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3efa:	ldr	r6, [pc, #196]	; (3fc0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3efc:	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    3efe:	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3f02:	orr.w	r3, r3, #1024	; 0x400
    3f06:	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    3f08:	mov	r5, r7
    3f0a:	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3f0c:	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3f0e:	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3f10:	mov	r3, r6
    3f12:	adds	r1, r2, #1
    3f14:	addw	r7, r2, #513	; 0x201
    3f18:	ldr	r2, [r4, #44]	; 0x2c
    3f1a:	cmp	r2, #0
    3f1c:	bge.n	3f18 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3f1e:	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    3f20:	ldrb.w	r6, [r1, #-1]
    3f24:	orr.w	r2, r2, #1024	; 0x400
    3f28:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    3f2a:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3f2c:	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3f2e:	ldr	r2, [r4, #44]	; 0x2c
    3f30:	cmp	r2, #0
    3f32:	bge.n	3f2e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3f34:	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    3f36:	ldrb.w	r6, [r1], #2
    3f3a:	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    3f3e:	cmp	r7, r1
    3f40:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    3f42:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3f44:	str	r6, [r3, #52]	; 0x34
    3f46:	bne.n	3f18 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3f48:	ldr	r1, [pc, #116]	; (3fc0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3f4a:	ldr	r2, [r1, #44]	; 0x2c
    3f4c:	ldr	r3, [pc, #112]	; (3fc0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3f4e:	cmp	r2, #0
    3f50:	bge.n	3f4a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f52:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3f54:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f58:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3f5c:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f5e:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f60:	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3f62:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    3f64:	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f66:	ldr	r3, [r1, #44]	; 0x2c
    3f68:	ldr	r2, [pc, #84]	; (3fc0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3f6a:	cmp	r3, #0
    3f6c:	bge.n	3f66 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f6e:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3f70:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f74:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3f78:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f7a:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f7c:	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3f7e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    3f80:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f82:	ldr	r3, [r1, #44]	; 0x2c
    3f84:	ldr	r2, [pc, #56]	; (3fc0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3f86:	cmp	r3, #0
    3f88:	bge.n	3f82 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f8a:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3f8c:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f90:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    3f94:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f96:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f98:	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3f9a:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3f9c:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f9e:	ldr	r3, [r1, #44]	; 0x2c
    3fa0:	ldr	r2, [pc, #28]	; (3fc0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3fa2:	cmp	r3, #0
    3fa4:	bge.n	3f9e <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    3fa6:	ldr	r3, [r2, #56]	; 0x38
    3fa8:	uxtb	r3, r3
    3faa:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    3fae:	strb	r3, [r0, #1]
    3fb0:	sub.w	r0, r2, #5
    3fb4:	clz	r0, r0
    3fb8:	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    3fba:	pop	{r4, r5, r6, r7}
    3fbc:	bx	lr
    3fbe:	nop
    3fc0:	.word	0x4002c000

00003fc4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    3fc4:	push	{r4, r5, r6, lr}
    3fc6:	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    3fc8:	cbz	r1, 3fe8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    3fca:	ldrb	r3, [r0, #2]
    3fcc:	cmp	r3, #3
    3fce:	mov	r5, r1
    3fd0:	it	ne
    3fd2:	lslne	r5, r1, #9
    3fd4:	mov	r6, r2
  chipSelectLow();
    3fd6:	bl	3c18 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    3fda:	mov	r2, r5
    3fdc:	movs	r1, #24
    3fde:	mov	r0, r4
    3fe0:	bl	3d20 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3fe4:	mov	r5, r0
    3fe6:	cbz	r0, 3ff2 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    3fe8:	mov	r0, r4
    3fea:	bl	3bb0 <Sd2Card::chipSelectHigh()>
  return false;
    3fee:	movs	r0, #0
}
    3ff0:	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    3ff2:	mov	r2, r6
    3ff4:	movs	r1, #254	; 0xfe
    3ff6:	mov	r0, r4
    3ff8:	bl	3ef8 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    3ffc:	cmp	r0, #0
    3ffe:	beq.n	3fe8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    4000:	mov.w	r1, #600	; 0x258
    4004:	mov	r0, r4
    4006:	bl	3ccc <Sd2Card::waitNotBusy(unsigned int)>
    400a:	cmp	r0, #0
    400c:	beq.n	3fe8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    400e:	mov	r2, r5
    4010:	movs	r1, #13
    4012:	mov	r0, r4
    4014:	bl	3d20 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    4018:	cmp	r0, #0
    401a:	bne.n	3fe8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    401c:	ldr	r3, [pc, #44]	; (404c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    401e:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    4020:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4024:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    4028:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    402a:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    402c:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    402e:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    4030:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    4032:	ldr	r3, [r1, #44]	; 0x2c
    4034:	ldr	r2, [pc, #20]	; (404c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    4036:	cmp	r3, #0
    4038:	bge.n	4032 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    403a:	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    403c:	tst.w	r3, #255	; 0xff
    4040:	bne.n	3fe8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    4042:	mov	r0, r4
    4044:	bl	3bb0 <Sd2Card::chipSelectHigh()>
  return true;
    4048:	movs	r0, #1
    404a:	pop	{r4, r5, r6, pc}
    404c:	.word	0x4002c000

00004050 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    4050:	ldr	r3, [pc, #4]	; (4058 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    4052:	ldr	r2, [pc, #8]	; (405c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    4054:	str	r2, [r3, #0]
    4056:	bx	lr
    4058:	.word	0x2001aa14
    405c:	.word	0x38011001

00004060 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    4060:	push	{r4, lr}
    4062:	mov	r4, r0
  bool rtn = sync();
    4064:	bl	505c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4068:	movs	r3, #0
    406a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    406e:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    4072:	pop	{r4, pc}

00004074 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    4074:	ldrb.w	r2, [r0, #49]	; 0x31
    4078:	cbz	r2, 407e <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    407a:	movs	r0, #0
    407c:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    407e:	push	{r3, r4, r5, lr}
    4080:	mov	r4, r0
    4082:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4084:	mov	r1, r2
    4086:	movs	r2, #56	; 0x38
    4088:	bl	c25c <memset>
  m_attributes = FILE_ATTR_ROOT;
    408c:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    408e:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4090:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4094:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4098:	str	r5, [r4, #32]
    409a:	pop	{r3, r4, r5, pc}

0000409c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    409c:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    409e:	ldrb	r0, [r1, #0]
    40a0:	cmp	r0, #32
    40a2:	bne.n	40ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    40a4:	ldrb.w	r0, [r1, #1]!
    40a8:	cmp	r0, #32
    40aa:	beq.n	40a4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    40ac:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    40ae:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    40b0:	cmp	r0, #0
    40b2:	beq.n	4158 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    40b4:	cmp	r0, #47	; 0x2f
    40b6:	beq.n	4110 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    40b8:	cmp	r0, #92	; 0x5c
    40ba:	beq.n	40fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    40bc:	sub.w	r4, r0, #34	; 0x22
    40c0:	uxtb	r4, r4
    40c2:	cmp	r4, #29
    40c4:	bls.n	4102 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    40c6:	ldr.w	lr, [pc, #148]	; 415c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    40ca:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    40cc:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    40ce:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    40d0:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    40d4:	mov	r7, r6
    40d6:	beq.n	40fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    40d8:	cmp	r5, #94	; 0x5e
    40da:	bhi.n	40fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    40dc:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    40e0:	sub.w	r5, r0, #34	; 0x22
    40e4:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    40e6:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    40e8:	cbz	r0, 414a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    40ea:	cmp	r0, #47	; 0x2f
    40ec:	beq.n	4112 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    40ee:	cmp	r0, #92	; 0x5c
    40f0:	lsr.w	r7, lr, r5
    40f4:	beq.n	40fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    40f6:	cmp	r5, #29
    40f8:	bhi.n	40ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    40fa:	lsls	r5, r7, #31
    40fc:	bpl.n	40ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    40fe:	movs	r0, #0
    4100:	pop	{r4, r5, r6, r7, pc}
    4102:	ldr	r5, [pc, #88]	; (415c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    4104:	lsr.w	r4, r5, r4
    4108:	lsls	r6, r4, #31
    410a:	bpl.n	40c6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    410c:	movs	r0, #0
    410e:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4110:	movs	r4, #0
    4112:	adds	r7, r1, r4
    4114:	mov	r6, r7
    4116:	mov	r5, r4
    4118:	movs	r0, #47	; 0x2f
    411a:	b.n	4122 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    411c:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    4120:	adds	r5, #1
    4122:	cmp	r0, #32
    4124:	beq.n	411c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    4126:	cmp	r0, #47	; 0x2f
    4128:	beq.n	411c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    412a:	add	r1, r5
    412c:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    412e:	cbz	r4, 4142 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    4130:	mov	r1, r7
    c = path[len - 1];
    4132:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    4136:	cmp	r3, #46	; 0x2e
    4138:	beq.n	413e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    413a:	cmp	r3, #32
    413c:	bne.n	4150 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    413e:	subs	r4, #1
    4140:	bne.n	4132 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    4142:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    4144:	str	r0, [r2, #0]
  return true;
    4146:	movs	r0, #1
    4148:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    414a:	str	r7, [r3, #0]
    414c:	adds	r7, r1, r4
    414e:	b.n	4130 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    4150:	cmp	r4, #255	; 0xff
    4152:	ble.n	4142 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    4154:	movs	r0, #0
    4156:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    4158:	str	r1, [r3, #0]
    415a:	b.n	4144 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    415c:	.word	0x35000101

00004160 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4160:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4164:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4168:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    416a:	sub	sp, #12
    416c:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    416e:	bpl.w	42ca <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4172:	lsls	r0, r3, #25
    4174:	mov	r5, r1
    4176:	mov	r6, r2
    4178:	bpl.w	42e0 <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    417c:	ldrd	r0, r1, [r4]
    4180:	ldrd	r2, r3, [r4, #16]
    4184:	adds.w	r8, r0, r6
    4188:	adc.w	r9, r1, #0
    418c:	cmp	r3, r9
    418e:	it	eq
    4190:	cmpeq	r2, r8
    4192:	bcc.w	42ec <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4196:	cmp	r6, #0
    4198:	beq.w	42f0 <ExFatFile::read(void*, unsigned int)+0x190>
    419c:	mov	r9, r4
    419e:	ldrd	r2, r3, [r9], #24
    41a2:	mov	r8, r6
    41a4:	b.n	4246 <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    41a6:	orrs	r3, r2
    41a8:	bne.n	4282 <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    41aa:	ldrb.w	r3, [r4, #49]	; 0x31
    41ae:	lsls	r2, r3, #25
    41b0:	ite	mi
    41b2:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    41b6:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    41b8:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    41ba:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    41be:	ldr.w	r2, [r0, #1060]	; 0x424
    41c2:	subs	r1, #2
    41c4:	lsrs	r7, r7, #9
    41c6:	lsl.w	lr, r1, ip
    41ca:	adds	r1, r7, r2
    41cc:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    41ce:	cmp.w	sl, #0
    41d2:	bne.n	425a <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    41d4:	cmp.w	r8, #512	; 0x200
    41d8:	bcc.n	425a <ExFatFile::read(void*, unsigned int)+0xfa>
    41da:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    41de:	cmp	r1, r2
    41e0:	beq.n	425a <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    41e2:	cmp.w	r8, #1024	; 0x400
    41e6:	bcc.n	4290 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    41e8:	movs	r3, #1
    41ea:	lsl.w	ip, r3, ip
    41ee:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    41f2:	mov.w	r3, r8, lsr #9
    41f6:	cmp	r7, r3
    41f8:	it	cs
    41fa:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    41fc:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    41fe:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    4202:	bhi.n	421c <ExFatFile::read(void*, unsigned int)+0xbc>
    4204:	adds	r3, r7, r1
    4206:	cmp	r3, r2
    4208:	bls.n	421c <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    420a:	add.w	r0, r0, #524	; 0x20c
    420e:	str	r1, [sp, #4]
    4210:	bl	4a00 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    4214:	cmp	r0, #0
    4216:	beq.n	42ca <ExFatFile::read(void*, unsigned int)+0x16a>
    4218:	ldr	r0, [r4, #32]
    421a:	ldr	r1, [sp, #4]
    421c:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    4220:	ldr	r2, [r0, #0]
    4222:	mov	r3, r7
    4224:	ldr	r7, [r2, #12]
    4226:	mov	r2, r5
    4228:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    422a:	cmp	r0, #0
    422c:	beq.n	42ca <ExFatFile::read(void*, unsigned int)+0x16a>
    422e:	mov	r0, fp
    4230:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    4232:	ldrd	r2, r3, [r4]
    4236:	adds	r2, r2, r0
    4238:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    423a:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    423e:	add	r5, fp
    m_curPosition += n;
    4240:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4244:	beq.n	42f0 <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4246:	ldr	r0, [r4, #32]
    4248:	ldr.w	r7, [r0, #1072]	; 0x430
    424c:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    424e:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    4252:	cmp	r7, #0
    4254:	beq.n	41a6 <ExFatFile::read(void*, unsigned int)+0x46>
    4256:	ldr	r1, [r4, #24]
    4258:	b.n	41ba <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    425a:	add.w	r0, r0, #524	; 0x20c
    425e:	movs	r2, #0
    4260:	bl	4940 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    4264:	cbz	r0, 42ca <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    4266:	rsb	fp, sl, #512	; 0x200
    426a:	cmp	fp, r8
    426c:	it	cs
    426e:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    4270:	add.w	r1, r0, sl
    4274:	mov	r2, fp
    4276:	mov	r0, r5
    4278:	bl	82a4 <memcpy>
    427c:	mov	r0, fp
    427e:	movs	r1, #0
    4280:	b.n	4232 <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    4282:	ldrb.w	r3, [r4, #51]	; 0x33
    4286:	lsls	r3, r3, #25
    4288:	bpl.n	42aa <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    428a:	ldr	r1, [r4, #24]
    428c:	adds	r1, #1
    428e:	b.n	41b8 <ExFatFile::read(void*, unsigned int)+0x58>
    4290:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    4294:	ldr	r3, [r0, #0]
    4296:	mov	r2, r5
    4298:	ldr	r3, [r3, #8]
    429a:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    429c:	cbz	r0, 42ca <ExFatFile::read(void*, unsigned int)+0x16a>
    429e:	mov.w	r0, #512	; 0x200
    42a2:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    42a4:	mov.w	fp, #512	; 0x200
    42a8:	b.n	4232 <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    42aa:	mov	r2, r9
    42ac:	ldr	r1, [r4, #24]
    42ae:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    42b2:	sxtb	r0, r0
        if (fg < 0) {
    42b4:	cmp	r0, #0
    42b6:	blt.n	42ca <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    42b8:	beq.n	42c0 <ExFatFile::read(void*, unsigned int)+0x160>
    42ba:	ldr	r0, [r4, #32]
    42bc:	ldr	r1, [r4, #24]
    42be:	b.n	41ba <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    42c0:	ldrb.w	r3, [r4, #49]	; 0x31
    42c4:	tst.w	r3, #80	; 0x50
    42c8:	bne.n	42f4 <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    42ca:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    42ce:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    42d2:	orr.w	r3, r3, #2
    42d6:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    42da:	add	sp, #12
    42dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    42e0:	ldrb.w	r3, [r4, #49]	; 0x31
    42e4:	lsls	r1, r3, #28
    42e6:	bmi.w	417c <ExFatFile::read(void*, unsigned int)+0x1c>
    42ea:	b.n	4196 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    42ec:	subs	r6, r2, r0
    42ee:	b.n	4196 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    42f0:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    42f4:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    42f8:	add	sp, #12
    42fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42fe:	nop

00004300 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    4300:	push	{r4, r5, r6, r7, lr}
    4302:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    4304:	movs	r2, #1
    4306:	add.w	r1, sp, #7
    430a:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    430c:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    4310:	ldr	r5, [r0, #24]
    4312:	bl	4160 <ExFatFile::read(void*, unsigned int)>
    4316:	cmp	r0, #1
    4318:	it	eq
    431a:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    431e:	str	r5, [r4, #24]
    4320:	it	ne
    4322:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    4326:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    432a:	add	sp, #12
    432c:	pop	{r4, r5, r6, r7, pc}
    432e:	nop

00004330 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4330:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4334:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4338:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    433a:	sub	sp, #12
    433c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    433e:	cmp.w	lr, #0
    4342:	beq.n	437c <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4344:	ldrd	r0, r1, [r0]
    4348:	cmp	r1, r3
    434a:	it	eq
    434c:	cmpeq	r0, r2
    434e:	mov	r6, r2
    4350:	mov	r7, r3
    4352:	beq.n	43cc <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    4354:	orrs.w	r3, r6, r7
    4358:	bne.n	436a <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    435a:	movs	r3, #0
    435c:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    435e:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    4360:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    4364:	add	sp, #12
    4366:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    436a:	tst.w	lr, #8
    436e:	beq.n	4386 <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    4370:	ldrd	r2, r3, [r4, #16]
    4374:	cmp	r3, r7
    4376:	it	eq
    4378:	cmpeq	r2, r6
    437a:	bcs.n	4386 <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    437c:	str	r5, [r4, #24]
  return false;
    437e:	movs	r0, #0
}
    4380:	add	sp, #12
    4382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4386:	ldr	r3, [r4, #32]
    4388:	str	r3, [sp, #4]
    438a:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    438e:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4392:	add.w	ip, ip, #9
    4396:	uxtb.w	ip, ip
    439a:	adds.w	r2, r6, #4294967295
    439e:	adc.w	r3, r7, #4294967295
    43a2:	rsb	r8, ip, #32
    43a6:	lsl.w	fp, r3, r8
    43aa:	lsr.w	r2, r2, ip
    43ae:	orr.w	r2, r2, fp
    43b2:	sub.w	fp, ip, #32
    43b6:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    43ba:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    43be:	orr.w	r2, r2, r3
  if (isContiguous()) {
    43c2:	beq.n	43d0 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    43c4:	ldr	r3, [r4, #28]
    43c6:	add	r2, r3
    43c8:	str	r2, [r4, #24]
    goto done;
    43ca:	b.n	435e <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    43cc:	movs	r0, #1
    43ce:	b.n	4380 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    43d0:	adds.w	r9, r0, #4294967295
    43d4:	adc.w	sl, r1, #4294967295
    43d8:	lsr.w	ip, r9, ip
    43dc:	lsl.w	r8, sl, r8
    43e0:	orr.w	ip, ip, r8
    43e4:	lsr.w	fp, sl, fp
    43e8:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    43ec:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    43ee:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    43f0:	bcs.n	4422 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    43f2:	tst.w	lr, #64	; 0x40
    43f6:	itet	ne
    43f8:	ldrne	r3, [sp, #4]
    43fa:	ldreq	r3, [r4, #28]
    43fc:	ldrne.w	r3, [r3, #1068]	; 0x42c
    4400:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4402:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4404:	add.w	r9, r4, #24
    4408:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    440a:	cmp.w	r8, #0
    440e:	beq.n	435e <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4410:	ldr	r1, [r4, #24]
    4412:	ldr	r0, [r4, #32]
    4414:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4418:	add.w	r8, r8, #4294967295
    441c:	cmp	r0, #0
    441e:	bne.n	4408 <ExFatFile::seekSet(unsigned long long)+0xd8>
    4420:	b.n	437c <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    4422:	orrs.w	r3, r0, r1
    4426:	beq.n	43f2 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    4428:	rsb	r2, ip, r2
    442c:	b.n	4402 <ExFatFile::seekSet(unsigned long long)+0xd2>
    442e:	nop

00004430 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4430:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4434:	mov	r6, r1
    4436:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4438:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    443c:	str	r2, [sp, #0]
    443e:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4440:	cbnz	r1, 444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4442:	mov	sl, r3
    4444:	ldrb.w	r3, [r6, #49]	; 0x31
    4448:	tst.w	r3, #80	; 0x50
    444c:	bne.n	445e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    444e:	movs	r0, #0
    4450:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    4454:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    4458:	add	sp, #76	; 0x4c
    445a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    445e:	ldr	r3, [sp, #112]	; 0x70
    4460:	and.w	r3, r3, #3
    4464:	cmp	r3, #1
    4466:	beq.n	4476 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    4468:	cmp	r3, #2
    446a:	beq.w	4680 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    446e:	cmp	r3, #0
    4470:	bne.n	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4472:	movs	r3, #1
    4474:	b.n	4478 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    4476:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    4478:	ldr	r2, [sp, #112]	; 0x70
    447a:	and.w	r2, r2, #8
    447e:	orrs	r3, r2
    4480:	str	r3, [sp, #4]
  if (name) {
    4482:	ldr	r3, [sp, #0]
    4484:	cmp	r3, #0
    4486:	beq.w	4684 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    448a:	mov	r0, r3
    448c:	movs	r2, #0
    448e:	mov	r1, sl
    4490:	bl	4de4 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    4494:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    4498:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    449a:	cbz	r3, 44b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    449c:	ldrd	r2, r3, [r6]
    44a0:	orrs	r3, r2
    44a2:	beq.n	44b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    44a4:	movs	r2, #0
    44a6:	movs	r3, #0
    44a8:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    44ac:	movs	r1, #0
    44ae:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    44b0:	ldr	r2, [pc, #736]	; (4794 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    44b2:	add.w	r3, sl, #14
    44b6:	smull	r1, r2, r2, r3
    44ba:	add	r2, r3
    44bc:	asrs	r3, r3, #31
    44be:	rsb	r3, r3, r2, asr #3
    44c2:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    44c4:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    44c8:	str	r3, [sp, #12]
    44ca:	adds	r3, #2
    44cc:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    44d0:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    44d2:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    44d4:	movs	r2, #32
    44d6:	add	r1, sp, #40	; 0x28
    44d8:	mov	r0, r6
    44da:	bl	4160 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    44de:	cmp	r0, #0
    44e0:	beq.n	455e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    44e2:	cmp	r0, #32
    44e4:	bne.n	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    44e6:	ldrb.w	r3, [sp, #40]	; 0x28
    44ea:	lsls	r2, r3, #24
    44ec:	bmi.n	45bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    44ee:	cmp	r4, #0
    44f0:	bne.n	45b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    44f2:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    44f4:	ldr	r1, [r6, #24]
    44f6:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    44f8:	subs	r2, #32
    44fa:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    44fc:	adds	r4, #1
    44fe:	uxtb	r4, r4
      }
      if (!buf[0]) {
    4500:	cbz	r3, 455e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    4502:	cmp	r3, #192	; 0xc0
    4504:	beq.w	462e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    4508:	cmp	r3, #193	; 0xc1
    450a:	beq.n	45d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    450c:	cmp	r3, #133	; 0x85
    450e:	bne.n	44d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    4510:	movs	r2, #56	; 0x38
    4512:	movs	r1, #0
    4514:	mov	r0, r5
    4516:	bl	c25c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    451a:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    451e:	ldrb.w	r2, [sp, #41]	; 0x29
    4522:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    4526:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4528:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    452c:	it	pl
    452e:	orrpl.w	r2, r2, #8
    4532:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4536:	ldr	r3, [r6, #0]
    4538:	ldr	r1, [r6, #32]
    453a:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    453c:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    453e:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    4540:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4542:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    4544:	ldrb.w	r3, [r6, #51]	; 0x33
    4548:	ubfx	r3, r3, #6, #1
    454c:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4550:	movs	r2, #32
    4552:	add	r1, sp, #40	; 0x28
    4554:	mov	r0, r6
    4556:	bl	4160 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    455a:	cmp	r0, #0
    455c:	bne.n	44e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    455e:	ldr	r3, [sp, #112]	; 0x70
    4560:	lsls	r1, r3, #22
    4562:	bpl.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4566:	ldr	r3, [sp, #4]
    4568:	lsls	r2, r3, #30
    456a:	bpl.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    456e:	ldr	r3, [sp, #0]
    4570:	cmp	r3, #0
    4572:	beq.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4576:	cmp	r4, fp
    4578:	bcc.n	4594 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    457a:	b.n	468a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    457c:	cmp	r0, #32
    457e:	bne.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    4582:	cbnz	r4, 458e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    4584:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    4586:	ldr	r1, [r6, #24]
    4588:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    458a:	subs	r2, #32
    458c:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    458e:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4590:	cmp	fp, r4
    4592:	bls.n	468a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    4594:	movs	r2, #32
    4596:	add	r1, sp, #40	; 0x28
    4598:	mov	r0, r6
    459a:	bl	4160 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    459e:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    45a0:	cmp	r0, #0
    45a2:	bne.n	457c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    45a4:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    45a6:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    45a8:	bl	50bc <ExFatFile::addDirCluster()>
    45ac:	cmp	r0, #0
    45ae:	beq.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    45b2:	str	r7, [r6, #24]
      continue;
    45b4:	b.n	4590 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    45b6:	cmp	r4, fp
    45b8:	bcs.n	4500 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    45ba:	b.n	44fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    45bc:	cmp.w	r9, #0
    45c0:	bne.n	4502 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    45c2:	cmp	r4, fp
    45c4:	it	cc
    45c6:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    45c8:	cmp	r3, #133	; 0x85
    45ca:	bne.n	44d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    45cc:	mov.w	r9, #1
    45d0:	b.n	4510 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    45d2:	rsb	r8, r7, sl
    45d6:	uxtb.w	r8, r8
    45da:	cmp.w	r8, #15
    45de:	it	cs
    45e0:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    45e4:	mov	r3, r8
    45e6:	mov	r2, r7
    45e8:	ldr	r1, [sp, #0]
    45ea:	add	r0, sp, #40	; 0x28
    45ec:	bl	4e20 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    45f0:	cmp	r0, #0
    45f2:	beq.n	466e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    45f4:	add	r7, r8
    45f6:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    45f8:	cmp	sl, r7
    45fa:	bne.w	44d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    45fe:	ldr	r3, [sp, #112]	; 0x70
    4600:	lsls	r3, r3, #20
    4602:	bmi.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4606:	ldr	r3, [sp, #112]	; 0x70
    4608:	tst.w	r3, #17408	; 0x4400
    460c:	bne.w	4750 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    4610:	ldrb.w	r3, [r5, #51]	; 0x33
    4614:	lsls	r7, r3, #30
    4616:	bmi.w	4750 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    461a:	ldr	r3, [sp, #112]	; 0x70
    461c:	lsls	r3, r3, #21
    461e:	bmi.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4622:	ldr	r3, [sp, #112]	; 0x70
    4624:	lsls	r0, r3, #17
    4626:	bmi.w	4798 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    462a:	movs	r0, #1
    462c:	b.n	4458 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    462e:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4632:	ldr	r2, [sp, #4]
    4634:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4638:	lsls	r1, r3, #30
    463a:	bpl.n	4644 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    463c:	orr.w	r3, r2, #64	; 0x40
    4640:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4644:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4648:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    464c:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    4650:	ldr	r3, [sp, #60]	; 0x3c
    4652:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    4654:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4656:	strd	r0, r1, [r5, #8]
        if (!name) {
    465a:	cmp	r3, #0
    465c:	beq.n	45fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    465e:	ldrb.w	r3, [sp, #43]	; 0x2b
    4662:	cmp	r3, sl
    4664:	beq.n	4672 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    4666:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    466a:	mov	r7, r9
    466c:	b.n	44d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    466e:	mov	r9, r0
    4670:	b.n	44d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4672:	ldrh.w	r3, [sp, #44]	; 0x2c
    4676:	ldr	r2, [sp, #8]
    4678:	cmp	r3, r2
    467a:	bne.n	4666 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    467c:	movs	r7, #0
    467e:	b.n	44d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4680:	movs	r3, #3
    4682:	b.n	4478 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    4684:	ldr	r3, [sp, #0]
    4686:	str	r3, [sp, #8]
    4688:	b.n	44b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    468a:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    468e:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4690:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    4694:	movs	r1, #0
    4696:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4698:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    469c:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    46a0:	bl	c25c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    46a4:	ldr	r4, [sp, #12]
    46a6:	ldr	r3, [r6, #32]
    46a8:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    46ac:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    46b0:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    46b4:	movs	r4, #8
    46b6:	strb.w	r4, [r5, #49]	; 0x31
    46ba:	add.w	r7, sl, #30
  m_dirPos = freePos;
    46be:	add.w	r4, r5, #36	; 0x24
    46c2:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    46c6:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    46c8:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    46cc:	stmia.w	r4, {r0, r1, r2}
    46d0:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    46d2:	movs	r6, #0
    46d4:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    46d6:	movs	r2, #1
    46d8:	mov	r1, r8
    46da:	bl	4c88 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    46de:	mov	r4, r0
    46e0:	cmp	r0, #0
    46e2:	beq.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    46e6:	ldrsb.w	r3, [r0]
    46ea:	cmp	r3, #0
    46ec:	blt.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    46f0:	movs	r2, #32
    46f2:	movs	r1, #0
    46f4:	bl	c25c <memset>
    if (i == 0) {
    46f8:	cmp	r6, #0
    46fa:	beq.n	47ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    46fc:	cmp	r6, #1
    46fe:	beq.n	47aa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    4700:	rsb	r3, r6, r6, lsl #4
    4704:	cmp	r7, #15
    4706:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    470a:	mov.w	r2, #193	; 0xc1
    470e:	mov	r1, r7
    4710:	it	cs
    4712:	movcs	r1, #15
    4714:	uxtb	r3, r3
    4716:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4718:	cbz	r1, 4730 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    471a:	adds	r4, #2
    471c:	sxth	r1, r1
    471e:	add.w	r1, r4, r1, lsl #1
    4722:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    4724:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4728:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    472c:	cmp	r1, r4
    472e:	bne.n	4724 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4730:	adds	r6, #1
    4732:	uxtb	r6, r6
    4734:	cmp	fp, r6
    4736:	bls.n	478c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4738:	movs	r2, #32
    473a:	mov	r1, r8
    473c:	ldr	r0, [r5, #32]
    473e:	bl	4cbc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4742:	cmp	r0, #1
    4744:	bne.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4748:	subs	r7, #15
    474a:	uxtb	r7, r7
    474c:	ldr	r0, [r5, #32]
    474e:	b.n	46d6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    4750:	ldrb.w	r3, [r5, #49]	; 0x31
    4754:	tst.w	r3, #17
    4758:	bne.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    475c:	ldr	r3, [sp, #112]	; 0x70
    475e:	lsls	r6, r3, #21
    4760:	bpl.w	4622 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    4764:	ldrb.w	r3, [r5, #51]	; 0x33
    4768:	lsls	r4, r3, #30
    476a:	bpl.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    476e:	movs	r2, #0
    4770:	movs	r3, #0
    4772:	mov	r0, r5
    4774:	bl	4330 <ExFatFile::seekSet(unsigned long long)>
    4778:	cmp	r0, #0
    477a:	beq.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    477e:	mov	r0, r5
    4780:	bl	5234 <ExFatFile::truncate()>
    4784:	cmp	r0, #0
    4786:	beq.w	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    478a:	b.n	462a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    478c:	mov	r0, r5
    478e:	bl	505c <ExFatFile::sync()>
    4792:	b.n	4458 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    4794:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4798:	ldrd	r2, r3, [r5, #16]
    479c:	mov	r0, r5
    479e:	bl	4330 <ExFatFile::seekSet(unsigned long long)>
    47a2:	cmp	r0, #0
    47a4:	bne.w	462a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    47a8:	b.n	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    47aa:	movs	r3, #192	; 0xc0
    47ac:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    47ae:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    47b0:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    47b2:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    47b6:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    47b8:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    47bc:	ldrb.w	r3, [sp, #12]
    47c0:	strb	r3, [r4, #3]
    47c2:	ldrh.w	r3, [sp, #8]
    47c6:	strh	r3, [r4, #4]
    47c8:	b.n	4730 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    47ca:	movs	r3, #133	; 0x85
    47cc:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    47ce:	ldr	r3, [pc, #48]	; (4800 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    47d0:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    47d4:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    47d8:	ldr	r3, [r3, #0]
    47da:	cmp	r3, #0
    47dc:	beq.n	4730 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    47de:	add.w	r2, sp, #23
    47e2:	add.w	r1, sp, #26
    47e6:	add	r0, sp, #24
    47e8:	blx	r3
        dirFile->createTimeMs = ms10;
    47ea:	ldrb.w	r1, [sp, #23]
    47ee:	ldrh.w	r2, [sp, #26]
    47f2:	ldrh.w	r3, [sp, #24]
    47f6:	strb	r1, [r4, #20]
    47f8:	strh	r2, [r4, #8]
    47fa:	strh	r3, [r4, #10]
    47fc:	b.n	4730 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    47fe:	nop
    4800:	.word	0x2001aa1c

00004804 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4804:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4808:	mov	r6, r0
    480a:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    480c:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4810:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    4812:	movs	r0, #0
    4814:	strb.w	r0, [sp, #73]	; 0x49
    4818:	strb.w	r0, [sp, #74]	; 0x4a
    481c:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4820:	cbnz	r4, 4830 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    4822:	mov	r9, r3
    4824:	ldrb.w	r3, [r1, #49]	; 0x31
    4828:	tst.w	r3, #80	; 0x50
    482c:	mov	r5, r1
    482e:	bne.n	4838 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    4830:	movs	r0, #0
}
    4832:	add	sp, #84	; 0x54
    4834:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4838:	ldrb	r3, [r2, #0]
    483a:	cmp	r3, #47	; 0x2f
    483c:	mov	r4, r2
    483e:	beq.n	48a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4840:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4844:	mov	r1, r4
    4846:	add	r3, sp, #12
    4848:	add	r2, sp, #16
    484a:	mov	r0, r6
    484c:	bl	409c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4850:	cmp	r0, #0
    4852:	beq.n	4830 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    4854:	ldr	r3, [sp, #12]
    4856:	ldrb	r3, [r3, #0]
    4858:	cmp	r3, #0
    485a:	beq.n	48d0 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    485c:	ldrb.w	r3, [sp, #16]
    4860:	ldr	r2, [sp, #20]
    4862:	str.w	r8, [sp]
    4866:	mov	r1, r5
    4868:	mov	r0, r6
    486a:	bl	4430 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    486e:	cmp	r0, #0
    4870:	beq.n	4830 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    4872:	mov	r4, r6
    4874:	add	r7, sp, #24
    4876:	add.w	lr, r6, #48	; 0x30
    487a:	ldr	r0, [r4, #0]
    487c:	ldr	r1, [r4, #4]
    487e:	ldr	r2, [r4, #8]
    4880:	ldr	r3, [r4, #12]
    4882:	mov	r5, r7
    4884:	stmia	r5!, {r0, r1, r2, r3}
    4886:	adds	r4, #16
    4888:	cmp	r4, lr
    488a:	mov	r7, r5
    488c:	bne.n	487a <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    488e:	ldr	r0, [r4, #0]
    4890:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    4892:	mov	r0, r6
    4894:	bl	505c <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    4898:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    489a:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    489e:	strb.w	r8, [r6, #51]	; 0x33
    48a2:	ldr	r4, [sp, #12]
    48a4:	b.n	4844 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    48a6:	adds	r4, #1
    48a8:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    48aa:	ldrb	r1, [r4, #0]
    48ac:	cmp	r1, #47	; 0x2f
    48ae:	beq.n	48a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    48b0:	cbz	r1, 48e8 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    48b2:	movs	r2, #56	; 0x38
    48b4:	add	r0, sp, #24
    48b6:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    48b8:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    48ba:	bl	c25c <memset>
  m_attributes = FILE_ATTR_ROOT;
    48be:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    48c0:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    48c2:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    48c4:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    48c6:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    48ca:	strb.w	r3, [sp, #75]	; 0x4b
    48ce:	b.n	4840 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    48d0:	ldrb.w	r3, [sp, #16]
    48d4:	ldr	r2, [sp, #20]
    48d6:	str.w	r9, [sp]
    48da:	mov	r1, r5
    48dc:	mov	r0, r6
    48de:	bl	4430 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    48e2:	add	sp, #84	; 0x54
    48e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    48e8:	movs	r2, #56	; 0x38
    48ea:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    48ec:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    48ee:	bl	c25c <memset>
  m_attributes = FILE_ATTR_ROOT;
    48f2:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    48f4:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    48f6:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    48f8:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    48fc:	strb.w	r0, [r6, #51]	; 0x33
    4900:	b.n	4832 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    4902:	nop

00004904 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4904:	cbz	r1, 490e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4906:	add.w	r1, r1, #1088	; 0x440
    490a:	b.w	4804 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    490e:	mov	r0, r1
    4910:	bx	lr
    4912:	nop

00004914 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4914:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4916:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    491a:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    491c:	ldr	r0, [r0, #4]
    491e:	ldr	r1, [r4, #8]
    4920:	ldr	r3, [r0, #0]
    4922:	ldr	r3, [r3, #24]
    4924:	blx	r3
    4926:	cbz	r0, 4930 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4928:	ldrb	r3, [r4, #0]
    492a:	bic.w	r3, r3, #1
    492e:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    4930:	pop	{r4, pc}
    4932:	nop

00004934 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4934:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    4936:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    493a:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    493c:	str	r3, [r0, #8]
    493e:	bx	lr

00004940 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4940:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    4942:	ldr	r5, [r0, #4]
    4944:	cbz	r5, 4986 <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4946:	ldr	r3, [r0, #8]
    4948:	cmp	r3, r1
    494a:	mov	r4, r0
    494c:	mov	r7, r2
    494e:	mov	r6, r1
    4950:	beq.n	4970 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4952:	ldrb	r3, [r0, #0]
    4954:	lsls	r2, r3, #31
    4956:	bmi.n	497e <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4958:	lsls	r3, r7, #30
    495a:	bpl.n	498a <FsCache::get(unsigned long, unsigned char)+0x4a>
    495c:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4960:	and.w	r2, r7, #1
    4964:	movs	r3, #0
    4966:	orrs	r3, r2
    4968:	strb	r3, [r4, #0]
    496a:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    496c:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    496e:	pop	{r3, r4, r5, r6, r7, pc}
    4970:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4974:	and.w	r2, r7, #1
    4978:	orrs	r3, r2
    497a:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    497c:	pop	{r3, r4, r5, r6, r7, pc}
    497e:	bl	4914 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    4982:	cmp	r0, #0
    4984:	bne.n	4958 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4986:	movs	r0, #0
    4988:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    498a:	ldr	r0, [r4, #4]
    498c:	ldr	r3, [r0, #0]
    498e:	add.w	r5, r4, #12
    4992:	ldr	r3, [r3, #8]
    4994:	mov	r2, r5
    4996:	mov	r1, r6
    4998:	blx	r3
    499a:	cmp	r0, #0
    499c:	bne.n	4960 <FsCache::get(unsigned long, unsigned char)+0x20>
    499e:	b.n	4986 <FsCache::get(unsigned long, unsigned char)+0x46>

000049a0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    49a0:	push	{r3, r4, r5, lr}
    49a2:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    49a4:	ldr.w	r1, [r0, #1052]	; 0x41c
    49a8:	mov	r5, r2
    49aa:	add.w	r1, r1, r4, lsr #7
    49ae:	add.w	r0, r0, #524	; 0x20c
    49b2:	movs	r2, #0
    49b4:	bl	4940 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    49b8:	cbz	r0, 49cc <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    49ba:	lsls	r4, r4, #2
    49bc:	ubfx	r4, r4, #0, #9
    49c0:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    49c2:	adds	r2, r3, #1
    49c4:	beq.n	49d0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    49c6:	str	r3, [r5, #0]
  return 1;
    49c8:	movs	r0, #1
    49ca:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    49cc:	movs	r0, #255	; 0xff
    49ce:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    49d0:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    49d2:	pop	{r3, r4, r5, pc}

000049d4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    49d4:	push	{r3, r4, r5, lr}
    49d6:	mov	r4, r1
    49d8:	ldr.w	r1, [r0, #1052]	; 0x41c
    49dc:	mov	r5, r2
    49de:	add.w	r1, r1, r4, lsr #7
    49e2:	add.w	r0, r0, #524	; 0x20c
    49e6:	movs	r2, #1
    49e8:	bl	4940 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    49ec:	mov	r3, r0
    49ee:	cbz	r0, 49fc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    49f0:	lsls	r4, r4, #2
    49f2:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    49f6:	movs	r0, #1
    49f8:	str	r5, [r3, r4]
    49fa:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    49fc:	pop	{r3, r4, r5, pc}
    49fe:	nop

00004a00 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4a00:	ldrb	r3, [r0, #0]
    4a02:	lsls	r3, r3, #31
    4a04:	bmi.n	4a0a <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    4a06:	movs	r0, #1
    4a08:	bx	lr
    4a0a:	b.w	4914 <FsCache::sync() [clone .part.2]>
    4a0e:	nop

00004a10 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4a10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a14:	mov	r8, r0
    4a16:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4a18:	mov	fp, r1
    4a1a:	cmp	r1, #0
    4a1c:	beq.n	4aa8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    4a1e:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4a20:	ldr.w	r3, [r8, #1064]	; 0x428
    4a24:	cmp	r7, r3
    4a26:	bcs.n	4aa0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4a28:	and.w	r5, r7, #7
    4a2c:	movs	r3, #1
    4a2e:	lsl.w	r5, r3, r5
    4a32:	uxtb	r5, r5
    4a34:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4a38:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4a3a:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4a3c:	ldr.w	r1, [r8, #1060]	; 0x424
    4a40:	movs	r2, #0
    4a42:	add.w	r1, r1, r4, lsr #12
    4a46:	mov	r0, r8
    4a48:	bl	4940 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4a4c:	cbz	r0, 4a80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    4a4e:	ldrb.w	r1, [r0, sl]
    4a52:	b.n	4a6a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4a54:	cmp	r2, r9
    4a56:	beq.n	4aae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4a58:	cmp	r7, r4
    4a5a:	beq.n	4a7e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4a5c:	ldr.w	r2, [r8, #1064]	; 0x428
    4a60:	cmp	r4, r2
    4a62:	bcs.n	4a94 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4a64:	ands.w	r5, r3, #255	; 0xff
    4a68:	beq.n	4a84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4a6a:	adds	r4, #1
        if (!(mask & cache[i])) {
    4a6c:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4a6e:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4a72:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4a76:	beq.n	4a54 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4a78:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4a7a:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4a7c:	bne.n	4a5c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    4a7e:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4a80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a84:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4a88:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4a8c:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4a90:	bne.n	4a4e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    4a92:	b.n	4a98 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4a94:	movs	r6, #0
    4a96:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4a98:	mov.w	sl, #0
    4a9c:	movs	r5, #1
    4a9e:	b.n	4a3c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    4aa0:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    4aa2:	mov	sl, r7
    4aa4:	movs	r5, #1
    4aa6:	b.n	4a38 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4aa8:	ldr.w	r7, [r0, #1048]	; 0x418
    4aac:	b.n	4a20 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    4aae:	cmp.w	fp, #0
    4ab2:	bne.n	4abe <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    4ab4:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4ab8:	it	eq
    4aba:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    4abe:	adds	r0, r6, #2
    4ac0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004ac4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4ac4:	push	{r3, r4, r5, r6, r7, lr}
    4ac6:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4ac8:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    4aca:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4ace:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    4ad2:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4ad6:	str	r1, [r0, #4]
    4ad8:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4adc:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4ade:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4ae0:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4ae4:	strb	r3, [r4, #0]
    4ae6:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    4aea:	str	r6, [r4, #8]
    4aec:	str.w	r6, [r4, #532]	; 0x214
    4af0:	mov	r2, r3
    4af2:	mov	r1, r3
    4af4:	bl	4940 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4af8:	cmp	r5, #4
    4afa:	bhi.n	4b16 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4afc:	mov	r6, r0
    4afe:	cbz	r0, 4b16 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4b00:	cbnz	r5, 4b1a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4b02:	movs	r2, #5
    4b04:	ldr	r1, [pc, #152]	; (4ba0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    4b06:	adds	r0, r6, #3
    4b08:	bl	ca1c <strncmp>
    4b0c:	cbnz	r0, 4b16 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4b0e:	ldrb.w	r3, [r6, #108]	; 0x6c
    4b12:	cmp	r3, #9
    4b14:	beq.n	4b4a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4b16:	movs	r0, #0
    4b18:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4b1a:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4b1c:	add.w	r3, r0, r3, lsl #4
    4b20:	ldrb.w	r2, [r3, #446]	; 0x1be
    4b24:	ands.w	r2, r2, #127	; 0x7f
    4b28:	bne.n	4b16 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4b2a:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4b2e:	cmp	r3, #0
    4b30:	beq.n	4b16 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4b32:	add.w	r5, r0, r5, lsl #4
    4b36:	mov	r0, r7
    4b38:	ldr.w	r5, [r5, #438]	; 0x1b6
    4b3c:	mov	r1, r5
    4b3e:	bl	4940 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4b42:	mov	r6, r0
    4b44:	cmp	r0, #0
    4b46:	bne.n	4b02 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    4b48:	b.n	4b16 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4b4a:	ldr	r3, [r6, #80]	; 0x50
    4b4c:	add	r3, r5
    4b4e:	str.w	r3, [r4, #1052]	; 0x41c
    4b52:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4b54:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4b58:	ldr	r3, [r6, #88]	; 0x58
    4b5a:	add	r5, r3
    4b5c:	str.w	r5, [r4, #1060]	; 0x424
    4b60:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4b62:	str.w	r3, [r4, #1064]	; 0x428
    4b66:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4b68:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4b6c:	ldrb.w	r3, [r6, #109]	; 0x6d
    4b70:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4b74:	movs	r5, #1
    4b76:	adds	r3, #9
    4b78:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4b7c:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4b7e:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    4b82:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4b84:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    4b88:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4b8c:	mov	r0, r4
    4b8e:	mov	r2, r5
    4b90:	bl	4a10 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4b94:	movs	r3, #64	; 0x40
    4b96:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    4b9a:	mov	r0, r5

 fail:
  return false;
}
    4b9c:	pop	{r3, r4, r5, r6, r7, pc}
    4b9e:	nop
    4ba0:	.word	0x0001358c

00004ba4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4ba4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4ba8:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4baa:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4bac:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4bb0:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4bb2:	adds	r2, r1, r2
    4bb4:	cmp	r2, r0
    4bb6:	bhi.n	4c2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4bb8:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4bba:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4bbe:	cmp.w	sl, #0
    4bc2:	bne.n	4c30 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4bc4:	cmp	r1, r3
      m_bitmapStart = start;
    4bc6:	it	cc
    4bc8:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4bcc:	and.w	r4, r1, #7
    4bd0:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4bd2:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4bd6:	lsl.w	r4, r2, r4
    4bda:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4bdc:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    4be0:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4be4:	movs	r2, #1
    4be6:	mov	r1, r9
    4be8:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4bea:	add	r9, r2
    4bec:	bl	4940 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4bf0:	cbz	r0, 4c2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4bf2:	adds	r7, r0, r6
    4bf4:	add.w	r0, r0, #512	; 0x200
    4bf8:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4bfc:	tst	r2, r4
    4bfe:	ite	ne
    4c00:	movne	r6, #1
    4c02:	moveq	r6, #0
    4c04:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4c06:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4c0a:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4c0e:	beq.n	4c2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4c10:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4c12:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4c16:	beq.n	4c44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4c18:	ands.w	r4, r4, #255	; 0xff
    4c1c:	bne.n	4bfc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4c1e:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4c20:	mov	r6, r4
    4c22:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4c26:	bne.n	4bf8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    4c28:	b.n	4be4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    4c2a:	movs	r0, #0
    4c2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4c30:	cmp	r1, r3
    4c32:	bhi.n	4bcc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4c34:	cmp	r2, r3
    4c36:	bls.n	4bcc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4c38:	cmp	r2, r0
    4c3a:	it	cs
    4c3c:	movcs	r2, #0
    4c3e:	str.w	r2, [r8, #1048]	; 0x418
    4c42:	b.n	4bcc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4c44:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4c46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c4a:	nop

00004c4c <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4c4c:	push	{r4, r5, r6, lr}
    4c4e:	sub	sp, #8
    4c50:	add	r6, sp, #8
    4c52:	mov	r5, r0
    4c54:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    4c58:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c5a:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4c5e:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c60:	adds	r3, #1
    4c62:	cmp	r1, r3
    4c64:	bls.n	4c6c <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    4c66:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    4c68:	add	sp, #8
    4c6a:	pop	{r4, r5, r6, pc}
    4c6c:	mov	r2, r6
    4c6e:	mov	r0, r5
    4c70:	bl	49a0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4c74:	sxtb	r0, r0
    if (status < 0) return 0;
    4c76:	cmp	r0, #0
    4c78:	blt.n	4c66 <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    4c7a:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    4c7e:	bne.n	4c5a <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4c80:	mov	r0, r4
  } while (status);
  return n;
}
    4c82:	add	sp, #8
    4c84:	pop	{r4, r5, r6, pc}
    4c86:	nop

00004c88 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4c88:	push	{r3, r4, r5, r6, r7, lr}
    4c8a:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4c8c:	ldmia.w	r6, {r3, r5}
    4c90:	ldr.w	r1, [r0, #1072]	; 0x430
    4c94:	ldr.w	r4, [r0, #1060]	; 0x424
    4c98:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4c9c:	ands	r1, r5
    4c9e:	subs	r3, #2
    4ca0:	add.w	r1, r4, r1, lsr #9
    4ca4:	lsls	r3, r7
    4ca6:	add	r1, r3
    4ca8:	add.w	r0, r0, #524	; 0x20c
    4cac:	bl	4940 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4cb0:	cbz	r0, 4cba <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    4cb2:	ldr	r3, [r6, #4]
    4cb4:	ubfx	r3, r3, #0, #9
    4cb8:	add	r0, r3
}
    4cba:	pop	{r3, r4, r5, r6, r7, pc}

00004cbc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4cbc:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4cbe:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4cc0:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4cc2:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4cc4:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    4cc8:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4cca:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4cce:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4cd0:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4cd2:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4cd4:	uxtb	r3, r3
    4cd6:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4cda:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4cdc:	cbz	r4, 4cee <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4cde:	ldrb	r3, [r5, #8]
    4ce0:	cbz	r3, 4cf2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4ce2:	ldr	r3, [r5, #0]
    4ce4:	adds	r3, #1
    4ce6:	str	r3, [r5, #0]
    4ce8:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4cea:	cmp	r4, #0
    4cec:	bne.n	4cde <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4cee:	movs	r0, #1
    4cf0:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4cf2:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4cf6:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4cf8:	adds	r3, #1
    4cfa:	cmp	r1, r3
    4cfc:	bls.n	4d04 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4cfe:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    4d02:	pop	{r4, r5, r6, pc}
    4d04:	mov	r2, r5
    4d06:	mov	r0, r6
    4d08:	bl	49a0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4d0c:	sxtb	r0, r0
      if (status != 1) {
    4d0e:	cmp	r0, #1
    4d10:	beq.n	4ce8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4d12:	pop	{r4, r5, r6, pc}

00004d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4d14:	ldr.w	r3, [r0, #1064]	; 0x428
    4d18:	adds	r3, #1
    4d1a:	cmp	r3, r1
    4d1c:	bcs.n	4d22 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    4d1e:	movs	r0, #255	; 0xff
    4d20:	bx	lr
    4d22:	b.w	49a0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    4d26:	nop

00004d28 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4d28:	cmp	r1, #1
    4d2a:	bls.n	4d48 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    4d2c:	ldr.w	r3, [r0, #1064]	; 0x428
    4d30:	adds	r3, #1
    4d32:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4d34:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4d36:	bls.n	4d40 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    4d38:	movs	r0, #0
    4d3a:	ldr.w	r4, [sp], #4
    4d3e:	bx	lr
    4d40:	ldr.w	r4, [sp], #4
    4d44:	b.w	49d4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    4d48:	movs	r0, #0
    4d4a:	bx	lr

00004d4c <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4d4c:	push	{r4, r5, r6, r7, lr}
    4d4e:	mov	r4, r1
    4d50:	sub	sp, #12
    4d52:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    4d54:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4d56:	ldr.w	r3, [r5, #1064]	; 0x428
    4d5a:	adds	r3, #1
    4d5c:	cmp	r4, r3
    4d5e:	bls.n	4d66 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    4d60:	movs	r0, #0
}
    4d62:	add	sp, #12
    4d64:	pop	{r4, r5, r6, r7, pc}
    4d66:	add	r2, sp, #4
    4d68:	mov	r1, r4
    4d6a:	mov	r0, r5
    4d6c:	bl	49a0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4d70:	sxtb	r7, r0
    if (status < 0) {
    4d72:	cmp	r7, #0
    4d74:	blt.n	4d60 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4d76:	cmp	r4, #1
    4d78:	bls.n	4d60 <ExFatPartition::freeChain(unsigned long)+0x14>
    4d7a:	ldr.w	r3, [r5, #1064]	; 0x428
    4d7e:	adds	r3, #1
    4d80:	cmp	r4, r3
    4d82:	bhi.n	4d60 <ExFatPartition::freeChain(unsigned long)+0x14>
    4d84:	movs	r2, #0
    4d86:	mov	r1, r4
    4d88:	mov	r0, r5
    4d8a:	bl	49d4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4d8e:	cmp	r0, #0
    4d90:	beq.n	4d60 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4d92:	ldr	r3, [sp, #4]
    4d94:	adds	r4, #1
    4d96:	cmp	r4, r3
    4d98:	bne.n	4db2 <ExFatPartition::freeChain(unsigned long)+0x66>
    4d9a:	cmp	r7, #0
    4d9c:	bne.n	4d56 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4d9e:	mov	r3, r7
    4da0:	subs	r2, r4, r6
    4da2:	mov	r1, r6
    4da4:	mov	r0, r5
    4da6:	bl	4ba4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4daa:	cmp	r0, #0
    4dac:	beq.n	4d60 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    4dae:	add	sp, #12
    4db0:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4db2:	subs	r2, r4, r6
    4db4:	mov	r1, r6
    4db6:	movs	r3, #0
    4db8:	mov	r0, r5
    4dba:	bl	4ba4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4dbe:	cmp	r0, #0
    4dc0:	beq.n	4d60 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4dc2:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4dc4:	cmp	r7, #0
    4dc6:	beq.n	4d62 <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4dc8:	mov	r6, r4
    4dca:	b.n	4d56 <ExFatPartition::freeChain(unsigned long)+0xa>

00004dcc <ExFatPartition::rootLength()>:
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4dcc:	push	{r4, lr}
    4dce:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4dd0:	ldr.w	r1, [r0, #1068]	; 0x42c
    4dd4:	bl	4c4c <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    4dd8:	ldrb.w	r3, [r4, #1085]	; 0x43d
    4ddc:	adds	r3, #9
    4dde:	uxtb	r3, r3
}
    4de0:	lsls	r0, r3
    4de2:	pop	{r4, pc}

00004de4 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4de4:	cbz	r1, 4e1a <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4de6:	push	{r4}
    4de8:	add	r1, r0
    4dea:	lsls	r3, r2, #15
    4dec:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4df0:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    4df4:	sub.w	r4, r2, #97	; 0x61
    4df8:	cmp	r4, #25
      c -= 'a' - 'A';
    4dfa:	itt	ls
    4dfc:	subls	r2, #32
    4dfe:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4e00:	uxtah	r2, r2, r3
    4e04:	uxth	r2, r2
    4e06:	lsls	r3, r2, #15
    4e08:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4e0c:	cmp	r1, r0
    4e0e:	uxth	r2, r2
    4e10:	bne.n	4dea <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4e12:	mov	r0, r2
    4e14:	ldr.w	r4, [sp], #4
    4e18:	bx	lr
    4e1a:	mov	r0, r2
    4e1c:	bx	lr
    4e1e:	nop

00004e20 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4e20:	cbz	r3, 4e74 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4e22:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4e24:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4e26:	cmp	r4, #126	; 0x7e
    4e28:	bhi.n	4e68 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    4e2a:	add	r3, r2
    4e2c:	adds	r5, r1, r3
    4e2e:	add	r2, r1
    4e30:	adds	r0, #2
    4e32:	ldrb.w	r3, [r2], #1
    4e36:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4e38:	sub.w	r1, r3, #97	; 0x61
    4e3c:	cmp	r1, #25
    4e3e:	sub.w	r1, r4, #97	; 0x61
    4e42:	ite	ls
    4e44:	movls	r6, #32
    4e46:	movhi	r6, #0
    4e48:	cmp	r1, #25
    4e4a:	ite	ls
    4e4c:	movls	r1, #32
    4e4e:	movhi	r1, #0
    4e50:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4e52:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4e54:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4e56:	uxtb	r4, r4
    4e58:	cmp	r4, r3
    4e5a:	bne.n	4e68 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4e5c:	cmp	r2, r5
    4e5e:	beq.n	4e6e <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4e60:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4e64:	cmp	r4, #126	; 0x7e
    4e66:	bls.n	4e32 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4e68:	movs	r0, #0
    }
  }
  return true;
}
    4e6a:	pop	{r4, r5, r6}
    4e6c:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4e6e:	movs	r0, #1
}
    4e70:	pop	{r4, r5, r6}
    4e72:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4e74:	movs	r0, #1
}
    4e76:	bx	lr

00004e78 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4e78:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4e7a:	push	{r3, r4, r5, r6, r7, lr}
    4e7c:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4e7e:	ldr	r0, [r0, #32]
    4e80:	cbz	r1, 4e84 <ExFatFile::addCluster()+0xc>
    4e82:	adds	r1, #1
    4e84:	movs	r2, #1
    4e86:	bl	4a10 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4e8a:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4e8c:	mov	r6, r0
  if (find < 2) {
    4e8e:	bls.n	4ef0 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4e90:	movs	r3, #1
    4e92:	mov	r1, r0
    4e94:	mov	r2, r3
    4e96:	ldr	r0, [r4, #32]
    4e98:	bl	4ba4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4e9c:	mov	r7, r0
    4e9e:	cbz	r0, 4ef0 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4ea0:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4ea2:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4ea6:	cbz	r0, 4ef6 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4ea8:	lsls	r2, r3, #25
    4eaa:	bpl.n	4ed4 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    4eac:	adds	r2, r0, #1
    4eae:	cmp	r6, r2
    4eb0:	beq.n	4efe <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4eb2:	bic.w	r2, r3, #64	; 0x40
    4eb6:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4eba:	ldr	r3, [r4, #28]
    4ebc:	b.n	4eca <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    4ebe:	ldr	r0, [r4, #32]
    4ec0:	bl	4d28 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4ec4:	cbz	r0, 4ef0 <ExFatFile::addCluster()+0x78>
    4ec6:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4ec8:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4eca:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4ecc:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    4ece:	mov	r1, r3
    4ed0:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4ed2:	bcc.n	4ebe <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4ed4:	mov.w	r2, #4294967295
    4ed8:	mov	r1, r6
    4eda:	ldr	r0, [r4, #32]
    4edc:	bl	4d28 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4ee0:	cbz	r0, 4ef0 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4ee2:	ldr	r1, [r4, #24]
    4ee4:	cbz	r1, 4efe <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4ee6:	mov	r2, r6
    4ee8:	ldr	r0, [r4, #32]
    4eea:	bl	4d28 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4eee:	cbnz	r0, 4efe <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4ef0:	movs	r7, #0
}
    4ef2:	mov	r0, r7
    4ef4:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4ef6:	orr.w	r3, r3, #64	; 0x40
    4efa:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4efe:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4f00:	mov	r0, r7
    4f02:	pop	{r3, r4, r5, r6, r7, pc}

00004f04 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4f04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4f08:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4f0c:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4f0e:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4f12:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4f14:	add.w	r8, sp, #12
    4f18:	stmia.w	r8, {r0, r1, r2}
    4f1c:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    4f1e:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4f20:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    4f22:	movs	r2, #0
    4f24:	mov	r1, r8
    4f26:	ldr	r0, [r6, #32]
    4f28:	bl	4c88 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    4f2c:	uxtb.w	r9, r7
    if (!cache) {
    4f30:	mov	r5, r0
    4f32:	cbz	r0, 4f42 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4f34:	ldrb	r2, [r0, #0]
    4f36:	cmp	r2, #192	; 0xc0
    4f38:	beq.n	4fe0 <ExFatFile::syncDir()+0xdc>
    4f3a:	cmp	r2, #193	; 0xc1
    4f3c:	beq.n	4f56 <ExFatFile::syncDir()+0x52>
    4f3e:	cmp	r2, #133	; 0x85
    4f40:	beq.n	4f96 <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4f42:	ldrb.w	r3, [r6, #50]	; 0x32
    4f46:	orr.w	r3, r3, #1
    4f4a:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    4f4e:	movs	r0, #0
}
    4f50:	add	sp, #28
    4f52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f56:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4f58:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4f5a:	ldrb	r2, [r5, r1]
    4f5c:	lsls	r3, r4, #15
    4f5e:	orr.w	r4, r3, r4, lsr #1
    4f62:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4f66:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4f68:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4f6a:	add.w	r1, r1, #1
    4f6e:	beq.n	4f8c <ExFatFile::syncDir()+0x88>
    4f70:	cmp	r1, #31
    4f72:	bls.n	4f5a <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    4f74:	cmp	sl, r9
    4f76:	beq.n	501c <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4f78:	movs	r2, #32
    4f7a:	mov	r1, r8
    4f7c:	ldr	r0, [r6, #32]
    4f7e:	bl	4cbc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4f82:	cmp	r0, #1
    4f84:	add.w	r7, r7, #1
    4f88:	beq.n	4f22 <ExFatFile::syncDir()+0x1e>
    4f8a:	b.n	4f42 <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4f8c:	cmp	r0, #133	; 0x85
    4f8e:	ite	eq
    4f90:	moveq	r1, #4
    4f92:	movne	r1, #2
    4f94:	b.n	4f5a <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4f96:	ldr	r3, [pc, #192]	; (5058 <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4f98:	ldrb.w	r1, [r6, #49]	; 0x31
    4f9c:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    4f9e:	ldrb.w	sl, [r0, #1]
    4fa2:	and.w	r1, r1, #55	; 0x37
    4fa6:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4fa8:	cmp	r3, #0
    4faa:	beq.n	4f56 <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    4fac:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4fae:	ldrb.w	r2, [r1, #524]	; 0x20c
    4fb2:	orr.w	r2, r2, #1
    4fb6:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    4fba:	add	r0, sp, #8
    4fbc:	add.w	r2, sp, #7
    4fc0:	add.w	r1, sp, #10
    4fc4:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    4fc6:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    4fca:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    4fce:	ldrb.w	r1, [sp, #7]
    4fd2:	strb	r1, [r5, #21]
    4fd4:	strh	r2, [r5, #12]
    4fd6:	strh	r2, [r5, #16]
    4fd8:	strh	r3, [r5, #14]
    4fda:	strh	r3, [r5, #18]
    4fdc:	ldrb	r0, [r5, #0]
    4fde:	b.n	4f58 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4fe0:	ldrb.w	r3, [r6, #51]	; 0x33
    4fe4:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4fe8:	ldrb	r3, [r0, #1]
    4fea:	ite	ne
    4fec:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4ff0:	biceq.w	r3, r3, #2
    4ff4:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    4ff6:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4ffa:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4ffe:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    5002:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5004:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5006:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    500a:	ldr	r2, [r6, #32]
    500c:	ldrb.w	r3, [r2, #524]	; 0x20c
    5010:	orr.w	r3, r3, #1
    5014:	strb.w	r3, [r2, #524]	; 0x20c
    5018:	ldrb	r0, [r0, #0]
    501a:	b.n	4f58 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    501c:	mov	r1, fp
    501e:	movs	r2, #1
    5020:	ldr	r0, [r6, #32]
    5022:	bl	4c88 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5026:	cmp	r0, #0
    5028:	beq.n	4f42 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    502a:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    502c:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    502e:	mov	r0, r5
    5030:	bl	4a00 <FsCache::sync()>
    5034:	cmp	r0, #0
    5036:	beq.n	4f42 <ExFatFile::syncDir()+0x3e>
    5038:	add.w	r0, r5, #524	; 0x20c
    503c:	bl	4a00 <FsCache::sync()>
    5040:	cmp	r0, #0
    5042:	beq.w	4f42 <ExFatFile::syncDir()+0x3e>
    5046:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    504a:	ldr	r3, [r0, #0]
    504c:	ldr	r3, [r3, #20]
    504e:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5050:	cmp	r0, #0
    5052:	beq.w	4f42 <ExFatFile::syncDir()+0x3e>
    5056:	b.n	4f50 <ExFatFile::syncDir()+0x4c>
    5058:	.word	0x2001aa1c

0000505c <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    505c:	ldrb.w	r2, [r0, #49]	; 0x31
    5060:	cbz	r2, 5088 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    5062:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5064:	ldrb.w	r2, [r0, #51]	; 0x33
    5068:	lsls	r1, r2, #24
    506a:	bmi.n	508c <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    506c:	ldr	r5, [r0, #32]
    506e:	mov	r4, r0
    5070:	mov	r0, r5
    5072:	bl	4a00 <FsCache::sync()>
    5076:	cbnz	r0, 509c <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5078:	ldrb.w	r3, [r4, #50]	; 0x32
    507c:	orr.w	r3, r3, #1
    5080:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    5084:	movs	r0, #0
}
    5086:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    5088:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    508a:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    508c:	and.w	r2, r2, #127	; 0x7f
    5090:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5094:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    5098:	b.w	4f04 <ExFatFile::syncDir()>
    509c:	add.w	r0, r5, #524	; 0x20c
    50a0:	bl	4a00 <FsCache::sync()>
    50a4:	cmp	r0, #0
    50a6:	beq.n	5078 <ExFatFile::sync()+0x1c>
    50a8:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    50ac:	ldr	r3, [r0, #0]
    50ae:	ldr	r3, [r3, #20]
    50b0:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    50b2:	cmp	r0, #0
    50b4:	beq.n	5078 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    50b6:	movs	r0, #1
    50b8:	pop	{r3, r4, r5, pc}
    50ba:	nop

000050bc <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    50bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    50c0:	ldrb.w	r3, [r0, #49]	; 0x31
    50c4:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    50c6:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    50c8:	bmi.n	5192 <ExFatFile::addDirCluster()+0xd6>
    50ca:	ldr	r0, [r0, #8]
    50cc:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    50ce:	ldr.w	r3, [r3, #1076]	; 0x434
    50d2:	add	r0, r3
    50d4:	cmp.w	r0, #67108864	; 0x4000000
    50d8:	bcc.n	50e0 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    50da:	movs	r0, #0
    50dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    50e0:	mov	r0, r4
    50e2:	bl	4e78 <ExFatFile::addCluster()>
    50e6:	cmp	r0, #0
    50e8:	beq.n	50da <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    50ea:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    50ec:	ldrb.w	r3, [r6, #524]	; 0x20c
    50f0:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    50f2:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    50f6:	bmi.n	519a <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    50f8:	mov	r0, r5
    return m_cacheBuffer;
    50fa:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    50fe:	bl	4934 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    5102:	mov.w	r2, #512	; 0x200
    5106:	movs	r1, #0
    5108:	mov	r0, r6
    510a:	bl	c25c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    510e:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5110:	ldr	r3, [r4, #24]
    5112:	ldrb.w	r0, [r2, #1085]	; 0x43d
    5116:	ldr.w	r1, [r2, #1060]	; 0x424
    511a:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    511e:	movs	r7, #1
    5120:	lsl.w	r8, r8, r0
    5124:	lsls.w	r3, r7, r0
    5128:	add	r8, r1
    512a:	it	ne
    512c:	movne	r5, #0
    512e:	beq.n	5154 <ExFatFile::addDirCluster()+0x98>
    5130:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5134:	ldr	r3, [r0, #0]
    5136:	add.w	r1, r8, r5
    513a:	ldr	r3, [r3, #24]
    513c:	mov	r2, r6
    513e:	blx	r3
    5140:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    5142:	cmp	r0, #0
    5144:	beq.n	50da <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5146:	ldr	r2, [r4, #32]
    5148:	ldrb.w	r3, [r2, #1085]	; 0x43d
    514c:	lsl.w	r3, r7, r3
    5150:	cmp	r3, r5
    5152:	bhi.n	5130 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    5154:	ldrb.w	r3, [r4, #49]	; 0x31
    5158:	lsls	r3, r3, #25
    515a:	bmi.n	5188 <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    515c:	ldrb.w	r3, [r4, #51]	; 0x33
    5160:	orn	r3, r3, #127	; 0x7f
    5164:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5168:	ldr.w	r6, [r2, #1076]	; 0x434
    516c:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5170:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5174:	adds	r2, r2, r6
    5176:	mov.w	r7, #0
    517a:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    517c:	adds	r0, r0, r6
    517e:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5180:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5184:	strd	r0, r1, [r4, #16]
  }
  return sync();
    5188:	mov	r0, r4

 fail:
  return false;
}
    518a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    518e:	b.w	505c <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5192:	ldr	r0, [r0, #32]
    5194:	bl	4dcc <ExFatPartition::rootLength()>
    5198:	b.n	50cc <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    519a:	mov	r0, r5
    519c:	bl	4a00 <FsCache::sync()>
    51a0:	cmp	r0, #0
    51a2:	bne.n	50f8 <ExFatFile::addDirCluster()+0x3c>
    51a4:	b.n	50da <ExFatFile::addDirCluster()+0x1e>
    51a6:	nop

000051a8 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    51a8:	orrs.w	r1, r2, r3
    51ac:	beq.n	51b6 <ExFatFile::preAllocate(unsigned long long)+0xe>
    51ae:	ldrb.w	r1, [r0, #51]	; 0x33
    51b2:	lsls	r1, r1, #30
    51b4:	bmi.n	51ba <ExFatFile::preAllocate(unsigned long long)+0x12>
  }
  return true;

 fail:
  return false;
}
    51b6:	movs	r0, #0
    51b8:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    51ba:	ldr	r1, [r0, #28]
    51bc:	cmp	r1, #0
    51be:	bne.n	51b6 <ExFatFile::preAllocate(unsigned long long)+0xe>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    51c0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    51c4:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    51c6:	ldr	r0, [r0, #32]
    51c8:	mov	r5, r3
    51ca:	ldrb.w	r3, [r0, #1085]	; 0x43d
    51ce:	adds	r3, #9
    51d0:	adds.w	r8, r2, #4294967295
    51d4:	uxtb	r3, r3
    51d6:	adc.w	r9, r5, #4294967295
    51da:	rsb	r7, r3, #32
    51de:	lsl.w	r7, r9, r7
    51e2:	mov	r4, r2
    51e4:	lsr.w	r2, r8, r3
    51e8:	subs	r3, #32
    51ea:	orrs	r2, r7
    51ec:	lsr.w	r3, r9, r3
    51f0:	orrs	r2, r3
    51f2:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    51f4:	mov	r2, r7
    51f6:	bl	4a10 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    51fa:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    51fc:	mov	r8, r0
  if (find < 2) {
    51fe:	bls.n	520e <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    5200:	mov	r1, r0
    5202:	mov	r2, r7
    5204:	movs	r3, #1
    5206:	ldr	r0, [r6, #32]
    5208:	bl	4ba4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    520c:	cbnz	r0, 5214 <ExFatFile::preAllocate(unsigned long long)+0x6c>
  }
  return true;

 fail:
  return false;
}
    520e:	movs	r0, #0
    5210:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    5214:	ldrb.w	r3, [r6, #51]	; 0x33
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    5218:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    521c:	orn	r3, r3, #63	; 0x3f
    5220:	strb.w	r3, [r6, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    5224:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    5228:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    522a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    522e:	b.w	505c <ExFatFile::sync()>
    5232:	nop

00005234 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5234:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5238:	lsls	r2, r3, #30
    523a:	bpl.n	526e <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    523c:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    523e:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5240:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5242:	cbz	r5, 5268 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    5244:	and.w	r3, r3, #64	; 0x40
    5248:	mov	r4, r0
    524a:	and.w	r0, r3, #255	; 0xff
    524e:	cbnz	r3, 5272 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    5250:	ldr	r1, [r4, #24]
    5252:	cmp	r1, #0
    5254:	bne.n	52da <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    5256:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5258:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    525a:	mov	r1, r5
    525c:	ldr	r0, [r4, #32]
    525e:	bl	4d4c <ExFatPartition::freeChain(unsigned long)>
    5262:	cbnz	r0, 52b2 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    5264:	movs	r0, #0
    5266:	b.n	526a <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5268:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    526a:	add	sp, #12
    526c:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    526e:	movs	r0, #0
}
    5270:	bx	lr
    5272:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    5274:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5276:	ldrb.w	r3, [r0, #1085]	; 0x43d
    527a:	ldrd	r6, r7, [r4, #8]
    527e:	adds	r3, #9
    5280:	uxtb	r3, r3
    5282:	adds.w	r6, r6, #4294967295
    5286:	rsb	lr, r3, #32
    528a:	adc.w	r7, r7, #4294967295
    528e:	lsr.w	r2, r6, r3
    5292:	lsl.w	lr, r7, lr
    5296:	subs	r3, #32
    5298:	orr.w	r2, r2, lr
    529c:	lsr.w	r3, r7, r3
    52a0:	orrs	r2, r3
    52a2:	adds	r2, #1
    if (m_curCluster) {
    52a4:	cbz	r1, 52d4 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    52a6:	subs	r5, #1
    52a8:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    52aa:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    52ac:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    52ae:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    52b0:	cbnz	r2, 52f6 <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    52b2:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    52b6:	ldrb.w	r3, [r4, #51]	; 0x33
    52ba:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    52be:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    52c2:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    52c6:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    52ca:	mov	r0, r4
    52cc:	bl	505c <ExFatFile::sync()>

 fail:
  return false;
}
    52d0:	add	sp, #12
    52d2:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    52d4:	str	r5, [sp, #4]
      m_firstCluster = 0;
    52d6:	str	r1, [r4, #28]
    52d8:	b.n	52b0 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    52da:	add	r2, sp, #8
    52dc:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    52e0:	ldr	r0, [r4, #32]
    52e2:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    52e6:	sxtb	r0, r0
      if (fg < 0) {
    52e8:	cmp	r0, #0
    52ea:	blt.n	5264 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    52ec:	bne.n	5304 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    52ee:	ldr	r5, [sp, #4]
    52f0:	cmp	r5, #0
    52f2:	beq.n	52b2 <ExFatFile::truncate()+0x7e>
    52f4:	b.n	525a <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    52f6:	movs	r3, #0
    52f8:	ldr	r1, [sp, #4]
    52fa:	bl	4ba4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    52fe:	cmp	r0, #0
    5300:	bne.n	52b2 <ExFatFile::truncate()+0x7e>
    5302:	b.n	5264 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5304:	mov.w	r2, #4294967295
    5308:	ldr	r1, [r4, #24]
    530a:	ldr	r0, [r4, #32]
    530c:	bl	4d28 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5310:	cmp	r0, #0
    5312:	bne.n	52ee <ExFatFile::truncate()+0xba>
    5314:	b.n	5264 <ExFatFile::truncate()+0x30>
    5316:	nop

00005318 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5318:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    531c:	ldrb.w	r3, [r0, #51]	; 0x33
    5320:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5322:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5324:	mov	r6, r0
    5326:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5328:	bmi.n	5340 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    532a:	ldrb.w	r3, [r6, #50]	; 0x32
    532e:	orr.w	r3, r3, #1
    5332:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    5336:	mov.w	r0, #4294967295
}
    533a:	add	sp, #20
    533c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5340:	lsls	r2, r3, #28
    5342:	mov	sl, r1
    5344:	bmi.w	556c <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5348:	ldr	r3, [sp, #4]
    534a:	cmp	r3, #0
    534c:	beq.w	5594 <ExFatFile::write(void const*, unsigned int)+0x27c>
    5350:	mov	r1, r6
    5352:	ldrd	r2, r3, [r1], #24
    5356:	ldr.w	r8, [sp, #4]
    535a:	str	r1, [sp, #12]
    535c:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    535e:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5360:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5362:	ldr.w	r4, [r0, #1072]	; 0x430
    5366:	mov	r3, fp
    5368:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    536a:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    536e:	cbnz	r4, 53c4 <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    5370:	cmp	r5, #0
    5372:	beq.w	54f2 <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    5376:	ldrb.w	r3, [r6, #51]	; 0x33
    537a:	lsls	r3, r3, #25
    537c:	bpl.w	553a <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5380:	ldrd	r2, r3, [r6, #8]
    5384:	ldrb.w	r7, [r0, #1085]	; 0x43d
    5388:	adds	r7, #9
    538a:	uxtb	r7, r7
    538c:	adds.w	r2, r2, #4294967295
    5390:	adc.w	r3, r3, #4294967295
    5394:	rsb	lr, r7, #32
    5398:	lsl.w	lr, r3, lr
    539c:	lsr.w	r1, r2, r7
    53a0:	subs	r7, #32
    53a2:	lsr.w	r7, r3, r7
    53a6:	orr.w	r1, r1, lr
    53aa:	ldr	r3, [r6, #28]
    53ac:	orrs	r1, r7
    53ae:	add	r3, r1
    53b0:	cmp	r5, r3
    53b2:	bcc.w	5520 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    53b6:	mov	r0, r6
    53b8:	bl	4e78 <ExFatFile::addCluster()>
    53bc:	cmp	r0, #0
    53be:	beq.n	532a <ExFatFile::write(void const*, unsigned int)+0x12>
    53c0:	ldr	r0, [r6, #32]
    53c2:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    53c4:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    53c8:	ldrb.w	lr, [r0, #1085]	; 0x43d
    53cc:	lsrs	r4, r4, #9
    53ce:	subs	r5, #2
    53d0:	adds	r1, r4, r7
    53d2:	lsl.w	r5, r5, lr
    53d6:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    53d8:	cmp.w	r9, #0
    53dc:	bne.w	54e4 <ExFatFile::write(void const*, unsigned int)+0x1cc>
    53e0:	cmp.w	r8, #512	; 0x200
    53e4:	bcs.n	5496 <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    53e6:	ldrd	r2, r3, [r6, #16]
    53ea:	ldrd	r4, r5, [r6]
    53ee:	cmp.w	r8, #512	; 0x200
    53f2:	mov	r7, r8
    53f4:	it	cs
    53f6:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    53fa:	cmp	r5, r3
    53fc:	it	eq
    53fe:	cmpeq	r4, r2
    5400:	ite	cc
    5402:	movcc	r2, #1
    5404:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5406:	add.w	r0, r0, #524	; 0x20c
    540a:	bl	4940 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    540e:	cmp	r0, #0
    5410:	beq.n	532a <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5412:	add	r0, r9
    5414:	mov	r2, r7
    5416:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5418:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    541a:	bl	82a4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    541e:	cmp.w	r9, #512	; 0x200
    5422:	beq.w	554a <ExFatFile::write(void const*, unsigned int)+0x232>
    5426:	mov	r0, r7
    5428:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    542a:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    542e:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5432:	adds.w	fp, r2, r0
    5436:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    543a:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    543c:	mov	r2, fp
    543e:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5440:	it	eq
    5442:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    5444:	add	sl, r7
    toWrite -= n;
    5446:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    544a:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    544e:	bcs.n	5464 <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5450:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    5454:	mov	r4, ip
    5456:	mov	r3, fp
    5458:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    545c:	orn	r1, r1, #127	; 0x7f
    5460:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5464:	cmp.w	r8, #0
    5468:	bne.w	535e <ExFatFile::write(void const*, unsigned int)+0x46>
    546c:	mov	r2, fp
    546e:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    5470:	ldrd	r0, r1, [r6, #8]
    5474:	cmp	r1, r3
    5476:	it	eq
    5478:	cmpeq	r0, r2
    547a:	bcc.n	557c <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    547c:	ldr	r3, [pc, #284]	; (559c <ExFatFile::write(void const*, unsigned int)+0x284>)
    547e:	ldr	r3, [r3, #0]
    5480:	cmp	r3, #0
    5482:	beq.w	5590 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5486:	ldrb.w	r3, [r6, #51]	; 0x33
    548a:	ldr	r0, [sp, #4]
    548c:	orn	r3, r3, #127	; 0x7f
    5490:	strb.w	r3, [r6, #51]	; 0x33
    5494:	b.n	533a <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    5496:	cmp.w	r8, #1024	; 0x400
    549a:	bcc.n	54fa <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    549c:	movs	r3, #1
    549e:	lsl.w	lr, r3, lr
    54a2:	rsb	lr, r4, lr
    54a6:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    54aa:	mov.w	r4, r8, lsr #9
    54ae:	cmp	r4, lr
    54b0:	it	cs
    54b2:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    54b4:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    54b6:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    54ba:	bhi.n	54d0 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    54bc:	adds	r2, r4, r1
    54be:	cmp	r2, r3
    54c0:	bls.n	54d0 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    54c2:	add.w	r0, r0, #524	; 0x20c
    54c6:	str	r1, [sp, #8]
    54c8:	bl	4934 <FsCache::invalidate()>
    54cc:	ldr	r0, [r6, #32]
    54ce:	ldr	r1, [sp, #8]
    54d0:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    54d4:	ldr	r5, [r0, #0]
    54d6:	mov	r3, r4
    54d8:	mov	r2, sl
    54da:	ldr	r4, [r5, #28]
    54dc:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    54de:	cmp	r0, #0
    54e0:	bne.n	5426 <ExFatFile::write(void const*, unsigned int)+0x10e>
    54e2:	b.n	532a <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    54e4:	rsb	r7, r9, #512	; 0x200
    54e8:	cmp	r7, r8
    54ea:	it	cs
    54ec:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    54ee:	movs	r2, #1
    54f0:	b.n	5406 <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    54f2:	ldr	r5, [r6, #28]
    54f4:	cbz	r5, 5526 <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    54f6:	str	r5, [r6, #24]
    54f8:	b.n	53c4 <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    54fa:	ldr.w	r3, [r0, #532]	; 0x214
    54fe:	cmp	r1, r3
    5500:	beq.n	555c <ExFatFile::write(void const*, unsigned int)+0x244>
    5502:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5506:	ldr	r3, [r0, #0]
    5508:	mov	r2, sl
    550a:	ldr	r3, [r3, #24]
    550c:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    550e:	cmp	r0, #0
    5510:	beq.w	532a <ExFatFile::write(void const*, unsigned int)+0x12>
    5514:	mov.w	r0, #512	; 0x200
    5518:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    551a:	mov.w	r7, #512	; 0x200
    551e:	b.n	542a <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5520:	adds	r5, #1
    5522:	str	r5, [r6, #24]
    5524:	b.n	53c4 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5526:	mov	r0, r6
    5528:	bl	4e78 <ExFatFile::addCluster()>
    552c:	cmp	r0, #0
    552e:	beq.w	532a <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5532:	ldr	r5, [r6, #24]
    5534:	str	r5, [r6, #28]
    5536:	ldr	r0, [r6, #32]
    5538:	b.n	53c4 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    553a:	mov	r1, r5
    553c:	ldr	r2, [sp, #12]
    553e:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    5542:	cmp	r0, #0
    5544:	bne.w	53c0 <ExFatFile::write(void const*, unsigned int)+0xa8>
    5548:	b.n	53b6 <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    554a:	ldr	r0, [r6, #32]
    554c:	add.w	r0, r0, #524	; 0x20c
    5550:	bl	4a00 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    5554:	cmp	r0, #0
    5556:	bne.w	5426 <ExFatFile::write(void const*, unsigned int)+0x10e>
    555a:	b.n	532a <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    555c:	add.w	r0, r0, #524	; 0x20c
    5560:	str	r1, [sp, #8]
    5562:	bl	4934 <FsCache::invalidate()>
    5566:	ldr	r0, [r6, #32]
    5568:	ldr	r1, [sp, #8]
    556a:	b.n	5502 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    556c:	ldrd	r2, r3, [r0, #16]
    5570:	bl	4330 <ExFatFile::seekSet(unsigned long long)>
    5574:	cmp	r0, #0
    5576:	beq.w	532a <ExFatFile::write(void const*, unsigned int)+0x12>
    557a:	b.n	5348 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    557c:	ldrb.w	r1, [r6, #51]	; 0x33
    5580:	ldr	r0, [sp, #4]
    5582:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5586:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    558a:	strb.w	r1, [r6, #51]	; 0x33
    558e:	b.n	533a <ExFatFile::write(void const*, unsigned int)+0x22>
    5590:	ldr	r0, [sp, #4]
    5592:	b.n	533a <ExFatFile::write(void const*, unsigned int)+0x22>
    5594:	ldrd	r2, r3, [r6]
    5598:	b.n	5470 <ExFatFile::write(void const*, unsigned int)+0x158>
    559a:	nop
    559c:	.word	0x2001aa1c

000055a0 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    55a0:	push	{r3, r4, r5, lr}
    55a2:	mov	r4, r0
    55a4:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    55a6:	movs	r2, #36	; 0x24
    55a8:	movs	r1, #0
    55aa:	bl	c25c <memset>

  m_vol = vol;
    55ae:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    55b0:	ldrb	r3, [r5, #7]
    55b2:	cmp	r3, #16
    55b4:	beq.n	55c8 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    55b6:	cmp	r3, #32
    55b8:	bne.n	55c4 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    55ba:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    55bc:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    55be:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    55c0:	strb	r0, [r4, #2]
    55c2:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    55c4:	movs	r0, #0
}
    55c6:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    55c8:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    55ca:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    55cc:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    55ce:	strb	r0, [r4, #2]
    55d0:	pop	{r3, r4, r5, pc}
    55d2:	nop

000055d4 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    55d4:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    55d6:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    55d8:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    55dc:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    55de:	mov	r1, r5
    55e0:	ldr	r0, [r0, #8]
    55e2:	bl	6018 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    55e6:	cbz	r0, 55fe <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    55e8:	cbz	r5, 5600 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    55ea:	ldr	r3, [r4, #16]
    55ec:	adds	r5, #1
    55ee:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    55f0:	ldrb	r3, [r4, #2]
    55f2:	it	ne
    55f4:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    55f8:	orn	r3, r3, #127	; 0x7f
    55fc:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    55fe:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5600:	ldrb	r3, [r4, #2]
    5602:	orr.w	r3, r3, #64	; 0x40
    5606:	b.n	55f8 <FatFile::addCluster()+0x24>

00005608 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5608:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    560c:	ldrb	r3, [r0, #0]
    560e:	and.w	r3, r3, #32
    5612:	cbnz	r3, 5620 <FatFile::addDirCluster()+0x18>
    5614:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5618:	ldr	r1, [r0, #20]
    561a:	ldr	r3, [pc, #124]	; (5698 <FatFile::addDirCluster()+0x90>)
    561c:	cmp	r1, r3
    561e:	bls.n	5628 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5620:	movs	r6, #0
}
    5622:	mov	r0, r6
    5624:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5628:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    562a:	bl	55d4 <FatFile::addCluster()>
    562e:	mov	r6, r0
    5630:	cmp	r0, #0
    5632:	beq.n	5620 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5634:	ldr	r1, [r5, #16]
    5636:	ldr	r0, [r5, #8]
    5638:	bl	5f34 <FatPartition::clusterStartSector(unsigned long) const>
    563c:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    563e:	ldr	r0, [r5, #8]
    5640:	mov	r1, r7
    5642:	adds	r0, #36	; 0x24
    5644:	movs	r2, #5
    5646:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    564a:	mov	r8, r0
    564c:	cmp	r0, #0
    564e:	beq.n	5620 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5650:	mov.w	r2, #512	; 0x200
    5654:	mov	r1, r4
    5656:	bl	c25c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    565a:	ldr	r3, [r5, #8]
    565c:	ldrb	r2, [r3, #4]
    565e:	cmp	r2, #1
    5660:	bls.n	5684 <FatFile::addDirCluster()+0x7c>
    5662:	movs	r4, #1
    5664:	b.n	566e <FatFile::addDirCluster()+0x66>
    5666:	ldr	r3, [r5, #8]
    5668:	ldrb	r2, [r3, #4]
    566a:	cmp	r2, r4
    566c:	bls.n	5684 <FatFile::addDirCluster()+0x7c>
    566e:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5670:	ldr	r3, [r0, #0]
    5672:	adds	r1, r4, r7
    5674:	ldr	r3, [r3, #24]
    5676:	mov	r2, r8
    5678:	blx	r3
    567a:	adds	r4, #1
    567c:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    567e:	cmp	r0, #0
    5680:	bne.n	5666 <FatFile::addDirCluster()+0x5e>
    5682:	b.n	5620 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5684:	ldrb	r3, [r3, #6]
    5686:	ldr	r1, [r5, #20]
    5688:	mov.w	r2, #512	; 0x200
    568c:	lsl.w	r3, r2, r3
    5690:	uxtah	r3, r1, r3
    5694:	str	r3, [r5, #20]
    5696:	b.n	5622 <FatFile::addDirCluster()+0x1a>
    5698:	.word	0x001ffdff

0000569c <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    569c:	push	{r4, lr}
    569e:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    56a0:	ldr	r0, [r0, #8]
    56a2:	mov	r2, r1
    56a4:	adds	r0, #36	; 0x24
    56a6:	ldr	r1, [r4, #24]
    56a8:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    56ac:	cbz	r0, 56b8 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    56ae:	ldrh	r3, [r4, #4]
    56b0:	and.w	r3, r3, #15
    56b4:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    56b8:	pop	{r4, pc}
    56ba:	nop

000056bc <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    56bc:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    56be:	ldrsb.w	r3, [r0, #2]
    56c2:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    56c4:	sub	sp, #8
    56c6:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    56c8:	blt.n	56fe <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    56ca:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    56cc:	add.w	r0, r5, #36	; 0x24
    56d0:	bl	5f24 <FatCache::sync()>
    56d4:	cbnz	r0, 56e4 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    56d6:	ldrb	r3, [r4, #1]
    56d8:	orr.w	r3, r3, #1
    56dc:	strb	r3, [r4, #1]
  return false;
    56de:	movs	r0, #0
}
    56e0:	add	sp, #8
    56e2:	pop	{r4, r5, r6, pc}
    56e4:	add.w	r0, r5, #560	; 0x230
    56e8:	bl	5f24 <FatCache::sync()>
    56ec:	cmp	r0, #0
    56ee:	beq.n	56d6 <FatFile::sync() [clone .part.40]+0x1a>
    56f0:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    56f2:	ldr	r3, [r0, #0]
    56f4:	ldr	r3, [r3, #20]
    56f6:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    56f8:	cmp	r0, #0
    56fa:	beq.n	56d6 <FatFile::sync() [clone .part.40]+0x1a>
    56fc:	b.n	56e0 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    56fe:	movs	r1, #1
    5700:	bl	569c <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5704:	mov	r5, r0
    5706:	cmp	r0, #0
    5708:	beq.n	56d6 <FatFile::sync() [clone .part.40]+0x1a>
    570a:	ldrb	r3, [r0, #0]
    570c:	cmp	r3, #229	; 0xe5
    570e:	beq.n	56d6 <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5710:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5712:	ldr	r2, [pc, #56]	; (574c <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5714:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5716:	itt	mi
    5718:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    571a:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    571c:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    571e:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5720:	strh	r3, [r0, #26]
    5722:	lsrs	r3, r3, #16
    5724:	strh	r3, [r0, #20]
    5726:	cbz	r6, 5742 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5728:	add.w	r2, sp, #3
    572c:	add.w	r1, sp, #6
    5730:	add	r0, sp, #4
    5732:	blx	r6
      setLe16(dir->modifyDate, date);
    5734:	ldrh.w	r3, [sp, #4]
    5738:	ldrh.w	r2, [sp, #6]
    573c:	strh	r3, [r5, #24]
    573e:	strh	r3, [r5, #18]
    5740:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5742:	ldrb	r3, [r4, #2]
    5744:	and.w	r3, r3, #127	; 0x7f
    5748:	strb	r3, [r4, #2]
    574a:	b.n	56ca <FatFile::sync() [clone .part.40]+0xe>
    574c:	.word	0x2001aa1c

00005750 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5750:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5752:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5754:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5756:	cbnz	r3, 5762 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5758:	movs	r3, #0
    575a:	strb	r3, [r4, #0]
  m_flags = 0;
    575c:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    575e:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    5760:	pop	{r4, pc}
    5762:	bl	56bc <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5766:	movs	r3, #0
    5768:	strb	r3, [r4, #0]
  m_flags = 0;
    576a:	strb	r3, [r4, #2]
  return rtn;
}
    576c:	pop	{r4, pc}
    576e:	nop

00005770 <FatFile::preAllocate(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5770:	cbnz	r1, 5776 <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5772:	movs	r0, #0
}
    5774:	bx	lr
  close();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    5776:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5778:	ldrb	r3, [r0, #2]
    577a:	lsls	r3, r3, #30
    577c:	bmi.n	5782 <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    577e:	movs	r0, #0
    5780:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5782:	ldr	r3, [r0, #32]
    5784:	cmp	r3, #0
    5786:	bne.n	577e <FatFile::preAllocate(unsigned long)+0xe>
    5788:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    578a:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    578c:	ldrb	r3, [r0, #6]
    578e:	adds	r3, #9
    5790:	mov	r5, r1
    5792:	uxtb	r3, r3
    5794:	subs	r1, #1
    5796:	lsrs	r1, r3
    5798:	adds	r1, #1
    579a:	add.w	r2, r4, #32
    579e:	bl	609c <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    57a2:	cmp	r0, #0
    57a4:	beq.n	577e <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    57a6:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    57a8:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    57aa:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    57ac:	orn	r3, r3, #31
    57b0:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    57b2:	cbnz	r2, 57b6 <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    57b4:	pop	{r3, r4, r5, pc}
    57b6:	mov	r0, r4
    57b8:	ldmia.w	sp!, {r3, r4, r5, lr}
    57bc:	b.w	56bc <FatFile::sync() [clone .part.40]>

000057c0 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    57c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57c4:	mov	r6, r0
    57c6:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    57c8:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    57ca:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    57cc:	movs	r0, #0
    57ce:	strb.w	r0, [sp, #36]	; 0x24
    57d2:	strb.w	r0, [sp, #37]	; 0x25
    57d6:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    57da:	cbnz	r5, 57e8 <FatFile::open(FatFile*, char const*, int)+0x28>
    57dc:	mov	r8, r3
    57de:	ldrb	r3, [r1, #0]
    57e0:	tst.w	r3, #112	; 0x70
    57e4:	mov	r4, r1
    57e6:	bne.n	57f0 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    57e8:	movs	r0, #0
}
    57ea:	add	sp, #72	; 0x48
    57ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    57f0:	ldrb	r3, [r2, #0]
    57f2:	cmp	r3, #47	; 0x2f
    57f4:	mov	r0, r2
    57f6:	beq.n	5844 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    57f8:	movs	r7, #0
    57fa:	b.n	5804 <FatFile::open(FatFile*, char const*, int)+0x44>
    57fc:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    57fe:	strb	r7, [r6, #0]
  m_flags = 0;
    5800:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5802:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5804:	add	r2, sp, #4
    5806:	add	r1, sp, #12
    5808:	bl	62bc <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    580c:	add	r2, sp, #12
    580e:	mov	r1, r4
    5810:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5812:	cmp	r0, #0
    5814:	beq.n	57e8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5816:	ldr	r5, [sp, #4]
    5818:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    581a:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    581c:	cbz	r5, 5862 <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    581e:	bl	65c0 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5822:	mov	r5, r6
    5824:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5826:	cmp	r0, #0
    5828:	beq.n	57e8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    582a:	ldmia	r5!, {r0, r1, r2, r3}
    582c:	stmia	r4!, {r0, r1, r2, r3}
    582e:	ldmia	r5!, {r0, r1, r2, r3}
    5830:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5832:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5834:	ldr	r2, [r5, #0]
    5836:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5838:	cmp	r3, #0
    583a:	beq.n	57fc <FatFile::open(FatFile*, char const*, int)+0x3c>
    583c:	mov	r0, r6
    583e:	bl	56bc <FatFile::sync() [clone .part.40]>
    5842:	b.n	57fc <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5844:	adds	r0, #1
    5846:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5848:	ldrb	r3, [r0, #0]
    584a:	cmp	r3, #47	; 0x2f
    584c:	beq.n	5844 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    584e:	cbz	r3, 5874 <FatFile::open(FatFile*, char const*, int)+0xb4>
    5850:	ldr	r1, [r4, #8]
    5852:	add	r0, sp, #36	; 0x24
    5854:	bl	55a0 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5858:	cmp	r0, #0
    585a:	beq.n	57e8 <FatFile::open(FatFile*, char const*, int)+0x28>
    585c:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    585e:	add	r4, sp, #36	; 0x24
    5860:	b.n	57f8 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5862:	mov	r3, r8
    5864:	add	r2, sp, #12
    5866:	mov	r1, r4
    5868:	mov	r0, r6
    586a:	bl	65c0 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    586e:	add	sp, #72	; 0x48
    5870:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5874:	ldr	r1, [r4, #8]
    5876:	mov	r0, r6
    5878:	bl	55a0 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    587c:	b.n	57ea <FatFile::open(FatFile*, char const*, int)+0x2a>
    587e:	nop

00005880 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5880:	cbz	r1, 588a <FatFile::open(FatVolume*, char const*, int)+0xa>
    5882:	addw	r1, r1, #1084	; 0x43c
    5886:	b.w	57c0 <FatFile::open(FatFile*, char const*, int)>
}
    588a:	mov	r0, r1
    588c:	bx	lr
    588e:	nop

00005890 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    5890:	ldrb	r3, [r0, #0]
    5892:	cbz	r3, 5898 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    5894:	movs	r0, #0
    5896:	bx	lr
    5898:	b.w	55a0 <FatFile::openRoot(FatVolume*) [clone .part.36]>

0000589c <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    589c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    58a0:	ldrb	r3, [r0, #2]
    58a2:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    58a4:	sub	sp, #12
    58a6:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    58a8:	bpl.w	59ca <FatFile::read(void*, unsigned int)+0x12e>
    58ac:	mov	r7, r1
    58ae:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    58b0:	lsls	r6, r1, #28
    58b2:	mov	r9, r2
    58b4:	bmi.w	59dc <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    58b8:	lsls	r4, r1, #26
    58ba:	bpl.n	58ce <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    58bc:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    58be:	ldr	r3, [r0, #20]
    58c0:	ldrh	r2, [r2, #8]
    58c2:	rsb	r3, r3, r2, lsl #5
    58c6:	uxth	r3, r3
    58c8:	cmp	r9, r3
    58ca:	it	cs
    58cc:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    58ce:	cmp.w	r9, #0
    58d2:	beq.w	5a28 <FatFile::read(void*, unsigned int)+0x18c>
    58d6:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    58d8:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    58da:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    58dc:	mov	r6, r9
    58de:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    58e2:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    58e6:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    58ea:	bpl.n	596a <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    58ec:	ldr	r1, [r2, #32]
    58ee:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    58f2:	cmp.w	fp, #0
    58f6:	bne.n	599e <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    58f8:	cmp.w	r6, #512	; 0x200
    58fc:	bcc.n	599e <FatFile::read(void*, unsigned int)+0x102>
    58fe:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    5900:	cmp	r1, r3
    5902:	beq.n	599e <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5904:	cmp.w	r6, #1024	; 0x400
    5908:	bcc.n	59ee <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    590a:	ldrb	r0, [r5, #0]
    590c:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    590e:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5912:	bmi.n	5920 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5914:	ldrb	r0, [r2, #4]
    5916:	rsb	r0, r8, r0
    591a:	cmp	fp, r0
    591c:	it	cs
    591e:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5920:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5922:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5926:	bhi.n	5940 <FatFile::read(void*, unsigned int)+0xa4>
    5928:	add	r3, fp
    592a:	cmp	r1, r3
    592c:	bcs.n	5940 <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    592e:	add.w	r0, r2, #36	; 0x24
    5932:	str	r1, [sp, #4]
    5934:	bl	5f24 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    5938:	cmp	r0, #0
    593a:	beq.n	59ca <FatFile::read(void*, unsigned int)+0x12e>
    593c:	ldr	r2, [r5, #8]
    593e:	ldr	r1, [sp, #4]
    5940:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5942:	ldr	r2, [r0, #0]
    5944:	mov	r3, fp
    5946:	ldr.w	fp, [r2, #12]
    594a:	mov	r2, r7
    594c:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    594e:	cmp	r0, #0
    5950:	beq.n	59ca <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5952:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5954:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5956:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5958:	add	r7, r4
    m_curPosition += n;
    595a:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    595c:	beq.n	5a28 <FatFile::read(void*, unsigned int)+0x18c>
    595e:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5960:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5962:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5964:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5968:	bmi.n	58ec <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    596a:	ldrb.w	r8, [r2, #5]
    596e:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5972:	cmp.w	fp, #0
    5976:	bne.n	59ea <FatFile::read(void*, unsigned int)+0x14e>
    5978:	cmp.w	r8, #0
    597c:	bne.n	59ea <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    597e:	cmp	r3, #0
    5980:	bne.n	5a02 <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5982:	lsls	r1, r1, #25
    5984:	ite	mi
    5986:	ldrmi	r1, [r2, #32]
    5988:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    598a:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    598c:	mov	r0, r2
    598e:	bl	5f34 <FatPartition::clusterStartSector(unsigned long) const>
    5992:	ldr	r2, [r5, #8]
    5994:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5998:	cmp.w	fp, #0
    599c:	beq.n	58f8 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    599e:	add.w	r0, r2, #36	; 0x24
    59a2:	movs	r2, #0
    59a4:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    59a8:	cbz	r0, 59ca <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    59aa:	rsb	r4, fp, #512	; 0x200
    59ae:	cmp	r4, r6
    59b0:	it	cs
    59b2:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    59b4:	add.w	r1, r0, fp
    59b8:	mov	r2, r4
    59ba:	mov	r0, r7
    59bc:	bl	82a4 <memcpy>
    59c0:	b.n	5952 <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    59c2:	ldrb	r3, [r5, #0]
    59c4:	tst.w	r3, #112	; 0x70
    59c8:	bne.n	5a2a <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    59ca:	ldrb	r3, [r5, #1]
  return -1;
    59cc:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    59d0:	orr.w	r3, r3, #2
    59d4:	strb	r3, [r5, #1]
  return -1;
}
    59d6:	add	sp, #12
    59d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    59dc:	ldr	r3, [r0, #28]
    59de:	ldr	r2, [r0, #20]
    59e0:	subs	r3, r3, r2
    59e2:	cmp	r9, r3
    59e4:	it	cs
    59e6:	movcs	r9, r3
    59e8:	b.n	58ce <FatFile::read(void*, unsigned int)+0x32>
    59ea:	ldr	r1, [r5, #16]
    59ec:	b.n	598c <FatFile::read(void*, unsigned int)+0xf0>
    59ee:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    59f0:	ldr	r3, [r0, #0]
    59f2:	mov	r2, r7
    59f4:	ldr	r3, [r3, #8]
    59f6:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    59f8:	cmp	r0, #0
    59fa:	beq.n	59ca <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    59fc:	mov.w	r4, #512	; 0x200
    5a00:	b.n	5952 <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5a02:	lsls	r3, r1, #28
    5a04:	bpl.n	5a12 <FatFile::read(void*, unsigned int)+0x176>
    5a06:	ldrb	r3, [r5, #2]
    5a08:	lsls	r4, r3, #25
    5a0a:	bpl.n	5a12 <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    5a0c:	ldr	r1, [r5, #16]
    5a0e:	adds	r1, #1
    5a10:	b.n	598a <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5a12:	mov	r0, r2
    5a14:	ldr	r1, [r5, #16]
    5a16:	mov	r2, sl
    5a18:	bl	5f40 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5a1c:	cmp	r0, #0
    5a1e:	blt.n	59ca <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5a20:	beq.n	59c2 <FatFile::read(void*, unsigned int)+0x126>
    5a22:	ldr	r2, [r5, #8]
    5a24:	ldr	r1, [r5, #16]
    5a26:	b.n	598c <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5a28:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5a2a:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5a2e:	add	sp, #12
    5a30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005a34 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5a34:	push	{r4, r5, r6, lr}
    5a36:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5a38:	movs	r2, #1
    5a3a:	add.w	r1, sp, #7
    5a3e:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5a40:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5a42:	ldr	r5, [r0, #16]
    5a44:	bl	589c <FatFile::read(void*, unsigned int)>
    5a48:	cmp	r0, #1
    5a4a:	it	eq
    5a4c:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5a50:	str	r6, [r4, #20]
    5a52:	it	ne
    5a54:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5a58:	str	r5, [r4, #16]
  return c;
}
    5a5a:	add	sp, #8
    5a5c:	pop	{r4, r5, r6, pc}
    5a5e:	nop

00005a60 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5a60:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5a62:	ldr	r3, [r0, #20]
    5a64:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5a68:	sub	sp, #12
    5a6a:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5a6c:	cbz	r5, 5a70 <FatFile::readDirCache(bool)+0x10>
    5a6e:	cbnz	r1, 5a94 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    5a70:	movs	r2, #1
    5a72:	add.w	r1, sp, #7
    5a76:	mov	r0, r4
    5a78:	bl	589c <FatFile::read(void*, unsigned int)>
    5a7c:	sxtb	r0, r0
    if  (n != 1) {
    5a7e:	cmp	r0, #1
    5a80:	bne.n	5a9a <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    5a82:	ldr	r3, [r4, #20]
    5a84:	adds	r3, #31
    5a86:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5a88:	ldr	r0, [r4, #8]
    5a8a:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5a8c:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    5a90:	add	sp, #12
    5a92:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    5a94:	adds	r3, #32
    5a96:	str	r3, [r0, #20]
    5a98:	b.n	5a88 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    5a9a:	movs	r0, #0
}
    5a9c:	add	sp, #12
    5a9e:	pop	{r4, r5, pc}

00005aa0 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5aa0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5aa4:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5aa6:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5aa8:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5aaa:	cbz	r3, 5ada <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5aac:	ldr	r2, [r0, #20]
    5aae:	cmp	r2, r1
    5ab0:	mov	r6, r1
    5ab2:	beq.n	5b2a <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    5ab4:	cbnz	r1, 5ac8 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    5ab6:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5ab8:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5aba:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5abc:	bic.w	r3, r3, #32
    5ac0:	strb	r3, [r4, #2]
  return true;
    5ac2:	movs	r0, #1
    5ac4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5ac8:	lsls	r0, r3, #28
    5aca:	bmi.n	5ae2 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5acc:	lsls	r1, r3, #26
    5ace:	bpl.n	5ae8 <FatFile::seekSet(unsigned long)+0x48>
    5ad0:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5ad2:	ldrh	r3, [r3, #8]
    5ad4:	cmp.w	r6, r3, lsl #5
    5ad8:	bls.n	5ab8 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    5ada:	str	r7, [r4, #16]
  return false;
    5adc:	movs	r0, #0
    5ade:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    5ae2:	ldr	r1, [r4, #28]
    5ae4:	cmp	r6, r1
    5ae6:	bhi.n	5ada <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5ae8:	ldr.w	lr, [r4, #8]
    5aec:	ldrb.w	r5, [lr, #6]
    5af0:	adds	r5, #9
    5af2:	uxtb	r1, r5
    5af4:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5af6:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5af8:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5afa:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5afc:	cmp	r0, r5
    5afe:	bhi.n	5b02 <FatFile::seekSet(unsigned long)+0x62>
    5b00:	cbnz	r2, 5b30 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5b02:	lsls	r3, r3, #25
    5b04:	ite	mi
    5b06:	ldrmi.w	r3, [lr, #32]
    5b0a:	ldrpl	r3, [r4, #32]
    5b0c:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5b0e:	add.w	r8, r4, #16
    5b12:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5b14:	cmp	r5, #0
    5b16:	beq.n	5ab8 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5b18:	ldr	r1, [r4, #16]
    5b1a:	ldr	r0, [r4, #8]
    5b1c:	bl	5f40 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5b20:	cmp	r0, #0
    5b22:	add.w	r5, r5, #4294967295
    5b26:	bgt.n	5b12 <FatFile::seekSet(unsigned long)+0x72>
    5b28:	b.n	5ada <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5b2a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5b2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5b30:	subs	r5, r5, r0
    5b32:	b.n	5b0e <FatFile::seekSet(unsigned long)+0x6e>

00005b34 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5b34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b38:	mov	r5, r1
    5b3a:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5b3c:	movs	r1, #0
    5b3e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5b40:	mov	r4, r0
    5b42:	mov	r7, r3
    5b44:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5b48:	bl	c25c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5b4c:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5b4e:	ldr	r3, [r5, #32]
    5b50:	str	r3, [r4, #12]
    5b52:	add.w	r2, r0, #48	; 0x30
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5b56:	and.w	r3, r8, #15
    5b5a:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5b5e:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    5b60:	strh.w	r8, [r4, #4]
    5b64:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5b66:	lsls	r5, r1, #28
    5b68:	bmi.n	5b90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5b6a:	and.w	r1, r1, #23
    5b6e:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    5b70:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5b72:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5b74:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5b78:	it	eq
    5b7a:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5b7e:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    5b82:	it	eq
    5b84:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5b86:	cmp	r3, #1
    5b88:	beq.n	5b9a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    5b8a:	cmp	r3, #2
    5b8c:	beq.n	5be2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    5b8e:	cbz	r3, 5bd8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5b90:	movs	r0, #0
    5b92:	strb	r0, [r4, #0]
  m_flags = 0;
    5b94:	strb	r0, [r4, #2]
  return false;
    5b96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    5b9a:	movs	r3, #2
    5b9c:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5b9e:	ldrb	r1, [r4, #0]
    5ba0:	tst.w	r1, #17
    5ba4:	bne.n	5b90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5ba6:	sxtb	r1, r3
    5ba8:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    5bac:	and.w	r3, r7, #8
    5bb0:	orrs	r3, r1
    5bb2:	uxtb	r3, r3
    5bb4:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5bb6:	ldrh.w	lr, [r2, #20]
    5bba:	ldrh	r1, [r2, #26]
    5bbc:	ldr	r6, [r0, #44]	; 0x2c
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    5bbe:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5bc0:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    5bc4:	cbz	r5, 5be8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5bc6:	cbnz	r1, 5bfe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5bc8:	orn	r3, r3, #127	; 0x7f
    5bcc:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5bce:	lsls	r3, r7, #17
    5bd0:	bmi.n	5bf0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5bd2:	movs	r0, #1
    5bd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    5bd8:	ands.w	r5, r7, #1024	; 0x400
    5bdc:	bne.n	5b90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5bde:	movs	r1, #1
    5be0:	b.n	5bac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5be2:	movs	r3, #3
    5be4:	strb	r3, [r4, #2]
      break;
    5be6:	b.n	5b9e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5be8:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5bea:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5bec:	str	r3, [r4, #28]
    5bee:	b.n	5bce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5bf0:	ldr	r1, [r4, #28]
    5bf2:	mov	r0, r4
    5bf4:	bl	5aa0 <FatFile::seekSet(unsigned long)>
    5bf8:	cmp	r0, #0
    5bfa:	bne.n	5bd2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    5bfc:	b.n	5b90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5bfe:	bl	6144 <FatPartition::freeChain(unsigned long)>
    5c02:	cmp	r0, #0
    5c04:	beq.n	5b90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5c06:	ldrb	r3, [r4, #2]
    5c08:	b.n	5bc8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    5c0a:	nop

00005c0c <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c0c:	ldrb	r3, [r0, #0]
    5c0e:	cbz	r3, 5c14 <FatFile::sync()+0x8>
    5c10:	b.w	56bc <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5c14:	movs	r0, #1
    5c16:	bx	lr

00005c18 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5c18:	ldrb	r3, [r0, #2]
    5c1a:	lsls	r3, r3, #30
    5c1c:	bpl.n	5c54 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5c1e:	ldr	r3, [r0, #32]
    5c20:	cbz	r3, 5c50 <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5c22:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5c24:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5c26:	sub	sp, #8
    5c28:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5c2a:	cbnz	r1, 5c6a <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    5c2c:	str	r3, [sp, #4]
    m_firstCluster = 0;
    5c2e:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    5c30:	mov	r1, r3
    5c32:	ldr	r0, [r4, #8]
    5c34:	bl	6144 <FatPartition::freeChain(unsigned long)>
    5c38:	cbz	r0, 5c66 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c3a:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c3c:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    5c3e:	ldr	r1, [r4, #20]
    5c40:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c42:	orn	r3, r3, #127	; 0x7f
    5c46:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c48:	cbnz	r2, 5c86 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5c4a:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5c4c:	add	sp, #8
    5c4e:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5c50:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5c52:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    5c54:	movs	r0, #0
}
    5c56:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5c58:	mvn.w	r2, #4026531840	; 0xf0000000
    5c5c:	ldr	r1, [r4, #16]
    5c5e:	ldr	r0, [r4, #8]
    5c60:	bl	5fb0 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    5c64:	cbnz	r0, 5c7e <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    5c66:	movs	r0, #0
    5c68:	b.n	5c4c <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    5c6a:	add	r2, sp, #8
    5c6c:	movs	r3, #0
    5c6e:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5c72:	ldr	r0, [r0, #8]
    5c74:	bl	5f40 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5c78:	cmp	r0, #0
    5c7a:	blt.n	5c66 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    5c7c:	bne.n	5c58 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    5c7e:	ldr	r3, [sp, #4]
    5c80:	cmp	r3, #0
    5c82:	beq.n	5c3a <FatFile::truncate()+0x22>
    5c84:	b.n	5c30 <FatFile::truncate()+0x18>
    5c86:	mov	r0, r4
    5c88:	bl	56bc <FatFile::sync() [clone .part.40]>
    5c8c:	b.n	5c4c <FatFile::truncate()+0x34>
    5c8e:	nop

00005c90 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5c90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c94:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5c96:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5c98:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5c9a:	bmi.n	5cac <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5c9c:	ldrb	r3, [r4, #1]
    5c9e:	orr.w	r3, r3, #1
    5ca2:	strb	r3, [r4, #1]
  return -1;
    5ca4:	mov.w	r0, #4294967295
    5ca8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cac:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5cae:	lsls	r2, r3, #28
    5cb0:	mov	r8, r1
    5cb2:	bmi.w	5e34 <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5cb6:	ldr	r2, [r4, #20]
    5cb8:	mvns	r3, r2
    5cba:	cmp	r9, r3
    5cbc:	bhi.n	5c9c <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5cbe:	cmp.w	r9, #0
    5cc2:	beq.w	5e42 <FatFile::write(void const*, unsigned int)+0x1b2>
    5cc6:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5cc8:	mov.w	sl, #0
    5ccc:	b.n	5d30 <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5cce:	cmp	r1, #0
    5cd0:	beq.n	5dc6 <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5cd2:	ldrb	r3, [r4, #2]
    5cd4:	lsls	r3, r3, #25
    5cd6:	bpl.n	5dd4 <FatFile::write(void const*, unsigned int)+0x144>
    5cd8:	ldr	r3, [r4, #28]
    5cda:	cmp	r3, r2
    5cdc:	bls.n	5dd4 <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    5cde:	adds	r1, #1
    5ce0:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5ce2:	bl	5f34 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5ce6:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5cea:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5cec:	bcs.n	5d6a <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5cee:	ldr	r2, [r4, #20]
    5cf0:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5cf2:	ldr	r0, [r4, #8]
    5cf4:	cmp.w	r6, #512	; 0x200
    5cf8:	mov	r5, r6
    5cfa:	it	cs
    5cfc:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5d00:	cmp	r2, r3
    5d02:	bcc.n	5df6 <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5d04:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5d06:	adds	r0, #36	; 0x24
    5d08:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    5d0c:	cmp	r0, #0
    5d0e:	beq.n	5c9c <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5d10:	add	r0, r7
    5d12:	mov	r2, r5
    5d14:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5d16:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5d18:	bl	82a4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5d1c:	cmp.w	r7, #512	; 0x200
    5d20:	beq.n	5e12 <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d22:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5d24:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d26:	add	r2, r5
    src += n;
    5d28:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d2a:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5d2c:	beq.w	5e42 <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5d30:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5d32:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5d34:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5d36:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    5d3a:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5d3e:	bne.n	5d5a <FatFile::write(void const*, unsigned int)+0xca>
    5d40:	cmp	r7, #0
    5d42:	beq.n	5cce <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5d44:	bl	5f34 <FatPartition::clusterStartSector(unsigned long) const>
    5d48:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5d4a:	rsb	r5, r7, #512	; 0x200
    5d4e:	cmp	r5, r6
    5d50:	it	cs
    5d52:	movcs	r5, r6
    5d54:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    5d56:	movs	r2, #1
    5d58:	b.n	5d06 <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5d5a:	bl	5f34 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    5d5e:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5d60:	cmp	r7, #0
    5d62:	bne.n	5d4a <FatFile::write(void const*, unsigned int)+0xba>
    5d64:	cmp.w	r6, #512	; 0x200
    5d68:	bcc.n	5cee <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5d6a:	cmp.w	r6, #1024	; 0x400
    5d6e:	ldr	r2, [r4, #8]
    5d70:	bcc.n	5daa <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5d72:	ldrb	r3, [r2, #4]
    5d74:	ldr	r7, [r2, #44]	; 0x2c
    5d76:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5d78:	lsrs	r0, r6, #9
    5d7a:	cmp	r3, r0
    5d7c:	it	cs
    5d7e:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5d80:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5d82:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5d86:	bcc.n	5d9a <FatFile::write(void const*, unsigned int)+0x10a>
    5d88:	add	r7, r3
    5d8a:	cmp	r7, r1
    5d8c:	bls.n	5d9a <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5d8e:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5d92:	mov.w	r0, #4294967295
    5d96:	str	r0, [r2, #44]	; 0x2c
    5d98:	ldr	r2, [r4, #8]
    5d9a:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    5d9c:	ldr	r2, [r0, #0]
    5d9e:	ldr	r7, [r2, #28]
    5da0:	mov	r2, r8
    5da2:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    5da4:	cmp	r0, #0
    5da6:	bne.n	5d22 <FatFile::write(void const*, unsigned int)+0x92>
    5da8:	b.n	5c9c <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    5daa:	ldr	r3, [r2, #44]	; 0x2c
    5dac:	cmp	r3, r1
    5dae:	beq.n	5e04 <FatFile::write(void const*, unsigned int)+0x174>
    5db0:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5db2:	ldr	r3, [r0, #0]
    5db4:	mov	r2, r8
    5db6:	ldr	r3, [r3, #24]
    5db8:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5dba:	cmp	r0, #0
    5dbc:	beq.w	5c9c <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5dc0:	mov.w	r5, #512	; 0x200
    5dc4:	b.n	5d22 <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5dc6:	ldr	r1, [r4, #32]
    5dc8:	cbz	r1, 5e20 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5dca:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5dcc:	bl	5f34 <FatPartition::clusterStartSector(unsigned long) const>
    5dd0:	mov	r1, r0
    5dd2:	b.n	5d64 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5dd4:	add.w	r2, r4, #16
    5dd8:	bl	5f40 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5ddc:	cmp	r0, #0
    5dde:	blt.w	5c9c <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    5de2:	bne.n	5df0 <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    5de4:	mov	r0, r4
    5de6:	bl	55d4 <FatFile::addCluster()>
    5dea:	cmp	r0, #0
    5dec:	beq.w	5c9c <FatFile::write(void const*, unsigned int)+0xc>
    5df0:	ldr	r0, [r4, #8]
    5df2:	ldr	r1, [r4, #16]
    5df4:	b.n	5dcc <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    5df6:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5df8:	tst.w	r3, #32
    5dfc:	ite	eq
    5dfe:	moveq	r2, #1
    5e00:	movne	r2, #5
    5e02:	b.n	5d06 <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5e04:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5e08:	mov.w	r3, #4294967295
    5e0c:	str	r3, [r2, #44]	; 0x2c
    5e0e:	ldr	r2, [r4, #8]
    5e10:	b.n	5db0 <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5e12:	ldr	r0, [r4, #8]
    5e14:	adds	r0, #36	; 0x24
    5e16:	bl	5f24 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    5e1a:	cmp	r0, #0
    5e1c:	bne.n	5d22 <FatFile::write(void const*, unsigned int)+0x92>
    5e1e:	b.n	5c9c <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5e20:	mov	r0, r4
    5e22:	bl	55d4 <FatFile::addCluster()>
    5e26:	cmp	r0, #0
    5e28:	beq.w	5c9c <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5e2c:	ldr	r1, [r4, #16]
    5e2e:	str	r1, [r4, #32]
    5e30:	ldr	r0, [r4, #8]
    5e32:	b.n	5dcc <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    5e34:	ldr	r1, [r0, #28]
    5e36:	bl	5aa0 <FatFile::seekSet(unsigned long)>
    5e3a:	cmp	r0, #0
    5e3c:	beq.w	5c9c <FatFile::write(void const*, unsigned int)+0xc>
    5e40:	b.n	5cb6 <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5e42:	ldr	r3, [r4, #28]
    5e44:	cmp	r3, r2
    5e46:	bcc.n	5e5c <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5e48:	ldr	r3, [pc, #40]	; (5e74 <FatFile::write(void const*, unsigned int)+0x1e4>)
    5e4a:	ldr	r3, [r3, #0]
    5e4c:	cbz	r3, 5e6c <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e4e:	ldrb	r3, [r4, #2]
    5e50:	orn	r3, r3, #127	; 0x7f
    5e54:	strb	r3, [r4, #2]
    5e56:	mov	r0, r9
    5e58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e5c:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    5e5e:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e60:	orn	r3, r3, #127	; 0x7f
    5e64:	strb	r3, [r4, #2]
    5e66:	mov	r0, r9
    5e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e6c:	mov	r0, r9
    5e6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e72:	nop
    5e74:	.word	0x2001aa1c

00005e78 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5e78:	push	{r3, r4, r5, r6, r7, lr}
    5e7a:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5e7c:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5e7e:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5e82:	mov	r4, r0
    5e84:	ldr	r0, [r3, #0]
    5e86:	ldr	r3, [r0, #0]
    5e88:	mov	r2, r6
    5e8a:	ldr	r3, [r3, #24]
    5e8c:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5e8e:	cbz	r0, 5ea2 <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5e90:	ldrb	r3, [r4, #0]
    5e92:	lsls	r2, r3, #30
    5e94:	mov	r5, r0
    5e96:	bmi.n	5ea8 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5e98:	bic.w	r3, r3, #1
    5e9c:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    5e9e:	mov	r0, r5
    5ea0:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    5ea2:	movs	r5, #0
}
    5ea4:	mov	r0, r5
    5ea6:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5ea8:	ldr	r3, [r4, #4]
    5eaa:	ldr	r1, [r4, #8]
    5eac:	ldr	r0, [r3, #0]
    5eae:	ldr	r7, [r3, #16]
    5eb0:	ldr	r3, [r0, #0]
    5eb2:	mov	r2, r6
    5eb4:	add	r1, r7
    5eb6:	ldr	r3, [r3, #24]
    5eb8:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5eba:	cmp	r0, #0
    5ebc:	beq.n	5ea2 <FatCache::sync() [clone .part.8]+0x2a>
    5ebe:	ldrb	r3, [r4, #0]
    5ec0:	b.n	5e98 <FatCache::sync() [clone .part.8]+0x20>
    5ec2:	nop

00005ec4 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5ec4:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    5ec6:	ldr	r3, [r0, #8]
    5ec8:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5eca:	mov	r6, r0
    5ecc:	mov	r4, r2
  if (m_lbn != sector) {
    5ece:	beq.n	5ef0 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5ed0:	ldrb	r3, [r0, #0]
    5ed2:	lsls	r2, r3, #31
    5ed4:	mov	r7, r1
    5ed6:	bmi.n	5efe <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    5ed8:	lsls	r3, r4, #29
    5eda:	bpl.n	5f0a <FatCache::read(unsigned long, unsigned char)+0x46>
    5edc:	add.w	r5, r6, #12
    5ee0:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5ee2:	and.w	r4, r4, #3
    5ee6:	orrs	r4, r3
    5ee8:	strb	r4, [r6, #0]
    5eea:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5eec:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    5eee:	pop	{r3, r4, r5, r6, r7, pc}
    5ef0:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5ef4:	and.w	r4, r4, #3
    5ef8:	orrs	r4, r3
    5efa:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    5efc:	pop	{r3, r4, r5, r6, r7, pc}
    5efe:	bl	5e78 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    5f02:	cmp	r0, #0
    5f04:	bne.n	5ed8 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    5f06:	movs	r0, #0
    5f08:	pop	{r3, r4, r5, r6, r7, pc}
    5f0a:	ldr	r3, [r6, #4]
    5f0c:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5f0e:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5f10:	add.w	r5, r6, #12
    5f14:	ldr	r3, [r3, #8]
    5f16:	mov	r2, r5
    5f18:	mov	r1, r7
    5f1a:	blx	r3
    5f1c:	cmp	r0, #0
    5f1e:	bne.n	5ee0 <FatCache::read(unsigned long, unsigned char)+0x1c>
    5f20:	b.n	5f06 <FatCache::read(unsigned long, unsigned char)+0x42>
    5f22:	nop

00005f24 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5f24:	ldrb	r3, [r0, #0]
    5f26:	lsls	r3, r3, #31
    5f28:	bmi.n	5f2e <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    5f2a:	movs	r0, #1
    5f2c:	bx	lr
    5f2e:	b.w	5e78 <FatCache::sync() [clone .part.8]>
    5f32:	nop

00005f34 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5f34:	ldrb	r3, [r0, #6]
    5f36:	ldr	r0, [r0, #20]
    5f38:	subs	r1, #2
    5f3a:	lsls	r1, r3
}
    5f3c:	add	r0, r1
    5f3e:	bx	lr

00005f40 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5f40:	cmp	r1, #1
    5f42:	bls.n	5fa8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    5f44:	ldr	r3, [r0, #28]
    5f46:	cmp	r1, r3
    5f48:	bhi.n	5fa8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5f4a:	push	{r4, r5, r6, lr}
    5f4c:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5f4e:	cmp	r3, #32
    5f50:	mov	r6, r2
    5f52:	mov	r5, r0
    5f54:	mov	r4, r1
    5f56:	beq.n	5f8a <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5f58:	cmp	r3, #16
    5f5a:	bne.n	5f84 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    5f5c:	ldr	r3, [r0, #24]
    5f5e:	ubfx	r1, r1, #8, #8
    5f62:	add	r1, r3
    5f64:	movs	r2, #2
    5f66:	add.w	r0, r0, #560	; 0x230
    5f6a:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5f6e:	cbz	r0, 5f84 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5f70:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5f72:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5f76:	ldr	r2, [r5, #28]
    5f78:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    5f7a:	itte	ls
    5f7c:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    5f7e:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    5f80:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    5f82:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    5f84:	mov.w	r0, #4294967295
    5f88:	pop	{r4, r5, r6, pc}
    5f8a:	ldr	r1, [r0, #24]
    5f8c:	movs	r2, #2
    5f8e:	add.w	r1, r1, r4, lsr #7
    5f92:	add.w	r0, r0, #560	; 0x230
    5f96:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5f9a:	cmp	r0, #0
    5f9c:	beq.n	5f84 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5f9e:	and.w	r1, r4, #127	; 0x7f
    5fa2:	ldr.w	r3, [r0, r1, lsl #2]
    5fa6:	b.n	5f76 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    5fa8:	mov.w	r0, #4294967295
}
    5fac:	bx	lr
    5fae:	nop

00005fb0 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5fb0:	cmp	r1, #1
    5fb2:	bls.n	5ff0 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5fb4:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5fb6:	ldr	r3, [r0, #28]
    5fb8:	cmp	r1, r3
    5fba:	bhi.n	5fca <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    5fbc:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5fbe:	cmp	r3, #32
    5fc0:	mov	r5, r2
    5fc2:	mov	r4, r1
    5fc4:	beq.n	5ff4 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5fc6:	cmp	r3, #16
    5fc8:	beq.n	5fce <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5fca:	movs	r0, #0
    5fcc:	pop	{r3, r4, r5, pc}
    5fce:	ldr	r3, [r0, #24]
    5fd0:	ubfx	r1, r1, #8, #8
    5fd4:	add	r1, r3
    5fd6:	add.w	r0, r0, #560	; 0x230
    5fda:	movs	r2, #3
    5fdc:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    5fe0:	mov	r3, r0
    5fe2:	cmp	r0, #0
    5fe4:	beq.n	5fca <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5fe6:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    5fe8:	movs	r0, #1
    5fea:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    5fee:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5ff0:	movs	r0, #0
}
    5ff2:	bx	lr
    5ff4:	ldr	r1, [r0, #24]
    5ff6:	movs	r2, #3
    5ff8:	add.w	r0, r0, #560	; 0x230
    5ffc:	add.w	r1, r1, r4, lsr #7
    6000:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6004:	mov	r3, r0
    6006:	cmp	r0, #0
    6008:	beq.n	5fca <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    600a:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    600e:	movs	r0, #1
    6010:	str.w	r5, [r3, r1, lsl #2]
    6014:	pop	{r3, r4, r5, pc}
    6016:	nop

00006018 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6018:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    601c:	ldr	r4, [r0, #12]
    601e:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6020:	sub	sp, #8
    6022:	mov	r5, r0
    6024:	mov	r7, r1
    6026:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6028:	itte	cc
    602a:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    602c:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    602e:	movcs	r6, #1
    6030:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    6032:	adds	r4, #1
    if (find > m_lastCluster) {
    6034:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6036:	add	r2, sp, #4
    6038:	mov	r0, r5
    603a:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    603c:	bls.n	6052 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    603e:	cbnz	r6, 6090 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6040:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6042:	adds	r4, #1
    if (find > m_lastCluster) {
    6044:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    6046:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    604a:	add	r2, sp, #4
    604c:	mov	r0, r5
    604e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6050:	bhi.n	603e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    6052:	cmp	r7, r4
    6054:	beq.n	6090 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6056:	bl	5f40 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    605a:	cmp	r0, #0
    605c:	blt.n	6090 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    605e:	beq.n	6030 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    6060:	ldr	r3, [sp, #4]
    6062:	cmp	r3, #0
    6064:	bne.n	6030 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    6066:	cbz	r6, 606a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    6068:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    606a:	mvn.w	r2, #4026531840	; 0xf0000000
    606e:	mov	r1, r4
    6070:	mov	r0, r5
    6072:	bl	5fb0 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    6076:	mov	r6, r0
    6078:	cbz	r0, 6090 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    607a:	cbnz	r7, 6082 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    607c:	str.w	r4, [r8]
  return true;
    6080:	b.n	6092 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    6082:	mov	r1, r7
    6084:	mov	r0, r5
    6086:	mov	r2, r4
    6088:	bl	5fb0 <FatPartition::fatPut(unsigned long, unsigned long)>
    608c:	cmp	r0, #0
    608e:	bne.n	607c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6090:	movs	r6, #0
}
    6092:	mov	r0, r6
    6094:	add	sp, #8
    6096:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    609a:	nop

0000609c <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    609c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    60a0:	ldr	r4, [r0, #12]

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60a2:	ldr	r3, [r0, #28]
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    60a4:	adds	r7, r4, #1

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60a6:	cmp	r7, r3
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    60a8:	sub	sp, #8
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60aa:	bhi.n	60fa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    60ac:	mov	sl, r2
    60ae:	mov	r9, r1
    60b0:	mov	r6, r0
    60b2:	adds	r4, #2
    60b4:	mov.w	r8, #1
    60b8:	b.n	60ce <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    60ba:	subs	r2, r4, r7
    60bc:	mov	r3, r4
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    60be:	cbz	r0, 60e4 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x48>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    60c0:	cmp	r2, r9
    60c2:	beq.n	6104 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x68>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60c4:	ldr	r2, [r6, #28]
    60c6:	cmp	r3, r2
    60c8:	add.w	r4, r4, #1
    60cc:	bhi.n	60fa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    60ce:	subs	r5, r4, #1
      // Can't find space.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    60d0:	mov	r1, r5
    60d2:	add	r2, sp, #4
    60d4:	mov	r0, r6
    60d6:	bl	5f40 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    60da:	cmp	r0, #0
    60dc:	blt.n	60fa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    60de:	ldr	r3, [sp, #4]
    60e0:	cmp	r3, #0
    60e2:	beq.n	60ba <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60e4:	ldr	r2, [r6, #28]
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    60e6:	mov	r3, r4
      goto fail;
    }
    if (f || fg == 0) {
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    60e8:	cmp	r7, r5
    60ea:	it	ne
    60ec:	movne.w	r8, #0
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60f0:	cmp	r3, r2
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    60f2:	mov	r7, r4
    60f4:	add.w	r4, r4, #1
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60f8:	bls.n	60ce <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

fail:
  return false;
    60fa:	movs	r4, #0
}
    60fc:	mov	r0, r4
    60fe:	add	sp, #8
    6100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      break;
    }
    endCluster++;
  }
  // Remember possible next free cluster.
  if (setStart) {
    6104:	cmp.w	r8, #0
    6108:	beq.n	610c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x70>
    m_allocSearchStart = endCluster;
    610a:	str	r5, [r6, #12]
    610c:	mvn.w	r2, #4026531840	; 0xf0000000
    6110:	mov	r1, r5
    6112:	mov	r0, r6
    6114:	bl	5fb0 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    6118:	mov	r4, r0
    611a:	cmp	r0, #0
    611c:	beq.n	60fa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    611e:	cmp	r7, r5
    6120:	bcc.n	6128 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8c>
    6122:	b.n	613e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    6124:	cmp	r5, r7
    6126:	bls.n	613e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    if (!fatPut(endCluster - 1, endCluster)) {
    6128:	add.w	r8, r5, #4294967295
    612c:	mov	r2, r5
    612e:	mov	r1, r8
    6130:	mov	r0, r6
    6132:	bl	5fb0 <FatPartition::fatPut(unsigned long, unsigned long)>
    6136:	mov	r5, r8
    6138:	cmp	r0, #0
    613a:	bne.n	6124 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x88>
    613c:	b.n	60fa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    613e:	str.w	r7, [sl]
  return true;
    6142:	b.n	60fc <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x60>

00006144 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6144:	push	{r4, r5, r6, lr}
    6146:	mov	r5, r0
    6148:	sub	sp, #8
    614a:	mov	r4, r1
    614c:	b.n	6164 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    614e:	bl	5fb0 <FatPartition::fatPut(unsigned long, unsigned long)>
    6152:	cbz	r0, 617a <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6154:	ldr	r3, [r5, #12]
    6156:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    6158:	itt	cc
    615a:	addcc.w	r4, r4, #4294967295
    615e:	strcc	r4, [r5, #12]
    }
    cluster = next;
    6160:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6162:	cbz	r6, 617c <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    6164:	add	r2, sp, #4
    6166:	mov	r1, r4
    6168:	mov	r0, r5
    616a:	bl	5f40 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    616e:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6170:	mov	r1, r4
    6172:	mov.w	r2, #0
    6176:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6178:	bge.n	614e <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    617a:	movs	r0, #0
}
    617c:	add	sp, #8
    617e:	pop	{r4, r5, r6, pc}

00006180 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6180:	push	{r3, r4, r5, r6, r7, lr}
    6182:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6184:	movs	r3, #0
  m_allocSearchStart = 1;
    6186:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    6188:	mov.w	r0, #4294967295
    618c:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    618e:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    6190:	str	r4, [r4, #40]	; 0x28
    6192:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6196:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6198:	strb.w	r3, [r4, #36]	; 0x24
    619c:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    61a0:	str	r0, [r4, #44]	; 0x2c
    61a2:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    61a6:	mov	r5, r2
    61a8:	cbz	r2, 61e2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    61aa:	cmp	r2, #4
    61ac:	bls.n	61b2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    61ae:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    61b0:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    61b2:	add.w	r6, r4, #36	; 0x24
    61b6:	mov	r2, r3
    61b8:	mov	r1, r3
    61ba:	mov	r0, r6
    61bc:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    61c0:	add.w	r5, r5, #268435456	; 0x10000000
    61c4:	subs	r5, #1
    61c6:	lsls	r5, r5, #4
    61c8:	add.w	r3, r0, #446	; 0x1be
    61cc:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    61ce:	cmp	r0, #0
    61d0:	beq.n	61ae <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    61d2:	ldrb	r1, [r2, #4]
    61d4:	cmp	r1, #0
    61d6:	beq.n	61ae <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    61d8:	ldrb	r3, [r3, r5]
    61da:	lsls	r3, r3, #25
    61dc:	bne.n	61ae <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    61de:	ldr	r5, [r2, #8]
    61e0:	b.n	61e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    61e2:	add.w	r6, r4, #36	; 0x24
    61e6:	mov	r0, r6
    61e8:	movs	r2, #0
    61ea:	mov	r1, r5
    61ec:	bl	5ec4 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    61f0:	cmp	r0, #0
    61f2:	beq.n	61ae <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    61f4:	ldrb	r3, [r0, #16]
    61f6:	cmp	r3, #2
    61f8:	bne.n	61ae <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    61fa:	ldrh.w	r3, [r0, #11]
    61fe:	cmp.w	r3, #512	; 0x200
    6202:	bne.n	61ae <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6204:	ldrb	r6, [r0, #13]
    6206:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6208:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    620a:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    620c:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    620e:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6210:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6212:	beq.n	6234 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    6214:	movs	r2, #1
    6216:	mov	r1, r2
    6218:	b.n	621c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    621a:	mov	r2, r3
    621c:	lsls	r1, r1, #1
    621e:	uxtb	r1, r1
    6220:	adds	r3, r2, #1
    6222:	cmp	r6, r1
    6224:	uxtb	r3, r3
    6226:	beq.n	6232 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    6228:	cmp	r3, #9
    622a:	bne.n	621a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    622c:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    622e:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6230:	pop	{r3, r4, r5, r6, r7, pc}
    6232:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6234:	ldrh	r1, [r0, #22]
    6236:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6238:	cbnz	r1, 623e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    623a:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    623c:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    623e:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6240:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6244:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6246:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6248:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    624a:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    624e:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6252:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6256:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6258:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    625c:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    625e:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6260:	cbnz	r1, 6264 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6262:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6264:	subs	r5, r5, r3
    6266:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6268:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    626c:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6270:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6272:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6274:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6276:	bls.n	628e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6278:	movw	r3, #65524	; 0xfff4
    627c:	cmp	r2, r3
    627e:	ittet	hi
    6280:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6282:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    6284:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    6286:	movhi	r3, #32
    6288:	strb	r3, [r4, #7]
  }
  return true;
    628a:	movs	r0, #1
    628c:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    628e:	movs	r3, #12
    6290:	strb	r3, [r4, #7]
    6292:	b.n	61ae <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>

00006294 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    6294:	cmp	r1, #4
    6296:	bls.n	62b2 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6298:	cmp	r1, #10
    629a:	bls.n	62aa <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    629c:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    629e:	itte	ls
    62a0:	addls.w	r1, r0, r1, lsl #1
    62a4:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    62a6:	movhi	r0, #0
}
    62a8:	bx	lr
    62aa:	add.w	r1, r0, r1, lsl #1
    62ae:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    62b0:	bx	lr
    62b2:	add.w	r1, r0, r1, lsl #1
    62b6:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    62ba:	bx	lr

000062bc <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    62bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    62c0:	ldrb	r3, [r0, #0]
    62c2:	cmp	r3, #32
    62c4:	bne.n	62ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    62c6:	ldrb.w	r3, [r0, #1]!
    62ca:	cmp	r3, #32
    62cc:	beq.n	62c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    62ce:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    62d0:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    62d2:	cmp	r3, #0
    62d4:	beq.w	64e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    62d8:	cmp	r3, #47	; 0x2f
    62da:	beq.n	633c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    62dc:	cmp	r3, #92	; 0x5c
    62de:	beq.n	6326 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    62e0:	sub.w	r4, r3, #34	; 0x22
    62e4:	uxtb	r4, r4
    62e6:	cmp	r4, #29
    62e8:	bls.n	632c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    62ea:	ldr.w	lr, [pc, #536]	; 6504 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    62ee:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    62f0:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    62f2:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    62f4:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    62f8:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    62fa:	beq.n	6326 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    62fc:	cmp	r5, #94	; 0x5e
    62fe:	bhi.n	6326 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6300:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6304:	sub.w	r5, r3, #34	; 0x22
    6308:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    630a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    630c:	cmp	r3, #0
    630e:	beq.w	64b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    6312:	cmp	r3, #47	; 0x2f
    6314:	beq.n	633e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6316:	cmp	r3, #92	; 0x5c
    6318:	lsr.w	r7, lr, r5
    631c:	beq.n	6326 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    631e:	cmp	r5, #29
    6320:	bhi.n	62f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    6322:	lsls	r7, r7, #31
    6324:	bpl.n	62f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6326:	movs	r0, #0
    6328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    632c:	ldr	r5, [pc, #468]	; (6504 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    632e:	lsr.w	r4, r5, r4
    6332:	lsls	r4, r4, #31
    6334:	bpl.n	62ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6336:	movs	r0, #0
    6338:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    633c:	movs	r4, #0
    633e:	adds	r7, r0, r4
    6340:	mov	r6, r7
    6342:	mov	r5, r4
    6344:	movs	r3, #47	; 0x2f
    6346:	b.n	634e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    6348:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    634c:	adds	r5, #1
    634e:	cmp	r3, #32
    6350:	beq.n	6348 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    6352:	cmp	r3, #47	; 0x2f
    6354:	beq.n	6348 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    6356:	add	r5, r0
    6358:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    635a:	cbz	r4, 6370 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    635c:	mov	r2, r7
    c = path[len - 1];
    635e:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    6362:	cmp	r3, #46	; 0x2e
    6364:	beq.n	636c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    6366:	cmp	r3, #32
    6368:	bne.w	64be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    636c:	subs	r4, #1
    636e:	bne.n	635e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    6370:	mov.w	r5, #4294967295
    6374:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    6376:	str	r3, [r1, #4]
    6378:	add.w	r6, r1, #23
    637c:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6380:	movs	r2, #32
    6382:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    6386:	cmp	r3, r6
    6388:	bne.n	6382 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    638a:	subs	r6, r0, #1
    638c:	movs	r2, #0
    638e:	b.n	6392 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    6390:	adds	r2, #1
    6392:	ldrb.w	r3, [r6, #1]!
    6396:	cmp	r3, #46	; 0x2e
    6398:	beq.n	6390 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    639a:	cmp	r3, #32
    639c:	beq.n	6390 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    639e:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    63a2:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    63a4:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    63a8:	beq.n	63c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    63aa:	ldrb	r7, [r0, r5]
    63ac:	cmp	r7, #46	; 0x2e
    63ae:	add.w	r6, r0, r5
    63b2:	bne.n	63be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    63b4:	b.n	63c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    63b6:	ldrb.w	r7, [r6, #-1]!
    63ba:	cmp	r7, #46	; 0x2e
    63bc:	beq.n	63c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    63be:	adds.w	r5, r5, #4294967295
    63c2:	bcs.n	63b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    63c4:	cmp	r2, r4
    63c6:	mov.w	r9, #0
    63ca:	bge.w	64f0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    63ce:	mov	r6, r9
    63d0:	mov	sl, r9
    63d2:	movs	r7, #7
    63d4:	mov.w	r8, #8
    63d8:	b.n	6426 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    63da:	cmp	r3, #46	; 0x2e
    63dc:	beq.n	646e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    63de:	cmp	r3, #34	; 0x22
    63e0:	beq.n	63fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    63e2:	cmp	r3, #124	; 0x7c
    63e4:	beq.n	63fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    63e6:	sub.w	lr, r3, #42	; 0x2a
    63ea:	cmp.w	lr, #5
    63ee:	bls.n	6482 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    63f0:	sub.w	lr, r3, #58	; 0x3a
    63f4:	cmp.w	lr, #5
    63f8:	bhi.n	64ac <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    63fa:	cmp	r5, r2
    63fc:	beq.n	6472 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    63fe:	cmp	r7, r6
    6400:	bcc.n	6456 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6402:	mov.w	ip, #0
      c = '_';
    6406:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6408:	add.w	lr, r6, #1
    640c:	add.w	fp, r1, r6
    6410:	uxtb.w	r6, lr
      if (i < 7) {
    6414:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6416:	strb.w	r3, [fp, #13]
      if (i < 7) {
    641a:	bhi.n	641e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    641c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    641e:	adds	r2, #1
    6420:	cmp	r2, r4
    6422:	bge.n	6434 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    6424:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6426:	cmp	r3, #32
    6428:	bne.n	63da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    642a:	adds	r2, #1
    642c:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    642e:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6432:	blt.n	6424 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6434:	ldrb	r3, [r1, #13]
    6436:	cmp	r3, #32
    6438:	beq.w	6326 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    643c:	cmp.w	ip, #0
    6440:	beq.n	64d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6442:	tst.w	sl, r9
    6446:	it	ne
    6448:	movne.w	r9, #2
    644c:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6450:	movs	r0, #1
    6452:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6456:	cmp	r7, #10
    6458:	beq.n	64ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    645a:	cmp	r5, r2
    645c:	blt.n	64ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    645e:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6460:	movs	r7, #10
      i = 8;    // Place for extension.
    6462:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6464:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    6468:	mov.w	ip, #0
    646c:	b.n	641e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    646e:	cmp	r5, r2
    6470:	bne.n	642a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6472:	cmp	r7, #10
    6474:	beq.n	64ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    6476:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6478:	movs	r7, #10
      i = 8;    // Place for extension.
    647a:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    647c:	mov.w	r8, #16
    6480:	b.n	641e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6482:	cmp	r3, #45	; 0x2d
    6484:	bne.n	63fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6486:	sub.w	lr, r3, #33	; 0x21
    648a:	cmp.w	lr, #93	; 0x5d
    648e:	bhi.n	63fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6490:	cmp	r5, r2
    6492:	beq.n	6472 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    6494:	cmp	r7, r6
    6496:	bcc.n	6456 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    6498:	sub.w	lr, r3, #97	; 0x61
    649c:	cmp.w	lr, #25
    64a0:	bhi.n	64f4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    64a2:	subs	r3, #32
    64a4:	uxtb	r3, r3
        lc |= bit;
    64a6:	orr.w	r9, r8, r9
    64aa:	b.n	6408 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    64ac:	sub.w	lr, r3, #91	; 0x5b
    64b0:	cmp.w	lr, #2
    64b4:	bls.n	63fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    64b6:	b.n	6486 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    64b8:	str	r7, [r2, #0]
    64ba:	adds	r7, r0, r4
    64bc:	b.n	635c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    64be:	cmp	r4, #255	; 0xff
    64c0:	bgt.w	6326 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    64c4:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    64c6:	mov	r3, r4
    64c8:	b.n	6376 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    64ca:	ldrb	r3, [r1, #13]
    64cc:	cmp	r3, #32
    64ce:	beq.w	6326 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    64d2:	ldrb	r3, [r1, #12]
    64d4:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    64d6:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    64d8:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    64da:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    64dc:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    64de:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    64e0:	strb	r2, [r3, #14]
    64e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    64e6:	str	r0, [r2, #0]
    64e8:	mov	r4, r3
    64ea:	mov.w	r5, #4294967295
    64ee:	b.n	6376 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    64f0:	mov	sl, r9
    64f2:	b.n	6434 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    64f4:	sub.w	lr, r3, #65	; 0x41
    64f8:	cmp.w	lr, #25
        uc |= bit;
    64fc:	it	ls
    64fe:	orrls.w	sl, r8, sl
    6502:	b.n	6408 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    6504:	.word	0x35000101

00006508 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6508:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    650c:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    650e:	mov	r6, r1
    6510:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6512:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6516:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    651a:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    651e:	ldr	r0, [r6, #4]
    6520:	ldr	r1, [r6, #8]
    6522:	add.w	r3, r8, r0
    6526:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6528:	cbz	r0, 653c <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    652a:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    652c:	ldrb.w	r2, [r1], #1
    6530:	add.w	r3, r3, r3, lsl #5
    6534:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6536:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6538:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    653a:	bne.n	652c <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    653c:	cmp	r7, #3
    653e:	it	cs
    6540:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6542:	adds	r2, r7, #4
    6544:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    6546:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    654a:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    654c:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    654e:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6550:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6552:	ite	ls
    6554:	addls	r1, #48	; 0x30
    6556:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6558:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    655a:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    655e:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6560:	bcc.n	6546 <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6562:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6564:	movs	r1, #0
    6566:	strb.w	r9, [r3, #13]
    656a:	mov	r0, r4
    656c:	bl	5aa0 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    6570:	movs	r1, #1
    6572:	mov	r0, r4
    6574:	bl	5a60 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6578:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    657a:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    657c:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    657e:	cbz	r0, 65ac <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6580:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6584:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6586:	cmp.w	lr, #0
    658a:	beq.n	65b8 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    658c:	ldrb	r3, [r3, #11]
    658e:	lsls	r3, r3, #28
    6590:	bmi.n	6570 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    6592:	bl	c130 <memcmp>
    6596:	cmp	r0, #0
    6598:	bne.n	6570 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    659a:	add.w	r8, r8, #1
    659e:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    65a2:	cmp.w	r8, #100	; 0x64
    65a6:	bne.n	651e <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    65a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    65ac:	ldrb	r0, [r4, #1]
    65ae:	clz	r0, r0
    65b2:	lsrs	r0, r0, #5
    65b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    65b8:	movs	r0, #1
    65ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    65be:	nop

000065c0 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    65c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    65c4:	ldrb	r4, [r1, #0]
    65c6:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    65ca:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    65cc:	beq.n	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    65ce:	ldrb	r4, [r0, #0]
    65d0:	cbz	r4, 65da <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    65d2:	movs	r0, #0
}
    65d4:	add	sp, #52	; 0x34
    65d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    65da:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    65dc:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    65e0:	lsls	r4, r4, #30
    65e2:	bne.n	666a <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    65e4:	mov.w	r8, #1
    65e8:	mov	r6, r1
    65ea:	mov	fp, r2
    65ec:	str	r0, [sp, #36]	; 0x24
    65ee:	movs	r1, #0
    65f0:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    65f2:	mov	r7, r1
    65f4:	str	r3, [sp, #28]
    65f6:	bl	5aa0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    65fa:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    65fe:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6600:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    6602:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6604:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    6606:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6608:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    660a:	movs	r1, #1
    660c:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    660e:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    6610:	bl	5a60 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6614:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    6618:	mov	r3, r0
    661a:	cmp	r0, #0
    661c:	beq.w	6738 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6620:	ldrb	r2, [r0, #0]
    6622:	cmp	r2, #229	; 0xe5
    6624:	beq.n	669c <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    6626:	cmp	r2, #0
    6628:	beq.n	669c <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    662a:	cmp	r4, r8
    662c:	it	cc
    662e:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6630:	cmp	r2, #46	; 0x2e
    6632:	beq.n	6696 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6634:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6636:	cmp	r1, #15
    6638:	beq.n	66b8 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    663a:	and.w	r1, r1, #8
    663e:	and.w	r2, r1, #255	; 0xff
    6642:	cbnz	r1, 6696 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    6644:	cmp.w	r9, #0
    6648:	bne.w	6910 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    664c:	mov	r0, r3
    664e:	movs	r2, #11
    6650:	ldr	r1, [sp, #16]
    6652:	bl	c130 <memcmp>
    6656:	cmp	r0, #0
    6658:	bne.n	660a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    665a:	ldrb.w	r3, [fp]
    665e:	lsls	r0, r3, #31
    6660:	bpl.w	6938 <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    6664:	movs	r3, #1
    6666:	str	r3, [sp, #20]
    6668:	b.n	660a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    666a:	ldr	r5, [pc, #724]	; (6940 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    666c:	add.w	r4, sl, #12
    6670:	umull	r4, r8, r5, r4
    6674:	mov.w	r8, r8, lsr #2
    6678:	add.w	r8, r8, #1
    667c:	uxtb.w	r8, r8
    6680:	b.n	65e8 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    6682:	ldr	r1, [sp, #12]
    6684:	subs	r1, #1
    6686:	uxtb	r1, r1
    6688:	cmp	r2, r1
    668a:	str	r1, [sp, #12]
    668c:	bne.n	6696 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    668e:	ldrb	r2, [r3, #13]
    6690:	ldr	r1, [sp, #24]
    6692:	cmp	r1, r2
    6694:	beq.n	66ce <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6696:	mov.w	r9, #0
    669a:	b.n	660a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    669c:	cmp	r4, #0
    669e:	it	eq
    66a0:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    66a2:	cmp	r4, r8
        freeFound++;
    66a4:	itt	cc
    66a6:	addcc	r4, #1
    66a8:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    66aa:	cmp	r2, #0
    66ac:	beq.n	6740 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    66ae:	cmp	r2, #229	; 0xe5
    66b0:	bne.n	6630 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    66b2:	mov.w	r9, #0
    66b6:	b.n	660a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    66b8:	cmp.w	r9, #0
    66bc:	bne.n	6682 <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    66be:	lsls	r5, r2, #25
    66c0:	bpl.n	660a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    66c2:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    66c6:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    66c8:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    66cc:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    66ce:	ldr	r2, [sp, #12]
    66d0:	subs	r2, #1
    66d2:	add.w	r5, r2, r2, lsl #1
    66d6:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    66da:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    66dc:	mov	r2, r5
      if (k >= len) {
    66de:	bls.n	6696 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    66e0:	add.w	r1, r5, #13
    66e4:	str.w	r9, [sp, #32]
    66e8:	mov	r9, r1
    66ea:	b.n	6714 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    66ec:	ldr.w	r0, [fp, #8]
    66f0:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    66f2:	cmp.w	ip, #25
    66f6:	it	ls
    66f8:	addls	r1, #32
    66fa:	sub.w	r0, r2, #65	; 0x41
    66fe:	it	ls
    6700:	uxtbls	r1, r1
    6702:	cmp	r0, #25
    6704:	itt	ls
    6706:	addls	r2, #32
    6708:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    670a:	cmp	r2, r1
    670c:	bne.n	6696 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    670e:	cmp	lr, r9
    6710:	beq.n	6798 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    6712:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    6714:	subs	r1, r2, r5
    6716:	uxtb	r1, r1
    6718:	mov	r0, r3
    671a:	bl	6294 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    671e:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6720:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6722:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6726:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    672a:	beq.w	6902 <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    672e:	cmp	r0, #255	; 0xff
    6730:	bls.n	66ec <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6732:	mov.w	r9, #0
    6736:	b.n	660a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    6738:	ldrb	r3, [r6, #1]
    673a:	cmp	r3, #0
    673c:	bne.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6740:	ldr	r2, [sp, #28]
    6742:	mov	r3, r2
    6744:	lsls	r2, r3, #22
    6746:	bpl.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    674a:	and.w	r3, r3, #3
    674e:	subs	r3, #1
    6750:	cmp	r3, #1
    6752:	bhi.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    6756:	cmp	r4, #0
    6758:	it	eq
    675a:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    675c:	cmp	r4, r8
    675e:	bcc.n	6768 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    6760:	b.n	679e <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6762:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6764:	cmp	r8, r4
    6766:	bls.n	679e <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    6768:	movs	r1, #0
    676a:	mov	r0, r6
    676c:	bl	5a60 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6770:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    6772:	cmp	r0, #0
    6774:	bne.n	6762 <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    6776:	ldrb	r3, [r6, #1]
    6778:	cbz	r3, 6784 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    677a:	b.n	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    677c:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    677e:	ldrb	r3, [r3, #4]
    6780:	cmp	r3, #1
    6782:	bhi.n	679e <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6784:	cmp	r8, r4
    6786:	bls.n	679e <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6788:	mov	r0, r6
    678a:	bl	5608 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    678e:	adds	r4, #16
    6790:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6792:	cmp	r0, #0
    6794:	bne.n	677c <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    6796:	b.n	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6798:	ldr.w	r9, [sp, #32]
    679c:	b.n	660a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    679e:	ldr	r3, [sp, #20]
    67a0:	cbz	r3, 67b0 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    67a2:	mov	r1, fp
    67a4:	mov	r0, r6
    67a6:	bl	6508 <FatFile::lfnUniqueSfn(fname_t*)>
    67aa:	cmp	r0, #0
    67ac:	beq.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    67b0:	lsls	r1, r7, #5
    67b2:	mov	r0, r6
    67b4:	bl	5aa0 <FatFile::seekSet(unsigned long)>
    67b8:	cmp	r0, #0
    67ba:	beq.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    67be:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    67c2:	ands.w	r9, r8, #255	; 0xff
    67c6:	beq.n	687c <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    67c8:	orr.w	r4, r9, #64	; 0x40
    67cc:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    67ce:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    67d0:	movs	r7, #0
    67d2:	movs	r1, #0
    67d4:	mov	r0, r6
    67d6:	bl	5a60 <FatFile::readDirCache(bool)>
    if (!ldir) {
    67da:	cmp	r0, #0
    67dc:	beq.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    67e0:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    67e2:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    67e6:	cmp	r9, r5
    67e8:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    67ec:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    67f0:	ite	ne
    67f2:	movne	r1, r5
    67f4:	moveq	r1, r4
    67f6:	strb.w	r3, [r2, #36]	; 0x24
    67fa:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    67fe:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    6802:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6804:	strb	r1, [r0, #0]
    6806:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    680a:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    680c:	ldrb.w	r8, [lr, #1]!
    6810:	lsrs	r2, r3, #1
    6812:	orr.w	r3, r2, r3, lsl #7
    6816:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    681a:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    681c:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    681e:	bne.n	680c <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6820:	and.w	r1, r1, #31
    6824:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6826:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6828:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    682c:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6830:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6832:	add.w	r2, r1, r2, lsl #2
    6836:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    6838:	movs	r3, #0
    683a:	b.n	685c <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    683c:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    683e:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6842:	bls.n	686e <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6844:	cmp	r3, #10
    6846:	ite	ls
    6848:	strhls	r1, [r0, #0]
    684a:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    684c:	adds	r3, #1
    684e:	uxtb	r3, r3
    6850:	cmp	r3, #13
    6852:	add.w	r2, r2, #1
    6856:	add.w	r0, r0, #2
    685a:	beq.n	6874 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    685c:	cmp	sl, r2
    685e:	bhi.n	683c <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    6860:	ite	ne
    6862:	movne.w	r1, #4294967295
    6866:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6868:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    686a:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    686c:	bhi.n	6844 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    686e:	strh.w	r1, [r0, #-3]
    6872:	b.n	684c <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6874:	subs	r5, #1
    6876:	ands.w	r5, r5, #255	; 0xff
    687a:	bne.n	67d2 <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    687c:	movs	r1, #0
    687e:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6880:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    6882:	bl	5a60 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6886:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    688a:	mov	r4, r0
    688c:	cmp	r0, #0
    688e:	beq.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    6892:	movs	r2, #32
    6894:	movs	r1, #0
    6896:	bl	c25c <memset>
  memcpy(dir->name, fname->sfn, 11);
    689a:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    689c:	ldr	r2, [pc, #164]	; (6944 <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    689e:	ldr.w	r1, [r3, #13]!
    68a2:	ldr	r0, [r3, #4]
    68a4:	str	r0, [r4, #4]
    68a6:	str	r1, [r4, #0]
    68a8:	ldrh	r1, [r3, #8]
    68aa:	ldrb	r3, [r3, #10]
    68ac:	strb	r3, [r4, #10]
    68ae:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    68b0:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    68b4:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    68b6:	and.w	r3, r3, #24
    68ba:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    68bc:	cbz	r7, 68e2 <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    68be:	add.w	r2, sp, #43	; 0x2b
    68c2:	add.w	r1, sp, #46	; 0x2e
    68c6:	add	r0, sp, #44	; 0x2c
    68c8:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    68ca:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    68ce:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    68d2:	ldrb.w	r1, [sp, #43]	; 0x2b
    68d6:	strb	r1, [r4, #13]
    68d8:	strh	r3, [r4, #16]
    68da:	strh	r3, [r4, #18]
    68dc:	strh	r3, [r4, #24]
    68de:	strh	r2, [r4, #14]
    68e0:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    68e2:	ldr	r2, [r6, #8]
    68e4:	ldrb.w	r3, [r2, #36]	; 0x24
    68e8:	orr.w	r3, r3, #1
    68ec:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    68f0:	str.w	r9, [sp]
    68f4:	ldr	r3, [sp, #28]
    68f6:	ldr	r0, [sp, #36]	; 0x24
    68f8:	mov	r2, r5
    68fa:	mov	r1, r6
    68fc:	bl	5b34 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6900:	b.n	65d4 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6902:	cmp	r0, #0
    6904:	ldr.w	r9, [sp, #32]
    6908:	it	ne
    690a:	movne.w	r9, #0
    690e:	b.n	660a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6910:	ldr	r1, [sp, #12]
    6912:	cmp	r1, #1
    6914:	bne.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6918:	subs	r4, r3, #1
    691a:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    691c:	ldrb.w	r0, [r4, #1]!
    6920:	lsrs	r1, r2, #1
    6922:	orr.w	r2, r1, r2, lsl #7
    6926:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    692a:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    692c:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    692e:	bne.n	691c <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6930:	ldr	r3, [sp, #24]
    6932:	cmp	r3, r2
    6934:	bne.w	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6938:	ldr	r3, [sp, #28]
    693a:	lsls	r1, r3, #20
    693c:	bpl.n	68f0 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    693e:	b.n	65d2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6940:	.word	0x4ec4ec4f
    6944:	.word	0x2001aa1c

00006948 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6948:	push	{r4, lr}
    694a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    694c:	ldr	r0, [r0, #56]	; 0x38
    694e:	cbz	r0, 695c <FsBaseFile::close()+0x14>
    6950:	bl	5750 <FatFile::close()>
    6954:	cbz	r0, 695c <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    6956:	movs	r3, #0
    6958:	str	r3, [r4, #56]	; 0x38
    return true;
    695a:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    695c:	ldr	r0, [r4, #60]	; 0x3c
    695e:	cbz	r0, 696c <FsBaseFile::close()+0x24>
    6960:	bl	4060 <ExFatFile::close()>
    6964:	cbz	r0, 696c <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    6966:	movs	r3, #0
    6968:	str	r3, [r4, #60]	; 0x3c
    696a:	pop	{r4, pc}
    return true;
  }
  return false;
    696c:	movs	r0, #0
}
    696e:	pop	{r4, pc}

00006970 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    6970:	cbz	r1, 69e6 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    6972:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6976:	mov	r4, r1
    6978:	mov	r5, r0
    697a:	mov	r8, r3
    697c:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    697e:	bl	6948 <FsBaseFile::close()>
  if (vol->m_fVol) {
    6982:	ldr.w	r6, [r4, #1144]	; 0x478
    6986:	cbz	r6, 69b4 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    6988:	mov	r1, r5
    698a:	movs	r0, #36	; 0x24
    698c:	bl	6ab4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6990:	movs	r1, #0
    6992:	strb	r1, [r0, #0]
    6994:	strb	r1, [r0, #1]
    6996:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6998:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    699c:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    699e:	mov	r3, r8
    69a0:	mov	r2, r7
    69a2:	bl	5880 <FatFile::open(FatVolume*, char const*, int)>
    69a6:	cbz	r0, 69ae <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    69a8:	movs	r0, #1
    69aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    69ae:	str	r0, [r5, #56]	; 0x38
    return false;
    69b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    69b4:	ldr.w	r3, [r4, #1148]	; 0x47c
    69b8:	cbz	r3, 69ea <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    69ba:	mov	r1, r5
    69bc:	movs	r0, #56	; 0x38
    69be:	bl	6ab4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    69c2:	strb.w	r6, [r0, #49]	; 0x31
    69c6:	strb.w	r6, [r0, #50]	; 0x32
    69ca:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    69ce:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    69d2:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    69d4:	mov	r3, r8
    69d6:	mov	r2, r7
    69d8:	bl	4904 <ExFatFile::open(ExFatVolume*, char const*, int)>
    69dc:	cmp	r0, #0
    69de:	bne.n	69a8 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    69e0:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    69e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    69e6:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    69e8:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    69ea:	movs	r0, #0
    69ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000069f0 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    69f0:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    69f2:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    69f4:	mov	r5, r0
  m_blockDev = blockDev;
    69f6:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    69fa:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    69fe:	mov	r1, r0
    6a00:	mov.w	r0, #1144	; 0x478
    6a04:	bl	6ab4 <operator new(unsigned int, unsigned long*)>
    6a08:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    6a0a:	str	r6, [r0, #4]
    invalidate();
    6a0c:	bl	4934 <FsCache::invalidate()>
    6a10:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    6a14:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    6a18:	bl	4934 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    6a1c:	strb.w	r6, [r4, #1084]	; 0x43c
    6a20:	strb.w	r6, [r4, #1137]	; 0x471
    6a24:	strb.w	r6, [r4, #1138]	; 0x472
    6a28:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6a2c:	ldr.w	r1, [r5, #1152]	; 0x480
    6a30:	str.w	r4, [r5, #1148]	; 0x47c
    6a34:	mov	r0, r4
    6a36:	movs	r2, #1
    6a38:	bl	4ac4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    6a3c:	cbnz	r0, 6a7a <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6a3e:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6a40:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6a42:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    6a46:	mov.w	r0, #1120	; 0x460
    6a4a:	bl	6ab4 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    6a4e:	strb	r6, [r0, #7]
    6a50:	strb.w	r6, [r0, #1084]	; 0x43c
    6a54:	strb.w	r6, [r0, #1085]	; 0x43d
    6a58:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6a5c:	movs	r2, #1
    6a5e:	ldr.w	r1, [r5, #1152]	; 0x480
    6a62:	str.w	r0, [r5, #1144]	; 0x478
    6a66:	mov	r4, r0
    6a68:	bl	6180 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6a6c:	cbnz	r0, 6a98 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    6a6e:	ldr	r3, [pc, #64]	; (6ab0 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    6a70:	movs	r0, #0
    6a72:	str	r0, [r3, #0]
  m_fVol = nullptr;
    6a74:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    6a78:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6a7a:	add.w	r6, r4, #1088	; 0x440
    6a7e:	mov	r0, r6
    6a80:	bl	4060 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    6a84:	mov	r1, r4
    6a86:	mov	r0, r6
    6a88:	bl	4074 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6a8c:	cmp	r0, #0
    6a8e:	beq.n	6a3e <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    6a90:	ldr	r3, [pc, #28]	; (6ab0 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    6a92:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6a94:	str	r5, [r3, #0]
  return true;
    6a96:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6a98:	addw	r6, r4, #1084	; 0x43c
    6a9c:	mov	r0, r6
    6a9e:	bl	5750 <FatFile::close()>
    return m_vwd.openRoot(this);
    6aa2:	mov	r1, r4
    6aa4:	mov	r0, r6
    6aa6:	bl	5890 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6aaa:	cmp	r0, #0
    6aac:	bne.n	6a90 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    6aae:	b.n	6a6e <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    6ab0:	.word	0x2001aa20

00006ab4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    6ab4:	mov	r0, r1
    6ab6:	bx	lr

00006ab8 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6ab8:	ldrb	r0, [r0, #19]
    6aba:	bx	lr

00006abc <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6abc:	ldrb	r0, [r0, #21]
    6abe:	bx	lr

00006ac0 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    6ac0:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6ac2:	ldr	r4, [r0, #0]
    6ac4:	ldr	r4, [r4, #12]
    6ac6:	movs	r3, #1
    6ac8:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    6aca:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6ace:	bx	ip

00006ad0 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6ad0:	ldrb	r0, [r0, #22]
    6ad2:	bx	lr

00006ad4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    6ad4:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    6ad6:	ldr	r4, [r0, #0]
    6ad8:	ldr	r4, [r4, #28]
    6ada:	movs	r3, #1
    6adc:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    6ade:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    6ae2:	bx	ip

00006ae4 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6ae4:	bx	lr
    6ae6:	nop

00006ae8 <SdSpiCard::~SdSpiCard()>:
    6ae8:	push	{r4, lr}
    6aea:	movs	r1, #24
    6aec:	mov	r4, r0
    6aee:	bl	a2a0 <operator delete(void*, unsigned int)>
    6af2:	mov	r0, r4
    6af4:	pop	{r4, pc}
    6af6:	nop

00006af8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6af8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6afc:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6afe:	ldrb	r1, [r0, #16]
    6b00:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6b02:	mov	r4, r0
    6b04:	mov	r5, r2
    6b06:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6b08:	beq.n	6b1a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    6b0a:	ldr	r3, [r4, #0]
    6b0c:	mov	r0, r4
    6b0e:	ldr	r3, [r3, #20]
    6b10:	blx	r3
    6b12:	cbnz	r0, 6b4c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    6b14:	movs	r0, #0
    6b16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6b1a:	ldr	r3, [r0, #12]
    6b1c:	cmp	r3, r6
    6b1e:	bne.n	6b0a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6b20:	movs	r6, #0
    6b22:	cbz	r7, 6b3c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    6b24:	ldr	r3, [r4, #0]
    6b26:	mov	r1, r5
    6b28:	ldr	r3, [r3, #68]	; 0x44
    6b2a:	mov	r0, r4
    6b2c:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6b2e:	adds	r6, #1
    6b30:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    6b34:	cmp	r0, #0
    6b36:	beq.n	6b14 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6b38:	cmp	r7, r6
    6b3a:	bne.n	6b24 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    6b3c:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    6b3e:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    6b40:	add	r7, r3
    6b42:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    6b44:	cbnz	r2, 6b62 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    6b46:	movs	r0, #1
    6b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    6b4c:	ldr	r3, [r4, #0]
    6b4e:	mov	r1, r6
    6b50:	ldr	r3, [r3, #72]	; 0x48
    6b52:	mov	r0, r4
    6b54:	blx	r3
    6b56:	cmp	r0, #0
    6b58:	beq.n	6b14 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    6b5a:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    6b5c:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    6b5e:	strb	r3, [r4, #16]
    6b60:	b.n	6b20 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6b62:	ldr	r3, [r4, #0]
    6b64:	mov	r0, r4
    6b66:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    6b68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6b6c:	bx	r3
    6b6e:	nop

00006b70 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    6b70:	push	{r4, lr}
    6b72:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    6b74:	adds	r0, #4
    6b76:	bl	8120 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    6b7a:	ldrb	r0, [r4, #18]
    6b7c:	movs	r1, #0
    6b7e:	bl	82a0 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6b82:	movs	r3, #1
    6b84:	strb	r3, [r4, #20]
    6b86:	pop	{r4, pc}

00006b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    6b88:	push	{r3, r4, r5, lr}
    6b8a:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6b8c:	movs	r1, #1
    6b8e:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6b90:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6b92:	bl	82a0 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6b96:	mov	r0, r5
    6b98:	movs	r1, #255	; 0xff
    6b9a:	bl	8234 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    6b9e:	mov	r0, r5
    6ba0:	bl	81b0 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6ba4:	movs	r3, #0
    6ba6:	strb	r3, [r4, #20]
    6ba8:	pop	{r3, r4, r5, pc}
    6baa:	nop

00006bac <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6bac:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    6bae:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6bb0:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    6bb2:	cbnz	r7, 6bb8 <SdSpiCard::isBusy()+0xc>
    6bb4:	bl	6b70 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    6bb8:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6bba:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6bbc:	mov	r0, r5
    6bbe:	bl	81f8 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    6bc2:	cmp	r0, #255	; 0xff
    6bc4:	add.w	r3, r4, #4294967295
    6bc8:	beq.n	6be6 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    6bca:	ands.w	r4, r3, #255	; 0xff
    6bce:	bne.n	6bbc <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    6bd0:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    6bd2:	cbnz	r7, 6bd8 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6bd4:	ldrb	r3, [r6, #20]
    6bd6:	cbnz	r3, 6bdc <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6bd8:	mov	r0, r4
    6bda:	pop	{r3, r4, r5, r6, r7, pc}
    6bdc:	mov	r0, r6
    6bde:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6be2:	mov	r0, r4
    6be4:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    6be6:	movs	r4, #0
    6be8:	b.n	6bd2 <SdSpiCard::isBusy()+0x26>
    6bea:	nop

00006bec <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    6bec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bf0:	ldr	r6, [pc, #116]	; (6c68 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    6bf2:	sub	sp, #12
    6bf4:	ldr	r3, [r6, #0]
    6bf6:	str	r3, [sp, #0]
	return ret;
    6bf8:	ldr	r5, [sp, #0]
    6bfa:	mov	r4, r0
    6bfc:	mov	r8, r1
    6bfe:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    6c00:	uxth	r5, r5
    6c02:	adds	r7, r0, #4
    6c04:	b.n	6c16 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c06:	ldr	r3, [r6, #0]
    6c08:	str	r3, [sp, #4]
	return ret;
    6c0a:	ldr	r3, [sp, #4]
    6c0c:	uxth	r3, r3
    6c0e:	subs	r3, r3, r5
    6c10:	cmp.w	r3, #300	; 0x12c
    6c14:	bgt.n	6c3c <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    6c16:	mov	r0, r7
    6c18:	bl	81f8 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    6c1c:	cmp	r0, #255	; 0xff
    6c1e:	strb	r0, [r4, #21]
    6c20:	beq.n	6c06 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    6c22:	cmp	r0, #254	; 0xfe
    6c24:	beq.n	6c42 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6c26:	movs	r3, #24
    6c28:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6c2a:	ldrb	r0, [r4, #20]
    6c2c:	cbz	r0, 6c36 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    6c2e:	mov	r0, r4
    6c30:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    6c34:	movs	r0, #0
}
    6c36:	add	sp, #12
    6c38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6c3c:	movs	r3, #29
    6c3e:	strb	r3, [r4, #19]
    6c40:	b.n	6c2a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    6c42:	mov	r2, r9
    6c44:	mov	r1, r8
    6c46:	mov	r0, r7
    6c48:	bl	8214 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    6c4c:	strb	r0, [r4, #21]
    6c4e:	cbz	r0, 6c56 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6c50:	movs	r3, #36	; 0x24
    6c52:	strb	r3, [r4, #19]
    6c54:	b.n	6c2a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6c56:	mov	r0, r7
    6c58:	bl	81f8 <SdSpiArduinoDriver::receive()>
    6c5c:	mov	r0, r7
    6c5e:	bl	81f8 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    6c62:	movs	r0, #1
    6c64:	b.n	6c36 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    6c66:	nop
    6c68:	.word	0x2001aa80

00006c6c <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    6c6c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c6e:	ldr	r5, [pc, #52]	; (6ca4 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    6c70:	sub	sp, #12
    6c72:	ldr	r3, [r5, #0]
    6c74:	str	r3, [sp, #0]
	return ret;
    6c76:	ldr	r4, [sp, #0]
    6c78:	mov	r7, r1
    6c7a:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6c7c:	uxth	r4, r4
    6c7e:	b.n	6c8e <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c80:	ldr	r3, [r5, #0]
    6c82:	str	r3, [sp, #4]
	return ret;
    6c84:	ldr	r3, [sp, #4]
    6c86:	uxth	r3, r3
    6c88:	subs	r3, r3, r4
    6c8a:	cmp	r3, r7
    6c8c:	bgt.n	6c9e <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    6c8e:	mov	r0, r6
    6c90:	bl	81f8 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6c94:	cmp	r0, #255	; 0xff
    6c96:	bne.n	6c80 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    6c98:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    6c9a:	add	sp, #12
    6c9c:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    6c9e:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    6ca0:	add	sp, #12
    6ca2:	pop	{r4, r5, r6, r7, pc}
    6ca4:	.word	0x2001aa80

00006ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6ca8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    6cac:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6cae:	sub	sp, #8
    6cb0:	mov	r6, r0
    6cb2:	mov	r8, r1
    6cb4:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    6cb6:	cbnz	r3, 6cbc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    6cb8:	bl	6b70 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    6cbc:	cmp.w	r8, #0
    6cc0:	bne.n	6d18 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6cc2:	adds	r4, r6, #4
    6cc4:	mov	r0, r4
    6cc6:	orr.w	r1, r8, #64	; 0x40
    6cca:	bl	8234 <SdSpiArduinoDriver::send(unsigned char)>
    6cce:	add	r7, sp, #4
    6cd0:	add	r5, sp, #8
    6cd2:	ldrb.w	r1, [r5, #-1]!
    6cd6:	mov	r0, r4
    6cd8:	bl	8234 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    6cdc:	cmp	r5, r7
    6cde:	bne.n	6cd2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    6ce0:	cmp.w	r8, #0
    6ce4:	ite	eq
    6ce6:	moveq	r1, #149	; 0x95
    6ce8:	movne	r1, #135	; 0x87
    6cea:	mov	r0, r4
    6cec:	bl	8234 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6cf0:	mov	r0, r4
    6cf2:	bl	81f8 <SdSpiArduinoDriver::receive()>
    6cf6:	movs	r5, #11
    6cf8:	mov	r0, r4
    6cfa:	bl	81f8 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    6cfe:	lsls	r3, r0, #24
    6d00:	strb	r0, [r6, #21]
    6d02:	bmi.n	6d0a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    6d04:	add	sp, #8
    6d06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d0a:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    6d0c:	ands.w	r5, r3, #255	; 0xff
    6d10:	bne.n	6cf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    6d12:	add	sp, #8
    6d14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    6d18:	mov.w	r1, #300	; 0x12c
    6d1c:	mov	r0, r6
    6d1e:	bl	6c6c <SdSpiCard::waitNotBusy(unsigned short)>
    6d22:	b.n	6cc2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00006d24 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6d24:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6d26:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6d28:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6d2a:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6d2c:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6d2e:	blx	r3
  if (cardCommand(CMD58, 0)) {
    6d30:	mov	r0, r5
    6d32:	movs	r2, #0
    6d34:	movs	r1, #58	; 0x3a
    6d36:	bl	6ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6d3a:	cbnz	r0, 6d58 <SdSpiCard::readOCR(unsigned long*)+0x34>
    6d3c:	adds	r7, r5, #4
    6d3e:	adds	r4, r6, #4
    6d40:	mov	r0, r7
    6d42:	bl	81f8 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    6d46:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    6d4a:	cmp	r6, r4
    6d4c:	bne.n	6d40 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6d4e:	ldrb	r4, [r5, #20]
    6d50:	cbnz	r4, 6d6e <SdSpiCard::readOCR(unsigned long*)+0x4a>
    6d52:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    6d54:	mov	r0, r4
    6d56:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6d58:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6d5a:	movs	r3, #18
    6d5c:	strb	r3, [r5, #19]
    6d5e:	cmp	r4, #0
    6d60:	beq.n	6d54 <SdSpiCard::readOCR(unsigned long*)+0x30>
    6d62:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    6d64:	movs	r4, #0
    6d66:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    6d6a:	mov	r0, r4
    6d6c:	pop	{r3, r4, r5, r6, r7, pc}
    6d6e:	mov	r0, r5
    6d70:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6d74:	mov	r0, r4
    6d76:	pop	{r3, r4, r5, r6, r7, pc}

00006d78 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6d78:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    6d7a:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6d7c:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    6d7e:	mov	r4, r0
    6d80:	mov	r5, r1
    6d82:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6d84:	blx	r3
  if (cardCommand(cmd, 0)) {
    6d86:	mov	r1, r5
    6d88:	mov	r0, r4
    6d8a:	movs	r2, #0
    6d8c:	bl	6ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6d90:	cbz	r0, 6da4 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    6d92:	movs	r3, #27
    6d94:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6d96:	ldrb	r0, [r4, #20]
    6d98:	cbz	r0, 6da2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    6d9a:	mov	r0, r4
    6d9c:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    6da0:	movs	r0, #0
}
    6da2:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    6da4:	mov	r1, r6
    6da6:	movs	r2, #16
    6da8:	mov	r0, r4
    6daa:	bl	6bec <SdSpiCard::readData(unsigned char*, unsigned int)>
    6dae:	cmp	r0, #0
    6db0:	beq.n	6d96 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6db2:	ldrb	r5, [r4, #20]
    6db4:	cmp	r5, #0
    6db6:	beq.n	6da2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    6db8:	mov	r0, r4
    6dba:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6dbe:	mov	r0, r5
    6dc0:	pop	{r4, r5, r6, pc}
    6dc2:	nop

00006dc4 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6dc4:	mov	r2, r1
    6dc6:	movs	r1, #9
    6dc8:	b.w	6d78 <SdSpiCard::readRegister(unsigned char, void*)>

00006dcc <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    6dcc:	mov	r2, r1
    6dce:	movs	r1, #10
    6dd0:	b.w	6d78 <SdSpiCard::readRegister(unsigned char, void*)>

00006dd4 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    6dd4:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6dd6:	ldr	r3, [r0, #0]
    6dd8:	ldr	r2, [pc, #140]	; (6e68 <SdSpiCard::sectorCount()+0x94>)
    6dda:	ldr	r3, [r3, #52]	; 0x34
    6ddc:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    6dde:	sub	sp, #20
    6de0:	bne.n	6e42 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6de2:	mov	r2, sp
    6de4:	movs	r1, #9
    6de6:	bl	6d78 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6dea:	cbz	r0, 6dfc <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    6dec:	ldrb.w	r3, [sp]
    6df0:	ands.w	r3, r3, #192	; 0xc0
    6df4:	beq.n	6e00 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    6df6:	cmp	r3, #64	; 0x40
    6df8:	beq.n	6e48 <SdSpiCard::sectorCount()+0x74>
    6dfa:	movs	r0, #0
}
    6dfc:	add	sp, #20
    6dfe:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    6e00:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    6e04:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6e08:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    6e0c:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    6e10:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    6e14:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6e18:	and.w	r4, r4, #3
    6e1c:	lsls	r4, r4, #1
    6e1e:	lsls	r2, r2, #2
    6e20:	and.w	r3, r3, #3
    6e24:	orr.w	r0, r4, r0, lsr #7
    6e28:	and.w	r1, r1, #15
    6e2c:	orr.w	r3, r2, r3, lsl #10
    6e30:	add	r0, r1
    6e32:	orr.w	r3, r3, r5, lsr #6
    6e36:	adds	r3, #1
    6e38:	subs	r0, #7
    6e3a:	lsl.w	r0, r3, r0
    6e3e:	add	sp, #20
    6e40:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6e42:	mov	r1, sp
    6e44:	blx	r3
    6e46:	b.n	6dea <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6e48:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    6e4c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6e50:	ldrb.w	r0, [sp, #8]
    6e54:	adds	r2, r3, #1
    6e56:	and.w	r3, r1, #63	; 0x3f
    6e5a:	add.w	r3, r2, r3, lsl #16
    6e5e:	add.w	r0, r3, r0, lsl #8
    6e62:	lsls	r0, r0, #10
}
    6e64:	add	sp, #20
    6e66:	pop	{r4, r5, pc}
    6e68:	.word	0x00006dc5

00006e6c <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    6e6c:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    6e6e:	ldr	r3, [r0, #0]
    6e70:	ldr	r5, [pc, #68]	; (6eb8 <SdSpiCard::readStart(unsigned long)+0x4c>)
    6e72:	ldr	r3, [r3, #64]	; 0x40
    6e74:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    6e76:	sub	sp, #12
    6e78:	mov	r4, r0
    6e7a:	mov	r2, r1
    6e7c:	bne.n	6eae <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    6e7e:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    6e80:	cmp	r0, #3
    sector <<= 9;
    6e82:	it	ne
    6e84:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    6e86:	movs	r1, #18
    6e88:	mov	r0, r4
    6e8a:	bl	6ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6e8e:	cbz	r0, 6ea8 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e90:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6e92:	movs	r3, #12
    6e94:	strb	r3, [r4, #19]
    6e96:	cbnz	r0, 6e9c <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    6e98:	add	sp, #12
    6e9a:	pop	{r4, r5, pc}
    6e9c:	mov	r0, r4
    6e9e:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6ea2:	movs	r0, #0
    6ea4:	add	sp, #12
    6ea6:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    6ea8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6eaa:	add	sp, #12
    6eac:	pop	{r4, r5, pc}
    6eae:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    6eb0:	blx	r3
    6eb2:	ldr	r2, [sp, #4]
    6eb4:	b.n	6e80 <SdSpiCard::readStart(unsigned long)+0x14>
    6eb6:	nop
    6eb8:	.word	0x00006ad1

00006ebc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6ebc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ec0:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6ec2:	ldrb	r1, [r0, #16]
    6ec4:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6ec6:	mov	r6, r0
    6ec8:	mov	r4, r2
    6eca:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6ecc:	beq.n	6ede <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    6ece:	ldr	r3, [r6, #0]
    6ed0:	mov	r0, r6
    6ed2:	ldr	r3, [r3, #20]
    6ed4:	blx	r3
    6ed6:	cbnz	r0, 6f12 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    6ed8:	movs	r0, #0
    6eda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6ede:	ldr	r3, [r0, #12]
    6ee0:	cmp	r3, r5
    6ee2:	bne.n	6ece <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6ee4:	movs	r5, #0
    6ee6:	cbz	r7, 6f02 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    6ee8:	mov	r1, r4
    6eea:	mov.w	r2, #512	; 0x200
    6eee:	mov	r0, r6
    6ef0:	bl	6bec <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6ef4:	adds	r5, #1
    6ef6:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    6efa:	cmp	r0, #0
    6efc:	beq.n	6ed8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6efe:	cmp	r7, r5
    6f00:	bne.n	6ee8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    6f02:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    6f04:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    6f06:	add	r7, r3
    6f08:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    6f0a:	cbnz	r2, 6f26 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    6f0c:	movs	r0, #1
    6f0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    6f12:	mov	r1, r5
    6f14:	mov	r0, r6
    6f16:	bl	6e6c <SdSpiCard::readStart(unsigned long)>
    6f1a:	cmp	r0, #0
    6f1c:	beq.n	6ed8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    6f1e:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    6f20:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    6f22:	strb	r3, [r6, #16]
    6f24:	b.n	6ee4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6f26:	ldr	r3, [r6, #0]
    6f28:	mov	r0, r6
    6f2a:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    6f2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6f30:	bx	r3
    6f32:	nop

00006f34 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    6f34:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    6f36:	movs	r2, #0
    6f38:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    6f3a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    6f3c:	bl	6ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f40:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    6f42:	cbz	r0, 6f4e <SdSpiCard::readStop()+0x1a>
    6f44:	movs	r3, #9
    6f46:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f48:	cbnz	r4, 6f60 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    6f4a:	mov	r0, r4
    6f4c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f4e:	cbnz	r4, 6f56 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    6f50:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    6f52:	mov	r0, r4
    6f54:	pop	{r3, r4, r5, pc}
    6f56:	mov	r0, r5
    6f58:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6f5c:	mov	r0, r4
    6f5e:	pop	{r3, r4, r5, pc}
    6f60:	mov	r0, r5
    6f62:	movs	r4, #0
    6f64:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6f68:	mov	r0, r4
    6f6a:	pop	{r3, r4, r5, pc}

00006f6c <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6f6c:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6f6e:	ldr	r3, [r0, #0]
    6f70:	ldr	r5, [pc, #68]	; (6fb8 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    6f72:	ldr	r3, [r3, #64]	; 0x40
    6f74:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6f76:	sub	sp, #12
    6f78:	mov	r4, r0
    6f7a:	mov	r2, r1
    6f7c:	bne.n	6fae <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    6f7e:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6f80:	cmp	r0, #3
    sector <<= 9;
    6f82:	it	ne
    6f84:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    6f86:	movs	r1, #25
    6f88:	mov	r0, r4
    6f8a:	bl	6ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6f8e:	cbz	r0, 6fa8 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f90:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6f92:	movs	r3, #14
    6f94:	strb	r3, [r4, #19]
    6f96:	cbnz	r0, 6f9c <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    6f98:	add	sp, #12
    6f9a:	pop	{r4, r5, pc}
    6f9c:	mov	r0, r4
    6f9e:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6fa2:	movs	r0, #0
    6fa4:	add	sp, #12
    6fa6:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    6fa8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6faa:	add	sp, #12
    6fac:	pop	{r4, r5, pc}
    6fae:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6fb0:	blx	r3
    6fb2:	ldr	r2, [sp, #4]
    6fb4:	b.n	6f80 <SdSpiCard::writeStart(unsigned long)+0x14>
    6fb6:	nop
    6fb8:	.word	0x00006ad1

00006fbc <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6fbc:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    6fbe:	ldr	r3, [r0, #0]
    6fc0:	ldr	r7, [pc, #172]	; (7070 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    6fc2:	ldr	r3, [r3, #52]	; 0x34
    6fc4:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6fc6:	sub	sp, #20
    6fc8:	mov	r4, r0
    6fca:	mov	r5, r1
    6fcc:	mov	r6, r2
    6fce:	bne.n	702c <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6fd0:	mov	r2, sp
    6fd2:	movs	r1, #9
    6fd4:	bl	6d78 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    6fd8:	cbz	r0, 7000 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    6fda:	ldrb.w	r3, [sp, #10]
    6fde:	lsls	r2, r3, #25
    6fe0:	bpl.n	7010 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    6fe2:	ldrb	r3, [r4, #22]
    6fe4:	cmp	r3, #3
    firstSector <<= 9;
    6fe6:	it	ne
    6fe8:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    6fea:	mov	r2, r5
    6fec:	mov.w	r1, #32
    6ff0:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    6ff2:	it	ne
    6ff4:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    6ff6:	bl	6ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    6ffa:	cbz	r0, 7032 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6ffc:	movs	r3, #37	; 0x25
    6ffe:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7000:	ldrb	r0, [r4, #20]
    7002:	cbz	r0, 700c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7004:	mov	r0, r4
    7006:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    700a:	movs	r0, #0
}
    700c:	add	sp, #20
    700e:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7010:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    7014:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7018:	lsls	r3, r3, #1
    701a:	adds	r2, r6, #1
    701c:	orr.w	r3, r3, r1, lsr #7
    7020:	orrs	r2, r5
    7022:	tst	r3, r2
    7024:	beq.n	6fe2 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    7026:	movs	r3, #38	; 0x26
    7028:	strb	r3, [r4, #19]
    702a:	b.n	7000 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    702c:	mov	r1, sp
    702e:	blx	r3
    7030:	b.n	6fd8 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    7032:	mov	r2, r6
    7034:	movs	r1, #33	; 0x21
    7036:	mov	r0, r4
    7038:	bl	6ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    703c:	cmp	r0, #0
    703e:	bne.n	6ffc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    7040:	mov	r2, r0
    7042:	movs	r1, #38	; 0x26
    7044:	mov	r0, r4
    7046:	bl	6ca8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    704a:	cmp	r0, #0
    704c:	bne.n	6ffc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    704e:	movw	r1, #10000	; 0x2710
    7052:	mov	r0, r4
    7054:	bl	6c6c <SdSpiCard::waitNotBusy(unsigned short)>
    7058:	cbnz	r0, 7060 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    705a:	movs	r3, #39	; 0x27
    705c:	strb	r3, [r4, #19]
    705e:	b.n	7000 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7060:	ldrb	r5, [r4, #20]
    7062:	cmp	r5, #0
    7064:	beq.n	700c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7066:	mov	r0, r4
    7068:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    706c:	mov	r0, r5
    706e:	b.n	700c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7070:	.word	0x00006dc5

00007074 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    7074:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7076:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    707a:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    707c:	bl	6c6c <SdSpiCard::waitNotBusy(unsigned short)>
    7080:	mov	r6, r0
    7082:	cbnz	r0, 709c <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7084:	ldrb	r4, [r5, #20]
    7086:	movs	r3, #30
    7088:	strb	r3, [r5, #19]
    708a:	cbnz	r4, 7090 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    708c:	mov	r0, r4
    708e:	pop	{r4, r5, r6, pc}
    7090:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    7092:	mov	r4, r6
    7094:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    7098:	mov	r0, r4
    709a:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    709c:	movs	r1, #253	; 0xfd
    709e:	adds	r0, r5, #4
    70a0:	bl	8234 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70a4:	ldrb	r4, [r5, #20]
    70a6:	cbnz	r4, 70ae <SdSpiCard::writeStop()+0x3a>
    70a8:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    70aa:	mov	r0, r4
    70ac:	pop	{r4, r5, r6, pc}
    70ae:	mov	r0, r5
    70b0:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    70b4:	b.n	708c <SdSpiCard::writeStop()+0x18>
    70b6:	nop

000070b8 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    70b8:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    70ba:	ldrb	r3, [r0, #16]
    70bc:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    70be:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    70c0:	beq.n	70ce <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    70c2:	cmp	r3, #2
    70c4:	beq.n	70da <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    70c6:	movs	r3, #0
    70c8:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    70ca:	movs	r0, #1
    70cc:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    70ce:	bl	6f34 <SdSpiCard::readStop()>
    70d2:	cmp	r0, #0
    70d4:	bne.n	70c6 <SdSpiCard::syncDevice()+0xe>
      return false;
    70d6:	movs	r0, #0
    70d8:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    70da:	bl	7074 <SdSpiCard::writeStop()>
    70de:	cmp	r0, #0
    70e0:	bne.n	70c6 <SdSpiCard::syncDevice()+0xe>
    70e2:	b.n	70d6 <SdSpiCard::syncDevice()+0x1e>

000070e4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    70e4:	push	{r4, r5, r6, lr}
    70e6:	adds	r4, r0, #4
    70e8:	mov	r6, r2
    70ea:	mov	r5, r0
    70ec:	mov	r0, r4
    70ee:	bl	8234 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    70f2:	mov.w	r2, #512	; 0x200
    70f6:	mov	r1, r6
    70f8:	mov	r0, r4
    70fa:	bl	824c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    70fe:	mov	r0, r4
    7100:	movs	r1, #255	; 0xff
    7102:	bl	8234 <SdSpiArduinoDriver::send(unsigned char)>
    7106:	mov	r0, r4
    7108:	movs	r1, #255	; 0xff
    710a:	bl	8234 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    710e:	mov	r0, r4
    7110:	bl	81f8 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7114:	and.w	r3, r0, #31
    7118:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    711a:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    711c:	beq.n	7132 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    711e:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7120:	movs	r3, #31
    7122:	strb	r3, [r5, #19]
    7124:	cbnz	r0, 7128 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    7126:	pop	{r4, r5, r6, pc}
    7128:	mov	r0, r5
    712a:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    712e:	movs	r0, #0
    7130:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    7132:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7134:	pop	{r4, r5, r6, pc}
    7136:	nop

00007138 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7138:	push	{r3, r4, r5, lr}
    713a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    713c:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7140:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7142:	bl	6c6c <SdSpiCard::waitNotBusy(unsigned short)>
    7146:	cbnz	r0, 715a <SdSpiCard::writeData(unsigned char const*)+0x22>
    7148:	movs	r3, #35	; 0x23
    714a:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    714c:	ldrb	r0, [r4, #20]
    714e:	cbz	r0, 7158 <SdSpiCard::writeData(unsigned char const*)+0x20>
    7150:	mov	r0, r4
    7152:	bl	6b88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    7156:	movs	r0, #0
}
    7158:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    715a:	mov	r2, r5
    715c:	movs	r1, #252	; 0xfc
    715e:	mov	r0, r4
    7160:	bl	70e4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    7164:	cmp	r0, #0
    7166:	beq.n	714c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    7168:	pop	{r3, r4, r5, pc}
    716a:	nop

0000716c <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    716c:	push	{r4}
  SDHC_IRQSIGEN = 0;
    716e:	ldr	r4, [pc, #28]	; (718c <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    7170:	ldr	r2, [pc, #28]	; (7190 <sdIrs()+0x24>)
    7172:	ldr	r1, [pc, #32]	; (7194 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7174:	ldr	r0, [pc, #32]	; (7198 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    7176:	movs	r3, #0
    7178:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    717a:	ldr	r4, [r2, #0]
    717c:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    717e:	ldr	r1, [r1, #0]
    7180:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    7182:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7186:	strb	r3, [r0, #0]
}
    7188:	bx	lr
    718a:	nop
    718c:	.word	0x400b1038
    7190:	.word	0x400b1030
    7194:	.word	0x2001aa48
    7198:	.word	0x2001aa60

0000719c <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    719c:	ldr	r3, [pc, #12]	; (71ac <isBusyCommandComplete()+0x10>)
    719e:	ldr	r0, [pc, #16]	; (71b0 <isBusyCommandComplete()+0x14>)
    71a0:	ldr	r3, [r3, #0]
    71a2:	ands	r0, r3
}
    71a4:	clz	r0, r0
    71a8:	lsrs	r0, r0, #5
    71aa:	bx	lr
    71ac:	.word	0x400b1030
    71b0:	.word	0x000f0001

000071b4 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    71b4:	ldr	r3, [pc, #8]	; (71c0 <isBusyCommandInhibit()+0xc>)
    71b6:	ldr	r0, [r3, #0]
}
    71b8:	and.w	r0, r0, #1
    71bc:	bx	lr
    71be:	nop
    71c0:	.word	0x400b1024

000071c4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    71c4:	ldr	r3, [pc, #4]	; (71cc <isBusyDMA()+0x8>)
    71c6:	ldrb	r0, [r3, #0]
}
    71c8:	bx	lr
    71ca:	nop
    71cc:	.word	0x2001aa60

000071d0 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    71d0:	ldr	r3, [pc, #12]	; (71e0 <isBusyFifoRead()+0x10>)
    71d2:	ldr	r0, [r3, #0]
    71d4:	eor.w	r0, r0, #2048	; 0x800
}
    71d8:	ubfx	r0, r0, #11, #1
    71dc:	bx	lr
    71de:	nop
    71e0:	.word	0x400b1024

000071e4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    71e4:	ldr	r3, [pc, #12]	; (71f4 <isBusyFifoWrite()+0x10>)
    71e6:	ldr	r0, [r3, #0]
    71e8:	eor.w	r0, r0, #1024	; 0x400
}
    71ec:	ubfx	r0, r0, #10, #1
    71f0:	bx	lr
    71f2:	nop
    71f4:	.word	0x400b1024

000071f8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    71f8:	ldr	r3, [pc, #12]	; (7208 <isBusyTransferComplete()+0x10>)
    71fa:	ldr	r0, [pc, #16]	; (720c <isBusyTransferComplete()+0x14>)
    71fc:	ldr	r3, [r3, #0]
    71fe:	ands	r0, r3
}
    7200:	clz	r0, r0
    7204:	lsrs	r0, r0, #5
    7206:	bx	lr
    7208:	.word	0x400b1030
    720c:	.word	0x117f0002

00007210 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7210:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7214:	ldr	r3, [pc, #176]	; (72c8 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7216:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    721a:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    721c:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    721e:	bhi.n	72b8 <setSdclk(unsigned long)+0xa8>
    7220:	ldr	r5, [pc, #168]	; (72cc <setSdclk(unsigned long)+0xbc>)
    7222:	movs	r2, #8
    7224:	movs	r1, #1
    sdclkfs <<= 1;
    7226:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7228:	lsls	r3, r1, #4
    722a:	udiv	r3, r5, r3
    722e:	cmp	r0, r3
    7230:	ldr	r4, [pc, #152]	; (72cc <setSdclk(unsigned long)+0xbc>)
    7232:	bcs.n	72b0 <setSdclk(unsigned long)+0xa0>
    7234:	subs	r2, #1
    7236:	bne.n	7226 <setSdclk(unsigned long)+0x16>
    7238:	udiv	r4, r4, r1
    723c:	lsrs	r3, r1, #1
    723e:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7240:	cmp	r0, r4
    7242:	bcs.n	72c0 <setSdclk(unsigned long)+0xb0>
    7244:	ldr	r6, [pc, #132]	; (72cc <setSdclk(unsigned long)+0xbc>)
    7246:	lsls	r3, r1, #1
    7248:	movs	r2, #1
    724a:	b.n	724e <setSdclk(unsigned long)+0x3e>
    724c:	mov	r3, r4
    724e:	udiv	r4, r6, r3
    7252:	cmp	r0, r4
    dvs++;
    7254:	add.w	r5, r2, #1
    7258:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    725c:	bcs.n	72ac <setSdclk(unsigned long)+0x9c>
    725e:	cmp	r5, #16
    7260:	mov	r2, r5
    7262:	bne.n	724c <setSdclk(unsigned long)+0x3c>
    7264:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7266:	ldr	r6, [pc, #104]	; (72d0 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    7268:	ldr	r4, [pc, #104]	; (72d4 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    726a:	ldr	r0, [pc, #96]	; (72cc <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    726c:	ldr	r1, [pc, #104]	; (72d8 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    726e:	mov.w	r5, #1000	; 0x3e8
    7272:	mul.w	r3, r5, r3
    7276:	udiv	r3, r0, r3
    727a:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    727c:	ldr	r3, [r4, #0]
    727e:	bic.w	r3, r3, #8
    7282:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    7284:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    7286:	bic.w	r3, r0, #1044480	; 0xff000
    728a:	bic.w	r3, r3, #4080	; 0xff0
    728e:	orr.w	r3, r3, #917504	; 0xe0000
    7292:	orrs	r3, r7
    7294:	orrs	r2, r3
    7296:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    7298:	ldr	r3, [r1, #0]
    729a:	lsls	r3, r3, #28
    729c:	bpl.n	7298 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    729e:	ldr	r2, [pc, #52]	; (72d4 <setSdclk(unsigned long)+0xc4>)
    72a0:	ldr	r3, [r2, #0]
    72a2:	orr.w	r3, r3, #8
    72a6:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    72a8:	pop	{r4, r5, r6, r7}
    72aa:	bx	lr
    72ac:	lsls	r2, r2, #4
    72ae:	b.n	7266 <setSdclk(unsigned long)+0x56>
    72b0:	udiv	r4, r4, r1
    72b4:	lsls	r7, r1, #7
    72b6:	b.n	7240 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    72b8:	ldr	r4, [pc, #16]	; (72cc <setSdclk(unsigned long)+0xbc>)
    72ba:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    72bc:	movs	r1, #1
    72be:	b.n	7240 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    72c0:	mov	r3, r1
    72c2:	movs	r2, #0
    72c4:	b.n	7266 <setSdclk(unsigned long)+0x56>
    72c6:	nop
    72c8:	.word	0x005b8d7f
    72cc:	.word	0x05b8d800
    72d0:	.word	0x2001aa64
    72d4:	.word	0x400b102c
    72d8:	.word	0x400b1024

000072dc <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    72dc:	ldr	r3, [pc, #4]	; (72e4 <SdioCard::errorCode() const+0x8>)
}
    72de:	ldrb	r0, [r3, #0]
    72e0:	bx	lr
    72e2:	nop
    72e4:	.word	0x20014714

000072e8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    72e8:	ldr	r3, [pc, #4]	; (72f0 <SdioCard::errorData() const+0x8>)
    72ea:	ldr	r0, [r3, #0]
}
    72ec:	bx	lr
    72ee:	nop
    72f0:	.word	0x2001aa48

000072f4 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    72f4:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    72f6:	ldr	r4, [pc, #20]	; (730c <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    72f8:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    72fa:	ldmia	r4!, {r0, r1, r2, r3}
    72fc:	str	r0, [r5, #0]
    72fe:	str	r1, [r5, #4]
    7300:	str	r2, [r5, #8]
    7302:	str	r3, [r5, #12]
  return true;
}
    7304:	movs	r0, #1
    7306:	pop	{r4, r5}
    7308:	bx	lr
    730a:	nop
    730c:	.word	0x2001aa28

00007310 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7310:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    7312:	ldr	r4, [pc, #20]	; (7328 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7314:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    7316:	ldmia	r4!, {r0, r1, r2, r3}
    7318:	str	r0, [r5, #0]
    731a:	str	r1, [r5, #4]
    731c:	str	r2, [r5, #8]
    731e:	str	r3, [r5, #12]
  return true;
}
    7320:	movs	r0, #1
    7322:	pop	{r4, r5}
    7324:	bx	lr
    7326:	nop
    7328:	.word	0x2001aa50

0000732c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    732c:	ldr	r3, [pc, #8]	; (7338 <SdioCard::readOCR(unsigned long*)+0xc>)
    732e:	ldr	r3, [r3, #0]
    7330:	str	r3, [r1, #0]
  return true;
}
    7332:	movs	r0, #1
    7334:	bx	lr
    7336:	nop
    7338:	.word	0x2001aa40

0000733c <SdioCard::~SdioCard()>:
    733c:	bx	lr
    733e:	nop

00007340 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    7340:	push	{r3, r4, r5, r6, r7, lr}
    7342:	mov	r5, r0
  uint32_t m = micros();
    7344:	bl	8954 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7348:	ldr	r7, [pc, #24]	; (7364 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    734a:	mov	r6, r0
    734c:	b.n	7358 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    734e:	bl	8954 <micros>
    7352:	subs	r0, r0, r6
    7354:	cmp	r0, r7
    7356:	bhi.n	7360 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7358:	blx	r5
    735a:	mov	r4, r0
    735c:	cmp	r0, #0
    735e:	bne.n	734e <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    7360:	mov	r0, r4
    7362:	pop	{r3, r4, r5, r6, r7, pc}
    7364:	.word	0x000f4240

00007368 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7368:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    736c:	ldr.w	r8, [pc, #64]	; 73b0 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7370:	ldr	r7, [pc, #56]	; (73ac <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    7372:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7376:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    7378:	bl	8954 <micros>
    737c:	mov	r6, r0
    737e:	b.n	738e <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7380:	bl	8954 <micros>
    7384:	subs	r0, r0, r6
    7386:	cmp	r0, r7
    7388:	bhi.n	73a0 <yieldTimeout(bool (*)())+0x38>
    738a:	bl	9c7c <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    738e:	blx	r5
    7390:	mov	r4, r0
    7392:	cmp	r0, #0
    7394:	bne.n	7380 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    7396:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    739a:	mov	r0, r4
    739c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    73a0:	movs	r3, #0
    73a2:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    73a6:	mov	r0, r4
    73a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73ac:	.word	0x000f4240
    73b0:	.word	0x2001aa38

000073b4 <SdioCard::~SdioCard()>:
    73b4:	push	{r4, lr}
    73b6:	movs	r1, #12
    73b8:	mov	r4, r0
    73ba:	bl	a2a0 <operator delete(void*, unsigned int)>
    73be:	mov	r0, r4
    73c0:	pop	{r4, pc}
    73c2:	nop

000073c4 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    73c4:	ldr	r3, [pc, #20]	; (73dc <SdioCard::type() const+0x18>)
    73c6:	ldrb	r3, [r3, #0]
    73c8:	cbz	r3, 73d8 <SdioCard::type() const+0x14>
    73ca:	ldr	r3, [pc, #20]	; (73e0 <SdioCard::type() const+0x1c>)
    73cc:	ldrb	r3, [r3, #0]
    73ce:	cmp	r3, #0
    73d0:	ite	ne
    73d2:	movne	r0, #3
    73d4:	moveq	r0, #2
    73d6:	bx	lr
    73d8:	movs	r0, #1
}
    73da:	bx	lr
    73dc:	.word	0x2001aa24
    73e0:	.word	0x2001aa3c

000073e4 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    73e4:	push	{r3, r4, r5, lr}
    73e6:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    73e8:	ldr	r0, [pc, #60]	; (7428 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    73ea:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    73ec:	bl	7340 <waitTimeout(bool (*)())>
    73f0:	cbz	r0, 73f6 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    73f2:	movs	r0, #0
    73f4:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    73f6:	ldr	r2, [pc, #52]	; (742c <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    73f8:	ldr	r3, [pc, #52]	; (7430 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    73fa:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    73fc:	ldr	r0, [pc, #52]	; (7434 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    73fe:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    7400:	bl	7340 <waitTimeout(bool (*)())>
    7404:	cmp	r0, #0
    7406:	bne.n	73f2 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7408:	ldr	r2, [pc, #44]	; (7438 <cardCommand(unsigned long, unsigned long)+0x54>)
    740a:	ldr	r3, [pc, #48]	; (743c <cardCommand(unsigned long, unsigned long)+0x58>)
    740c:	ldr	r1, [r2, #0]
    740e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7410:	ldr	r1, [r3, #0]
    7412:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7414:	ldr	r2, [r3, #0]
    7416:	lsls	r2, r2, #31
    7418:	bpl.n	73f2 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    741a:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    741c:	tst.w	r3, #983040	; 0xf0000
    7420:	bne.n	73f2 <cardCommand(unsigned long, unsigned long)+0xe>
    7422:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    7424:	pop	{r3, r4, r5, pc}
    7426:	nop
    7428:	.word	0x000071b5
    742c:	.word	0x400b1008
    7430:	.word	0x400b100c
    7434:	.word	0x0000719d
    7438:	.word	0x400b1030
    743c:	.word	0x2001aa48

00007440 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    7440:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7442:	ldr	r3, [pc, #16]	; (7454 <SdioCard::status()+0x14>)
    7444:	ldr	r0, [pc, #16]	; (7458 <SdioCard::status()+0x18>)
    7446:	ldr	r1, [r3, #0]
    7448:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    744c:	cbz	r0, 7452 <SdioCard::status()+0x12>
    744e:	ldr	r3, [pc, #12]	; (745c <SdioCard::status()+0x1c>)
    7450:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    7452:	pop	{r3, pc}
    7454:	.word	0x2001aa44
    7458:	.word	0x0d1a0000
    745c:	.word	0x400b1010

00007460 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7460:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7462:	ldr	r3, [pc, #84]	; (74b8 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7464:	sub	sp, #20
    7466:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7468:	ldr	r1, [r3, #0]
    746a:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    746e:	cbz	r0, 74b2 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    7470:	ldr	r2, [pc, #72]	; (74bc <readReg16(unsigned long, void*)+0x5c>)
    7472:	ldr	r3, [pc, #76]	; (74c0 <readReg16(unsigned long, void*)+0x60>)
    7474:	ldr	r2, [r2, #0]
    7476:	str	r2, [sp, #0]
    7478:	ldr	r1, [r3, #0]
    747a:	str	r1, [sp, #4]
    747c:	ldr	r1, [r3, #4]
    747e:	str	r1, [sp, #8]
    7480:	adds	r3, #8
    7482:	add.w	r4, r5, #15
    7486:	ldr	r3, [r3, #0]
    7488:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    748a:	movs	r3, #0
    748c:	b.n	7492 <readReg16(unsigned long, void*)+0x32>
    748e:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7492:	and.w	r1, r3, #3
    7496:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7498:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    749a:	lsrs	r2, r1
    749c:	add.w	lr, sp, #16
    74a0:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    74a4:	cmp	r3, #15
    74a6:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    74a8:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    74ac:	bne.n	748e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    74ae:	movs	r3, #0
    74b0:	strb	r3, [r5, #15]
  return true;
}
    74b2:	add	sp, #20
    74b4:	pop	{r4, r5, pc}
    74b6:	nop
    74b8:	.word	0x2001aa44
    74bc:	.word	0x400b1010
    74c0:	.word	0x400b1014

000074c4 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    74c4:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    74c6:	ldr	r3, [pc, #28]	; (74e4 <isBusyCMD13()+0x20>)
    74c8:	ldr	r0, [pc, #28]	; (74e8 <isBusyCMD13()+0x24>)
    74ca:	ldr	r1, [r3, #0]
    74cc:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    74d0:	cbz	r0, 74e0 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    74d2:	ldr	r3, [pc, #24]	; (74ec <isBusyCMD13()+0x28>)
    74d4:	ldr	r0, [r3, #0]
    74d6:	eor.w	r0, r0, #256	; 0x100
    74da:	ubfx	r0, r0, #8, #1
    74de:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    74e0:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    74e2:	pop	{r3, pc}
    74e4:	.word	0x2001aa44
    74e8:	.word	0x0d1a0000
    74ec:	.word	0x400b1010

000074f0 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    74f0:	ldr	r3, [pc, #16]	; (7504 <SdioCard::isBusy()+0x14>)
    74f2:	ldr	r3, [r3, #0]
    74f4:	cbz	r3, 74f8 <SdioCard::isBusy()+0x8>
    74f6:	bx	r3
    74f8:	ldr	r3, [pc, #12]	; (7508 <SdioCard::isBusy()+0x18>)
    74fa:	ldrb	r0, [r3, #0]
    74fc:	cbnz	r0, 7500 <SdioCard::isBusy()+0x10>
}
    74fe:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7500:	b.w	74c4 <isBusyCMD13()>
    7504:	.word	0x2001aa38
    7508:	.word	0x2001aa4c

0000750c <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    750c:	ldr	r3, [pc, #20]	; (7524 <waitDmaStatus() [clone .part.6]+0x18>)
    750e:	ldr	r0, [r3, #0]
    7510:	ands.w	r0, r0, #2
    7514:	beq.n	7522 <waitDmaStatus() [clone .part.6]+0x16>
    7516:	ldr	r3, [r3, #0]
    7518:	ldr	r0, [pc, #12]	; (7528 <waitDmaStatus() [clone .part.6]+0x1c>)
    751a:	ands	r0, r3
    751c:	clz	r0, r0
    7520:	lsrs	r0, r0, #5
}
    7522:	bx	lr
    7524:	.word	0x2001aa48
    7528:	.word	0x117f0000

0000752c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    752c:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    752e:	lsls	r4, r2, #30
    7530:	bne.n	7534 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    7532:	cbnz	r3, 7546 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7534:	ldr	r1, [pc, #124]	; (75b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7536:	ldr	r3, [pc, #128]	; (75b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7538:	movs	r0, #36	; 0x24
  m_errorLine = line;
    753a:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    753e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7540:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7542:	movs	r0, #0
    7544:	pop	{r3, r4, r5, r6, r7, pc}
    7546:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7548:	ldr	r0, [pc, #112]	; (75bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    754a:	mov	r4, r3
    754c:	mov	r7, r1
    754e:	mov	r5, r2
    7550:	bl	7368 <yieldTimeout(bool (*)())>
    7554:	cbnz	r0, 759e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7556:	ldr	r1, [pc, #104]	; (75c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7558:	ldr	r2, [pc, #104]	; (75c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    755a:	ldr.w	lr, [pc, #128]	; 75dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    755e:	mov.w	ip, #1
    7562:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7566:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7568:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    756a:	ldr	r4, [pc, #92]	; (75c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    756c:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    756e:	ldr	r2, [pc, #92]	; (75cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7570:	ldr	r1, [pc, #92]	; (75d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    7572:	ldr	r0, [pc, #96]	; (75d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7574:	orr.w	r3, r3, #512	; 0x200
    7578:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    757a:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    757c:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    757e:	cbnz	r3, 75ae <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    7580:	lsls	r1, r7, #9
    7582:	mov	r0, r6
    7584:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7588:	cmp	r0, #0
    758a:	beq.n	7542 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    758c:	ldr	r0, [pc, #72]	; (75d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    758e:	bl	7368 <yieldTimeout(bool (*)())>
    7592:	cmp	r0, #0
    7594:	bne.n	7542 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7596:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    759a:	b.w	750c <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    759e:	ldr	r1, [pc, #20]	; (75b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    75a0:	ldr	r3, [pc, #20]	; (75b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75a2:	movs	r0, #10
  m_errorLine = line;
    75a4:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75a8:	strb	r0, [r1, #0]
  m_errorLine = line;
    75aa:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    75ac:	b.n	7542 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    75ae:	mov	r1, r7
    75b0:	b.n	7582 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    75b2:	nop
    75b4:	.word	0x20014714
    75b8:	.word	0x2001aa68
    75bc:	.word	0x000074c5
    75c0:	.word	0x2001aa48
    75c4:	.word	0x400b1000
    75c8:	.word	0x400b1004
    75cc:	.word	0x2001aa3c
    75d0:	.word	0x400b1038
    75d4:	.word	0x117f0002
    75d8:	.word	0x000071c5
    75dc:	.word	0x2001aa60

000075e0 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    75e0:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    75e2:	ldr	r1, [pc, #100]	; (7648 <SdioCard::sectorCount()+0x68>)
    75e4:	ldrb	r3, [r1, #0]
    75e6:	ands.w	r3, r3, #192	; 0xc0
    75ea:	beq.n	7610 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    75ec:	cmp	r3, #64	; 0x40
    75ee:	beq.n	75f6 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    75f0:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    75f2:	pop	{r4, r5, r6}
    75f4:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    75f6:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    75f8:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    75fa:	ldrb	r0, [r1, #8]
    75fc:	adds	r2, r3, #1
    75fe:	and.w	r3, r4, #63	; 0x3f
    7602:	add.w	r3, r2, r3, lsl #16
    7606:	add.w	r0, r3, r0, lsl #8
    760a:	lsls	r0, r0, #10
    760c:	pop	{r4, r5, r6}
    760e:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7610:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7612:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7614:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7616:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7618:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    761a:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    761c:	and.w	r1, r5, #3
    7620:	lsls	r1, r1, #1
    7622:	and.w	r3, r3, #3
    7626:	lsls	r2, r2, #2
    7628:	orr.w	r0, r1, r0, lsr #7
    762c:	orr.w	r3, r2, r3, lsl #10
    7630:	and.w	r1, r4, #15
    7634:	orr.w	r3, r3, r6, lsr #6
    7638:	add	r0, r1
    763a:	subs	r0, #7
    763c:	adds	r3, #1
    763e:	lsl.w	r0, r3, r0
    7642:	pop	{r4, r5, r6}
    7644:	bx	lr
    7646:	nop
    7648:	.word	0x2001aa50

0000764c <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    764c:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    764e:	ldr	r6, [pc, #176]	; (7700 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    7650:	ldrb	r3, [r6, #10]
    7652:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7656:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7658:	cbnz	r0, 7672 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    765a:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    765e:	ldrb	r2, [r6, #11]
    7660:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7664:	lsls	r3, r3, #1
    7666:	adds	r0, r5, #1
    7668:	orr.w	r3, r3, r2, lsr #7
    766c:	orrs	r0, r1
    766e:	tst	r3, r0
    7670:	bne.n	76b6 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    7672:	ldr	r3, [pc, #144]	; (7704 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    7674:	ldrb	r3, [r3, #0]
    7676:	cbnz	r3, 767c <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    7678:	lsls	r1, r1, #9
    lastSector <<= 9;
    767a:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    767c:	ldr	r0, [pc, #136]	; (7708 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    767e:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7682:	mov	r4, r0
    7684:	cbnz	r0, 7698 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7686:	ldr	r1, [pc, #132]	; (770c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7688:	ldr	r3, [pc, #132]	; (7710 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    768a:	movs	r0, #15
  m_errorLine = line;
    768c:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7690:	strb	r0, [r1, #0]
  m_errorLine = line;
    7692:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7694:	mov	r0, r4
    7696:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    7698:	mov	r1, r5
    769a:	ldr	r0, [pc, #120]	; (7714 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    769c:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    76a0:	mov	r4, r0
    76a2:	cbnz	r0, 76c8 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76a4:	ldr	r1, [pc, #100]	; (770c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    76a6:	ldr	r3, [pc, #104]	; (7710 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76a8:	movs	r0, #16
  m_errorLine = line;
    76aa:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76ae:	strb	r0, [r1, #0]
  m_errorLine = line;
    76b0:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    76b2:	mov	r0, r4
    76b4:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76b6:	ldr	r1, [pc, #84]	; (770c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    76b8:	ldr	r3, [pc, #84]	; (7710 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76ba:	movs	r0, #38	; 0x26
  m_errorLine = line;
    76bc:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76c0:	strb	r0, [r1, #0]
  m_errorLine = line;
    76c2:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    76c4:	mov	r0, r4
    76c6:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    76c8:	movs	r1, #0
    76ca:	ldr	r0, [pc, #76]	; (7718 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    76cc:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    76d0:	mov	r4, r0
    76d2:	cbnz	r0, 76e4 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76d4:	ldr	r1, [pc, #52]	; (770c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    76d6:	ldr	r3, [pc, #56]	; (7710 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76d8:	movs	r0, #17
  m_errorLine = line;
    76da:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76de:	strb	r0, [r1, #0]
  m_errorLine = line;
    76e0:	str	r2, [r3, #0]
    76e2:	b.n	7694 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    76e4:	ldr	r0, [pc, #52]	; (771c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    76e6:	bl	7340 <waitTimeout(bool (*)())>
    76ea:	cmp	r0, #0
    76ec:	beq.n	7694 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76ee:	ldr	r1, [pc, #28]	; (770c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    76f0:	ldr	r3, [pc, #28]	; (7710 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76f2:	movs	r0, #39	; 0x27
  m_errorLine = line;
    76f4:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76f8:	strb	r0, [r1, #0]
  m_errorLine = line;
    76fa:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    76fc:	movs	r4, #0
    76fe:	b.n	7694 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    7700:	.word	0x2001aa50
    7704:	.word	0x2001aa3c
    7708:	.word	0x201a0000
    770c:	.word	0x20014714
    7710:	.word	0x2001aa68
    7714:	.word	0x211a0000
    7718:	.word	0x261b0000
    771c:	.word	0x000074c5

00007720 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    7720:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7722:	movs	r1, #0
    7724:	ldr	r0, [pc, #84]	; (777c <transferStop()+0x5c>)
    7726:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    772a:	mov	r4, r0
    772c:	cbnz	r0, 7740 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    772e:	ldr	r1, [pc, #80]	; (7780 <transferStop()+0x60>)
  m_errorLine = line;
    7730:	ldr	r3, [pc, #80]	; (7784 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7732:	movs	r0, #9
  m_errorLine = line;
    7734:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7738:	strb	r0, [r1, #0]
  m_errorLine = line;
    773a:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    773c:	mov	r0, r4
    773e:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7740:	ldr	r0, [pc, #68]	; (7788 <transferStop()+0x68>)
    7742:	bl	7368 <yieldTimeout(bool (*)())>
    7746:	cbnz	r0, 7766 <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    7748:	ldr	r0, [pc, #64]	; (778c <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    774a:	ldr	r1, [pc, #68]	; (7790 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    774c:	ldr	r5, [pc, #68]	; (7794 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    774e:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7750:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7752:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7754:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7758:	orr.w	r2, r2, #67108864	; 0x4000000
    775c:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    775e:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    7760:	str	r3, [r1, #0]
  return true;
}
    7762:	mov	r0, r4
    7764:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7766:	ldr	r1, [pc, #24]	; (7780 <transferStop()+0x60>)
  m_errorLine = line;
    7768:	ldr	r3, [pc, #24]	; (7784 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    776a:	movs	r0, #10
  m_errorLine = line;
    776c:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7770:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7772:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7774:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    7776:	mov	r0, r4
    7778:	pop	{r4, r5, r6, pc}
    777a:	nop
    777c:	.word	0x0cdb0000
    7780:	.word	0x20014714
    7784:	.word	0x2001aa68
    7788:	.word	0x000074c5
    778c:	.word	0x400b1034
    7790:	.word	0x400b1028
    7794:	.word	0x400b102c

00007798 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    7798:	b.w	7720 <transferStop()>

0000779c <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    779c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    779e:	ldr	r3, [pc, #160]	; (7840 <SdioCard::writeData(unsigned char const*)+0xa4>)
    77a0:	ldr	r3, [r3, #0]
    77a2:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    77a4:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    77a6:	bmi.n	77ba <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    77a8:	ldr	r3, [pc, #152]	; (7844 <SdioCard::writeData(unsigned char const*)+0xa8>)
    77aa:	ldr	r2, [r3, #0]
    77ac:	bic.w	r2, r2, #65536	; 0x10000
    77b0:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    77b2:	ldr	r2, [r3, #0]
    77b4:	orr.w	r2, r2, #131072	; 0x20000
    77b8:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    77ba:	ldr	r2, [pc, #136]	; (7844 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    77bc:	ldr	r0, [pc, #136]	; (7848 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    77be:	ldr	r3, [r2, #0]
    77c0:	orr.w	r3, r3, #65536	; 0x10000
    77c4:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    77c6:	bl	7340 <waitTimeout(bool (*)())>
    77ca:	cmp	r0, #0
    77cc:	bne.n	782c <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    77ce:	ldr	r4, [pc, #112]	; (7840 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    77d0:	ldr	r0, [pc, #120]	; (784c <SdioCard::writeData(unsigned char const*)+0xb0>)
    77d2:	subs	r3, r5, #4
    77d4:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    77d8:	ldr	r2, [r4, #0]
    77da:	lsls	r1, r2, #21
    77dc:	bpl.n	77d8 <SdioCard::writeData(unsigned char const*)+0x3c>
    77de:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    77e2:	ldr.w	r2, [r3, #4]!
    77e6:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    77e8:	cmp	r1, r3
    77ea:	bne.n	77e2 <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    77ec:	cmp	r5, r1
    77ee:	mov	r3, r1
    77f0:	bne.n	77d8 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    77f2:	ldr	r0, [pc, #92]	; (7850 <SdioCard::writeData(unsigned char const*)+0xb4>)
    77f4:	bl	7340 <waitTimeout(bool (*)())>
    77f8:	cbnz	r0, 781a <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    77fa:	ldr	r2, [pc, #88]	; (7854 <SdioCard::writeData(unsigned char const*)+0xb8>)
    77fc:	ldr	r3, [pc, #88]	; (7858 <SdioCard::writeData(unsigned char const*)+0xbc>)
    77fe:	ldr	r1, [r2, #0]
    7800:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7802:	ldr	r1, [r3, #0]
    7804:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7806:	ldr	r2, [r3, #0]
    7808:	lsls	r2, r2, #30
    780a:	bpl.n	783c <SdioCard::writeData(unsigned char const*)+0xa0>
    780c:	ldr	r3, [r3, #0]
    780e:	ldr	r0, [pc, #76]	; (785c <SdioCard::writeData(unsigned char const*)+0xc0>)
    7810:	ands	r0, r3
    7812:	clz	r0, r0
    7816:	lsrs	r0, r0, #5
    7818:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    781a:	ldr	r1, [pc, #68]	; (7860 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    781c:	ldr	r3, [pc, #68]	; (7864 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    781e:	movs	r0, #35	; 0x23
  m_errorLine = line;
    7820:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7824:	strb	r0, [r1, #0]
  m_errorLine = line;
    7826:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    7828:	movs	r0, #0
    782a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    782c:	ldr	r1, [pc, #48]	; (7860 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    782e:	ldr	r3, [pc, #52]	; (7864 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7830:	movs	r0, #32
  m_errorLine = line;
    7832:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7836:	strb	r0, [r1, #0]
  m_errorLine = line;
    7838:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    783a:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    783c:	pop	{r3, r4, r5, pc}
    783e:	nop
    7840:	.word	0x400b1024
    7844:	.word	0x400b1028
    7848:	.word	0x000071e5
    784c:	.word	0x400b1020
    7850:	.word	0x000071f9
    7854:	.word	0x400b1030
    7858:	.word	0x2001aa48
    785c:	.word	0x117f0000
    7860:	.word	0x20014714
    7864:	.word	0x2001aa68

00007868 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7868:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    786a:	ldr	r0, [pc, #80]	; (78bc <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    786c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    786e:	bl	7368 <yieldTimeout(bool (*)())>
    7872:	cbnz	r0, 78a8 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7874:	ldr	r2, [pc, #72]	; (78c0 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7876:	ldr	r1, [pc, #76]	; (78c4 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7878:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    787a:	ldr	r0, [pc, #76]	; (78c8 <SdioCard::writeStart(unsigned long)+0x60>)
    787c:	ldr	r5, [pc, #76]	; (78cc <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    787e:	bic.w	r3, r3, #65536	; 0x10000
    7882:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7884:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7886:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7888:	cbnz	r3, 78a4 <SdioCard::writeStart(unsigned long)+0x3c>
    788a:	lsls	r1, r4, #9
    788c:	ldr	r0, [pc, #64]	; (78d0 <SdioCard::writeStart(unsigned long)+0x68>)
    788e:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7892:	cbnz	r0, 78a2 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7894:	ldr	r1, [pc, #60]	; (78d4 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7896:	ldr	r3, [pc, #64]	; (78d8 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7898:	movs	r4, #14
  m_errorLine = line;
    789a:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    789e:	strb	r4, [r1, #0]
  m_errorLine = line;
    78a0:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    78a2:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    78a4:	mov	r1, r4
    78a6:	b.n	788c <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    78a8:	ldr	r1, [pc, #40]	; (78d4 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    78aa:	ldr	r3, [pc, #44]	; (78d8 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    78ac:	movs	r0, #10
  m_errorLine = line;
    78ae:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    78b2:	strb	r0, [r1, #0]
  m_errorLine = line;
    78b4:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    78b6:	movs	r0, #0
    78b8:	pop	{r3, r4, r5, pc}
    78ba:	nop
    78bc:	.word	0x000074c5
    78c0:	.word	0x400b1028
    78c4:	.word	0x2001aa3c
    78c8:	.word	0x400b1004
    78cc:	.word	0xffff0200
    78d0:	.word	0x193a0022
    78d4:	.word	0x20014714
    78d8:	.word	0x2001aa68

000078dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    78dc:	push	{r3, r4, r5, r6, r7, lr}
    78de:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    78e0:	ldrb	r0, [r0, #8]
    78e2:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    78e4:	mov	r4, r1
    78e6:	mov	r5, r2
    78e8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    78ea:	bmi.n	7914 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    78ec:	cbz	r3, 7910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    78ee:	add	r7, r1
    78f0:	b.n	78f6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    78f2:	cmp	r4, r7
    78f4:	beq.n	7910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    78f6:	ldr	r3, [r6, #0]
    78f8:	mov	r2, r5
    78fa:	mov	r1, r4
    78fc:	ldr	r3, [r3, #8]
    78fe:	mov	r0, r6
    7900:	blx	r3
    7902:	adds	r4, #1
    7904:	add.w	r5, r5, #512	; 0x200
    7908:	cmp	r0, #0
    790a:	bne.n	78f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    790c:	movs	r0, #0
    790e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7910:	movs	r0, #1
    7912:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    7914:	lsls	r0, r2, #30
    7916:	beq.n	793e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7918:	cmp	r3, #0
    791a:	beq.n	7910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    791c:	add	r7, r1
    791e:	b.n	7924 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    7920:	cmp	r7, r4
    7922:	beq.n	7910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    7924:	ldr	r3, [r6, #0]
    7926:	mov	r2, r5
    7928:	mov	r1, r4
    792a:	ldr	r3, [r3, #8]
    792c:	mov	r0, r6
    792e:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7930:	adds	r4, #1
    7932:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    7936:	cmp	r0, #0
    7938:	bne.n	7920 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    793a:	movs	r0, #0
    793c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    793e:	ldr	r0, [pc, #24]	; (7958 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    7940:	bl	752c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7944:	cmp	r0, #0
    7946:	bne.n	7910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7948:	ldr	r1, [pc, #16]	; (795c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    794a:	ldr	r3, [pc, #20]	; (7960 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    794c:	movs	r4, #12
  m_errorLine = line;
    794e:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7952:	strb	r4, [r1, #0]
  m_errorLine = line;
    7954:	str	r2, [r3, #0]
    7956:	pop	{r3, r4, r5, r6, r7, pc}
    7958:	.word	0x123a0037
    795c:	.word	0x20014714
    7960:	.word	0x2001aa68

00007964 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7964:	push	{r3, r4, r5, r6, r7, lr}
    7966:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7968:	ldrb	r0, [r0, #8]
    796a:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    796c:	mov	r4, r1
    796e:	mov	r5, r2
    7970:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7972:	bmi.n	799c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7974:	cbz	r3, 7998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7976:	add	r7, r1
    7978:	b.n	797e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    797a:	cmp	r4, r7
    797c:	beq.n	7998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    797e:	ldr	r3, [r6, #0]
    7980:	mov	r2, r5
    7982:	mov	r1, r4
    7984:	ldr	r3, [r3, #24]
    7986:	mov	r0, r6
    7988:	blx	r3
    798a:	adds	r4, #1
    798c:	add.w	r5, r5, #512	; 0x200
    7990:	cmp	r0, #0
    7992:	bne.n	797a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    7994:	movs	r0, #0
    7996:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7998:	movs	r0, #1
    799a:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    799c:	lsls	r0, r2, #30
    799e:	beq.n	79c6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    79a0:	cmp	r3, #0
    79a2:	beq.n	7998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    79a4:	add	r7, r1
    79a6:	b.n	79ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    79a8:	cmp	r7, r4
    79aa:	beq.n	7998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    79ac:	ldr	r3, [r6, #0]
    79ae:	mov	r2, r5
    79b0:	mov	r1, r4
    79b2:	ldr	r3, [r3, #24]
    79b4:	mov	r0, r6
    79b6:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    79b8:	adds	r4, #1
    79ba:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    79be:	cmp	r0, #0
    79c0:	bne.n	79a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    79c2:	movs	r0, #0
    79c4:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    79c6:	ldr	r0, [pc, #24]	; (79e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    79c8:	bl	752c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    79cc:	cmp	r0, #0
    79ce:	bne.n	7998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    79d0:	ldr	r1, [pc, #16]	; (79e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    79d2:	ldr	r3, [pc, #20]	; (79e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    79d4:	movs	r4, #14
  m_errorLine = line;
    79d6:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    79da:	strb	r4, [r1, #0]
  m_errorLine = line;
    79dc:	str	r2, [r3, #0]
    79de:	pop	{r3, r4, r5, r6, r7, pc}
    79e0:	.word	0x193a0027
    79e4:	.word	0x20014714
    79e8:	.word	0x2001aa68

000079ec <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    79ec:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    79ee:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    79f0:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    79f2:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    79f4:	sub.w	sp, sp, #512	; 0x200
    79f8:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    79fa:	bpl.n	7a30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    79fc:	lsls	r3, r5, #30
    79fe:	beq.n	7a0e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    7a00:	mov	r1, r5
    7a02:	mov	r0, sp
    7a04:	mov.w	r2, #512	; 0x200
    7a08:	bl	82a4 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    7a0c:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    7a0e:	mov	r2, r5
    7a10:	mov	r1, r6
    7a12:	movs	r3, #1
    7a14:	ldr	r0, [pc, #120]	; (7a90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    7a16:	bl	752c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7a1a:	cbnz	r0, 7a2a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a1c:	ldr	r1, [pc, #116]	; (7a94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    7a1e:	ldr	r3, [pc, #120]	; (7a98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a20:	movs	r4, #13
  m_errorLine = line;
    7a22:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a26:	strb	r4, [r1, #0]
  m_errorLine = line;
    7a28:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    7a2a:	add.w	sp, sp, #512	; 0x200
    7a2e:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7a30:	ldrb	r3, [r0, #9]
    7a32:	cmp	r3, #2
    7a34:	mov	r4, r0
    7a36:	beq.n	7a4a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    7a38:	ldr	r3, [r4, #0]
    7a3a:	mov	r0, r4
    7a3c:	ldr	r3, [r3, #20]
    7a3e:	blx	r3
    7a40:	cbnz	r0, 7a7a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    7a42:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    7a44:	add.w	sp, sp, #512	; 0x200
    7a48:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7a4a:	ldr	r3, [r0, #4]
    7a4c:	cmp	r1, r3
    7a4e:	bne.n	7a38 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    7a50:	ldr	r3, [r4, #0]
    7a52:	mov	r1, r5
    7a54:	ldr	r3, [r3, #68]	; 0x44
    7a56:	mov	r0, r4
    7a58:	blx	r3
    7a5a:	cmp	r0, #0
    7a5c:	beq.n	7a42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    7a5e:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7a60:	ldr	r2, [pc, #56]	; (7a9c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    7a62:	adds	r3, #1
    7a64:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7a66:	ldr	r3, [r2, #0]
    7a68:	lsrs	r3, r3, #16
    7a6a:	lsls	r3, r3, #16
    7a6c:	cmp	r3, #0
    7a6e:	bne.n	7a2a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    7a70:	ldr	r3, [r4, #0]
    7a72:	mov	r0, r4
    7a74:	ldr	r3, [r3, #20]
    7a76:	blx	r3
    7a78:	b.n	7a2a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    7a7a:	ldr	r3, [r4, #0]
    7a7c:	mov	r1, r6
    7a7e:	ldr	r3, [r3, #72]	; 0x48
    7a80:	mov	r0, r4
    7a82:	blx	r3
    7a84:	cmp	r0, #0
    7a86:	beq.n	7a42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    7a88:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    7a8a:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    7a8c:	strb	r3, [r4, #9]
    7a8e:	b.n	7a50 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    7a90:	.word	0x183a0001
    7a94:	.word	0x20014714
    7a98:	.word	0x2001aa68
    7a9c:	.word	0x400b1004

00007aa0 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    7aa0:	ldrb	r3, [r0, #9]
    7aa2:	cmp	r3, #1
    7aa4:	beq.n	7ac0 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7aa6:	cmp	r3, #2
    7aa8:	beq.n	7aae <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    7aaa:	movs	r0, #1
    7aac:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    7aae:	movs	r1, #0
    if (!writeStop()) {
    7ab0:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    7ab2:	strb	r1, [r0, #9]
    if (!writeStop()) {
    7ab4:	ldr	r3, [r3, #76]	; 0x4c
    7ab6:	ldr	r2, [pc, #20]	; (7acc <SdioCard::syncDevice()+0x2c>)
    7ab8:	cmp	r3, r2
    7aba:	bne.n	7ac8 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    7abc:	b.w	7720 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    7ac0:	movs	r3, #0
    7ac2:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    7ac4:	b.w	7720 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    7ac8:	bx	r3
    7aca:	nop
    7acc:	.word	0x00007799

00007ad0 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7ad0:	push	{r3, r4, r5, r6, r7, lr}
    7ad2:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7ad4:	ldr	r0, [pc, #116]	; (7b4c <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7ad6:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7ad8:	bl	7340 <waitTimeout(bool (*)())>
    7adc:	cbz	r0, 7af0 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ade:	ldr	r1, [pc, #112]	; (7b50 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7ae0:	ldr	r3, [pc, #112]	; (7b54 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ae2:	movs	r0, #10
  m_errorLine = line;
    7ae4:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ae8:	strb	r0, [r1, #0]
  m_errorLine = line;
    7aea:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7aec:	movs	r0, #0
    7aee:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7af0:	ldr	r2, [pc, #100]	; (7b58 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7af2:	ldr.w	lr, [pc, #132]	; 7b78 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7af6:	ldr	r7, [pc, #100]	; (7b5c <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7af8:	ldr	r6, [pc, #100]	; (7b60 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7afa:	ldr	r3, [pc, #104]	; (7b64 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7afc:	mov.w	ip, #1
    7b00:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7b04:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7b06:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7b08:	ldr	r5, [pc, #92]	; (7b68 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7b0a:	ldr	r2, [pc, #96]	; (7b6c <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7b0c:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7b0e:	ldr	r0, [pc, #96]	; (7b70 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7b10:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7b12:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7b14:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7b18:	cbnz	r0, 7b2a <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b1a:	ldr	r1, [pc, #52]	; (7b50 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7b1c:	ldr	r3, [pc, #52]	; (7b54 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b1e:	movs	r4, #4
  m_errorLine = line;
    7b20:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b24:	strb	r4, [r1, #0]
  m_errorLine = line;
    7b26:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    7b28:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7b2a:	ldr	r0, [pc, #72]	; (7b74 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    7b2c:	bl	7368 <yieldTimeout(bool (*)())>
    7b30:	cbnz	r0, 7b3a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    7b32:	bl	750c <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    7b36:	cbz	r0, 7b3a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    7b38:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b3a:	ldr	r1, [pc, #20]	; (7b50 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7b3c:	ldr	r3, [pc, #20]	; (7b54 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b3e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    7b40:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b44:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b46:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    7b48:	movs	r0, #0
    7b4a:	pop	{r3, r4, r5, r6, r7, pc}
    7b4c:	.word	0x000074c5
    7b50:	.word	0x20014714
    7b54:	.word	0x2001aa68
    7b58:	.word	0x2001aa48
    7b5c:	.word	0x400b1000
    7b60:	.word	0x400b1004
    7b64:	.word	0x400b1038
    7b68:	.word	0x00010040
    7b6c:	.word	0x117f0002
    7b70:	.word	0x063a0011
    7b74:	.word	0x000071c5
    7b78:	.word	0x2001aa60

00007b7c <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7b7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7b80:	ldr	r5, [pc, #568]	; (7dbc <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7b82:	ldr	r4, [pc, #572]	; (7dc0 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    7b84:	ldr.w	r8, [pc, #684]	; 7e34 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7b88:	ldr	r7, [pc, #568]	; (7dc4 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    7b8a:	ldr	r6, [pc, #572]	; (7dc8 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    7b8c:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    7b8e:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7b90:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    7b92:	strb	r3, [r0, #9]
  m_initDone = false;
    7b94:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7b98:	strb	r3, [r7, #0]
  m_version2 = false;
    7b9a:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7b9c:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7b9e:	ldr	r2, [pc, #556]	; (7dcc <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7ba0:	ldr	r0, [pc, #556]	; (7dd0 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7ba2:	ldr	r1, [pc, #560]	; (7dd4 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7ba4:	ldr.w	lr, [pc, #656]	; 7e38 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7ba8:	orr.w	r3, r3, #201326592	; 0xc000000
    7bac:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7bae:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7bb0:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7bb4:	orr.w	r3, r3, #131072	; 0x20000
    7bb8:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7bba:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7bbc:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7bc0:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7bc4:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7bc8:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7bca:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7bce:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7bd0:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7bd2:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7bd4:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7bd6:	ldr	r3, [r2, #0]
    7bd8:	orr.w	r3, r3, #16777216	; 0x1000000
    7bdc:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7be0:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7be2:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    7be4:	ldr	r3, [r2, #0]
    7be6:	ldr	r4, [pc, #496]	; (7dd8 <SdioCard::begin(SdioConfig)+0x25c>)
    7be8:	lsls	r1, r3, #7
    7bea:	bmi.n	7be4 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    7bec:	mov.w	r0, #400	; 0x190
    7bf0:	bl	7210 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7bf4:	ldr.w	ip, [pc, #472]	; 7dd0 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7bf8:	ldr.w	lr, [pc, #572]	; 7e38 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7bfc:	ldr	r1, [pc, #468]	; (7dd4 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7bfe:	ldr	r2, [pc, #476]	; (7ddc <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7c00:	ldr	r0, [pc, #476]	; (7de0 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7c02:	movw	r3, #1091	; 0x443
    7c06:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7c0a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7c0e:	mov.w	lr, #1088	; 0x440
    7c12:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7c16:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7c18:	add.w	r2, r2, #409600	; 0x64000
    7c1c:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7c1e:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7c20:	ldr	r0, [pc, #448]	; (7de4 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7c22:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7c24:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    7c26:	ldr	r1, [pc, #448]	; (7de8 <SdioCard::begin(SdioConfig)+0x26c>)
    7c28:	movs	r0, #81	; 0x51
    7c2a:	bl	88e0 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7c2e:	ldr	r3, [pc, #444]	; (7dec <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7c30:	ldr	r1, [pc, #444]	; (7df0 <SdioCard::begin(SdioConfig)+0x274>)
    7c32:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7c34:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7c38:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7c3a:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    7c3c:	ldr	r3, [r4, #0]
    7c3e:	orr.w	r3, r3, #134217728	; 0x8000000
    7c42:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    7c44:	ldr	r1, [r4, #0]
    7c46:	ands.w	r1, r1, #134217728	; 0x8000000
    7c4a:	bne.n	7c44 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    7c4c:	mov	r0, r1
    7c4e:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7c52:	mov	r4, r0
    7c54:	cmp	r0, #0
    7c56:	beq.n	7cf6 <SdioCard::begin(SdioConfig)+0x17a>
    7c58:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    7c5a:	mov.w	r1, #426	; 0x1aa
    7c5e:	ldr	r0, [pc, #404]	; (7df4 <SdioCard::begin(SdioConfig)+0x278>)
    7c60:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7c64:	cmp	r0, #0
    7c66:	bne.n	7d24 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    7c68:	subs	r4, #1
    7c6a:	bne.n	7c5a <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7c6c:	ldrb	r3, [r6, #0]
    7c6e:	ldr	r6, [pc, #392]	; (7df8 <SdioCard::begin(SdioConfig)+0x27c>)
    7c70:	cmp	r3, #0
    7c72:	it	eq
    7c74:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    7c78:	bl	8954 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7c7c:	ldr	r4, [pc, #380]	; (7dfc <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    7c7e:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7c80:	movs	r1, #0
    7c82:	ldr	r0, [pc, #380]	; (7e00 <SdioCard::begin(SdioConfig)+0x284>)
    7c84:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7c88:	cbnz	r0, 7ca0 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c8a:	ldr	r2, [pc, #376]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7c8c:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c90:	movs	r3, #23
  m_errorLine = line;
    7c92:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c94:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    7c96:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c98:	mov	r0, r4
    7c9a:	add	sp, #68	; 0x44
    7c9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7ca0:	mov	r1, r6
    7ca2:	ldr	r0, [pc, #356]	; (7e08 <SdioCard::begin(SdioConfig)+0x28c>)
    7ca4:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7ca8:	cmp	r0, #0
    7caa:	beq.n	7c8a <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    7cac:	bl	8954 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7cb0:	ldr	r3, [pc, #344]	; (7e0c <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7cb2:	ldr	r2, [pc, #328]	; (7dfc <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7cb4:	rsb	r0, r9, r0
    7cb8:	cmp	r0, r3
    7cba:	bhi.n	7c8a <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7cbc:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    7cbe:	cmp	r3, #0
    7cc0:	bge.n	7c80 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    7cc2:	ldr	r3, [pc, #332]	; (7e10 <SdioCard::begin(SdioConfig)+0x294>)
    7cc4:	ldr	r1, [r2, #0]
    7cc6:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    7cc8:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7cca:	ldr	r0, [pc, #328]	; (7e14 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    7ccc:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    7cce:	it	mi
    7cd0:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7cd2:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    7cd6:	it	mi
    7cd8:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7cda:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7cde:	mov	r4, r0
    7ce0:	cbnz	r0, 7d0a <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7ce2:	ldr	r2, [pc, #288]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7ce4:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ce8:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7cea:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7cec:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cee:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7cf0:	add	sp, #68	; 0x44
    7cf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7cf6:	ldr	r2, [pc, #268]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7cf8:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cfc:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7cfe:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7d00:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d02:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7d04:	add	sp, #68	; 0x44
    7d06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    7d0a:	movs	r1, #0
    7d0c:	ldr	r0, [pc, #264]	; (7e18 <SdioCard::begin(SdioConfig)+0x29c>)
    7d0e:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7d12:	mov	r4, r0
    7d14:	cbnz	r0, 7d46 <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7d16:	ldr	r2, [pc, #236]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7d18:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d1c:	movs	r3, #3
  m_errorLine = line;
    7d1e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d20:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    7d22:	b.n	7c98 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    7d24:	ldr	r3, [pc, #212]	; (7dfc <SdioCard::begin(SdioConfig)+0x280>)
    7d26:	ldr	r3, [r3, #0]
    7d28:	cmp.w	r3, #426	; 0x1aa
    7d2c:	beq.n	7d3e <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7d2e:	ldr	r2, [pc, #212]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7d30:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d34:	movs	r3, #6
  m_errorLine = line;
    7d36:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d38:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    7d3a:	movs	r4, #0
    7d3c:	b.n	7c98 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    7d3e:	movs	r3, #1
    7d40:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7d42:	ldr	r6, [pc, #180]	; (7df8 <SdioCard::begin(SdioConfig)+0x27c>)
    7d44:	b.n	7c78 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7d46:	ldr	r3, [pc, #180]	; (7dfc <SdioCard::begin(SdioConfig)+0x280>)
    7d48:	ldr	r6, [pc, #208]	; (7e1c <SdioCard::begin(SdioConfig)+0x2a0>)
    7d4a:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7d4c:	ldr	r1, [pc, #208]	; (7e20 <SdioCard::begin(SdioConfig)+0x2a4>)
    7d4e:	ldr	r0, [pc, #212]	; (7e24 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7d50:	lsrs	r3, r3, #16
    7d52:	lsls	r3, r3, #16
    7d54:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7d56:	bl	7460 <readReg16(unsigned long, void*)>
    7d5a:	mov	r4, r0
    7d5c:	cbnz	r0, 7d6c <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7d5e:	ldr	r2, [pc, #164]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7d60:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d64:	movs	r3, #7
  m_errorLine = line;
    7d66:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d68:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    7d6a:	b.n	7c98 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    7d6c:	ldr	r1, [pc, #184]	; (7e28 <SdioCard::begin(SdioConfig)+0x2ac>)
    7d6e:	ldr	r0, [pc, #188]	; (7e2c <SdioCard::begin(SdioConfig)+0x2b0>)
    7d70:	bl	7460 <readReg16(unsigned long, void*)>
    7d74:	mov	r4, r0
    7d76:	cbnz	r0, 7d86 <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7d78:	ldr	r2, [pc, #136]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7d7a:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d7e:	movs	r3, #8
  m_errorLine = line;
    7d80:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d82:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    7d84:	b.n	7c98 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    7d86:	ldr	r1, [r6, #0]
    7d88:	ldr	r0, [pc, #164]	; (7e30 <SdioCard::begin(SdioConfig)+0x2b4>)
    7d8a:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7d8e:	mov	r4, r0
    7d90:	cbnz	r0, 7da0 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7d92:	ldr	r2, [pc, #112]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7d94:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d98:	movs	r3, #5
  m_errorLine = line;
    7d9a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d9c:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    7d9e:	b.n	7c98 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7da0:	ldr	r1, [r6, #0]
    7da2:	ldr	r0, [pc, #92]	; (7e00 <SdioCard::begin(SdioConfig)+0x284>)
    7da4:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7da8:	cmp	r0, #0
    7daa:	bne.n	7e3c <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7dac:	ldr	r2, [pc, #84]	; (7e04 <SdioCard::begin(SdioConfig)+0x288>)
    7dae:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7db2:	movs	r3, #20
  m_errorLine = line;
    7db4:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7db6:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    7db8:	movs	r4, #0
    7dba:	b.n	7c98 <SdioCard::begin(SdioConfig)+0x11c>
    7dbc:	.word	0x20014714
    7dc0:	.word	0x4000d800
    7dc4:	.word	0x2001aa3c
    7dc8:	.word	0x2001aa24
    7dcc:	.word	0x40048030
    7dd0:	.word	0x4004d000
    7dd4:	.word	0x4004d008
    7dd8:	.word	0x400b102c
    7ddc:	.word	0x4004d00c
    7de0:	.word	0x4004d010
    7de4:	.word	0x117f000b
    7de8:	.word	0x0000716d
    7dec:	.word	0xe000e108
    7df0:	.word	0xe000e451
    7df4:	.word	0x081a0000
    7df8:	.word	0x40300000
    7dfc:	.word	0x400b1010
    7e00:	.word	0x371a0000
    7e04:	.word	0x2001aa68
    7e08:	.word	0x29020000
    7e0c:	.word	0x000f4240
    7e10:	.word	0x2001aa40
    7e14:	.word	0x02090000
    7e18:	.word	0x031a0000
    7e1c:	.word	0x2001aa44
    7e20:	.word	0x2001aa50
    7e24:	.word	0x09090000
    7e28:	.word	0x2001aa28
    7e2c:	.word	0x0a090000
    7e30:	.word	0x071b0000
    7e34:	.word	0x2001aa4c
    7e38:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7e3c:	movs	r1, #2
    7e3e:	ldr	r0, [pc, #168]	; (7ee8 <SdioCard::begin(SdioConfig)+0x36c>)
    7e40:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    7e44:	mov	r4, r0
    7e46:	cmp	r0, #0
    7e48:	beq.n	7dac <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7e4a:	ldr	r3, [pc, #160]	; (7eec <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7e4c:	ldr	r0, [pc, #160]	; (7ef0 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7e4e:	ldr	r2, [r3, #0]
    7e50:	bic.w	r2, r2, #6
    7e54:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7e56:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7e58:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7e5c:	orr.w	r2, r2, #2
    7e60:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7e62:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7e64:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7e66:	mvn.w	r0, #4278190080	; 0xff000000
    7e6a:	bl	7ad0 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7e6e:	cbz	r0, 7e78 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7e70:	ldrb.w	r3, [sp, #13]
    7e74:	lsls	r3, r3, #30
    7e76:	bmi.n	7eca <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    7e78:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7e7c:	ldr.w	fp, [pc, #132]	; 7f04 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7e80:	ldr.w	sl, [pc, #132]	; 7f08 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7e84:	ldr.w	r9, [pc, #132]	; 7f0c <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7e88:	ldr	r7, [pc, #104]	; (7ef4 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7e8a:	ldr	r6, [pc, #108]	; (7ef8 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7e8c:	ldr	r5, [pc, #108]	; (7efc <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7e8e:	movw	r3, #259	; 0x103
    7e92:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7e96:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7e9a:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7e9e:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7ea0:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7ea2:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    7ea4:	bl	7210 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7ea8:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7eac:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    7eb0:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7eb2:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7eb6:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7eba:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7ebe:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7ec0:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7ec2:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    7ec4:	strb.w	r2, [r8]
  return true;
    7ec8:	b.n	7c98 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7eca:	mov	r1, sp
    7ecc:	ldr	r0, [pc, #48]	; (7f00 <SdioCard::begin(SdioConfig)+0x384>)
    7ece:	bl	7ad0 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7ed2:	cmp	r0, #0
    7ed4:	beq.n	7e78 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7ed6:	ldrb.w	r3, [sp, #16]
    7eda:	and.w	r3, r3, #15
    7ede:	cmp	r3, #1
    7ee0:	bne.n	7e78 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    7ee2:	movw	r0, #50000	; 0xc350
    7ee6:	b.n	7e7c <SdioCard::begin(SdioConfig)+0x300>
    7ee8:	.word	0x061a0000
    7eec:	.word	0x400b1028
    7ef0:	.word	0x400b1044
    7ef4:	.word	0x4004d00c
    7ef8:	.word	0x4004d010
    7efc:	.word	0x4004d014
    7f00:	.word	0x80fffff1
    7f04:	.word	0x4004d000
    7f08:	.word	0x4004d004
    7f0c:	.word	0x4004d008

00007f10 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    7f10:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7f12:	ldr	r3, [pc, #160]	; (7fb4 <SdioCard::readData(unsigned char*)+0xa4>)
    7f14:	ldr	r3, [r3, #0]
    7f16:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    7f18:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7f1a:	bmi.n	7f3a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7f1c:	ldr	r3, [pc, #152]	; (7fb8 <SdioCard::readData(unsigned char*)+0xa8>)
    7f1e:	ldr	r2, [r3, #0]
    7f20:	bic.w	r2, r2, #65536	; 0x10000
    7f24:	str	r2, [r3, #0]
    noInterrupts();
    7f26:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7f28:	ldr	r2, [r3, #0]
    7f2a:	orr.w	r2, r2, #131072	; 0x20000
    7f2e:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f30:	ldr	r2, [r3, #0]
    7f32:	orr.w	r2, r2, #65536	; 0x10000
    7f36:	str	r2, [r3, #0]
    interrupts();
    7f38:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    7f3a:	ldr	r0, [pc, #128]	; (7fbc <SdioCard::readData(unsigned char*)+0xac>)
    7f3c:	bl	7340 <waitTimeout(bool (*)())>
    7f40:	cmp	r0, #0
    7f42:	bne.n	7fa2 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    7f44:	ldr	r4, [pc, #108]	; (7fb4 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    7f46:	ldr	r0, [pc, #120]	; (7fc0 <SdioCard::readData(unsigned char*)+0xb0>)
    7f48:	subs	r3, r5, #4
    7f4a:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    7f4e:	ldr	r2, [r4, #0]
    7f50:	lsls	r1, r2, #20
    7f52:	bpl.n	7f4e <SdioCard::readData(unsigned char*)+0x3e>
    7f54:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    7f58:	ldr	r2, [r0, #0]
    7f5a:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7f5e:	cmp	r1, r3
    7f60:	bne.n	7f58 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7f62:	cmp	r5, r1
    7f64:	mov	r3, r1
    7f66:	bne.n	7f4e <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    7f68:	ldr	r0, [pc, #88]	; (7fc4 <SdioCard::readData(unsigned char*)+0xb4>)
    7f6a:	bl	7340 <waitTimeout(bool (*)())>
    7f6e:	cbnz	r0, 7f90 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    7f70:	ldr	r2, [pc, #84]	; (7fc8 <SdioCard::readData(unsigned char*)+0xb8>)
    7f72:	ldr	r3, [pc, #88]	; (7fcc <SdioCard::readData(unsigned char*)+0xbc>)
    7f74:	ldr	r1, [r2, #0]
    7f76:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7f78:	ldr	r1, [r3, #0]
    7f7a:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7f7c:	ldr	r2, [r3, #0]
    7f7e:	lsls	r2, r2, #30
    7f80:	bpl.n	7fb2 <SdioCard::readData(unsigned char*)+0xa2>
    7f82:	ldr	r3, [r3, #0]
    7f84:	ldr	r0, [pc, #72]	; (7fd0 <SdioCard::readData(unsigned char*)+0xc0>)
    7f86:	ands	r0, r3
    7f88:	clz	r0, r0
    7f8c:	lsrs	r0, r0, #5
    7f8e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f90:	ldr	r1, [pc, #64]	; (7fd4 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    7f92:	ldr	r3, [pc, #68]	; (7fd8 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f94:	movs	r0, #29
  m_errorLine = line;
    7f96:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f9a:	strb	r0, [r1, #0]
  m_errorLine = line;
    7f9c:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    7f9e:	movs	r0, #0
    7fa0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fa2:	ldr	r1, [pc, #48]	; (7fd4 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    7fa4:	ldr	r3, [pc, #48]	; (7fd8 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fa6:	movs	r0, #26
  m_errorLine = line;
    7fa8:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fac:	strb	r0, [r1, #0]
  m_errorLine = line;
    7fae:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    7fb0:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    7fb2:	pop	{r3, r4, r5, pc}
    7fb4:	.word	0x400b1024
    7fb8:	.word	0x400b1028
    7fbc:	.word	0x000071d1
    7fc0:	.word	0x400b1020
    7fc4:	.word	0x000071f9
    7fc8:	.word	0x400b1030
    7fcc:	.word	0x2001aa48
    7fd0:	.word	0x117f0000
    7fd4:	.word	0x20014714
    7fd8:	.word	0x2001aa68

00007fdc <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7fdc:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7fde:	ldr	r0, [pc, #80]	; (8030 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7fe0:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7fe2:	bl	7368 <yieldTimeout(bool (*)())>
    7fe6:	cbnz	r0, 801c <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7fe8:	ldr	r2, [pc, #72]	; (8034 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7fea:	ldr	r1, [pc, #76]	; (8038 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7fec:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7fee:	ldr	r0, [pc, #76]	; (803c <SdioCard::readStart(unsigned long)+0x60>)
    7ff0:	ldr	r5, [pc, #76]	; (8040 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7ff2:	orr.w	r3, r3, #65536	; 0x10000
    7ff6:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7ff8:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7ffa:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7ffc:	cbnz	r3, 8018 <SdioCard::readStart(unsigned long)+0x3c>
    7ffe:	lsls	r1, r4, #9
    8000:	ldr	r0, [pc, #64]	; (8044 <SdioCard::readStart(unsigned long)+0x68>)
    8002:	bl	73e4 <cardCommand(unsigned long, unsigned long)>
    8006:	cbnz	r0, 8016 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8008:	ldr	r1, [pc, #60]	; (8048 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    800a:	ldr	r3, [pc, #64]	; (804c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    800c:	movs	r4, #12
  m_errorLine = line;
    800e:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8012:	strb	r4, [r1, #0]
  m_errorLine = line;
    8014:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    8016:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8018:	mov	r1, r4
    801a:	b.n	8000 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    801c:	ldr	r1, [pc, #40]	; (8048 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    801e:	ldr	r3, [pc, #44]	; (804c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8020:	movs	r0, #10
  m_errorLine = line;
    8022:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8026:	strb	r0, [r1, #0]
  m_errorLine = line;
    8028:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    802a:	movs	r0, #0
    802c:	pop	{r3, r4, r5, pc}
    802e:	nop
    8030:	.word	0x000074c5
    8034:	.word	0x400b1028
    8038:	.word	0x2001aa3c
    803c:	.word	0x400b1004
    8040:	.word	0xffff0200
    8044:	.word	0x123a0032
    8048:	.word	0x20014714
    804c:	.word	0x2001aa68

00008050 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8050:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8052:	ldrb	r3, [r0, #8]
    8054:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8056:	sub.w	sp, sp, #512	; 0x200
    805a:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    805c:	bpl.n	8084 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    805e:	lsls	r3, r2, #30
    8060:	beq.n	80a2 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8062:	mov	r2, sp
    8064:	movs	r3, #1
    8066:	ldr	r0, [pc, #168]	; (8110 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    8068:	bl	752c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    806c:	cbz	r0, 80ae <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    806e:	mov	r1, sp
    8070:	mov	r0, r5
    8072:	mov.w	r2, #512	; 0x200
    8076:	bl	82a4 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    807a:	movs	r5, #1
}
    807c:	mov	r0, r5
    807e:	add.w	sp, sp, #512	; 0x200
    8082:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8084:	ldrb	r3, [r0, #9]
    8086:	cmp	r3, #1
    8088:	mov	r4, r0
    808a:	mov	r6, r1
    808c:	beq.n	80c6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    808e:	ldr	r3, [r4, #0]
    8090:	mov	r0, r4
    8092:	ldr	r3, [r3, #20]
    8094:	blx	r3
    8096:	cbnz	r0, 80ec <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    8098:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    809a:	mov	r0, r5
    809c:	add.w	sp, sp, #512	; 0x200
    80a0:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    80a2:	movs	r3, #1
    80a4:	ldr	r0, [pc, #104]	; (8110 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    80a6:	bl	752c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    80aa:	cmp	r0, #0
    80ac:	bne.n	807a <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80ae:	ldr	r1, [pc, #100]	; (8114 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    80b0:	ldr	r3, [pc, #100]	; (8118 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80b2:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    80b4:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    80b6:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80ba:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    80bc:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    80be:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    80c0:	add.w	sp, sp, #512	; 0x200
    80c4:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    80c6:	ldr	r3, [r0, #4]
    80c8:	cmp	r1, r3
    80ca:	bne.n	808e <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    80cc:	mov	r1, r5
    80ce:	mov	r0, r4
    80d0:	bl	7f10 <SdioCard::readData(unsigned char*)>
    80d4:	mov	r5, r0
    80d6:	cmp	r0, #0
    80d8:	beq.n	8098 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    80da:	ldr	r3, [pc, #64]	; (811c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    80dc:	ldr	r3, [r3, #0]
    80de:	lsrs	r3, r3, #16
    80e0:	lsls	r3, r3, #16
    80e2:	cbz	r3, 8100 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    80e4:	ldr	r3, [r4, #4]
    80e6:	adds	r3, #1
    80e8:	str	r3, [r4, #4]
    80ea:	b.n	809a <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    80ec:	mov	r1, r6
    80ee:	mov	r0, r4
    80f0:	bl	7fdc <SdioCard::readStart(unsigned long)>
    80f4:	cmp	r0, #0
    80f6:	beq.n	8098 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    80f8:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    80fa:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    80fc:	strb	r3, [r4, #9]
    80fe:	b.n	80cc <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    8100:	ldr	r3, [r4, #0]
    8102:	mov	r0, r4
    8104:	ldr	r3, [r3, #20]
    8106:	blx	r3
    8108:	cmp	r0, #0
    810a:	bne.n	80e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    810c:	b.n	8098 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    810e:	nop
    8110:	.word	0x113a0011
    8114:	.word	0x20014714
    8118:	.word	0x2001aa68
    811c:	.word	0x400b1004

00008120 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    8120:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    8122:	ldr	r3, [r0, #0]
    8124:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    8126:	ldrb	r1, [r3, #11]
    8128:	cbz	r1, 816a <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    812a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    812c:	ldrb	r1, [r3, #11]
    812e:	lsls	r0, r1, #31
    8130:	bpl.n	8140 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    8132:	ldr	r0, [pc, #100]	; (8198 <SdSpiArduinoDriver::activate()+0x78>)
    8134:	ldr	r1, [r3, #12]
    8136:	ldr	r4, [r0, #0]
    8138:	ands	r1, r4
    813a:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    813c:	str	r1, [r0, #0]
    813e:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8140:	lsls	r4, r1, #30
    8142:	bpl.n	8152 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8144:	ldr	r0, [pc, #84]	; (819c <SdSpiArduinoDriver::activate()+0x7c>)
    8146:	ldr	r1, [r3, #16]
    8148:	ldr	r4, [r0, #0]
    814a:	ands	r1, r4
    814c:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    814e:	str	r1, [r0, #0]
    8150:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    8152:	lsls	r0, r1, #29
    8154:	bpl.n	8164 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    8156:	ldr	r0, [pc, #72]	; (81a0 <SdSpiArduinoDriver::activate()+0x80>)
    8158:	ldr	r1, [r3, #20]
    815a:	ldr	r4, [r0, #0]
    815c:	ands	r1, r4
    815e:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    8160:	str	r1, [r0, #0]
    8162:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8164:	lsls	r1, r1, #28
    8166:	bmi.n	8188 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    8168:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    816a:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    816c:	ldr	r1, [r3, #12]
    816e:	cmp	r1, r2
    8170:	beq.n	8182 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    8172:	ldr	r0, [pc, #48]	; (81a4 <SdSpiArduinoDriver::activate()+0x84>)
    8174:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    8176:	ldr	r1, [pc, #48]	; (81a8 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    8178:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    817a:	orr.w	r0, r2, #1073741824	; 0x40000000
    817e:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    8180:	str	r1, [r3, #0]
}
    8182:	ldr.w	r4, [sp], #4
    8186:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    8188:	ldr	r0, [pc, #32]	; (81ac <SdSpiArduinoDriver::activate()+0x8c>)
    818a:	ldr	r1, [r3, #24]
    818c:	ldr	r4, [r0, #0]
    818e:	ands	r1, r4
    8190:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    8192:	str	r1, [r0, #0]
    8194:	b.n	8168 <SdSpiArduinoDriver::activate()+0x48>
    8196:	nop
    8198:	.word	0xe000e180
    819c:	.word	0xe000e184
    81a0:	.word	0xe000e188
    81a4:	.word	0x003f4001
    81a8:	.word	0x803f0000
    81ac:	.word	0xe000e18c

000081b0 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    81b0:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    81b2:	ldrb	r3, [r2, #11]
    81b4:	cbz	r3, 81e4 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    81b6:	lsls	r1, r3, #31
    81b8:	bpl.n	81c2 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    81ba:	ldr	r3, [pc, #44]	; (81e8 <SdSpiArduinoDriver::deactivate()+0x38>)
    81bc:	ldr	r1, [r2, #28]
    81be:	str	r1, [r3, #0]
    81c0:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    81c2:	lsls	r0, r3, #30
    81c4:	bpl.n	81ce <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    81c6:	ldr	r3, [pc, #36]	; (81ec <SdSpiArduinoDriver::deactivate()+0x3c>)
    81c8:	ldr	r1, [r2, #32]
    81ca:	str	r1, [r3, #0]
    81cc:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    81ce:	lsls	r1, r3, #29
    81d0:	bpl.n	81da <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    81d2:	ldr	r3, [pc, #28]	; (81f0 <SdSpiArduinoDriver::deactivate()+0x40>)
    81d4:	ldr	r1, [r2, #36]	; 0x24
    81d6:	str	r1, [r3, #0]
    81d8:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    81da:	lsls	r3, r3, #28
    81dc:	bpl.n	81e4 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    81de:	ldr	r3, [pc, #20]	; (81f4 <SdSpiArduinoDriver::deactivate()+0x44>)
    81e0:	ldr	r2, [r2, #40]	; 0x28
    81e2:	str	r2, [r3, #0]
    81e4:	bx	lr
    81e6:	nop
    81e8:	.word	0xe000e100
    81ec:	.word	0xe000e104
    81f0:	.word	0xe000e108
    81f4:	.word	0xe000e10c

000081f8 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    81f8:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    81fa:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    81fc:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    8200:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8202:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8204:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8206:	ldr	r3, [r2, #44]	; 0x2c
    8208:	cmp	r3, #0
    820a:	bge.n	8206 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    820c:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    820e:	uxtb	r0, r0
    8210:	bx	lr
    8212:	nop

00008214 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    8214:	push	{r4, r5, r6, lr}
    8216:	mov	r5, r0
    8218:	mov	r4, r1
    821a:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    821c:	mov	r0, r1
    821e:	movs	r1, #255	; 0xff
    8220:	bl	c25c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8224:	ldr	r0, [r5, #0]
    8226:	mov	r3, r6
    8228:	mov	r2, r4
    822a:	mov	r1, r4
    822c:	bl	2adc <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8230:	movs	r0, #0
    8232:	pop	{r4, r5, r6, pc}

00008234 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    8234:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8236:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8238:	mov.w	r3, #2147483648	; 0x80000000
    823c:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    823e:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8240:	ldr	r3, [r2, #44]	; 0x2c
    8242:	cmp	r3, #0
    8244:	bge.n	8240 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    8246:	ldr	r3, [r2, #56]	; 0x38
    8248:	bx	lr
    824a:	nop

0000824c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    824c:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    824e:	subs	r5, r2, #1
    8250:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8254:	sub.w	sp, sp, #516	; 0x204
    8258:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    825a:	bcc.n	8282 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    825c:	cbz	r2, 827c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    825e:	ldr	r2, [r0, #0]
    8260:	ldr	r2, [r2, #0]
    8262:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8264:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    8268:	ldrb.w	r3, [r1], #1
    826c:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    826e:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8270:	ldr	r3, [r2, #44]	; 0x2c
    8272:	cmp	r3, #0
    8274:	bge.n	8270 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    8276:	cmp	r1, r0
		return port().POPR;
    8278:	ldr	r3, [r2, #56]	; 0x38
    827a:	bne.n	8268 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    827c:	add.w	sp, sp, #516	; 0x204
    8280:	pop	{r4, r5, pc}
    8282:	mov	r5, r0
    8284:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    8286:	mov	r0, sp
    8288:	bl	82a4 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    828c:	mov	r3, r4
    828e:	mov	r2, sp
    8290:	mov	r1, sp
    8292:	ldr	r0, [r5, #0]
    8294:	bl	2adc <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    8298:	add.w	sp, sp, #516	; 0x204
    829c:	pop	{r4, r5, pc}
    829e:	nop

000082a0 <sdCsWrite(unsigned char, bool)>:
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
__attribute__((weak))
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    82a0:	b.w	8920 <digitalWrite>

000082a4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    82a4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    82a6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    82aa:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    82ae:	bne.n	838c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    82b0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    82b2:	bcc.n	8338 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    82b4:	ldr.w	r3, [r1], #4
    82b8:	str.w	r3, [r0], #4
    82bc:	ldr.w	r3, [r1], #4
    82c0:	str.w	r3, [r0], #4
    82c4:	ldr.w	r3, [r1], #4
    82c8:	str.w	r3, [r0], #4
    82cc:	ldr.w	r3, [r1], #4
    82d0:	str.w	r3, [r0], #4
    82d4:	ldr.w	r3, [r1], #4
    82d8:	str.w	r3, [r0], #4
    82dc:	ldr.w	r3, [r1], #4
    82e0:	str.w	r3, [r0], #4
    82e4:	ldr.w	r3, [r1], #4
    82e8:	str.w	r3, [r0], #4
    82ec:	ldr.w	r3, [r1], #4
    82f0:	str.w	r3, [r0], #4
    82f4:	ldr.w	r3, [r1], #4
    82f8:	str.w	r3, [r0], #4
    82fc:	ldr.w	r3, [r1], #4
    8300:	str.w	r3, [r0], #4
    8304:	ldr.w	r3, [r1], #4
    8308:	str.w	r3, [r0], #4
    830c:	ldr.w	r3, [r1], #4
    8310:	str.w	r3, [r0], #4
    8314:	ldr.w	r3, [r1], #4
    8318:	str.w	r3, [r0], #4
    831c:	ldr.w	r3, [r1], #4
    8320:	str.w	r3, [r0], #4
    8324:	ldr.w	r3, [r1], #4
    8328:	str.w	r3, [r0], #4
    832c:	ldr.w	r3, [r1], #4
    8330:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8334:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8336:	bcs.n	82b4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8338:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    833a:	bcc.n	8360 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    833c:	ldr.w	r3, [r1], #4
    8340:	str.w	r3, [r0], #4
    8344:	ldr.w	r3, [r1], #4
    8348:	str.w	r3, [r0], #4
    834c:	ldr.w	r3, [r1], #4
    8350:	str.w	r3, [r0], #4
    8354:	ldr.w	r3, [r1], #4
    8358:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    835c:	subs	r2, #16
	bhs	.Lmid_block_loop
    835e:	bcs.n	833c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8360:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8362:	bcc.n	8370 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8364:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8368:	str.w	r3, [r0], #4
	subs	r2, #4
    836c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    836e:	bcs.n	8364 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8370:	adds	r2, #4
	beq	.Ldone
    8372:	beq.n	8386 <memcpy+0xe2>

	lsls	r2, r2, #31
    8374:	lsls	r2, r2, #31
	itt ne
    8376:	itt	ne
	ldrbne  r3, [r1], #1
    8378:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    837c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8380:	bcc.n	8386 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8382:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8384:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8386:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8388:	bx	lr
    838a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    838c:	cmp	r2, #8
	blo	.Lbyte_copy
    838e:	bcc.n	83b8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8390:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8392:	beq.n	82b0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8394:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8398:	beq.n	82b0 <memcpy+0xc>

	rsb	r3, #4
    839a:	rsb	r3, r3, #4
	subs	r2, r3
    839e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    83a0:	lsls	r3, r3, #31
	itt ne
    83a2:	itt	ne
	ldrbne  r3, [r1], #1
    83a4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    83a8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    83ac:	bcc.n	82b0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    83ae:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    83b2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    83b6:	b.n	82b0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    83b8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    83ba:	bcc.n	8370 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    83bc:	subs	r2, #1
	ldrb    r3, [r1], #1
    83be:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    83c2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    83c6:	bcs.n	83bc <memcpy+0x118>

	ldrb	r3, [r1]
    83c8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    83ca:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    83cc:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    83ce:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    83d0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    83d2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    83d4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    83d6:	bx	lr

000083d8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    83d8:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    83da:	ldr	r5, [pc, #60]	; (8418 <usb_serial_getchar+0x40>)
    83dc:	ldr	r0, [r5, #0]
    83de:	cbz	r0, 8400 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    83e0:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    83e2:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    83e4:	adds	r1, r0, r3
    83e6:	adds	r3, #1
	if (i >= rx_packet->len) {
    83e8:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    83ea:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    83ec:	bcs.n	83f4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    83ee:	strh	r3, [r0, #2]
	}
	return c;
    83f0:	mov	r0, r4
}
    83f2:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    83f4:	bl	8be0 <usb_free>
		rx_packet = NULL;
    83f8:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    83fa:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    83fc:	str	r3, [r5, #0]
    83fe:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8400:	ldr	r3, [pc, #24]	; (841c <usb_serial_getchar+0x44>)
    8402:	ldrb	r3, [r3, #0]
    8404:	cbz	r3, 8412 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8406:	movs	r0, #3
    8408:	bl	8c2c <usb_rx>
    840c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    840e:	cmp	r0, #0
    8410:	bne.n	83e0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8412:	mov.w	r0, #4294967295
    8416:	pop	{r3, r4, r5, pc}
    8418:	.word	0x2001aa78
    841c:	.word	0x2001ab64

00008420 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    8420:	push	{r4, lr}
	if (!rx_packet) {
    8422:	ldr	r4, [pc, #36]	; (8448 <usb_serial_peekchar+0x28>)
    8424:	ldr	r0, [r4, #0]
    8426:	cbz	r0, 8430 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    8428:	ldrh	r3, [r0, #2]
    842a:	add	r0, r3
    842c:	ldrb	r0, [r0, #8]
}
    842e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8430:	ldr	r3, [pc, #24]	; (844c <usb_serial_peekchar+0x2c>)
    8432:	ldrb	r3, [r3, #0]
    8434:	cbz	r3, 8442 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8436:	movs	r0, #3
    8438:	bl	8c2c <usb_rx>
    843c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    843e:	cmp	r0, #0
    8440:	bne.n	8428 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8442:	mov.w	r0, #4294967295
    8446:	pop	{r4, pc}
    8448:	.word	0x2001aa78
    844c:	.word	0x2001ab64

00008450 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8450:	ldr	r3, [pc, #16]	; (8464 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    8452:	ldr	r2, [pc, #20]	; (8468 <usb_serial_available+0x18>)
    8454:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    8456:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8458:	cbz	r3, 8462 <usb_serial_available+0x12>
    845a:	ldrh	r2, [r3, #0]
    845c:	ldrh	r3, [r3, #2]
    845e:	subs	r3, r2, r3
    8460:	add	r0, r3
	return count;
}
    8462:	bx	lr
    8464:	.word	0x2001aa78
    8468:	.word	0x2001af58

0000846c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    846c:	ldr	r3, [pc, #44]	; (849c <usb_serial_flush_input+0x30>)
    846e:	ldrb	r3, [r3, #0]
    8470:	cbz	r3, 849a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8472:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    8474:	ldr	r4, [pc, #40]	; (84a0 <usb_serial_flush_input+0x34>)
    8476:	ldr	r0, [r4, #0]
    8478:	cbz	r0, 848e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    847a:	bl	8be0 <usb_free>
		rx_packet = NULL;
    847e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8480:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8482:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8484:	bl	8c2c <usb_rx>
		if (!rx) break;
    8488:	cbz	r0, 8498 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    848a:	bl	8be0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    848e:	movs	r0, #3
    8490:	bl	8c2c <usb_rx>
		if (!rx) break;
    8494:	cmp	r0, #0
    8496:	bne.n	848a <usb_serial_flush_input+0x1e>
    8498:	pop	{r4, pc}
    849a:	bx	lr
    849c:	.word	0x2001ab64
    84a0:	.word	0x2001aa78

000084a4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    84a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    84a8:	ldr.w	r9, [pc, #248]	; 85a4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    84ac:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    84ae:	movs	r2, #1
    84b0:	strb.w	r2, [r9]
	while (size > 0) {
    84b4:	str	r1, [sp, #4]
    84b6:	cbz	r1, 8514 <usb_serial_write+0x70>
    84b8:	ldr.w	r8, [pc, #236]	; 85a8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    84bc:	ldr	r7, [pc, #216]	; (8598 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    84be:	ldr	r6, [sp, #4]
    84c0:	mov	fp, r0
		if (!tx_packet) {
    84c2:	ldr.w	r0, [r8]
    84c6:	cbz	r0, 8536 <usb_serial_write+0x92>
    84c8:	ldr	r5, [pc, #208]	; (859c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    84ca:	ldrh	r4, [r0, #2]
    84cc:	rsb	r1, r4, #64	; 0x40
    84d0:	cmp	r1, r6
    84d2:	it	cs
    84d4:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    84d6:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    84da:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    84dc:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    84e0:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    84e2:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    84e4:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    84e8:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    84ec:	cbz	r1, 8504 <usb_serial_write+0x60>
    84ee:	subs	r4, #1
    84f0:	add	r2, r4
    84f2:	add	r1, fp
    84f4:	ldrb.w	r4, [fp], #1
    84f8:	strb.w	r4, [r2, #1]!
    84fc:	cmp	fp, r1
    84fe:	bne.n	84f4 <usb_serial_write+0x50>
    8500:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    8504:	cmp.w	lr, #63	; 0x3f
    8508:	bhi.n	8522 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    850a:	ldr	r2, [pc, #148]	; (85a0 <usb_serial_write+0xfc>)
    850c:	movs	r1, #5
    850e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8510:	cmp	r6, #0
    8512:	bne.n	84c2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    8514:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    8516:	movs	r3, #0
    8518:	strb.w	r3, [r9]
	return ret;
}
    851c:	add	sp, #12
    851e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    8522:	movs	r2, #64	; 0x40
    8524:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8526:	mov	r1, r0
    8528:	movs	r0, #4
    852a:	bl	8d5c <usb_tx>
			tx_packet = NULL;
    852e:	movs	r2, #0
    8530:	str.w	r2, [r8]
    8534:	b.n	850a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8536:	ldrb	r2, [r7, #0]
    8538:	cbz	r2, 8586 <usb_serial_write+0xe2>
    853a:	ldr	r5, [pc, #96]	; (859c <usb_serial_write+0xf8>)
    853c:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    8540:	mov.w	sl, #1
    8544:	b.n	8556 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8546:	subs	r4, #1
    8548:	beq.n	8578 <usb_serial_write+0xd4>
    854a:	ldrb	r2, [r5, #0]
    854c:	cbnz	r2, 8578 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    854e:	bl	9c7c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8552:	ldrb	r2, [r7, #0]
    8554:	cbz	r2, 8586 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    8556:	movs	r0, #4
    8558:	bl	8c68 <usb_tx_packet_count>
    855c:	cmp	r0, #7
    855e:	bhi.n	8546 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    8560:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    8564:	bl	8ba0 <usb_malloc>
    8568:	str.w	r0, [r8]
					if (tx_packet) break;
    856c:	cmp	r0, #0
    856e:	bne.n	84ca <usb_serial_write+0x26>
					tx_noautoflush = 0;
    8570:	ldr	r3, [pc, #48]	; (85a4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8572:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    8574:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8576:	bne.n	854a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    8578:	movs	r3, #1
					return -1;
    857a:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    857e:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8580:	add	sp, #12
    8582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8586:	movs	r3, #0
					return -1;
    8588:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    858c:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8590:	add	sp, #12
    8592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8596:	nop
    8598:	.word	0x2001ab64
    859c:	.word	0x2001aa74
    85a0:	.word	0x2001aa6c
    85a4:	.word	0x2001aa6d
    85a8:	.word	0x2001aa70

000085ac <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    85ac:	push	{lr}
    85ae:	sub	sp, #12
    85b0:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    85b2:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    85b4:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    85b8:	mov	r0, r3
    85ba:	bl	84a4 <usb_serial_write>
}
    85be:	add	sp, #12
    85c0:	ldr.w	pc, [sp], #4

000085c4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    85c4:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    85c6:	ldr	r5, [pc, #56]	; (8600 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    85c8:	ldr	r4, [pc, #56]	; (8604 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    85ca:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    85cc:	movs	r3, #1
    85ce:	strb	r3, [r4, #0]
	if (!tx_packet) {
    85d0:	cbz	r0, 85de <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    85d2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    85d4:	movs	r3, #0
    85d6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    85d8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    85dc:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    85de:	ldr	r3, [pc, #40]	; (8608 <usb_serial_write_buffer_free+0x44>)
    85e0:	ldrb	r3, [r3, #0]
    85e2:	cbnz	r3, 85ea <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    85e4:	movs	r0, #0
    85e6:	strb	r0, [r4, #0]
			return 0;
    85e8:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    85ea:	movs	r0, #4
    85ec:	bl	8c68 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    85f0:	cmp	r0, #7
    85f2:	bhi.n	85e4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    85f4:	bl	8ba0 <usb_malloc>
    85f8:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    85fa:	cmp	r0, #0
    85fc:	bne.n	85d2 <usb_serial_write_buffer_free+0xe>
    85fe:	b.n	85e4 <usb_serial_write_buffer_free+0x20>
    8600:	.word	0x2001aa70
    8604:	.word	0x2001aa6d
    8608:	.word	0x2001ab64

0000860c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    860c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    860e:	ldr	r3, [pc, #68]	; (8654 <usb_serial_flush_output+0x48>)
    8610:	ldrb	r3, [r3, #0]
    8612:	cbz	r3, 8638 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    8614:	ldr	r6, [pc, #64]	; (8658 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8616:	ldr	r5, [pc, #68]	; (865c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    8618:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    861a:	movs	r7, #1
    861c:	strb	r7, [r5, #0]
	if (tx_packet) {
    861e:	cbz	r4, 863a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    8620:	ldr	r2, [pc, #60]	; (8660 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    8622:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    8624:	movs	r7, #0
    8626:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8628:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    862a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    862c:	movs	r0, #4
    862e:	bl	8d5c <usb_tx>
		tx_packet = NULL;
    8632:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    8634:	movs	r3, #0
    8636:	strb	r3, [r5, #0]
    8638:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    863a:	bl	8ba0 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    863e:	ldr	r3, [pc, #32]	; (8660 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    8640:	cbz	r0, 864e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    8642:	mov	r1, r0
    8644:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8646:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8648:	bl	8d5c <usb_tx>
    864c:	b.n	8634 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    864e:	strb	r7, [r3, #0]
    8650:	b.n	8634 <usb_serial_flush_output+0x28>
    8652:	nop
    8654:	.word	0x2001ab64
    8658:	.word	0x2001aa70
    865c:	.word	0x2001aa6d
    8660:	.word	0x2001aa6c

00008664 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    8664:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    8666:	ldr	r3, [pc, #56]	; (86a0 <usb_serial_flush_callback+0x3c>)
    8668:	ldrb	r3, [r3, #0]
    866a:	cbnz	r3, 868a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    866c:	ldr	r4, [pc, #52]	; (86a4 <usb_serial_flush_callback+0x40>)
    866e:	ldr	r1, [r4, #0]
    8670:	cbz	r1, 868c <usb_serial_flush_callback+0x28>
    8672:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    8676:	ldrh	r3, [r1, #2]
    8678:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    867a:	movs	r0, #4
    867c:	bl	8d5c <usb_tx>
		tx_packet = NULL;
    8680:	str	r5, [r4, #0]
    8682:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8684:	ldr	r3, [pc, #32]	; (86a8 <usb_serial_flush_callback+0x44>)
    8686:	movs	r2, #1
    8688:	strb	r2, [r3, #0]
    868a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    868c:	bl	8ba0 <usb_malloc>
		if (tx) {
    8690:	cmp	r0, #0
    8692:	beq.n	8684 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    8694:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    8696:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    869a:	movs	r0, #4
    869c:	b.w	8d5c <usb_tx>
    86a0:	.word	0x2001aa6d
    86a4:	.word	0x2001aa70
    86a8:	.word	0x2001aa6c

000086ac <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    86ac:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    86ae:	ldr	r0, [pc, #164]	; (8754 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    86b0:	ldr	r2, [pc, #164]	; (8758 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    86b2:	ldr	r3, [pc, #168]	; (875c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    86b4:	ldr	r5, [pc, #168]	; (8760 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    86b6:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    86b8:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    86ba:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    86bc:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    86be:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    86c0:	ldr	r4, [pc, #160]	; (8764 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    86c2:	cmp	r3, #8
    86c4:	beq.n	8728 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    86c6:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    86c8:	ldr	r0, [pc, #156]	; (8768 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    86ca:	ldr	r1, [pc, #160]	; (876c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    86cc:	beq.n	873e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    86ce:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    86d0:	ite	eq
    86d2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    86d4:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    86d6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    86d8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    86da:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    86dc:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    86de:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    86e0:	ldr	r3, [pc, #140]	; (8770 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    86e2:	ldr	r1, [pc, #144]	; (8774 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    86e4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    86e6:	ldr	r2, [pc, #144]	; (8778 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    86e8:	cbz	r3, 871a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    86ea:	movs	r3, #1
    86ec:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    86ee:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    86f0:	ldr	r3, [pc, #136]	; (877c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    86f2:	ldr	r1, [pc, #140]	; (8780 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    86f4:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    86f6:	ldr	r2, [pc, #140]	; (8784 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    86f8:	cmp	r3, #1
    86fa:	bls.n	874a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    86fc:	cmp	r3, #4
    86fe:	bls.n	8720 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    8700:	cmp	r3, #8
    8702:	bls.n	8742 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    8704:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8706:	ite	ls
    8708:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    870a:	movhi	r3, #135	; 0x87
    870c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    870e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    8710:	ldr	r3, [pc, #116]	; (8788 <analog_init+0xdc>)
    8712:	movs	r2, #1
    8714:	strb	r2, [r3, #0]
}
    8716:	pop	{r4, r5}
    8718:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    871a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    871c:	str	r3, [r2, #0]
    871e:	b.n	86f0 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8720:	movs	r3, #132	; 0x84
    8722:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8724:	str	r3, [r2, #0]
    8726:	b.n	8710 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8728:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    872c:	ldr	r1, [pc, #60]	; (876c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    872e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8730:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8732:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8734:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8736:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8738:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    873a:	str	r3, [r1, #0]
    873c:	b.n	86e0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    873e:	movs	r2, #57	; 0x39
    8740:	b.n	8732 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8742:	movs	r3, #133	; 0x85
    8744:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8746:	str	r3, [r2, #0]
    8748:	b.n	8710 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    874a:	movs	r3, #128	; 0x80
    874c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    874e:	str	r3, [r2, #0]
    8750:	b.n	8710 <analog_init+0x64>
    8752:	nop
    8754:	.word	0x40074000
    8758:	.word	0x40074001
    875c:	.word	0x20014715
    8760:	.word	0x4003b008
    8764:	.word	0x4003b00c
    8768:	.word	0x400bb008
    876c:	.word	0x400bb00c
    8770:	.word	0x2001aa7e
    8774:	.word	0x4003b020
    8778:	.word	0x400bb020
    877c:	.word	0x20014716
    8780:	.word	0x4003b024
    8784:	.word	0x400bb024
    8788:	.word	0x2001aa7d

0000878c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    878c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    878e:	ldr	r4, [pc, #64]	; (87d0 <fault_isr+0x44>)
    8790:	b.n	87a4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    8792:	ldr	r3, [r4, #0]
    8794:	lsls	r1, r3, #21
    8796:	bmi.n	87b4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8798:	ldr	r3, [r4, #0]
    879a:	lsls	r2, r3, #20
    879c:	bmi.n	87be <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    879e:	ldr	r3, [r4, #0]
    87a0:	lsls	r3, r3, #19
    87a2:	bmi.n	87c8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    87a4:	ldr	r3, [r4, #0]
    87a6:	lsls	r0, r3, #13
    87a8:	bpl.n	8792 <fault_isr+0x6>
    87aa:	bl	8de0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    87ae:	ldr	r3, [r4, #0]
    87b0:	lsls	r1, r3, #21
    87b2:	bpl.n	8798 <fault_isr+0xc>
    87b4:	bl	a5e0 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    87b8:	ldr	r3, [r4, #0]
    87ba:	lsls	r2, r3, #20
    87bc:	bpl.n	879e <fault_isr+0x12>
    87be:	bl	a3bc <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    87c2:	ldr	r3, [r4, #0]
    87c4:	lsls	r3, r3, #19
    87c6:	bpl.n	87a4 <fault_isr+0x18>
    87c8:	bl	a8d8 <uart2_status_isr>
    87cc:	b.n	87a4 <fault_isr+0x18>
    87ce:	nop
    87d0:	.word	0x40048034

000087d4 <unused_isr>:
	}
}

void unused_isr(void)
{
    87d4:	push	{r3, lr}
	fault_isr();
    87d6:	bl	878c <fault_isr>
    87da:	nop

000087dc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    87dc:	ldr	r3, [pc, #4]	; (87e4 <startup_early_hook+0x8>)
    87de:	movs	r2, #16
    87e0:	strh	r2, [r3, #0]
    87e2:	bx	lr
    87e4:	.word	0x40052000

000087e8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    87e8:	bx	lr
    87ea:	nop

000087ec <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    87ec:	ldr	r1, [pc, #36]	; (8814 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    87ee:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    87f0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    87f2:	cbz	r0, 8802 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    87f4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    87f6:	add	r0, r3
    87f8:	sub.w	r2, r2, #8192	; 0x2000
    87fc:	cmp	r0, r2
    87fe:	bcs.n	8806 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    8800:	str	r0, [r1, #0]
	}
	return prev;
    8802:	mov	r0, r3
}
    8804:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    8806:	bl	ba1c <__errno>
    880a:	movs	r3, #12
    880c:	str	r3, [r0, #0]
			return (void *)-1;
    880e:	mov.w	r0, #4294967295
    8812:	pop	{r3, pc}
    8814:	.word	0x20014718

00008818 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    8818:	b.n	8818 <__cxa_pure_virtual>
    881a:	nop

0000881c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    881c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    881e:	ldr	r3, [pc, #68]	; (8864 <digitalWrite.part.1+0x48>)
    8820:	ldr.w	r2, [r3, r0, lsl #3]
    8824:	ldrb.w	r4, [r2, #640]	; 0x280
    8828:	cbz	r4, 8838 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    882a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    882c:	cbz	r1, 884e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    882e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8832:	ldr.w	r4, [sp], #4
    8836:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    8838:	add.w	r3, r3, r0, lsl #3
    883c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    883e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    8840:	cbnz	r1, 8858 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    8842:	bic.w	r2, r2, #2
    8846:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8848:	ldr.w	r4, [sp], #4
    884c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    884e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8852:	ldr.w	r4, [sp], #4
    8856:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8858:	orr.w	r2, r2, #3
    885c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    885e:	ldr.w	r4, [sp], #4
    8862:	bx	lr
    8864:	.word	0x00013644

00008868 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    8868:	ldr	r2, [pc, #112]	; (88dc <pinMode.part.2+0x74>)
    886a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    886e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    8870:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8872:	beq.n	8898 <pinMode.part.2+0x30>
    8874:	cmp	r1, #4
    8876:	beq.n	88b0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    8878:	ldr.w	r0, [r2, r0, lsl #3]
    887c:	movs	r2, #0
    887e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    8882:	cbz	r1, 8890 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    8884:	cmp	r1, #2
    8886:	beq.n	88ca <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    8888:	cmp	r1, #3
    888a:	beq.n	88d2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    888c:	str	r2, [r3, #0]
    888e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    8890:	mov.w	r2, #256	; 0x100
    8894:	str	r2, [r3, #0]
    8896:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8898:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    889c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    88a0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    88a4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    88a6:	ldr	r2, [r3, #0]
    88a8:	bic.w	r2, r2, #32
    88ac:	str	r2, [r3, #0]
    88ae:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    88b0:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    88b4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    88b8:	movs	r0, #1
    88ba:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    88be:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    88c0:	ldr	r2, [r3, #0]
    88c2:	orr.w	r2, r2, #32
    88c6:	str	r2, [r3, #0]
    88c8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    88ca:	movw	r2, #259	; 0x103
    88ce:	str	r2, [r3, #0]
    88d0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    88d2:	mov.w	r2, #258	; 0x102
    88d6:	str	r2, [r3, #0]
    88d8:	bx	lr
    88da:	nop
    88dc:	.word	0x00013644

000088e0 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    88e0:	adds	r0, #16
    88e2:	ldr	r3, [pc, #8]	; (88ec <attachInterruptVector+0xc>)
    88e4:	str.w	r1, [r3, r0, lsl #2]
    88e8:	bx	lr
    88ea:	nop
    88ec:	.word	0x20014000

000088f0 <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    88f0:	ldr	r3, [pc, #4]	; (88f8 <rtc_get+0x8>)
    88f2:	ldr	r0, [r3, #0]
}
    88f4:	bx	lr
    88f6:	nop
    88f8:	.word	0x4003d000

000088fc <rtc_set>:

void rtc_set(unsigned long t)
{
    88fc:	push	{r4, r5}
	RTC_SR = 0;
    88fe:	ldr	r3, [pc, #20]	; (8914 <rtc_set+0x18>)
	RTC_TPR = 0;
    8900:	ldr	r5, [pc, #20]	; (8918 <rtc_set+0x1c>)
	RTC_TSR = t;
    8902:	ldr	r4, [pc, #24]	; (891c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8904:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    8906:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8908:	str	r2, [r3, #0]
	RTC_TPR = 0;
    890a:	str	r2, [r5, #0]
	RTC_TSR = t;
    890c:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    890e:	str	r1, [r3, #0]
}
    8910:	pop	{r4, r5}
    8912:	bx	lr
    8914:	.word	0x4003d014
    8918:	.word	0x4003d004
    891c:	.word	0x4003d000

00008920 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    8920:	cmp	r0, #63	; 0x3f
    8922:	bhi.n	8928 <digitalWrite+0x8>
    8924:	b.w	881c <digitalWrite.part.1>
    8928:	bx	lr
    892a:	nop

0000892c <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    892c:	cmp	r0, #63	; 0x3f
    892e:	bhi.n	893e <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    8930:	ldr	r3, [pc, #16]	; (8944 <digitalRead+0x18>)
    8932:	ldr.w	r3, [r3, r0, lsl #3]
    8936:	ldrb.w	r0, [r3, #512]	; 0x200
    893a:	uxtb	r0, r0
    893c:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    893e:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    8940:	bx	lr
    8942:	nop
    8944:	.word	0x00013644

00008948 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    8948:	cmp	r0, #63	; 0x3f
    894a:	bhi.n	8950 <pinMode+0x8>
    894c:	b.w	8868 <pinMode.part.2>
    8950:	bx	lr
    8952:	nop

00008954 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8954:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    8956:	ldr	r1, [pc, #48]	; (8988 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8958:	ldr	r3, [pc, #48]	; (898c <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    895a:	ldr	r2, [pc, #52]	; (8990 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    895c:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    895e:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8960:	ldr	r2, [r2, #0]
	__enable_irq();
    8962:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8964:	lsls	r2, r2, #5
    8966:	bpl.n	896e <micros+0x1a>
    8968:	cmp	r3, #50	; 0x32
    896a:	it	hi
    896c:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    896e:	ldr	r1, [pc, #36]	; (8994 <micros+0x40>)
    8970:	rsb	r3, r3, #95744	; 0x17600
    8974:	mov.w	r2, #1000	; 0x3e8
    8978:	adds	r3, #255	; 0xff
    897a:	umull	r1, r3, r1, r3
    897e:	mul.w	r0, r2, r0
}
    8982:	add.w	r0, r0, r3, lsr #6
    8986:	bx	lr
    8988:	.word	0x2001aa80
    898c:	.word	0xe000e018
    8990:	.word	0xe000ed04
    8994:	.word	0xaaaaaaab

00008998 <delay>:

void delay(uint32_t ms)
{
    8998:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    899c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    899e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    89a0:	ldr	r7, [pc, #128]	; (8a24 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    89a2:	ldr	r3, [pc, #132]	; (8a28 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    89a4:	ldr	r2, [pc, #132]	; (8a2c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    89a6:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    89a8:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    89aa:	ldr	r2, [r2, #0]
	__enable_irq();
    89ac:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    89ae:	lsls	r2, r2, #5
    89b0:	bpl.n	89b8 <delay+0x20>
    89b2:	cmp	r3, #50	; 0x32
    89b4:	it	hi
    89b6:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    89b8:	cbz	r5, 8a20 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    89ba:	rsb	r3, r3, #95744	; 0x17600
    89be:	ldr	r6, [pc, #112]	; (8a30 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    89c0:	ldr.w	r9, [pc, #100]	; 8a28 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    89c4:	ldr.w	r8, [pc, #100]	; 8a2c <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    89c8:	adds	r3, #255	; 0xff
    89ca:	mov.w	r2, #1000	; 0x3e8
    89ce:	umull	r1, r3, r6, r3
    89d2:	mul.w	r4, r2, r4
    89d6:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    89da:	cpsid	i
	current = SYST_CVR;
    89dc:	ldr.w	r1, [r9]
	count = systick_millis_count;
    89e0:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    89e2:	ldr.w	lr, [r8]
	__enable_irq();
    89e6:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    89e8:	rsb	r3, r1, #95744	; 0x17600
    89ec:	adds	r3, #255	; 0xff
    89ee:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    89f2:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    89f6:	rsb	r3, r4, r3, lsr #6
    89fa:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    89fe:	beq.n	8a06 <delay+0x6e>
    8a00:	cmp	r1, #50	; 0x32
    8a02:	it	hi
    8a04:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8a06:	mla	r3, r0, r2, r3
    8a0a:	cmp.w	r3, #1000	; 0x3e8
    8a0e:	bcc.n	8a1a <delay+0x82>
				ms--;
				if (ms == 0) return;
    8a10:	subs	r5, #1
    8a12:	beq.n	8a20 <delay+0x88>
				start += 1000;
    8a14:	add.w	r4, r4, #1000	; 0x3e8
    8a18:	b.n	89da <delay+0x42>
			}
			yield();
    8a1a:	bl	9c7c <yield>
		}
    8a1e:	b.n	89da <delay+0x42>
    8a20:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8a24:	.word	0x2001aa80
    8a28:	.word	0xe000e018
    8a2c:	.word	0xe000ed04
    8a30:	.word	0xaaaaaaab

00008a34 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    8a34:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8a36:	ldr	r3, [pc, #312]	; (8b70 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8a38:	ldr	r0, [pc, #312]	; (8b74 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    8a3a:	ldr.w	ip, [pc, #348]	; 8b98 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    8a3e:	ldr	r4, [pc, #312]	; (8b78 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    8a40:	ldr	r1, [pc, #312]	; (8b7c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8a42:	ldr.w	lr, [pc, #344]	; 8b9c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    8a46:	ldr	r6, [pc, #312]	; (8b80 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    8a48:	ldr	r5, [pc, #312]	; (8b84 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    8a4a:	ldr	r7, [pc, #316]	; (8b88 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8a4c:	mov.w	r2, #134217728	; 0x8000000
    8a50:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    8a52:	mov.w	r2, #268435456	; 0x10000000
    8a56:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    8a58:	mov.w	r2, #536870912	; 0x20000000
    8a5c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    8a5e:	mov.w	r2, #1073741824	; 0x40000000
    8a62:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    8a64:	mov.w	r2, #2147483648	; 0x80000000
    8a68:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8a6a:	movs	r2, #0
    8a6c:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8a6e:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    8a70:	movw	r0, #49151	; 0xbfff
    8a74:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8a78:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    8a7c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    8a7e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    8a82:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    8a84:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    8a86:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8a88:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    8a8c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    8a8e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    8a92:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    8a94:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    8a98:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    8a9a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    8a9e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8aa2:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    8aa6:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    8aaa:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    8aae:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    8ab0:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    8ab4:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8ab6:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    8ab8:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    8aba:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    8abe:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    8ac0:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    8ac2:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8ac4:	ldr	r4, [pc, #196]	; (8b8c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    8ac6:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    8ac8:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8aca:	movs	r1, #9
    8acc:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    8ace:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    8ad2:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    8ad6:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    8ad8:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    8ada:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    8adc:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    8ade:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    8ae0:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8ae2:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8ae6:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    8aea:	add.w	r7, r7, #520192	; 0x7f000
    8aee:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8af0:	addw	r4, r4, #2044	; 0x7fc
    8af4:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    8af6:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    8af8:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    8afa:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8afc:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    8b00:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    8b02:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    8b06:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    8b0a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8b0c:	sub.w	r4, r4, #460800	; 0x70800
    8b10:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    8b14:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    8b16:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8b18:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8b1c:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8b1e:	ldr	r0, [pc, #112]	; (8b90 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8b20:	orr.w	r1, r1, #512	; 0x200
    8b24:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8b26:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8b28:	ldr	r4, [pc, #104]	; (8b94 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    8b2a:	add.w	lr, lr, #65280	; 0xff00
    8b2e:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    8b32:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    8b36:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    8b3a:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8b3e:	orr.w	r1, r1, #33554432	; 0x2000000
    8b42:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    8b44:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    8b48:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8b4c:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    8b4e:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    8b50:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    8b52:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8b54:	str	r2, [r4, #0]
#endif
	analog_init();
    8b56:	bl	86ac <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    8b5a:	movs	r0, #25
    8b5c:	bl	8998 <delay>
	usb_init();
    8b60:	bl	98ac <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    8b64:	movw	r0, #275	; 0x113
}
    8b68:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    8b6c:	b.w	8998 <delay>
    8b70:	.word	0xe000e104
    8b74:	.word	0x40038004
    8b78:	.word	0x40038014
    8b7c:	.word	0x4003801c
    8b80:	.word	0x40038024
    8b84:	.word	0x4003802c
    8b88:	.word	0x40038034
    8b8c:	.word	0x40038000
    8b90:	.word	0x40048004
    8b94:	.word	0x400c9000
    8b98:	.word	0x40038008
    8b9c:	.word	0x4003800c

00008ba0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    8ba0:	cpsid	i
	avail = usb_buffer_available;
    8ba2:	ldr	r0, [pc, #52]	; (8bd8 <usb_malloc+0x38>)
    8ba4:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    8ba6:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    8baa:	cmp	r3, #11
    8bac:	bgt.n	8bd0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    8bae:	mov.w	r1, #2147483648	; 0x80000000
    8bb2:	lsrs	r1, r3
    8bb4:	bic.w	r2, r2, r1
    8bb8:	str	r2, [r0, #0]
	__enable_irq();
    8bba:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    8bbc:	ldr	r0, [pc, #28]	; (8bdc <usb_malloc+0x3c>)
    8bbe:	add.w	r3, r3, r3, lsl #3
    8bc2:	lsls	r3, r3, #3
    8bc4:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    8bc6:	movs	r1, #0
    8bc8:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    8bca:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    8bcc:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    8bce:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    8bd0:	cpsie	i
		return NULL;
    8bd2:	movs	r0, #0
    8bd4:	bx	lr
    8bd6:	nop
    8bd8:	.word	0x2001471c
    8bdc:	.word	0x200141d0

00008be0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    8be0:	ldr	r3, [pc, #52]	; (8c18 <usb_free+0x38>)
    8be2:	ldr	r2, [pc, #56]	; (8c1c <usb_free+0x3c>)
    8be4:	subs	r3, r0, r3
    8be6:	umull	r2, r3, r2, r3
    8bea:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    8bec:	cmp	r3, #11
    8bee:	bhi.n	8c0a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    8bf0:	ldr	r2, [pc, #44]	; (8c20 <usb_free+0x40>)
    8bf2:	ldrb	r2, [r2, #0]
    8bf4:	cbnz	r2, 8c0c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    8bf6:	cpsid	i
	usb_buffer_available |= mask;
    8bf8:	ldr	r0, [pc, #40]	; (8c24 <usb_free+0x44>)
    8bfa:	mov.w	r1, #2147483648	; 0x80000000
    8bfe:	ldr	r2, [r0, #0]
    8c00:	lsr.w	r3, r1, r3
    8c04:	orrs	r2, r3
    8c06:	str	r2, [r0, #0]
	__enable_irq();
    8c08:	cpsie	i
    8c0a:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    8c0c:	ldr	r2, [pc, #24]	; (8c28 <usb_free+0x48>)
    8c0e:	ldrb	r2, [r2, #0]
    8c10:	cmp	r2, #0
    8c12:	beq.n	8bf6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    8c14:	b.w	8c94 <usb_rx_memory>
    8c18:	.word	0x200141d0
    8c1c:	.word	0x38e38e39
    8c20:	.word	0x2001ab59
    8c24:	.word	0x2001471c
    8c28:	.word	0x2001ab64

00008c2c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    8c2c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8c2e:	cmp	r3, #3
    8c30:	bhi.n	8c5c <usb_rx+0x30>
	__disable_irq();
    8c32:	cpsid	i
	ret = rx_first[endpoint];
    8c34:	ldr	r1, [pc, #40]	; (8c60 <usb_rx+0x34>)
    8c36:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    8c3a:	cbz	r0, 8c58 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    8c3c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8c3e:	ldr	r4, [pc, #36]	; (8c64 <usb_rx+0x38>)
    8c40:	ldrh	r5, [r0, #0]
    8c42:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    8c46:	ldr	r6, [r0, #4]
    8c48:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8c4c:	subs	r2, r2, r5
    8c4e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    8c52:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    8c54:	pop	{r4, r5, r6}
    8c56:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    8c58:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    8c5a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8c5c:	movs	r0, #0
    8c5e:	bx	lr
    8c60:	.word	0x2001aadc
    8c64:	.word	0x2001af58

00008c68 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    8c68:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    8c6a:	cmp	r0, #3
    8c6c:	bhi.n	8c86 <usb_tx_packet_count+0x1e>
	__disable_irq();
    8c6e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    8c70:	ldr	r3, [pc, #28]	; (8c90 <usb_tx_packet_count+0x28>)
    8c72:	ldr.w	r3, [r3, r0, lsl #2]
    8c76:	cbz	r3, 8c8a <usb_tx_packet_count+0x22>
    8c78:	movs	r0, #0
    8c7a:	ldr	r3, [r3, #4]
    8c7c:	adds	r0, #1
    8c7e:	cmp	r3, #0
    8c80:	bne.n	8c7a <usb_tx_packet_count+0x12>
	__enable_irq();
    8c82:	cpsie	i
	return count;
    8c84:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    8c86:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    8c88:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    8c8a:	mov	r0, r3
    8c8c:	b.n	8c82 <usb_tx_packet_count+0x1a>
    8c8e:	nop
    8c90:	.word	0x2001ab30

00008c94 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    8c94:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    8c96:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8c98:	ldr	r2, [pc, #172]	; (8d48 <usb_rx_memory+0xb4>)
    8c9a:	ldrb	r3, [r2, #0]
    8c9c:	lsls	r5, r3, #28
    8c9e:	bpl.n	8cae <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8ca0:	ldr	r3, [pc, #168]	; (8d4c <usb_rx_memory+0xb8>)
    8ca2:	ldr	r1, [r3, #32]
    8ca4:	cmp	r1, #0
    8ca6:	beq.n	8d16 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8ca8:	ldr	r1, [r3, #40]	; 0x28
    8caa:	cmp	r1, #0
    8cac:	beq.n	8d32 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8cae:	ldrb	r3, [r2, #1]
    8cb0:	lsls	r4, r3, #28
    8cb2:	bpl.n	8cc2 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8cb4:	ldr	r3, [pc, #148]	; (8d4c <usb_rx_memory+0xb8>)
    8cb6:	ldr	r1, [r3, #64]	; 0x40
    8cb8:	cmp	r1, #0
    8cba:	beq.n	8d3a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8cbc:	ldr	r1, [r3, #72]	; 0x48
    8cbe:	cmp	r1, #0
    8cc0:	beq.n	8d36 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8cc2:	ldrb	r3, [r2, #2]
    8cc4:	lsls	r1, r3, #28
    8cc6:	bpl.n	8cd4 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8cc8:	ldr	r3, [pc, #128]	; (8d4c <usb_rx_memory+0xb8>)
    8cca:	ldr	r1, [r3, #96]	; 0x60
    8ccc:	cmp	r1, #0
    8cce:	beq.n	8d3e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8cd0:	ldr	r1, [r3, #104]	; 0x68
    8cd2:	cbz	r1, 8cf8 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8cd4:	ldrb	r3, [r2, #3]
    8cd6:	lsls	r3, r3, #28
    8cd8:	bpl.n	8cea <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8cda:	ldr	r3, [pc, #112]	; (8d4c <usb_rx_memory+0xb8>)
    8cdc:	ldr.w	r2, [r3, #128]	; 0x80
    8ce0:	cbz	r2, 8d42 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8ce2:	ldr.w	r2, [r3, #136]	; 0x88
    8ce6:	movs	r1, #17
    8ce8:	cbz	r2, 8cfa <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    8cea:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    8cec:	ldr	r3, [pc, #96]	; (8d50 <usb_rx_memory+0xbc>)
    8cee:	movs	r2, #0
    8cf0:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    8cf2:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    8cf4:	b.w	8be0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8cf8:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8cfa:	ldr	r4, [pc, #84]	; (8d50 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8cfc:	ldr	r5, [pc, #84]	; (8d54 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    8cfe:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8d00:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    8d04:	add.w	r3, r3, r1, lsl #3
    8d08:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8d0a:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    8d0c:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8d0e:	strb	r2, [r4, #0]
				__enable_irq();
    8d10:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    8d12:	pop	{r4, r5}
    8d14:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    8d16:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8d18:	ldr	r4, [pc, #52]	; (8d50 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    8d1a:	ldr	r5, [pc, #60]	; (8d58 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    8d1c:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    8d1e:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    8d22:	add.w	r3, r3, r2, lsl #3
    8d26:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8d28:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    8d2a:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8d2c:	strb	r2, [r4, #0]
				__enable_irq();
    8d2e:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    8d30:	b.n	8d12 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8d32:	movs	r1, #5
    8d34:	b.n	8cfa <usb_rx_memory+0x66>
    8d36:	movs	r1, #9
    8d38:	b.n	8cfa <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    8d3a:	movs	r2, #8
    8d3c:	b.n	8d18 <usb_rx_memory+0x84>
    8d3e:	movs	r2, #12
    8d40:	b.n	8d18 <usb_rx_memory+0x84>
    8d42:	movs	r2, #16
    8d44:	b.n	8d18 <usb_rx_memory+0x84>
    8d46:	nop
    8d48:	.word	0x00013870
    8d4c:	.word	0x1fff0000
    8d50:	.word	0x2001ab59
    8d54:	.word	0x004000c8
    8d58:	.word	0x00400088

00008d5c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    8d5c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    8d5e:	cmp	r3, #3
    8d60:	bhi.n	8d9e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    8d62:	ldr	r2, [pc, #108]	; (8dd0 <usb_tx+0x74>)
    8d64:	lsls	r0, r0, #5
    8d66:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    8d6a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    8d6c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    8d6e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    8d70:	ldr	r4, [pc, #96]	; (8dd4 <usb_tx+0x78>)
    8d72:	ldrb	r2, [r4, r3]
    8d74:	cmp	r2, #3
    8d76:	bhi.n	8db0 <usb_tx+0x54>
    8d78:	tbb	[pc, r2]
    8d7c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    8d80:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8d82:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    8d84:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8d86:	tst.w	r0, #8
    8d8a:	ite	ne
    8d8c:	movne	r3, #200	; 0xc8
    8d8e:	moveq	r3, #136	; 0x88
    8d90:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    8d94:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8d96:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    8d98:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    8d9a:	cpsie	i
}
    8d9c:	pop	{r4, r5}
    8d9e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    8da0:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    8da2:	movs	r2, #2
		break;
    8da4:	b.n	8d82 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    8da6:	movs	r2, #5
    8da8:	b.n	8d82 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    8daa:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    8dac:	movs	r2, #4
		break;
    8dae:	b.n	8d82 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    8db0:	ldr	r2, [pc, #36]	; (8dd8 <usb_tx+0x7c>)
    8db2:	ldr.w	r0, [r2, r3, lsl #2]
    8db6:	cbz	r0, 8dc8 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    8db8:	ldr	r2, [pc, #32]	; (8ddc <usb_tx+0x80>)
    8dba:	ldr.w	r0, [r2, r3, lsl #2]
    8dbe:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    8dc0:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    8dc4:	cpsie	i
		return;
    8dc6:	b.n	8d9c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    8dc8:	str.w	r1, [r2, r3, lsl #2]
    8dcc:	ldr	r2, [pc, #12]	; (8ddc <usb_tx+0x80>)
    8dce:	b.n	8dc0 <usb_tx+0x64>
    8dd0:	.word	0x1fff0000
    8dd4:	.word	0x2001ab68
    8dd8:	.word	0x2001ab30
    8ddc:	.word	0x2001ab40

00008de0 <usb_isr>:
}



void usb_isr(void)
{
    8de0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    8de4:	ldr.w	fp, [pc, #792]	; 9100 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    8de8:	ldr.w	sl, [pc, #792]	; 9104 <usb_isr+0x324>
}



void usb_isr(void)
{
    8dec:	sub	sp, #28
    8dee:	b.n	8e7a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    8df0:	ldr	r7, [pc, #696]	; (90ac <usb_isr+0x2cc>)
    8df2:	mov.w	r8, r3, lsr #2
    8df6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    8dfa:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8dfc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    8e00:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    8e04:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8e06:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    8e0a:	and.w	r4, r3, #255	; 0xff
    8e0e:	cmp	r3, #0
    8e10:	bne.w	901c <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    8e14:	ldr.w	r3, [r7, r8, lsl #3]
    8e18:	lsrs	r3, r3, #16
    8e1a:	uxth	r1, r3
    8e1c:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    8e20:	cmp	r3, #0
    8e22:	beq.w	900a <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    8e26:	ldr	r3, [pc, #648]	; (90b0 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    8e28:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    8e2c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    8e30:	ldr.w	r2, [r3, r6, lsl #2]
    8e34:	cmp	r2, #0
    8e36:	beq.w	9116 <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    8e3a:	ldr	r5, [pc, #632]	; (90b4 <usb_isr+0x2d4>)
    8e3c:	ldr.w	r3, [r5, r6, lsl #2]
    8e40:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    8e42:	ldr	r4, [pc, #628]	; (90b8 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    8e44:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    8e48:	ldrh.w	r3, [r4, r6, lsl #1]
    8e4c:	add	r1, r3
    8e4e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    8e52:	bl	8ba0 <usb_malloc>
					if (packet) {
    8e56:	cmp	r0, #0
    8e58:	beq.w	9108 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    8e5c:	ldr	r2, [pc, #604]	; (90bc <usb_isr+0x2dc>)
    8e5e:	ldr	r3, [pc, #608]	; (90c0 <usb_isr+0x2e0>)
    8e60:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    8e64:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    8e68:	it	ne
    8e6a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    8e6c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    8e70:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    8e74:	movs	r3, #8
    8e76:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    8e7a:	ldrb.w	r4, [fp]
    8e7e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    8e80:	lsls	r1, r4, #29
    8e82:	bpl.n	8ebc <usb_isr+0xdc>
		if (usb_configuration) {
    8e84:	ldr	r3, [pc, #572]	; (90c4 <usb_isr+0x2e4>)
    8e86:	ldrb	r3, [r3, #0]
    8e88:	cbz	r3, 8eb6 <usb_isr+0xd6>
			t = usb_reboot_timer;
    8e8a:	ldr	r1, [pc, #572]	; (90c8 <usb_isr+0x2e8>)
    8e8c:	ldrb	r2, [r1, #0]
			if (t) {
    8e8e:	and.w	r3, r2, #255	; 0xff
    8e92:	cbz	r2, 8ea0 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    8e94:	subs	r3, #1
    8e96:	uxtb	r3, r3
    8e98:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    8e9a:	cmp	r3, #0
    8e9c:	beq.w	987e <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    8ea0:	ldr	r1, [pc, #552]	; (90cc <usb_isr+0x2ec>)
    8ea2:	ldrb	r2, [r1, #0]
			if (t) {
    8ea4:	and.w	r3, r2, #255	; 0xff
    8ea8:	cbz	r2, 8eb6 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    8eaa:	subs	r3, #1
    8eac:	uxtb	r3, r3
    8eae:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    8eb0:	cmp	r3, #0
    8eb2:	beq.w	90a4 <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    8eb6:	movs	r3, #4
    8eb8:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    8ebc:	and.w	r3, r4, #8
    8ec0:	and.w	r2, r3, #255	; 0xff
    8ec4:	cmp	r3, #0
    8ec6:	beq.w	9076 <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    8eca:	ldrb.w	r3, [sl]
    8ece:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    8ed0:	lsrs	r6, r3, #4
    8ed2:	bne.n	8df0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    8ed4:	lsrs	r4, r3, #2
    8ed6:	ldr.w	r9, [pc, #468]	; 90ac <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8eda:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    8ede:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8ee2:	ubfx	r2, r2, #2, #4
    8ee6:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    8ee8:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8eea:	cmp	r2, #12
    8eec:	bhi.n	8fec <usb_isr+0x20c>
    8eee:	tbb	[pc, r2]
    8ef2:	.short	0x8181
    8ef4:	.word	0x7d7d7d7d
    8ef8:	.word	0x7d477d7d
    8efc:	.short	0x7d7d
    8efe:	.byte	0x07
    8eff:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    8f00:	ldr	r0, [r1, #0]
    8f02:	ldr	r5, [pc, #460]	; (90d0 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    8f04:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8f06:	ldr	r7, [pc, #460]	; (90d4 <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8f08:	ldr	r6, [pc, #460]	; (90d8 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    8f0a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8f0c:	uxth	r1, r0
    8f0e:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8f12:	ldr	r3, [pc, #424]	; (90bc <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    8f14:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8f16:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8f1a:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8f1c:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8f1e:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8f22:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    8f24:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    8f28:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8f2c:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    8f30:	ldr	r4, [pc, #376]	; (90ac <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8f32:	bhi.w	911e <usb_isr+0x33e>
    8f36:	cmp.w	r1, #1664	; 0x680
    8f3a:	bcs.w	962e <usb_isr+0x84e>
    8f3e:	cmp.w	r1, #258	; 0x102
    8f42:	beq.w	960a <usb_isr+0x82a>
    8f46:	bhi.w	9458 <usb_isr+0x678>
    8f4a:	cmp	r1, #128	; 0x80
    8f4c:	beq.w	9528 <usb_isr+0x748>
    8f50:	cmp	r1, #130	; 0x82
    8f52:	bne.w	9592 <usb_isr+0x7b2>
    8f56:	ldrh	r1, [r5, #4]
    8f58:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    8f5c:	cmp	r1, #4
    8f5e:	bhi.w	9592 <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8f62:	ldr	r0, [pc, #376]	; (90dc <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    8f64:	ldr	r4, [pc, #376]	; (90e0 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8f66:	lsls	r1, r1, #2
    8f68:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    8f6a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    8f6c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8f6e:	ldrb	r2, [r0, #0]
    8f70:	lsls	r3, r2, #30
    8f72:	bpl.w	9668 <usb_isr+0x888>
    8f76:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    8f7a:	mov.w	lr, #2
    8f7e:	b.n	9532 <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    8f80:	ldr	r7, [pc, #336]	; (90d4 <usb_isr+0x2f4>)
    8f82:	ldr	r2, [r7, #0]
		if (data) {
    8f84:	cbz	r2, 8fd8 <usb_isr+0x1f8>
			size = ep0_tx_len;
    8f86:	ldr	r3, [pc, #348]	; (90e4 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f88:	ldr	r6, [pc, #332]	; (90d8 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8f8a:	ldr	r1, [pc, #348]	; (90e8 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    8f8c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f8e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8f90:	ldrb	r5, [r1, #0]
    8f92:	cmp	r0, #64	; 0x40
    8f94:	mov	lr, r0
    8f96:	orr.w	r8, r5, #2
    8f9a:	it	cs
    8f9c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8fa0:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    8fa2:	eor.w	r4, r4, #1
    8fa6:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8fa8:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8fac:	ite	eq
    8fae:	moveq	r4, #136	; 0x88
    8fb0:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8fb2:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8fb6:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8fb8:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8fbc:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8fc0:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8fc2:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8fc4:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    8fc8:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8fca:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    8fcc:	cbnz	r0, 8fd6 <usb_isr+0x1f6>
    8fce:	cmp.w	lr, #64	; 0x40
    8fd2:	it	ne
    8fd4:	movne	r2, #0
    8fd6:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    8fd8:	ldr	r3, [pc, #244]	; (90d0 <usb_isr+0x2f0>)
    8fda:	ldrh	r2, [r3, #0]
    8fdc:	cmp.w	r2, #1280	; 0x500
    8fe0:	bne.n	8fec <usb_isr+0x20c>
			setup.bRequest = 0;
    8fe2:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    8fe4:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    8fe6:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    8fe8:	ldr	r3, [pc, #256]	; (90ec <usb_isr+0x30c>)
    8fea:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    8fec:	ldr	r2, [pc, #256]	; (90f0 <usb_isr+0x310>)
    8fee:	movs	r3, #1
    8ff0:	strb	r3, [r2, #0]
    8ff2:	b.n	8e74 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    8ff4:	ldr	r2, [pc, #216]	; (90d0 <usb_isr+0x2f0>)
    8ff6:	ldrh	r5, [r2, #0]
    8ff8:	movw	r0, #8225	; 0x2021
    8ffc:	cmp	r5, r0
    8ffe:	beq.w	9400 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9002:	ldr	r2, [pc, #184]	; (90bc <usb_isr+0x2dc>)
    9004:	str.w	r2, [r9, r4, lsl #3]
    9008:	b.n	8fec <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    900a:	ldr	r2, [pc, #176]	; (90bc <usb_isr+0x2dc>)
    900c:	ldr	r3, [pc, #176]	; (90c0 <usb_isr+0x2e0>)
    900e:	tst.w	r9, #8
    9012:	it	ne
    9014:	movne	r3, r2
    9016:	str.w	r3, [r7, r8, lsl #3]
    901a:	b.n	8e74 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    901c:	bl	8be0 <usb_free>
				packet = tx_first[endpoint];
    9020:	ldr	r2, [pc, #208]	; (90f4 <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9022:	ldr	r1, [pc, #212]	; (90f8 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    9024:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    9028:	cmp	r3, #0
    902a:	beq.w	939a <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    902e:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9030:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9032:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    9036:	add.w	r2, r3, #8
    903a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    903e:	cmp	r4, #3
    9040:	bhi.n	904e <usb_isr+0x26e>
    9042:	tbb	[pc, r4]
    9046:	.short	0x0f12
    9048:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    904a:	movs	r2, #4
    904c:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    904e:	ldrh	r2, [r3, #0]
    9050:	tst.w	r9, #8
    9054:	ite	eq
    9056:	moveq	r3, #136	; 0x88
    9058:	movne	r3, #200	; 0xc8
    905a:	orr.w	r3, r3, r2, lsl #16
    905e:	str.w	r3, [r7, r8, lsl #3]
    9062:	b.n	8e74 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    9064:	movs	r2, #2
    9066:	strb	r2, [r1, r6]
						break;
    9068:	b.n	904e <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    906a:	movs	r2, #3
    906c:	strb	r2, [r1, r6]
						break;
    906e:	b.n	904e <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    9070:	movs	r2, #5
    9072:	strb	r2, [r1, r6]
						break;
    9074:	b.n	904e <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    9076:	lsls	r0, r4, #31
    9078:	bmi.w	94b0 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    907c:	lsls	r1, r4, #24
    907e:	bmi.w	9514 <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9082:	lsls	r2, r4, #30
    9084:	bpl.n	9094 <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    9086:	ldr	r2, [pc, #116]	; (90fc <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9088:	ldr	r1, [pc, #116]	; (9100 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    908a:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    908c:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    908e:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    9090:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9092:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    9094:	lsls	r3, r4, #27
    9096:	bpl.n	909e <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    9098:	ldr	r3, [pc, #100]	; (9100 <usb_isr+0x320>)
    909a:	movs	r2, #16
    909c:	strb	r2, [r3, #0]
	}

}
    909e:	add	sp, #28
    90a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    90a4:	bl	8664 <usb_serial_flush_callback>
    90a8:	b.n	8eb6 <usb_isr+0xd6>
    90aa:	nop
    90ac:	.word	0x1fff0000
    90b0:	.word	0x2001aadc
    90b4:	.word	0x2001aa88
    90b8:	.word	0x2001af58
    90bc:	.word	0x004000c8
    90c0:	.word	0x00400088
    90c4:	.word	0x2001ab64
    90c8:	.word	0x2001aaed
    90cc:	.word	0x2001aa6c
    90d0:	.word	0x2001ab50
    90d4:	.word	0x2001aa84
    90d8:	.word	0x2001aaec
    90dc:	.word	0x400720c0
    90e0:	.word	0x2001ab5c
    90e4:	.word	0x2001aa98
    90e8:	.word	0x2001ab58
    90ec:	.word	0x40072098
    90f0:	.word	0x40072094
    90f4:	.word	0x2001ab30
    90f8:	.word	0x2001ab68
    90fc:	.word	0x40072088
    9100:	.word	0x40072080
    9104:	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9108:	ldr	r2, [pc, #684]	; (93b8 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    910a:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    910e:	ldrb	r3, [r2, #0]
    9110:	adds	r3, #1
    9112:	strb	r3, [r2, #0]
    9114:	b.n	8e74 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    9116:	str.w	r0, [r3, r6, lsl #2]
    911a:	ldr	r5, [pc, #672]	; (93bc <usb_isr+0x5dc>)
    911c:	b.n	8e42 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    911e:	movw	r0, #8225	; 0x2021
    9122:	cmp	r1, r0
    9124:	beq.w	9392 <usb_isr+0x5b2>
    9128:	bhi.w	948a <usb_isr+0x6aa>
    912c:	cmp.w	r1, #2176	; 0x880
    9130:	beq.w	956a <usb_isr+0x78a>
    9134:	cmp.w	r1, #2304	; 0x900
    9138:	bne.w	9592 <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    913c:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    913e:	ldr	r1, [pc, #640]	; (93c0 <usb_isr+0x5e0>)
    9140:	ldrb	r0, [r5, #2]
    9142:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9144:	lsls	r2, r2, #24
    9146:	bmi.w	97d4 <usb_isr+0x9f4>
    914a:	ldr.w	r2, [r9, #40]	; 0x28
    914e:	ldr	r1, [pc, #628]	; (93c4 <usb_isr+0x5e4>)
    9150:	lsls	r3, r2, #24
    9152:	bmi.w	97ca <usb_isr+0x9ea>
    9156:	ldr.w	r2, [r9, #48]	; 0x30
    915a:	ldr	r1, [pc, #616]	; (93c4 <usb_isr+0x5e4>)
    915c:	lsls	r5, r2, #24
    915e:	bmi.w	97c0 <usb_isr+0x9e0>
    9162:	ldr.w	r2, [r9, #56]	; 0x38
    9166:	ldr	r1, [pc, #604]	; (93c4 <usb_isr+0x5e4>)
    9168:	lsls	r4, r2, #24
    916a:	bmi.w	97b6 <usb_isr+0x9d6>
    916e:	ldr.w	r2, [r9, #64]	; 0x40
    9172:	ldr	r1, [pc, #592]	; (93c4 <usb_isr+0x5e4>)
    9174:	lsls	r0, r2, #24
    9176:	bmi.w	97ac <usb_isr+0x9cc>
    917a:	ldr.w	r2, [r9, #72]	; 0x48
    917e:	ldr	r1, [pc, #580]	; (93c4 <usb_isr+0x5e4>)
    9180:	lsls	r2, r2, #24
    9182:	bmi.w	97a2 <usb_isr+0x9c2>
    9186:	ldr.w	r2, [r9, #80]	; 0x50
    918a:	ldr	r1, [pc, #568]	; (93c4 <usb_isr+0x5e4>)
    918c:	lsls	r3, r2, #24
    918e:	bmi.w	9798 <usb_isr+0x9b8>
    9192:	ldr.w	r2, [r9, #88]	; 0x58
    9196:	ldr	r1, [pc, #556]	; (93c4 <usb_isr+0x5e4>)
    9198:	lsls	r5, r2, #24
    919a:	bmi.w	978e <usb_isr+0x9ae>
    919e:	ldr.w	r2, [r9, #96]	; 0x60
    91a2:	ldr	r1, [pc, #544]	; (93c4 <usb_isr+0x5e4>)
    91a4:	lsls	r4, r2, #24
    91a6:	bmi.w	97fc <usb_isr+0xa1c>
    91aa:	ldr.w	r2, [r9, #104]	; 0x68
    91ae:	ldr	r1, [pc, #532]	; (93c4 <usb_isr+0x5e4>)
    91b0:	lsls	r0, r2, #24
    91b2:	bmi.w	97f2 <usb_isr+0xa12>
    91b6:	ldr.w	r2, [r9, #112]	; 0x70
    91ba:	ldr	r1, [pc, #520]	; (93c4 <usb_isr+0x5e4>)
    91bc:	lsls	r2, r2, #24
    91be:	bmi.w	97e8 <usb_isr+0xa08>
    91c2:	ldr.w	r2, [r9, #120]	; 0x78
    91c6:	ldr	r1, [pc, #508]	; (93c4 <usb_isr+0x5e4>)
    91c8:	lsls	r3, r2, #24
    91ca:	bmi.w	97de <usb_isr+0x9fe>
    91ce:	ldr.w	r2, [r9, #128]	; 0x80
    91d2:	ldr	r1, [pc, #496]	; (93c4 <usb_isr+0x5e4>)
    91d4:	lsls	r5, r2, #24
    91d6:	bmi.w	9812 <usb_isr+0xa32>
    91da:	ldr.w	r2, [r9, #136]	; 0x88
    91de:	ldr	r1, [pc, #484]	; (93c4 <usb_isr+0x5e4>)
    91e0:	lsls	r4, r2, #24
    91e2:	bmi.w	9806 <usb_isr+0xa26>
    91e6:	ldr.w	r2, [r9, #144]	; 0x90
    91ea:	ldr	r1, [pc, #472]	; (93c4 <usb_isr+0x5e4>)
    91ec:	lsls	r0, r2, #24
    91ee:	bmi.w	9782 <usb_isr+0x9a2>
    91f2:	ldr.w	r2, [r9, #152]	; 0x98
    91f6:	ldr	r1, [pc, #460]	; (93c4 <usb_isr+0x5e4>)
    91f8:	lsls	r2, r2, #24
    91fa:	bmi.w	9776 <usb_isr+0x996>
    91fe:	ldr	r0, [pc, #456]	; (93c8 <usb_isr+0x5e8>)
    9200:	ldr	r2, [pc, #456]	; (93cc <usb_isr+0x5ec>)
    9202:	ldr	r1, [pc, #460]	; (93d0 <usb_isr+0x5f0>)
    9204:	str	r0, [sp, #4]
    9206:	ldr	r0, [pc, #460]	; (93d4 <usb_isr+0x5f4>)
    9208:	ldr	r5, [pc, #432]	; (93bc <usb_isr+0x5dc>)
    920a:	ldr	r4, [pc, #460]	; (93d8 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    920c:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    920e:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9210:	str	r6, [sp, #20]
    9212:	str	r5, [sp, #8]
    9214:	mov	r8, r0
    9216:	mov	r7, r2
    9218:	mov	r6, r1
    921a:	mov	r5, r3
    921c:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    921e:	ldr	r0, [r7, #0]
			while (p) {
    9220:	cbz	r0, 922e <usb_isr+0x44e>
				n = p->next;
    9222:	ldr	r4, [r0, #4]
				usb_free(p);
    9224:	bl	8be0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9228:	mov	r0, r4
    922a:	cmp	r4, #0
    922c:	bne.n	9222 <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    922e:	movs	r3, #0
    9230:	str	r3, [r7, #0]
			rx_last[i] = NULL;
    9232:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9234:	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9236:	mov	r2, r3
    9238:	movs	r3, #0
    923a:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    923e:	cbz	r0, 924c <usb_isr+0x46c>
				n = p->next;
    9240:	ldr	r4, [r0, #4]
				usb_free(p);
    9242:	bl	8be0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9246:	mov	r0, r4
    9248:	cmp	r4, #0
    924a:	bne.n	9240 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    924c:	movs	r2, #0
    924e:	str	r2, [r6, #0]
			tx_last[i] = NULL;
    9250:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9252:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9256:	mov	r1, r2
    9258:	movs	r2, #0
    925a:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    925e:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9260:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9262:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9264:	mov.w	r1, #0
    9268:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    926c:	cmp	r3, #3
    926e:	bhi.n	9284 <usb_isr+0x4a4>
    9270:	tbh	[pc, r3, lsl #1]
    9274:	.word	0x0004014b
    9278:	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    927c:	mov.w	r3, #1
    9280:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    9284:	adds	r5, #1
    9286:	cmp	r5, #4
    9288:	add.w	r7, r7, #4
    928c:	add.w	r6, r6, #4
    9290:	add.w	r8, r8, #1
    9294:	bne.n	921e <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9296:	ldr	r4, [pc, #324]	; (93dc <usb_isr+0x5fc>)
			*reg = epconf;
    9298:	ldr	r3, [pc, #324]	; (93e0 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    929a:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    929c:	ldr	r5, [pc, #280]	; (93b8 <usb_isr+0x5d8>)
    929e:	ldr	r7, [sp, #16]
    92a0:	ldr	r6, [sp, #20]
    92a2:	movs	r1, #0
    92a4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    92a6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    92a8:	lsls	r3, r2, #28
    92aa:	bmi.w	974c <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    92ae:	ldrb	r2, [r4, #1]
			*reg = epconf;
    92b0:	ldr	r1, [pc, #304]	; (93e4 <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    92b2:	ldr.w	r8, [pc, #272]	; 93c4 <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    92b6:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    92b8:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    92ba:	mov.w	r1, #0
    92be:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    92c2:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    92c6:	bmi.w	9720 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    92ca:	ldr	r1, [pc, #284]	; (93e8 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    92cc:	ldrb	r2, [r4, #2]
			*reg = epconf;
    92ce:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    92d0:	movs	r1, #0
    92d2:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    92d6:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    92da:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    92dc:	ldr.w	r8, [pc, #228]	; 93c4 <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    92e0:	bmi.w	969c <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    92e4:	ldrb	r2, [r4, #3]
			*reg = epconf;
    92e6:	ldr	r1, [pc, #260]	; (93ec <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    92e8:	ldr	r4, [pc, #216]	; (93c4 <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    92ea:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    92ec:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    92ee:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    92f0:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    92f4:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    92f8:	bmi.w	966e <usb_isr+0x88e>
    92fc:	ldrb	r3, [r6, #0]
    92fe:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9300:	movs	r1, #0
    9302:	eor.w	r2, r3, #1
    9306:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    930a:	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    930e:	movs	r0, #0
    9310:	str	r0, [sp, #8]
    9312:	mov	r8, r0
    9314:	mov	ip, r0
    9316:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9318:	ldr	r1, [pc, #212]	; (93f0 <usb_isr+0x610>)
    931a:	ldrb	r5, [r1, #0]
    931c:	orr.w	lr, r5, #2
    9320:	add.w	r3, r9, lr, lsl #3
    9324:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9326:	ldr	r3, [sp, #4]
    9328:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    932a:	ldr	r3, [sp, #12]
    932c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    932e:	ite	eq
    9330:	moveq	r4, #136	; 0x88
    9332:	movne	r4, #200	; 0xc8
    9334:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9338:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    933c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9340:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9342:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9344:	ldr.w	lr, [pc, #124]	; 93c4 <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    9348:	ldr	r3, [pc, #168]	; (93f4 <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    934a:	ldr.w	r8, [pc, #164]	; 93f0 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    934e:	cmp	r0, #0
    9350:	bne.w	95a0 <usb_isr+0x7c0>
    9354:	cmp.w	ip, #64	; 0x40
    9358:	bne.n	9392 <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    935a:	orr.w	ip, r4, #2
    935e:	add.w	r3, r9, ip, lsl #3
    9362:	ldr	r4, [sp, #8]
    9364:	ldr.w	lr, [pc, #92]	; 93c4 <usb_isr+0x5e4>
    9368:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    936a:	cmp	r2, #0
    936c:	bne.w	95cc <usb_isr+0x7ec>
    9370:	lsls	r2, r0, #16
    9372:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9376:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    937a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    937e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9380:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9382:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9384:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9386:	cmp	r0, #64	; 0x40
    9388:	bne.n	9392 <usb_isr+0x5b2>
    938a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    938c:	ldr	r2, [pc, #104]	; (93f8 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    938e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    9390:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9392:	ldr	r2, [pc, #104]	; (93fc <usb_isr+0x61c>)
    9394:	movs	r3, #1
    9396:	strb	r3, [r2, #0]
    9398:	b.n	8fec <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    939a:	ldrb	r3, [r1, r6]
    939c:	cmp	r3, #3
    939e:	bhi.w	95fc <usb_isr+0x81c>
    93a2:	add	r2, pc, #4	; (adr r2, 93a8 <usb_isr+0x5c8>)
    93a4:	ldr.w	pc, [r2, r3, lsl #2]
    93a8:	.word	0x00008e75
    93ac:	.word	0x00008e75
    93b0:	.word	0x000094ff
    93b4:	.word	0x00009505
    93b8:	.word	0x2001ab59
    93bc:	.word	0x2001aa88
    93c0:	.word	0x2001ab64
    93c4:	.word	0x1fff0000
    93c8:	.word	0x2001ab40
    93cc:	.word	0x2001aadc
    93d0:	.word	0x2001ab30
    93d4:	.word	0x2001ab68
    93d8:	.word	0x2001af58
    93dc:	.word	0x00013870
    93e0:	.word	0x400720c4
    93e4:	.word	0x400720c8
    93e8:	.word	0x400720cc
    93ec:	.word	0x400720d0
    93f0:	.word	0x2001ab58
    93f4:	.word	0x2001aaec
    93f8:	.word	0x2001aa98
    93fc:	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    9400:	ldrh	r2, [r2, #4]
    9402:	cbnz	r2, 942a <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9404:	ldr	r2, [pc, #708]	; (96cc <usb_isr+0x8ec>)
    9406:	ldrb	r5, [r1, #0]
    9408:	ldrb	r0, [r1, #1]
    940a:	strb	r5, [r2, #0]
    940c:	strb	r0, [r2, #1]
    940e:	ldrb	r5, [r1, #2]
    9410:	ldrb	r0, [r1, #3]
    9412:	strb	r5, [r2, #2]
    9414:	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9416:	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9418:	ldrb	r5, [r1, #4]
    941a:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    941c:	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    941e:	ldrb	r5, [r1, #5]
    9420:	ldrb	r1, [r1, #6]
    9422:	strb	r5, [r2, #5]
    9424:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9426:	beq.w	9574 <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    942a:	ldr	r1, [pc, #676]	; (96d0 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    942c:	ldr	r6, [pc, #676]	; (96d4 <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    942e:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9430:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9432:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9436:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9438:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    943c:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    943e:	ite	eq
    9440:	moveq	r1, #136	; 0x88
    9442:	movne	r1, #200	; 0xc8
    9444:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9448:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    944c:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9450:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9452:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9454:	str	r1, [r2, #4]
    9456:	b.n	9002 <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9458:	movw	r2, #770	; 0x302
    945c:	cmp	r1, r2
    945e:	bne.w	957c <usb_isr+0x79c>
    9462:	ldrh	r1, [r5, #4]
    9464:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9468:	cmp	r1, #4
    946a:	bhi.w	9592 <usb_isr+0x7b2>
    946e:	ldrh	r2, [r5, #2]
    9470:	cmp	r2, #0
    9472:	bne.w	9592 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    9476:	ldr	r0, [pc, #608]	; (96d8 <usb_isr+0x8f8>)
    9478:	str.w	lr, [sp, #4]
    947c:	lsls	r1, r1, #2
    947e:	add	r0, r1
    9480:	ldrb	r1, [r0, #0]
    9482:	orr.w	r1, r1, #2
    9486:	strb	r1, [r0, #0]
    9488:	b.n	930e <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    948a:	movw	r0, #8737	; 0x2221
    948e:	cmp	r1, r0
    9490:	bne.n	958a <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    9492:	ldrh	r1, [r5, #4]
    9494:	cmp	r1, #0
    9496:	bne.w	9662 <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    949a:	ldr	r3, [pc, #576]	; (96dc <usb_isr+0x8fc>)
    949c:	ldr	r2, [pc, #576]	; (96e0 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    949e:	ldr	r0, [pc, #580]	; (96e4 <usb_isr+0x904>)
    94a0:	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    94a2:	ldr	r5, [r3, #0]
    94a4:	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    94a6:	str.w	lr, [sp, #4]
    94aa:	mov	r2, r1
    94ac:	strb	r4, [r0, #0]
    94ae:	b.n	930e <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    94b0:	ldr	r3, [pc, #564]	; (96e8 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    94b2:	ldr	r0, [pc, #568]	; (96ec <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    94b4:	ldr	r1, [pc, #536]	; (96d0 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    94b6:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    94b8:	mov.w	lr, #2
    94bc:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    94c0:	ldr	r7, [pc, #532]	; (96d8 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    94c2:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    94c4:	ldr	r1, [pc, #552]	; (96f0 <usb_isr+0x910>)
    94c6:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    94c8:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    94ca:	ldr	r6, [pc, #552]	; (96f4 <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    94cc:	ldr	r5, [pc, #552]	; (96f8 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    94ce:	ldr	r4, [pc, #556]	; (96fc <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    94d0:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    94d2:	movs	r1, #13
    94d4:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    94d6:	movs	r1, #255	; 0xff
    94d8:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    94da:	ldr.w	lr, [pc, #576]	; 971c <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    94de:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    94e0:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    94e2:	ldr	r5, [pc, #540]	; (9700 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    94e4:	ldr	r2, [pc, #540]	; (9704 <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    94e6:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    94ea:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    94ec:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    94ee:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    94f2:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    94f4:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    94f6:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    94f8:	add	sp, #28
    94fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    94fe:	movs	r3, #0
    9500:	strb	r3, [r1, r6]
						break;
    9502:	b.n	8e74 <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9504:	movs	r3, #1
    9506:	strb	r3, [r1, r6]
						break;
    9508:	b.n	8e74 <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    950a:	mov.w	r3, #0
    950e:	strb.w	r3, [r8]
    9512:	b.n	9284 <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9514:	ldr	r1, [pc, #448]	; (96d8 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9516:	ldr	r3, [pc, #480]	; (96f8 <usb_isr+0x918>)
    9518:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    951a:	movs	r0, #13
    951c:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    951e:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9520:	lsls	r2, r4, #30
    9522:	bpl.w	9094 <usb_isr+0x2b4>
    9526:	b.n	9086 <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9528:	ldr	r4, [pc, #476]	; (9708 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    952a:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    952e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    9530:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9532:	ldrh	r2, [r5, #6]
    9534:	cmp	r2, lr
    9536:	bcs.w	9880 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    953a:	ldr	r1, [pc, #404]	; (96d0 <usb_isr+0x8f0>)
    953c:	ldrb	r5, [r1, #0]
    953e:	cmp	r2, #64	; 0x40
    9540:	mov	ip, r2
    9542:	orr.w	lr, r5, #2
    9546:	it	cs
    9548:	movcs.w	ip, #64	; 0x40
    954c:	add.w	r3, r4, ip
    9550:	add.w	r0, r9, lr, lsl #3
    9554:	str	r3, [sp, #8]
    9556:	movs	r3, #1
    9558:	str	r4, [r0, #4]
    955a:	mov.w	r8, ip, lsl #16
    955e:	rsb	r0, ip, r2
    9562:	str	r3, [sp, #4]
    9564:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9566:	movs	r4, #200	; 0xc8
    9568:	b.n	9334 <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    956a:	ldr	r2, [pc, #416]	; (970c <usb_isr+0x92c>)
    956c:	ldr	r4, [pc, #408]	; (9708 <usb_isr+0x928>)
    956e:	ldrb	r2, [r2, #0]
    9570:	strb	r2, [r4, #0]
    9572:	b.n	9532 <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9574:	ldr	r2, [pc, #408]	; (9710 <usb_isr+0x930>)
    9576:	movs	r1, #15
    9578:	strb	r1, [r2, #0]
    957a:	b.n	942a <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    957c:	cmp.w	r1, #1280	; 0x500
    9580:	bne.n	9592 <usb_isr+0x7b2>
    9582:	movs	r3, #1
    9584:	movs	r2, #0
    9586:	str	r3, [sp, #4]
    9588:	b.n	930e <usb_isr+0x52e>
    958a:	movw	r2, #8993	; 0x2321
    958e:	cmp	r1, r2
    9590:	beq.n	9582 <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9592:	ldr	r2, [pc, #324]	; (96d8 <usb_isr+0x8f8>)
    9594:	movs	r3, #15
    9596:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9598:	ldr	r2, [pc, #336]	; (96ec <usb_isr+0x90c>)
    959a:	movs	r3, #1
    959c:	strb	r3, [r2, #0]
    959e:	b.n	8fec <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    95a0:	cmp	r0, #64	; 0x40
    95a2:	bls.w	935a <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    95a6:	orr.w	r4, r4, #2
    95aa:	add.w	r1, lr, r4, lsl #3
    95ae:	ldr	r6, [sp, #8]
    95b0:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    95b2:	cbz	r2, 95e4 <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    95b4:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    95b8:	ldr	r2, [pc, #344]	; (9714 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    95ba:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    95bc:	mov	r3, r6
    95be:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    95c0:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    95c4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    95c6:	str.w	r2, [lr, r4, lsl #3]
    95ca:	b.n	938c <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    95cc:	ldrb.w	r3, [sp, #4]
    95d0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    95d2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    95d4:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    95d6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    95d8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    95dc:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    95de:	str.w	r2, [lr, ip, lsl #3]
    95e2:	b.n	9386 <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    95e4:	ldrb.w	r1, [sp, #4]
    95e8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    95ea:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    95ec:	ldr	r2, [pc, #256]	; (96f0 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    95ee:	strb.w	r5, [r8]
    95f2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    95f4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    95f6:	str.w	r2, [lr, r4, lsl #3]
    95fa:	b.n	938c <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    95fc:	tst.w	r9, #8
    9600:	ite	eq
    9602:	moveq	r3, #2
    9604:	movne	r3, #3
    9606:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    9608:	b.n	8e74 <usb_isr+0x94>
    960a:	ldrh	r1, [r5, #4]
    960c:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9610:	cmp	r1, #4
    9612:	bhi.n	9592 <usb_isr+0x7b2>
    9614:	ldrh	r2, [r5, #2]
    9616:	cmp	r2, #0
    9618:	bne.n	9592 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    961a:	ldr	r0, [pc, #188]	; (96d8 <usb_isr+0x8f8>)
    961c:	str.w	lr, [sp, #4]
    9620:	lsls	r1, r1, #2
    9622:	add	r0, r1
    9624:	ldrb	r1, [r0, #0]
    9626:	bic.w	r1, r1, #2
    962a:	strb	r1, [r0, #0]
    962c:	b.n	930e <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    962e:	ldr	r2, [pc, #232]	; (9718 <usb_isr+0x938>)
    9630:	ldr	r4, [r2, #4]
    9632:	cmp	r4, #0
    9634:	beq.n	9592 <usb_isr+0x7b2>
    9636:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9638:	ldrh.w	lr, [r5, #4]
    963c:	b.n	9646 <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    963e:	adds	r2, #12
			if (list->addr == NULL) break;
    9640:	ldr	r4, [r2, #4]
    9642:	cmp	r4, #0
    9644:	beq.n	9592 <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9646:	ldrh	r3, [r2, #0]
    9648:	cmp	r3, r0
    964a:	bne.n	963e <usb_isr+0x85e>
    964c:	ldrh	r3, [r2, #2]
    964e:	cmp	r3, lr
    9650:	bne.n	963e <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    9652:	lsrs	r0, r0, #8
    9654:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    9656:	ite	eq
    9658:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    965c:	ldrhne.w	lr, [r2, #8]
    9660:	b.n	9532 <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    9662:	str.w	lr, [sp, #4]
    9666:	b.n	930e <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    9668:	mov.w	lr, #2
    966c:	b.n	9532 <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    966e:	bl	8ba0 <usb_malloc>
				if (p) {
    9672:	cmp	r0, #0
    9674:	beq.w	985a <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9678:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    967a:	ldr	r2, [pc, #116]	; (96f0 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    967c:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9680:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9684:	bl	8ba0 <usb_malloc>
				if (p) {
    9688:	cmp	r0, #0
    968a:	beq.w	984e <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    968e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9690:	ldr	r2, [pc, #128]	; (9714 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9692:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9696:	str.w	r2, [r9, #136]	; 0x88
    969a:	b.n	92fc <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    969c:	bl	8ba0 <usb_malloc>
				if (p) {
    96a0:	cmp	r0, #0
    96a2:	beq.w	9872 <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    96a6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    96a8:	ldr	r2, [pc, #68]	; (96f0 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    96aa:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    96ae:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    96b2:	bl	8ba0 <usb_malloc>
				if (p) {
    96b6:	cmp	r0, #0
    96b8:	beq.w	9866 <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    96bc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    96be:	ldr	r2, [pc, #84]	; (9714 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    96c0:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    96c4:	str.w	r2, [r9, #104]	; 0x68
    96c8:	b.n	92e4 <usb_isr+0x504>
    96ca:	nop
    96cc:	.word	0x2001af4c
    96d0:	.word	0x2001ab58
    96d4:	.word	0x2001aaec
    96d8:	.word	0x400720c0
    96dc:	.word	0x2001aa80
    96e0:	.word	0x2001af54
    96e4:	.word	0x2001aa7c
    96e8:	.word	0x1fff0000
    96ec:	.word	0x40072094
    96f0:	.word	0x00400088
    96f4:	.word	0x40072088
    96f8:	.word	0x40072080
    96fc:	.word	0x40072098
    9700:	.word	0x2001aa9c
    9704:	.word	0x2001aaf0
    9708:	.word	0x2001ab5c
    970c:	.word	0x2001ab64
    9710:	.word	0x2001aaed
    9714:	.word	0x004000c8
    9718:	.word	0x00013874
    971c:	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9720:	bl	8ba0 <usb_malloc>
				if (p) {
    9724:	cmp	r0, #0
    9726:	beq.w	9842 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    972a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    972c:	ldr	r2, [pc, #372]	; (98a4 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    972e:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9732:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9736:	bl	8ba0 <usb_malloc>
				if (p) {
    973a:	cmp	r0, #0
    973c:	beq.n	9836 <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    973e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9740:	ldr	r2, [pc, #356]	; (98a8 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9742:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9746:	str.w	r2, [r9, #72]	; 0x48
    974a:	b.n	92ca <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    974c:	bl	8ba0 <usb_malloc>
				if (p) {
    9750:	cmp	r0, #0
    9752:	beq.n	982a <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9754:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9756:	ldr	r2, [pc, #332]	; (98a4 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9758:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    975c:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9760:	bl	8ba0 <usb_malloc>
				if (p) {
    9764:	cmp	r0, #0
    9766:	beq.n	981e <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    9768:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    976a:	ldr	r2, [pc, #316]	; (98a8 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    976c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9770:	str.w	r2, [r9, #40]	; 0x28
    9774:	b.n	92ae <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    9776:	ldr.w	r0, [r1, #156]	; 0x9c
    977a:	subs	r0, #8
    977c:	bl	8be0 <usb_free>
    9780:	b.n	91fe <usb_isr+0x41e>
    9782:	ldr.w	r0, [r1, #148]	; 0x94
    9786:	subs	r0, #8
    9788:	bl	8be0 <usb_free>
    978c:	b.n	91f2 <usb_isr+0x412>
    978e:	ldr	r0, [r1, #92]	; 0x5c
    9790:	subs	r0, #8
    9792:	bl	8be0 <usb_free>
    9796:	b.n	919e <usb_isr+0x3be>
    9798:	ldr	r0, [r1, #84]	; 0x54
    979a:	subs	r0, #8
    979c:	bl	8be0 <usb_free>
    97a0:	b.n	9192 <usb_isr+0x3b2>
    97a2:	ldr	r0, [r1, #76]	; 0x4c
    97a4:	subs	r0, #8
    97a6:	bl	8be0 <usb_free>
    97aa:	b.n	9186 <usb_isr+0x3a6>
    97ac:	ldr	r0, [r1, #68]	; 0x44
    97ae:	subs	r0, #8
    97b0:	bl	8be0 <usb_free>
    97b4:	b.n	917a <usb_isr+0x39a>
    97b6:	ldr	r0, [r1, #60]	; 0x3c
    97b8:	subs	r0, #8
    97ba:	bl	8be0 <usb_free>
    97be:	b.n	916e <usb_isr+0x38e>
    97c0:	ldr	r0, [r1, #52]	; 0x34
    97c2:	subs	r0, #8
    97c4:	bl	8be0 <usb_free>
    97c8:	b.n	9162 <usb_isr+0x382>
    97ca:	ldr	r0, [r1, #44]	; 0x2c
    97cc:	subs	r0, #8
    97ce:	bl	8be0 <usb_free>
    97d2:	b.n	9156 <usb_isr+0x376>
    97d4:	ldr	r0, [r4, #36]	; 0x24
    97d6:	subs	r0, #8
    97d8:	bl	8be0 <usb_free>
    97dc:	b.n	914a <usb_isr+0x36a>
    97de:	ldr	r0, [r1, #124]	; 0x7c
    97e0:	subs	r0, #8
    97e2:	bl	8be0 <usb_free>
    97e6:	b.n	91ce <usb_isr+0x3ee>
    97e8:	ldr	r0, [r1, #116]	; 0x74
    97ea:	subs	r0, #8
    97ec:	bl	8be0 <usb_free>
    97f0:	b.n	91c2 <usb_isr+0x3e2>
    97f2:	ldr	r0, [r1, #108]	; 0x6c
    97f4:	subs	r0, #8
    97f6:	bl	8be0 <usb_free>
    97fa:	b.n	91b6 <usb_isr+0x3d6>
    97fc:	ldr	r0, [r1, #100]	; 0x64
    97fe:	subs	r0, #8
    9800:	bl	8be0 <usb_free>
    9804:	b.n	91aa <usb_isr+0x3ca>
    9806:	ldr.w	r0, [r1, #140]	; 0x8c
    980a:	subs	r0, #8
    980c:	bl	8be0 <usb_free>
    9810:	b.n	91e6 <usb_isr+0x406>
    9812:	ldr.w	r0, [r1, #132]	; 0x84
    9816:	subs	r0, #8
    9818:	bl	8be0 <usb_free>
    981c:	b.n	91da <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    981e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9820:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    9824:	adds	r2, #1
    9826:	strb	r2, [r5, #0]
    9828:	b.n	92ae <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    982a:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    982c:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    9830:	adds	r2, #1
    9832:	strb	r2, [r5, #0]
    9834:	b.n	9760 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9836:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9838:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    983c:	adds	r2, #1
    983e:	strb	r2, [r5, #0]
    9840:	b.n	92ca <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9842:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9844:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    9848:	adds	r2, #1
    984a:	strb	r2, [r5, #0]
    984c:	b.n	9736 <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    984e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9850:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    9854:	adds	r2, #1
    9856:	strb	r2, [r5, #0]
    9858:	b.n	92fc <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    985a:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    985c:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    9860:	adds	r2, #1
    9862:	strb	r2, [r5, #0]
    9864:	b.n	9684 <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9866:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9868:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    986c:	adds	r2, #1
    986e:	strb	r2, [r5, #0]
    9870:	b.n	92e4 <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9872:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9874:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    9878:	adds	r2, #1
    987a:	strb	r2, [r5, #0]
    987c:	b.n	96b2 <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    987e:	bkpt	0x0000
    9880:	cmp.w	lr, #64	; 0x40
    9884:	mov	ip, lr
    9886:	it	cs
    9888:	movcs.w	ip, #64	; 0x40
    988c:	add.w	r3, r4, ip
    9890:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9892:	movs	r3, #1
    9894:	rsb	r0, ip, lr
    9898:	mov.w	r8, ip, lsl #16
    989c:	movs	r2, #0
    989e:	str	r3, [sp, #4]
    98a0:	b.n	9318 <usb_isr+0x538>
    98a2:	nop
    98a4:	.word	0x00400088
    98a8:	.word	0x004000c8

000098ac <usb_init>:
}



void usb_init(void)
{
    98ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    98b0:	bl	a7f0 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    98b4:	ldr	r4, [pc, #188]	; (9974 <usb_init+0xc8>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98b6:	ldr	r3, [pc, #192]	; (9978 <usb_init+0xcc>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    98b8:	ldr	r0, [pc, #192]	; (997c <usb_init+0xd0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    98ba:	ldr.w	r8, [pc, #216]	; 9994 <usb_init+0xe8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    98be:	ldr	r7, [pc, #192]	; (9980 <usb_init+0xd4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    98c0:	ldr	r5, [pc, #192]	; (9984 <usb_init+0xd8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    98c2:	ldr	r6, [pc, #196]	; (9988 <usb_init+0xdc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    98c4:	ldr.w	ip, [pc, #208]	; 9998 <usb_init+0xec>
	USB0_ERRSTAT = 0xFF;
    98c8:	ldr.w	lr, [pc, #208]	; 999c <usb_init+0xf0>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98cc:	movs	r2, #0
    98ce:	str	r2, [r3, #0]
		table[i].addr = 0;
    98d0:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98d2:	str	r2, [r3, #8]
		table[i].addr = 0;
    98d4:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98d6:	str	r2, [r3, #16]
		table[i].addr = 0;
    98d8:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98da:	str	r2, [r3, #24]
		table[i].addr = 0;
    98dc:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98de:	str	r2, [r3, #32]
		table[i].addr = 0;
    98e0:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98e2:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    98e4:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98e6:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    98e8:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98ea:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    98ec:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98ee:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    98f0:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98f2:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    98f4:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98f6:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    98f8:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98fa:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    98fc:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    98fe:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    9900:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9902:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    9904:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9906:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    9908:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    990a:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    990c:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    990e:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9912:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    9914:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9918:	orr.w	r1, r1, #262144	; 0x40000
    991c:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    991e:	ldr	r1, [r0, #0]
    9920:	orr.w	r1, r1, #50331648	; 0x3000000
    9924:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9926:	ubfx	r1, r3, #8, #8
    992a:	strb.w	r1, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    992e:	add.w	r4, r4, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9932:	ubfx	r1, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9936:	lsrs	r3, r3, #24
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9938:	strb	r1, [r7, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    993a:	adds	r4, #204	; 0xcc
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    993c:	strb	r3, [r5, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    993e:	add.w	r0, r0, #2684354560	; 0xa0000000
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9942:	movs	r3, #255	; 0xff
    9944:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9948:	ldr	r5, [pc, #64]	; (998c <usb_init+0xe0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    994a:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    994e:	addw	r0, r0, #2308	; 0x904
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    9952:	strb	r3, [r6, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9954:	ldr	r1, [pc, #56]	; (9990 <usb_init+0xe4>)
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    9956:	movs	r3, #1
    9958:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    995c:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    995e:	strb	r2, [r4, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9960:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9964:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    9966:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    996a:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    996c:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    996e:	strb	r2, [r1, #0]
    9970:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9974:	.word	0x40048034
    9978:	.word	0x1fff0000
    997c:	.word	0x4000d800
    9980:	.word	0x400720b0
    9984:	.word	0x400720b4
    9988:	.word	0x40072010
    998c:	.word	0xe000e435
    9990:	.word	0x40072108
    9994:	.word	0x4007209c
    9998:	.word	0x40072080
    999c:	.word	0x40072088

000099a0 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    99a0:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    99a2:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    99a4:	cbnz	r1, 99ce <DMAChannel::begin(bool)+0x2e>
    99a6:	ldr	r2, [r0, #0]
    99a8:	cbz	r2, 99ce <DMAChannel::begin(bool)+0x2e>
    99aa:	ldrb	r3, [r0, #4]
    99ac:	cmp	r3, #15
    99ae:	bhi.n	99ce <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    99b0:	ldr	r4, [pc, #160]	; (9a54 <DMAChannel::begin(bool)+0xb4>)
    99b2:	ldrh	r1, [r4, #0]
    99b4:	asr.w	r5, r1, r3
    99b8:	lsls	r5, r5, #31
    99ba:	bpl.n	99d2 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    99bc:	add.w	r3, r3, #33554432	; 0x2000000
    99c0:	add.w	r3, r3, #1152	; 0x480
    99c4:	cmp.w	r2, r3, lsl #5
    99c8:	bne.n	99d2 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    99ca:	cpsie	i
		return;
    99cc:	pop	{r4, r5, r6, r7, pc}
    99ce:	ldr	r4, [pc, #132]	; (9a54 <DMAChannel::begin(bool)+0xb4>)
    99d0:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    99d2:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    99d4:	asr.w	r2, r1, r3
    99d8:	ands.w	r2, r2, #1
    99dc:	beq.n	99ee <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    99de:	adds	r3, #1
    99e0:	cmp	r3, #16
    99e2:	bne.n	99d4 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    99e4:	cpsie	i
			TCD = (TCD_t *)0;
    99e6:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    99e8:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    99ea:	str	r2, [r0, #0]
    99ec:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    99ee:	movs	r5, #1
    99f0:	lsls	r5, r3
    99f2:	orrs	r1, r5
    99f4:	strh	r1, [r4, #0]
			__enable_irq();
    99f6:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    99f8:	ldr	r6, [pc, #92]	; (9a58 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    99fa:	ldr	r5, [pc, #96]	; (9a5c <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    99fc:	ldr	r7, [pc, #96]	; (9a60 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    99fe:	ldr.w	lr, [pc, #104]	; 9a68 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    9a02:	uxtb	r1, r3
    9a04:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9a06:	ldr	r4, [r6, #0]
    9a08:	orr.w	r4, r4, #2
    9a0c:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9a0e:	ldr	r4, [r5, #0]
    9a10:	orr.w	r4, r4, #2
    9a14:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9a16:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9a1a:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    9a1e:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9a22:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9a26:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9a28:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9a2c:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    9a2e:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    9a30:	ldr	r4, [pc, #48]	; (9a64 <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    9a32:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9a36:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9a38:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    9a3a:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    9a3c:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9a3e:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    9a40:	str	r2, [r3, #0]
	*p++ = 0;
    9a42:	str	r2, [r3, #4]
	*p++ = 0;
    9a44:	str	r2, [r3, #8]
	*p++ = 0;
    9a46:	str	r2, [r3, #12]
	*p++ = 0;
    9a48:	str	r2, [r3, #16]
	*p++ = 0;
    9a4a:	str	r2, [r3, #20]
	*p++ = 0;
    9a4c:	str	r2, [r3, #24]
	*p++ = 0;
    9a4e:	str	r2, [r3, #28]
    9a50:	pop	{r4, r5, r6, r7, pc}
    9a52:	nop
    9a54:	.word	0x2001ab6c
    9a58:	.word	0x40048040
    9a5c:	.word	0x4004803c
    9a60:	.word	0x40008000
    9a64:	.word	0x4000801f
    9a68:	.word	0x4000801a

00009a6c <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    9a6c:	ldrb	r3, [r0, #4]
    9a6e:	cmp	r3, #15
    9a70:	bhi.n	9a98 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    9a72:	ldr	r2, [pc, #40]	; (9a9c <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    9a74:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    9a76:	strb	r3, [r2, #0]
	__disable_irq();
    9a78:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    9a7a:	ldr	r1, [pc, #36]	; (9aa0 <DMAChannel::release()+0x34>)
    9a7c:	ldrb	r4, [r0, #4]
    9a7e:	ldrh	r2, [r1, #0]
    9a80:	movs	r3, #1
    9a82:	lsls	r3, r4
    9a84:	bic.w	r3, r2, r3
    9a88:	strh	r3, [r1, #0]
	__enable_irq();
    9a8a:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    9a8c:	movs	r2, #16
	TCD = (TCD_t *)0;
    9a8e:	movs	r3, #0
}
    9a90:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    9a94:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    9a96:	str	r3, [r0, #0]
}
    9a98:	bx	lr
    9a9a:	nop
    9a9c:	.word	0x4000801a
    9aa0:	.word	0x2001ab6c

00009aa4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    9aa4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9aa6:	mrs	r2, PRIMASK
		__disable_irq();
    9aaa:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    9aac:	ldrb	r3, [r0, #29]
    9aae:	cbnz	r3, 9abe <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    9ab0:	ldrb	r1, [r0, #28]
    9ab2:	cmp	r1, #1
    9ab4:	beq.n	9ac8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    9ab6:	cmp	r1, #3
    9ab8:	beq.n	9adc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    9aba:	movs	r3, #1
    9abc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9abe:	cbnz	r2, 9ac2 <EventResponder::triggerEventNotImmediate()+0x1e>
    9ac0:	cpsie	i
	}
	enableInterrupts(irq);
}
    9ac2:	ldr.w	r4, [sp], #4
    9ac6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    9ac8:	ldr	r4, [pc, #68]	; (9b10 <EventResponder::triggerEventNotImmediate()+0x6c>)
    9aca:	ldr	r1, [r4, #0]
    9acc:	cbz	r1, 9af8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9ace:	ldr	r1, [pc, #68]	; (9b14 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    9ad0:	str	r3, [r0, #20]
				_prev = lastYield;
    9ad2:	ldr	r3, [r1, #0]
    9ad4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    9ad6:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    9ad8:	str	r0, [r3, #20]
    9ada:	b.n	9aba <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    9adc:	ldr	r4, [pc, #56]	; (9b18 <EventResponder::triggerEventNotImmediate()+0x74>)
    9ade:	ldr	r1, [r4, #0]
    9ae0:	cbz	r1, 9b04 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9ae2:	ldr	r1, [pc, #56]	; (9b1c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    9ae4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9ae6:	ldr	r3, [r1, #0]
    9ae8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    9aea:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    9aec:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9aee:	ldr	r3, [pc, #48]	; (9b20 <EventResponder::triggerEventNotImmediate()+0x7c>)
    9af0:	mov.w	r1, #268435456	; 0x10000000
    9af4:	str	r1, [r3, #0]
    9af6:	b.n	9aba <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    9af8:	ldr	r3, [pc, #24]	; (9b14 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9afa:	str	r1, [r0, #20]
				_prev = nullptr;
    9afc:	str	r1, [r0, #24]
				firstYield = this;
    9afe:	str	r0, [r4, #0]
				lastYield = this;
    9b00:	str	r0, [r3, #0]
    9b02:	b.n	9aba <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    9b04:	ldr	r3, [pc, #20]	; (9b1c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    9b06:	str	r1, [r0, #20]
				_prev = nullptr;
    9b08:	str	r1, [r0, #24]
				firstInterrupt = this;
    9b0a:	str	r0, [r4, #0]
				lastInterrupt = this;
    9b0c:	str	r0, [r3, #0]
    9b0e:	b.n	9aee <EventResponder::triggerEventNotImmediate()+0x4a>
    9b10:	.word	0x2001ab80
    9b14:	.word	0x2001ab7c
    9b18:	.word	0x2001ab70
    9b1c:	.word	0x2001ab74
    9b20:	.word	0xe000ed04

00009b24 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9b24:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b26:	mrs	r2, PRIMASK
		__disable_irq();
    9b2a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9b2c:	ldr	r4, [pc, #48]	; (9b60 <EventResponder::runFromInterrupt()+0x3c>)
    9b2e:	ldr	r0, [r4, #0]
		if (first) {
    9b30:	cbz	r0, 9b54 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9b32:	ldr	r6, [pc, #48]	; (9b64 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9b34:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    9b36:	ldr	r3, [r0, #20]
    9b38:	str	r3, [r4, #0]
			if (firstInterrupt) {
    9b3a:	cbz	r3, 9b5a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9b3c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9b3e:	cbnz	r2, 9b42 <EventResponder::runFromInterrupt()+0x1e>
    9b40:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9b42:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    9b44:	ldr	r3, [r0, #8]
    9b46:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b48:	mrs	r2, PRIMASK
		__disable_irq();
    9b4c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9b4e:	ldr	r0, [r4, #0]
		if (first) {
    9b50:	cmp	r0, #0
    9b52:	bne.n	9b36 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9b54:	cbnz	r2, 9b58 <EventResponder::runFromInterrupt()+0x34>
    9b56:	cpsie	i
    9b58:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9b5a:	str	r3, [r6, #0]
    9b5c:	b.n	9b3e <EventResponder::runFromInterrupt()+0x1a>
    9b5e:	nop
    9b60:	.word	0x2001ab70
    9b64:	.word	0x2001ab74

00009b68 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9b68:	b.w	9b24 <EventResponder::runFromInterrupt()>

00009b6c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    9b6c:	ldr	r2, [pc, #96]	; (9bd0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    9b6e:	push	{r4, r5}
	if (listActive == nullptr) {
    9b70:	ldr	r4, [r2, #0]
    9b72:	cmp	r4, #0
    9b74:	beq.n	9bc6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    9b76:	ldr	r3, [r0, #0]
    9b78:	ldr	r1, [r4, #0]
    9b7a:	cmp	r3, r1
    9b7c:	bcs.n	9b9c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9b7e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    9b80:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    9b82:	str	r4, [r0, #8]
		_prev = nullptr;
    9b84:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9b86:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    9b88:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    9b8a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9b8c:	movs	r3, #2
    9b8e:	strb	r3, [r0, #20]
}
    9b90:	pop	{r4, r5}
    9b92:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    9b94:	ldr	r1, [r2, #0]
    9b96:	cmp	r3, r1
    9b98:	mov	r4, r2
    9b9a:	bcc.n	9bae <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9b9c:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9b9e:	subs	r3, r3, r1
    9ba0:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9ba2:	cmp	r2, #0
    9ba4:	bne.n	9b94 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    9ba6:	str	r2, [r0, #8]
		_prev = timer;
    9ba8:	str	r4, [r0, #12]
		timer->_next = this;
    9baa:	str	r0, [r4, #8]
    9bac:	b.n	9b8c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9bae:	ldr	r2, [r2, #12]
    9bb0:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    9bb2:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    9bb4:	str	r0, [r4, #12]
				_prev->_next = this;
    9bb6:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    9bb8:	subs	r3, r1, r3
				_state = TimerActive;
    9bba:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    9bbc:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    9bbe:	str	r3, [r4, #0]
				_state = TimerActive;
    9bc0:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    9bc2:	pop	{r4, r5}
    9bc4:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    9bc6:	str	r4, [r0, #8]
		_prev = nullptr;
    9bc8:	str	r4, [r0, #12]
		listActive = this;
    9bca:	str	r0, [r2, #0]
    9bcc:	b.n	9b8c <MillisTimer::addToActiveList()+0x20>
    9bce:	nop
    9bd0:	.word	0x2001ab78

00009bd4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    9bd4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    9bd6:	ldr	r6, [pc, #136]	; (9c60 <MillisTimer::runFromTimer()+0x8c>)
    9bd8:	ldr	r4, [r6, #0]
	while (timer) {
    9bda:	cbz	r4, 9c28 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9bdc:	ldr	r3, [r4, #0]
    9bde:	cmp	r3, #0
    9be0:	bne.n	9c58 <MillisTimer::runFromTimer()+0x84>
    9be2:	ldr	r7, [pc, #128]	; (9c64 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    9be4:	mov	r5, r3
    9be6:	b.n	9bf2 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    9be8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9bea:	cbz	r4, 9c28 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9bec:	ldr	r3, [r4, #0]
    9bee:	cmp	r3, #0
    9bf0:	bne.n	9c58 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    9bf2:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    9bf4:	cbz	r3, 9bf8 <MillisTimer::runFromTimer()+0x24>
    9bf6:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    9bf8:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    9bfa:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9bfc:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9bfe:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9c00:	ldr	r3, [r3, #0]
    9c02:	cmp	r3, r7
    9c04:	bne.n	9c4a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9c06:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9c08:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9c0a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9c0c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9c0e:	beq.n	9c52 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9c10:	bl	9aa4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9c14:	ldr	r3, [r4, #4]
    9c16:	cmp	r3, #0
    9c18:	beq.n	9be8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    9c1a:	str	r3, [r4, #0]
				timer->addToActiveList();
    9c1c:	mov	r0, r4
    9c1e:	bl	9b6c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9c22:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9c24:	cmp	r4, #0
    9c26:	bne.n	9bec <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9c28:	mrs	r3, PRIMASK
		__disable_irq();
    9c2c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9c2e:	ldr	r2, [pc, #56]	; (9c68 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9c30:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9c32:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9c34:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9c36:	cbnz	r3, 9c3a <MillisTimer::runFromTimer()+0x66>
    9c38:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    9c3a:	cbz	r0, 9c48 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9c3c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9c3e:	bl	9b6c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9c42:	mov	r0, r4
    9c44:	cmp	r0, #0
    9c46:	bne.n	9c3c <MillisTimer::runFromTimer()+0x68>
    9c48:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9c4a:	mov	r2, r4
    9c4c:	movs	r1, #0
    9c4e:	blx	r3
    9c50:	b.n	9c14 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9c52:	ldr	r3, [r0, #8]
    9c54:	blx	r3
    9c56:	b.n	9c14 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    9c58:	subs	r3, #1
    9c5a:	str	r3, [r4, #0]
			break;
    9c5c:	b.n	9c28 <MillisTimer::runFromTimer()+0x54>
    9c5e:	nop
    9c60:	.word	0x2001ab78
    9c64:	.word	0x00002795
    9c68:	.word	0x2001ab88

00009c6c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    9c6c:	ldr	r2, [pc, #8]	; (9c78 <systick_isr+0xc>)
    9c6e:	ldr	r3, [r2, #0]
    9c70:	adds	r3, #1
    9c72:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    9c74:	b.w	9bd4 <MillisTimer::runFromTimer()>
    9c78:	.word	0x2001aa80

00009c7c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9c7c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    9c7e:	ldr	r4, [pc, #176]	; (9d30 <yield+0xb4>)
    9c80:	ldrb	r3, [r4, #0]
    9c82:	cbz	r3, 9c86 <yield+0xa>
    9c84:	pop	{r3, r4, r5, pc}
	running = 1;
    9c86:	movs	r3, #1
    9c88:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9c8a:	bl	8450 <usb_serial_available>
	if (Serial.available()) serialEvent();
    9c8e:	cmp	r0, #0
    9c90:	bne.n	9d18 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    9c92:	bl	a5c0 <serial_available>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    9c96:	cmp	r0, #0
    9c98:	bne.n	9d12 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    9c9a:	bl	a39c <serial2_available>
	if (Serial2.available()) serialEvent2();
    9c9e:	cmp	r0, #0
    9ca0:	bne.n	9d0c <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    9ca2:	bl	a8b8 <serial3_available>
	if (Serial3.available()) serialEvent3();
    9ca6:	cbnz	r0, 9d06 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    9ca8:	bl	a4c8 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    9cac:	cbnz	r0, 9d00 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    9cae:	bl	a2a4 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    9cb2:	cbnz	r0, 9cfa <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    9cb4:	bl	a6ec <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    9cb8:	cbnz	r0, 9cf4 <yield+0x78>
#endif
	running = 0;
    9cba:	movs	r3, #0
    9cbc:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9cbe:	mrs	r3, IPSR
		if (ipsr != 0) return;
    9cc2:	cmp	r3, #0
    9cc4:	bne.n	9c84 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9cc6:	mrs	r1, PRIMASK
		__disable_irq();
    9cca:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9ccc:	ldr	r3, [pc, #100]	; (9d34 <yield+0xb8>)
    9cce:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9cd0:	cbz	r0, 9d1e <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9cd2:	ldr	r4, [pc, #100]	; (9d38 <yield+0xbc>)
    9cd4:	ldrb	r2, [r4, #0]
    9cd6:	cbnz	r2, 9d1e <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    9cd8:	ldr	r5, [r0, #20]
    9cda:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9cdc:	movs	r3, #1
    9cde:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    9ce0:	cbz	r5, 9d26 <yield+0xaa>
			firstYield->_prev = nullptr;
    9ce2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9ce4:	cbnz	r1, 9ce8 <yield+0x6c>
    9ce6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9ce8:	movs	r5, #0
    9cea:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9cec:	ldr	r3, [r0, #8]
    9cee:	blx	r3
		runningFromYield = false;
    9cf0:	strb	r5, [r4, #0]
    9cf2:	b.n	9c84 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    9cf4:	bl	a29c <serialEvent6()>
    9cf8:	b.n	9cba <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    9cfa:	bl	9d40 <serialEvent5()>
    9cfe:	b.n	9cb4 <yield+0x38>
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    9d00:	bl	9e6c <serialEvent4()>
    9d04:	b.n	9cae <yield+0x32>
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    9d06:	bl	a9b0 <serialEvent3()>
    9d0a:	b.n	9ca8 <yield+0x2c>
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    9d0c:	bl	9e68 <serialEvent2()>
    9d10:	b.n	9ca2 <yield+0x26>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    9d12:	bl	9e80 <serialEvent1()>
    9d16:	b.n	9c9a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    9d18:	bl	9d6c <serialEvent()>
    9d1c:	b.n	9c92 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9d1e:	cmp	r1, #0
    9d20:	bne.n	9c84 <yield+0x8>
    9d22:	cpsie	i
    9d24:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    9d26:	ldr	r3, [pc, #20]	; (9d3c <yield+0xc0>)
    9d28:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9d2a:	cmp	r1, #0
    9d2c:	bne.n	9ce8 <yield+0x6c>
    9d2e:	b.n	9ce6 <yield+0x6a>
    9d30:	.word	0x2001ab8c
    9d34:	.word	0x2001ab80
    9d38:	.word	0x2001ab84
    9d3c:	.word	0x2001ab7c

00009d40 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    9d40:	bx	lr
    9d42:	nop

00009d44 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9d44:	b.w	846c <usb_serial_flush_input>

00009d48 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9d48:	b.w	8420 <usb_serial_peekchar>

00009d4c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9d4c:	b.w	83d8 <usb_serial_getchar>

00009d50 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9d50:	b.w	8450 <usb_serial_available>

00009d54 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9d54:	b.w	860c <usb_serial_flush_output>

00009d58 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9d58:	b.w	85c4 <usb_serial_write_buffer_free>

00009d5c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9d5c:	mov	r0, r1
    9d5e:	mov	r1, r2
    9d60:	b.w	84a4 <usb_serial_write>

00009d64 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9d64:	mov	r0, r1
    9d66:	b.w	85ac <usb_serial_putchar>
    9d6a:	nop

00009d6c <serialEvent()>:
    9d6c:	bx	lr
    9d6e:	nop

00009d70 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    9d70:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    9d72:	mov	r6, r1
    9d74:	cbz	r1, 9d94 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    9d76:	cbz	r2, 9d98 <Print::write(unsigned char const*, unsigned int)+0x28>
    9d78:	mov	r7, r0
    9d7a:	mov	r4, r2
    9d7c:	movs	r5, #0
    9d7e:	ldr	r3, [r7, #0]
    9d80:	ldrb.w	r1, [r6], #1
    9d84:	ldr	r3, [r3, #0]
    9d86:	mov	r0, r7
    9d88:	blx	r3
    9d8a:	subs	r4, #1
    9d8c:	add	r5, r0
    9d8e:	bne.n	9d7e <Print::write(unsigned char const*, unsigned int)+0xe>
    9d90:	mov	r0, r5
    9d92:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    9d94:	mov	r0, r1
    9d96:	pop	{r3, r4, r5, r6, r7, pc}
    9d98:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    9d9a:	pop	{r3, r4, r5, r6, r7, pc}

00009d9c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9d9c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    9d9e:	ldr	r2, [pc, #24]	; (9db8 <Print::println()+0x1c>)
	return write(buf, 2);
    9da0:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9da2:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    9da4:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9da6:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    9da8:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9daa:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    9dae:	movs	r2, #2
    9db0:	blx	r3
}
    9db2:	add	sp, #12
    9db4:	ldr.w	pc, [sp], #4
    9db8:	.word	0x0001386c

00009dbc <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9dbc:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    9dbe:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9dc0:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    9dc2:	ldr	r3, [r3, #4]
    9dc4:	blx	r3
	return len;
}
    9dc6:	mov	r0, r4
    9dc8:	pop	{r4, pc}
    9dca:	nop

00009dcc <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    9dcc:	push	{r1, r2, r3}
    9dce:	push	{lr}
    9dd0:	sub	sp, #8
    9dd2:	add	r2, sp, #12
    9dd4:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    9dd8:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9dda:	bl	10108 <vdprintf>
#endif
}
    9dde:	add	sp, #8
    9de0:	ldr.w	lr, [sp], #4
    9de4:	add	sp, #12
    9de6:	bx	lr

00009de8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    9de8:	push	{r4, r5, r6, r7, lr}
    9dea:	mov	r7, r0
    9dec:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    9dee:	cmp	r2, #0
    9df0:	beq.n	9e5a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9df2:	cmp	r2, #1
    9df4:	it	eq
    9df6:	moveq	r2, #10
	}


	if (n == 0) {
    9df8:	cbz	r1, 9e50 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    9dfa:	movs	r4, #33	; 0x21
    9dfc:	b.n	9e00 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    9dfe:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    9e00:	udiv	r5, r1, r2
    9e04:	mls	r1, r2, r5, r1
    9e08:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9e0a:	cmp	r1, #9
    9e0c:	add.w	r1, r0, #48	; 0x30
    9e10:	it	ls
    9e12:	uxtbls	r0, r1
    9e14:	add	r1, sp, #40	; 0x28
    9e16:	it	hi
    9e18:	addhi	r0, #55	; 0x37
    9e1a:	add	r1, r4
    9e1c:	it	hi
    9e1e:	uxtbhi	r0, r0
    9e20:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    9e24:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    9e26:	mov	r1, r5
    9e28:	cmp	r5, #0
    9e2a:	bne.n	9dfe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    9e2c:	cbz	r3, 9e3c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    9e2e:	subs	r4, #1
    9e30:	uxtb	r4, r4
		buf[i] = '-';
    9e32:	add	r3, sp, #40	; 0x28
    9e34:	add	r3, r4
    9e36:	movs	r2, #45	; 0x2d
    9e38:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    9e3c:	ldr	r3, [r7, #0]
    9e3e:	add	r2, sp, #4
    9e40:	adds	r1, r2, r4
    9e42:	ldr	r3, [r3, #4]
    9e44:	mov	r0, r7
    9e46:	rsb	r2, r4, #34	; 0x22
    9e4a:	blx	r3
}
    9e4c:	add	sp, #44	; 0x2c
    9e4e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    9e50:	movs	r2, #48	; 0x30
    9e52:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    9e56:	movs	r4, #33	; 0x21
    9e58:	b.n	9e2c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    9e5a:	ldr	r3, [r0, #0]
    9e5c:	uxtb	r1, r1
    9e5e:	ldr	r3, [r3, #0]
    9e60:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    9e62:	add	sp, #44	; 0x2c
    9e64:	pop	{r4, r5, r6, r7, pc}
    9e66:	nop

00009e68 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    9e68:	bx	lr
    9e6a:	nop

00009e6c <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    9e6c:	bx	lr
    9e6e:	nop

00009e70 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9e70:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9e72:	bl	1d3c <setup>
	while (1) {
		loop();
    9e76:	bl	20c8 <loop>
		yield();
    9e7a:	bl	9c7c <yield>
    9e7e:	b.n	9e76 <main+0x6>

00009e80 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    9e80:	bx	lr
    9e82:	nop

00009e84 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    9e84:	cmp.w	r1, #896	; 0x380
    9e88:	push	{r4, r5, r6, r7}
    9e8a:	it	cs
    9e8c:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    9e90:	cpsid	i
	memory_pool = data;
    9e92:	ldr	r2, [pc, #76]	; (9ee0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    9e94:	ldr	r4, [pc, #76]	; (9ee4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)
    9e96:	ldr	r3, [pc, #80]	; (9ee8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    9e98:	str	r0, [r2, #0]
	memory_pool_first_mask = 0;
    9e9a:	movs	r2, #0
    9e9c:	strh	r2, [r4, #0]
    9e9e:	add.w	r4, r3, #112	; 0x70
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    9ea2:	str.w	r2, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
    9ea6:	cmp	r3, r4
    9ea8:	bne.n	9ea2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x1e>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9eaa:	cbz	r1, 9eda <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
    9eac:	ldr	r6, [pc, #60]	; (9eec <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
    9eae:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9eb0:	movs	r7, #1
    9eb2:	lsrs	r5, r3, #5
    9eb4:	and.w	r4, r3, #31
    9eb8:	ldr.w	r2, [r6, r5, lsl #2]
    9ebc:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9ec0:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9ec2:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9ec4:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9ec6:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9eca:	bne.n	9eb2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    9ecc:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    9ece:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    9ed0:	adds	r3, #1
    9ed2:	cmp	r3, r1
    9ed4:	add.w	r0, r0, #260	; 0x104
    9ed8:	bne.n	9ece <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4a>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    9eda:	cpsie	i

}
    9edc:	pop	{r4, r5, r6, r7}
    9ede:	bx	lr
    9ee0:	.word	0x2001ab98
    9ee4:	.word	0x2001ac12
    9ee8:	.word	0x2001ab9c
    9eec:	.word	0x2001aba0

00009ef0 <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    9ef0:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    9ef2:	cpsid	i
	index = memory_pool_first_mask;
    9ef4:	ldr	r7, [pc, #140]	; (9f84 <AudioStream::allocate()+0x94>)
	p += index;
    9ef6:	ldr	r6, [pc, #144]	; (9f88 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    9ef8:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    9efa:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    9efe:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    9f02:	cmp	r0, r3
    9f04:	bcs.n	9f2c <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    9f06:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    9f0a:	cbnz	r1, 9f34 <AudioStream::allocate()+0x44>
    9f0c:	adds	r2, r0, #4
    9f0e:	add.w	r5, r6, #115	; 0x73
    9f12:	adds	r3, r4, #1
    9f14:	subs	r5, r5, r2
    9f16:	add.w	r5, r3, r5, lsr #2
    9f1a:	b.n	9f24 <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    9f1c:	ldr.w	r1, [r2], #4
		if (avail) break;
    9f20:	cbnz	r1, 9f34 <AudioStream::allocate()+0x44>
    9f22:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    9f24:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    9f26:	mov	r4, r3
		p++;
    9f28:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    9f2a:	bne.n	9f1c <AudioStream::allocate()+0x2c>
			__enable_irq();
    9f2c:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    9f2e:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    9f30:	pop	{r4, r5, r6, r7}
    9f32:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    9f34:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    9f38:	mov.w	r2, #2147483648	; 0x80000000
    9f3c:	lsrs	r2, r3
    9f3e:	bic.w	r1, r1, r2
	*p = avail;
    9f42:	str	r1, [r0, #0]
	if (!avail) index++;
    9f44:	cbnz	r1, 9f48 <AudioStream::allocate()+0x58>
    9f46:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    9f48:	ldr	r1, [pc, #64]	; (9f8c <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    9f4a:	strh	r4, [r7, #0]
	used = memory_used + 1;
    9f4c:	ldrh	r2, [r1, #0]
    9f4e:	adds	r2, #1
	memory_used = used;
    9f50:	uxth	r4, r2
    9f52:	strh	r4, [r1, #0]
	__enable_irq();
    9f54:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9f56:	subs	r0, r0, r6
    9f58:	asrs	r0, r0, #2
    9f5a:	rsb	r0, r3, r0, lsl #5
    9f5e:	add.w	r0, r0, r0, lsl #6
    9f62:	lsls	r3, r0, #2
    9f64:	ldr	r0, [pc, #40]	; (9f90 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    9f66:	ldr	r1, [pc, #44]	; (9f94 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9f68:	ldr	r0, [r0, #0]
    9f6a:	add.w	r3, r3, #8032	; 0x1f60
    9f6e:	adds	r3, #28
	block->ref_count = 1;
    9f70:	movs	r5, #1
    9f72:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    9f74:	ldrh	r5, [r1, #0]
    9f76:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9f78:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    9f7a:	it	hi
    9f7c:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    9f7e:	pop	{r4, r5, r6, r7}
    9f80:	bx	lr
    9f82:	nop
    9f84:	.word	0x2001ac12
    9f88:	.word	0x2001aba0
    9f8c:	.word	0x2001ac14
    9f90:	.word	0x2001ab98
    9f94:	.word	0x2001ab94

00009f98 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    9f98:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    9f9a:	cpsid	i
	if (block->ref_count > 1) {
    9f9c:	ldrb	r3, [r0, #0]
    9f9e:	cmp	r3, #1
    9fa0:	bls.n	9faa <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    9fa2:	subs	r3, #1
    9fa4:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    9fa6:	cpsie	i
    9fa8:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    9faa:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    9fac:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9fae:	ldr	r4, [pc, #48]	; (9fe0 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9fb0:	ldr	r5, [pc, #48]	; (9fe4 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9fb2:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9fb6:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9fb8:	mvns	r2, r2
    9fba:	mov.w	r0, #2147483648	; 0x80000000
    9fbe:	and.w	r2, r2, #31
    9fc2:	lsr.w	r2, r0, r2
    9fc6:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    9fc8:	ldr	r2, [pc, #28]	; (9fe8 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9fca:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9fce:	cmp	r3, r6
    9fd0:	it	cc
    9fd2:	strhcc	r3, [r5, #0]
		memory_used--;
    9fd4:	ldrh	r3, [r2, #0]
    9fd6:	subs	r3, #1
    9fd8:	strh	r3, [r2, #0]
	}
	__enable_irq();
    9fda:	cpsie	i
}
    9fdc:	pop	{r4, r5, r6}
    9fde:	bx	lr
    9fe0:	.word	0x2001aba0
    9fe4:	.word	0x2001ac12
    9fe8:	.word	0x2001ac14

00009fec <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9fec:	ldr	r3, [r0, #12]
    9fee:	cbz	r3, a01e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    9ff0:	push	{r4, r5}
    9ff2:	b.n	9ff8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9ff4:	ldr	r3, [r3, #12]
    9ff6:	cbz	r3, a01c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    9ff8:	ldrb	r0, [r3, #8]
    9ffa:	cmp	r0, r2
    9ffc:	bne.n	9ff4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    9ffe:	ldr	r0, [r3, #4]
    a000:	ldrb	r4, [r3, #9]
    a002:	ldr	r0, [r0, #16]
    a004:	ldr.w	r5, [r0, r4, lsl #2]
    a008:	cmp	r5, #0
    a00a:	bne.n	9ff4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    a00c:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    a010:	ldrb	r0, [r1, #0]
    a012:	adds	r0, #1
    a014:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a016:	ldr	r3, [r3, #12]
    a018:	cmp	r3, #0
    a01a:	bne.n	9ff8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    a01c:	pop	{r4, r5}
    a01e:	bx	lr

0000a020 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a020:	ldrb	r3, [r0, #9]
    a022:	cmp	r3, r1
    a024:	bls.n	a034 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    a026:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    a028:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    a02a:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    a02e:	str.w	r2, [r3, r1, lsl #2]
	return in;
    a032:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a034:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    a036:	bx	lr

0000a038 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    a038:	ldrb	r3, [r0, #16]
    a03a:	cbnz	r3, a086 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    a03c:	ldr	r3, [r0, #4]
    a03e:	ldrb	r2, [r0, #9]
    a040:	ldrb	r3, [r3, #9]
    a042:	cmp	r2, r3
    a044:	bhi.n	a086 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    a046:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    a048:	cpsid	i
	p = src.destination_list;
    a04a:	ldr	r4, [r0, #0]
    a04c:	ldr	r3, [r4, #12]
	if (p == NULL) {
    a04e:	cbz	r3, a09c <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a050:	ldr	r2, [r3, #12]
    a052:	cbz	r2, a062 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    a054:	ldr	r1, [r3, #0]
    a056:	cmp	r4, r1
    a058:	beq.n	a088 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    a05a:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a05c:	ldr	r2, [r3, #12]
    a05e:	cmp	r2, #0
    a060:	bne.n	a054 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    a062:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    a064:	movs	r3, #0
    a066:	str	r3, [r0, #12]
	src.numConnections++;
    a068:	ldrb	r3, [r4, #10]
    a06a:	adds	r3, #1
    a06c:	strb	r3, [r4, #10]
	src.active = true;
    a06e:	ldr	r2, [r0, #0]

	dst.numConnections++;
    a070:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    a072:	movs	r3, #1
    a074:	strb	r3, [r2, #8]

	dst.numConnections++;
    a076:	ldrb	r2, [r1, #10]
    a078:	add	r2, r3
    a07a:	strb	r2, [r1, #10]
	dst.active = true;
    a07c:	ldr	r2, [r0, #4]
    a07e:	strb	r3, [r2, #8]

	isConnected = true;
    a080:	strb	r3, [r0, #16]

	__enable_irq();
    a082:	cpsie	i
}
    a084:	pop	{r4, r5}
    a086:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    a088:	ldr	r5, [r3, #4]
    a08a:	ldr	r1, [r0, #4]
    a08c:	cmp	r5, r1
    a08e:	bne.n	a05a <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    a090:	ldrh	r1, [r3, #8]
    a092:	ldrh	r3, [r0, #8]
    a094:	cmp	r1, r3
    a096:	beq.n	a082 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    a098:	mov	r3, r2
    a09a:	b.n	a05c <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    a09c:	str	r0, [r4, #12]
    a09e:	b.n	a064 <AudioConnection::connect()+0x2c>

0000a0a0 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    a0a0:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    a0a2:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    a0a4:	cmp	r3, #0
    a0a6:	beq.n	a10e <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    a0a8:	ldr	r3, [r0, #4]
    a0aa:	ldrb	r2, [r0, #9]
    a0ac:	ldrb	r3, [r3, #9]
    a0ae:	cmp	r2, r3
    a0b0:	bhi.n	a10e <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    a0b2:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    a0b4:	ldr	r2, [r0, #0]
    a0b6:	ldr	r3, [r2, #12]
	if (p == NULL) {
    a0b8:	cbz	r3, a10c <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    a0ba:	cmp	r0, r3
    a0bc:	bne.n	a0c4 <AudioConnection::disconnect()+0x24>
    a0be:	b.n	a114 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    a0c0:	cmp	r0, r3
    a0c2:	beq.n	a0ca <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    a0c4:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    a0c6:	cmp	r3, #0
    a0c8:	bne.n	a0c0 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    a0ca:	ldr	r3, [r0, #4]
    a0cc:	ldrb	r1, [r0, #9]
    a0ce:	ldr	r3, [r3, #16]
    a0d0:	mov	r4, r0
    a0d2:	ldr.w	r0, [r3, r1, lsl #2]
    a0d6:	cbz	r0, a0ec <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    a0d8:	bl	9f98 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    a0dc:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    a0de:	ldr	r3, [r4, #4]
    a0e0:	ldrb	r2, [r4, #9]
    a0e2:	ldr	r3, [r3, #16]
    a0e4:	movs	r1, #0
    a0e6:	str.w	r1, [r3, r2, lsl #2]
    a0ea:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    a0ec:	ldrb	r3, [r2, #10]
    a0ee:	subs	r3, #1
    a0f0:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    a0f2:	ldr	r3, [r4, #0]
    a0f4:	ldrb	r2, [r3, #10]
    a0f6:	cbnz	r2, a0fa <AudioConnection::disconnect()+0x5a>
		src.active = false;
    a0f8:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    a0fa:	ldr	r2, [r4, #4]
    a0fc:	ldrb	r3, [r2, #10]
    a0fe:	subs	r3, #1
    a100:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    a102:	ldr	r3, [r4, #4]
    a104:	ldrb	r2, [r3, #10]
    a106:	cbz	r2, a110 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    a108:	movs	r3, #0
    a10a:	strb	r3, [r4, #16]

	__enable_irq();
    a10c:	cpsie	i
    a10e:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    a110:	strb	r2, [r3, #8]
    a112:	b.n	a108 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    a114:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    a116:	str	r3, [r2, #12]
    a118:	b.n	a0ca <AudioConnection::disconnect()+0x2a>
    a11a:	nop

0000a11c <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a11c:	ldr	r3, [pc, #32]	; (a140 <AudioStream::update_setup()+0x24>)
    a11e:	ldrb	r2, [r3, #0]
    a120:	cbnz	r2, a13a <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a122:	ldr	r0, [pc, #32]	; (a144 <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a124:	ldr	r1, [pc, #32]	; (a148 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    a126:	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a128:	movs	r4, #208	; 0xd0
    a12a:	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a12c:	movs	r2, #1
	update_scheduled = true;
	return true;
    a12e:	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a130:	str	r2, [r1, #0]
	update_scheduled = true;
    a132:	strb	r2, [r3, #0]
	return true;
}
    a134:	ldr.w	r4, [sp], #4
    a138:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a13a:	movs	r0, #0
    a13c:	bx	lr
    a13e:	nop
    a140:	.word	0x2001ab9c
    a144:	.word	0xe000e440
    a148:	.word	0xe000e108

0000a14c <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a14c:	ldr	r1, [pc, #104]	; (a1b8 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a14e:	ldr	r2, [pc, #108]	; (a1bc <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a150:	ldr	r0, [pc, #108]	; (a1c0 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    a152:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a156:	ldr	r5, [pc, #108]	; (a1c4 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a158:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a15a:	orr.w	r3, r3, #16777216	; 0x1000000
    a15e:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a160:	ldr	r3, [r2, #0]
    a162:	orr.w	r3, r3, #1
    a166:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a168:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a16a:	cbnz	r4, a172 <software_isr+0x26>
    a16c:	b.n	a19a <software_isr+0x4e>
    a16e:	ldr	r4, [r4, #20]
    a170:	cbz	r4, a19a <software_isr+0x4e>
		if (p->active) {
    a172:	ldrb	r3, [r4, #8]
    a174:	cmp	r3, #0
    a176:	beq.n	a16e <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    a178:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    a17a:	ldr	r7, [r5, #0]
			p->update();
    a17c:	ldr	r3, [r3, #0]
    a17e:	mov	r0, r4
    a180:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a182:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a184:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a186:	subs	r3, r3, r7
    a188:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    a18a:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a18c:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    a18e:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a190:	it	hi
    a192:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a194:	ldr	r4, [r4, #20]
    a196:	cmp	r4, #0
    a198:	bne.n	a172 <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a19a:	ldr	r3, [pc, #40]	; (a1c4 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a19c:	ldr	r2, [pc, #40]	; (a1c8 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a19e:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a1a0:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    a1a2:	ldr	r4, [pc, #40]	; (a1cc <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a1a4:	subs	r3, r3, r6
    a1a6:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    a1a8:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a1aa:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    a1ac:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a1ae:	bls.n	a1b4 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    a1b0:	strh	r1, [r2, #0]
    a1b2:	pop	{r3, r4, r5, r6, r7, pc}
    a1b4:	pop	{r3, r4, r5, r6, r7, pc}
    a1b6:	nop
    a1b8:	.word	0xe000edfc
    a1bc:	.word	0xe0001000
    a1c0:	.word	0x2001ab90
    a1c4:	.word	0xe0001004
    a1c8:	.word	0x2001ac10
    a1cc:	.word	0x2001ac16

0000a1d0 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a1d0:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a1d2:	ldr	r5, [pc, #56]	; (a20c <Stream::timedPeek()+0x3c>)
    a1d4:	sub	sp, #8
    a1d6:	ldr	r3, [r5, #0]
    a1d8:	str	r3, [sp, #0]
	return ret;
    a1da:	ldr	r6, [sp, #0]
    a1dc:	mov	r4, r0
    a1de:	b.n	a1f2 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a1e0:	bl	9c7c <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a1e4:	ldr	r3, [r5, #0]
    a1e6:	str	r3, [sp, #4]
	return ret;
    a1e8:	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a1ea:	ldr	r2, [r4, #8]
    a1ec:	subs	r3, r3, r6
    a1ee:	cmp	r3, r2
    a1f0:	bcs.n	a202 <Stream::timedPeek()+0x32>
    c = peek();
    a1f2:	ldr	r3, [r4, #0]
    a1f4:	mov	r0, r4
    a1f6:	ldr	r3, [r3, #24]
    a1f8:	blx	r3
    if (c >= 0) return c;
    a1fa:	cmp	r0, #0
    a1fc:	blt.n	a1e0 <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a1fe:	add	sp, #8
    a200:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a202:	mov.w	r0, #4294967295
}
    a206:	add	sp, #8
    a208:	pop	{r4, r5, r6, pc}
    a20a:	nop
    a20c:	.word	0x2001aa80

0000a210 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a210:	push	{r4, lr}
    a212:	mov	r4, r0
    a214:	b.n	a224 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a216:	cmp	r3, #45	; 0x2d
    a218:	beq.n	a234 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a21a:	cmp	r2, #9
    a21c:	bls.n	a234 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a21e:	ldr	r3, [r4, #0]
    a220:	ldr	r3, [r3, #20]
    a222:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a224:	mov	r0, r4
    a226:	bl	a1d0 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a22a:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a22c:	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    a230:	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a232:	bge.n	a216 <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a234:	mov	r0, r3
    a236:	pop	{r4, pc}

0000a238 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a238:	push	{r3, r4, r5, r6, r7, lr}
    a23a:	mov	r5, r1
    a23c:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a23e:	bl	a210 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a242:	cmp	r0, #0
    a244:	blt.n	a28e <Stream::parseInt(char)+0x56>
    a246:	movs	r6, #0
    a248:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a24a:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a24c:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a250:	beq.n	a266 <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    a252:	cmp	r0, #45	; 0x2d
    a254:	beq.n	a286 <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    a256:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a25a:	cmp	r2, #9
      value = value * 10 + c - '0';
    a25c:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a260:	bhi.n	a266 <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    a262:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    a266:	ldr	r3, [r4, #0]
    a268:	mov	r0, r4
    a26a:	ldr	r3, [r3, #20]
    a26c:	blx	r3
    c = timedPeek();
    a26e:	mov	r0, r4
    a270:	bl	a1d0 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    a274:	sub.w	r3, r0, #48	; 0x30
    a278:	cmp	r3, #9
    a27a:	bls.n	a24a <Stream::parseInt(char)+0x12>
    a27c:	cmp	r0, r5
    a27e:	beq.n	a24a <Stream::parseInt(char)+0x12>

  if(isNegative)
    a280:	cbz	r7, a28a <Stream::parseInt(char)+0x52>
    value = -value;
    a282:	negs	r0, r6
    a284:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    a286:	movs	r7, #1
    a288:	b.n	a266 <Stream::parseInt(char)+0x2e>
    a28a:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a28c:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a28e:	movs	r0, #0
    a290:	pop	{r3, r4, r5, r6, r7, pc}
    a292:	nop

0000a294 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a294:	movs	r1, #1
    a296:	b.w	a238 <Stream::parseInt(char)>
    a29a:	nop

0000a29c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    a29c:	bx	lr
    a29e:	nop

0000a2a0 <operator delete(void*, unsigned int)>:
    a2a0:	b.w	bad8 <free>

0000a2a4 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2a4:	ldr	r2, [pc, #20]	; (a2bc <serial5_available+0x18>)
	tail = rx_buffer_tail;
    a2a6:	ldr	r3, [pc, #24]	; (a2c0 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2a8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a2aa:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2ac:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a2ae:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a2b0:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    a2b2:	it	cc
    a2b4:	addcc	r0, #64	; 0x40
    a2b6:	subs	r0, r0, r3
}
    a2b8:	bx	lr
    a2ba:	nop
    a2bc:	.word	0x2001ac1c
    a2c0:	.word	0x2001ac1d

0000a2c4 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    a2c4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    a2c6:	ldr	r3, [pc, #172]	; (a374 <uart4_status_isr+0xb0>)
    a2c8:	ldrb	r2, [r3, #4]
    a2ca:	lsls	r4, r2, #26
    a2cc:	bpl.n	a30e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a2ce:	ldr	r0, [pc, #168]	; (a378 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a2d0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a2d2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a2d4:	ldr	r1, [pc, #164]	; (a37c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a2d6:	adds	r3, #1
    a2d8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a2da:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a2dc:	it	gt
    a2de:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a2e0:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a2e2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a2e4:	beq.n	a2ee <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    a2e6:	ldr	r4, [pc, #152]	; (a380 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    a2e8:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a2ea:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a2ec:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a2ee:	ldr	r2, [pc, #148]	; (a384 <uart4_status_isr+0xc0>)
    a2f0:	ldr	r1, [r2, #0]
    a2f2:	cbz	r1, a30e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a2f4:	ldr	r2, [pc, #144]	; (a388 <uart4_status_isr+0xc4>)
    a2f6:	ldrb	r2, [r2, #0]
    a2f8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a2fa:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a2fc:	itet	cc
    a2fe:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a302:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a304:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a306:	cmp	r3, #39	; 0x27
    a308:	itt	gt
    a30a:	movgt	r3, #1
    a30c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    a30e:	ldr	r2, [pc, #100]	; (a374 <uart4_status_isr+0xb0>)
    a310:	ldrb	r3, [r2, #3]
    a312:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a314:	lsls	r0, r3, #24
    a316:	bmi.n	a33c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    a318:	lsls	r2, r3, #25
    a31a:	bpl.n	a338 <uart4_status_isr+0x74>
    a31c:	ldr	r3, [pc, #84]	; (a374 <uart4_status_isr+0xb0>)
    a31e:	ldrb	r3, [r3, #4]
    a320:	lsls	r3, r3, #25
    a322:	bpl.n	a338 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a324:	ldr	r3, [pc, #100]	; (a38c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a326:	ldr	r1, [pc, #104]	; (a390 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a328:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a32a:	movs	r2, #0
    a32c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a32e:	cbz	r3, a332 <uart4_status_isr+0x6e>
    a330:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    a332:	ldr	r3, [pc, #64]	; (a374 <uart4_status_isr+0xb0>)
    a334:	movs	r2, #44	; 0x2c
    a336:	strb	r2, [r3, #3]
	}
}
    a338:	pop	{r4, r5}
    a33a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a33c:	ldrb	r1, [r2, #4]
    a33e:	lsls	r1, r1, #24
    a340:	bpl.n	a318 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    a342:	ldr	r1, [pc, #80]	; (a394 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a344:	ldr	r0, [pc, #64]	; (a388 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a346:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a348:	ldrb	r1, [r0, #0]
    a34a:	uxtb	r1, r1
		if (head == tail) {
    a34c:	cmp	r4, r1
    a34e:	beq.n	a36c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    a350:	adds	r2, r1, #1
    a352:	cmp	r2, #39	; 0x27
    a354:	itt	hi
    a356:	movhi	r1, #0
    a358:	movhi	r2, r1
			n = tx_buffer[tail];
    a35a:	ldr	r5, [pc, #60]	; (a398 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a35c:	ldr	r4, [pc, #20]	; (a374 <uart4_status_isr+0xb0>)
    a35e:	it	ls
    a360:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a362:	ldrb	r2, [r5, r2]
    a364:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a366:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a368:	strb	r1, [r0, #0]
    a36a:	b.n	a318 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    a36c:	movs	r1, #108	; 0x6c
    a36e:	strb	r1, [r2, #3]
    a370:	b.n	a318 <uart4_status_isr+0x54>
    a372:	nop
    a374:	.word	0x400ea000
    a378:	.word	0x2001ac1c
    a37c:	.word	0x2001ac1d
    a380:	.word	0x2001ac48
    a384:	.word	0x2001ac18
    a388:	.word	0x2001ac89
    a38c:	.word	0x2001ac8c
    a390:	.word	0x2001ac88
    a394:	.word	0x2001ac90
    a398:	.word	0x2001ac20

0000a39c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a39c:	ldr	r2, [pc, #20]	; (a3b4 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    a39e:	ldr	r3, [pc, #24]	; (a3b8 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a3a0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a3a2:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a3a4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a3a6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a3a8:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    a3aa:	it	cc
    a3ac:	addcc	r0, #64	; 0x40
    a3ae:	subs	r0, r0, r3
}
    a3b0:	bx	lr
    a3b2:	nop
    a3b4:	.word	0x2001ad04
    a3b8:	.word	0x2001ac99

0000a3bc <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    a3bc:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a3be:	ldr	r3, [pc, #224]	; (a4a0 <uart1_status_isr+0xe4>)
    a3c0:	ldrb	r2, [r3, #4]
    a3c2:	tst.w	r2, #48	; 0x30
    a3c6:	beq.n	a422 <uart1_status_isr+0x66>
		__disable_irq();
    a3c8:	cpsid	i
		avail = UART1_RCFIFO;
    a3ca:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a3cc:	and.w	r2, r1, #255	; 0xff
    a3d0:	cmp	r1, #0
    a3d2:	beq.n	a450 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a3d4:	cpsie	i
			head = rx_buffer_head;
    a3d6:	ldr	r7, [pc, #204]	; (a4a4 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a3d8:	ldr	r1, [pc, #204]	; (a4a8 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a3da:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a3dc:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a3de:	ldr	r6, [pc, #204]	; (a4ac <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a3e0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a3e2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    a3e4:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    a3e6:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a3e8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a3ea:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a3ec:	it	cs
    a3ee:	movcs	r3, #0
				if (newhead != tail) {
    a3f0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a3f2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a3f6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a3f8:	itt	ne
    a3fa:	strbne	r1, [r6, r3]
    a3fc:	movne	r0, r3
				}
			} while (--avail > 0);
    a3fe:	ands.w	r2, r2, #255	; 0xff
    a402:	bne.n	a3e6 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a404:	ldr	r3, [pc, #168]	; (a4b0 <uart1_status_isr+0xf4>)
    a406:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a408:	uxtb	r2, r0
    a40a:	strb	r2, [r7, #0]
			if (rts_pin) {
    a40c:	cbz	r3, a422 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a40e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a410:	itet	cc
    a412:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a416:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a418:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a41a:	cmp	r0, #39	; 0x27
    a41c:	itt	gt
    a41e:	movgt	r2, #1
    a420:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    a422:	ldr	r1, [pc, #124]	; (a4a0 <uart1_status_isr+0xe4>)
    a424:	ldrb	r2, [r1, #3]
    a426:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a428:	lsls	r5, r2, #24
    a42a:	bmi.n	a45a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    a42c:	lsls	r2, r2, #25
    a42e:	bpl.n	a44c <uart1_status_isr+0x90>
    a430:	ldr	r3, [pc, #108]	; (a4a0 <uart1_status_isr+0xe4>)
    a432:	ldrb	r3, [r3, #4]
    a434:	lsls	r3, r3, #25
    a436:	bpl.n	a44c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a438:	ldr	r3, [pc, #120]	; (a4b4 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a43a:	ldr	r1, [pc, #124]	; (a4b8 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a43c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a43e:	movs	r2, #0
    a440:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a442:	cbz	r3, a446 <uart1_status_isr+0x8a>
    a444:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    a446:	ldr	r3, [pc, #88]	; (a4a0 <uart1_status_isr+0xe4>)
    a448:	movs	r2, #60	; 0x3c
    a44a:	strb	r2, [r3, #3]
	}
}
    a44c:	pop	{r4, r5, r6, r7}
    a44e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a450:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    a452:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a454:	strb	r2, [r3, #17]
			__enable_irq();
    a456:	cpsie	i
    a458:	b.n	a422 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a45a:	ldrb	r3, [r1, #4]
    a45c:	lsls	r4, r3, #24
    a45e:	bpl.n	a42c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    a460:	ldr	r3, [pc, #88]	; (a4bc <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    a462:	ldr	r6, [pc, #92]	; (a4c0 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a464:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a466:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a468:	uxtb	r4, r4
		tail = tx_buffer_tail;
    a46a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    a46c:	cmp	r4, r3
    a46e:	beq.n	a48e <uart1_status_isr+0xd2>
    a470:	ldr	r5, [pc, #80]	; (a4c4 <uart1_status_isr+0x108>)
    a472:	b.n	a478 <uart1_status_isr+0xbc>
    a474:	cmp	r3, r4
    a476:	beq.n	a48e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    a478:	adds	r3, #1
    a47a:	cmp	r3, #40	; 0x28
    a47c:	it	cs
    a47e:	movcs	r3, #0
			avail = UART1_S1;
    a480:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a482:	ldrb	r0, [r5, r3]
    a484:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    a486:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    a488:	ldrb	r0, [r1, #20]
    a48a:	cmp	r0, #7
    a48c:	bls.n	a474 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    a48e:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a490:	ldr	r1, [pc, #12]	; (a4a0 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    a492:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a494:	ldrb	r3, [r1, #4]
    a496:	lsls	r0, r3, #24
    a498:	itt	mi
    a49a:	movmi	r3, #124	; 0x7c
    a49c:	strbmi	r3, [r1, #3]
    a49e:	b.n	a42c <uart1_status_isr+0x70>
    a4a0:	.word	0x4006b000
    a4a4:	.word	0x2001ad04
    a4a8:	.word	0x2001ac99
    a4ac:	.word	0x2001acc4
    a4b0:	.word	0x2001ac94
    a4b4:	.word	0x2001ad08
    a4b8:	.word	0x2001ac98
    a4bc:	.word	0x2001ad0c
    a4c0:	.word	0x2001ad05
    a4c4:	.word	0x2001ac9c

0000a4c8 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a4c8:	ldr	r2, [pc, #20]	; (a4e0 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    a4ca:	ldr	r3, [pc, #24]	; (a4e4 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a4cc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a4ce:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a4d0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a4d2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a4d4:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    a4d6:	it	cc
    a4d8:	addcc	r0, #64	; 0x40
    a4da:	subs	r0, r0, r3
}
    a4dc:	bx	lr
    a4de:	nop
    a4e0:	.word	0x2001ad14
    a4e4:	.word	0x2001ad15

0000a4e8 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    a4e8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    a4ea:	ldr	r3, [pc, #172]	; (a598 <uart3_status_isr+0xb0>)
    a4ec:	ldrb	r2, [r3, #4]
    a4ee:	lsls	r4, r2, #26
    a4f0:	bpl.n	a532 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a4f2:	ldr	r0, [pc, #168]	; (a59c <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    a4f4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a4f6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a4f8:	ldr	r1, [pc, #164]	; (a5a0 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a4fa:	adds	r3, #1
    a4fc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a4fe:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a500:	it	gt
    a502:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a504:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    a506:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a508:	beq.n	a512 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    a50a:	ldr	r4, [pc, #152]	; (a5a4 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    a50c:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a50e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a510:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a512:	ldr	r2, [pc, #148]	; (a5a8 <uart3_status_isr+0xc0>)
    a514:	ldr	r1, [r2, #0]
    a516:	cbz	r1, a532 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a518:	ldr	r2, [pc, #144]	; (a5ac <uart3_status_isr+0xc4>)
    a51a:	ldrb	r2, [r2, #0]
    a51c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a51e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    a520:	itet	cc
    a522:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a526:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    a528:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a52a:	cmp	r3, #39	; 0x27
    a52c:	itt	gt
    a52e:	movgt	r3, #1
    a530:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    a532:	ldr	r2, [pc, #100]	; (a598 <uart3_status_isr+0xb0>)
    a534:	ldrb	r3, [r2, #3]
    a536:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    a538:	lsls	r0, r3, #24
    a53a:	bmi.n	a560 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    a53c:	lsls	r2, r3, #25
    a53e:	bpl.n	a55c <uart3_status_isr+0x74>
    a540:	ldr	r3, [pc, #84]	; (a598 <uart3_status_isr+0xb0>)
    a542:	ldrb	r3, [r3, #4]
    a544:	lsls	r3, r3, #25
    a546:	bpl.n	a55c <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a548:	ldr	r3, [pc, #100]	; (a5b0 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    a54a:	ldr	r1, [pc, #104]	; (a5b4 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a54c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    a54e:	movs	r2, #0
    a550:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a552:	cbz	r3, a556 <uart3_status_isr+0x6e>
    a554:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    a556:	ldr	r3, [pc, #64]	; (a598 <uart3_status_isr+0xb0>)
    a558:	movs	r2, #44	; 0x2c
    a55a:	strb	r2, [r3, #3]
	}
}
    a55c:	pop	{r4, r5}
    a55e:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    a560:	ldrb	r1, [r2, #4]
    a562:	lsls	r1, r1, #24
    a564:	bpl.n	a53c <uart3_status_isr+0x54>
		head = tx_buffer_head;
    a566:	ldr	r1, [pc, #80]	; (a5b8 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a568:	ldr	r0, [pc, #64]	; (a5ac <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a56a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a56c:	ldrb	r1, [r0, #0]
    a56e:	uxtb	r1, r1
		if (head == tail) {
    a570:	cmp	r4, r1
    a572:	beq.n	a590 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    a574:	adds	r2, r1, #1
    a576:	cmp	r2, #39	; 0x27
    a578:	itt	hi
    a57a:	movhi	r1, #0
    a57c:	movhi	r2, r1
			n = tx_buffer[tail];
    a57e:	ldr	r5, [pc, #60]	; (a5bc <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    a580:	ldr	r4, [pc, #20]	; (a598 <uart3_status_isr+0xb0>)
    a582:	it	ls
    a584:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a586:	ldrb	r2, [r5, r2]
    a588:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    a58a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a58c:	strb	r1, [r0, #0]
    a58e:	b.n	a53c <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    a590:	movs	r1, #108	; 0x6c
    a592:	strb	r1, [r2, #3]
    a594:	b.n	a53c <uart3_status_isr+0x54>
    a596:	nop
    a598:	.word	0x4006d000
    a59c:	.word	0x2001ad14
    a5a0:	.word	0x2001ad15
    a5a4:	.word	0x2001ad40
    a5a8:	.word	0x2001ad10
    a5ac:	.word	0x2001ad81
    a5b0:	.word	0x2001ad84
    a5b4:	.word	0x2001ad80
    a5b8:	.word	0x2001ad88
    a5bc:	.word	0x2001ad18

0000a5c0 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a5c0:	ldr	r2, [pc, #20]	; (a5d8 <serial_available+0x18>)
	tail = rx_buffer_tail;
    a5c2:	ldr	r3, [pc, #24]	; (a5dc <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a5c4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a5c6:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a5c8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a5ca:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a5cc:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    a5ce:	it	cc
    a5d0:	addcc	r0, #64	; 0x40
    a5d2:	subs	r0, r0, r3
}
    a5d4:	bx	lr
    a5d6:	nop
    a5d8:	.word	0x2001ad90
    a5dc:	.word	0x2001ad91

0000a5e0 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    a5e0:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a5e2:	ldr	r3, [pc, #224]	; (a6c4 <uart0_status_isr+0xe4>)
    a5e4:	ldrb	r2, [r3, #4]
    a5e6:	tst.w	r2, #48	; 0x30
    a5ea:	beq.n	a646 <uart0_status_isr+0x66>
		__disable_irq();
    a5ec:	cpsid	i
		avail = UART0_RCFIFO;
    a5ee:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a5f0:	and.w	r2, r1, #255	; 0xff
    a5f4:	cmp	r1, #0
    a5f6:	beq.n	a674 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a5f8:	cpsie	i
			head = rx_buffer_head;
    a5fa:	ldr	r7, [pc, #204]	; (a6c8 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a5fc:	ldr	r1, [pc, #204]	; (a6cc <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a5fe:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a600:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a602:	ldr	r6, [pc, #204]	; (a6d0 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a604:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a606:	uxtb	r0, r0
			tail = rx_buffer_tail;
    a608:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    a60a:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    a60c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a60e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    a610:	it	cs
    a612:	movcs	r3, #0
				if (newhead != tail) {
    a614:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a616:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a61a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a61c:	itt	ne
    a61e:	strbne	r1, [r6, r3]
    a620:	movne	r0, r3
				}
			} while (--avail > 0);
    a622:	ands.w	r2, r2, #255	; 0xff
    a626:	bne.n	a60a <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a628:	ldr	r3, [pc, #168]	; (a6d4 <uart0_status_isr+0xf4>)
    a62a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a62c:	uxtb	r2, r0
    a62e:	strb	r2, [r7, #0]
			if (rts_pin) {
    a630:	cbz	r3, a646 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a632:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    a634:	itet	cc
    a636:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a63a:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    a63c:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a63e:	cmp	r0, #39	; 0x27
    a640:	itt	gt
    a642:	movgt	r2, #1
    a644:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    a646:	ldr	r1, [pc, #124]	; (a6c4 <uart0_status_isr+0xe4>)
    a648:	ldrb	r2, [r1, #3]
    a64a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    a64c:	lsls	r5, r2, #24
    a64e:	bmi.n	a67e <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    a650:	lsls	r2, r2, #25
    a652:	bpl.n	a670 <uart0_status_isr+0x90>
    a654:	ldr	r3, [pc, #108]	; (a6c4 <uart0_status_isr+0xe4>)
    a656:	ldrb	r3, [r3, #4]
    a658:	lsls	r3, r3, #25
    a65a:	bpl.n	a670 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a65c:	ldr	r3, [pc, #120]	; (a6d8 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    a65e:	ldr	r1, [pc, #124]	; (a6dc <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a660:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    a662:	movs	r2, #0
    a664:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a666:	cbz	r3, a66a <uart0_status_isr+0x8a>
    a668:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    a66a:	ldr	r3, [pc, #88]	; (a6c4 <uart0_status_isr+0xe4>)
    a66c:	movs	r2, #60	; 0x3c
    a66e:	strb	r2, [r3, #3]
	}
}
    a670:	pop	{r4, r5, r6, r7}
    a672:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    a674:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    a676:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    a678:	strb	r2, [r3, #17]
			__enable_irq();
    a67a:	cpsie	i
    a67c:	b.n	a646 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    a67e:	ldrb	r3, [r1, #4]
    a680:	lsls	r4, r3, #24
    a682:	bpl.n	a650 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    a684:	ldr	r3, [pc, #88]	; (a6e0 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    a686:	ldr	r6, [pc, #92]	; (a6e4 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a688:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a68a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a68c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    a68e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    a690:	cmp	r4, r3
    a692:	beq.n	a6b2 <uart0_status_isr+0xd2>
    a694:	ldr	r5, [pc, #80]	; (a6e8 <uart0_status_isr+0x108>)
    a696:	b.n	a69c <uart0_status_isr+0xbc>
    a698:	cmp	r3, r4
    a69a:	beq.n	a6b2 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    a69c:	adds	r3, #1
    a69e:	cmp	r3, #64	; 0x40
    a6a0:	it	cs
    a6a2:	movcs	r3, #0
			avail = UART0_S1;
    a6a4:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a6a6:	ldrb	r0, [r5, r3]
    a6a8:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    a6aa:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    a6ac:	ldrb	r0, [r1, #20]
    a6ae:	cmp	r0, #7
    a6b0:	bls.n	a698 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    a6b2:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    a6b4:	ldr	r1, [pc, #12]	; (a6c4 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    a6b6:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    a6b8:	ldrb	r3, [r1, #4]
    a6ba:	lsls	r0, r3, #24
    a6bc:	itt	mi
    a6be:	movmi	r3, #124	; 0x7c
    a6c0:	strbmi	r3, [r1, #3]
    a6c2:	b.n	a650 <uart0_status_isr+0x70>
    a6c4:	.word	0x4006a000
    a6c8:	.word	0x2001ad90
    a6cc:	.word	0x2001ad91
    a6d0:	.word	0x2001add4
    a6d4:	.word	0x2001ad8c
    a6d8:	.word	0x2001ae18
    a6dc:	.word	0x2001ae14
    a6e0:	.word	0x2001ae1c
    a6e4:	.word	0x2001ae15
    a6e8:	.word	0x2001ad94

0000a6ec <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a6ec:	ldr	r2, [pc, #20]	; (a704 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    a6ee:	ldr	r3, [pc, #24]	; (a708 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a6f0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a6f2:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a6f4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a6f6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a6f8:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    a6fa:	it	cc
    a6fc:	addcc	r0, #64	; 0x40
    a6fe:	subs	r0, r0, r3
}
    a700:	bx	lr
    a702:	nop
    a704:	.word	0x2001ae24
    a708:	.word	0x2001ae25

0000a70c <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    a70c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    a70e:	ldr	r3, [pc, #176]	; (a7c0 <lpuart0_status_isr+0xb4>)
    a710:	ldr	r2, [r3, #4]
    a712:	lsls	r4, r2, #10
    a714:	bpl.n	a756 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a716:	ldr	r0, [pc, #172]	; (a7c4 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    a718:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    a71a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a71c:	ldr	r1, [pc, #168]	; (a7c8 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a71e:	adds	r3, #1
    a720:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a722:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a724:	it	gt
    a726:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a728:	cmp	r3, r1
    a72a:	beq.n	a736 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    a72c:	ldr	r4, [pc, #156]	; (a7cc <lpuart0_status_isr+0xc0>)
    a72e:	uxtb	r2, r2
			rx_buffer_head = head;
    a730:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a732:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a734:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a736:	ldr	r2, [pc, #152]	; (a7d0 <lpuart0_status_isr+0xc4>)
    a738:	ldr	r1, [r2, #0]
    a73a:	cbz	r1, a756 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a73c:	ldr	r2, [pc, #148]	; (a7d4 <lpuart0_status_isr+0xc8>)
    a73e:	ldrb	r2, [r2, #0]
    a740:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a742:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    a744:	itet	cc
    a746:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a74a:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    a74c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a74e:	cmp	r3, #39	; 0x27
    a750:	itt	gt
    a752:	movgt	r3, #1
    a754:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    a756:	ldr	r2, [pc, #104]	; (a7c0 <lpuart0_status_isr+0xb4>)
    a758:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    a75a:	lsls	r0, r3, #8
    a75c:	bpl.n	a764 <lpuart0_status_isr+0x58>
    a75e:	ldr	r2, [r2, #4]
    a760:	lsls	r1, r2, #8
    a762:	bmi.n	a788 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    a764:	lsls	r2, r3, #9
    a766:	bpl.n	a784 <lpuart0_status_isr+0x78>
    a768:	ldr	r3, [pc, #84]	; (a7c0 <lpuart0_status_isr+0xb4>)
    a76a:	ldr	r3, [r3, #4]
    a76c:	lsls	r3, r3, #9
    a76e:	bpl.n	a784 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a770:	ldr	r3, [pc, #100]	; (a7d8 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    a772:	ldr	r1, [pc, #104]	; (a7dc <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    a774:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    a776:	movs	r2, #0
    a778:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a77a:	cbz	r3, a77e <lpuart0_status_isr+0x72>
    a77c:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    a77e:	ldr	r3, [pc, #96]	; (a7e0 <lpuart0_status_isr+0xd4>)
    a780:	movs	r2, #0
    a782:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    a784:	pop	{r4, r5}
    a786:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    a788:	ldr	r2, [pc, #88]	; (a7e4 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    a78a:	ldr	r1, [pc, #72]	; (a7d4 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    a78c:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    a78e:	ldrb	r2, [r1, #0]
    a790:	uxtb	r2, r2
		if (head == tail) {
    a792:	cmp	r0, r2
    a794:	beq.n	a7b2 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    a796:	adds	r2, #1
    a798:	cmp	r2, #39	; 0x27
    a79a:	itt	hi
    a79c:	movhi	r0, #0
    a79e:	movhi	r2, r0
			n = tx_buffer[tail];
    a7a0:	ldr	r5, [pc, #68]	; (a7e8 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    a7a2:	ldr	r4, [pc, #28]	; (a7c0 <lpuart0_status_isr+0xb4>)
    a7a4:	it	ls
    a7a6:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a7a8:	ldrb	r2, [r5, r2]
    a7aa:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    a7ac:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    a7ae:	strb	r0, [r1, #0]
    a7b0:	b.n	a764 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a7b2:	ldr	r0, [pc, #56]	; (a7ec <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a7b4:	ldr	r2, [pc, #40]	; (a7e0 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a7b6:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a7b8:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a7ba:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a7bc:	str	r1, [r2, #0]
    a7be:	b.n	a764 <lpuart0_status_isr+0x58>
    a7c0:	.word	0x400c4000
    a7c4:	.word	0x2001ae24
    a7c8:	.word	0x2001ae25
    a7cc:	.word	0x2001ae50
    a7d0:	.word	0x2001ae20
    a7d4:	.word	0x2001ae91
    a7d8:	.word	0x2001ae94
    a7dc:	.word	0x2001ae90
    a7e0:	.word	0x43880158
    a7e4:	.word	0x2001ae98
    a7e8:	.word	0x2001ae28
    a7ec:	.word	0x4388015c

0000a7f0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    a7f0:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a7f2:	ldr	r2, [pc, #96]	; (a854 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a7f4:	ldr	r3, [pc, #96]	; (a858 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a7f6:	ldr	r1, [pc, #100]	; (a85c <usb_init_serialnumber+0x6c>)
    a7f8:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a7fa:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a7fc:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a7fe:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a800:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a802:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a804:	ldrb	r3, [r2, #0]
    a806:	lsls	r3, r3, #24
    a808:	bpl.n	a804 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a80a:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a80c:	ldr	r3, [pc, #80]	; (a860 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a80e:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a810:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    a812:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a814:	ldr	r3, [pc, #76]	; (a864 <usb_init_serialnumber+0x74>)
    a816:	ldr	r4, [pc, #80]	; (a868 <usb_init_serialnumber+0x78>)
    a818:	cmp	r0, r3
    a81a:	it	ls
    a81c:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    a820:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a822:	it	ls
    a824:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    a826:	movs	r2, #10
    a828:	bl	a86c <ultoa>
    a82c:	add	r1, sp, #4
    a82e:	mov	r0, r4
	for (i=0; i<10; i++) {
    a830:	movs	r3, #0
		char c = buf[i];
    a832:	ldrb.w	r2, [r1], #1
    a836:	adds	r3, #1
		if (!c) break;
    a838:	cbz	r2, a84a <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a83a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a83c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a840:	bne.n	a832 <usb_init_serialnumber+0x42>
    a842:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a844:	strb	r3, [r4, #0]
}
    a846:	add	sp, #16
    a848:	pop	{r4, pc}
    a84a:	lsls	r3, r3, #1
    a84c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a84e:	strb	r3, [r4, #0]
}
    a850:	add	sp, #16
    a852:	pop	{r4, pc}
    a854:	.word	0x40020004
    a858:	.word	0x40020000
    a85c:	.word	0x41070000
    a860:	.word	0x4002000c
    a864:	.word	0x0098967f
    a868:	.word	0x200147bc

0000a86c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a86c:	push	{r4, r5, r6, r7}
    a86e:	subs	r5, r1, #1
    a870:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    a872:	movs	r4, #0
    a874:	b.n	a878 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a876:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a878:	udiv	r3, r0, r2
    a87c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a880:	cmp	r0, #9
    a882:	add.w	r7, r0, #48	; 0x30
    a886:	itet	hi
    a888:	addhi	r0, #55	; 0x37
    a88a:	uxtbls	r0, r7
    a88c:	uxtbhi	r0, r0
    a88e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    a892:	mov	r0, r3
    a894:	cmp	r3, #0
    a896:	bne.n	a876 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a898:	adds	r2, r1, r4
    a89a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a89c:	cbz	r4, a8b2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    a89e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    a8a0:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    a8a4:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a8a6:	adds	r3, #1
    a8a8:	subs	r0, r4, r3
    a8aa:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a8ac:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a8b0:	blt.n	a89e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a8b2:	mov	r0, r1
    a8b4:	pop	{r4, r5, r6, r7}
    a8b6:	bx	lr

0000a8b8 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a8b8:	ldr	r2, [pc, #20]	; (a8d0 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    a8ba:	ldr	r3, [pc, #24]	; (a8d4 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a8bc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a8be:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a8c0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a8c2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a8c4:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    a8c6:	it	cc
    a8c8:	addcc	r0, #64	; 0x40
    a8ca:	subs	r0, r0, r3
}
    a8cc:	bx	lr
    a8ce:	nop
    a8d0:	.word	0x2001aea0
    a8d4:	.word	0x2001aea1

0000a8d8 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    a8d8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    a8da:	ldr	r3, [pc, #172]	; (a988 <uart2_status_isr+0xb0>)
    a8dc:	ldrb	r2, [r3, #4]
    a8de:	lsls	r4, r2, #26
    a8e0:	bpl.n	a922 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a8e2:	ldr	r0, [pc, #168]	; (a98c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    a8e4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a8e6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a8e8:	ldr	r1, [pc, #164]	; (a990 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a8ea:	adds	r3, #1
    a8ec:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a8ee:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a8f0:	it	gt
    a8f2:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a8f4:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    a8f6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a8f8:	beq.n	a902 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    a8fa:	ldr	r4, [pc, #152]	; (a994 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    a8fc:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a8fe:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a900:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a902:	ldr	r2, [pc, #148]	; (a998 <uart2_status_isr+0xc0>)
    a904:	ldr	r1, [r2, #0]
    a906:	cbz	r1, a922 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a908:	ldr	r2, [pc, #144]	; (a99c <uart2_status_isr+0xc4>)
    a90a:	ldrb	r2, [r2, #0]
    a90c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a90e:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    a910:	itet	cc
    a912:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a916:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    a918:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a91a:	cmp	r3, #39	; 0x27
    a91c:	itt	gt
    a91e:	movgt	r3, #1
    a920:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    a922:	ldr	r2, [pc, #100]	; (a988 <uart2_status_isr+0xb0>)
    a924:	ldrb	r3, [r2, #3]
    a926:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a928:	lsls	r0, r3, #24
    a92a:	bmi.n	a950 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    a92c:	lsls	r2, r3, #25
    a92e:	bpl.n	a94c <uart2_status_isr+0x74>
    a930:	ldr	r3, [pc, #84]	; (a988 <uart2_status_isr+0xb0>)
    a932:	ldrb	r3, [r3, #4]
    a934:	lsls	r3, r3, #25
    a936:	bpl.n	a94c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a938:	ldr	r3, [pc, #100]	; (a9a0 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    a93a:	ldr	r1, [pc, #104]	; (a9a4 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a93c:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    a93e:	movs	r2, #0
    a940:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a942:	cbz	r3, a946 <uart2_status_isr+0x6e>
    a944:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    a946:	ldr	r3, [pc, #64]	; (a988 <uart2_status_isr+0xb0>)
    a948:	movs	r2, #44	; 0x2c
    a94a:	strb	r2, [r3, #3]
	}
}
    a94c:	pop	{r4, r5}
    a94e:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a950:	ldrb	r1, [r2, #4]
    a952:	lsls	r1, r1, #24
    a954:	bpl.n	a92c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    a956:	ldr	r1, [pc, #80]	; (a9a8 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a958:	ldr	r0, [pc, #64]	; (a99c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a95a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a95c:	ldrb	r1, [r0, #0]
    a95e:	uxtb	r1, r1
		if (head == tail) {
    a960:	cmp	r4, r1
    a962:	beq.n	a980 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    a964:	adds	r2, r1, #1
    a966:	cmp	r2, #39	; 0x27
    a968:	itt	hi
    a96a:	movhi	r1, #0
    a96c:	movhi	r2, r1
			n = tx_buffer[tail];
    a96e:	ldr	r5, [pc, #60]	; (a9ac <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    a970:	ldr	r4, [pc, #20]	; (a988 <uart2_status_isr+0xb0>)
    a972:	it	ls
    a974:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a976:	ldrb	r2, [r5, r2]
    a978:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    a97a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a97c:	strb	r1, [r0, #0]
    a97e:	b.n	a92c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    a980:	movs	r1, #108	; 0x6c
    a982:	strb	r1, [r2, #3]
    a984:	b.n	a92c <uart2_status_isr+0x54>
    a986:	nop
    a988:	.word	0x4006c000
    a98c:	.word	0x2001aea0
    a990:	.word	0x2001aea1
    a994:	.word	0x2001aecc
    a998:	.word	0x2001ae9c
    a99c:	.word	0x2001af0d
    a9a0:	.word	0x2001af10
    a9a4:	.word	0x2001af0c
    a9a8:	.word	0x2001af14
    a9ac:	.word	0x2001aea4

0000a9b0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    a9b0:	bx	lr
    a9b2:	nop

0000a9b4 <nanf>:
    a9b4:	vldr	s0, [pc, #4]	; a9bc <nanf+0x8>
    a9b8:	bx	lr
    a9ba:	nop
    a9bc:	.word	0x7fc00000

0000a9c0 <__aeabi_atexit>:
    a9c0:	mov	r3, r1
    a9c2:	mov	r1, r0
    a9c4:	mov	r0, r3
    a9c6:	b.w	ba10 <__cxa_atexit>
    a9ca:	nop

0000a9cc <__aeabi_drsub>:
    a9cc:	eor.w	r1, r1, #2147483648	; 0x80000000
    a9d0:	b.n	a9d8 <__adddf3>
    a9d2:	nop

0000a9d4 <__aeabi_dsub>:
    a9d4:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a9d8 <__adddf3>:
    a9d8:	push	{r4, r5, lr}
    a9da:	mov.w	r4, r1, lsl #1
    a9de:	mov.w	r5, r3, lsl #1
    a9e2:	teq	r4, r5
    a9e6:	it	eq
    a9e8:	teqeq	r0, r2
    a9ec:	itttt	ne
    a9ee:	orrsne.w	ip, r4, r0
    a9f2:	orrsne.w	ip, r5, r2
    a9f6:	mvnsne.w	ip, r4, asr #21
    a9fa:	mvnsne.w	ip, r5, asr #21
    a9fe:	beq.w	abc6 <__adddf3+0x1ee>
    aa02:	mov.w	r4, r4, lsr #21
    aa06:	rsbs	r5, r4, r5, lsr #21
    aa0a:	it	lt
    aa0c:	neglt	r5, r5
    aa0e:	ble.n	aa2a <__adddf3+0x52>
    aa10:	add	r4, r5
    aa12:	eor.w	r2, r0, r2
    aa16:	eor.w	r3, r1, r3
    aa1a:	eor.w	r0, r2, r0
    aa1e:	eor.w	r1, r3, r1
    aa22:	eor.w	r2, r0, r2
    aa26:	eor.w	r3, r1, r3
    aa2a:	cmp	r5, #54	; 0x36
    aa2c:	it	hi
    aa2e:	pophi	{r4, r5, pc}
    aa30:	tst.w	r1, #2147483648	; 0x80000000
    aa34:	mov.w	r1, r1, lsl #12
    aa38:	mov.w	ip, #1048576	; 0x100000
    aa3c:	orr.w	r1, ip, r1, lsr #12
    aa40:	beq.n	aa48 <__adddf3+0x70>
    aa42:	negs	r0, r0
    aa44:	sbc.w	r1, r1, r1, lsl #1
    aa48:	tst.w	r3, #2147483648	; 0x80000000
    aa4c:	mov.w	r3, r3, lsl #12
    aa50:	orr.w	r3, ip, r3, lsr #12
    aa54:	beq.n	aa5c <__adddf3+0x84>
    aa56:	negs	r2, r2
    aa58:	sbc.w	r3, r3, r3, lsl #1
    aa5c:	teq	r4, r5
    aa60:	beq.w	abb2 <__adddf3+0x1da>
    aa64:	sub.w	r4, r4, #1
    aa68:	rsbs	lr, r5, #32
    aa6c:	blt.n	aa8a <__adddf3+0xb2>
    aa6e:	lsl.w	ip, r2, lr
    aa72:	lsr.w	r2, r2, r5
    aa76:	adds	r0, r0, r2
    aa78:	adc.w	r1, r1, #0
    aa7c:	lsl.w	r2, r3, lr
    aa80:	adds	r0, r0, r2
    aa82:	asr.w	r3, r3, r5
    aa86:	adcs	r1, r3
    aa88:	b.n	aaa8 <__adddf3+0xd0>
    aa8a:	sub.w	r5, r5, #32
    aa8e:	add.w	lr, lr, #32
    aa92:	cmp	r2, #1
    aa94:	lsl.w	ip, r3, lr
    aa98:	it	cs
    aa9a:	orrcs.w	ip, ip, #2
    aa9e:	asr.w	r3, r3, r5
    aaa2:	adds	r0, r0, r3
    aaa4:	adcs.w	r1, r1, r3, asr #31
    aaa8:	and.w	r5, r1, #2147483648	; 0x80000000
    aaac:	bpl.n	aabe <__adddf3+0xe6>
    aaae:	mov.w	lr, #0
    aab2:	rsbs	ip, ip, #0
    aab6:	sbcs.w	r0, lr, r0
    aaba:	sbc.w	r1, lr, r1
    aabe:	cmp.w	r1, #1048576	; 0x100000
    aac2:	bcc.n	aafc <__adddf3+0x124>
    aac4:	cmp.w	r1, #2097152	; 0x200000
    aac8:	bcc.n	aae4 <__adddf3+0x10c>
    aaca:	lsrs	r1, r1, #1
    aacc:	movs.w	r0, r0, rrx
    aad0:	mov.w	ip, ip, rrx
    aad4:	add.w	r4, r4, #1
    aad8:	mov.w	r2, r4, lsl #21
    aadc:	cmn.w	r2, #4194304	; 0x400000
    aae0:	bcs.w	ac18 <__adddf3+0x240>
    aae4:	cmp.w	ip, #2147483648	; 0x80000000
    aae8:	it	eq
    aaea:	movseq.w	ip, r0, lsr #1
    aaee:	adcs.w	r0, r0, #0
    aaf2:	adc.w	r1, r1, r4, lsl #20
    aaf6:	orr.w	r1, r1, r5
    aafa:	pop	{r4, r5, pc}
    aafc:	movs.w	ip, ip, lsl #1
    ab00:	adcs	r0, r0
    ab02:	adc.w	r1, r1, r1
    ab06:	tst.w	r1, #1048576	; 0x100000
    ab0a:	sub.w	r4, r4, #1
    ab0e:	bne.n	aae4 <__adddf3+0x10c>
    ab10:	teq	r1, #0
    ab14:	itt	eq
    ab16:	moveq	r1, r0
    ab18:	moveq	r0, #0
    ab1a:	clz	r3, r1
    ab1e:	it	eq
    ab20:	addeq	r3, #32
    ab22:	sub.w	r3, r3, #11
    ab26:	subs.w	r2, r3, #32
    ab2a:	bge.n	ab46 <__adddf3+0x16e>
    ab2c:	adds	r2, #12
    ab2e:	ble.n	ab42 <__adddf3+0x16a>
    ab30:	add.w	ip, r2, #20
    ab34:	rsb	r2, r2, #12
    ab38:	lsl.w	r0, r1, ip
    ab3c:	lsr.w	r1, r1, r2
    ab40:	b.n	ab5c <__adddf3+0x184>
    ab42:	add.w	r2, r2, #20
    ab46:	it	le
    ab48:	rsble	ip, r2, #32
    ab4c:	lsl.w	r1, r1, r2
    ab50:	lsr.w	ip, r0, ip
    ab54:	itt	le
    ab56:	orrle.w	r1, r1, ip
    ab5a:	lslle	r0, r2
    ab5c:	subs	r4, r4, r3
    ab5e:	ittt	ge
    ab60:	addge.w	r1, r1, r4, lsl #20
    ab64:	orrge	r1, r5
    ab66:	popge	{r4, r5, pc}
    ab68:	mvn.w	r4, r4
    ab6c:	subs	r4, #31
    ab6e:	bge.n	abaa <__adddf3+0x1d2>
    ab70:	adds	r4, #12
    ab72:	bgt.n	ab92 <__adddf3+0x1ba>
    ab74:	add.w	r4, r4, #20
    ab78:	rsb	r2, r4, #32
    ab7c:	lsr.w	r0, r0, r4
    ab80:	lsl.w	r3, r1, r2
    ab84:	orr.w	r0, r0, r3
    ab88:	lsr.w	r3, r1, r4
    ab8c:	orr.w	r1, r5, r3
    ab90:	pop	{r4, r5, pc}
    ab92:	rsb	r4, r4, #12
    ab96:	rsb	r2, r4, #32
    ab9a:	lsr.w	r0, r0, r2
    ab9e:	lsl.w	r3, r1, r4
    aba2:	orr.w	r0, r0, r3
    aba6:	mov	r1, r5
    aba8:	pop	{r4, r5, pc}
    abaa:	lsr.w	r0, r1, r4
    abae:	mov	r1, r5
    abb0:	pop	{r4, r5, pc}
    abb2:	teq	r4, #0
    abb6:	eor.w	r3, r3, #1048576	; 0x100000
    abba:	itte	eq
    abbc:	eoreq.w	r1, r1, #1048576	; 0x100000
    abc0:	addeq	r4, #1
    abc2:	subne	r5, #1
    abc4:	b.n	aa64 <__adddf3+0x8c>
    abc6:	mvns.w	ip, r4, asr #21
    abca:	it	ne
    abcc:	mvnsne.w	ip, r5, asr #21
    abd0:	beq.n	ac26 <__adddf3+0x24e>
    abd2:	teq	r4, r5
    abd6:	it	eq
    abd8:	teqeq	r0, r2
    abdc:	beq.n	abea <__adddf3+0x212>
    abde:	orrs.w	ip, r4, r0
    abe2:	itt	eq
    abe4:	moveq	r1, r3
    abe6:	moveq	r0, r2
    abe8:	pop	{r4, r5, pc}
    abea:	teq	r1, r3
    abee:	ittt	ne
    abf0:	movne	r1, #0
    abf2:	movne	r0, #0
    abf4:	popne	{r4, r5, pc}
    abf6:	movs.w	ip, r4, lsr #21
    abfa:	bne.n	ac08 <__adddf3+0x230>
    abfc:	lsls	r0, r0, #1
    abfe:	adcs	r1, r1
    ac00:	it	cs
    ac02:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ac06:	pop	{r4, r5, pc}
    ac08:	adds.w	r4, r4, #4194304	; 0x400000
    ac0c:	itt	cc
    ac0e:	addcc.w	r1, r1, #1048576	; 0x100000
    ac12:	popcc	{r4, r5, pc}
    ac14:	and.w	r5, r1, #2147483648	; 0x80000000
    ac18:	orr.w	r1, r5, #2130706432	; 0x7f000000
    ac1c:	orr.w	r1, r1, #15728640	; 0xf00000
    ac20:	mov.w	r0, #0
    ac24:	pop	{r4, r5, pc}
    ac26:	mvns.w	ip, r4, asr #21
    ac2a:	itte	ne
    ac2c:	movne	r1, r3
    ac2e:	movne	r0, r2
    ac30:	mvnseq.w	ip, r5, asr #21
    ac34:	itt	ne
    ac36:	movne	r3, r1
    ac38:	movne	r2, r0
    ac3a:	orrs.w	r4, r0, r1, lsl #12
    ac3e:	itte	eq
    ac40:	orrseq.w	r5, r2, r3, lsl #12
    ac44:	teqeq	r1, r3
    ac48:	orrne.w	r1, r1, #524288	; 0x80000
    ac4c:	pop	{r4, r5, pc}
    ac4e:	nop

0000ac50 <__aeabi_ui2d>:
    ac50:	teq	r0, #0
    ac54:	itt	eq
    ac56:	moveq	r1, #0
    ac58:	bxeq	lr
    ac5a:	push	{r4, r5, lr}
    ac5c:	mov.w	r4, #1024	; 0x400
    ac60:	add.w	r4, r4, #50	; 0x32
    ac64:	mov.w	r5, #0
    ac68:	mov.w	r1, #0
    ac6c:	b.n	ab10 <__adddf3+0x138>
    ac6e:	nop

0000ac70 <__aeabi_i2d>:
    ac70:	teq	r0, #0
    ac74:	itt	eq
    ac76:	moveq	r1, #0
    ac78:	bxeq	lr
    ac7a:	push	{r4, r5, lr}
    ac7c:	mov.w	r4, #1024	; 0x400
    ac80:	add.w	r4, r4, #50	; 0x32
    ac84:	ands.w	r5, r0, #2147483648	; 0x80000000
    ac88:	it	mi
    ac8a:	negmi	r0, r0
    ac8c:	mov.w	r1, #0
    ac90:	b.n	ab10 <__adddf3+0x138>
    ac92:	nop

0000ac94 <__aeabi_f2d>:
    ac94:	lsls	r2, r0, #1
    ac96:	mov.w	r1, r2, asr #3
    ac9a:	mov.w	r1, r1, rrx
    ac9e:	mov.w	r0, r2, lsl #28
    aca2:	itttt	ne
    aca4:	andsne.w	r3, r2, #4278190080	; 0xff000000
    aca8:	teqne	r3, #4278190080	; 0xff000000
    acac:	eorne.w	r1, r1, #939524096	; 0x38000000
    acb0:	bxne	lr
    acb2:	teq	r2, #0
    acb6:	ite	ne
    acb8:	teqne	r3, #4278190080	; 0xff000000
    acbc:	bxeq	lr
    acbe:	push	{r4, r5, lr}
    acc0:	mov.w	r4, #896	; 0x380
    acc4:	and.w	r5, r1, #2147483648	; 0x80000000
    acc8:	bic.w	r1, r1, #2147483648	; 0x80000000
    accc:	b.n	ab10 <__adddf3+0x138>
    acce:	nop

0000acd0 <__aeabi_ul2d>:
    acd0:	orrs.w	r2, r0, r1
    acd4:	it	eq
    acd6:	bxeq	lr
    acd8:	push	{r4, r5, lr}
    acda:	mov.w	r5, #0
    acde:	b.n	acf6 <__aeabi_l2d+0x16>

0000ace0 <__aeabi_l2d>:
    ace0:	orrs.w	r2, r0, r1
    ace4:	it	eq
    ace6:	bxeq	lr
    ace8:	push	{r4, r5, lr}
    acea:	ands.w	r5, r1, #2147483648	; 0x80000000
    acee:	bpl.n	acf6 <__aeabi_l2d+0x16>
    acf0:	negs	r0, r0
    acf2:	sbc.w	r1, r1, r1, lsl #1
    acf6:	mov.w	r4, #1024	; 0x400
    acfa:	add.w	r4, r4, #50	; 0x32
    acfe:	movs.w	ip, r1, lsr #22
    ad02:	beq.w	aabe <__adddf3+0xe6>
    ad06:	mov.w	r2, #3
    ad0a:	movs.w	ip, ip, lsr #3
    ad0e:	it	ne
    ad10:	addne	r2, #3
    ad12:	movs.w	ip, ip, lsr #3
    ad16:	it	ne
    ad18:	addne	r2, #3
    ad1a:	add.w	r2, r2, ip, lsr #3
    ad1e:	rsb	r3, r2, #32
    ad22:	lsl.w	ip, r0, r3
    ad26:	lsr.w	r0, r0, r2
    ad2a:	lsl.w	lr, r1, r3
    ad2e:	orr.w	r0, r0, lr
    ad32:	lsr.w	r1, r1, r2
    ad36:	add	r4, r2
    ad38:	b.n	aabe <__adddf3+0xe6>
    ad3a:	nop

0000ad3c <__aeabi_dmul>:
    ad3c:	push	{r4, r5, r6, lr}
    ad3e:	mov.w	ip, #255	; 0xff
    ad42:	orr.w	ip, ip, #1792	; 0x700
    ad46:	ands.w	r4, ip, r1, lsr #20
    ad4a:	ittte	ne
    ad4c:	andsne.w	r5, ip, r3, lsr #20
    ad50:	teqne	r4, ip
    ad54:	teqne	r5, ip
    ad58:	bleq	af18 <__aeabi_dmul+0x1dc>
    ad5c:	add	r4, r5
    ad5e:	eor.w	r6, r1, r3
    ad62:	bic.w	r1, r1, ip, lsl #21
    ad66:	bic.w	r3, r3, ip, lsl #21
    ad6a:	orrs.w	r5, r0, r1, lsl #12
    ad6e:	it	ne
    ad70:	orrsne.w	r5, r2, r3, lsl #12
    ad74:	orr.w	r1, r1, #1048576	; 0x100000
    ad78:	orr.w	r3, r3, #1048576	; 0x100000
    ad7c:	beq.n	adf0 <__aeabi_dmul+0xb4>
    ad7e:	umull	ip, lr, r0, r2
    ad82:	mov.w	r5, #0
    ad86:	umlal	lr, r5, r1, r2
    ad8a:	and.w	r2, r6, #2147483648	; 0x80000000
    ad8e:	umlal	lr, r5, r0, r3
    ad92:	mov.w	r6, #0
    ad96:	umlal	r5, r6, r1, r3
    ad9a:	teq	ip, #0
    ad9e:	it	ne
    ada0:	orrne.w	lr, lr, #1
    ada4:	sub.w	r4, r4, #255	; 0xff
    ada8:	cmp.w	r6, #512	; 0x200
    adac:	sbc.w	r4, r4, #768	; 0x300
    adb0:	bcs.n	adbc <__aeabi_dmul+0x80>
    adb2:	movs.w	lr, lr, lsl #1
    adb6:	adcs	r5, r5
    adb8:	adc.w	r6, r6, r6
    adbc:	orr.w	r1, r2, r6, lsl #11
    adc0:	orr.w	r1, r1, r5, lsr #21
    adc4:	mov.w	r0, r5, lsl #11
    adc8:	orr.w	r0, r0, lr, lsr #21
    adcc:	mov.w	lr, lr, lsl #11
    add0:	subs.w	ip, r4, #253	; 0xfd
    add4:	it	hi
    add6:	cmphi.w	ip, #1792	; 0x700
    adda:	bhi.n	ae1a <__aeabi_dmul+0xde>
    addc:	cmp.w	lr, #2147483648	; 0x80000000
    ade0:	it	eq
    ade2:	movseq.w	lr, r0, lsr #1
    ade6:	adcs.w	r0, r0, #0
    adea:	adc.w	r1, r1, r4, lsl #20
    adee:	pop	{r4, r5, r6, pc}
    adf0:	and.w	r6, r6, #2147483648	; 0x80000000
    adf4:	orr.w	r1, r6, r1
    adf8:	orr.w	r0, r0, r2
    adfc:	eor.w	r1, r1, r3
    ae00:	subs.w	r4, r4, ip, lsr #1
    ae04:	ittt	gt
    ae06:	rsbsgt	r5, r4, ip
    ae0a:	orrgt.w	r1, r1, r4, lsl #20
    ae0e:	popgt	{r4, r5, r6, pc}
    ae10:	orr.w	r1, r1, #1048576	; 0x100000
    ae14:	mov.w	lr, #0
    ae18:	subs	r4, #1
    ae1a:	bgt.w	af74 <__aeabi_dmul+0x238>
    ae1e:	cmn.w	r4, #54	; 0x36
    ae22:	ittt	le
    ae24:	movle	r0, #0
    ae26:	andle.w	r1, r1, #2147483648	; 0x80000000
    ae2a:	pople	{r4, r5, r6, pc}
    ae2c:	rsb	r4, r4, #0
    ae30:	subs	r4, #32
    ae32:	bge.n	aea0 <__aeabi_dmul+0x164>
    ae34:	adds	r4, #12
    ae36:	bgt.n	ae70 <__aeabi_dmul+0x134>
    ae38:	add.w	r4, r4, #20
    ae3c:	rsb	r5, r4, #32
    ae40:	lsl.w	r3, r0, r5
    ae44:	lsr.w	r0, r0, r4
    ae48:	lsl.w	r2, r1, r5
    ae4c:	orr.w	r0, r0, r2
    ae50:	and.w	r2, r1, #2147483648	; 0x80000000
    ae54:	bic.w	r1, r1, #2147483648	; 0x80000000
    ae58:	adds.w	r0, r0, r3, lsr #31
    ae5c:	lsr.w	r6, r1, r4
    ae60:	adc.w	r1, r2, r6
    ae64:	orrs.w	lr, lr, r3, lsl #1
    ae68:	it	eq
    ae6a:	biceq.w	r0, r0, r3, lsr #31
    ae6e:	pop	{r4, r5, r6, pc}
    ae70:	rsb	r4, r4, #12
    ae74:	rsb	r5, r4, #32
    ae78:	lsl.w	r3, r0, r4
    ae7c:	lsr.w	r0, r0, r5
    ae80:	lsl.w	r2, r1, r4
    ae84:	orr.w	r0, r0, r2
    ae88:	and.w	r1, r1, #2147483648	; 0x80000000
    ae8c:	adds.w	r0, r0, r3, lsr #31
    ae90:	adc.w	r1, r1, #0
    ae94:	orrs.w	lr, lr, r3, lsl #1
    ae98:	it	eq
    ae9a:	biceq.w	r0, r0, r3, lsr #31
    ae9e:	pop	{r4, r5, r6, pc}
    aea0:	rsb	r5, r4, #32
    aea4:	lsl.w	r2, r0, r5
    aea8:	orr.w	lr, lr, r2
    aeac:	lsr.w	r3, r0, r4
    aeb0:	lsl.w	r2, r1, r5
    aeb4:	orr.w	r3, r3, r2
    aeb8:	lsr.w	r0, r1, r4
    aebc:	and.w	r1, r1, #2147483648	; 0x80000000
    aec0:	lsr.w	r2, r1, r4
    aec4:	bic.w	r0, r0, r2
    aec8:	add.w	r0, r0, r3, lsr #31
    aecc:	orrs.w	lr, lr, r3, lsl #1
    aed0:	it	eq
    aed2:	biceq.w	r0, r0, r3, lsr #31
    aed6:	pop	{r4, r5, r6, pc}
    aed8:	teq	r4, #0
    aedc:	bne.n	aefe <__aeabi_dmul+0x1c2>
    aede:	and.w	r6, r1, #2147483648	; 0x80000000
    aee2:	lsls	r0, r0, #1
    aee4:	adc.w	r1, r1, r1
    aee8:	tst.w	r1, #1048576	; 0x100000
    aeec:	it	eq
    aeee:	subeq	r4, #1
    aef0:	beq.n	aee2 <__aeabi_dmul+0x1a6>
    aef2:	orr.w	r1, r1, r6
    aef6:	teq	r5, #0
    aefa:	it	ne
    aefc:	bxne	lr
    aefe:	and.w	r6, r3, #2147483648	; 0x80000000
    af02:	lsls	r2, r2, #1
    af04:	adc.w	r3, r3, r3
    af08:	tst.w	r3, #1048576	; 0x100000
    af0c:	it	eq
    af0e:	subeq	r5, #1
    af10:	beq.n	af02 <__aeabi_dmul+0x1c6>
    af12:	orr.w	r3, r3, r6
    af16:	bx	lr
    af18:	teq	r4, ip
    af1c:	and.w	r5, ip, r3, lsr #20
    af20:	it	ne
    af22:	teqne	r5, ip
    af26:	beq.n	af42 <__aeabi_dmul+0x206>
    af28:	orrs.w	r6, r0, r1, lsl #1
    af2c:	it	ne
    af2e:	orrsne.w	r6, r2, r3, lsl #1
    af32:	bne.n	aed8 <__aeabi_dmul+0x19c>
    af34:	eor.w	r1, r1, r3
    af38:	and.w	r1, r1, #2147483648	; 0x80000000
    af3c:	mov.w	r0, #0
    af40:	pop	{r4, r5, r6, pc}
    af42:	orrs.w	r6, r0, r1, lsl #1
    af46:	itte	eq
    af48:	moveq	r0, r2
    af4a:	moveq	r1, r3
    af4c:	orrsne.w	r6, r2, r3, lsl #1
    af50:	beq.n	af86 <__aeabi_dmul+0x24a>
    af52:	teq	r4, ip
    af56:	bne.n	af5e <__aeabi_dmul+0x222>
    af58:	orrs.w	r6, r0, r1, lsl #12
    af5c:	bne.n	af86 <__aeabi_dmul+0x24a>
    af5e:	teq	r5, ip
    af62:	bne.n	af70 <__aeabi_dmul+0x234>
    af64:	orrs.w	r6, r2, r3, lsl #12
    af68:	itt	ne
    af6a:	movne	r0, r2
    af6c:	movne	r1, r3
    af6e:	bne.n	af86 <__aeabi_dmul+0x24a>
    af70:	eor.w	r1, r1, r3
    af74:	and.w	r1, r1, #2147483648	; 0x80000000
    af78:	orr.w	r1, r1, #2130706432	; 0x7f000000
    af7c:	orr.w	r1, r1, #15728640	; 0xf00000
    af80:	mov.w	r0, #0
    af84:	pop	{r4, r5, r6, pc}
    af86:	orr.w	r1, r1, #2130706432	; 0x7f000000
    af8a:	orr.w	r1, r1, #16252928	; 0xf80000
    af8e:	pop	{r4, r5, r6, pc}

0000af90 <__aeabi_ddiv>:
    af90:	push	{r4, r5, r6, lr}
    af92:	mov.w	ip, #255	; 0xff
    af96:	orr.w	ip, ip, #1792	; 0x700
    af9a:	ands.w	r4, ip, r1, lsr #20
    af9e:	ittte	ne
    afa0:	andsne.w	r5, ip, r3, lsr #20
    afa4:	teqne	r4, ip
    afa8:	teqne	r5, ip
    afac:	bleq	b0fe <__aeabi_ddiv+0x16e>
    afb0:	sub.w	r4, r4, r5
    afb4:	eor.w	lr, r1, r3
    afb8:	orrs.w	r5, r2, r3, lsl #12
    afbc:	mov.w	r1, r1, lsl #12
    afc0:	beq.w	b0d4 <__aeabi_ddiv+0x144>
    afc4:	mov.w	r3, r3, lsl #12
    afc8:	mov.w	r5, #268435456	; 0x10000000
    afcc:	orr.w	r3, r5, r3, lsr #4
    afd0:	orr.w	r3, r3, r2, lsr #24
    afd4:	mov.w	r2, r2, lsl #8
    afd8:	orr.w	r5, r5, r1, lsr #4
    afdc:	orr.w	r5, r5, r0, lsr #24
    afe0:	mov.w	r6, r0, lsl #8
    afe4:	and.w	r1, lr, #2147483648	; 0x80000000
    afe8:	cmp	r5, r3
    afea:	it	eq
    afec:	cmpeq	r6, r2
    afee:	adc.w	r4, r4, #253	; 0xfd
    aff2:	add.w	r4, r4, #768	; 0x300
    aff6:	bcs.n	affe <__aeabi_ddiv+0x6e>
    aff8:	lsrs	r3, r3, #1
    affa:	mov.w	r2, r2, rrx
    affe:	subs	r6, r6, r2
    b000:	sbc.w	r5, r5, r3
    b004:	lsrs	r3, r3, #1
    b006:	mov.w	r2, r2, rrx
    b00a:	mov.w	r0, #1048576	; 0x100000
    b00e:	mov.w	ip, #524288	; 0x80000
    b012:	subs.w	lr, r6, r2
    b016:	sbcs.w	lr, r5, r3
    b01a:	ittt	cs
    b01c:	subcs	r6, r6, r2
    b01e:	movcs	r5, lr
    b020:	orrcs.w	r0, r0, ip
    b024:	lsrs	r3, r3, #1
    b026:	mov.w	r2, r2, rrx
    b02a:	subs.w	lr, r6, r2
    b02e:	sbcs.w	lr, r5, r3
    b032:	ittt	cs
    b034:	subcs	r6, r6, r2
    b036:	movcs	r5, lr
    b038:	orrcs.w	r0, r0, ip, lsr #1
    b03c:	lsrs	r3, r3, #1
    b03e:	mov.w	r2, r2, rrx
    b042:	subs.w	lr, r6, r2
    b046:	sbcs.w	lr, r5, r3
    b04a:	ittt	cs
    b04c:	subcs	r6, r6, r2
    b04e:	movcs	r5, lr
    b050:	orrcs.w	r0, r0, ip, lsr #2
    b054:	lsrs	r3, r3, #1
    b056:	mov.w	r2, r2, rrx
    b05a:	subs.w	lr, r6, r2
    b05e:	sbcs.w	lr, r5, r3
    b062:	ittt	cs
    b064:	subcs	r6, r6, r2
    b066:	movcs	r5, lr
    b068:	orrcs.w	r0, r0, ip, lsr #3
    b06c:	orrs.w	lr, r5, r6
    b070:	beq.n	b0a4 <__aeabi_ddiv+0x114>
    b072:	mov.w	r5, r5, lsl #4
    b076:	orr.w	r5, r5, r6, lsr #28
    b07a:	mov.w	r6, r6, lsl #4
    b07e:	mov.w	r3, r3, lsl #3
    b082:	orr.w	r3, r3, r2, lsr #29
    b086:	mov.w	r2, r2, lsl #3
    b08a:	movs.w	ip, ip, lsr #4
    b08e:	bne.n	b012 <__aeabi_ddiv+0x82>
    b090:	tst.w	r1, #1048576	; 0x100000
    b094:	bne.n	b0ae <__aeabi_ddiv+0x11e>
    b096:	orr.w	r1, r1, r0
    b09a:	mov.w	r0, #0
    b09e:	mov.w	ip, #2147483648	; 0x80000000
    b0a2:	b.n	b012 <__aeabi_ddiv+0x82>
    b0a4:	tst.w	r1, #1048576	; 0x100000
    b0a8:	itt	eq
    b0aa:	orreq	r1, r0
    b0ac:	moveq	r0, #0
    b0ae:	subs.w	ip, r4, #253	; 0xfd
    b0b2:	it	hi
    b0b4:	cmphi.w	ip, #1792	; 0x700
    b0b8:	bhi.w	ae1a <__aeabi_dmul+0xde>
    b0bc:	subs.w	ip, r5, r3
    b0c0:	itt	eq
    b0c2:	subseq.w	ip, r6, r2
    b0c6:	movseq.w	ip, r0, lsr #1
    b0ca:	adcs.w	r0, r0, #0
    b0ce:	adc.w	r1, r1, r4, lsl #20
    b0d2:	pop	{r4, r5, r6, pc}
    b0d4:	and.w	lr, lr, #2147483648	; 0x80000000
    b0d8:	orr.w	r1, lr, r1, lsr #12
    b0dc:	adds.w	r4, r4, ip, lsr #1
    b0e0:	ittt	gt
    b0e2:	rsbsgt	r5, r4, ip
    b0e6:	orrgt.w	r1, r1, r4, lsl #20
    b0ea:	popgt	{r4, r5, r6, pc}
    b0ec:	orr.w	r1, r1, #1048576	; 0x100000
    b0f0:	mov.w	lr, #0
    b0f4:	subs	r4, #1
    b0f6:	b.n	ae1a <__aeabi_dmul+0xde>
    b0f8:	orr.w	lr, r5, r6
    b0fc:	b.n	ae1a <__aeabi_dmul+0xde>
    b0fe:	and.w	r5, ip, r3, lsr #20
    b102:	teq	r4, ip
    b106:	it	eq
    b108:	teqeq	r5, ip
    b10c:	beq.w	af86 <__aeabi_dmul+0x24a>
    b110:	teq	r4, ip
    b114:	bne.n	b12c <__aeabi_ddiv+0x19c>
    b116:	orrs.w	r4, r0, r1, lsl #12
    b11a:	bne.w	af86 <__aeabi_dmul+0x24a>
    b11e:	teq	r5, ip
    b122:	bne.w	af70 <__aeabi_dmul+0x234>
    b126:	mov	r0, r2
    b128:	mov	r1, r3
    b12a:	b.n	af86 <__aeabi_dmul+0x24a>
    b12c:	teq	r5, ip
    b130:	bne.n	b140 <__aeabi_ddiv+0x1b0>
    b132:	orrs.w	r5, r2, r3, lsl #12
    b136:	beq.w	af34 <__aeabi_dmul+0x1f8>
    b13a:	mov	r0, r2
    b13c:	mov	r1, r3
    b13e:	b.n	af86 <__aeabi_dmul+0x24a>
    b140:	orrs.w	r6, r0, r1, lsl #1
    b144:	it	ne
    b146:	orrsne.w	r6, r2, r3, lsl #1
    b14a:	bne.w	aed8 <__aeabi_dmul+0x19c>
    b14e:	orrs.w	r4, r0, r1, lsl #1
    b152:	bne.w	af70 <__aeabi_dmul+0x234>
    b156:	orrs.w	r5, r2, r3, lsl #1
    b15a:	bne.w	af34 <__aeabi_dmul+0x1f8>
    b15e:	b.n	af86 <__aeabi_dmul+0x24a>

0000b160 <__gedf2>:
    b160:	mov.w	ip, #4294967295
    b164:	b.n	b174 <__cmpdf2+0x4>
    b166:	nop

0000b168 <__ledf2>:
    b168:	mov.w	ip, #1
    b16c:	b.n	b174 <__cmpdf2+0x4>
    b16e:	nop

0000b170 <__cmpdf2>:
    b170:	mov.w	ip, #1
    b174:	str.w	ip, [sp, #-4]!
    b178:	mov.w	ip, r1, lsl #1
    b17c:	mvns.w	ip, ip, asr #21
    b180:	mov.w	ip, r3, lsl #1
    b184:	it	ne
    b186:	mvnsne.w	ip, ip, asr #21
    b18a:	beq.n	b1c4 <__cmpdf2+0x54>
    b18c:	add	sp, #4
    b18e:	orrs.w	ip, r0, r1, lsl #1
    b192:	ite	eq
    b194:	orrseq.w	ip, r2, r3, lsl #1
    b198:	teqne	r1, r3
    b19c:	ittt	eq
    b19e:	teqeq	r0, r2
    b1a2:	moveq	r0, #0
    b1a4:	bxeq	lr
    b1a6:	cmn.w	r0, #0
    b1aa:	teq	r1, r3
    b1ae:	it	pl
    b1b0:	cmppl	r1, r3
    b1b2:	it	eq
    b1b4:	cmpeq	r0, r2
    b1b6:	ite	cs
    b1b8:	asrcs	r0, r3, #31
    b1ba:	mvncc.w	r0, r3, asr #31
    b1be:	orr.w	r0, r0, #1
    b1c2:	bx	lr
    b1c4:	mov.w	ip, r1, lsl #1
    b1c8:	mvns.w	ip, ip, asr #21
    b1cc:	bne.n	b1d4 <__cmpdf2+0x64>
    b1ce:	orrs.w	ip, r0, r1, lsl #12
    b1d2:	bne.n	b1e4 <__cmpdf2+0x74>
    b1d4:	mov.w	ip, r3, lsl #1
    b1d8:	mvns.w	ip, ip, asr #21
    b1dc:	bne.n	b18c <__cmpdf2+0x1c>
    b1de:	orrs.w	ip, r2, r3, lsl #12
    b1e2:	beq.n	b18c <__cmpdf2+0x1c>
    b1e4:	ldr.w	r0, [sp], #4
    b1e8:	bx	lr
    b1ea:	nop

0000b1ec <__aeabi_cdrcmple>:
    b1ec:	mov	ip, r0
    b1ee:	mov	r0, r2
    b1f0:	mov	r2, ip
    b1f2:	mov	ip, r1
    b1f4:	mov	r1, r3
    b1f6:	mov	r3, ip
    b1f8:	b.n	b1fc <__aeabi_cdcmpeq>
    b1fa:	nop

0000b1fc <__aeabi_cdcmpeq>:
    b1fc:	push	{r0, lr}
    b1fe:	bl	b170 <__cmpdf2>
    b202:	cmp	r0, #0
    b204:	it	mi
    b206:	cmnmi.w	r0, #0
    b20a:	pop	{r0, pc}

0000b20c <__aeabi_dcmpeq>:
    b20c:	str.w	lr, [sp, #-8]!
    b210:	bl	b1fc <__aeabi_cdcmpeq>
    b214:	ite	eq
    b216:	moveq	r0, #1
    b218:	movne	r0, #0
    b21a:	ldr.w	pc, [sp], #8
    b21e:	nop

0000b220 <__aeabi_dcmplt>:
    b220:	str.w	lr, [sp, #-8]!
    b224:	bl	b1fc <__aeabi_cdcmpeq>
    b228:	ite	cc
    b22a:	movcc	r0, #1
    b22c:	movcs	r0, #0
    b22e:	ldr.w	pc, [sp], #8
    b232:	nop

0000b234 <__aeabi_dcmple>:
    b234:	str.w	lr, [sp, #-8]!
    b238:	bl	b1fc <__aeabi_cdcmpeq>
    b23c:	ite	ls
    b23e:	movls	r0, #1
    b240:	movhi	r0, #0
    b242:	ldr.w	pc, [sp], #8
    b246:	nop

0000b248 <__aeabi_dcmpge>:
    b248:	str.w	lr, [sp, #-8]!
    b24c:	bl	b1ec <__aeabi_cdrcmple>
    b250:	ite	ls
    b252:	movls	r0, #1
    b254:	movhi	r0, #0
    b256:	ldr.w	pc, [sp], #8
    b25a:	nop

0000b25c <__aeabi_dcmpgt>:
    b25c:	str.w	lr, [sp, #-8]!
    b260:	bl	b1ec <__aeabi_cdrcmple>
    b264:	ite	cc
    b266:	movcc	r0, #1
    b268:	movcs	r0, #0
    b26a:	ldr.w	pc, [sp], #8
    b26e:	nop

0000b270 <__aeabi_dcmpun>:
    b270:	mov.w	ip, r1, lsl #1
    b274:	mvns.w	ip, ip, asr #21
    b278:	bne.n	b280 <__aeabi_dcmpun+0x10>
    b27a:	orrs.w	ip, r0, r1, lsl #12
    b27e:	bne.n	b296 <__aeabi_dcmpun+0x26>
    b280:	mov.w	ip, r3, lsl #1
    b284:	mvns.w	ip, ip, asr #21
    b288:	bne.n	b290 <__aeabi_dcmpun+0x20>
    b28a:	orrs.w	ip, r2, r3, lsl #12
    b28e:	bne.n	b296 <__aeabi_dcmpun+0x26>
    b290:	mov.w	r0, #0
    b294:	bx	lr
    b296:	mov.w	r0, #1
    b29a:	bx	lr

0000b29c <__aeabi_d2iz>:
    b29c:	mov.w	r2, r1, lsl #1
    b2a0:	adds.w	r2, r2, #2097152	; 0x200000
    b2a4:	bcs.n	b2d2 <__aeabi_d2iz+0x36>
    b2a6:	bpl.n	b2cc <__aeabi_d2iz+0x30>
    b2a8:	mvn.w	r3, #992	; 0x3e0
    b2ac:	subs.w	r2, r3, r2, asr #21
    b2b0:	bls.n	b2d8 <__aeabi_d2iz+0x3c>
    b2b2:	mov.w	r3, r1, lsl #11
    b2b6:	orr.w	r3, r3, #2147483648	; 0x80000000
    b2ba:	orr.w	r3, r3, r0, lsr #21
    b2be:	tst.w	r1, #2147483648	; 0x80000000
    b2c2:	lsr.w	r0, r3, r2
    b2c6:	it	ne
    b2c8:	negne	r0, r0
    b2ca:	bx	lr
    b2cc:	mov.w	r0, #0
    b2d0:	bx	lr
    b2d2:	orrs.w	r0, r0, r1, lsl #12
    b2d6:	bne.n	b2e4 <__aeabi_d2iz+0x48>
    b2d8:	ands.w	r0, r1, #2147483648	; 0x80000000
    b2dc:	it	eq
    b2de:	mvneq.w	r0, #2147483648	; 0x80000000
    b2e2:	bx	lr
    b2e4:	mov.w	r0, #0
    b2e8:	bx	lr
    b2ea:	nop

0000b2ec <__aeabi_d2uiz>:
    b2ec:	lsls	r2, r1, #1
    b2ee:	bcs.n	b314 <__aeabi_d2uiz+0x28>
    b2f0:	adds.w	r2, r2, #2097152	; 0x200000
    b2f4:	bcs.n	b31a <__aeabi_d2uiz+0x2e>
    b2f6:	bpl.n	b314 <__aeabi_d2uiz+0x28>
    b2f8:	mvn.w	r3, #992	; 0x3e0
    b2fc:	subs.w	r2, r3, r2, asr #21
    b300:	bmi.n	b320 <__aeabi_d2uiz+0x34>
    b302:	mov.w	r3, r1, lsl #11
    b306:	orr.w	r3, r3, #2147483648	; 0x80000000
    b30a:	orr.w	r3, r3, r0, lsr #21
    b30e:	lsr.w	r0, r3, r2
    b312:	bx	lr
    b314:	mov.w	r0, #0
    b318:	bx	lr
    b31a:	orrs.w	r0, r0, r1, lsl #12
    b31e:	bne.n	b326 <__aeabi_d2uiz+0x3a>
    b320:	mov.w	r0, #4294967295
    b324:	bx	lr
    b326:	mov.w	r0, #0
    b32a:	bx	lr

0000b32c <__aeabi_d2f>:
    b32c:	mov.w	r2, r1, lsl #1
    b330:	subs.w	r3, r2, #1879048192	; 0x70000000
    b334:	itt	cs
    b336:	subscs.w	ip, r3, #2097152	; 0x200000
    b33a:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    b33e:	bls.n	b35c <__aeabi_d2f+0x30>
    b340:	and.w	ip, r1, #2147483648	; 0x80000000
    b344:	mov.w	r2, r0, lsl #3
    b348:	orr.w	r0, ip, r0, lsr #29
    b34c:	cmp.w	r2, #2147483648	; 0x80000000
    b350:	adc.w	r0, r0, r3, lsl #2
    b354:	it	eq
    b356:	biceq.w	r0, r0, #1
    b35a:	bx	lr
    b35c:	tst.w	r1, #1073741824	; 0x40000000
    b360:	bne.n	b3a6 <__aeabi_d2f+0x7a>
    b362:	adds.w	r2, r3, #48234496	; 0x2e00000
    b366:	itt	lt
    b368:	andlt.w	r0, r1, #2147483648	; 0x80000000
    b36c:	bxlt	lr
    b36e:	orr.w	r1, r1, #1048576	; 0x100000
    b372:	mov.w	r2, r2, lsr #21
    b376:	rsb	r2, r2, #24
    b37a:	rsb	ip, r2, #32
    b37e:	lsls.w	r3, r0, ip
    b382:	lsr.w	r0, r0, r2
    b386:	it	ne
    b388:	orrne.w	r0, r0, #1
    b38c:	mov.w	r3, r1, lsl #11
    b390:	mov.w	r3, r3, lsr #11
    b394:	lsl.w	ip, r3, ip
    b398:	orr.w	r0, r0, ip
    b39c:	lsr.w	r3, r3, r2
    b3a0:	mov.w	r3, r3, lsl #1
    b3a4:	b.n	b340 <__aeabi_d2f+0x14>
    b3a6:	mvns.w	r3, r2, asr #21
    b3aa:	bne.n	b3bc <__aeabi_d2f+0x90>
    b3ac:	orrs.w	r3, r0, r1, lsl #12
    b3b0:	ittt	ne
    b3b2:	movne.w	r0, #2130706432	; 0x7f000000
    b3b6:	orrne.w	r0, r0, #12582912	; 0xc00000
    b3ba:	bxne	lr
    b3bc:	and.w	r0, r1, #2147483648	; 0x80000000
    b3c0:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b3c4:	orr.w	r0, r0, #8388608	; 0x800000
    b3c8:	bx	lr
    b3ca:	nop

0000b3cc <__aeabi_frsub>:
    b3cc:	eor.w	r0, r0, #2147483648	; 0x80000000
    b3d0:	b.n	b3d8 <__addsf3>
    b3d2:	nop

0000b3d4 <__aeabi_fsub>:
    b3d4:	eor.w	r1, r1, #2147483648	; 0x80000000

0000b3d8 <__addsf3>:
    b3d8:	lsls	r2, r0, #1
    b3da:	itttt	ne
    b3dc:	movsne.w	r3, r1, lsl #1
    b3e0:	teqne	r2, r3
    b3e4:	mvnsne.w	ip, r2, asr #24
    b3e8:	mvnsne.w	ip, r3, asr #24
    b3ec:	beq.n	b4c4 <__addsf3+0xec>
    b3ee:	mov.w	r2, r2, lsr #24
    b3f2:	rsbs	r3, r2, r3, lsr #24
    b3f6:	itttt	gt
    b3f8:	addgt	r2, r2, r3
    b3fa:	eorgt	r1, r0
    b3fc:	eorgt	r0, r1
    b3fe:	eorgt	r1, r0
    b400:	it	lt
    b402:	neglt	r3, r3
    b404:	cmp	r3, #25
    b406:	it	hi
    b408:	bxhi	lr
    b40a:	tst.w	r0, #2147483648	; 0x80000000
    b40e:	orr.w	r0, r0, #8388608	; 0x800000
    b412:	bic.w	r0, r0, #4278190080	; 0xff000000
    b416:	it	ne
    b418:	negne	r0, r0
    b41a:	tst.w	r1, #2147483648	; 0x80000000
    b41e:	orr.w	r1, r1, #8388608	; 0x800000
    b422:	bic.w	r1, r1, #4278190080	; 0xff000000
    b426:	it	ne
    b428:	negne	r1, r1
    b42a:	teq	r2, r3
    b42e:	beq.n	b4b0 <__addsf3+0xd8>
    b430:	sub.w	r2, r2, #1
    b434:	asr.w	ip, r1, r3
    b438:	adds.w	r0, r0, ip
    b43c:	rsb	r3, r3, #32
    b440:	lsl.w	r1, r1, r3
    b444:	and.w	r3, r0, #2147483648	; 0x80000000
    b448:	bpl.n	b450 <__addsf3+0x78>
    b44a:	negs	r1, r1
    b44c:	sbc.w	r0, r0, r0, lsl #1
    b450:	cmp.w	r0, #8388608	; 0x800000
    b454:	bcc.n	b47e <__addsf3+0xa6>
    b456:	cmp.w	r0, #16777216	; 0x1000000
    b45a:	bcc.n	b46a <__addsf3+0x92>
    b45c:	lsrs	r0, r0, #1
    b45e:	mov.w	r1, r1, rrx
    b462:	add.w	r2, r2, #1
    b466:	cmp	r2, #254	; 0xfe
    b468:	bcs.n	b50e <__addsf3+0x136>
    b46a:	cmp.w	r1, #2147483648	; 0x80000000
    b46e:	adc.w	r0, r0, r2, lsl #23
    b472:	it	eq
    b474:	biceq.w	r0, r0, #1
    b478:	orr.w	r0, r0, r3
    b47c:	bx	lr
    b47e:	lsls	r1, r1, #1
    b480:	adc.w	r0, r0, r0
    b484:	tst.w	r0, #8388608	; 0x800000
    b488:	sub.w	r2, r2, #1
    b48c:	bne.n	b46a <__addsf3+0x92>
    b48e:	clz	ip, r0
    b492:	sub.w	ip, ip, #8
    b496:	subs.w	r2, r2, ip
    b49a:	lsl.w	r0, r0, ip
    b49e:	itet	ge
    b4a0:	addge.w	r0, r0, r2, lsl #23
    b4a4:	neglt	r2, r2
    b4a6:	orrge	r0, r3
    b4a8:	itt	lt
    b4aa:	lsrlt	r0, r2
    b4ac:	orrlt	r0, r3
    b4ae:	bx	lr
    b4b0:	teq	r2, #0
    b4b4:	eor.w	r1, r1, #8388608	; 0x800000
    b4b8:	itte	eq
    b4ba:	eoreq.w	r0, r0, #8388608	; 0x800000
    b4be:	addeq	r2, #1
    b4c0:	subne	r3, #1
    b4c2:	b.n	b430 <__addsf3+0x58>
    b4c4:	mov.w	r3, r1, lsl #1
    b4c8:	mvns.w	ip, r2, asr #24
    b4cc:	it	ne
    b4ce:	mvnsne.w	ip, r3, asr #24
    b4d2:	beq.n	b518 <__addsf3+0x140>
    b4d4:	teq	r2, r3
    b4d8:	beq.n	b4e4 <__addsf3+0x10c>
    b4da:	teq	r2, #0
    b4de:	it	eq
    b4e0:	moveq	r0, r1
    b4e2:	bx	lr
    b4e4:	teq	r0, r1
    b4e8:	itt	ne
    b4ea:	movne	r0, #0
    b4ec:	bxne	lr
    b4ee:	tst.w	r2, #4278190080	; 0xff000000
    b4f2:	bne.n	b4fe <__addsf3+0x126>
    b4f4:	lsls	r0, r0, #1
    b4f6:	it	cs
    b4f8:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    b4fc:	bx	lr
    b4fe:	adds.w	r2, r2, #33554432	; 0x2000000
    b502:	itt	cc
    b504:	addcc.w	r0, r0, #8388608	; 0x800000
    b508:	bxcc	lr
    b50a:	and.w	r3, r0, #2147483648	; 0x80000000
    b50e:	orr.w	r0, r3, #2130706432	; 0x7f000000
    b512:	orr.w	r0, r0, #8388608	; 0x800000
    b516:	bx	lr
    b518:	mvns.w	r2, r2, asr #24
    b51c:	itet	ne
    b51e:	movne	r0, r1
    b520:	mvnseq.w	r3, r3, asr #24
    b524:	movne	r1, r0
    b526:	lsls	r2, r0, #9
    b528:	itte	eq
    b52a:	movseq.w	r3, r1, lsl #9
    b52e:	teqeq	r0, r1
    b532:	orrne.w	r0, r0, #4194304	; 0x400000
    b536:	bx	lr

0000b538 <__aeabi_ui2f>:
    b538:	mov.w	r3, #0
    b53c:	b.n	b548 <__aeabi_i2f+0x8>
    b53e:	nop

0000b540 <__aeabi_i2f>:
    b540:	ands.w	r3, r0, #2147483648	; 0x80000000
    b544:	it	mi
    b546:	negmi	r0, r0
    b548:	movs.w	ip, r0
    b54c:	it	eq
    b54e:	bxeq	lr
    b550:	orr.w	r3, r3, #1258291200	; 0x4b000000
    b554:	mov	r1, r0
    b556:	mov.w	r0, #0
    b55a:	b.n	b596 <__aeabi_l2f+0x2a>

0000b55c <__aeabi_ul2f>:
    b55c:	orrs.w	r2, r0, r1
    b560:	it	eq
    b562:	bxeq	lr
    b564:	mov.w	r3, #0
    b568:	b.n	b580 <__aeabi_l2f+0x14>
    b56a:	nop

0000b56c <__aeabi_l2f>:
    b56c:	orrs.w	r2, r0, r1
    b570:	it	eq
    b572:	bxeq	lr
    b574:	ands.w	r3, r1, #2147483648	; 0x80000000
    b578:	bpl.n	b580 <__aeabi_l2f+0x14>
    b57a:	negs	r0, r0
    b57c:	sbc.w	r1, r1, r1, lsl #1
    b580:	movs.w	ip, r1
    b584:	ittt	eq
    b586:	moveq	ip, r0
    b588:	moveq	r1, r0
    b58a:	moveq	r0, #0
    b58c:	orr.w	r3, r3, #1526726656	; 0x5b000000
    b590:	it	eq
    b592:	subeq.w	r3, r3, #268435456	; 0x10000000
    b596:	sub.w	r3, r3, #8388608	; 0x800000
    b59a:	clz	r2, ip
    b59e:	subs	r2, #8
    b5a0:	sub.w	r3, r3, r2, lsl #23
    b5a4:	blt.n	b5c8 <__aeabi_l2f+0x5c>
    b5a6:	lsl.w	ip, r1, r2
    b5aa:	add	r3, ip
    b5ac:	lsl.w	ip, r0, r2
    b5b0:	rsb	r2, r2, #32
    b5b4:	cmp.w	ip, #2147483648	; 0x80000000
    b5b8:	lsr.w	r2, r0, r2
    b5bc:	adc.w	r0, r3, r2
    b5c0:	it	eq
    b5c2:	biceq.w	r0, r0, #1
    b5c6:	bx	lr
    b5c8:	add.w	r2, r2, #32
    b5cc:	lsl.w	ip, r1, r2
    b5d0:	rsb	r2, r2, #32
    b5d4:	orrs.w	r0, r0, ip, lsl #1
    b5d8:	lsr.w	r2, r1, r2
    b5dc:	adc.w	r0, r3, r2
    b5e0:	it	eq
    b5e2:	biceq.w	r0, r0, ip, lsr #31
    b5e6:	bx	lr

0000b5e8 <__aeabi_ldivmod>:
    b5e8:	cbnz	r3, b60a <__aeabi_ldivmod+0x22>
    b5ea:	cbnz	r2, b60a <__aeabi_ldivmod+0x22>
    b5ec:	cmp	r1, #0
    b5ee:	ittt	lt
    b5f0:	movlt	r0, #0
    b5f2:	movlt.w	r1, #2147483648	; 0x80000000
    b5f6:	blt.n	b606 <__aeabi_ldivmod+0x1e>
    b5f8:	it	eq
    b5fa:	cmpeq	r0, #0
    b5fc:	itt	ne
    b5fe:	mvnne.w	r1, #2147483648	; 0x80000000
    b602:	movne.w	r0, #4294967295
    b606:	b.w	ba0c <__aeabi_idiv0>
    b60a:	sub.w	ip, sp, #8
    b60e:	strd	ip, lr, [sp, #-16]!
    b612:	cmp	r1, #0
    b614:	blt.n	b62a <__aeabi_ldivmod+0x42>
    b616:	cmp	r3, #0
    b618:	blt.n	b650 <__aeabi_ldivmod+0x68>
    b61a:	bl	b728 <__udivmoddi4>
    b61e:	ldr.w	lr, [sp, #4]
    b622:	ldrd	r2, r3, [sp, #8]
    b626:	add	sp, #16
    b628:	bx	lr
    b62a:	negs	r0, r0
    b62c:	sbc.w	r1, r1, r1, lsl #1
    b630:	cmp	r3, #0
    b632:	blt.n	b66c <__aeabi_ldivmod+0x84>
    b634:	bl	b728 <__udivmoddi4>
    b638:	ldr.w	lr, [sp, #4]
    b63c:	ldrd	r2, r3, [sp, #8]
    b640:	add	sp, #16
    b642:	negs	r0, r0
    b644:	sbc.w	r1, r1, r1, lsl #1
    b648:	negs	r2, r2
    b64a:	sbc.w	r3, r3, r3, lsl #1
    b64e:	bx	lr
    b650:	negs	r2, r2
    b652:	sbc.w	r3, r3, r3, lsl #1
    b656:	bl	b728 <__udivmoddi4>
    b65a:	ldr.w	lr, [sp, #4]
    b65e:	ldrd	r2, r3, [sp, #8]
    b662:	add	sp, #16
    b664:	negs	r0, r0
    b666:	sbc.w	r1, r1, r1, lsl #1
    b66a:	bx	lr
    b66c:	negs	r2, r2
    b66e:	sbc.w	r3, r3, r3, lsl #1
    b672:	bl	b728 <__udivmoddi4>
    b676:	ldr.w	lr, [sp, #4]
    b67a:	ldrd	r2, r3, [sp, #8]
    b67e:	add	sp, #16
    b680:	negs	r2, r2
    b682:	sbc.w	r3, r3, r3, lsl #1
    b686:	bx	lr

0000b688 <__aeabi_uldivmod>:
    b688:	cbnz	r3, b6a0 <__aeabi_uldivmod+0x18>
    b68a:	cbnz	r2, b6a0 <__aeabi_uldivmod+0x18>
    b68c:	cmp	r1, #0
    b68e:	it	eq
    b690:	cmpeq	r0, #0
    b692:	itt	ne
    b694:	movne.w	r1, #4294967295
    b698:	movne.w	r0, #4294967295
    b69c:	b.w	ba0c <__aeabi_idiv0>
    b6a0:	sub.w	ip, sp, #8
    b6a4:	strd	ip, lr, [sp, #-16]!
    b6a8:	bl	b728 <__udivmoddi4>
    b6ac:	ldr.w	lr, [sp, #4]
    b6b0:	ldrd	r2, r3, [sp, #8]
    b6b4:	add	sp, #16
    b6b6:	bx	lr

0000b6b8 <__aeabi_f2lz>:
    b6b8:	vmov	s15, r0
    b6bc:	vcmpe.f32	s15, #0.0
    b6c0:	vmrs	APSR_nzcv, fpscr
    b6c4:	bmi.n	b6ca <__aeabi_f2lz+0x12>
    b6c6:	b.w	b6dc <__aeabi_f2ulz>
    b6ca:	push	{r3, lr}
    b6cc:	eor.w	r0, r0, #2147483648	; 0x80000000
    b6d0:	bl	b6dc <__aeabi_f2ulz>
    b6d4:	negs	r0, r0
    b6d6:	sbc.w	r1, r1, r1, lsl #1
    b6da:	pop	{r3, pc}

0000b6dc <__aeabi_f2ulz>:
    b6dc:	push	{r4, r6, r7, lr}
    b6de:	bl	ac94 <__aeabi_f2d>
    b6e2:	movs	r2, #0
    b6e4:	ldr	r3, [pc, #56]	; (b720 <__aeabi_f2ulz+0x44>)
    b6e6:	mov	r6, r0
    b6e8:	mov	r7, r1
    b6ea:	bl	ad3c <__aeabi_dmul>
    b6ee:	bl	b2ec <__aeabi_d2uiz>
    b6f2:	mov	r4, r0
    b6f4:	bl	ac50 <__aeabi_ui2d>
    b6f8:	movs	r2, #0
    b6fa:	ldr	r3, [pc, #40]	; (b724 <__aeabi_f2ulz+0x48>)
    b6fc:	bl	ad3c <__aeabi_dmul>
    b700:	mov	r2, r0
    b702:	mov	r3, r1
    b704:	mov	r0, r6
    b706:	mov	r1, r7
    b708:	bl	a9d4 <__aeabi_dsub>
    b70c:	bl	b2ec <__aeabi_d2uiz>
    b710:	mov	r3, r4
    b712:	movs	r2, #0
    b714:	orr.w	r2, r2, r0
    b718:	mov	r0, r2
    b71a:	mov	r1, r3
    b71c:	pop	{r4, r6, r7, pc}
    b71e:	nop
    b720:	.word	0x3df00000
    b724:	.word	0x41f00000

0000b728 <__udivmoddi4>:
    b728:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b72c:	mov	ip, r1
    b72e:	mov	r6, r1
    b730:	mov	r4, r0
    b732:	ldr	r5, [sp, #32]
    b734:	cmp	r3, #0
    b736:	bne.n	b7da <__udivmoddi4+0xb2>
    b738:	cmp	r2, r1
    b73a:	mov	r7, r2
    b73c:	bls.n	b818 <__udivmoddi4+0xf0>
    b73e:	clz	lr, r2
    b742:	cmp.w	lr, #0
    b746:	beq.n	b760 <__udivmoddi4+0x38>
    b748:	rsb	r4, lr, #32
    b74c:	lsr.w	r4, r0, r4
    b750:	lsl.w	r6, r1, lr
    b754:	orr.w	ip, r4, r6
    b758:	lsl.w	r7, r2, lr
    b75c:	lsl.w	r4, r0, lr
    b760:	mov.w	r9, r7, lsr #16
    b764:	lsrs	r2, r4, #16
    b766:	udiv	r0, ip, r9
    b76a:	uxth.w	r8, r7
    b76e:	mls	r6, r9, r0, ip
    b772:	orr.w	r6, r2, r6, lsl #16
    b776:	mul.w	r3, r0, r8
    b77a:	cmp	r3, r6
    b77c:	bls.n	b792 <__udivmoddi4+0x6a>
    b77e:	adds	r6, r6, r7
    b780:	add.w	r2, r0, #4294967295
    b784:	bcs.w	b9cc <__udivmoddi4+0x2a4>
    b788:	cmp	r3, r6
    b78a:	bls.w	b9cc <__udivmoddi4+0x2a4>
    b78e:	subs	r0, #2
    b790:	add	r6, r7
    b792:	subs	r6, r6, r3
    b794:	uxth	r2, r4
    b796:	udiv	r3, r6, r9
    b79a:	mls	r6, r9, r3, r6
    b79e:	orr.w	r4, r2, r6, lsl #16
    b7a2:	mul.w	r8, r3, r8
    b7a6:	cmp	r8, r4
    b7a8:	bls.n	b7be <__udivmoddi4+0x96>
    b7aa:	adds	r4, r4, r7
    b7ac:	add.w	r2, r3, #4294967295
    b7b0:	bcs.w	b9c8 <__udivmoddi4+0x2a0>
    b7b4:	cmp	r8, r4
    b7b6:	bls.w	b9c8 <__udivmoddi4+0x2a0>
    b7ba:	subs	r3, #2
    b7bc:	add	r4, r7
    b7be:	rsb	r4, r8, r4
    b7c2:	orr.w	r0, r3, r0, lsl #16
    b7c6:	movs	r1, #0
    b7c8:	cmp	r5, #0
    b7ca:	beq.n	b892 <__udivmoddi4+0x16a>
    b7cc:	lsr.w	r4, r4, lr
    b7d0:	movs	r3, #0
    b7d2:	str	r4, [r5, #0]
    b7d4:	str	r3, [r5, #4]
    b7d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7da:	cmp	r3, r1
    b7dc:	bls.n	b7ee <__udivmoddi4+0xc6>
    b7de:	cmp	r5, #0
    b7e0:	beq.n	b88e <__udivmoddi4+0x166>
    b7e2:	movs	r1, #0
    b7e4:	stmia.w	r5, {r0, r6}
    b7e8:	mov	r0, r1
    b7ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7ee:	clz	r1, r3
    b7f2:	cmp	r1, #0
    b7f4:	bne.w	b918 <__udivmoddi4+0x1f0>
    b7f8:	cmp	r3, r6
    b7fa:	bcc.n	b802 <__udivmoddi4+0xda>
    b7fc:	cmp	r2, r0
    b7fe:	bhi.w	b9f2 <__udivmoddi4+0x2ca>
    b802:	subs	r4, r0, r2
    b804:	sbc.w	r6, r6, r3
    b808:	movs	r0, #1
    b80a:	mov	ip, r6
    b80c:	cmp	r5, #0
    b80e:	beq.n	b892 <__udivmoddi4+0x16a>
    b810:	stmia.w	r5, {r4, ip}
    b814:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b818:	cbnz	r2, b820 <__udivmoddi4+0xf8>
    b81a:	movs	r7, #1
    b81c:	udiv	r7, r7, r2
    b820:	clz	lr, r7
    b824:	cmp.w	lr, #0
    b828:	bne.n	b896 <__udivmoddi4+0x16e>
    b82a:	subs	r3, r6, r7
    b82c:	mov.w	r8, r7, lsr #16
    b830:	uxth.w	ip, r7
    b834:	movs	r1, #1
    b836:	udiv	r0, r3, r8
    b83a:	lsrs	r2, r4, #16
    b83c:	mls	r6, r8, r0, r3
    b840:	orr.w	r6, r2, r6, lsl #16
    b844:	mul.w	r3, ip, r0
    b848:	cmp	r3, r6
    b84a:	bls.n	b85c <__udivmoddi4+0x134>
    b84c:	adds	r6, r6, r7
    b84e:	add.w	r2, r0, #4294967295
    b852:	bcs.n	b85a <__udivmoddi4+0x132>
    b854:	cmp	r3, r6
    b856:	bhi.w	b9f6 <__udivmoddi4+0x2ce>
    b85a:	mov	r0, r2
    b85c:	subs	r6, r6, r3
    b85e:	uxth	r2, r4
    b860:	udiv	r3, r6, r8
    b864:	mls	r6, r8, r3, r6
    b868:	orr.w	r4, r2, r6, lsl #16
    b86c:	mul.w	ip, ip, r3
    b870:	cmp	ip, r4
    b872:	bls.n	b884 <__udivmoddi4+0x15c>
    b874:	adds	r4, r4, r7
    b876:	add.w	r2, r3, #4294967295
    b87a:	bcs.n	b882 <__udivmoddi4+0x15a>
    b87c:	cmp	ip, r4
    b87e:	bhi.w	b9ec <__udivmoddi4+0x2c4>
    b882:	mov	r3, r2
    b884:	rsb	r4, ip, r4
    b888:	orr.w	r0, r3, r0, lsl #16
    b88c:	b.n	b7c8 <__udivmoddi4+0xa0>
    b88e:	mov	r1, r5
    b890:	mov	r0, r5
    b892:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b896:	rsb	r1, lr, #32
    b89a:	lsl.w	r3, r6, lr
    b89e:	lsl.w	r7, r7, lr
    b8a2:	lsr.w	r9, r0, r1
    b8a6:	mov.w	r8, r7, lsr #16
    b8aa:	lsrs	r6, r1
    b8ac:	orr.w	r9, r9, r3
    b8b0:	udiv	sl, r6, r8
    b8b4:	mov.w	r4, r9, lsr #16
    b8b8:	mls	r6, r8, sl, r6
    b8bc:	uxth.w	ip, r7
    b8c0:	orr.w	r3, r4, r6, lsl #16
    b8c4:	mul.w	r2, sl, ip
    b8c8:	cmp	r2, r3
    b8ca:	lsl.w	r4, r0, lr
    b8ce:	bls.n	b8e6 <__udivmoddi4+0x1be>
    b8d0:	adds	r3, r3, r7
    b8d2:	add.w	r1, sl, #4294967295
    b8d6:	bcs.w	b9e8 <__udivmoddi4+0x2c0>
    b8da:	cmp	r2, r3
    b8dc:	bls.w	b9e8 <__udivmoddi4+0x2c0>
    b8e0:	sub.w	sl, sl, #2
    b8e4:	add	r3, r7
    b8e6:	subs	r3, r3, r2
    b8e8:	uxth.w	r9, r9
    b8ec:	udiv	r1, r3, r8
    b8f0:	mls	r3, r8, r1, r3
    b8f4:	orr.w	r3, r9, r3, lsl #16
    b8f8:	mul.w	r6, r1, ip
    b8fc:	cmp	r6, r3
    b8fe:	bls.n	b910 <__udivmoddi4+0x1e8>
    b900:	adds	r3, r3, r7
    b902:	add.w	r2, r1, #4294967295
    b906:	bcs.n	b9e0 <__udivmoddi4+0x2b8>
    b908:	cmp	r6, r3
    b90a:	bls.n	b9e0 <__udivmoddi4+0x2b8>
    b90c:	subs	r1, #2
    b90e:	add	r3, r7
    b910:	subs	r3, r3, r6
    b912:	orr.w	r1, r1, sl, lsl #16
    b916:	b.n	b836 <__udivmoddi4+0x10e>
    b918:	rsb	lr, r1, #32
    b91c:	lsr.w	r4, r2, lr
    b920:	lsls	r3, r1
    b922:	orrs	r3, r4
    b924:	lsr.w	r7, r0, lr
    b928:	lsl.w	r4, r6, r1
    b92c:	mov.w	ip, r3, lsr #16
    b930:	lsr.w	r6, r6, lr
    b934:	orrs	r4, r7
    b936:	udiv	r9, r6, ip
    b93a:	lsrs	r7, r4, #16
    b93c:	mls	r6, ip, r9, r6
    b940:	uxth.w	r8, r3
    b944:	orr.w	r6, r7, r6, lsl #16
    b948:	mul.w	r7, r9, r8
    b94c:	cmp	r7, r6
    b94e:	lsl.w	r2, r2, r1
    b952:	lsl.w	sl, r0, r1
    b956:	bls.n	b96a <__udivmoddi4+0x242>
    b958:	adds	r6, r6, r3
    b95a:	add.w	r0, r9, #4294967295
    b95e:	bcs.n	b9e4 <__udivmoddi4+0x2bc>
    b960:	cmp	r7, r6
    b962:	bls.n	b9e4 <__udivmoddi4+0x2bc>
    b964:	sub.w	r9, r9, #2
    b968:	add	r6, r3
    b96a:	subs	r6, r6, r7
    b96c:	uxth	r0, r4
    b96e:	udiv	r4, r6, ip
    b972:	mls	r6, ip, r4, r6
    b976:	orr.w	r7, r0, r6, lsl #16
    b97a:	mul.w	r8, r4, r8
    b97e:	cmp	r8, r7
    b980:	bls.n	b992 <__udivmoddi4+0x26a>
    b982:	adds	r7, r7, r3
    b984:	add.w	r0, r4, #4294967295
    b988:	bcs.n	b9dc <__udivmoddi4+0x2b4>
    b98a:	cmp	r8, r7
    b98c:	bls.n	b9dc <__udivmoddi4+0x2b4>
    b98e:	subs	r4, #2
    b990:	add	r7, r3
    b992:	orr.w	r0, r4, r9, lsl #16
    b996:	rsb	r7, r8, r7
    b99a:	umull	r8, r9, r0, r2
    b99e:	cmp	r7, r9
    b9a0:	mov	r4, r8
    b9a2:	mov	r6, r9
    b9a4:	bcc.n	b9d0 <__udivmoddi4+0x2a8>
    b9a6:	beq.n	b9fc <__udivmoddi4+0x2d4>
    b9a8:	cbz	r5, ba04 <__udivmoddi4+0x2dc>
    b9aa:	subs.w	r3, sl, r4
    b9ae:	sbc.w	r7, r7, r6
    b9b2:	lsl.w	lr, r7, lr
    b9b6:	lsrs	r3, r1
    b9b8:	lsrs	r7, r1
    b9ba:	orr.w	r3, lr, r3
    b9be:	stmia.w	r5, {r3, r7}
    b9c2:	movs	r1, #0
    b9c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9c8:	mov	r3, r2
    b9ca:	b.n	b7be <__udivmoddi4+0x96>
    b9cc:	mov	r0, r2
    b9ce:	b.n	b792 <__udivmoddi4+0x6a>
    b9d0:	subs.w	r4, r8, r2
    b9d4:	sbc.w	r6, r9, r3
    b9d8:	subs	r0, #1
    b9da:	b.n	b9a8 <__udivmoddi4+0x280>
    b9dc:	mov	r4, r0
    b9de:	b.n	b992 <__udivmoddi4+0x26a>
    b9e0:	mov	r1, r2
    b9e2:	b.n	b910 <__udivmoddi4+0x1e8>
    b9e4:	mov	r9, r0
    b9e6:	b.n	b96a <__udivmoddi4+0x242>
    b9e8:	mov	sl, r1
    b9ea:	b.n	b8e6 <__udivmoddi4+0x1be>
    b9ec:	subs	r3, #2
    b9ee:	add	r4, r7
    b9f0:	b.n	b884 <__udivmoddi4+0x15c>
    b9f2:	mov	r0, r1
    b9f4:	b.n	b80c <__udivmoddi4+0xe4>
    b9f6:	subs	r0, #2
    b9f8:	add	r6, r7
    b9fa:	b.n	b85c <__udivmoddi4+0x134>
    b9fc:	cmp	sl, r8
    b9fe:	bcc.n	b9d0 <__udivmoddi4+0x2a8>
    ba00:	mov	r6, r7
    ba02:	b.n	b9a8 <__udivmoddi4+0x280>
    ba04:	mov	r1, r5
    ba06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba0a:	nop

0000ba0c <__aeabi_idiv0>:
    ba0c:	bx	lr
    ba0e:	nop

0000ba10 <__cxa_atexit>:
    ba10:	mov	r3, r2
    ba12:	mov	r2, r1
    ba14:	mov	r1, r0
    ba16:	movs	r0, #2
    ba18:	b.w	10168 <__register_exitproc>

0000ba1c <__errno>:
    ba1c:	ldr	r3, [pc, #4]	; (ba24 <__errno+0x8>)
    ba1e:	ldr	r0, [r3, #0]
    ba20:	bx	lr
    ba22:	nop
    ba24:	.word	0x20014c00

0000ba28 <__libc_init_array>:
    ba28:	push	{r4, r5, r6, lr}
    ba2a:	ldr	r6, [pc, #60]	; (ba68 <__libc_init_array+0x40>)
    ba2c:	ldr	r5, [pc, #60]	; (ba6c <__libc_init_array+0x44>)
    ba2e:	subs	r6, r6, r5
    ba30:	asrs	r6, r6, #2
    ba32:	it	ne
    ba34:	movne	r4, #0
    ba36:	beq.n	ba44 <__libc_init_array+0x1c>
    ba38:	adds	r4, #1
    ba3a:	ldr.w	r3, [r5], #4
    ba3e:	blx	r3
    ba40:	cmp	r6, r4
    ba42:	bne.n	ba38 <__libc_init_array+0x10>
    ba44:	ldr	r6, [pc, #40]	; (ba70 <__libc_init_array+0x48>)
    ba46:	ldr	r5, [pc, #44]	; (ba74 <__libc_init_array+0x4c>)
    ba48:	subs	r6, r6, r5
    ba4a:	bl	13ce4 <_init>
    ba4e:	asrs	r6, r6, #2
    ba50:	it	ne
    ba52:	movne	r4, #0
    ba54:	beq.n	ba64 <__libc_init_array+0x3c>
    ba56:	adds	r4, #1
    ba58:	ldr.w	r3, [r5], #4
    ba5c:	blx	r3
    ba5e:	cmp	r6, r4
    ba60:	bne.n	ba56 <__libc_init_array+0x2e>
    ba62:	pop	{r4, r5, r6, pc}
    ba64:	pop	{r4, r5, r6, pc}
    ba66:	nop
    ba68:	.word	0x00013cf0
    ba6c:	.word	0x00013cf0
    ba70:	.word	0x00013d48
    ba74:	.word	0x00013cf0

0000ba78 <__get_current_locale>:
    ba78:	ldr	r2, [pc, #12]	; (ba88 <__get_current_locale+0x10>)
    ba7a:	ldr	r3, [pc, #16]	; (ba8c <__get_current_locale+0x14>)
    ba7c:	ldr	r2, [r2, #0]
    ba7e:	ldr	r0, [r2, #52]	; 0x34
    ba80:	cmp	r0, #0
    ba82:	it	eq
    ba84:	moveq	r0, r3
    ba86:	bx	lr
    ba88:	.word	0x20014c00
    ba8c:	.word	0x20014c04

0000ba90 <__locale_mb_cur_max>:
    ba90:	ldr	r3, [pc, #16]	; (baa4 <__locale_mb_cur_max+0x14>)
    ba92:	ldr	r2, [pc, #20]	; (baa8 <__locale_mb_cur_max+0x18>)
    ba94:	ldr	r3, [r3, #0]
    ba96:	ldr	r3, [r3, #52]	; 0x34
    ba98:	cmp	r3, #0
    ba9a:	it	eq
    ba9c:	moveq	r3, r2
    ba9e:	ldrb.w	r0, [r3, #296]	; 0x128
    baa2:	bx	lr
    baa4:	.word	0x20014c00
    baa8:	.word	0x20014c04

0000baac <__locale_ctype_ptr_l>:
    baac:	ldr.w	r0, [r0, #236]	; 0xec
    bab0:	bx	lr
    bab2:	nop

0000bab4 <__locale_ctype_ptr>:
    bab4:	push	{r3, lr}
    bab6:	ldr	r3, [pc, #12]	; (bac4 <__locale_ctype_ptr+0x10>)
    bab8:	ldr	r0, [r3, #0]
    baba:	bl	ba78 <__get_current_locale>
    babe:	ldr.w	r0, [r0, #236]	; 0xec
    bac2:	pop	{r3, pc}
    bac4:	.word	0x20014c00

0000bac8 <malloc>:
    bac8:	ldr	r3, [pc, #8]	; (bad4 <malloc+0xc>)
    baca:	mov	r1, r0
    bacc:	ldr	r0, [r3, #0]
    bace:	b.w	bae8 <_malloc_r>
    bad2:	nop
    bad4:	.word	0x20014c00

0000bad8 <free>:
    bad8:	ldr	r3, [pc, #8]	; (bae4 <free+0xc>)
    bada:	mov	r1, r0
    badc:	ldr	r0, [r3, #0]
    bade:	b.w	11250 <_free_r>
    bae2:	nop
    bae4:	.word	0x20014c00

0000bae8 <_malloc_r>:
    bae8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baec:	add.w	r5, r1, #11
    baf0:	cmp	r5, #22
    baf2:	sub	sp, #12
    baf4:	mov	r6, r0
    baf6:	bls.w	bc38 <_malloc_r+0x150>
    bafa:	bics.w	r5, r5, #7
    bafe:	bmi.w	bc80 <_malloc_r+0x198>
    bb02:	cmp	r1, r5
    bb04:	bhi.w	bc80 <_malloc_r+0x198>
    bb08:	bl	c2f8 <__malloc_lock>
    bb0c:	cmp.w	r5, #504	; 0x1f8
    bb10:	bcc.w	c04c <_malloc_r+0x564>
    bb14:	lsrs	r3, r5, #9
    bb16:	beq.w	bc8e <_malloc_r+0x1a6>
    bb1a:	cmp	r3, #4
    bb1c:	bhi.w	be26 <_malloc_r+0x33e>
    bb20:	lsrs	r0, r5, #6
    bb22:	add.w	lr, r0, #57	; 0x39
    bb26:	mov.w	r3, lr, lsl #1
    bb2a:	adds	r0, #56	; 0x38
    bb2c:	ldr	r7, [pc, #784]	; (be40 <_malloc_r+0x358>)
    bb2e:	add.w	r3, r7, r3, lsl #2
    bb32:	sub.w	r1, r3, #8
    bb36:	ldr	r4, [r3, #4]
    bb38:	cmp	r1, r4
    bb3a:	bne.n	bb4c <_malloc_r+0x64>
    bb3c:	b.n	bc98 <_malloc_r+0x1b0>
    bb3e:	cmp	r2, #0
    bb40:	bge.w	bc9c <_malloc_r+0x1b4>
    bb44:	ldr	r4, [r4, #12]
    bb46:	cmp	r1, r4
    bb48:	beq.w	bc98 <_malloc_r+0x1b0>
    bb4c:	ldr	r3, [r4, #4]
    bb4e:	bic.w	r3, r3, #3
    bb52:	subs	r2, r3, r5
    bb54:	cmp	r2, #15
    bb56:	ble.n	bb3e <_malloc_r+0x56>
    bb58:	ldr	r1, [pc, #740]	; (be40 <_malloc_r+0x358>)
    bb5a:	ldr	r4, [r7, #16]
    bb5c:	add.w	lr, r1, #8
    bb60:	cmp	r4, lr
    bb62:	beq.w	becc <_malloc_r+0x3e4>
    bb66:	ldr	r3, [r4, #4]
    bb68:	bic.w	r3, r3, #3
    bb6c:	subs	r2, r3, r5
    bb6e:	cmp	r2, #15
    bb70:	bgt.w	bea6 <_malloc_r+0x3be>
    bb74:	cmp	r2, #0
    bb76:	str.w	lr, [r1, #20]
    bb7a:	str.w	lr, [r1, #16]
    bb7e:	bge.w	bcbe <_malloc_r+0x1d6>
    bb82:	cmp.w	r3, #512	; 0x200
    bb86:	bcs.w	be58 <_malloc_r+0x370>
    bb8a:	lsrs	r3, r3, #3
    bb8c:	add.w	ip, r3, #1
    bb90:	movs	r2, #1
    bb92:	asrs	r3, r3, #2
    bb94:	lsl.w	r3, r2, r3
    bb98:	ldr	r2, [r1, #4]
    bb9a:	ldr.w	r8, [r1, ip, lsl #3]
    bb9e:	str.w	r8, [r4, #8]
    bba2:	add.w	r9, r1, ip, lsl #3
    bba6:	orrs	r2, r3
    bba8:	sub.w	r3, r9, #8
    bbac:	str	r3, [r4, #12]
    bbae:	str	r2, [r1, #4]
    bbb0:	str.w	r4, [r1, ip, lsl #3]
    bbb4:	str.w	r4, [r8, #12]
    bbb8:	asrs	r3, r0, #2
    bbba:	movs	r4, #1
    bbbc:	lsls	r4, r3
    bbbe:	cmp	r4, r2
    bbc0:	bhi.w	bcd8 <_malloc_r+0x1f0>
    bbc4:	tst	r4, r2
    bbc6:	bne.n	bbd6 <_malloc_r+0xee>
    bbc8:	bic.w	r0, r0, #3
    bbcc:	lsls	r4, r4, #1
    bbce:	tst	r4, r2
    bbd0:	add.w	r0, r0, #4
    bbd4:	beq.n	bbcc <_malloc_r+0xe4>
    bbd6:	add.w	r9, r7, r0, lsl #3
    bbda:	mov	ip, r9
    bbdc:	mov	r8, r0
    bbde:	ldr.w	r1, [ip, #12]
    bbe2:	cmp	ip, r1
    bbe4:	bne.n	bbf6 <_malloc_r+0x10e>
    bbe6:	b.n	bed0 <_malloc_r+0x3e8>
    bbe8:	cmp	r2, #0
    bbea:	bge.w	bef0 <_malloc_r+0x408>
    bbee:	ldr	r1, [r1, #12]
    bbf0:	cmp	ip, r1
    bbf2:	beq.w	bed0 <_malloc_r+0x3e8>
    bbf6:	ldr	r3, [r1, #4]
    bbf8:	bic.w	r3, r3, #3
    bbfc:	subs	r2, r3, r5
    bbfe:	cmp	r2, #15
    bc00:	ble.n	bbe8 <_malloc_r+0x100>
    bc02:	mov	r4, r1
    bc04:	ldr.w	ip, [r1, #12]
    bc08:	ldr.w	r8, [r4, #8]!
    bc0c:	adds	r3, r1, r5
    bc0e:	orr.w	r5, r5, #1
    bc12:	str	r5, [r1, #4]
    bc14:	orr.w	r1, r2, #1
    bc18:	str.w	ip, [r8, #12]
    bc1c:	mov	r0, r6
    bc1e:	str.w	r8, [ip, #8]
    bc22:	str	r3, [r7, #20]
    bc24:	str	r3, [r7, #16]
    bc26:	str.w	lr, [r3, #12]
    bc2a:	str.w	lr, [r3, #8]
    bc2e:	str	r1, [r3, #4]
    bc30:	str	r2, [r3, r2]
    bc32:	bl	c2fc <__malloc_unlock>
    bc36:	b.n	bc78 <_malloc_r+0x190>
    bc38:	cmp	r1, #16
    bc3a:	bhi.n	bc80 <_malloc_r+0x198>
    bc3c:	bl	c2f8 <__malloc_lock>
    bc40:	movs	r5, #16
    bc42:	movs	r3, #6
    bc44:	movs	r0, #2
    bc46:	ldr	r7, [pc, #504]	; (be40 <_malloc_r+0x358>)
    bc48:	add.w	r3, r7, r3, lsl #2
    bc4c:	sub.w	r2, r3, #8
    bc50:	ldr	r4, [r3, #4]
    bc52:	cmp	r4, r2
    bc54:	beq.w	bee2 <_malloc_r+0x3fa>
    bc58:	ldr	r3, [r4, #4]
    bc5a:	ldr	r1, [r4, #12]
    bc5c:	ldr	r5, [r4, #8]
    bc5e:	bic.w	r3, r3, #3
    bc62:	add	r3, r4
    bc64:	mov	r0, r6
    bc66:	ldr	r2, [r3, #4]
    bc68:	str	r1, [r5, #12]
    bc6a:	orr.w	r2, r2, #1
    bc6e:	str	r5, [r1, #8]
    bc70:	str	r2, [r3, #4]
    bc72:	bl	c2fc <__malloc_unlock>
    bc76:	adds	r4, #8
    bc78:	mov	r0, r4
    bc7a:	add	sp, #12
    bc7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc80:	movs	r4, #0
    bc82:	movs	r3, #12
    bc84:	mov	r0, r4
    bc86:	str	r3, [r6, #0]
    bc88:	add	sp, #12
    bc8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc8e:	movs	r3, #128	; 0x80
    bc90:	mov.w	lr, #64	; 0x40
    bc94:	movs	r0, #63	; 0x3f
    bc96:	b.n	bb2c <_malloc_r+0x44>
    bc98:	mov	r0, lr
    bc9a:	b.n	bb58 <_malloc_r+0x70>
    bc9c:	add	r3, r4
    bc9e:	ldr	r1, [r4, #12]
    bca0:	ldr	r2, [r3, #4]
    bca2:	ldr	r5, [r4, #8]
    bca4:	orr.w	r2, r2, #1
    bca8:	str	r1, [r5, #12]
    bcaa:	mov	r0, r6
    bcac:	str	r5, [r1, #8]
    bcae:	str	r2, [r3, #4]
    bcb0:	bl	c2fc <__malloc_unlock>
    bcb4:	adds	r4, #8
    bcb6:	mov	r0, r4
    bcb8:	add	sp, #12
    bcba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcbe:	add	r3, r4
    bcc0:	mov	r0, r6
    bcc2:	ldr	r2, [r3, #4]
    bcc4:	orr.w	r2, r2, #1
    bcc8:	str	r2, [r3, #4]
    bcca:	bl	c2fc <__malloc_unlock>
    bcce:	adds	r4, #8
    bcd0:	mov	r0, r4
    bcd2:	add	sp, #12
    bcd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcd8:	ldr	r4, [r7, #8]
    bcda:	ldr	r3, [r4, #4]
    bcdc:	bic.w	r8, r3, #3
    bce0:	cmp	r8, r5
    bce2:	bcc.n	bcee <_malloc_r+0x206>
    bce4:	rsb	r3, r5, r8
    bce8:	cmp	r3, #15
    bcea:	bgt.w	be06 <_malloc_r+0x31e>
    bcee:	ldr	r3, [pc, #340]	; (be44 <_malloc_r+0x35c>)
    bcf0:	ldr.w	r9, [pc, #352]	; be54 <_malloc_r+0x36c>
    bcf4:	ldr	r2, [r3, #0]
    bcf6:	ldr.w	r3, [r9]
    bcfa:	adds	r3, #1
    bcfc:	add	r2, r5
    bcfe:	add.w	sl, r4, r8
    bd02:	beq.w	bfc6 <_malloc_r+0x4de>
    bd06:	add.w	r2, r2, #4096	; 0x1000
    bd0a:	adds	r2, #15
    bd0c:	bic.w	r2, r2, #4080	; 0xff0
    bd10:	bic.w	r2, r2, #15
    bd14:	mov	r1, r2
    bd16:	mov	r0, r6
    bd18:	str	r2, [sp, #4]
    bd1a:	bl	c6e0 <_sbrk_r>
    bd1e:	cmp.w	r0, #4294967295
    bd22:	mov	fp, r0
    bd24:	ldr	r2, [sp, #4]
    bd26:	beq.w	bfda <_malloc_r+0x4f2>
    bd2a:	cmp	sl, r0
    bd2c:	bhi.w	bf28 <_malloc_r+0x440>
    bd30:	ldr	r3, [pc, #276]	; (be48 <_malloc_r+0x360>)
    bd32:	ldr	r1, [r3, #0]
    bd34:	cmp	sl, fp
    bd36:	add	r1, r2
    bd38:	str	r1, [r3, #0]
    bd3a:	beq.w	bfe4 <_malloc_r+0x4fc>
    bd3e:	ldr.w	r0, [r9]
    bd42:	ldr.w	lr, [pc, #272]	; be54 <_malloc_r+0x36c>
    bd46:	adds	r0, #1
    bd48:	ittet	ne
    bd4a:	rsbne	sl, sl, fp
    bd4e:	addne	r1, sl
    bd50:	streq.w	fp, [lr]
    bd54:	strne	r1, [r3, #0]
    bd56:	ands.w	r1, fp, #7
    bd5a:	beq.w	bf8c <_malloc_r+0x4a4>
    bd5e:	rsb	r0, r1, #8
    bd62:	rsb	r1, r1, #4096	; 0x1000
    bd66:	add	fp, r0
    bd68:	adds	r1, #8
    bd6a:	add	r2, fp
    bd6c:	ubfx	r2, r2, #0, #12
    bd70:	rsb	r9, r2, r1
    bd74:	mov	r1, r9
    bd76:	mov	r0, r6
    bd78:	str	r3, [sp, #4]
    bd7a:	bl	c6e0 <_sbrk_r>
    bd7e:	adds	r3, r0, #1
    bd80:	ldr	r3, [sp, #4]
    bd82:	beq.w	c004 <_malloc_r+0x51c>
    bd86:	rsb	r2, fp, r0
    bd8a:	add	r2, r9
    bd8c:	orr.w	r2, r2, #1
    bd90:	ldr	r1, [r3, #0]
    bd92:	str.w	fp, [r7, #8]
    bd96:	add	r1, r9
    bd98:	cmp	r4, r7
    bd9a:	str.w	r2, [fp, #4]
    bd9e:	str	r1, [r3, #0]
    bda0:	ldr.w	r9, [pc, #164]	; be48 <_malloc_r+0x360>
    bda4:	beq.n	bdd4 <_malloc_r+0x2ec>
    bda6:	cmp.w	r8, #15
    bdaa:	bls.w	bfa8 <_malloc_r+0x4c0>
    bdae:	ldr	r2, [r4, #4]
    bdb0:	sub.w	r3, r8, #12
    bdb4:	bic.w	r3, r3, #7
    bdb8:	adds	r0, r4, r3
    bdba:	and.w	r2, r2, #1
    bdbe:	mov.w	lr, #5
    bdc2:	orrs	r2, r3
    bdc4:	cmp	r3, #15
    bdc6:	str	r2, [r4, #4]
    bdc8:	str.w	lr, [r0, #4]
    bdcc:	str.w	lr, [r0, #8]
    bdd0:	bhi.w	c00c <_malloc_r+0x524>
    bdd4:	ldr	r3, [pc, #116]	; (be4c <_malloc_r+0x364>)
    bdd6:	ldr	r4, [r7, #8]
    bdd8:	ldr	r2, [r3, #0]
    bdda:	cmp	r1, r2
    bddc:	it	hi
    bdde:	strhi	r1, [r3, #0]
    bde0:	ldr	r3, [pc, #108]	; (be50 <_malloc_r+0x368>)
    bde2:	ldr	r2, [r3, #0]
    bde4:	cmp	r1, r2
    bde6:	ldr	r2, [r4, #4]
    bde8:	it	hi
    bdea:	strhi	r1, [r3, #0]
    bdec:	bic.w	r2, r2, #3
    bdf0:	cmp	r5, r2
    bdf2:	sub.w	r3, r2, r5
    bdf6:	bhi.n	bdfc <_malloc_r+0x314>
    bdf8:	cmp	r3, #15
    bdfa:	bgt.n	be06 <_malloc_r+0x31e>
    bdfc:	mov	r0, r6
    bdfe:	bl	c2fc <__malloc_unlock>
    be02:	movs	r4, #0
    be04:	b.n	bc78 <_malloc_r+0x190>
    be06:	adds	r2, r4, r5
    be08:	orr.w	r3, r3, #1
    be0c:	orr.w	r5, r5, #1
    be10:	str	r5, [r4, #4]
    be12:	mov	r0, r6
    be14:	str	r2, [r7, #8]
    be16:	str	r3, [r2, #4]
    be18:	bl	c2fc <__malloc_unlock>
    be1c:	adds	r4, #8
    be1e:	mov	r0, r4
    be20:	add	sp, #12
    be22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be26:	cmp	r3, #20
    be28:	bls.n	bf0e <_malloc_r+0x426>
    be2a:	cmp	r3, #84	; 0x54
    be2c:	bhi.w	bf78 <_malloc_r+0x490>
    be30:	lsrs	r0, r5, #12
    be32:	add.w	lr, r0, #111	; 0x6f
    be36:	mov.w	r3, lr, lsl #1
    be3a:	adds	r0, #110	; 0x6e
    be3c:	b.n	bb2c <_malloc_r+0x44>
    be3e:	nop
    be40:	.word	0x20014d70
    be44:	.word	0x2001af20
    be48:	.word	0x2001af24
    be4c:	.word	0x2001af1c
    be50:	.word	0x2001af18
    be54:	.word	0x2001517c
    be58:	lsrs	r2, r3, #9
    be5a:	cmp	r2, #4
    be5c:	bls.n	bf1c <_malloc_r+0x434>
    be5e:	cmp	r2, #20
    be60:	bhi.w	bfca <_malloc_r+0x4e2>
    be64:	add.w	r1, r2, #92	; 0x5c
    be68:	lsls	r1, r1, #1
    be6a:	adds	r2, #91	; 0x5b
    be6c:	add.w	ip, r7, r1, lsl #2
    be70:	ldr.w	r1, [r7, r1, lsl #2]
    be74:	ldr.w	r8, [pc, #476]	; c054 <_malloc_r+0x56c>
    be78:	sub.w	ip, ip, #8
    be7c:	cmp	ip, r1
    be7e:	beq.w	bf92 <_malloc_r+0x4aa>
    be82:	ldr	r2, [r1, #4]
    be84:	bic.w	r2, r2, #3
    be88:	cmp	r3, r2
    be8a:	bcs.n	be92 <_malloc_r+0x3aa>
    be8c:	ldr	r1, [r1, #8]
    be8e:	cmp	ip, r1
    be90:	bne.n	be82 <_malloc_r+0x39a>
    be92:	ldr.w	ip, [r1, #12]
    be96:	ldr	r2, [r7, #4]
    be98:	str.w	ip, [r4, #12]
    be9c:	str	r1, [r4, #8]
    be9e:	str.w	r4, [ip, #8]
    bea2:	str	r4, [r1, #12]
    bea4:	b.n	bbb8 <_malloc_r+0xd0>
    bea6:	adds	r3, r4, r5
    bea8:	orr.w	r7, r2, #1
    beac:	orr.w	r5, r5, #1
    beb0:	str	r5, [r4, #4]
    beb2:	mov	r0, r6
    beb4:	str	r3, [r1, #20]
    beb6:	str	r3, [r1, #16]
    beb8:	str.w	lr, [r3, #12]
    bebc:	str.w	lr, [r3, #8]
    bec0:	str	r7, [r3, #4]
    bec2:	str	r2, [r3, r2]
    bec4:	adds	r4, #8
    bec6:	bl	c2fc <__malloc_unlock>
    beca:	b.n	bc78 <_malloc_r+0x190>
    becc:	ldr	r2, [r1, #4]
    bece:	b.n	bbb8 <_malloc_r+0xd0>
    bed0:	add.w	r8, r8, #1
    bed4:	tst.w	r8, #3
    bed8:	add.w	ip, ip, #8
    bedc:	bne.w	bbde <_malloc_r+0xf6>
    bee0:	b.n	bf44 <_malloc_r+0x45c>
    bee2:	ldr	r4, [r3, #12]
    bee4:	cmp	r3, r4
    bee6:	it	eq
    bee8:	addeq	r0, #2
    beea:	beq.w	bb58 <_malloc_r+0x70>
    beee:	b.n	bc58 <_malloc_r+0x170>
    bef0:	add	r3, r1
    bef2:	mov	r4, r1
    bef4:	ldr	r2, [r3, #4]
    bef6:	ldr	r1, [r1, #12]
    bef8:	ldr.w	r5, [r4, #8]!
    befc:	orr.w	r2, r2, #1
    bf00:	str	r2, [r3, #4]
    bf02:	mov	r0, r6
    bf04:	str	r1, [r5, #12]
    bf06:	str	r5, [r1, #8]
    bf08:	bl	c2fc <__malloc_unlock>
    bf0c:	b.n	bc78 <_malloc_r+0x190>
    bf0e:	add.w	lr, r3, #92	; 0x5c
    bf12:	add.w	r0, r3, #91	; 0x5b
    bf16:	mov.w	r3, lr, lsl #1
    bf1a:	b.n	bb2c <_malloc_r+0x44>
    bf1c:	lsrs	r2, r3, #6
    bf1e:	add.w	r1, r2, #57	; 0x39
    bf22:	lsls	r1, r1, #1
    bf24:	adds	r2, #56	; 0x38
    bf26:	b.n	be6c <_malloc_r+0x384>
    bf28:	cmp	r4, r7
    bf2a:	ldr	r3, [pc, #296]	; (c054 <_malloc_r+0x56c>)
    bf2c:	beq.w	bd30 <_malloc_r+0x248>
    bf30:	ldr	r4, [r3, #8]
    bf32:	ldr	r2, [r4, #4]
    bf34:	bic.w	r2, r2, #3
    bf38:	b.n	bdf0 <_malloc_r+0x308>
    bf3a:	ldr.w	r3, [r9], #-8
    bf3e:	cmp	r9, r3
    bf40:	bne.w	c048 <_malloc_r+0x560>
    bf44:	tst.w	r0, #3
    bf48:	add.w	r0, r0, #4294967295
    bf4c:	bne.n	bf3a <_malloc_r+0x452>
    bf4e:	ldr	r3, [r7, #4]
    bf50:	bic.w	r3, r3, r4
    bf54:	str	r3, [r7, #4]
    bf56:	lsls	r4, r4, #1
    bf58:	cmp	r4, r3
    bf5a:	bhi.w	bcd8 <_malloc_r+0x1f0>
    bf5e:	cmp	r4, #0
    bf60:	beq.w	bcd8 <_malloc_r+0x1f0>
    bf64:	tst	r4, r3
    bf66:	mov	r0, r8
    bf68:	bne.w	bbd6 <_malloc_r+0xee>
    bf6c:	lsls	r4, r4, #1
    bf6e:	tst	r4, r3
    bf70:	add.w	r0, r0, #4
    bf74:	beq.n	bf6c <_malloc_r+0x484>
    bf76:	b.n	bbd6 <_malloc_r+0xee>
    bf78:	cmp.w	r3, #340	; 0x154
    bf7c:	bhi.n	bfb0 <_malloc_r+0x4c8>
    bf7e:	lsrs	r0, r5, #15
    bf80:	add.w	lr, r0, #120	; 0x78
    bf84:	mov.w	r3, lr, lsl #1
    bf88:	adds	r0, #119	; 0x77
    bf8a:	b.n	bb2c <_malloc_r+0x44>
    bf8c:	mov.w	r1, #4096	; 0x1000
    bf90:	b.n	bd6a <_malloc_r+0x282>
    bf92:	movs	r1, #1
    bf94:	ldr.w	r3, [r8, #4]
    bf98:	asrs	r2, r2, #2
    bf9a:	lsl.w	r2, r1, r2
    bf9e:	orrs	r2, r3
    bfa0:	str.w	r2, [r8, #4]
    bfa4:	mov	r1, ip
    bfa6:	b.n	be98 <_malloc_r+0x3b0>
    bfa8:	movs	r3, #1
    bfaa:	str.w	r3, [fp, #4]
    bfae:	b.n	bdfc <_malloc_r+0x314>
    bfb0:	movw	r2, #1364	; 0x554
    bfb4:	cmp	r3, r2
    bfb6:	bhi.n	bffa <_malloc_r+0x512>
    bfb8:	lsrs	r0, r5, #18
    bfba:	add.w	lr, r0, #125	; 0x7d
    bfbe:	mov.w	r3, lr, lsl #1
    bfc2:	adds	r0, #124	; 0x7c
    bfc4:	b.n	bb2c <_malloc_r+0x44>
    bfc6:	adds	r2, #16
    bfc8:	b.n	bd14 <_malloc_r+0x22c>
    bfca:	cmp	r2, #84	; 0x54
    bfcc:	bhi.n	c01c <_malloc_r+0x534>
    bfce:	lsrs	r2, r3, #12
    bfd0:	add.w	r1, r2, #111	; 0x6f
    bfd4:	lsls	r1, r1, #1
    bfd6:	adds	r2, #110	; 0x6e
    bfd8:	b.n	be6c <_malloc_r+0x384>
    bfda:	ldr	r4, [r7, #8]
    bfdc:	ldr	r2, [r4, #4]
    bfde:	bic.w	r2, r2, #3
    bfe2:	b.n	bdf0 <_malloc_r+0x308>
    bfe4:	ubfx	r0, sl, #0, #12
    bfe8:	cmp	r0, #0
    bfea:	bne.w	bd3e <_malloc_r+0x256>
    bfee:	add	r2, r8
    bff0:	ldr	r3, [r7, #8]
    bff2:	orr.w	r2, r2, #1
    bff6:	str	r2, [r3, #4]
    bff8:	b.n	bdd4 <_malloc_r+0x2ec>
    bffa:	movs	r3, #254	; 0xfe
    bffc:	mov.w	lr, #127	; 0x7f
    c000:	movs	r0, #126	; 0x7e
    c002:	b.n	bb2c <_malloc_r+0x44>
    c004:	movs	r2, #1
    c006:	mov.w	r9, #0
    c00a:	b.n	bd90 <_malloc_r+0x2a8>
    c00c:	add.w	r1, r4, #8
    c010:	mov	r0, r6
    c012:	bl	11250 <_free_r>
    c016:	ldr.w	r1, [r9]
    c01a:	b.n	bdd4 <_malloc_r+0x2ec>
    c01c:	cmp.w	r2, #340	; 0x154
    c020:	bhi.n	c02e <_malloc_r+0x546>
    c022:	lsrs	r2, r3, #15
    c024:	add.w	r1, r2, #120	; 0x78
    c028:	lsls	r1, r1, #1
    c02a:	adds	r2, #119	; 0x77
    c02c:	b.n	be6c <_malloc_r+0x384>
    c02e:	movw	r1, #1364	; 0x554
    c032:	cmp	r2, r1
    c034:	bhi.n	c042 <_malloc_r+0x55a>
    c036:	lsrs	r2, r3, #18
    c038:	add.w	r1, r2, #125	; 0x7d
    c03c:	lsls	r1, r1, #1
    c03e:	adds	r2, #124	; 0x7c
    c040:	b.n	be6c <_malloc_r+0x384>
    c042:	movs	r1, #254	; 0xfe
    c044:	movs	r2, #126	; 0x7e
    c046:	b.n	be6c <_malloc_r+0x384>
    c048:	ldr	r3, [r7, #4]
    c04a:	b.n	bf56 <_malloc_r+0x46e>
    c04c:	lsrs	r0, r5, #3
    c04e:	adds	r3, r0, #1
    c050:	lsls	r3, r3, #1
    c052:	b.n	bc46 <_malloc_r+0x15e>
    c054:	.word	0x20014d70

0000c058 <__ascii_mbtowc>:
    c058:	sub	sp, #8
    c05a:	cbz	r1, c070 <__ascii_mbtowc+0x18>
    c05c:	cbz	r2, c076 <__ascii_mbtowc+0x1e>
    c05e:	cbz	r3, c07c <__ascii_mbtowc+0x24>
    c060:	ldrb	r3, [r2, #0]
    c062:	str	r3, [r1, #0]
    c064:	ldrb	r2, [r2, #0]
    c066:	adds	r0, r2, #0
    c068:	it	ne
    c06a:	movne	r0, #1
    c06c:	add	sp, #8
    c06e:	bx	lr
    c070:	add	r1, sp, #4
    c072:	cmp	r2, #0
    c074:	bne.n	c05e <__ascii_mbtowc+0x6>
    c076:	mov	r0, r2
    c078:	add	sp, #8
    c07a:	bx	lr
    c07c:	mvn.w	r0, #1
    c080:	b.n	c06c <__ascii_mbtowc+0x14>
    c082:	nop
    c084:			; <UNDEFINED> instruction: 0xffffffff
    c088:			; <UNDEFINED> instruction: 0xffffffff
    c08c:			; <UNDEFINED> instruction: 0xffffffff

0000c090 <memchr>:
    c090:	and.w	r1, r1, #255	; 0xff
    c094:	cmp	r2, #16
    c096:	blt.n	c0f0 <memchr+0x60>
    c098:	tst.w	r0, #7
    c09c:	beq.n	c0b0 <memchr+0x20>
    c09e:	ldrb.w	r3, [r0], #1
    c0a2:	subs	r2, #1
    c0a4:	cmp	r3, r1
    c0a6:	beq.n	c104 <memchr+0x74>
    c0a8:	tst.w	r0, #7
    c0ac:	cbz	r2, c100 <memchr+0x70>
    c0ae:	bne.n	c09e <memchr+0xe>
    c0b0:	push	{r4, r5, r6, r7}
    c0b2:	orr.w	r1, r1, r1, lsl #8
    c0b6:	orr.w	r1, r1, r1, lsl #16
    c0ba:	bic.w	r4, r2, #7
    c0be:	mvns.w	r7, #0
    c0c2:	movs	r3, #0
    c0c4:	ldrd	r5, r6, [r0], #8
    c0c8:	subs	r4, #8
    c0ca:	eor.w	r5, r5, r1
    c0ce:	eor.w	r6, r6, r1
    c0d2:	uadd8	r5, r5, r7
    c0d6:	sel	r5, r3, r7
    c0da:	uadd8	r6, r6, r7
    c0de:	sel	r6, r5, r7
    c0e2:	cbnz	r6, c108 <memchr+0x78>
    c0e4:	bne.n	c0c4 <memchr+0x34>
    c0e6:	pop	{r4, r5, r6, r7}
    c0e8:	and.w	r1, r1, #255	; 0xff
    c0ec:	and.w	r2, r2, #7
    c0f0:	cbz	r2, c100 <memchr+0x70>
    c0f2:	ldrb.w	r3, [r0], #1
    c0f6:	subs	r2, #1
    c0f8:	eor.w	r3, r3, r1
    c0fc:	cbz	r3, c104 <memchr+0x74>
    c0fe:	bne.n	c0f2 <memchr+0x62>
    c100:	movs	r0, #0
    c102:	bx	lr
    c104:	subs	r0, #1
    c106:	bx	lr
    c108:	cmp	r5, #0
    c10a:	itte	eq
    c10c:	moveq	r5, r6
    c10e:	subeq	r0, #3
    c110:	subne	r0, #7
    c112:	tst.w	r5, #1
    c116:	bne.n	c128 <memchr+0x98>
    c118:	adds	r0, #1
    c11a:	tst.w	r5, #256	; 0x100
    c11e:	ittt	eq
    c120:	addeq	r0, #1
    c122:	tsteq.w	r5, #98304	; 0x18000
    c126:	addeq	r0, #1
    c128:	pop	{r4, r5, r6, r7}
    c12a:	subs	r0, #1
    c12c:	bx	lr
    c12e:	nop

0000c130 <memcmp>:
    c130:	cmp	r2, #3
    c132:	push	{r4, r5, r6}
    c134:	bls.n	c184 <memcmp+0x54>
    c136:	orr.w	r3, r0, r1
    c13a:	lsls	r3, r3, #30
    c13c:	beq.n	c162 <memcmp+0x32>
    c13e:	ldrb	r4, [r0, #0]
    c140:	ldrb	r5, [r1, #0]
    c142:	cmp	r4, r5
    c144:	bne.n	c18c <memcmp+0x5c>
    c146:	add	r2, r0
    c148:	adds	r3, r0, #1
    c14a:	b.n	c158 <memcmp+0x28>
    c14c:	ldrb.w	r4, [r3], #1
    c150:	ldrb.w	r5, [r1, #1]!
    c154:	cmp	r4, r5
    c156:	bne.n	c18c <memcmp+0x5c>
    c158:	cmp	r3, r2
    c15a:	bne.n	c14c <memcmp+0x1c>
    c15c:	movs	r0, #0
    c15e:	pop	{r4, r5, r6}
    c160:	bx	lr
    c162:	mov	r4, r1
    c164:	mov	r3, r0
    c166:	ldr	r6, [r3, #0]
    c168:	ldr	r5, [r4, #0]
    c16a:	cmp	r6, r5
    c16c:	mov	r0, r3
    c16e:	mov	r1, r4
    c170:	add.w	r3, r3, #4
    c174:	add.w	r4, r4, #4
    c178:	bne.n	c13e <memcmp+0xe>
    c17a:	subs	r2, #4
    c17c:	cmp	r2, #3
    c17e:	mov	r0, r3
    c180:	mov	r1, r4
    c182:	bhi.n	c166 <memcmp+0x36>
    c184:	cmp	r2, #0
    c186:	bne.n	c13e <memcmp+0xe>
    c188:	mov	r0, r2
    c18a:	b.n	c15e <memcmp+0x2e>
    c18c:	subs	r0, r4, r5
    c18e:	pop	{r4, r5, r6}
    c190:	bx	lr
    c192:	nop

0000c194 <memmove>:
    c194:	cmp	r0, r1
    c196:	push	{r4, r5, r6, r7, lr}
    c198:	bls.n	c1b6 <memmove+0x22>
    c19a:	adds	r3, r1, r2
    c19c:	cmp	r0, r3
    c19e:	bcs.n	c1b6 <memmove+0x22>
    c1a0:	adds	r1, r0, r2
    c1a2:	cmp	r2, #0
    c1a4:	beq.n	c24a <memmove+0xb6>
    c1a6:	subs	r2, r3, r2
    c1a8:	ldrb.w	r4, [r3, #-1]!
    c1ac:	strb.w	r4, [r1, #-1]!
    c1b0:	cmp	r3, r2
    c1b2:	bne.n	c1a8 <memmove+0x14>
    c1b4:	pop	{r4, r5, r6, r7, pc}
    c1b6:	cmp	r2, #15
    c1b8:	bls.n	c24c <memmove+0xb8>
    c1ba:	orr.w	r3, r1, r0
    c1be:	lsls	r3, r3, #30
    c1c0:	bne.n	c250 <memmove+0xbc>
    c1c2:	add.w	r4, r0, #16
    c1c6:	add.w	r3, r1, #16
    c1ca:	mov	r5, r2
    c1cc:	ldr.w	r6, [r3, #-16]
    c1d0:	str.w	r6, [r4, #-16]
    c1d4:	ldr.w	r6, [r3, #-12]
    c1d8:	str.w	r6, [r4, #-12]
    c1dc:	ldr.w	r6, [r3, #-8]
    c1e0:	str.w	r6, [r4, #-8]
    c1e4:	subs	r5, #16
    c1e6:	ldr.w	r6, [r3, #-4]
    c1ea:	str.w	r6, [r4, #-4]
    c1ee:	cmp	r5, #15
    c1f0:	add.w	r3, r3, #16
    c1f4:	add.w	r4, r4, #16
    c1f8:	bhi.n	c1cc <memmove+0x38>
    c1fa:	sub.w	r3, r2, #16
    c1fe:	bic.w	r3, r3, #15
    c202:	and.w	lr, r2, #15
    c206:	adds	r3, #16
    c208:	cmp.w	lr, #3
    c20c:	add	r1, r3
    c20e:	add	r3, r0
    c210:	bls.n	c256 <memmove+0xc2>
    c212:	subs	r6, r3, #4
    c214:	mov	r5, r1
    c216:	mov	r4, lr
    c218:	subs	r4, #4
    c21a:	ldr.w	r7, [r5], #4
    c21e:	str.w	r7, [r6, #4]!
    c222:	cmp	r4, #3
    c224:	bhi.n	c218 <memmove+0x84>
    c226:	sub.w	r4, lr, #4
    c22a:	bic.w	r4, r4, #3
    c22e:	adds	r4, #4
    c230:	add	r3, r4
    c232:	add	r1, r4
    c234:	and.w	r2, r2, #3
    c238:	cbz	r2, c254 <memmove+0xc0>
    c23a:	subs	r3, #1
    c23c:	add	r2, r1
    c23e:	ldrb.w	r4, [r1], #1
    c242:	strb.w	r4, [r3, #1]!
    c246:	cmp	r2, r1
    c248:	bne.n	c23e <memmove+0xaa>
    c24a:	pop	{r4, r5, r6, r7, pc}
    c24c:	mov	r3, r0
    c24e:	b.n	c238 <memmove+0xa4>
    c250:	mov	r3, r0
    c252:	b.n	c23a <memmove+0xa6>
    c254:	pop	{r4, r5, r6, r7, pc}
    c256:	mov	r2, lr
    c258:	b.n	c238 <memmove+0xa4>
    c25a:	nop

0000c25c <memset>:
    c25c:	push	{r4, r5, r6}
    c25e:	lsls	r4, r0, #30
    c260:	beq.n	c2f0 <memset+0x94>
    c262:	subs	r4, r2, #1
    c264:	cmp	r2, #0
    c266:	beq.n	c2ec <memset+0x90>
    c268:	uxtb	r5, r1
    c26a:	mov	r3, r0
    c26c:	b.n	c274 <memset+0x18>
    c26e:	subs	r2, r4, #1
    c270:	cbz	r4, c2ec <memset+0x90>
    c272:	mov	r4, r2
    c274:	strb.w	r5, [r3], #1
    c278:	lsls	r2, r3, #30
    c27a:	bne.n	c26e <memset+0x12>
    c27c:	cmp	r4, #3
    c27e:	bls.n	c2de <memset+0x82>
    c280:	uxtb	r5, r1
    c282:	orr.w	r5, r5, r5, lsl #8
    c286:	cmp	r4, #15
    c288:	orr.w	r5, r5, r5, lsl #16
    c28c:	bls.n	c2c2 <memset+0x66>
    c28e:	add.w	r2, r3, #16
    c292:	mov	r6, r4
    c294:	subs	r6, #16
    c296:	cmp	r6, #15
    c298:	str.w	r5, [r2, #-16]
    c29c:	str.w	r5, [r2, #-12]
    c2a0:	str.w	r5, [r2, #-8]
    c2a4:	str.w	r5, [r2, #-4]
    c2a8:	add.w	r2, r2, #16
    c2ac:	bhi.n	c294 <memset+0x38>
    c2ae:	sub.w	r2, r4, #16
    c2b2:	bic.w	r2, r2, #15
    c2b6:	and.w	r4, r4, #15
    c2ba:	adds	r2, #16
    c2bc:	cmp	r4, #3
    c2be:	add	r3, r2
    c2c0:	bls.n	c2de <memset+0x82>
    c2c2:	mov	r6, r3
    c2c4:	mov	r2, r4
    c2c6:	subs	r2, #4
    c2c8:	cmp	r2, #3
    c2ca:	str.w	r5, [r6], #4
    c2ce:	bhi.n	c2c6 <memset+0x6a>
    c2d0:	subs	r2, r4, #4
    c2d2:	bic.w	r2, r2, #3
    c2d6:	adds	r2, #4
    c2d8:	add	r3, r2
    c2da:	and.w	r4, r4, #3
    c2de:	cbz	r4, c2ec <memset+0x90>
    c2e0:	uxtb	r1, r1
    c2e2:	add	r4, r3
    c2e4:	strb.w	r1, [r3], #1
    c2e8:	cmp	r3, r4
    c2ea:	bne.n	c2e4 <memset+0x88>
    c2ec:	pop	{r4, r5, r6}
    c2ee:	bx	lr
    c2f0:	mov	r4, r2
    c2f2:	mov	r3, r0
    c2f4:	b.n	c27c <memset+0x20>
    c2f6:	nop

0000c2f8 <__malloc_lock>:
    c2f8:	bx	lr
    c2fa:	nop

0000c2fc <__malloc_unlock>:
    c2fc:	bx	lr
    c2fe:	nop

0000c300 <_realloc_r>:
    c300:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c304:	mov	r7, r2
    c306:	sub	sp, #12
    c308:	cmp	r1, #0
    c30a:	beq.w	c490 <_realloc_r+0x190>
    c30e:	mov	r6, r1
    c310:	mov	r9, r0
    c312:	add.w	r5, r7, #11
    c316:	bl	c2f8 <__malloc_lock>
    c31a:	ldr.w	lr, [r6, #-4]
    c31e:	cmp	r5, #22
    c320:	bic.w	r4, lr, #3
    c324:	sub.w	r8, r6, #8
    c328:	bhi.n	c3ac <_realloc_r+0xac>
    c32a:	movs	r2, #16
    c32c:	mov	r5, r2
    c32e:	cmp	r7, r5
    c330:	bhi.n	c3b6 <_realloc_r+0xb6>
    c332:	cmp	r4, r2
    c334:	bge.n	c422 <_realloc_r+0x122>
    c336:	ldr	r3, [pc, #804]	; (c65c <_realloc_r+0x35c>)
    c338:	ldr	r1, [r3, #8]
    c33a:	add.w	r0, r8, r4
    c33e:	cmp	r0, r1
    c340:	ldr	r1, [r0, #4]
    c342:	beq.w	c4f8 <_realloc_r+0x1f8>
    c346:	bic.w	r3, r1, #1
    c34a:	add	r3, r0
    c34c:	ldr	r3, [r3, #4]
    c34e:	lsls	r3, r3, #31
    c350:	bpl.n	c44e <_realloc_r+0x14e>
    c352:	tst.w	lr, #1
    c356:	beq.n	c3c4 <_realloc_r+0xc4>
    c358:	mov	r1, r7
    c35a:	mov	r0, r9
    c35c:	bl	bae8 <_malloc_r>
    c360:	mov	r7, r0
    c362:	cbz	r0, c39e <_realloc_r+0x9e>
    c364:	ldr.w	r3, [r6, #-4]
    c368:	bic.w	r3, r3, #1
    c36c:	add	r3, r8
    c36e:	sub.w	r2, r0, #8
    c372:	cmp	r2, r3
    c374:	beq.w	c600 <_realloc_r+0x300>
    c378:	subs	r2, r4, #4
    c37a:	cmp	r2, #36	; 0x24
    c37c:	bhi.w	c5e2 <_realloc_r+0x2e2>
    c380:	cmp	r2, #19
    c382:	bhi.w	c58e <_realloc_r+0x28e>
    c386:	mov	r3, r0
    c388:	mov	r2, r6
    c38a:	ldr	r1, [r2, #0]
    c38c:	str	r1, [r3, #0]
    c38e:	ldr	r1, [r2, #4]
    c390:	str	r1, [r3, #4]
    c392:	ldr	r2, [r2, #8]
    c394:	str	r2, [r3, #8]
    c396:	mov	r1, r6
    c398:	mov	r0, r9
    c39a:	bl	11250 <_free_r>
    c39e:	mov	r0, r9
    c3a0:	bl	c2fc <__malloc_unlock>
    c3a4:	mov	r0, r7
    c3a6:	add	sp, #12
    c3a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3ac:	bic.w	r5, r5, #7
    c3b0:	cmp	r5, #0
    c3b2:	mov	r2, r5
    c3b4:	bge.n	c32e <_realloc_r+0x2e>
    c3b6:	movs	r3, #12
    c3b8:	movs	r0, #0
    c3ba:	str.w	r3, [r9]
    c3be:	add	sp, #12
    c3c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3c4:	ldr.w	r3, [r6, #-8]
    c3c8:	rsb	sl, r3, r8
    c3cc:	ldr.w	r3, [sl, #4]
    c3d0:	bic.w	ip, r3, #3
    c3d4:	add.w	r3, r4, ip
    c3d8:	cmp	r3, r2
    c3da:	blt.n	c358 <_realloc_r+0x58>
    c3dc:	mov	r7, sl
    c3de:	ldr.w	r1, [sl, #12]
    c3e2:	ldr.w	r0, [r7, #8]!
    c3e6:	subs	r2, r4, #4
    c3e8:	cmp	r2, #36	; 0x24
    c3ea:	str	r1, [r0, #12]
    c3ec:	str	r0, [r1, #8]
    c3ee:	bhi.w	c620 <_realloc_r+0x320>
    c3f2:	cmp	r2, #19
    c3f4:	bls.w	c61c <_realloc_r+0x31c>
    c3f8:	ldr	r1, [r6, #0]
    c3fa:	str.w	r1, [sl, #8]
    c3fe:	ldr	r1, [r6, #4]
    c400:	str.w	r1, [sl, #12]
    c404:	cmp	r2, #27
    c406:	bhi.w	c660 <_realloc_r+0x360>
    c40a:	adds	r6, #8
    c40c:	add.w	r2, sl, #16
    c410:	ldr	r1, [r6, #0]
    c412:	str	r1, [r2, #0]
    c414:	ldr	r1, [r6, #4]
    c416:	str	r1, [r2, #4]
    c418:	ldr	r1, [r6, #8]
    c41a:	str	r1, [r2, #8]
    c41c:	mov	r6, r7
    c41e:	mov	r4, r3
    c420:	mov	r8, sl
    c422:	subs	r3, r4, r5
    c424:	cmp	r3, #15
    c426:	bhi.n	c464 <_realloc_r+0x164>
    c428:	ldr.w	r3, [r8, #4]
    c42c:	and.w	r3, r3, #1
    c430:	orrs	r3, r4
    c432:	add	r4, r8
    c434:	str.w	r3, [r8, #4]
    c438:	ldr	r3, [r4, #4]
    c43a:	orr.w	r3, r3, #1
    c43e:	str	r3, [r4, #4]
    c440:	mov	r0, r9
    c442:	bl	c2fc <__malloc_unlock>
    c446:	mov	r0, r6
    c448:	add	sp, #12
    c44a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c44e:	bic.w	r1, r1, #3
    c452:	add	r1, r4
    c454:	cmp	r1, r2
    c456:	blt.n	c49c <_realloc_r+0x19c>
    c458:	ldr	r3, [r0, #12]
    c45a:	ldr	r2, [r0, #8]
    c45c:	mov	r4, r1
    c45e:	str	r3, [r2, #12]
    c460:	str	r2, [r3, #8]
    c462:	b.n	c422 <_realloc_r+0x122>
    c464:	ldr.w	r2, [r8, #4]
    c468:	add.w	r1, r8, r5
    c46c:	and.w	r2, r2, #1
    c470:	orrs	r5, r2
    c472:	orr.w	r2, r3, #1
    c476:	add	r3, r1
    c478:	str.w	r5, [r8, #4]
    c47c:	str	r2, [r1, #4]
    c47e:	ldr	r2, [r3, #4]
    c480:	orr.w	r2, r2, #1
    c484:	adds	r1, #8
    c486:	str	r2, [r3, #4]
    c488:	mov	r0, r9
    c48a:	bl	11250 <_free_r>
    c48e:	b.n	c440 <_realloc_r+0x140>
    c490:	mov	r1, r2
    c492:	add	sp, #12
    c494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c498:	b.w	bae8 <_malloc_r>
    c49c:	tst.w	lr, #1
    c4a0:	bne.w	c358 <_realloc_r+0x58>
    c4a4:	ldr.w	r3, [r6, #-8]
    c4a8:	rsb	sl, r3, r8
    c4ac:	ldr.w	r3, [sl, #4]
    c4b0:	bic.w	ip, r3, #3
    c4b4:	add.w	lr, r1, ip
    c4b8:	cmp	lr, r2
    c4ba:	blt.n	c3d4 <_realloc_r+0xd4>
    c4bc:	ldr	r3, [r0, #12]
    c4be:	ldr	r2, [r0, #8]
    c4c0:	mov	r7, sl
    c4c2:	str	r3, [r2, #12]
    c4c4:	str	r2, [r3, #8]
    c4c6:	ldr.w	r1, [r7, #8]!
    c4ca:	ldr.w	r3, [sl, #12]
    c4ce:	str	r3, [r1, #12]
    c4d0:	subs	r2, r4, #4
    c4d2:	cmp	r2, #36	; 0x24
    c4d4:	str	r1, [r3, #8]
    c4d6:	bhi.w	c60c <_realloc_r+0x30c>
    c4da:	cmp	r2, #19
    c4dc:	bls.n	c5a4 <_realloc_r+0x2a4>
    c4de:	ldr	r3, [r6, #0]
    c4e0:	str.w	r3, [sl, #8]
    c4e4:	ldr	r3, [r6, #4]
    c4e6:	str.w	r3, [sl, #12]
    c4ea:	cmp	r2, #27
    c4ec:	bhi.w	c630 <_realloc_r+0x330>
    c4f0:	adds	r6, #8
    c4f2:	add.w	r3, sl, #16
    c4f6:	b.n	c5a6 <_realloc_r+0x2a6>
    c4f8:	bic.w	fp, r1, #3
    c4fc:	add	fp, r4
    c4fe:	add.w	r0, r5, #16
    c502:	cmp	fp, r0
    c504:	bge.n	c5ba <_realloc_r+0x2ba>
    c506:	tst.w	lr, #1
    c50a:	bne.w	c358 <_realloc_r+0x58>
    c50e:	ldr.w	r1, [r6, #-8]
    c512:	rsb	sl, r1, r8
    c516:	ldr.w	r1, [sl, #4]
    c51a:	bic.w	ip, r1, #3
    c51e:	add	fp, ip
    c520:	cmp	r0, fp
    c522:	bgt.w	c3d4 <_realloc_r+0xd4>
    c526:	mov	r7, sl
    c528:	ldr.w	r1, [sl, #12]
    c52c:	ldr.w	r0, [r7, #8]!
    c530:	subs	r2, r4, #4
    c532:	cmp	r2, #36	; 0x24
    c534:	str	r1, [r0, #12]
    c536:	str	r0, [r1, #8]
    c538:	bhi.w	c6a4 <_realloc_r+0x3a4>
    c53c:	cmp	r2, #19
    c53e:	bls.w	c68c <_realloc_r+0x38c>
    c542:	ldr	r1, [r6, #0]
    c544:	str.w	r1, [sl, #8]
    c548:	ldr	r1, [r6, #4]
    c54a:	str.w	r1, [sl, #12]
    c54e:	cmp	r2, #27
    c550:	bhi.w	c6b2 <_realloc_r+0x3b2>
    c554:	adds	r6, #8
    c556:	add.w	r2, sl, #16
    c55a:	ldr	r1, [r6, #0]
    c55c:	str	r1, [r2, #0]
    c55e:	ldr	r1, [r6, #4]
    c560:	str	r1, [r2, #4]
    c562:	ldr	r1, [r6, #8]
    c564:	str	r1, [r2, #8]
    c566:	add.w	r1, sl, r5
    c56a:	rsb	r2, r5, fp
    c56e:	orr.w	r2, r2, #1
    c572:	str	r1, [r3, #8]
    c574:	str	r2, [r1, #4]
    c576:	ldr.w	r3, [sl, #4]
    c57a:	and.w	r3, r3, #1
    c57e:	orrs	r5, r3
    c580:	mov	r0, r9
    c582:	str.w	r5, [sl, #4]
    c586:	bl	c2fc <__malloc_unlock>
    c58a:	mov	r0, r7
    c58c:	b.n	c448 <_realloc_r+0x148>
    c58e:	ldr	r3, [r6, #0]
    c590:	str	r3, [r0, #0]
    c592:	ldr	r3, [r6, #4]
    c594:	str	r3, [r0, #4]
    c596:	cmp	r2, #27
    c598:	bhi.n	c5ea <_realloc_r+0x2ea>
    c59a:	add.w	r3, r0, #8
    c59e:	add.w	r2, r6, #8
    c5a2:	b.n	c38a <_realloc_r+0x8a>
    c5a4:	mov	r3, r7
    c5a6:	ldr	r2, [r6, #0]
    c5a8:	str	r2, [r3, #0]
    c5aa:	ldr	r2, [r6, #4]
    c5ac:	str	r2, [r3, #4]
    c5ae:	ldr	r2, [r6, #8]
    c5b0:	str	r2, [r3, #8]
    c5b2:	mov	r6, r7
    c5b4:	mov	r4, lr
    c5b6:	mov	r8, sl
    c5b8:	b.n	c422 <_realloc_r+0x122>
    c5ba:	add.w	r1, r8, r5
    c5be:	rsb	fp, r5, fp
    c5c2:	orr.w	r2, fp, #1
    c5c6:	str	r1, [r3, #8]
    c5c8:	str	r2, [r1, #4]
    c5ca:	ldr.w	r3, [r6, #-4]
    c5ce:	and.w	r3, r3, #1
    c5d2:	orrs	r5, r3
    c5d4:	mov	r0, r9
    c5d6:	str.w	r5, [r6, #-4]
    c5da:	bl	c2fc <__malloc_unlock>
    c5de:	mov	r0, r6
    c5e0:	b.n	c448 <_realloc_r+0x148>
    c5e2:	mov	r1, r6
    c5e4:	bl	c194 <memmove>
    c5e8:	b.n	c396 <_realloc_r+0x96>
    c5ea:	ldr	r3, [r6, #8]
    c5ec:	str	r3, [r0, #8]
    c5ee:	ldr	r3, [r6, #12]
    c5f0:	str	r3, [r0, #12]
    c5f2:	cmp	r2, #36	; 0x24
    c5f4:	beq.n	c648 <_realloc_r+0x348>
    c5f6:	add.w	r3, r0, #16
    c5fa:	add.w	r2, r6, #16
    c5fe:	b.n	c38a <_realloc_r+0x8a>
    c600:	ldr.w	r3, [r0, #-4]
    c604:	bic.w	r3, r3, #3
    c608:	add	r4, r3
    c60a:	b.n	c422 <_realloc_r+0x122>
    c60c:	mov	r1, r6
    c60e:	mov	r0, r7
    c610:	mov	r4, lr
    c612:	mov	r8, sl
    c614:	bl	c194 <memmove>
    c618:	mov	r6, r7
    c61a:	b.n	c422 <_realloc_r+0x122>
    c61c:	mov	r2, r7
    c61e:	b.n	c410 <_realloc_r+0x110>
    c620:	mov	r1, r6
    c622:	mov	r0, r7
    c624:	mov	r4, r3
    c626:	mov	r8, sl
    c628:	bl	c194 <memmove>
    c62c:	mov	r6, r7
    c62e:	b.n	c422 <_realloc_r+0x122>
    c630:	ldr	r3, [r6, #8]
    c632:	str.w	r3, [sl, #16]
    c636:	ldr	r3, [r6, #12]
    c638:	str.w	r3, [sl, #20]
    c63c:	cmp	r2, #36	; 0x24
    c63e:	beq.n	c678 <_realloc_r+0x378>
    c640:	adds	r6, #16
    c642:	add.w	r3, sl, #24
    c646:	b.n	c5a6 <_realloc_r+0x2a6>
    c648:	ldr	r3, [r6, #16]
    c64a:	str	r3, [r0, #16]
    c64c:	ldr	r3, [r6, #20]
    c64e:	str	r3, [r0, #20]
    c650:	add.w	r2, r6, #24
    c654:	add.w	r3, r0, #24
    c658:	b.n	c38a <_realloc_r+0x8a>
    c65a:	nop
    c65c:	.word	0x20014d70
    c660:	ldr	r1, [r6, #8]
    c662:	str.w	r1, [sl, #16]
    c666:	ldr	r1, [r6, #12]
    c668:	str.w	r1, [sl, #20]
    c66c:	cmp	r2, #36	; 0x24
    c66e:	beq.n	c690 <_realloc_r+0x390>
    c670:	adds	r6, #16
    c672:	add.w	r2, sl, #24
    c676:	b.n	c410 <_realloc_r+0x110>
    c678:	ldr	r3, [r6, #16]
    c67a:	str.w	r3, [sl, #24]
    c67e:	ldr	r3, [r6, #20]
    c680:	str.w	r3, [sl, #28]
    c684:	adds	r6, #24
    c686:	add.w	r3, sl, #32
    c68a:	b.n	c5a6 <_realloc_r+0x2a6>
    c68c:	mov	r2, r7
    c68e:	b.n	c55a <_realloc_r+0x25a>
    c690:	ldr	r2, [r6, #16]
    c692:	str.w	r2, [sl, #24]
    c696:	ldr	r2, [r6, #20]
    c698:	str.w	r2, [sl, #28]
    c69c:	adds	r6, #24
    c69e:	add.w	r2, sl, #32
    c6a2:	b.n	c410 <_realloc_r+0x110>
    c6a4:	mov	r1, r6
    c6a6:	mov	r0, r7
    c6a8:	str	r3, [sp, #4]
    c6aa:	bl	c194 <memmove>
    c6ae:	ldr	r3, [sp, #4]
    c6b0:	b.n	c566 <_realloc_r+0x266>
    c6b2:	ldr	r1, [r6, #8]
    c6b4:	str.w	r1, [sl, #16]
    c6b8:	ldr	r1, [r6, #12]
    c6ba:	str.w	r1, [sl, #20]
    c6be:	cmp	r2, #36	; 0x24
    c6c0:	beq.n	c6ca <_realloc_r+0x3ca>
    c6c2:	adds	r6, #16
    c6c4:	add.w	r2, sl, #24
    c6c8:	b.n	c55a <_realloc_r+0x25a>
    c6ca:	ldr	r2, [r6, #16]
    c6cc:	str.w	r2, [sl, #24]
    c6d0:	ldr	r2, [r6, #20]
    c6d2:	str.w	r2, [sl, #28]
    c6d6:	adds	r6, #24
    c6d8:	add.w	r2, sl, #32
    c6dc:	b.n	c55a <_realloc_r+0x25a>
    c6de:	nop

0000c6e0 <_sbrk_r>:
    c6e0:	push	{r3, r4, r5, lr}
    c6e2:	ldr	r4, [pc, #28]	; (c700 <_sbrk_r+0x20>)
    c6e4:	movs	r3, #0
    c6e6:	mov	r5, r0
    c6e8:	mov	r0, r1
    c6ea:	str	r3, [r4, #0]
    c6ec:	bl	87ec <_sbrk>
    c6f0:	adds	r3, r0, #1
    c6f2:	beq.n	c6f6 <_sbrk_r+0x16>
    c6f4:	pop	{r3, r4, r5, pc}
    c6f6:	ldr	r3, [r4, #0]
    c6f8:	cmp	r3, #0
    c6fa:	beq.n	c6f4 <_sbrk_r+0x14>
    c6fc:	str	r3, [r5, #0]
    c6fe:	pop	{r3, r4, r5, pc}
    c700:	.word	0x2001af60

0000c704 <sprintf>:
    c704:	push	{r1, r2, r3}
    c706:	push	{r4, r5, r6, r7, lr}
    c708:	sub	sp, #112	; 0x70
    c70a:	add	r3, sp, #132	; 0x84
    c70c:	ldr	r1, [pc, #60]	; (c74c <sprintf+0x48>)
    c70e:	ldr.w	r2, [r3], #4
    c712:	str	r3, [sp, #4]
    c714:	mov	r5, r0
    c716:	mvn.w	r4, #2147483648	; 0x80000000
    c71a:	ldr	r0, [r1, #0]
    c71c:	str	r5, [sp, #8]
    c71e:	mov.w	r7, #520	; 0x208
    c722:	movw	r6, #65535	; 0xffff
    c726:	add	r1, sp, #8
    c728:	str	r5, [sp, #24]
    c72a:	strh.w	r7, [sp, #20]
    c72e:	str	r4, [sp, #16]
    c730:	str	r4, [sp, #28]
    c732:	strh.w	r6, [sp, #22]
    c736:	bl	db50 <_svfprintf_r>
    c73a:	ldr	r3, [sp, #8]
    c73c:	movs	r2, #0
    c73e:	strb	r2, [r3, #0]
    c740:	add	sp, #112	; 0x70
    c742:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c746:	add	sp, #12
    c748:	bx	lr
    c74a:	nop
    c74c:	.word	0x20014c00

0000c750 <sscanf>:
    c750:	push	{r1, r2, r3}
    c752:	push	{r4, r5, r6, r7, lr}
    c754:	sub	sp, #112	; 0x70
    c756:	add	r4, sp, #132	; 0x84
    c758:	mov.w	r2, #516	; 0x204
    c75c:	ldr.w	r6, [r4], #4
    c760:	strh.w	r2, [sp, #20]
    c764:	str	r0, [sp, #8]
    c766:	str	r0, [sp, #24]
    c768:	bl	c940 <strlen>
    c76c:	ldr	r3, [pc, #48]	; (c7a0 <sscanf+0x50>)
    c76e:	str	r4, [sp, #4]
    c770:	mov	r5, r0
    c772:	mov	r2, r6
    c774:	ldr	r7, [pc, #44]	; (c7a4 <sscanf+0x54>)
    c776:	ldr	r0, [r3, #0]
    c778:	str	r5, [sp, #12]
    c77a:	mov	r3, r4
    c77c:	movw	r6, #65535	; 0xffff
    c780:	movs	r4, #0
    c782:	add	r1, sp, #8
    c784:	str	r5, [sp, #28]
    c786:	str	r7, [sp, #40]	; 0x28
    c788:	str	r4, [sp, #56]	; 0x38
    c78a:	str	r4, [sp, #76]	; 0x4c
    c78c:	strh.w	r6, [sp, #22]
    c790:	bl	f234 <__ssvfscanf_r>
    c794:	add	sp, #112	; 0x70
    c796:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c79a:	add	sp, #12
    c79c:	bx	lr
    c79e:	nop
    c7a0:	.word	0x20014c00
    c7a4:	.word	0x0000c7a9

0000c7a8 <__seofread>:
    c7a8:	movs	r0, #0
    c7aa:	bx	lr

0000c7ac <strchr>:
    c7ac:	push	{r4, r5, r6}
    c7ae:	ands.w	r4, r1, #255	; 0xff
    c7b2:	beq.n	c81e <strchr+0x72>
    c7b4:	lsls	r5, r0, #30
    c7b6:	beq.n	c7d8 <strchr+0x2c>
    c7b8:	ldrb	r3, [r0, #0]
    c7ba:	cmp	r3, #0
    c7bc:	beq.n	c874 <strchr+0xc8>
    c7be:	cmp	r4, r3
    c7c0:	beq.n	c81a <strchr+0x6e>
    c7c2:	adds	r3, r0, #1
    c7c4:	b.n	c7d2 <strchr+0x26>
    c7c6:	ldrb.w	r2, [r3], #1
    c7ca:	cmp	r2, #0
    c7cc:	beq.n	c86e <strchr+0xc2>
    c7ce:	cmp	r4, r2
    c7d0:	beq.n	c81a <strchr+0x6e>
    c7d2:	lsls	r2, r3, #30
    c7d4:	mov	r0, r3
    c7d6:	bne.n	c7c6 <strchr+0x1a>
    c7d8:	lsls	r6, r1, #8
    c7da:	and.w	r6, r6, #65280	; 0xff00
    c7de:	orrs	r6, r4
    c7e0:	ldr	r3, [r0, #0]
    c7e2:	orr.w	r6, r6, r6, lsl #16
    c7e6:	b.n	c7ec <strchr+0x40>
    c7e8:	ldr.w	r3, [r0, #4]!
    c7ec:	eor.w	r5, r6, r3
    c7f0:	sub.w	r2, r5, #16843009	; 0x1010101
    c7f4:	sub.w	r1, r3, #16843009	; 0x1010101
    c7f8:	bic.w	r2, r2, r5
    c7fc:	bic.w	r3, r1, r3
    c800:	orrs	r3, r2
    c802:	tst.w	r3, #2155905152	; 0x80808080
    c806:	beq.n	c7e8 <strchr+0x3c>
    c808:	ldrb	r3, [r0, #0]
    c80a:	cbnz	r3, c816 <strchr+0x6a>
    c80c:	b.n	c874 <strchr+0xc8>
    c80e:	ldrb.w	r3, [r0, #1]!
    c812:	cmp	r3, #0
    c814:	beq.n	c874 <strchr+0xc8>
    c816:	cmp	r4, r3
    c818:	bne.n	c80e <strchr+0x62>
    c81a:	pop	{r4, r5, r6}
    c81c:	bx	lr
    c81e:	lsls	r4, r0, #30
    c820:	beq.n	c83a <strchr+0x8e>
    c822:	ldrb	r3, [r0, #0]
    c824:	cmp	r3, #0
    c826:	beq.n	c81a <strchr+0x6e>
    c828:	adds	r3, r0, #1
    c82a:	b.n	c834 <strchr+0x88>
    c82c:	ldrb	r2, [r0, #0]
    c82e:	adds	r3, #1
    c830:	cmp	r2, #0
    c832:	beq.n	c81a <strchr+0x6e>
    c834:	lsls	r1, r3, #30
    c836:	mov	r0, r3
    c838:	bne.n	c82c <strchr+0x80>
    c83a:	ldr	r2, [r0, #0]
    c83c:	sub.w	r3, r2, #16843009	; 0x1010101
    c840:	bic.w	r3, r3, r2
    c844:	tst.w	r3, #2155905152	; 0x80808080
    c848:	bne.n	c85c <strchr+0xb0>
    c84a:	ldr.w	r2, [r0, #4]!
    c84e:	sub.w	r3, r2, #16843009	; 0x1010101
    c852:	bic.w	r3, r3, r2
    c856:	tst.w	r3, #2155905152	; 0x80808080
    c85a:	beq.n	c84a <strchr+0x9e>
    c85c:	ldrb	r3, [r0, #0]
    c85e:	cmp	r3, #0
    c860:	beq.n	c81a <strchr+0x6e>
    c862:	ldrb.w	r3, [r0, #1]!
    c866:	cmp	r3, #0
    c868:	bne.n	c862 <strchr+0xb6>
    c86a:	pop	{r4, r5, r6}
    c86c:	bx	lr
    c86e:	mov	r0, r2
    c870:	pop	{r4, r5, r6}
    c872:	bx	lr
    c874:	mov	r0, r3
    c876:	pop	{r4, r5, r6}
    c878:	bx	lr
    c87a:	nop

0000c87c <strcpy>:
    c87c:	eor.w	r2, r0, r1
    c880:	mov	ip, r0
    c882:	tst.w	r2, #3
    c886:	bne.n	c928 <strcpy+0xac>
    c888:	tst.w	r1, #3
    c88c:	bne.n	c8f4 <strcpy+0x78>
    c88e:	str.w	r4, [sp, #-4]!
    c892:	tst.w	r1, #4
    c896:	ldr.w	r3, [r1], #4
    c89a:	beq.n	c8b4 <strcpy+0x38>
    c89c:	sub.w	r2, r3, #16843009	; 0x1010101
    c8a0:	bics	r2, r3
    c8a2:	tst.w	r2, #2155905152	; 0x80808080
    c8a6:	itt	eq
    c8a8:	streq.w	r3, [ip], #4
    c8ac:	ldreq.w	r3, [r1], #4
    c8b0:	bne.n	c8e0 <strcpy+0x64>
    c8b2:	nop
    c8b4:	ldr.w	r4, [r1], #4
    c8b8:	sub.w	r2, r3, #16843009	; 0x1010101
    c8bc:	bics	r2, r3
    c8be:	tst.w	r2, #2155905152	; 0x80808080
    c8c2:	sub.w	r2, r4, #16843009	; 0x1010101
    c8c6:	bne.n	c8e0 <strcpy+0x64>
    c8c8:	str.w	r3, [ip], #4
    c8cc:	bics	r2, r4
    c8ce:	tst.w	r2, #2155905152	; 0x80808080
    c8d2:	itt	eq
    c8d4:	ldreq.w	r3, [r1], #4
    c8d8:	streq.w	r4, [ip], #4
    c8dc:	beq.n	c8b4 <strcpy+0x38>
    c8de:	mov	r3, r4
    c8e0:	strb.w	r3, [ip], #1
    c8e4:	tst.w	r3, #255	; 0xff
    c8e8:	mov.w	r3, r3, ror #8
    c8ec:	bne.n	c8e0 <strcpy+0x64>
    c8ee:	ldr.w	r4, [sp], #4
    c8f2:	bx	lr
    c8f4:	tst.w	r1, #1
    c8f8:	beq.n	c908 <strcpy+0x8c>
    c8fa:	ldrb.w	r2, [r1], #1
    c8fe:	strb.w	r2, [ip], #1
    c902:	cmp	r2, #0
    c904:	it	eq
    c906:	bxeq	lr
    c908:	tst.w	r1, #2
    c90c:	beq.n	c88e <strcpy+0x12>
    c90e:	ldrh.w	r2, [r1], #2
    c912:	tst.w	r2, #255	; 0xff
    c916:	itet	ne
    c918:	strhne.w	r2, [ip], #2
    c91c:	strbeq.w	r2, [ip]
    c920:	tstne.w	r2, #65280	; 0xff00
    c924:	bne.n	c88e <strcpy+0x12>
    c926:	bx	lr
    c928:	ldrb.w	r2, [r1], #1
    c92c:	strb.w	r2, [ip], #1
    c930:	cmp	r2, #0
    c932:	bne.n	c928 <strcpy+0xac>
    c934:	bx	lr
    c936:	nop
    c938:			; <UNDEFINED> instruction: 0xffffffff
    c93c:			; <UNDEFINED> instruction: 0xffffffff

0000c940 <strlen>:
    c940:	pld	[r0]
    c944:	strd	r4, r5, [sp, #-8]!
    c948:	bic.w	r1, r0, #7
    c94c:	mvn.w	ip, #0
    c950:	ands.w	r4, r0, #7
    c954:	pld	[r1, #32]
    c958:	bne.w	c9ee <strlen+0xae>
    c95c:	mov.w	r4, #0
    c960:	mvn.w	r0, #7
    c964:	ldrd	r2, r3, [r1]
    c968:	pld	[r1, #64]	; 0x40
    c96c:	add.w	r0, r0, #8
    c970:	uadd8	r2, r2, ip
    c974:	sel	r2, r4, ip
    c978:	uadd8	r3, r3, ip
    c97c:	sel	r3, r2, ip
    c980:	cbnz	r3, c9d6 <strlen+0x96>
    c982:	ldrd	r2, r3, [r1, #8]
    c986:	uadd8	r2, r2, ip
    c98a:	add.w	r0, r0, #8
    c98e:	sel	r2, r4, ip
    c992:	uadd8	r3, r3, ip
    c996:	sel	r3, r2, ip
    c99a:	cbnz	r3, c9d6 <strlen+0x96>
    c99c:	ldrd	r2, r3, [r1, #16]
    c9a0:	uadd8	r2, r2, ip
    c9a4:	add.w	r0, r0, #8
    c9a8:	sel	r2, r4, ip
    c9ac:	uadd8	r3, r3, ip
    c9b0:	sel	r3, r2, ip
    c9b4:	cbnz	r3, c9d6 <strlen+0x96>
    c9b6:	ldrd	r2, r3, [r1, #24]
    c9ba:	add.w	r1, r1, #32
    c9be:	uadd8	r2, r2, ip
    c9c2:	add.w	r0, r0, #8
    c9c6:	sel	r2, r4, ip
    c9ca:	uadd8	r3, r3, ip
    c9ce:	sel	r3, r2, ip
    c9d2:	cmp	r3, #0
    c9d4:	beq.n	c964 <strlen+0x24>
    c9d6:	cmp	r2, #0
    c9d8:	itt	eq
    c9da:	addeq	r0, #4
    c9dc:	moveq	r2, r3
    c9de:	rev	r2, r2
    c9e0:	clz	r2, r2
    c9e4:	ldrd	r4, r5, [sp], #8
    c9e8:	add.w	r0, r0, r2, lsr #3
    c9ec:	bx	lr
    c9ee:	ldrd	r2, r3, [r1]
    c9f2:	and.w	r5, r4, #3
    c9f6:	rsb	r0, r4, #0
    c9fa:	mov.w	r5, r5, lsl #3
    c9fe:	tst.w	r4, #4
    ca02:	pld	[r1, #64]	; 0x40
    ca06:	lsl.w	r5, ip, r5
    ca0a:	orn	r2, r2, r5
    ca0e:	itt	ne
    ca10:	ornne	r3, r3, r5
    ca14:	movne	r2, ip
    ca16:	mov.w	r4, #0
    ca1a:	b.n	c970 <strlen+0x30>

0000ca1c <strncmp>:
    ca1c:	cmp	r2, #0
    ca1e:	beq.n	caa4 <strncmp+0x88>
    ca20:	orr.w	r3, r0, r1
    ca24:	ands.w	r3, r3, #3
    ca28:	push	{r4, r5, r6, r7}
    ca2a:	bne.n	ca78 <strncmp+0x5c>
    ca2c:	cmp	r2, #3
    ca2e:	bls.n	ca78 <strncmp+0x5c>
    ca30:	ldr	r4, [r0, #0]
    ca32:	ldr	r5, [r1, #0]
    ca34:	cmp	r4, r5
    ca36:	bne.n	ca78 <strncmp+0x5c>
    ca38:	subs	r2, #4
    ca3a:	beq.n	caa8 <strncmp+0x8c>
    ca3c:	sub.w	r5, r4, #16843009	; 0x1010101
    ca40:	bic.w	r4, r5, r4
    ca44:	tst.w	r4, #2155905152	; 0x80808080
    ca48:	bne.n	caae <strncmp+0x92>
    ca4a:	adds	r7, r0, #4
    ca4c:	adds	r5, r1, #4
    ca4e:	b.n	ca6c <strncmp+0x50>
    ca50:	ldr.w	r3, [r7], #4
    ca54:	ldr	r6, [r1, #0]
    ca56:	sub.w	r4, r3, #16843009	; 0x1010101
    ca5a:	cmp	r3, r6
    ca5c:	bic.w	r4, r4, r3
    ca60:	bne.n	ca78 <strncmp+0x5c>
    ca62:	subs	r2, #4
    ca64:	beq.n	caa8 <strncmp+0x8c>
    ca66:	tst.w	r4, #2155905152	; 0x80808080
    ca6a:	bne.n	cab4 <strncmp+0x98>
    ca6c:	cmp	r2, #3
    ca6e:	mov	r1, r5
    ca70:	mov	r0, r7
    ca72:	add.w	r5, r5, #4
    ca76:	bhi.n	ca50 <strncmp+0x34>
    ca78:	ldrb	r3, [r0, #0]
    ca7a:	ldrb	r4, [r1, #0]
    ca7c:	cmp	r4, r3
    ca7e:	add.w	r2, r2, #4294967295
    ca82:	bne.n	ca9e <strncmp+0x82>
    ca84:	cbz	r2, caa8 <strncmp+0x8c>
    ca86:	cbnz	r4, ca8e <strncmp+0x72>
    ca88:	b.n	cab8 <strncmp+0x9c>
    ca8a:	cbz	r2, caa8 <strncmp+0x8c>
    ca8c:	cbz	r3, caae <strncmp+0x92>
    ca8e:	ldrb.w	r3, [r0, #1]!
    ca92:	ldrb.w	r4, [r1, #1]!
    ca96:	cmp	r3, r4
    ca98:	add.w	r2, r2, #4294967295
    ca9c:	beq.n	ca8a <strncmp+0x6e>
    ca9e:	subs	r0, r3, r4
    caa0:	pop	{r4, r5, r6, r7}
    caa2:	bx	lr
    caa4:	mov	r0, r2
    caa6:	bx	lr
    caa8:	mov	r0, r2
    caaa:	pop	{r4, r5, r6, r7}
    caac:	bx	lr
    caae:	mov	r0, r3
    cab0:	pop	{r4, r5, r6, r7}
    cab2:	bx	lr
    cab4:	movs	r0, #0
    cab6:	b.n	caa0 <strncmp+0x84>
    cab8:	mov	r0, r4
    caba:	b.n	caa0 <strncmp+0x84>

0000cabc <sulp>:
    cabc:	push	{r4, r5, r6, lr}
    cabe:	mov	r4, r0
    cac0:	mov	r5, r1
    cac2:	vmov	d0, r4, r5
    cac6:	mov	r6, r2
    cac8:	bl	12220 <__ulp>
    cacc:	vmov	r0, r1, d0
    cad0:	cbz	r6, caf2 <sulp+0x36>
    cad2:	ubfx	r3, r5, #20, #11
    cad6:	rsb	r3, r3, #107	; 0x6b
    cada:	cmp	r3, #0
    cadc:	ble.n	caf2 <sulp+0x36>
    cade:	lsls	r3, r3, #20
    cae0:	add.w	r5, r3, #1069547520	; 0x3fc00000
    cae4:	movs	r4, #0
    cae6:	add.w	r5, r5, #3145728	; 0x300000
    caea:	mov	r2, r4
    caec:	mov	r3, r5
    caee:	bl	ad3c <__aeabi_dmul>
    caf2:	pop	{r4, r5, r6, pc}
    caf4:			; <UNDEFINED> instruction: 0xffffffff

0000caf8 <_strtod_l>:
    caf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cafc:	mov	r5, r3
    cafe:	sub	sp, #132	; 0x84
    cb00:	movs	r3, #0
    cb02:	mov	fp, r0
    cb04:	mov	r0, r5
    cb06:	mov	r6, r1
    cb08:	str	r2, [sp, #24]
    cb0a:	str	r3, [sp, #112]	; 0x70
    cb0c:	bl	11ba4 <__localeconv_l>
    cb10:	movs	r4, #0
    cb12:	movs	r3, #0
    cb14:	mov	sl, r0
    cb16:	ldr	r0, [r0, #0]
    cb18:	strd	r3, r4, [sp, #16]
    cb1c:	bl	c940 <strlen>
    cb20:	str	r6, [sp, #108]	; 0x6c
    cb22:	mov	r9, r0
    cb24:	mov	r2, r6
    cb26:	mov	r4, r2
    cb28:	ldrb.w	r7, [r2], #1
    cb2c:	cmp	r7, #45	; 0x2d
    cb2e:	bhi.w	cc90 <_strtod_l+0x198>
    cb32:	tbb	[pc, r7]
    cb36:	.short	0xad17
    cb38:	.word	0xadadadad
    cb3c:	.word	0x81adadad
    cb40:	.word	0x81818181
    cb44:	.word	0xadadadad
    cb48:	.word	0xadadadad
    cb4c:	.word	0xadadadad
    cb50:	.word	0xadadadad
    cb54:	.word	0xad81adad
    cb58:	.word	0xadadadad
    cb5c:	.word	0xadadadad
    cb60:	.word	0x7ead2bad
    cb64:	ldr	r3, [sp, #24]
    cb66:	mov.w	r8, #0
    cb6a:	mov.w	r9, #0
    cb6e:	cbz	r3, cb82 <_strtod_l+0x8a>
    cb70:	movs	r3, #0
    cb72:	str	r3, [sp, #28]
    cb74:	ldr	r3, [sp, #24]
    cb76:	str	r6, [r3, #0]
    cb78:	ldr	r3, [sp, #28]
    cb7a:	cbz	r3, cb82 <_strtod_l+0x8a>
    cb7c:	add.w	r3, r9, #2147483648	; 0x80000000
    cb80:	mov	r9, r3
    cb82:	vmov	d0, r8, r9
    cb86:	add	sp, #132	; 0x84
    cb88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb8c:	movs	r3, #0
    cb8e:	str	r3, [sp, #28]
    cb90:	adds	r2, r4, #1
    cb92:	str	r2, [sp, #108]	; 0x6c
    cb94:	ldrb	r7, [r4, #1]
    cb96:	cmp	r7, #0
    cb98:	beq.n	cb64 <_strtod_l+0x6c>
    cb9a:	cmp	r7, #48	; 0x30
    cb9c:	mov	r4, r2
    cb9e:	beq.n	cc98 <_strtod_l+0x1a0>
    cba0:	movs	r3, #0
    cba2:	str	r4, [sp, #32]
    cba4:	str	r3, [sp, #40]	; 0x28
    cba6:	sub.w	r3, r7, #48	; 0x30
    cbaa:	cmp	r3, #9
    cbac:	bhi.w	d3be <_strtod_l+0x8c6>
    cbb0:	mov.w	r8, #0
    cbb4:	mov	r0, r4
    cbb6:	mov	r5, r8
    cbb8:	mov	r4, r8
    cbba:	cmp	r4, #8
    cbbc:	it	gt
    cbbe:	addgt.w	r8, r8, r8, lsl #2
    cbc2:	add.w	r3, r5, r5, lsl #2
    cbc6:	add.w	r0, r0, #1
    cbca:	add.w	r3, r7, r3, lsl #1
    cbce:	str	r0, [sp, #108]	; 0x6c
    cbd0:	itt	gt
    cbd2:	addgt.w	r7, r7, r8, lsl #1
    cbd6:	subgt.w	r8, r7, #48	; 0x30
    cbda:	ldrb	r7, [r0, #0]
    cbdc:	it	le
    cbde:	suble.w	r5, r3, #48	; 0x30
    cbe2:	sub.w	r3, r7, #48	; 0x30
    cbe6:	cmp	r3, #9
    cbe8:	add.w	r4, r4, #1
    cbec:	bls.n	cbba <_strtod_l+0xc2>
    cbee:	ldr.w	r1, [sl]
    cbf2:	mov	r2, r9
    cbf4:	bl	ca1c <strncmp>
    cbf8:	cbz	r0, cc3c <_strtod_l+0x144>
    cbfa:	movs	r0, #0
    cbfc:	mov	r3, r7
    cbfe:	mov	r9, r0
    cc00:	mov	r7, r0
    cc02:	mov	sl, r4
    cc04:	cmp	r3, #101	; 0x65
    cc06:	beq.w	cd6e <_strtod_l+0x276>
    cc0a:	cmp	r3, #69	; 0x45
    cc0c:	beq.w	cd6e <_strtod_l+0x276>
    cc10:	movs	r2, #0
    cc12:	cmp	r4, #0
    cc14:	bne.n	ccbc <_strtod_l+0x1c4>
    cc16:	cbnz	r0, cc20 <_strtod_l+0x128>
    cc18:	ldr	r2, [sp, #40]	; 0x28
    cc1a:	cmp	r2, #0
    cc1c:	beq.w	d1c2 <_strtod_l+0x6ca>
    cc20:	mov.w	r8, #0
    cc24:	mov.w	r9, #0
    cc28:	ldr	r3, [sp, #24]
    cc2a:	cmp	r3, #0
    cc2c:	beq.n	cb78 <_strtod_l+0x80>
    cc2e:	ldr	r6, [sp, #108]	; 0x6c
    cc30:	b.n	cb74 <_strtod_l+0x7c>
    cc32:	movs	r3, #1
    cc34:	str	r3, [sp, #28]
    cc36:	b.n	cb90 <_strtod_l+0x98>
    cc38:	str	r2, [sp, #108]	; 0x6c
    cc3a:	b.n	cb26 <_strtod_l+0x2e>
    cc3c:	ldr	r3, [sp, #108]	; 0x6c
    cc3e:	add.w	r2, r3, r9
    cc42:	str	r2, [sp, #108]	; 0x6c
    cc44:	ldrb.w	r3, [r3, r9]
    cc48:	mov	r7, r0
    cc4a:	mov	sl, r4
    cc4c:	sub.w	r2, r3, #48	; 0x30
    cc50:	cmp	r2, #9
    cc52:	bhi.w	d148 <_strtod_l+0x650>
    cc56:	adds	r1, r0, #1
    cc58:	mov	r3, r2
    cc5a:	cmp	r2, #0
    cc5c:	beq.w	d99e <_strtod_l+0xea6>
    cc60:	cmp	r1, #1
    cc62:	add	r7, r1
    cc64:	it	ne
    cc66:	addne	r0, r0, r4
    cc68:	bne.n	cc76 <_strtod_l+0x17e>
    cc6a:	b.w	d996 <_strtod_l+0xe9e>
    cc6e:	lsls	r5, r1, #1
    cc70:	cmp	r4, r0
    cc72:	beq.w	d5ec <_strtod_l+0xaf4>
    cc76:	adds	r4, #1
    cc78:	subs	r1, r4, #1
    cc7a:	cmp	r1, #8
    cc7c:	add.w	r1, r5, r5, lsl #2
    cc80:	ble.n	cc6e <_strtod_l+0x176>
    cc82:	cmp	r4, #16
    cc84:	itt	le
    cc86:	addle.w	r8, r8, r8, lsl #2
    cc8a:	movle.w	r8, r8, lsl #1
    cc8e:	b.n	cc70 <_strtod_l+0x178>
    cc90:	movs	r3, #0
    cc92:	cmp	r7, #48	; 0x30
    cc94:	str	r3, [sp, #28]
    cc96:	bne.n	cba0 <_strtod_l+0xa8>
    cc98:	ldrb	r3, [r4, #1]
    cc9a:	cmp	r3, #88	; 0x58
    cc9c:	beq.w	d386 <_strtod_l+0x88e>
    cca0:	cmp	r3, #120	; 0x78
    cca2:	beq.w	d386 <_strtod_l+0x88e>
    cca6:	adds	r4, #1
    cca8:	str	r4, [sp, #108]	; 0x6c
    ccaa:	ldrb	r7, [r4, #0]
    ccac:	cmp	r7, #48	; 0x30
    ccae:	beq.n	cca6 <_strtod_l+0x1ae>
    ccb0:	cmp	r7, #0
    ccb2:	beq.n	cc20 <_strtod_l+0x128>
    ccb4:	movs	r3, #1
    ccb6:	str	r4, [sp, #32]
    ccb8:	str	r3, [sp, #40]	; 0x28
    ccba:	b.n	cba6 <_strtod_l+0xae>
    ccbc:	cmp	r4, #16
    ccbe:	sub.w	r3, r2, r7
    ccc2:	mov	r0, r5
    ccc4:	mov	r9, r4
    ccc6:	str	r3, [sp, #44]	; 0x2c
    ccc8:	it	ge
    ccca:	movge.w	r9, #16
    ccce:	bl	ac50 <__aeabi_ui2d>
    ccd2:	cmp.w	sl, #0
    ccd6:	it	eq
    ccd8:	moveq	sl, r4
    ccda:	cmp.w	r9, #9
    ccde:	strd	r0, r1, [sp, #16]
    cce2:	ble.n	cd0c <_strtod_l+0x214>
    cce4:	ldr	r3, [pc, #292]	; (ce0c <_strtod_l+0x314>)
    cce6:	add.w	r3, r3, r9, lsl #3
    ccea:	ldrd	r2, r3, [r3, #-72]	; 0x48
    ccee:	bl	ad3c <__aeabi_dmul>
    ccf2:	mov	r6, r0
    ccf4:	mov	r0, r8
    ccf6:	mov	r7, r1
    ccf8:	bl	ac50 <__aeabi_ui2d>
    ccfc:	mov	r2, r0
    ccfe:	mov	r3, r1
    cd00:	mov	r0, r6
    cd02:	mov	r1, r7
    cd04:	bl	a9d8 <__adddf3>
    cd08:	strd	r0, r1, [sp, #16]
    cd0c:	cmp	r4, #15
    cd0e:	bgt.w	ce1c <_strtod_l+0x324>
    cd12:	ldr	r3, [sp, #44]	; 0x2c
    cd14:	cmp	r3, #0
    cd16:	beq.n	cd68 <_strtod_l+0x270>
    cd18:	ble.w	d754 <_strtod_l+0xc5c>
    cd1c:	ldr	r3, [sp, #44]	; 0x2c
    cd1e:	cmp	r3, #22
    cd20:	bgt.w	d620 <_strtod_l+0xb28>
    cd24:	ldr	r7, [pc, #228]	; (ce0c <_strtod_l+0x314>)
    cd26:	add.w	r7, r7, r3, lsl #3
    cd2a:	ldrd	r0, r1, [r7]
    cd2e:	ldrd	r2, r3, [sp, #16]
    cd32:	bl	ad3c <__aeabi_dmul>
    cd36:	mov	r8, r0
    cd38:	mov	r9, r1
    cd3a:	b.n	cc28 <_strtod_l+0x130>
    cd3c:	add	r0, sp, #108	; 0x6c
    cd3e:	ldr	r1, [pc, #208]	; (ce10 <_strtod_l+0x318>)
    cd40:	bl	119d8 <__match>
    cd44:	cmp	r0, #0
    cd46:	beq.w	cb64 <_strtod_l+0x6c>
    cd4a:	ldr	r3, [sp, #108]	; 0x6c
    cd4c:	ldr	r1, [pc, #196]	; (ce14 <_strtod_l+0x31c>)
    cd4e:	subs	r3, #1
    cd50:	add	r0, sp, #108	; 0x6c
    cd52:	str	r3, [sp, #108]	; 0x6c
    cd54:	bl	119d8 <__match>
    cd58:	cbnz	r0, cd60 <_strtod_l+0x268>
    cd5a:	ldr	r3, [sp, #108]	; 0x6c
    cd5c:	adds	r3, #1
    cd5e:	str	r3, [sp, #108]	; 0x6c
    cd60:	ldr	r3, [pc, #180]	; (ce18 <_strtod_l+0x320>)
    cd62:	str	r3, [sp, #20]
    cd64:	movs	r3, #0
    cd66:	str	r3, [sp, #16]
    cd68:	ldrd	r8, r9, [sp, #16]
    cd6c:	b.n	cc28 <_strtod_l+0x130>
    cd6e:	cmp	r4, #0
    cd70:	beq.w	d108 <_strtod_l+0x610>
    cd74:	ldr	r6, [sp, #108]	; 0x6c
    cd76:	adds	r3, r6, #1
    cd78:	str	r3, [sp, #108]	; 0x6c
    cd7a:	ldrb	r3, [r6, #1]
    cd7c:	cmp	r3, #43	; 0x2b
    cd7e:	beq.w	d33c <_strtod_l+0x844>
    cd82:	cmp	r3, #45	; 0x2d
    cd84:	beq.w	d1b2 <_strtod_l+0x6ba>
    cd88:	mov.w	ip, #0
    cd8c:	sub.w	r2, r3, #48	; 0x30
    cd90:	cmp	r2, #9
    cd92:	bhi.w	d336 <_strtod_l+0x83e>
    cd96:	cmp	r3, #48	; 0x30
    cd98:	bne.n	cda6 <_strtod_l+0x2ae>
    cd9a:	ldr	r2, [sp, #108]	; 0x6c
    cd9c:	adds	r2, #1
    cd9e:	str	r2, [sp, #108]	; 0x6c
    cda0:	ldrb	r3, [r2, #0]
    cda2:	cmp	r3, #48	; 0x30
    cda4:	beq.n	cd9c <_strtod_l+0x2a4>
    cda6:	sub.w	r2, r3, #49	; 0x31
    cdaa:	cmp	r2, #8
    cdac:	bhi.w	cc10 <_strtod_l+0x118>
    cdb0:	ldr	r2, [sp, #108]	; 0x6c
    cdb2:	str	r2, [sp, #48]	; 0x30
    cdb4:	adds	r1, r2, #1
    cdb6:	subs	r3, #48	; 0x30
    cdb8:	str	r1, [sp, #108]	; 0x6c
    cdba:	str	r3, [sp, #44]	; 0x2c
    cdbc:	ldrb	r3, [r2, #1]
    cdbe:	sub.w	lr, r3, #48	; 0x30
    cdc2:	cmp.w	lr, #9
    cdc6:	bhi.n	cde8 <_strtod_l+0x2f0>
    cdc8:	ldr	r2, [sp, #44]	; 0x2c
    cdca:	adds	r1, #1
    cdcc:	str	r1, [sp, #108]	; 0x6c
    cdce:	add.w	r2, r2, r2, lsl #2
    cdd2:	add.w	r2, r3, r2, lsl #1
    cdd6:	ldrb	r3, [r1, #0]
    cdd8:	sub.w	lr, r3, #48	; 0x30
    cddc:	cmp.w	lr, #9
    cde0:	sub.w	r2, r2, #48	; 0x30
    cde4:	bls.n	cdca <_strtod_l+0x2d2>
    cde6:	str	r2, [sp, #44]	; 0x2c
    cde8:	ldr	r2, [sp, #48]	; 0x30
    cdea:	subs	r1, r1, r2
    cdec:	cmp	r1, #8
    cdee:	bgt.w	d60e <_strtod_l+0xb16>
    cdf2:	ldr	r2, [sp, #44]	; 0x2c
    cdf4:	movw	r1, #19999	; 0x4e1f
    cdf8:	cmp	r2, r1
    cdfa:	it	ge
    cdfc:	movge	r2, r1
    cdfe:	cmp.w	ip, #0
    ce02:	beq.w	cc12 <_strtod_l+0x11a>
    ce06:	negs	r2, r2
    ce08:	b.n	cc12 <_strtod_l+0x11a>
    ce0a:	nop
    ce0c:	.word	0x00013be8
    ce10:	.word	0x000138f0
    ce14:	.word	0x000138f4
    ce18:	.word	0x7ff00000
    ce1c:	ldr	r3, [sp, #44]	; 0x2c
    ce1e:	rsb	r9, r9, r4
    ce22:	add	r9, r3
    ce24:	cmp.w	r9, #0
    ce28:	ble.w	d53a <_strtod_l+0xa42>
    ce2c:	ands.w	r1, r9, #15
    ce30:	beq.n	ce48 <_strtod_l+0x350>
    ce32:	ldr	r3, [pc, #756]	; (d128 <_strtod_l+0x630>)
    ce34:	add.w	r1, r3, r1, lsl #3
    ce38:	ldrd	r0, r1, [r1]
    ce3c:	ldrd	r2, r3, [sp, #16]
    ce40:	bl	ad3c <__aeabi_dmul>
    ce44:	strd	r0, r1, [sp, #16]
    ce48:	bics.w	r6, r9, #15
    ce4c:	bne.w	d270 <_strtod_l+0x778>
    ce50:	movs	r3, #0
    ce52:	str	r3, [sp, #40]	; 0x28
    ce54:	str	r5, [sp, #0]
    ce56:	mov	r3, r4
    ce58:	mov	r2, sl
    ce5a:	ldr	r1, [sp, #32]
    ce5c:	mov	r0, fp
    ce5e:	bl	11d00 <__s2b>
    ce62:	str	r0, [sp, #72]	; 0x48
    ce64:	cmp	r0, #0
    ce66:	beq.w	d4b6 <_strtod_l+0x9be>
    ce6a:	ldr	r2, [sp, #44]	; 0x2c
    ce6c:	movs	r7, #0
    ce6e:	cmp	r2, #0
    ce70:	rsb	r3, r2, #0
    ce74:	it	ge
    ce76:	movge	r3, r7
    ce78:	str	r3, [sp, #48]	; 0x30
    ce7a:	bic.w	r3, r2, r2, asr #31
    ce7e:	str	r3, [sp, #44]	; 0x2c
    ce80:	mov	sl, r7
    ce82:	ldr	r4, [sp, #72]	; 0x48
    ce84:	mov	r0, fp
    ce86:	ldr	r1, [r4, #4]
    ce88:	bl	11c20 <_Balloc>
    ce8c:	mov	r6, r0
    ce8e:	cmp	r0, #0
    ce90:	beq.w	d348 <_strtod_l+0x850>
    ce94:	ldr	r2, [r4, #16]
    ce96:	vldr	d7, [sp, #16]
    ce9a:	adds	r2, #2
    ce9c:	lsls	r2, r2, #2
    ce9e:	add.w	r1, r4, #12
    cea2:	adds	r0, #12
    cea4:	vstr	d7, [sp, #32]
    cea8:	bl	82a4 <memcpy>
    ceac:	vldr	d0, [sp, #32]
    ceb0:	add	r2, sp, #120	; 0x78
    ceb2:	add	r1, sp, #116	; 0x74
    ceb4:	mov	r0, fp
    ceb6:	bl	12344 <__d2b>
    ceba:	str	r0, [sp, #112]	; 0x70
    cebc:	cmp	r0, #0
    cebe:	beq.w	d34a <_strtod_l+0x852>
    cec2:	movs	r1, #1
    cec4:	mov	r0, fp
    cec6:	bl	11e34 <__i2b>
    ceca:	mov	sl, r0
    cecc:	cmp	r0, #0
    cece:	beq.w	d348 <_strtod_l+0x850>
    ced2:	ldr	r2, [sp, #116]	; 0x74
    ced4:	cmp	r2, #0
    ced6:	blt.w	d140 <_strtod_l+0x648>
    ceda:	ldr	r3, [sp, #48]	; 0x30
    cedc:	ldr	r4, [sp, #44]	; 0x2c
    cede:	adds	r5, r3, r2
    cee0:	ldr	r0, [sp, #40]	; 0x28
    cee2:	ldr	r3, [sp, #120]	; 0x78
    cee4:	ldr	r1, [pc, #580]	; (d12c <_strtod_l+0x634>)
    cee6:	subs	r2, r2, r0
    cee8:	add	r2, r3
    ceea:	subs	r2, #1
    ceec:	cmp	r2, r1
    ceee:	rsb	r3, r3, #54	; 0x36
    cef2:	bge.w	d0d2 <_strtod_l+0x5da>
    cef6:	subs	r1, r1, r2
    cef8:	cmp	r1, #31
    cefa:	sub.w	r3, r3, r1
    cefe:	bgt.w	d14e <_strtod_l+0x656>
    cf02:	movs	r2, #1
    cf04:	lsls	r2, r1
    cf06:	str	r2, [sp, #56]	; 0x38
    cf08:	movs	r2, #0
    cf0a:	str	r2, [sp, #76]	; 0x4c
    cf0c:	add.w	r9, r5, r3
    cf10:	add	r4, r3
    cf12:	ldr	r3, [sp, #40]	; 0x28
    cf14:	cmp	r5, r9
    cf16:	mov	r2, r5
    cf18:	add	r4, r3
    cf1a:	it	ge
    cf1c:	movge	r2, r9
    cf1e:	cmp	r2, r4
    cf20:	it	ge
    cf22:	movge	r2, r4
    cf24:	cmp	r2, #0
    cf26:	ble.n	cf30 <_strtod_l+0x438>
    cf28:	rsb	r9, r2, r9
    cf2c:	subs	r4, r4, r2
    cf2e:	subs	r5, r5, r2
    cf30:	ldr	r3, [sp, #48]	; 0x30
    cf32:	cbz	r3, cf64 <_strtod_l+0x46c>
    cf34:	mov	r1, sl
    cf36:	mov	r2, r3
    cf38:	mov	r0, fp
    cf3a:	bl	11f78 <__pow5mult>
    cf3e:	mov	sl, r0
    cf40:	cmp	r0, #0
    cf42:	beq.w	d348 <_strtod_l+0x850>
    cf46:	mov	r1, r0
    cf48:	ldr	r2, [sp, #112]	; 0x70
    cf4a:	mov	r0, fp
    cf4c:	bl	11e48 <__multiply>
    cf50:	cmp	r0, #0
    cf52:	beq.w	d348 <_strtod_l+0x850>
    cf56:	str	r0, [sp, #52]	; 0x34
    cf58:	ldr	r1, [sp, #112]	; 0x70
    cf5a:	mov	r0, fp
    cf5c:	bl	11c6c <_Bfree>
    cf60:	ldr	r2, [sp, #52]	; 0x34
    cf62:	str	r2, [sp, #112]	; 0x70
    cf64:	cmp.w	r9, #0
    cf68:	ble.n	cf7c <_strtod_l+0x484>
    cf6a:	mov	r2, r9
    cf6c:	ldr	r1, [sp, #112]	; 0x70
    cf6e:	mov	r0, fp
    cf70:	bl	12018 <__lshift>
    cf74:	str	r0, [sp, #112]	; 0x70
    cf76:	cmp	r0, #0
    cf78:	beq.w	d34a <_strtod_l+0x852>
    cf7c:	ldr	r3, [sp, #44]	; 0x2c
    cf7e:	cbz	r3, cf92 <_strtod_l+0x49a>
    cf80:	mov	r1, r6
    cf82:	ldr	r2, [sp, #44]	; 0x2c
    cf84:	mov	r0, fp
    cf86:	bl	11f78 <__pow5mult>
    cf8a:	mov	r6, r0
    cf8c:	cmp	r0, #0
    cf8e:	beq.w	d348 <_strtod_l+0x850>
    cf92:	cmp	r4, #0
    cf94:	ble.n	cfa8 <_strtod_l+0x4b0>
    cf96:	mov	r1, r6
    cf98:	mov	r2, r4
    cf9a:	mov	r0, fp
    cf9c:	bl	12018 <__lshift>
    cfa0:	mov	r6, r0
    cfa2:	cmp	r0, #0
    cfa4:	beq.w	d348 <_strtod_l+0x850>
    cfa8:	cmp	r5, #0
    cfaa:	ble.n	cfbe <_strtod_l+0x4c6>
    cfac:	mov	r1, sl
    cfae:	mov	r2, r5
    cfb0:	mov	r0, fp
    cfb2:	bl	12018 <__lshift>
    cfb6:	mov	sl, r0
    cfb8:	cmp	r0, #0
    cfba:	beq.w	d348 <_strtod_l+0x850>
    cfbe:	mov	r2, r6
    cfc0:	ldr	r1, [sp, #112]	; 0x70
    cfc2:	mov	r0, fp
    cfc4:	bl	1210c <__mdiff>
    cfc8:	mov	r7, r0
    cfca:	cmp	r0, #0
    cfcc:	beq.w	d348 <_strtod_l+0x850>
    cfd0:	movs	r3, #0
    cfd2:	ldr	r2, [r0, #12]
    cfd4:	str	r3, [r0, #12]
    cfd6:	mov	r1, sl
    cfd8:	str	r2, [sp, #52]	; 0x34
    cfda:	bl	120c8 <__mcmp>
    cfde:	cmp	r0, #0
    cfe0:	blt.w	d7fe <_strtod_l+0xd06>
    cfe4:	beq.w	d778 <_strtod_l+0xc80>
    cfe8:	mov	r1, sl
    cfea:	mov	r0, r7
    cfec:	bl	12400 <__ratio>
    cff0:	vmov	r4, r5, d0
    cff4:	movs	r2, #0
    cff6:	mov.w	r3, #1073741824	; 0x40000000
    cffa:	vmov	r0, s0
    cffe:	mov	r1, r5
    d000:	bl	b234 <__aeabi_dcmple>
    d004:	cmp	r0, #0
    d006:	beq.n	d0dc <_strtod_l+0x5e4>
    d008:	ldr	r3, [sp, #52]	; 0x34
    d00a:	cmp	r3, #0
    d00c:	beq.w	d15e <_strtod_l+0x666>
    d010:	vldr	d7, [pc, #260]	; d118 <_strtod_l+0x620>
    d014:	ldr	r3, [sp, #20]
    d016:	ldr	r5, [pc, #280]	; (d130 <_strtod_l+0x638>)
    d018:	vstr	d7, [sp, #56]	; 0x38
    d01c:	movs	r4, #0
    d01e:	mov	r8, r3
    d020:	ldr.w	r9, [pc, #276]	; d138 <_strtod_l+0x640>
    d024:	ldr	r3, [pc, #268]	; (d134 <_strtod_l+0x63c>)
    d026:	and.w	r9, r8, r9
    d02a:	cmp	r9, r3
    d02c:	beq.w	d45c <_strtod_l+0x964>
    d030:	ldr	r3, [sp, #40]	; 0x28
    d032:	cbz	r3, d080 <_strtod_l+0x588>
    d034:	cmp.w	r9, #111149056	; 0x6a00000
    d038:	bhi.n	d080 <_strtod_l+0x588>
    d03a:	add	r3, pc, #228	; (adr r3, d120 <_strtod_l+0x628>)
    d03c:	ldrd	r2, r3, [r3]
    d040:	ldrd	r0, r1, [sp, #56]	; 0x38
    d044:	bl	b234 <__aeabi_dcmple>
    d048:	cbz	r0, d078 <_strtod_l+0x580>
    d04a:	ldrd	r0, r1, [sp, #56]	; 0x38
    d04e:	bl	b2ec <__aeabi_d2uiz>
    d052:	cmp	r0, #0
    d054:	beq.w	d6d8 <_strtod_l+0xbe0>
    d058:	bl	ac50 <__aeabi_ui2d>
    d05c:	strd	r0, r1, [sp, #56]	; 0x38
    d060:	ldr	r3, [sp, #52]	; 0x34
    d062:	cmp	r3, #0
    d064:	bne.w	d6ce <_strtod_l+0xbd6>
    d068:	ldrd	r1, r2, [sp, #56]	; 0x38
    d06c:	add.w	r3, r2, #2147483648	; 0x80000000
    d070:	str	r1, [sp, #80]	; 0x50
    d072:	str	r3, [sp, #84]	; 0x54
    d074:	ldrd	r4, r5, [sp, #80]	; 0x50
    d078:	add.w	r3, r5, #112197632	; 0x6b00000
    d07c:	rsb	r5, r9, r3
    d080:	vldr	d0, [sp, #32]
    d084:	bl	12220 <__ulp>
    d088:	mov	r0, r4
    d08a:	vmov	r2, r3, d0
    d08e:	mov	r1, r5
    d090:	bl	ad3c <__aeabi_dmul>
    d094:	ldrd	r2, r3, [sp, #32]
    d098:	bl	a9d8 <__adddf3>
    d09c:	strd	r0, r1, [sp, #16]
    d0a0:	mov	r4, r1
    d0a2:	ldr	r3, [sp, #40]	; 0x28
    d0a4:	cbnz	r3, d0b0 <_strtod_l+0x5b8>
    d0a6:	ldr	r3, [pc, #144]	; (d138 <_strtod_l+0x640>)
    d0a8:	ands	r3, r4
    d0aa:	cmp	r9, r3
    d0ac:	beq.w	d4cc <_strtod_l+0x9d4>
    d0b0:	ldr	r1, [sp, #112]	; 0x70
    d0b2:	mov	r0, fp
    d0b4:	bl	11c6c <_Bfree>
    d0b8:	mov	r1, r6
    d0ba:	mov	r0, fp
    d0bc:	bl	11c6c <_Bfree>
    d0c0:	mov	r1, sl
    d0c2:	mov	r0, fp
    d0c4:	bl	11c6c <_Bfree>
    d0c8:	mov	r1, r7
    d0ca:	mov	r0, fp
    d0cc:	bl	11c6c <_Bfree>
    d0d0:	b.n	ce82 <_strtod_l+0x38a>
    d0d2:	movs	r2, #0
    d0d4:	str	r2, [sp, #76]	; 0x4c
    d0d6:	movs	r2, #1
    d0d8:	str	r2, [sp, #56]	; 0x38
    d0da:	b.n	cf0c <_strtod_l+0x414>
    d0dc:	ldr	r3, [pc, #92]	; (d13c <_strtod_l+0x644>)
    d0de:	mov	r0, r4
    d0e0:	mov	r1, r5
    d0e2:	movs	r2, #0
    d0e4:	bl	ad3c <__aeabi_dmul>
    d0e8:	ldr	r3, [sp, #52]	; 0x34
    d0ea:	strd	r0, r1, [sp, #56]	; 0x38
    d0ee:	cmp	r3, #0
    d0f0:	bne.n	d1a8 <_strtod_l+0x6b0>
    d0f2:	add.w	r3, r1, #2147483648	; 0x80000000
    d0f6:	str	r0, [sp, #64]	; 0x40
    d0f8:	str	r3, [sp, #68]	; 0x44
    d0fa:	ldr	r3, [sp, #20]
    d0fc:	ldrd	r4, r5, [sp, #64]	; 0x40
    d100:	mov	r8, r3
    d102:	b.n	d020 <_strtod_l+0x528>
    d104:	mov.w	r9, #1
    d108:	cmp	r0, #0
    d10a:	bne.n	d1be <_strtod_l+0x6c6>
    d10c:	ldr	r3, [sp, #40]	; 0x28
    d10e:	cmp	r3, #0
    d110:	beq.w	cb64 <_strtod_l+0x6c>
    d114:	mov	r4, r0
    d116:	b.n	cd74 <_strtod_l+0x27c>
    d118:	.word	0x00000000
    d11c:	.word	0x3ff00000
    d120:	.word	0xffc00000
    d124:	.word	0x41dfffff
    d128:	.word	0x00013be8
    d12c:	.word	0xfffffc02
    d130:	.word	0x3ff00000
    d134:	.word	0x7fe00000
    d138:	.word	0x7ff00000
    d13c:	.word	0x3fe00000
    d140:	ldr	r3, [sp, #44]	; 0x2c
    d142:	ldr	r5, [sp, #48]	; 0x30
    d144:	subs	r4, r3, r2
    d146:	b.n	cee0 <_strtod_l+0x3e8>
    d148:	mov.w	r9, #1
    d14c:	b.n	cc04 <_strtod_l+0x10c>
    d14e:	ldr	r1, [pc, #736]	; (d430 <_strtod_l+0x938>)
    d150:	subs	r1, r1, r2
    d152:	movs	r2, #1
    d154:	lsl.w	r1, r2, r1
    d158:	str	r1, [sp, #76]	; 0x4c
    d15a:	str	r2, [sp, #56]	; 0x38
    d15c:	b.n	cf0c <_strtod_l+0x414>
    d15e:	ldrd	r1, r2, [sp, #16]
    d162:	cmp	r1, #0
    d164:	bne.w	d2fa <_strtod_l+0x802>
    d168:	ubfx	r3, r2, #0, #20
    d16c:	mov	r8, r2
    d16e:	cmp	r3, #0
    d170:	bne.w	d306 <_strtod_l+0x80e>
    d174:	movs	r2, #0
    d176:	ldr	r3, [pc, #700]	; (d434 <_strtod_l+0x93c>)
    d178:	mov	r0, r4
    d17a:	mov	r1, r5
    d17c:	bl	b220 <__aeabi_dcmplt>
    d180:	cmp	r0, #0
    d182:	bne.w	d882 <_strtod_l+0xd8a>
    d186:	movs	r2, #0
    d188:	ldr	r3, [pc, #684]	; (d438 <_strtod_l+0x940>)
    d18a:	mov	r0, r4
    d18c:	mov	r1, r5
    d18e:	bl	ad3c <__aeabi_dmul>
    d192:	mov	r2, r1
    d194:	mov	r1, r0
    d196:	strd	r1, r2, [sp, #56]	; 0x38
    d19a:	add.w	r3, r2, #2147483648	; 0x80000000
    d19e:	str	r0, [sp, #96]	; 0x60
    d1a0:	str	r3, [sp, #100]	; 0x64
    d1a2:	ldrd	r4, r5, [sp, #96]	; 0x60
    d1a6:	b.n	d020 <_strtod_l+0x528>
    d1a8:	vldr	d7, [sp, #56]	; 0x38
    d1ac:	vstr	d7, [sp, #64]	; 0x40
    d1b0:	b.n	d0fa <_strtod_l+0x602>
    d1b2:	mov.w	ip, #1
    d1b6:	adds	r3, r6, #2
    d1b8:	str	r3, [sp, #108]	; 0x6c
    d1ba:	ldrb	r3, [r6, #2]
    d1bc:	b.n	cd8c <_strtod_l+0x294>
    d1be:	movs	r4, #0
    d1c0:	b.n	cd74 <_strtod_l+0x27c>
    d1c2:	cmp.w	r9, #0
    d1c6:	bne.w	cb64 <_strtod_l+0x6c>
    d1ca:	subs	r3, #73	; 0x49
    d1cc:	cmp	r3, #37	; 0x25
    d1ce:	bhi.w	cb64 <_strtod_l+0x6c>
    d1d2:	add	r2, pc, #4	; (adr r2, d1d8 <_strtod_l+0x6e0>)
    d1d4:	ldr.w	pc, [r2, r3, lsl #2]
    d1d8:	.word	0x0000cd3d
    d1dc:	.word	0x0000cb65
    d1e0:	.word	0x0000cb65
    d1e4:	.word	0x0000cb65
    d1e8:	.word	0x0000cb65
    d1ec:	.word	0x0000d315
    d1f0:	.word	0x0000cb65
    d1f4:	.word	0x0000cb65
    d1f8:	.word	0x0000cb65
    d1fc:	.word	0x0000cb65
    d200:	.word	0x0000cb65
    d204:	.word	0x0000cb65
    d208:	.word	0x0000cb65
    d20c:	.word	0x0000cb65
    d210:	.word	0x0000cb65
    d214:	.word	0x0000cb65
    d218:	.word	0x0000cb65
    d21c:	.word	0x0000cb65
    d220:	.word	0x0000cb65
    d224:	.word	0x0000cb65
    d228:	.word	0x0000cb65
    d22c:	.word	0x0000cb65
    d230:	.word	0x0000cb65
    d234:	.word	0x0000cb65
    d238:	.word	0x0000cb65
    d23c:	.word	0x0000cb65
    d240:	.word	0x0000cb65
    d244:	.word	0x0000cb65
    d248:	.word	0x0000cb65
    d24c:	.word	0x0000cb65
    d250:	.word	0x0000cb65
    d254:	.word	0x0000cb65
    d258:	.word	0x0000cd3d
    d25c:	.word	0x0000cb65
    d260:	.word	0x0000cb65
    d264:	.word	0x0000cb65
    d268:	.word	0x0000cb65
    d26c:	.word	0x0000d315
    d270:	cmp.w	r6, #308	; 0x134
    d274:	bgt.w	d4b6 <_strtod_l+0x9be>
    d278:	asrs	r6, r6, #4
    d27a:	cmp	r6, #1
    d27c:	ldr.w	r9, [pc, #472]	; d458 <_strtod_l+0x960>
    d280:	ble.w	d8b6 <_strtod_l+0xdbe>
    d284:	ldrd	r0, r1, [sp, #16]
    d288:	movs	r3, #0
    d28a:	mov	r7, r9
    d28c:	mov	r8, r3
    d28e:	tst.w	r6, #1
    d292:	add.w	r8, r8, #1
    d296:	mov.w	r6, r6, asr #1
    d29a:	beq.n	d2a6 <_strtod_l+0x7ae>
    d29c:	ldrd	r2, r3, [r7]
    d2a0:	bl	ad3c <__aeabi_dmul>
    d2a4:	movs	r3, #1
    d2a6:	cmp	r6, #1
    d2a8:	add.w	r7, r7, #8
    d2ac:	bne.n	d28e <_strtod_l+0x796>
    d2ae:	cmp	r3, #0
    d2b0:	bne.w	d97a <_strtod_l+0xe82>
    d2b4:	ldr	r3, [sp, #20]
    d2b6:	sub.w	r3, r3, #55574528	; 0x3500000
    d2ba:	str	r3, [sp, #20]
    d2bc:	add.w	r8, r9, r8, lsl #3
    d2c0:	ldrd	r2, r3, [sp, #16]
    d2c4:	ldrd	r0, r1, [r8]
    d2c8:	bl	ad3c <__aeabi_dmul>
    d2cc:	bic.w	r3, r1, #2147483648	; 0x80000000
    d2d0:	lsrs	r3, r3, #20
    d2d2:	ldr	r2, [pc, #360]	; (d43c <_strtod_l+0x944>)
    d2d4:	lsls	r3, r3, #20
    d2d6:	cmp	r3, r2
    d2d8:	strd	r0, r1, [sp, #16]
    d2dc:	bhi.w	d4b6 <_strtod_l+0x9be>
    d2e0:	sub.w	r2, r2, #1048576	; 0x100000
    d2e4:	cmp	r3, r2
    d2e6:	bls.w	d878 <_strtod_l+0xd80>
    d2ea:	ldr	r3, [pc, #340]	; (d440 <_strtod_l+0x948>)
    d2ec:	str	r3, [sp, #20]
    d2ee:	movs	r3, #0
    d2f0:	str	r3, [sp, #40]	; 0x28
    d2f2:	mov.w	r3, #4294967295
    d2f6:	str	r3, [sp, #16]
    d2f8:	b.n	ce54 <_strtod_l+0x35c>
    d2fa:	ldrd	r1, r2, [sp, #16]
    d2fe:	cmp	r1, #1
    d300:	beq.w	d6e2 <_strtod_l+0xbea>
    d304:	mov	r8, r2
    d306:	vldr	d7, [pc, #288]	; d428 <_strtod_l+0x930>
    d30a:	movs	r4, #0
    d30c:	ldr	r5, [pc, #308]	; (d444 <_strtod_l+0x94c>)
    d30e:	vstr	d7, [sp, #56]	; 0x38
    d312:	b.n	d020 <_strtod_l+0x528>
    d314:	add	r0, sp, #108	; 0x6c
    d316:	ldr	r1, [pc, #304]	; (d448 <_strtod_l+0x950>)
    d318:	bl	119d8 <__match>
    d31c:	cmp	r0, #0
    d31e:	beq.w	cb64 <_strtod_l+0x6c>
    d322:	ldr	r3, [sp, #108]	; 0x6c
    d324:	ldrb	r3, [r3, #0]
    d326:	cmp	r3, #40	; 0x28
    d328:	beq.w	d930 <_strtod_l+0xe38>
    d32c:	ldr	r3, [pc, #284]	; (d44c <_strtod_l+0x954>)
    d32e:	str	r3, [sp, #20]
    d330:	movs	r3, #0
    d332:	str	r3, [sp, #16]
    d334:	b.n	cd68 <_strtod_l+0x270>
    d336:	str	r6, [sp, #108]	; 0x6c
    d338:	movs	r2, #0
    d33a:	b.n	cc12 <_strtod_l+0x11a>
    d33c:	mov.w	ip, #0
    d340:	b.n	d1b6 <_strtod_l+0x6be>
    d342:	adds	r3, #1
    d344:	bne.w	d916 <_strtod_l+0xe1e>
    d348:	ldr	r0, [sp, #112]	; 0x70
    d34a:	ldr	r3, [pc, #260]	; (d450 <_strtod_l+0x958>)
    d34c:	str	r3, [sp, #20]
    d34e:	movs	r2, #0
    d350:	str	r2, [sp, #16]
    d352:	ldrd	r8, r9, [sp, #16]
    d356:	movs	r3, #34	; 0x22
    d358:	str.w	r3, [fp]
    d35c:	mov	r1, r0
    d35e:	mov	r0, fp
    d360:	bl	11c6c <_Bfree>
    d364:	mov	r1, r6
    d366:	mov	r0, fp
    d368:	bl	11c6c <_Bfree>
    d36c:	mov	r1, sl
    d36e:	mov	r0, fp
    d370:	bl	11c6c <_Bfree>
    d374:	ldr	r1, [sp, #72]	; 0x48
    d376:	mov	r0, fp
    d378:	bl	11c6c <_Bfree>
    d37c:	mov	r1, r7
    d37e:	mov	r0, fp
    d380:	bl	11c6c <_Bfree>
    d384:	b.n	cc28 <_strtod_l+0x130>
    d386:	ldr	r2, [sp, #28]
    d388:	str	r5, [sp, #8]
    d38a:	add	r3, sp, #112	; 0x70
    d38c:	str	r2, [sp, #4]
    d38e:	str	r3, [sp, #0]
    d390:	ldr	r2, [pc, #192]	; (d454 <_strtod_l+0x95c>)
    d392:	add	r3, sp, #116	; 0x74
    d394:	add	r1, sp, #108	; 0x6c
    d396:	mov	r0, fp
    d398:	bl	114c8 <__gethex>
    d39c:	ands.w	r6, r0, #7
    d3a0:	mov	r5, r0
    d3a2:	beq.w	cc20 <_strtod_l+0x128>
    d3a6:	cmp	r6, #6
    d3a8:	bne.w	d658 <_strtod_l+0xb60>
    d3ac:	adds	r4, #1
    d3ae:	movs	r3, #0
    d3b0:	str	r4, [sp, #108]	; 0x6c
    d3b2:	mov.w	r8, #0
    d3b6:	mov.w	r9, #0
    d3ba:	str	r3, [sp, #28]
    d3bc:	b.n	cc28 <_strtod_l+0x130>
    d3be:	ldr.w	r1, [sl]
    d3c2:	mov	r0, r4
    d3c4:	mov	r2, r9
    d3c6:	bl	ca1c <strncmp>
    d3ca:	cbz	r0, d3e0 <_strtod_l+0x8e8>
    d3cc:	mov.w	sl, #0
    d3d0:	mov	r3, r7
    d3d2:	mov	r8, sl
    d3d4:	mov	r5, sl
    d3d6:	mov	r0, sl
    d3d8:	mov	r7, sl
    d3da:	mov	r4, sl
    d3dc:	mov	r9, sl
    d3de:	b.n	cc04 <_strtod_l+0x10c>
    d3e0:	ldr	r3, [sp, #108]	; 0x6c
    d3e2:	add.w	r2, r3, r9
    d3e6:	str	r2, [sp, #108]	; 0x6c
    d3e8:	ldrb.w	r3, [r3, r9]
    d3ec:	cmp	r3, #48	; 0x30
    d3ee:	bne.n	d3fe <_strtod_l+0x906>
    d3f0:	adds	r2, #1
    d3f2:	str	r2, [sp, #108]	; 0x6c
    d3f4:	ldrb	r3, [r2, #0]
    d3f6:	cmp	r3, #48	; 0x30
    d3f8:	add.w	r0, r0, #1
    d3fc:	beq.n	d3f0 <_strtod_l+0x8f8>
    d3fe:	sub.w	r2, r3, #49	; 0x31
    d402:	cmp	r2, #8
    d404:	bls.w	d700 <_strtod_l+0xc08>
    d408:	mov.w	sl, #0
    d40c:	cmp	r3, #101	; 0x65
    d40e:	mov	r8, sl
    d410:	mov	r5, sl
    d412:	mov	r7, sl
    d414:	beq.w	d104 <_strtod_l+0x60c>
    d418:	mov	r4, sl
    d41a:	mov.w	r9, #1
    d41e:	b.w	cc0a <_strtod_l+0x112>
    d422:	nop
    d424:	nop.w
    d428:	.word	0x00000000
    d42c:	.word	0x3ff00000
    d430:	.word	0xfffffbe2
    d434:	.word	0x3ff00000
    d438:	.word	0x3fe00000
    d43c:	.word	0x7ca00000
    d440:	.word	0x7fefffff
    d444:	.word	0xbff00000
    d448:	.word	0x000138fc
    d44c:	.word	0xfff80000
    d450:	.word	0x7ff00000
    d454:	.word	0x000138dc
    d458:	.word	0x00013cb0
    d45c:	sub.w	r3, r8, #55574528	; 0x3500000
    d460:	str	r3, [sp, #20]
    d462:	vldr	d7, [sp, #16]
    d466:	vmov.f32	s0, s14
    d46a:	vmov.f32	s1, s15
    d46e:	bl	12220 <__ulp>
    d472:	mov	r0, r4
    d474:	vmov	r2, r3, d0
    d478:	mov	r1, r5
    d47a:	bl	ad3c <__aeabi_dmul>
    d47e:	ldrd	r2, r3, [sp, #16]
    d482:	bl	a9d8 <__adddf3>
    d486:	bic.w	r3, r1, #2147483648	; 0x80000000
    d48a:	strd	r0, r1, [sp, #16]
    d48e:	lsrs	r3, r3, #20
    d490:	ldr	r2, [pc, #684]	; (d740 <_strtod_l+0xc48>)
    d492:	ldrd	r0, r1, [sp, #32]
    d496:	lsls	r3, r3, #20
    d498:	cmp	r3, r2
    d49a:	strd	r0, r1, [sp, #88]	; 0x58
    d49e:	bls.w	d616 <_strtod_l+0xb1e>
    d4a2:	ldr	r3, [pc, #672]	; (d744 <_strtod_l+0xc4c>)
    d4a4:	cmp	r1, r3
    d4a6:	beq.w	d86e <_strtod_l+0xd76>
    d4aa:	ldr	r3, [pc, #664]	; (d744 <_strtod_l+0xc4c>)
    d4ac:	str	r3, [sp, #20]
    d4ae:	mov.w	r3, #4294967295
    d4b2:	str	r3, [sp, #16]
    d4b4:	b.n	d0b0 <_strtod_l+0x5b8>
    d4b6:	ldr	r3, [pc, #656]	; (d748 <_strtod_l+0xc50>)
    d4b8:	str	r3, [sp, #20]
    d4ba:	movs	r2, #0
    d4bc:	movs	r3, #34	; 0x22
    d4be:	str	r2, [sp, #16]
    d4c0:	ldrd	r8, r9, [sp, #16]
    d4c4:	str.w	r3, [fp]
    d4c8:	b.w	cc28 <_strtod_l+0x130>
    d4cc:	ldrd	r8, r9, [sp, #56]	; 0x38
    d4d0:	mov	r1, r9
    d4d2:	mov	r0, r8
    d4d4:	bl	b29c <__aeabi_d2iz>
    d4d8:	bl	ac70 <__aeabi_i2d>
    d4dc:	mov	r3, r1
    d4de:	mov	r2, r0
    d4e0:	mov	r1, r9
    d4e2:	mov	r0, r8
    d4e4:	bl	a9d4 <__aeabi_dsub>
    d4e8:	ldr	r3, [sp, #52]	; 0x34
    d4ea:	mov	r8, r0
    d4ec:	mov	r9, r1
    d4ee:	cbnz	r3, d512 <_strtod_l+0xa1a>
    d4f0:	ldr	r3, [sp, #16]
    d4f2:	cbnz	r3, d512 <_strtod_l+0xa1a>
    d4f4:	ubfx	r4, r4, #0, #20
    d4f8:	cbnz	r4, d512 <_strtod_l+0xa1a>
    d4fa:	add	r3, pc, #548	; (adr r3, d720 <_strtod_l+0xc28>)
    d4fc:	ldrd	r2, r3, [r3]
    d500:	bl	b220 <__aeabi_dcmplt>
    d504:	cmp	r0, #0
    d506:	beq.w	d0b0 <_strtod_l+0x5b8>
    d50a:	ldrd	r8, r9, [sp, #16]
    d50e:	ldr	r0, [sp, #112]	; 0x70
    d510:	b.n	d35c <_strtod_l+0x864>
    d512:	add	r3, pc, #532	; (adr r3, d728 <_strtod_l+0xc30>)
    d514:	ldrd	r2, r3, [r3]
    d518:	mov	r0, r8
    d51a:	mov	r1, r9
    d51c:	bl	b220 <__aeabi_dcmplt>
    d520:	cmp	r0, #0
    d522:	bne.n	d50a <_strtod_l+0xa12>
    d524:	mov	r0, r8
    d526:	mov	r1, r9
    d528:	add	r3, pc, #516	; (adr r3, d730 <_strtod_l+0xc38>)
    d52a:	ldrd	r2, r3, [r3]
    d52e:	bl	b25c <__aeabi_dcmpgt>
    d532:	cmp	r0, #0
    d534:	beq.w	d0b0 <_strtod_l+0x5b8>
    d538:	b.n	d50a <_strtod_l+0xa12>
    d53a:	beq.w	ce50 <_strtod_l+0x358>
    d53e:	rsb	r6, r9, #0
    d542:	ands.w	r2, r6, #15
    d546:	beq.n	d55e <_strtod_l+0xa66>
    d548:	ldr	r3, [pc, #512]	; (d74c <_strtod_l+0xc54>)
    d54a:	add.w	r3, r3, r2, lsl #3
    d54e:	ldrd	r0, r1, [sp, #16]
    d552:	ldrd	r2, r3, [r3]
    d556:	bl	af90 <__aeabi_ddiv>
    d55a:	strd	r0, r1, [sp, #16]
    d55e:	asrs	r6, r6, #4
    d560:	beq.w	ce50 <_strtod_l+0x358>
    d564:	cmp	r6, #31
    d566:	bgt.n	d5da <_strtod_l+0xae2>
    d568:	ands.w	r3, r6, #16
    d56c:	beq.w	d8e0 <_strtod_l+0xde8>
    d570:	movs	r3, #106	; 0x6a
    d572:	cmp	r6, #0
    d574:	str	r3, [sp, #40]	; 0x28
    d576:	ble.n	d5a0 <_strtod_l+0xaa8>
    d578:	ldrd	r0, r1, [sp, #16]
    d57c:	ldr	r7, [pc, #464]	; (d750 <_strtod_l+0xc58>)
    d57e:	movs	r3, #0
    d580:	lsls	r2, r6, #31
    d582:	bpl.n	d58e <_strtod_l+0xa96>
    d584:	ldrd	r2, r3, [r7]
    d588:	bl	ad3c <__aeabi_dmul>
    d58c:	movs	r3, #1
    d58e:	asrs	r6, r6, #1
    d590:	add.w	r7, r7, #8
    d594:	bne.n	d580 <_strtod_l+0xa88>
    d596:	cmp	r3, #0
    d598:	bne.w	d980 <_strtod_l+0xe88>
    d59c:	ldr	r3, [sp, #40]	; 0x28
    d59e:	cbz	r3, d5c8 <_strtod_l+0xad0>
    d5a0:	ldrd	r1, r2, [sp, #16]
    d5a4:	ubfx	r3, r2, #20, #11
    d5a8:	rsb	r3, r3, #107	; 0x6b
    d5ac:	cmp	r3, #0
    d5ae:	mov	r1, r2
    d5b0:	ble.n	d5c8 <_strtod_l+0xad0>
    d5b2:	cmp	r3, #31
    d5b4:	ble.w	d96a <_strtod_l+0xe72>
    d5b8:	movs	r2, #0
    d5ba:	cmp	r3, #52	; 0x34
    d5bc:	str	r2, [sp, #16]
    d5be:	ble.w	d986 <_strtod_l+0xe8e>
    d5c2:	mov.w	r3, #57671680	; 0x3700000
    d5c6:	str	r3, [sp, #20]
    d5c8:	movs	r2, #0
    d5ca:	movs	r3, #0
    d5cc:	ldrd	r0, r1, [sp, #16]
    d5d0:	bl	b20c <__aeabi_dcmpeq>
    d5d4:	cmp	r0, #0
    d5d6:	beq.w	ce54 <_strtod_l+0x35c>
    d5da:	movs	r3, #34	; 0x22
    d5dc:	str.w	r3, [fp]
    d5e0:	mov.w	r8, #0
    d5e4:	mov.w	r9, #0
    d5e8:	b.w	cc28 <_strtod_l+0x130>
    d5ec:	ldr	r1, [sp, #108]	; 0x6c
    d5ee:	adds	r4, #1
    d5f0:	cmp	r0, #8
    d5f2:	ble.w	d712 <_strtod_l+0xc1a>
    d5f6:	cmp	r4, #16
    d5f8:	itt	le
    d5fa:	addle.w	r8, r8, r8, lsl #2
    d5fe:	addle.w	r8, r2, r8, lsl #1
    d602:	movs	r0, #0
    d604:	adds	r3, r1, #1
    d606:	str	r3, [sp, #108]	; 0x6c
    d608:	ldrb	r3, [r1, #1]
    d60a:	b.w	cc4c <_strtod_l+0x154>
    d60e:	movw	r2, #19999	; 0x4e1f
    d612:	b.w	cdfe <_strtod_l+0x306>
    d616:	ldr	r3, [sp, #20]
    d618:	add.w	r4, r3, #55574528	; 0x3500000
    d61c:	str	r4, [sp, #20]
    d61e:	b.n	d0a2 <_strtod_l+0x5aa>
    d620:	ldr	r6, [sp, #44]	; 0x2c
    d622:	rsb	r3, r4, #37	; 0x25
    d626:	cmp	r6, r3
    d628:	bgt.w	ce1c <_strtod_l+0x324>
    d62c:	ldr	r5, [pc, #284]	; (d74c <_strtod_l+0xc54>)
    d62e:	rsb	r4, r4, #15
    d632:	add.w	r1, r5, r4, lsl #3
    d636:	subs	r4, r6, r4
    d638:	ldrd	r2, r3, [sp, #16]
    d63c:	ldrd	r0, r1, [r1]
    d640:	add.w	r5, r5, r4, lsl #3
    d644:	bl	ad3c <__aeabi_dmul>
    d648:	ldrd	r2, r3, [r5]
    d64c:	bl	ad3c <__aeabi_dmul>
    d650:	mov	r8, r0
    d652:	mov	r9, r1
    d654:	b.w	cc28 <_strtod_l+0x130>
    d658:	ldr	r2, [sp, #112]	; 0x70
    d65a:	cbz	r2, d66c <_strtod_l+0xb74>
    d65c:	movs	r1, #53	; 0x35
    d65e:	add	r0, sp, #120	; 0x78
    d660:	bl	12460 <__copybits>
    d664:	mov	r0, fp
    d666:	ldr	r1, [sp, #112]	; 0x70
    d668:	bl	11c6c <_Bfree>
    d66c:	cmp	r6, #6
    d66e:	bhi.n	d688 <_strtod_l+0xb90>
    d670:	tbb	[pc, r6]
    d674:	.word	0x1318211d
    d678:	.short	0x2104
    d67a:	.byte	0x1d
    d67b:	.byte	0x00
    d67c:	mvn.w	r3, #2147483648	; 0x80000000
    d680:	str	r3, [sp, #20]
    d682:	mov.w	r3, #4294967295
    d686:	str	r3, [sp, #16]
    d688:	lsls	r1, r5, #28
    d68a:	bpl.w	cd68 <_strtod_l+0x270>
    d68e:	ldr	r3, [sp, #20]
    d690:	orr.w	r3, r3, #2147483648	; 0x80000000
    d694:	str	r3, [sp, #20]
    d696:	b.w	cd68 <_strtod_l+0x270>
    d69a:	ldr	r3, [pc, #172]	; (d748 <_strtod_l+0xc50>)
    d69c:	str	r3, [sp, #20]
    d69e:	movs	r3, #0
    d6a0:	str	r3, [sp, #16]
    d6a2:	b.n	d688 <_strtod_l+0xb90>
    d6a4:	ldr	r3, [sp, #120]	; 0x78
    d6a6:	str	r3, [sp, #16]
    d6a8:	ldr	r3, [sp, #124]	; 0x7c
    d6aa:	str	r3, [sp, #20]
    d6ac:	b.n	d688 <_strtod_l+0xb90>
    d6ae:	movs	r3, #0
    d6b0:	str	r3, [sp, #20]
    d6b2:	str	r3, [sp, #16]
    d6b4:	b.n	d688 <_strtod_l+0xb90>
    d6b6:	ldr	r2, [sp, #116]	; 0x74
    d6b8:	ldr	r3, [sp, #124]	; 0x7c
    d6ba:	ldr	r1, [sp, #120]	; 0x78
    d6bc:	str	r1, [sp, #16]
    d6be:	addw	r2, r2, #1075	; 0x433
    d6c2:	bic.w	r3, r3, #1048576	; 0x100000
    d6c6:	orr.w	r3, r3, r2, lsl #20
    d6ca:	str	r3, [sp, #20]
    d6cc:	b.n	d688 <_strtod_l+0xb90>
    d6ce:	vldr	d7, [sp, #56]	; 0x38
    d6d2:	vstr	d7, [sp, #80]	; 0x50
    d6d6:	b.n	d074 <_strtod_l+0x57c>
    d6d8:	vldr	d7, [pc, #92]	; d738 <_strtod_l+0xc40>
    d6dc:	vstr	d7, [sp, #56]	; 0x38
    d6e0:	b.n	d060 <_strtod_l+0x568>
    d6e2:	ldrd	r1, r2, [sp, #16]
    d6e6:	mov	r8, r2
    d6e8:	cmp	r2, #0
    d6ea:	bne.w	d306 <_strtod_l+0x80e>
    d6ee:	movs	r3, #34	; 0x22
    d6f0:	str.w	r3, [fp]
    d6f4:	ldr	r0, [sp, #112]	; 0x70
    d6f6:	mov.w	r8, #0
    d6fa:	mov.w	r9, #0
    d6fe:	b.n	d35c <_strtod_l+0x864>
    d700:	ldr	r2, [sp, #108]	; 0x6c
    d702:	str	r2, [sp, #32]
    d704:	movs	r5, #0
    d706:	subs	r3, #48	; 0x30
    d708:	adds	r7, r0, #1
    d70a:	mov	r1, r2
    d70c:	mov	sl, r5
    d70e:	mov	r8, r5
    d710:	movs	r4, #1
    d712:	add.w	r5, r5, r5, lsl #2
    d716:	add.w	r5, r3, r5, lsl #1
    d71a:	movs	r0, #0
    d71c:	b.n	d604 <_strtod_l+0xb0c>
    d71e:	nop
    d720:	.word	0x94a03595
    d724:	.word	0x3fcfffff
    d728:	.word	0x94a03595
    d72c:	.word	0x3fdfffff
    d730:	.word	0x35afe535
    d734:	.word	0x3fe00000
    d738:	.word	0x00000000
    d73c:	.word	0x3ff00000
    d740:	.word	0x7c9fffff
    d744:	.word	0x7fefffff
    d748:	.word	0x7ff00000
    d74c:	.word	0x00013be8
    d750:	.word	0x00013918
    d754:	ldr	r1, [sp, #44]	; 0x2c
    d756:	cmn.w	r1, #22
    d75a:	blt.w	ce1c <_strtod_l+0x324>
    d75e:	ldr	r2, [pc, #600]	; (d9b8 <_strtod_l+0xec0>)
    d760:	sub.w	r2, r2, r1, lsl #3
    d764:	ldrd	r2, r3, [r2]
    d768:	ldrd	r0, r1, [sp, #16]
    d76c:	bl	af90 <__aeabi_ddiv>
    d770:	mov	r8, r0
    d772:	mov	r9, r1
    d774:	b.w	cc28 <_strtod_l+0x130>
    d778:	ldr	r3, [sp, #52]	; 0x34
    d77a:	ldrd	r8, r9, [sp, #32]
    d77e:	cmp	r3, #0
    d780:	beq.w	d894 <_strtod_l+0xd9c>
    d784:	ldrd	r4, r5, [sp, #16]
    d788:	ldr	r3, [pc, #560]	; (d9bc <_strtod_l+0xec4>)
    d78a:	ubfx	r1, r5, #0, #20
    d78e:	cmp	r1, r3
    d790:	mov	r2, r5
    d792:	beq.w	d8ea <_strtod_l+0xdf2>
    d796:	ldr	r3, [sp, #76]	; 0x4c
    d798:	cmp	r3, #0
    d79a:	beq.w	d8ac <_strtod_l+0xdb4>
    d79e:	ldr	r2, [sp, #20]
    d7a0:	tst	r3, r2
    d7a2:	beq.n	d7c6 <_strtod_l+0xcce>
    d7a4:	ldr	r3, [sp, #52]	; 0x34
    d7a6:	ldr	r2, [sp, #40]	; 0x28
    d7a8:	ldrd	r0, r1, [sp, #16]
    d7ac:	cmp	r3, #0
    d7ae:	beq.w	d8bc <_strtod_l+0xdc4>
    d7b2:	bl	cabc <sulp>
    d7b6:	mov	r2, r0
    d7b8:	mov	r3, r1
    d7ba:	mov	r0, r8
    d7bc:	mov	r1, r9
    d7be:	bl	a9d8 <__adddf3>
    d7c2:	mov	r8, r0
    d7c4:	mov	r9, r1
    d7c6:	ldr	r3, [sp, #40]	; 0x28
    d7c8:	cbz	r3, d7fa <_strtod_l+0xd02>
    d7ca:	ldr	r3, [pc, #500]	; (d9c0 <_strtod_l+0xec8>)
    d7cc:	str	r3, [sp, #92]	; 0x5c
    d7ce:	movs	r3, #0
    d7d0:	str	r3, [sp, #88]	; 0x58
    d7d2:	ldrd	r2, r3, [sp, #88]	; 0x58
    d7d6:	mov	r0, r8
    d7d8:	mov	r1, r9
    d7da:	bl	ad3c <__aeabi_dmul>
    d7de:	mov	r3, r0
    d7e0:	mov	r4, r1
    d7e2:	mov	r8, r0
    d7e4:	mov	r9, r1
    d7e6:	strd	r3, r4, [sp, #16]
    d7ea:	cbnz	r1, d7fa <_strtod_l+0xd02>
    d7ec:	ldr	r3, [sp, #16]
    d7ee:	cbnz	r3, d7fa <_strtod_l+0xd02>
    d7f0:	movs	r3, #34	; 0x22
    d7f2:	ldr	r0, [sp, #112]	; 0x70
    d7f4:	str.w	r3, [fp]
    d7f8:	b.n	d35c <_strtod_l+0x864>
    d7fa:	ldr	r0, [sp, #112]	; 0x70
    d7fc:	b.n	d35c <_strtod_l+0x864>
    d7fe:	ldr	r3, [sp, #52]	; 0x34
    d800:	ldrd	r8, r9, [sp, #32]
    d804:	cmp	r3, #0
    d806:	bne.n	d7c6 <_strtod_l+0xcce>
    d808:	ldrd	r1, r2, [sp, #16]
    d80c:	cmp	r1, #0
    d80e:	bne.n	d7c6 <_strtod_l+0xcce>
    d810:	ubfx	r3, r2, #0, #20
    d814:	mov	r4, r2
    d816:	cmp	r3, #0
    d818:	bne.n	d7c6 <_strtod_l+0xcce>
    d81a:	bic.w	r3, r2, #2147483648	; 0x80000000
    d81e:	lsrs	r3, r3, #20
    d820:	lsls	r3, r3, #20
    d822:	cmp.w	r3, #112197632	; 0x6b00000
    d826:	bls.n	d7c6 <_strtod_l+0xcce>
    d828:	ldr	r3, [r7, #20]
    d82a:	cbnz	r3, d832 <_strtod_l+0xd3a>
    d82c:	ldr	r3, [r7, #16]
    d82e:	cmp	r3, #1
    d830:	ble.n	d7c6 <_strtod_l+0xcce>
    d832:	mov	r1, r7
    d834:	movs	r2, #1
    d836:	mov	r0, fp
    d838:	bl	12018 <__lshift>
    d83c:	mov	r1, sl
    d83e:	mov	r7, r0
    d840:	bl	120c8 <__mcmp>
    d844:	cmp	r0, #0
    d846:	ble.n	d7c6 <_strtod_l+0xcce>
    d848:	ldr	r3, [sp, #40]	; 0x28
    d84a:	cmp	r3, #0
    d84c:	bne.w	d954 <_strtod_l+0xe5c>
    d850:	ldr	r3, [pc, #368]	; (d9c4 <_strtod_l+0xecc>)
    d852:	ands	r3, r4
    d854:	sub.w	r3, r3, #1048576	; 0x100000
    d858:	mvn.w	r3, r3, lsr #20
    d85c:	mvn.w	r3, r3, lsl #20
    d860:	str	r3, [sp, #20]
    d862:	mov.w	r3, #4294967295
    d866:	str	r3, [sp, #16]
    d868:	ldrd	r8, r9, [sp, #16]
    d86c:	b.n	d7c6 <_strtod_l+0xcce>
    d86e:	ldr	r3, [sp, #88]	; 0x58
    d870:	adds	r3, #1
    d872:	bne.w	d4aa <_strtod_l+0x9b2>
    d876:	b.n	d348 <_strtod_l+0x850>
    d878:	add.w	r3, r1, #55574528	; 0x3500000
    d87c:	str	r3, [sp, #20]
    d87e:	b.w	ce50 <_strtod_l+0x358>
    d882:	vldr	d7, [pc, #292]	; d9a8 <_strtod_l+0xeb0>
    d886:	vstr	d7, [sp, #96]	; 0x60
    d88a:	vldr	d7, [pc, #292]	; d9b0 <_strtod_l+0xeb8>
    d88e:	vstr	d7, [sp, #56]	; 0x38
    d892:	b.n	d1a2 <_strtod_l+0x6aa>
    d894:	ldrd	r1, r2, [sp, #16]
    d898:	ubfx	r3, r2, #0, #20
    d89c:	mov	r4, r2
    d89e:	cmp	r3, #0
    d8a0:	bne.w	d796 <_strtod_l+0xc9e>
    d8a4:	cmp	r1, #0
    d8a6:	bne.w	d796 <_strtod_l+0xc9e>
    d8aa:	b.n	d848 <_strtod_l+0xd50>
    d8ac:	ldr	r3, [sp, #56]	; 0x38
    d8ae:	ldr	r2, [sp, #16]
    d8b0:	tst	r3, r2
    d8b2:	beq.n	d7c6 <_strtod_l+0xcce>
    d8b4:	b.n	d7a4 <_strtod_l+0xcac>
    d8b6:	mov.w	r8, #0
    d8ba:	b.n	d2b4 <_strtod_l+0x7bc>
    d8bc:	bl	cabc <sulp>
    d8c0:	mov	r2, r0
    d8c2:	mov	r3, r1
    d8c4:	mov	r0, r8
    d8c6:	mov	r1, r9
    d8c8:	bl	a9d4 <__aeabi_dsub>
    d8cc:	movs	r2, #0
    d8ce:	movs	r3, #0
    d8d0:	mov	r8, r0
    d8d2:	mov	r9, r1
    d8d4:	bl	b20c <__aeabi_dcmpeq>
    d8d8:	cmp	r0, #0
    d8da:	bne.w	d6ee <_strtod_l+0xbf6>
    d8de:	b.n	d7c6 <_strtod_l+0xcce>
    d8e0:	cmp	r6, #0
    d8e2:	str	r3, [sp, #40]	; 0x28
    d8e4:	bgt.w	d578 <_strtod_l+0xa80>
    d8e8:	b.n	d5c8 <_strtod_l+0xad0>
    d8ea:	ldr	r3, [sp, #40]	; 0x28
    d8ec:	ldr	r1, [sp, #16]
    d8ee:	cbz	r3, d92a <_strtod_l+0xe32>
    d8f0:	ldr	r3, [pc, #208]	; (d9c4 <_strtod_l+0xecc>)
    d8f2:	ands	r3, r5
    d8f4:	cmp.w	r3, #111149056	; 0x6a00000
    d8f8:	bhi.n	d92a <_strtod_l+0xe32>
    d8fa:	lsrs	r3, r3, #20
    d8fc:	rsb	r3, r3, #107	; 0x6b
    d900:	mov.w	r0, #4294967295
    d904:	lsl.w	r3, r0, r3
    d908:	cmp	r3, r1
    d90a:	bne.w	d796 <_strtod_l+0xc9e>
    d90e:	ldr	r1, [pc, #184]	; (d9c8 <_strtod_l+0xed0>)
    d910:	cmp	r2, r1
    d912:	beq.w	d342 <_strtod_l+0x84a>
    d916:	ldr	r3, [pc, #172]	; (d9c4 <_strtod_l+0xecc>)
    d918:	ands	r3, r2
    d91a:	add.w	r3, r3, #1048576	; 0x100000
    d91e:	str	r3, [sp, #20]
    d920:	movs	r3, #0
    d922:	str	r3, [sp, #16]
    d924:	ldrd	r8, r9, [sp, #16]
    d928:	b.n	d7c6 <_strtod_l+0xcce>
    d92a:	mov.w	r3, #4294967295
    d92e:	b.n	d908 <_strtod_l+0xe10>
    d930:	add	r0, sp, #108	; 0x6c
    d932:	add	r2, sp, #120	; 0x78
    d934:	ldr	r1, [pc, #148]	; (d9cc <_strtod_l+0xed4>)
    d936:	bl	11a08 <__hexnan>
    d93a:	cmp	r0, #5
    d93c:	bne.w	d32c <_strtod_l+0x834>
    d940:	ldr	r3, [sp, #124]	; 0x7c
    d942:	orr.w	r3, r3, #2139095040	; 0x7f800000
    d946:	orr.w	r3, r3, #7340032	; 0x700000
    d94a:	str	r3, [sp, #20]
    d94c:	ldr	r3, [sp, #120]	; 0x78
    d94e:	str	r3, [sp, #16]
    d950:	b.w	cd68 <_strtod_l+0x270>
    d954:	ldr	r3, [pc, #108]	; (d9c4 <_strtod_l+0xecc>)
    d956:	ands	r3, r4
    d958:	cmp.w	r3, #112197632	; 0x6b00000
    d95c:	bgt.w	d854 <_strtod_l+0xd5c>
    d960:	cmp.w	r3, #57671680	; 0x3700000
    d964:	bgt.w	d7ca <_strtod_l+0xcd2>
    d968:	b.n	d6ee <_strtod_l+0xbf6>
    d96a:	mov.w	r2, #4294967295
    d96e:	lsl.w	r3, r2, r3
    d972:	ldr	r2, [sp, #16]
    d974:	ands	r2, r3
    d976:	str	r2, [sp, #16]
    d978:	b.n	d5c8 <_strtod_l+0xad0>
    d97a:	strd	r0, r1, [sp, #16]
    d97e:	b.n	d2b4 <_strtod_l+0x7bc>
    d980:	strd	r0, r1, [sp, #16]
    d984:	b.n	d59c <_strtod_l+0xaa4>
    d986:	subs	r3, #32
    d988:	mov.w	r2, #4294967295
    d98c:	lsl.w	r3, r2, r3
    d990:	ands	r3, r1
    d992:	str	r3, [sp, #20]
    d994:	b.n	d5c8 <_strtod_l+0xad0>
    d996:	mov	r0, r4
    d998:	ldr	r1, [sp, #108]	; 0x6c
    d99a:	adds	r4, #1
    d99c:	b.n	d5f0 <_strtod_l+0xaf8>
    d99e:	mov	r0, r1
    d9a0:	ldr	r1, [sp, #108]	; 0x6c
    d9a2:	b.n	d604 <_strtod_l+0xb0c>
    d9a4:	nop.w
    d9a8:	.word	0x00000000
    d9ac:	.word	0xbfe00000
    d9b0:	.word	0x00000000
    d9b4:	.word	0x3fe00000
    d9b8:	.word	0x00013be8
    d9bc:	.word	0x000fffff
    d9c0:	.word	0x39500000
    d9c4:	.word	0x7ff00000
    d9c8:	.word	0x7fefffff
    d9cc:	.word	0x00013900

0000d9d0 <_strtod_r>:
    d9d0:	ldr	r3, [pc, #20]	; (d9e8 <_strtod_r+0x18>)
    d9d2:	ldr	r3, [r3, #0]
    d9d4:	push	{r4}
    d9d6:	ldr	r3, [r3, #52]	; 0x34
    d9d8:	ldr	r4, [pc, #16]	; (d9ec <_strtod_r+0x1c>)
    d9da:	cmp	r3, #0
    d9dc:	it	eq
    d9de:	moveq	r3, r4
    d9e0:	ldr.w	r4, [sp], #4
    d9e4:	b.w	caf8 <_strtod_l>
    d9e8:	.word	0x20014c00
    d9ec:	.word	0x20014c04

0000d9f0 <_strtol_l.isra.0>:
    d9f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9f4:	ldr.w	r9, [sp, #40]	; 0x28
    d9f8:	mov	r7, r1
    d9fa:	mov	r8, r0
    d9fc:	mov	r6, r2
    d9fe:	mov	r5, r3
    da00:	mov	fp, r1
    da02:	b.n	da06 <_strtol_l.isra.0+0x16>
    da04:	mov	fp, r4
    da06:	mov	r4, fp
    da08:	mov	r0, r9
    da0a:	ldrb.w	sl, [r4], #1
    da0e:	bl	baac <__locale_ctype_ptr_l>
    da12:	add	r0, sl
    da14:	ldrb	r1, [r0, #1]
    da16:	and.w	r1, r1, #8
    da1a:	and.w	ip, r1, #255	; 0xff
    da1e:	cmp	r1, #0
    da20:	bne.n	da04 <_strtol_l.isra.0+0x14>
    da22:	mov	r2, sl
    da24:	cmp	r2, #45	; 0x2d
    da26:	beq.n	daec <_strtol_l.isra.0+0xfc>
    da28:	cmp	r2, #43	; 0x2b
    da2a:	itt	eq
    da2c:	ldrbeq.w	r2, [fp, #1]
    da30:	addeq.w	r4, fp, #2
    da34:	cmp	r5, #0
    da36:	beq.n	dac0 <_strtol_l.isra.0+0xd0>
    da38:	cmp	r5, #16
    da3a:	beq.n	db08 <_strtol_l.isra.0+0x118>
    da3c:	mov	r9, r5
    da3e:	cmp.w	ip, #0
    da42:	ite	eq
    da44:	mvneq.w	sl, #2147483648	; 0x80000000
    da48:	movne.w	sl, #2147483648	; 0x80000000
    da4c:	movs	r1, #0
    da4e:	udiv	lr, sl, r9
    da52:	mov	r0, r1
    da54:	mls	sl, r9, lr, sl
    da58:	b.n	da66 <_strtol_l.isra.0+0x76>
    da5a:	beq.n	dab0 <_strtol_l.isra.0+0xc0>
    da5c:	mla	r0, r9, r0, r3
    da60:	movs	r1, #1
    da62:	ldrb.w	r2, [r4], #1
    da66:	sub.w	r3, r2, #48	; 0x30
    da6a:	cmp	r3, #9
    da6c:	bls.n	da7a <_strtol_l.isra.0+0x8a>
    da6e:	sub.w	r3, r2, #65	; 0x41
    da72:	cmp	r3, #25
    da74:	bhi.n	da8c <_strtol_l.isra.0+0x9c>
    da76:	sub.w	r3, r2, #55	; 0x37
    da7a:	cmp	r5, r3
    da7c:	ble.n	da9c <_strtol_l.isra.0+0xac>
    da7e:	adds	r2, r1, #1
    da80:	beq.n	da62 <_strtol_l.isra.0+0x72>
    da82:	cmp	lr, r0
    da84:	bcs.n	da5a <_strtol_l.isra.0+0x6a>
    da86:	mov.w	r1, #4294967295
    da8a:	b.n	da62 <_strtol_l.isra.0+0x72>
    da8c:	sub.w	r3, r2, #97	; 0x61
    da90:	cmp	r3, #25
    da92:	bhi.n	da9c <_strtol_l.isra.0+0xac>
    da94:	sub.w	r3, r2, #87	; 0x57
    da98:	cmp	r5, r3
    da9a:	bgt.n	da7e <_strtol_l.isra.0+0x8e>
    da9c:	adds	r3, r1, #1
    da9e:	beq.n	dacc <_strtol_l.isra.0+0xdc>
    daa0:	cmp.w	ip, #0
    daa4:	bne.n	dac8 <_strtol_l.isra.0+0xd8>
    daa6:	cbz	r6, dabc <_strtol_l.isra.0+0xcc>
    daa8:	cbnz	r1, dae4 <_strtol_l.isra.0+0xf4>
    daaa:	str	r7, [r6, #0]
    daac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dab0:	cmp	sl, r3
    dab2:	bge.n	da5c <_strtol_l.isra.0+0x6c>
    dab4:	mov	r0, lr
    dab6:	mov.w	r1, #4294967295
    daba:	b.n	da62 <_strtol_l.isra.0+0x72>
    dabc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dac0:	cmp	r2, #48	; 0x30
    dac2:	beq.n	dafa <_strtol_l.isra.0+0x10a>
    dac4:	movs	r5, #10
    dac6:	b.n	da3c <_strtol_l.isra.0+0x4c>
    dac8:	negs	r0, r0
    daca:	b.n	daa6 <_strtol_l.isra.0+0xb6>
    dacc:	cmp.w	ip, #0
    dad0:	mov.w	r3, #34	; 0x22
    dad4:	ite	eq
    dad6:	mvneq.w	r0, #2147483648	; 0x80000000
    dada:	movne.w	r0, #2147483648	; 0x80000000
    dade:	str.w	r3, [r8]
    dae2:	cbz	r6, db22 <_strtol_l.isra.0+0x132>
    dae4:	subs	r7, r4, #1
    dae6:	str	r7, [r6, #0]
    dae8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    daec:	add.w	r4, fp, #2
    daf0:	ldrb.w	r2, [fp, #1]
    daf4:	mov.w	ip, #1
    daf8:	b.n	da34 <_strtol_l.isra.0+0x44>
    dafa:	ldrb	r3, [r4, #0]
    dafc:	and.w	r3, r3, #223	; 0xdf
    db00:	cmp	r3, #88	; 0x58
    db02:	beq.n	db16 <_strtol_l.isra.0+0x126>
    db04:	movs	r5, #8
    db06:	b.n	da3c <_strtol_l.isra.0+0x4c>
    db08:	cmp	r2, #48	; 0x30
    db0a:	bne.n	da3c <_strtol_l.isra.0+0x4c>
    db0c:	ldrb	r3, [r4, #0]
    db0e:	and.w	r3, r3, #223	; 0xdf
    db12:	cmp	r3, #88	; 0x58
    db14:	bne.n	da3c <_strtol_l.isra.0+0x4c>
    db16:	mov.w	r9, #16
    db1a:	ldrb	r2, [r4, #1]
    db1c:	mov	r5, r9
    db1e:	adds	r4, #2
    db20:	b.n	da3e <_strtol_l.isra.0+0x4e>
    db22:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db26:	nop

0000db28 <_strtol_r>:
    db28:	push	{r4, r5, lr}
    db2a:	ldr	r4, [pc, #24]	; (db44 <_strtol_r+0x1c>)
    db2c:	ldr	r5, [pc, #24]	; (db48 <_strtol_r+0x20>)
    db2e:	ldr	r4, [r4, #0]
    db30:	ldr	r4, [r4, #52]	; 0x34
    db32:	sub	sp, #12
    db34:	cmp	r4, #0
    db36:	it	eq
    db38:	moveq	r4, r5
    db3a:	str	r4, [sp, #0]
    db3c:	bl	d9f0 <_strtol_l.isra.0>
    db40:	add	sp, #12
    db42:	pop	{r4, r5, pc}
    db44:	.word	0x20014c00
    db48:	.word	0x20014c04
    db4c:	.word	0xffffffff

0000db50 <_svfprintf_r>:
    db50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db54:	sub	sp, #260	; 0x104
    db56:	mov	r4, r1
    db58:	str	r1, [sp, #20]
    db5a:	mov	r5, r2
    db5c:	str	r3, [sp, #40]	; 0x28
    db5e:	str	r0, [sp, #24]
    db60:	bl	11ba8 <_localeconv_r>
    db64:	ldr	r3, [r0, #0]
    db66:	str	r3, [sp, #76]	; 0x4c
    db68:	mov	r0, r3
    db6a:	bl	c940 <strlen>
    db6e:	ldrh	r3, [r4, #12]
    db70:	str	r0, [sp, #72]	; 0x48
    db72:	lsls	r6, r3, #24
    db74:	bpl.n	db7e <_svfprintf_r+0x2e>
    db76:	ldr	r3, [r4, #16]
    db78:	cmp	r3, #0
    db7a:	beq.w	ede0 <_svfprintf_r+0x1290>
    db7e:	vldr	d7, [pc, #664]	; de18 <_svfprintf_r+0x2c8>
    db82:	movs	r3, #0
    db84:	vstr	d7, [sp, #64]	; 0x40
    db88:	str	r3, [sp, #56]	; 0x38
    db8a:	str	r3, [sp, #148]	; 0x94
    db8c:	str	r3, [sp, #144]	; 0x90
    db8e:	str	r3, [sp, #84]	; 0x54
    db90:	str	r3, [sp, #28]
    db92:	ldr.w	sl, [pc, #656]	; de24 <_svfprintf_r+0x2d4>
    db96:	add	r3, sp, #192	; 0xc0
    db98:	str	r3, [sp, #140]	; 0x8c
    db9a:	mov	r9, r3
    db9c:	mov	r8, r5
    db9e:	ldrb.w	r3, [r8]
    dba2:	mov	r4, r8
    dba4:	cbz	r3, dbe2 <_svfprintf_r+0x92>
    dba6:	cmp	r3, #37	; 0x25
    dba8:	bne.n	dbb0 <_svfprintf_r+0x60>
    dbaa:	b.n	dbe2 <_svfprintf_r+0x92>
    dbac:	cmp	r3, #37	; 0x25
    dbae:	beq.n	dbb8 <_svfprintf_r+0x68>
    dbb0:	ldrb.w	r3, [r4, #1]!
    dbb4:	cmp	r3, #0
    dbb6:	bne.n	dbac <_svfprintf_r+0x5c>
    dbb8:	rsb	r5, r8, r4
    dbbc:	cbz	r5, dbe2 <_svfprintf_r+0x92>
    dbbe:	ldr	r3, [sp, #144]	; 0x90
    dbc0:	ldr	r2, [sp, #148]	; 0x94
    dbc2:	str.w	r8, [r9]
    dbc6:	adds	r3, #1
    dbc8:	add	r2, r5
    dbca:	cmp	r3, #7
    dbcc:	str.w	r5, [r9, #4]
    dbd0:	str	r2, [sp, #148]	; 0x94
    dbd2:	str	r3, [sp, #144]	; 0x90
    dbd4:	bgt.w	dd24 <_svfprintf_r+0x1d4>
    dbd8:	add.w	r9, r9, #8
    dbdc:	ldr	r3, [sp, #28]
    dbde:	add	r3, r5
    dbe0:	str	r3, [sp, #28]
    dbe2:	ldrb	r3, [r4, #0]
    dbe4:	cmp	r3, #0
    dbe6:	beq.w	dd36 <_svfprintf_r+0x1e6>
    dbea:	movs	r3, #0
    dbec:	mov	r2, r3
    dbee:	strb.w	r3, [sp, #111]	; 0x6f
    dbf2:	mov	r1, r3
    dbf4:	str	r3, [sp, #32]
    dbf6:	str	r3, [sp, #12]
    dbf8:	mov.w	fp, #4294967295
    dbfc:	ldrb	r3, [r4, #1]
    dbfe:	add.w	r8, r4, #1
    dc02:	mov	r5, fp
    dc04:	add.w	r8, r8, #1
    dc08:	sub.w	r0, r3, #32
    dc0c:	cmp	r0, #88	; 0x58
    dc0e:	bhi.w	e47a <_svfprintf_r+0x92a>
    dc12:	tbh	[pc, r0, lsl #1]
    dc16:	.short	0x03a0
    dc18:	.word	0x04320432
    dc1c:	.word	0x043203a8
    dc20:	.word	0x04320432
    dc24:	.word	0x04320432
    dc28:	.word	0x03af0432
    dc2c:	.word	0x043203bd
    dc30:	.word	0x00e2005d
    dc34:	.word	0x01090432
    dc38:	.word	0x01100110
    dc3c:	.word	0x01100110
    dc40:	.word	0x01100110
    dc44:	.word	0x01100110
    dc48:	.word	0x04320110
    dc4c:	.word	0x04320432
    dc50:	.word	0x04320432
    dc54:	.word	0x04320432
    dc58:	.word	0x04320432
    dc5c:	.word	0x01200432
    dc60:	.word	0x04320286
    dc64:	.word	0x04320286
    dc68:	.word	0x04320432
    dc6c:	.word	0x02d40432
    dc70:	.word	0x04320432
    dc74:	.word	0x043202e5
    dc78:	.word	0x04320432
    dc7c:	.word	0x04320432
    dc80:	.word	0x0432030f
    dc84:	.word	0x033d0432
    dc88:	.word	0x04320432
    dc8c:	.word	0x04320432
    dc90:	.word	0x04320432
    dc94:	.word	0x04320432
    dc98:	.word	0x04320432
    dc9c:	.word	0x0391037e
    dca0:	.word	0x02860286
    dca4:	.word	0x03990286
    dca8:	.word	0x04320391
    dcac:	.word	0x04070432
    dcb0:	.word	0x04120432
    dcb4:	.word	0x006400a3
    dcb8:	.word	0x043203c2
    dcbc:	.word	0x043203c9
    dcc0:	.word	0x043203ea
    dcc4:	.word	0x03f20432
    dcc8:	ldr	r0, [sp, #32]
    dcca:	str	r3, [sp, #40]	; 0x28
    dccc:	negs	r0, r0
    dcce:	str	r0, [sp, #32]
    dcd0:	ldr	r3, [sp, #12]
    dcd2:	orr.w	r3, r3, #4
    dcd6:	str	r3, [sp, #12]
    dcd8:	ldrb.w	r3, [r8]
    dcdc:	b.n	dc04 <_svfprintf_r+0xb4>
    dcde:	ldr	r0, [sp, #40]	; 0x28
    dce0:	mov	fp, r5
    dce2:	movs	r1, #0
    dce4:	ldr	r4, [r0, #0]
    dce6:	strb.w	r1, [sp, #111]	; 0x6f
    dcea:	adds	r7, r0, #4
    dcec:	ldr	r0, [sp, #12]
    dcee:	movs	r3, #48	; 0x30
    dcf0:	movs	r2, #120	; 0x78
    dcf2:	cmp	fp, r1
    dcf4:	strb.w	r3, [sp, #112]	; 0x70
    dcf8:	mov.w	r5, #0
    dcfc:	strb.w	r2, [sp, #113]	; 0x71
    dd00:	orr.w	r3, r0, #2
    dd04:	blt.w	e4b4 <_svfprintf_r+0x964>
    dd08:	bic.w	r3, r0, #128	; 0x80
    dd0c:	orr.w	r3, r3, #2
    dd10:	str	r3, [sp, #12]
    dd12:	orrs.w	r3, r4, r5
    dd16:	str	r7, [sp, #40]	; 0x28
    dd18:	beq.w	e460 <_svfprintf_r+0x910>
    dd1c:	mov	r7, r1
    dd1e:	str	r2, [sp, #52]	; 0x34
    dd20:	ldr	r0, [pc, #252]	; (de20 <_svfprintf_r+0x2d0>)
    dd22:	b.n	e2f2 <_svfprintf_r+0x7a2>
    dd24:	add	r2, sp, #140	; 0x8c
    dd26:	ldr	r1, [sp, #20]
    dd28:	ldr	r0, [sp, #24]
    dd2a:	bl	12ae8 <__ssprint_r>
    dd2e:	cbnz	r0, dd44 <_svfprintf_r+0x1f4>
    dd30:	add.w	r9, sp, #192	; 0xc0
    dd34:	b.n	dbdc <_svfprintf_r+0x8c>
    dd36:	ldr	r3, [sp, #148]	; 0x94
    dd38:	cbz	r3, dd44 <_svfprintf_r+0x1f4>
    dd3a:	ldr	r0, [sp, #24]
    dd3c:	ldr	r1, [sp, #20]
    dd3e:	add	r2, sp, #140	; 0x8c
    dd40:	bl	12ae8 <__ssprint_r>
    dd44:	ldr	r3, [sp, #20]
    dd46:	ldrh	r3, [r3, #12]
    dd48:	tst.w	r3, #64	; 0x40
    dd4c:	ldr	r3, [sp, #28]
    dd4e:	it	ne
    dd50:	movne.w	r3, #4294967295
    dd54:	mov	r0, r3
    dd56:	add	sp, #260	; 0x104
    dd58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd5c:	str	r3, [sp, #52]	; 0x34
    dd5e:	mov	fp, r5
    dd60:	cmp	r2, #0
    dd62:	bne.w	f1cc <_svfprintf_r+0x167c>
    dd66:	ldr	r2, [sp, #12]
    dd68:	ands.w	r3, r2, #32
    dd6c:	beq.w	e1fc <_svfprintf_r+0x6ac>
    dd70:	ldr	r7, [sp, #40]	; 0x28
    dd72:	adds	r7, #7
    dd74:	bic.w	r3, r7, #7
    dd78:	movs	r7, #0
    dd7a:	add.w	r1, r3, #8
    dd7e:	cmp	fp, r7
    dd80:	str	r1, [sp, #40]	; 0x28
    dd82:	ldrd	r4, r5, [r3]
    dd86:	strb.w	r7, [sp, #111]	; 0x6f
    dd8a:	blt.w	ec52 <_svfprintf_r+0x1102>
    dd8e:	bic.w	r3, r2, #128	; 0x80
    dd92:	str	r3, [sp, #12]
    dd94:	orrs.w	r3, r4, r5
    dd98:	beq.w	e4a4 <_svfprintf_r+0x954>
    dd9c:	add	r6, sp, #192	; 0xc0
    dd9e:	lsrs	r2, r4, #3
    dda0:	orr.w	r2, r2, r5, lsl #29
    dda4:	lsrs	r1, r5, #3
    dda6:	and.w	r3, r4, #7
    ddaa:	mov	r5, r1
    ddac:	mov	r4, r2
    ddae:	adds	r3, #48	; 0x30
    ddb0:	orrs.w	r2, r4, r5
    ddb4:	strb.w	r3, [r6, #-1]!
    ddb8:	bne.n	dd9e <_svfprintf_r+0x24e>
    ddba:	ldr	r2, [sp, #12]
    ddbc:	lsls	r1, r2, #31
    ddbe:	bpl.w	dee0 <_svfprintf_r+0x390>
    ddc2:	cmp	r3, #48	; 0x30
    ddc4:	beq.w	dee0 <_svfprintf_r+0x390>
    ddc8:	movs	r2, #48	; 0x30
    ddca:	subs	r3, r6, #1
    ddcc:	strb.w	r2, [r6, #-1]
    ddd0:	add	r2, sp, #192	; 0xc0
    ddd2:	subs	r2, r2, r3
    ddd4:	str	r2, [sp, #36]	; 0x24
    ddd6:	mov	r6, r3
    ddd8:	b.n	dee6 <_svfprintf_r+0x396>
    ddda:	ldrb.w	r3, [r8]
    ddde:	cmp	r3, #42	; 0x2a
    dde0:	add.w	r4, r8, #1
    dde4:	beq.w	f1b0 <_svfprintf_r+0x1660>
    dde8:	sub.w	r0, r3, #48	; 0x30
    ddec:	cmp	r0, #9
    ddee:	it	ls
    ddf0:	movls	r5, #0
    ddf2:	bhi.w	f102 <_svfprintf_r+0x15b2>
    ddf6:	ldrb.w	r3, [r4], #1
    ddfa:	add.w	r5, r5, r5, lsl #2
    ddfe:	add.w	r5, r0, r5, lsl #1
    de02:	sub.w	r0, r3, #48	; 0x30
    de06:	cmp	r0, #9
    de08:	bls.n	ddf6 <_svfprintf_r+0x2a6>
    de0a:	orr.w	r5, r5, r5, asr #31
    de0e:	mov	r8, r4
    de10:	b.n	dc08 <_svfprintf_r+0xb8>
    de12:	nop
    de14:	nop.w
	...
    de20:	.word	0x00013974
    de24:	.word	0x00013940
    de28:	ldr	r3, [sp, #12]
    de2a:	orr.w	r3, r3, #128	; 0x80
    de2e:	str	r3, [sp, #12]
    de30:	ldrb.w	r3, [r8]
    de34:	b.n	dc04 <_svfprintf_r+0xb4>
    de36:	sub.w	r0, r3, #48	; 0x30
    de3a:	movs	r3, #0
    de3c:	mov	r4, r3
    de3e:	ldrb.w	r3, [r8], #1
    de42:	add.w	r4, r4, r4, lsl #2
    de46:	add.w	r4, r0, r4, lsl #1
    de4a:	sub.w	r0, r3, #48	; 0x30
    de4e:	cmp	r0, #9
    de50:	bls.n	de3e <_svfprintf_r+0x2ee>
    de52:	str	r4, [sp, #32]
    de54:	b.n	dc08 <_svfprintf_r+0xb8>
    de56:	str	r3, [sp, #52]	; 0x34
    de58:	mov	fp, r5
    de5a:	cmp	r2, #0
    de5c:	bne.w	f1e8 <_svfprintf_r+0x1698>
    de60:	ldr	r3, [sp, #12]
    de62:	orr.w	r3, r3, #16
    de66:	str	r3, [sp, #12]
    de68:	ldr	r3, [sp, #12]
    de6a:	lsls	r4, r3, #26
    de6c:	bpl.w	e8de <_svfprintf_r+0xd8e>
    de70:	ldr	r7, [sp, #40]	; 0x28
    de72:	adds	r7, #7
    de74:	bic.w	r7, r7, #7
    de78:	ldrd	r2, r3, [r7]
    de7c:	add.w	r1, r7, #8
    de80:	str	r1, [sp, #40]	; 0x28
    de82:	mov	r4, r2
    de84:	mov	r5, r3
    de86:	cmp	r2, #0
    de88:	sbcs.w	r3, r3, #0
    de8c:	blt.w	e954 <_svfprintf_r+0xe04>
    de90:	cmp.w	fp, #0
    de94:	ldrb.w	r7, [sp, #111]	; 0x6f
    de98:	blt.w	e91a <_svfprintf_r+0xdca>
    de9c:	ldr	r3, [sp, #12]
    de9e:	bic.w	r3, r3, #128	; 0x80
    dea2:	str	r3, [sp, #12]
    dea4:	orrs.w	r3, r4, r5
    dea8:	beq.w	e27c <_svfprintf_r+0x72c>
    deac:	cmp	r5, #0
    deae:	it	eq
    deb0:	cmpeq	r4, #10
    deb2:	bcc.w	e286 <_svfprintf_r+0x736>
    deb6:	add	r6, sp, #192	; 0xc0
    deb8:	mov	r0, r4
    deba:	mov	r1, r5
    debc:	movs	r2, #10
    debe:	movs	r3, #0
    dec0:	bl	b688 <__aeabi_uldivmod>
    dec4:	adds	r2, #48	; 0x30
    dec6:	strb.w	r2, [r6, #-1]!
    deca:	mov	r0, r4
    decc:	mov	r1, r5
    dece:	movs	r3, #0
    ded0:	movs	r2, #10
    ded2:	bl	b688 <__aeabi_uldivmod>
    ded6:	mov	r4, r0
    ded8:	mov	r5, r1
    deda:	orrs.w	r3, r4, r5
    dede:	bne.n	deb8 <_svfprintf_r+0x368>
    dee0:	add	r3, sp, #192	; 0xc0
    dee2:	subs	r3, r3, r6
    dee4:	str	r3, [sp, #36]	; 0x24
    dee6:	ldr	r3, [sp, #36]	; 0x24
    dee8:	cmp	r3, fp
    deea:	it	lt
    deec:	movlt	r3, fp
    deee:	str	r3, [sp, #16]
    def0:	movs	r3, #0
    def2:	str	r3, [sp, #60]	; 0x3c
    def4:	cbz	r7, defc <_svfprintf_r+0x3ac>
    def6:	ldr	r3, [sp, #16]
    def8:	adds	r3, #1
    defa:	str	r3, [sp, #16]
    defc:	ldr	r3, [sp, #12]
    defe:	ands.w	r3, r3, #2
    df02:	str	r3, [sp, #44]	; 0x2c
    df04:	beq.n	df0c <_svfprintf_r+0x3bc>
    df06:	ldr	r3, [sp, #16]
    df08:	adds	r3, #2
    df0a:	str	r3, [sp, #16]
    df0c:	ldr	r3, [sp, #12]
    df0e:	ands.w	r3, r3, #132	; 0x84
    df12:	str	r3, [sp, #48]	; 0x30
    df14:	bne.w	e4ce <_svfprintf_r+0x97e>
    df18:	ldr	r3, [sp, #32]
    df1a:	ldr	r2, [sp, #16]
    df1c:	subs	r5, r3, r2
    df1e:	cmp	r5, #0
    df20:	ble.w	e4ce <_svfprintf_r+0x97e>
    df24:	cmp	r5, #16
    df26:	ldr	r1, [sp, #148]	; 0x94
    df28:	ldr	r2, [sp, #144]	; 0x90
    df2a:	ldr	r7, [pc, #672]	; (e1cc <_svfprintf_r+0x67c>)
    df2c:	ble.n	df7e <_svfprintf_r+0x42e>
    df2e:	str	r6, [sp, #80]	; 0x50
    df30:	mov	r0, r9
    df32:	movs	r4, #16
    df34:	mov	r9, r7
    df36:	ldr	r6, [sp, #20]
    df38:	mov	r7, r5
    df3a:	ldr	r5, [sp, #24]
    df3c:	b.n	df48 <_svfprintf_r+0x3f8>
    df3e:	subs	r7, #16
    df40:	cmp	r7, #16
    df42:	add.w	r0, r0, #8
    df46:	ble.n	df76 <_svfprintf_r+0x426>
    df48:	adds	r2, #1
    df4a:	ldr	r3, [pc, #640]	; (e1cc <_svfprintf_r+0x67c>)
    df4c:	str	r2, [sp, #144]	; 0x90
    df4e:	adds	r1, #16
    df50:	cmp	r2, #7
    df52:	str	r1, [sp, #148]	; 0x94
    df54:	stmia.w	r0, {r3, r4}
    df58:	ble.n	df3e <_svfprintf_r+0x3ee>
    df5a:	add	r2, sp, #140	; 0x8c
    df5c:	mov	r1, r6
    df5e:	mov	r0, r5
    df60:	bl	12ae8 <__ssprint_r>
    df64:	cmp	r0, #0
    df66:	bne.w	dd44 <_svfprintf_r+0x1f4>
    df6a:	subs	r7, #16
    df6c:	cmp	r7, #16
    df6e:	ldr	r1, [sp, #148]	; 0x94
    df70:	ldr	r2, [sp, #144]	; 0x90
    df72:	add	r0, sp, #192	; 0xc0
    df74:	bgt.n	df48 <_svfprintf_r+0x3f8>
    df76:	ldr	r6, [sp, #80]	; 0x50
    df78:	mov	r5, r7
    df7a:	mov	r7, r9
    df7c:	mov	r9, r0
    df7e:	adds	r2, #1
    df80:	adds	r4, r5, r1
    df82:	cmp	r2, #7
    df84:	str	r4, [sp, #148]	; 0x94
    df86:	str	r2, [sp, #144]	; 0x90
    df88:	str.w	r7, [r9]
    df8c:	str.w	r5, [r9, #4]
    df90:	bgt.w	e7ee <_svfprintf_r+0xc9e>
    df94:	ldrb.w	r7, [sp, #111]	; 0x6f
    df98:	add.w	r9, r9, #8
    df9c:	cbz	r7, dfbc <_svfprintf_r+0x46c>
    df9e:	ldr	r3, [sp, #144]	; 0x90
    dfa0:	adds	r3, #1
    dfa2:	adds	r4, #1
    dfa4:	add.w	r1, sp, #111	; 0x6f
    dfa8:	movs	r2, #1
    dfaa:	cmp	r3, #7
    dfac:	str	r4, [sp, #148]	; 0x94
    dfae:	str	r3, [sp, #144]	; 0x90
    dfb0:	stmia.w	r9, {r1, r2}
    dfb4:	bgt.w	e702 <_svfprintf_r+0xbb2>
    dfb8:	add.w	r9, r9, #8
    dfbc:	ldr	r3, [sp, #44]	; 0x2c
    dfbe:	cbz	r3, dfdc <_svfprintf_r+0x48c>
    dfc0:	ldr	r3, [sp, #144]	; 0x90
    dfc2:	adds	r3, #1
    dfc4:	adds	r4, #2
    dfc6:	add	r1, sp, #112	; 0x70
    dfc8:	movs	r2, #2
    dfca:	cmp	r3, #7
    dfcc:	str	r4, [sp, #148]	; 0x94
    dfce:	str	r3, [sp, #144]	; 0x90
    dfd0:	stmia.w	r9, {r1, r2}
    dfd4:	bgt.w	e71a <_svfprintf_r+0xbca>
    dfd8:	add.w	r9, r9, #8
    dfdc:	ldr	r3, [sp, #48]	; 0x30
    dfde:	cmp	r3, #128	; 0x80
    dfe0:	beq.w	e5a6 <_svfprintf_r+0xa56>
    dfe4:	ldr	r3, [sp, #36]	; 0x24
    dfe6:	rsb	r7, r3, fp
    dfea:	cmp	r7, #0
    dfec:	ble.n	e056 <_svfprintf_r+0x506>
    dfee:	ldr	r2, [pc, #480]	; (e1d0 <_svfprintf_r+0x680>)
    dff0:	ldr	r3, [sp, #144]	; 0x90
    dff2:	str	r2, [sp, #44]	; 0x2c
    dff4:	cmp	r7, #16
    dff6:	ble.n	e03e <_svfprintf_r+0x4ee>
    dff8:	mov	r2, r4
    dffa:	mov.w	fp, #16
    dffe:	ldr	r5, [sp, #24]
    e000:	ldr	r4, [sp, #20]
    e002:	b.n	e00e <_svfprintf_r+0x4be>
    e004:	subs	r7, #16
    e006:	cmp	r7, #16
    e008:	add.w	r9, r9, #8
    e00c:	ble.n	e03c <_svfprintf_r+0x4ec>
    e00e:	adds	r3, #1
    e010:	adds	r2, #16
    e012:	cmp	r3, #7
    e014:	str	r2, [sp, #148]	; 0x94
    e016:	str	r3, [sp, #144]	; 0x90
    e018:	stmia.w	r9, {sl, fp}
    e01c:	ble.n	e004 <_svfprintf_r+0x4b4>
    e01e:	add	r2, sp, #140	; 0x8c
    e020:	mov	r1, r4
    e022:	mov	r0, r5
    e024:	bl	12ae8 <__ssprint_r>
    e028:	cmp	r0, #0
    e02a:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e02e:	subs	r7, #16
    e030:	cmp	r7, #16
    e032:	ldr	r2, [sp, #148]	; 0x94
    e034:	ldr	r3, [sp, #144]	; 0x90
    e036:	add.w	r9, sp, #192	; 0xc0
    e03a:	bgt.n	e00e <_svfprintf_r+0x4be>
    e03c:	mov	r4, r2
    e03e:	adds	r3, #1
    e040:	ldr	r2, [sp, #44]	; 0x2c
    e042:	str	r3, [sp, #144]	; 0x90
    e044:	add	r4, r7
    e046:	cmp	r3, #7
    e048:	str	r4, [sp, #148]	; 0x94
    e04a:	stmia.w	r9, {r2, r7}
    e04e:	bgt.w	e6ea <_svfprintf_r+0xb9a>
    e052:	add.w	r9, r9, #8
    e056:	ldr	r3, [sp, #12]
    e058:	lsls	r2, r3, #23
    e05a:	bmi.w	e4d2 <_svfprintf_r+0x982>
    e05e:	ldr	r3, [sp, #144]	; 0x90
    e060:	ldr	r1, [sp, #36]	; 0x24
    e062:	str.w	r6, [r9]
    e066:	adds	r3, #1
    e068:	add	r4, r1
    e06a:	cmp	r3, #7
    e06c:	str	r4, [sp, #148]	; 0x94
    e06e:	str.w	r1, [r9, #4]
    e072:	str	r3, [sp, #144]	; 0x90
    e074:	bgt.w	e6be <_svfprintf_r+0xb6e>
    e078:	add.w	r9, r9, #8
    e07c:	ldr	r3, [sp, #12]
    e07e:	lsls	r1, r3, #29
    e080:	bpl.n	e102 <_svfprintf_r+0x5b2>
    e082:	ldr	r3, [sp, #32]
    e084:	ldr	r2, [sp, #16]
    e086:	subs	r5, r3, r2
    e088:	cmp	r5, #0
    e08a:	ble.n	e102 <_svfprintf_r+0x5b2>
    e08c:	cmp	r5, #16
    e08e:	ldr	r3, [sp, #144]	; 0x90
    e090:	ldr	r7, [pc, #312]	; (e1cc <_svfprintf_r+0x67c>)
    e092:	ble.n	e0dc <_svfprintf_r+0x58c>
    e094:	mov	r2, r4
    e096:	movs	r6, #16
    e098:	ldr.w	fp, [sp, #24]
    e09c:	ldr	r4, [sp, #20]
    e09e:	b.n	e0aa <_svfprintf_r+0x55a>
    e0a0:	subs	r5, #16
    e0a2:	cmp	r5, #16
    e0a4:	add.w	r9, r9, #8
    e0a8:	ble.n	e0da <_svfprintf_r+0x58a>
    e0aa:	adds	r3, #1
    e0ac:	ldr	r1, [pc, #284]	; (e1cc <_svfprintf_r+0x67c>)
    e0ae:	str	r3, [sp, #144]	; 0x90
    e0b0:	adds	r2, #16
    e0b2:	cmp	r3, #7
    e0b4:	str	r2, [sp, #148]	; 0x94
    e0b6:	stmia.w	r9, {r1, r6}
    e0ba:	ble.n	e0a0 <_svfprintf_r+0x550>
    e0bc:	add	r2, sp, #140	; 0x8c
    e0be:	mov	r1, r4
    e0c0:	mov	r0, fp
    e0c2:	bl	12ae8 <__ssprint_r>
    e0c6:	cmp	r0, #0
    e0c8:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e0cc:	subs	r5, #16
    e0ce:	cmp	r5, #16
    e0d0:	ldr	r2, [sp, #148]	; 0x94
    e0d2:	ldr	r3, [sp, #144]	; 0x90
    e0d4:	add.w	r9, sp, #192	; 0xc0
    e0d8:	bgt.n	e0aa <_svfprintf_r+0x55a>
    e0da:	mov	r4, r2
    e0dc:	adds	r3, #1
    e0de:	add	r4, r5
    e0e0:	cmp	r3, #7
    e0e2:	str	r4, [sp, #148]	; 0x94
    e0e4:	str	r3, [sp, #144]	; 0x90
    e0e6:	str.w	r7, [r9]
    e0ea:	str.w	r5, [r9, #4]
    e0ee:	ble.n	e102 <_svfprintf_r+0x5b2>
    e0f0:	add	r2, sp, #140	; 0x8c
    e0f2:	ldr	r1, [sp, #20]
    e0f4:	ldr	r0, [sp, #24]
    e0f6:	bl	12ae8 <__ssprint_r>
    e0fa:	cmp	r0, #0
    e0fc:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e100:	ldr	r4, [sp, #148]	; 0x94
    e102:	ldr	r3, [sp, #28]
    e104:	ldr	r2, [sp, #32]
    e106:	ldr	r1, [sp, #16]
    e108:	cmp	r2, r1
    e10a:	ite	ge
    e10c:	addge	r3, r3, r2
    e10e:	addlt	r3, r3, r1
    e110:	str	r3, [sp, #28]
    e112:	cmp	r4, #0
    e114:	bne.w	e6d6 <_svfprintf_r+0xb86>
    e118:	movs	r3, #0
    e11a:	str	r3, [sp, #144]	; 0x90
    e11c:	add.w	r9, sp, #192	; 0xc0
    e120:	b.n	db9e <_svfprintf_r+0x4e>
    e122:	str	r3, [sp, #52]	; 0x34
    e124:	mov	fp, r5
    e126:	cmp	r2, #0
    e128:	bne.w	f1f0 <_svfprintf_r+0x16a0>
    e12c:	ldr	r3, [sp, #12]
    e12e:	ldr	r7, [sp, #40]	; 0x28
    e130:	lsls	r2, r3, #28
    e132:	add.w	r7, r7, #7
    e136:	bpl.w	ec22 <_svfprintf_r+0x10d2>
    e13a:	bic.w	r3, r7, #7
    e13e:	vldr	d7, [r3]
    e142:	vstr	d7, [sp, #64]	; 0x40
    e146:	add.w	r2, r3, #8
    e14a:	str	r2, [sp, #40]	; 0x28
    e14c:	ldrd	r1, r2, [sp, #64]	; 0x40
    e150:	bic.w	r3, r2, #2147483648	; 0x80000000
    e154:	str	r1, [sp, #88]	; 0x58
    e156:	str	r3, [sp, #92]	; 0x5c
    e158:	ldrd	r4, r5, [sp, #88]	; 0x58
    e15c:	mov.w	r2, #4294967295
    e160:	mov	r0, r4
    e162:	mov	r1, r5
    e164:	ldr	r3, [pc, #108]	; (e1d4 <_svfprintf_r+0x684>)
    e166:	bl	b270 <__aeabi_dcmpun>
    e16a:	cmp	r0, #0
    e16c:	bne.w	eb24 <_svfprintf_r+0xfd4>
    e170:	mov.w	r2, #4294967295
    e174:	ldr	r3, [pc, #92]	; (e1d4 <_svfprintf_r+0x684>)
    e176:	mov	r0, r4
    e178:	mov	r1, r5
    e17a:	bl	b234 <__aeabi_dcmple>
    e17e:	cmp	r0, #0
    e180:	bne.w	eb24 <_svfprintf_r+0xfd4>
    e184:	movs	r2, #0
    e186:	movs	r3, #0
    e188:	ldrd	r0, r1, [sp, #64]	; 0x40
    e18c:	bl	b220 <__aeabi_dcmplt>
    e190:	cmp	r0, #0
    e192:	bne.w	f03a <_svfprintf_r+0x14ea>
    e196:	ldrb.w	r7, [sp, #111]	; 0x6f
    e19a:	ldr	r6, [pc, #60]	; (e1d8 <_svfprintf_r+0x688>)
    e19c:	ldr	r3, [pc, #60]	; (e1dc <_svfprintf_r+0x68c>)
    e19e:	ldr	r1, [sp, #12]
    e1a0:	bic.w	r1, r1, #128	; 0x80
    e1a4:	str	r1, [sp, #12]
    e1a6:	ldr	r1, [sp, #52]	; 0x34
    e1a8:	movs	r2, #3
    e1aa:	mov.w	fp, #0
    e1ae:	str	r2, [sp, #16]
    e1b0:	cmp	r1, #71	; 0x47
    e1b2:	it	le
    e1b4:	movle	r6, r3
    e1b6:	str	r2, [sp, #36]	; 0x24
    e1b8:	str.w	fp, [sp, #60]	; 0x3c
    e1bc:	b.n	def4 <_svfprintf_r+0x3a4>
    e1be:	ldr	r3, [sp, #12]
    e1c0:	orr.w	r3, r3, #8
    e1c4:	str	r3, [sp, #12]
    e1c6:	ldrb.w	r3, [r8]
    e1ca:	b.n	dc04 <_svfprintf_r+0xb4>
    e1cc:	.word	0x00013994
    e1d0:	.word	0x00013940
    e1d4:	.word	0x7fefffff
    e1d8:	.word	0x00013954
    e1dc:	.word	0x00013950
    e1e0:	str	r3, [sp, #52]	; 0x34
    e1e2:	mov	fp, r5
    e1e4:	cmp	r2, #0
    e1e6:	bne.w	f208 <_svfprintf_r+0x16b8>
    e1ea:	ldr	r3, [sp, #12]
    e1ec:	orr.w	r3, r3, #16
    e1f0:	str	r3, [sp, #12]
    e1f2:	ldr	r2, [sp, #12]
    e1f4:	ands.w	r3, r2, #32
    e1f8:	bne.w	dd70 <_svfprintf_r+0x220>
    e1fc:	ldr	r1, [sp, #12]
    e1fe:	ands.w	r2, r1, #16
    e202:	beq.w	eabc <_svfprintf_r+0xf6c>
    e206:	ldr	r0, [sp, #40]	; 0x28
    e208:	strb.w	r3, [sp, #111]	; 0x6f
    e20c:	cmp.w	fp, #0
    e210:	ldr	r4, [r0, #0]
    e212:	add.w	r7, r0, #4
    e216:	mov.w	r5, #0
    e21a:	blt.w	ec50 <_svfprintf_r+0x1100>
    e21e:	mov	r2, r1
    e220:	bic.w	r2, r2, #128	; 0x80
    e224:	str	r2, [sp, #12]
    e226:	orrs.w	r2, r4, r5
    e22a:	str	r7, [sp, #40]	; 0x28
    e22c:	beq.w	e4a4 <_svfprintf_r+0x954>
    e230:	mov	r7, r3
    e232:	b.n	dd9c <_svfprintf_r+0x24c>
    e234:	str	r3, [sp, #52]	; 0x34
    e236:	mov	fp, r5
    e238:	cmp	r2, #0
    e23a:	bne.w	f200 <_svfprintf_r+0x16b0>
    e23e:	ldr	r3, [sp, #12]
    e240:	orr.w	r3, r3, #16
    e244:	str	r3, [sp, #12]
    e246:	ldr	r2, [sp, #12]
    e248:	ands.w	r3, r2, #32
    e24c:	beq.w	e8a8 <_svfprintf_r+0xd58>
    e250:	ldr	r7, [sp, #40]	; 0x28
    e252:	adds	r7, #7
    e254:	bic.w	r3, r7, #7
    e258:	movs	r7, #0
    e25a:	add.w	r1, r3, #8
    e25e:	cmp	fp, r7
    e260:	str	r1, [sp, #40]	; 0x28
    e262:	ldrd	r4, r5, [r3]
    e266:	strb.w	r7, [sp, #111]	; 0x6f
    e26a:	blt.w	e91a <_svfprintf_r+0xdca>
    e26e:	bic.w	r3, r2, #128	; 0x80
    e272:	str	r3, [sp, #12]
    e274:	orrs.w	r3, r4, r5
    e278:	bne.w	deac <_svfprintf_r+0x35c>
    e27c:	cmp.w	fp, #0
    e280:	beq.w	e46e <_svfprintf_r+0x91e>
    e284:	movs	r4, #0
    e286:	add	r6, sp, #256	; 0x100
    e288:	adds	r4, #48	; 0x30
    e28a:	strb.w	r4, [r6, #-65]!
    e28e:	b.n	dee0 <_svfprintf_r+0x390>
    e290:	str	r3, [sp, #52]	; 0x34
    e292:	mov	fp, r5
    e294:	cmp	r2, #0
    e296:	bne.w	f1f8 <_svfprintf_r+0x16a8>
    e29a:	ldr	r3, [sp, #12]
    e29c:	ldr	r0, [pc, #700]	; (e55c <_svfprintf_r+0xa0c>)
    e29e:	lsls	r5, r3, #26
    e2a0:	bpl.w	e40e <_svfprintf_r+0x8be>
    e2a4:	ldr	r7, [sp, #40]	; 0x28
    e2a6:	adds	r7, #7
    e2a8:	bic.w	r3, r7, #7
    e2ac:	ldrd	r4, r5, [r3]
    e2b0:	add.w	r2, r3, #8
    e2b4:	str	r2, [sp, #40]	; 0x28
    e2b6:	ldr	r2, [sp, #12]
    e2b8:	ands.w	r7, r2, #1
    e2bc:	beq.w	e732 <_svfprintf_r+0xbe2>
    e2c0:	orrs.w	r3, r4, r5
    e2c4:	beq.w	eccc <_svfprintf_r+0x117c>
    e2c8:	ldrb.w	r2, [sp, #52]	; 0x34
    e2cc:	strb.w	r2, [sp, #113]	; 0x71
    e2d0:	movs	r7, #0
    e2d2:	ldr	r2, [sp, #12]
    e2d4:	strb.w	r7, [sp, #111]	; 0x6f
    e2d8:	movs	r3, #48	; 0x30
    e2da:	cmp	fp, r7
    e2dc:	strb.w	r3, [sp, #112]	; 0x70
    e2e0:	orr.w	r3, r2, #2
    e2e4:	blt.w	f044 <_svfprintf_r+0x14f4>
    e2e8:	bic.w	r3, r2, #128	; 0x80
    e2ec:	orr.w	r3, r3, #2
    e2f0:	str	r3, [sp, #12]
    e2f2:	add	r6, sp, #192	; 0xc0
    e2f4:	lsrs	r3, r4, #4
    e2f6:	and.w	r1, r4, #15
    e2fa:	orr.w	r3, r3, r5, lsl #28
    e2fe:	lsrs	r2, r5, #4
    e300:	mov	r4, r3
    e302:	mov	r5, r2
    e304:	ldrb	r3, [r0, r1]
    e306:	strb.w	r3, [r6, #-1]!
    e30a:	orrs.w	r3, r4, r5
    e30e:	bne.n	e2f4 <_svfprintf_r+0x7a4>
    e310:	b.n	dee0 <_svfprintf_r+0x390>
    e312:	ldr	r1, [sp, #40]	; 0x28
    e314:	str	r3, [sp, #52]	; 0x34
    e316:	ldr	r2, [r1, #0]
    e318:	strb.w	r2, [sp, #152]	; 0x98
    e31c:	movs	r3, #0
    e31e:	mov	r2, r1
    e320:	mov	r7, r3
    e322:	strb.w	r3, [sp, #111]	; 0x6f
    e326:	adds	r2, #4
    e328:	movs	r3, #1
    e32a:	str	r3, [sp, #16]
    e32c:	mov	fp, r7
    e32e:	str	r7, [sp, #60]	; 0x3c
    e330:	str	r2, [sp, #40]	; 0x28
    e332:	str	r3, [sp, #36]	; 0x24
    e334:	add	r6, sp, #152	; 0x98
    e336:	b.n	defc <_svfprintf_r+0x3ac>
    e338:	str	r3, [sp, #52]	; 0x34
    e33a:	mov	fp, r5
    e33c:	cmp	r2, #0
    e33e:	beq.w	de68 <_svfprintf_r+0x318>
    e342:	strb.w	r1, [sp, #111]	; 0x6f
    e346:	b.n	de68 <_svfprintf_r+0x318>
    e348:	ldr	r3, [sp, #12]
    e34a:	orr.w	r3, r3, #64	; 0x40
    e34e:	str	r3, [sp, #12]
    e350:	ldrb.w	r3, [r8]
    e354:	b.n	dc04 <_svfprintf_r+0xb4>
    e356:	ldrb.w	r3, [r8]
    e35a:	cmp	r1, #0
    e35c:	bne.w	dc04 <_svfprintf_r+0xb4>
    e360:	movs	r2, #1
    e362:	movs	r1, #32
    e364:	b.n	dc04 <_svfprintf_r+0xb4>
    e366:	ldr	r3, [sp, #12]
    e368:	orr.w	r3, r3, #1
    e36c:	str	r3, [sp, #12]
    e36e:	ldrb.w	r3, [r8]
    e372:	b.n	dc04 <_svfprintf_r+0xb4>
    e374:	ldr	r4, [sp, #40]	; 0x28
    e376:	ldr	r3, [r4, #0]
    e378:	str	r3, [sp, #32]
    e37a:	mov	r0, r3
    e37c:	cmp	r0, #0
    e37e:	mov	r3, r4
    e380:	add.w	r3, r3, #4
    e384:	blt.w	dcc8 <_svfprintf_r+0x178>
    e388:	str	r3, [sp, #40]	; 0x28
    e38a:	ldrb.w	r3, [r8]
    e38e:	b.n	dc04 <_svfprintf_r+0xb4>
    e390:	ldrb.w	r3, [r8]
    e394:	movs	r2, #1
    e396:	movs	r1, #43	; 0x2b
    e398:	b.n	dc04 <_svfprintf_r+0xb4>
    e39a:	ldr	r3, [sp, #12]
    e39c:	orr.w	r3, r3, #32
    e3a0:	str	r3, [sp, #12]
    e3a2:	ldrb.w	r3, [r8]
    e3a6:	b.n	dc04 <_svfprintf_r+0xb4>
    e3a8:	ldr	r2, [sp, #40]	; 0x28
    e3aa:	str	r3, [sp, #52]	; 0x34
    e3ac:	ldr	r6, [r2, #0]
    e3ae:	movs	r4, #0
    e3b0:	strb.w	r4, [sp, #111]	; 0x6f
    e3b4:	adds	r7, r2, #4
    e3b6:	cmp	r6, #0
    e3b8:	beq.w	eff4 <_svfprintf_r+0x14a4>
    e3bc:	cmp	r5, #0
    e3be:	blt.w	ee84 <_svfprintf_r+0x1334>
    e3c2:	mov	r2, r5
    e3c4:	mov	r1, r4
    e3c6:	mov	r0, r6
    e3c8:	bl	c090 <memchr>
    e3cc:	cmp	r0, #0
    e3ce:	beq.w	f098 <_svfprintf_r+0x1548>
    e3d2:	subs	r3, r0, r6
    e3d4:	str	r3, [sp, #36]	; 0x24
    e3d6:	mov	fp, r4
    e3d8:	bic.w	r3, r3, r3, asr #31
    e3dc:	str	r7, [sp, #40]	; 0x28
    e3de:	str	r3, [sp, #16]
    e3e0:	str.w	fp, [sp, #60]	; 0x3c
    e3e4:	ldrb.w	r7, [sp, #111]	; 0x6f
    e3e8:	b.n	def4 <_svfprintf_r+0x3a4>
    e3ea:	str	r3, [sp, #52]	; 0x34
    e3ec:	mov	fp, r5
    e3ee:	cmp	r2, #0
    e3f0:	beq.w	e246 <_svfprintf_r+0x6f6>
    e3f4:	strb.w	r1, [sp, #111]	; 0x6f
    e3f8:	b.n	e246 <_svfprintf_r+0x6f6>
    e3fa:	str	r3, [sp, #52]	; 0x34
    e3fc:	mov	fp, r5
    e3fe:	cmp	r2, #0
    e400:	bne.w	f220 <_svfprintf_r+0x16d0>
    e404:	ldr	r3, [sp, #12]
    e406:	ldr	r0, [pc, #344]	; (e560 <_svfprintf_r+0xa10>)
    e408:	lsls	r5, r3, #26
    e40a:	bmi.w	e2a4 <_svfprintf_r+0x754>
    e40e:	ldr	r3, [sp, #12]
    e410:	lsls	r4, r3, #27
    e412:	bpl.w	ec92 <_svfprintf_r+0x1142>
    e416:	ldr	r2, [sp, #40]	; 0x28
    e418:	mov	r3, r2
    e41a:	adds	r3, #4
    e41c:	ldr	r4, [r2, #0]
    e41e:	str	r3, [sp, #40]	; 0x28
    e420:	movs	r5, #0
    e422:	b.n	e2b6 <_svfprintf_r+0x766>
    e424:	ldrb.w	r3, [r8]
    e428:	cmp	r3, #108	; 0x6c
    e42a:	beq.w	edb2 <_svfprintf_r+0x1262>
    e42e:	ldr	r0, [sp, #12]
    e430:	orr.w	r0, r0, #16
    e434:	str	r0, [sp, #12]
    e436:	b.w	dc04 <_svfprintf_r+0xb4>
    e43a:	cmp	r2, #0
    e43c:	bne.w	f218 <_svfprintf_r+0x16c8>
    e440:	ldr	r3, [sp, #12]
    e442:	lsls	r3, r3, #26
    e444:	bpl.w	eaf6 <_svfprintf_r+0xfa6>
    e448:	ldr	r2, [sp, #40]	; 0x28
    e44a:	ldr	r1, [sp, #28]
    e44c:	ldr	r3, [r2, #0]
    e44e:	asrs	r5, r1, #31
    e450:	mov	r0, r1
    e452:	adds	r2, #4
    e454:	mov	r1, r5
    e456:	str	r2, [sp, #40]	; 0x28
    e458:	strd	r0, r1, [r3]
    e45c:	b.w	db9e <_svfprintf_r+0x4e>
    e460:	ldr	r0, [pc, #252]	; (e560 <_svfprintf_r+0xa10>)
    e462:	str	r2, [sp, #52]	; 0x34
    e464:	cmp.w	fp, #0
    e468:	bne.w	e754 <_svfprintf_r+0xc04>
    e46c:	mov	r7, fp
    e46e:	mov.w	fp, #0
    e472:	str.w	fp, [sp, #36]	; 0x24
    e476:	add	r6, sp, #192	; 0xc0
    e478:	b.n	dee6 <_svfprintf_r+0x396>
    e47a:	str	r3, [sp, #52]	; 0x34
    e47c:	cmp	r2, #0
    e47e:	bne.w	f210 <_svfprintf_r+0x16c0>
    e482:	ldr	r2, [sp, #52]	; 0x34
    e484:	cmp	r2, #0
    e486:	beq.w	dd36 <_svfprintf_r+0x1e6>
    e48a:	movs	r3, #0
    e48c:	movs	r1, #1
    e48e:	mov	r7, r3
    e490:	str	r1, [sp, #16]
    e492:	strb.w	r2, [sp, #152]	; 0x98
    e496:	strb.w	r3, [sp, #111]	; 0x6f
    e49a:	mov	fp, r3
    e49c:	str	r3, [sp, #60]	; 0x3c
    e49e:	str	r1, [sp, #36]	; 0x24
    e4a0:	add	r6, sp, #152	; 0x98
    e4a2:	b.n	defc <_svfprintf_r+0x3ac>
    e4a4:	cmp.w	fp, #0
    e4a8:	beq.w	f0c8 <_svfprintf_r+0x1578>
    e4ac:	movs	r7, #0
    e4ae:	movs	r4, #0
    e4b0:	movs	r5, #0
    e4b2:	b.n	dd9c <_svfprintf_r+0x24c>
    e4b4:	ldr	r0, [pc, #168]	; (e560 <_svfprintf_r+0xa10>)
    e4b6:	str	r3, [sp, #12]
    e4b8:	str	r2, [sp, #52]	; 0x34
    e4ba:	orrs.w	r3, r4, r5
    e4be:	str	r7, [sp, #40]	; 0x28
    e4c0:	mov.w	r7, #0
    e4c4:	bne.w	e2f2 <_svfprintf_r+0x7a2>
    e4c8:	movs	r4, #0
    e4ca:	movs	r5, #0
    e4cc:	b.n	e2f2 <_svfprintf_r+0x7a2>
    e4ce:	ldr	r4, [sp, #148]	; 0x94
    e4d0:	b.n	df9c <_svfprintf_r+0x44c>
    e4d2:	ldr	r3, [sp, #52]	; 0x34
    e4d4:	cmp	r3, #101	; 0x65
    e4d6:	ble.w	e62e <_svfprintf_r+0xade>
    e4da:	movs	r2, #0
    e4dc:	movs	r3, #0
    e4de:	ldrd	r0, r1, [sp, #64]	; 0x40
    e4e2:	bl	b20c <__aeabi_dcmpeq>
    e4e6:	cmp	r0, #0
    e4e8:	beq.w	e758 <_svfprintf_r+0xc08>
    e4ec:	ldr	r3, [sp, #144]	; 0x90
    e4ee:	ldr	r2, [pc, #116]	; (e564 <_svfprintf_r+0xa14>)
    e4f0:	str.w	r2, [r9]
    e4f4:	adds	r3, #1
    e4f6:	adds	r4, #1
    e4f8:	movs	r2, #1
    e4fa:	cmp	r3, #7
    e4fc:	str	r4, [sp, #148]	; 0x94
    e4fe:	str	r3, [sp, #144]	; 0x90
    e500:	str.w	r2, [r9, #4]
    e504:	bgt.w	ece4 <_svfprintf_r+0x1194>
    e508:	add.w	r9, r9, #8
    e50c:	ldr	r3, [sp, #116]	; 0x74
    e50e:	ldr	r2, [sp, #56]	; 0x38
    e510:	cmp	r3, r2
    e512:	blt.n	e51c <_svfprintf_r+0x9cc>
    e514:	ldr	r3, [sp, #12]
    e516:	lsls	r3, r3, #31
    e518:	bpl.w	e07c <_svfprintf_r+0x52c>
    e51c:	ldr	r3, [sp, #144]	; 0x90
    e51e:	ldr	r1, [sp, #72]	; 0x48
    e520:	ldr	r2, [sp, #76]	; 0x4c
    e522:	str.w	r2, [r9]
    e526:	adds	r3, #1
    e528:	add	r4, r1
    e52a:	cmp	r3, #7
    e52c:	str	r4, [sp, #148]	; 0x94
    e52e:	str.w	r1, [r9, #4]
    e532:	str	r3, [sp, #144]	; 0x90
    e534:	bgt.w	edc6 <_svfprintf_r+0x1276>
    e538:	add.w	r9, r9, #8
    e53c:	ldr	r3, [sp, #56]	; 0x38
    e53e:	subs	r5, r3, #1
    e540:	cmp	r5, #0
    e542:	ble.w	e07c <_svfprintf_r+0x52c>
    e546:	ldr	r2, [pc, #32]	; (e568 <_svfprintf_r+0xa18>)
    e548:	ldr	r3, [sp, #144]	; 0x90
    e54a:	str	r2, [sp, #44]	; 0x2c
    e54c:	cmp	r5, #16
    e54e:	ble.w	e924 <_svfprintf_r+0xdd4>
    e552:	movs	r6, #16
    e554:	ldr	r7, [sp, #24]
    e556:	ldr.w	fp, [sp, #20]
    e55a:	b.n	e578 <_svfprintf_r+0xa28>
    e55c:	.word	0x00013960
    e560:	.word	0x00013974
    e564:	.word	0x00013990
    e568:	.word	0x00013940
    e56c:	add.w	r9, r9, #8
    e570:	subs	r5, #16
    e572:	cmp	r5, #16
    e574:	ble.w	e924 <_svfprintf_r+0xdd4>
    e578:	adds	r3, #1
    e57a:	adds	r4, #16
    e57c:	cmp	r3, #7
    e57e:	str	r4, [sp, #148]	; 0x94
    e580:	str	r3, [sp, #144]	; 0x90
    e582:	str.w	sl, [r9]
    e586:	str.w	r6, [r9, #4]
    e58a:	ble.n	e56c <_svfprintf_r+0xa1c>
    e58c:	add	r2, sp, #140	; 0x8c
    e58e:	mov	r1, fp
    e590:	mov	r0, r7
    e592:	bl	12ae8 <__ssprint_r>
    e596:	cmp	r0, #0
    e598:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e59c:	ldr	r4, [sp, #148]	; 0x94
    e59e:	ldr	r3, [sp, #144]	; 0x90
    e5a0:	add.w	r9, sp, #192	; 0xc0
    e5a4:	b.n	e570 <_svfprintf_r+0xa20>
    e5a6:	ldr	r3, [sp, #32]
    e5a8:	ldr	r2, [sp, #16]
    e5aa:	subs	r7, r3, r2
    e5ac:	cmp	r7, #0
    e5ae:	ble.w	dfe4 <_svfprintf_r+0x494>
    e5b2:	ldr	r2, [pc, #752]	; (e8a4 <_svfprintf_r+0xd54>)
    e5b4:	ldr	r3, [sp, #144]	; 0x90
    e5b6:	str	r2, [sp, #44]	; 0x2c
    e5b8:	cmp	r7, #16
    e5ba:	ble.n	e614 <_svfprintf_r+0xac4>
    e5bc:	mov	r2, r9
    e5be:	mov	r1, r4
    e5c0:	mov	r9, r7
    e5c2:	movs	r5, #16
    e5c4:	mov	r7, r6
    e5c6:	ldr	r4, [sp, #24]
    e5c8:	ldr	r6, [sp, #20]
    e5ca:	b.n	e5da <_svfprintf_r+0xa8a>
    e5cc:	sub.w	r9, r9, #16
    e5d0:	cmp.w	r9, #16
    e5d4:	add.w	r2, r2, #8
    e5d8:	ble.n	e60c <_svfprintf_r+0xabc>
    e5da:	adds	r3, #1
    e5dc:	adds	r1, #16
    e5de:	cmp	r3, #7
    e5e0:	str	r1, [sp, #148]	; 0x94
    e5e2:	str	r3, [sp, #144]	; 0x90
    e5e4:	str.w	sl, [r2]
    e5e8:	str	r5, [r2, #4]
    e5ea:	ble.n	e5cc <_svfprintf_r+0xa7c>
    e5ec:	add	r2, sp, #140	; 0x8c
    e5ee:	mov	r1, r6
    e5f0:	mov	r0, r4
    e5f2:	bl	12ae8 <__ssprint_r>
    e5f6:	cmp	r0, #0
    e5f8:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e5fc:	sub.w	r9, r9, #16
    e600:	cmp.w	r9, #16
    e604:	ldr	r1, [sp, #148]	; 0x94
    e606:	ldr	r3, [sp, #144]	; 0x90
    e608:	add	r2, sp, #192	; 0xc0
    e60a:	bgt.n	e5da <_svfprintf_r+0xa8a>
    e60c:	mov	r6, r7
    e60e:	mov	r4, r1
    e610:	mov	r7, r9
    e612:	mov	r9, r2
    e614:	adds	r3, #1
    e616:	ldr	r2, [sp, #44]	; 0x2c
    e618:	str	r3, [sp, #144]	; 0x90
    e61a:	add	r4, r7
    e61c:	cmp	r3, #7
    e61e:	str	r4, [sp, #148]	; 0x94
    e620:	stmia.w	r9, {r2, r7}
    e624:	bgt.w	eaa2 <_svfprintf_r+0xf52>
    e628:	add.w	r9, r9, #8
    e62c:	b.n	dfe4 <_svfprintf_r+0x494>
    e62e:	ldr	r3, [sp, #56]	; 0x38
    e630:	ldr	r5, [sp, #144]	; 0x90
    e632:	cmp	r3, #1
    e634:	ble.w	ea4c <_svfprintf_r+0xefc>
    e638:	adds	r5, #1
    e63a:	adds	r4, #1
    e63c:	movs	r3, #1
    e63e:	cmp	r5, #7
    e640:	str	r4, [sp, #148]	; 0x94
    e642:	str	r5, [sp, #144]	; 0x90
    e644:	str.w	r6, [r9]
    e648:	str.w	r3, [r9, #4]
    e64c:	bgt.w	ea6e <_svfprintf_r+0xf1e>
    e650:	add.w	r9, r9, #8
    e654:	ldr	r2, [sp, #72]	; 0x48
    e656:	ldr	r3, [sp, #76]	; 0x4c
    e658:	str.w	r3, [r9]
    e65c:	adds	r5, #1
    e65e:	add	r4, r2
    e660:	cmp	r5, #7
    e662:	str	r4, [sp, #148]	; 0x94
    e664:	str	r5, [sp, #144]	; 0x90
    e666:	str.w	r2, [r9, #4]
    e66a:	bgt.w	ea88 <_svfprintf_r+0xf38>
    e66e:	add.w	r9, r9, #8
    e672:	movs	r3, #0
    e674:	movs	r2, #0
    e676:	ldrd	r0, r1, [sp, #64]	; 0x40
    e67a:	bl	b20c <__aeabi_dcmpeq>
    e67e:	ldr	r3, [sp, #56]	; 0x38
    e680:	cmp	r0, #0
    e682:	bne.w	e80c <_svfprintf_r+0xcbc>
    e686:	subs	r3, #1
    e688:	adds	r5, #1
    e68a:	adds	r6, #1
    e68c:	add	r4, r3
    e68e:	cmp	r5, #7
    e690:	str	r5, [sp, #144]	; 0x90
    e692:	str	r4, [sp, #148]	; 0x94
    e694:	str.w	r6, [r9]
    e698:	str.w	r3, [r9, #4]
    e69c:	bgt.w	e88a <_svfprintf_r+0xd3a>
    e6a0:	add.w	r9, r9, #8
    e6a4:	ldr	r2, [sp, #84]	; 0x54
    e6a6:	str.w	r2, [r9, #4]
    e6aa:	adds	r5, #1
    e6ac:	add	r4, r2
    e6ae:	add	r3, sp, #124	; 0x7c
    e6b0:	cmp	r5, #7
    e6b2:	str	r4, [sp, #148]	; 0x94
    e6b4:	str	r5, [sp, #144]	; 0x90
    e6b6:	str.w	r3, [r9]
    e6ba:	ble.w	e078 <_svfprintf_r+0x528>
    e6be:	add	r2, sp, #140	; 0x8c
    e6c0:	ldr	r1, [sp, #20]
    e6c2:	ldr	r0, [sp, #24]
    e6c4:	bl	12ae8 <__ssprint_r>
    e6c8:	cmp	r0, #0
    e6ca:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e6ce:	ldr	r4, [sp, #148]	; 0x94
    e6d0:	add.w	r9, sp, #192	; 0xc0
    e6d4:	b.n	e07c <_svfprintf_r+0x52c>
    e6d6:	add	r2, sp, #140	; 0x8c
    e6d8:	ldr	r1, [sp, #20]
    e6da:	ldr	r0, [sp, #24]
    e6dc:	bl	12ae8 <__ssprint_r>
    e6e0:	cmp	r0, #0
    e6e2:	beq.w	e118 <_svfprintf_r+0x5c8>
    e6e6:	b.w	dd44 <_svfprintf_r+0x1f4>
    e6ea:	add	r2, sp, #140	; 0x8c
    e6ec:	ldr	r1, [sp, #20]
    e6ee:	ldr	r0, [sp, #24]
    e6f0:	bl	12ae8 <__ssprint_r>
    e6f4:	cmp	r0, #0
    e6f6:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e6fa:	ldr	r4, [sp, #148]	; 0x94
    e6fc:	add.w	r9, sp, #192	; 0xc0
    e700:	b.n	e056 <_svfprintf_r+0x506>
    e702:	add	r2, sp, #140	; 0x8c
    e704:	ldr	r1, [sp, #20]
    e706:	ldr	r0, [sp, #24]
    e708:	bl	12ae8 <__ssprint_r>
    e70c:	cmp	r0, #0
    e70e:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e712:	ldr	r4, [sp, #148]	; 0x94
    e714:	add.w	r9, sp, #192	; 0xc0
    e718:	b.n	dfbc <_svfprintf_r+0x46c>
    e71a:	add	r2, sp, #140	; 0x8c
    e71c:	ldr	r1, [sp, #20]
    e71e:	ldr	r0, [sp, #24]
    e720:	bl	12ae8 <__ssprint_r>
    e724:	cmp	r0, #0
    e726:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e72a:	ldr	r4, [sp, #148]	; 0x94
    e72c:	add.w	r9, sp, #192	; 0xc0
    e730:	b.n	dfdc <_svfprintf_r+0x48c>
    e732:	cmp.w	fp, #0
    e736:	strb.w	r7, [sp, #111]	; 0x6f
    e73a:	blt.w	ecfc <_svfprintf_r+0x11ac>
    e73e:	bic.w	r3, r2, #128	; 0x80
    e742:	str	r3, [sp, #12]
    e744:	orrs.w	r3, r4, r5
    e748:	bne.w	e2f2 <_svfprintf_r+0x7a2>
    e74c:	cmp.w	fp, #0
    e750:	beq.w	e46c <_svfprintf_r+0x91c>
    e754:	movs	r7, #0
    e756:	b.n	e4c8 <_svfprintf_r+0x978>
    e758:	ldr	r5, [sp, #116]	; 0x74
    e75a:	cmp	r5, #0
    e75c:	ble.w	ed02 <_svfprintf_r+0x11b2>
    e760:	ldr	r3, [sp, #60]	; 0x3c
    e762:	ldr	r2, [sp, #56]	; 0x38
    e764:	cmp	r3, r2
    e766:	it	ge
    e768:	movge	r3, r2
    e76a:	cmp	r3, #0
    e76c:	mov	r5, r3
    e76e:	ble.n	e78c <_svfprintf_r+0xc3c>
    e770:	ldr	r3, [sp, #144]	; 0x90
    e772:	str.w	r6, [r9]
    e776:	adds	r3, #1
    e778:	add	r4, r5
    e77a:	cmp	r3, #7
    e77c:	str	r4, [sp, #148]	; 0x94
    e77e:	str.w	r5, [r9, #4]
    e782:	str	r3, [sp, #144]	; 0x90
    e784:	bgt.w	eeda <_svfprintf_r+0x138a>
    e788:	add.w	r9, r9, #8
    e78c:	ldr	r3, [sp, #60]	; 0x3c
    e78e:	cmp	r5, #0
    e790:	it	ge
    e792:	subge	r3, r3, r5
    e794:	cmp	r3, #0
    e796:	mov	r5, r3
    e798:	ble.w	e98c <_svfprintf_r+0xe3c>
    e79c:	ldr	r2, [pc, #260]	; (e8a4 <_svfprintf_r+0xd54>)
    e79e:	ldr	r3, [sp, #144]	; 0x90
    e7a0:	str	r2, [sp, #44]	; 0x2c
    e7a2:	cmp	r5, #16
    e7a4:	ble.w	ecae <_svfprintf_r+0x115e>
    e7a8:	mov	r2, r4
    e7aa:	movs	r7, #16
    e7ac:	ldr.w	fp, [sp, #24]
    e7b0:	ldr	r4, [sp, #20]
    e7b2:	b.n	e7c0 <_svfprintf_r+0xc70>
    e7b4:	add.w	r9, r9, #8
    e7b8:	subs	r5, #16
    e7ba:	cmp	r5, #16
    e7bc:	ble.w	ecac <_svfprintf_r+0x115c>
    e7c0:	adds	r3, #1
    e7c2:	adds	r2, #16
    e7c4:	cmp	r3, #7
    e7c6:	str	r2, [sp, #148]	; 0x94
    e7c8:	str	r3, [sp, #144]	; 0x90
    e7ca:	str.w	sl, [r9]
    e7ce:	str.w	r7, [r9, #4]
    e7d2:	ble.n	e7b4 <_svfprintf_r+0xc64>
    e7d4:	add	r2, sp, #140	; 0x8c
    e7d6:	mov	r1, r4
    e7d8:	mov	r0, fp
    e7da:	bl	12ae8 <__ssprint_r>
    e7de:	cmp	r0, #0
    e7e0:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e7e4:	ldr	r2, [sp, #148]	; 0x94
    e7e6:	ldr	r3, [sp, #144]	; 0x90
    e7e8:	add.w	r9, sp, #192	; 0xc0
    e7ec:	b.n	e7b8 <_svfprintf_r+0xc68>
    e7ee:	add	r2, sp, #140	; 0x8c
    e7f0:	ldr	r1, [sp, #20]
    e7f2:	ldr	r0, [sp, #24]
    e7f4:	bl	12ae8 <__ssprint_r>
    e7f8:	cmp	r0, #0
    e7fa:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e7fe:	ldrb.w	r7, [sp, #111]	; 0x6f
    e802:	ldr	r4, [sp, #148]	; 0x94
    e804:	add.w	r9, sp, #192	; 0xc0
    e808:	b.w	df9c <_svfprintf_r+0x44c>
    e80c:	subs	r6, r3, #1
    e80e:	cmp	r6, #0
    e810:	ble.w	e6a4 <_svfprintf_r+0xb54>
    e814:	ldr	r3, [pc, #140]	; (e8a4 <_svfprintf_r+0xd54>)
    e816:	str	r3, [sp, #44]	; 0x2c
    e818:	cmp	r6, #16
    e81a:	ble.n	e876 <_svfprintf_r+0xd26>
    e81c:	str.w	r8, [sp, #36]	; 0x24
    e820:	movs	r7, #16
    e822:	mov	r8, r6
    e824:	ldr.w	fp, [sp, #24]
    e828:	ldr	r6, [sp, #20]
    e82a:	b.n	e83a <_svfprintf_r+0xcea>
    e82c:	sub.w	r8, r8, #16
    e830:	cmp.w	r8, #16
    e834:	add.w	r9, r9, #8
    e838:	ble.n	e870 <_svfprintf_r+0xd20>
    e83a:	adds	r5, #1
    e83c:	adds	r4, #16
    e83e:	cmp	r5, #7
    e840:	str	r4, [sp, #148]	; 0x94
    e842:	str	r5, [sp, #144]	; 0x90
    e844:	str.w	sl, [r9]
    e848:	str.w	r7, [r9, #4]
    e84c:	ble.n	e82c <_svfprintf_r+0xcdc>
    e84e:	add	r2, sp, #140	; 0x8c
    e850:	mov	r1, r6
    e852:	mov	r0, fp
    e854:	bl	12ae8 <__ssprint_r>
    e858:	cmp	r0, #0
    e85a:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e85e:	sub.w	r8, r8, #16
    e862:	cmp.w	r8, #16
    e866:	ldr	r4, [sp, #148]	; 0x94
    e868:	ldr	r5, [sp, #144]	; 0x90
    e86a:	add.w	r9, sp, #192	; 0xc0
    e86e:	bgt.n	e83a <_svfprintf_r+0xcea>
    e870:	mov	r6, r8
    e872:	ldr.w	r8, [sp, #36]	; 0x24
    e876:	ldr	r3, [sp, #44]	; 0x2c
    e878:	adds	r5, #1
    e87a:	add	r4, r6
    e87c:	cmp	r5, #7
    e87e:	str	r4, [sp, #148]	; 0x94
    e880:	str	r5, [sp, #144]	; 0x90
    e882:	stmia.w	r9, {r3, r6}
    e886:	ble.w	e6a0 <_svfprintf_r+0xb50>
    e88a:	add	r2, sp, #140	; 0x8c
    e88c:	ldr	r1, [sp, #20]
    e88e:	ldr	r0, [sp, #24]
    e890:	bl	12ae8 <__ssprint_r>
    e894:	cmp	r0, #0
    e896:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e89a:	ldr	r4, [sp, #148]	; 0x94
    e89c:	ldr	r5, [sp, #144]	; 0x90
    e89e:	add.w	r9, sp, #192	; 0xc0
    e8a2:	b.n	e6a4 <_svfprintf_r+0xb54>
    e8a4:	.word	0x00013940
    e8a8:	ldr	r1, [sp, #12]
    e8aa:	ands.w	r2, r1, #16
    e8ae:	beq.w	ec58 <_svfprintf_r+0x1108>
    e8b2:	ldr	r0, [sp, #40]	; 0x28
    e8b4:	strb.w	r3, [sp, #111]	; 0x6f
    e8b8:	cmp.w	fp, #0
    e8bc:	ldr	r4, [r0, #0]
    e8be:	add.w	r7, r0, #4
    e8c2:	mov.w	r5, #0
    e8c6:	blt.n	e916 <_svfprintf_r+0xdc6>
    e8c8:	mov	r2, r1
    e8ca:	bic.w	r2, r2, #128	; 0x80
    e8ce:	str	r2, [sp, #12]
    e8d0:	orrs.w	r2, r4, r5
    e8d4:	str	r7, [sp, #40]	; 0x28
    e8d6:	mov	r7, r3
    e8d8:	bne.w	deac <_svfprintf_r+0x35c>
    e8dc:	b.n	e27c <_svfprintf_r+0x72c>
    e8de:	ldr	r3, [sp, #12]
    e8e0:	lsls	r0, r3, #27
    e8e2:	bmi.n	e93a <_svfprintf_r+0xdea>
    e8e4:	ldr	r3, [sp, #12]
    e8e6:	lsls	r1, r3, #25
    e8e8:	bpl.n	e93a <_svfprintf_r+0xdea>
    e8ea:	ldr	r1, [sp, #40]	; 0x28
    e8ec:	ldrsh.w	r4, [r1]
    e8f0:	adds	r1, #4
    e8f2:	asrs	r5, r4, #31
    e8f4:	mov	r2, r4
    e8f6:	mov	r3, r5
    e8f8:	str	r1, [sp, #40]	; 0x28
    e8fa:	b.w	de86 <_svfprintf_r+0x336>
    e8fe:	ldr	r1, [sp, #40]	; 0x28
    e900:	strb.w	r3, [sp, #111]	; 0x6f
    e904:	cmp.w	fp, #0
    e908:	ldr	r4, [r1, #0]
    e90a:	add.w	r7, r1, #4
    e90e:	mov.w	r5, #0
    e912:	bge.w	edae <_svfprintf_r+0x125e>
    e916:	str	r7, [sp, #40]	; 0x28
    e918:	mov	r7, r3
    e91a:	orrs.w	r3, r4, r5
    e91e:	bne.w	deac <_svfprintf_r+0x35c>
    e922:	b.n	e286 <_svfprintf_r+0x736>
    e924:	adds	r3, #1
    e926:	ldr	r2, [sp, #44]	; 0x2c
    e928:	str	r3, [sp, #144]	; 0x90
    e92a:	add	r4, r5
    e92c:	cmp	r3, #7
    e92e:	str	r4, [sp, #148]	; 0x94
    e930:	stmia.w	r9, {r2, r5}
    e934:	ble.w	e078 <_svfprintf_r+0x528>
    e938:	b.n	e6be <_svfprintf_r+0xb6e>
    e93a:	ldr	r2, [sp, #40]	; 0x28
    e93c:	ldr	r4, [r2, #0]
    e93e:	mov	r3, r2
    e940:	adds	r3, #4
    e942:	asrs	r5, r4, #31
    e944:	mov	r2, r4
    e946:	str	r3, [sp, #40]	; 0x28
    e948:	cmp	r2, #0
    e94a:	mov	r3, r5
    e94c:	sbcs.w	r3, r3, #0
    e950:	bge.w	de90 <_svfprintf_r+0x340>
    e954:	negs	r4, r4
    e956:	mov.w	r7, #45	; 0x2d
    e95a:	sbc.w	r5, r5, r5, lsl #1
    e95e:	cmp.w	fp, #0
    e962:	strb.w	r7, [sp, #111]	; 0x6f
    e966:	blt.w	deac <_svfprintf_r+0x35c>
    e96a:	ldr	r3, [sp, #12]
    e96c:	bic.w	r3, r3, #128	; 0x80
    e970:	str	r3, [sp, #12]
    e972:	b.w	deac <_svfprintf_r+0x35c>
    e976:	add	r2, sp, #140	; 0x8c
    e978:	ldr	r1, [sp, #20]
    e97a:	ldr	r0, [sp, #24]
    e97c:	bl	12ae8 <__ssprint_r>
    e980:	cmp	r0, #0
    e982:	bne.w	dd44 <_svfprintf_r+0x1f4>
    e986:	ldr	r4, [sp, #148]	; 0x94
    e988:	add.w	r9, sp, #192	; 0xc0
    e98c:	ldr	r2, [sp, #60]	; 0x3c
    e98e:	ldr	r3, [sp, #116]	; 0x74
    e990:	add	r2, r6
    e992:	mov	r7, r2
    e994:	ldr	r2, [sp, #56]	; 0x38
    e996:	cmp	r3, r2
    e998:	blt.n	ea2a <_svfprintf_r+0xeda>
    e99a:	ldr	r2, [sp, #12]
    e99c:	lsls	r5, r2, #31
    e99e:	bmi.n	ea2a <_svfprintf_r+0xeda>
    e9a0:	ldr	r1, [sp, #56]	; 0x38
    e9a2:	add	r6, r1
    e9a4:	subs	r5, r6, r7
    e9a6:	subs	r3, r1, r3
    e9a8:	cmp	r5, r3
    e9aa:	it	ge
    e9ac:	movge	r5, r3
    e9ae:	cmp	r5, #0
    e9b0:	mov	r6, r5
    e9b2:	ble.n	e9d0 <_svfprintf_r+0xe80>
    e9b4:	ldr	r2, [sp, #144]	; 0x90
    e9b6:	str.w	r7, [r9]
    e9ba:	adds	r2, #1
    e9bc:	add	r4, r5
    e9be:	cmp	r2, #7
    e9c0:	str	r4, [sp, #148]	; 0x94
    e9c2:	str.w	r5, [r9, #4]
    e9c6:	str	r2, [sp, #144]	; 0x90
    e9c8:	bgt.w	efc8 <_svfprintf_r+0x1478>
    e9cc:	add.w	r9, r9, #8
    e9d0:	cmp	r6, #0
    e9d2:	ite	ge
    e9d4:	subge	r5, r3, r6
    e9d6:	movlt	r5, r3
    e9d8:	cmp	r5, #0
    e9da:	ble.w	e07c <_svfprintf_r+0x52c>
    e9de:	ldr	r2, [pc, #744]	; (ecc8 <_svfprintf_r+0x1178>)
    e9e0:	ldr	r3, [sp, #144]	; 0x90
    e9e2:	str	r2, [sp, #44]	; 0x2c
    e9e4:	cmp	r5, #16
    e9e6:	ble.n	e924 <_svfprintf_r+0xdd4>
    e9e8:	movs	r6, #16
    e9ea:	ldr	r7, [sp, #24]
    e9ec:	ldr.w	fp, [sp, #20]
    e9f0:	b.n	e9fc <_svfprintf_r+0xeac>
    e9f2:	add.w	r9, r9, #8
    e9f6:	subs	r5, #16
    e9f8:	cmp	r5, #16
    e9fa:	ble.n	e924 <_svfprintf_r+0xdd4>
    e9fc:	adds	r3, #1
    e9fe:	adds	r4, #16
    ea00:	cmp	r3, #7
    ea02:	str	r4, [sp, #148]	; 0x94
    ea04:	str	r3, [sp, #144]	; 0x90
    ea06:	str.w	sl, [r9]
    ea0a:	str.w	r6, [r9, #4]
    ea0e:	ble.n	e9f2 <_svfprintf_r+0xea2>
    ea10:	add	r2, sp, #140	; 0x8c
    ea12:	mov	r1, fp
    ea14:	mov	r0, r7
    ea16:	bl	12ae8 <__ssprint_r>
    ea1a:	cmp	r0, #0
    ea1c:	bne.w	dd44 <_svfprintf_r+0x1f4>
    ea20:	ldr	r4, [sp, #148]	; 0x94
    ea22:	ldr	r3, [sp, #144]	; 0x90
    ea24:	add.w	r9, sp, #192	; 0xc0
    ea28:	b.n	e9f6 <_svfprintf_r+0xea6>
    ea2a:	ldr	r2, [sp, #144]	; 0x90
    ea2c:	ldr	r0, [sp, #72]	; 0x48
    ea2e:	ldr	r1, [sp, #76]	; 0x4c
    ea30:	str.w	r1, [r9]
    ea34:	adds	r2, #1
    ea36:	add	r4, r0
    ea38:	cmp	r2, #7
    ea3a:	str	r4, [sp, #148]	; 0x94
    ea3c:	str.w	r0, [r9, #4]
    ea40:	str	r2, [sp, #144]	; 0x90
    ea42:	bgt.w	efae <_svfprintf_r+0x145e>
    ea46:	add.w	r9, r9, #8
    ea4a:	b.n	e9a0 <_svfprintf_r+0xe50>
    ea4c:	ldr	r3, [sp, #12]
    ea4e:	lsls	r0, r3, #31
    ea50:	bmi.w	e638 <_svfprintf_r+0xae8>
    ea54:	adds	r5, #1
    ea56:	adds	r4, #1
    ea58:	movs	r3, #1
    ea5a:	cmp	r5, #7
    ea5c:	str	r4, [sp, #148]	; 0x94
    ea5e:	str	r5, [sp, #144]	; 0x90
    ea60:	str.w	r6, [r9]
    ea64:	str.w	r3, [r9, #4]
    ea68:	ble.w	e6a0 <_svfprintf_r+0xb50>
    ea6c:	b.n	e88a <_svfprintf_r+0xd3a>
    ea6e:	add	r2, sp, #140	; 0x8c
    ea70:	ldr	r1, [sp, #20]
    ea72:	ldr	r0, [sp, #24]
    ea74:	bl	12ae8 <__ssprint_r>
    ea78:	cmp	r0, #0
    ea7a:	bne.w	dd44 <_svfprintf_r+0x1f4>
    ea7e:	ldr	r4, [sp, #148]	; 0x94
    ea80:	ldr	r5, [sp, #144]	; 0x90
    ea82:	add.w	r9, sp, #192	; 0xc0
    ea86:	b.n	e654 <_svfprintf_r+0xb04>
    ea88:	add	r2, sp, #140	; 0x8c
    ea8a:	ldr	r1, [sp, #20]
    ea8c:	ldr	r0, [sp, #24]
    ea8e:	bl	12ae8 <__ssprint_r>
    ea92:	cmp	r0, #0
    ea94:	bne.w	dd44 <_svfprintf_r+0x1f4>
    ea98:	ldr	r4, [sp, #148]	; 0x94
    ea9a:	ldr	r5, [sp, #144]	; 0x90
    ea9c:	add.w	r9, sp, #192	; 0xc0
    eaa0:	b.n	e672 <_svfprintf_r+0xb22>
    eaa2:	add	r2, sp, #140	; 0x8c
    eaa4:	ldr	r1, [sp, #20]
    eaa6:	ldr	r0, [sp, #24]
    eaa8:	bl	12ae8 <__ssprint_r>
    eaac:	cmp	r0, #0
    eaae:	bne.w	dd44 <_svfprintf_r+0x1f4>
    eab2:	ldr	r4, [sp, #148]	; 0x94
    eab4:	add.w	r9, sp, #192	; 0xc0
    eab8:	b.w	dfe4 <_svfprintf_r+0x494>
    eabc:	ldr	r1, [sp, #12]
    eabe:	ands.w	r3, r1, #64	; 0x40
    eac2:	beq.w	ec38 <_svfprintf_r+0x10e8>
    eac6:	ldr	r0, [sp, #40]	; 0x28
    eac8:	strb.w	r2, [sp, #111]	; 0x6f
    eacc:	mov	r3, r0
    eace:	cmp.w	fp, #0
    ead2:	add.w	r3, r3, #4
    ead6:	ldrh	r4, [r0, #0]
    ead8:	mov.w	r5, #0
    eadc:	blt.w	ee60 <_svfprintf_r+0x1310>
    eae0:	bic.w	r1, r1, #128	; 0x80
    eae4:	str	r1, [sp, #12]
    eae6:	orrs.w	r1, r4, r5
    eaea:	str	r3, [sp, #40]	; 0x28
    eaec:	beq.w	e4a4 <_svfprintf_r+0x954>
    eaf0:	mov	r7, r2
    eaf2:	b.w	dd9c <_svfprintf_r+0x24c>
    eaf6:	ldr	r3, [sp, #12]
    eaf8:	lsls	r7, r3, #27
    eafa:	bmi.n	eb14 <_svfprintf_r+0xfc4>
    eafc:	ldr	r3, [sp, #12]
    eafe:	lsls	r6, r3, #25
    eb00:	bpl.n	eb14 <_svfprintf_r+0xfc4>
    eb02:	ldr	r2, [sp, #40]	; 0x28
    eb04:	ldr	r3, [r2, #0]
    eb06:	adds	r2, #4
    eb08:	str	r2, [sp, #40]	; 0x28
    eb0a:	ldrh.w	r2, [sp, #28]
    eb0e:	strh	r2, [r3, #0]
    eb10:	b.w	db9e <_svfprintf_r+0x4e>
    eb14:	ldr	r2, [sp, #40]	; 0x28
    eb16:	ldr	r3, [r2, #0]
    eb18:	adds	r2, #4
    eb1a:	str	r2, [sp, #40]	; 0x28
    eb1c:	ldr	r2, [sp, #28]
    eb1e:	str	r2, [r3, #0]
    eb20:	b.w	db9e <_svfprintf_r+0x4e>
    eb24:	ldrd	r0, r1, [sp, #64]	; 0x40
    eb28:	mov	r2, r0
    eb2a:	mov	r3, r1
    eb2c:	bl	b270 <__aeabi_dcmpun>
    eb30:	cmp	r0, #0
    eb32:	bne.w	f130 <_svfprintf_r+0x15e0>
    eb36:	ldr	r3, [sp, #52]	; 0x34
    eb38:	cmp.w	fp, #4294967295
    eb3c:	bic.w	r7, r3, #32
    eb40:	beq.w	f012 <_svfprintf_r+0x14c2>
    eb44:	cmp	r7, #71	; 0x47
    eb46:	beq.w	ee4e <_svfprintf_r+0x12fe>
    eb4a:	ldr	r3, [sp, #68]	; 0x44
    eb4c:	ldr	r2, [sp, #12]
    eb4e:	cmp	r3, #0
    eb50:	orr.w	r2, r2, #256	; 0x100
    eb54:	str	r2, [sp, #44]	; 0x2c
    eb56:	blt.w	f04a <_svfprintf_r+0x14fa>
    eb5a:	vldr	d7, [sp, #64]	; 0x40
    eb5e:	vstr	d7, [sp, #96]	; 0x60
    eb62:	movs	r3, #0
    eb64:	str	r3, [sp, #16]
    eb66:	ldr	r3, [sp, #52]	; 0x34
    eb68:	cmp	r3, #102	; 0x66
    eb6a:	beq.w	f018 <_svfprintf_r+0x14c8>
    eb6e:	cmp	r3, #70	; 0x46
    eb70:	beq.w	edfe <_svfprintf_r+0x12ae>
    eb74:	cmp	r7, #69	; 0x45
    eb76:	ite	eq
    eb78:	addeq.w	r5, fp, #1
    eb7c:	movne	r5, fp
    eb7e:	add	r2, sp, #132	; 0x84
    eb80:	add	r3, sp, #120	; 0x78
    eb82:	str	r2, [sp, #4]
    eb84:	str	r3, [sp, #0]
    eb86:	mov	r2, r5
    eb88:	add	r3, sp, #116	; 0x74
    eb8a:	movs	r1, #2
    eb8c:	vldr	d0, [sp, #96]	; 0x60
    eb90:	ldr	r0, [sp, #24]
    eb92:	bl	10358 <_dtoa_r>
    eb96:	ldr	r3, [sp, #52]	; 0x34
    eb98:	cmp	r3, #103	; 0x67
    eb9a:	mov	r6, r0
    eb9c:	bne.w	f076 <_svfprintf_r+0x1526>
    eba0:	ldr	r3, [sp, #12]
    eba2:	lsls	r2, r3, #31
    eba4:	bpl.w	f11a <_svfprintf_r+0x15ca>
    eba8:	adds	r4, r6, r5
    ebaa:	movs	r2, #0
    ebac:	movs	r3, #0
    ebae:	ldrd	r0, r1, [sp, #96]	; 0x60
    ebb2:	bl	b20c <__aeabi_dcmpeq>
    ebb6:	cmp	r0, #0
    ebb8:	bne.w	eed6 <_svfprintf_r+0x1386>
    ebbc:	ldr	r3, [sp, #132]	; 0x84
    ebbe:	cmp	r4, r3
    ebc0:	bls.n	ebd0 <_svfprintf_r+0x1080>
    ebc2:	movs	r1, #48	; 0x30
    ebc4:	adds	r2, r3, #1
    ebc6:	str	r2, [sp, #132]	; 0x84
    ebc8:	strb	r1, [r3, #0]
    ebca:	ldr	r3, [sp, #132]	; 0x84
    ebcc:	cmp	r4, r3
    ebce:	bhi.n	ebc4 <_svfprintf_r+0x1074>
    ebd0:	subs	r3, r3, r6
    ebd2:	cmp	r7, #71	; 0x47
    ebd4:	str	r3, [sp, #56]	; 0x38
    ebd6:	beq.w	eec8 <_svfprintf_r+0x1378>
    ebda:	ldr	r3, [sp, #52]	; 0x34
    ebdc:	cmp	r3, #101	; 0x65
    ebde:	ble.w	f094 <_svfprintf_r+0x1544>
    ebe2:	ldr	r3, [sp, #52]	; 0x34
    ebe4:	cmp	r3, #102	; 0x66
    ebe6:	ldr	r3, [sp, #116]	; 0x74
    ebe8:	str	r3, [sp, #60]	; 0x3c
    ebea:	beq.w	f0ae <_svfprintf_r+0x155e>
    ebee:	ldr	r2, [sp, #60]	; 0x3c
    ebf0:	ldr	r1, [sp, #56]	; 0x38
    ebf2:	cmp	r2, r1
    ebf4:	blt.w	f05c <_svfprintf_r+0x150c>
    ebf8:	ldr	r3, [sp, #12]
    ebfa:	lsls	r1, r3, #31
    ebfc:	bmi.w	f11e <_svfprintf_r+0x15ce>
    ec00:	bic.w	r3, r2, r2, asr #31
    ec04:	str	r2, [sp, #36]	; 0x24
    ec06:	movs	r2, #103	; 0x67
    ec08:	str	r2, [sp, #52]	; 0x34
    ec0a:	ldr	r2, [sp, #16]
    ec0c:	cmp	r2, #0
    ec0e:	bne.w	ee70 <_svfprintf_r+0x1320>
    ec12:	str	r3, [sp, #16]
    ec14:	ldr	r3, [sp, #44]	; 0x2c
    ec16:	str	r3, [sp, #12]
    ec18:	mov	fp, r2
    ec1a:	ldrb.w	r7, [sp, #111]	; 0x6f
    ec1e:	b.w	def4 <_svfprintf_r+0x3a4>
    ec22:	bic.w	r7, r7, #7
    ec26:	vldr	d7, [r7]
    ec2a:	add.w	r3, r7, #8
    ec2e:	vstr	d7, [sp, #64]	; 0x40
    ec32:	str	r3, [sp, #40]	; 0x28
    ec34:	b.w	e14c <_svfprintf_r+0x5fc>
    ec38:	ldr	r1, [sp, #40]	; 0x28
    ec3a:	strb.w	r3, [sp, #111]	; 0x6f
    ec3e:	cmp.w	fp, #0
    ec42:	ldr	r4, [r1, #0]
    ec44:	add.w	r7, r1, #4
    ec48:	mov.w	r5, #0
    ec4c:	bge.w	eda8 <_svfprintf_r+0x1258>
    ec50:	str	r7, [sp, #40]	; 0x28
    ec52:	movs	r7, #0
    ec54:	b.w	dd9c <_svfprintf_r+0x24c>
    ec58:	ldr	r1, [sp, #12]
    ec5a:	ands.w	r3, r1, #64	; 0x40
    ec5e:	beq.w	e8fe <_svfprintf_r+0xdae>
    ec62:	ldr	r0, [sp, #40]	; 0x28
    ec64:	strb.w	r2, [sp, #111]	; 0x6f
    ec68:	mov	r3, r0
    ec6a:	cmp.w	fp, #0
    ec6e:	add.w	r3, r3, #4
    ec72:	ldrh	r4, [r0, #0]
    ec74:	mov.w	r5, #0
    ec78:	blt.w	ee5a <_svfprintf_r+0x130a>
    ec7c:	bic.w	r1, r1, #128	; 0x80
    ec80:	str	r1, [sp, #12]
    ec82:	orrs.w	r1, r4, r5
    ec86:	str	r3, [sp, #40]	; 0x28
    ec88:	mov	r7, r2
    ec8a:	bne.w	deac <_svfprintf_r+0x35c>
    ec8e:	b.w	e27c <_svfprintf_r+0x72c>
    ec92:	ldr	r3, [sp, #12]
    ec94:	ldr	r2, [sp, #40]	; 0x28
    ec96:	tst.w	r3, #64	; 0x40
    ec9a:	mov	r3, r2
    ec9c:	beq.w	ee64 <_svfprintf_r+0x1314>
    eca0:	adds	r3, #4
    eca2:	ldrh	r4, [r2, #0]
    eca4:	str	r3, [sp, #40]	; 0x28
    eca6:	movs	r5, #0
    eca8:	b.w	e2b6 <_svfprintf_r+0x766>
    ecac:	mov	r4, r2
    ecae:	adds	r3, #1
    ecb0:	ldr	r2, [sp, #44]	; 0x2c
    ecb2:	str	r3, [sp, #144]	; 0x90
    ecb4:	add	r4, r5
    ecb6:	cmp	r3, #7
    ecb8:	str	r4, [sp, #148]	; 0x94
    ecba:	stmia.w	r9, {r2, r5}
    ecbe:	bgt.w	e976 <_svfprintf_r+0xe26>
    ecc2:	add.w	r9, r9, #8
    ecc6:	b.n	e98c <_svfprintf_r+0xe3c>
    ecc8:	.word	0x00013940
    eccc:	movs	r7, #0
    ecce:	cmp	fp, r7
    ecd0:	strb.w	r7, [sp, #111]	; 0x6f
    ecd4:	blt.w	e4c8 <_svfprintf_r+0x978>
    ecd8:	ldr	r3, [sp, #12]
    ecda:	bic.w	r3, r3, #128	; 0x80
    ecde:	str	r3, [sp, #12]
    ece0:	b.w	e464 <_svfprintf_r+0x914>
    ece4:	add	r2, sp, #140	; 0x8c
    ece6:	ldr	r1, [sp, #20]
    ece8:	ldr	r0, [sp, #24]
    ecea:	bl	12ae8 <__ssprint_r>
    ecee:	cmp	r0, #0
    ecf0:	bne.w	dd44 <_svfprintf_r+0x1f4>
    ecf4:	ldr	r4, [sp, #148]	; 0x94
    ecf6:	add.w	r9, sp, #192	; 0xc0
    ecfa:	b.n	e50c <_svfprintf_r+0x9bc>
    ecfc:	ldr	r7, [sp, #40]	; 0x28
    ecfe:	b.w	e4ba <_svfprintf_r+0x96a>
    ed02:	ldr	r3, [sp, #144]	; 0x90
    ed04:	ldr	r2, [pc, #736]	; (efe8 <_svfprintf_r+0x1498>)
    ed06:	str.w	r2, [r9]
    ed0a:	adds	r3, #1
    ed0c:	adds	r4, #1
    ed0e:	movs	r2, #1
    ed10:	cmp	r3, #7
    ed12:	str	r4, [sp, #148]	; 0x94
    ed14:	str	r3, [sp, #144]	; 0x90
    ed16:	str.w	r2, [r9, #4]
    ed1a:	bgt.w	ee34 <_svfprintf_r+0x12e4>
    ed1e:	add.w	r9, r9, #8
    ed22:	cbnz	r5, ed30 <_svfprintf_r+0x11e0>
    ed24:	ldr	r3, [sp, #56]	; 0x38
    ed26:	cbnz	r3, ed30 <_svfprintf_r+0x11e0>
    ed28:	ldr	r3, [sp, #12]
    ed2a:	lsls	r7, r3, #31
    ed2c:	bpl.w	e07c <_svfprintf_r+0x52c>
    ed30:	ldr	r3, [sp, #144]	; 0x90
    ed32:	ldr	r1, [sp, #72]	; 0x48
    ed34:	ldr	r2, [sp, #76]	; 0x4c
    ed36:	str.w	r2, [r9]
    ed3a:	adds	r3, #1
    ed3c:	add	r4, r1
    ed3e:	cmp	r3, #7
    ed40:	str	r4, [sp, #148]	; 0x94
    ed42:	str.w	r1, [r9, #4]
    ed46:	str	r3, [sp, #144]	; 0x90
    ed48:	bgt.w	f0e6 <_svfprintf_r+0x1596>
    ed4c:	add.w	r9, r9, #8
    ed50:	negs	r5, r5
    ed52:	cmp	r5, #0
    ed54:	ble.w	eeac <_svfprintf_r+0x135c>
    ed58:	ldr	r2, [pc, #656]	; (efec <_svfprintf_r+0x149c>)
    ed5a:	str	r2, [sp, #44]	; 0x2c
    ed5c:	cmp	r5, #16
    ed5e:	ble.w	eef4 <_svfprintf_r+0x13a4>
    ed62:	mov	r2, r4
    ed64:	movs	r7, #16
    ed66:	ldr.w	fp, [sp, #24]
    ed6a:	ldr	r4, [sp, #20]
    ed6c:	b.n	ed7a <_svfprintf_r+0x122a>
    ed6e:	add.w	r9, r9, #8
    ed72:	subs	r5, #16
    ed74:	cmp	r5, #16
    ed76:	ble.w	eef2 <_svfprintf_r+0x13a2>
    ed7a:	adds	r3, #1
    ed7c:	adds	r2, #16
    ed7e:	cmp	r3, #7
    ed80:	str	r2, [sp, #148]	; 0x94
    ed82:	str	r3, [sp, #144]	; 0x90
    ed84:	str.w	sl, [r9]
    ed88:	str.w	r7, [r9, #4]
    ed8c:	ble.n	ed6e <_svfprintf_r+0x121e>
    ed8e:	add	r2, sp, #140	; 0x8c
    ed90:	mov	r1, r4
    ed92:	mov	r0, fp
    ed94:	bl	12ae8 <__ssprint_r>
    ed98:	cmp	r0, #0
    ed9a:	bne.w	dd44 <_svfprintf_r+0x1f4>
    ed9e:	ldr	r2, [sp, #148]	; 0x94
    eda0:	ldr	r3, [sp, #144]	; 0x90
    eda2:	add.w	r9, sp, #192	; 0xc0
    eda6:	b.n	ed72 <_svfprintf_r+0x1222>
    eda8:	ldr	r2, [sp, #12]
    edaa:	b.w	e220 <_svfprintf_r+0x6d0>
    edae:	ldr	r2, [sp, #12]
    edb0:	b.n	e8ca <_svfprintf_r+0xd7a>
    edb2:	ldr	r3, [sp, #12]
    edb4:	orr.w	r3, r3, #32
    edb8:	str	r3, [sp, #12]
    edba:	add.w	r8, r8, #1
    edbe:	ldrb.w	r3, [r8]
    edc2:	b.w	dc04 <_svfprintf_r+0xb4>
    edc6:	add	r2, sp, #140	; 0x8c
    edc8:	ldr	r1, [sp, #20]
    edca:	ldr	r0, [sp, #24]
    edcc:	bl	12ae8 <__ssprint_r>
    edd0:	cmp	r0, #0
    edd2:	bne.w	dd44 <_svfprintf_r+0x1f4>
    edd6:	ldr	r4, [sp, #148]	; 0x94
    edd8:	add.w	r9, sp, #192	; 0xc0
    eddc:	b.w	e53c <_svfprintf_r+0x9ec>
    ede0:	movs	r1, #64	; 0x40
    ede2:	ldr	r0, [sp, #24]
    ede4:	bl	bae8 <_malloc_r>
    ede8:	ldr	r2, [sp, #20]
    edea:	str	r0, [r2, #0]
    edec:	str	r0, [r2, #16]
    edee:	cmp	r0, #0
    edf0:	beq.w	f1da <_svfprintf_r+0x168a>
    edf4:	ldr	r2, [sp, #20]
    edf6:	movs	r3, #64	; 0x40
    edf8:	str	r3, [r2, #20]
    edfa:	b.w	db7e <_svfprintf_r+0x2e>
    edfe:	add	r2, sp, #132	; 0x84
    ee00:	add	r3, sp, #120	; 0x78
    ee02:	str	r2, [sp, #4]
    ee04:	str	r3, [sp, #0]
    ee06:	mov	r2, fp
    ee08:	add	r3, sp, #116	; 0x74
    ee0a:	movs	r1, #3
    ee0c:	vldr	d0, [sp, #96]	; 0x60
    ee10:	ldr	r0, [sp, #24]
    ee12:	bl	10358 <_dtoa_r>
    ee16:	mov	r5, fp
    ee18:	mov	r6, r0
    ee1a:	ldr	r3, [sp, #52]	; 0x34
    ee1c:	cmp	r3, #70	; 0x46
    ee1e:	add.w	r4, r6, r5
    ee22:	bne.w	ebaa <_svfprintf_r+0x105a>
    ee26:	ldrb	r3, [r6, #0]
    ee28:	cmp	r3, #48	; 0x30
    ee2a:	beq.w	f13c <_svfprintf_r+0x15ec>
    ee2e:	ldr	r5, [sp, #116]	; 0x74
    ee30:	add	r4, r5
    ee32:	b.n	ebaa <_svfprintf_r+0x105a>
    ee34:	add	r2, sp, #140	; 0x8c
    ee36:	ldr	r1, [sp, #20]
    ee38:	ldr	r0, [sp, #24]
    ee3a:	bl	12ae8 <__ssprint_r>
    ee3e:	cmp	r0, #0
    ee40:	bne.w	dd44 <_svfprintf_r+0x1f4>
    ee44:	ldr	r5, [sp, #116]	; 0x74
    ee46:	ldr	r4, [sp, #148]	; 0x94
    ee48:	add.w	r9, sp, #192	; 0xc0
    ee4c:	b.n	ed22 <_svfprintf_r+0x11d2>
    ee4e:	cmp.w	fp, #0
    ee52:	it	eq
    ee54:	moveq.w	fp, #1
    ee58:	b.n	eb4a <_svfprintf_r+0xffa>
    ee5a:	str	r3, [sp, #40]	; 0x28
    ee5c:	mov	r7, r2
    ee5e:	b.n	e91a <_svfprintf_r+0xdca>
    ee60:	str	r3, [sp, #40]	; 0x28
    ee62:	b.n	ec52 <_svfprintf_r+0x1102>
    ee64:	adds	r3, #4
    ee66:	ldr	r4, [r2, #0]
    ee68:	str	r3, [sp, #40]	; 0x28
    ee6a:	movs	r5, #0
    ee6c:	b.w	e2b6 <_svfprintf_r+0x766>
    ee70:	movs	r7, #45	; 0x2d
    ee72:	str	r3, [sp, #16]
    ee74:	ldr	r3, [sp, #44]	; 0x2c
    ee76:	str	r3, [sp, #12]
    ee78:	strb.w	r7, [sp, #111]	; 0x6f
    ee7c:	mov.w	fp, #0
    ee80:	b.w	def6 <_svfprintf_r+0x3a6>
    ee84:	mov	r0, r6
    ee86:	bl	c940 <strlen>
    ee8a:	mov	fp, r4
    ee8c:	mov	r3, r0
    ee8e:	str	r0, [sp, #36]	; 0x24
    ee90:	b.w	e3d8 <_svfprintf_r+0x888>
    ee94:	add	r2, sp, #140	; 0x8c
    ee96:	ldr	r1, [sp, #20]
    ee98:	ldr	r0, [sp, #24]
    ee9a:	bl	12ae8 <__ssprint_r>
    ee9e:	cmp	r0, #0
    eea0:	bne.w	dd44 <_svfprintf_r+0x1f4>
    eea4:	ldr	r4, [sp, #148]	; 0x94
    eea6:	ldr	r3, [sp, #144]	; 0x90
    eea8:	add.w	r9, sp, #192	; 0xc0
    eeac:	ldr	r1, [sp, #56]	; 0x38
    eeae:	str.w	r6, [r9]
    eeb2:	adds	r3, #1
    eeb4:	add	r4, r1
    eeb6:	cmp	r3, #7
    eeb8:	str	r4, [sp, #148]	; 0x94
    eeba:	str	r3, [sp, #144]	; 0x90
    eebc:	str.w	r1, [r9, #4]
    eec0:	ble.w	e078 <_svfprintf_r+0x528>
    eec4:	b.w	e6be <_svfprintf_r+0xb6e>
    eec8:	ldr	r3, [sp, #116]	; 0x74
    eeca:	adds	r5, r3, #3
    eecc:	blt.n	ef0c <_svfprintf_r+0x13bc>
    eece:	cmp	fp, r3
    eed0:	blt.n	ef0c <_svfprintf_r+0x13bc>
    eed2:	str	r3, [sp, #60]	; 0x3c
    eed4:	b.n	ebee <_svfprintf_r+0x109e>
    eed6:	mov	r3, r4
    eed8:	b.n	ebd0 <_svfprintf_r+0x1080>
    eeda:	add	r2, sp, #140	; 0x8c
    eedc:	ldr	r1, [sp, #20]
    eede:	ldr	r0, [sp, #24]
    eee0:	bl	12ae8 <__ssprint_r>
    eee4:	cmp	r0, #0
    eee6:	bne.w	dd44 <_svfprintf_r+0x1f4>
    eeea:	ldr	r4, [sp, #148]	; 0x94
    eeec:	add.w	r9, sp, #192	; 0xc0
    eef0:	b.n	e78c <_svfprintf_r+0xc3c>
    eef2:	mov	r4, r2
    eef4:	adds	r3, #1
    eef6:	ldr	r2, [sp, #44]	; 0x2c
    eef8:	str	r3, [sp, #144]	; 0x90
    eefa:	add	r4, r5
    eefc:	cmp	r3, #7
    eefe:	str	r4, [sp, #148]	; 0x94
    ef00:	stmia.w	r9, {r2, r5}
    ef04:	bgt.n	ee94 <_svfprintf_r+0x1344>
    ef06:	add.w	r9, r9, #8
    ef0a:	b.n	eeac <_svfprintf_r+0x135c>
    ef0c:	ldr	r2, [sp, #52]	; 0x34
    ef0e:	subs	r2, #2
    ef10:	str	r2, [sp, #52]	; 0x34
    ef12:	subs	r3, #1
    ef14:	cmp	r3, #0
    ef16:	ldrb.w	r2, [sp, #52]	; 0x34
    ef1a:	str	r3, [sp, #116]	; 0x74
    ef1c:	it	lt
    ef1e:	neglt	r3, r3
    ef20:	strb.w	r2, [sp, #124]	; 0x7c
    ef24:	ite	lt
    ef26:	movlt	r2, #45	; 0x2d
    ef28:	movge	r2, #43	; 0x2b
    ef2a:	cmp	r3, #9
    ef2c:	strb.w	r2, [sp, #125]	; 0x7d
    ef30:	ble.w	f10a <_svfprintf_r+0x15ba>
    ef34:	add.w	r0, sp, #139	; 0x8b
    ef38:	mov	r4, r0
    ef3a:	ldr	r2, [pc, #180]	; (eff0 <_svfprintf_r+0x14a0>)
    ef3c:	smull	r2, r1, r2, r3
    ef40:	asrs	r2, r3, #31
    ef42:	rsb	r2, r2, r1, asr #2
    ef46:	add.w	r1, r2, r2, lsl #2
    ef4a:	sub.w	r3, r3, r1, lsl #1
    ef4e:	add.w	r1, r3, #48	; 0x30
    ef52:	cmp	r2, #9
    ef54:	mov	r3, r2
    ef56:	strb.w	r1, [r4, #-1]!
    ef5a:	bgt.n	ef3a <_svfprintf_r+0x13ea>
    ef5c:	mov	r1, r4
    ef5e:	adds	r3, #48	; 0x30
    ef60:	uxtb	r2, r3
    ef62:	strb.w	r2, [r1, #-1]!
    ef66:	cmp	r0, r1
    ef68:	bls.w	f1d4 <_svfprintf_r+0x1684>
    ef6c:	add.w	r1, sp, #126	; 0x7e
    ef70:	mov	r3, r4
    ef72:	b.n	ef78 <_svfprintf_r+0x1428>
    ef74:	ldrb.w	r2, [r3], #1
    ef78:	strb.w	r2, [r1], #1
    ef7c:	cmp	r0, r3
    ef7e:	bne.n	ef74 <_svfprintf_r+0x1424>
    ef80:	adds	r3, r0, #1
    ef82:	subs	r3, r3, r4
    ef84:	add.w	r2, sp, #126	; 0x7e
    ef88:	add	r3, r2
    ef8a:	add	r2, sp, #124	; 0x7c
    ef8c:	subs	r3, r3, r2
    ef8e:	ldr	r2, [sp, #56]	; 0x38
    ef90:	str	r3, [sp, #84]	; 0x54
    ef92:	cmp	r2, #1
    ef94:	add	r3, r2
    ef96:	str	r3, [sp, #36]	; 0x24
    ef98:	ble.w	f16a <_svfprintf_r+0x161a>
    ef9c:	ldr	r3, [sp, #36]	; 0x24
    ef9e:	ldr	r2, [sp, #72]	; 0x48
    efa0:	add	r3, r2
    efa2:	movs	r2, #0
    efa4:	str	r3, [sp, #36]	; 0x24
    efa6:	str	r2, [sp, #60]	; 0x3c
    efa8:	bic.w	r3, r3, r3, asr #31
    efac:	b.n	ec0a <_svfprintf_r+0x10ba>
    efae:	add	r2, sp, #140	; 0x8c
    efb0:	ldr	r1, [sp, #20]
    efb2:	ldr	r0, [sp, #24]
    efb4:	bl	12ae8 <__ssprint_r>
    efb8:	cmp	r0, #0
    efba:	bne.w	dd44 <_svfprintf_r+0x1f4>
    efbe:	ldr	r3, [sp, #116]	; 0x74
    efc0:	ldr	r4, [sp, #148]	; 0x94
    efc2:	add.w	r9, sp, #192	; 0xc0
    efc6:	b.n	e9a0 <_svfprintf_r+0xe50>
    efc8:	add	r2, sp, #140	; 0x8c
    efca:	ldr	r1, [sp, #20]
    efcc:	ldr	r0, [sp, #24]
    efce:	bl	12ae8 <__ssprint_r>
    efd2:	cmp	r0, #0
    efd4:	bne.w	dd44 <_svfprintf_r+0x1f4>
    efd8:	ldr	r3, [sp, #116]	; 0x74
    efda:	ldr	r2, [sp, #56]	; 0x38
    efdc:	ldr	r4, [sp, #148]	; 0x94
    efde:	subs	r3, r2, r3
    efe0:	add.w	r9, sp, #192	; 0xc0
    efe4:	b.n	e9d0 <_svfprintf_r+0xe80>
    efe6:	nop
    efe8:	.word	0x00013990
    efec:	.word	0x00013940
    eff0:	.word	0x66666667
    eff4:	cmp	r5, #6
    eff6:	mov	r3, r5
    eff8:	it	cs
    effa:	movcs	r3, #6
    effc:	str	r3, [sp, #36]	; 0x24
    effe:	bic.w	r3, r3, r3, asr #31
    f002:	mov	fp, r6
    f004:	str	r7, [sp, #40]	; 0x28
    f006:	str	r6, [sp, #60]	; 0x3c
    f008:	mov	r7, r6
    f00a:	str	r3, [sp, #16]
    f00c:	ldr	r6, [pc, #536]	; (f228 <_svfprintf_r+0x16d8>)
    f00e:	b.w	def4 <_svfprintf_r+0x3a4>
    f012:	mov.w	fp, #6
    f016:	b.n	eb4a <_svfprintf_r+0xffa>
    f018:	add	r2, sp, #132	; 0x84
    f01a:	add	r3, sp, #120	; 0x78
    f01c:	str	r2, [sp, #4]
    f01e:	str	r3, [sp, #0]
    f020:	mov	r2, fp
    f022:	add	r3, sp, #116	; 0x74
    f024:	movs	r1, #3
    f026:	vldr	d0, [sp, #96]	; 0x60
    f02a:	ldr	r0, [sp, #24]
    f02c:	bl	10358 <_dtoa_r>
    f030:	mov	r5, fp
    f032:	mov	r6, r0
    f034:	add.w	r4, r0, fp
    f038:	b.n	ee26 <_svfprintf_r+0x12d6>
    f03a:	movs	r7, #45	; 0x2d
    f03c:	strb.w	r7, [sp, #111]	; 0x6f
    f040:	b.w	e19a <_svfprintf_r+0x64a>
    f044:	str	r3, [sp, #12]
    f046:	b.w	e2f2 <_svfprintf_r+0x7a2>
    f04a:	ldrd	r1, r2, [sp, #64]	; 0x40
    f04e:	add.w	r3, r2, #2147483648	; 0x80000000
    f052:	str	r3, [sp, #100]	; 0x64
    f054:	movs	r3, #45	; 0x2d
    f056:	str	r1, [sp, #96]	; 0x60
    f058:	str	r3, [sp, #16]
    f05a:	b.n	eb66 <_svfprintf_r+0x1016>
    f05c:	ldr	r2, [sp, #72]	; 0x48
    f05e:	ldr	r3, [sp, #56]	; 0x38
    f060:	add	r3, r2
    f062:	ldr	r2, [sp, #60]	; 0x3c
    f064:	str	r3, [sp, #36]	; 0x24
    f066:	cmp	r2, #0
    f068:	ble.w	f17e <_svfprintf_r+0x162e>
    f06c:	movs	r2, #103	; 0x67
    f06e:	bic.w	r3, r3, r3, asr #31
    f072:	str	r2, [sp, #52]	; 0x34
    f074:	b.n	ec0a <_svfprintf_r+0x10ba>
    f076:	ldr	r3, [sp, #52]	; 0x34
    f078:	cmp	r3, #71	; 0x47
    f07a:	bne.w	eba8 <_svfprintf_r+0x1058>
    f07e:	ldr	r3, [sp, #12]
    f080:	lsls	r3, r3, #31
    f082:	bmi.w	ee1a <_svfprintf_r+0x12ca>
    f086:	ldr	r3, [sp, #132]	; 0x84
    f088:	cmp	r7, #71	; 0x47
    f08a:	sub.w	r3, r3, r6
    f08e:	str	r3, [sp, #56]	; 0x38
    f090:	beq.w	eec8 <_svfprintf_r+0x1378>
    f094:	ldr	r3, [sp, #116]	; 0x74
    f096:	b.n	ef12 <_svfprintf_r+0x13c2>
    f098:	bic.w	r3, r5, r5, asr #31
    f09c:	str	r7, [sp, #40]	; 0x28
    f09e:	str	r3, [sp, #16]
    f0a0:	str	r5, [sp, #36]	; 0x24
    f0a2:	mov	fp, r0
    f0a4:	str	r0, [sp, #60]	; 0x3c
    f0a6:	ldrb.w	r7, [sp, #111]	; 0x6f
    f0aa:	b.w	def4 <_svfprintf_r+0x3a4>
    f0ae:	cmp	r3, #0
    f0b0:	ble.n	f18e <_svfprintf_r+0x163e>
    f0b2:	cmp.w	fp, #0
    f0b6:	bne.n	f158 <_svfprintf_r+0x1608>
    f0b8:	ldr	r2, [sp, #12]
    f0ba:	lsls	r4, r2, #31
    f0bc:	bmi.n	f158 <_svfprintf_r+0x1608>
    f0be:	mov	r2, r3
    f0c0:	str	r2, [sp, #36]	; 0x24
    f0c2:	bic.w	r3, r3, r3, asr #31
    f0c6:	b.n	ec0a <_svfprintf_r+0x10ba>
    f0c8:	ldr	r3, [sp, #12]
    f0ca:	lsls	r3, r3, #31
    f0cc:	mov	r7, fp
    f0ce:	bpl.n	f0dc <_svfprintf_r+0x158c>
    f0d0:	add	r6, sp, #256	; 0x100
    f0d2:	movs	r3, #48	; 0x30
    f0d4:	strb.w	r3, [r6, #-65]!
    f0d8:	b.w	dee0 <_svfprintf_r+0x390>
    f0dc:	str.w	fp, [sp, #36]	; 0x24
    f0e0:	add	r6, sp, #192	; 0xc0
    f0e2:	b.w	dee6 <_svfprintf_r+0x396>
    f0e6:	add	r2, sp, #140	; 0x8c
    f0e8:	ldr	r1, [sp, #20]
    f0ea:	ldr	r0, [sp, #24]
    f0ec:	bl	12ae8 <__ssprint_r>
    f0f0:	cmp	r0, #0
    f0f2:	bne.w	dd44 <_svfprintf_r+0x1f4>
    f0f6:	ldr	r5, [sp, #116]	; 0x74
    f0f8:	ldr	r4, [sp, #148]	; 0x94
    f0fa:	ldr	r3, [sp, #144]	; 0x90
    f0fc:	add.w	r9, sp, #192	; 0xc0
    f100:	b.n	ed50 <_svfprintf_r+0x1200>
    f102:	mov	r8, r4
    f104:	movs	r5, #0
    f106:	b.w	dc08 <_svfprintf_r+0xb8>
    f10a:	adds	r3, #48	; 0x30
    f10c:	movs	r2, #48	; 0x30
    f10e:	strb.w	r3, [sp, #127]	; 0x7f
    f112:	strb.w	r2, [sp, #126]	; 0x7e
    f116:	add	r3, sp, #128	; 0x80
    f118:	b.n	ef8a <_svfprintf_r+0x143a>
    f11a:	ldr	r3, [sp, #132]	; 0x84
    f11c:	b.n	ebd0 <_svfprintf_r+0x1080>
    f11e:	ldr	r2, [sp, #72]	; 0x48
    f120:	ldr	r3, [sp, #60]	; 0x3c
    f122:	add	r3, r2
    f124:	movs	r2, #103	; 0x67
    f126:	str	r3, [sp, #36]	; 0x24
    f128:	str	r2, [sp, #52]	; 0x34
    f12a:	bic.w	r3, r3, r3, asr #31
    f12e:	b.n	ec0a <_svfprintf_r+0x10ba>
    f130:	ldr	r6, [pc, #248]	; (f22c <_svfprintf_r+0x16dc>)
    f132:	ldr	r3, [pc, #252]	; (f230 <_svfprintf_r+0x16e0>)
    f134:	ldrb.w	r7, [sp, #111]	; 0x6f
    f138:	b.w	e19e <_svfprintf_r+0x64e>
    f13c:	movs	r2, #0
    f13e:	movs	r3, #0
    f140:	ldrd	r0, r1, [sp, #96]	; 0x60
    f144:	bl	b20c <__aeabi_dcmpeq>
    f148:	cmp	r0, #0
    f14a:	bne.w	ee2e <_svfprintf_r+0x12de>
    f14e:	rsb	r5, r5, #1
    f152:	str	r5, [sp, #116]	; 0x74
    f154:	add	r4, r5
    f156:	b.n	ebaa <_svfprintf_r+0x105a>
    f158:	ldr	r3, [sp, #60]	; 0x3c
    f15a:	ldr	r2, [sp, #72]	; 0x48
    f15c:	adds	r5, r3, r2
    f15e:	add.w	r3, r5, fp
    f162:	str	r3, [sp, #36]	; 0x24
    f164:	bic.w	r3, r3, r3, asr #31
    f168:	b.n	ec0a <_svfprintf_r+0x10ba>
    f16a:	ldr	r3, [sp, #12]
    f16c:	ands.w	r3, r3, #1
    f170:	bne.w	ef9c <_svfprintf_r+0x144c>
    f174:	str	r3, [sp, #60]	; 0x3c
    f176:	ldr	r3, [sp, #36]	; 0x24
    f178:	bic.w	r3, r3, r3, asr #31
    f17c:	b.n	ec0a <_svfprintf_r+0x10ba>
    f17e:	ldr	r3, [sp, #60]	; 0x3c
    f180:	ldr	r2, [sp, #36]	; 0x24
    f182:	rsb	r3, r3, #1
    f186:	add	r2, r3
    f188:	mov	r3, r2
    f18a:	str	r2, [sp, #36]	; 0x24
    f18c:	b.n	f06c <_svfprintf_r+0x151c>
    f18e:	cmp.w	fp, #0
    f192:	bne.n	f19a <_svfprintf_r+0x164a>
    f194:	ldr	r3, [sp, #12]
    f196:	lsls	r0, r3, #31
    f198:	bpl.n	f1aa <_svfprintf_r+0x165a>
    f19a:	ldr	r3, [sp, #72]	; 0x48
    f19c:	adds	r5, r3, #1
    f19e:	add.w	r3, r5, fp
    f1a2:	str	r3, [sp, #36]	; 0x24
    f1a4:	bic.w	r3, r3, r3, asr #31
    f1a8:	b.n	ec0a <_svfprintf_r+0x10ba>
    f1aa:	movs	r3, #1
    f1ac:	str	r3, [sp, #36]	; 0x24
    f1ae:	b.n	ec0a <_svfprintf_r+0x10ba>
    f1b0:	ldr	r0, [sp, #40]	; 0x28
    f1b2:	ldrb.w	r3, [r8, #1]
    f1b6:	ldr	r5, [r0, #0]
    f1b8:	adds	r0, #4
    f1ba:	cmp	r5, #0
    f1bc:	str	r0, [sp, #40]	; 0x28
    f1be:	mov	r8, r4
    f1c0:	bge.w	dc04 <_svfprintf_r+0xb4>
    f1c4:	mov.w	r5, #4294967295
    f1c8:	b.w	dc04 <_svfprintf_r+0xb4>
    f1cc:	strb.w	r1, [sp, #111]	; 0x6f
    f1d0:	b.w	dd66 <_svfprintf_r+0x216>
    f1d4:	add.w	r3, sp, #126	; 0x7e
    f1d8:	b.n	ef8a <_svfprintf_r+0x143a>
    f1da:	ldr	r2, [sp, #24]
    f1dc:	movs	r3, #12
    f1de:	str	r3, [r2, #0]
    f1e0:	mov.w	r0, #4294967295
    f1e4:	b.w	dd56 <_svfprintf_r+0x206>
    f1e8:	strb.w	r1, [sp, #111]	; 0x6f
    f1ec:	b.w	de60 <_svfprintf_r+0x310>
    f1f0:	strb.w	r1, [sp, #111]	; 0x6f
    f1f4:	b.w	e12c <_svfprintf_r+0x5dc>
    f1f8:	strb.w	r1, [sp, #111]	; 0x6f
    f1fc:	b.w	e29a <_svfprintf_r+0x74a>
    f200:	strb.w	r1, [sp, #111]	; 0x6f
    f204:	b.w	e23e <_svfprintf_r+0x6ee>
    f208:	strb.w	r1, [sp, #111]	; 0x6f
    f20c:	b.w	e1ea <_svfprintf_r+0x69a>
    f210:	strb.w	r1, [sp, #111]	; 0x6f
    f214:	b.w	e482 <_svfprintf_r+0x932>
    f218:	strb.w	r1, [sp, #111]	; 0x6f
    f21c:	b.w	e440 <_svfprintf_r+0x8f0>
    f220:	strb.w	r1, [sp, #111]	; 0x6f
    f224:	b.w	e404 <_svfprintf_r+0x8b4>
    f228:	.word	0x00013988
    f22c:	.word	0x0001395c
    f230:	.word	0x00013958

0000f234 <__ssvfscanf_r>:
    f234:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f238:	mov	fp, r1
    f23a:	ldrsh.w	r1, [r1, #12]
    f23e:	sub.w	sp, sp, #692	; 0x2b4
    f242:	mov	sl, r0
    f244:	lsls	r0, r1, #18
    f246:	mov	r4, r2
    f248:	str	r3, [sp, #20]
    f24a:	bmi.n	f260 <__ssvfscanf_r+0x2c>
    f24c:	ldr.w	r3, [fp, #100]	; 0x64
    f250:	orr.w	r1, r1, #8192	; 0x2000
    f254:	bic.w	r3, r3, #8192	; 0x2000
    f258:	strh.w	r1, [fp, #12]
    f25c:	str.w	r3, [fp, #100]	; 0x64
    f260:	mov	r6, r4
    f262:	movs	r3, #0
    f264:	str	r3, [sp, #28]
    f266:	str	r3, [sp, #16]
    f268:	mov	r7, r3
    f26a:	str	r3, [sp, #24]
    f26c:	ldrb.w	r3, [r6], #1
    f270:	str	r3, [sp, #68]	; 0x44
    f272:	cbz	r3, f2d0 <__ssvfscanf_r+0x9c>
    f274:	bl	bab4 <__locale_ctype_ptr>
    f278:	ldr	r2, [sp, #68]	; 0x44
    f27a:	add	r0, r2
    f27c:	ldrb	r3, [r0, #1]
    f27e:	and.w	r3, r3, #8
    f282:	and.w	r5, r3, #255	; 0xff
    f286:	cbz	r3, f2da <__ssvfscanf_r+0xa6>
    f288:	ldr.w	r3, [fp, #4]
    f28c:	b.n	f2b2 <__ssvfscanf_r+0x7e>
    f28e:	bl	bab4 <__locale_ctype_ptr>
    f292:	ldr.w	r3, [fp]
    f296:	ldrb	r2, [r3, #0]
    f298:	add	r0, r2
    f29a:	adds	r3, #1
    f29c:	ldrb	r2, [r0, #1]
    f29e:	lsls	r1, r2, #28
    f2a0:	bpl.n	f2c2 <__ssvfscanf_r+0x8e>
    f2a2:	ldr.w	r2, [fp, #4]
    f2a6:	str.w	r3, [fp]
    f2aa:	subs	r3, r2, #1
    f2ac:	adds	r7, #1
    f2ae:	str.w	r3, [fp, #4]
    f2b2:	cmp	r3, #0
    f2b4:	bgt.n	f28e <__ssvfscanf_r+0x5a>
    f2b6:	mov	r1, fp
    f2b8:	mov	r0, sl
    f2ba:	bl	12c6c <__ssrefill_r>
    f2be:	cmp	r0, #0
    f2c0:	beq.n	f28e <__ssvfscanf_r+0x5a>
    f2c2:	mov	r4, r6
    f2c4:	mov	r6, r4
    f2c6:	ldrb.w	r3, [r6], #1
    f2ca:	str	r3, [sp, #68]	; 0x44
    f2cc:	cmp	r3, #0
    f2ce:	bne.n	f274 <__ssvfscanf_r+0x40>
    f2d0:	ldr	r0, [sp, #24]
    f2d2:	add.w	sp, sp, #692	; 0x2b4
    f2d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2da:	cmp	r2, #37	; 0x25
    f2dc:	bne.w	f3e8 <__ssvfscanf_r+0x1b4>
    f2e0:	ldrb.w	r8, [r4, #1]
    f2e4:	mov	r4, r5
    f2e6:	adds	r3, r6, #1
    f2e8:	cmp.w	r8, #120	; 0x78
    f2ec:	bhi.w	f776 <__ssvfscanf_r+0x542>
    f2f0:	tbh	[pc, r8, lsl #1]
    f2f4:	.word	0x02410092
    f2f8:	.word	0x02410241
    f2fc:	.word	0x02410241
    f300:	.word	0x02410241
    f304:	.word	0x02410241
    f308:	.word	0x02410241
    f30c:	.word	0x02410241
    f310:	.word	0x02410241
    f314:	.word	0x02410241
    f318:	.word	0x02410241
    f31c:	.word	0x02410241
    f320:	.word	0x02410241
    f324:	.word	0x02410241
    f328:	.word	0x02410241
    f32c:	.word	0x02410241
    f330:	.word	0x02410241
    f334:	.word	0x02410241
    f338:	.word	0x02410241
    f33c:	.word	0x00790241
    f340:	.word	0x02410241
    f344:	.word	0x02410241
    f348:	.word	0x024101d8
    f34c:	.word	0x02410241
    f350:	.word	0x02410241
    f354:	.word	0x01cf01cf
    f358:	.word	0x01cf01cf
    f35c:	.word	0x01cf01cf
    f360:	.word	0x01cf01cf
    f364:	.word	0x01cf01cf
    f368:	.word	0x02410241
    f36c:	.word	0x02410241
    f370:	.word	0x02410241
    f374:	.word	0x02410241
    f378:	.word	0x02410241
    f37c:	.word	0x01b901c1
    f380:	.word	0x01b90241
    f384:	.word	0x02410241
    f388:	.word	0x02410241
    f38c:	.word	0x024101b3
    f390:	.word	0x01a30241
    f394:	.word	0x02410241
    f398:	.word	0x02410241
    f39c:	.word	0x02410241
    f3a0:	.word	0x02410241
    f3a4:	.word	0x02410193
    f3a8:	.word	0x01510241
    f3ac:	.word	0x02410241
    f3b0:	.word	0x02410241
    f3b4:	.word	0x02410241
    f3b8:	.word	0x01220241
    f3bc:	.word	0x01b90188
    f3c0:	.word	0x01b901b9
    f3c4:	.word	0x0098011c
    f3c8:	.word	0x02410241
    f3cc:	.word	0x024100d5
    f3d0:	.word	0x0101010d
    f3d4:	.word	0x024100f3
    f3d8:	.word	0x00eb0241
    f3dc:	.word	0x00df0241
    f3e0:	.word	0x02410241
    f3e4:	.short	0x0193
    f3e6:	mov	r6, r3
    f3e8:	ldr.w	r3, [fp, #4]
    f3ec:	cmp	r3, #0
    f3ee:	ble.w	f898 <__ssvfscanf_r+0x664>
    f3f2:	ldr.w	r3, [fp]
    f3f6:	ldrb.w	r2, [r6, #-1]
    f3fa:	ldrb	r1, [r3, #0]
    f3fc:	cmp	r1, r2
    f3fe:	bne.w	f2d0 <__ssvfscanf_r+0x9c>
    f402:	ldr.w	r2, [fp, #4]
    f406:	adds	r3, #1
    f408:	subs	r2, #1
    f40a:	str.w	r3, [fp]
    f40e:	adds	r7, #1
    f410:	str.w	r2, [fp, #4]
    f414:	mov	r4, r6
    f416:	b.n	f2c4 <__ssvfscanf_r+0x90>
    f418:	mov.w	r0, #4294967295
    f41c:	add.w	sp, sp, #692	; 0x2b4
    f420:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f424:	str	r3, [sp, #12]
    f426:	ldr.w	r3, [fp, #4]
    f42a:	cmp	r3, #0
    f42c:	ble.w	f8f6 <__ssvfscanf_r+0x6c2>
    f430:	ldr	r3, [pc, #736]	; (f714 <__ssvfscanf_r+0x4e0>)
    f432:	str	r3, [sp, #28]
    f434:	movs	r3, #0
    f436:	str	r3, [sp, #16]
    f438:	movs	r6, #3
    f43a:	b.n	f440 <__ssvfscanf_r+0x20c>
    f43c:	str.w	lr, [fp]
    f440:	bl	bab4 <__locale_ctype_ptr>
    f444:	ldr.w	r2, [fp]
    f448:	ldrb	r1, [r2, #0]
    f44a:	add	r0, r1
    f44c:	add.w	lr, r2, #1
    f450:	ldrb	r3, [r0, #1]
    f452:	and.w	r3, r3, #8
    f456:	and.w	r8, r3, #255	; 0xff
    f45a:	cmp	r3, #0
    f45c:	beq.w	f95e <__ssvfscanf_r+0x72a>
    f460:	ldr.w	r3, [fp, #4]
    f464:	subs	r3, #1
    f466:	cmp	r3, #0
    f468:	add.w	r7, r7, #1
    f46c:	str.w	r3, [fp, #4]
    f470:	bgt.n	f43c <__ssvfscanf_r+0x208>
    f472:	mov	r1, fp
    f474:	mov	r0, sl
    f476:	bl	12c6c <__ssrefill_r>
    f47a:	cmp	r0, #0
    f47c:	beq.n	f440 <__ssvfscanf_r+0x20c>
    f47e:	ldr	r2, [sp, #24]
    f480:	cmp	r2, #0
    f482:	beq.n	f418 <__ssvfscanf_r+0x1e4>
    f484:	ldrh.w	r3, [fp, #12]
    f488:	tst.w	r3, #64	; 0x40
    f48c:	mov	r3, r2
    f48e:	it	ne
    f490:	movne.w	r3, #4294967295
    f494:	mov	r0, r3
    f496:	add.w	sp, sp, #692	; 0x2b4
    f49a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f49e:	ldrb.w	r8, [r6, #1]
    f4a2:	cmp.w	r8, #108	; 0x6c
    f4a6:	beq.w	f8ae <__ssvfscanf_r+0x67a>
    f4aa:	orr.w	r5, r5, #1
    f4ae:	mov	r6, r3
    f4b0:	b.n	f2e6 <__ssvfscanf_r+0xb2>
    f4b2:	str	r3, [sp, #12]
    f4b4:	ldr.w	r3, [fp, #4]
    f4b8:	cmp	r3, #0
    f4ba:	ble.w	f94e <__ssvfscanf_r+0x71a>
    f4be:	ldr	r3, [pc, #600]	; (f718 <__ssvfscanf_r+0x4e4>)
    f4c0:	str	r3, [sp, #28]
    f4c2:	movs	r3, #10
    f4c4:	str	r3, [sp, #16]
    f4c6:	movs	r6, #3
    f4c8:	b.n	f440 <__ssvfscanf_r+0x20c>
    f4ca:	str	r3, [sp, #12]
    f4cc:	ldr.w	r3, [fp, #4]
    f4d0:	cmp	r3, #0
    f4d2:	ble.w	f93e <__ssvfscanf_r+0x70a>
    f4d6:	movs	r6, #2
    f4d8:	b.n	f440 <__ssvfscanf_r+0x20c>
    f4da:	str	r3, [sp, #12]
    f4dc:	ldr.w	r3, [fp, #4]
    f4e0:	cmp	r3, #0
    f4e2:	orr.w	r5, r5, #544	; 0x220
    f4e6:	ble.w	f62a <__ssvfscanf_r+0x3f6>
    f4ea:	ldr	r3, [pc, #556]	; (f718 <__ssvfscanf_r+0x4e4>)
    f4ec:	str	r3, [sp, #28]
    f4ee:	movs	r3, #16
    f4f0:	str	r3, [sp, #16]
    f4f2:	movs	r6, #3
    f4f4:	b.n	f440 <__ssvfscanf_r+0x20c>
    f4f6:	str	r3, [sp, #12]
    f4f8:	ldr.w	r3, [fp, #4]
    f4fc:	cmp	r3, #0
    f4fe:	ble.w	f64a <__ssvfscanf_r+0x416>
    f502:	ldr	r3, [pc, #532]	; (f718 <__ssvfscanf_r+0x4e4>)
    f504:	str	r3, [sp, #28]
    f506:	movs	r3, #8
    f508:	str	r3, [sp, #16]
    f50a:	movs	r6, #3
    f50c:	b.n	f440 <__ssvfscanf_r+0x20c>
    f50e:	lsls	r2, r5, #27
    f510:	mov	r6, r3
    f512:	str	r3, [sp, #12]
    f514:	bmi.w	f6fc <__ssvfscanf_r+0x4c8>
    f518:	lsls	r3, r5, #29
    f51a:	bpl.w	f8c6 <__ssvfscanf_r+0x692>
    f51e:	ldr	r1, [sp, #20]
    f520:	ldr	r3, [r1, #0]
    f522:	strh	r7, [r3, #0]
    f524:	adds	r3, r1, #4
    f526:	str	r3, [sp, #20]
    f528:	mov	r4, r6
    f52a:	b.n	f2c4 <__ssvfscanf_r+0x90>
    f52c:	ldrb.w	r8, [r6, #1]
    f530:	orr.w	r5, r5, #4
    f534:	mov	r6, r3
    f536:	b.n	f2e6 <__ssvfscanf_r+0xb2>
    f538:	str	r3, [sp, #12]
    f53a:	ldr.w	r3, [fp, #4]
    f53e:	cmp	r3, #0
    f540:	ble.w	f91e <__ssvfscanf_r+0x6ea>
    f544:	cmp	r4, #0
    f546:	it	eq
    f548:	moveq	r4, #1
    f54a:	ands.w	r3, r5, #1
    f54e:	bne.w	f796 <__ssvfscanf_r+0x562>
    f552:	lsls	r2, r5, #27
    f554:	bpl.w	f86e <__ssvfscanf_r+0x63a>
    f558:	mov	r5, r3
    f55a:	b.n	f570 <__ssvfscanf_r+0x33c>
    f55c:	add	r3, r2
    f55e:	str.w	r3, [fp]
    f562:	add	r5, r2
    f564:	subs	r4, r4, r2
    f566:	bl	12c6c <__ssrefill_r>
    f56a:	cmp	r0, #0
    f56c:	bne.w	f866 <__ssvfscanf_r+0x632>
    f570:	ldr.w	r2, [fp, #4]
    f574:	ldr.w	r3, [fp]
    f578:	cmp	r2, r4
    f57a:	mov	r1, fp
    f57c:	mov	r0, sl
    f57e:	blt.n	f55c <__ssvfscanf_r+0x328>
    f580:	subs	r2, r2, r4
    f582:	add	r3, r4
    f584:	str.w	r2, [fp, #4]
    f588:	add	r5, r4
    f58a:	str.w	r3, [fp]
    f58e:	ldr	r6, [sp, #12]
    f590:	add	r7, r5
    f592:	mov	r4, r6
    f594:	b.n	f2c4 <__ssvfscanf_r+0x90>
    f596:	add.w	r9, sp, #80	; 0x50
    f59a:	mov	r1, r3
    f59c:	mov	r0, r9
    f59e:	bl	12508 <__sccl>
    f5a2:	ldr.w	r3, [fp, #4]
    f5a6:	cmp	r3, #0
    f5a8:	mov	r6, r0
    f5aa:	ble.w	f90e <__ssvfscanf_r+0x6da>
    f5ae:	cmp	r4, #0
    f5b0:	ldr.w	r2, [fp]
    f5b4:	it	eq
    f5b6:	moveq.w	r4, #4294967295
    f5ba:	lsls	r3, r5, #27
    f5bc:	ldrb	r1, [r2, #0]
    f5be:	bpl.w	f702 <__ssvfscanf_r+0x4ce>
    f5c2:	mov	r8, r4
    f5c4:	movs	r5, #0
    f5c6:	b.n	f5ca <__ssvfscanf_r+0x396>
    f5c8:	ldrb	r1, [r2, #0]
    f5ca:	ldrb.w	r3, [r9, r1]
    f5ce:	adds	r2, #1
    f5d0:	cmp	r3, #0
    f5d2:	beq.w	f85c <__ssvfscanf_r+0x628>
    f5d6:	ldr.w	r3, [fp, #4]
    f5da:	str.w	r2, [fp]
    f5de:	adds	r5, #1
    f5e0:	subs	r3, #1
    f5e2:	cmp	r5, r4
    f5e4:	str.w	r3, [fp, #4]
    f5e8:	beq.w	f856 <__ssvfscanf_r+0x622>
    f5ec:	cmp	r3, #0
    f5ee:	bgt.n	f5c8 <__ssvfscanf_r+0x394>
    f5f0:	mov	r1, fp
    f5f2:	mov	r0, sl
    f5f4:	bl	12c6c <__ssrefill_r>
    f5f8:	cmp	r0, #0
    f5fa:	bne.w	f854 <__ssvfscanf_r+0x620>
    f5fe:	ldr.w	r2, [fp]
    f602:	b.n	f5c8 <__ssvfscanf_r+0x394>
    f604:	str	r3, [sp, #12]
    f606:	ldr.w	r3, [fp, #4]
    f60a:	cmp	r3, #0
    f60c:	ble.n	f684 <__ssvfscanf_r+0x450>
    f60e:	ldr	r3, [pc, #260]	; (f714 <__ssvfscanf_r+0x4e0>)
    f610:	str	r3, [sp, #28]
    f612:	movs	r3, #10
    f614:	str	r3, [sp, #16]
    f616:	movs	r6, #3
    f618:	b.n	f440 <__ssvfscanf_r+0x20c>
    f61a:	str	r3, [sp, #12]
    f61c:	ldr.w	r3, [fp, #4]
    f620:	cmp	r3, #0
    f622:	orr.w	r5, r5, #512	; 0x200
    f626:	bgt.w	f4ea <__ssvfscanf_r+0x2b6>
    f62a:	mov	r1, fp
    f62c:	mov	r0, sl
    f62e:	bl	12c6c <__ssrefill_r>
    f632:	cmp	r0, #0
    f634:	beq.w	f4ea <__ssvfscanf_r+0x2b6>
    f638:	b.n	f47e <__ssvfscanf_r+0x24a>
    f63a:	str	r3, [sp, #12]
    f63c:	ldr.w	r3, [fp, #4]
    f640:	cmp	r3, #0
    f642:	orr.w	r5, r5, #1
    f646:	bgt.w	f502 <__ssvfscanf_r+0x2ce>
    f64a:	mov	r1, fp
    f64c:	mov	r0, sl
    f64e:	bl	12c6c <__ssrefill_r>
    f652:	cmp	r0, #0
    f654:	beq.w	f502 <__ssvfscanf_r+0x2ce>
    f658:	b.n	f47e <__ssvfscanf_r+0x24a>
    f65a:	ldrb.w	r8, [r6, #1]
    f65e:	orr.w	r5, r5, #2
    f662:	mov	r6, r3
    f664:	b.n	f2e6 <__ssvfscanf_r+0xb2>
    f666:	str	r3, [sp, #12]
    f668:	ldr.w	r3, [fp, #4]
    f66c:	cmp	r3, #0
    f66e:	ble.w	f92e <__ssvfscanf_r+0x6fa>
    f672:	movs	r6, #4
    f674:	b.n	f440 <__ssvfscanf_r+0x20c>
    f676:	str	r3, [sp, #12]
    f678:	ldr.w	r3, [fp, #4]
    f67c:	cmp	r3, #0
    f67e:	orr.w	r5, r5, #1
    f682:	bgt.n	f60e <__ssvfscanf_r+0x3da>
    f684:	mov	r1, fp
    f686:	mov	r0, sl
    f688:	bl	12c6c <__ssrefill_r>
    f68c:	cmp	r0, #0
    f68e:	beq.n	f60e <__ssvfscanf_r+0x3da>
    f690:	b.n	f47e <__ssvfscanf_r+0x24a>
    f692:	add.w	r4, r4, r4, lsl #2
    f696:	add.w	r4, r8, r4, lsl #1
    f69a:	subs	r4, #48	; 0x30
    f69c:	ldrb.w	r8, [r6, #1]
    f6a0:	mov	r6, r3
    f6a2:	b.n	f2e6 <__ssvfscanf_r+0xb2>
    f6a4:	ldrb.w	r8, [r6, #1]
    f6a8:	orr.w	r5, r5, #16
    f6ac:	mov	r6, r3
    f6ae:	b.n	f2e6 <__ssvfscanf_r+0xb2>
    f6b0:	add	r3, sp, #72	; 0x48
    f6b2:	mov	r1, r8
    f6b4:	mov	r0, r3
    f6b6:	movs	r2, #8
    f6b8:	str	r3, [sp, #32]
    f6ba:	bl	c25c <memset>
    f6be:	ands.w	r9, r5, #16
    f6c2:	bne.w	ff88 <__ssvfscanf_r+0xd54>
    f6c6:	ldr	r2, [sp, #20]
    f6c8:	mov	r3, r2
    f6ca:	adds	r3, #4
    f6cc:	ldr.w	r8, [r2]
    f6d0:	str	r3, [sp, #20]
    f6d2:	movs	r6, #0
    f6d4:	bl	bab4 <__locale_ctype_ptr>
    f6d8:	ldr.w	r3, [fp]
    f6dc:	ldrb	r3, [r3, #0]
    f6de:	add	r0, r3
    f6e0:	ldrb	r3, [r0, #1]
    f6e2:	lsls	r0, r3, #28
    f6e4:	bmi.n	f6ec <__ssvfscanf_r+0x4b8>
    f6e6:	cmp	r4, #0
    f6e8:	bne.w	feec <__ssvfscanf_r+0xcb8>
    f6ec:	cmp.w	r9, #0
    f6f0:	bne.n	f6fc <__ssvfscanf_r+0x4c8>
    f6f2:	str.w	r9, [r8]
    f6f6:	ldr	r3, [sp, #24]
    f6f8:	adds	r3, #1
    f6fa:	str	r3, [sp, #24]
    f6fc:	ldr	r6, [sp, #12]
    f6fe:	mov	r4, r6
    f700:	b.n	f2c4 <__ssvfscanf_r+0x90>
    f702:	ldr	r0, [sp, #20]
    f704:	ldr	r5, [r0, #0]
    f706:	mov	r3, r0
    f708:	adds	r3, #4
    f70a:	add.w	r8, r5, r4
    f70e:	str	r3, [sp, #12]
    f710:	mov	r4, r5
    f712:	b.n	f722 <__ssvfscanf_r+0x4ee>
    f714:	.word	0x0000db29
    f718:	.word	0x000128b5
    f71c:	ldr.w	r2, [fp]
    f720:	ldrb	r1, [r2, #0]
    f722:	ldrb.w	r3, [r9, r1]
    f726:	adds	r0, r2, #1
    f728:	cbz	r3, f75c <__ssvfscanf_r+0x528>
    f72a:	ldr.w	r3, [fp, #4]
    f72e:	str.w	r0, [fp]
    f732:	subs	r3, #1
    f734:	str.w	r3, [fp, #4]
    f738:	ldrb	r3, [r2, #0]
    f73a:	strb.w	r3, [r4], #1
    f73e:	cmp	r8, r4
    f740:	beq.n	f75c <__ssvfscanf_r+0x528>
    f742:	ldr.w	r3, [fp, #4]
    f746:	cmp	r3, #0
    f748:	bgt.n	f71c <__ssvfscanf_r+0x4e8>
    f74a:	mov	r1, fp
    f74c:	mov	r0, sl
    f74e:	bl	12c6c <__ssrefill_r>
    f752:	cmp	r0, #0
    f754:	beq.n	f71c <__ssvfscanf_r+0x4e8>
    f756:	cmp	r5, r4
    f758:	beq.w	f47e <__ssvfscanf_r+0x24a>
    f75c:	subs	r5, r4, r5
    f75e:	beq.w	f2d0 <__ssvfscanf_r+0x9c>
    f762:	ldr	r2, [sp, #24]
    f764:	adds	r2, #1
    f766:	movs	r3, #0
    f768:	str	r2, [sp, #24]
    f76a:	ldr	r2, [sp, #12]
    f76c:	str	r2, [sp, #20]
    f76e:	strb	r3, [r4, #0]
    f770:	add	r7, r5
    f772:	mov	r4, r6
    f774:	b.n	f2c4 <__ssvfscanf_r+0x90>
    f776:	str	r3, [sp, #12]
    f778:	bl	bab4 <__locale_ctype_ptr>
    f77c:	add	r0, r8
    f77e:	ldrb	r3, [r0, #1]
    f780:	and.w	r3, r3, #3
    f784:	cmp	r3, #1
    f786:	ldr.w	r3, [fp, #4]
    f78a:	beq.w	f8ba <__ssvfscanf_r+0x686>
    f78e:	cmp	r3, #0
    f790:	bgt.w	f60e <__ssvfscanf_r+0x3da>
    f794:	b.n	f684 <__ssvfscanf_r+0x450>
    f796:	add	r3, sp, #72	; 0x48
    f798:	mov	r0, r3
    f79a:	movs	r2, #8
    f79c:	movs	r1, #0
    f79e:	str	r3, [sp, #32]
    f7a0:	bl	c25c <memset>
    f7a4:	ands.w	r3, r5, #16
    f7a8:	str	r3, [sp, #40]	; 0x28
    f7aa:	bne.n	f8a8 <__ssvfscanf_r+0x674>
    f7ac:	ldr	r2, [sp, #20]
    f7ae:	mov	r3, r2
    f7b0:	adds	r3, #4
    f7b2:	ldr.w	r9, [r2]
    f7b6:	str	r3, [sp, #20]
    f7b8:	movs	r5, #0
    f7ba:	add.w	r8, sp, #336	; 0x150
    f7be:	bl	ba90 <__locale_mb_cur_max>
    f7c2:	cmp	r0, r5
    f7c4:	beq.w	f47e <__ssvfscanf_r+0x24a>
    f7c8:	ldmia.w	fp, {r2, r3}
    f7cc:	ldrb.w	r0, [r2], #1
    f7d0:	str.w	r2, [fp]
    f7d4:	subs	r3, #1
    f7d6:	ldr	r2, [sp, #32]
    f7d8:	str	r2, [sp, #0]
    f7da:	adds	r6, r5, #1
    f7dc:	str.w	r3, [fp, #4]
    f7e0:	mov	r1, r9
    f7e2:	strb.w	r0, [r8, r5]
    f7e6:	mov	r3, r6
    f7e8:	mov	r2, r8
    f7ea:	mov	r0, sl
    f7ec:	bl	11bc4 <_mbrtowc_r>
    f7f0:	adds	r1, r0, #1
    f7f2:	beq.w	f47e <__ssvfscanf_r+0x24a>
    f7f6:	cbnz	r0, f822 <__ssvfscanf_r+0x5ee>
    f7f8:	ldr	r3, [sp, #40]	; 0x28
    f7fa:	cbnz	r3, f842 <__ssvfscanf_r+0x60e>
    f7fc:	str.w	r3, [r9]
    f800:	add	r7, r6
    f802:	subs	r4, #1
    f804:	add.w	r9, r9, #4
    f808:	ldr.w	r3, [fp, #4]
    f80c:	cmp	r3, #0
    f80e:	mov.w	r5, #0
    f812:	ble.n	f830 <__ssvfscanf_r+0x5fc>
    f814:	cmp	r4, #0
    f816:	bne.n	f7be <__ssvfscanf_r+0x58a>
    f818:	ldr	r3, [sp, #40]	; 0x28
    f81a:	cmp	r3, #0
    f81c:	beq.w	f6f6 <__ssvfscanf_r+0x4c2>
    f820:	b.n	f6fc <__ssvfscanf_r+0x4c8>
    f822:	adds	r0, #2
    f824:	bne.n	f848 <__ssvfscanf_r+0x614>
    f826:	ldr.w	r3, [fp, #4]
    f82a:	cmp	r3, #0
    f82c:	mov	r5, r6
    f82e:	bgt.n	f7be <__ssvfscanf_r+0x58a>
    f830:	mov	r1, fp
    f832:	mov	r0, sl
    f834:	bl	12c6c <__ssrefill_r>
    f838:	cmp	r0, #0
    f83a:	beq.n	f814 <__ssvfscanf_r+0x5e0>
    f83c:	cmp	r5, #0
    f83e:	beq.n	f818 <__ssvfscanf_r+0x5e4>
    f840:	b.n	f47e <__ssvfscanf_r+0x24a>
    f842:	add	r7, r6
    f844:	subs	r4, #1
    f846:	b.n	f808 <__ssvfscanf_r+0x5d4>
    f848:	ldr	r3, [sp, #40]	; 0x28
    f84a:	add	r7, r6
    f84c:	subs	r4, #1
    f84e:	cmp	r3, #0
    f850:	bne.n	f808 <__ssvfscanf_r+0x5d4>
    f852:	b.n	f804 <__ssvfscanf_r+0x5d0>
    f854:	mov	r8, r5
    f856:	mov	r5, r8
    f858:	add	r7, r5
    f85a:	b.n	f772 <__ssvfscanf_r+0x53e>
    f85c:	cmp	r5, #0
    f85e:	beq.w	f2d0 <__ssvfscanf_r+0x9c>
    f862:	add	r7, r5
    f864:	b.n	f772 <__ssvfscanf_r+0x53e>
    f866:	cmp	r5, #0
    f868:	bne.w	f58e <__ssvfscanf_r+0x35a>
    f86c:	b.n	f47e <__ssvfscanf_r+0x24a>
    f86e:	ldr	r5, [sp, #20]
    f870:	mov	r3, r4
    f872:	ldr	r1, [r5, #0]
    f874:	str.w	fp, [sp]
    f878:	movs	r2, #1
    f87a:	mov	r0, sl
    f87c:	bl	12ca8 <_sfread_r>
    f880:	adds	r6, r5, #4
    f882:	cmp	r0, #0
    f884:	beq.w	f47e <__ssvfscanf_r+0x24a>
    f888:	ldr	r3, [sp, #24]
    f88a:	str	r6, [sp, #20]
    f88c:	ldr	r6, [sp, #12]
    f88e:	adds	r3, #1
    f890:	add	r7, r0
    f892:	str	r3, [sp, #24]
    f894:	mov	r4, r6
    f896:	b.n	f2c4 <__ssvfscanf_r+0x90>
    f898:	mov	r1, fp
    f89a:	mov	r0, sl
    f89c:	bl	12c6c <__ssrefill_r>
    f8a0:	cmp	r0, #0
    f8a2:	beq.w	f3f2 <__ssvfscanf_r+0x1be>
    f8a6:	b.n	f47e <__ssvfscanf_r+0x24a>
    f8a8:	mov.w	r9, #0
    f8ac:	b.n	f7b8 <__ssvfscanf_r+0x584>
    f8ae:	ldrb.w	r8, [r6, #2]
    f8b2:	orr.w	r5, r5, #2
    f8b6:	adds	r6, #2
    f8b8:	b.n	f2e6 <__ssvfscanf_r+0xb2>
    f8ba:	cmp	r3, #0
    f8bc:	orr.w	r5, r5, #1
    f8c0:	bgt.w	f60e <__ssvfscanf_r+0x3da>
    f8c4:	b.n	f684 <__ssvfscanf_r+0x450>
    f8c6:	lsls	r4, r5, #31
    f8c8:	bmi.n	f8e4 <__ssvfscanf_r+0x6b0>
    f8ca:	lsls	r0, r5, #30
    f8cc:	bpl.n	f8e4 <__ssvfscanf_r+0x6b0>
    f8ce:	ldr	r2, [sp, #20]
    f8d0:	ldr	r6, [sp, #12]
    f8d2:	ldr	r3, [r2, #0]
    f8d4:	mov	r0, r7
    f8d6:	asrs	r1, r7, #31
    f8d8:	adds	r2, #4
    f8da:	str	r2, [sp, #20]
    f8dc:	strd	r0, r1, [r3]
    f8e0:	mov	r4, r6
    f8e2:	b.n	f2c4 <__ssvfscanf_r+0x90>
    f8e4:	ldr	r2, [sp, #20]
    f8e6:	ldr	r6, [sp, #12]
    f8e8:	ldr	r3, [r2, #0]
    f8ea:	str	r7, [r3, #0]
    f8ec:	mov	r3, r2
    f8ee:	adds	r3, #4
    f8f0:	str	r3, [sp, #20]
    f8f2:	mov	r4, r6
    f8f4:	b.n	f2c4 <__ssvfscanf_r+0x90>
    f8f6:	mov	r1, fp
    f8f8:	mov	r0, sl
    f8fa:	bl	12c6c <__ssrefill_r>
    f8fe:	cmp	r0, #0
    f900:	bne.w	f47e <__ssvfscanf_r+0x24a>
    f904:	ldr	r3, [pc, #504]	; (fb00 <__ssvfscanf_r+0x8cc>)
    f906:	str	r0, [sp, #16]
    f908:	str	r3, [sp, #28]
    f90a:	movs	r6, #3
    f90c:	b.n	f440 <__ssvfscanf_r+0x20c>
    f90e:	mov	r1, fp
    f910:	mov	r0, sl
    f912:	bl	12c6c <__ssrefill_r>
    f916:	cmp	r0, #0
    f918:	beq.w	f5ae <__ssvfscanf_r+0x37a>
    f91c:	b.n	f47e <__ssvfscanf_r+0x24a>
    f91e:	mov	r1, fp
    f920:	mov	r0, sl
    f922:	bl	12c6c <__ssrefill_r>
    f926:	cmp	r0, #0
    f928:	beq.w	f544 <__ssvfscanf_r+0x310>
    f92c:	b.n	f47e <__ssvfscanf_r+0x24a>
    f92e:	mov	r1, fp
    f930:	mov	r0, sl
    f932:	bl	12c6c <__ssrefill_r>
    f936:	cmp	r0, #0
    f938:	beq.w	f672 <__ssvfscanf_r+0x43e>
    f93c:	b.n	f47e <__ssvfscanf_r+0x24a>
    f93e:	mov	r1, fp
    f940:	mov	r0, sl
    f942:	bl	12c6c <__ssrefill_r>
    f946:	cmp	r0, #0
    f948:	beq.w	f4d6 <__ssvfscanf_r+0x2a2>
    f94c:	b.n	f47e <__ssvfscanf_r+0x24a>
    f94e:	mov	r1, fp
    f950:	mov	r0, sl
    f952:	bl	12c6c <__ssrefill_r>
    f956:	cmp	r0, #0
    f958:	beq.w	f4be <__ssvfscanf_r+0x28a>
    f95c:	b.n	f47e <__ssvfscanf_r+0x24a>
    f95e:	cmp	r6, #3
    f960:	beq.w	fca2 <__ssvfscanf_r+0xa6e>
    f964:	cmp	r6, #4
    f966:	bne.w	fde4 <__ssvfscanf_r+0xbb0>
    f96a:	mov	r0, sl
    f96c:	bl	11ba8 <_localeconv_r>
    f970:	subs	r3, r4, #1
    f972:	ldr	r2, [r0, #0]
    f974:	str	r2, [sp, #48]	; 0x30
    f976:	cmp.w	r3, #348	; 0x15c
    f97a:	bls.w	fe4c <__ssvfscanf_r+0xc18>
    f97e:	mvn.w	r1, #348	; 0x15c
    f982:	adds	r3, r4, r1
    f984:	str	r3, [sp, #56]	; 0x38
    f986:	movw	r4, #349	; 0x15d
    f98a:	add	r3, sp, #336	; 0x150
    f98c:	mov.w	r8, #0
    f990:	mov	r2, r3
    f992:	str	r3, [sp, #40]	; 0x28
    f994:	orr.w	r5, r5, #1920	; 0x780
    f998:	mov	r3, r8
    f99a:	str.w	r8, [sp, #60]	; 0x3c
    f99e:	str.w	r8, [sp, #52]	; 0x34
    f9a2:	mov	r6, r8
    f9a4:	str.w	r8, [sp, #44]	; 0x2c
    f9a8:	mov	r9, r2
    f9aa:	ldr.w	r0, [fp]
    f9ae:	ldrb	r1, [r0, #0]
    f9b0:	sub.w	lr, r1, #43	; 0x2b
    f9b4:	cmp.w	lr, #78	; 0x4e
    f9b8:	bhi.w	fc52 <__ssvfscanf_r+0xa1e>
    f9bc:	tbh	[pc, lr, lsl #1]
    f9c0:	.word	0x0149007a
    f9c4:	.word	0x0149007a
    f9c8:	.word	0x006e0149
    f9cc:	.word	0x004f004f
    f9d0:	.word	0x004f004f
    f9d4:	.word	0x004f004f
    f9d8:	.word	0x004f004f
    f9dc:	.word	0x0149004f
    f9e0:	.word	0x01490149
    f9e4:	.word	0x01490149
    f9e8:	.word	0x01490149
    f9ec:	.word	0x01490144
    f9f0:	.word	0x01490149
    f9f4:	.word	0x0125012c
    f9f8:	.word	0x01490149
    f9fc:	.word	0x014900a2
    fa00:	.word	0x01490149
    fa04:	.word	0x008b0149
    fa08:	.word	0x01490149
    fa0c:	.word	0x01490149
    fa10:	.word	0x00850149
    fa14:	.word	0x01490149
    fa18:	.word	0x01490149
    fa1c:	.word	0x0149007f
    fa20:	.word	0x01490149
    fa24:	.word	0x01490149
    fa28:	.word	0x01490149
    fa2c:	.word	0x01490144
    fa30:	.word	0x01490149
    fa34:	.word	0x0125012c
    fa38:	.word	0x01490149
    fa3c:	.word	0x014900a2
    fa40:	.word	0x01490149
    fa44:	.word	0x008b0149
    fa48:	.word	0x01490149
    fa4c:	.word	0x01490149
    fa50:	.word	0x00850149
    fa54:	.word	0x01490149
    fa58:	.word	0x01490149
    fa5c:	.short	0x007f
    fa5e:	cmn.w	r3, r8
    fa62:	bne.n	fa92 <__ssvfscanf_r+0x85e>
    fa64:	bic.w	r5, r5, #384	; 0x180
    fa68:	strb.w	r1, [r9]
    fa6c:	add.w	r9, r9, #1
    fa70:	ldr.w	r1, [fp, #4]
    fa74:	subs	r1, #1
    fa76:	cmp	r1, #0
    fa78:	add.w	r4, r4, #4294967295
    fa7c:	add.w	r7, r7, #1
    fa80:	str.w	r1, [fp, #4]
    fa84:	ble.w	fc6c <__ssvfscanf_r+0xa38>
    fa88:	adds	r0, #1
    fa8a:	str.w	r0, [fp]
    fa8e:	cmp	r4, #0
    fa90:	bne.n	f9aa <__ssvfscanf_r+0x776>
    fa92:	cmp	r6, #0
    fa94:	beq.n	fb1c <__ssvfscanf_r+0x8e8>
    fa96:	bic.w	r5, r5, #256	; 0x100
    fa9a:	b.n	fb1c <__ssvfscanf_r+0x8e8>
    fa9c:	lsls	r2, r5, #23
    fa9e:	bpl.n	fa5e <__ssvfscanf_r+0x82a>
    faa0:	ldr	r2, [sp, #56]	; 0x38
    faa2:	bic.w	r5, r5, #128	; 0x80
    faa6:	adds	r6, #1
    faa8:	cmp	r2, #0
    faaa:	beq.n	fa70 <__ssvfscanf_r+0x83c>
    faac:	subs	r2, #1
    faae:	str	r2, [sp, #56]	; 0x38
    fab0:	adds	r4, #1
    fab2:	b.n	fa70 <__ssvfscanf_r+0x83c>
    fab4:	lsls	r2, r5, #24
    fab6:	bpl.n	fa92 <__ssvfscanf_r+0x85e>
    fab8:	bic.w	r5, r5, #128	; 0x80
    fabc:	b.n	fa68 <__ssvfscanf_r+0x834>
    fabe:	cmp.w	r8, #7
    fac2:	bne.n	fa92 <__ssvfscanf_r+0x85e>
    fac4:	mov.w	r8, #8
    fac8:	b.n	fa68 <__ssvfscanf_r+0x834>
    faca:	cmp.w	r8, #6
    face:	bne.n	fa92 <__ssvfscanf_r+0x85e>
    fad0:	mov.w	r8, #7
    fad4:	b.n	fa68 <__ssvfscanf_r+0x834>
    fad6:	cmp	r3, #0
    fad8:	bne.w	fc98 <__ssvfscanf_r+0xa64>
    fadc:	cbnz	r6, faea <__ssvfscanf_r+0x8b6>
    fade:	and.w	lr, r5, #1792	; 0x700
    fae2:	cmp.w	lr, #1792	; 0x700
    fae6:	beq.w	ff70 <__ssvfscanf_r+0xd3c>
    faea:	cmp.w	r8, #1
    faee:	beq.n	faf6 <__ssvfscanf_r+0x8c2>
    faf0:	cmp.w	r8, #4
    faf4:	bne.n	fa92 <__ssvfscanf_r+0x85e>
    faf6:	add.w	r8, r8, #1
    fafa:	uxtb.w	r8, r8
    fafe:	b.n	fa68 <__ssvfscanf_r+0x834>
    fb00:	.word	0x0000db29
    fb04:	cmp.w	r8, #0
    fb08:	bne.w	fc86 <__ssvfscanf_r+0xa52>
    fb0c:	cmp	r6, #0
    fb0e:	bne.n	fa96 <__ssvfscanf_r+0x862>
    fb10:	and.w	lr, r5, #1792	; 0x700
    fb14:	cmp.w	lr, #1792	; 0x700
    fb18:	beq.w	ff90 <__ssvfscanf_r+0xd5c>
    fb1c:	subs	r3, #1
    fb1e:	cmp	r3, #1
    fb20:	bls.w	10026 <__ssvfscanf_r+0xdf2>
    fb24:	add.w	r3, r8, #4294967295
    fb28:	cmp	r3, #6
    fb2a:	bhi.n	fb5a <__ssvfscanf_r+0x926>
    fb2c:	cmp.w	r8, #2
    fb30:	bls.w	10074 <__ssvfscanf_r+0xe40>
    fb34:	cmp.w	r8, #3
    fb38:	beq.n	fb5a <__ssvfscanf_r+0x926>
    fb3a:	sub.w	r4, r8, #4
    fb3e:	uxtb	r4, r4
    fb40:	mvn.w	r8, r4
    fb44:	add	r8, r9
    fb46:	ldrb.w	r1, [r9, #-1]!
    fb4a:	mov	r2, fp
    fb4c:	mov	r0, sl
    fb4e:	bl	12be8 <_sungetc_r>
    fb52:	cmp	r8, r9
    fb54:	bne.n	fb46 <__ssvfscanf_r+0x912>
    fb56:	subs	r7, #1
    fb58:	subs	r7, r7, r4
    fb5a:	lsls	r1, r5, #23
    fb5c:	bpl.n	fb98 <__ssvfscanf_r+0x964>
    fb5e:	lsls	r2, r5, #21
    fb60:	bmi.w	1004a <__ssvfscanf_r+0xe16>
    fb64:	ldrb.w	r1, [r9, #-1]
    fb68:	cmp	r1, #101	; 0x65
    fb6a:	add.w	r4, r9, #4294967295
    fb6e:	add.w	r8, r7, #4294967295
    fb72:	beq.n	fb8c <__ssvfscanf_r+0x958>
    fb74:	cmp	r1, #69	; 0x45
    fb76:	beq.n	fb8c <__ssvfscanf_r+0x958>
    fb78:	mov	r2, fp
    fb7a:	mov	r0, sl
    fb7c:	bl	12be8 <_sungetc_r>
    fb80:	ldrb.w	r1, [r9, #-2]
    fb84:	sub.w	r8, r7, #2
    fb88:	sub.w	r4, r9, #2
    fb8c:	mov	r2, fp
    fb8e:	mov	r0, sl
    fb90:	bl	12be8 <_sungetc_r>
    fb94:	mov	r7, r8
    fb96:	mov	r9, r4
    fb98:	ands.w	r2, r5, #16
    fb9c:	bne.w	f6fc <__ssvfscanf_r+0x4c8>
    fba0:	and.w	r3, r5, #1536	; 0x600
    fba4:	cmp.w	r3, #1024	; 0x400
    fba8:	strb.w	r2, [r9]
    fbac:	beq.w	ff9a <__ssvfscanf_r+0xd66>
    fbb0:	ldr	r3, [sp, #52]	; 0x34
    fbb2:	cmp	r3, #0
    fbb4:	bne.w	ffbc <__ssvfscanf_r+0xd88>
    fbb8:	ldr	r1, [sp, #40]	; 0x28
    fbba:	movs	r2, #0
    fbbc:	mov	r0, sl
    fbbe:	bl	d9d0 <_strtod_r>
    fbc2:	lsls	r3, r5, #31
    fbc4:	bmi.w	fe52 <__ssvfscanf_r+0xc1e>
    fbc8:	ands.w	r5, r5, #2
    fbcc:	bne.w	fe52 <__ssvfscanf_r+0xc1e>
    fbd0:	vmov	r2, r3, d0
    fbd4:	vmov	r0, r1, d0
    fbd8:	vstr	d0, [sp, #32]
    fbdc:	bl	b270 <__aeabi_dcmpun>
    fbe0:	ldr	r4, [sp, #20]
    fbe2:	vldr	d0, [sp, #32]
    fbe6:	adds	r6, r4, #4
    fbe8:	ldr	r4, [r4, #0]
    fbea:	cmp	r0, #0
    fbec:	bne.w	100a8 <__ssvfscanf_r+0xe74>
    fbf0:	vmov	r0, r1, d0
    fbf4:	bl	b32c <__aeabi_d2f>
    fbf8:	str	r6, [sp, #20]
    fbfa:	str	r0, [r4, #0]
    fbfc:	ldr	r3, [sp, #24]
    fbfe:	ldr	r6, [sp, #12]
    fc00:	adds	r3, #1
    fc02:	str	r3, [sp, #24]
    fc04:	mov	r4, r6
    fc06:	b.w	f2c4 <__ssvfscanf_r+0x90>
    fc0a:	cmp.w	r8, #2
    fc0e:	bne.w	fa92 <__ssvfscanf_r+0x85e>
    fc12:	mov.w	r8, #3
    fc16:	b.n	fa68 <__ssvfscanf_r+0x834>
    fc18:	and.w	lr, r5, #1280	; 0x500
    fc1c:	cmp.w	lr, #1024	; 0x400
    fc20:	beq.n	fc2e <__ssvfscanf_r+0x9fa>
    fc22:	lsls	r2, r5, #21
    fc24:	bpl.w	fa92 <__ssvfscanf_r+0x85e>
    fc28:	cmp	r6, #0
    fc2a:	beq.w	fb1c <__ssvfscanf_r+0x8e8>
    fc2e:	lsls	r2, r5, #22
    fc30:	bmi.n	fc3c <__ssvfscanf_r+0xa08>
    fc32:	ldr	r2, [sp, #44]	; 0x2c
    fc34:	str.w	r9, [sp, #60]	; 0x3c
    fc38:	subs	r2, r6, r2
    fc3a:	str	r2, [sp, #52]	; 0x34
    fc3c:	bic.w	r5, r5, #1920	; 0x780
    fc40:	orr.w	r5, r5, #384	; 0x180
    fc44:	movs	r6, #0
    fc46:	b.n	fa68 <__ssvfscanf_r+0x834>
    fc48:	cmp	r3, #1
    fc4a:	bne.w	fa92 <__ssvfscanf_r+0x85e>
    fc4e:	movs	r3, #2
    fc50:	b.n	fa68 <__ssvfscanf_r+0x834>
    fc52:	ldr	r2, [sp, #48]	; 0x30
    fc54:	ldrb.w	lr, [r2]
    fc58:	cmp	lr, r1
    fc5a:	bne.w	fa92 <__ssvfscanf_r+0x85e>
    fc5e:	lsls	r2, r5, #22
    fc60:	bpl.w	fa92 <__ssvfscanf_r+0x85e>
    fc64:	bic.w	r5, r5, #640	; 0x280
    fc68:	str	r6, [sp, #44]	; 0x2c
    fc6a:	b.n	fa68 <__ssvfscanf_r+0x834>
    fc6c:	mov	r1, fp
    fc6e:	mov	r0, sl
    fc70:	str	r3, [sp, #32]
    fc72:	bl	12c6c <__ssrefill_r>
    fc76:	ldr	r3, [sp, #32]
    fc78:	cmp	r0, #0
    fc7a:	bne.w	fa92 <__ssvfscanf_r+0x85e>
    fc7e:	cmp	r4, #0
    fc80:	bne.w	f9aa <__ssvfscanf_r+0x776>
    fc84:	b.n	fa92 <__ssvfscanf_r+0x85e>
    fc86:	cmp.w	r8, #3
    fc8a:	beq.w	faf6 <__ssvfscanf_r+0x8c2>
    fc8e:	cmp.w	r8, #5
    fc92:	beq.w	faf6 <__ssvfscanf_r+0x8c2>
    fc96:	b.n	fa92 <__ssvfscanf_r+0x85e>
    fc98:	cmp	r3, #2
    fc9a:	bne.w	faea <__ssvfscanf_r+0x8b6>
    fc9e:	movs	r3, #3
    fca0:	b.n	fa68 <__ssvfscanf_r+0x834>
    fca2:	subs	r3, r4, #1
    fca4:	cmp.w	r3, #348	; 0x15c
    fca8:	itte	hi
    fcaa:	mvnhi.w	r0, #348	; 0x15c
    fcae:	addhi.w	r9, r4, r0
    fcb2:	movls	r9, r8
    fcb4:	add	r3, sp, #336	; 0x150
    fcb6:	mov	r0, r2
    fcb8:	mov	r2, r7
    fcba:	mov	r7, r9
    fcbc:	ldr.w	r9, [sp, #16]
    fcc0:	str	r3, [sp, #40]	; 0x28
    fcc2:	it	hi
    fcc4:	movwhi	r4, #349	; 0x15d
    fcc8:	orr.w	r5, r5, #3456	; 0xd80
    fccc:	mov	r6, r3
    fcce:	mov.w	r8, #0
    fcd2:	sub.w	r3, r1, #43	; 0x2b
    fcd6:	cmp	r3, #77	; 0x4d
    fcd8:	bhi.n	fd7e <__ssvfscanf_r+0xb4a>
    fcda:	tbb	[pc, r3]
    fcde:	.short	0x507e
    fce0:	.word	0x6f50507e
    fce4:	.word	0x69696969
    fce8:	.word	0x4a696969
    fcec:	.word	0x5050504a
    fcf0:	.word	0x50505050
    fcf4:	.word	0x44444444
    fcf8:	.word	0x50504444
    fcfc:	.word	0x50505050
    fd00:	.word	0x50505050
    fd04:	.word	0x50505050
    fd08:	.word	0x27505050
    fd0c:	.word	0x50505050
    fd10:	.word	0x50505050
    fd14:	.word	0x44444444
    fd18:	.word	0x50504444
    fd1c:	.word	0x50505050
    fd20:	.word	0x50505050
    fd24:	.word	0x50505050
    fd28:	.word	0x27505050
    fd2c:	and.w	r3, r5, #1536	; 0x600
    fd30:	cmp.w	r3, #512	; 0x200
    fd34:	bne.n	fd7e <__ssvfscanf_r+0xb4a>
    fd36:	bic.w	r5, r5, #512	; 0x200
    fd3a:	orr.w	r5, r5, #1280	; 0x500
    fd3e:	mov.w	r9, #16
    fd42:	strb	r1, [r6, #0]
    fd44:	adds	r6, #1
    fd46:	ldr.w	r3, [fp, #4]
    fd4a:	subs	r3, #1
    fd4c:	cmp	r3, #0
    fd4e:	str.w	r3, [fp, #4]
    fd52:	ble.n	fe3a <__ssvfscanf_r+0xc06>
    fd54:	adds	r0, #1
    fd56:	str.w	r0, [fp]
    fd5a:	subs	r4, #1
    fd5c:	beq.n	fd7e <__ssvfscanf_r+0xb4a>
    fd5e:	ldr.w	r0, [fp]
    fd62:	ldrb	r1, [r0, #0]
    fd64:	b.n	fcd2 <__ssvfscanf_r+0xa9e>
    fd66:	cmp.w	r9, #10
    fd6a:	ble.n	fd7e <__ssvfscanf_r+0xb4a>
    fd6c:	bic.w	r5, r5, #2944	; 0xb80
    fd70:	b.n	fd42 <__ssvfscanf_r+0xb0e>
    fd72:	ldr	r3, [pc, #756]	; (10068 <__ssvfscanf_r+0xe34>)
    fd74:	ldrsh.w	r9, [r3, r9, lsl #1]
    fd78:	cmp.w	r9, #8
    fd7c:	bgt.n	fd6c <__ssvfscanf_r+0xb38>
    fd7e:	lsls	r1, r5, #23
    fd80:	mov	r7, r2
    fd82:	str.w	r9, [sp, #16]
    fd86:	bpl.n	fd98 <__ssvfscanf_r+0xb64>
    fd88:	ldr	r3, [sp, #40]	; 0x28
    fd8a:	cmp	r6, r3
    fd8c:	bhi.w	ff78 <__ssvfscanf_r+0xd44>
    fd90:	ldr	r3, [sp, #40]	; 0x28
    fd92:	cmp	r6, r3
    fd94:	beq.w	f2d0 <__ssvfscanf_r+0x9c>
    fd98:	ands.w	r4, r5, #16
    fd9c:	beq.w	fec4 <__ssvfscanf_r+0xc90>
    fda0:	ldr	r3, [sp, #40]	; 0x28
    fda2:	subs	r6, r6, r3
    fda4:	add	r6, r8
    fda6:	add	r7, r6
    fda8:	ldr	r6, [sp, #12]
    fdaa:	mov	r4, r6
    fdac:	b.w	f2c4 <__ssvfscanf_r+0x90>
    fdb0:	ldr	r3, [pc, #692]	; (10068 <__ssvfscanf_r+0xe34>)
    fdb2:	bic.w	r5, r5, #2944	; 0xb80
    fdb6:	ldrsh.w	r9, [r3, r9, lsl #1]
    fdba:	b.n	fd42 <__ssvfscanf_r+0xb0e>
    fdbc:	lsls	r3, r5, #20
    fdbe:	bpl.n	fd42 <__ssvfscanf_r+0xb0e>
    fdc0:	cmp.w	r9, #0
    fdc4:	bne.n	fdce <__ssvfscanf_r+0xb9a>
    fdc6:	orr.w	r5, r5, #512	; 0x200
    fdca:	mov.w	r9, #8
    fdce:	lsls	r3, r5, #21
    fdd0:	bpl.w	ff54 <__ssvfscanf_r+0xd20>
    fdd4:	bic.w	r5, r5, #1408	; 0x580
    fdd8:	b.n	fd42 <__ssvfscanf_r+0xb0e>
    fdda:	lsls	r3, r5, #24
    fddc:	bpl.n	fd7e <__ssvfscanf_r+0xb4a>
    fdde:	bic.w	r5, r5, #128	; 0x80
    fde2:	b.n	fd42 <__ssvfscanf_r+0xb0e>
    fde4:	cmp	r4, #0
    fde6:	it	eq
    fde8:	moveq.w	r4, #4294967295
    fdec:	ands.w	r3, r5, #1
    fdf0:	bne.w	f6b0 <__ssvfscanf_r+0x47c>
    fdf4:	lsls	r1, r5, #27
    fdf6:	bpl.n	fe60 <__ssvfscanf_r+0xc2c>
    fdf8:	mov	r5, r3
    fdfa:	bl	bab4 <__locale_ctype_ptr>
    fdfe:	ldr.w	r3, [fp]
    fe02:	ldrb	r2, [r3, #0]
    fe04:	add	r0, r2
    fe06:	adds	r3, #1
    fe08:	ldrb	r2, [r0, #1]
    fe0a:	lsls	r2, r2, #28
    fe0c:	bmi.w	f58e <__ssvfscanf_r+0x35a>
    fe10:	ldr.w	r2, [fp, #4]
    fe14:	str.w	r3, [fp]
    fe18:	adds	r5, #1
    fe1a:	subs	r3, r2, #1
    fe1c:	cmp	r4, r5
    fe1e:	str.w	r3, [fp, #4]
    fe22:	beq.w	f58e <__ssvfscanf_r+0x35a>
    fe26:	cmp	r3, #0
    fe28:	bgt.n	fdfa <__ssvfscanf_r+0xbc6>
    fe2a:	mov	r1, fp
    fe2c:	mov	r0, sl
    fe2e:	bl	12c6c <__ssrefill_r>
    fe32:	cmp	r0, #0
    fe34:	beq.n	fdfa <__ssvfscanf_r+0xbc6>
    fe36:	b.w	f58e <__ssvfscanf_r+0x35a>
    fe3a:	mov	r1, fp
    fe3c:	mov	r0, sl
    fe3e:	str	r2, [sp, #16]
    fe40:	bl	12c6c <__ssrefill_r>
    fe44:	ldr	r2, [sp, #16]
    fe46:	cmp	r0, #0
    fe48:	beq.n	fd5a <__ssvfscanf_r+0xb26>
    fe4a:	b.n	fd7e <__ssvfscanf_r+0xb4a>
    fe4c:	str.w	r8, [sp, #56]	; 0x38
    fe50:	b.n	f98a <__ssvfscanf_r+0x756>
    fe52:	ldr	r2, [sp, #20]
    fe54:	ldr	r3, [r2, #0]
    fe56:	adds	r2, #4
    fe58:	str	r2, [sp, #20]
    fe5a:	vstr	d0, [r3]
    fe5e:	b.n	fbfc <__ssvfscanf_r+0x9c8>
    fe60:	ldr	r2, [sp, #20]
    fe62:	ldr	r5, [r2, #0]
    fe64:	adds	r6, r2, #4
    fe66:	add	r4, r5
    fe68:	mov	r8, r5
    fe6a:	bl	bab4 <__locale_ctype_ptr>
    fe6e:	ldr.w	r2, [fp]
    fe72:	ldrb	r3, [r2, #0]
    fe74:	add	r0, r3
    fe76:	adds	r1, r2, #1
    fe78:	ldrb	r3, [r0, #1]
    fe7a:	lsls	r3, r3, #28
    fe7c:	bmi.n	feaa <__ssvfscanf_r+0xc76>
    fe7e:	ldr.w	r3, [fp, #4]
    fe82:	str.w	r1, [fp]
    fe86:	subs	r3, #1
    fe88:	str.w	r3, [fp, #4]
    fe8c:	ldrb	r3, [r2, #0]
    fe8e:	strb.w	r3, [r8], #1
    fe92:	cmp	r4, r8
    fe94:	beq.n	feac <__ssvfscanf_r+0xc78>
    fe96:	ldr.w	r3, [fp, #4]
    fe9a:	cmp	r3, #0
    fe9c:	bgt.n	fe6a <__ssvfscanf_r+0xc36>
    fe9e:	mov	r1, fp
    fea0:	mov	r0, sl
    fea2:	bl	12c6c <__ssrefill_r>
    fea6:	cmp	r0, #0
    fea8:	beq.n	fe6a <__ssvfscanf_r+0xc36>
    feaa:	mov	r4, r8
    feac:	ldr	r2, [sp, #24]
    feae:	str	r6, [sp, #20]
    feb0:	ldr	r6, [sp, #12]
    feb2:	subs	r5, r4, r5
    feb4:	movs	r3, #0
    feb6:	adds	r2, #1
    feb8:	strb	r3, [r4, #0]
    feba:	add	r7, r5
    febc:	str	r2, [sp, #24]
    febe:	mov	r4, r6
    fec0:	b.w	f2c4 <__ssvfscanf_r+0x90>
    fec4:	mov	r2, r4
    fec6:	strb	r4, [r6, #0]
    fec8:	ldr	r3, [sp, #16]
    feca:	ldr	r1, [sp, #40]	; 0x28
    fecc:	ldr	r4, [sp, #28]
    fece:	mov	r0, sl
    fed0:	blx	r4
    fed2:	lsls	r2, r5, #26
    fed4:	bmi.n	ff64 <__ssvfscanf_r+0xd30>
    fed6:	lsls	r3, r5, #29
    fed8:	bpl.n	ffd2 <__ssvfscanf_r+0xd9e>
    feda:	ldr	r2, [sp, #20]
    fedc:	ldr	r3, [r2, #0]
    fede:	adds	r2, #4
    fee0:	str	r2, [sp, #20]
    fee2:	strh	r0, [r3, #0]
    fee4:	ldr	r3, [sp, #24]
    fee6:	adds	r3, #1
    fee8:	str	r3, [sp, #24]
    feea:	b.n	fda0 <__ssvfscanf_r+0xb6c>
    feec:	bl	ba90 <__locale_mb_cur_max>
    fef0:	cmp	r6, r0
    fef2:	beq.w	f47e <__ssvfscanf_r+0x24a>
    fef6:	ldmia.w	fp, {r2, r3}
    fefa:	ldrb.w	r0, [r2], #1
    fefe:	str.w	r2, [fp]
    ff02:	ldr	r2, [sp, #32]
    ff04:	str	r2, [sp, #0]
    ff06:	add	r2, sp, #336	; 0x150
    ff08:	adds	r5, r6, #1
    ff0a:	subs	r3, #1
    ff0c:	strb	r0, [r2, r6]
    ff0e:	str.w	r3, [fp, #4]
    ff12:	mov	r1, r8
    ff14:	mov	r3, r5
    ff16:	mov	r0, sl
    ff18:	bl	11bc4 <_mbrtowc_r>
    ff1c:	adds	r6, r0, #1
    ff1e:	beq.w	f47e <__ssvfscanf_r+0x24a>
    ff22:	cmp	r0, #0
    ff24:	bne.n	fffe <__ssvfscanf_r+0xdca>
    ff26:	str.w	r0, [r8]
    ff2a:	bl	11b88 <iswspace>
    ff2e:	cmp	r0, #0
    ff30:	beq.w	10092 <__ssvfscanf_r+0xe5e>
    ff34:	cmp	r5, #0
    ff36:	beq.w	f6ec <__ssvfscanf_r+0x4b8>
    ff3a:	add	r3, sp, #336	; 0x150
    ff3c:	adds	r4, r3, r5
    ff3e:	subs	r5, #1
    ff40:	mov	r2, fp
    ff42:	ldrb.w	r1, [r4, #-1]!
    ff46:	mov	r0, sl
    ff48:	bl	12be8 <_sungetc_r>
    ff4c:	cmp	r5, #0
    ff4e:	bne.n	ff3e <__ssvfscanf_r+0xd0a>
    ff50:	b.w	f6ec <__ssvfscanf_r+0x4b8>
    ff54:	bic.w	r5, r5, #896	; 0x380
    ff58:	cbz	r7, ff5e <__ssvfscanf_r+0xd2a>
    ff5a:	subs	r7, #1
    ff5c:	adds	r4, #1
    ff5e:	add.w	r8, r8, #1
    ff62:	b.n	fd46 <__ssvfscanf_r+0xb12>
    ff64:	ldr	r2, [sp, #20]
    ff66:	ldr	r3, [r2, #0]
    ff68:	adds	r2, #4
    ff6a:	str	r2, [sp, #20]
    ff6c:	str	r0, [r3, #0]
    ff6e:	b.n	fee4 <__ssvfscanf_r+0xcb0>
    ff70:	bic.w	r5, r5, #1920	; 0x780
    ff74:	movs	r3, #1
    ff76:	b.n	fa68 <__ssvfscanf_r+0x834>
    ff78:	ldrb.w	r1, [r6, #-1]
    ff7c:	mov	r2, fp
    ff7e:	mov	r0, sl
    ff80:	bl	12be8 <_sungetc_r>
    ff84:	subs	r6, #1
    ff86:	b.n	fd90 <__ssvfscanf_r+0xb5c>
    ff88:	add.w	r8, sp, #68	; 0x44
    ff8c:	b.w	f6d2 <__ssvfscanf_r+0x49e>
    ff90:	bic.w	r5, r5, #1920	; 0x780
    ff94:	mov.w	r8, #1
    ff98:	b.n	fa68 <__ssvfscanf_r+0x834>
    ff9a:	ldr	r3, [sp, #44]	; 0x2c
    ff9c:	subs	r6, r6, r3
    ff9e:	negs	r2, r6
    ffa0:	cmp	r6, #0
    ffa2:	beq.w	fbb8 <__ssvfscanf_r+0x984>
    ffa6:	addw	r3, sp, #675	; 0x2a3
    ffaa:	cmp	r9, r3
    ffac:	it	cs
    ffae:	addwcs	r9, sp, #674	; 0x2a2
    ffb2:	mov	r0, r9
    ffb4:	ldr	r1, [pc, #180]	; (1006c <__ssvfscanf_r+0xe38>)
    ffb6:	bl	c704 <sprintf>
    ffba:	b.n	fbb8 <__ssvfscanf_r+0x984>
    ffbc:	ldr	r4, [sp, #60]	; 0x3c
    ffbe:	mov	r1, r4
    ffc0:	movs	r3, #10
    ffc2:	adds	r1, #1
    ffc4:	mov	r0, sl
    ffc6:	bl	db28 <_strtol_r>
    ffca:	ldr	r3, [sp, #52]	; 0x34
    ffcc:	mov	r9, r4
    ffce:	subs	r2, r0, r3
    ffd0:	b.n	ffa6 <__ssvfscanf_r+0xd72>
    ffd2:	ands.w	r2, r5, #1
    ffd6:	bne.n	ff64 <__ssvfscanf_r+0xd30>
    ffd8:	lsls	r4, r5, #30
    ffda:	bpl.n	ff64 <__ssvfscanf_r+0xd30>
    ffdc:	ldr	r3, [sp, #28]
    ffde:	mov	r1, r3
    ffe0:	ldr	r3, [pc, #140]	; (10070 <__ssvfscanf_r+0xe3c>)
    ffe2:	cmp	r1, r3
    ffe4:	mov	r0, sl
    ffe6:	ldr	r3, [sp, #16]
    ffe8:	ldr	r1, [sp, #40]	; 0x28
    ffea:	beq.n	100b6 <__ssvfscanf_r+0xe82>
    ffec:	bl	12728 <_strtoll_r>
    fff0:	ldr	r2, [sp, #20]
    fff2:	ldr	r3, [r2, #0]
    fff4:	adds	r2, #4
    fff6:	str	r2, [sp, #20]
    fff8:	strd	r0, r1, [r3]
    fffc:	b.n	fee4 <__ssvfscanf_r+0xcb0>
    fffe:	adds	r0, #2
   10000:	bne.n	10044 <__ssvfscanf_r+0xe10>
   10002:	mov	r6, r5
   10004:	ldr.w	r3, [fp, #4]
   10008:	cmp	r3, #0
   1000a:	bgt.w	f6d4 <__ssvfscanf_r+0x4a0>
   1000e:	mov	r1, fp
   10010:	mov	r0, sl
   10012:	bl	12c6c <__ssrefill_r>
   10016:	cmp	r0, #0
   10018:	beq.w	f6d4 <__ssvfscanf_r+0x4a0>
   1001c:	cmp	r6, #0
   1001e:	bne.w	f47e <__ssvfscanf_r+0x24a>
   10022:	b.w	f6ec <__ssvfscanf_r+0x4b8>
   10026:	ldr	r3, [sp, #40]	; 0x28
   10028:	cmp	r9, r3
   1002a:	bls.w	f2d0 <__ssvfscanf_r+0x9c>
   1002e:	ldrb.w	r1, [r9, #-1]!
   10032:	mov	r2, fp
   10034:	mov	r0, sl
   10036:	bl	12be8 <_sungetc_r>
   1003a:	ldr	r3, [sp, #40]	; 0x28
   1003c:	cmp	r9, r3
   1003e:	bne.n	1002e <__ssvfscanf_r+0xdfa>
   10040:	b.w	f2d0 <__ssvfscanf_r+0x9c>
   10044:	ldr.w	r0, [r8]
   10048:	b.n	ff2a <__ssvfscanf_r+0xcf6>
   1004a:	ldr	r3, [sp, #40]	; 0x28
   1004c:	cmp	r9, r3
   1004e:	bls.w	f2d0 <__ssvfscanf_r+0x9c>
   10052:	ldrb.w	r1, [r9, #-1]!
   10056:	mov	r2, fp
   10058:	mov	r0, sl
   1005a:	bl	12be8 <_sungetc_r>
   1005e:	ldr	r3, [sp, #40]	; 0x28
   10060:	cmp	r9, r3
   10062:	bne.n	10052 <__ssvfscanf_r+0xe1e>
   10064:	b.w	f2d0 <__ssvfscanf_r+0x9c>
   10068:	.word	0x000139a4
   1006c:	.word	0x000139c8
   10070:	.word	0x000128b5
   10074:	ldr	r3, [sp, #40]	; 0x28
   10076:	cmp	r9, r3
   10078:	bls.w	f2d0 <__ssvfscanf_r+0x9c>
   1007c:	ldrb.w	r1, [r9, #-1]!
   10080:	mov	r2, fp
   10082:	mov	r0, sl
   10084:	bl	12be8 <_sungetc_r>
   10088:	ldr	r3, [sp, #40]	; 0x28
   1008a:	cmp	r9, r3
   1008c:	bne.n	1007c <__ssvfscanf_r+0xe48>
   1008e:	b.w	f2d0 <__ssvfscanf_r+0x9c>
   10092:	add	r7, r5
   10094:	subs	r4, #1
   10096:	cmp.w	r9, #0
   1009a:	bne.n	100a4 <__ssvfscanf_r+0xe70>
   1009c:	add.w	r8, r8, #4
   100a0:	mov	r6, r9
   100a2:	b.n	10004 <__ssvfscanf_r+0xdd0>
   100a4:	mov	r6, r0
   100a6:	b.n	10004 <__ssvfscanf_r+0xdd0>
   100a8:	mov	r0, r5
   100aa:	bl	a9b4 <nanf>
   100ae:	str	r6, [sp, #20]
   100b0:	vstr	s0, [r4]
   100b4:	b.n	fbfc <__ssvfscanf_r+0x9c8>
   100b6:	bl	12ac4 <_strtoull_r>
   100ba:	b.n	fff0 <__ssvfscanf_r+0xdbc>

000100bc <_vdprintf_r>:
   100bc:	push	{r4, r5, r6, r7, lr}
   100be:	sub.w	sp, sp, #532	; 0x214
   100c2:	add	r5, sp, #16
   100c4:	str	r3, [sp, #0]
   100c6:	mov	r7, r1
   100c8:	mov	r3, r2
   100ca:	mov.w	r4, #512	; 0x200
   100ce:	add	r2, sp, #12
   100d0:	mov	r1, r5
   100d2:	str	r4, [sp, #12]
   100d4:	mov	r6, r0
   100d6:	bl	12da4 <_vasnprintf_r>
   100da:	cbz	r0, 10100 <_vdprintf_r+0x44>
   100dc:	mov	r4, r0
   100de:	mov	r2, r0
   100e0:	mov	r1, r7
   100e2:	ldr	r3, [sp, #12]
   100e4:	mov	r0, r6
   100e6:	bl	1013c <_write_r>
   100ea:	cmp	r4, r5
   100ec:	str	r0, [sp, #12]
   100ee:	beq.n	100fa <_vdprintf_r+0x3e>
   100f0:	mov	r0, r6
   100f2:	mov	r1, r4
   100f4:	bl	11250 <_free_r>
   100f8:	ldr	r0, [sp, #12]
   100fa:	add.w	sp, sp, #532	; 0x214
   100fe:	pop	{r4, r5, r6, r7, pc}
   10100:	mov.w	r0, #4294967295
   10104:	b.n	100fa <_vdprintf_r+0x3e>
   10106:	nop

00010108 <vdprintf>:
   10108:	push	{r4}
   1010a:	ldr	r4, [pc, #16]	; (1011c <vdprintf+0x14>)
   1010c:	mov	r3, r2
   1010e:	mov	r2, r1
   10110:	mov	r1, r0
   10112:	ldr	r0, [r4, #0]
   10114:	ldr.w	r4, [sp], #4
   10118:	b.w	100bc <_vdprintf_r>
   1011c:	.word	0x20014c00

00010120 <__ascii_wctomb>:
   10120:	cbz	r1, 1012c <__ascii_wctomb+0xc>
   10122:	cmp	r2, #255	; 0xff
   10124:	bhi.n	10130 <__ascii_wctomb+0x10>
   10126:	strb	r2, [r1, #0]
   10128:	movs	r0, #1
   1012a:	bx	lr
   1012c:	mov	r0, r1
   1012e:	bx	lr
   10130:	movs	r3, #138	; 0x8a
   10132:	str	r3, [r0, #0]
   10134:	mov.w	r0, #4294967295
   10138:	bx	lr
   1013a:	nop

0001013c <_write_r>:
   1013c:	push	{r4, r5, r6, lr}
   1013e:	mov	r5, r1
   10140:	ldr	r4, [pc, #32]	; (10164 <_write_r+0x28>)
   10142:	mov	r1, r2
   10144:	mov	r6, r0
   10146:	mov	r2, r3
   10148:	mov	r0, r5
   1014a:	movs	r3, #0
   1014c:	str	r3, [r4, #0]
   1014e:	bl	9dbc <_write>
   10152:	adds	r3, r0, #1
   10154:	beq.n	10158 <_write_r+0x1c>
   10156:	pop	{r4, r5, r6, pc}
   10158:	ldr	r3, [r4, #0]
   1015a:	cmp	r3, #0
   1015c:	beq.n	10156 <_write_r+0x1a>
   1015e:	str	r3, [r6, #0]
   10160:	pop	{r4, r5, r6, pc}
   10162:	nop
   10164:	.word	0x2001af60

00010168 <__register_exitproc>:
   10168:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1016c:	ldr	r4, [pc, #148]	; (10204 <__register_exitproc+0x9c>)
   1016e:	ldr	r5, [r4, #0]
   10170:	ldr.w	r4, [r5, #328]	; 0x148
   10174:	mov	r6, r0
   10176:	mov	r8, r1
   10178:	mov	sl, r2
   1017a:	mov	r9, r3
   1017c:	cbz	r4, 101f0 <__register_exitproc+0x88>
   1017e:	ldr	r0, [r4, #4]
   10180:	cmp	r0, #31
   10182:	bgt.n	101b4 <__register_exitproc+0x4c>
   10184:	adds	r3, r0, #1
   10186:	cbz	r6, 101a6 <__register_exitproc+0x3e>
   10188:	add.w	r5, r4, r0, lsl #2
   1018c:	movs	r2, #1
   1018e:	str.w	sl, [r5, #136]	; 0x88
   10192:	ldr.w	r1, [r4, #392]	; 0x188
   10196:	lsls	r2, r0
   10198:	orrs	r1, r2
   1019a:	cmp	r6, #2
   1019c:	str.w	r1, [r4, #392]	; 0x188
   101a0:	str.w	r9, [r5, #264]	; 0x108
   101a4:	beq.n	101e4 <__register_exitproc+0x7c>
   101a6:	adds	r0, #2
   101a8:	str	r3, [r4, #4]
   101aa:	str.w	r8, [r4, r0, lsl #2]
   101ae:	movs	r0, #0
   101b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101b4:	ldr	r3, [pc, #80]	; (10208 <__register_exitproc+0xa0>)
   101b6:	cbz	r3, 101fa <__register_exitproc+0x92>
   101b8:	mov.w	r0, #400	; 0x190
   101bc:	bl	bac8 <malloc>
   101c0:	mov	r4, r0
   101c2:	cbz	r0, 101fa <__register_exitproc+0x92>
   101c4:	ldr.w	r3, [r5, #328]	; 0x148
   101c8:	movs	r7, #0
   101ca:	stmia.w	r0, {r3, r7}
   101ce:	str.w	r4, [r5, #328]	; 0x148
   101d2:	mov	r0, r7
   101d4:	movs	r3, #1
   101d6:	str.w	r7, [r4, #392]	; 0x188
   101da:	str.w	r7, [r4, #396]	; 0x18c
   101de:	cmp	r6, #0
   101e0:	beq.n	101a6 <__register_exitproc+0x3e>
   101e2:	b.n	10188 <__register_exitproc+0x20>
   101e4:	ldr.w	r1, [r4, #396]	; 0x18c
   101e8:	orrs	r2, r1
   101ea:	str.w	r2, [r4, #396]	; 0x18c
   101ee:	b.n	101a6 <__register_exitproc+0x3e>
   101f0:	add.w	r4, r5, #332	; 0x14c
   101f4:	str.w	r4, [r5, #328]	; 0x148
   101f8:	b.n	1017e <__register_exitproc+0x16>
   101fa:	mov.w	r0, #4294967295
   101fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10202:	nop
   10204:	.word	0x000138c8
   10208:	.word	0x0000bac9

0001020c <register_fini>:
   1020c:	ldr	r3, [pc, #8]	; (10218 <register_fini+0xc>)
   1020e:	cbz	r3, 10216 <register_fini+0xa>
   10210:	ldr	r0, [pc, #8]	; (1021c <register_fini+0x10>)
   10212:	b.w	10220 <atexit>
   10216:	bx	lr
   10218:	.word	0x00000000
   1021c:	.word	0x0001118d

00010220 <atexit>:
   10220:	movs	r3, #0
   10222:	mov	r1, r0
   10224:	mov	r2, r3
   10226:	mov	r0, r3
   10228:	b.w	10168 <__register_exitproc>

0001022c <quorem>:
   1022c:	ldr	r2, [r0, #16]
   1022e:	ldr	r3, [r1, #16]
   10230:	cmp	r3, r2
   10232:	bgt.w	10350 <quorem+0x124>
   10236:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1023a:	add.w	r8, r3, #4294967295
   1023e:	add.w	r7, r1, #20
   10242:	add.w	fp, r0, #20
   10246:	ldr.w	r2, [r7, r8, lsl #2]
   1024a:	ldr.w	r3, [fp, r8, lsl #2]
   1024e:	mov.w	r4, r8, lsl #2
   10252:	sub	sp, #12
   10254:	adds	r2, #1
   10256:	udiv	r9, r3, r2
   1025a:	add.w	r3, fp, r4
   1025e:	str	r4, [sp, #0]
   10260:	add.w	sl, r7, r4
   10264:	str	r3, [sp, #4]
   10266:	cmp.w	r9, #0
   1026a:	beq.n	102e0 <quorem+0xb4>
   1026c:	movs	r5, #0
   1026e:	mov	ip, r7
   10270:	mov	lr, fp
   10272:	mov	r3, r5
   10274:	ldr.w	r6, [ip], #4
   10278:	ldr.w	r2, [lr]
   1027c:	uxth	r4, r6
   1027e:	mla	r5, r9, r4, r5
   10282:	lsrs	r6, r6, #16
   10284:	lsrs	r4, r5, #16
   10286:	mla	r4, r9, r6, r4
   1028a:	uxth	r5, r5
   1028c:	subs	r3, r3, r5
   1028e:	uxth	r6, r4
   10290:	uxtah	r3, r3, r2
   10294:	rsb	r6, r6, r2, lsr #16
   10298:	add.w	r6, r6, r3, asr #16
   1029c:	uxth	r3, r3
   1029e:	orr.w	r3, r3, r6, lsl #16
   102a2:	cmp	sl, ip
   102a4:	str.w	r3, [lr], #4
   102a8:	mov.w	r5, r4, lsr #16
   102ac:	mov.w	r3, r6, asr #16
   102b0:	bcs.n	10274 <quorem+0x48>
   102b2:	ldr	r3, [sp, #0]
   102b4:	ldr.w	r3, [fp, r3]
   102b8:	cbnz	r3, 102e0 <quorem+0xb4>
   102ba:	ldr	r4, [sp, #4]
   102bc:	subs	r3, r4, #4
   102be:	cmp	fp, r3
   102c0:	bcs.n	102dc <quorem+0xb0>
   102c2:	ldr.w	r3, [r4, #-4]
   102c6:	cbnz	r3, 102dc <quorem+0xb0>
   102c8:	sub.w	r3, r4, #8
   102cc:	b.n	102d4 <quorem+0xa8>
   102ce:	ldr	r2, [r3, #0]
   102d0:	subs	r3, #4
   102d2:	cbnz	r2, 102dc <quorem+0xb0>
   102d4:	cmp	fp, r3
   102d6:	add.w	r8, r8, #4294967295
   102da:	bcc.n	102ce <quorem+0xa2>
   102dc:	str.w	r8, [r0, #16]
   102e0:	mov	r4, r0
   102e2:	bl	120c8 <__mcmp>
   102e6:	cmp	r0, #0
   102e8:	blt.n	10348 <quorem+0x11c>
   102ea:	add.w	r9, r9, #1
   102ee:	mov	r5, fp
   102f0:	movs	r3, #0
   102f2:	ldr.w	r1, [r7], #4
   102f6:	ldr	r0, [r5, #0]
   102f8:	uxth	r2, r1
   102fa:	subs	r2, r3, r2
   102fc:	lsrs	r1, r1, #16
   102fe:	uxtah	r2, r2, r0
   10302:	rsb	r3, r1, r0, lsr #16
   10306:	add.w	r3, r3, r2, asr #16
   1030a:	uxth	r1, r2
   1030c:	orr.w	r1, r1, r3, lsl #16
   10310:	cmp	sl, r7
   10312:	str.w	r1, [r5], #4
   10316:	mov.w	r3, r3, asr #16
   1031a:	bcs.n	102f2 <quorem+0xc6>
   1031c:	ldr.w	r2, [fp, r8, lsl #2]
   10320:	add.w	r3, fp, r8, lsl #2
   10324:	cbnz	r2, 10348 <quorem+0x11c>
   10326:	subs	r2, r3, #4
   10328:	cmp	fp, r2
   1032a:	bcs.n	10344 <quorem+0x118>
   1032c:	ldr.w	r2, [r3, #-4]
   10330:	cbnz	r2, 10344 <quorem+0x118>
   10332:	subs	r3, #8
   10334:	b.n	1033c <quorem+0x110>
   10336:	ldr	r2, [r3, #0]
   10338:	subs	r3, #4
   1033a:	cbnz	r2, 10344 <quorem+0x118>
   1033c:	cmp	fp, r3
   1033e:	add.w	r8, r8, #4294967295
   10342:	bcc.n	10336 <quorem+0x10a>
   10344:	str.w	r8, [r4, #16]
   10348:	mov	r0, r9
   1034a:	add	sp, #12
   1034c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10350:	movs	r0, #0
   10352:	bx	lr
   10354:			; <UNDEFINED> instruction: 0xffffffff

00010358 <_dtoa_r>:
   10358:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1035c:	vmov	r6, r7, d0
   10360:	sub	sp, #108	; 0x6c
   10362:	ldr	r4, [r0, #64]	; 0x40
   10364:	ldr	r5, [sp, #144]	; 0x90
   10366:	str	r1, [sp, #0]
   10368:	mov	r9, r0
   1036a:	str	r2, [sp, #20]
   1036c:	str	r3, [sp, #12]
   1036e:	vmov	sl, s0
   10372:	mov	fp, r7
   10374:	cbz	r4, 1038c <_dtoa_r+0x34>
   10376:	ldr	r2, [r0, #68]	; 0x44
   10378:	str	r2, [r4, #4]
   1037a:	movs	r3, #1
   1037c:	lsls	r3, r2
   1037e:	str	r3, [r4, #8]
   10380:	mov	r1, r4
   10382:	bl	11c6c <_Bfree>
   10386:	movs	r3, #0
   10388:	str.w	r3, [r9, #64]	; 0x40
   1038c:	cmp.w	fp, #0
   10390:	mov	r4, fp
   10392:	blt.n	103fe <_dtoa_r+0xa6>
   10394:	movs	r3, #0
   10396:	str	r3, [r5, #0]
   10398:	ldr	r3, [pc, #644]	; (10620 <_dtoa_r+0x2c8>)
   1039a:	mov	r2, r3
   1039c:	ands	r3, r4
   1039e:	cmp	r3, r2
   103a0:	beq.n	103d0 <_dtoa_r+0x78>
   103a2:	movs	r2, #0
   103a4:	movs	r3, #0
   103a6:	mov	r0, sl
   103a8:	mov	r1, fp
   103aa:	bl	b20c <__aeabi_dcmpeq>
   103ae:	mov	r6, sl
   103b0:	mov	r7, fp
   103b2:	mov	r8, r0
   103b4:	cbz	r0, 1040a <_dtoa_r+0xb2>
   103b6:	ldr	r2, [sp, #12]
   103b8:	movs	r3, #1
   103ba:	str	r3, [r2, #0]
   103bc:	ldr	r3, [sp, #148]	; 0x94
   103be:	cmp	r3, #0
   103c0:	beq.w	10540 <_dtoa_r+0x1e8>
   103c4:	ldr	r0, [pc, #604]	; (10624 <_dtoa_r+0x2cc>)
   103c6:	str	r0, [r3, #0]
   103c8:	subs	r0, #1
   103ca:	add	sp, #108	; 0x6c
   103cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103d0:	ldr	r2, [sp, #12]
   103d2:	movw	r3, #9999	; 0x270f
   103d6:	str	r3, [r2, #0]
   103d8:	cmp.w	sl, #0
   103dc:	beq.w	10514 <_dtoa_r+0x1bc>
   103e0:	ldr	r0, [pc, #580]	; (10628 <_dtoa_r+0x2d0>)
   103e2:	ldr	r3, [sp, #148]	; 0x94
   103e4:	cmp	r3, #0
   103e6:	beq.n	103ca <_dtoa_r+0x72>
   103e8:	ldrb	r3, [r0, #3]
   103ea:	cmp	r3, #0
   103ec:	beq.w	10544 <_dtoa_r+0x1ec>
   103f0:	add.w	r3, r0, #8
   103f4:	ldr	r2, [sp, #148]	; 0x94
   103f6:	str	r3, [r2, #0]
   103f8:	add	sp, #108	; 0x6c
   103fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103fe:	movs	r3, #1
   10400:	bic.w	r4, fp, #2147483648	; 0x80000000
   10404:	str	r3, [r5, #0]
   10406:	mov	fp, r4
   10408:	b.n	10398 <_dtoa_r+0x40>
   1040a:	add	r2, sp, #96	; 0x60
   1040c:	add	r1, sp, #100	; 0x64
   1040e:	vmov	d0, r6, r7
   10412:	mov	r0, r9
   10414:	bl	12344 <__d2b>
   10418:	lsrs	r5, r4, #20
   1041a:	str	r0, [sp, #40]	; 0x28
   1041c:	bne.w	10526 <_dtoa_r+0x1ce>
   10420:	ldr	r5, [sp, #96]	; 0x60
   10422:	ldr	r6, [sp, #100]	; 0x64
   10424:	add	r6, r5
   10426:	addw	r3, r6, #1074	; 0x432
   1042a:	cmp	r3, #32
   1042c:	ble.w	10940 <_dtoa_r+0x5e8>
   10430:	rsb	r3, r3, #64	; 0x40
   10434:	addw	r0, r6, #1042	; 0x412
   10438:	lsls	r4, r3
   1043a:	lsr.w	r0, sl, r0
   1043e:	orrs	r0, r4
   10440:	bl	ac50 <__aeabi_ui2d>
   10444:	movs	r3, #1
   10446:	subs	r4, r6, #1
   10448:	sub.w	r1, r1, #32505856	; 0x1f00000
   1044c:	str	r3, [sp, #60]	; 0x3c
   1044e:	movs	r2, #0
   10450:	ldr	r3, [pc, #472]	; (1062c <_dtoa_r+0x2d4>)
   10452:	bl	a9d4 <__aeabi_dsub>
   10456:	add	r3, pc, #432	; (adr r3, 10608 <_dtoa_r+0x2b0>)
   10458:	ldrd	r2, r3, [r3]
   1045c:	bl	ad3c <__aeabi_dmul>
   10460:	add	r3, pc, #428	; (adr r3, 10610 <_dtoa_r+0x2b8>)
   10462:	ldrd	r2, r3, [r3]
   10466:	bl	a9d8 <__adddf3>
   1046a:	mov	r6, r0
   1046c:	mov	r0, r4
   1046e:	mov	r7, r1
   10470:	bl	ac70 <__aeabi_i2d>
   10474:	add	r3, pc, #416	; (adr r3, 10618 <_dtoa_r+0x2c0>)
   10476:	ldrd	r2, r3, [r3]
   1047a:	bl	ad3c <__aeabi_dmul>
   1047e:	mov	r2, r0
   10480:	mov	r3, r1
   10482:	mov	r0, r6
   10484:	mov	r1, r7
   10486:	bl	a9d8 <__adddf3>
   1048a:	mov	r6, r0
   1048c:	mov	r7, r1
   1048e:	bl	b29c <__aeabi_d2iz>
   10492:	movs	r2, #0
   10494:	str	r0, [sp, #16]
   10496:	movs	r3, #0
   10498:	mov	r0, r6
   1049a:	mov	r1, r7
   1049c:	bl	b220 <__aeabi_dcmplt>
   104a0:	cmp	r0, #0
   104a2:	bne.w	108f6 <_dtoa_r+0x59e>
   104a6:	ldr	r6, [sp, #16]
   104a8:	cmp	r6, #22
   104aa:	bhi.w	108f0 <_dtoa_r+0x598>
   104ae:	ldr	r3, [pc, #384]	; (10630 <_dtoa_r+0x2d8>)
   104b0:	add.w	r3, r3, r6, lsl #3
   104b4:	ldrd	r0, r1, [r3]
   104b8:	mov	r2, sl
   104ba:	mov	r3, fp
   104bc:	bl	b25c <__aeabi_dcmpgt>
   104c0:	cmp	r0, #0
   104c2:	beq.w	1094a <_dtoa_r+0x5f2>
   104c6:	subs	r3, r6, #1
   104c8:	str	r3, [sp, #16]
   104ca:	movs	r3, #0
   104cc:	str	r3, [sp, #52]	; 0x34
   104ce:	subs	r5, r5, r4
   104d0:	subs.w	r8, r5, #1
   104d4:	bmi.w	1092c <_dtoa_r+0x5d4>
   104d8:	movs	r3, #0
   104da:	str	r3, [sp, #28]
   104dc:	ldr	r3, [sp, #16]
   104de:	cmp	r3, #0
   104e0:	blt.w	1091a <_dtoa_r+0x5c2>
   104e4:	add	r8, r3
   104e6:	str	r3, [sp, #48]	; 0x30
   104e8:	movs	r3, #0
   104ea:	str	r3, [sp, #24]
   104ec:	ldr	r3, [sp, #0]
   104ee:	cmp	r3, #9
   104f0:	bhi.n	10548 <_dtoa_r+0x1f0>
   104f2:	cmp	r3, #5
   104f4:	ble.w	11180 <_dtoa_r+0xe28>
   104f8:	subs	r3, #4
   104fa:	str	r3, [sp, #0]
   104fc:	movs	r6, #0
   104fe:	ldr	r3, [sp, #0]
   10500:	subs	r3, #2
   10502:	cmp	r3, #3
   10504:	bhi.w	1114e <_dtoa_r+0xdf6>
   10508:	tbh	[pc, r3, lsl #1]
   1050c:	.word	0x0224032b
   10510:	.word	0x04500336
   10514:	ldr	r3, [pc, #272]	; (10628 <_dtoa_r+0x2d0>)
   10516:	ldr	r2, [pc, #284]	; (10634 <_dtoa_r+0x2dc>)
   10518:	ubfx	r0, r4, #0, #20
   1051c:	cmp	r0, #0
   1051e:	ite	ne
   10520:	movne	r0, r3
   10522:	moveq	r0, r2
   10524:	b.n	103e2 <_dtoa_r+0x8a>
   10526:	ubfx	r3, fp, #0, #20
   1052a:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   1052e:	subw	r4, r5, #1023	; 0x3ff
   10532:	mov	r0, sl
   10534:	str.w	r8, [sp, #60]	; 0x3c
   10538:	orr.w	r1, r1, #3145728	; 0x300000
   1053c:	ldr	r5, [sp, #96]	; 0x60
   1053e:	b.n	1044e <_dtoa_r+0xf6>
   10540:	ldr	r0, [pc, #244]	; (10638 <_dtoa_r+0x2e0>)
   10542:	b.n	103ca <_dtoa_r+0x72>
   10544:	adds	r3, r0, #3
   10546:	b.n	103f4 <_dtoa_r+0x9c>
   10548:	movs	r1, #0
   1054a:	str.w	r1, [r9, #68]	; 0x44
   1054e:	mov	r0, r9
   10550:	mov	r4, r1
   10552:	str	r1, [sp, #0]
   10554:	bl	11c20 <_Balloc>
   10558:	mov.w	r3, #4294967295
   1055c:	str	r3, [sp, #32]
   1055e:	str	r3, [sp, #56]	; 0x38
   10560:	movs	r3, #1
   10562:	str	r0, [sp, #36]	; 0x24
   10564:	str.w	r0, [r9, #64]	; 0x40
   10568:	str	r4, [sp, #20]
   1056a:	str	r3, [sp, #44]	; 0x2c
   1056c:	ldr	r3, [sp, #100]	; 0x64
   1056e:	cmp	r3, #0
   10570:	blt.w	10714 <_dtoa_r+0x3bc>
   10574:	ldr	r2, [sp, #16]
   10576:	cmp	r2, #14
   10578:	bgt.w	10714 <_dtoa_r+0x3bc>
   1057c:	ldr	r3, [pc, #176]	; (10630 <_dtoa_r+0x2d8>)
   1057e:	add.w	r3, r3, r2, lsl #3
   10582:	vldr	d7, [r3]
   10586:	ldr	r3, [sp, #20]
   10588:	cmp	r3, #0
   1058a:	vstr	d7, [sp]
   1058e:	blt.w	10b8e <_dtoa_r+0x836>
   10592:	mov	r6, sl
   10594:	mov	r7, fp
   10596:	ldrd	sl, fp, [sp]
   1059a:	mov	r0, r6
   1059c:	mov	r2, sl
   1059e:	mov	r3, fp
   105a0:	mov	r1, r7
   105a2:	bl	af90 <__aeabi_ddiv>
   105a6:	bl	b29c <__aeabi_d2iz>
   105aa:	mov	r4, r0
   105ac:	bl	ac70 <__aeabi_i2d>
   105b0:	mov	r2, sl
   105b2:	mov	r3, fp
   105b4:	bl	ad3c <__aeabi_dmul>
   105b8:	mov	r3, r1
   105ba:	mov	r2, r0
   105bc:	mov	r1, r7
   105be:	mov	r0, r6
   105c0:	bl	a9d4 <__aeabi_dsub>
   105c4:	ldr	r5, [sp, #36]	; 0x24
   105c6:	add.w	r3, r4, #48	; 0x30
   105ca:	strb	r3, [r5, #0]
   105cc:	ldr	r3, [sp, #32]
   105ce:	cmp	r3, #1
   105d0:	mov	r6, r0
   105d2:	mov	r7, r1
   105d4:	add.w	r5, r5, #1
   105d8:	beq.n	1069e <_dtoa_r+0x346>
   105da:	movs	r2, #0
   105dc:	ldr	r3, [pc, #92]	; (1063c <_dtoa_r+0x2e4>)
   105de:	bl	ad3c <__aeabi_dmul>
   105e2:	movs	r2, #0
   105e4:	movs	r3, #0
   105e6:	mov	r6, r0
   105e8:	mov	r7, r1
   105ea:	bl	b20c <__aeabi_dcmpeq>
   105ee:	cmp	r0, #0
   105f0:	bne.n	106ee <_dtoa_r+0x396>
   105f2:	str.w	r9, [sp, #20]
   105f6:	ldr.w	sl, [sp, #32]
   105fa:	ldr.w	fp, [sp, #36]	; 0x24
   105fe:	ldrd	r8, r9, [sp]
   10602:	b.n	10656 <_dtoa_r+0x2fe>
   10604:	nop.w
   10608:	.word	0x636f4361
   1060c:	.word	0x3fd287a7
   10610:	.word	0x8b60c8b3
   10614:	.word	0x3fc68a28
   10618:	.word	0x509f79fb
   1061c:	.word	0x3fd34413
   10620:	.word	0x7ff00000
   10624:	.word	0x00013991
   10628:	.word	0x00013ae0
   1062c:	.word	0x3ff80000
   10630:	.word	0x00013be8
   10634:	.word	0x00013ad4
   10638:	.word	0x00013990
   1063c:	.word	0x40240000
   10640:	bl	ad3c <__aeabi_dmul>
   10644:	movs	r2, #0
   10646:	movs	r3, #0
   10648:	mov	r6, r0
   1064a:	mov	r7, r1
   1064c:	bl	b20c <__aeabi_dcmpeq>
   10650:	cmp	r0, #0
   10652:	bne.w	10db2 <_dtoa_r+0xa5a>
   10656:	mov	r2, r8
   10658:	mov	r3, r9
   1065a:	mov	r0, r6
   1065c:	mov	r1, r7
   1065e:	bl	af90 <__aeabi_ddiv>
   10662:	bl	b29c <__aeabi_d2iz>
   10666:	mov	r4, r0
   10668:	bl	ac70 <__aeabi_i2d>
   1066c:	mov	r2, r8
   1066e:	mov	r3, r9
   10670:	bl	ad3c <__aeabi_dmul>
   10674:	mov	r2, r0
   10676:	mov	r3, r1
   10678:	mov	r0, r6
   1067a:	mov	r1, r7
   1067c:	bl	a9d4 <__aeabi_dsub>
   10680:	add.w	lr, r4, #48	; 0x30
   10684:	strb.w	lr, [r5], #1
   10688:	rsb	lr, fp, r5
   1068c:	cmp	lr, sl
   1068e:	mov	r6, r0
   10690:	mov	r7, r1
   10692:	mov.w	r2, #0
   10696:	ldr	r3, [pc, #696]	; (10950 <_dtoa_r+0x5f8>)
   10698:	bne.n	10640 <_dtoa_r+0x2e8>
   1069a:	ldr.w	r9, [sp, #20]
   1069e:	mov	r2, r6
   106a0:	mov	r3, r7
   106a2:	mov	r0, r6
   106a4:	mov	r1, r7
   106a6:	bl	a9d8 <__adddf3>
   106aa:	mov	r6, r0
   106ac:	mov	r7, r1
   106ae:	mov	r2, r0
   106b0:	mov	r3, r1
   106b2:	ldrd	r0, r1, [sp]
   106b6:	bl	b220 <__aeabi_dcmplt>
   106ba:	cbnz	r0, 106ce <_dtoa_r+0x376>
   106bc:	mov	r2, r6
   106be:	mov	r3, r7
   106c0:	ldrd	r0, r1, [sp]
   106c4:	bl	b20c <__aeabi_dcmpeq>
   106c8:	cbz	r0, 106ee <_dtoa_r+0x396>
   106ca:	lsls	r3, r4, #31
   106cc:	bpl.n	106ee <_dtoa_r+0x396>
   106ce:	ldrb.w	r4, [r5, #-1]
   106d2:	ldr	r2, [sp, #36]	; 0x24
   106d4:	subs	r3, r5, #1
   106d6:	b.n	106e2 <_dtoa_r+0x38a>
   106d8:	cmp	r2, r3
   106da:	beq.w	10ed6 <_dtoa_r+0xb7e>
   106de:	ldrb.w	r4, [r3, #-1]!
   106e2:	cmp	r4, #57	; 0x39
   106e4:	add.w	r5, r3, #1
   106e8:	beq.n	106d8 <_dtoa_r+0x380>
   106ea:	adds	r4, #1
   106ec:	strb	r4, [r3, #0]
   106ee:	ldr	r1, [sp, #40]	; 0x28
   106f0:	mov	r0, r9
   106f2:	bl	11c6c <_Bfree>
   106f6:	movs	r2, #0
   106f8:	ldr	r3, [sp, #16]
   106fa:	strb	r2, [r5, #0]
   106fc:	ldr	r2, [sp, #12]
   106fe:	adds	r3, #1
   10700:	str	r3, [r2, #0]
   10702:	ldr	r3, [sp, #148]	; 0x94
   10704:	cmp	r3, #0
   10706:	beq.w	10e40 <_dtoa_r+0xae8>
   1070a:	ldr	r0, [sp, #36]	; 0x24
   1070c:	str	r5, [r3, #0]
   1070e:	add	sp, #108	; 0x6c
   10710:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10714:	ldr	r2, [sp, #44]	; 0x2c
   10716:	cmp	r2, #0
   10718:	beq.w	10938 <_dtoa_r+0x5e0>
   1071c:	ldr	r2, [sp, #0]
   1071e:	cmp	r2, #1
   10720:	ble.w	10bd2 <_dtoa_r+0x87a>
   10724:	ldr	r3, [sp, #32]
   10726:	ldr	r2, [sp, #24]
   10728:	subs	r7, r3, #1
   1072a:	cmp	r2, r7
   1072c:	blt.w	10e46 <_dtoa_r+0xaee>
   10730:	subs	r7, r2, r7
   10732:	ldr	r3, [sp, #32]
   10734:	cmp	r3, #0
   10736:	blt.w	1103a <_dtoa_r+0xce2>
   1073a:	ldr	r5, [sp, #28]
   1073c:	ldr	r3, [sp, #32]
   1073e:	ldr	r2, [sp, #28]
   10740:	movs	r1, #1
   10742:	add	r2, r3
   10744:	mov	r0, r9
   10746:	str	r2, [sp, #28]
   10748:	add	r8, r3
   1074a:	bl	11e34 <__i2b>
   1074e:	mov	r6, r0
   10750:	cbz	r5, 1076c <_dtoa_r+0x414>
   10752:	cmp.w	r8, #0
   10756:	ble.n	1076c <_dtoa_r+0x414>
   10758:	cmp	r5, r8
   1075a:	ldr	r2, [sp, #28]
   1075c:	mov	r3, r5
   1075e:	it	ge
   10760:	movge	r3, r8
   10762:	subs	r2, r2, r3
   10764:	str	r2, [sp, #28]
   10766:	subs	r5, r5, r3
   10768:	rsb	r8, r3, r8
   1076c:	ldr	r3, [sp, #24]
   1076e:	cmp	r3, #0
   10770:	ble.w	10d5e <_dtoa_r+0xa06>
   10774:	ldr	r2, [sp, #44]	; 0x2c
   10776:	cmp	r2, #0
   10778:	beq.w	10b80 <_dtoa_r+0x828>
   1077c:	cmp	r7, #0
   1077e:	beq.w	10b80 <_dtoa_r+0x828>
   10782:	mov	r1, r6
   10784:	mov	r2, r7
   10786:	mov	r0, r9
   10788:	bl	11f78 <__pow5mult>
   1078c:	ldr	r2, [sp, #40]	; 0x28
   1078e:	mov	r1, r0
   10790:	mov	r6, r0
   10792:	mov	r0, r9
   10794:	bl	11e48 <__multiply>
   10798:	ldr	r1, [sp, #40]	; 0x28
   1079a:	mov	r4, r0
   1079c:	mov	r0, r9
   1079e:	bl	11c6c <_Bfree>
   107a2:	ldr	r3, [sp, #24]
   107a4:	subs	r3, r3, r7
   107a6:	str	r3, [sp, #24]
   107a8:	bne.w	10b7e <_dtoa_r+0x826>
   107ac:	movs	r1, #1
   107ae:	mov	r0, r9
   107b0:	bl	11e34 <__i2b>
   107b4:	ldr	r3, [sp, #48]	; 0x30
   107b6:	str	r0, [sp, #24]
   107b8:	cmp	r3, #0
   107ba:	beq.w	10be8 <_dtoa_r+0x890>
   107be:	mov	r1, r0
   107c0:	mov	r2, r3
   107c2:	mov	r0, r9
   107c4:	bl	11f78 <__pow5mult>
   107c8:	ldr	r3, [sp, #0]
   107ca:	str	r0, [sp, #24]
   107cc:	cmp	r3, #1
   107ce:	ble.w	10db8 <_dtoa_r+0xa60>
   107d2:	movs	r7, #0
   107d4:	ldr	r2, [sp, #24]
   107d6:	ldr	r3, [r2, #16]
   107d8:	add.w	r3, r2, r3, lsl #2
   107dc:	ldr	r0, [r3, #16]
   107de:	bl	11d98 <__hi0bits>
   107e2:	rsb	r0, r0, #32
   107e6:	add	r0, r8
   107e8:	ands.w	r0, r0, #31
   107ec:	beq.w	10be4 <_dtoa_r+0x88c>
   107f0:	rsb	r3, r0, #32
   107f4:	cmp	r3, #4
   107f6:	ble.w	11174 <_dtoa_r+0xe1c>
   107fa:	rsb	r0, r0, #28
   107fe:	ldr	r3, [sp, #28]
   10800:	add	r3, r0
   10802:	str	r3, [sp, #28]
   10804:	add	r5, r0
   10806:	add	r8, r0
   10808:	ldr	r3, [sp, #28]
   1080a:	cmp	r3, #0
   1080c:	ble.n	1081a <_dtoa_r+0x4c2>
   1080e:	mov	r1, r4
   10810:	mov	r2, r3
   10812:	mov	r0, r9
   10814:	bl	12018 <__lshift>
   10818:	mov	r4, r0
   1081a:	cmp.w	r8, #0
   1081e:	ble.n	1082c <_dtoa_r+0x4d4>
   10820:	mov	r2, r8
   10822:	ldr	r1, [sp, #24]
   10824:	mov	r0, r9
   10826:	bl	12018 <__lshift>
   1082a:	str	r0, [sp, #24]
   1082c:	ldr	r3, [sp, #52]	; 0x34
   1082e:	cmp	r3, #0
   10830:	bne.w	10d28 <_dtoa_r+0x9d0>
   10834:	ldr	r3, [sp, #32]
   10836:	cmp	r3, #0
   10838:	ble.w	10d62 <_dtoa_r+0xa0a>
   1083c:	ldr	r3, [sp, #44]	; 0x2c
   1083e:	cmp	r3, #0
   10840:	bne.w	10c2c <_dtoa_r+0x8d4>
   10844:	ldr.w	fp, [sp, #36]	; 0x24
   10848:	ldr	r7, [sp, #32]
   1084a:	ldr.w	r8, [sp, #24]
   1084e:	mov	r5, fp
   10850:	b.n	10858 <_dtoa_r+0x500>
   10852:	bl	11c80 <__multadd>
   10856:	mov	r4, r0
   10858:	mov	r1, r8
   1085a:	mov	r0, r4
   1085c:	bl	1022c <quorem>
   10860:	add.w	sl, r0, #48	; 0x30
   10864:	strb.w	sl, [r5], #1
   10868:	rsb	r3, fp, r5
   1086c:	cmp	r3, r7
   1086e:	mov.w	r2, #10
   10872:	mov.w	r3, #0
   10876:	mov	r1, r4
   10878:	mov	r0, r9
   1087a:	blt.n	10852 <_dtoa_r+0x4fa>
   1087c:	ldr	r3, [sp, #36]	; 0x24
   1087e:	ldr	r2, [sp, #32]
   10880:	cmp	r2, #1
   10882:	ite	ge
   10884:	addge	r3, r3, r2
   10886:	addlt	r3, #1
   10888:	mov	r5, r3
   1088a:	mov.w	fp, #0
   1088e:	mov	r1, r4
   10890:	movs	r2, #1
   10892:	mov	r0, r9
   10894:	bl	12018 <__lshift>
   10898:	ldr	r1, [sp, #24]
   1089a:	str	r0, [sp, #40]	; 0x28
   1089c:	bl	120c8 <__mcmp>
   108a0:	cmp	r0, #0
   108a2:	ble.w	10eb0 <_dtoa_r+0xb58>
   108a6:	ldrb.w	r2, [r5, #-1]
   108aa:	ldr	r1, [sp, #36]	; 0x24
   108ac:	subs	r3, r5, #1
   108ae:	b.n	108ba <_dtoa_r+0x562>
   108b0:	cmp	r3, r1
   108b2:	beq.w	10d9e <_dtoa_r+0xa46>
   108b6:	ldrb.w	r2, [r3, #-1]!
   108ba:	cmp	r2, #57	; 0x39
   108bc:	add.w	r5, r3, #1
   108c0:	beq.n	108b0 <_dtoa_r+0x558>
   108c2:	adds	r2, #1
   108c4:	strb	r2, [r3, #0]
   108c6:	ldr	r1, [sp, #24]
   108c8:	mov	r0, r9
   108ca:	bl	11c6c <_Bfree>
   108ce:	cmp	r6, #0
   108d0:	beq.w	106ee <_dtoa_r+0x396>
   108d4:	cmp.w	fp, #0
   108d8:	beq.n	108e6 <_dtoa_r+0x58e>
   108da:	cmp	fp, r6
   108dc:	beq.n	108e6 <_dtoa_r+0x58e>
   108de:	mov	r1, fp
   108e0:	mov	r0, r9
   108e2:	bl	11c6c <_Bfree>
   108e6:	mov	r1, r6
   108e8:	mov	r0, r9
   108ea:	bl	11c6c <_Bfree>
   108ee:	b.n	106ee <_dtoa_r+0x396>
   108f0:	movs	r3, #1
   108f2:	str	r3, [sp, #52]	; 0x34
   108f4:	b.n	104ce <_dtoa_r+0x176>
   108f6:	ldr.w	r8, [sp, #16]
   108fa:	mov	r0, r8
   108fc:	bl	ac70 <__aeabi_i2d>
   10900:	mov	r2, r0
   10902:	mov	r3, r1
   10904:	mov	r0, r6
   10906:	mov	r1, r7
   10908:	bl	b20c <__aeabi_dcmpeq>
   1090c:	cmp	r0, #0
   1090e:	bne.w	104a6 <_dtoa_r+0x14e>
   10912:	add.w	r3, r8, #4294967295
   10916:	str	r3, [sp, #16]
   10918:	b.n	104a6 <_dtoa_r+0x14e>
   1091a:	ldr	r2, [sp, #28]
   1091c:	ldr	r3, [sp, #16]
   1091e:	subs	r2, r2, r3
   10920:	negs	r3, r3
   10922:	str	r3, [sp, #24]
   10924:	movs	r3, #0
   10926:	str	r2, [sp, #28]
   10928:	str	r3, [sp, #48]	; 0x30
   1092a:	b.n	104ec <_dtoa_r+0x194>
   1092c:	rsb	r3, r8, #0
   10930:	str	r3, [sp, #28]
   10932:	mov.w	r8, #0
   10936:	b.n	104dc <_dtoa_r+0x184>
   10938:	ldr	r7, [sp, #24]
   1093a:	ldr	r5, [sp, #28]
   1093c:	ldr	r6, [sp, #44]	; 0x2c
   1093e:	b.n	10750 <_dtoa_r+0x3f8>
   10940:	rsb	r4, r3, #32
   10944:	lsl.w	r0, sl, r4
   10948:	b.n	10440 <_dtoa_r+0xe8>
   1094a:	str	r0, [sp, #52]	; 0x34
   1094c:	b.n	104ce <_dtoa_r+0x176>
   1094e:	nop
   10950:	.word	0x40240000
   10954:	movs	r3, #0
   10956:	str	r3, [sp, #44]	; 0x2c
   10958:	ldr	r3, [sp, #16]
   1095a:	ldr	r2, [sp, #20]
   1095c:	add	r3, r2
   1095e:	str	r3, [sp, #56]	; 0x38
   10960:	adds	r3, #1
   10962:	cmp	r3, #0
   10964:	str	r3, [sp, #32]
   10966:	ble.w	10e64 <_dtoa_r+0xb0c>
   1096a:	ldr	r4, [sp, #32]
   1096c:	mov	r5, r4
   1096e:	movs	r1, #0
   10970:	cmp	r5, #23
   10972:	str.w	r1, [r9, #68]	; 0x44
   10976:	bls.n	10990 <_dtoa_r+0x638>
   10978:	movs	r2, #1
   1097a:	movs	r3, #4
   1097c:	lsls	r3, r3, #1
   1097e:	add.w	r0, r3, #20
   10982:	cmp	r0, r5
   10984:	mov	r1, r2
   10986:	add.w	r2, r2, #1
   1098a:	bls.n	1097c <_dtoa_r+0x624>
   1098c:	str.w	r1, [r9, #68]	; 0x44
   10990:	mov	r0, r9
   10992:	bl	11c20 <_Balloc>
   10996:	cmp	r4, #14
   10998:	str	r0, [sp, #36]	; 0x24
   1099a:	str.w	r0, [r9, #64]	; 0x40
   1099e:	bhi.w	1056c <_dtoa_r+0x214>
   109a2:	cmp	r6, #0
   109a4:	beq.w	1056c <_dtoa_r+0x214>
   109a8:	ldr	r1, [sp, #16]
   109aa:	cmp	r1, #0
   109ac:	strd	sl, fp, [sp, #64]	; 0x40
   109b0:	ble.w	10ee8 <_dtoa_r+0xb90>
   109b4:	ldr	r3, [pc, #576]	; (10bf8 <_dtoa_r+0x8a0>)
   109b6:	and.w	r2, r1, #15
   109ba:	asrs	r6, r1, #4
   109bc:	add.w	r3, r3, r2, lsl #3
   109c0:	lsls	r0, r6, #27
   109c2:	ldrd	r4, r5, [r3]
   109c6:	bpl.w	10e56 <_dtoa_r+0xafe>
   109ca:	ldr	r3, [pc, #560]	; (10bfc <_dtoa_r+0x8a4>)
   109cc:	mov	r0, sl
   109ce:	mov	r1, fp
   109d0:	ldrd	r2, r3, [r3, #32]
   109d4:	bl	af90 <__aeabi_ddiv>
   109d8:	strd	r0, r1, [sp, #72]	; 0x48
   109dc:	and.w	r6, r6, #15
   109e0:	mov.w	sl, #3
   109e4:	cbz	r6, 10a08 <_dtoa_r+0x6b0>
   109e6:	ldr	r7, [pc, #532]	; (10bfc <_dtoa_r+0x8a4>)
   109e8:	lsls	r1, r6, #31
   109ea:	bpl.n	10a00 <_dtoa_r+0x6a8>
   109ec:	mov	r0, r4
   109ee:	mov	r1, r5
   109f0:	ldrd	r2, r3, [r7]
   109f4:	bl	ad3c <__aeabi_dmul>
   109f8:	add.w	sl, sl, #1
   109fc:	mov	r4, r0
   109fe:	mov	r5, r1
   10a00:	asrs	r6, r6, #1
   10a02:	add.w	r7, r7, #8
   10a06:	bne.n	109e8 <_dtoa_r+0x690>
   10a08:	mov	r2, r4
   10a0a:	mov	r3, r5
   10a0c:	ldrd	r0, r1, [sp, #72]	; 0x48
   10a10:	bl	af90 <__aeabi_ddiv>
   10a14:	mov	r6, r0
   10a16:	mov	r7, r1
   10a18:	ldr	r3, [sp, #52]	; 0x34
   10a1a:	cbz	r3, 10a2e <_dtoa_r+0x6d6>
   10a1c:	movs	r2, #0
   10a1e:	ldr	r3, [pc, #480]	; (10c00 <_dtoa_r+0x8a8>)
   10a20:	mov	r0, r6
   10a22:	mov	r1, r7
   10a24:	bl	b220 <__aeabi_dcmplt>
   10a28:	cmp	r0, #0
   10a2a:	bne.w	11062 <_dtoa_r+0xd0a>
   10a2e:	mov	r0, sl
   10a30:	bl	ac70 <__aeabi_i2d>
   10a34:	mov	r2, r6
   10a36:	mov	r3, r7
   10a38:	bl	ad3c <__aeabi_dmul>
   10a3c:	ldr	r3, [pc, #452]	; (10c04 <_dtoa_r+0x8ac>)
   10a3e:	movs	r2, #0
   10a40:	bl	a9d8 <__adddf3>
   10a44:	ldr	r3, [sp, #32]
   10a46:	mov	r4, r0
   10a48:	sub.w	r5, r1, #54525952	; 0x3400000
   10a4c:	cmp	r3, #0
   10a4e:	beq.w	10e08 <_dtoa_r+0xab0>
   10a52:	ldr	r3, [sp, #16]
   10a54:	str	r3, [sp, #88]	; 0x58
   10a56:	ldr	r3, [sp, #32]
   10a58:	str	r3, [sp, #72]	; 0x48
   10a5a:	ldr	r3, [sp, #44]	; 0x2c
   10a5c:	cmp	r3, #0
   10a5e:	beq.w	10f8a <_dtoa_r+0xc32>
   10a62:	ldr	r2, [sp, #72]	; 0x48
   10a64:	ldr	r3, [pc, #400]	; (10bf8 <_dtoa_r+0x8a0>)
   10a66:	ldr	r1, [pc, #416]	; (10c08 <_dtoa_r+0x8b0>)
   10a68:	add.w	r3, r3, r2, lsl #3
   10a6c:	ldrd	r2, r3, [r3, #-8]
   10a70:	movs	r0, #0
   10a72:	bl	af90 <__aeabi_ddiv>
   10a76:	mov	r2, r4
   10a78:	mov	r3, r5
   10a7a:	bl	a9d4 <__aeabi_dsub>
   10a7e:	mov	sl, r0
   10a80:	mov	fp, r1
   10a82:	mov	r0, r6
   10a84:	mov	r1, r7
   10a86:	bl	b29c <__aeabi_d2iz>
   10a8a:	mov	r4, r0
   10a8c:	bl	ac70 <__aeabi_i2d>
   10a90:	mov	r2, r0
   10a92:	mov	r3, r1
   10a94:	mov	r0, r6
   10a96:	mov	r1, r7
   10a98:	bl	a9d4 <__aeabi_dsub>
   10a9c:	adds	r4, #48	; 0x30
   10a9e:	ldr	r5, [sp, #36]	; 0x24
   10aa0:	uxtb	r4, r4
   10aa2:	mov	r6, r0
   10aa4:	mov	r7, r1
   10aa6:	strb	r4, [r5, #0]
   10aa8:	mov	r2, r0
   10aaa:	mov	r3, r1
   10aac:	mov	r0, sl
   10aae:	mov	r1, fp
   10ab0:	adds	r5, #1
   10ab2:	bl	b25c <__aeabi_dcmpgt>
   10ab6:	cmp	r0, #0
   10ab8:	bne.n	10b5c <_dtoa_r+0x804>
   10aba:	mov	r2, r6
   10abc:	mov	r3, r7
   10abe:	movs	r0, #0
   10ac0:	ldr	r1, [pc, #316]	; (10c00 <_dtoa_r+0x8a8>)
   10ac2:	bl	a9d4 <__aeabi_dsub>
   10ac6:	mov	r2, r0
   10ac8:	mov	r3, r1
   10aca:	mov	r0, sl
   10acc:	mov	r1, fp
   10ace:	bl	b25c <__aeabi_dcmpgt>
   10ad2:	cmp	r0, #0
   10ad4:	bne.w	110e8 <_dtoa_r+0xd90>
   10ad8:	ldr	r2, [sp, #72]	; 0x48
   10ada:	cmp	r2, #1
   10adc:	ble.w	10ece <_dtoa_r+0xb76>
   10ae0:	ldr	r3, [sp, #72]	; 0x48
   10ae2:	ldr	r2, [sp, #36]	; 0x24
   10ae4:	str.w	r8, [sp, #72]	; 0x48
   10ae8:	add	r3, r2
   10aea:	mov	r8, r3
   10aec:	b.n	10b0a <_dtoa_r+0x7b2>
   10aee:	movs	r0, #0
   10af0:	ldr	r1, [pc, #268]	; (10c00 <_dtoa_r+0x8a8>)
   10af2:	bl	a9d4 <__aeabi_dsub>
   10af6:	mov	r2, sl
   10af8:	mov	r3, fp
   10afa:	bl	b220 <__aeabi_dcmplt>
   10afe:	cmp	r0, #0
   10b00:	bne.w	110e8 <_dtoa_r+0xd90>
   10b04:	cmp	r5, r8
   10b06:	beq.w	10eca <_dtoa_r+0xb72>
   10b0a:	mov	r0, sl
   10b0c:	mov	r1, fp
   10b0e:	movs	r2, #0
   10b10:	ldr	r3, [pc, #248]	; (10c0c <_dtoa_r+0x8b4>)
   10b12:	bl	ad3c <__aeabi_dmul>
   10b16:	movs	r2, #0
   10b18:	ldr	r3, [pc, #240]	; (10c0c <_dtoa_r+0x8b4>)
   10b1a:	mov	sl, r0
   10b1c:	mov	fp, r1
   10b1e:	mov	r0, r6
   10b20:	mov	r1, r7
   10b22:	bl	ad3c <__aeabi_dmul>
   10b26:	mov	r7, r1
   10b28:	mov	r6, r0
   10b2a:	bl	b29c <__aeabi_d2iz>
   10b2e:	mov	r4, r0
   10b30:	bl	ac70 <__aeabi_i2d>
   10b34:	mov	r2, r0
   10b36:	mov	r3, r1
   10b38:	mov	r0, r6
   10b3a:	mov	r1, r7
   10b3c:	bl	a9d4 <__aeabi_dsub>
   10b40:	adds	r4, #48	; 0x30
   10b42:	uxtb	r4, r4
   10b44:	mov	r2, sl
   10b46:	mov	r3, fp
   10b48:	strb.w	r4, [r5], #1
   10b4c:	mov	r6, r0
   10b4e:	mov	r7, r1
   10b50:	bl	b220 <__aeabi_dcmplt>
   10b54:	mov	r2, r6
   10b56:	mov	r3, r7
   10b58:	cmp	r0, #0
   10b5a:	beq.n	10aee <_dtoa_r+0x796>
   10b5c:	ldr	r3, [sp, #88]	; 0x58
   10b5e:	str	r3, [sp, #16]
   10b60:	b.n	106ee <_dtoa_r+0x396>
   10b62:	movs	r3, #0
   10b64:	str	r3, [sp, #44]	; 0x2c
   10b66:	ldr	r3, [sp, #20]
   10b68:	cmp	r3, #0
   10b6a:	ble.w	10e6e <_dtoa_r+0xb16>
   10b6e:	mov	r5, r3
   10b70:	mov	r4, r3
   10b72:	str	r3, [sp, #56]	; 0x38
   10b74:	str	r3, [sp, #32]
   10b76:	b.n	1096e <_dtoa_r+0x616>
   10b78:	movs	r3, #1
   10b7a:	str	r3, [sp, #44]	; 0x2c
   10b7c:	b.n	10b66 <_dtoa_r+0x80e>
   10b7e:	str	r4, [sp, #40]	; 0x28
   10b80:	ldr	r2, [sp, #24]
   10b82:	ldr	r1, [sp, #40]	; 0x28
   10b84:	mov	r0, r9
   10b86:	bl	11f78 <__pow5mult>
   10b8a:	mov	r4, r0
   10b8c:	b.n	107ac <_dtoa_r+0x454>
   10b8e:	ldr	r3, [sp, #32]
   10b90:	cmp	r3, #0
   10b92:	bgt.w	10592 <_dtoa_r+0x23a>
   10b96:	bne.w	10e38 <_dtoa_r+0xae0>
   10b9a:	movs	r2, #0
   10b9c:	ldr	r3, [pc, #112]	; (10c10 <_dtoa_r+0x8b8>)
   10b9e:	ldrd	r0, r1, [sp]
   10ba2:	bl	ad3c <__aeabi_dmul>
   10ba6:	mov	r3, fp
   10ba8:	mov	r2, sl
   10baa:	bl	b248 <__aeabi_dcmpge>
   10bae:	ldr	r3, [sp, #32]
   10bb0:	str	r3, [sp, #24]
   10bb2:	mov	r6, r3
   10bb4:	cmp	r0, #0
   10bb6:	beq.w	10d8e <_dtoa_r+0xa36>
   10bba:	ldr	r3, [sp, #20]
   10bbc:	ldr	r5, [sp, #36]	; 0x24
   10bbe:	mvns	r3, r3
   10bc0:	str	r3, [sp, #16]
   10bc2:	ldr	r1, [sp, #24]
   10bc4:	mov	r0, r9
   10bc6:	bl	11c6c <_Bfree>
   10bca:	cmp	r6, #0
   10bcc:	beq.w	106ee <_dtoa_r+0x396>
   10bd0:	b.n	108e6 <_dtoa_r+0x58e>
   10bd2:	ldr	r2, [sp, #60]	; 0x3c
   10bd4:	cmp	r2, #0
   10bd6:	beq.w	1104a <_dtoa_r+0xcf2>
   10bda:	addw	r3, r3, #1075	; 0x433
   10bde:	ldr	r7, [sp, #24]
   10be0:	ldr	r5, [sp, #28]
   10be2:	b.n	1073e <_dtoa_r+0x3e6>
   10be4:	movs	r0, #28
   10be6:	b.n	107fe <_dtoa_r+0x4a6>
   10be8:	ldr	r3, [sp, #0]
   10bea:	cmp	r3, #1
   10bec:	ble.w	110f0 <_dtoa_r+0xd98>
   10bf0:	ldr	r7, [sp, #48]	; 0x30
   10bf2:	movs	r0, #1
   10bf4:	b.n	107e6 <_dtoa_r+0x48e>
   10bf6:	nop
   10bf8:	.word	0x00013be8
   10bfc:	.word	0x00013cb0
   10c00:	.word	0x3ff00000
   10c04:	.word	0x401c0000
   10c08:	.word	0x3fe00000
   10c0c:	.word	0x40240000
   10c10:	.word	0x40140000
   10c14:	mov	r1, r6
   10c16:	movs	r3, #0
   10c18:	movs	r2, #10
   10c1a:	mov	r0, r9
   10c1c:	bl	11c80 <__multadd>
   10c20:	ldr	r3, [sp, #56]	; 0x38
   10c22:	cmp	r3, #0
   10c24:	mov	r6, r0
   10c26:	ble.w	11144 <_dtoa_r+0xdec>
   10c2a:	str	r3, [sp, #32]
   10c2c:	cmp	r5, #0
   10c2e:	ble.n	10c3c <_dtoa_r+0x8e4>
   10c30:	mov	r1, r6
   10c32:	mov	r2, r5
   10c34:	mov	r0, r9
   10c36:	bl	12018 <__lshift>
   10c3a:	mov	r6, r0
   10c3c:	cmp	r7, #0
   10c3e:	bne.w	10f3a <_dtoa_r+0xbe2>
   10c42:	mov	r8, r6
   10c44:	ldr	r3, [sp, #32]
   10c46:	ldr	r2, [sp, #36]	; 0x24
   10c48:	subs	r3, #1
   10c4a:	adds	r3, r2, r3
   10c4c:	str	r3, [sp, #32]
   10c4e:	and.w	r3, sl, #1
   10c52:	str	r3, [sp, #40]	; 0x28
   10c54:	mov	r7, r2
   10c56:	ldr.w	fp, [sp, #24]
   10c5a:	mov	r0, r4
   10c5c:	mov	r1, fp
   10c5e:	bl	1022c <quorem>
   10c62:	mov	r1, r6
   10c64:	mov	r5, r0
   10c66:	mov	r0, r4
   10c68:	bl	120c8 <__mcmp>
   10c6c:	mov	r2, r8
   10c6e:	mov	r1, fp
   10c70:	mov	sl, r0
   10c72:	mov	r0, r9
   10c74:	bl	1210c <__mdiff>
   10c78:	ldr	r2, [r0, #12]
   10c7a:	mov	fp, r0
   10c7c:	add.w	r3, r5, #48	; 0x30
   10c80:	cmp	r2, #0
   10c82:	bne.n	10d18 <_dtoa_r+0x9c0>
   10c84:	mov	r1, r0
   10c86:	mov	r0, r4
   10c88:	str	r3, [sp, #28]
   10c8a:	bl	120c8 <__mcmp>
   10c8e:	mov	r1, fp
   10c90:	str	r0, [sp, #20]
   10c92:	mov	r0, r9
   10c94:	bl	11c6c <_Bfree>
   10c98:	ldr	r2, [sp, #20]
   10c9a:	ldr	r3, [sp, #28]
   10c9c:	cbnz	r2, 10caa <_dtoa_r+0x952>
   10c9e:	ldr	r1, [sp, #0]
   10ca0:	cbnz	r1, 10caa <_dtoa_r+0x952>
   10ca2:	ldr	r1, [sp, #40]	; 0x28
   10ca4:	cmp	r1, #0
   10ca6:	beq.w	11114 <_dtoa_r+0xdbc>
   10caa:	cmp.w	sl, #0
   10cae:	blt.w	10e78 <_dtoa_r+0xb20>
   10cb2:	bne.n	10cc0 <_dtoa_r+0x968>
   10cb4:	ldr	r1, [sp, #0]
   10cb6:	cbnz	r1, 10cc0 <_dtoa_r+0x968>
   10cb8:	ldr	r1, [sp, #40]	; 0x28
   10cba:	cmp	r1, #0
   10cbc:	beq.w	10e78 <_dtoa_r+0xb20>
   10cc0:	cmp	r2, #0
   10cc2:	bgt.w	10f62 <_dtoa_r+0xc0a>
   10cc6:	ldr	r2, [sp, #32]
   10cc8:	strb	r3, [r7, #0]
   10cca:	add.w	sl, r7, #1
   10cce:	cmp	r7, r2
   10cd0:	mov	r5, sl
   10cd2:	beq.w	10f7a <_dtoa_r+0xc22>
   10cd6:	mov	r1, r4
   10cd8:	movs	r3, #0
   10cda:	movs	r2, #10
   10cdc:	mov	r0, r9
   10cde:	bl	11c80 <__multadd>
   10ce2:	cmp	r6, r8
   10ce4:	mov	r4, r0
   10ce6:	mov	r1, r6
   10ce8:	mov.w	r3, #0
   10cec:	mov.w	r2, #10
   10cf0:	mov	r0, r9
   10cf2:	beq.n	10d0c <_dtoa_r+0x9b4>
   10cf4:	bl	11c80 <__multadd>
   10cf8:	mov	r1, r8
   10cfa:	mov	r6, r0
   10cfc:	movs	r3, #0
   10cfe:	movs	r2, #10
   10d00:	mov	r0, r9
   10d02:	bl	11c80 <__multadd>
   10d06:	mov	r7, sl
   10d08:	mov	r8, r0
   10d0a:	b.n	10c56 <_dtoa_r+0x8fe>
   10d0c:	bl	11c80 <__multadd>
   10d10:	mov	r7, sl
   10d12:	mov	r6, r0
   10d14:	mov	r8, r0
   10d16:	b.n	10c56 <_dtoa_r+0x8fe>
   10d18:	mov	r1, r0
   10d1a:	mov	r0, r9
   10d1c:	str	r3, [sp, #20]
   10d1e:	bl	11c6c <_Bfree>
   10d22:	movs	r2, #1
   10d24:	ldr	r3, [sp, #20]
   10d26:	b.n	10caa <_dtoa_r+0x952>
   10d28:	ldr	r1, [sp, #24]
   10d2a:	mov	r0, r4
   10d2c:	bl	120c8 <__mcmp>
   10d30:	cmp	r0, #0
   10d32:	bge.w	10834 <_dtoa_r+0x4dc>
   10d36:	mov	r1, r4
   10d38:	ldr	r4, [sp, #16]
   10d3a:	movs	r3, #0
   10d3c:	subs	r4, #1
   10d3e:	movs	r2, #10
   10d40:	mov	r0, r9
   10d42:	str	r4, [sp, #16]
   10d44:	bl	11c80 <__multadd>
   10d48:	ldr	r3, [sp, #44]	; 0x2c
   10d4a:	mov	r4, r0
   10d4c:	cmp	r3, #0
   10d4e:	bne.w	10c14 <_dtoa_r+0x8bc>
   10d52:	ldr	r3, [sp, #56]	; 0x38
   10d54:	cmp	r3, #0
   10d56:	ble.w	11134 <_dtoa_r+0xddc>
   10d5a:	str	r3, [sp, #32]
   10d5c:	b.n	10844 <_dtoa_r+0x4ec>
   10d5e:	ldr	r4, [sp, #40]	; 0x28
   10d60:	b.n	107ac <_dtoa_r+0x454>
   10d62:	ldr	r3, [sp, #0]
   10d64:	cmp	r3, #2
   10d66:	ble.w	1083c <_dtoa_r+0x4e4>
   10d6a:	ldr	r3, [sp, #32]
   10d6c:	cmp	r3, #0
   10d6e:	bne.w	110ac <_dtoa_r+0xd54>
   10d72:	ldr	r1, [sp, #24]
   10d74:	movs	r2, #5
   10d76:	mov	r0, r9
   10d78:	bl	11c80 <__multadd>
   10d7c:	mov	r1, r0
   10d7e:	str	r0, [sp, #24]
   10d80:	mov	r0, r4
   10d82:	bl	120c8 <__mcmp>
   10d86:	cmp	r0, #0
   10d88:	str	r4, [sp, #40]	; 0x28
   10d8a:	ble.w	10bba <_dtoa_r+0x862>
   10d8e:	ldr	r2, [sp, #16]
   10d90:	ldr	r1, [sp, #36]	; 0x24
   10d92:	movs	r3, #49	; 0x31
   10d94:	adds	r2, #1
   10d96:	str	r2, [sp, #16]
   10d98:	strb	r3, [r1, #0]
   10d9a:	adds	r5, r1, #1
   10d9c:	b.n	10bc2 <_dtoa_r+0x86a>
   10d9e:	ldr	r2, [sp, #16]
   10da0:	adds	r2, #1
   10da2:	str	r2, [sp, #16]
   10da4:	ldr	r2, [sp, #36]	; 0x24
   10da6:	movs	r3, #49	; 0x31
   10da8:	strb	r3, [r2, #0]
   10daa:	b.n	108c6 <_dtoa_r+0x56e>
   10dac:	movs	r3, #1
   10dae:	str	r3, [sp, #44]	; 0x2c
   10db0:	b.n	10958 <_dtoa_r+0x600>
   10db2:	ldr.w	r9, [sp, #20]
   10db6:	b.n	106ee <_dtoa_r+0x396>
   10db8:	cmp.w	sl, #0
   10dbc:	bne.w	107d2 <_dtoa_r+0x47a>
   10dc0:	ubfx	r3, fp, #0, #20
   10dc4:	cmp	r3, #0
   10dc6:	bne.w	11046 <_dtoa_r+0xcee>
   10dca:	bic.w	r7, fp, #2147483648	; 0x80000000
   10dce:	lsrs	r7, r7, #20
   10dd0:	lsls	r7, r7, #20
   10dd2:	cbz	r7, 10de0 <_dtoa_r+0xa88>
   10dd4:	ldr	r3, [sp, #28]
   10dd6:	adds	r3, #1
   10dd8:	str	r3, [sp, #28]
   10dda:	add.w	r8, r8, #1
   10dde:	movs	r7, #1
   10de0:	ldr	r3, [sp, #48]	; 0x30
   10de2:	movs	r0, #1
   10de4:	cmp	r3, #0
   10de6:	beq.w	107e6 <_dtoa_r+0x48e>
   10dea:	b.n	107d4 <_dtoa_r+0x47c>
   10dec:	mov	r0, sl
   10dee:	bl	ac70 <__aeabi_i2d>
   10df2:	mov	r2, r6
   10df4:	mov	r3, r7
   10df6:	bl	ad3c <__aeabi_dmul>
   10dfa:	movs	r2, #0
   10dfc:	ldr	r3, [pc, #764]	; (110fc <_dtoa_r+0xda4>)
   10dfe:	bl	a9d8 <__adddf3>
   10e02:	mov	r4, r0
   10e04:	sub.w	r5, r1, #54525952	; 0x3400000
   10e08:	mov	r0, r6
   10e0a:	mov	r1, r7
   10e0c:	movs	r2, #0
   10e0e:	ldr	r3, [pc, #752]	; (11100 <_dtoa_r+0xda8>)
   10e10:	bl	a9d4 <__aeabi_dsub>
   10e14:	mov	r2, r4
   10e16:	mov	r3, r5
   10e18:	mov	r6, r0
   10e1a:	mov	r7, r1
   10e1c:	bl	b25c <__aeabi_dcmpgt>
   10e20:	cmp	r0, #0
   10e22:	bne.w	10f82 <_dtoa_r+0xc2a>
   10e26:	mov	r2, r4
   10e28:	add.w	r3, r5, #2147483648	; 0x80000000
   10e2c:	mov	r0, r6
   10e2e:	mov	r1, r7
   10e30:	bl	b220 <__aeabi_dcmplt>
   10e34:	cmp	r0, #0
   10e36:	beq.n	10ece <_dtoa_r+0xb76>
   10e38:	movs	r3, #0
   10e3a:	str	r3, [sp, #24]
   10e3c:	mov	r6, r3
   10e3e:	b.n	10bba <_dtoa_r+0x862>
   10e40:	ldr	r0, [sp, #36]	; 0x24
   10e42:	b.w	103ca <_dtoa_r+0x72>
   10e46:	ldr	r3, [sp, #24]
   10e48:	ldr	r2, [sp, #48]	; 0x30
   10e4a:	str	r7, [sp, #24]
   10e4c:	subs	r3, r7, r3
   10e4e:	add	r2, r3
   10e50:	str	r2, [sp, #48]	; 0x30
   10e52:	movs	r7, #0
   10e54:	b.n	10732 <_dtoa_r+0x3da>
   10e56:	vldr	d7, [sp, #64]	; 0x40
   10e5a:	mov.w	sl, #2
   10e5e:	vstr	d7, [sp, #72]	; 0x48
   10e62:	b.n	109e4 <_dtoa_r+0x68c>
   10e64:	mov	r4, r3
   10e66:	movs	r1, #0
   10e68:	str.w	r1, [r9, #68]	; 0x44
   10e6c:	b.n	10990 <_dtoa_r+0x638>
   10e6e:	movs	r4, #1
   10e70:	str	r4, [sp, #56]	; 0x38
   10e72:	str	r4, [sp, #32]
   10e74:	str	r4, [sp, #20]
   10e76:	b.n	10e66 <_dtoa_r+0xb0e>
   10e78:	cmp	r2, #0
   10e7a:	mov	sl, r3
   10e7c:	ble.n	10ea2 <_dtoa_r+0xb4a>
   10e7e:	mov	r1, r4
   10e80:	movs	r2, #1
   10e82:	mov	r0, r9
   10e84:	bl	12018 <__lshift>
   10e88:	ldr	r1, [sp, #24]
   10e8a:	mov	r4, r0
   10e8c:	bl	120c8 <__mcmp>
   10e90:	cmp	r0, #0
   10e92:	ble.w	11126 <_dtoa_r+0xdce>
   10e96:	cmp.w	sl, #57	; 0x39
   10e9a:	beq.w	110b0 <_dtoa_r+0xd58>
   10e9e:	add.w	sl, r5, #49	; 0x31
   10ea2:	mov	fp, r6
   10ea4:	strb.w	sl, [r7]
   10ea8:	adds	r5, r7, #1
   10eaa:	mov	r6, r8
   10eac:	str	r4, [sp, #40]	; 0x28
   10eae:	b.n	108c6 <_dtoa_r+0x56e>
   10eb0:	bne.n	10ebc <_dtoa_r+0xb64>
   10eb2:	tst.w	sl, #1
   10eb6:	beq.n	10ebc <_dtoa_r+0xb64>
   10eb8:	b.n	108a6 <_dtoa_r+0x54e>
   10eba:	mov	r5, r2
   10ebc:	ldrb.w	r3, [r5, #-1]
   10ec0:	cmp	r3, #48	; 0x30
   10ec2:	add.w	r2, r5, #4294967295
   10ec6:	beq.n	10eba <_dtoa_r+0xb62>
   10ec8:	b.n	108c6 <_dtoa_r+0x56e>
   10eca:	ldr.w	r8, [sp, #72]	; 0x48
   10ece:	ldrd	sl, fp, [sp, #64]	; 0x40
   10ed2:	b.w	1056c <_dtoa_r+0x214>
   10ed6:	ldr	r1, [sp, #36]	; 0x24
   10ed8:	movs	r2, #48	; 0x30
   10eda:	strb	r2, [r1, #0]
   10edc:	ldr	r2, [sp, #16]
   10ede:	ldrb.w	r4, [r5, #-1]
   10ee2:	adds	r2, #1
   10ee4:	str	r2, [sp, #16]
   10ee6:	b.n	106ea <_dtoa_r+0x392>
   10ee8:	ldr	r3, [sp, #16]
   10eea:	negs	r4, r3
   10eec:	cmp	r4, #0
   10eee:	beq.w	11058 <_dtoa_r+0xd00>
   10ef2:	ldr	r3, [pc, #528]	; (11104 <_dtoa_r+0xdac>)
   10ef4:	and.w	r2, r4, #15
   10ef8:	add.w	r3, r3, r2, lsl #3
   10efc:	ldrd	r2, r3, [r3]
   10f00:	ldrd	r0, r1, [sp, #64]	; 0x40
   10f04:	bl	ad3c <__aeabi_dmul>
   10f08:	asrs	r4, r4, #4
   10f0a:	mov	r6, r0
   10f0c:	mov	r7, r1
   10f0e:	beq.w	1113e <_dtoa_r+0xde6>
   10f12:	ldr	r5, [pc, #500]	; (11108 <_dtoa_r+0xdb0>)
   10f14:	mov.w	sl, #2
   10f18:	lsls	r2, r4, #31
   10f1a:	bpl.n	10f30 <_dtoa_r+0xbd8>
   10f1c:	mov	r0, r6
   10f1e:	mov	r1, r7
   10f20:	ldrd	r2, r3, [r5]
   10f24:	bl	ad3c <__aeabi_dmul>
   10f28:	add.w	sl, sl, #1
   10f2c:	mov	r6, r0
   10f2e:	mov	r7, r1
   10f30:	asrs	r4, r4, #1
   10f32:	add.w	r5, r5, #8
   10f36:	bne.n	10f18 <_dtoa_r+0xbc0>
   10f38:	b.n	10a18 <_dtoa_r+0x6c0>
   10f3a:	ldr	r1, [r6, #4]
   10f3c:	mov	r0, r9
   10f3e:	bl	11c20 <_Balloc>
   10f42:	ldr	r3, [r6, #16]
   10f44:	adds	r2, r3, #2
   10f46:	mov	r5, r0
   10f48:	lsls	r2, r2, #2
   10f4a:	add.w	r1, r6, #12
   10f4e:	adds	r0, #12
   10f50:	bl	82a4 <memcpy>
   10f54:	mov	r1, r5
   10f56:	movs	r2, #1
   10f58:	mov	r0, r9
   10f5a:	bl	12018 <__lshift>
   10f5e:	mov	r8, r0
   10f60:	b.n	10c44 <_dtoa_r+0x8ec>
   10f62:	cmp	r3, #57	; 0x39
   10f64:	beq.w	110b0 <_dtoa_r+0xd58>
   10f68:	add.w	sl, r3, #1
   10f6c:	mov	fp, r6
   10f6e:	strb.w	sl, [r7]
   10f72:	adds	r5, r7, #1
   10f74:	mov	r6, r8
   10f76:	str	r4, [sp, #40]	; 0x28
   10f78:	b.n	108c6 <_dtoa_r+0x56e>
   10f7a:	mov	fp, r6
   10f7c:	mov	sl, r3
   10f7e:	mov	r6, r8
   10f80:	b.n	1088e <_dtoa_r+0x536>
   10f82:	movs	r3, #0
   10f84:	str	r3, [sp, #24]
   10f86:	mov	r6, r3
   10f88:	b.n	10d8e <_dtoa_r+0xa36>
   10f8a:	ldr	r3, [sp, #72]	; 0x48
   10f8c:	ldr	r1, [pc, #372]	; (11104 <_dtoa_r+0xdac>)
   10f8e:	subs	r2, r3, #1
   10f90:	add.w	r1, r1, r2, lsl #3
   10f94:	mov	r3, r5
   10f96:	str	r2, [sp, #92]	; 0x5c
   10f98:	ldrd	r0, r1, [r1]
   10f9c:	mov	r2, r4
   10f9e:	bl	ad3c <__aeabi_dmul>
   10fa2:	strd	r0, r1, [sp, #80]	; 0x50
   10fa6:	mov	r1, r7
   10fa8:	mov	r0, r6
   10faa:	bl	b29c <__aeabi_d2iz>
   10fae:	mov	r4, r0
   10fb0:	bl	ac70 <__aeabi_i2d>
   10fb4:	mov	r3, r1
   10fb6:	mov	r2, r0
   10fb8:	mov	r1, r7
   10fba:	mov	r0, r6
   10fbc:	bl	a9d4 <__aeabi_dsub>
   10fc0:	ldr	r3, [sp, #72]	; 0x48
   10fc2:	mov	r7, r1
   10fc4:	ldr	r1, [sp, #36]	; 0x24
   10fc6:	adds	r4, #48	; 0x30
   10fc8:	cmp	r3, #1
   10fca:	mov	r6, r0
   10fcc:	strb	r4, [r1, #0]
   10fce:	add.w	r5, r1, #1
   10fd2:	beq.n	11016 <_dtoa_r+0xcbe>
   10fd4:	ldr	r3, [sp, #72]	; 0x48
   10fd6:	ldr	r2, [sp, #36]	; 0x24
   10fd8:	add	r3, r2
   10fda:	mov	sl, r3
   10fdc:	mov	fp, r5
   10fde:	movs	r2, #0
   10fe0:	ldr	r3, [pc, #296]	; (1110c <_dtoa_r+0xdb4>)
   10fe2:	mov	r0, r6
   10fe4:	mov	r1, r7
   10fe6:	bl	ad3c <__aeabi_dmul>
   10fea:	mov	r7, r1
   10fec:	mov	r6, r0
   10fee:	bl	b29c <__aeabi_d2iz>
   10ff2:	mov	r4, r0
   10ff4:	bl	ac70 <__aeabi_i2d>
   10ff8:	adds	r4, #48	; 0x30
   10ffa:	mov	r2, r0
   10ffc:	mov	r3, r1
   10ffe:	mov	r0, r6
   11000:	mov	r1, r7
   11002:	bl	a9d4 <__aeabi_dsub>
   11006:	strb.w	r4, [fp], #1
   1100a:	cmp	sl, fp
   1100c:	mov	r6, r0
   1100e:	mov	r7, r1
   11010:	bne.n	10fde <_dtoa_r+0xc86>
   11012:	ldr	r3, [sp, #92]	; 0x5c
   11014:	add	r5, r3
   11016:	movs	r2, #0
   11018:	ldr	r3, [pc, #244]	; (11110 <_dtoa_r+0xdb8>)
   1101a:	ldrd	r0, r1, [sp, #80]	; 0x50
   1101e:	bl	a9d8 <__adddf3>
   11022:	mov	r2, r6
   11024:	mov	r3, r7
   11026:	bl	b220 <__aeabi_dcmplt>
   1102a:	cmp	r0, #0
   1102c:	beq.n	110c0 <_dtoa_r+0xd68>
   1102e:	ldr	r3, [sp, #88]	; 0x58
   11030:	str	r3, [sp, #16]
   11032:	ldrb.w	r4, [r5, #-1]
   11036:	b.w	106d2 <_dtoa_r+0x37a>
   1103a:	ldr	r3, [sp, #28]
   1103c:	ldr	r2, [sp, #32]
   1103e:	subs	r5, r3, r2
   11040:	movs	r3, #0
   11042:	b.w	1073e <_dtoa_r+0x3e6>
   11046:	movs	r7, #0
   11048:	b.n	10de0 <_dtoa_r+0xa88>
   1104a:	ldr	r3, [sp, #96]	; 0x60
   1104c:	ldr	r7, [sp, #24]
   1104e:	ldr	r5, [sp, #28]
   11050:	rsb	r3, r3, #54	; 0x36
   11054:	b.w	1073e <_dtoa_r+0x3e6>
   11058:	ldrd	r6, r7, [sp, #64]	; 0x40
   1105c:	mov.w	sl, #2
   11060:	b.n	10a18 <_dtoa_r+0x6c0>
   11062:	ldr	r3, [sp, #32]
   11064:	cmp	r3, #0
   11066:	beq.w	10dec <_dtoa_r+0xa94>
   1106a:	ldr	r3, [sp, #56]	; 0x38
   1106c:	cmp	r3, #0
   1106e:	ble.w	10ece <_dtoa_r+0xb76>
   11072:	movs	r2, #0
   11074:	ldr	r3, [pc, #148]	; (1110c <_dtoa_r+0xdb4>)
   11076:	mov	r0, r6
   11078:	mov	r1, r7
   1107a:	bl	ad3c <__aeabi_dmul>
   1107e:	mov	r6, r0
   11080:	mov	r7, r1
   11082:	add.w	r0, sl, #1
   11086:	bl	ac70 <__aeabi_i2d>
   1108a:	mov	r2, r6
   1108c:	mov	r3, r7
   1108e:	bl	ad3c <__aeabi_dmul>
   11092:	movs	r2, #0
   11094:	ldr	r3, [pc, #100]	; (110fc <_dtoa_r+0xda4>)
   11096:	bl	a9d8 <__adddf3>
   1109a:	ldr	r2, [sp, #16]
   1109c:	ldr	r3, [sp, #56]	; 0x38
   1109e:	str	r3, [sp, #72]	; 0x48
   110a0:	subs	r2, #1
   110a2:	mov	r4, r0
   110a4:	sub.w	r5, r1, #54525952	; 0x3400000
   110a8:	str	r2, [sp, #88]	; 0x58
   110aa:	b.n	10a5a <_dtoa_r+0x702>
   110ac:	str	r4, [sp, #40]	; 0x28
   110ae:	b.n	10bba <_dtoa_r+0x862>
   110b0:	movs	r2, #57	; 0x39
   110b2:	mov	fp, r6
   110b4:	str	r4, [sp, #40]	; 0x28
   110b6:	mov	r6, r8
   110b8:	strb	r2, [r7, #0]
   110ba:	adds	r5, r7, #1
   110bc:	b.w	108aa <_dtoa_r+0x552>
   110c0:	ldrd	r2, r3, [sp, #80]	; 0x50
   110c4:	movs	r0, #0
   110c6:	ldr	r1, [pc, #72]	; (11110 <_dtoa_r+0xdb8>)
   110c8:	bl	a9d4 <__aeabi_dsub>
   110cc:	mov	r2, r6
   110ce:	mov	r3, r7
   110d0:	bl	b25c <__aeabi_dcmpgt>
   110d4:	cbnz	r0, 110da <_dtoa_r+0xd82>
   110d6:	b.n	10ece <_dtoa_r+0xb76>
   110d8:	mov	r5, r2
   110da:	ldrb.w	r3, [r5, #-1]
   110de:	cmp	r3, #48	; 0x30
   110e0:	add.w	r2, r5, #4294967295
   110e4:	beq.n	110d8 <_dtoa_r+0xd80>
   110e6:	b.n	10b5c <_dtoa_r+0x804>
   110e8:	ldr	r3, [sp, #88]	; 0x58
   110ea:	str	r3, [sp, #16]
   110ec:	b.w	106d2 <_dtoa_r+0x37a>
   110f0:	cmp.w	sl, #0
   110f4:	bne.w	10bf0 <_dtoa_r+0x898>
   110f8:	b.n	10dc0 <_dtoa_r+0xa68>
   110fa:	nop
   110fc:	.word	0x401c0000
   11100:	.word	0x40140000
   11104:	.word	0x00013be8
   11108:	.word	0x00013cb0
   1110c:	.word	0x40240000
   11110:	.word	0x3fe00000
   11114:	cmp	r3, #57	; 0x39
   11116:	mov	fp, sl
   11118:	mov	sl, r3
   1111a:	beq.n	110b0 <_dtoa_r+0xd58>
   1111c:	cmp.w	fp, #0
   11120:	bgt.w	10e9e <_dtoa_r+0xb46>
   11124:	b.n	10ea2 <_dtoa_r+0xb4a>
   11126:	bne.w	10ea2 <_dtoa_r+0xb4a>
   1112a:	tst.w	sl, #1
   1112e:	beq.w	10ea2 <_dtoa_r+0xb4a>
   11132:	b.n	10e96 <_dtoa_r+0xb3e>
   11134:	ldr	r3, [sp, #0]
   11136:	cmp	r3, #2
   11138:	bgt.n	11186 <_dtoa_r+0xe2e>
   1113a:	ldr	r3, [sp, #56]	; 0x38
   1113c:	b.n	10d5a <_dtoa_r+0xa02>
   1113e:	mov.w	sl, #2
   11142:	b.n	10a18 <_dtoa_r+0x6c0>
   11144:	ldr	r3, [sp, #0]
   11146:	cmp	r3, #2
   11148:	bgt.n	11186 <_dtoa_r+0xe2e>
   1114a:	ldr	r3, [sp, #56]	; 0x38
   1114c:	b.n	10c2a <_dtoa_r+0x8d2>
   1114e:	movs	r4, #0
   11150:	str.w	r4, [r9, #68]	; 0x44
   11154:	mov	r1, r4
   11156:	mov	r0, r9
   11158:	bl	11c20 <_Balloc>
   1115c:	mov.w	r3, #4294967295
   11160:	str	r3, [sp, #32]
   11162:	str	r3, [sp, #56]	; 0x38
   11164:	movs	r3, #1
   11166:	str	r0, [sp, #36]	; 0x24
   11168:	str	r4, [sp, #20]
   1116a:	str.w	r0, [r9, #64]	; 0x40
   1116e:	str	r3, [sp, #44]	; 0x2c
   11170:	b.w	1056c <_dtoa_r+0x214>
   11174:	beq.w	10808 <_dtoa_r+0x4b0>
   11178:	rsb	r0, r0, #60	; 0x3c
   1117c:	b.w	107fe <_dtoa_r+0x4a6>
   11180:	movs	r6, #1
   11182:	b.w	104fe <_dtoa_r+0x1a6>
   11186:	ldr	r3, [sp, #56]	; 0x38
   11188:	str	r3, [sp, #32]
   1118a:	b.n	10d6a <_dtoa_r+0xa12>

0001118c <__libc_fini_array>:
   1118c:	push	{r3, r4, r5, lr}
   1118e:	ldr	r5, [pc, #28]	; (111ac <__libc_fini_array+0x20>)
   11190:	ldr	r4, [pc, #28]	; (111b0 <__libc_fini_array+0x24>)
   11192:	subs	r4, r5, r4
   11194:	asrs	r4, r4, #2
   11196:	beq.n	111a4 <__libc_fini_array+0x18>
   11198:	subs	r4, #1
   1119a:	ldr.w	r3, [r5, #-4]!
   1119e:	blx	r3
   111a0:	cmp	r4, #0
   111a2:	bne.n	11198 <__libc_fini_array+0xc>
   111a4:	ldmia.w	sp!, {r3, r4, r5, lr}
   111a8:	b.w	13d48 <__init_array_end>
	...

000111b4 <_malloc_trim_r>:
   111b4:	push	{r3, r4, r5, r6, r7, lr}
   111b6:	ldr	r7, [pc, #140]	; (11244 <_malloc_trim_r+0x90>)
   111b8:	mov	r4, r1
   111ba:	mov	r6, r0
   111bc:	bl	c2f8 <__malloc_lock>
   111c0:	ldr	r3, [r7, #8]
   111c2:	ldr	r5, [r3, #4]
   111c4:	bic.w	r5, r5, #3
   111c8:	subs	r1, r5, r4
   111ca:	addw	r1, r1, #4079	; 0xfef
   111ce:	bic.w	r1, r1, #4080	; 0xff0
   111d2:	bic.w	r1, r1, #15
   111d6:	sub.w	r4, r1, #4096	; 0x1000
   111da:	cmp.w	r4, #4096	; 0x1000
   111de:	blt.n	111f0 <_malloc_trim_r+0x3c>
   111e0:	movs	r1, #0
   111e2:	mov	r0, r6
   111e4:	bl	c6e0 <_sbrk_r>
   111e8:	ldr	r3, [r7, #8]
   111ea:	add	r3, r5
   111ec:	cmp	r0, r3
   111ee:	beq.n	111fa <_malloc_trim_r+0x46>
   111f0:	mov	r0, r6
   111f2:	bl	c2fc <__malloc_unlock>
   111f6:	movs	r0, #0
   111f8:	pop	{r3, r4, r5, r6, r7, pc}
   111fa:	negs	r1, r4
   111fc:	mov	r0, r6
   111fe:	bl	c6e0 <_sbrk_r>
   11202:	adds	r0, #1
   11204:	beq.n	11222 <_malloc_trim_r+0x6e>
   11206:	ldr	r3, [pc, #64]	; (11248 <_malloc_trim_r+0x94>)
   11208:	ldr	r2, [r7, #8]
   1120a:	ldr	r1, [r3, #0]
   1120c:	subs	r5, r5, r4
   1120e:	orr.w	r5, r5, #1
   11212:	mov	r0, r6
   11214:	subs	r1, r1, r4
   11216:	str	r5, [r2, #4]
   11218:	str	r1, [r3, #0]
   1121a:	bl	c2fc <__malloc_unlock>
   1121e:	movs	r0, #1
   11220:	pop	{r3, r4, r5, r6, r7, pc}
   11222:	movs	r1, #0
   11224:	mov	r0, r6
   11226:	bl	c6e0 <_sbrk_r>
   1122a:	ldr	r2, [r7, #8]
   1122c:	subs	r3, r0, r2
   1122e:	cmp	r3, #15
   11230:	ble.n	111f0 <_malloc_trim_r+0x3c>
   11232:	ldr	r4, [pc, #24]	; (1124c <_malloc_trim_r+0x98>)
   11234:	ldr	r1, [pc, #16]	; (11248 <_malloc_trim_r+0x94>)
   11236:	ldr	r4, [r4, #0]
   11238:	orr.w	r3, r3, #1
   1123c:	subs	r0, r0, r4
   1123e:	str	r3, [r2, #4]
   11240:	str	r0, [r1, #0]
   11242:	b.n	111f0 <_malloc_trim_r+0x3c>
   11244:	.word	0x20014d70
   11248:	.word	0x2001af24
   1124c:	.word	0x2001517c

00011250 <_free_r>:
   11250:	cmp	r1, #0
   11252:	beq.n	112e0 <_free_r+0x90>
   11254:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11258:	mov	r5, r1
   1125a:	mov	r8, r0
   1125c:	bl	c2f8 <__malloc_lock>
   11260:	ldr.w	r7, [r5, #-4]
   11264:	ldr	r1, [pc, #424]	; (11410 <_free_r+0x1c0>)
   11266:	bic.w	r3, r7, #1
   1126a:	sub.w	r4, r5, #8
   1126e:	adds	r2, r4, r3
   11270:	ldr	r6, [r1, #8]
   11272:	ldr	r0, [r2, #4]
   11274:	cmp	r2, r6
   11276:	bic.w	r0, r0, #3
   1127a:	beq.n	11342 <_free_r+0xf2>
   1127c:	lsls	r6, r7, #31
   1127e:	str	r0, [r2, #4]
   11280:	bmi.n	1129a <_free_r+0x4a>
   11282:	ldr.w	r7, [r5, #-8]
   11286:	subs	r4, r4, r7
   11288:	add.w	lr, r1, #8
   1128c:	ldr	r5, [r4, #8]
   1128e:	cmp	r5, lr
   11290:	add	r3, r7
   11292:	beq.n	11374 <_free_r+0x124>
   11294:	ldr	r7, [r4, #12]
   11296:	str	r7, [r5, #12]
   11298:	str	r5, [r7, #8]
   1129a:	adds	r5, r2, r0
   1129c:	ldr	r5, [r5, #4]
   1129e:	lsls	r5, r5, #31
   112a0:	bpl.n	11328 <_free_r+0xd8>
   112a2:	orr.w	r2, r3, #1
   112a6:	str	r2, [r4, #4]
   112a8:	str	r3, [r4, r3]
   112aa:	cmp.w	r3, #512	; 0x200
   112ae:	bcs.n	112e2 <_free_r+0x92>
   112b0:	lsrs	r3, r3, #3
   112b2:	adds	r2, r3, #1
   112b4:	ldr	r5, [r1, #4]
   112b6:	ldr.w	r7, [r1, r2, lsl #3]
   112ba:	str	r7, [r4, #8]
   112bc:	movs	r0, #1
   112be:	asrs	r3, r3, #2
   112c0:	lsl.w	r3, r0, r3
   112c4:	add.w	r0, r1, r2, lsl #3
   112c8:	orrs	r5, r3
   112ca:	subs	r0, #8
   112cc:	str	r0, [r4, #12]
   112ce:	str	r5, [r1, #4]
   112d0:	str.w	r4, [r1, r2, lsl #3]
   112d4:	str	r4, [r7, #12]
   112d6:	mov	r0, r8
   112d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   112dc:	b.w	c2fc <__malloc_unlock>
   112e0:	bx	lr
   112e2:	lsrs	r2, r3, #9
   112e4:	cmp	r2, #4
   112e6:	bhi.n	11390 <_free_r+0x140>
   112e8:	lsrs	r2, r3, #6
   112ea:	add.w	r7, r2, #57	; 0x39
   112ee:	lsls	r7, r7, #1
   112f0:	add.w	r5, r2, #56	; 0x38
   112f4:	add.w	r0, r1, r7, lsl #2
   112f8:	ldr.w	r2, [r1, r7, lsl #2]
   112fc:	ldr	r1, [pc, #272]	; (11410 <_free_r+0x1c0>)
   112fe:	subs	r0, #8
   11300:	cmp	r0, r2
   11302:	beq.n	113a0 <_free_r+0x150>
   11304:	ldr	r1, [r2, #4]
   11306:	bic.w	r1, r1, #3
   1130a:	cmp	r3, r1
   1130c:	bcs.n	11314 <_free_r+0xc4>
   1130e:	ldr	r2, [r2, #8]
   11310:	cmp	r0, r2
   11312:	bne.n	11304 <_free_r+0xb4>
   11314:	ldr	r0, [r2, #12]
   11316:	str	r0, [r4, #12]
   11318:	str	r2, [r4, #8]
   1131a:	str	r4, [r0, #8]
   1131c:	str	r4, [r2, #12]
   1131e:	mov	r0, r8
   11320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11324:	b.w	c2fc <__malloc_unlock>
   11328:	ldr	r5, [r2, #8]
   1132a:	ldr	r7, [pc, #232]	; (11414 <_free_r+0x1c4>)
   1132c:	cmp	r5, r7
   1132e:	add	r3, r0
   11330:	beq.n	113b2 <_free_r+0x162>
   11332:	ldr	r0, [r2, #12]
   11334:	str	r0, [r5, #12]
   11336:	orr.w	r2, r3, #1
   1133a:	str	r5, [r0, #8]
   1133c:	str	r2, [r4, #4]
   1133e:	str	r3, [r4, r3]
   11340:	b.n	112aa <_free_r+0x5a>
   11342:	lsls	r7, r7, #31
   11344:	add	r3, r0
   11346:	bmi.n	11358 <_free_r+0x108>
   11348:	ldr.w	r2, [r5, #-8]
   1134c:	subs	r4, r4, r2
   1134e:	add	r3, r2
   11350:	ldr	r0, [r4, #8]
   11352:	ldr	r2, [r4, #12]
   11354:	str	r2, [r0, #12]
   11356:	str	r0, [r2, #8]
   11358:	ldr	r2, [pc, #188]	; (11418 <_free_r+0x1c8>)
   1135a:	ldr	r2, [r2, #0]
   1135c:	orr.w	r0, r3, #1
   11360:	cmp	r3, r2
   11362:	str	r0, [r4, #4]
   11364:	str	r4, [r1, #8]
   11366:	bcc.n	112d6 <_free_r+0x86>
   11368:	ldr	r3, [pc, #176]	; (1141c <_free_r+0x1cc>)
   1136a:	mov	r0, r8
   1136c:	ldr	r1, [r3, #0]
   1136e:	bl	111b4 <_malloc_trim_r>
   11372:	b.n	112d6 <_free_r+0x86>
   11374:	adds	r1, r2, r0
   11376:	ldr	r1, [r1, #4]
   11378:	lsls	r1, r1, #31
   1137a:	bmi.n	11406 <_free_r+0x1b6>
   1137c:	ldr	r1, [r2, #8]
   1137e:	ldr	r2, [r2, #12]
   11380:	str	r2, [r1, #12]
   11382:	add	r3, r0
   11384:	orr.w	r0, r3, #1
   11388:	str	r1, [r2, #8]
   1138a:	str	r0, [r4, #4]
   1138c:	str	r3, [r4, r3]
   1138e:	b.n	112d6 <_free_r+0x86>
   11390:	cmp	r2, #20
   11392:	bhi.n	113c4 <_free_r+0x174>
   11394:	add.w	r7, r2, #92	; 0x5c
   11398:	lsls	r7, r7, #1
   1139a:	add.w	r5, r2, #91	; 0x5b
   1139e:	b.n	112f4 <_free_r+0xa4>
   113a0:	asrs	r2, r5, #2
   113a2:	ldr	r3, [r1, #4]
   113a4:	movs	r5, #1
   113a6:	lsl.w	r2, r5, r2
   113aa:	orrs	r3, r2
   113ac:	str	r3, [r1, #4]
   113ae:	mov	r2, r0
   113b0:	b.n	11316 <_free_r+0xc6>
   113b2:	orr.w	r2, r3, #1
   113b6:	str	r4, [r1, #20]
   113b8:	str	r4, [r1, #16]
   113ba:	str	r5, [r4, #12]
   113bc:	str	r5, [r4, #8]
   113be:	str	r2, [r4, #4]
   113c0:	str	r3, [r4, r3]
   113c2:	b.n	112d6 <_free_r+0x86>
   113c4:	cmp	r2, #84	; 0x54
   113c6:	bhi.n	113d6 <_free_r+0x186>
   113c8:	lsrs	r2, r3, #12
   113ca:	add.w	r7, r2, #111	; 0x6f
   113ce:	lsls	r7, r7, #1
   113d0:	add.w	r5, r2, #110	; 0x6e
   113d4:	b.n	112f4 <_free_r+0xa4>
   113d6:	cmp.w	r2, #340	; 0x154
   113da:	bhi.n	113ea <_free_r+0x19a>
   113dc:	lsrs	r2, r3, #15
   113de:	add.w	r7, r2, #120	; 0x78
   113e2:	lsls	r7, r7, #1
   113e4:	add.w	r5, r2, #119	; 0x77
   113e8:	b.n	112f4 <_free_r+0xa4>
   113ea:	movw	r0, #1364	; 0x554
   113ee:	cmp	r2, r0
   113f0:	bhi.n	11400 <_free_r+0x1b0>
   113f2:	lsrs	r2, r3, #18
   113f4:	add.w	r7, r2, #125	; 0x7d
   113f8:	lsls	r7, r7, #1
   113fa:	add.w	r5, r2, #124	; 0x7c
   113fe:	b.n	112f4 <_free_r+0xa4>
   11400:	movs	r7, #254	; 0xfe
   11402:	movs	r5, #126	; 0x7e
   11404:	b.n	112f4 <_free_r+0xa4>
   11406:	orr.w	r2, r3, #1
   1140a:	str	r2, [r4, #4]
   1140c:	str	r3, [r4, r3]
   1140e:	b.n	112d6 <_free_r+0x86>
   11410:	.word	0x20014d70
   11414:	.word	0x20014d78
   11418:	.word	0x20015178
   1141c:	.word	0x2001af20

00011420 <rshift>:
   11420:	ldr	r2, [r0, #16]
   11422:	asrs	r3, r1, #5
   11424:	cmp	r3, r2
   11426:	bge.n	11486 <rshift+0x66>
   11428:	push	{r4, r5, r6, r7, lr}
   1142a:	ands.w	r1, r1, #31
   1142e:	add.w	r6, r0, #20
   11432:	add.w	r2, r6, r2, lsl #2
   11436:	add.w	lr, r6, r3, lsl #2
   1143a:	beq.n	11490 <rshift+0x70>
   1143c:	ldr.w	r3, [r6, r3, lsl #2]
   11440:	add.w	r5, lr, #4
   11444:	cmp	r2, r5
   11446:	lsr.w	r4, r3, r1
   1144a:	rsb	ip, r1, #32
   1144e:	bls.n	114c4 <rshift+0xa4>
   11450:	add.w	r7, r0, #16
   11454:	ldr	r3, [r5, #0]
   11456:	lsl.w	r3, r3, ip
   1145a:	orrs	r3, r4
   1145c:	str.w	r3, [r7, #4]!
   11460:	ldr.w	r3, [r5], #4
   11464:	cmp	r2, r5
   11466:	lsr.w	r4, r3, r1
   1146a:	bhi.n	11454 <rshift+0x34>
   1146c:	rsb	r2, lr, r2
   11470:	subs	r2, #5
   11472:	bic.w	r2, r2, #3
   11476:	adds	r2, #4
   11478:	add	r2, r6
   1147a:	str	r4, [r2, #0]
   1147c:	cbz	r4, 11480 <rshift+0x60>
   1147e:	adds	r2, #4
   11480:	subs	r3, r2, r6
   11482:	asrs	r3, r3, #2
   11484:	b.n	114b4 <rshift+0x94>
   11486:	movs	r3, #0
   11488:	str	r3, [r0, #16]
   1148a:	movs	r3, #0
   1148c:	str	r3, [r0, #20]
   1148e:	bx	lr
   11490:	cmp	r2, lr
   11492:	bls.n	114ba <rshift+0x9a>
   11494:	add.w	r4, r0, #16
   11498:	mov	r1, lr
   1149a:	ldr.w	r5, [r1], #4
   1149e:	str.w	r5, [r4, #4]!
   114a2:	cmp	r2, r1
   114a4:	bhi.n	1149a <rshift+0x7a>
   114a6:	mvn.w	r3, lr
   114aa:	add	r3, r2
   114ac:	bic.w	r3, r3, #3
   114b0:	adds	r3, #4
   114b2:	asrs	r3, r3, #2
   114b4:	str	r3, [r0, #16]
   114b6:	cbz	r3, 114be <rshift+0x9e>
   114b8:	pop	{r4, r5, r6, r7, pc}
   114ba:	movs	r3, #0
   114bc:	str	r3, [r0, #16]
   114be:	movs	r3, #0
   114c0:	str	r3, [r0, #20]
   114c2:	pop	{r4, r5, r6, r7, pc}
   114c4:	mov	r2, r6
   114c6:	b.n	1147a <rshift+0x5a>

000114c8 <__gethex>:
   114c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114cc:	sub	sp, #44	; 0x2c
   114ce:	mov	r9, r1
   114d0:	str	r0, [sp, #20]
   114d2:	ldr	r0, [sp, #88]	; 0x58
   114d4:	str	r2, [sp, #12]
   114d6:	str	r3, [sp, #32]
   114d8:	bl	11ba4 <__localeconv_l>
   114dc:	ldr	r3, [r0, #0]
   114de:	str	r3, [sp, #8]
   114e0:	mov	r0, r3
   114e2:	mov	r4, r3
   114e4:	bl	c940 <strlen>
   114e8:	ldr.w	r3, [r9]
   114ec:	str	r0, [sp, #0]
   114ee:	ldrb	r2, [r3, #2]
   114f0:	adds	r1, r4, r0
   114f2:	cmp	r2, #48	; 0x30
   114f4:	ldrb.w	fp, [r1, #-1]
   114f8:	bne.w	1184e <__gethex+0x386>
   114fc:	adds	r3, #3
   114fe:	mov.w	r8, #0
   11502:	mov	r4, r3
   11504:	ldrb.w	r2, [r3], #1
   11508:	cmp	r2, #48	; 0x30
   1150a:	add.w	r8, r8, #1
   1150e:	beq.n	11502 <__gethex+0x3a>
   11510:	ldr	r6, [pc, #712]	; (117dc <__gethex+0x314>)
   11512:	ldrb	r3, [r6, r2]
   11514:	cmp	r3, #0
   11516:	beq.w	116fa <__gethex+0x232>
   1151a:	ldrb	r3, [r4, #0]
   1151c:	mov.w	sl, #0
   11520:	ldrb	r3, [r6, r3]
   11522:	mov	r5, sl
   11524:	mov	r7, r4
   11526:	cbz	r3, 11532 <__gethex+0x6a>
   11528:	ldrb.w	r3, [r7, #1]!
   1152c:	ldrb	r3, [r6, r3]
   1152e:	cmp	r3, #0
   11530:	bne.n	11528 <__gethex+0x60>
   11532:	ldr	r2, [sp, #0]
   11534:	ldr	r1, [sp, #8]
   11536:	mov	r0, r7
   11538:	bl	ca1c <strncmp>
   1153c:	cmp	r0, #0
   1153e:	beq.w	11666 <__gethex+0x19e>
   11542:	ldrb	r3, [r7, #0]
   11544:	cmp	r5, #0
   11546:	beq.w	1182c <__gethex+0x364>
   1154a:	subs	r5, r5, r7
   1154c:	lsls	r2, r5, #2
   1154e:	str	r2, [sp, #4]
   11550:	cmp	r3, #80	; 0x50
   11552:	beq.w	11678 <__gethex+0x1b0>
   11556:	cmp	r3, #112	; 0x70
   11558:	beq.w	11678 <__gethex+0x1b0>
   1155c:	mov	r5, r7
   1155e:	str.w	r7, [r9]
   11562:	cmp.w	sl, #0
   11566:	bne.w	116d8 <__gethex+0x210>
   1156a:	subs	r3, r5, r4
   1156c:	subs	r3, #1
   1156e:	cmp	r3, #7
   11570:	mov	r1, sl
   11572:	ble.n	1157e <__gethex+0xb6>
   11574:	asrs	r3, r3, #1
   11576:	cmp	r3, #7
   11578:	add.w	r1, r1, #1
   1157c:	bgt.n	11574 <__gethex+0xac>
   1157e:	ldr	r0, [sp, #20]
   11580:	bl	11c20 <_Balloc>
   11584:	mov	r3, r0
   11586:	adds	r3, #20
   11588:	cmp	r5, r4
   1158a:	str	r0, [sp, #16]
   1158c:	str	r3, [sp, #28]
   1158e:	bls.w	11938 <__gethex+0x470>
   11592:	mov	r9, r3
   11594:	ldr	r3, [sp, #0]
   11596:	mov.w	r8, #0
   1159a:	rsb	r3, r3, #1
   1159e:	mov	r7, r8
   115a0:	str	r3, [sp, #24]
   115a2:	b.n	115c4 <__gethex+0xfc>
   115a4:	cmp	r7, #32
   115a6:	beq.w	116e8 <__gethex+0x220>
   115aa:	mov	r2, r7
   115ac:	adds	r7, #4
   115ae:	ldrb.w	r3, [r5, #-1]
   115b2:	ldrb	r3, [r6, r3]
   115b4:	mov	r5, sl
   115b6:	and.w	r3, r3, #15
   115ba:	lsls	r3, r2
   115bc:	cmp	r5, r4
   115be:	orr.w	r8, r8, r3
   115c2:	bls.n	115f0 <__gethex+0x128>
   115c4:	ldrb.w	r3, [r5, #-1]
   115c8:	cmp	r3, fp
   115ca:	add.w	sl, r5, #4294967295
   115ce:	bne.n	115a4 <__gethex+0xdc>
   115d0:	ldr	r3, [sp, #24]
   115d2:	add	r3, sl
   115d4:	cmp	r3, r4
   115d6:	bcc.n	115a4 <__gethex+0xdc>
   115d8:	mov	r0, r3
   115da:	ldr	r2, [sp, #0]
   115dc:	ldr	r1, [sp, #8]
   115de:	str	r3, [sp, #36]	; 0x24
   115e0:	bl	ca1c <strncmp>
   115e4:	ldr	r3, [sp, #36]	; 0x24
   115e6:	cmp	r0, #0
   115e8:	bne.n	115a4 <__gethex+0xdc>
   115ea:	mov	r5, r3
   115ec:	cmp	r5, r4
   115ee:	bhi.n	115c4 <__gethex+0xfc>
   115f0:	str.w	r8, [r9], #4
   115f4:	ldr	r3, [sp, #28]
   115f6:	ldr	r2, [sp, #16]
   115f8:	rsb	r9, r3, r9
   115fc:	mov.w	r3, r9, asr #2
   11600:	str	r3, [r2, #16]
   11602:	mov	r0, r8
   11604:	mov.w	r9, r3, lsl #5
   11608:	bl	11d98 <__hi0bits>
   1160c:	ldr	r3, [sp, #12]
   1160e:	ldr	r6, [r3, #0]
   11610:	rsb	r0, r0, r9
   11614:	cmp	r0, r6
   11616:	bgt.w	117e0 <__gethex+0x318>
   1161a:	blt.w	11830 <__gethex+0x368>
   1161e:	movs	r7, #0
   11620:	ldr	r3, [sp, #12]
   11622:	ldr	r2, [sp, #4]
   11624:	ldr	r3, [r3, #8]
   11626:	cmp	r2, r3
   11628:	bgt.w	1175a <__gethex+0x292>
   1162c:	ldr	r0, [sp, #12]
   1162e:	ldr	r1, [sp, #4]
   11630:	ldr	r3, [r0, #4]
   11632:	cmp	r1, r3
   11634:	bge.w	117a2 <__gethex+0x2da>
   11638:	subs	r5, r3, r1
   1163a:	cmp	r6, r5
   1163c:	bgt.w	1185e <__gethex+0x396>
   11640:	ldr	r2, [r0, #12]
   11642:	cmp	r2, #2
   11644:	beq.w	11946 <__gethex+0x47e>
   11648:	cmp	r2, #3
   1164a:	beq.w	11906 <__gethex+0x43e>
   1164e:	cmp	r2, #1
   11650:	beq.w	1194e <__gethex+0x486>
   11654:	ldr	r0, [sp, #20]
   11656:	ldr	r1, [sp, #16]
   11658:	bl	11c6c <_Bfree>
   1165c:	ldr	r2, [sp, #80]	; 0x50
   1165e:	movs	r3, #0
   11660:	str	r3, [r2, #0]
   11662:	movs	r0, #80	; 0x50
   11664:	b.n	116e2 <__gethex+0x21a>
   11666:	cmp	r5, #0
   11668:	beq.w	1189e <__gethex+0x3d6>
   1166c:	ldrb	r3, [r7, #0]
   1166e:	b.n	1154a <__gethex+0x82>
   11670:	movs	r3, #0
   11672:	str	r3, [sp, #4]
   11674:	mov.w	sl, #1
   11678:	ldrb	r3, [r7, #1]
   1167a:	cmp	r3, #43	; 0x2b
   1167c:	beq.w	117d8 <__gethex+0x310>
   11680:	cmp	r3, #45	; 0x2d
   11682:	beq.n	11770 <__gethex+0x2a8>
   11684:	adds	r1, r7, #1
   11686:	movs	r5, #0
   11688:	ldrb	r3, [r6, r3]
   1168a:	ldr	r0, [pc, #336]	; (117dc <__gethex+0x314>)
   1168c:	subs	r2, r3, #1
   1168e:	cmp	r2, #24
   11690:	bhi.w	1155c <__gethex+0x94>
   11694:	ldrb	r2, [r1, #1]
   11696:	ldrb	r2, [r0, r2]
   11698:	subs	r0, r2, #1
   1169a:	cmp	r0, #24
   1169c:	sub.w	r3, r3, #16
   116a0:	add.w	r1, r1, #1
   116a4:	bhi.n	116be <__gethex+0x1f6>
   116a6:	ldrb.w	r0, [r1, #1]!
   116aa:	add.w	r3, r3, r3, lsl #2
   116ae:	add.w	r3, r2, r3, lsl #1
   116b2:	ldrb	r2, [r6, r0]
   116b4:	subs	r0, r2, #1
   116b6:	cmp	r0, #24
   116b8:	sub.w	r3, r3, #16
   116bc:	bls.n	116a6 <__gethex+0x1de>
   116be:	cbz	r5, 116c2 <__gethex+0x1fa>
   116c0:	negs	r3, r3
   116c2:	ldr	r2, [sp, #4]
   116c4:	mov	r5, r7
   116c6:	add	r2, r3
   116c8:	mov	r7, r1
   116ca:	str	r2, [sp, #4]
   116cc:	str.w	r7, [r9]
   116d0:	cmp.w	sl, #0
   116d4:	beq.w	1156a <__gethex+0xa2>
   116d8:	cmp.w	r8, #0
   116dc:	ite	eq
   116de:	moveq	r0, #6
   116e0:	movne	r0, #0
   116e2:	add	sp, #44	; 0x2c
   116e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116e8:	str.w	r8, [r9]
   116ec:	mov.w	r8, #0
   116f0:	add.w	r9, r9, #4
   116f4:	mov	r2, r8
   116f6:	movs	r7, #4
   116f8:	b.n	115ae <__gethex+0xe6>
   116fa:	ldr	r5, [sp, #0]
   116fc:	ldr	r1, [sp, #8]
   116fe:	mov	r2, r5
   11700:	mov	r0, r4
   11702:	bl	ca1c <strncmp>
   11706:	cmp	r0, #0
   11708:	beq.n	11778 <__gethex+0x2b0>
   1170a:	ldrb	r3, [r4, #0]
   1170c:	mov	r7, r4
   1170e:	cmp	r3, #80	; 0x50
   11710:	beq.n	11670 <__gethex+0x1a8>
   11712:	cmp	r3, #112	; 0x70
   11714:	beq.n	11670 <__gethex+0x1a8>
   11716:	str.w	r7, [r9]
   1171a:	b.n	116d8 <__gethex+0x210>
   1171c:	ldr	r3, [sp, #16]
   1171e:	ldr	r3, [r3, #8]
   11720:	cmp	r7, r3
   11722:	bge.w	1198e <__gethex+0x4c6>
   11726:	mov	r3, r7
   11728:	ldr	r0, [sp, #16]
   1172a:	add.w	r2, r0, r3, lsl #2
   1172e:	movs	r1, #1
   11730:	adds	r3, #1
   11732:	cmp	r4, #2
   11734:	str	r3, [r0, #16]
   11736:	str	r1, [r2, #20]
   11738:	beq.w	1196c <__gethex+0x4a4>
   1173c:	cmp	r7, r3
   1173e:	bge.w	118f8 <__gethex+0x430>
   11742:	movs	r1, #1
   11744:	ldr	r0, [sp, #16]
   11746:	bl	11420 <rshift>
   1174a:	ldr	r3, [sp, #12]
   1174c:	ldr	r2, [sp, #4]
   1174e:	ldr	r3, [r3, #8]
   11750:	adds	r2, #1
   11752:	cmp	r2, r3
   11754:	str	r2, [sp, #4]
   11756:	ble.w	118fe <__gethex+0x436>
   1175a:	ldr	r0, [sp, #20]
   1175c:	ldr	r1, [sp, #16]
   1175e:	bl	11c6c <_Bfree>
   11762:	ldr	r2, [sp, #80]	; 0x50
   11764:	movs	r3, #0
   11766:	movs	r0, #163	; 0xa3
   11768:	str	r3, [r2, #0]
   1176a:	add	sp, #44	; 0x2c
   1176c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11770:	movs	r5, #1
   11772:	ldrb	r3, [r7, #2]
   11774:	adds	r1, r7, #2
   11776:	b.n	11688 <__gethex+0x1c0>
   11778:	ldrb	r2, [r4, r5]
   1177a:	ldrb	r3, [r6, r2]
   1177c:	adds	r7, r4, r5
   1177e:	cmp	r3, #0
   11780:	beq.n	11856 <__gethex+0x38e>
   11782:	cmp	r2, #48	; 0x30
   11784:	mov	r4, r7
   11786:	bne.n	11792 <__gethex+0x2ca>
   11788:	ldrb.w	r3, [r4, #1]!
   1178c:	cmp	r3, #48	; 0x30
   1178e:	beq.n	11788 <__gethex+0x2c0>
   11790:	ldrb	r3, [r6, r3]
   11792:	clz	sl, r3
   11796:	mov	r5, r7
   11798:	mov.w	sl, sl, lsr #5
   1179c:	mov.w	r8, #1
   117a0:	b.n	11524 <__gethex+0x5c>
   117a2:	movs	r4, #1
   117a4:	cbz	r7, 117c0 <__gethex+0x2f8>
   117a6:	ldr	r3, [sp, #12]
   117a8:	ldr	r3, [r3, #12]
   117aa:	cmp	r3, #2
   117ac:	beq.w	118ba <__gethex+0x3f2>
   117b0:	cmp	r3, #3
   117b2:	beq.w	118c2 <__gethex+0x3fa>
   117b6:	cmp	r3, #1
   117b8:	beq.w	11926 <__gethex+0x45e>
   117bc:	orr.w	r4, r4, #16
   117c0:	ldr	r3, [sp, #80]	; 0x50
   117c2:	mov	r2, r3
   117c4:	ldr	r3, [sp, #16]
   117c6:	str	r3, [r2, #0]
   117c8:	ldr	r3, [sp, #32]
   117ca:	mov	r2, r3
   117cc:	ldr	r3, [sp, #4]
   117ce:	str	r3, [r2, #0]
   117d0:	mov	r0, r4
   117d2:	add	sp, #44	; 0x2c
   117d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117d8:	movs	r5, #0
   117da:	b.n	11772 <__gethex+0x2aa>
   117dc:	.word	0x00013ae4
   117e0:	subs	r4, r0, r6
   117e2:	mov	r1, r4
   117e4:	ldr	r0, [sp, #16]
   117e6:	bl	124a8 <__any_on>
   117ea:	cmp	r0, #0
   117ec:	beq.n	1185a <__gethex+0x392>
   117ee:	subs	r2, r4, #1
   117f0:	asrs	r1, r2, #5
   117f2:	ldr	r0, [sp, #28]
   117f4:	and.w	r3, r2, #31
   117f8:	ldr.w	r1, [r0, r1, lsl #2]
   117fc:	movs	r7, #1
   117fe:	lsl.w	r3, r7, r3
   11802:	tst	r3, r1
   11804:	beq.n	1181c <__gethex+0x354>
   11806:	cmp	r2, r7
   11808:	ble.w	11942 <__gethex+0x47a>
   1180c:	subs	r1, r4, #2
   1180e:	ldr	r0, [sp, #16]
   11810:	bl	124a8 <__any_on>
   11814:	cmp	r0, #0
   11816:	beq.w	11942 <__gethex+0x47a>
   1181a:	movs	r7, #3
   1181c:	ldr	r3, [sp, #4]
   1181e:	ldr	r0, [sp, #16]
   11820:	add	r3, r4
   11822:	mov	r1, r4
   11824:	str	r3, [sp, #4]
   11826:	bl	11420 <rshift>
   1182a:	b.n	11620 <__gethex+0x158>
   1182c:	str	r5, [sp, #4]
   1182e:	b.n	11550 <__gethex+0x88>
   11830:	subs	r4, r6, r0
   11832:	ldr	r1, [sp, #16]
   11834:	ldr	r0, [sp, #20]
   11836:	mov	r2, r4
   11838:	bl	12018 <__lshift>
   1183c:	ldr	r3, [sp, #4]
   1183e:	str	r0, [sp, #16]
   11840:	subs	r3, r3, r4
   11842:	str	r3, [sp, #4]
   11844:	mov	r3, r0
   11846:	adds	r3, #20
   11848:	str	r3, [sp, #28]
   1184a:	movs	r7, #0
   1184c:	b.n	11620 <__gethex+0x158>
   1184e:	adds	r4, r3, #2
   11850:	mov.w	r8, #0
   11854:	b.n	11510 <__gethex+0x48>
   11856:	mov	r3, r2
   11858:	b.n	1170e <__gethex+0x246>
   1185a:	mov	r7, r0
   1185c:	b.n	1181c <__gethex+0x354>
   1185e:	subs	r4, r5, #1
   11860:	cmp	r7, #0
   11862:	bne.n	11902 <__gethex+0x43a>
   11864:	cbz	r4, 11870 <__gethex+0x3a8>
   11866:	mov	r1, r4
   11868:	ldr	r0, [sp, #16]
   1186a:	bl	124a8 <__any_on>
   1186e:	mov	r7, r0
   11870:	asrs	r3, r4, #5
   11872:	ldr	r2, [sp, #28]
   11874:	ldr	r0, [sp, #16]
   11876:	ldr.w	r2, [r2, r3, lsl #2]
   1187a:	and.w	r4, r4, #31
   1187e:	movs	r3, #1
   11880:	lsl.w	r4, r3, r4
   11884:	tst	r4, r2
   11886:	mov	r1, r5
   11888:	it	ne
   1188a:	orrne.w	r7, r7, #2
   1188e:	bl	11420 <rshift>
   11892:	ldr	r3, [sp, #12]
   11894:	ldr	r3, [r3, #4]
   11896:	str	r3, [sp, #4]
   11898:	subs	r6, r6, r5
   1189a:	movs	r4, #2
   1189c:	b.n	117a4 <__gethex+0x2dc>
   1189e:	ldr	r1, [sp, #0]
   118a0:	ldrb	r3, [r7, r1]
   118a2:	ldrb	r2, [r6, r3]
   118a4:	adds	r5, r7, r1
   118a6:	mov	r7, r5
   118a8:	cmp	r2, #0
   118aa:	beq.w	1154a <__gethex+0x82>
   118ae:	ldrb.w	r3, [r7, #1]!
   118b2:	ldrb	r2, [r6, r3]
   118b4:	cmp	r2, #0
   118b6:	bne.n	118ae <__gethex+0x3e6>
   118b8:	b.n	1154a <__gethex+0x82>
   118ba:	ldr	r3, [sp, #84]	; 0x54
   118bc:	rsb	r3, r3, #1
   118c0:	str	r3, [sp, #84]	; 0x54
   118c2:	ldr	r3, [sp, #84]	; 0x54
   118c4:	cmp	r3, #0
   118c6:	beq.w	117bc <__gethex+0x2f4>
   118ca:	ldr	r3, [sp, #16]
   118cc:	ldr	r5, [sp, #28]
   118ce:	ldr	r7, [r3, #16]
   118d0:	mov.w	r8, r7, lsl #2
   118d4:	add.w	r0, r5, r8
   118d8:	mov	r3, r5
   118da:	movs	r1, #0
   118dc:	b.n	118e8 <__gethex+0x420>
   118de:	str.w	r1, [r3], #4
   118e2:	cmp	r0, r3
   118e4:	bls.w	1171c <__gethex+0x254>
   118e8:	ldr	r2, [r3, #0]
   118ea:	cmp.w	r2, #4294967295
   118ee:	beq.n	118de <__gethex+0x416>
   118f0:	adds	r2, #1
   118f2:	cmp	r4, #2
   118f4:	str	r2, [r3, #0]
   118f6:	beq.n	1196c <__gethex+0x4a4>
   118f8:	ands.w	r6, r6, #31
   118fc:	bne.n	1197a <__gethex+0x4b2>
   118fe:	movs	r4, #33	; 0x21
   11900:	b.n	117c0 <__gethex+0x2f8>
   11902:	movs	r7, #1
   11904:	b.n	11870 <__gethex+0x3a8>
   11906:	ldr	r2, [sp, #84]	; 0x54
   11908:	cmp	r2, #0
   1190a:	beq.w	11654 <__gethex+0x18c>
   1190e:	ldr	r1, [sp, #32]
   11910:	str	r3, [r1, #0]
   11912:	ldr	r3, [sp, #28]
   11914:	ldr	r1, [sp, #16]
   11916:	movs	r2, #1
   11918:	str	r2, [r1, #16]
   1191a:	str	r2, [r3, #0]
   1191c:	ldr	r3, [sp, #80]	; 0x50
   1191e:	mov	r2, r3
   11920:	movs	r0, #98	; 0x62
   11922:	str	r1, [r2, #0]
   11924:	b.n	116e2 <__gethex+0x21a>
   11926:	lsls	r2, r7, #30
   11928:	bpl.w	117bc <__gethex+0x2f4>
   1192c:	ldr	r3, [sp, #28]
   1192e:	ldr	r3, [r3, #0]
   11930:	orrs	r3, r7
   11932:	lsls	r3, r3, #31
   11934:	bmi.n	118ca <__gethex+0x402>
   11936:	b.n	117bc <__gethex+0x2f4>
   11938:	ldr.w	r9, [sp, #28]
   1193c:	mov.w	r8, #0
   11940:	b.n	115f0 <__gethex+0x128>
   11942:	movs	r7, #2
   11944:	b.n	1181c <__gethex+0x354>
   11946:	ldr	r2, [sp, #84]	; 0x54
   11948:	cmp	r2, #0
   1194a:	beq.n	1190e <__gethex+0x446>
   1194c:	b.n	11654 <__gethex+0x18c>
   1194e:	cmp	r6, r5
   11950:	bne.w	11654 <__gethex+0x18c>
   11954:	cmp	r6, #1
   11956:	ble.n	1190e <__gethex+0x446>
   11958:	subs	r1, r6, #1
   1195a:	ldr	r0, [sp, #16]
   1195c:	bl	124a8 <__any_on>
   11960:	cmp	r0, #0
   11962:	beq.w	11654 <__gethex+0x18c>
   11966:	ldr	r3, [sp, #12]
   11968:	ldr	r3, [r3, #4]
   1196a:	b.n	1190e <__gethex+0x446>
   1196c:	ldr	r3, [sp, #12]
   1196e:	ldr	r3, [r3, #0]
   11970:	subs	r3, #1
   11972:	cmp	r6, r3
   11974:	beq.n	119c0 <__gethex+0x4f8>
   11976:	movs	r4, #34	; 0x22
   11978:	b.n	117c0 <__gethex+0x2f8>
   1197a:	add	r5, r8
   1197c:	rsb	r6, r6, #32
   11980:	ldr.w	r0, [r5, #-4]
   11984:	bl	11d98 <__hi0bits>
   11988:	cmp	r0, r6
   1198a:	bge.n	118fe <__gethex+0x436>
   1198c:	b.n	11742 <__gethex+0x27a>
   1198e:	ldr	r3, [sp, #16]
   11990:	ldr.w	r9, [sp, #20]
   11994:	ldr	r1, [r3, #4]
   11996:	mov	r0, r9
   11998:	adds	r1, #1
   1199a:	bl	11c20 <_Balloc>
   1199e:	ldr	r1, [sp, #16]
   119a0:	ldr	r3, [r1, #16]
   119a2:	adds	r2, r3, #2
   119a4:	mov	r5, r0
   119a6:	lsls	r2, r2, #2
   119a8:	adds	r1, #12
   119aa:	adds	r0, #12
   119ac:	bl	82a4 <memcpy>
   119b0:	ldr	r1, [sp, #16]
   119b2:	mov	r0, r9
   119b4:	bl	11c6c <_Bfree>
   119b8:	str	r5, [sp, #16]
   119ba:	ldr	r3, [r5, #16]
   119bc:	adds	r5, #20
   119be:	b.n	11728 <__gethex+0x260>
   119c0:	asrs	r3, r6, #5
   119c2:	and.w	r6, r6, #31
   119c6:	ldr.w	r2, [r5, r3, lsl #2]
   119ca:	movs	r3, #1
   119cc:	lsls	r3, r6
   119ce:	tst	r3, r2
   119d0:	ite	ne
   119d2:	movne	r4, #33	; 0x21
   119d4:	moveq	r4, #34	; 0x22
   119d6:	b.n	117c0 <__gethex+0x2f8>

000119d8 <__match>:
   119d8:	push	{r4, r5}
   119da:	ldr	r4, [r0, #0]
   119dc:	b.n	119f0 <__match+0x18>
   119de:	ldrb.w	r3, [r4, #1]!
   119e2:	sub.w	r5, r3, #65	; 0x41
   119e6:	cmp	r5, #25
   119e8:	it	ls
   119ea:	addls	r3, #32
   119ec:	cmp	r3, r2
   119ee:	bne.n	11a02 <__match+0x2a>
   119f0:	ldrb.w	r2, [r1], #1
   119f4:	cmp	r2, #0
   119f6:	bne.n	119de <__match+0x6>
   119f8:	adds	r4, #1
   119fa:	str	r4, [r0, #0]
   119fc:	movs	r0, #1
   119fe:	pop	{r4, r5}
   11a00:	bx	lr
   11a02:	movs	r0, #0
   11a04:	pop	{r4, r5}
   11a06:	bx	lr

00011a08 <__hexnan>:
   11a08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a0c:	ldr	r3, [r1, #0]
   11a0e:	ldr.w	r9, [pc, #372]	; 11b84 <__hexnan+0x17c>
   11a12:	sub	sp, #20
   11a14:	asrs	r1, r3, #5
   11a16:	add.w	r1, r2, r1, lsl #2
   11a1a:	ands.w	r3, r3, #31
   11a1e:	str	r1, [sp, #4]
   11a20:	itt	ne
   11a22:	addne	r1, #4
   11a24:	strne	r1, [sp, #4]
   11a26:	ldr	r4, [sp, #4]
   11a28:	str	r0, [sp, #8]
   11a2a:	str	r3, [sp, #12]
   11a2c:	movs	r3, #0
   11a2e:	mov	r1, r3
   11a30:	str.w	r3, [r4, #-4]
   11a34:	mov	sl, r3
   11a36:	mov	lr, r3
   11a38:	ldr	r3, [sp, #8]
   11a3a:	sub.w	ip, r4, #4
   11a3e:	ldr	r5, [r3, #0]
   11a40:	mov	r8, ip
   11a42:	mov	r0, ip
   11a44:	ldrb.w	r3, [r5, #1]!
   11a48:	cbz	r3, 11a94 <__hexnan+0x8c>
   11a4a:	ldrb.w	r4, [r9, r3]
   11a4e:	cmp	r4, #0
   11a50:	bne.n	11ada <__hexnan+0xd2>
   11a52:	cmp	r3, #32
   11a54:	bhi.n	11b12 <__hexnan+0x10a>
   11a56:	cmp	lr, sl
   11a58:	ble.n	11a44 <__hexnan+0x3c>
   11a5a:	cmp	r0, r8
   11a5c:	bcs.n	11a86 <__hexnan+0x7e>
   11a5e:	cmp	r1, #7
   11a60:	bgt.n	11a86 <__hexnan+0x7e>
   11a62:	rsb	r1, r1, #8
   11a66:	lsls	r1, r1, #2
   11a68:	ldr	r6, [r0, #0]
   11a6a:	rsb	fp, r1, #32
   11a6e:	mov	r3, r0
   11a70:	ldr	r7, [r3, #4]
   11a72:	lsl.w	r4, r7, fp
   11a76:	orrs	r4, r6
   11a78:	lsr.w	r6, r7, r1
   11a7c:	str	r4, [r3, #0]
   11a7e:	str.w	r6, [r3, #4]!
   11a82:	cmp	r8, r3
   11a84:	bhi.n	11a70 <__hexnan+0x68>
   11a86:	cmp	r0, r2
   11a88:	bhi.n	11b00 <__hexnan+0xf8>
   11a8a:	ldrb.w	r3, [r5, #1]!
   11a8e:	movs	r1, #8
   11a90:	cmp	r3, #0
   11a92:	bne.n	11a4a <__hexnan+0x42>
   11a94:	cmp.w	lr, #0
   11a98:	beq.n	11b16 <__hexnan+0x10e>
   11a9a:	cmp	r0, r8
   11a9c:	bcs.n	11aa2 <__hexnan+0x9a>
   11a9e:	cmp	r1, #7
   11aa0:	ble.n	11b5c <__hexnan+0x154>
   11aa2:	cmp	r0, r2
   11aa4:	bls.n	11b1e <__hexnan+0x116>
   11aa6:	mov	r3, r2
   11aa8:	ldr.w	r1, [r0], #4
   11aac:	str.w	r1, [r3], #4
   11ab0:	cmp	ip, r0
   11ab2:	bcs.n	11aa8 <__hexnan+0xa0>
   11ab4:	movs	r1, #0
   11ab6:	str.w	r1, [r3], #4
   11aba:	cmp	ip, r3
   11abc:	bcs.n	11ab6 <__hexnan+0xae>
   11abe:	ldr	r3, [sp, #4]
   11ac0:	ldr.w	r3, [r3, #-4]
   11ac4:	cbnz	r3, 11ad2 <__hexnan+0xca>
   11ac6:	cmp	r2, ip
   11ac8:	beq.n	11b40 <__hexnan+0x138>
   11aca:	ldr.w	r3, [ip, #-4]!
   11ace:	cmp	r3, #0
   11ad0:	beq.n	11ac6 <__hexnan+0xbe>
   11ad2:	movs	r0, #5
   11ad4:	add	sp, #20
   11ad6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ada:	adds	r1, #1
   11adc:	cmp	r1, #8
   11ade:	add.w	lr, lr, #1
   11ae2:	ble.n	11af2 <__hexnan+0xea>
   11ae4:	cmp	r0, r2
   11ae6:	bls.n	11a44 <__hexnan+0x3c>
   11ae8:	movs	r3, #0
   11aea:	str.w	r3, [r0, #-4]
   11aee:	movs	r1, #1
   11af0:	subs	r0, #4
   11af2:	ldr	r3, [r0, #0]
   11af4:	and.w	r4, r4, #15
   11af8:	orr.w	r4, r4, r3, lsl #4
   11afc:	str	r4, [r0, #0]
   11afe:	b.n	11a44 <__hexnan+0x3c>
   11b00:	movs	r3, #0
   11b02:	sub.w	r8, r0, #4
   11b06:	str.w	r3, [r0, #-4]
   11b0a:	mov	sl, lr
   11b0c:	mov	r0, r8
   11b0e:	mov	r1, r3
   11b10:	b.n	11a44 <__hexnan+0x3c>
   11b12:	cmp	r3, #41	; 0x29
   11b14:	beq.n	11b4e <__hexnan+0x146>
   11b16:	movs	r0, #4
   11b18:	add	sp, #20
   11b1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b1e:	ldr	r3, [sp, #12]
   11b20:	cmp	r3, #0
   11b22:	beq.n	11abe <__hexnan+0xb6>
   11b24:	ldr	r4, [sp, #4]
   11b26:	ldr	r3, [sp, #12]
   11b28:	ldr.w	r1, [r4, #-4]
   11b2c:	rsb	r3, r3, #32
   11b30:	mov.w	r0, #4294967295
   11b34:	lsr.w	r3, r0, r3
   11b38:	ands	r3, r1
   11b3a:	str.w	r3, [r4, #-4]
   11b3e:	b.n	11ac4 <__hexnan+0xbc>
   11b40:	movs	r3, #1
   11b42:	movs	r0, #5
   11b44:	str.w	r3, [ip]
   11b48:	add	sp, #20
   11b4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b4e:	ldr	r3, [sp, #8]
   11b50:	adds	r5, #1
   11b52:	str	r5, [r3, #0]
   11b54:	cmp.w	lr, #0
   11b58:	bne.n	11a9a <__hexnan+0x92>
   11b5a:	b.n	11b16 <__hexnan+0x10e>
   11b5c:	rsb	r3, r1, #8
   11b60:	lsls	r3, r3, #2
   11b62:	ldr	r5, [r0, #0]
   11b64:	rsb	r7, r3, #32
   11b68:	mov	r1, r0
   11b6a:	ldr	r6, [r1, #4]
   11b6c:	lsl.w	r4, r6, r7
   11b70:	orrs	r4, r5
   11b72:	lsr.w	r5, r6, r3
   11b76:	str	r4, [r1, #0]
   11b78:	str.w	r5, [r1, #4]!
   11b7c:	cmp	r8, r1
   11b7e:	bhi.n	11b6a <__hexnan+0x162>
   11b80:	b.n	11aa2 <__hexnan+0x9a>
   11b82:	nop
   11b84:	.word	0x00013ae4

00011b88 <iswspace>:
   11b88:	cmp	r0, #255	; 0xff
   11b8a:	bls.n	11b90 <iswspace+0x8>
   11b8c:	movs	r0, #0
   11b8e:	bx	lr
   11b90:	push	{r4, lr}
   11b92:	mov	r4, r0
   11b94:	bl	bab4 <__locale_ctype_ptr>
   11b98:	add	r0, r4
   11b9a:	ldrb	r0, [r0, #1]
   11b9c:	and.w	r0, r0, #8
   11ba0:	uxtb	r0, r0
   11ba2:	pop	{r4, pc}

00011ba4 <__localeconv_l>:
   11ba4:	adds	r0, #240	; 0xf0
   11ba6:	bx	lr

00011ba8 <_localeconv_r>:
   11ba8:	ldr	r2, [pc, #16]	; (11bbc <_localeconv_r+0x14>)
   11baa:	ldr	r3, [pc, #20]	; (11bc0 <_localeconv_r+0x18>)
   11bac:	ldr	r2, [r2, #0]
   11bae:	ldr	r0, [r2, #52]	; 0x34
   11bb0:	cmp	r0, #0
   11bb2:	it	eq
   11bb4:	moveq	r0, r3
   11bb6:	adds	r0, #240	; 0xf0
   11bb8:	bx	lr
   11bba:	nop
   11bbc:	.word	0x20014c00
   11bc0:	.word	0x20014c04

00011bc4 <_mbrtowc_r>:
   11bc4:	push	{r4, r5, r6, r7, lr}
   11bc6:	sub	sp, #12
   11bc8:	mov	r7, r0
   11bca:	ldr	r5, [sp, #32]
   11bcc:	cbz	r2, 11bf4 <_mbrtowc_r+0x30>
   11bce:	ldr	r4, [pc, #68]	; (11c14 <_mbrtowc_r+0x50>)
   11bd0:	ldr	r6, [pc, #68]	; (11c18 <_mbrtowc_r+0x54>)
   11bd2:	ldr	r4, [r4, #0]
   11bd4:	ldr	r4, [r4, #52]	; 0x34
   11bd6:	str	r5, [sp, #0]
   11bd8:	cmp	r4, #0
   11bda:	it	eq
   11bdc:	moveq	r4, r6
   11bde:	ldr.w	r4, [r4, #228]	; 0xe4
   11be2:	blx	r4
   11be4:	adds	r3, r0, #1
   11be6:	bne.n	11bf0 <_mbrtowc_r+0x2c>
   11be8:	movs	r2, #0
   11bea:	movs	r3, #138	; 0x8a
   11bec:	str	r2, [r5, #0]
   11bee:	str	r3, [r7, #0]
   11bf0:	add	sp, #12
   11bf2:	pop	{r4, r5, r6, r7, pc}
   11bf4:	ldr	r3, [pc, #28]	; (11c14 <_mbrtowc_r+0x50>)
   11bf6:	ldr	r1, [pc, #32]	; (11c18 <_mbrtowc_r+0x54>)
   11bf8:	ldr	r3, [r3, #0]
   11bfa:	ldr	r3, [r3, #52]	; 0x34
   11bfc:	str	r5, [sp, #0]
   11bfe:	cmp	r3, #0
   11c00:	it	eq
   11c02:	moveq	r3, r1
   11c04:	mov	r4, r2
   11c06:	mov	r1, r4
   11c08:	ldr	r2, [pc, #16]	; (11c1c <_mbrtowc_r+0x58>)
   11c0a:	ldr.w	r4, [r3, #228]	; 0xe4
   11c0e:	movs	r3, #1
   11c10:	blx	r4
   11c12:	b.n	11be4 <_mbrtowc_r+0x20>
   11c14:	.word	0x20014c00
   11c18:	.word	0x20014c04
   11c1c:	.word	0x00013110

00011c20 <_Balloc>:
   11c20:	ldr	r3, [r0, #76]	; 0x4c
   11c22:	push	{r4, r5, r6, lr}
   11c24:	mov	r5, r0
   11c26:	mov	r4, r1
   11c28:	cbz	r3, 11c3e <_Balloc+0x1e>
   11c2a:	ldr.w	r0, [r3, r4, lsl #2]
   11c2e:	cbz	r0, 11c52 <_Balloc+0x32>
   11c30:	ldr	r2, [r0, #0]
   11c32:	str.w	r2, [r3, r4, lsl #2]
   11c36:	movs	r3, #0
   11c38:	str	r3, [r0, #16]
   11c3a:	str	r3, [r0, #12]
   11c3c:	pop	{r4, r5, r6, pc}
   11c3e:	movs	r2, #33	; 0x21
   11c40:	movs	r1, #4
   11c42:	bl	12e04 <_calloc_r>
   11c46:	str	r0, [r5, #76]	; 0x4c
   11c48:	mov	r3, r0
   11c4a:	cmp	r0, #0
   11c4c:	bne.n	11c2a <_Balloc+0xa>
   11c4e:	movs	r0, #0
   11c50:	pop	{r4, r5, r6, pc}
   11c52:	movs	r1, #1
   11c54:	lsl.w	r6, r1, r4
   11c58:	adds	r2, r6, #5
   11c5a:	mov	r0, r5
   11c5c:	lsls	r2, r2, #2
   11c5e:	bl	12e04 <_calloc_r>
   11c62:	cmp	r0, #0
   11c64:	beq.n	11c4e <_Balloc+0x2e>
   11c66:	str	r4, [r0, #4]
   11c68:	str	r6, [r0, #8]
   11c6a:	b.n	11c36 <_Balloc+0x16>

00011c6c <_Bfree>:
   11c6c:	cbz	r1, 11c7c <_Bfree+0x10>
   11c6e:	ldr	r3, [r0, #76]	; 0x4c
   11c70:	ldr	r2, [r1, #4]
   11c72:	ldr.w	r0, [r3, r2, lsl #2]
   11c76:	str	r0, [r1, #0]
   11c78:	str.w	r1, [r3, r2, lsl #2]
   11c7c:	bx	lr
   11c7e:	nop

00011c80 <__multadd>:
   11c80:	push	{r4, r5, r6, r7, lr}
   11c82:	ldr	r4, [r1, #16]
   11c84:	sub	sp, #12
   11c86:	mov	r5, r1
   11c88:	mov	r6, r0
   11c8a:	add.w	lr, r1, #20
   11c8e:	movs	r7, #0
   11c90:	ldr.w	r0, [lr]
   11c94:	uxth	r1, r0
   11c96:	mla	r1, r2, r1, r3
   11c9a:	lsrs	r3, r1, #16
   11c9c:	lsrs	r0, r0, #16
   11c9e:	mla	r3, r2, r0, r3
   11ca2:	uxth	r1, r1
   11ca4:	adds	r7, #1
   11ca6:	add.w	r1, r1, r3, lsl #16
   11caa:	cmp	r4, r7
   11cac:	str.w	r1, [lr], #4
   11cb0:	mov.w	r3, r3, lsr #16
   11cb4:	bgt.n	11c90 <__multadd+0x10>
   11cb6:	cbz	r3, 11cc8 <__multadd+0x48>
   11cb8:	ldr	r2, [r5, #8]
   11cba:	cmp	r4, r2
   11cbc:	bge.n	11cce <__multadd+0x4e>
   11cbe:	add.w	r2, r5, r4, lsl #2
   11cc2:	adds	r4, #1
   11cc4:	str	r3, [r2, #20]
   11cc6:	str	r4, [r5, #16]
   11cc8:	mov	r0, r5
   11cca:	add	sp, #12
   11ccc:	pop	{r4, r5, r6, r7, pc}
   11cce:	ldr	r1, [r5, #4]
   11cd0:	str	r3, [sp, #4]
   11cd2:	adds	r1, #1
   11cd4:	mov	r0, r6
   11cd6:	bl	11c20 <_Balloc>
   11cda:	ldr	r2, [r5, #16]
   11cdc:	adds	r2, #2
   11cde:	add.w	r1, r5, #12
   11ce2:	mov	r7, r0
   11ce4:	lsls	r2, r2, #2
   11ce6:	adds	r0, #12
   11ce8:	bl	82a4 <memcpy>
   11cec:	ldr	r2, [r6, #76]	; 0x4c
   11cee:	ldr	r1, [r5, #4]
   11cf0:	ldr	r3, [sp, #4]
   11cf2:	ldr.w	r0, [r2, r1, lsl #2]
   11cf6:	str	r0, [r5, #0]
   11cf8:	str.w	r5, [r2, r1, lsl #2]
   11cfc:	mov	r5, r7
   11cfe:	b.n	11cbe <__multadd+0x3e>

00011d00 <__s2b>:
   11d00:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11d04:	ldr	r4, [pc, #140]	; (11d94 <__s2b+0x94>)
   11d06:	ldr	r5, [sp, #32]
   11d08:	mov	r7, r3
   11d0a:	adds	r3, #8
   11d0c:	smull	r4, lr, r4, r3
   11d10:	asrs	r3, r3, #31
   11d12:	rsb	lr, r3, lr, asr #1
   11d16:	cmp.w	lr, #1
   11d1a:	mov	r6, r0
   11d1c:	mov	r4, r1
   11d1e:	mov	r8, r2
   11d20:	ble.n	11d8e <__s2b+0x8e>
   11d22:	movs	r3, #1
   11d24:	movs	r1, #0
   11d26:	lsls	r3, r3, #1
   11d28:	cmp	lr, r3
   11d2a:	add.w	r1, r1, #1
   11d2e:	bgt.n	11d26 <__s2b+0x26>
   11d30:	mov	r0, r6
   11d32:	bl	11c20 <_Balloc>
   11d36:	movs	r3, #1
   11d38:	cmp.w	r8, #9
   11d3c:	str	r5, [r0, #20]
   11d3e:	str	r3, [r0, #16]
   11d40:	ble.n	11d86 <__s2b+0x86>
   11d42:	add.w	r9, r4, #9
   11d46:	mov	r5, r9
   11d48:	add	r4, r8
   11d4a:	ldrb.w	r3, [r5], #1
   11d4e:	mov	r1, r0
   11d50:	subs	r3, #48	; 0x30
   11d52:	movs	r2, #10
   11d54:	mov	r0, r6
   11d56:	bl	11c80 <__multadd>
   11d5a:	cmp	r5, r4
   11d5c:	bne.n	11d4a <__s2b+0x4a>
   11d5e:	add.w	r4, r9, r8
   11d62:	subs	r4, #8
   11d64:	cmp	r7, r8
   11d66:	ble.n	11d82 <__s2b+0x82>
   11d68:	rsb	r7, r8, r7
   11d6c:	add	r7, r4
   11d6e:	ldrb.w	r3, [r4], #1
   11d72:	mov	r1, r0
   11d74:	subs	r3, #48	; 0x30
   11d76:	movs	r2, #10
   11d78:	mov	r0, r6
   11d7a:	bl	11c80 <__multadd>
   11d7e:	cmp	r7, r4
   11d80:	bne.n	11d6e <__s2b+0x6e>
   11d82:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d86:	adds	r4, #10
   11d88:	mov.w	r8, #9
   11d8c:	b.n	11d64 <__s2b+0x64>
   11d8e:	movs	r1, #0
   11d90:	b.n	11d30 <__s2b+0x30>
   11d92:	nop
   11d94:	.word	0x38e38e39

00011d98 <__hi0bits>:
   11d98:	lsrs	r3, r0, #16
   11d9a:	lsls	r3, r3, #16
   11d9c:	cbnz	r3, 11dcc <__hi0bits+0x34>
   11d9e:	lsls	r0, r0, #16
   11da0:	movs	r3, #16
   11da2:	tst.w	r0, #4278190080	; 0xff000000
   11da6:	itt	eq
   11da8:	lsleq	r0, r0, #8
   11daa:	addeq	r3, #8
   11dac:	tst.w	r0, #4026531840	; 0xf0000000
   11db0:	itt	eq
   11db2:	lsleq	r0, r0, #4
   11db4:	addeq	r3, #4
   11db6:	tst.w	r0, #3221225472	; 0xc0000000
   11dba:	itt	eq
   11dbc:	lsleq	r0, r0, #2
   11dbe:	addeq	r3, #2
   11dc0:	cmp	r0, #0
   11dc2:	blt.n	11dd4 <__hi0bits+0x3c>
   11dc4:	lsls	r2, r0, #1
   11dc6:	bmi.n	11dd0 <__hi0bits+0x38>
   11dc8:	movs	r0, #32
   11dca:	bx	lr
   11dcc:	movs	r3, #0
   11dce:	b.n	11da2 <__hi0bits+0xa>
   11dd0:	adds	r0, r3, #1
   11dd2:	bx	lr
   11dd4:	mov	r0, r3
   11dd6:	bx	lr

00011dd8 <__lo0bits>:
   11dd8:	ldr	r3, [r0, #0]
   11dda:	ands.w	r2, r3, #7
   11dde:	beq.n	11df0 <__lo0bits+0x18>
   11de0:	lsls	r1, r3, #31
   11de2:	bmi.n	11e26 <__lo0bits+0x4e>
   11de4:	lsls	r2, r3, #30
   11de6:	bmi.n	11e2a <__lo0bits+0x52>
   11de8:	lsrs	r3, r3, #2
   11dea:	str	r3, [r0, #0]
   11dec:	movs	r0, #2
   11dee:	bx	lr
   11df0:	uxth	r1, r3
   11df2:	cbnz	r1, 11df8 <__lo0bits+0x20>
   11df4:	lsrs	r3, r3, #16
   11df6:	movs	r2, #16
   11df8:	tst.w	r3, #255	; 0xff
   11dfc:	itt	eq
   11dfe:	lsreq	r3, r3, #8
   11e00:	addeq	r2, #8
   11e02:	lsls	r1, r3, #28
   11e04:	itt	eq
   11e06:	lsreq	r3, r3, #4
   11e08:	addeq	r2, #4
   11e0a:	lsls	r1, r3, #30
   11e0c:	itt	eq
   11e0e:	lsreq	r3, r3, #2
   11e10:	addeq	r2, #2
   11e12:	lsls	r1, r3, #31
   11e14:	bmi.n	11e20 <__lo0bits+0x48>
   11e16:	lsrs	r3, r3, #1
   11e18:	bne.n	11e1e <__lo0bits+0x46>
   11e1a:	movs	r0, #32
   11e1c:	bx	lr
   11e1e:	adds	r2, #1
   11e20:	str	r3, [r0, #0]
   11e22:	mov	r0, r2
   11e24:	bx	lr
   11e26:	movs	r0, #0
   11e28:	bx	lr
   11e2a:	lsrs	r3, r3, #1
   11e2c:	str	r3, [r0, #0]
   11e2e:	movs	r0, #1
   11e30:	bx	lr
   11e32:	nop

00011e34 <__i2b>:
   11e34:	push	{r4, lr}
   11e36:	mov	r4, r1
   11e38:	movs	r1, #1
   11e3a:	bl	11c20 <_Balloc>
   11e3e:	movs	r2, #1
   11e40:	str	r4, [r0, #20]
   11e42:	str	r2, [r0, #16]
   11e44:	pop	{r4, pc}
   11e46:	nop

00011e48 <__multiply>:
   11e48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e4c:	ldr	r5, [r1, #16]
   11e4e:	ldr	r7, [r2, #16]
   11e50:	cmp	r5, r7
   11e52:	sub	sp, #12
   11e54:	mov	r4, r1
   11e56:	mov	r6, r2
   11e58:	bge.n	11e64 <__multiply+0x1c>
   11e5a:	mov	r2, r5
   11e5c:	mov	r4, r6
   11e5e:	mov	r5, r7
   11e60:	mov	r6, r1
   11e62:	mov	r7, r2
   11e64:	ldr	r3, [r4, #8]
   11e66:	ldr	r1, [r4, #4]
   11e68:	add.w	r8, r5, r7
   11e6c:	cmp	r8, r3
   11e6e:	it	gt
   11e70:	addgt	r1, #1
   11e72:	bl	11c20 <_Balloc>
   11e76:	add.w	ip, r0, #20
   11e7a:	add.w	r9, ip, r8, lsl #2
   11e7e:	cmp	ip, r9
   11e80:	str	r0, [sp, #0]
   11e82:	bcs.n	11e90 <__multiply+0x48>
   11e84:	mov	r3, ip
   11e86:	movs	r1, #0
   11e88:	str.w	r1, [r3], #4
   11e8c:	cmp	r9, r3
   11e8e:	bhi.n	11e88 <__multiply+0x40>
   11e90:	add.w	r2, r6, #20
   11e94:	add.w	sl, r2, r7, lsl #2
   11e98:	add.w	r3, r4, #20
   11e9c:	cmp	r2, sl
   11e9e:	add.w	lr, r3, r5, lsl #2
   11ea2:	bcs.n	11f4e <__multiply+0x106>
   11ea4:	str.w	r9, [sp, #4]
   11ea8:	mov	r9, r3
   11eaa:	ldr.w	r3, [r2], #4
   11eae:	uxth.w	fp, r3
   11eb2:	cmp.w	fp, #0
   11eb6:	beq.n	11efa <__multiply+0xb2>
   11eb8:	movs	r0, #0
   11eba:	mov	r7, r9
   11ebc:	mov	r6, ip
   11ebe:	mov	r5, r0
   11ec0:	b.n	11ec4 <__multiply+0x7c>
   11ec2:	mov	r6, r3
   11ec4:	ldr.w	r4, [r7], #4
   11ec8:	ldr	r0, [r6, #0]
   11eca:	uxth	r1, r4
   11ecc:	uxth	r3, r0
   11ece:	mla	r1, fp, r1, r3
   11ed2:	lsrs	r4, r4, #16
   11ed4:	lsrs	r0, r0, #16
   11ed6:	adds	r3, r1, r5
   11ed8:	mla	r0, fp, r4, r0
   11edc:	add.w	r0, r0, r3, lsr #16
   11ee0:	uxth	r1, r3
   11ee2:	mov	r3, r6
   11ee4:	orr.w	r1, r1, r0, lsl #16
   11ee8:	cmp	lr, r7
   11eea:	mov.w	r5, r0, lsr #16
   11eee:	str.w	r1, [r3], #4
   11ef2:	bhi.n	11ec2 <__multiply+0x7a>
   11ef4:	str	r5, [r6, #4]
   11ef6:	ldr.w	r3, [r2, #-4]
   11efa:	movs.w	fp, r3, lsr #16
   11efe:	beq.n	11f42 <__multiply+0xfa>
   11f00:	ldr.w	r3, [ip]
   11f04:	mov	r7, ip
   11f06:	mov	r0, r3
   11f08:	mov	r5, r9
   11f0a:	movs	r1, #0
   11f0c:	b.n	11f10 <__multiply+0xc8>
   11f0e:	mov	r7, r6
   11f10:	ldrh	r4, [r5, #0]
   11f12:	lsrs	r0, r0, #16
   11f14:	mla	r0, fp, r4, r0
   11f18:	add	r1, r0
   11f1a:	uxth	r4, r3
   11f1c:	mov	r6, r7
   11f1e:	orr.w	r3, r4, r1, lsl #16
   11f22:	str.w	r3, [r6], #4
   11f26:	ldr	r0, [r7, #4]
   11f28:	ldr.w	r4, [r5], #4
   11f2c:	uxth	r3, r0
   11f2e:	lsrs	r4, r4, #16
   11f30:	mla	r4, fp, r4, r3
   11f34:	add.w	r3, r4, r1, lsr #16
   11f38:	cmp	lr, r5
   11f3a:	mov.w	r1, r3, lsr #16
   11f3e:	bhi.n	11f0e <__multiply+0xc6>
   11f40:	str	r3, [r7, #4]
   11f42:	cmp	sl, r2
   11f44:	add.w	ip, ip, #4
   11f48:	bhi.n	11eaa <__multiply+0x62>
   11f4a:	ldr.w	r9, [sp, #4]
   11f4e:	cmp.w	r8, #0
   11f52:	ble.n	11f6c <__multiply+0x124>
   11f54:	ldr.w	r3, [r9, #-4]
   11f58:	sub.w	r9, r9, #4
   11f5c:	cbz	r3, 11f66 <__multiply+0x11e>
   11f5e:	b.n	11f6c <__multiply+0x124>
   11f60:	ldr.w	r3, [r9, #-4]!
   11f64:	cbnz	r3, 11f6c <__multiply+0x124>
   11f66:	subs.w	r8, r8, #1
   11f6a:	bne.n	11f60 <__multiply+0x118>
   11f6c:	ldr	r0, [sp, #0]
   11f6e:	str.w	r8, [r0, #16]
   11f72:	add	sp, #12
   11f74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011f78 <__pow5mult>:
   11f78:	ands.w	r3, r2, #3
   11f7c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f80:	mov	r4, r2
   11f82:	mov	r7, r0
   11f84:	bne.n	11fe4 <__pow5mult+0x6c>
   11f86:	mov	r6, r1
   11f88:	asrs	r4, r4, #2
   11f8a:	beq.n	11fc6 <__pow5mult+0x4e>
   11f8c:	ldr	r5, [r7, #72]	; 0x48
   11f8e:	cbz	r5, 11ff6 <__pow5mult+0x7e>
   11f90:	lsls	r3, r4, #31
   11f92:	mov.w	r8, #0
   11f96:	bmi.n	11fa6 <__pow5mult+0x2e>
   11f98:	asrs	r4, r4, #1
   11f9a:	beq.n	11fc6 <__pow5mult+0x4e>
   11f9c:	ldr	r0, [r5, #0]
   11f9e:	cbz	r0, 11fcc <__pow5mult+0x54>
   11fa0:	mov	r5, r0
   11fa2:	lsls	r3, r4, #31
   11fa4:	bpl.n	11f98 <__pow5mult+0x20>
   11fa6:	mov	r2, r5
   11fa8:	mov	r1, r6
   11faa:	mov	r0, r7
   11fac:	bl	11e48 <__multiply>
   11fb0:	cbz	r6, 11fe0 <__pow5mult+0x68>
   11fb2:	ldr	r2, [r6, #4]
   11fb4:	ldr	r3, [r7, #76]	; 0x4c
   11fb6:	asrs	r4, r4, #1
   11fb8:	ldr.w	r1, [r3, r2, lsl #2]
   11fbc:	str	r1, [r6, #0]
   11fbe:	str.w	r6, [r3, r2, lsl #2]
   11fc2:	mov	r6, r0
   11fc4:	bne.n	11f9c <__pow5mult+0x24>
   11fc6:	mov	r0, r6
   11fc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fcc:	mov	r2, r5
   11fce:	mov	r1, r5
   11fd0:	mov	r0, r7
   11fd2:	bl	11e48 <__multiply>
   11fd6:	str	r0, [r5, #0]
   11fd8:	str.w	r8, [r0]
   11fdc:	mov	r5, r0
   11fde:	b.n	11fa2 <__pow5mult+0x2a>
   11fe0:	mov	r6, r0
   11fe2:	b.n	11f98 <__pow5mult+0x20>
   11fe4:	subs	r2, r3, #1
   11fe6:	ldr	r5, [pc, #44]	; (12014 <__pow5mult+0x9c>)
   11fe8:	movs	r3, #0
   11fea:	ldr.w	r2, [r5, r2, lsl #2]
   11fee:	bl	11c80 <__multadd>
   11ff2:	mov	r6, r0
   11ff4:	b.n	11f88 <__pow5mult+0x10>
   11ff6:	movs	r1, #1
   11ff8:	mov	r0, r7
   11ffa:	bl	11c20 <_Balloc>
   11ffe:	movw	r1, #625	; 0x271
   12002:	movs	r2, #1
   12004:	movs	r3, #0
   12006:	str	r1, [r0, #20]
   12008:	str	r2, [r0, #16]
   1200a:	mov	r5, r0
   1200c:	str	r0, [r7, #72]	; 0x48
   1200e:	str	r3, [r0, #0]
   12010:	b.n	11f90 <__pow5mult+0x18>
   12012:	nop
   12014:	.word	0x00013cd8

00012018 <__lshift>:
   12018:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1201c:	mov	r9, r2
   1201e:	ldr	r2, [r1, #16]
   12020:	ldr	r3, [r1, #8]
   12022:	mov.w	r4, r9, asr #5
   12026:	add.w	r8, r4, r2
   1202a:	add.w	r5, r8, #1
   1202e:	cmp	r5, r3
   12030:	mov	r6, r1
   12032:	mov	sl, r0
   12034:	ldr	r1, [r1, #4]
   12036:	ble.n	12042 <__lshift+0x2a>
   12038:	lsls	r3, r3, #1
   1203a:	cmp	r5, r3
   1203c:	add.w	r1, r1, #1
   12040:	bgt.n	12038 <__lshift+0x20>
   12042:	mov	r0, sl
   12044:	bl	11c20 <_Balloc>
   12048:	cmp	r4, #0
   1204a:	add.w	r2, r0, #20
   1204e:	ble.n	120c2 <__lshift+0xaa>
   12050:	add.w	r3, r2, r4, lsl #2
   12054:	movs	r1, #0
   12056:	str.w	r1, [r2], #4
   1205a:	cmp	r3, r2
   1205c:	bne.n	12056 <__lshift+0x3e>
   1205e:	ldr	r4, [r6, #16]
   12060:	add.w	r1, r6, #20
   12064:	ands.w	r9, r9, #31
   12068:	add.w	lr, r1, r4, lsl #2
   1206c:	beq.n	120b2 <__lshift+0x9a>
   1206e:	rsb	r2, r9, #32
   12072:	movs	r4, #0
   12074:	ldr	r7, [r1, #0]
   12076:	lsl.w	ip, r7, r9
   1207a:	orr.w	r4, ip, r4
   1207e:	mov	ip, r3
   12080:	str.w	r4, [r3], #4
   12084:	ldr.w	r4, [r1], #4
   12088:	cmp	lr, r1
   1208a:	lsr.w	r4, r4, r2
   1208e:	bhi.n	12074 <__lshift+0x5c>
   12090:	str.w	r4, [ip, #4]
   12094:	cbz	r4, 1209a <__lshift+0x82>
   12096:	add.w	r5, r8, #2
   1209a:	ldr.w	r3, [sl, #76]	; 0x4c
   1209e:	ldr	r2, [r6, #4]
   120a0:	subs	r5, #1
   120a2:	ldr.w	r1, [r3, r2, lsl #2]
   120a6:	str	r5, [r0, #16]
   120a8:	str	r1, [r6, #0]
   120aa:	str.w	r6, [r3, r2, lsl #2]
   120ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   120b2:	subs	r3, #4
   120b4:	ldr.w	r2, [r1], #4
   120b8:	str.w	r2, [r3, #4]!
   120bc:	cmp	lr, r1
   120be:	bhi.n	120b4 <__lshift+0x9c>
   120c0:	b.n	1209a <__lshift+0x82>
   120c2:	mov	r3, r2
   120c4:	b.n	1205e <__lshift+0x46>
   120c6:	nop

000120c8 <__mcmp>:
   120c8:	ldr	r2, [r0, #16]
   120ca:	ldr	r3, [r1, #16]
   120cc:	subs	r2, r2, r3
   120ce:	bne.n	120f8 <__mcmp+0x30>
   120d0:	lsls	r3, r3, #2
   120d2:	adds	r0, #20
   120d4:	adds	r1, #20
   120d6:	add	r1, r3
   120d8:	push	{r4}
   120da:	add	r3, r0
   120dc:	b.n	120e2 <__mcmp+0x1a>
   120de:	cmp	r0, r3
   120e0:	bcs.n	120fc <__mcmp+0x34>
   120e2:	ldr.w	r4, [r3, #-4]!
   120e6:	ldr.w	r2, [r1, #-4]!
   120ea:	cmp	r4, r2
   120ec:	beq.n	120de <__mcmp+0x16>
   120ee:	bcc.n	12104 <__mcmp+0x3c>
   120f0:	movs	r0, #1
   120f2:	ldr.w	r4, [sp], #4
   120f6:	bx	lr
   120f8:	mov	r0, r2
   120fa:	bx	lr
   120fc:	movs	r0, #0
   120fe:	ldr.w	r4, [sp], #4
   12102:	bx	lr
   12104:	mov.w	r0, #4294967295
   12108:	b.n	120f2 <__mcmp+0x2a>
   1210a:	nop

0001210c <__mdiff>:
   1210c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12110:	ldr	r3, [r1, #16]
   12112:	mov	r7, r1
   12114:	ldr	r1, [r2, #16]
   12116:	subs	r3, r3, r1
   12118:	cmp	r3, #0
   1211a:	mov	r8, r2
   1211c:	bne.n	1214e <__mdiff+0x42>
   1211e:	lsls	r1, r1, #2
   12120:	add.w	r2, r7, #20
   12124:	add.w	r5, r8, #20
   12128:	adds	r3, r2, r1
   1212a:	add	r1, r5
   1212c:	b.n	12132 <__mdiff+0x26>
   1212e:	cmp	r2, r3
   12130:	bcs.n	121f0 <__mdiff+0xe4>
   12132:	ldr.w	r6, [r3, #-4]!
   12136:	ldr.w	r4, [r1, #-4]!
   1213a:	cmp	r6, r4
   1213c:	beq.n	1212e <__mdiff+0x22>
   1213e:	bcs.n	12202 <__mdiff+0xf6>
   12140:	mov	r3, r7
   12142:	mov	r4, r2
   12144:	mov	r7, r8
   12146:	mov.w	r9, #1
   1214a:	mov	r8, r3
   1214c:	b.n	1215c <__mdiff+0x50>
   1214e:	blt.n	1220c <__mdiff+0x100>
   12150:	add.w	r5, r7, #20
   12154:	add.w	r4, r2, #20
   12158:	mov.w	r9, #0
   1215c:	ldr	r1, [r7, #4]
   1215e:	bl	11c20 <_Balloc>
   12162:	ldr.w	r3, [r8, #16]
   12166:	ldr	r6, [r7, #16]
   12168:	str.w	r9, [r0, #12]
   1216c:	add.w	ip, r4, r3, lsl #2
   12170:	mov	lr, r4
   12172:	add.w	r7, r5, r6, lsl #2
   12176:	add.w	r4, r0, #20
   1217a:	movs	r3, #0
   1217c:	ldr.w	r1, [lr], #4
   12180:	ldr.w	r8, [r5], #4
   12184:	uxth	r2, r1
   12186:	uxtah	r3, r3, r8
   1218a:	lsrs	r1, r1, #16
   1218c:	subs	r2, r3, r2
   1218e:	rsb	r3, r1, r8, lsr #16
   12192:	add.w	r3, r3, r2, asr #16
   12196:	uxth	r2, r2
   12198:	orr.w	r2, r2, r3, lsl #16
   1219c:	cmp	ip, lr
   1219e:	str.w	r2, [r4], #4
   121a2:	mov.w	r3, r3, asr #16
   121a6:	bhi.n	1217c <__mdiff+0x70>
   121a8:	cmp	r7, r5
   121aa:	bls.n	121dc <__mdiff+0xd0>
   121ac:	mov	ip, r4
   121ae:	mov	r1, r5
   121b0:	ldr.w	lr, [r1], #4
   121b4:	uxtah	r2, r3, lr
   121b8:	asrs	r3, r2, #16
   121ba:	add.w	r3, r3, lr, lsr #16
   121be:	uxth	r2, r2
   121c0:	orr.w	r2, r2, r3, lsl #16
   121c4:	cmp	r7, r1
   121c6:	str.w	r2, [ip], #4
   121ca:	mov.w	r3, r3, asr #16
   121ce:	bhi.n	121b0 <__mdiff+0xa4>
   121d0:	mvns	r5, r5
   121d2:	add	r5, r7
   121d4:	bic.w	r5, r5, #3
   121d8:	adds	r5, #4
   121da:	add	r4, r5
   121dc:	subs	r4, #4
   121de:	cbnz	r2, 121ea <__mdiff+0xde>
   121e0:	ldr.w	r3, [r4, #-4]!
   121e4:	subs	r6, #1
   121e6:	cmp	r3, #0
   121e8:	beq.n	121e0 <__mdiff+0xd4>
   121ea:	str	r6, [r0, #16]
   121ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   121f0:	movs	r1, #0
   121f2:	bl	11c20 <_Balloc>
   121f6:	movs	r2, #1
   121f8:	movs	r3, #0
   121fa:	str	r2, [r0, #16]
   121fc:	str	r3, [r0, #20]
   121fe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12202:	mov	r4, r5
   12204:	mov.w	r9, #0
   12208:	mov	r5, r2
   1220a:	b.n	1215c <__mdiff+0x50>
   1220c:	mov	r3, r7
   1220e:	add.w	r4, r7, #20
   12212:	add.w	r5, r8, #20
   12216:	mov	r7, r8
   12218:	mov.w	r9, #1
   1221c:	mov	r8, r3
   1221e:	b.n	1215c <__mdiff+0x50>

00012220 <__ulp>:
   12220:	ldr	r3, [pc, #76]	; (12270 <__ulp+0x50>)
   12222:	vmov	r2, s1
   12226:	ands	r2, r3
   12228:	sub.w	r3, r2, #54525952	; 0x3400000
   1222c:	cmp	r3, #0
   1222e:	ble.n	1223a <__ulp+0x1a>
   12230:	movs	r0, #0
   12232:	mov	r1, r3
   12234:	vmov	d0, r0, r1
   12238:	bx	lr
   1223a:	negs	r3, r3
   1223c:	asrs	r3, r3, #20
   1223e:	cmp	r3, #19
   12240:	ble.n	1225e <__ulp+0x3e>
   12242:	subs	r3, #20
   12244:	cmp	r3, #30
   12246:	ittte	le
   12248:	rsble	r3, r3, #31
   1224c:	movle	r2, #1
   1224e:	lslle.w	r3, r2, r3
   12252:	movgt	r3, #1
   12254:	movs	r1, #0
   12256:	mov	r0, r3
   12258:	vmov	d0, r0, r1
   1225c:	bx	lr
   1225e:	mov.w	r2, #524288	; 0x80000
   12262:	movs	r0, #0
   12264:	asr.w	r1, r2, r3
   12268:	vmov	d0, r0, r1
   1226c:	bx	lr
   1226e:	nop
   12270:	.word	0x7ff00000

00012274 <__b2d>:
   12274:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12278:	ldr	r6, [r0, #16]
   1227a:	add.w	r8, r0, #20
   1227e:	add.w	r6, r8, r6, lsl #2
   12282:	ldr.w	r7, [r6, #-4]
   12286:	mov	r0, r7
   12288:	bl	11d98 <__hi0bits>
   1228c:	rsb	r3, r0, #32
   12290:	cmp	r0, #10
   12292:	str	r3, [r1, #0]
   12294:	sub.w	r3, r6, #4
   12298:	bgt.n	122cc <__b2d+0x58>
   1229a:	cmp	r8, r3
   1229c:	rsb	r2, r0, #11
   122a0:	it	cc
   122a2:	ldrcc.w	r3, [r6, #-8]
   122a6:	lsr.w	r1, r7, r2
   122aa:	add.w	r0, r0, #21
   122ae:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   122b2:	ite	cc
   122b4:	lsrcc	r3, r2
   122b6:	movcs	r3, #0
   122b8:	lsl.w	r0, r7, r0
   122bc:	orr.w	r5, r5, #3145728	; 0x300000
   122c0:	orr.w	r4, r0, r3
   122c4:	vmov	d0, r4, r5
   122c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122cc:	cmp	r8, r3
   122ce:	bcs.n	12312 <__b2d+0x9e>
   122d0:	subs.w	r3, r0, #11
   122d4:	ldr.w	r2, [r6, #-8]
   122d8:	beq.n	12318 <__b2d+0xa4>
   122da:	lsl.w	r0, r7, r3
   122de:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   122e2:	rsb	lr, r3, #32
   122e6:	sub.w	r1, r6, #8
   122ea:	orr.w	r7, r7, #3145728	; 0x300000
   122ee:	lsr.w	r0, r2, lr
   122f2:	cmp	r8, r1
   122f4:	orr.w	r5, r7, r0
   122f8:	bcs.n	1233c <__b2d+0xc8>
   122fa:	ldr.w	r1, [r6, #-12]
   122fe:	lsl.w	r0, r2, r3
   12302:	lsr.w	r3, r1, lr
   12306:	orrs	r0, r3
   12308:	mov	r4, r0
   1230a:	vmov	d0, r4, r5
   1230e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12312:	subs	r0, #11
   12314:	bne.n	1232a <__b2d+0xb6>
   12316:	mov	r2, r0
   12318:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   1231c:	orr.w	r5, r5, #3145728	; 0x300000
   12320:	mov	r4, r2
   12322:	vmov	d0, r4, r5
   12326:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1232a:	lsl.w	r0, r7, r0
   1232e:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   12332:	movs	r0, #0
   12334:	orr.w	r5, r5, #3145728	; 0x300000
   12338:	mov	r4, r0
   1233a:	b.n	1230a <__b2d+0x96>
   1233c:	lsl.w	r0, r2, r3
   12340:	mov	r4, r0
   12342:	b.n	1230a <__b2d+0x96>

00012344 <__d2b>:
   12344:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12348:	vmov	r6, r7, d0
   1234c:	sub	sp, #12
   1234e:	mov	r8, r1
   12350:	movs	r1, #1
   12352:	mov	r4, r7
   12354:	ubfx	r5, r7, #20, #11
   12358:	mov	r7, r2
   1235a:	bl	11c20 <_Balloc>
   1235e:	ubfx	r4, r4, #0, #20
   12362:	mov	r9, r0
   12364:	cbz	r5, 1236a <__d2b+0x26>
   12366:	orr.w	r4, r4, #1048576	; 0x100000
   1236a:	str	r4, [sp, #4]
   1236c:	cbz	r6, 123b6 <__d2b+0x72>
   1236e:	add	r0, sp, #8
   12370:	str.w	r6, [r0, #-8]!
   12374:	bl	11dd8 <__lo0bits>
   12378:	cmp	r0, #0
   1237a:	bne.n	123e6 <__d2b+0xa2>
   1237c:	ldmia.w	sp, {r2, r3}
   12380:	str.w	r2, [r9, #20]
   12384:	cmp	r3, #0
   12386:	ite	eq
   12388:	moveq	r1, #1
   1238a:	movne	r1, #2
   1238c:	str.w	r3, [r9, #24]
   12390:	str.w	r1, [r9, #16]
   12394:	cbnz	r5, 123ce <__d2b+0x8a>
   12396:	add.w	r3, r9, r1, lsl #2
   1239a:	subw	r0, r0, #1074	; 0x432
   1239e:	str.w	r0, [r8]
   123a2:	ldr	r0, [r3, #16]
   123a4:	bl	11d98 <__hi0bits>
   123a8:	rsb	r0, r0, r1, lsl #5
   123ac:	str	r0, [r7, #0]
   123ae:	mov	r0, r9
   123b0:	add	sp, #12
   123b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   123b6:	add	r0, sp, #4
   123b8:	bl	11dd8 <__lo0bits>
   123bc:	ldr	r3, [sp, #4]
   123be:	str.w	r3, [r9, #20]
   123c2:	movs	r1, #1
   123c4:	adds	r0, #32
   123c6:	str.w	r1, [r9, #16]
   123ca:	cmp	r5, #0
   123cc:	beq.n	12396 <__d2b+0x52>
   123ce:	subw	r5, r5, #1075	; 0x433
   123d2:	add	r5, r0
   123d4:	rsb	r0, r0, #53	; 0x35
   123d8:	str.w	r5, [r8]
   123dc:	str	r0, [r7, #0]
   123de:	mov	r0, r9
   123e0:	add	sp, #12
   123e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   123e6:	ldmia.w	sp, {r2, r3}
   123ea:	rsb	r1, r0, #32
   123ee:	lsl.w	r1, r3, r1
   123f2:	orrs	r2, r1
   123f4:	lsrs	r3, r0
   123f6:	str	r3, [sp, #4]
   123f8:	str.w	r2, [r9, #20]
   123fc:	b.n	12384 <__d2b+0x40>
   123fe:	nop

00012400 <__ratio>:
   12400:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12404:	sub	sp, #12
   12406:	mov	r8, r1
   12408:	mov	r1, sp
   1240a:	mov	r9, r0
   1240c:	bl	12274 <__b2d>
   12410:	mov	r0, r8
   12412:	add	r1, sp, #4
   12414:	vmov	r4, r5, d0
   12418:	bl	12274 <__b2d>
   1241c:	ldmia.w	sp, {r1, r3}
   12420:	ldr.w	r2, [r9, #16]
   12424:	ldr.w	r0, [r8, #16]
   12428:	subs	r1, r1, r3
   1242a:	subs	r0, r2, r0
   1242c:	add.w	r3, r1, r0, lsl #5
   12430:	cmp	r3, #0
   12432:	vmov	r6, r7, d0
   12436:	ble.n	12454 <__ratio+0x54>
   12438:	add.w	r1, r5, r3, lsl #20
   1243c:	mov	r5, r1
   1243e:	mov	r2, r6
   12440:	mov	r3, r7
   12442:	mov	r0, r4
   12444:	mov	r1, r5
   12446:	bl	af90 <__aeabi_ddiv>
   1244a:	vmov	d0, r0, r1
   1244e:	add	sp, #12
   12450:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12454:	sub.w	r9, r7, r3, lsl #20
   12458:	vmov	r6, s0
   1245c:	mov	r7, r9
   1245e:	b.n	1243e <__ratio+0x3e>

00012460 <__copybits>:
   12460:	push	{r4, r5, r6}
   12462:	ldr	r4, [r2, #16]
   12464:	add.w	r3, r2, #20
   12468:	subs	r1, #1
   1246a:	asrs	r6, r1, #5
   1246c:	add.w	r4, r3, r4, lsl #2
   12470:	adds	r6, #1
   12472:	cmp	r3, r4
   12474:	add.w	r6, r0, r6, lsl #2
   12478:	bcs.n	12494 <__copybits+0x34>
   1247a:	subs	r1, r0, #4
   1247c:	ldr.w	r5, [r3], #4
   12480:	str.w	r5, [r1, #4]!
   12484:	cmp	r4, r3
   12486:	bhi.n	1247c <__copybits+0x1c>
   12488:	subs	r3, r4, r2
   1248a:	subs	r3, #21
   1248c:	bic.w	r3, r3, #3
   12490:	adds	r3, #4
   12492:	add	r0, r3
   12494:	cmp	r6, r0
   12496:	bls.n	124a2 <__copybits+0x42>
   12498:	movs	r3, #0
   1249a:	str.w	r3, [r0], #4
   1249e:	cmp	r6, r0
   124a0:	bhi.n	1249a <__copybits+0x3a>
   124a2:	pop	{r4, r5, r6}
   124a4:	bx	lr
   124a6:	nop

000124a8 <__any_on>:
   124a8:	ldr	r3, [r0, #16]
   124aa:	asrs	r2, r1, #5
   124ac:	cmp	r3, r2
   124ae:	push	{r4}
   124b0:	add.w	r4, r0, #20
   124b4:	bge.n	124d8 <__any_on+0x30>
   124b6:	add.w	r3, r4, r3, lsl #2
   124ba:	cmp	r4, r3
   124bc:	bcs.n	12502 <__any_on+0x5a>
   124be:	ldr.w	r0, [r3, #-4]
   124c2:	subs	r3, #4
   124c4:	cbz	r0, 124ce <__any_on+0x26>
   124c6:	b.n	124f4 <__any_on+0x4c>
   124c8:	ldr.w	r2, [r3, #-4]!
   124cc:	cbnz	r2, 124f4 <__any_on+0x4c>
   124ce:	cmp	r4, r3
   124d0:	bcc.n	124c8 <__any_on+0x20>
   124d2:	ldr.w	r4, [sp], #4
   124d6:	bx	lr
   124d8:	ble.n	124fc <__any_on+0x54>
   124da:	ands.w	r1, r1, #31
   124de:	beq.n	124fc <__any_on+0x54>
   124e0:	ldr.w	r0, [r4, r2, lsl #2]
   124e4:	lsr.w	r3, r0, r1
   124e8:	lsl.w	r1, r3, r1
   124ec:	cmp	r0, r1
   124ee:	add.w	r3, r4, r2, lsl #2
   124f2:	beq.n	124ba <__any_on+0x12>
   124f4:	movs	r0, #1
   124f6:	ldr.w	r4, [sp], #4
   124fa:	bx	lr
   124fc:	add.w	r3, r4, r2, lsl #2
   12500:	b.n	124ba <__any_on+0x12>
   12502:	movs	r0, #0
   12504:	b.n	124d2 <__any_on+0x2a>
   12506:	nop

00012508 <__sccl>:
   12508:	push	{r4, r5, r6}
   1250a:	ldrb	r5, [r1, #0]
   1250c:	cmp	r5, #94	; 0x5e
   1250e:	beq.n	12570 <__sccl+0x68>
   12510:	movs	r2, #0
   12512:	adds	r1, #1
   12514:	mov	r6, r2
   12516:	subs	r3, r0, #1
   12518:	add.w	r4, r0, #255	; 0xff
   1251c:	strb.w	r2, [r3, #1]!
   12520:	cmp	r3, r4
   12522:	bne.n	1251c <__sccl+0x14>
   12524:	cbz	r5, 12548 <__sccl+0x40>
   12526:	eor.w	r2, r6, #1
   1252a:	strb	r2, [r0, r5]
   1252c:	adds	r4, r1, #1
   1252e:	ldrb.w	r3, [r4, #-1]
   12532:	cmp	r3, #45	; 0x2d
   12534:	beq.n	12554 <__sccl+0x4c>
   12536:	cmp	r3, #93	; 0x5d
   12538:	beq.n	1254e <__sccl+0x46>
   1253a:	cbz	r3, 12542 <__sccl+0x3a>
   1253c:	mov	r5, r3
   1253e:	mov	r1, r4
   12540:	b.n	1252a <__sccl+0x22>
   12542:	mov	r0, r1
   12544:	pop	{r4, r5, r6}
   12546:	bx	lr
   12548:	subs	r0, r1, #1
   1254a:	pop	{r4, r5, r6}
   1254c:	bx	lr
   1254e:	mov	r0, r4
   12550:	pop	{r4, r5, r6}
   12552:	bx	lr
   12554:	ldrb	r6, [r1, #1]
   12556:	cmp	r6, #93	; 0x5d
   12558:	beq.n	1253c <__sccl+0x34>
   1255a:	cmp	r5, r6
   1255c:	bgt.n	1253c <__sccl+0x34>
   1255e:	adds	r1, #2
   12560:	adds	r3, r0, r5
   12562:	adds	r5, #1
   12564:	cmp	r6, r5
   12566:	strb.w	r2, [r3, #1]!
   1256a:	bgt.n	12562 <__sccl+0x5a>
   1256c:	adds	r4, #2
   1256e:	b.n	1252e <__sccl+0x26>
   12570:	movs	r2, #1
   12572:	ldrb	r5, [r1, #1]
   12574:	mov	r6, r2
   12576:	adds	r1, #2
   12578:	b.n	12516 <__sccl+0xe>
   1257a:	nop

0001257c <_strtoll_l.isra.0>:
   1257c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12580:	sub	sp, #20
   12582:	mov	sl, r3
   12584:	str	r1, [sp, #8]
   12586:	str	r0, [sp, #12]
   12588:	str	r2, [sp, #4]
   1258a:	mov	r7, r1
   1258c:	ldr	r6, [sp, #56]	; 0x38
   1258e:	b.n	12592 <_strtoll_l.isra.0+0x16>
   12590:	mov	r7, r5
   12592:	mov	r5, r7
   12594:	mov	r0, r6
   12596:	ldrb.w	r4, [r5], #1
   1259a:	bl	baac <__locale_ctype_ptr_l>
   1259e:	add	r0, r4
   125a0:	ldrb	r3, [r0, #1]
   125a2:	and.w	r3, r3, #8
   125a6:	and.w	r2, r3, #255	; 0xff
   125aa:	cmp	r3, #0
   125ac:	bne.n	12590 <_strtoll_l.isra.0+0x14>
   125ae:	cmp	r4, #45	; 0x2d
   125b0:	beq.w	126ba <_strtoll_l.isra.0+0x13e>
   125b4:	cmp	r4, #43	; 0x2b
   125b6:	it	eq
   125b8:	ldrbeq	r4, [r7, #1]
   125ba:	str	r2, [sp, #0]
   125bc:	it	eq
   125be:	addeq	r5, r7, #2
   125c0:	cmp.w	sl, #0
   125c4:	beq.n	125e0 <_strtoll_l.isra.0+0x64>
   125c6:	cmp.w	sl, #16
   125ca:	beq.w	126f8 <_strtoll_l.isra.0+0x17c>
   125ce:	ldr	r3, [sp, #0]
   125d0:	mov	r6, sl
   125d2:	asrs	r7, r6, #31
   125d4:	cbnz	r3, 125f2 <_strtoll_l.isra.0+0x76>
   125d6:	mov.w	r8, #4294967295
   125da:	mvn.w	r9, #2147483648	; 0x80000000
   125de:	b.n	125fa <_strtoll_l.isra.0+0x7e>
   125e0:	cmp	r4, #48	; 0x30
   125e2:	beq.n	126e4 <_strtoll_l.isra.0+0x168>
   125e4:	movs	r6, #10
   125e6:	movs	r7, #0
   125e8:	mov.w	sl, #10
   125ec:	ldr	r3, [sp, #0]
   125ee:	cmp	r3, #0
   125f0:	beq.n	125d6 <_strtoll_l.isra.0+0x5a>
   125f2:	mov.w	r8, #0
   125f6:	mov.w	r9, #2147483648	; 0x80000000
   125fa:	mov	r2, r6
   125fc:	mov	r3, r7
   125fe:	mov	r0, r8
   12600:	mov	r1, r9
   12602:	bl	b688 <__aeabi_uldivmod>
   12606:	mov	r3, r7
   12608:	mov	fp, r2
   1260a:	mov	r0, r8
   1260c:	mov	r2, r6
   1260e:	mov	r1, r9
   12610:	bl	b688 <__aeabi_uldivmod>
   12614:	mov.w	lr, #0
   12618:	movs	r2, #0
   1261a:	movs	r3, #0
   1261c:	b.n	1263e <_strtoll_l.isra.0+0xc2>
   1261e:	beq.n	126ac <_strtoll_l.isra.0+0x130>
   12620:	mul.w	r4, r2, r7
   12624:	mla	r4, r6, r3, r4
   12628:	umull	r2, r3, r2, r6
   1262c:	add	r3, r4
   1262e:	adds.w	r2, r2, ip
   12632:	adc.w	r3, r3, ip, asr #31
   12636:	mov.w	lr, #1
   1263a:	ldrb.w	r4, [r5], #1
   1263e:	sub.w	ip, r4, #48	; 0x30
   12642:	cmp.w	ip, #9
   12646:	bls.n	12656 <_strtoll_l.isra.0+0xda>
   12648:	sub.w	ip, r4, #65	; 0x41
   1264c:	cmp.w	ip, #25
   12650:	bhi.n	1266e <_strtoll_l.isra.0+0xf2>
   12652:	sub.w	ip, r4, #55	; 0x37
   12656:	cmp	sl, ip
   12658:	ble.n	12680 <_strtoll_l.isra.0+0x104>
   1265a:	cmp.w	lr, #4294967295
   1265e:	beq.n	1263a <_strtoll_l.isra.0+0xbe>
   12660:	cmp	r1, r3
   12662:	it	eq
   12664:	cmpeq	r0, r2
   12666:	bcs.n	1261e <_strtoll_l.isra.0+0xa2>
   12668:	mov.w	lr, #4294967295
   1266c:	b.n	1263a <_strtoll_l.isra.0+0xbe>
   1266e:	sub.w	ip, r4, #97	; 0x61
   12672:	cmp.w	ip, #25
   12676:	bhi.n	12680 <_strtoll_l.isra.0+0x104>
   12678:	sub.w	ip, r4, #87	; 0x57
   1267c:	cmp	sl, ip
   1267e:	bgt.n	1265a <_strtoll_l.isra.0+0xde>
   12680:	cmp.w	lr, #4294967295
   12684:	beq.n	126c4 <_strtoll_l.isra.0+0x148>
   12686:	ldr	r1, [sp, #0]
   12688:	cbz	r1, 12690 <_strtoll_l.isra.0+0x114>
   1268a:	negs	r2, r2
   1268c:	sbc.w	r3, r3, r3, lsl #1
   12690:	ldr	r1, [sp, #4]
   12692:	cmp	r1, #0
   12694:	beq.n	1271c <_strtoll_l.isra.0+0x1a0>
   12696:	cmp.w	lr, #0
   1269a:	bne.n	126dc <_strtoll_l.isra.0+0x160>
   1269c:	ldr	r5, [sp, #8]
   1269e:	mov	r0, r2
   126a0:	mov	r1, r3
   126a2:	ldr	r3, [sp, #4]
   126a4:	str	r5, [r3, #0]
   126a6:	add	sp, #20
   126a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126ac:	cmp	fp, ip
   126ae:	bge.n	12620 <_strtoll_l.isra.0+0xa4>
   126b0:	mov	r2, r0
   126b2:	mov	r3, r1
   126b4:	mov.w	lr, #4294967295
   126b8:	b.n	1263a <_strtoll_l.isra.0+0xbe>
   126ba:	movs	r3, #1
   126bc:	adds	r5, r7, #2
   126be:	ldrb	r4, [r7, #1]
   126c0:	str	r3, [sp, #0]
   126c2:	b.n	125c0 <_strtoll_l.isra.0+0x44>
   126c4:	ldr	r3, [sp, #0]
   126c6:	cbnz	r3, 12714 <_strtoll_l.isra.0+0x198>
   126c8:	mov.w	r0, #4294967295
   126cc:	mvn.w	r1, #2147483648	; 0x80000000
   126d0:	ldr	r2, [sp, #12]
   126d2:	movs	r3, #34	; 0x22
   126d4:	str	r3, [r2, #0]
   126d6:	ldr	r3, [sp, #4]
   126d8:	cbnz	r3, 126e0 <_strtoll_l.isra.0+0x164>
   126da:	b.n	126a6 <_strtoll_l.isra.0+0x12a>
   126dc:	mov	r0, r2
   126de:	mov	r1, r3
   126e0:	subs	r5, #1
   126e2:	b.n	126a2 <_strtoll_l.isra.0+0x126>
   126e4:	ldrb	r3, [r5, #0]
   126e6:	and.w	r3, r3, #223	; 0xdf
   126ea:	cmp	r3, #88	; 0x58
   126ec:	beq.n	12706 <_strtoll_l.isra.0+0x18a>
   126ee:	movs	r6, #8
   126f0:	movs	r7, #0
   126f2:	mov.w	sl, #8
   126f6:	b.n	125ec <_strtoll_l.isra.0+0x70>
   126f8:	cmp	r4, #48	; 0x30
   126fa:	bne.n	12722 <_strtoll_l.isra.0+0x1a6>
   126fc:	ldrb	r3, [r5, #0]
   126fe:	and.w	r3, r3, #223	; 0xdf
   12702:	cmp	r3, #88	; 0x58
   12704:	bne.n	12722 <_strtoll_l.isra.0+0x1a6>
   12706:	ldrb	r4, [r5, #1]
   12708:	movs	r6, #16
   1270a:	movs	r7, #0
   1270c:	adds	r5, #2
   1270e:	mov.w	sl, #16
   12712:	b.n	125ec <_strtoll_l.isra.0+0x70>
   12714:	movs	r0, #0
   12716:	mov.w	r1, #2147483648	; 0x80000000
   1271a:	b.n	126d0 <_strtoll_l.isra.0+0x154>
   1271c:	mov	r0, r2
   1271e:	mov	r1, r3
   12720:	b.n	126a6 <_strtoll_l.isra.0+0x12a>
   12722:	movs	r6, #16
   12724:	movs	r7, #0
   12726:	b.n	125ec <_strtoll_l.isra.0+0x70>

00012728 <_strtoll_r>:
   12728:	push	{r4, r5, lr}
   1272a:	ldr	r4, [pc, #24]	; (12744 <_strtoll_r+0x1c>)
   1272c:	ldr	r5, [pc, #24]	; (12748 <_strtoll_r+0x20>)
   1272e:	ldr	r4, [r4, #0]
   12730:	ldr	r4, [r4, #52]	; 0x34
   12732:	sub	sp, #12
   12734:	cmp	r4, #0
   12736:	it	eq
   12738:	moveq	r4, r5
   1273a:	str	r4, [sp, #0]
   1273c:	bl	1257c <_strtoll_l.isra.0>
   12740:	add	sp, #12
   12742:	pop	{r4, r5, pc}
   12744:	.word	0x20014c00
   12748:	.word	0x20014c04

0001274c <_strtoul_l.isra.0>:
   1274c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12750:	ldr.w	r9, [sp, #40]	; 0x28
   12754:	mov	r6, r1
   12756:	mov	r7, r0
   12758:	mov	r5, r2
   1275a:	mov	r8, r3
   1275c:	mov	fp, r1
   1275e:	b.n	12762 <_strtoul_l.isra.0+0x16>
   12760:	mov	fp, r4
   12762:	mov	r4, fp
   12764:	mov	r0, r9
   12766:	ldrb.w	sl, [r4], #1
   1276a:	bl	baac <__locale_ctype_ptr_l>
   1276e:	add	r0, sl
   12770:	ldrb	r0, [r0, #1]
   12772:	and.w	r0, r0, #8
   12776:	and.w	ip, r0, #255	; 0xff
   1277a:	cmp	r0, #0
   1277c:	bne.n	12760 <_strtoul_l.isra.0+0x14>
   1277e:	mov	r1, sl
   12780:	cmp	r1, #45	; 0x2d
   12782:	beq.n	12848 <_strtoul_l.isra.0+0xfc>
   12784:	cmp	r1, #43	; 0x2b
   12786:	itt	eq
   12788:	ldrbeq.w	r1, [fp, #1]
   1278c:	addeq.w	r4, fp, #2
   12790:	cmp.w	r8, #0
   12794:	beq.n	127b0 <_strtoul_l.isra.0+0x64>
   12796:	cmp.w	r8, #16
   1279a:	beq.n	12856 <_strtoul_l.isra.0+0x10a>
   1279c:	mov.w	r3, #4294967295
   127a0:	udiv	r3, r3, r8
   127a4:	mul.w	sl, r8, r3
   127a8:	mvn.w	sl, sl
   127ac:	mov	r9, r8
   127ae:	b.n	127c0 <_strtoul_l.isra.0+0x74>
   127b0:	cmp	r1, #48	; 0x30
   127b2:	beq.n	12878 <_strtoul_l.isra.0+0x12c>
   127b4:	mov.w	r8, #10
   127b8:	ldr	r3, [pc, #244]	; (128b0 <_strtoul_l.isra.0+0x164>)
   127ba:	mov	r9, r8
   127bc:	mov.w	sl, #5
   127c0:	mov.w	lr, #0
   127c4:	mov	r0, lr
   127c6:	b.n	127d6 <_strtoul_l.isra.0+0x8a>
   127c8:	beq.n	1282a <_strtoul_l.isra.0+0xde>
   127ca:	mla	r0, r9, r0, r2
   127ce:	mov.w	lr, #1
   127d2:	ldrb.w	r1, [r4], #1
   127d6:	sub.w	r2, r1, #48	; 0x30
   127da:	cmp	r2, #9
   127dc:	bls.n	127ea <_strtoul_l.isra.0+0x9e>
   127de:	sub.w	r2, r1, #65	; 0x41
   127e2:	cmp	r2, #25
   127e4:	bhi.n	127fe <_strtoul_l.isra.0+0xb2>
   127e6:	sub.w	r2, r1, #55	; 0x37
   127ea:	cmp	r8, r2
   127ec:	ble.n	1280e <_strtoul_l.isra.0+0xc2>
   127ee:	cmp.w	lr, #4294967295
   127f2:	beq.n	127d2 <_strtoul_l.isra.0+0x86>
   127f4:	cmp	r0, r3
   127f6:	bls.n	127c8 <_strtoul_l.isra.0+0x7c>
   127f8:	mov.w	lr, #4294967295
   127fc:	b.n	127d2 <_strtoul_l.isra.0+0x86>
   127fe:	sub.w	r2, r1, #97	; 0x61
   12802:	cmp	r2, #25
   12804:	bhi.n	1280e <_strtoul_l.isra.0+0xc2>
   12806:	sub.w	r2, r1, #87	; 0x57
   1280a:	cmp	r8, r2
   1280c:	bgt.n	127ee <_strtoul_l.isra.0+0xa2>
   1280e:	cmp.w	lr, #4294967295
   12812:	beq.n	12838 <_strtoul_l.isra.0+0xec>
   12814:	cmp.w	ip, #0
   12818:	beq.n	1281c <_strtoul_l.isra.0+0xd0>
   1281a:	negs	r0, r0
   1281c:	cbz	r5, 12834 <_strtoul_l.isra.0+0xe8>
   1281e:	cmp.w	lr, #0
   12822:	bne.n	12840 <_strtoul_l.isra.0+0xf4>
   12824:	str	r6, [r5, #0]
   12826:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1282a:	cmp	r2, sl
   1282c:	ble.n	127ca <_strtoul_l.isra.0+0x7e>
   1282e:	mov.w	lr, #4294967295
   12832:	b.n	127d2 <_strtoul_l.isra.0+0x86>
   12834:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12838:	movs	r3, #34	; 0x22
   1283a:	str	r3, [r7, #0]
   1283c:	mov	r0, lr
   1283e:	cbz	r5, 12892 <_strtoul_l.isra.0+0x146>
   12840:	subs	r6, r4, #1
   12842:	str	r6, [r5, #0]
   12844:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12848:	add.w	r4, fp, #2
   1284c:	ldrb.w	r1, [fp, #1]
   12850:	mov.w	ip, #1
   12854:	b.n	12790 <_strtoul_l.isra.0+0x44>
   12856:	cmp	r1, #48	; 0x30
   12858:	bne.n	12896 <_strtoul_l.isra.0+0x14a>
   1285a:	ldrb	r3, [r4, #0]
   1285c:	and.w	r3, r3, #223	; 0xdf
   12860:	cmp	r3, #88	; 0x58
   12862:	bne.n	128a2 <_strtoul_l.isra.0+0x156>
   12864:	mov.w	r9, #16
   12868:	ldrb	r1, [r4, #1]
   1286a:	mov	r8, r9
   1286c:	mov.w	sl, #15
   12870:	adds	r4, #2
   12872:	mvn.w	r3, #4026531840	; 0xf0000000
   12876:	b.n	127c0 <_strtoul_l.isra.0+0x74>
   12878:	ldrb	r3, [r4, #0]
   1287a:	and.w	r3, r3, #223	; 0xdf
   1287e:	cmp	r3, #88	; 0x58
   12880:	beq.n	12864 <_strtoul_l.isra.0+0x118>
   12882:	mov.w	r8, #8
   12886:	mov	r9, r8
   12888:	mov.w	sl, #7
   1288c:	mvn.w	r3, #3758096384	; 0xe0000000
   12890:	b.n	127c0 <_strtoul_l.isra.0+0x74>
   12892:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12896:	mov.w	sl, #15
   1289a:	mvn.w	r3, #4026531840	; 0xf0000000
   1289e:	mov	r9, r8
   128a0:	b.n	127c0 <_strtoul_l.isra.0+0x74>
   128a2:	mov	r9, r8
   128a4:	mov.w	sl, #15
   128a8:	mvn.w	r3, #4026531840	; 0xf0000000
   128ac:	b.n	127c0 <_strtoul_l.isra.0+0x74>
   128ae:	nop
   128b0:	.word	0x19999999

000128b4 <_strtoul_r>:
   128b4:	push	{r4, r5, lr}
   128b6:	ldr	r4, [pc, #24]	; (128d0 <_strtoul_r+0x1c>)
   128b8:	ldr	r5, [pc, #24]	; (128d4 <_strtoul_r+0x20>)
   128ba:	ldr	r4, [r4, #0]
   128bc:	ldr	r4, [r4, #52]	; 0x34
   128be:	sub	sp, #12
   128c0:	cmp	r4, #0
   128c2:	it	eq
   128c4:	moveq	r4, r5
   128c6:	str	r4, [sp, #0]
   128c8:	bl	1274c <_strtoul_l.isra.0>
   128cc:	add	sp, #12
   128ce:	pop	{r4, r5, pc}
   128d0:	.word	0x20014c00
   128d4:	.word	0x20014c04

000128d8 <_strtoull_l.isra.0>:
   128d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128dc:	sub	sp, #20
   128de:	mov	fp, r1
   128e0:	str	r0, [sp, #8]
   128e2:	mov	r7, r2
   128e4:	mov	r6, r3
   128e6:	mov	r8, r1
   128e8:	ldr	r4, [sp, #56]	; 0x38
   128ea:	b.n	128ee <_strtoull_l.isra.0+0x16>
   128ec:	mov	r8, r5
   128ee:	mov	r5, r8
   128f0:	mov	r0, r4
   128f2:	ldrb.w	r9, [r5], #1
   128f6:	bl	baac <__locale_ctype_ptr_l>
   128fa:	add	r0, r9
   128fc:	ldrb	r3, [r0, #1]
   128fe:	and.w	r3, r3, #8
   12902:	and.w	r2, r3, #255	; 0xff
   12906:	cmp	r3, #0
   12908:	bne.n	128ec <_strtoull_l.isra.0+0x14>
   1290a:	mov	r4, r9
   1290c:	cmp	r4, #45	; 0x2d
   1290e:	beq.w	12a2a <_strtoull_l.isra.0+0x152>
   12912:	cmp	r4, #43	; 0x2b
   12914:	it	eq
   12916:	ldrbeq.w	r4, [r8, #1]
   1291a:	str	r2, [sp, #4]
   1291c:	it	eq
   1291e:	addeq.w	r5, r8, #2
   12922:	cbz	r6, 1295c <_strtoull_l.isra.0+0x84>
   12924:	cmp	r6, #16
   12926:	beq.w	12a38 <_strtoull_l.isra.0+0x160>
   1292a:	mov.w	r9, r6, asr #31
   1292e:	mov	r2, r6
   12930:	mov	r3, r9
   12932:	mov.w	r0, #4294967295
   12936:	mov.w	r1, #4294967295
   1293a:	bl	b688 <__aeabi_uldivmod>
   1293e:	mov	r2, r6
   12940:	str	r0, [sp, #12]
   12942:	mov	sl, r1
   12944:	mov	r3, r9
   12946:	mov.w	r0, #4294967295
   1294a:	mov.w	r1, #4294967295
   1294e:	bl	b688 <__aeabi_uldivmod>
   12952:	mov	r8, r6
   12954:	mov	lr, r2
   12956:	ldr	r2, [sp, #12]
   12958:	mov	r3, sl
   1295a:	b.n	12976 <_strtoull_l.isra.0+0x9e>
   1295c:	cmp	r4, #48	; 0x30
   1295e:	beq.w	12a64 <_strtoull_l.isra.0+0x18c>
   12962:	ldr	r3, [pc, #348]	; (12ac0 <_strtoull_l.isra.0+0x1e8>)
   12964:	mov.w	lr, #5
   12968:	mov.w	r2, #2576980377	; 0x99999999
   1296c:	mov.w	r8, #10
   12970:	mov.w	r9, #0
   12974:	movs	r6, #10
   12976:	mov.w	ip, #0
   1297a:	movs	r0, #0
   1297c:	movs	r1, #0
   1297e:	b.n	129a6 <_strtoull_l.isra.0+0xce>
   12980:	cmp	r1, r3
   12982:	it	eq
   12984:	cmpeq	r0, r2
   12986:	beq.n	12a0a <_strtoull_l.isra.0+0x132>
   12988:	mul.w	r4, r0, r9
   1298c:	mla	r4, r8, r1, r4
   12990:	umull	r0, r1, r0, r8
   12994:	add	r1, r4
   12996:	adds.w	r0, r0, sl
   1299a:	adc.w	r1, r1, sl, asr #31
   1299e:	mov.w	ip, #1
   129a2:	ldrb.w	r4, [r5], #1
   129a6:	sub.w	sl, r4, #48	; 0x30
   129aa:	cmp.w	sl, #9
   129ae:	bls.n	129be <_strtoull_l.isra.0+0xe6>
   129b0:	sub.w	sl, r4, #65	; 0x41
   129b4:	cmp.w	sl, #25
   129b8:	bhi.n	129d6 <_strtoull_l.isra.0+0xfe>
   129ba:	sub.w	sl, r4, #55	; 0x37
   129be:	cmp	r6, sl
   129c0:	ble.n	129e8 <_strtoull_l.isra.0+0x110>
   129c2:	cmp.w	ip, #4294967295
   129c6:	beq.n	129a2 <_strtoull_l.isra.0+0xca>
   129c8:	cmp	r3, r1
   129ca:	it	eq
   129cc:	cmpeq	r2, r0
   129ce:	bcs.n	12980 <_strtoull_l.isra.0+0xa8>
   129d0:	mov.w	ip, #4294967295
   129d4:	b.n	129a2 <_strtoull_l.isra.0+0xca>
   129d6:	sub.w	sl, r4, #97	; 0x61
   129da:	cmp.w	sl, #25
   129de:	bhi.n	129e8 <_strtoull_l.isra.0+0x110>
   129e0:	sub.w	sl, r4, #87	; 0x57
   129e4:	cmp	r6, sl
   129e6:	bgt.n	129c2 <_strtoull_l.isra.0+0xea>
   129e8:	cmp.w	ip, #4294967295
   129ec:	beq.n	12a14 <_strtoull_l.isra.0+0x13c>
   129ee:	ldr	r3, [sp, #4]
   129f0:	cbz	r3, 129f8 <_strtoull_l.isra.0+0x120>
   129f2:	negs	r0, r0
   129f4:	sbc.w	r1, r1, r1, lsl #1
   129f8:	cbz	r7, 12a04 <_strtoull_l.isra.0+0x12c>
   129fa:	cmp.w	ip, #0
   129fe:	bne.n	12a26 <_strtoull_l.isra.0+0x14e>
   12a00:	mov	r5, fp
   12a02:	str	r5, [r7, #0]
   12a04:	add	sp, #20
   12a06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a0a:	cmp	sl, lr
   12a0c:	ble.n	12988 <_strtoull_l.isra.0+0xb0>
   12a0e:	mov.w	ip, #4294967295
   12a12:	b.n	129a2 <_strtoull_l.isra.0+0xca>
   12a14:	ldr	r2, [sp, #8]
   12a16:	movs	r3, #34	; 0x22
   12a18:	str	r3, [r2, #0]
   12a1a:	mov.w	r0, #4294967295
   12a1e:	mov.w	r1, #4294967295
   12a22:	cmp	r7, #0
   12a24:	beq.n	12a04 <_strtoull_l.isra.0+0x12c>
   12a26:	subs	r5, #1
   12a28:	b.n	12a02 <_strtoull_l.isra.0+0x12a>
   12a2a:	movs	r3, #1
   12a2c:	add.w	r5, r8, #2
   12a30:	ldrb.w	r4, [r8, #1]
   12a34:	str	r3, [sp, #4]
   12a36:	b.n	12922 <_strtoull_l.isra.0+0x4a>
   12a38:	cmp	r4, #48	; 0x30
   12a3a:	bne.n	12a86 <_strtoull_l.isra.0+0x1ae>
   12a3c:	ldrb	r3, [r5, #0]
   12a3e:	and.w	r3, r3, #223	; 0xdf
   12a42:	cmp	r3, #88	; 0x58
   12a44:	bne.n	12a9c <_strtoull_l.isra.0+0x1c4>
   12a46:	mov.w	r3, #4294967295
   12a4a:	ldrb	r4, [r5, #1]
   12a4c:	str	r3, [sp, #12]
   12a4e:	mov.w	lr, #15
   12a52:	adds	r5, #2
   12a54:	mvn.w	sl, #4026531840	; 0xf0000000
   12a58:	mov.w	r8, #16
   12a5c:	mov.w	r9, #0
   12a60:	movs	r6, #16
   12a62:	b.n	12956 <_strtoull_l.isra.0+0x7e>
   12a64:	ldrb	r3, [r5, #0]
   12a66:	and.w	r3, r3, #223	; 0xdf
   12a6a:	cmp	r3, #88	; 0x58
   12a6c:	beq.n	12a46 <_strtoull_l.isra.0+0x16e>
   12a6e:	mov.w	lr, #7
   12a72:	mov.w	r2, #4294967295
   12a76:	mvn.w	r3, #3758096384	; 0xe0000000
   12a7a:	mov.w	r8, #8
   12a7e:	mov.w	r9, #0
   12a82:	movs	r6, #8
   12a84:	b.n	12976 <_strtoull_l.isra.0+0x9e>
   12a86:	mov.w	lr, #15
   12a8a:	mov.w	r2, #4294967295
   12a8e:	mvn.w	r3, #4026531840	; 0xf0000000
   12a92:	mov.w	r8, #16
   12a96:	mov.w	r9, #0
   12a9a:	b.n	12976 <_strtoull_l.isra.0+0x9e>
   12a9c:	mov.w	r8, #16
   12aa0:	mov.w	r9, #0
   12aa4:	mov	r2, r8
   12aa6:	mov	r3, r9
   12aa8:	mov.w	r0, #4294967295
   12aac:	mov.w	r1, #4294967295
   12ab0:	bl	b688 <__aeabi_uldivmod>
   12ab4:	mvn.w	r3, #4026531840	; 0xf0000000
   12ab8:	mov	lr, r2
   12aba:	mov.w	r2, #4294967295
   12abe:	b.n	12976 <_strtoull_l.isra.0+0x9e>
   12ac0:	.word	0x19999999

00012ac4 <_strtoull_r>:
   12ac4:	push	{r4, r5, lr}
   12ac6:	ldr	r4, [pc, #24]	; (12ae0 <_strtoull_r+0x1c>)
   12ac8:	ldr	r5, [pc, #24]	; (12ae4 <_strtoull_r+0x20>)
   12aca:	ldr	r4, [r4, #0]
   12acc:	ldr	r4, [r4, #52]	; 0x34
   12ace:	sub	sp, #12
   12ad0:	cmp	r4, #0
   12ad2:	it	eq
   12ad4:	moveq	r4, r5
   12ad6:	str	r4, [sp, #0]
   12ad8:	bl	128d8 <_strtoull_l.isra.0>
   12adc:	add	sp, #12
   12ade:	pop	{r4, r5, pc}
   12ae0:	.word	0x20014c00
   12ae4:	.word	0x20014c04

00012ae8 <__ssprint_r>:
   12ae8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aec:	ldr	r3, [r2, #8]
   12aee:	sub	sp, #12
   12af0:	mov	r8, r2
   12af2:	cmp	r3, #0
   12af4:	beq.n	12bdc <__ssprint_r+0xf4>
   12af6:	mov	fp, r0
   12af8:	mov.w	r9, #0
   12afc:	ldr	r6, [r2, #0]
   12afe:	ldr	r0, [r1, #0]
   12b00:	ldr	r3, [r1, #8]
   12b02:	mov	r5, r1
   12b04:	mov	r4, r9
   12b06:	cmp	r4, #0
   12b08:	beq.n	12b96 <__ssprint_r+0xae>
   12b0a:	cmp	r4, r3
   12b0c:	mov	r7, r3
   12b0e:	mov	sl, r3
   12b10:	bcc.n	12ba0 <__ssprint_r+0xb8>
   12b12:	ldrh	r3, [r5, #12]
   12b14:	tst.w	r3, #1152	; 0x480
   12b18:	beq.n	12b76 <__ssprint_r+0x8e>
   12b1a:	ldr	r7, [r5, #20]
   12b1c:	ldr	r1, [r5, #16]
   12b1e:	add.w	r7, r7, r7, lsl #1
   12b22:	rsb	sl, r1, r0
   12b26:	add.w	r7, r7, r7, lsr #31
   12b2a:	adds	r0, r4, #1
   12b2c:	asrs	r7, r7, #1
   12b2e:	add	r0, sl
   12b30:	cmp	r0, r7
   12b32:	mov	r2, r7
   12b34:	itt	hi
   12b36:	movhi	r7, r0
   12b38:	movhi	r2, r7
   12b3a:	lsls	r3, r3, #21
   12b3c:	bpl.n	12ba6 <__ssprint_r+0xbe>
   12b3e:	mov	r1, r2
   12b40:	mov	r0, fp
   12b42:	bl	bae8 <_malloc_r>
   12b46:	cmp	r0, #0
   12b48:	beq.n	12bba <__ssprint_r+0xd2>
   12b4a:	mov	r2, sl
   12b4c:	ldr	r1, [r5, #16]
   12b4e:	str	r0, [sp, #4]
   12b50:	bl	82a4 <memcpy>
   12b54:	ldrh	r2, [r5, #12]
   12b56:	ldr	r3, [sp, #4]
   12b58:	bic.w	r2, r2, #1152	; 0x480
   12b5c:	orr.w	r2, r2, #128	; 0x80
   12b60:	strh	r2, [r5, #12]
   12b62:	rsb	r2, sl, r7
   12b66:	add.w	r0, r3, sl
   12b6a:	str	r7, [r5, #20]
   12b6c:	str	r3, [r5, #16]
   12b6e:	str	r0, [r5, #0]
   12b70:	str	r2, [r5, #8]
   12b72:	mov	r7, r4
   12b74:	mov	sl, r4
   12b76:	mov	r2, sl
   12b78:	mov	r1, r9
   12b7a:	bl	c194 <memmove>
   12b7e:	ldr.w	r2, [r8, #8]
   12b82:	ldr	r3, [r5, #8]
   12b84:	ldr	r0, [r5, #0]
   12b86:	subs	r3, r3, r7
   12b88:	add	r0, sl
   12b8a:	subs	r4, r2, r4
   12b8c:	str	r3, [r5, #8]
   12b8e:	str	r0, [r5, #0]
   12b90:	str.w	r4, [r8, #8]
   12b94:	cbz	r4, 12bdc <__ssprint_r+0xf4>
   12b96:	ldr.w	r9, [r6]
   12b9a:	ldr	r4, [r6, #4]
   12b9c:	adds	r6, #8
   12b9e:	b.n	12b06 <__ssprint_r+0x1e>
   12ba0:	mov	r7, r4
   12ba2:	mov	sl, r4
   12ba4:	b.n	12b76 <__ssprint_r+0x8e>
   12ba6:	mov	r0, fp
   12ba8:	bl	c300 <_realloc_r>
   12bac:	mov	r3, r0
   12bae:	cmp	r0, #0
   12bb0:	bne.n	12b62 <__ssprint_r+0x7a>
   12bb2:	ldr	r1, [r5, #16]
   12bb4:	mov	r0, fp
   12bb6:	bl	11250 <_free_r>
   12bba:	movs	r3, #12
   12bbc:	str.w	r3, [fp]
   12bc0:	ldrh	r3, [r5, #12]
   12bc2:	movs	r2, #0
   12bc4:	orr.w	r3, r3, #64	; 0x40
   12bc8:	mov.w	r0, #4294967295
   12bcc:	strh	r3, [r5, #12]
   12bce:	str.w	r2, [r8, #8]
   12bd2:	str.w	r2, [r8, #4]
   12bd6:	add	sp, #12
   12bd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bdc:	movs	r0, #0
   12bde:	str.w	r0, [r8, #4]
   12be2:	add	sp, #12
   12be4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012be8 <_sungetc_r>:
   12be8:	adds	r3, r1, #1
   12bea:	push	{r4, r5, r6, lr}
   12bec:	beq.n	12c26 <_sungetc_r+0x3e>
   12bee:	ldrh	r3, [r2, #12]
   12bf0:	ldr	r4, [r2, #48]	; 0x30
   12bf2:	bic.w	r3, r3, #32
   12bf6:	strh	r3, [r2, #12]
   12bf8:	uxtb	r5, r1
   12bfa:	cbz	r4, 12c2c <_sungetc_r+0x44>
   12bfc:	mov	r4, r2
   12bfe:	ldr	r2, [r2, #4]
   12c00:	ldr	r3, [r4, #52]	; 0x34
   12c02:	cmp	r2, r3
   12c04:	mov	r6, r1
   12c06:	bge.n	12c1c <_sungetc_r+0x34>
   12c08:	ldr	r3, [r4, #0]
   12c0a:	subs	r2, r3, #1
   12c0c:	str	r2, [r4, #0]
   12c0e:	strb.w	r6, [r3, #-1]
   12c12:	ldr	r3, [r4, #4]
   12c14:	adds	r3, #1
   12c16:	str	r3, [r4, #4]
   12c18:	mov	r0, r5
   12c1a:	pop	{r4, r5, r6, pc}
   12c1c:	mov	r1, r4
   12c1e:	bl	12d2c <__submore>
   12c22:	cmp	r0, #0
   12c24:	beq.n	12c08 <_sungetc_r+0x20>
   12c26:	mov.w	r5, #4294967295
   12c2a:	b.n	12c18 <_sungetc_r+0x30>
   12c2c:	ldr	r0, [r2, #16]
   12c2e:	ldr	r3, [r2, #0]
   12c30:	cbz	r0, 12c3e <_sungetc_r+0x56>
   12c32:	cmp	r0, r3
   12c34:	bcs.n	12c3e <_sungetc_r+0x56>
   12c36:	ldrb.w	r0, [r3, #-1]
   12c3a:	cmp	r5, r0
   12c3c:	beq.n	12c5e <_sungetc_r+0x76>
   12c3e:	str	r3, [r2, #56]	; 0x38
   12c40:	mov	r3, r2
   12c42:	ldr	r6, [r2, #4]
   12c44:	str	r6, [r2, #60]	; 0x3c
   12c46:	add.w	r4, r2, #64	; 0x40
   12c4a:	movs	r0, #3
   12c4c:	str	r0, [r2, #52]	; 0x34
   12c4e:	str	r4, [r2, #48]	; 0x30
   12c50:	strb.w	r1, [r3, #66]!
   12c54:	movs	r1, #1
   12c56:	str	r3, [r2, #0]
   12c58:	str	r1, [r2, #4]
   12c5a:	mov	r0, r5
   12c5c:	pop	{r4, r5, r6, pc}
   12c5e:	ldr	r1, [r2, #4]
   12c60:	subs	r3, #1
   12c62:	adds	r1, #1
   12c64:	str	r3, [r2, #0]
   12c66:	str	r1, [r2, #4]
   12c68:	b.n	12c18 <_sungetc_r+0x30>
   12c6a:	nop

00012c6c <__ssrefill_r>:
   12c6c:	push	{r4, lr}
   12c6e:	mov	r4, r1
   12c70:	ldr	r1, [r1, #48]	; 0x30
   12c72:	cbz	r1, 12c90 <__ssrefill_r+0x24>
   12c74:	add.w	r3, r4, #64	; 0x40
   12c78:	cmp	r1, r3
   12c7a:	beq.n	12c80 <__ssrefill_r+0x14>
   12c7c:	bl	11250 <_free_r>
   12c80:	ldr	r3, [r4, #60]	; 0x3c
   12c82:	str	r3, [r4, #4]
   12c84:	movs	r0, #0
   12c86:	str	r0, [r4, #48]	; 0x30
   12c88:	cbz	r3, 12c90 <__ssrefill_r+0x24>
   12c8a:	ldr	r3, [r4, #56]	; 0x38
   12c8c:	str	r3, [r4, #0]
   12c8e:	pop	{r4, pc}
   12c90:	ldrh	r3, [r4, #12]
   12c92:	ldr	r2, [r4, #16]
   12c94:	str	r2, [r4, #0]
   12c96:	orr.w	r3, r3, #32
   12c9a:	movs	r2, #0
   12c9c:	strh	r3, [r4, #12]
   12c9e:	str	r2, [r4, #4]
   12ca0:	mov.w	r0, #4294967295
   12ca4:	pop	{r4, pc}
   12ca6:	nop

00012ca8 <_sfread_r>:
   12ca8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cac:	sub	sp, #12
   12cae:	mul.w	r9, r2, r3
   12cb2:	str	r2, [sp, #4]
   12cb4:	mov	sl, r3
   12cb6:	ldr	r4, [sp, #48]	; 0x30
   12cb8:	cmp.w	r9, #0
   12cbc:	beq.n	12d12 <_sfread_r+0x6a>
   12cbe:	mov	r7, r0
   12cc0:	mov	r6, r1
   12cc2:	mov	r5, r9
   12cc4:	mov.w	r8, #0
   12cc8:	b.n	12cea <_sfread_r+0x42>
   12cca:	ldr	r1, [r4, #0]
   12ccc:	bl	82a4 <memcpy>
   12cd0:	ldr	r2, [r4, #0]
   12cd2:	str.w	r8, [r4, #4]
   12cd6:	add	r2, fp
   12cd8:	str	r2, [r4, #0]
   12cda:	mov	r1, r4
   12cdc:	mov	r0, r7
   12cde:	add	r6, fp
   12ce0:	rsb	r5, fp, r5
   12ce4:	bl	12c6c <__ssrefill_r>
   12ce8:	cbnz	r0, 12d1a <_sfread_r+0x72>
   12cea:	ldr.w	fp, [r4, #4]
   12cee:	cmp	r5, fp
   12cf0:	mov	r0, r6
   12cf2:	mov	r2, fp
   12cf4:	bhi.n	12cca <_sfread_r+0x22>
   12cf6:	mov	r2, r5
   12cf8:	ldr	r1, [r4, #0]
   12cfa:	bl	82a4 <memcpy>
   12cfe:	ldr	r2, [r4, #4]
   12d00:	ldr	r3, [r4, #0]
   12d02:	subs	r2, r2, r5
   12d04:	add	r3, r5
   12d06:	mov	r0, sl
   12d08:	str	r2, [r4, #4]
   12d0a:	str	r3, [r4, #0]
   12d0c:	add	sp, #12
   12d0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d12:	mov	r0, r9
   12d14:	add	sp, #12
   12d16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d1a:	ldr	r3, [sp, #4]
   12d1c:	rsb	r9, r5, r9
   12d20:	udiv	r0, r9, r3
   12d24:	add	sp, #12
   12d26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d2a:	nop

00012d2c <__submore>:
   12d2c:	add.w	r3, r1, #64	; 0x40
   12d30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d34:	mov	r4, r1
   12d36:	ldr	r1, [r1, #48]	; 0x30
   12d38:	cmp	r1, r3
   12d3a:	beq.n	12d66 <__submore+0x3a>
   12d3c:	ldr	r6, [r4, #52]	; 0x34
   12d3e:	lsls	r7, r6, #1
   12d40:	mov	r2, r7
   12d42:	bl	c300 <_realloc_r>
   12d46:	mov	r5, r0
   12d48:	cbz	r0, 12d9c <__submore+0x70>
   12d4a:	add.w	r8, r0, r6
   12d4e:	mov	r2, r6
   12d50:	mov	r0, r8
   12d52:	mov	r1, r5
   12d54:	bl	82a4 <memcpy>
   12d58:	str.w	r8, [r4]
   12d5c:	str	r5, [r4, #48]	; 0x30
   12d5e:	str	r7, [r4, #52]	; 0x34
   12d60:	movs	r0, #0
   12d62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d66:	mov.w	r1, #1024	; 0x400
   12d6a:	bl	bae8 <_malloc_r>
   12d6e:	cbz	r0, 12d9c <__submore+0x70>
   12d70:	ldrb.w	r3, [r4, #66]	; 0x42
   12d74:	str	r0, [r4, #48]	; 0x30
   12d76:	mov.w	r2, #1024	; 0x400
   12d7a:	str	r2, [r4, #52]	; 0x34
   12d7c:	strb.w	r3, [r0, #1023]	; 0x3ff
   12d80:	ldrb.w	r3, [r4, #65]	; 0x41
   12d84:	strb.w	r3, [r0, #1022]	; 0x3fe
   12d88:	ldrb.w	r3, [r4, #64]	; 0x40
   12d8c:	strb.w	r3, [r0, #1021]	; 0x3fd
   12d90:	addw	r0, r0, #1021	; 0x3fd
   12d94:	str	r0, [r4, #0]
   12d96:	movs	r0, #0
   12d98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d9c:	mov.w	r0, #4294967295
   12da0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012da4 <_vasnprintf_r>:
   12da4:	push	{r4, r5, r6, lr}
   12da6:	mov	r5, r2
   12da8:	sub	sp, #104	; 0x68
   12daa:	ldr	r4, [r2, #0]
   12dac:	cbz	r1, 12db2 <_vasnprintf_r+0xe>
   12dae:	cmp	r4, #0
   12db0:	bne.n	12de8 <_vasnprintf_r+0x44>
   12db2:	movs	r4, #0
   12db4:	mov.w	r2, #648	; 0x288
   12db8:	strh.w	r2, [sp, #12]
   12dbc:	str	r4, [sp, #0]
   12dbe:	str	r4, [sp, #16]
   12dc0:	mov	r2, r3
   12dc2:	movw	r6, #65535	; 0xffff
   12dc6:	ldr	r3, [sp, #120]	; 0x78
   12dc8:	str	r4, [sp, #8]
   12dca:	mov	r1, sp
   12dcc:	str	r4, [sp, #20]
   12dce:	strh.w	r6, [sp, #14]
   12dd2:	bl	db50 <_svfprintf_r>
   12dd6:	cmp	r0, #0
   12dd8:	blt.n	12dfe <_vasnprintf_r+0x5a>
   12dda:	ldr	r3, [sp, #0]
   12ddc:	str	r0, [r5, #0]
   12dde:	movs	r2, #0
   12de0:	strb	r2, [r3, #0]
   12de2:	ldr	r0, [sp, #16]
   12de4:	add	sp, #104	; 0x68
   12de6:	pop	{r4, r5, r6, pc}
   12de8:	mov.w	r2, #1544	; 0x608
   12dec:	str	r1, [sp, #0]
   12dee:	str	r1, [sp, #16]
   12df0:	strh.w	r2, [sp, #12]
   12df4:	bge.n	12dc0 <_vasnprintf_r+0x1c>
   12df6:	movs	r3, #139	; 0x8b
   12df8:	str	r3, [r0, #0]
   12dfa:	movs	r0, #0
   12dfc:	b.n	12de4 <_vasnprintf_r+0x40>
   12dfe:	movs	r0, #0
   12e00:	b.n	12de4 <_vasnprintf_r+0x40>
   12e02:	nop

00012e04 <_calloc_r>:
   12e04:	push	{r4, lr}
   12e06:	mul.w	r1, r2, r1
   12e0a:	bl	bae8 <_malloc_r>
   12e0e:	mov	r4, r0
   12e10:	cbz	r0, 12e4a <_calloc_r+0x46>
   12e12:	ldr.w	r2, [r0, #-4]
   12e16:	bic.w	r2, r2, #3
   12e1a:	subs	r2, #4
   12e1c:	cmp	r2, #36	; 0x24
   12e1e:	bhi.n	12e52 <_calloc_r+0x4e>
   12e20:	cmp	r2, #19
   12e22:	bls.n	12e4e <_calloc_r+0x4a>
   12e24:	movs	r3, #0
   12e26:	cmp	r2, #27
   12e28:	str	r3, [r0, #0]
   12e2a:	str	r3, [r0, #4]
   12e2c:	bls.n	12e5c <_calloc_r+0x58>
   12e2e:	cmp	r2, #36	; 0x24
   12e30:	str	r3, [r0, #8]
   12e32:	str	r3, [r0, #12]
   12e34:	iteee	ne
   12e36:	addne.w	r2, r0, #16
   12e3a:	streq	r3, [r0, #16]
   12e3c:	streq	r3, [r0, #20]
   12e3e:	addeq.w	r2, r0, #24
   12e42:	movs	r3, #0
   12e44:	str	r3, [r2, #0]
   12e46:	str	r3, [r2, #4]
   12e48:	str	r3, [r2, #8]
   12e4a:	mov	r0, r4
   12e4c:	pop	{r4, pc}
   12e4e:	mov	r2, r0
   12e50:	b.n	12e42 <_calloc_r+0x3e>
   12e52:	movs	r1, #0
   12e54:	bl	c25c <memset>
   12e58:	mov	r0, r4
   12e5a:	pop	{r4, pc}
   12e5c:	add.w	r2, r0, #8
   12e60:	b.n	12e42 <_calloc_r+0x3e>
   12e62:	nop

00012e64 <vtable for AudioStream>:
	...
   12e6c:	....

00012e70 <vtable for mRecordQueue<250>>:
	...
   12e78:	....

00012e7c <vtable for mDelay<2, 12>>:
	...
   12e84:	....

00012e88 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   12e90:	E...1...m.......
   12ea0:	u...........

00012eac <vtable for FsFile>:
	...
   12eb4:	E...1...m.......
   12ec4:	u...........

00012ed0 <vtable for I2S_32>:
	...
   12ed8:	!...

00012edc <vtable for mProcess>:
	...
   12ee4:	....%02d:%02d:%0
   12ef4:	2d..%04d/%02d/%0
   12f04:	2d..%d %d %d %d 
   12f14:	%d %d %d....%s_%
   12f24:	04d_%02d_%02d_%0
   12f34:	2d_%02d_%02d%s..
   12f44:	%04d_%02d_%02d_%
   12f54:	02d_%02d_%02d...
   12f64:	RIFF....WAVE....
   12f74:	fmt ....data....
   12f84:	Config.txt..%s..
   12f94:	....%10d....%d..
   12fa4:	Envi_%s.txt.%04d
   12fb4:	_%02d_%02d,.%02d
   12fc4:	_%02d_%02d,.%10.
   12fd4:	1f,.close acquis
   12fe4:	ition...Hibernat
   12ff4:	e now 1.Hibernat
   13004:	e now 3.?!xa....
   13014:	oar1234ndtchwsei
   13024:	kp..%02d....%04d
   13034:	....%c %5d on_ti
   13044:	me......%c %5d a
   13054:	cq_time.....%c %
   13064:	5d rep_rate.....
   13074:	%c %5d first_hou
   13084:	r...%c %5d secon
   13094:	d_hour......%c %
   130a4:	5d third_hour...
   130b4:	%c %5d last_hour
   130c4:	....%c %s name..
   130d4:	....%c %s date..
   130e4:	....%c %s time..
   130f4:	....%c %5d proce
   13104:	ssing type......
   13114:	%c %5d threshold
   13124:	....%c %5d noise
   13134:	 window.....%c %
   13144:	5d slow window..
   13154:	....%c %5d extra
   13164:	ction window....
   13174:	%c %5d inhibit w
   13184:	indow...%c %5d n
   13194:	oise repetition 
   131a4:	rate....%c %5d p
   131b4:	re trigger delay
   131c4:	....exter 'a' to
   131d4:	 print this.exte
   131e4:	r '?c' to read v
   131f4:	alue c=(o,a,r,1,
   13204:	2,3,4,n,d,t,c,h,
   13214:	w,s,m,i,k,p)....
   13224:	  e.g.: ?1 will 
   13234:	print first hour
   13244:	....exter '!cval
   13254:	' to read value 
   13264:	c=(0,a,r,1,2,3,4
   13274:	,n,d,t,c,h,w,s,m
   13284:	,i,k,p) and val 
   13294:	is new value....
   132a4:	  e.g.: !110 wil
   132b4:	l set first hour
   132c4:	 to 10..exter 'x
   132d4:	val' to exit men
   132e4:	u (x is delay in
   132f4:	 minutes, -1 mea
   13304:	ns immediate)...
   13314:	  e.g.: x10 will
   13324:	 exit and hibern
   13334:	ate for 10 minut
   13344:	es..        x-1 
   13354:	with exit and st
   13364:	art immediately.
   13374:	microSoundRecord
   13384:	er..End of Setup
   13394:	....SdError: 0X.
   133a4:	,0X.Check SD for
   133b4:	mat.....error: .
   133c4:	file.write data 
   133d4:	failed..file.ope
   133e4:	n failed....file
   133f4:	.preAllocate fai
   13404:	led.closed...loo
   13414:	p: %5d %4d; %5d 
   13424:	%5d; %5d.... | %
   13434:	4d; %10d %8d %8d
   13444:	; %4d %4d...

00013450 <SPIClass::spi0_hardware>:
   13450:	<..@............
   13460:	.....)....'.....
   13470:	................
   13480:	................
   13490:	................
   134a0:	..........-.....
   134b0:	................
   134c0:	................
   134d0:	................
   134e0:	.. .

000134e4 <monthDays>:
   134e4:	............

000134f0 <TwoWire::i2c0_hardware>:
   134f0:	4..@@.....".0...
   13500:	....!./.........

00013510 <TwoWire::i2c1_hardware>:
   13510:	4..@....&:......
   13520:	..%;............

00013530 <TwoWire::i2c2_hardware>:
   13530:	(..@@...........
   13540:	............J...

00013550 <vtable for TwoWire>:
	...
   13558:	.1..e1..m...a1..
   13568:	.1..)1..I1..

00013574 <vtable for SdFile>:
	...
   1357c:	.;..q...m...q...
   1358c:	EXFAT...

00013594 <vtable for SdSpiCard>:
	...
   1359c:	.j...j...j...n..
   135ac:	.m...p...j...j..
   135bc:	.o...j...j...k..
   135cc:	.m...m..%m......
   135dc:	.j..9q..mo..up..

000135ec <vtable for SdioCard>:
	...
   135f4:	=s...s..Q....x..
   13604:	.u...z...y..ey..
   13614:	Mv...r...r...t..
   13624:	.r...s..-s..At..
   13634:	.s...w..ix...w..

00013644 <digital_pin_to_info_PGM>:
   13644:	@..C@..@D..CD..@
   13654:	...C...@0..C0..@
   13664:	4..C4..@...C...@
   13674:	...C...@...C...@
   13684:	...C...@...C...@
   13694:	...C...@...C...@
   136a4:	...C...@...C...@
   136b4:	...C...@...C...@
   136c4:	...C...@...C...@
   136d4:	...C...@...C...@
   136e4:	...C...@...C...@
   136f4:	...C...@...C...@
   13704:	h .Ch..@...C...@
   13714:	8..C8..@<..C<..@
   13724:	@..C@..@H..CH..@
   13734:	L..CL..@(..C(..@
   13744:	,..C,..@` .C`..@
   13754:	d .Cd..@ ..C ..@
   13764:	$..C$..@(..C(..@
   13774:	,..C,..@D..CD..@
   13784:	p..Cp..@t..Ct..@
   13794:	h..Ch..@P..CP..@
   137a4:	X..CX..@\..C\..@
   137b4:	T..CT..@ ..C ..@
   137c4:	$..C$..@...C...@
   137d4:	...C...@8..C8..@
   137e4:	4..C4..@0..C0..@
   137f4:	<..C<..@,..C,..@
   13804:	( .C(..@, .C,..@
   13814:	. .C...@. .C...@
   13824:	. .C...@. .C...@
   13834:	. .C...@. .C...@

00013844 <vtable for usb_serial_class>:
	...
   1384c:	e...]...Y...U...
   1385c:	Q...M...I...E...
   1386c:	....

00013870 <usb_endpoint_config_table>:
   13870:	....

00013874 <usb_descriptor_list>:
   13874:	....0G. ........
   13884:	\G. C........G. 
   13894:	........DG. ....
   138a4:	.....G. ........
   138b4:	.G. ............
   138c4:	....

000138c8 <_global_impure_ptr>:
   138c8:	.G. C...POSIX...
   138d8:	....

000138dc <fpi.6173>:
   138dc:	5...............
   138ec:	....nf..inity...
   138fc:	an..

00013900 <fpinan.6209>:
   13900:	4...............
   13910:	........

00013918 <tinytens>:
   13918:	.......<3...#.I9
   13928:	=..D...2......[%
   13938:	Co.d(.h.

00013940 <zeroes.7258>:
   13940:	0000000000000000
   13950:	INF.inf.NAN.nan.
   13960:	0123456789ABCDEF
   13970:	....0123456789ab
   13980:	cdef....(null)..
   13990:	0...

00013994 <blanks.7257>:
   13994:	                

000139a4 <basefix.7328>:
   139a4:	................
   139b4:	................
   139c4:	....e%ld....

000139d0 <_ctype_>:
   139d0:	.         ((((( 
   139e0:	                
   139f0:	 ...............
   13a00:	................
   13a10:	..AAAAAA........
   13a20:	................
   13a30:	..BBBBBB........
   13a40:	................
   13a50:	 ...............
	...
   13ad0:	....Infinity....
   13ae0:	NaN.

00013ae4 <__hexdig>:
	...
   13b14:	................
   13b24:	................
	...
   13b44:	................
	...
   13be4:	....

00013be8 <__mprec_tens>:
   13be8:	.......?......$@
   13bf8:	......Y@.....@.@
   13c08:	.......@.....j.@
   13c18:	.......A......cA
   13c28:	.......A....e..A
   13c38:	... _..B....vH7B
   13c48:	......mB..@..0.B
   13c58:	.......B..4&.k.C
   13c68:	...7y.AC....W4vC
   13c78:	..Ngm..C.=.`.X.C
   13c88:	@..x...DP.....KD
   13c98:	..M....D.J...-.D
   13ca8:	...yCx.D

00013cb0 <__mprec_bigtens>:
   13cb0:	...7y.AC.n.....F
   13cc0:	..?..O8M2.0.Hw.Z
   13cd0:	<.s..O.u

00013cd8 <p05.6087>:
   13cd8:	........}...

00013ce4 <_init>:
   13ce4:	push	{r3, r4, r5, r6, r7, lr}
   13ce6:	nop
   13ce8:	pop	{r3, r4, r5, r6, r7}
   13cea:	pop	{r3}
   13cec:	mov	lr, r3
   13cee:	bx	lr

00013cf0 <__init_array_start>:
   13cf0:	.word	0x0001020d

00013cf4 <__frame_dummy_init_array_entry>:
   13cf4:	5....$..m/.../..
   13d04:	./.../.../.../..
   13d14:	./...0..-0..]0..
   13d24:	u0...0...0...0..
   13d34:	.0...0...1...3..
   13d44:	Q@..

Disassembly of section .fini:

00013d48 <_fini>:
   13d48:	push	{r3, r4, r5, r6, r7, lr}
   13d4a:	nop
