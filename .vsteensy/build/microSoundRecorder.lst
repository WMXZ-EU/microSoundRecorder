
.vsteensy/build/microSoundRecorder.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00013b8c l    d  .fini	00000000 .fini
00013b90 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
200133d0 l    d  .usbbuffers	00000000 .usbbuffers
20013730 l    d  .data	00000000 .data
20014348 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00009124 l     F .text	0000000c startup_default_early_hook
00009130 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
20014348 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
2001434c l       .bss	00000000 object.8610
00013b3c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 myAPP.cpp
0000047c l     F .text	0000001c llwuISR()
000005c4 l     F .text	00000034 getTime(char*) [clone .constprop.34]
000005f8 l     F .text	00000034 getDate(char*) [clone .constprop.35]
00001f80 l     F .text	0000012c _GLOBAL__sub_I_acqParameters
20014878 l     O .bss	00000004 loop::t3
2001487c l     O .bss	00000004 loop::t4
2001927c l     O .bss	00000028 makeFilename(char*)::filename
200192a4 l     O .bss	00000004 checkDutyCycle(ACQ_Parameters_s*, short)::t_start
200192cc l     O .bss	00000030 wavHeader(unsigned long)::wheader
20019464 l     O .bss	00000002 checkDutyCycle(ACQ_Parameters_s*, short)::recording
1fff0200 l     O .dmabuffers	00022d94 setup::data
20019480 l     O .bss	00000004 loop::loopCount
20019484 l     O .bss	00000002 loop::state
20019488 l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
000020ac l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
0000245c l     F .text	00000018 refreshCache(long) [clone .part.0]
2001948c l     O .bss	00000004 cacheTime
20019490 l     O .bss	00000007 tm
20019498 l     O .bss	00000004 sysTime
2001949c l     O .bss	00000001 Status
200194a4 l     O .bss	00000004 prevMillis
2001378c l     O .data	00000004 syncInterval
000131ac l     O .text	0000000c monthDays
200194a8 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
00002740 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00002758 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00002770 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
00002788 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_adc.cpp
00002a28 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
20012fa0 l     O .dmabuffers	00000100 analog_rx_buffer
00000000 l    df *ABS*	00000000 output_dac.cpp
00002a40 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00002a58 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00002a88 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_dacs.cpp
00002aa0 l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 play_sd_wav.cpp
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000030a8 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
000030c0 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
000030d8 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
000030f0 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00003108 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
00003120 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00003138 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00003150 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
20019554 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SD.cpp
0000369c l     F .text	00000064 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 FsCache.cpp
00003700 l     F .text	00000046 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
0000416c l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000041a0 l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000050a8 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.38]
000051c8 l     F .text	00000094 FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000062a8 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00006ee8 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]
00006f00 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000075dc l     F .text	00000030 sdIrs()
0000760c l     F .text	00000018 isBusyCommandComplete()
00007624 l     F .text	00000010 isBusyCommandInhibit()
00007634 l     F .text	00000014 isBusyDat()
00007648 l     F .text	0000000c isBusyDMA()
00007654 l     F .text	00000014 isBusyFifoRead()
00007668 l     F .text	00000014 isBusyFifoWrite()
0000767c l     F .text	00000018 isBusyTransferComplete()
00007694 l     F .text	000000cc setSdclk(unsigned long)
000077c4 l     F .text	00000028 waitTimeout(bool (*)())
000077ec l     F .text	0000004c yieldTimeout(bool (*)())
00007868 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
000078c4 l     F .text	0000002c isBusyCMD13()
00007910 l     F .text	00000064 readReg16(unsigned long, void*)
00007974 l     F .text	00000020 waitDmaStatus() [clone .part.4]
00007994 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007ba0 l     F .text	00000058 waitTransferComplete() [clone .part.8]
00007f74 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
20019a20 l     O .bss	00000001 m_version2
20019a24 l     O .bss	00000010 m_cid
20019a34 l     O .bss	00000004 m_busyFcn
20019a38 l     O .bss	00000001 m_highCapacity
20019a3c l     O .bss	00000004 m_ocr
20019a40 l     O .bss	00000004 m_rca
20019a44 l     O .bss	00000001 m_transferActive
20019a48 l     O .bss	00000004 m_irqstat
200138d4 l     O .data	00000001 m_errorCode
20019a4c l     O .bss	00000001 m_initDone
20019a50 l     O .bss	00000010 m_csd
20019a60 l     O .bss	00000001 m_dmaBusy
20019a64 l     O .bss	00000004 m_sdClkKhz
20019a68 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
20019a6d l     O .bss	00000001 tx_noautoflush
20019a70 l     O .bss	00000004 tx_packet
20019a74 l     O .bss	00000001 transmit_previous_timeout
20019a78 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00008c84 l     F .text	00000144 wait_for_cal
20019a7d l     O .bss	00000001 analog_right_shift
20019a7e l     O .bss	00000001 calibrating
00013448 l     O .text	00000048 pin2sc1a
200138d5 l     O .data	00000001 analog_config_bits
20019a7f l     O .bss	00000001 analogReadBusyADC1
20019a80 l     O .bss	00000001 analogReadBusyADC0
20019a81 l     O .bss	00000001 analog_reference_internal
200138d6 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00009164 l     F .text	0000004c digitalWrite.part.1
000091b0 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
200138dc l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
20019a88 l     O .bss	00000004 ep0_tx_ptr
20019a8c l     O .bss	00000010 rx_last
20019a9c l     O .bss	00000002 ep0_tx_len
20019aa0 l     O .bss	00000040 ep0_rx0_buf
20019ae0 l     O .bss	00000010 rx_first
20019af0 l     O .bss	00000001 ep0_tx_data_toggle
20019af4 l     O .bss	00000040 ep0_rx1_buf
20019b34 l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
20019b44 l     O .bss	00000010 tx_last
20019b54 l     O .bss	00000008 setup
20019b5c l     O .bss	00000001 ep0_tx_bdt_bank
20019b60 l     O .bss	00000008 reply_buffer
20019b6c l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
20019b70 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
200138f8 l     O .data	00000012 device_descriptor
20013924 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000b8b8 l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000c8fc l     F .text	00000038 sulp
00013728 l     O .text	00000014 fpi.6173
0001374c l     O .text	00000014 fpinan.6209
00013760 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000d830 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00013788 l     O .text	00000010 zeroes.7258
000137dc l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
000137ec l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001004c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0001006c l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00011260 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
00013b20 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoll.c
000123bc l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
0001258c l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00012718 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
200139a0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
20014348 l       .bss	00000000 __bss_start__
20019c78 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000911c  w    F .text	00000006 adc0_isr
0000b3dc g     F .text	0000002c .hidden __aeabi_dcmpun
00008a28 g     F .text	0000001c usb_serial_available
000122e8 g     F .text	0000005e __any_on
0000b3a0 g     F .text	00000012 .hidden __aeabi_dcmple
0000c6bc g     F .text	000000ba strcpy
0000b2dc g     F .text	0000007a .hidden __cmpdf2
20019b90 g     O .bss	00000004 AudioStream::memory_pool
00007eec g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000a2bc  w    F .text	000000ec yield
00005c84 g     F .text	00000218 FatFile::write(void const*, unsigned int)
0000b2dc g     F .text	0000007a .hidden __eqdf2
00006ed4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00003c40 g     F .text	000003dc ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
2001390c g     O .data	00000018 usb_string_manufacturer_name_default
00005c0c g     F .text	00000076 FatFile::truncate()
20013868 g     O .data	0000006c Wire1
0000ae4c g     F .text	0000005a .hidden __floatdidf
000090d4  w    F .text	00000048 hard_fault_isr
0000911c  w    F .text	00000006 dma_ch6_isr
20019b94 g     O .bss	00000001 AudioStream::update_scheduled
20019a10 g     O .bss	00000004 FsDateTime::callback
00008f5c g     F .text	0000007c analogReadAveraging
20013764 g     O .data	00000028 acqParameters
0000a558 g     F .text	00000020 Print::println()
00003214 g     F .text	00000130 TwoWire::isr()
20019c0c g     O .bss	00000002 AudioStream::memory_used
0000911c  w    F .text	00000006 uart0_lon_isr
00003b40 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
000095dc g     F .text	000000c8 usb_rx_memory
00006eb8  w    F .text	00000004 SdSpiCard::errorCode() const
00002aec  w    F .text	0000000c File::flush()
0000911c  w    F .text	00000006 dma_ch8_isr
00001200 g     F .text	000006c4 doMenu()
0000c13c g     F .text	00000002 __malloc_unlock
00002c68  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
20019a1c g     O .bss	00000004 FsVolume::m_cwv
00005490 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
00008dc8 g     F .text	000000e0 analog_init
000096a4 g     F .text	00000084 usb_tx
0000d810 g     F .text	00000020 _strtod_r
0000911c  w    F .text	00000006 portcd_isr
0000fefc g     F .text	0000004a _vdprintf_r
00013248  w    O .text	00000060 vtable for SDFile
00012ae8 g     F .text	00000082 _sfread_r
0000bfd4 g     F .text	000000c6 memmove
20019508 g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000b8f4 g     F .text	00000014 __locale_ctype_ptr
000085e4 g     F .text	00000068 SdioCard::stopTransmission(bool)
00011a60 g     F .text	0000004c _Balloc
0000911c  w    F .text	00000006 can1_rx_warn_isr
00013b98 g       .ARM.exidx	00000000 __exidx_end
0000911c  w    F .text	00000006 dma_error_isr
000060a0 g     F .text	0000003c FatPartition::freeChain(unsigned long)
20019b84 g     O .bss	00000001 EventResponder::runningFromYield
000087d0 g     F .text	0000001a SdSpiArduinoDriver::receive()
000070ac g     F .text	00000096 SdSpiCard::cardCommand(unsigned char, unsigned long)
00003344 g     F .text	0000000c i2c0_isr
0000a52c g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b2cc g     F .text	0000008a .hidden __gtdf2
000062d0 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000b85c g     F .text	0000000c __errno
00002e78  w    F .text	00000026 SDFile::isDirectory()
0000911c  w    F .text	00000006 portd_isr
0000911c  w    F .text	00000006 enet_error_isr
00013324 g     O .text	00000020 TwoWire::i2c2_hardware
00002f90  w    F .text	00000028 File::~File()
000009a0 g     F .text	000000a0 makeFilename(char*)
20019b74 g     O .bss	00000004 EventResponder::firstInterrupt
20019468 g     O .bss	00000014 patchCord2
000119e4 g     F .text	00000004 __localeconv_l
00006ed8  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00006c44 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000911c  w    F .text	00000006 tpm1_isr
000045fc g     F .text	00000018 ExFatPartition::rootLength()
0000074c  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00006ebc  w    F .text	00000004 SdSpiCard::errorData() const
0000a51c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013490 g     O .text	00000200 digital_pin_to_info_PGM
00005ff8 g     F .text	000000a8 FatPartition::allocContiguous(unsigned long, unsigned long*)
20019c74 g     O .bss	00000004 errno
00007144 g     F .text	0000004c SdSpiCard::readOCR(unsigned long*)
000087ec g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000683c g     F .text	00000390 FatFile::open(FatFile*, fname_t*, int)
000043f0 g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000c5e8 g     F .text	00000004 __seofread
00013b98 g       .ARM.exidx	00000000 _etext
20014348 g       .bss	00000000 _sbss
0000b368 g     F .text	00000010 .hidden __aeabi_cdcmple
0000776c g     F .text	0000000c SdioCard::errorData() const
00007e1c g     F .text	000000d0 SdioCard::writeSector(unsigned long, unsigned char const*)
00009274 g     F .text	0000001c digitalRead
0000911c  w    F .text	00000006 porte_isr
00001c30 g     F .text	00000350 loop
0000a7d0 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
0000911c  w    F .text	00000006 portb_isr
0000911c  w    F .text	00000006 spi1_isr
0000911c  w    F .text	00000006 uart3_status_isr
000038a4 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000911c  w    F .text	00000006 mcm_isr
000083b4 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000a9c0 g     F .text	00000028 Stream::peekNextDigit()
00000548  w    F .text	0000001c c_uSD::~c_uSD()
00006ff0 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
20019b78 g     O .bss	00000004 EventResponder::lastInterrupt
0000911c  w    F .text	00000006 uart1_status_isr
00006cbc g     F .text	00000028 FsBaseFile::close()
0000887c g     F .text	00000134 memcpy
0000911c  w    F .text	00000006 randnum_isr
00011848 g     F .text	00000180 __hexnan
0000b358 g     F .text	00000020 .hidden __aeabi_cdrcmple
00002ad0  w    F .text	0000000c File::available()
00000574  w    F .text	00000050 mRecordQueue<500>::update()
00004428 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
0000575c g     F .text	0000002a FatFile::peek()
0000d990 g     F .text	000016e4 _svfprintf_r
0000addc g     F .text	00000022 .hidden __floatsidf
00002c54  w    F .text	00000014 SDFile::whoami()
20019510  w    O .bss	00000001 SDFile::name()::zeroterm
20019a84 g     O .bss	00000004 systick_millis_count
0000b2d4 g     F .text	00000082 .hidden __ltdf2
00004cb4 g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
000090d4  w    F .text	00000048 bus_fault_isr
00002de4  w    F .text	00000044 SDFile::truncate(unsigned long long)
0000911c  w    F .text	00000006 watchdog_isr
0000b538 g     F .text	00000000 .hidden __aeabi_uldivmod
00003350 g     F .text	0000000c i2c1_isr
20019b68 g     O .bss	00000001 usb_configuration
0000911c  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
000086cc g     F .text	0000002c SdioCard::syncDevice()
00007c84 g     F .text	0000009c SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
0000062c  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00005788 g     F .text	00000040 FatFile::readDirCache(bool)
00012240 g     F .text	00000060 __ratio
0000335c g     F .text	0000000c i2c2_isr
20019b98 g     O .bss	00000070 AudioStream::memory_pool_available_mask
200194e8 g     O .bss	00000008 AudioOutputAnalog::dma
2001390c  w    O .data	00000018 usb_string_manufacturer_name
20019c6c g     O .bss	00000008 usb_rx_byte_count_data
0000911c  w    F .text	00000006 pit1_isr
0000b908 g     F .text	00000010 malloc
200192c8 g     O .bss	00000004 maxNoise
0000911c  w    F .text	00000006 dma_ch4_isr
00013304 g     O .text	00000020 TwoWire::i2c1_hardware
20014880 g     O .bss	000007fc queue
0000a8fc g     F .text	00000084 software_isr
00012ce0  w    O .text	00000024 vtable for FsFile
000119c8 g     F .text	0000001c iswspace
0000911c  w    F .text	00000006 dma_ch7_isr
00003174  w    F .text	0000001e TwoWire::read()
00013a30 g     O .text	000000c8 __mprec_tens
0000a1f4 g     F .text	000000c8 usb_init
20019c0a g     O .bss	00000002 AudioStream::memory_pool_first_mask
00006ed0  w    F .text	00000004 SdSpiCard::type() const
0000b458 g     F .text	00000040 .hidden __fixunsdfsi
0000911c  w    F .text	00000006 lptmr_isr
00002f0c  w    F .text	00000084 SDFile::seek(unsigned long long, int)
200194d8 g     O .bss	00000004 AudioInputAnalog::block_left
20019c34 g     O .bss	00000004 __malloc_top_pad
00009244 g     F .text	00000024 rtc_set
00012aac g     F .text	0000003a __ssrefill_r
00006f24 g     F .text	0000007a SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004d60 g     F .text	000000e2 ExFatFile::truncate()
20013730 g     O .data	00000000 .hidden __dso_handle
0000adbc g     F .text	0000001e .hidden __aeabi_ui2d
00000770  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
000119e8 g     F .text	0000001c _localeconv_r
00012904 g     F .text	00000024 _strtoull_r
00009228 g     F .text	00000010 attachInterruptVector
00008788 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00011c74 g     F .text	00000012 __i2b
20013730 g       .data	00000000 _sdata
2001947c g     O .bss	00000004 maxValue
000132e4 g     O .text	00000020 TwoWire::i2c0_hardware
00002b48  w    F .text	0000000c File::operator bool()
0000b568 g     F .text	000002e2 .hidden __udivmoddi4
0000ab38 g     F .text	00000000 .hidden __aeabi_drsub
000050dc g     F .text	00000034 FatFile::addCluster()
0000c520 g     F .text	00000024 _sbrk_r
00007190 g     F .text	0000003e SdSpiCard::readRegister(unsigned char, void*)
00007848 g     F .text	00000020 SdioCard::type() const
00002ac4  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
000089b0 g     F .text	00000048 usb_serial_getchar
0000911c  w    F .text	00000006 can1_bus_off_isr
0000911c  w    F .text	00000006 ftm2_isr
00002d54  w    F .text	0000004c SDFile::name()
000028c8 g     F .text	00000160 AudioInputAnalog::init(unsigned char)
20019c60 g     O .bss	00000008 usb_cdc_line_coding
00009268 g     F .text	0000000a digitalWrite
20019b7c g     O .bss	00000004 EventResponder::lastYield
0000911c  w    F .text	00000006 uart5_status_isr
0000911c  w    F .text	00000006 lpuart0_status_isr
0000387c g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
000136bc g     O .text	00000004 usb_endpoint_config_table
0000911c  w    F .text	00000006 dma_ch9_isr
00000730  w    F .text	0000001c Print::write(char const*)
000006b0  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000911c  w    F .text	00000006 pit2_isr
0000b38c g     F .text	00000012 .hidden __aeabi_dcmplt
200193fc g     O .bss	00000050 logFile
20019c30 g     O .bss	00000004 __malloc_max_sbrked_mem
00002e44  w    F .text	0000001a SDFile::position()
00009290 g     F .text	0000000a pinMode
00007490 g     F .text	00000042 SdSpiCard::writeStop()
200192fc g     O .bss	00000100 tempBuffer
00009528 g     F .text	0000004c usb_free
0000911c  w    F .text	00000006 i2c3_isr
0000ae00 g     F .text	0000003a .hidden __extendsfdf2
0000f074 g     F .text	00000e88 __ssvfscanf_r
0000b0fc g     F .text	000001d0 .hidden __aeabi_ddiv
0000ab44 g     F .text	00000276 .hidden __adddf3
20013790 g     O .data	0000006c Wire2
00007528 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00002adc  w    F .text	00000010 File::peek()
000060dc g     F .text	000000b0 FatPartition::freeClusterCount()
000035cc  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
000120b4 g     F .text	000000d0 __b2d
00001afc  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
00013b90 g       .ARM.exidx	00000000 __exidx_start
0000aea8 g     F .text	00000254 .hidden __aeabi_dmul
00002734  w    F .text	0000000c DMAChannel::~DMAChannel()
00007388 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
0000911c  w    F .text	00000006 pit0_isr
20019b80 g     O .bss	00000004 EventResponder::firstYield
00013714 g     O .text	00000004 _global_impure_ptr
0000911c  w    F .text	00000006 can1_error_isr
000006fc  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c140 g     F .text	000003de _realloc_r
00002e60  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000b868 g     F .text	00000050 __libc_init_array
20019c78 g       .bss	00000000 __bss_end
00002da0  w    F .text	00000044 SDFile::rewindDirectory()
00003168  w    F .text	0000000c TwoWire::available()
0000911c  w    F .text	00000006 can0_wakeup_isr
0000411c g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00007778 g     F .text	0000001c SdioCard::readCID(CID*)
0001392c g     O .text	00000100 __hexdig
00004a0c g     F .text	000000e6 ExFatFile::addDirCluster()
0000911c  w    F .text	00000006 flash_cmd_isr
000074d4 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00013af8 g     O .text	00000028 __mprec_bigtens
00011b40 g     F .text	00000098 __s2b
0000a504  w    F .text	00000004 usb_serial_class::clear()
0000adbc g     F .text	0000001e .hidden __floatunsidf
0000911c  w    F .text	00000006 uart2_status_isr
00009134 g     F .text	0000002c _sbrk
00011f08 g     F .text	00000042 __mcmp
00013368  w    O .text	00000028 vtable for SDClass
20019524 g     O .bss	00000008 AudioOutputTDM::dma
00002bfc  w    F .text	00000012 SDFile::operator bool()
200138d8 g     O .data	00000004 __brkval
20019a7c g     O .bss	00000001 usb_cdc_line_rtsdtr
00008c3c g     F .text	00000048 usb_serial_flush_callback
00013b2c g     F .text	00000000 _init
000051a8 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
0000911c  w    F .text	00000006 svcall_isr
0000a634 g     F .text	0000006c AudioStream::initialize_memory(audio_block_struct*, unsigned int)
0000336c  w    F .text	00000062 SDClass::remove(char const*)
00002c10  w    F .text	0000001c SDFile::close()
0000911c  w    F .text	00000006 dma_ch15_isr
0000304c  w    F .text	0000005c SDFile::~SDFile()
0000b498 g     F .text	0000009e .hidden __aeabi_d2f
00002670 g     F .text	00000020 day()
00013344 g     O .text	00000024 vtable for TwoWire
0000911c  w    F .text	00000006 uart1_error_isr
00010fcc g     F .text	00000028 __libc_fini_array
0000c938 g     F .text	00000ed8 _strtod_l
00011818 g     F .text	00000030 __match
0000911c  w    F .text	00000006 usbhs_phy_isr
200194f0 g     O .bss	00000008 AudioInputAnalogStereo::dma0
2001944c g     O .bss	00000018 acq
20019c78 g       .bss	00000000 _ebss
00007d94 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000556c g     F .text	00000050 FatFile::preAllocate(unsigned long)
000131b8 g     O .text	0000000c vtable for AudioInputAnalog
200194c4 g     O .bss	00000008 AudioOutputADAT::dma
0000069c  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00011bd8 g     F .text	00000040 __hi0bits
0000b408 g     F .text	0000004e .hidden __fixdfsi
00004af4 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
0000911c g     F .text	00000006 unused_isr
0000911c  w    F .text	00000006 spi0_isr
0000911c  w    F .text	00000006 dma_ch3_isr
00003368  w    F .text	00000002 SDClass::~SDClass()
00002734  w    F .text	0000000c DMAChannel::~DMAChannel()
2001527c g     O .bss	00004000 diskBuffer
200192a8 g     O .bss	00000020 text
00000d4c g     F .text	00000114 c_uSD::loadConfig(unsigned long*, int, long*, int)
00002f90  w    F .text	00000028 File::~File()
00012cb0  w    O .text	0000000c vtable for mRecordQueue<500>
000026b0 g     F .text	00000024 year()
0000aa54 g     F .text	00000004 operator delete(void*, unsigned int)
0000911c  w    F .text	00000006 flash_error_isr
0000ab44 g     F .text	00000276 .hidden __aeabi_dadd
0000b2d4 g     F .text	00000082 .hidden __ledf2
200194e4 g     O .bss	00000001 AudioInputAnalog::update_responsibility
0000911c  w    F .text	00000006 uart5_error_isr
0000911c  w    F .text	00000006 rtc_seconds_isr
0000911c  w    F .text	00000006 pdb_isr
00011db8 g     F .text	000000a0 __pow5mult
0000599c g     F .text	0000005c FatFile::rmdir()
0000ae3c g     F .text	0000006a .hidden __aeabi_ul2d
000090d4  w    F .text	00000048 usage_fault_isr
0000911c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00005f74 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
0000911c  w    F .text	00000006 dma_ch14_isr
00003420  w    F .text	0000004c SDClass::exists(char const*)
00000564 g     F .text	00000004 getTeensy3Time()
00000000  w      *UND*	00000000 __deregister_frame_info
20019c68 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a4f4 g     F .text	00000010 systick_isr
0000911c  w    F .text	00000006 rtc_alarm_isr
00002b68  w    F .text	0000000c File::isDirectory()
00006bcc g     F .text	00000076 FatFile::getSFN(char*)
000072c8 g     F .text	0000006c SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20019b88 g     O .bss	00000004 AudioStream::first_update
0000911c  w    F .text	00000006 dma_ch2_isr
00000a40 g     F .text	0000006c wavHeader(unsigned long)
200138e4 g     O .data	00000010 Serial
20019b8c g     O .bss	00000002 AudioStream::memory_used_max
0000911c  w    F .text	00000006 ftm1_isr
00002b04  w    F .text	00000016 File::seek(unsigned long long, int)
00000568  w    F .text	0000000c AudioConnection::~AudioConnection()
0000a524  w    F .text	00000006 usb_serial_class::write(unsigned char)
00006d64 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
00009124  w    F .text	0000000c startup_early_hook
0000755c g     F .text	00000064 SdSpiCard::writeSingle(unsigned long, unsigned char const*)
0000911c  w    F .text	00000006 dma_ch13_isr
000046a8 g     F .text	0000008c ExFatFile::addCluster()
000131e8  w    O .text	00000060 vtable for File
0000911c  w    F .text	00000006 uart2_error_isr
0000346c  w    F .text	00000052 SDClass::usedSize()
000089f8 g     F .text	00000030 usb_serial_peekchar
0000b3c8 g     F .text	00000012 .hidden __aeabi_dcmpgt
0000bed0 g     F .text	00000000 memchr
00005f0c g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
20013984 g     O .data	00000016 usb_string_serial_number_default
000090d4 g     F .text	00000048 fault_isr
00011090 g     F .text	000001d0 _free_r
00007bf8 g     F .text	0000008c SdioCard::readStop()
00003748 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000b8d0 g     F .text	0000001c __locale_mb_cur_max
0000b3b4 g     F .text	00000012 .hidden __aeabi_dcmpge
0000911c  w    F .text	00000006 usb_charge_isr
000026d4 g     F .text	00000044 setTime(long)
0000a514  w    F .text	00000004 usb_serial_class::flush()
00012a28 g     F .text	00000082 _sungetc_r
0000911c  w    F .text	00000006 cmt_isr
0000ab40 g     F .text	0000027a .hidden __aeabi_dsub
0000618c g     F .text	0000011a FatPartition::init(BlockDeviceInterface*, unsigned char)
0000911c  w    F .text	00000006 usbhs_isr
0000527c g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
20014344 g     O .data	00000004 __malloc_sbrk_base
0000a50c  w    F .text	00000004 usb_serial_class::read()
0000911c  w    F .text	00000006 ftm3_isr
00002bac  w    F .text	0000000c File::rewindDirectory()
00012568 g     F .text	00000024 _strtoll_r
0000911c  w    F .text	00000006 tsi0_isr
0000665c g     F .text	00000128 FatFile::remove()
20014364 g     O .bss	00000514 uSD
0000ae3c g     F .text	0000006a .hidden __floatundidf
00009160  w    F .text	00000002 __cxa_pure_virtual
00011e58 g     F .text	000000ae __lshift
000053cc g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
0000911c  w    F .text	00000006 spi2_isr
00004614 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
200194f8 g     O .bss	00000008 AudioInputAnalogStereo::dma1
00012928 g     F .text	00000100 __ssprint_r
00012be4 g     F .text	0000005e _vasnprintf_r
0000aa4c  w    F .text	00000002 serialEvent()
20019af1 g     O .bss	00000001 usb_reboot_timer
200194ac g     O .bss	00000008 AudioOutputPWM::dma
0000ffa8 g     F .text	000000a4 __register_exitproc
0000401c g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00002718 g     F .text	0000001c setSyncProvider(long (*)())
0000c85c g     F .text	000000a0 strncmp
00000ff8 g     F .text	000001c4 checkDutyCycle(ACQ_Parameters_s*, short)
00004b50 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00000770  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
00008a44 g     F .text	00000038 usb_serial_flush_input
00008ea8 g     F .text	0000004c analogReference
000044a8 g     F .text	00000072 ExFatPartition::freeClusterCount()
00011c88 g     F .text	00000130 __multiply
000027a0 g     F .text	00000078 AudioInputAnalog::isr()
00008b84 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
20019c38 g     O .bss	00000028 __malloc_current_mallinfo
00012184 g     F .text	000000ba __d2b
00008ef4 g     F .text	00000068 analogReadRes
20019c10 g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
0000911c  w    F .text	00000006 can0_bus_off_isr
00007838  w    F .text	0000000e SdioCard::~SdioCard()
200194d4 g     O .bss	00000004 AudioInputAnalog::hpf_x1
000037cc g     F .text	000000ae ExFatFile::getName(char*, unsigned int)
20019b5d g     O .bss	00000001 usb_rx_memory_needed
00007d20 g     F .text	00000074 SdioCard::writeStart(unsigned long)
000126f4 g     F .text	00000024 _strtoul_r
00009728 g     F .text	00000acc usb_isr
0000b850 g     F .text	0000000c __cxa_atexit
00003968 g     F .text	000001a8 ExFatFile::read(void*, unsigned int)
0000a8cc g     F .text	00000030 AudioStream::update_setup()
0000addc g     F .text	00000022 .hidden __aeabi_i2d
00002d28  w    F .text	00000018 SDFile::peek()
000037a8 g     F .text	0000000e FsCache::sync()
0000aa44 g     F .text	00000006 Stream::parseInt()
0000bf70 g     F .text	00000062 memcmp
00013690  w    O .text	00000028 vtable for usb_serial_class
0000880c g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
0000911c  w    F .text	00000006 uart3_error_isr
200194cc g     O .bss	00000004 AudioInputAnalog::hpf_y1
20013738 g     O .data	00000005 postfix
00008878 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000a980 g     F .text	00000040 Stream::timedPeek()
0000c590 g     F .text	00000058 sscanf
0000b84c  w    F .text	00000002 .hidden __aeabi_ldiv0
0000480c g     F .text	0000005a ExFatFile::rmdir()
20019534 g     O .bss	00000008 AudioInputI2SHex::dma
0000911c  w    F .text	00000006 porta_isr
0000b0fc g     F .text	000001d0 .hidden __divdf3
00000e60 g     F .text	00000198 setWakeupCallandSleep(unsigned long)
000122a0 g     F .text	00000046 __copybits
200133d0 g     O .usbbuffers	00000360 usb_buffer_memory
000071e0 g     F .text	00000098 SdSpiCard::sectorCount()
0000911c  w    F .text	00000006 low_voltage_isr
20013f38 g     O .data	00000408 __malloc_av_
0000911c  w    F .text	00000006 can0_error_isr
0000937c g     F .text	0000016c _init_Teensyduino_internal_
20013734 g     O .data	00000004 outptr
00002d40  w    F .text	00000014 SDFile::flush()
0000aea8 g     F .text	00000254 .hidden __muldf3
00008be4 g     F .text	00000058 usb_serial_flush_output
0000911c  w    F .text	00000006 dma_ch12_isr
200194b4 g     O .bss	00000008 AudioInputI2S::dma
0000c138 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00006410 g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
0000911c  w    F .text	00000006 can1_wakeup_isr
20013200 g     O .dmabuffers	000001d0 _VectorsRam
00008824 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00012c44 g     F .text	0000005e _calloc_r
0000911c  w    F .text	00000006 pit3_isr
200194a0 g     O .bss	00000004 getTimePtr
200138e0 g     O .data	00000001 yield_active_check_flags
0000911c  w    F .text	00000006 enet_rx_isr
000049ac g     F .text	0000005e ExFatFile::sync()
000057c8 g     F .text	000001d4 FatFile::rename(FatFile*, char const*)
0000864c g     F .text	00000080 SdioCard::isBusy()
0000911c  w    F .text	00000006 portc_isr
00007334 g     F .text	00000038 SdSpiCard::readStop()
20019500 g     O .bss	00000008 AudioInputI2SQuad::dma
0000c09c g     F .text	0000009a memset
0000a624 g     F .text	00000010 main
20019544 g     O .bss	00000008 AudioOutputI2S::dma
20019c2c g     O .bss	00000004 __malloc_max_total_mem
000041cc g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00002570 g     F .text	000000a0 now()
00004e44 g     F .text	00000264 ExFatFile::write(void const*, unsigned int)
000090d4  w    F .text	00000048 memmanage_fault_isr
20013740 g     O .data	00000020 snipParameters
00002eb4  w    F .text	00000058 SDFile::available()
00002b3c  w    F .text	0000000c File::close()
0000aa58 g     F .text	0000007c usb_init_serialnumber
000011bc g     F .text	00000042 setRTCTime(int, int, int, int, int, int)
0000d968 g     F .text	00000024 _strtol_r
0000b498 g     F .text	0000009e .hidden __truncdfsf2
00013b8c g       .text	00000000 __init_array_end
00010198 g     F .text	00000e34 _dtoa_r
0000b928 g     F .text	00000570 _malloc_r
20019c28 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000911c  w    F .text	00000006 debugmonitor_isr
0000ff60 g     F .text	0000001a __ascii_wctomb
00006c44 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000ae4c g     F .text	0000005a .hidden __aeabi_l2d
20019a18 g     O .bss	00000004 FatVolume::m_cwv
2001951c g     O .bss	00000008 AudioInputI2SOct::dma
00012b6c g     F .text	00000078 __submore
000022a4 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
6101146c g       *ABS*	00000000 __rtc_localtime
0000929c g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00002b74  w    F .text	00000038 File::openNextFile(unsigned char)
00000aac g     F .text	00000070 c_uSD::init()
0000911c  w    F .text	00000006 cmp1_isr
0000911c  w    F .text	00000006 ftm0_isr
20013760 g     O .data	00000002 mustStore
00004868 g     F .text	00000144 ExFatFile::syncDir()
00010ff4 g     F .text	0000009c _malloc_trim_r
20013980 g     O .data	00000004 string0
00008a7c g     F .text	00000108 usb_serial_write
00009130  w    F .text	00000002 startup_late_hook
0000a510  w    F .text	00000004 usb_serial_class::available()
00000b1c g     F .text	00000108 c_uSD::close()
200138f4 g     O .data	00000001 _serialEvent_default
00005c00 g     F .text	0000000c FatFile::sync()
000033d0  w    F .text	00000050 SDClass::mkdir(char const*)
20013968  w    O .data	00000016 usb_string_product_name
000092e0 g     F .text	0000009c delay
0000b2dc g     F .text	0000007a .hidden __nedf2
0000911c  w    F .text	00000006 tpm0_isr
20019b72 g     O .bss	00000002 dma_channel_allocated_mask
00013b8c g     F .fini	00000000 _fini
00002b54  w    F .text	00000014 File::name()
000031ec g     F .text	00000026 TwoWire::write(unsigned char)
200194bc g     O .bss	00000008 AudioOutputPT8211::dma
00002690 g     F .text	00000020 month()
00001b24 g     F .text	0000010c c_uSD::write(short*, long)
00007278 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
0000412c g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
0000a588 g     F .text	0000001c Print::printf(char const*, ...)
0000c544 g     F .text	0000004c sprintf
0000911c  w    F .text	00000006 i2s0_rx_isr
0000911c  w    F .text	00000006 uart4_error_isr
0000525c g     F .text	0000001e FatFile::close()
00002b1c  w    F .text	00000010 File::position()
00002fb8  w    F .text	00000064 SDFile::~SDFile()
00010060 g     F .text	0000000c atexit
000077c0  w    F .text	00000002 SdioCard::~SdioCard()
00000684  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00002be4  w    F .text	00000018 File::write(unsigned char)
0000ff7c g     F .text	0000002c _write_r
20019558 g     O .bss	000004b8 SD
00007ab4 g     F .text	000000ec SdioCard::erase(unsigned long, unsigned long)
0000a748 g     F .text	00000054 AudioStream::release(audio_block_struct*)
0000911c  w    F .text	00000006 can0_message_isr
0000ab20 g     F .text	0000000c nanf
20013dc8 g     O .data	00000004 _impure_ptr
200194d0 g     O .bss	00000002 AudioInputAnalog::block_offset
000131c4  w    O .text	00000024 vtable for Stream
0000911c  w    F .text	00000006 can1_message_isr
00003b10 g     F .text	0000002e ExFatFile::peek()
00012cbc  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
2001954c g     O .bss	00000008 AudioOutputSPDIF::dma
00011a04 g     F .text	0000005c _mbrtowc_r
0000911c  w    F .text	00000006 nmi_isr
200137fc g     O .data	0000006c Wire
00006784 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00002ea0  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000a79c g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00006e8c g     F .text	00000028 FsVolume::open(char const*, int)
00007760 g     F .text	0000000c SdioCard::errorCode() const
00005550 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
000006e8  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00013b38 g       .text	00000000 __preinit_array_end
00000498 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00006ed4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
2001952c g     O .bss	00000008 AudioInputTDM::dma
0000911c  w    F .text	00000006 sdhc_isr
00002630 g     F .text	00000020 minute()
00000530  w    F .text	00000018 FsFile::~FsFile()
0000451c g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004c28 g     F .text	0000008a ExFatFile::preAllocate(unsigned long long)
00004364 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000073d8 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000be98 g     F .text	0000002a __ascii_mbtowc
00006fa0 g     F .text	0000004e SdSpiCard::isBusy()
00012060 g     F .text	00000054 __ulp
00013398 g     O .text	00000058 vtable for SdSpiCard
0000a6a0 g     F .text	000000a8 AudioStream::allocate()
2001507c g     O .bss	00000200 header
000071d8  w    F .text	00000008 SdSpiCard::readCID(CID*)
00003194  w    F .text	00000016 TwoWire::peek()
000031ac  w    F .text	00000002 TwoWire::flush()
000018c4 g     F .text	000001a0 setup
000136c0 g     O .text	00000054 usb_descriptor_list
00009574 g     F .text	0000003c usb_rx
000078f0 g     F .text	00000020 SdioCard::status()
000007c4 g     F .text	000001dc modifyADCS(short, unsigned short, unsigned short, unsigned short)
0000911c  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000b458 g     F .text	00000040 .hidden __aeabi_d2uiz
00000c24 g     F .text	00000128 c_uSD::storeConfig(unsigned long*, int, long*, int)
0000911c  w    F .text	00000006 uart0_error_isr
00002b2c  w    F .text	00000010 File::size()
000034c0  w    F .text	00000062 SDClass::rmdir(char const*)
000094e8 g     F .text	00000040 usb_malloc
000055bc g     F .text	0000019e FatFile::read(void*, unsigned int)
0000911c  w    F .text	00000006 i2s0_isr
00005560 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20019a14 g     O .bss	00000004 ExFatVolume::m_cwv
20030000 g       .bss	00000000 _estack
00006eb4 g     F .text	00000004 operator new(unsigned int, unsigned long*)
000071d0  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000a474 g     F .text	00000038 DMAChannel::release()
00002bb8  w    F .text	0000002c File::read()
00008b9c g     F .text	00000048 usb_serial_write_buffer_free
00007070 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
0000911c  w    F .text	00000006 enet_timer_isr
0000a7e8 g     F .text	00000068 AudioConnection::connect()
0000b378 g     F .text	00000012 .hidden __aeabi_dcmpeq
00002474 g     F .text	000000fc makeTime(tmElements_t const&)
2001953c g     O .bss	00000008 AudioInputPDM::dma
000031b0 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
0000301c  w    F .text	00000030 File::~File()
0000a578  w    F .text	0000000e _write
20014348 g       .data	00000000 _edata
00004404 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
000077c0  w    F .text	00000002 SdioCard::~SdioCard()
0000911c  w    F .text	00000006 i2s0_tx_isr
0000911c  w    F .text	00000006 adc1_isr
0000736c g     F .text	0000001c SdSpiCard::syncDevice()
00005110 g     F .text	00000098 FatFile::addDirCluster()
00002ab8  w    F .text	0000000c File::read(void*, unsigned int)
0000a518  w    F .text	00000004 usb_serial_class::availableForWrite()
0000911c  w    F .text	00000006 cmp0_isr
00002af8  w    F .text	0000000c File::truncate(unsigned long long)
0000aad4 g     F .text	0000004c ultoa
00003368  w    F .text	00000002 SDClass::~SDClass()
00002650 g     F .text	00000020 second()
00001a64  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
00006ce4 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
0000aa50 g     F .text	00000004 operator new(unsigned int)
0000a4ac g     F .text	00000044 EventResponder::runFromInterrupt()
20014340 g     O .data	00000004 __malloc_trim_threshold
0000a508  w    F .text	00000004 usb_serial_class::peek()
0000a850 g     F .text	0000007a AudioConnection::disconnect()
00011f4c g     F .text	00000114 __mdiff
000077b0 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b408 g     F .text	0000004e .hidden __aeabi_d2iz
00004398 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
20019a6c g     O .bss	00000001 usb_cdc_transmit_flush_timer
20019c0e g     O .bss	00000002 AudioStream::cpu_cycles_total
0000911c  w    F .text	00000006 pit_isr
00002610 g     F .text	00000020 hour()
00007bf8 g     F .text	0000008c SdioCard::writeStop()
000075c0  w    F .text	0000001c SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012348 g     F .text	00000072 __sccl
000037b8 g     F .text	00000014 ExFatFile::close()
00013818 g     O .text	00000101 _ctype_
0000911c  w    F .text	00000006 dac0_isr
00006ec0  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00013b38 g       .text	00000000 __init_array_start
0000b84c  w    F .text	00000002 .hidden __aeabi_idiv0
0000911c  w    F .text	00000006 can1_tx_warn_isr
0000b3dc g     F .text	0000002c .hidden __unorddf2
00008fd8 g     F .text	000000fc analogRead
00003524  w    F .text	00000074 SDClass::rename(char const*, char const*)
0000911c  w    F .text	00000006 uart0_status_isr
0000911c  w    F .text	00000006 mcg_isr
0000a9e8 g     F .text	0000005a Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
0000a3a8 g     F .text	000000cc DMAChannel::begin(bool)
0000c780 g     F .text	000000dc strlen
000062f4 g     F .text	0000002e FatFile::openCluster(FatFile*)
0000b8ec g     F .text	00000006 __locale_ctype_ptr_l
0000b368 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b2cc g     F .text	0000008a .hidden __gedf2
000059f8 g     F .text	000000b0 FatFile::seekSet(unsigned long)
00011308 g     F .text	00000510 __gethex
20013968 g     O .data	00000016 usb_string_product_name_default
00002818 g     F .text	000000b0 AudioInputAnalog::update()
20019514 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000ff48 g     F .text	00000018 vdprintf
0000911c  w    F .text	00000006 dma_ch1_isr
00007a48 g     F .text	0000006c SdioCard::sectorCount()
00006dc4 g     F .text	000000c8 FsVolume::begin(BlockDeviceInterface*)
00000548  w    F .text	0000001c c_uSD::~c_uSD()
000095b0 g     F .text	0000002c usb_tx_packet_count
00005b80 g     F .text	00000080 FatFile::openNext(FatFile*, int)
0000c5ec g     F .text	000000ce strchr
000133f0 g     O .text	00000058 vtable for SdioCard
0000ae00 g     F .text	0000003a .hidden __aeabi_f2d
0000911c  w    F .text	00000006 dma_ch5_isr
00006324 g     F .text	000000ec FatFile::getName(char*, unsigned int)
0000911c  w    F .text	00000006 can0_rx_warn_isr
0000911c  w    F .text	00000006 can0_tx_warn_isr
0000911c  w    F .text	00000006 uart4_status_isr
00008480 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
200194dc g     O .bss	00000008 AudioInputAnalog::dma
20019c08 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
000086f8 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000ab40 g     F .text	0000027a .hidden __subdf3
00013b38 g       .text	00000000 __preinit_array_start
00012ca4  w    O .text	0000000c vtable for AudioStream
00004280 g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00002c2c  w    F .text	00000028 File::whoami()
00011c18 g     F .text	0000005a __lo0bits
00004328 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00005aa8 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000ab2c g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00000530  w    F .text	00000018 FsFile::~FsFile()
00009238 g     F .text	0000000c rtc_get
00004734 g     F .text	000000d6 ExFatFile::remove()
0000911c  w    F .text	00000006 cmp2_isr
0000a4f0 g     F .text	00000004 pendablesrvreq_isr
00003598  w    F .text	00000034 SDClass::totalSize()
00000568  w    F .text	0000000c AudioConnection::~AudioConnection()
0000046c  w    F .text	00000004 Print::availableForWrite()
20013dcc g     O .data	0000016c __global_locale
0000911c  w    F .text	00000006 wakeup_isr
00008020 g     F .text	00000394 SdioCard::begin(SdioConfig)
0000911c  w    F .text	00000006 cmp3_isr
000022ac g     F .text	000001b0 breakTime(long, tmElements_t&)
0000a5a4 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00005e9c g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000b918 g     F .text	00000010 free
0000911c  w    F .text	00000006 tpm2_isr
00011ac0 g     F .text	00000080 __multadd
00011aac g     F .text	00000012 _Bfree
00002e28  w    F .text	0000001a SDFile::size()
0000911c  w    F .text	00000006 dma_ch0_isr
0000304c  w    F .text	0000005c SDFile::~SDFile()
20013984  w    O .data	00000016 usb_string_serial_number
0000911c  w    F .text	00000006 enet_tx_isr
0000466c g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
000084f4 g     F .text	000000f0 SdioCard::readSector(unsigned long, unsigned char*)
00007794 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + (sec100 < 100 ? 0 : 1), 0);
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	................
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	E3..Q3..........
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	....)...........
     120:	................
     130:	................
     140:	................
     150:	................
     160:	........]3......
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	9124 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	937c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	9244 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	9244 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	b868 <__libc_init_array>

	startup_late_hook();
     32c:	bl	9130 <startup_late_hook>
	main();
     330:	bl	a624 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x20014348
     360:	.word	0x00013b94
     364:	.word	0x20013730
     368:	.word	0x20014348
     36c:	.word	0x20019c78
     370:	.word	0x20013200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x6101146c
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x20014348
     42c:	.word	0x00000000
     430:	.word	0x00013b90

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x2001434c
     460:	.word	0x00013b90
     464:	.word	0x20014348
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <llwuISR()>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     47c:	ldr	r2, [pc, #16]	; (490 <llwuISR()+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     47e:	ldr	r1, [pc, #20]	; (494 <llwuISR()+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     480:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     482:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     484:	orr.w	r3, r3, #32
     488:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     48a:	str	r0, [r1, #0]
     48c:	bx	lr
     48e:	nop
     490:	.word	0x4007c00d
     494:	.word	0x4003d01c

00000498 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

#include <TimeLib.h>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     498:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     49c:	mov	r7, r1
     49e:	mov	r6, r2
     4a0:	mov	r8, r0
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     4a2:	bl	26b0 <year()>
     4a6:	mov	r4, r0
     4a8:	bl	2690 <month()>
     4ac:	mov	r5, r0
     4ae:	bl	2670 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     4b2:	subw	r3, r4, #1980	; 0x7bc
     4b6:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     4b8:	cmp	r3, #127	; 0x7f
     4ba:	bhi.n	4c2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     4bc:	uxtb	r2, r5
     4be:	cmp	r2, #12
     4c0:	bls.n	51a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     4c2:	movs	r3, #0
     4c4:	strh.w	r3, [r8]

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(hour(), minute(), second());
     4c8:	bl	2610 <hour()>
     4cc:	mov	r4, r0
     4ce:	bl	2630 <minute()>
     4d2:	mov	r5, r0
     4d4:	bl	2650 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     4d8:	uxtb	r3, r4
     4da:	cmp	r3, #23
     4dc:	bhi.n	4e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     4de:	uxtb	r3, r5
     4e0:	cmp	r3, #59	; 0x3b
     4e2:	bls.n	4fc <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     4e4:	movs	r3, #0
     4e6:	strh	r3, [r7, #0]

  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
     4e8:	bl	2650 <second()>
     4ec:	tst.w	r0, #1
     4f0:	ite	ne
     4f2:	movne	r3, #100	; 0x64
     4f4:	moveq	r3, #0
     4f6:	strb	r3, [r6, #0]
     4f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     4fc:	uxtb	r3, r0
     4fe:	cmp	r3, #59	; 0x3b
     500:	bhi.n	4e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     502:	lsls	r4, r4, #11
     504:	lsls	r3, r5, #5
     506:	and.w	r4, r4, #522240	; 0x7f800
     50a:	and.w	r3, r3, #8160	; 0x1fe0
     50e:	orrs	r3, r4
     510:	ubfx	r0, r0, #1, #7
     514:	orrs	r3, r0
     516:	uxth	r3, r3
     518:	b.n	4e6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     51a:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     51c:	cmp	r0, #31
     51e:	bhi.n	4c2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     520:	lsls	r5, r5, #5
     522:	and.w	r5, r5, #8160	; 0x1fe0
     526:	orrs	r0, r5
     528:	orr.w	r3, r0, r3, lsl #9
     52c:	uxth	r3, r3
     52e:	b.n	4c4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000530 <FsFile::~FsFile()>:
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     530:	push	{r4, lr}
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     532:	ldr	r3, [pc, #16]	; (544 <FsFile::~FsFile()+0x14>)
     534:	mov	r4, r0
     536:	str.w	r3, [r0], #16
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     53a:	bl	6cbc <FsBaseFile::close()>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     53e:	mov	r0, r4
     540:	pop	{r4, pc}
     542:	nop
     544:	.word	0x00012cc4

00000548 <c_uSD::~c_uSD()>:
int16_t diskBuffer[BUFFERSIZE];
int16_t *outptr = diskBuffer;

char header[512];

class c_uSD
     548:	push	{r4, lr}
     54a:	ldr	r3, [pc, #20]	; (560 <c_uSD::~c_uSD()+0x18>)
     54c:	str.w	r3, [r0, #1204]	; 0x4b4
     550:	mov	r4, r0
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     552:	addw	r0, r0, #1220	; 0x4c4
     556:	bl	6cbc <FsBaseFile::close()>
     55a:	mov	r0, r4
     55c:	pop	{r4, pc}
     55e:	nop
     560:	.word	0x00012cc4

00000564 <getTeensy3Time()>:
#ifdef __cplusplus
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     564:	b.w	9238 <rtc_get>

00000568 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     568:	push	{r4, lr}
     56a:	mov	r4, r0
		disconnect();
     56c:	bl	a850 <AudioConnection::disconnect()>
	}
     570:	mov	r0, r4
     572:	pop	{r4, pc}

00000574 <mRecordQueue<500>::update()>:
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     574:	push	{r4, lr}
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     576:	movs	r1, #0
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     578:	mov	r4, r0
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     57a:	bl	a7d0 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     57e:	cbz	r0, 5ae <mRecordQueue<500>::update()+0x3a>
	if (!enabled) {
     580:	ldrh.w	r3, [r4, #2040]	; 0x7f8
     584:	uxth	r3, r3
     586:	cbz	r3, 5b0 <mRecordQueue<500>::update()+0x3c>
		release(block);
		return;
	}
	h = head + 1;
     588:	ldrh.w	r3, [r4, #2036]	; 0x7f4
	if (h >= mq) h = 0;
	if (h == tail) {
     58c:	ldrh.w	r2, [r4, #2038]	; 0x7f6
	if (!block) return;
	if (!enabled) {
		release(block);
		return;
	}
	h = head + 1;
     590:	adds	r3, #1
     592:	uxth	r3, r3
	if (h >= mq) h = 0;
     594:	cmp.w	r3, #500	; 0x1f4
     598:	it	cs
     59a:	movcs	r3, #0
	if (h == tail) {
     59c:	uxth	r2, r2
     59e:	cmp	r3, r2
     5a0:	beq.n	5b8 <mRecordQueue<500>::update()+0x44>
		release(block); // drop incomming data
    dropCount++; // flag for main to know
	} else {
		queue[h] = block; // store incomming data
     5a2:	add.w	r2, r3, #8
     5a6:	str.w	r0, [r4, r2, lsl #2]
		head = h;
     5aa:	strh.w	r3, [r4, #2036]	; 0x7f4
     5ae:	pop	{r4, pc}
	}
}
     5b0:	ldmia.w	sp!, {r4, lr}
	uint16_t h;

	block = receiveReadOnly();
	if (!block) return;
	if (!enabled) {
		release(block);
     5b4:	b.w	a748 <AudioStream::release(audio_block_struct*)>
		return;
	}
	h = head + 1;
	if (h >= mq) h = 0;
	if (h == tail) {
		release(block); // drop incomming data
     5b8:	bl	a748 <AudioStream::release(audio_block_struct*)>
    dropCount++; // flag for main to know
     5bc:	ldr	r3, [r4, #24]
     5be:	adds	r3, #1
     5c0:	str	r3, [r4, #24]
     5c2:	pop	{r4, pc}

000005c4 <getTime(char*) [clone .constprop.34]>:
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
    return text;  
}

static char * getTime(char *text)
     5c4:	push	{r4, r5, r6, lr}
     5c6:	sub	sp, #8
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
     5c8:	bl	2610 <hour()>
     5cc:	mov	r5, r0
     5ce:	bl	2630 <minute()>
     5d2:	mov	r6, r0
     5d4:	bl	2650 <second()>
     5d8:	ldr	r4, [pc, #20]	; (5f0 <getTime(char*) [clone .constprop.34]+0x2c>)
     5da:	str	r0, [sp, #0]
     5dc:	mov	r3, r6
     5de:	mov	r2, r5
     5e0:	mov	r0, r4
     5e2:	ldr	r1, [pc, #16]	; (5f4 <getTime(char*) [clone .constprop.34]+0x30>)
     5e4:	bl	c544 <sprintf>
    return text;
}
     5e8:	mov	r0, r4
     5ea:	add	sp, #8
     5ec:	pop	{r4, r5, r6, pc}
     5ee:	nop
     5f0:	.word	0x200192a8
     5f4:	.word	0x00012d04

000005f8 <getDate(char*) [clone .constprop.35]>:
*/


#include <TimeLib.h>

static char * getDate(char *text)
     5f8:	push	{r4, r5, r6, lr}
     5fa:	sub	sp, #8
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
     5fc:	bl	26b0 <year()>
     600:	mov	r5, r0
     602:	bl	2690 <month()>
     606:	mov	r6, r0
     608:	bl	2670 <day()>
     60c:	ldr	r4, [pc, #20]	; (624 <getDate(char*) [clone .constprop.35]+0x2c>)
     60e:	str	r0, [sp, #0]
     610:	mov	r3, r6
     612:	mov	r2, r5
     614:	mov	r0, r4
     616:	ldr	r1, [pc, #16]	; (628 <getDate(char*) [clone .constprop.35]+0x30>)
     618:	bl	c544 <sprintf>
    return text;  
}
     61c:	mov	r0, r4
     61e:	add	sp, #8
     620:	pop	{r4, r5, r6, pc}
     622:	nop
     624:	.word	0x200192a8
     628:	.word	0x00012d14

0000062c <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     62c:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     62e:	cbz	r2, 64a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     630:	ldrb	r3, [r2, #0]
     632:	and.w	r3, r3, #8
     636:	and.w	r0, r3, #255	; 0xff
     63a:	cbz	r3, 67e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     63c:	ldr	r3, [r2, #28]
     63e:	ldr	r0, [r2, #20]
     640:	subs	r0, r3, r0
     642:	it	mi
     644:	mvnmi.w	r0, #2147483648	; 0x80000000
     648:	bx	lr
     64a:	ldr	r1, [r0, #76]	; 0x4c
     64c:	cbz	r1, 680 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     64e:	ldrb.w	r3, [r1, #49]	; 0x31
     652:	and.w	r3, r3, #8
     656:	and.w	r0, r3, #255	; 0xff
     65a:	cbz	r3, 67e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     65c:	ldrd	r2, r3, [r1, #16]
     660:	ldrd	r0, r1, [r1]
     664:	subs	r0, r2, r0
     666:	push	{r4, r5}
     668:	sbc.w	r1, r3, r1
     66c:	movs	r5, #0
     66e:	mvn.w	r4, #2147483648	; 0x80000000
     672:	cmp	r5, r1
     674:	it	eq
     676:	cmpeq	r4, r0
     678:	bcs.n	67c <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     67a:	mov	r0, r4
    return BaseFile::available();
  }
     67c:	pop	{r4, r5}
     67e:	bx	lr
     680:	mov	r0, r1
     682:	bx	lr

00000684 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     684:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     686:	cbz	r3, 68e <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     688:	mov	r0, r3
     68a:	b.w	575c <FatFile::peek()>
     68e:	ldr	r0, [r0, #76]	; 0x4c
     690:	cbz	r0, 696 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     692:	b.w	3b10 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     696:	mov.w	r0, #4294967295
     69a:	bx	lr

0000069c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     69c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     69e:	cbz	r3, 6a6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     6a0:	mov	r0, r3
     6a2:	b.w	5c00 <FatFile::sync()>
     6a6:	ldr	r0, [r0, #76]	; 0x4c
     6a8:	cbz	r0, 6ae <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     6aa:	b.w	49ac <ExFatFile::sync()>
     6ae:	bx	lr

000006b0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     6b0:	push	{lr}
     6b2:	ldr	r3, [r0, #72]	; 0x48
     6b4:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     6b6:	cbz	r3, 6d2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     6b8:	mov	r0, r3
     6ba:	movs	r2, #1
     6bc:	add.w	r1, sp, #7
     6c0:	bl	55bc <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6c4:	cmp	r0, #1
     6c6:	bne.n	6e2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6c8:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     6cc:	add	sp, #12
     6ce:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     6d2:	ldr	r0, [r0, #76]	; 0x4c
     6d4:	cbz	r0, 6e2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6d6:	movs	r2, #1
     6d8:	add.w	r1, sp, #7
     6dc:	bl	3968 <ExFatFile::read(void*, unsigned int)>
     6e0:	b.n	6c4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6e2:	mov.w	r0, #4294967295
     6e6:	b.n	6cc <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000006e8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     6e8:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     6ea:	cbz	r3, 6f2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     6ec:	mov	r0, r3
     6ee:	b.w	5c84 <FatFile::write(void const*, unsigned int)>
     6f2:	ldr	r0, [r0, #76]	; 0x4c
     6f4:	cbz	r0, 6fa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     6f6:	b.w	4e44 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     6fa:	bx	lr

000006fc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     6fc:	push	{lr}
     6fe:	ldr	r3, [r0, #72]	; 0x48
     700:	sub	sp, #12
     702:	strb.w	r1, [sp, #7]
     706:	cbz	r3, 71a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     708:	mov	r0, r3
     70a:	movs	r2, #1
     70c:	add.w	r1, sp, #7
     710:	bl	5c84 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     714:	add	sp, #12
     716:	ldr.w	pc, [sp], #4
     71a:	ldr	r0, [r0, #76]	; 0x4c
     71c:	cmp	r0, #0
     71e:	beq.n	714 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     720:	movs	r2, #1
     722:	add.w	r1, sp, #7
     726:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
     72a:	add	sp, #12
     72c:	ldr.w	pc, [sp], #4

00000730 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     730:	push	{r4, r5, r6, lr}
     732:	mov	r4, r0
     734:	mov	r0, r1
     736:	mov	r5, r1
     738:	bl	c780 <strlen>
     73c:	ldr	r3, [r4, #0]
     73e:	mov	r2, r0
     740:	mov	r1, r5
     742:	mov	r0, r4
     744:	ldr	r3, [r3, #4]
     746:	ldmia.w	sp!, {r4, r5, r6, lr}
     74a:	bx	r3

0000074c <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     74c:	push	{r3, r4, r5, lr}
     74e:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     750:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     752:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     754:	bl	c780 <strlen>
     758:	ldr	r3, [r4, #0]
     75a:	mov	r2, r0
     75c:	mov	r1, r5
     75e:	ldr	r3, [r3, #4]
     760:	mov	r0, r4
     762:	blx	r3
     764:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     766:	mov	r0, r4
     768:	bl	a558 <Print::println()>
     76c:	add	r0, r5
     76e:	pop	{r3, r4, r5, pc}

00000770 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     770:	movs	r3, #0
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
     772:	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
     774:	ldr	r4, [pc, #68]	; (7bc <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
     776:	strb	r1, [r0, #9]
     778:	str	r2, [r0, #16]
     77a:	str	r4, [r0, #0]
			active = false;
     77c:	strb	r3, [r0, #8]
			destination_list = NULL;
     77e:	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
     780:	cbz	r1, 794 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				inputQueue[i] = NULL;
     782:	mov	r1, r3
     784:	b.n	788 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
     786:	ldr	r2, [r0, #16]
     788:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     78c:	ldrb	r2, [r0, #9]
     78e:	adds	r3, #1
     790:	cmp	r2, r3
     792:	bgt.n	786 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     794:	ldr	r3, [pc, #40]	; (7c0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x50>)
     796:	ldr	r2, [r3, #0]
     798:	cbnz	r2, 79e <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
     79a:	b.n	7b6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x46>
     79c:	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     79e:	ldr	r3, [r2, #20]
     7a0:	cmp	r3, #0
     7a2:	bne.n	79c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
				p->next_update = this;
     7a4:	str	r0, [r2, #20]
			}
			next_update = NULL;
     7a6:	movs	r3, #0
     7a8:	str	r3, [r0, #20]
			cpu_cycles = 0;
     7aa:	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
     7ac:	strh	r3, [r0, #6]
			numConnections = 0;
     7ae:	strb	r3, [r0, #10]
		}
     7b0:	ldr.w	r4, [sp], #4
     7b4:	bx	lr
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     7b6:	str	r0, [r3, #0]
     7b8:	b.n	7a6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
     7ba:	nop
     7bc:	.word	0x00012cac
     7c0:	.word	0x20019b88

000007c4 <modifyADCS(short, unsigned short, unsigned short, unsigned short)>:
#endif
  __enable_irq();
}
//
 void modifyADCS(int16_t res, uint16_t avg, uint16_t diff, uint16_t hspd)
 { // Mono only
     7c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// stop PDB
  uint32_t ch0c1 = PDB0_CH0C1; // keep old value
     7c8:	ldr.w	ip, [pc, #456]	; 994 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1d0>
  uint32_t ch1c1 = PDB0_CH1C1; // keep old value
     7cc:	ldr	r6, [pc, #344]	; (928 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x164>)
  PDB0_CH0C1 = 0;   // disable ADC triggering
  PDB0_CH1C1 = 0;   // disable ADC triggering
  PDB0_SC &= ~PDB_SC_PDBEN;
     7ce:	ldr	r7, [pc, #348]	; (92c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x168>)
}
//
 void modifyADCS(int16_t res, uint16_t avg, uint16_t diff, uint16_t hspd)
 { // Mono only
// stop PDB
  uint32_t ch0c1 = PDB0_CH0C1; // keep old value
     7d0:	ldr.w	r4, [ip]
  uint32_t ch1c1 = PDB0_CH1C1; // keep old value
     7d4:	ldr	r5, [r6, #0]
  PDB0_CH0C1 = 0;   // disable ADC triggering
     7d6:	mov.w	lr, #0
     7da:	str.w	lr, [ip]
  PDB0_CH1C1 = 0;   // disable ADC triggering
     7de:	str.w	lr, [r6]
  PDB0_SC &= ~PDB_SC_PDBEN;
     7e2:	ldr	r6, [r7, #0]
     7e4:	bic.w	r6, r6, #128	; 0x80
     7e8:	str	r6, [r7, #0]
#endif
  __enable_irq();
}
//
 void modifyADCS(int16_t res, uint16_t avg, uint16_t diff, uint16_t hspd)
 { // Mono only
     7ea:	mov	r8, r1
     7ec:	mov	r7, r3
     7ee:	mov	r6, r2
  uint32_t ch1c1 = PDB0_CH1C1; // keep old value
  PDB0_CH0C1 = 0;   // disable ADC triggering
  PDB0_CH1C1 = 0;   // disable ADC triggering
  PDB0_SC &= ~PDB_SC_PDBEN;

  analogReadRes(res);
     7f0:	bl	8ef4 <analogReadRes>
  analogReference(INTERNAL); // range 0 to 1.2 volts
     7f4:	movs	r0, #2
     7f6:	bl	8ea8 <analogReference>
  analogReadAveraging(avg);
     7fa:	mov	r0, r8
     7fc:	bl	8f5c <analogReadAveraging>

static void analogWaitForCal(void)
{ uint16_t sum;

#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
  while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) { }
     800:	ldr	r1, [pc, #300]	; (930 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x16c>)
     802:	ldr	r3, [pc, #304]	; (934 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x170>)
     804:	ldr	r2, [r1, #0]
     806:	lsls	r0, r2, #24
     808:	bmi.n	804 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x40>
     80a:	ldr	r2, [r3, #0]
     80c:	lsls	r2, r2, #24
     80e:	bmi.n	804 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x40>
#elif defined(HAS_KINETIS_ADC0)
  while (ADC0_SC3 & ADC_SC3_CAL) { }
#endif
  __disable_irq();
     810:	cpsid	i
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
     812:	ldr	r1, [pc, #292]	; (938 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x174>)
     814:	ldr	r3, [pc, #292]	; (93c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x178>)
     816:	ldr	r2, [pc, #296]	; (940 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x17c>)
     818:	ldr.w	lr, [r1]
     81c:	ldr	r3, [r3, #0]
     81e:	ldr	r2, [r2, #0]
     820:	ldr	r0, [r1, #12]
    sum = (sum / 2) | 0x8000;
     822:	add	r3, lr
  while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) { }
#elif defined(HAS_KINETIS_ADC0)
  while (ADC0_SC3 & ADC_SC3_CAL) { }
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
     824:	adds	r1, #16
    sum = (sum / 2) | 0x8000;
     826:	add	r3, r2
  while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) { }
#elif defined(HAS_KINETIS_ADC0)
  while (ADC0_SC3 & ADC_SC3_CAL) { }
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
     828:	ldr	r2, [pc, #280]	; (944 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x180>)
     82a:	ldr	r1, [r1, #0]
     82c:	ldr	r2, [r2, #0]
    sum = (sum / 2) | 0x8000;
     82e:	add	r3, r0
     830:	add	r3, r1
     832:	add	r3, r2
     834:	ubfx	r3, r3, #1, #15
    ADC0_PG = sum;
     838:	ldr	r2, [pc, #268]	; (948 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x184>)
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     83a:	ldr	r1, [pc, #272]	; (94c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x188>)
     83c:	ldr	r0, [pc, #272]	; (950 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x18c>)
  while (ADC0_SC3 & ADC_SC3_CAL) { }
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC0_PG = sum;
     83e:	orr.w	r3, r3, #32768	; 0x8000
     842:	str	r3, [r2, #0]
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     844:	adds	r2, #52	; 0x34
     846:	ldr.w	lr, [r0]
     84a:	ldr	r3, [r1, #0]
     84c:	ldr	r2, [r2, #0]
     84e:	ldr	r0, [r1, #8]
    sum = (sum / 2) | 0x8000;
     850:	add	r3, lr
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     852:	adds	r1, #12
    sum = (sum / 2) | 0x8000;
     854:	add	r3, r2
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     856:	ldr	r2, [pc, #252]	; (954 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x190>)
     858:	ldr	r1, [r1, #0]
     85a:	ldr	r2, [r2, #0]
    sum = (sum / 2) | 0x8000;
     85c:	add	r3, r0
     85e:	add	r3, r1
     860:	add	r3, r2
    ADC0_MG = sum;
     862:	ldr	r0, [pc, #244]	; (958 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x194>)
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     864:	ldr	r1, [pc, #244]	; (95c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x198>)
     866:	ldr	r2, [pc, #248]	; (960 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x19c>)
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    sum = (sum / 2) | 0x8000;
     868:	ubfx	r3, r3, #1, #15
    ADC0_MG = sum;
     86c:	orr.w	r3, r3, #32768	; 0x8000
     870:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     872:	ldr	r3, [pc, #240]	; (964 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1a0>)
     874:	ldr.w	lr, [r1]
     878:	ldr	r2, [r2, #0]
     87a:	ldr	r3, [r3, #0]
     87c:	ldr	r0, [r1, #12]
    sum = (sum / 2) | 0x8000;
     87e:	add	r2, lr
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    sum = (sum / 2) | 0x8000;
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     880:	adds	r1, #16
    sum = (sum / 2) | 0x8000;
     882:	add	r2, r3
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    sum = (sum / 2) | 0x8000;
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     884:	ldr	r3, [pc, #224]	; (968 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1a4>)
     886:	ldr	r1, [r1, #0]
     888:	ldr	r3, [r3, #0]
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     88a:	ldr.w	lr, [pc, #272]	; 99c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1d8>
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    sum = (sum / 2) | 0x8000;
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
     88e:	add	r2, r0
     890:	add	r2, r1
     892:	add	r2, r3
     894:	ubfx	r2, r2, #1, #15
    ADC1_PG = sum;
     898:	ldr	r3, [pc, #208]	; (96c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1a8>)
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     89a:	ldr	r0, [pc, #212]	; (970 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1ac>)
     89c:	ldr	r1, [pc, #212]	; (974 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1b0>)
    sum = (sum / 2) | 0x8000;
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
     89e:	orr.w	r2, r2, #32768	; 0x8000
     8a2:	str	r2, [r3, #0]
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     8a4:	adds	r3, #52	; 0x34
     8a6:	ldr	r1, [r1, #0]
     8a8:	ldr	r2, [r0, #0]
     8aa:	ldr	r3, [r3, #0]
     8ac:	adds	r0, #8
    sum = (sum / 2) | 0x8000;
     8ae:	add	r2, r1
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     8b0:	ldr	r0, [r0, #0]
     8b2:	ldr	r1, [pc, #196]	; (978 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1b4>)
    sum = (sum / 2) | 0x8000;
     8b4:	add	r2, r3
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     8b6:	ldr.w	r3, [lr]
     8ba:	ldr	r1, [r1, #0]
    sum = (sum / 2) | 0x8000;
     8bc:	add	r2, r0
     8be:	add	r2, r3
     8c0:	add	r2, r1
    ADC1_MG = sum;
     8c2:	ldr	r3, [pc, #184]	; (97c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1b8>)
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    sum = (sum / 2) | 0x8000;
     8c4:	ubfx	r2, r2, #1, #15
    ADC1_MG = sum;
     8c8:	orr.w	r2, r2, #32768	; 0x8000
     8cc:	str	r2, [r3, #0]
#endif
  __enable_irq();
     8ce:	cpsie	i
  //
//  while(ADC0_SC2&ADC_SC2_ADACT);
//    (void)ADC0_RA;
//    (void)ADC0_RB;

  if(diff)
     8d0:	cbnz	r6, 91c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x158>
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
     8d2:	cbz	r7, 8de <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x11a>
    ADC0_CFG2 |= ADC_CFG2_ADHSC;
     8d4:	ldr	r2, [pc, #168]	; (980 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1bc>)
     8d6:	ldr	r3, [r2, #0]
     8d8:	orr.w	r3, r3, #4
     8dc:	str	r3, [r2, #0]

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8de:	ldr	r1, [pc, #164]	; (984 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1c0>)
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8e0:	ldr	r2, [pc, #164]	; (988 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1c4>)
  if(diff)
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
    ADC0_CFG2 |= ADC_CFG2_ADHSC;

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8e2:	ldr	r3, [r1, #0]
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger

// restart PDB
  (void)ADC0_RA;
     8e4:	ldr	r7, [pc, #164]	; (98c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1c8>)
  (void)ADC1_RA;
     8e6:	ldr	r6, [pc, #168]	; (990 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1cc>)
  PDB0_CH0C1 = ch0c1;
     8e8:	ldr	r0, [pc, #168]	; (994 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1d0>)
  if(diff)
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
    ADC0_CFG2 |= ADC_CFG2_ADHSC;

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8ea:	orr.w	r3, r3, #68	; 0x44
     8ee:	str	r3, [r1, #0]
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8f0:	ldr	r3, [r2, #0]

// restart PDB
  (void)ADC0_RA;
  (void)ADC1_RA;
  PDB0_CH0C1 = ch0c1;
  PDB0_CH1C1 = ch1c1;
     8f2:	sub.w	r1, r1, #20352	; 0x4f80
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
    ADC0_CFG2 |= ADC_CFG2_ADHSC;

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8f6:	orr.w	r3, r3, #68	; 0x44

// restart PDB
  (void)ADC0_RA;
  (void)ADC1_RA;
  PDB0_CH0C1 = ch0c1;
  PDB0_CH1C1 = ch1c1;
     8fa:	subs	r1, #104	; 0x68
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
    ADC0_CFG2 |= ADC_CFG2_ADHSC;

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8fc:	str	r3, [r2, #0]
// restart PDB
  (void)ADC0_RA;
  (void)ADC1_RA;
  PDB0_CH0C1 = ch0c1;
  PDB0_CH1C1 = ch1c1;
  PDB0_SC |= PDB_SC_PDBEN ;
     8fe:	ldr	r3, [pc, #44]	; (92c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x168>)

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger

// restart PDB
  (void)ADC0_RA;
     900:	ldr	r2, [r7, #0]
  (void)ADC1_RA;
     902:	ldr	r2, [r6, #0]
  PDB0_CH0C1 = ch0c1;
     904:	str	r4, [r0, #0]
  PDB0_CH1C1 = ch1c1;
     906:	str	r5, [r1, #0]
  PDB0_SC |= PDB_SC_PDBEN ;
     908:	ldr	r2, [r3, #0]
     90a:	orr.w	r2, r2, #128	; 0x80
     90e:	str	r2, [r3, #0]
  PDB0_SC |= PDB_SC_SWTRIG ;  // kick off the PDB  - just once  
     910:	ldr	r2, [r3, #0]
     912:	orr.w	r2, r2, #65536	; 0x10000
     916:	str	r2, [r3, #0]
 }
     918:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
//  while(ADC0_SC2&ADC_SC2_ADACT);
//    (void)ADC0_RA;
//    (void)ADC0_RB;

  if(diff)
    ADC0_SC1A |= ADC_SC1_DIFF;
     91c:	ldr	r2, [pc, #120]	; (998 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1d4>)
     91e:	ldr	r3, [r2, #0]
     920:	orr.w	r3, r3, #32
     924:	str	r3, [r2, #0]
     926:	b.n	8d2 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x10e>
     928:	.word	0x40036038
     92c:	.word	0x40036000
     930:	.word	0x4003b024
     934:	.word	0x400bb024
     938:	.word	0x4003b038
     93c:	.word	0x4003b03c
     940:	.word	0x4003b040
     944:	.word	0x4003b04c
     948:	.word	0x4003b02c
     94c:	.word	0x4003b05c
     950:	.word	0x4003b058
     954:	.word	0x4003b06c
     958:	.word	0x4003b030
     95c:	.word	0x400bb038
     960:	.word	0x400bb03c
     964:	.word	0x400bb040
     968:	.word	0x400bb04c
     96c:	.word	0x400bb02c
     970:	.word	0x400bb05c
     974:	.word	0x400bb058
     978:	.word	0x400bb06c
     97c:	.word	0x400bb030
     980:	.word	0x4003b00c
     984:	.word	0x4003b020
     988:	.word	0x400bb020
     98c:	.word	0x4003b010
     990:	.word	0x400bb010
     994:	.word	0x40036010
     998:	.word	0x4003b000
     99c:	.word	0x400bb068

000009a0 <makeFilename(char*)>:
  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
}

char *makeFilename(char * prefix)
{ static char filename[40];
     9a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     9a4:	sub	sp, #28
     9a6:	mov	r4, r0

  sprintf(filename, "%s_%04d_%02d_%02d_%02d_%02d_%02d%s", prefix, 
     9a8:	bl	26b0 <year()>
     9ac:	mov	r5, r0
     9ae:	bl	2690 <month()>
     9b2:	mov	r9, r0
     9b4:	bl	2670 <day()>
     9b8:	mov	r6, r0
     9ba:	bl	2610 <hour()>
     9be:	mov	r7, r0
     9c0:	bl	2630 <minute()>
     9c4:	mov	r8, r0
     9c6:	bl	2650 <second()>
                    year(), month(), day(), hour(), minute(), second(), postfix);
     9ca:	ldr	r1, [pc, #96]	; (a2c <makeFilename(char*)+0x8c>)
     9cc:	str	r0, [sp, #16]
     9ce:	mov	r2, r4
     9d0:	mov	r3, r5
     9d2:	str	r1, [sp, #20]
     9d4:	str.w	r9, [sp]
     9d8:	ldr	r1, [pc, #84]	; (a30 <makeFilename(char*)+0x90>)
     9da:	str.w	r8, [sp, #12]
     9de:	str	r7, [sp, #8]
     9e0:	str	r6, [sp, #4]
     9e2:	ldr	r0, [pc, #80]	; (a34 <makeFilename(char*)+0x94>)
     9e4:	bl	c544 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9e8:	ldr	r0, [pc, #72]	; (a34 <makeFilename(char*)+0x94>)
     9ea:	bl	c780 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     9ee:	mov	r1, r0
     9f0:	ldr	r0, [pc, #64]	; (a34 <makeFilename(char*)+0x94>)
     9f2:	bl	8a7c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     9f6:	ldr	r0, [pc, #64]	; (a38 <makeFilename(char*)+0x98>)
     9f8:	bl	a558 <Print::println()>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9fc:	ldr	r0, [pc, #52]	; (a34 <makeFilename(char*)+0x94>)
     9fe:	bl	c780 <strlen>
     a02:	ldr	r1, [pc, #56]	; (a3c <makeFilename(char*)+0x9c>)
     a04:	mov	r2, r0
     a06:	ldr	r0, [r1, #72]	; 0x48
     a08:	cbz	r0, a1e <makeFilename(char*)+0x7e>
     a0a:	ldr	r1, [pc, #40]	; (a34 <makeFilename(char*)+0x94>)
     a0c:	bl	5c84 <FatFile::write(void const*, unsigned int)>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     a10:	ldr	r0, [pc, #40]	; (a3c <makeFilename(char*)+0x9c>)
     a12:	bl	a558 <Print::println()>
  #endif
  #if DO_DEBUG>1
    logFile.println(filename);
  #endif
  return filename;  
}
     a16:	ldr	r0, [pc, #28]	; (a34 <makeFilename(char*)+0x94>)
     a18:	add	sp, #28
     a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     a1e:	ldr	r0, [r1, #76]	; 0x4c
     a20:	cmp	r0, #0
     a22:	beq.n	a10 <makeFilename(char*)+0x70>
     a24:	ldr	r1, [pc, #12]	; (a34 <makeFilename(char*)+0x94>)
     a26:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
     a2a:	b.n	a10 <makeFilename(char*)+0x70>
     a2c:	.word	0x20013738
     a30:	.word	0x00012d3c
     a34:	.word	0x2001927c
     a38:	.word	0x200138e4
     a3c:	.word	0x200193fc

00000a40 <wavHeader(unsigned long)>:

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     a40:	ldr	r3, [pc, #80]	; (a94 <wavHeader(unsigned long)+0x54>)
     a42:	ldr	r1, [pc, #84]	; (a98 <wavHeader(unsigned long)+0x58>)
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     a44:	ldr	r2, [pc, #84]	; (a9c <wavHeader(unsigned long)+0x5c>)

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     a46:	push	{r4, r5, r6, r7}
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     a48:	str	r2, [r3, #28]

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     a4a:	mov	r2, r0

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     a4c:	ldmia	r1, {r0, r1}
  strcpy(wheader+8,"WAVE");
     a4e:	ldr	r6, [pc, #80]	; (aa0 <wavHeader(unsigned long)+0x60>)

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     a50:	str	r0, [r3, #0]
  strcpy(wheader+8,"WAVE");
     a52:	ldmia.w	r6, {r0, r1}
  strcpy(wheader+12,"fmt ");
     a56:	ldr	r5, [pc, #76]	; (aa4 <wavHeader(unsigned long)+0x64>)
  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
     a58:	str	r0, [r3, #8]
  strcpy(wheader+12,"fmt ");
     a5a:	ldmia.w	r5, {r0, r1}
  strcpy(wheader+36,"data");
     a5e:	ldr	r4, [pc, #72]	; (aa8 <wavHeader(unsigned long)+0x68>)
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
     a60:	str	r0, [r3, #12]
  strcpy(wheader+36,"data");
     a62:	ldmia.w	r4, {r0, r1}
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     a66:	subs	r2, #44	; 0x2c
     a68:	bic.w	r2, r2, #1
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     a6c:	movs	r4, #16
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     a6e:	add.w	r7, r2, #36	; 0x24
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     a72:	movw	r6, #48000	; 0xbb80
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     a76:	movs	r5, #2
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     a78:	movs	r1, #1
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
     a7a:	str	r0, [r3, #36]	; 0x24
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     a7c:	str	r7, [r3, #4]
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     a7e:	str	r6, [r3, #24]
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     a80:	strh	r5, [r3, #32]
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     a82:	str	r4, [r3, #16]
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
     a84:	strh	r4, [r3, #34]	; 0x22
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     a86:	mov	r0, r3
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     a88:	str	r2, [r3, #40]	; 0x28
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     a8a:	strh	r1, [r3, #20]
  *(int16_t*)(wheader+22)=nchan;// numChannels 
     a8c:	strh	r1, [r3, #22]
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     a8e:	pop	{r4, r5, r6, r7}
     a90:	bx	lr
     a92:	nop
     a94:	.word	0x200192cc
     a98:	.word	0x00012d80
     a9c:	.word	0x00017700
     aa0:	.word	0x00012d88
     aa4:	.word	0x00012d90
     aa8:	.word	0x00012d98

00000aac <c_uSD::init()>:
//____________________________ FS Interface implementation______________________
void c_uSD::init()
{
     aac:	push	{r4, r5, r6, lr}
     aae:	mov	r4, r0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     ab0:	add.w	r5, r0, #1168	; 0x490
     ab4:	mov	r0, r5
     ab6:	mov.w	r1, #0
     aba:	bl	8020 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     abe:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     ac2:	cbz	r5, ace <c_uSD::init()+0x22>
     ac4:	mov	r0, r5
     ac6:	bl	7760 <SdioCard::errorCode() const>
     aca:	mov	r5, r0
     acc:	cbz	r0, aee <c_uSD::init()+0x42>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     ace:	ldr	r6, [pc, #60]	; (b0c <c_uSD::init()+0x60>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     ad0:	ldr	r5, [pc, #60]	; (b10 <c_uSD::init()+0x64>)
  {
//    sd.errorHalt("sd.begin failed");
    while(1)
    {
      // blink code suggests insertion of an SD card
            pinMode(13,OUTPUT);
     ad2:	movs	r1, #1
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     ad4:	movs	r4, #32
     ad6:	movs	r0, #13
     ad8:	bl	9290 <pinMode>
     adc:	str	r4, [r6, #0]
            digitalWriteFast(13,HIGH);
            delay(200);
     ade:	movs	r0, #200	; 0xc8
     ae0:	bl	92e0 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     ae4:	str	r4, [r5, #0]
            digitalWriteFast(13,LOW);
            delay(200);
     ae6:	movs	r0, #200	; 0xc8
     ae8:	bl	92e0 <delay>
     aec:	b.n	ad2 <c_uSD::init()+0x26>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     aee:	ldr.w	r1, [r4, #1164]	; 0x48c
     af2:	mov	r0, r4
     af4:	bl	6dc4 <FsVolume::begin(BlockDeviceInterface*)>
     af8:	cmp	r0, #0
     afa:	beq.n	ace <c_uSD::init()+0x22>
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
     afc:	ldr	r3, [pc, #20]	; (b14 <c_uSD::init()+0x68>)
     afe:	ldr	r2, [pc, #24]	; (b18 <c_uSD::init()+0x6c>)
  //
  nbuf=0;
     b00:	strh.w	r5, [r4, #1286]	; 0x506
  state=0;
     b04:	strh.w	r5, [r4, #1284]	; 0x504
            delay(200);
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
     b08:	str	r2, [r3, #0]
  //
  nbuf=0;
  state=0;
}
     b0a:	pop	{r4, r5, r6, pc}
     b0c:	.word	0x400ff084
     b10:	.word	0x400ff088
     b14:	.word	0x20019a10
     b18:	.word	0x00000499

00000b1c <c_uSD::close()>:
    state=close();
  }
  return state;
}
int16_t c_uSD::close(void)
{   // close file
     b1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b20:	mov	r5, r0
     b22:	ldr.w	r0, [r0, #1276]	; 0x4fc
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     b26:	cmp	r0, #0
     b28:	beq.n	bae <c_uSD::close()+0x92>
     b2a:	bl	5c0c <FatFile::truncate()>
     b2e:	ldr.w	r3, [r5, #1276]	; 0x4fc
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     b32:	cmp	r3, #0
     b34:	beq.n	bc0 <c_uSD::close()+0xa4>
     b36:	ldr.w	sl, [r3, #28]
     b3a:	mov.w	r9, #0
     b3e:	mov	r8, sl
    file.truncate();
    #ifdef GEN_WAV_FILE
       uint32_t fileSize = file.size();
       memcpy(header,wavHeader(fileSize),44);
     b40:	mov	r0, sl
     b42:	bl	a40 <wavHeader(unsigned long)>
     b46:	ldr	r7, [pc, #216]	; (c20 <c_uSD::close()+0x104>)
     b48:	mov	r4, r0
     b4a:	add.w	lr, r0, #32
     b4e:	ldr	r0, [r4, #0]
     b50:	ldr	r1, [r4, #4]
     b52:	ldr	r2, [r4, #8]
     b54:	ldr	r3, [r4, #12]
     b56:	mov	r6, r7
     b58:	stmia	r6!, {r0, r1, r2, r3}
     b5a:	adds	r4, #16
     b5c:	cmp	r4, lr
     b5e:	mov	r7, r6
     b60:	bne.n	b4e <c_uSD::close()+0x32>
     b62:	ldr	r0, [r4, #0]
     b64:	ldr	r1, [r4, #4]
     b66:	ldr	r2, [r4, #8]
     b68:	stmia	r7!, {r0, r1, r2}
     b6a:	ldr.w	r0, [r5, #1276]	; 0x4fc
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     b6e:	cmp	r0, #0
     b70:	beq.n	bf4 <c_uSD::close()+0xd8>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     b72:	movs	r1, #0
     b74:	bl	59f8 <FatFile::seekSet(unsigned long)>
     b78:	ldr.w	r0, [r5, #1276]	; 0x4fc
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     b7c:	cbz	r0, bd2 <c_uSD::close()+0xb6>
     b7e:	mov.w	r2, #512	; 0x200
     b82:	ldr	r1, [pc, #156]	; (c20 <c_uSD::close()+0x104>)
     b84:	bl	5c84 <FatFile::write(void const*, unsigned int)>
     b88:	ldr.w	r0, [r5, #1276]	; 0x4fc
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     b8c:	cbnz	r0, bec <c_uSD::close()+0xd0>
     b8e:	ldr.w	r0, [r5, #1280]	; 0x500
     b92:	cbz	r0, b9c <c_uSD::close()+0x80>
     b94:	mov	r2, r8
     b96:	mov	r3, r9
     b98:	bl	3b40 <ExFatFile::seekSet(unsigned long long)>
       file.seek(0);
       file.write(header,512);
       file.seek(fileSize);
    #endif
    file.close();
     b9c:	addw	r0, r5, #1220	; 0x4c4
     ba0:	bl	6cbc <FsBaseFile::close()>
//#if DO_DEBUG>0
//    Serial.println("file Closed");    
//#endif
    state=0;  // flag to open new file
     ba4:	movs	r0, #0
     ba6:	strh.w	r0, [r5, #1284]	; 0x504
    return state;
}
     baa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     bae:	ldr.w	r0, [r5, #1280]	; 0x500
     bb2:	cbz	r0, c06 <c_uSD::close()+0xea>
     bb4:	bl	4d60 <ExFatFile::truncate()>
     bb8:	ldr.w	r3, [r5, #1276]	; 0x4fc
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     bbc:	cmp	r3, #0
     bbe:	bne.n	b36 <c_uSD::close()+0x1a>
     bc0:	ldr.w	r3, [r5, #1280]	; 0x500
     bc4:	cbz	r3, c12 <c_uSD::close()+0xf6>
     bc6:	ldrd	r8, r9, [r3, #16]
     bca:	mov.w	r9, #0
     bce:	mov	sl, r8
     bd0:	b.n	b40 <c_uSD::close()+0x24>
     bd2:	ldr.w	r0, [r5, #1280]	; 0x500
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     bd6:	cmp	r0, #0
     bd8:	beq.n	b9c <c_uSD::close()+0x80>
     bda:	mov.w	r2, #512	; 0x200
     bde:	ldr	r1, [pc, #64]	; (c20 <c_uSD::close()+0x104>)
     be0:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
     be4:	ldr.w	r0, [r5, #1276]	; 0x4fc
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     be8:	cmp	r0, #0
     bea:	beq.n	b8e <c_uSD::close()+0x72>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     bec:	mov	r1, sl
     bee:	bl	59f8 <FatFile::seekSet(unsigned long)>
     bf2:	b.n	b9c <c_uSD::close()+0x80>
           m_xFile ? m_xFile->seekSet(pos) : false;
     bf4:	ldr.w	r0, [r5, #1280]	; 0x500
     bf8:	cmp	r0, #0
     bfa:	beq.n	b9c <c_uSD::close()+0x80>
     bfc:	movs	r2, #0
     bfe:	movs	r3, #0
     c00:	bl	3b40 <ExFatFile::seekSet(unsigned long long)>
     c04:	b.n	b78 <c_uSD::close()+0x5c>
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     c06:	mov	sl, r0
     c08:	mov.w	r8, #0
     c0c:	mov.w	r9, #0
     c10:	b.n	b40 <c_uSD::close()+0x24>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c12:	mov	sl, r3
     c14:	mov.w	r8, #0
     c18:	mov.w	r9, #0
     c1c:	b.n	b40 <c_uSD::close()+0x24>
     c1e:	nop
     c20:	.word	0x2001507c

00000c24 <c_uSD::storeConfig(unsigned long*, int, long*, int)>:

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
     c24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     c28:	ldr	r4, [pc, #272]	; (d3c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x118>)
     c2a:	sub	sp, #44	; 0x2c
     c2c:	ldr	r4, [r4, #0]
     c2e:	ldr.w	r9, [sp, #80]	; 0x50
     c32:	str	r3, [sp, #4]
     c34:	mov	r5, r0
     c36:	mov	sl, r1
     c38:	mov	r8, r2
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
     c3a:	addw	fp, r0, #1220	; 0x4c4
     c3e:	cbz	r4, c4e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x2a>
     c40:	mov	r1, r4
     c42:	movw	r3, #1537	; 0x601
     c46:	ldr	r2, [pc, #248]	; (d40 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x11c>)
     c48:	mov	r0, fp
     c4a:	bl	6ce4 <FsBaseFile::open(FsVolume*, char const*, int)>
  for(int ii=0; ii<n1; ii++)
     c4e:	cmp.w	r8, #0
     c52:	ble.n	d36 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x112>
     c54:	sub.w	r7, sl, #4
     c58:	movs	r6, #0
     c5a:	add	r4, sp, #8
     c5c:	b.n	c68 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     c5e:	bl	5c84 <FatFile::write(void const*, unsigned int)>
     c62:	adds	r6, #1
     c64:	cmp	r8, r6
     c66:	beq.n	ca2 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
     c68:	ldr.w	r2, [r7, #4]!
     c6c:	ldr	r1, [pc, #212]	; (d44 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     c6e:	mov	r0, r4
     c70:	bl	c544 <sprintf>
     c74:	mov	r0, r4
     c76:	bl	c780 <strlen>
     c7a:	ldr.w	r3, [r5, #1276]	; 0x4fc
     c7e:	mov	lr, r0
     c80:	mov	r2, r0
     c82:	mov	r1, r4
     c84:	mov	r0, r3
     c86:	cmp	r3, #0
     c88:	bne.n	c5e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3a>
     c8a:	ldr.w	r3, [r5, #1280]	; 0x500
     c8e:	mov	r2, lr
     c90:	mov	r1, r4
     c92:	mov	r0, r3
     c94:	cmp	r3, #0
     c96:	beq.n	c62 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3e>
}

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
     c98:	adds	r6, #1
     c9a:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
     c9e:	cmp	r8, r6
     ca0:	bne.n	c68 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     ca2:	cmp.w	r9, #0
     ca6:	ble.n	cf4 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
     ca8:	ldr	r3, [sp, #4]
     caa:	movs	r6, #0
     cac:	subs	r7, r3, #4
     cae:	b.n	cba <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
     cb0:	bl	5c84 <FatFile::write(void const*, unsigned int)>
     cb4:	adds	r6, #1
     cb6:	cmp	r9, r6
     cb8:	beq.n	cf4 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
     cba:	ldr.w	r2, [r7, #4]!
     cbe:	ldr	r1, [pc, #132]	; (d44 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     cc0:	mov	r0, r4
     cc2:	bl	c544 <sprintf>
     cc6:	mov	r0, r4
     cc8:	bl	c780 <strlen>
     ccc:	ldr.w	r3, [r5, #1276]	; 0x4fc
     cd0:	mov	lr, r0
     cd2:	mov	r2, r0
     cd4:	mov	r1, r4
     cd6:	mov	r0, r3
     cd8:	cmp	r3, #0
     cda:	bne.n	cb0 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x8c>
     cdc:	ldr.w	r3, [r5, #1280]	; 0x500
     ce0:	mov	r2, lr
     ce2:	mov	r1, r4
     ce4:	mov	r0, r3
     ce6:	cmp	r3, #0
     ce8:	beq.n	cb4 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x90>
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     cea:	adds	r6, #1
     cec:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
     cf0:	cmp	r9, r6
     cf2:	bne.n	cba <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
     cf4:	add.w	r2, sl, r8, lsl #2
     cf8:	ldr	r1, [pc, #76]	; (d48 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x124>)
     cfa:	mov	r0, r4
     cfc:	bl	c544 <sprintf>
     d00:	ldr.w	r0, [r5, #1276]	; 0x4fc
     d04:	cbz	r0, d1a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xf6>
     d06:	mov	r1, r4
     d08:	movs	r2, #6
     d0a:	bl	5c84 <FatFile::write(void const*, unsigned int)>
  file.write((uint8_t *)text,6);

  file.close();
     d0e:	mov	r0, fp
     d10:	bl	6cbc <FsBaseFile::close()>
  
}
     d14:	add	sp, #44	; 0x2c
     d16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d1a:	ldr.w	r0, [r5, #1280]	; 0x500
     d1e:	cmp	r0, #0
     d20:	beq.n	d0e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xea>
     d22:	mov	r1, r4
     d24:	movs	r2, #6
     d26:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
  file.write((uint8_t *)text,6);

  file.close();
     d2a:	mov	r0, fp
     d2c:	bl	6cbc <FsBaseFile::close()>
  
}
     d30:	add	sp, #44	; 0x2c
     d32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d36:	add	r4, sp, #8
     d38:	b.n	ca2 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
     d3a:	nop
     d3c:	.word	0x20019a1c
     d40:	.word	0x00012da0
     d44:	.word	0x00012db4
     d48:	.word	0x00012dac

00000d4c <c_uSD::loadConfig(unsigned long*, int, long*, int)>:

void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
     d4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     d50:	ldr	r4, [pc, #252]	; (e50 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x104>)
     d52:	sub	sp, #44	; 0x2c
     d54:	ldr	r4, [r4, #0]
     d56:	ldr.w	r9, [sp, #80]	; 0x50
     d5a:	cmp	r4, #0
     d5c:	beq.n	dda <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
     d5e:	addw	fp, r0, #1220	; 0x4c4
     d62:	str	r3, [sp, #4]
     d64:	mov	r8, r2
     d66:	mov	sl, r1
     d68:	mov	r5, r0
     d6a:	mov	r1, r4
     d6c:	mov	r0, fp
     d6e:	movs	r3, #0
     d70:	ldr	r2, [pc, #224]	; (e54 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
     d72:	bl	6ce4 <FsBaseFile::open(FsVolume*, char const*, int)>
     d76:	cbz	r0, dda <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  //
  for(int ii=0; ii<n1; ii++)
     d78:	cmp.w	r8, #0
     d7c:	ldr.w	r3, [r5, #1276]	; 0x4fc
     d80:	ble.n	de0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x94>
     d82:	mov	r7, sl
     d84:	movs	r6, #0
     d86:	add	r4, sp, #8
     d88:	b.n	daa <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x5e>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     d8a:	bl	55bc <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
     d8e:	cmp	r0, #0
     d90:	ldr	r1, [pc, #196]	; (e58 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
     d92:	ble.n	d9c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x50>
     d94:	mov	r2, r7
     d96:	mov	r0, r4
     d98:	bl	c590 <sscanf>
     d9c:	ldr.w	r3, [r5, #1276]	; 0x4fc
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
     da0:	adds	r6, #1
     da2:	cmp	r8, r6
     da4:	add.w	r7, r7, #4
     da8:	beq.n	de2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x96>
     daa:	movs	r2, #12
     dac:	mov	r1, r4
     dae:	mov	r0, r3
     db0:	cmp	r3, #0
     db2:	bne.n	d8a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
     db4:	ldr.w	r0, [r5, #1280]	; 0x500
     db8:	cmp	r0, #0
     dba:	beq.n	da0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x54>
     dbc:	movs	r2, #12
     dbe:	mov	r1, r4
     dc0:	bl	3968 <ExFatFile::read(void*, unsigned int)>
     dc4:	b.n	d8e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x42>
     dc6:	cbz	r3, e2a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xde>
     dc8:	mov	r0, r3
     dca:	movs	r2, #6
     dcc:	mov	r1, r4
     dce:	bl	55bc <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
     dd2:	cbnz	r0, e3c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
  { text[5]=0;
    sscanf(text,"%s",(char *) &param1[n1]);
  }  
  file.close();
     dd4:	mov	r0, fp
     dd6:	bl	6cbc <FsBaseFile::close()>
}
     dda:	add	sp, #44	; 0x2c
     ddc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     de0:	add	r4, sp, #8
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     de2:	cmp.w	r9, #0
     de6:	ble.n	dc6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
     de8:	ldr	r6, [sp, #4]
     dea:	movs	r7, #0
     dec:	b.n	e0e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xc2>
     dee:	bl	55bc <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
     df2:	cmp	r0, #0
     df4:	ldr	r1, [pc, #96]	; (e58 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
     df6:	ble.n	e00 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb4>
     df8:	mov	r2, r6
     dfa:	mov	r0, r4
     dfc:	bl	c590 <sscanf>
     e00:	ldr.w	r3, [r5, #1276]	; 0x4fc
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     e04:	adds	r7, #1
     e06:	cmp	r9, r7
     e08:	add.w	r6, r6, #4
     e0c:	beq.n	dc6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
     e0e:	movs	r2, #12
     e10:	mov	r1, r4
     e12:	mov	r0, r3
     e14:	cmp	r3, #0
     e16:	bne.n	dee <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
     e18:	ldr.w	r0, [r5, #1280]	; 0x500
     e1c:	cmp	r0, #0
     e1e:	beq.n	e04 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb8>
     e20:	movs	r2, #12
     e22:	mov	r1, r4
     e24:	bl	3968 <ExFatFile::read(void*, unsigned int)>
     e28:	b.n	df2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa6>
     e2a:	ldr.w	r0, [r5, #1280]	; 0x500
     e2e:	cbz	r0, e3c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
     e30:	movs	r2, #6
     e32:	mov	r1, r4
     e34:	bl	3968 <ExFatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
     e38:	cmp	r0, #0
     e3a:	beq.n	dd4 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
  { text[5]=0;
     e3c:	movs	r3, #0
    sscanf(text,"%s",(char *) &param1[n1]);
     e3e:	add.w	r2, sl, r8, lsl #2
     e42:	mov	r0, r4
     e44:	ldr	r1, [pc, #20]	; (e5c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x110>)
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
  { text[5]=0;
     e46:	strb.w	r3, [sp, #13]
    sscanf(text,"%s",(char *) &param1[n1]);
     e4a:	bl	c590 <sscanf>
     e4e:	b.n	dd4 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
     e50:	.word	0x20019a1c
     e54:	.word	0x00012da0
     e58:	.word	0x00012dbc
     e5c:	.word	0x00012d5c

00000e60 <setWakeupCallandSleep(unsigned long)>:
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     e60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     e64:	ldr	r4, [pc, #308]	; (f9c <setWakeupCallandSleep(unsigned long)+0x13c>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     e66:	ldr	r2, [pc, #312]	; (fa0 <setWakeupCallandSleep(unsigned long)+0x140>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     e68:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     e6a:	ldr	r1, [pc, #312]	; (fa4 <setWakeupCallandSleep(unsigned long)+0x144>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e6c:	ldr.w	r8, [pc, #376]	; fe8 <setWakeupCallandSleep(unsigned long)+0x188>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     e70:	ldr	r6, [pc, #308]	; (fa8 <setWakeupCallandSleep(unsigned long)+0x148>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     e72:	orr.w	r3, r3, #536870912	; 0x20000000
     e76:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     e78:	ldr	r3, [r2, #0]
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     e7a:	ldr	r4, [pc, #304]	; (fac <setWakeupCallandSleep(unsigned long)+0x14c>)
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     e7c:	orr.w	r3, r3, #256	; 0x100
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     e80:	mov	r7, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     e82:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     e84:	movs	r0, #21
     e86:	bl	9228 <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     e8a:	ldr	r3, [pc, #292]	; (fb0 <setWakeupCallandSleep(unsigned long)+0x150>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     e8c:	ldr.w	ip, [pc, #348]	; fec <setWakeupCallandSleep(unsigned long)+0x18c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
     e90:	ldr	r1, [pc, #288]	; (fb4 <setWakeupCallandSleep(unsigned long)+0x154>)
  LLWU_PE3 = 0;
     e92:	ldr	r0, [pc, #292]	; (fb8 <setWakeupCallandSleep(unsigned long)+0x158>)
  LLWU_PE4 = 0;
     e94:	ldr	r2, [pc, #292]	; (fbc <setWakeupCallandSleep(unsigned long)+0x15c>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     e96:	ldr.w	lr, [pc, #344]	; ff0 <setWakeupCallandSleep(unsigned long)+0x190>
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     e9a:	movs	r5, #32
     e9c:	strb	r5, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     e9e:	mov.w	r3, #2097152	; 0x200000
     ea2:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     ea6:	str	r3, [r4, #0]
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     ea8:	ldr	r3, [pc, #276]	; (fc0 <setWakeupCallandSleep(unsigned long)+0x160>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     eaa:	movs	r4, #0
     eac:	strb.w	r4, [lr]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     eb0:	mvn.w	ip, #1020	; 0x3fc
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
     eb4:	strb	r4, [r1, #0]
  LLWU_PE3 = 0;
     eb6:	strb	r4, [r0, #0]
  LLWU_PE4 = 0;
     eb8:	strb	r4, [r2, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     eba:	strb	r4, [r3, #0]
  LLWU_PE6 = 0;
     ebc:	strb	r4, [r1, #4]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     ebe:	sub.w	r1, r1, #216064	; 0x34c00
     ec2:	add	r1, ip
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
  LLWU_PE7 = 0;
     ec4:	strb	r4, [r0, #4]
  LLWU_PE8 = 0;
     ec6:	strb	r4, [r2, #4]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
     ec8:	strb	r5, [r3, #4]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     eca:	ldr	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     ecc:	ldr	r2, [pc, #244]	; (fc4 <setWakeupCallandSleep(unsigned long)+0x164>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
     ece:	ldr.w	ip, [pc, #292]	; ff4 <setWakeupCallandSleep(unsigned long)+0x194>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     ed2:	orr.w	r3, r3, #67108864	; 0x4000000
     ed6:	str	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     ed8:	ldr	r3, [r2, #0]
     eda:	orr.w	r3, r3, #1073741824	; 0x40000000
     ede:	str	r3, [r2, #0]
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
     ee0:	add.w	r1, r1, #12288	; 0x3000
    PORTB_PCR3 = PORT_PCR_MUX(0);
     ee4:	add.w	r2, r2, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     ee8:	sub.w	lr, lr, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
     eec:	sub.w	r0, r0, #207872	; 0x32c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     ef0:	sub.w	lr, lr, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
     ef4:	subw	r0, r0, #1014	; 0x3f6

    PORTB_PCR2 = PORT_PCR_MUX(0);
     ef8:	adds	r1, #4
    PORTB_PCR3 = PORT_PCR_MUX(0);
     efa:	adds	r2, #12
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     efc:	ldr	r3, [pc, #200]	; (fc8 <setWakeupCallandSleep(unsigned long)+0x168>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     efe:	str.w	r4, [r8]
    PORTA_PCR1 = PORT_PCR_MUX(0);
     f02:	str.w	r4, [ip]
    PORTA_PCR2 = PORT_PCR_MUX(0);
     f06:	str.w	r4, [lr]
    PORTA_PCR3 = PORT_PCR_MUX(0);
     f0a:	str	r4, [r0, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
     f0c:	str	r4, [r1, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
     f0e:	str	r4, [r2, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     f10:	ldr	r3, [r3, #0]
     f12:	sub.w	r1, r1, #53248	; 0xd000
   RTC_IER |= RTC_IER_TAIE_MASK;
     f16:	sub.w	r2, r2, #52992	; 0xcf00
     f1a:	subs	r2, #240	; 0xf0
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     f1c:	add	r3, r7
     f1e:	str	r3, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
     f20:	ldr	r3, [r2, #0]
     f22:	orr.w	r3, r3, #4
     f26:	str	r3, [r2, #0]
void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
   rtcSetup();
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
     f28:	bl	a2bc <yield>
     f2c:	mov	r3, r4
     f2e:	movs	r2, #10
     f30:	mov	r1, r7
     f32:	mov	r0, r6
     f34:	bl	a5a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     f38:	mov	r0, r6
     f3a:	bl	a558 <Print::println()>
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
     f3e:	movs	r1, #1
     f40:	movs	r0, #13
     f42:	bl	9290 <pinMode>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     f46:	ldr	r3, [pc, #132]	; (fcc <setWakeupCallandSleep(unsigned long)+0x16c>)

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     f48:	ldr	r6, [pc, #132]	; (fd0 <setWakeupCallandSleep(unsigned long)+0x170>)
     f4a:	str	r5, [r3, #0]
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
     f4c:	mov.w	r0, #1000	; 0x3e8
     f50:	bl	92e0 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     f54:	ldr	r3, [pc, #124]	; (fd4 <setWakeupCallandSleep(unsigned long)+0x174>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     f56:	ldr	r7, [pc, #128]	; (fd8 <setWakeupCallandSleep(unsigned long)+0x178>)
     f58:	str	r5, [r3, #0]

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     f5a:	ldrb	r2, [r6, #5]
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     f5c:	ldr	r5, [pc, #124]	; (fdc <setWakeupCallandSleep(unsigned long)+0x17c>)
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     f5e:	ldr	r0, [pc, #128]	; (fe0 <setWakeupCallandSleep(unsigned long)+0x180>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     f60:	ldr	r1, [pc, #128]	; (fe4 <setWakeupCallandSleep(unsigned long)+0x184>)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     f62:	sub.w	r3, r3, #528384	; 0x81000

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     f66:	and.w	r2, r2, #223	; 0xdf
     f6a:	strb	r2, [r6, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     f6c:	subs	r3, #135	; 0x87
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     f6e:	movs	r2, #2
     f70:	strb	r2, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     f72:	ldrb	r2, [r3, #0]
     f74:	and.w	r2, r2, #248	; 0xf8
     f78:	strb	r2, [r3, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     f7a:	ldrb	r2, [r3, #0]
     f7c:	orr.w	r2, r2, #4
     f80:	strb	r2, [r3, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     f82:	strb	r4, [r5, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
     f84:	ldrb	r3, [r3, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     f86:	ldr	r3, [r0, #0]
     f88:	bic.w	r3, r3, #2
     f8c:	str	r3, [r0, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     f8e:	ldr	r3, [r1, #0]
     f90:	orr.w	r3, r3, #4
     f94:	str	r3, [r1, #0]
   
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
     f96:	wfi
     f98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f9c:	.word	0x4004803c
     fa0:	.word	0x4003d010
     fa4:	.word	0x0000047d
     fa8:	.word	0x200138e4
     fac:	.word	0xe000e100
     fb0:	.word	0xe000e415
     fb4:	.word	0x4007c001
     fb8:	.word	0x4007c002
     fbc:	.word	0x4007c003
     fc0:	.word	0x4007c004
     fc4:	.word	0x40047000
     fc8:	.word	0x4003d000
     fcc:	.word	0x400ff084
     fd0:	.word	0x40064000
     fd4:	.word	0x400ff088
     fd8:	.word	0x4007e000
     fdc:	.word	0x4007e002
     fe0:	.word	0xe000e010
     fe4:	.word	0xe000ed10
     fe8:	.word	0x40049000
     fec:	.word	0xe000e280
     ff0:	.word	0x4007c000
     ff4:	.word	0x40049004

00000ff8 <checkDutyCycle(ACQ_Parameters_s*, short)>:
  #define ShortSleepDuration 60   // i.e. wake up every 'ShortSleepDuration' seconds
#endif
//
// flag can be 0 file to be open // time to shutdown if required
int32_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
     ff8:	push	{r3, r4, r5, r6, r7, lr}
     ffa:	mov	r6, r0
     ffc:	mov	r5, r1
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
     ffe:	bl	2570 <now()>
    1002:	mov	r4, r0
  uint16_t to = hour();
    1004:	bl	2610 <hour()>
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
    1008:	ldrh	r7, [r6, #12]
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
    100a:	ldrh.w	lr, [r6, #24]
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
    100e:	ldrh	r3, [r6, #16]
  uint16_t T3 = acqParameters->T3;
    1010:	ldrh	r1, [r6, #20]
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    1012:	cmp	r7, lr
int32_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
  uint16_t to = hour();
    1014:	uxth	r0, r0
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    1016:	bls.n	1034 <checkDutyCycle(ACQ_Parameters_s*, short)+0x3c>
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
    1018:	cmp	r0, r1
    101a:	bcc.n	1092 <checkDutyCycle(ACQ_Parameters_s*, short)+0x9a>
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
      
    if(flag>=0)
    101c:	cmp	r5, #0
    101e:	blt.n	1030 <checkDutyCycle(ACQ_Parameters_s*, short)+0x38>
    { 
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
    1020:	beq.n	10a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0xb0>
    1022:	ldr	r5, [pc, #372]	; (1198 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a0>)
    1024:	ldrh	r2, [r6, #4]
    1026:	ldr	r3, [r5, #0]
    1028:	add	r3, r2
    102a:	cmp	r4, r3
    102c:	bcs.w	115c <checkDutyCycle(ACQ_Parameters_s*, short)+0x164>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    1030:	movs	r0, #0
    1032:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));
    1034:	cmp	r0, r7
    1036:	bcc.n	103c <checkDutyCycle(ACQ_Parameters_s*, short)+0x44>
    1038:	cmp	r0, r3
    103a:	bcc.n	101c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    103c:	cmp	r0, r1
    103e:	bcs.n	10c2 <checkDutyCycle(ACQ_Parameters_s*, short)+0xca>
    }
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    1040:	ldr	r2, [pc, #344]	; (119c <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a4>)
    1042:	ldr	r5, [pc, #348]	; (11a0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a8>)
    1044:	umull	r6, r2, r2, r4
    1048:	lsrs	r2, r2, #16
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    104a:	cmp	r0, r3
    }
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    104c:	mls	r2, r5, r2, r4
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    1050:	bcc.n	1056 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5e>
    1052:	cmp	r0, r1
    1054:	bcc.n	10e0 <checkDutyCycle(ACQ_Parameters_s*, short)+0xe8>
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    1056:	movs	r4, #0
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    1058:	cmp	r0, lr
    105a:	bcc.n	1060 <checkDutyCycle(ACQ_Parameters_s*, short)+0x68>
    105c:	cmp	r7, lr
    105e:	bcc.n	10d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0xd8>
    {  nsec = (T1+24) * 3600 - tto;
    }
    //
    if(to<T1)                                            //eg: to=2:  T1=4; T2=9; T3=16; T4=20
    1060:	cmp	r0, r7
    1062:	bcs.n	106e <checkDutyCycle(ACQ_Parameters_s*, short)+0x76>
    { nsec = T1 * 3600 - tto;
    1064:	mov.w	r0, #3600	; 0xe10
    1068:	mul.w	r0, r0, r7
    106c:	subs	r4, r0, r2

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    106e:	movs	r3, #0
    1070:	movs	r2, #10
    1072:	mov	r1, r4
    1074:	ldr	r0, [pc, #300]	; (11a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    1076:	bl	a5a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    107a:	ldr	r0, [pc, #296]	; (11a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    107c:	bl	a558 <Print::println()>
    1080:	movs	r1, #15
    1082:	ldr	r0, [pc, #292]	; (11a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b0>)
    1084:	bl	8a7c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1088:	ldr	r0, [pc, #280]	; (11a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    108a:	bl	a558 <Print::println()>
    
#if DO_DEBUG>0
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
    108e:	mov	r0, r4
    1090:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
    1092:	cmp	r0, lr
    1094:	bcc.n	101c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    1096:	cmp	r0, r7
    1098:	bcc.n	1040 <checkDutyCycle(ACQ_Parameters_s*, short)+0x48>
    109a:	cmp	r0, r3
    109c:	ite	cs
    109e:	movcs	r2, #0
    10a0:	movcc	r2, #1
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    10a2:	cmp	r2, #0
    10a4:	beq.n	1040 <checkDutyCycle(ACQ_Parameters_s*, short)+0x48>
    10a6:	b.n	101c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
        return -1; // flag to close acquisition
      }
      
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
    10a8:	ldr	r3, [pc, #256]	; (11ac <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b4>)
    10aa:	ldrh	r2, [r3, #0]
    10ac:	cbz	r2, 10f0 <checkDutyCycle(ACQ_Parameters_s*, short)+0xf8>
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    10ae:	ldrh	r3, [r6, #0]
    10b0:	ldrh	r0, [r6, #8]
    10b2:	cmp	r3, r0
    10b4:	bcs.n	10be <checkDutyCycle(ACQ_Parameters_s*, short)+0xc6>
  if (doRecording) // we can record
  {
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
    10b6:	ldr	r2, [r6, #28]
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    10b8:	add	r3, r2
    10ba:	cmp	r4, r3
    10bc:	bcs.n	10fe <checkDutyCycle(ACQ_Parameters_s*, short)+0x106>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    10be:	mov	r0, r5
}
    10c0:	pop	{r3, r4, r5, r6, r7, pc}
    10c2:	cmp	r0, lr
    10c4:	ite	cs
    10c6:	movcs	r2, #0
    10c8:	movcc	r2, #1
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    10ca:	cmp	r2, #0
    10cc:	beq.n	1040 <checkDutyCycle(ACQ_Parameters_s*, short)+0x48>
    10ce:	b.n	101c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    {  nsec = (T1+24) * 3600 - tto;
    10d0:	add.w	r4, r7, #24
    10d4:	mov.w	r3, #3600	; 0xe10
    10d8:	mul.w	r3, r3, r4
    10dc:	subs	r4, r3, r2
    10de:	b.n	1060 <checkDutyCycle(ACQ_Parameters_s*, short)+0x68>
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
    10e0:	mov.w	r3, #3600	; 0xe10
    10e4:	mul.w	r3, r3, r1
    10e8:	cmp	r2, r3
    10ea:	bcs.n	1056 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5e>
      nsec = T3 * 3600 - tto;
    10ec:	subs	r4, r3, r2
    10ee:	b.n	1058 <checkDutyCycle(ACQ_Parameters_s*, short)+0x60>
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    10f0:	ldr	r1, [pc, #164]	; (1198 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a0>)
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
    10f2:	str	r4, [r6, #28]
            recording=1; 
    10f4:	movs	r2, #1
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    10f6:	mov	r0, r5
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    10f8:	str	r4, [r1, #0]
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
    10fa:	strh	r2, [r3, #0]
    10fc:	pop	{r3, r4, r5, r6, r7, pc}
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
        { // need to stop
          nsec = (t_rec + t_rep - tt);
    10fe:	add	r0, r2
    1100:	subs	r4, r0, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1102:	mov	r3, r5
    1104:	movs	r2, #10
    1106:	mov	r1, r4
    1108:	ldr	r0, [pc, #152]	; (11a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    110a:	ldr	r6, [pc, #164]	; (11b0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b8>)
    110c:	bl	a5a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1110:	ldr	r0, [pc, #144]	; (11a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    1112:	bl	a558 <Print::println()>
    1116:	movs	r1, #15
    1118:	ldr	r0, [pc, #152]	; (11b4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1bc>)
    111a:	bl	8a7c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    111e:	ldr	r0, [pc, #132]	; (11a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    1120:	bl	a558 <Print::println()>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1124:	mov	r3, r5
    1126:	mov	r1, r4
    1128:	movs	r2, #10
    112a:	mov	r0, r6
    112c:	bl	a5a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1130:	mov	r0, r6
    1132:	bl	a558 <Print::println()>
    1136:	ldr	r0, [r6, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1138:	cbz	r0, 114c <checkDutyCycle(ACQ_Parameters_s*, short)+0x154>
    113a:	movs	r2, #15
    113c:	ldr	r1, [pc, #116]	; (11b4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1bc>)
    113e:	bl	5c84 <FatFile::write(void const*, unsigned int)>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1142:	ldr	r0, [pc, #108]	; (11b0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b8>)
    1144:	bl	a558 <Print::println()>
          #endif
          #if DO_DEBUG>1
            logFile.println(nsec); 
            logFile.println("Hibernate now 1");
          #endif
          return nsec; 
    1148:	mov	r0, r4
    114a:	pop	{r3, r4, r5, r6, r7, pc}
    114c:	ldr	r0, [r6, #76]	; 0x4c
    114e:	cmp	r0, #0
    1150:	beq.n	1142 <checkDutyCycle(ACQ_Parameters_s*, short)+0x14a>
    1152:	movs	r2, #15
    1154:	ldr	r1, [pc, #92]	; (11b4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1bc>)
    1156:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
    115a:	b.n	1142 <checkDutyCycle(ACQ_Parameters_s*, short)+0x14a>
    115c:	movs	r1, #17
    115e:	ldr	r0, [pc, #88]	; (11b8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1c0>)
    1160:	bl	8a7c <usb_serial_write>
    1164:	ldr	r0, [pc, #60]	; (11a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    1166:	bl	a558 <Print::println()>
    116a:	ldr	r3, [pc, #68]	; (11b0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b8>)
    116c:	ldr	r0, [r3, #72]	; 0x48
    116e:	cbz	r0, 1186 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18e>
    1170:	movs	r2, #17
    1172:	ldr	r1, [pc, #68]	; (11b8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1c0>)
    1174:	bl	5c84 <FatFile::write(void const*, unsigned int)>
    1178:	ldr	r0, [pc, #52]	; (11b0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b8>)
    117a:	bl	a558 <Print::println()>
            Serial.println("close acquisition");
        #endif
        #if DO_DEBUG>1
            logFile.println("close acquisition");
        #endif
        t_start = tt; // update start time for next file
    117e:	str	r4, [r5, #0]
        return -1; // flag to close acquisition
    1180:	mov.w	r0, #4294967295
    1184:	pop	{r3, r4, r5, r6, r7, pc}
    1186:	ldr	r0, [r3, #76]	; 0x4c
    1188:	cmp	r0, #0
    118a:	beq.n	1178 <checkDutyCycle(ACQ_Parameters_s*, short)+0x180>
    118c:	movs	r2, #17
    118e:	ldr	r1, [pc, #40]	; (11b8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1c0>)
    1190:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
    1194:	b.n	1178 <checkDutyCycle(ACQ_Parameters_s*, short)+0x180>
    1196:	nop
    1198:	.word	0x200192a4
    119c:	.word	0xc22e4507
    11a0:	.word	0x00015180
    11a4:	.word	0x200138e4
    11a8:	.word	0x00012e18
    11ac:	.word	0x20019464
    11b0:	.word	0x200193fc
    11b4:	.word	0x00012e08
    11b8:	.word	0x00012df4

000011bc <setRTCTime(int, int, int, int, int, int)>:
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
    return text;
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
    11bc:	push	{r4, r5, r6, lr}
    11be:	sub	sp, #8
    11c0:	mov	r6, r0
    11c2:	ldr	r4, [sp, #28]
    11c4:	ldr	r5, [sp, #24]
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
    11c6:	strb.w	r3, [sp, #4]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    11ca:	add	r0, sp, #8
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
    11cc:	cmp	r4, #99	; 0x63
      yr = yr - 1970;
    11ce:	ite	gt
    11d0:	subwgt	r4, r4, #1970	; 0x7b2
  else
      yr += 30;  
    11d4:	addle	r4, #30
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    11d6:	strb.w	r2, [r0, #-8]!
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
    11da:	strb.w	r1, [sp, #1]
      yr = yr - 1970;
  else
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
    11de:	strb.w	r4, [sp, #6]
  tm.Month = mnth;
    11e2:	strb.w	r5, [sp, #5]
  tm.Day = dy;
  tm.Hour = hr;
    11e6:	strb.w	r6, [sp, #2]
  tm.Minute = min;
  tm.Second = sec;

  uint32_t tt = makeTime(tm);
    11ea:	bl	2474 <makeTime(tmElements_t const&)>
    11ee:	mov	r4, r0
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
	static void set(unsigned long t) __attribute__((always_inline)) { rtc_set(t); }
    11f0:	bl	9244 <rtc_set>
  Teensy3Clock.set(tt); // for RTC
  setTime(tt); // local
    11f4:	mov	r0, r4
    11f6:	bl	26d4 <setTime(long)>
}
    11fa:	add	sp, #8
    11fc:	pop	{r4, r5, r6, pc}
    11fe:	nop

00001200 <doMenu()>:
      }
    }  
}

int16_t doMenu(void)
{
    1200:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1204:	ldr	r5, [pc, #700]	; (14c4 <doMenu()+0x2c4>)
      }
    }  
}

int16_t doMenu(void)
{
    1206:	sub	sp, #12
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1208:	bl	8a28 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!Serial.available());
    120c:	cmp	r0, #0
    120e:	beq.n	1208 <doMenu()+0x8>
        virtual int read() { return usb_serial_getchar(); }
    1210:	bl	89b0 <usb_serial_getchar>
    1214:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    1216:	mov	r1, r4
    1218:	ldr	r0, [pc, #684]	; (14c8 <doMenu()+0x2c8>)
    121a:	bl	c5ec <strchr>
    121e:	cmp	r0, #0
    1220:	beq.n	1208 <doMenu()+0x8>
    { switch (c)
    1222:	cmp	r4, #63	; 0x3f
    1224:	beq.n	1246 <doMenu()+0x46>
    1226:	ble.w	137c <doMenu()+0x17c>
    122a:	cmp	r4, #97	; 0x61
    122c:	beq.w	14d4 <doMenu()+0x2d4>
    1230:	cmp	r4, #120	; 0x78
    1232:	bne.n	1208 <doMenu()+0x8>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = Serial.parseInt(); break;
    1234:	ldr	r0, [pc, #660]	; (14cc <doMenu()+0x2cc>)
    1236:	bl	aa44 <Stream::parseInt()>
    123a:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    123c:	cmp	r0, #0
    123e:	beq.n	1208 <doMenu()+0x8>
  return ret;
}
    1240:	add	sp, #12
    1242:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1246:	bl	8a28 <usb_serial_available>
  Serial.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!Serial.available());
    124a:	cmp	r0, #0
    124c:	beq.n	1246 <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    124e:	bl	89b0 <usb_serial_getchar>
    1252:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    1254:	mov	r1, r4
    1256:	ldr	r0, [pc, #632]	; (14d0 <doMenu()+0x2d0>)
    1258:	bl	c5ec <strchr>
    125c:	cmp	r0, #0
    125e:	beq.n	1208 <doMenu()+0x8>
    { switch (c)
    1260:	subs	r4, #49	; 0x31
    1262:	cmp	r4, #67	; 0x43
    1264:	bhi.n	1208 <doMenu()+0x8>
    1266:	add	r3, pc, #4	; (adr r3, 126c <doMenu()+0x6c>)
    1268:	ldr.w	pc, [r3, r4, lsl #2]
    126c:	.word	0x00001639
    1270:	.word	0x00001645
    1274:	.word	0x00001651
    1278:	.word	0x0000165d
    127c:	.word	0x00001209
    1280:	.word	0x00001209
    1284:	.word	0x00001209
    1288:	.word	0x00001209
    128c:	.word	0x00001209
    1290:	.word	0x00001209
    1294:	.word	0x00001209
    1298:	.word	0x00001209
    129c:	.word	0x00001209
    12a0:	.word	0x00001209
    12a4:	.word	0x00001209
    12a8:	.word	0x00001209
    12ac:	.word	0x00001209
    12b0:	.word	0x00001209
    12b4:	.word	0x00001209
    12b8:	.word	0x00001209
    12bc:	.word	0x00001209
    12c0:	.word	0x00001209
    12c4:	.word	0x00001209
    12c8:	.word	0x00001209
    12cc:	.word	0x00001209
    12d0:	.word	0x00001209
    12d4:	.word	0x00001209
    12d8:	.word	0x00001209
    12dc:	.word	0x00001209
    12e0:	.word	0x00001209
    12e4:	.word	0x00001209
    12e8:	.word	0x00001209
    12ec:	.word	0x00001209
    12f0:	.word	0x00001209
    12f4:	.word	0x00001209
    12f8:	.word	0x00001209
    12fc:	.word	0x00001209
    1300:	.word	0x00001209
    1304:	.word	0x00001209
    1308:	.word	0x00001209
    130c:	.word	0x00001209
    1310:	.word	0x00001209
    1314:	.word	0x00001209
    1318:	.word	0x00001209
    131c:	.word	0x00001209
    1320:	.word	0x00001209
    1324:	.word	0x00001209
    1328:	.word	0x00001209
    132c:	.word	0x00001669
    1330:	.word	0x00001209
    1334:	.word	0x00001209
    1338:	.word	0x00001675
    133c:	.word	0x00001209
    1340:	.word	0x00001209
    1344:	.word	0x00001209
    1348:	.word	0x00001209
    134c:	.word	0x00001209
    1350:	.word	0x00001209
    1354:	.word	0x00001209
    1358:	.word	0x00001209
    135c:	.word	0x00001209
    1360:	.word	0x00001685
    1364:	.word	0x00001691
    1368:	.word	0x00001209
    136c:	.word	0x00001209
    1370:	.word	0x0000169d
    1374:	.word	0x00001209
    1378:	.word	0x000016a9
  {
    while(!Serial.available());
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    137c:	cmp	r4, #33	; 0x21
    137e:	bne.w	1208 <doMenu()+0x8>
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    1382:	add.w	r6, r5, #12
    1386:	ldmia.w	r6, {r6, r7, r8}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    138a:	bl	8a28 <usb_serial_available>
    //int T4=acqParameters.T4; not used
    //
    while(!Serial.available());
    138e:	cmp	r0, #0
    1390:	beq.n	138a <doMenu()+0x18a>
        virtual int read() { return usb_serial_getchar(); }
    1392:	bl	89b0 <usb_serial_getchar>
    1396:	uxtb	r4, r0
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    1398:	mov	r1, r4
    139a:	ldr	r0, [pc, #308]	; (14d0 <doMenu()+0x2d0>)
    139c:	bl	c5ec <strchr>
    13a0:	cmp	r0, #0
    13a2:	beq.w	1208 <doMenu()+0x8>
    { switch (c)
    13a6:	subs	r4, #49	; 0x31
    13a8:	cmp	r4, #67	; 0x43
    13aa:	bhi.w	1208 <doMenu()+0x8>
    13ae:	add	r3, pc, #4	; (adr r3, 13b4 <doMenu()+0x1b4>)
    13b0:	ldr.w	pc, [r3, r4, lsl #2]
    13b4:	.word	0x000016b9
    13b8:	.word	0x000016d1
    13bc:	.word	0x000016f1
    13c0:	.word	0x00001707
    13c4:	.word	0x00001209
    13c8:	.word	0x00001209
    13cc:	.word	0x00001209
    13d0:	.word	0x00001209
    13d4:	.word	0x00001209
    13d8:	.word	0x00001209
    13dc:	.word	0x00001209
    13e0:	.word	0x00001209
    13e4:	.word	0x00001209
    13e8:	.word	0x00001209
    13ec:	.word	0x00001209
    13f0:	.word	0x00001209
    13f4:	.word	0x00001209
    13f8:	.word	0x00001209
    13fc:	.word	0x00001209
    1400:	.word	0x00001209
    1404:	.word	0x00001209
    1408:	.word	0x00001209
    140c:	.word	0x00001209
    1410:	.word	0x00001209
    1414:	.word	0x00001209
    1418:	.word	0x00001209
    141c:	.word	0x00001209
    1420:	.word	0x00001209
    1424:	.word	0x00001209
    1428:	.word	0x00001209
    142c:	.word	0x00001209
    1430:	.word	0x00001209
    1434:	.word	0x00001209
    1438:	.word	0x00001209
    143c:	.word	0x00001209
    1440:	.word	0x00001209
    1444:	.word	0x00001209
    1448:	.word	0x00001209
    144c:	.word	0x00001209
    1450:	.word	0x00001209
    1454:	.word	0x00001209
    1458:	.word	0x00001209
    145c:	.word	0x00001209
    1460:	.word	0x00001209
    1464:	.word	0x00001209
    1468:	.word	0x00001209
    146c:	.word	0x00001209
    1470:	.word	0x00001209
    1474:	.word	0x00001725
    1478:	.word	0x00001209
    147c:	.word	0x00001209
    1480:	.word	0x00001741
    1484:	.word	0x00001209
    1488:	.word	0x00001209
    148c:	.word	0x00001209
    1490:	.word	0x00001209
    1494:	.word	0x00001209
    1498:	.word	0x00001209
    149c:	.word	0x00001209
    14a0:	.word	0x00001209
    14a4:	.word	0x00001209
    14a8:	.word	0x0000179f
    14ac:	.word	0x00001815
    14b0:	.word	0x00001209
    14b4:	.word	0x00001209
    14b8:	.word	0x0000182f
    14bc:	.word	0x00001209
    14c0:	.word	0x000015df
    14c4:	.word	0x20013764
    14c8:	.word	0x00012e28
    14cc:	.word	0x200138e4
    14d0:	.word	0x00012e30
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    14d4:	ldr	r3, [r5, #0]
    14d6:	ldr	r1, [pc, #736]	; (17b8 <doMenu()+0x5b8>)
    14d8:	ldr	r0, [pc, #736]	; (17bc <doMenu()+0x5bc>)
    14da:	movs	r2, #111	; 0x6f
    14dc:	bl	a588 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d acq_time\n\r",    'a',acqParameters.ad);
    14e0:	mov	r2, r4
    14e2:	ldr	r3, [r5, #4]
    14e4:	ldr	r1, [pc, #728]	; (17c0 <doMenu()+0x5c0>)
    14e6:	ldr	r0, [pc, #724]	; (17bc <doMenu()+0x5bc>)
    14e8:	bl	a588 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d rep_rate\n\r",    'r',acqParameters.ar);
    14ec:	ldr	r3, [r5, #8]
    14ee:	ldr	r1, [pc, #724]	; (17c4 <doMenu()+0x5c4>)
    14f0:	ldr	r0, [pc, #712]	; (17bc <doMenu()+0x5bc>)
    14f2:	movs	r2, #114	; 0x72
    14f4:	bl	a588 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d first_hour\n\r",  '1',acqParameters.T1);
    14f8:	ldr	r3, [r5, #12]
    14fa:	ldr	r1, [pc, #716]	; (17c8 <doMenu()+0x5c8>)
    14fc:	ldr	r0, [pc, #700]	; (17bc <doMenu()+0x5bc>)
    14fe:	movs	r2, #49	; 0x31
    1500:	bl	a588 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d second_hour\n\r", '2',acqParameters.T2);
    1504:	ldr	r3, [r5, #16]
    1506:	ldr	r1, [pc, #708]	; (17cc <doMenu()+0x5cc>)
    1508:	ldr	r0, [pc, #688]	; (17bc <doMenu()+0x5bc>)
    150a:	movs	r2, #50	; 0x32
    150c:	bl	a588 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d third_hour\n\r",  '3',acqParameters.T3);
    1510:	ldr	r3, [r5, #20]
    1512:	ldr	r1, [pc, #700]	; (17d0 <doMenu()+0x5d0>)
    1514:	ldr	r0, [pc, #676]	; (17bc <doMenu()+0x5bc>)
    1516:	movs	r2, #51	; 0x33
    1518:	bl	a588 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d last_hour\n\r",   '4',acqParameters.T4);
    151c:	ldr	r3, [r5, #24]
    151e:	ldr	r1, [pc, #692]	; (17d4 <doMenu()+0x5d4>)
    1520:	ldr	r0, [pc, #664]	; (17bc <doMenu()+0x5bc>)
    1522:	movs	r2, #52	; 0x34
    1524:	bl	a588 <Print::printf(char const*, ...)>
  Serial.println();
    1528:	ldr	r0, [pc, #656]	; (17bc <doMenu()+0x5bc>)
    152a:	bl	a558 <Print::println()>
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
    152e:	ldr	r3, [pc, #680]	; (17d8 <doMenu()+0x5d8>)
    1530:	ldr	r1, [pc, #680]	; (17dc <doMenu()+0x5dc>)
    1532:	ldr	r0, [pc, #648]	; (17bc <doMenu()+0x5bc>)
    1534:	movs	r2, #110	; 0x6e
    1536:	bl	a588 <Print::printf(char const*, ...)>
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
    153a:	bl	5f8 <getDate(char*) [clone .constprop.35]>
    153e:	movs	r2, #100	; 0x64
    1540:	mov	r3, r0
    1542:	ldr	r1, [pc, #668]	; (17e0 <doMenu()+0x5e0>)
    1544:	ldr	r0, [pc, #628]	; (17bc <doMenu()+0x5bc>)
    1546:	bl	a588 <Print::printf(char const*, ...)>
  Serial.printf("%c %s time\n\r",         't',getTime(text));
    154a:	bl	5c4 <getTime(char*) [clone .constprop.34]>
    154e:	movs	r2, #116	; 0x74
    1550:	mov	r3, r0
    1552:	ldr	r1, [pc, #656]	; (17e4 <doMenu()+0x5e4>)
    1554:	ldr	r0, [pc, #612]	; (17bc <doMenu()+0x5bc>)
    1556:	bl	a588 <Print::printf(char const*, ...)>
  Serial.println();
    155a:	ldr	r0, [pc, #608]	; (17bc <doMenu()+0x5bc>)
    155c:	bl	a558 <Print::println()>
  Serial.printf("%c %5d inhibit window\r\n",        'i',snipParameters.inhib);
  Serial.printf("%c %5d noise repetition rate\r\n", 'k',snipParameters.nrep);
  Serial.printf("%c %5d pre trigger delay\r\n",     'p',snipParameters.ndel);
  #endif
  //
  Serial.println();
    1560:	ldr	r0, [pc, #600]	; (17bc <doMenu()+0x5bc>)
    1562:	bl	a558 <Print::println()>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1566:	movs	r1, #23
    1568:	ldr	r0, [pc, #636]	; (17e8 <doMenu()+0x5e8>)
    156a:	bl	8a7c <usb_serial_write>
    156e:	ldr	r0, [pc, #588]	; (17bc <doMenu()+0x5bc>)
    1570:	bl	a558 <Print::println()>
    1574:	movs	r1, #64	; 0x40
    1576:	ldr	r0, [pc, #628]	; (17ec <doMenu()+0x5ec>)
    1578:	bl	8a7c <usb_serial_write>
    157c:	ldr	r0, [pc, #572]	; (17bc <doMenu()+0x5bc>)
    157e:	bl	a558 <Print::println()>
    1582:	movs	r1, #32
    1584:	ldr	r0, [pc, #616]	; (17f0 <doMenu()+0x5f0>)
    1586:	bl	8a7c <usb_serial_write>
    158a:	ldr	r0, [pc, #560]	; (17bc <doMenu()+0x5bc>)
    158c:	bl	a558 <Print::println()>
    1590:	movs	r1, #88	; 0x58
    1592:	ldr	r0, [pc, #608]	; (17f4 <doMenu()+0x5f4>)
    1594:	bl	8a7c <usb_serial_write>
    1598:	ldr	r0, [pc, #544]	; (17bc <doMenu()+0x5bc>)
    159a:	bl	a558 <Print::println()>
    159e:	movs	r1, #38	; 0x26
    15a0:	ldr	r0, [pc, #596]	; (17f8 <doMenu()+0x5f8>)
    15a2:	bl	8a7c <usb_serial_write>
    15a6:	ldr	r0, [pc, #532]	; (17bc <doMenu()+0x5bc>)
    15a8:	bl	a558 <Print::println()>
    15ac:	movs	r1, #69	; 0x45
    15ae:	ldr	r0, [pc, #588]	; (17fc <doMenu()+0x5fc>)
    15b0:	bl	8a7c <usb_serial_write>
    15b4:	ldr	r0, [pc, #516]	; (17bc <doMenu()+0x5bc>)
    15b6:	bl	a558 <Print::println()>
    15ba:	movs	r1, #50	; 0x32
    15bc:	ldr	r0, [pc, #576]	; (1800 <doMenu()+0x600>)
    15be:	bl	8a7c <usb_serial_write>
    15c2:	ldr	r0, [pc, #504]	; (17bc <doMenu()+0x5bc>)
    15c4:	bl	a558 <Print::println()>
    15c8:	movs	r1, #43	; 0x2b
    15ca:	ldr	r0, [pc, #568]	; (1804 <doMenu()+0x604>)
    15cc:	bl	8a7c <usb_serial_write>
    15d0:	ldr	r0, [pc, #488]	; (17bc <doMenu()+0x5bc>)
    15d2:	bl	a558 <Print::println()>
  Serial.println("exter '!cval' to read value c=(0,a,r,1,2,3,4,n,d,t,c,h,w,s,m,i,k,p) and val is new value");
  Serial.println("  e.g.: !110 will set first hour to 10");
  Serial.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  Serial.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  Serial.println("        x-1 with exit and start immediately");
  Serial.println();
    15d6:	ldr	r0, [pc, #484]	; (17bc <doMenu()+0x5bc>)
    15d8:	bl	a558 <Print::println()>
    15dc:	b.n	1208 <doMenu()+0x8>
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
    15de:	ldr	r0, [pc, #476]	; (17bc <doMenu()+0x5bc>)
    15e0:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    15e4:	subs	r4, r0, #0
    15e6:	blt.w	18a4 <doMenu()+0x6a4>
    if(val>maxVal) val=maxVal;
    15ea:	cmp	r4, #23
    15ec:	it	ge
    15ee:	movge	r4, #23
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
    15f0:	ldr	r0, [pc, #456]	; (17bc <doMenu()+0x5bc>)
    15f2:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    15f6:	subs	r6, r0, #0
    15f8:	blt.w	189c <doMenu()+0x69c>
    if(val>maxVal) val=maxVal;
    15fc:	cmp	r6, #59	; 0x3b
    15fe:	it	ge
    1600:	movge	r6, #59	; 0x3b
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
    1602:	ldr	r0, [pc, #440]	; (17bc <doMenu()+0x5bc>)
    1604:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1608:	subs	r7, r0, #0
    160a:	blt.w	1898 <doMenu()+0x698>
    if(val>maxVal) val=maxVal;
    160e:	cmp	r7, #59	; 0x3b
    1610:	it	ge
    1612:	movge	r7, #59	; 0x3b
    setRTCTime(hour(),minute(),second(),day, month, year);
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    setRTCTime(hour,minutes,seconds,day(),month(),year());
    1614:	bl	2670 <day()>
    1618:	mov	r8, r0
    161a:	bl	2690 <month()>
    161e:	mov	r9, r0
    1620:	bl	26b0 <year()>
    1624:	str.w	r9, [sp]
    1628:	str	r0, [sp, #4]
    162a:	mov	r3, r8
    162c:	mov	r2, r7
    162e:	mov	r1, r6
    1630:	mov	r0, r4
    1632:	bl	11bc <setRTCTime(int, int, int, int, int, int)>
    1636:	b.n	1208 <doMenu()+0x8>
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
    1638:	ldr	r2, [r5, #12]
    163a:	ldr	r1, [pc, #460]	; (1808 <doMenu()+0x608>)
    163c:	ldr	r0, [pc, #380]	; (17bc <doMenu()+0x5bc>)
    163e:	bl	a588 <Print::printf(char const*, ...)>
    1642:	b.n	1208 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
    1644:	ldr	r2, [r5, #16]
    1646:	ldr	r1, [pc, #448]	; (1808 <doMenu()+0x608>)
    1648:	ldr	r0, [pc, #368]	; (17bc <doMenu()+0x5bc>)
    164a:	bl	a588 <Print::printf(char const*, ...)>
    164e:	b.n	1208 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
    1650:	ldr	r2, [r5, #20]
    1652:	ldr	r1, [pc, #436]	; (1808 <doMenu()+0x608>)
    1654:	ldr	r0, [pc, #356]	; (17bc <doMenu()+0x5bc>)
    1656:	bl	a588 <Print::printf(char const*, ...)>
    165a:	b.n	1208 <doMenu()+0x8>
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
    165c:	ldr	r2, [r5, #24]
    165e:	ldr	r1, [pc, #424]	; (1808 <doMenu()+0x608>)
    1660:	ldr	r0, [pc, #344]	; (17bc <doMenu()+0x5bc>)
    1662:	bl	a588 <Print::printf(char const*, ...)>
    1666:	b.n	1208 <doMenu()+0x8>
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
    1668:	ldr	r2, [r5, #4]
    166a:	ldr	r1, [pc, #412]	; (1808 <doMenu()+0x608>)
    166c:	ldr	r0, [pc, #332]	; (17bc <doMenu()+0x5bc>)
    166e:	bl	a588 <Print::printf(char const*, ...)>
    1672:	b.n	1208 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
    1674:	bl	5f8 <getDate(char*) [clone .constprop.35]>
    1678:	ldr	r1, [pc, #400]	; (180c <doMenu()+0x60c>)
    167a:	mov	r2, r0
    167c:	ldr	r0, [pc, #316]	; (17bc <doMenu()+0x5bc>)
    167e:	bl	a588 <Print::printf(char const*, ...)>
    1682:	b.n	1208 <doMenu()+0x8>
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
    1684:	ldr	r2, [pc, #336]	; (17d8 <doMenu()+0x5d8>)
    1686:	ldr	r1, [pc, #388]	; (180c <doMenu()+0x60c>)
    1688:	ldr	r0, [pc, #304]	; (17bc <doMenu()+0x5bc>)
    168a:	bl	a588 <Print::printf(char const*, ...)>
    168e:	b.n	1208 <doMenu()+0x8>
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
    1690:	ldr	r2, [r5, #0]
    1692:	ldr	r1, [pc, #372]	; (1808 <doMenu()+0x608>)
    1694:	ldr	r0, [pc, #292]	; (17bc <doMenu()+0x5bc>)
    1696:	bl	a588 <Print::printf(char const*, ...)>
    169a:	b.n	1208 <doMenu()+0x8>
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
    169c:	ldr	r2, [r5, #8]
    169e:	ldr	r1, [pc, #360]	; (1808 <doMenu()+0x608>)
    16a0:	ldr	r0, [pc, #280]	; (17bc <doMenu()+0x5bc>)
    16a2:	bl	a588 <Print::printf(char const*, ...)>
    16a6:	b.n	1208 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
    16a8:	bl	5c4 <getTime(char*) [clone .constprop.34]>
    16ac:	ldr	r1, [pc, #348]	; (180c <doMenu()+0x60c>)
    16ae:	mov	r2, r0
    16b0:	ldr	r0, [pc, #264]	; (17bc <doMenu()+0x5bc>)
    16b2:	bl	a588 <Print::printf(char const*, ...)>
    16b6:	b.n	1208 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    16b8:	ldr	r0, [pc, #256]	; (17bc <doMenu()+0x5bc>)
    16ba:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    16be:	cmp	r0, #0
    16c0:	blt.w	18a0 <doMenu()+0x6a0>
    16c4:	cmp	r0, #24
    16c6:	mov	r3, r0
    16c8:	it	ge
    16ca:	movge	r3, #24
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    16cc:	str	r3, [r5, #12]
    16ce:	b.n	1208 <doMenu()+0x8>
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    16d0:	ldr	r0, [pc, #232]	; (17bc <doMenu()+0x5bc>)
    16d2:	bl	aa44 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    16d6:	cmp	r6, #23
    16d8:	bgt.w	1858 <doMenu()+0x658>
  {
    if(val<minVal) val=minVal;
    16dc:	cmp	r6, r0
    16de:	bgt.n	16ec <doMenu()+0x4ec>
    if(val>maxVal) val=maxVal;
    16e0:	cmp	r0, #24
    16e2:	it	gt
    16e4:	movgt	r0, #24
    16e6:	bgt.w	185e <doMenu()+0x65e>
    16ea:	mov	r6, r0
    16ec:	mov	r0, r6
    16ee:	b.n	185e <doMenu()+0x65e>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    16f0:	ldr	r0, [pc, #200]	; (17bc <doMenu()+0x5bc>)
    16f2:	bl	aa44 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    16f6:	cmp	r7, #23
    16f8:	bgt.w	184e <doMenu()+0x64e>
  {
    if(val<minVal) val=minVal;
    16fc:	cmp	r7, r0
    16fe:	ble.w	188c <doMenu()+0x68c>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    1702:	str	r7, [r5, #20]
    1704:	b.n	1208 <doMenu()+0x8>
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1706:	ldr	r0, [pc, #180]	; (17bc <doMenu()+0x5bc>)
    1708:	bl	aa44 <Stream::parseInt()>
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    170c:	cmp	r6, r8
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    170e:	mov	r4, r8
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1710:	ble.w	1862 <doMenu()+0x662>
  {
    if(val<minVal) val=minVal;
    1714:	cmp	r8, r0
    1716:	bgt.n	1720 <doMenu()+0x520>
    if(val>maxVal) val=maxVal;
    1718:	cmp	r6, r0
    171a:	blt.w	1888 <doMenu()+0x688>
    171e:	mov	r4, r0
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    1720:	mov	r6, r4
    1722:	b.n	1888 <doMenu()+0x688>
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1724:	ldr	r0, [pc, #148]	; (17bc <doMenu()+0x5bc>)
    1726:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    172a:	cmp	r0, #0
    172c:	blt.w	18b8 <doMenu()+0x6b8>
    1730:	cmp.w	r0, #131072	; 0x20000
    1734:	mov	r3, r0
    1736:	it	ge
    1738:	movge.w	r3, #131072	; 0x20000
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    173c:	str	r3, [r5, #4]
    173e:	b.n	1208 <doMenu()+0x8>
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    1740:	ldr	r0, [pc, #120]	; (17bc <doMenu()+0x5bc>)
    1742:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1746:	cmp.w	r0, #2000	; 0x7d0
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    174a:	mov	r4, r0
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    174c:	blt.n	1848 <doMenu()+0x648>
    if(val>maxVal) val=maxVal;
    174e:	movw	r3, #3000	; 0xbb8
    1752:	cmp	r0, r3
    1754:	it	ge
    1756:	movge	r4, r3
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
    1758:	ldr	r0, [pc, #96]	; (17bc <doMenu()+0x5bc>)
    175a:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    175e:	subs	r7, r0, #0
    1760:	ble.w	18b4 <doMenu()+0x6b4>
    if(val>maxVal) val=maxVal;
    1764:	cmp	r7, #12
    1766:	it	ge
    1768:	movge	r7, #12
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
    176a:	ldr	r0, [pc, #80]	; (17bc <doMenu()+0x5bc>)
    176c:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1770:	subs	r6, r0, #0
    1772:	ble.w	18b0 <doMenu()+0x6b0>
    if(val>maxVal) val=maxVal;
    1776:	cmp	r6, #31
    1778:	it	ge
    177a:	movge	r6, #31
  setTime(tt); // local
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    setRTCTime(hour(),minute(),second(),day, month, year);
    177c:	bl	2610 <hour()>
    1780:	mov	r8, r0
    1782:	bl	2630 <minute()>
    1786:	mov	r9, r0
    1788:	bl	2650 <second()>
    178c:	mov	r1, r9
    178e:	mov	r2, r0
    1790:	str	r4, [sp, #4]
    1792:	mov	r0, r8
    1794:	str	r7, [sp, #0]
    1796:	mov	r3, r6
    1798:	bl	11bc <setRTCTime(int, int, int, int, int, int)>
    179c:	b.n	1208 <doMenu()+0x8>
    179e:	ldr	r4, [pc, #112]	; (1810 <doMenu()+0x610>)
    17a0:	adds	r6, r4, #4
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    17a2:	bl	89b0 <usb_serial_getchar>
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
    17a6:	strb.w	r0, [r4, #1]!
    17aa:	cmp	r4, r6
    17ac:	bne.n	17a2 <doMenu()+0x5a2>
                  acqParameters.name[4]=0; break;
    17ae:	movs	r3, #0
    17b0:	strb.w	r3, [r5, #36]	; 0x24
    17b4:	b.n	1208 <doMenu()+0x8>
    17b6:	nop
    17b8:	.word	0x00012e4c
    17bc:	.word	0x200138e4
    17c0:	.word	0x00012e60
    17c4:	.word	0x00012e74
    17c8:	.word	0x00012e88
    17cc:	.word	0x00012e9c
    17d0:	.word	0x00012eb4
    17d4:	.word	0x00012ec8
    17d8:	.word	0x20013784
    17dc:	.word	0x00012edc
    17e0:	.word	0x00012eec
    17e4:	.word	0x00012efc
    17e8:	.word	0x00012f0c
    17ec:	.word	0x00012f24
    17f0:	.word	0x00012f68
    17f4:	.word	0x00012f8c
    17f8:	.word	0x00012fe8
    17fc:	.word	0x00013010
    1800:	.word	0x00013058
    1804:	.word	0x0001308c
    1808:	.word	0x00012e44
    180c:	.word	0x00012dac
    1810:	.word	0x20013783
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1814:	ldr	r0, [pc, #168]	; (18c0 <doMenu()+0x6c0>)
    1816:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    181a:	cmp	r0, #0
    181c:	blt.n	18ac <doMenu()+0x6ac>
    181e:	cmp.w	r0, #131072	; 0x20000
    1822:	mov	r3, r0
    1824:	it	ge
    1826:	movge.w	r3, #131072	; 0x20000
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    182a:	str	r3, [r5, #0]
    182c:	b.n	1208 <doMenu()+0x8>
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    182e:	ldr	r0, [pc, #144]	; (18c0 <doMenu()+0x6c0>)
    1830:	bl	aa44 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1834:	cmp	r0, #0
    1836:	blt.n	18a8 <doMenu()+0x6a8>
    1838:	cmp.w	r0, #131072	; 0x20000
    183c:	mov	r3, r0
    183e:	it	ge
    1840:	movge.w	r3, #131072	; 0x20000
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1844:	str	r3, [r5, #8]
    1846:	b.n	1208 <doMenu()+0x8>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1848:	mov.w	r4, #2000	; 0x7d0
    184c:	b.n	1758 <doMenu()+0x558>
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if((val>maxVal) && (val<minVal)) val=maxVal;
    184e:	cmp	r0, #24
    1850:	it	ge
    1852:	movge	r0, #24
    1854:	mov	r7, r0
    1856:	b.n	1702 <doMenu()+0x502>
    1858:	cmp	r0, #24
    185a:	it	ge
    185c:	movge	r0, #24
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    185e:	str	r0, [r5, #16]
    1860:	b.n	1208 <doMenu()+0x8>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    1862:	cmp	r0, #0
    1864:	blt.n	18bc <doMenu()+0x6bc>
    if(val>modVal) val=modVal;
    1866:	cmp	r0, #24
    1868:	it	ge
    186a:	movge	r0, #24
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    186c:	cmp	r6, r0
    186e:	bge.n	1886 <doMenu()+0x686>
    1870:	cmp	r8, r0
    1872:	ble.n	1886 <doMenu()+0x686>
    { if(val>(minVal+maxVal)/2) val = minVal; else val=maxVal;
    1874:	add.w	r3, r6, r8
    1878:	add.w	r3, r3, r3, lsr #31
    187c:	cmp.w	r0, r3, asr #1
    1880:	it	gt
    1882:	movgt	r6, r8
    1884:	b.n	1888 <doMenu()+0x688>
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    1886:	mov	r6, r0
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1888:	str	r6, [r5, #24]
    188a:	b.n	1208 <doMenu()+0x8>
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
    188c:	cmp	r0, #24
    188e:	it	gt
    1890:	movgt	r7, #24
    1892:	bgt.w	1702 <doMenu()+0x502>
    1896:	b.n	1854 <doMenu()+0x654>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1898:	movs	r7, #0
    189a:	b.n	1614 <doMenu()+0x414>
    189c:	movs	r6, #0
    189e:	b.n	1602 <doMenu()+0x402>
    18a0:	movs	r3, #0
    18a2:	b.n	16cc <doMenu()+0x4cc>
    18a4:	movs	r4, #0
    18a6:	b.n	15f0 <doMenu()+0x3f0>
    18a8:	movs	r3, #0
    18aa:	b.n	1844 <doMenu()+0x644>
    18ac:	movs	r3, #0
    18ae:	b.n	182a <doMenu()+0x62a>
    18b0:	movs	r6, #1
    18b2:	b.n	177c <doMenu()+0x57c>
    18b4:	movs	r7, #1
    18b6:	b.n	176a <doMenu()+0x56a>
    18b8:	movs	r3, #0
    18ba:	b.n	173c <doMenu()+0x53c>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    18bc:	movs	r0, #0
    18be:	b.n	186c <doMenu()+0x66c>
    18c0:	.word	0x200138e4

000018c4 <setup>:
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
//int started=0;
extern "C" void setup() {
    18c4:	push	{r4, r5, r6, r7, lr}
  // put your setup code here, to run once:
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    18c6:	movs	r0, #3
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
//int started=0;
extern "C" void setup() {
    18c8:	sub	sp, #12
  // put your setup code here, to run once:
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    18ca:	movs	r1, #2
    18cc:	bl	9290 <pinMode>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);
    18d0:	ldr	r0, [pc, #316]	; (1a10 <setup+0x14c>)
    18d2:	ldr	r4, [pc, #320]	; (1a14 <setup+0x150>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18d4:	ldr	r5, [pc, #320]	; (1a18 <setup+0x154>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    18d6:	ldr	r7, [pc, #324]	; (1a1c <setup+0x158>)
    18d8:	ldr	r6, [pc, #324]	; (1a20 <setup+0x15c>)
    18da:	bl	2718 <setSyncProvider(long (*)())>
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18de:	ldrb	r3, [r4, #0]

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    18e0:	movs	r0, #3
    18e2:	cmp	r3, #0
    18e4:	beq.w	19fe <setup+0x13a>
    18e8:	ldrb	r3, [r5, #0]
    18ea:	lsls	r2, r3, #31
    18ec:	bpl.w	19fe <setup+0x13a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    18f0:	ldr	r3, [r7, #0]
    18f2:	ldr	r2, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18f4:	subs	r3, r3, r2
    18f6:	cmp	r3, #14
    18f8:	bls.w	19fe <setup+0x13a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    18fc:	movs	r1, #18
    18fe:	ldr	r0, [pc, #292]	; (1a24 <setup+0x160>)
    1900:	bl	8a7c <usb_serial_write>
    1904:	ldr	r0, [pc, #288]	; (1a28 <setup+0x164>)
    1906:	bl	a558 <Print::println()>
  // for 16bit resolution
  temperature = -0.0293 * analogRead(70) + 440.5;
*/

#define MAUDIO (MAX_Q+MDEL+50)
	AudioMemory (MAUDIO); // 600 blocks use about 200 kB (requires Teensy 3.6)
    190a:	movw	r1, #549	; 0x225
    190e:	ldr	r0, [pc, #284]	; (1a2c <setup+0x168>)
    1910:	bl	a634 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>

  //
  uSD.init();

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1914:	movs	r4, #8
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1916:	ldr	r0, [pc, #280]	; (1a30 <setup+0x16c>)
    1918:	bl	aac <c_uSD::init()>

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    191c:	ldr	r3, [pc, #276]	; (1a34 <setup+0x170>)
    191e:	str	r4, [sp, #0]
    1920:	mov	r2, r4
    1922:	ldr	r1, [pc, #276]	; (1a38 <setup+0x174>)
    1924:	ldr	r0, [pc, #264]	; (1a30 <setup+0x16c>)
    1926:	bl	d4c <c_uSD::loadConfig(unsigned long*, int, long*, int)>
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
    192a:	ldr	r3, [pc, #272]	; (1a3c <setup+0x178>)
    192c:	ldr	r3, [r3, #0]
    192e:	lsls	r3, r3, #19
    1930:	bmi.n	1954 <setup+0x90>
  }
*/
  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    1932:	bl	1200 <doMenu()>
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1936:	str	r4, [sp, #0]
  }
*/
  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    1938:	mov	r5, r0
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    193a:	mov	r2, r4
    193c:	ldr	r3, [pc, #244]	; (1a34 <setup+0x170>)
    193e:	ldr	r1, [pc, #248]	; (1a38 <setup+0x174>)
    1940:	ldr	r0, [pc, #236]	; (1a30 <setup+0x16c>)
    1942:	bl	c24 <c_uSD::storeConfig(unsigned long*, int, long*, int)>

    if(ret>0) 
    1946:	cmp	r5, #0
    1948:	ble.n	1954 <setup+0x90>
    setWakeupCallandSleep(ret*60);  // should shutdown now and wait for start
    194a:	rsb	r0, r5, r5, lsl #4
    194e:	lsls	r0, r0, #2
    1950:	bl	e60 <setWakeupCallandSleep(unsigned long)>
  }
  //
  #if MDEL<0
    // check if it is our time to record
    int32_t nsec;
    nsec=checkDutyCycle(&acqParameters, -1);
    1954:	mov.w	r1, #4294967295
    1958:	ldr	r0, [pc, #220]	; (1a38 <setup+0x174>)
    195a:	bl	ff8 <checkDutyCycle(ACQ_Parameters_s*, short)>
    if(nsec>0) 
    195e:	cmp	r0, #0
    1960:	ble.n	1966 <setup+0xa2>
    { 
      #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // will not return if we should not continue with acquisition 
    1962:	bl	e60 <setWakeupCallandSleep(unsigned long)>
  if(fsamp>fmax)         // assume that limit scales with n_avg
  { n_bits=12;
    n_avg=1;    
    hspd=1;
  }
  modifyADCS(n_bits,n_avg,diff,hspd);
    1966:	movs	r3, #0
    1968:	mov	r2, r3
    196a:	movs	r1, #4
    196c:	movs	r0, #16
    196e:	bl	7c4 <modifyADCS(short, unsigned short, unsigned short, unsigned short)>

  // sampling rate can be modified on the fly
  uint32_t PDB_period;
  PDB_period = F_BUS/fsamp -1;

  PDB0_MOD = PDB_period;
    1972:	ldr	r4, [pc, #204]	; (1a40 <setup+0x17c>)
  PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    1974:	ldr	r3, [pc, #204]	; (1a44 <setup+0x180>)
template <int mq>
void mRecordQueue<mq>::clear(void)
{
	uint16_t t;

	if (userblock) {
    1976:	ldr	r5, [pc, #208]	; (1a48 <setup+0x184>)
  state=0;
}

void c_uSD::setPrefix(char *prefix)
{
  strcpy(name,prefix);
    1978:	ldr	r1, [pc, #208]	; (1a4c <setup+0x188>)
    197a:	ldr	r0, [pc, #212]	; (1a50 <setup+0x18c>)
    197c:	movw	r2, #36771	; 0x8fa3

  // sampling rate can be modified on the fly
  uint32_t PDB_period;
  PDB_period = F_BUS/fsamp -1;

  PDB0_MOD = PDB_period;
    1980:	movw	r6, #999	; 0x3e7
    1984:	str	r6, [r4, #0]
  PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    1986:	str	r2, [r3, #0]
    1988:	bl	c6bc <strcpy>
    198c:	ldr.w	r0, [r5, #2032]	; 0x7f0
    1990:	cbz	r0, 199c <setup+0xd8>
		release(userblock);
    1992:	bl	a748 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1996:	movs	r3, #0
    1998:	str.w	r3, [r5, #2032]	; 0x7f0
	}
	t = tail;
    199c:	ldrh.w	r4, [r5, #2038]	; 0x7f6
	while (t != head) {
    19a0:	ldrh.w	r3, [r5, #2036]	; 0x7f4

	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
    19a4:	uxth	r4, r4
	while (t != head) {
    19a6:	uxth	r3, r3
    19a8:	cmp	r3, r4
    19aa:	beq.n	19ce <setup+0x10a>
		if (++t >= mq) t = 0;
    19ac:	adds	r4, #1
    19ae:	uxth	r4, r4
    19b0:	cmp.w	r4, #500	; 0x1f4
    19b4:	it	cs
    19b6:	movcs	r4, #0
    19b8:	mov	r3, r4
		release(queue[t]);
    19ba:	adds	r3, #8
    19bc:	ldr.w	r0, [r5, r3, lsl #2]
    19c0:	bl	a748 <AudioStream::release(audio_block_struct*)>
	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
    19c4:	ldrh.w	r3, [r5, #2036]	; 0x7f4
    19c8:	uxth	r3, r3
    19ca:	cmp	r3, r4
    19cc:	bne.n	19ac <setup+0xe8>
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    19ce:	movs	r3, #1
    19d0:	movs	r1, #12
	t = tail;
	while (t != head) {
		if (++t >= mq) t = 0;
		release(queue[t]);
	}
	tail = t;
    19d2:	strh.w	r4, [r5, #2038]	; 0x7f6
    19d6:	ldr	r0, [pc, #124]	; (1a54 <setup+0x190>)
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    19d8:	strh.w	r3, [r5, #2040]	; 0x7f8
    19dc:	bl	8a7c <usb_serial_write>
    19e0:	ldr	r0, [pc, #68]	; (1a28 <setup+0x164>)
    19e2:	bl	a558 <Print::println()>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    19e6:	ldr	r3, [pc, #112]	; (1a58 <setup+0x194>)
    19e8:	ldr	r1, [r3, #0]
    19ea:	cbz	r1, 1a0a <setup+0x146>
    19ec:	ldr	r2, [pc, #108]	; (1a5c <setup+0x198>)
    19ee:	ldr	r0, [pc, #112]	; (1a60 <setup+0x19c>)
    19f0:	movw	r3, #522	; 0x20a
  Serial.println("End of Setup");
//  started=0;  
  #if DO_DEBUG>1
    logFile.open("logFile.txt", O_CREAT | O_RDWR | O_APPEND);
  #endif
}
    19f4:	add	sp, #12
    19f6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    19fa:	b.w	6ce4 <FsBaseFile::open(FsVolume*, char const*, int)>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    19fe:	bl	9274 <digitalRead>
    1a02:	cmp	r0, #0
    1a04:	beq.w	18de <setup+0x1a>
    1a08:	b.n	18fc <setup+0x38>
  Serial.println("End of Setup");
//  started=0;  
  #if DO_DEBUG>1
    logFile.open("logFile.txt", O_CREAT | O_RDWR | O_APPEND);
  #endif
}
    1a0a:	add	sp, #12
    1a0c:	pop	{r4, r5, r6, r7, pc}
    1a0e:	nop
    1a10:	.word	0x00000565
    1a14:	.word	0x20019b68
    1a18:	.word	0x20019a7c
    1a1c:	.word	0x20019a84
    1a20:	.word	0x20019c68
    1a24:	.word	0x000130b8
    1a28:	.word	0x200138e4
    1a2c:	.word	0x1fff0200
    1a30:	.word	0x20014364
    1a34:	.word	0x20013740
    1a38:	.word	0x20013764
    1a3c:	.word	0x400ff010
    1a40:	.word	0x40036004
    1a44:	.word	0x40036000
    1a48:	.word	0x20014880
    1a4c:	.word	0x20013784
    1a50:	.word	0x2001486e
    1a54:	.word	0x000130cc
    1a58:	.word	0x20019a1c
    1a5c:	.word	0x000130dc
    1a60:	.word	0x2001940c

00001a64 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    1a64:	mov	r5, r0
    1a66:	ldr.w	r0, [r0, #1164]	; 0x48c
    1a6a:	push	{r3, lr}
    1a6c:	mov	r4, r1
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1a6e:	cbz	r0, 1aa0 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1a70:	ldr	r3, [r0, #0]
    1a72:	ldr	r3, [r3, #40]	; 0x28
    1a74:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    1a76:	cbnz	r0, 1aa0 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1a78:	ldr.w	r3, [r5, #1152]	; 0x480
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1a7c:	cbz	r3, 1a88 <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    1a7e:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1a80:	cbz	r3, 1a96 <SdBase<FsVolume>::errorHalt(Print*)+0x32>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    1a82:	bl	a2bc <yield>
    1a86:	b.n	1a82 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1a88:	ldr.w	r3, [r5, #1156]	; 0x484
    1a8c:	cbz	r3, 1a96 <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    1a8e:	ldrb.w	r3, [r3, #1092]	; 0x444
    1a92:	cmp	r3, #0
    1a94:	bne.n	1a82 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1a96:	mov	r0, r4
    1a98:	ldr	r1, [pc, #84]	; (1af0 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1a9a:	bl	74c <Print::println(__FlashStringHelper const*)>
    1a9e:	b.n	1a82 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1aa0:	ldr	r1, [pc, #80]	; (1af4 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1aa2:	mov	r0, r4
    1aa4:	bl	730 <Print::write(char const*)>
    1aa8:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1aac:	cbz	r0, 1aec <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    1aae:	ldr	r3, [r0, #0]
    1ab0:	ldr	r3, [r3, #40]	; 0x28
    1ab2:	blx	r3
    1ab4:	mov	r1, r0
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1ab6:	movs	r3, #0
    1ab8:	movs	r2, #16
    1aba:	mov	r0, r4
    1abc:	bl	a5a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1ac0:	ldr	r1, [pc, #52]	; (1af8 <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1ac2:	mov	r0, r4
    1ac4:	bl	730 <Print::write(char const*)>
    1ac8:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1acc:	cbz	r0, 1ae8 <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    1ace:	ldr	r3, [r0, #0]
    1ad0:	ldr	r3, [r3, #44]	; 0x2c
    1ad2:	blx	r3
    1ad4:	uxtb	r1, r0
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1ad6:	movs	r3, #0
    1ad8:	movs	r2, #16
    1ada:	mov	r0, r4
    1adc:	bl	a5a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1ae0:	mov	r0, r4
    1ae2:	bl	a558 <Print::println()>
    1ae6:	b.n	1a82 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1ae8:	mov	r1, r0
    1aea:	b.n	1ad6 <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1aec:	movs	r1, #42	; 0x2a
    1aee:	b.n	1ab6 <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    1af0:	.word	0x000130f8
    1af4:	.word	0x000130e8
    1af8:	.word	0x000130f4

00001afc <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1afc:	ldr	r4, [pc, #28]	; (1b1c <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1afe:	push	{r3, lr}
    1b00:	mov	r5, r0
    1b02:	mov	r6, r1
    1b04:	mov	r0, r4
    1b06:	ldr	r1, [pc, #24]	; (1b20 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1b08:	bl	730 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1b0c:	mov	r1, r6
    1b0e:	mov	r0, r4
    1b10:	bl	74c <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1b14:	mov	r1, r4
    1b16:	mov	r0, r5
    1b18:	bl	1a64 <SdBase<FsVolume>::errorHalt(Print*)>
    1b1c:	.word	0x200138e4
    1b20:	.word	0x0001310c

00001b24 <c_uSD::write(short*, long)>:
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1b24:	push	{r4, r5, r6, lr}
    1b26:	mov	r4, r0
  if(state == 0)
    1b28:	ldrsh.w	r0, [r0, #1284]	; 0x504
{
  strcpy(name,prefix);
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1b2c:	mov	r6, r1
    1b2e:	mov	r5, r2
  if(state == 0)
    1b30:	cbz	r0, 1b40 <c_uSD::write(short*, long)+0x1c>
    #endif
    state=1; // flag that file is open
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
    1b32:	subs	r3, r0, #1
    1b34:	uxth	r3, r3
    1b36:	cmp	r3, #1
    1b38:	bls.n	1b86 <c_uSD::write(short*, long)+0x62>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
  }
  
  if(state == 3)
    1b3a:	cmp	r0, #3
    1b3c:	beq.n	1bf8 <c_uSD::write(short*, long)+0xd4>
  {
    state=close();
  }
  return state;
}
    1b3e:	pop	{r4, r5, r6, pc}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    1b40:	addw	r0, r4, #1290	; 0x50a
    1b44:	bl	9a0 <makeFilename(char*)>
    if(!filename) {state=-1; return state;} // flag to do not anything
    1b48:	cmp	r0, #0
    1b4a:	beq.n	1c04 <c_uSD::write(short*, long)+0xe0>
    1b4c:	ldr	r3, [pc, #204]	; (1c1c <c_uSD::write(short*, long)+0xf8>)
    1b4e:	ldr	r1, [r3, #0]
    1b50:	cmp	r1, #0
    1b52:	beq.n	1bd2 <c_uSD::write(short*, long)+0xae>
    1b54:	mov	r2, r0
    1b56:	movw	r3, #1538	; 0x602
    1b5a:	addw	r0, r4, #1220	; 0x4c4
    1b5e:	bl	6ce4 <FsBaseFile::open(FsVolume*, char const*, int)>
    1b62:	cbz	r0, 1bd2 <c_uSD::write(short*, long)+0xae>
    1b64:	ldr.w	r0, [r4, #1276]	; 0x4fc
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1b68:	cbz	r0, 1bb6 <c_uSD::write(short*, long)+0x92>
   *
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
    1b6a:	mov.w	r1, #41943040	; 0x2800000
    1b6e:	bl	556c <FatFile::preAllocate(unsigned long)>
    1b72:	cbz	r0, 1bca <c_uSD::write(short*, long)+0xa6>
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    #ifdef  GEN_WAV_FILE // keep first record
          memcpy(header,(const char *)data,512);
    1b74:	mov.w	r2, #512	; 0x200
    1b78:	mov	r1, r6
    1b7a:	ldr	r0, [pc, #164]	; (1c20 <c_uSD::write(short*, long)+0xfc>)
    1b7c:	bl	887c <memcpy>
    #endif
    state=1; // flag that file is open
    nbuf=0;
    1b80:	movs	r3, #0
    1b82:	strh.w	r3, [r4, #1286]	; 0x506
    1b86:	ldr.w	r0, [r4, #1276]	; 0x4fc
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1b8a:	movs	r3, #2
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1b8c:	lsls	r5, r5, #1
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1b8e:	strh.w	r3, [r4, #1284]	; 0x504
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1b92:	cbz	r0, 1bda <c_uSD::write(short*, long)+0xb6>
    1b94:	mov	r1, r6
    1b96:	mov	r2, r5
    1b98:	bl	5c84 <FatFile::write(void const*, unsigned int)>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1b9c:	cmp	r0, r5
    1b9e:	bne.n	1c12 <c_uSD::write(short*, long)+0xee>
    nbuf++;
    1ba0:	ldrh.w	r3, [r4, #1286]	; 0x506
    if(closing) {closing=0; state=3;}
    1ba4:	ldrsh.w	r2, [r4, #1288]	; 0x508
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    1ba8:	adds	r3, #1
    1baa:	strh.w	r3, [r4, #1286]	; 0x506
    if(closing) {closing=0; state=3;}
    1bae:	cbnz	r2, 1bec <c_uSD::write(short*, long)+0xc8>
    1bb0:	ldrsh.w	r0, [r4, #1284]	; 0x504
    1bb4:	b.n	1b3a <c_uSD::write(short*, long)+0x16>
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1bb6:	ldr.w	r0, [r4, #1280]	; 0x500
    1bba:	cbz	r0, 1bca <c_uSD::write(short*, long)+0xa6>
    1bbc:	mov.w	r2, #41943040	; 0x2800000
    1bc0:	movs	r3, #0
    1bc2:	bl	4c28 <ExFatFile::preAllocate(unsigned long long)>
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    1bc6:	cmp	r0, #0
    1bc8:	bne.n	1b74 <c_uSD::write(short*, long)+0x50>
    1bca:	mov	r0, r4
    1bcc:	ldr	r1, [pc, #84]	; (1c24 <c_uSD::write(short*, long)+0x100>)
    1bce:	bl	1afc <SdBase<FsVolume>::errorHalt(char const*)>
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    1bd2:	mov	r0, r4
    1bd4:	ldr	r1, [pc, #80]	; (1c28 <c_uSD::write(short*, long)+0x104>)
    1bd6:	bl	1afc <SdBase<FsVolume>::errorHalt(char const*)>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1bda:	ldr.w	r0, [r4, #1280]	; 0x500
    1bde:	cmp	r0, #0
    1be0:	beq.n	1b9c <c_uSD::write(short*, long)+0x78>
    1be2:	mov	r1, r6
    1be4:	mov	r2, r5
    1be6:	bl	4e44 <ExFatFile::write(void const*, unsigned int)>
    1bea:	b.n	1b9c <c_uSD::write(short*, long)+0x78>
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
    1bec:	movs	r2, #0
    1bee:	movs	r3, #3
    1bf0:	strh.w	r2, [r4, #1288]	; 0x508
    1bf4:	strh.w	r3, [r4, #1284]	; 0x504
  }
  
  if(state == 3)
  {
    state=close();
    1bf8:	mov	r0, r4
    1bfa:	bl	b1c <c_uSD::close()>
    1bfe:	strh.w	r0, [r4, #1284]	; 0x504
  }
  return state;
    1c02:	pop	{r4, r5, r6, pc}
int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    1c04:	movw	r3, #65535	; 0xffff
    1c08:	strh.w	r3, [r4, #1284]	; 0x504
    1c0c:	mov.w	r0, #4294967295
    1c10:	pop	{r4, r5, r6, pc}
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1c12:	mov	r0, r4
    1c14:	ldr	r1, [pc, #20]	; (1c2c <c_uSD::write(short*, long)+0x108>)
    1c16:	bl	1afc <SdBase<FsVolume>::errorHalt(char const*)>
    1c1a:	nop
    1c1c:	.word	0x20019a1c
    1c20:	.word	0x2001507c
    1c24:	.word	0x00013140
    1c28:	.word	0x0001312c
    1c2c:	.word	0x00013114

00001c30 <loop>:
  int16_t mustStore=1;
#else
  int16_t mustStore=0;
#endif

extern "C" void loop() {
    1c30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    1c34:	ldr	r6, [pc, #720]	; (1f08 <loop+0x2d8>)
    1c36:	ldrh.w	r3, [r6, #2036]	; 0x7f4
  t = tail;
    1c3a:	ldrh.w	r1, [r6, #2038]	; 0x7f6
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    1c3e:	uxth	r3, r3
  t = tail;
    1c40:	uxth	r1, r1
  if (h >= t) return h - t;
    1c42:	cmp	r3, r1
  return mq + h - t;
    1c44:	itte	cc
    1c46:	addcc.w	r2, r3, #500	; 0x1f4
    1c4a:	subcc	r3, r2, r1
{
  uint16_t h, t;

  h = head;
  t = tail;
  if (h >= t) return h - t;
    1c4c:	subcs	r3, r3, r1
    1c4e:	uxth	r3, r3
    1c50:	sub	sp, #24
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    1c52:	cmp	r3, #0
    1c54:	beq.n	1d4c <loop+0x11c>
  if(have_data)
  { // have data on queue
//    started=1; // flag that we have now data
    #if MDEL<0
      int32_t nsec;
      nsec=checkDutyCycle(&acqParameters, state);
    1c56:	ldr	r5, [pc, #692]	; (1f0c <loop+0x2dc>)
    1c58:	ldr	r0, [pc, #692]	; (1f10 <loop+0x2e0>)
    1c5a:	ldrsh.w	r1, [r5]
    1c5e:	bl	ff8 <checkDutyCycle(ACQ_Parameters_s*, short)>
      if(nsec<0) { uSD.setClosing();} // this will be last record in file
    1c62:	subs	r4, r0, #0
    1c64:	blt.w	1e3a <loop+0x20a>
      if(nsec>0) 
    1c68:	beq.n	1c76 <loop+0x46>
      { 
        #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
          I2S_stopClock();
        #endif
        #if DO_DEBUG>1
          logFile.close();
    1c6a:	ldr	r0, [pc, #680]	; (1f14 <loop+0x2e4>)
    1c6c:	bl	6cbc <FsBaseFile::close()>
        #endif
        setWakeupCallandSleep(nsec); // file closed sleep now
    1c70:	mov	r0, r4
    1c72:	bl	e60 <setWakeupCallandSleep(unsigned long)>
template <int mq>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
    1c76:	ldr.w	r0, [r6, #2032]	; 0x7f0
    1c7a:	ldr	r2, [pc, #652]	; (1f08 <loop+0x2d8>)
    1c7c:	cmp	r0, #0
    1c7e:	beq.w	1ece <loop+0x29e>
    1c82:	movs	r2, #0
    1c84:	ldr	r3, [pc, #656]	; (1f18 <loop+0x2e8>)
    1c86:	subs	r2, #2
    1c88:	add.w	r4, r3, #256	; 0x100
    // fetch data from queues
    int16_t * data[NCH];
    for(int ii=0; ii<NCH; ii++) data[ii] = (int16_t *)queue[ii].readBuffer();
    // multiplex data
    int16_t *tmp = tempBuffer;
    for(int ii=0;ii<AUDIO_BLOCK_SAMPLES;ii++) for(int jj=0; jj<NCH; jj++) *tmp++ = *data[jj]++;
    1c8c:	ldrsh.w	r1, [r2, #2]!
    1c90:	strh.w	r1, [r3, #2]!
    1c94:	cmp	r4, r3
    1c96:	bne.n	1c8c <loop+0x5c>
}

template <int mq>
void mRecordQueue<mq>::freeBuffer(void)
{
	if (userblock == NULL) return;
    1c98:	cbz	r0, 1ca4 <loop+0x74>
	release(userblock);
    1c9a:	bl	a748 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    1c9e:	movs	r3, #0
    1ca0:	str.w	r3, [r6, #2032]	; 0x7f0

    #if(MDET)
      mustStore = process1.getSigCount() >  0;
    #endif

    if(mustStore)
    1ca4:	ldr	r3, [pc, #628]	; (1f1c <loop+0x2ec>)
    1ca6:	ldrsh.w	r3, [r3]
    1caa:	cmp	r3, #0
    1cac:	beq.w	1e04 <loop+0x1d4>
    {
      if(state==0)
    1cb0:	ldrsh.w	r0, [r5]
      { // generate header before file is opened
        #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
          uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
          //
          int ndat=outptr-diskBuffer;
    1cb4:	ldr	r4, [pc, #616]	; (1f20 <loop+0x2f0>)
      mustStore = process1.getSigCount() >  0;
    #endif

    if(mustStore)
    {
      if(state==0)
    1cb6:	cmp	r0, #0
    1cb8:	beq.w	1e7c <loop+0x24c>
    1cbc:	ldr	r6, [r4, #0]
      
      // number of data in tempBuffer
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1cbe:	ldr	r0, [pc, #612]	; (1f24 <loop+0x2f4>)
    1cc0:	rsb	lr, r6, r0
    1cc4:	mov.w	r7, lr, asr #1

      tmp = tempBuffer;
      if (nout>ndat)
    1cc8:	cmp	r7, #128	; 0x80
      
      // number of data in tempBuffer
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1cca:	mov	sl, r6

      tmp = tempBuffer;
      if (nout>ndat)
    1ccc:	bgt.w	1e44 <loop+0x214>
      }
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    1cd0:	cmp	r7, #0
    1cd2:	ble.w	1efe <loop+0x2ce>
    1cd6:	ldr.w	ip, [pc, #664]	; 1f70 <loop+0x340>
    1cda:	mov	r3, r6
    1cdc:	mov	r2, ip
    1cde:	ldrsh.w	r1, [r2], #2
    1ce2:	strh.w	r1, [r3], #2
    1ce6:	cmp	r0, r3
    1ce8:	bne.n	1cde <loop+0xae>
    1cea:	ldr.w	sl, [pc, #568]	; 1f24 <loop+0x2f4>
    1cee:	add.w	r6, ip, lr
      }
      
      if(nout==0) //buffer has been filled, so write to disk
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
    1cf2:	bl	929c <micros>
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1cf6:	ldr.w	r8, [pc, #572]	; 1f34 <loop+0x304>
    1cfa:	rsb	r2, r8, sl
    1cfe:	asrs	r2, r2, #1
      }
      
      if(nout==0) //buffer has been filled, so write to disk
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
    1d00:	mov	r9, r0
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1d02:	mov	r1, r8
    1d04:	ldr	r0, [pc, #544]	; (1f28 <loop+0x2f8>)
    1d06:	bl	1b24 <c_uSD::write(short*, long)>
    1d0a:	strh	r0, [r5, #0]
        t1=micros();
    1d0c:	bl	929c <micros>
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
    1d10:	ldr	r2, [pc, #536]	; (1f2c <loop+0x2fc>)
    1d12:	ldr	r3, [r2, #0]
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
    1d14:	rsb	r0, r9, r0
        if(t2<t3) t3=t2; // accumulate some time statistics
    1d18:	cmp	r0, r3
        if(t2>t4) t4=t2;
    1d1a:	ldr	r3, [pc, #532]	; (1f30 <loop+0x300>)
      
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
    1d1c:	it	cc
    1d1e:	strcc	r0, [r2, #0]
        if(t2>t4) t4=t2;
    1d20:	ldr	r2, [r3, #0]
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
        ndat-=nbuf;
    1d22:	rsb	r7, r7, #128	; 0x80
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
        if(t2>t4) t4=t2;
    1d26:	cmp	r0, r2
    1d28:	it	hi
    1d2a:	strhi	r0, [r3, #0]
    1d2c:	ldr	r3, [pc, #516]	; (1f34 <loop+0x304>)

        ptr=(int16_t *)diskBuffer;
      }

      if(ndat>0) // save residual data
    1d2e:	cbz	r7, 1d40 <loop+0x110>
    1d30:	movs	r2, #0
      {
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1d32:	adds	r2, #1
    1d34:	ldrh.w	r1, [r6], #2
    1d38:	strh.w	r1, [r3], #2
    1d3c:	cmp	r7, r2
    1d3e:	bgt.n	1d32 <loop+0x102>
      }
      
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position

      if(!state)
    1d40:	ldrsh.w	r2, [r5]
      {
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
      }
      
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position
    1d44:	str	r3, [r4, #0]

      if(!state)
    1d46:	cmp	r2, #0
    1d48:	beq.w	1e5e <loop+0x22e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d4c:	ldr.w	lr, [pc, #552]	; 1f78 <loop+0x348>
#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
    1d50:	ldr	r0, [pc, #484]	; (1f38 <loop+0x308>)
    1d52:	ldr.w	r3, [lr]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d56:	ldr	r4, [pc, #484]	; (1f3c <loop+0x30c>)
    1d58:	str	r3, [sp, #16]
  if(millis()>t0+1000)
    1d5a:	ldr	r3, [r0, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d5c:	ldr	r2, [r4, #0]
	return ret;
    1d5e:	ldr	r1, [sp, #16]
  if(millis()>t0+1000)
    1d60:	add.w	r3, r3, #1000	; 0x3e8

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d64:	adds	r2, #1
  if(millis()>t0+1000)
    1d66:	cmp	r3, r1

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d68:	str	r2, [r4, #0]
  if(millis()>t0+1000)
    1d6a:	bcs.n	1dfc <loop+0x1cc>
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    1d6c:	ldr	r6, [pc, #444]	; (1f2c <loop+0x2fc>)
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    1d6e:	ldr.w	r8, [pc, #524]	; 1f7c <loop+0x34c>
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    1d72:	ldr	r1, [r6, #0]
    1d74:	ldr.w	r9, [pc, #432]	; 1f28 <loop+0x2f8>
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    1d78:	ldr	r7, [pc, #452]	; (1f40 <loop+0x310>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d7a:	ldr.w	lr, [lr]
    1d7e:	ldrh.w	r3, [r9, #1286]	; 0x506
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    1d82:	ldr	r5, [pc, #428]	; (1f30 <loop+0x300>)
    1d84:	str.w	lr, [sp, #20]
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    1d88:	cmp	r1, r8
    1d8a:	it	hi
    1d8c:	movhi.w	r1, #4294967295
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    1d90:	str	r1, [sp, #0]
    1d92:	ldrh	r1, [r7, #0]
    1d94:	str	r1, [sp, #8]
	return ret;
    1d96:	ldr.w	lr, [sp, #20]
    1d9a:	ldr	r1, [r5, #0]
    1d9c:	str	r1, [sp, #4]
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();
    1d9e:	str.w	lr, [r0]

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    1da2:	ldr	r1, [pc, #416]	; (1f44 <loop+0x314>)
    1da4:	ldr	r0, [pc, #416]	; (1f48 <loop+0x318>)
    1da6:	bl	a588 <Print::printf(char const*, ...)>
      //
    #if DO_DEBUG>1  
      logFile.printf("\tloop: %5d %4d; %5d %5d; %5d\n",
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    1daa:	ldr	r1, [r6, #0]
            AudioMemoryUsageMax());
    1dac:	ldrh	r0, [r7, #0]
    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    #if DO_DEBUG>1  
      logFile.printf("\tloop: %5d %4d; %5d %5d; %5d\n",
    1dae:	ldrh.w	r3, [r9, #1286]	; 0x506
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
            AudioMemoryUsageMax());
    1db2:	ldr	r2, [r4, #0]
    1db4:	str	r0, [sp, #8]
    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    #if DO_DEBUG>1  
      logFile.printf("\tloop: %5d %4d; %5d %5d; %5d\n",
    1db6:	cmp	r1, r8
    1db8:	it	hi
    1dba:	movhi.w	r1, #4294967295
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
            AudioMemoryUsageMax());
    1dbe:	str	r1, [sp, #0]
    1dc0:	ldr	r1, [r5, #0]
    1dc2:	str	r1, [sp, #4]
    1dc4:	ldr	r0, [pc, #388]	; (1f4c <loop+0x31c>)
    1dc6:	ldr	r1, [pc, #392]	; (1f50 <loop+0x320>)
    1dc8:	bl	a588 <Print::printf(char const*, ...)>
    #endif

    AudioMemoryUsageMaxReset();
    1dcc:	ldr	r3, [pc, #388]	; (1f54 <loop+0x324>)
    queue[0].dropCount=0;
    process1.resetDetCount();
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
    1dce:	ldr	r2, [pc, #392]	; (1f58 <loop+0x328>)
      logFile.printf("\tloop: %5d %4d; %5d %5d; %5d\n",
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
            AudioMemoryUsageMax());
    #endif

    AudioMemoryUsageMaxReset();
    1dd0:	ldrh	r1, [r3, #0]
    1dd2:	strh	r1, [r7, #0]
    queue[0].dropCount=0;
    process1.resetDetCount();
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
    1dd4:	ldr	r3, [pc, #388]	; (1f5c <loop+0x32c>)
    1dd6:	ldr	r0, [pc, #368]	; (1f48 <loop+0x318>)
            AudioMemoryUsageMax());
    #endif

    AudioMemoryUsageMaxReset();
    t3=1<<31;
    t4=0;
    1dd8:	movs	r7, #0
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
            AudioMemoryUsageMax());
    #endif

    AudioMemoryUsageMaxReset();
    t3=1<<31;
    1dda:	mov.w	r1, #2147483648	; 0x80000000
    1dde:	str	r1, [r6, #0]
    t4=0;
    1de0:	str	r7, [r5, #0]
    queue[0].dropCount=0;
    process1.resetDetCount();
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
    1de2:	ldr	r2, [r2, #0]
    1de4:	ldr	r1, [pc, #376]	; (1f60 <loop+0x330>)
    1de6:	ldr	r3, [r3, #0]
    1de8:	bl	a588 <Print::printf(char const*, ...)>
  #endif
    Serial.println();
    1dec:	ldr	r0, [pc, #344]	; (1f48 <loop+0x318>)
    1dee:	bl	a558 <Print::println()>
    loopCount=0;
    maxValue=0;
    1df2:	ldr	r2, [pc, #368]	; (1f64 <loop+0x334>)
    maxNoise=0;
    1df4:	ldr	r3, [pc, #368]	; (1f68 <loop+0x338>)
  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    loopCount=0;
    maxValue=0;
    1df6:	str	r7, [r2, #0]

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    loopCount=0;
    1df8:	str	r7, [r4, #0]
    maxValue=0;
    maxNoise=0;
    1dfa:	str	r7, [r3, #0]
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
    1dfc:	wfi
}
    1dfe:	add	sp, #24
    1e00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        #if DO_DEBUG>0
          Serial.println("closed");
        #endif
      }
    }
    else if(state>0)
    1e04:	ldrsh.w	r3, [r5]
    1e08:	ldr	r6, [pc, #256]	; (1f0c <loop+0x2dc>)
    1e0a:	cmp	r3, #0
    1e0c:	ble.n	1d4c <loop+0x11c>
    { // close file
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
    1e0e:	ldr	r4, [pc, #272]	; (1f20 <loop+0x2f0>)
    1e10:	ldr.w	r8, [pc, #288]	; 1f34 <loop+0x304>
    1e14:	ldr	r3, [r4, #0]
    1e16:	rsb	r3, r8, r3
      if(nbuf>0)
    1e1a:	asrs	r2, r3, #1
    1e1c:	bne.n	1ec2 <loop+0x292>
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
      }
      state=uSD.close();
    1e1e:	ldr	r0, [pc, #264]	; (1f28 <loop+0x2f8>)
    1e20:	bl	b1c <c_uSD::close()>
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1e24:	movs	r2, #8
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
      if(nbuf>0)
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
      }
      state=uSD.close();
    1e26:	strh	r0, [r5, #0]
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1e28:	ldr	r3, [pc, #320]	; (1f6c <loop+0x33c>)
    1e2a:	str	r2, [sp, #0]
    1e2c:	ldr	r1, [pc, #224]	; (1f10 <loop+0x2e0>)
    1e2e:	ldr	r0, [pc, #248]	; (1f28 <loop+0x2f8>)
    1e30:	bl	c24 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
      outptr = diskBuffer;
    1e34:	str.w	r8, [r4]
    1e38:	b.n	1d4c <loop+0x11c>
  public:
    c_uSD(): state(-1), closing(0) {;}
    void init();
    int16_t write(int16_t * data, int32_t ndat);
    uint16_t getNbuf(void) {return nbuf;}
    void setClosing(void) {closing=1;}
    1e3a:	ldr	r3, [pc, #236]	; (1f28 <loop+0x2f8>)
    1e3c:	movs	r2, #1
    1e3e:	strh.w	r2, [r3, #1288]	; 0x508
    1e42:	b.n	1c76 <loop+0x46>
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;

      tmp = tempBuffer;
      if (nout>ndat)
    1e44:	ldr	r3, [pc, #296]	; (1f70 <loop+0x340>)
    1e46:	subs	r2, r6, #2
    1e48:	add.w	r0, r3, #256	; 0x100
      { // sufficient space for all data
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1e4c:	ldrsh.w	r1, [r3], #2
    1e50:	strh.w	r1, [r2, #2]!
    1e54:	cmp	r3, r0
    1e56:	bne.n	1e4c <loop+0x21c>
    1e58:	add.w	r3, r6, #256	; 0x100
    1e5c:	b.n	1d40 <loop+0x110>
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position

      if(!state)
      { // store config again if you wanted time of latest file stored
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1e5e:	movs	r2, #8
    1e60:	str	r2, [sp, #0]
    1e62:	ldr	r3, [pc, #264]	; (1f6c <loop+0x33c>)
    1e64:	ldr	r1, [pc, #168]	; (1f10 <loop+0x2e0>)
    1e66:	ldr	r0, [pc, #192]	; (1f28 <loop+0x2f8>)
    1e68:	bl	c24 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
    1e6c:	movs	r1, #6
    1e6e:	ldr	r0, [pc, #260]	; (1f74 <loop+0x344>)
    1e70:	bl	8a7c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1e74:	ldr	r0, [pc, #208]	; (1f48 <loop+0x318>)
    1e76:	bl	a558 <Print::println()>
    1e7a:	b.n	1d4c <loop+0x11c>
    if(mustStore)
    {
      if(state==0)
      { // generate header before file is opened
        #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
          uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
    1e7c:	bl	a40 <wavHeader(unsigned long)>
          //
          int ndat=outptr-diskBuffer;
    1e80:	ldr	r6, [r4, #0]
    1e82:	ldr	r2, [pc, #176]	; (1f34 <loop+0x304>)
    1e84:	subs	r7, r6, r2
    1e86:	asrs	r7, r7, #1
          if(ndat>0)
    1e88:	cmp	r7, #0
    1e8a:	ble.n	1ea6 <loop+0x276>
    1e8c:	add.w	r7, r7, #2147483648	; 0x80000000
    1e90:	subs	r7, #1
    1e92:	add.w	r7, r2, r7, lsl #1
    1e96:	subs	r3, r2, #2
    1e98:	adds	r2, #42	; 0x2a
          { // shift exisiting data after header, which is always at beginnig of file
            for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
    1e9a:	ldrsh.w	r1, [r3, #2]!
    1e9e:	strh.w	r1, [r2, #2]!
    1ea2:	cmp	r7, r3
    1ea4:	bne.n	1e9a <loop+0x26a>
    1ea6:	ldr	r2, [pc, #140]	; (1f34 <loop+0x304>)
    1ea8:	subs	r3, r0, #4
    1eaa:	adds	r0, #40	; 0x28
          }
          // copy header to disk buffer
          uint32_t *ptr=(uint32_t *) diskBuffer;
          for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
    1eac:	ldr.w	r1, [r3, #4]!
    1eb0:	str.w	r1, [r2], #4
    1eb4:	cmp	r3, r0
    1eb6:	bne.n	1eac <loop+0x27c>
          outptr+=22; //(44 bytes)
    1eb8:	adds	r6, #44	; 0x2c
          uint32_t *ptr=(uint32_t *) diskBuffer;
          // copy to disk buffer
          for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
          outptr+=256; //(512 bytes)
        #endif
        state=1;
    1eba:	movs	r3, #1
            for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
          }
          // copy header to disk buffer
          uint32_t *ptr=(uint32_t *) diskBuffer;
          for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
          outptr+=22; //(44 bytes)
    1ebc:	str	r6, [r4, #0]
          uint32_t *ptr=(uint32_t *) diskBuffer;
          // copy to disk buffer
          for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
          outptr+=256; //(512 bytes)
        #endif
        state=1;
    1ebe:	strh	r3, [r5, #0]
    1ec0:	b.n	1cbe <loop+0x8e>
    else if(state>0)
    { // close file
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
      if(nbuf>0)
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
    1ec2:	mov	r1, r8
    1ec4:	ldr	r0, [pc, #96]	; (1f28 <loop+0x2f8>)
    1ec6:	bl	1b24 <c_uSD::write(short*, long)>
    1eca:	strh	r0, [r6, #0]
    1ecc:	b.n	1e1e <loop+0x1ee>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    1ece:	ldrh.w	r3, [r2, #2038]	; 0x7f6
	if (t == head) return NULL;
    1ed2:	ldrh.w	r2, [r2, #2036]	; 0x7f4
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    1ed6:	uxth	r3, r3
	if (t == head) return NULL;
    1ed8:	uxth	r2, r2
    1eda:	cmp	r3, r2
    1edc:	beq.n	1f02 <loop+0x2d2>
	if (++t >= mq) t = 0;
    1ede:	adds	r3, #1
    1ee0:	uxth	r3, r3
    1ee2:	cmp.w	r3, #500	; 0x1f4
    1ee6:	ite	cc
    1ee8:	movcc	r0, r3
    1eea:	movcs	r3, r0
	userblock = queue[t];
    1eec:	adds	r0, #8
    1eee:	ldr.w	r0, [r6, r0, lsl #2]
    1ef2:	str.w	r0, [r6, #2032]	; 0x7f0
	tail = t;
    1ef6:	strh.w	r3, [r6, #2038]	; 0x7f6
	return (void *) userblock->data;
    1efa:	adds	r2, r0, #4
    1efc:	b.n	1c84 <loop+0x54>
      }
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    1efe:	ldr	r6, [pc, #112]	; (1f70 <loop+0x340>)
    1f00:	b.n	1cf2 <loop+0xc2>
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    1f02:	mov	r2, r0
    1f04:	b.n	1c84 <loop+0x54>
    1f06:	nop
    1f08:	.word	0x20014880
    1f0c:	.word	0x20019484
    1f10:	.word	0x20013764
    1f14:	.word	0x2001940c
    1f18:	.word	0x200192fa
    1f1c:	.word	0x20013760
    1f20:	.word	0x20013734
    1f24:	.word	0x2001927c
    1f28:	.word	0x20014364
    1f2c:	.word	0x20014878
    1f30:	.word	0x2001487c
    1f34:	.word	0x2001527c
    1f38:	.word	0x20019488
    1f3c:	.word	0x20019480
    1f40:	.word	0x20019b8c
    1f44:	.word	0x00013160
    1f48:	.word	0x200138e4
    1f4c:	.word	0x200193fc
    1f50:	.word	0x00013180
    1f54:	.word	0x20019c0c
    1f58:	.word	0x40036008
    1f5c:	.word	0x40036004
    1f60:	.word	0x000131a0
    1f64:	.word	0x2001947c
    1f68:	.word	0x200192c8
    1f6c:	.word	0x20013740
    1f70:	.word	0x200192fc
    1f74:	.word	0x00013158
    1f78:	.word	0x20019a84
    1f7c:	.word	0x000186a0

00001f80 <_GLOBAL__sub_I_acqParameters>:
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    1f80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

class AudioInputAnalog : public AudioStream
{
public:
        AudioInputAnalog() : AudioStream(0, NULL) { init(A2); }
        AudioInputAnalog(uint8_t pin) : AudioStream(0, NULL) { init(pin); }
    1f84:	ldr.w	r8, [pc, #280]	; 20a0 <_GLOBAL__sub_I_acqParameters+0x120>
template <int mq>
class mRecordQueue : public AudioStream
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
    1f88:	ldr	r6, [pc, #228]	; (2070 <_GLOBAL__sub_I_acqParameters+0xf0>)
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    1f8a:	ldr	r5, [pc, #232]	; (2074 <_GLOBAL__sub_I_acqParameters+0xf4>)
    #include "m_delay.h" 
    mDelay<NCH,(MDEL+2)>  delay1(0); // have two buffers more in queue only to be safe 
  #endif 

  #if MDEL<0
      AudioConnection     patchCord2(acq, queue[0]); 
    1f8c:	ldr	r7, [pc, #232]	; (2078 <_GLOBAL__sub_I_acqParameters+0xf8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1f8e:	ldr.w	r9, [pc, #276]	; 20a4 <_GLOBAL__sub_I_acqParameters+0x124>
    1f92:	movs	r2, #0
    1f94:	mov	r1, r2
    1f96:	mov	r0, r8
    1f98:	bl	770 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    1f9c:	ldr	r3, [pc, #220]	; (207c <_GLOBAL__sub_I_acqParameters+0xfc>)
    1f9e:	str.w	r3, [r8]
    1fa2:	movs	r0, #16
    1fa4:	bl	28c8 <AudioInputAnalog::init(unsigned char)>
    1fa8:	add.w	r2, r6, #28
    1fac:	movs	r1, #1
    1fae:	mov	r0, r6
    1fb0:	movs	r4, #0
    1fb2:	bl	770 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    1fb6:	ldr	r3, [pc, #200]	; (2080 <_GLOBAL__sub_I_acqParameters+0x100>)
    1fb8:	strh.w	r4, [r6, #2036]	; 0x7f4
    1fbc:	str	r3, [r6, #0]
    1fbe:	strh.w	r4, [r6, #2038]	; 0x7f6
		{ isConnected = false;
		  connect(); }
    1fc2:	mov	r0, r5
    1fc4:	str.w	r4, [r6, #2032]	; 0x7f0
    1fc8:	strh.w	r4, [r6, #2040]	; 0x7f8
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    1fcc:	str.w	r8, [r5]
    1fd0:	str	r6, [r5, #4]
    1fd2:	strb	r4, [r5, #8]
    1fd4:	strb	r4, [r5, #9]
    1fd6:	str	r4, [r5, #12]
		{ isConnected = false;
    1fd8:	strb	r4, [r5, #16]
		  connect(); }
    1fda:	bl	a7e8 <AudioConnection::connect()>
    1fde:	mov	r2, r7
    1fe0:	mov	r0, r5
    1fe2:	ldr	r1, [pc, #160]	; (2084 <_GLOBAL__sub_I_acqParameters+0x104>)
    1fe4:	bl	ab2c <__aeabi_atexit>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1fe8:	ldr	r3, [pc, #156]	; (2088 <_GLOBAL__sub_I_acqParameters+0x108>)
// rename in SdFat-beta/src the file SdFat.h to SdFat-beta.h
// to avoid confict with stock SD library needed for Audio library
//
#include "SdFat.h" 

FsFile logFile;
    1fea:	ldr	r1, [pc, #160]	; (208c <_GLOBAL__sub_I_acqParameters+0x10c>)
    1fec:	strb	r4, [r3, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1fee:	mov.w	r5, #1000	; 0x3e8
    1ff2:	mov	r2, r7
    1ff4:	strb	r4, [r3, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    1ff6:	str	r4, [r3, #72]	; 0x48
    1ff8:	str	r4, [r3, #76]	; 0x4c
    1ffa:	str	r5, [r3, #8]
    1ffc:	mov	r0, r3
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1ffe:	str.w	r9, [r3]
    2002:	bl	ab2c <__aeabi_atexit>
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    2006:	ldr	r3, [pc, #136]	; (2090 <_GLOBAL__sub_I_acqParameters+0x110>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2008:	ldr	r0, [pc, #136]	; (2094 <_GLOBAL__sub_I_acqParameters+0x114>)
    200a:	str.w	r5, [r3, #1212]	; 0x4bc
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    200e:	movs	r5, #41	; 0x29
    2010:	ldr	r1, [pc, #132]	; (2098 <_GLOBAL__sub_I_acqParameters+0x118>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2012:	ldr.w	lr, [pc, #148]	; 20a8 <_GLOBAL__sub_I_acqParameters+0x128>
    2016:	str.w	r4, [r3, #1152]	; 0x480
    201a:	movs	r6, #1
    201c:	str.w	r4, [r3, #1156]	; 0x484
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    2020:	strb.w	r4, [r3, #1176]	; 0x498
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2024:	strb.w	r4, [r3, #1177]	; 0x499
    2028:	strb.w	r4, [r3, #1202]	; 0x4b2
    202c:	strb.w	r4, [r3, #1208]	; 0x4b8
    2030:	strb.w	r4, [r3, #1216]	; 0x4c0
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    2034:	str.w	r4, [r3, #1276]	; 0x4fc
    2038:	str.w	r4, [r3, #1280]	; 0x500
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    203c:	strh.w	r4, [r3, #1288]	; 0x508
    2040:	strb.w	r5, [r3, #1199]	; 0x4af
    2044:	movw	r4, #65535	; 0xffff
    2048:	str.w	r0, [r3, #1168]	; 0x490
    204c:	str.w	r1, [r3, #1180]	; 0x49c
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2050:	mov	r2, r7
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2052:	str.w	r9, [r3, #1204]	; 0x4b4
    2056:	mov	r0, r3
    2058:	str.w	lr, [r3, #1188]	; 0x4a4
    205c:	strb.w	r6, [r3, #1197]	; 0x4ad
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    2060:	strh.w	r4, [r3, #1284]	; 0x504
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2064:	ldr	r1, [pc, #52]	; (209c <_GLOBAL__sub_I_acqParameters+0x11c>)
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    2066:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    206a:	b.w	ab2c <__aeabi_atexit>
    206e:	nop
    2070:	.word	0x20014880
    2074:	.word	0x20019468
    2078:	.word	0x20013730
    207c:	.word	0x000131c0
    2080:	.word	0x00012cb8
    2084:	.word	0x00000569
    2088:	.word	0x200193fc
    208c:	.word	0x00000531
    2090:	.word	0x20014364
    2094:	.word	0x000133f8
    2098:	.word	0x000133a0
    209c:	.word	0x00000549
    20a0:	.word	0x2001944c
    20a4:	.word	0x00012ce8
    20a8:	.word	0x38011001

000020ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    20ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20b0:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    20b2:	ldr	r5, [r4, #12]
    20b4:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    20b8:	ldr	r5, [pc, #484]	; (22a0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    20ba:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    20bc:	bne.n	2164 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    20be:	lsls	r7, r3, #31
    20c0:	bpl.w	222a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    20c4:	cmp	r1, #0
    20c6:	beq.w	2290 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    20ca:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    20cc:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    20ce:	it	ne
    20d0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    20d4:	str	r5, [r4, #52]	; 0x34
    20d6:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    20d8:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    20dc:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    20e0:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    20e4:	cmp.w	ip, #0
    20e8:	beq.w	223c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    20ec:	cbz	r1, 20f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    20ee:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    20f0:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    20f4:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    20f8:	ldr	r5, [r0, #4]
    20fa:	ldrb	r6, [r5, #8]
			if (count == 2)
    20fc:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2100:	add.w	r6, r6, #4294967295
    2104:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2108:	ite	eq
    210a:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    210e:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2112:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2114:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2116:	sub.w	ip, ip, #2
    211a:	b.n	212e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    211c:	cbz	r2, 2122 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    211e:	strb	r4, [r2, #0]
    2120:	adds	r2, #1
						} 
						count_read--;
    2122:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2124:	and.w	r5, r5, #61440	; 0xf000
    2128:	cmp	r5, r6
    212a:	bls.n	215a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    212c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    212e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2130:	tst.w	r5, #240	; 0xf0
    2134:	beq.n	2124 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2136:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2138:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    213c:	mov	r7, r2
    213e:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2142:	bne.n	211c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2144:	cbz	r2, 214e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    2146:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    214a:	strb	r4, [r2, #1]
    214c:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    214e:	and.w	r5, r5, #61440	; 0xf000
    2152:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    2154:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2158:	bhi.n	212c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    215a:	cmp.w	ip, #0
    215e:	beq.n	223c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2160:	ldr	r4, [r0, #0]
    2162:	b.n	20ec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2164:	lsls	r5, r3, #31
    2166:	bpl.n	2202 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    2168:	cmp	r1, #0
    216a:	beq.w	2280 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    216e:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2170:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2172:	it	ne
    2174:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2178:	str	r5, [r4, #52]	; 0x34
    217a:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    217c:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    2180:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2184:	cmp.w	lr, #0
    2188:	beq.n	220e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    218a:	cbz	r1, 2198 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    218c:	ldrb.w	ip, [r1, #1]
    2190:	ldrb	r5, [r1, #0]
    2192:	adds	r1, #2
    2194:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2198:	ldr	r5, [r0, #4]
    219a:	ldrb	r6, [r5, #8]
			if (count == 2)
    219c:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    21a0:	add.w	r6, r6, #4294967295
    21a4:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    21a8:	ite	eq
    21aa:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    21ae:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    21b2:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    21b4:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    21b6:	sub.w	lr, lr, #2
    21ba:	b.n	21ce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    21bc:	cbz	r2, 21c2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    21be:	strb	r4, [r2, #0]
    21c0:	adds	r2, #1
						} 
						count_read--;
    21c2:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    21c4:	and.w	r5, r5, #61440	; 0xf000
    21c8:	cmp	r5, r6
    21ca:	bls.n	21f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    21cc:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    21ce:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    21d0:	tst.w	r5, #240	; 0xf0
    21d4:	beq.n	21c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    21d6:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    21da:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    21dc:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    21de:	bne.n	21bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    21e0:	cbz	r2, 21ec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    21e2:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    21e6:	asrs	r4, r4, #8
    21e8:	strb	r4, [r2, #1]
    21ea:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    21ec:	and.w	r5, r5, #61440	; 0xf000
    21f0:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    21f2:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    21f6:	bhi.n	21cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    21f8:	cmp.w	lr, #0
    21fc:	beq.n	220e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    21fe:	ldr	r4, [r0, #0]
    2200:	b.n	218a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2202:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2204:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2208:	cmp.w	lr, #0
    220c:	bne.n	218a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    220e:	cbz	r3, 2258 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2210:	ldr	r4, [r0, #0]
			sr = port().SR;
    2212:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2214:	tst.w	r1, #240	; 0xf0
    2218:	beq.n	2212 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    221a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    221c:	lsls	r4, r3, #31
    221e:	bpl.n	225c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    2220:	cbz	r2, 2226 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    2222:	strb	r1, [r2, #0]
    2224:	adds	r2, #1
					count_read--;
    2226:	subs	r3, #1
    2228:	b.n	220e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    222a:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    222e:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2230:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2234:	cmp.w	ip, #0
    2238:	bne.w	20ec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    223c:	cbz	r3, 2258 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    223e:	ldr	r4, [r0, #0]
			sr = port().SR;
    2240:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2242:	tst.w	r1, #240	; 0xf0
    2246:	beq.n	2240 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    2248:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    224a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    224c:	bpl.n	226e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    224e:	cbz	r2, 2254 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    2250:	strb	r1, [r2, #0]
    2252:	adds	r2, #1
					count_read--;
    2254:	subs	r3, #1
    2256:	b.n	223c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    225c:	cbz	r2, 226a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    225e:	mov	r4, r2
						*p_read++ = w >> 8;
    2260:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    2262:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    2266:	strb	r5, [r2, #1]
    2268:	mov	r2, r4
					}
					count_read -= 2;
    226a:	subs	r3, #2
    226c:	b.n	220e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    226e:	cbz	r2, 227c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    2270:	mov	r4, r2
    2272:	asrs	r5, r1, #8
    2274:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    2278:	strb	r1, [r2, #1]
    227a:	mov	r2, r4
					}
					count_read -= 2;
    227c:	subs	r3, #2
    227e:	b.n	223c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2280:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2284:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2286:	it	ne
    2288:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    228c:	str	r5, [r4, #52]	; 0x34
    228e:	b.n	217c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2290:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2294:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2296:	it	ne
    2298:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    229c:	str	r5, [r4, #52]	; 0x34
    229e:	b.n	20d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    22a0:	.word	0x801f0400

000022a4 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    22a4:	cbz	r3, 22aa <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    22a6:	b.w	20ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    22aa:	bx	lr

000022ac <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    22ac:	ldr	r2, [pc, #400]	; (2440 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    22ae:	ldr	r3, [pc, #404]	; (2444 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    22b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    22b4:	ldr	r6, [pc, #400]	; (2448 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    22b6:	ldr.w	sl, [pc, #416]	; 2458 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    22ba:	ldr	r4, [pc, #400]	; (244c <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    22bc:	ldr.w	r9, [pc, #400]	; 2450 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    22c0:	umull	r5, r2, r2, r0
    22c4:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    22c8:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    22cc:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    22d0:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    22d4:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    22d8:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    22da:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    22dc:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    22e0:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    22e4:	rsb	r6, fp, r7
    22e8:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    22ec:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    22ee:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    22f0:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    22f2:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    22f6:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    22fa:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    22fe:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2302:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2304:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2308:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    230c:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2310:	adds	r6, #1
    2312:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2314:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2316:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2318:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    231a:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    231c:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    231e:	movw	fp, #365	; 0x16d
    2322:	mov.w	r8, #100	; 0x64
    2326:	mov.w	sl, #400	; 0x190
    232a:	b.n	234a <breakTime(long, tmElements_t&)+0x9e>
    232c:	rsb	r5, r6, r5, asr #7
    2330:	mls	r5, sl, r5, r3
    2334:	cbnz	r0, 2394 <breakTime(long, tmElements_t&)+0xe8>
    2336:	cmp	r5, #0
    2338:	ite	ne
    233a:	movne	r0, fp
    233c:	moveq.w	r0, #366	; 0x16e
    2340:	add	r2, r0
    2342:	cmp	ip, r2
    2344:	add.w	r4, r4, #1
    2348:	bcc.n	2372 <breakTime(long, tmElements_t&)+0xc6>
    234a:	uxtb	r7, r4
    234c:	addw	r3, r7, #1970	; 0x7b2
    2350:	smull	r0, r5, r9, r3
    2354:	asrs	r6, r3, #31
    2356:	rsb	r0, r6, r5, asr #5
    235a:	ands.w	lr, r3, #3
    235e:	mls	r0, r8, r0, r3
    2362:	beq.n	232c <breakTime(long, tmElements_t&)+0x80>
    2364:	movw	r0, #365	; 0x16d
    2368:	add	r2, r0
    236a:	cmp	ip, r2
    236c:	add.w	r4, r4, #1
    2370:	bcs.n	234a <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    2372:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2374:	cmp.w	lr, #0
    2378:	bne.n	239a <breakTime(long, tmElements_t&)+0xee>
    237a:	ldr	r0, [pc, #212]	; (2450 <breakTime(long, tmElements_t&)+0x1a4>)
    237c:	asrs	r6, r3, #31
    237e:	smull	r4, r0, r0, r3
    2382:	rsb	r4, r6, r0, asr #5
    2386:	movs	r5, #100	; 0x64
    2388:	mls	r4, r5, r4, r3
    238c:	cbz	r4, 23fe <breakTime(long, tmElements_t&)+0x152>
    238e:	mov.w	r4, #366	; 0x16e
    2392:	b.n	23a0 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2394:	mov.w	r0, #366	; 0x16e
    2398:	b.n	2340 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    239a:	movw	r4, #365	; 0x16d
    239e:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    23a0:	ldr	r0, [pc, #172]	; (2450 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    23a2:	ldr	r5, [pc, #176]	; (2454 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    23a4:	smull	r7, r0, r0, r3
    23a8:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    23ac:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    23ae:	rsb	r6, r6, r0, asr #7
    23b2:	movs	r4, #100	; 0x64
    23b4:	mov.w	r0, #400	; 0x190
    23b8:	mls	r6, r0, r6, r3
    23bc:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    23c0:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    23c4:	movs	r0, #1
    23c6:	movs	r3, #0
    23c8:	b.n	23d0 <breakTime(long, tmElements_t&)+0x124>
    23ca:	adds	r0, #1
    23cc:	uxtb	r0, r0
    23ce:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    23d0:	cmp	r3, #1
    23d2:	uxtb	r7, r3
    23d4:	beq.n	2418 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    23d6:	ldrb	r4, [r3, r5]
    23d8:	cmp	r4, r2
    23da:	bhi.n	23f0 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    23dc:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    23de:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    23e2:	bne.n	23ca <breakTime(long, tmElements_t&)+0x11e>
    23e4:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    23e6:	adds	r2, #1
    23e8:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    23ea:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    23ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23f0:	adds	r7, #1
    23f2:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    23f4:	adds	r2, #1
    23f6:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    23f8:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    23fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    23fe:	mov.w	r4, #400	; 0x190
    2402:	rsb	r0, r6, r0, asr #7
    2406:	mls	r0, r4, r0, r3
    240a:	cmp	r0, #0
    240c:	movw	r4, #365	; 0x16d
    2410:	it	eq
    2412:	moveq.w	r4, #366	; 0x16e
    2416:	b.n	23a0 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2418:	cmp.w	lr, #0
    241c:	bne.n	2434 <breakTime(long, tmElements_t&)+0x188>
    241e:	cmp.w	r8, #0
    2422:	bne.n	243c <breakTime(long, tmElements_t&)+0x190>
    2424:	cmp	r6, #0
    2426:	ite	ne
    2428:	movne	r4, #28
    242a:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    242c:	cmp	r2, r4
    242e:	bcc.n	2438 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    2430:	subs	r2, r2, r4
    2432:	b.n	23ca <breakTime(long, tmElements_t&)+0x11e>
    2434:	movs	r4, #28
    2436:	b.n	242c <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2438:	movs	r7, #2
    243a:	b.n	23e6 <breakTime(long, tmElements_t&)+0x13a>
    243c:	movs	r4, #29
    243e:	b.n	242c <breakTime(long, tmElements_t&)+0x180>
    2440:	.word	0xc22e4507
    2444:	.word	0x88888889
    2448:	.word	0x91a2b3c5
    244c:	.word	0xaaaaaaab
    2450:	.word	0x51eb851f
    2454:	.word	0x000131ac
    2458:	.word	0x24924925

0000245c <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    245c:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    245e:	ldr	r1, [pc, #12]	; (246c <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    2460:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    2462:	bl	22ac <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    2466:	ldr	r3, [pc, #8]	; (2470 <refreshCache(long) [clone .part.0]+0x14>)
    2468:	str	r4, [r3, #0]
    246a:	pop	{r4, pc}
    246c:	.word	0x20019490
    2470:	.word	0x2001948c

00002474 <makeTime(tmElements_t const&)>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(const tmElements_t &tm){   
    2474:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    2478:	ldr	r1, [pc, #228]	; (2560 <makeTime(tmElements_t const&)+0xec>)
    247a:	ldrb	r6, [r0, #6]
    247c:	mul.w	r1, r1, r6
  for (i = 0; i < tm.Year; i++) {
    2480:	cbz	r6, 24c4 <makeTime(tmElements_t const&)+0x50>
    2482:	addw	ip, r6, #1970	; 0x7b2
    2486:	movw	r3, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    248a:	ldr.w	lr, [pc, #216]	; 2564 <makeTime(tmElements_t const&)+0xf0>
    248e:	movs	r7, #100	; 0x64
    2490:	mov.w	r8, #400	; 0x190
    2494:	b.n	24b2 <makeTime(tmElements_t const&)+0x3e>
    2496:	tst.w	r3, #3
    249a:	bne.n	24b0 <makeTime(tmElements_t const&)+0x3c>
    249c:	rsb	r2, r2, r5, asr #7
    24a0:	mls	r2, r8, r2, r3
    24a4:	cbnz	r4, 24a8 <makeTime(tmElements_t const&)+0x34>
    24a6:	cbnz	r2, 24b0 <makeTime(tmElements_t const&)+0x3c>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    24a8:	add.w	r1, r1, #86016	; 0x15000
    24ac:	add.w	r1, r1, #384	; 0x180
    24b0:	adds	r3, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    24b2:	smull	r2, r5, lr, r3
    24b6:	asrs	r2, r3, #31
    24b8:	rsb	r4, r2, r5, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    24bc:	cmp	r3, ip
    if (LEAP_YEAR(i)) {
    24be:	mls	r4, r7, r4, r3
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    24c2:	bne.n	2496 <makeTime(tmElements_t const&)+0x22>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    24c4:	ldrb	r7, [r0, #5]
    24c6:	cmp	r7, #1
    24c8:	ble.n	252a <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    24ca:	ldr	r4, [pc, #152]	; (2564 <makeTime(tmElements_t const&)+0xf0>)
    24cc:	ldr	r2, [pc, #152]	; (2568 <makeTime(tmElements_t const&)+0xf4>)
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    24ce:	ldr.w	lr, [pc, #156]	; 256c <makeTime(tmElements_t const&)+0xf8>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    24d2:	addw	r3, r6, #1970	; 0x7b2
    24d6:	smull	r4, r6, r4, r3
    24da:	asrs	r4, r3, #31
    24dc:	rsb	ip, r4, r6, asr #5
    24e0:	movs	r5, #100	; 0x64
    24e2:	rsb	r6, r4, r6, asr #7
    24e6:	mov.w	r4, #400	; 0x190
    24ea:	mls	ip, r5, ip, r3
    24ee:	mls	r6, r4, r6, r3
    24f2:	and.w	r5, r3, #3
    24f6:	movs	r3, #1
    24f8:	b.n	250a <makeTime(tmElements_t const&)+0x96>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    24fa:	ldrb	r4, [r2, #0]
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    24fc:	adds	r3, #1
    24fe:	cmp	r3, r7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2500:	mla	r1, lr, r4, r1
    2504:	add.w	r2, r2, #1
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2508:	beq.n	252a <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    250a:	cmp	r3, #2
    250c:	bne.n	24fa <makeTime(tmElements_t const&)+0x86>
    250e:	cmp	r5, #0
    2510:	bne.n	24fa <makeTime(tmElements_t const&)+0x86>
    2512:	cmp.w	ip, #0
    2516:	beq.n	2550 <makeTime(tmElements_t const&)+0xdc>
      seconds += SECS_PER_DAY * 29;
    2518:	add.w	r1, r1, #2490368	; 0x260000
    251c:	add.w	r1, r1, #15232	; 0x3b80
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2520:	adds	r3, #1
    2522:	cmp	r3, r7
    2524:	add.w	r2, r2, #1
    2528:	bne.n	250a <makeTime(tmElements_t const&)+0x96>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
    252a:	ldrb	r3, [r0, #1]
    252c:	ldrb	r5, [r0, #2]
    252e:	ldrb	r4, [r0, #0]
    2530:	ldrb	r2, [r0, #4]
    2532:	ldr	r0, [pc, #56]	; (256c <makeTime(tmElements_t const&)+0xf8>)
    2534:	rsb	r3, r3, r3, lsl #4
    2538:	mov.w	r6, #3600	; 0xe10
    253c:	lsls	r3, r3, #2
    253e:	mla	r3, r6, r5, r3
    2542:	add	r3, r4
    2544:	subs	r2, #1
    2546:	mla	r0, r0, r2, r3
}
    254a:	add	r0, r1
    254c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2550:	cmp	r6, #0
    2552:	bne.n	24fa <makeTime(tmElements_t const&)+0x86>
      seconds += SECS_PER_DAY * 29;
    2554:	add.w	r1, r1, #2490368	; 0x260000
    2558:	add.w	r1, r1, #15232	; 0x3b80
    255c:	b.n	2520 <makeTime(tmElements_t const&)+0xac>
    255e:	nop
    2560:	.word	0x01e13380
    2564:	.word	0x51eb851f
    2568:	.word	0x000131ac
    256c:	.word	0x00015180

00002570 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    2570:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2572:	ldr	r4, [pc, #128]	; (25f4 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2574:	ldr	r6, [pc, #128]	; (25f8 <now()+0x88>)
    2576:	ldr	r3, [r4, #0]
    2578:	ldr	r2, [r6, #0]
    257a:	ldr	r5, [pc, #128]	; (25fc <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    257c:	sub	sp, #12
    257e:	ldr	r0, [r5, #0]
    2580:	str	r3, [sp, #0]
	return ret;
    2582:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2584:	subs	r3, r3, r2
    2586:	cmp.w	r3, #1000	; 0x3e8
    258a:	bcc.n	25ac <now()+0x3c>
    258c:	adds	r0, #1
    258e:	b.n	2592 <now()+0x22>
    2590:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2592:	ldr	r3, [r4, #0]
    2594:	str	r3, [sp, #0]
	return ret;
    2596:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    2598:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    259c:	subs	r3, r3, r2
    259e:	cmp.w	r3, #1000	; 0x3e8
    25a2:	add.w	r1, r0, #1
    25a6:	bcs.n	2590 <now()+0x20>
    25a8:	str	r0, [r5, #0]
    25aa:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    25ac:	ldr	r7, [pc, #80]	; (2600 <now()+0x90>)
    25ae:	ldr	r3, [r7, #0]
    25b0:	cmp	r0, r3
    25b2:	bcc.n	25d4 <now()+0x64>
    if (getTimePtr != 0) {
    25b4:	ldr	r3, [pc, #76]	; (2604 <now()+0x94>)
    25b6:	ldr	r3, [r3, #0]
    25b8:	cbz	r3, 25d4 <now()+0x64>
      time_t t = getTimePtr();
    25ba:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    25bc:	ldr	r3, [pc, #72]	; (2608 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    25be:	cbnz	r0, 25d8 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    25c0:	ldr	r1, [pc, #72]	; (260c <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    25c2:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    25c4:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    25c6:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    25c8:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    25ca:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    25cc:	it	ne
    25ce:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    25d0:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    25d2:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    25d4:	add	sp, #12
    25d6:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25d8:	ldr	r2, [r4, #0]
    25da:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    25dc:	ldr	r3, [r3, #0]
  Status = timeSet;
    25de:	ldr	r2, [pc, #44]	; (260c <now()+0x9c>)
	return ret;
    25e0:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    25e2:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    25e4:	add	r3, r0
  Status = timeSet;
    25e6:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    25e8:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    25ea:	str	r3, [r7, #0]
  Status = timeSet;
    25ec:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    25ee:	add	sp, #12
    25f0:	pop	{r4, r5, r6, r7, pc}
    25f2:	nop
    25f4:	.word	0x20019a84
    25f8:	.word	0x200194a4
    25fc:	.word	0x20019498
    2600:	.word	0x200194a8
    2604:	.word	0x200194a0
    2608:	.word	0x2001378c
    260c:	.word	0x2001949c

00002610 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    2610:	push	{r3, lr}
  return hour(now()); 
    2612:	bl	2570 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2616:	ldr	r3, [pc, #16]	; (2628 <hour()+0x18>)
    2618:	ldr	r3, [r3, #0]
    261a:	cmp	r0, r3
    261c:	beq.n	2622 <hour()+0x12>
    261e:	bl	245c <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    2622:	ldr	r3, [pc, #8]	; (262c <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    2624:	ldrb	r0, [r3, #2]
    2626:	pop	{r3, pc}
    2628:	.word	0x2001948c
    262c:	.word	0x20019490

00002630 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    2630:	push	{r3, lr}
  return minute(now()); 
    2632:	bl	2570 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2636:	ldr	r3, [pc, #16]	; (2648 <minute()+0x18>)
    2638:	ldr	r3, [r3, #0]
    263a:	cmp	r0, r3
    263c:	beq.n	2642 <minute()+0x12>
    263e:	bl	245c <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    2642:	ldr	r3, [pc, #8]	; (264c <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    2644:	ldrb	r0, [r3, #1]
    2646:	pop	{r3, pc}
    2648:	.word	0x2001948c
    264c:	.word	0x20019490

00002650 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    2650:	push	{r3, lr}
  return second(now()); 
    2652:	bl	2570 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2656:	ldr	r3, [pc, #16]	; (2668 <second()+0x18>)
    2658:	ldr	r3, [r3, #0]
    265a:	cmp	r0, r3
    265c:	beq.n	2662 <second()+0x12>
    265e:	bl	245c <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    2662:	ldr	r3, [pc, #8]	; (266c <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    2664:	ldrb	r0, [r3, #0]
    2666:	pop	{r3, pc}
    2668:	.word	0x2001948c
    266c:	.word	0x20019490

00002670 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    2670:	push	{r3, lr}
  return(day(now())); 
    2672:	bl	2570 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2676:	ldr	r3, [pc, #16]	; (2688 <day()+0x18>)
    2678:	ldr	r3, [r3, #0]
    267a:	cmp	r0, r3
    267c:	beq.n	2682 <day()+0x12>
    267e:	bl	245c <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    2682:	ldr	r3, [pc, #8]	; (268c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    2684:	ldrb	r0, [r3, #4]
    2686:	pop	{r3, pc}
    2688:	.word	0x2001948c
    268c:	.word	0x20019490

00002690 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    2690:	push	{r3, lr}
  return month(now()); 
    2692:	bl	2570 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2696:	ldr	r3, [pc, #16]	; (26a8 <month()+0x18>)
    2698:	ldr	r3, [r3, #0]
    269a:	cmp	r0, r3
    269c:	beq.n	26a2 <month()+0x12>
    269e:	bl	245c <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    26a2:	ldr	r3, [pc, #8]	; (26ac <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    26a4:	ldrb	r0, [r3, #5]
    26a6:	pop	{r3, pc}
    26a8:	.word	0x2001948c
    26ac:	.word	0x20019490

000026b0 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    26b0:	push	{r3, lr}
  return year(now()); 
    26b2:	bl	2570 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    26b6:	ldr	r3, [pc, #20]	; (26cc <year()+0x1c>)
    26b8:	ldr	r3, [r3, #0]
    26ba:	cmp	r0, r3
    26bc:	beq.n	26c2 <year()+0x12>
    26be:	bl	245c <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    26c2:	ldr	r3, [pc, #12]	; (26d0 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    26c4:	ldrb	r0, [r3, #6]
}
    26c6:	addw	r0, r0, #1970	; 0x7b2
    26ca:	pop	{r3, pc}
    26cc:	.word	0x2001948c
    26d0:	.word	0x20019490

000026d4 <setTime(long)>:
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    26d4:	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26d6:	ldr	r3, [pc, #40]	; (2700 <setTime(long)+0x2c>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    26d8:	ldr	r2, [pc, #40]	; (2704 <setTime(long)+0x30>)
    26da:	ldr	r3, [r3, #0]
    26dc:	ldr	r2, [r2, #0]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    26de:	ldr	r6, [pc, #40]	; (2708 <setTime(long)+0x34>)
  nextSyncTime = (uint32_t)t + syncInterval;
    26e0:	ldr	r5, [pc, #40]	; (270c <setTime(long)+0x38>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    26e2:	ldr	r1, [pc, #44]	; (2710 <setTime(long)+0x3c>)
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    26e4:	str	r0, [r6, #0]
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    26e6:	sub	sp, #12
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    26e8:	add	r0, r2
    26ea:	str	r3, [sp, #4]
	return ret;
    26ec:	ldr	r4, [sp, #4]
  Status = timeSet;
    26ee:	ldr	r3, [pc, #36]	; (2714 <setTime(long)+0x40>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    26f0:	str	r0, [r5, #0]
  Status = timeSet;
    26f2:	movs	r2, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    26f4:	str	r4, [r1, #0]
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    26f6:	strb	r2, [r3, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 
    26f8:	add	sp, #12
    26fa:	pop	{r4, r5, r6}
    26fc:	bx	lr
    26fe:	nop
    2700:	.word	0x20019a84
    2704:	.word	0x2001378c
    2708:	.word	0x20019498
    270c:	.word	0x200194a8
    2710:	.word	0x200194a4
    2714:	.word	0x2001949c

00002718 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    2718:	ldr	r1, [pc, #12]	; (2728 <setSyncProvider(long (*)())+0x10>)
    271a:	ldr	r2, [pc, #16]	; (272c <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    271c:	ldr	r3, [pc, #16]	; (2730 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    271e:	ldr	r1, [r1, #0]
    2720:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2722:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    2724:	b.w	2570 <now()>
    2728:	.word	0x20019498
    272c:	.word	0x200194a8
    2730:	.word	0x200194a0

00002734 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    2734:	push	{r4, lr}
    2736:	mov	r4, r0
		release();
    2738:	bl	a474 <DMAChannel::release()>
	}
    273c:	mov	r0, r4
    273e:	pop	{r4, pc}

00002740 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    2740:	ldr	r2, [pc, #8]	; (274c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    2742:	ldr	r1, [pc, #12]	; (2750 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    2744:	ldr	r0, [pc, #12]	; (2754 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    2746:	b.w	ab2c <__aeabi_atexit>
    274a:	nop
    274c:	.word	0x20013730
    2750:	.word	0x00002735
    2754:	.word	0x200194ac

00002758 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    2758:	ldr	r2, [pc, #8]	; (2764 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    275a:	ldr	r1, [pc, #12]	; (2768 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    275c:	ldr	r0, [pc, #12]	; (276c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    275e:	b.w	ab2c <__aeabi_atexit>
    2762:	nop
    2764:	.word	0x20013730
    2768:	.word	0x00002735
    276c:	.word	0x200194b4

00002770 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    2770:	ldr	r2, [pc, #8]	; (277c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    2772:	ldr	r1, [pc, #12]	; (2780 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    2774:	ldr	r0, [pc, #12]	; (2784 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    2776:	b.w	ab2c <__aeabi_atexit>
    277a:	nop
    277c:	.word	0x20013730
    2780:	.word	0x00002735
    2784:	.word	0x200194bc

00002788 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    2788:	ldr	r2, [pc, #8]	; (2794 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    278a:	ldr	r1, [pc, #12]	; (2798 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    278c:	ldr	r0, [pc, #12]	; (279c <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    278e:	b.w	ab2c <__aeabi_atexit>
    2792:	nop
    2794:	.word	0x20013730
    2798:	.word	0x00002735
    279c:	.word	0x200194c4

000027a0 <AudioInputAnalog::isr()>:
	uint32_t daddr, offset;
	const uint16_t *src, *end;
	uint16_t *dest_left;
	audio_block_t *left;

	daddr = (uint32_t)(dma.TCD->DADDR);
    27a0:	ldr	r2, [pc, #88]	; (27fc <AudioInputAnalog::isr()+0x5c>)
	dma.clearInterrupt();

	if (daddr < (uint32_t)analog_rx_buffer + sizeof(analog_rx_buffer) / 2) {
    27a2:	ldr	r3, [pc, #92]	; (2800 <AudioInputAnalog::isr()+0x60>)
	uint32_t daddr, offset;
	const uint16_t *src, *end;
	uint16_t *dest_left;
	audio_block_t *left;

	daddr = (uint32_t)(dma.TCD->DADDR);
    27a4:	ldr	r1, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    27a6:	ldr	r0, [pc, #92]	; (2804 <AudioInputAnalog::isr()+0x64>)
    27a8:	ldr	r1, [r1, #16]
    27aa:	ldrb	r2, [r2, #4]
    27ac:	strb	r2, [r0, #0]
	dma.clearInterrupt();

	if (daddr < (uint32_t)analog_rx_buffer + sizeof(analog_rx_buffer) / 2) {
    27ae:	cmp	r1, r3
    27b0:	bcs.n	27c4 <AudioInputAnalog::isr()+0x24>
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) AudioStream::update_all();
    27b2:	ldr	r2, [pc, #84]	; (2808 <AudioInputAnalog::isr()+0x68>)
    27b4:	ldrb	r2, [r2, #0]
    27b6:	cbz	r2, 27f6 <AudioInputAnalog::isr()+0x56>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    27b8:	ldr	r2, [pc, #80]	; (280c <AudioInputAnalog::isr()+0x6c>)
    27ba:	movs	r1, #1
    27bc:	str	r1, [r2, #0]

	if (daddr < (uint32_t)analog_rx_buffer + sizeof(analog_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES];
    27be:	add.w	r0, r3, #128	; 0x80
    27c2:	b.n	27c8 <AudioInputAnalog::isr()+0x28>
		if (update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (uint16_t *)&analog_rx_buffer[0];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
    27c4:	mov	r0, r3
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (uint16_t *)&analog_rx_buffer[0];
    27c6:	subs	r3, #128	; 0x80
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = block_left;
    27c8:	ldr	r2, [pc, #68]	; (2810 <AudioInputAnalog::isr()+0x70>)
    27ca:	ldr	r2, [r2, #0]
	if (left != NULL) {
    27cc:	cbz	r2, 27f4 <AudioInputAnalog::isr()+0x54>
	dma.attachInterrupt(isr);
}


void AudioInputAnalog::isr(void)
{
    27ce:	push	{r4}
		src = (uint16_t *)&analog_rx_buffer[0];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = block_left;
	if (left != NULL) {
		offset = block_offset;
    27d0:	ldr	r4, [pc, #64]	; (2814 <AudioInputAnalog::isr()+0x74>)
    27d2:	ldrh	r1, [r4, #0]
    27d4:	cmp	r1, #64	; 0x40
    27d6:	it	cs
    27d8:	movcs	r1, #64	; 0x40
		if (offset > AUDIO_BLOCK_SAMPLES/2) offset = AUDIO_BLOCK_SAMPLES/2;
		dest_left = (uint16_t *)&(left->data[offset]);
    27da:	add.w	r2, r2, r1, lsl #1
		block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    27de:	adds	r1, #64	; 0x40
    27e0:	strh	r1, [r4, #0]
    27e2:	adds	r2, #2
		do {
			*dest_left++ = *src++;
    27e4:	ldrh.w	r1, [r3], #2
    27e8:	strh.w	r1, [r2, #2]!
		} while (src < end);
    27ec:	cmp	r0, r3
    27ee:	bhi.n	27e4 <AudioInputAnalog::isr()+0x44>
	}
}
    27f0:	ldr.w	r4, [sp], #4
    27f4:	bx	lr

	if (daddr < (uint32_t)analog_rx_buffer + sizeof(analog_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES];
    27f6:	add.w	r0, r3, #128	; 0x80
    27fa:	b.n	27c8 <AudioInputAnalog::isr()+0x28>
    27fc:	.word	0x200194dc
    2800:	.word	0x20013020
    2804:	.word	0x4000801f
    2808:	.word	0x200194e4
    280c:	.word	0xe000e208
    2810:	.word	0x200194d8
    2814:	.word	0x200194d0

00002818 <AudioInputAnalog::update()>:
		} while (src < end);
	}
}

void AudioInputAnalog::update(void)
{
    2818:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    281c:	mov	r5, r0
	int16_t s, *p, *end;

	//Serial.println("update");

	// allocate new block (ok if NULL)
	new_left = allocate();
    281e:	bl	a6a0 <AudioStream::allocate()>
    2822:	mov	r2, r0

	__disable_irq();
    2824:	cpsid	i
	offset = block_offset;
    2826:	ldr	r3, [pc, #140]	; (28b4 <AudioInputAnalog::update()+0x9c>)
	if (offset < AUDIO_BLOCK_SAMPLES) {
    2828:	ldrh	r1, [r3, #0]
    282a:	cmp	r1, #127	; 0x7f
    282c:	bhi.n	2844 <AudioInputAnalog::update()+0x2c>
		// the DMA didn't fill a block
		if (new_left != NULL) {
    282e:	cmp	r0, #0
    2830:	beq.n	28a2 <AudioInputAnalog::update()+0x8a>
			// but we allocated a block
			if (block_left == NULL) {
    2832:	ldr	r4, [pc, #132]	; (28b8 <AudioInputAnalog::update()+0xa0>)
    2834:	ldr	r1, [r4, #0]
    2836:	cmp	r1, #0
    2838:	beq.n	28a8 <AudioInputAnalog::update()+0x90>
				block_offset = 0;
				__enable_irq();
	 			 //Serial.println("fail1");
			} else {
				// the DMA already has blocks, doesn't need this
				__enable_irq();
    283a:	cpsie	i
	} while (p < end);

	// then transmit the AC data
	transmit(out_left);
	release(out_left);
}
    283c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				__enable_irq();
	 			 //Serial.println("fail1");
			} else {
				// the DMA already has blocks, doesn't need this
				__enable_irq();
				release(new_left);
    2840:	b.w	a748 <AudioStream::release(audio_block_struct*)>
		}
		return;
	}
	// the DMA filled a block, so grab it and get the
	// new block to the DMA, as quickly as possible
	out_left = block_left;
    2844:	ldr	r1, [pc, #112]	; (28b8 <AudioInputAnalog::update()+0xa0>)
	block_left = new_left;
	block_offset = 0;
    2846:	movs	r0, #0
		}
		return;
	}
	// the DMA filled a block, so grab it and get the
	// new block to the DMA, as quickly as possible
	out_left = block_left;
    2848:	ldr	r6, [r1, #0]
	block_left = new_left;
	block_offset = 0;
    284a:	strh	r0, [r3, #0]
		return;
	}
	// the DMA filled a block, so grab it and get the
	// new block to the DMA, as quickly as possible
	out_left = block_left;
	block_left = new_left;
    284c:	str	r2, [r1, #0]
	block_offset = 0;
	__enable_irq();
    284e:	cpsie	i
    2850:	ldr.w	lr, [pc, #108]	; 28c0 <AudioInputAnalog::update()+0xa8>
    2854:	ldr	r7, [pc, #100]	; (28bc <AudioInputAnalog::update()+0xa4>)
    2856:	ldr.w	r3, [lr]
    285a:	ldr	r4, [r7, #0]
    asm ("smull    %[t], %[t2], %[a], %[b]\n\t"
         "mov      %[t2], %[t2], asl %[c]\n\t"
         "orr      %[t], %[t2], %[t], lsr %[d]\n\t"
         : [t] "=&r" (t), [t2] "=&r" (t2)
         : [a] "r" (x), [b] "r" (y),
           [c] "Mr" ((z) + 1), [d] "Mr" (31 - (z)));
    285c:	ldr.w	ip, [pc, #100]	; 28c4 <AudioInputAnalog::update()+0xac>
    //   y = a*(x[n] - x[n-1] + y[n-1])
    // The coefficient "a" is as follows:
    //  a = UNITY*e^(-2*pi*fc/fs)
    //  fc = 2 @ fs = 44100
    //
	p = out_left->data;
    2860:	adds	r1, r6, #4
	end = p + AUDIO_BLOCK_SAMPLES;
    2862:	add.w	r8, r6, #260	; 0x104
	do {
		tmp = (uint16_t)(*p);
    2866:	ldrh	r2, [r1, #0]
        tmp = ( ((int32_t) tmp) << 14);
        int32_t acc = hpf_y1 - hpf_x1;
    2868:	subs	r3, r3, r4
    //
	p = out_left->data;
	end = p + AUDIO_BLOCK_SAMPLES;
	do {
		tmp = (uint16_t)(*p);
        tmp = ( ((int32_t) tmp) << 14);
    286a:	lsls	r2, r2, #14
    286c:	adds	r0, r2, r3
    286e:	smull	r3, r4, r0, ip
    2872:	mov.w	r4, r4, lsl #2
    2876:	orr.w	r3, r4, r3, lsr #30
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    287a:	ssat	r0, #16, r3, asr #14
        int32_t acc = hpf_y1 - hpf_x1;
        acc += tmp;
        hpf_y1 = FRACMUL_SHL(acc, COEF_HPF_DCBLOCK, 1);
        hpf_x1 = tmp;
		s = signed_saturate_rshift(hpf_y1, 16, 14);
		*p++ = s;
    287e:	strh.w	r0, [r1], #2
	} while (p < end);
    2882:	cmp	r8, r1
    //
	p = out_left->data;
	end = p + AUDIO_BLOCK_SAMPLES;
	do {
		tmp = (uint16_t)(*p);
        tmp = ( ((int32_t) tmp) << 14);
    2884:	mov	r4, r2
        acc += tmp;
        hpf_y1 = FRACMUL_SHL(acc, COEF_HPF_DCBLOCK, 1);
        hpf_x1 = tmp;
		s = signed_saturate_rshift(hpf_y1, 16, 14);
		*p++ = s;
	} while (p < end);
    2886:	bhi.n	2866 <AudioInputAnalog::update()+0x4e>

	// then transmit the AC data
	transmit(out_left);
    2888:	mov	r0, r5
    288a:	mov	r1, r6
    288c:	movs	r2, #0
    288e:	str.w	r3, [lr]
    2892:	str	r4, [r7, #0]
    2894:	bl	a79c <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(out_left);
    2898:	mov	r0, r6
}
    289a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		*p++ = s;
	} while (p < end);

	// then transmit the AC data
	transmit(out_left);
	release(out_left);
    289e:	b.w	a748 <AudioStream::release(audio_block_struct*)>
			}
		} else {
			// The DMA didn't fill a block, and we could not allocate
			// memory... the system is likely starving for memory!
			// Sadly, there's nothing we can do.
			__enable_irq();
    28a2:	cpsie	i
    28a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (new_left != NULL) {
			// but we allocated a block
			if (block_left == NULL) {
				// the DMA doesn't have any blocks to fill, so
				// give it the one we just allocated
				block_left = new_left;
    28a8:	str	r0, [r4, #0]
				block_offset = 0;
    28aa:	strh	r1, [r3, #0]
				__enable_irq();
    28ac:	cpsie	i
    28ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28b2:	nop
    28b4:	.word	0x200194d0
    28b8:	.word	0x200194d8
    28bc:	.word	0x200194d4
    28c0:	.word	0x200194cc
    28c4:	.word	0x3ffbb000

000028c8 <AudioInputAnalog::init(unsigned char)>:

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);

void AudioInputAnalog::init(uint8_t pin)
{
    28c8:	push	{r3, r4, r5, r6, r7, lr}
    28ca:	mov	r4, r0
	int32_t tmp;

	// Configure the ADC and run at least one software-triggered
	// conversion.  This completes the self calibration stuff and
	// leaves the ADC in a state that's mostly ready to use
	analogReadRes(16);
    28cc:	movs	r0, #16
    28ce:	bl	8ef4 <analogReadRes>
	analogReference(INTERNAL); // range 0 to 1.2 volts
    28d2:	movs	r0, #2
    28d4:	bl	8ea8 <analogReference>
#if F_BUS == 96000000 || F_BUS == 48000000 || F_BUS == 24000000
	analogReadAveraging(8);
    28d8:	movs	r0, #8
    28da:	bl	8f5c <analogReadAveraging>
	analogReadAveraging(4);
#endif
	// Note for review:
	// Probably not useful to spin cycles here stabilizing
	// since DC blocking is similar to te external analog filters
	tmp = (uint16_t) analogRead(pin);
    28de:	mov	r0, r4
    28e0:	bl	8fd8 <analogRead>
	tmp = ( ((int32_t) tmp) << 14);
	hpf_x1 = tmp;   // With constant DC level x1 would be x0
    28e4:	ldr	r3, [pc, #252]	; (29e4 <AudioInputAnalog::init(unsigned char)+0x11c>)
    28e6:	ldr	r4, [pc, #256]	; (29e8 <AudioInputAnalog::init(unsigned char)+0x120>)
	hpf_y1 = 0;     // Output will settle here when stable
    28e8:	ldr	r1, [pc, #256]	; (29ec <AudioInputAnalog::init(unsigned char)+0x124>)

	// set the programmable delay block to trigger the ADC at 44.1 kHz
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
    28ea:	ldr	r2, [pc, #260]	; (29f0 <AudioInputAnalog::init(unsigned char)+0x128>)
	// Note for review:
	// Probably not useful to spin cycles here stabilizing
	// since DC blocking is similar to te external analog filters
	tmp = (uint16_t) analogRead(pin);
	tmp = ( ((int32_t) tmp) << 14);
	hpf_x1 = tmp;   // With constant DC level x1 would be x0
    28ec:	lsls	r0, r0, #14
    28ee:	ands	r3, r0
	hpf_y1 = 0;     // Output will settle here when stable
    28f0:	movs	r0, #0
	// Note for review:
	// Probably not useful to spin cycles here stabilizing
	// since DC blocking is similar to te external analog filters
	tmp = (uint16_t) analogRead(pin);
	tmp = ( ((int32_t) tmp) << 14);
	hpf_x1 = tmp;   // With constant DC level x1 would be x0
    28f2:	str	r3, [r4, #0]
	hpf_y1 = 0;     // Output will settle here when stable
    28f4:	str	r0, [r1, #0]

	// set the programmable delay block to trigger the ADC at 44.1 kHz
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
    28f6:	ldr	r3, [r2, #0]
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
    28f8:	lsls	r3, r3, #9
    28fa:	bpl.n	290e <AudioInputAnalog::init(unsigned char)+0x46>
	hpf_x1 = tmp;   // With constant DC level x1 would be x0
	hpf_y1 = 0;     // Output will settle here when stable

	// set the programmable delay block to trigger the ADC at 44.1 kHz
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
    28fc:	ldr	r3, [pc, #244]	; (29f4 <AudioInputAnalog::init(unsigned char)+0x12c>)
    28fe:	ldr	r2, [r3, #0]
    2900:	movw	r3, #36770	; 0x8fa2
    2904:	ands	r3, r2
    2906:	movw	r2, #36770	; 0x8fa2
    290a:	cmp	r3, r2
    290c:	beq.n	29c0 <AudioInputAnalog::init(unsigned char)+0xf8>
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    290e:	ldr	r1, [pc, #224]	; (29f0 <AudioInputAnalog::init(unsigned char)+0x128>)
		PDB0_IDLY = 1;
		PDB0_MOD = PDB_PERIOD;
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    2910:	ldr	r2, [pc, #224]	; (29f4 <AudioInputAnalog::init(unsigned char)+0x12c>)
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    2912:	ldr	r3, [r1, #0]
		PDB0_IDLY = 1;
    2914:	ldr	r7, [pc, #224]	; (29f8 <AudioInputAnalog::init(unsigned char)+0x130>)
		PDB0_MOD = PDB_PERIOD;
    2916:	ldr	r5, [pc, #228]	; (29fc <AudioInputAnalog::init(unsigned char)+0x134>)
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
		PDB0_CH0C1 = 0x0101;
    2918:	ldr	r0, [pc, #228]	; (2a00 <AudioInputAnalog::init(unsigned char)+0x138>)
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
		PDB0_IDLY = 1;
		PDB0_MOD = PDB_PERIOD;
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
    291a:	ldr	r4, [pc, #232]	; (2a04 <AudioInputAnalog::init(unsigned char)+0x13c>)
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    291c:	orr.w	r3, r3, #4194304	; 0x400000
    2920:	str	r3, [r1, #0]
		PDB0_IDLY = 1;
    2922:	mov.w	lr, #1
		PDB0_MOD = PDB_PERIOD;
    2926:	movw	r6, #1087	; 0x43f
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    292a:	movw	r1, #36771	; 0x8fa3
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
		PDB0_CH0C1 = 0x0101;
    292e:	movw	r3, #257	; 0x101
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
		PDB0_IDLY = 1;
    2932:	str.w	lr, [r7]
		PDB0_MOD = PDB_PERIOD;
    2936:	str	r6, [r5, #0]
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    2938:	str	r1, [r2, #0]
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
    293a:	str	r4, [r2, #0]
		PDB0_CH0C1 = 0x0101;
    293c:	str	r3, [r0, #0]
	}
	// enable the ADC for hardware trigger and DMA
	ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;
    293e:	ldr	r2, [pc, #200]	; (2a08 <AudioInputAnalog::init(unsigned char)+0x140>)

	// set up a DMA channel to store the ADC data
	dma.begin(true);
    2940:	ldr	r4, [pc, #200]	; (2a0c <AudioInputAnalog::init(unsigned char)+0x144>)
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
		PDB0_CH0C1 = 0x0101;
	}
	// enable the ADC for hardware trigger and DMA
	ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;
    2942:	ldr	r3, [r2, #0]
    2944:	orr.w	r3, r3, #68	; 0x44
    2948:	str	r3, [r2, #0]

	// set up a DMA channel to store the ADC data
	dma.begin(true);
    294a:	mov	r0, r4
    294c:	movs	r1, #1
    294e:	bl	a3a8 <DMAChannel::begin(bool)>
	dma.TCD->SADDR = &ADC0_RA;
    2952:	ldr	r3, [r4, #0]
    2954:	ldr	r2, [pc, #184]	; (2a10 <AudioInputAnalog::init(unsigned char)+0x148>)
    2956:	str	r2, [r3, #0]
	dma.TCD->SOFF = 0;
    2958:	movs	r1, #0
    295a:	strh	r1, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    295c:	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
    295e:	ldr	r0, [pc, #180]	; (2a14 <AudioInputAnalog::init(unsigned char)+0x14c>)
    2960:	str	r0, [r3, #16]
    2962:	add.w	r2, r2, #1073741824	; 0x40000000
    2966:	add.w	r2, r2, #135168	; 0x21000

	// set up a DMA channel to store the ADC data
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    296a:	movw	r0, #257	; 0x101
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
    296e:	mvn.w	r6, #255	; 0xff

	// set up a DMA channel to store the ADC data
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    2972:	strh	r0, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
    2974:	str	r6, [r3, #24]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
    2976:	movs	r5, #128	; 0x80
	// set up a DMA channel to store the ADC data
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    2978:	movs	r0, #2
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    297a:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    297c:	movs	r6, #168	; 0xa8
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
    297e:	strh	r5, [r3, #22]
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
    2980:	str	r1, [r3, #12]
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
    2982:	strh	r5, [r3, #30]
	// set up a DMA channel to store the ADC data
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    2984:	str	r0, [r3, #8]
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2986:	strh	r7, [r3, #28]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
    2988:	strh	r0, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    298a:	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    298c:	strb	r6, [r2, #0]
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_ADC0);
	update_responsibility = update_setup();
    298e:	bl	a8cc <AudioStream::update_setup()>
    2992:	ldrb	r2, [r4, #4]
    2994:	ldr	r3, [pc, #128]	; (2a18 <AudioInputAnalog::init(unsigned char)+0x150>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2996:	ldr	r6, [pc, #132]	; (2a1c <AudioInputAnalog::init(unsigned char)+0x154>)
    2998:	strb	r0, [r3, #0]
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    299a:	asrs	r3, r2, #5
    299c:	lsls	r3, r3, #2
    299e:	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    29a2:	ldr	r4, [pc, #124]	; (2a20 <AudioInputAnalog::init(unsigned char)+0x158>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    29a4:	strb	r2, [r6, #0]
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    29a6:	add.w	r3, r3, #57600	; 0xe100

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    29aa:	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    29ae:	and.w	r7, r2, #31
    29b2:	movs	r1, #1

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    29b4:	ldr	r5, [pc, #108]	; (2a24 <AudioInputAnalog::init(unsigned char)+0x15c>)
    29b6:	str.w	r5, [r4, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    29ba:	lsls	r1, r7
    29bc:	str	r1, [r3, #0]
	dma.enable();
	dma.attachInterrupt(isr);
}
    29be:	pop	{r3, r4, r5, r6, r7, pc}
	hpf_y1 = 0;     // Output will settle here when stable

	// set the programmable delay block to trigger the ADC at 44.1 kHz
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
    29c0:	ldr	r3, [pc, #56]	; (29fc <AudioInputAnalog::init(unsigned char)+0x134>)
    29c2:	ldr	r2, [r3, #0]
    29c4:	movw	r3, #1087	; 0x43f
    29c8:	cmp	r2, r3
    29ca:	bne.n	290e <AudioInputAnalog::init(unsigned char)+0x46>
	  || PDB0_IDLY != 1
    29cc:	ldr	r3, [pc, #40]	; (29f8 <AudioInputAnalog::init(unsigned char)+0x130>)
    29ce:	ldr	r3, [r3, #0]
    29d0:	cmp	r3, #1
    29d2:	bne.n	290e <AudioInputAnalog::init(unsigned char)+0x46>
	  || PDB0_CH0C1 != 0x0101) {
    29d4:	ldr	r3, [pc, #40]	; (2a00 <AudioInputAnalog::init(unsigned char)+0x138>)
    29d6:	ldr	r2, [r3, #0]
    29d8:	movw	r3, #257	; 0x101
    29dc:	cmp	r2, r3
    29de:	bne.n	290e <AudioInputAnalog::init(unsigned char)+0x46>
    29e0:	b.n	293e <AudioInputAnalog::init(unsigned char)+0x76>
    29e2:	nop
    29e4:	.word	0x3fffc000
    29e8:	.word	0x200194d4
    29ec:	.word	0x200194cc
    29f0:	.word	0x4004803c
    29f4:	.word	0x40036000
    29f8:	.word	0x4003600c
    29fc:	.word	0x40036004
    2a00:	.word	0x40036010
    2a04:	.word	0x00018fa2
    2a08:	.word	0x4003b020
    2a0c:	.word	0x200194dc
    2a10:	.word	0x4003b010
    2a14:	.word	0x20012fa0
    2a18:	.word	0x200194e4
    2a1c:	.word	0x4000801b
    2a20:	.word	0x20013200
    2a24:	.word	0x000027a1

00002a28 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    2a28:	ldr	r2, [pc, #8]	; (2a34 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    2a2a:	ldr	r1, [pc, #12]	; (2a38 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    2a2c:	ldr	r0, [pc, #12]	; (2a3c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    2a2e:	b.w	ab2c <__aeabi_atexit>
    2a32:	nop
    2a34:	.word	0x20013730
    2a38:	.word	0x00002735
    2a3c:	.word	0x200194dc

00002a40 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    2a40:	ldr	r2, [pc, #8]	; (2a4c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    2a42:	ldr	r1, [pc, #12]	; (2a50 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    2a44:	ldr	r0, [pc, #12]	; (2a54 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    2a46:	b.w	ab2c <__aeabi_atexit>
    2a4a:	nop
    2a4c:	.word	0x20013730
    2a50:	.word	0x00002735
    2a54:	.word	0x200194e8

00002a58 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2a58:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    2a5a:	ldr	r5, [pc, #28]	; (2a78 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    2a5c:	ldr	r4, [pc, #28]	; (2a7c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    2a5e:	ldr	r0, [pc, #32]	; (2a80 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    2a60:	mov	r2, r5
    2a62:	mov	r1, r4
    2a64:	bl	ab2c <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    2a68:	mov	r2, r5
    2a6a:	mov	r1, r4
    2a6c:	ldr	r0, [pc, #20]	; (2a84 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2a6e:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    2a72:	b.w	ab2c <__aeabi_atexit>
    2a76:	nop
    2a78:	.word	0x20013730
    2a7c:	.word	0x00002735
    2a80:	.word	0x200194f0
    2a84:	.word	0x200194f8

00002a88 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    2a88:	ldr	r2, [pc, #8]	; (2a94 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    2a8a:	ldr	r1, [pc, #12]	; (2a98 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    2a8c:	ldr	r0, [pc, #12]	; (2a9c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    2a8e:	b.w	ab2c <__aeabi_atexit>
    2a92:	nop
    2a94:	.word	0x20013730
    2a98:	.word	0x00002735
    2a9c:	.word	0x20019500

00002aa0 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    2aa0:	ldr	r2, [pc, #8]	; (2aac <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    2aa2:	ldr	r1, [pc, #12]	; (2ab0 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    2aa4:	ldr	r0, [pc, #12]	; (2ab4 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    2aa6:	b.w	ab2c <__aeabi_atexit>
    2aaa:	nop
    2aac:	.word	0x20013730
    2ab0:	.word	0x00002735
    2ab4:	.word	0x20019508

00002ab8 <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2ab8:	ldr	r0, [r0, #16]
    2aba:	cbz	r0, 2ac2 <File::read(void*, unsigned int)+0xa>
    2abc:	ldr	r3, [r0, #0]
    2abe:	ldr	r3, [r3, #40]	; 0x28
    2ac0:	bx	r3
	}
    2ac2:	bx	lr

00002ac4 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2ac4:	ldr	r0, [r0, #16]
    2ac6:	cbz	r0, 2ace <File::write(void const*, unsigned int)+0xa>
    2ac8:	ldr	r3, [r0, #0]
    2aca:	ldr	r3, [r3, #44]	; 0x2c
    2acc:	bx	r3
	}
    2ace:	bx	lr

00002ad0 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
    2ad0:	ldr	r0, [r0, #16]
    2ad2:	cbz	r0, 2ada <File::available()+0xa>
    2ad4:	ldr	r3, [r0, #0]
    2ad6:	ldr	r3, [r3, #16]
    2ad8:	bx	r3
	}
    2ada:	bx	lr

00002adc <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
    2adc:	ldr	r0, [r0, #16]
    2ade:	cbz	r0, 2ae6 <File::peek()+0xa>
    2ae0:	ldr	r3, [r0, #0]
    2ae2:	ldr	r3, [r3, #24]
    2ae4:	bx	r3
	}
    2ae6:	mov.w	r0, #4294967295
    2aea:	bx	lr

00002aec <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
    2aec:	ldr	r0, [r0, #16]
    2aee:	cbz	r0, 2af6 <File::flush()+0xa>
    2af0:	ldr	r3, [r0, #0]
    2af2:	ldr	r3, [r3, #12]
    2af4:	bx	r3
    2af6:	bx	lr

00002af8 <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
    2af8:	ldr	r0, [r0, #16]
    2afa:	cbz	r0, 2b02 <File::truncate(unsigned long long)+0xa>
    2afc:	ldr	r1, [r0, #0]
    2afe:	ldr	r1, [r1, #48]	; 0x30
    2b00:	bx	r1
	}
    2b02:	bx	lr

00002b04 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
    2b04:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
    2b06:	ldr	r0, [r0, #16]
    2b08:	cbz	r0, 2b14 <File::seek(unsigned long long, int)+0x10>
    2b0a:	ldr	r4, [r0, #0]
    2b0c:	ldr	r1, [r4, #52]	; 0x34
	}
    2b0e:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2b12:	bx	r1
	}
    2b14:	ldr.w	r4, [sp], #4
    2b18:	bx	lr
    2b1a:	nop

00002b1c <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
    2b1c:	ldr	r0, [r0, #16]
    2b1e:	cbz	r0, 2b26 <File::position()+0xa>
    2b20:	ldr	r3, [r0, #0]
    2b22:	ldr	r3, [r3, #56]	; 0x38
    2b24:	bx	r3
	}
    2b26:	movs	r0, #0
    2b28:	movs	r1, #0
    2b2a:	bx	lr

00002b2c <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2b2c:	ldr	r0, [r0, #16]
    2b2e:	cbz	r0, 2b36 <File::size()+0xa>
    2b30:	ldr	r3, [r0, #0]
    2b32:	ldr	r3, [r3, #60]	; 0x3c
    2b34:	bx	r3
	}
    2b36:	movs	r0, #0
    2b38:	movs	r1, #0
    2b3a:	bx	lr

00002b3c <File::close()>:
	virtual void close() {
		if (f) f->close();
    2b3c:	ldr	r0, [r0, #16]
    2b3e:	cbz	r0, 2b46 <File::close()+0xa>
    2b40:	ldr	r3, [r0, #0]
    2b42:	ldr	r3, [r3, #64]	; 0x40
    2b44:	bx	r3
    2b46:	bx	lr

00002b48 <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2b48:	ldr	r0, [r0, #16]
    2b4a:	cbz	r0, 2b52 <File::operator bool()+0xa>
    2b4c:	ldr	r3, [r0, #0]
    2b4e:	ldr	r3, [r3, #68]	; 0x44
    2b50:	bx	r3
	}
    2b52:	bx	lr

00002b54 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
    2b54:	ldr	r0, [r0, #16]
    2b56:	cbz	r0, 2b5e <File::name()+0xa>
    2b58:	ldr	r3, [r0, #0]
    2b5a:	ldr	r3, [r3, #72]	; 0x48
    2b5c:	bx	r3
	}
    2b5e:	ldr	r0, [pc, #4]	; (2b64 <File::name()+0x10>)
    2b60:	bx	lr
    2b62:	nop
    2b64:	.word	0x00012db0

00002b68 <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    2b68:	ldr	r0, [r0, #16]
    2b6a:	cbz	r0, 2b72 <File::isDirectory()+0xa>
    2b6c:	ldr	r3, [r0, #0]
    2b6e:	ldr	r3, [r3, #76]	; 0x4c
    2b70:	bx	r3
	}
    2b72:	bx	lr

00002b74 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
    2b74:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
    2b76:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
    2b78:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
    2b7a:	cbz	r3, 2b88 <File::openNextFile(unsigned char)+0x14>
    2b7c:	ldr	r5, [r3, #0]
    2b7e:	mov	r1, r3
    2b80:	ldr	r3, [r5, #80]	; 0x50
    2b82:	blx	r3
	}
    2b84:	mov	r0, r4
    2b86:	pop	{r3, r4, r5, pc}
    2b88:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2b8c:	ldr	r2, [pc, #24]	; (2ba8 <File::openNextFile(unsigned char)+0x34>)
    2b8e:	strb	r3, [r4, #4]
    2b90:	strb	r3, [r4, #12]
    2b92:	str	r0, [r4, #8]
    2b94:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    2b96:	ldr	r3, [r1, #16]
    2b98:	str	r3, [r4, #16]
		if (f) f->refcount++;
    2b9a:	cmp	r3, #0
    2b9c:	beq.n	2b84 <File::openNextFile(unsigned char)+0x10>
    2b9e:	ldr	r2, [r3, #16]
    2ba0:	adds	r2, #1
    2ba2:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
    2ba4:	mov	r0, r4
    2ba6:	pop	{r3, r4, r5, pc}
    2ba8:	.word	0x000131f0

00002bac <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
    2bac:	ldr	r0, [r0, #16]
    2bae:	cbz	r0, 2bb6 <File::rewindDirectory()+0xa>
    2bb0:	ldr	r3, [r0, #0]
    2bb2:	ldr	r3, [r3, #84]	; 0x54
    2bb4:	bx	r3
    2bb6:	bx	lr

00002bb8 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    2bb8:	ldr	r0, [r0, #16]
    2bba:	cbz	r0, 2bde <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
    2bbc:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    2bbe:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
    2bc0:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    2bc2:	ldr	r3, [r3, #40]	; 0x28
    2bc4:	movs	r2, #1
    2bc6:	add.w	r1, sp, #7
    2bca:	blx	r3
    2bcc:	cbz	r0, 2bd8 <File::read()+0x20>
		return b;
    2bce:	ldrb.w	r0, [sp, #7]
	}
    2bd2:	add	sp, #12
    2bd4:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    2bd8:	mov.w	r0, #4294967295
    2bdc:	b.n	2bd2 <File::read()+0x1a>
    2bde:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
    2be2:	bx	lr

00002be4 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
    2be4:	push	{r4, lr}
    2be6:	sub	sp, #8
    2be8:	add	r3, sp, #8
		return write(&b, 1);
    2bea:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
    2bec:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
    2bf0:	ldr	r4, [r2, #44]	; 0x2c
    2bf2:	mov	r1, r3
    2bf4:	movs	r2, #1
    2bf6:	blx	r4
	}
    2bf8:	add	sp, #8
    2bfa:	pop	{r4, pc}

00002bfc <SDFile::operator bool()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2bfc:	ldr	r3, [r0, #92]	; 0x5c
    2bfe:	cbz	r3, 2c04 <SDFile::operator bool()+0x8>
    2c00:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
    2c02:	bx	lr
    2c04:	ldr	r0, [r0, #96]	; 0x60
    2c06:	adds	r0, #0
    2c08:	it	ne
    2c0a:	movne	r0, #1
    2c0c:	bx	lr
    2c0e:	nop

00002c10 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
    2c10:	push	{r4, lr}
    2c12:	mov	r4, r0
		if (filename) {
    2c14:	ldr	r0, [r0, #100]	; 0x64
    2c16:	cbz	r0, 2c20 <SDFile::close()+0x10>
			free(filename);
    2c18:	bl	b918 <free>
			filename = nullptr;
    2c1c:	movs	r3, #0
    2c1e:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
    2c20:	add.w	r0, r4, #36	; 0x24
	}
    2c24:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
    2c28:	b.w	6cbc <FsBaseFile::close()>

00002c2c <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
    2c2c:	push	{r4, lr}
    2c2e:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
    2c30:	mov	r2, r0
    2c32:	ldr	r3, [r0, #16]
    2c34:	ldr	r1, [pc, #20]	; (2c4c <File::whoami()+0x20>)
    2c36:	ldr	r0, [pc, #24]	; (2c50 <File::whoami()+0x24>)
    2c38:	bl	a588 <Print::printf(char const*, ...)>
		if (f) f->whoami();
    2c3c:	ldr	r0, [r4, #16]
    2c3e:	cbz	r0, 2c4a <File::whoami()+0x1e>
    2c40:	ldr	r3, [r0, #0]
	}
    2c42:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
    2c46:	ldr	r3, [r3, #36]	; 0x24
    2c48:	bx	r3
    2c4a:	pop	{r4, pc}
    2c4c:	.word	0x000132a8
    2c50:	.word	0x200138e4

00002c54 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
    2c54:	mov	r2, r0
    2c56:	ldr	r3, [r0, #16]
    2c58:	ldr	r1, [pc, #4]	; (2c60 <SDFile::whoami()+0xc>)
    2c5a:	ldr	r0, [pc, #8]	; (2c64 <SDFile::whoami()+0x10>)
    2c5c:	b.w	a588 <Print::printf(char const*, ...)>
    2c60:	.word	0x000132c4
    2c64:	.word	0x200138e4

00002c68 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
    2c68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c6c:	movs	r3, #0
    2c6e:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    2c70:	mov	r2, r3
    2c72:	mov	r5, r0
    2c74:	adds	r1, #36	; 0x24
    2c76:	add	r0, sp, #16
    2c78:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2c7c:	ldr	r7, [pc, #148]	; (2d14 <SDFile::openNextFile(unsigned char)+0xac>)
    2c7e:	strb.w	r3, [sp, #4]
    2c82:	strb.w	r3, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    2c86:	str	r3, [sp, #72]	; 0x48
    2c88:	str	r3, [sp, #76]	; 0x4c
    2c8a:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2c8c:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    2c8e:	bl	6d64 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2c92:	ldr	r3, [sp, #72]	; 0x48
    2c94:	cmp	r3, #0
    2c96:	beq.n	2cfe <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
    2c98:	movs	r0, #104	; 0x68
    2c9a:	bl	aa50 <operator new(unsigned int)>
    2c9e:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    2ca0:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    2ca4:	ldr	r2, [sp, #8]
    2ca6:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2caa:	ldr	r0, [pc, #108]	; (2d18 <SDFile::openNextFile(unsigned char)+0xb0>)
    2cac:	ldr	r1, [pc, #108]	; (2d1c <SDFile::openNextFile(unsigned char)+0xb4>)
    2cae:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2cb0:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    2cb4:	movs	r6, #0
    2cb6:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    2cb8:	str	r1, [r4, #20]
    2cba:	str	r2, [r4, #28]
    2cbc:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    2cc0:	add.w	r0, r4, #36	; 0x24
    2cc4:	add	r1, sp, #16
    2cc6:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2cc8:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    2cca:	str	r6, [r4, #16]
    2ccc:	str.w	r8, [r4, #8]
    2cd0:	bl	6c44 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    2cd4:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    2cd6:	ldr	r2, [pc, #72]	; (2d20 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2cd8:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    2cda:	adds	r3, #1
    2cdc:	str	r6, [r4, #100]	; 0x64
    2cde:	strb	r6, [r5, #4]
    2ce0:	str.w	r8, [r5, #8]
    2ce4:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    2ce6:	str	r4, [r5, #16]
		if (f) f->refcount++;
    2ce8:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    2cea:	str	r2, [r5, #0]
    2cec:	ldr	r3, [pc, #52]	; (2d24 <SDFile::openNextFile(unsigned char)+0xbc>)
    2cee:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    2cf0:	add	r0, sp, #16
    2cf2:	bl	6cbc <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
    2cf6:	mov	r0, r5
    2cf8:	add	sp, #80	; 0x50
    2cfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2cfe:	ldr	r3, [sp, #76]	; 0x4c
    2d00:	cmp	r3, #0
    2d02:	bne.n	2c98 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    2d04:	ldr	r2, [pc, #24]	; (2d20 <SDFile::openNextFile(unsigned char)+0xb8>)
    2d06:	strb	r3, [r5, #4]
    2d08:	str	r4, [r5, #8]
    2d0a:	strb	r3, [r5, #12]
    2d0c:	str	r3, [r5, #16]
    2d0e:	str	r2, [r5, #0]
    2d10:	b.n	2cec <SDFile::openNextFile(unsigned char)+0x84>
    2d12:	nop
    2d14:	.word	0x00012ce8
    2d18:	.word	0x00013250
    2d1c:	.word	0x000131cc
    2d20:	.word	0x000131f0
    2d24:	.word	0x00012cc4

00002d28 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
    2d28:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
    2d2a:	cbz	r3, 2d32 <SDFile::peek()+0xa>
    2d2c:	mov	r0, r3
    2d2e:	b.w	575c <FatFile::peek()>
    2d32:	ldr	r0, [r0, #96]	; 0x60
    2d34:	cbz	r0, 2d3a <SDFile::peek()+0x12>
    2d36:	b.w	3b10 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
    2d3a:	mov.w	r0, #4294967295
    2d3e:	bx	lr

00002d40 <SDFile::flush()>:
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
    2d40:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    2d42:	cbz	r3, 2d4a <SDFile::flush()+0xa>
    2d44:	mov	r0, r3
    2d46:	b.w	5c00 <FatFile::sync()>
    2d4a:	ldr	r0, [r0, #96]	; 0x60
    2d4c:	cbz	r0, 2d52 <SDFile::flush()+0x12>
    2d4e:	b.w	49ac <ExFatFile::sync()>
    2d52:	bx	lr

00002d54 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
    2d54:	push	{r3, r4, r5, lr}
		if (!filename) {
    2d56:	ldr	r4, [r0, #100]	; 0x64
    2d58:	cbz	r4, 2d5e <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
    2d5a:	mov	r0, r4
    2d5c:	pop	{r3, r4, r5, pc}
    2d5e:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
    2d60:	mov.w	r0, #256	; 0x100
    2d64:	bl	b908 <malloc>
    2d68:	mov	r1, r0
    2d6a:	str	r0, [r5, #100]	; 0x64
			if (filename) {
    2d6c:	cbz	r0, 2d90 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
    2d6e:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    2d70:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
    2d72:	cbz	r0, 2d80 <SDFile::name()+0x2c>
    2d74:	mov.w	r2, #256	; 0x100
    2d78:	bl	6324 <FatFile::getName(char*, unsigned int)>
    2d7c:	ldr	r4, [r5, #100]	; 0x64
    2d7e:	b.n	2d5a <SDFile::name()+0x6>
    2d80:	ldr	r0, [r5, #96]	; 0x60
    2d82:	cbz	r0, 2d96 <SDFile::name()+0x42>
    2d84:	mov.w	r2, #256	; 0x100
    2d88:	bl	37cc <ExFatFile::getName(char*, unsigned int)>
    2d8c:	ldr	r4, [r5, #100]	; 0x64
    2d8e:	b.n	2d5a <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
    2d90:	ldr	r4, [pc, #8]	; (2d9c <SDFile::name()+0x48>)
    2d92:	str	r4, [r5, #100]	; 0x64
    2d94:	b.n	2d5a <SDFile::name()+0x6>
    2d96:	mov	r4, r1
    2d98:	b.n	2d5a <SDFile::name()+0x6>
    2d9a:	nop
    2d9c:	.word	0x20019510

00002da0 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
    2da0:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2da2:	cbz	r3, 2dcc <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
    2da4:	ldrb	r2, [r3, #0]
    2da6:	tst.w	r2, #112	; 0x70
    2daa:	bne.n	2dae <SDFile::rewindDirectory()+0xe>
    2dac:	bx	lr
    2dae:	push	{r4, lr}
    2db0:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    2db2:	movs	r1, #0
    2db4:	mov	r0, r3
    2db6:	bl	59f8 <FatFile::seekSet(unsigned long)>
    2dba:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
    2dbc:	cbz	r0, 2dca <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    2dbe:	movs	r2, #0
    2dc0:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
    2dc2:	ldmia.w	sp!, {r4, lr}
    2dc6:	b.w	3b40 <ExFatFile::seekSet(unsigned long long)>
    2dca:	pop	{r4, pc}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2dcc:	ldr	r0, [r0, #96]	; 0x60
    2dce:	cmp	r0, #0
    2dd0:	beq.n	2dac <SDFile::rewindDirectory()+0xc>
    2dd2:	ldrb.w	r3, [r0, #49]	; 0x31
    2dd6:	tst.w	r3, #80	; 0x50
    2dda:	beq.n	2dac <SDFile::rewindDirectory()+0xc>
    2ddc:	movs	r2, #0
    2dde:	movs	r3, #0
    2de0:	b.w	3b40 <ExFatFile::seekSet(unsigned long long)>

00002de4 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
    2de4:	push	{r4, r6, r7, lr}
    2de6:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
    2de8:	cbz	r4, 2e0e <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
    2dea:	cmp	r3, #1
    2dec:	it	eq
    2dee:	cmpeq	r2, #0
    2df0:	bcc.n	2df6 <SDFile::truncate(unsigned long long)+0x12>
    2df2:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
    2df4:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
    2df6:	mov	r1, r2
    2df8:	mov	r0, r4
    2dfa:	bl	59f8 <FatFile::seekSet(unsigned long)>
    2dfe:	cmp	r0, #0
    2e00:	beq.n	2df2 <SDFile::truncate(unsigned long long)+0xe>
    2e02:	mov	r0, r4
    2e04:	bl	5c0c <FatFile::truncate()>
    2e08:	cmp	r0, #0
    2e0a:	beq.n	2df2 <SDFile::truncate(unsigned long long)+0xe>
    2e0c:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
    2e0e:	ldr	r4, [r0, #96]	; 0x60
    2e10:	cmp	r4, #0
    2e12:	beq.n	2df2 <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    2e14:	mov	r0, r4
    2e16:	bl	3b40 <ExFatFile::seekSet(unsigned long long)>
    2e1a:	cmp	r0, #0
    2e1c:	beq.n	2df2 <SDFile::truncate(unsigned long long)+0xe>
    2e1e:	mov	r0, r4
    2e20:	ldmia.w	sp!, {r4, r6, r7, lr}
    2e24:	b.w	4d60 <ExFatFile::truncate()>

00002e28 <SDFile::size()>:
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
    2e28:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2e2a:	cbz	r3, 2e32 <SDFile::size()+0xa>
    2e2c:	ldr	r0, [r3, #28]
    2e2e:	movs	r1, #0
    2e30:	bx	lr
    2e32:	ldr	r3, [r0, #96]	; 0x60
    2e34:	cbz	r3, 2e3c <SDFile::size()+0x14>
    2e36:	ldr	r0, [r3, #16]
    2e38:	ldr	r1, [r3, #20]
    2e3a:	bx	lr
    2e3c:	mov	r0, r3
    2e3e:	mov	r1, r3
		return sdfatfile.size();
	}
    2e40:	bx	lr
    2e42:	nop

00002e44 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
    2e44:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    2e46:	cbz	r3, 2e4e <SDFile::position()+0xa>
    2e48:	ldr	r0, [r3, #20]
    2e4a:	movs	r1, #0
    2e4c:	bx	lr
    2e4e:	ldr	r3, [r0, #96]	; 0x60
    2e50:	cbz	r3, 2e58 <SDFile::position()+0x14>
    2e52:	ldmia.w	r3, {r0, r1}
    2e56:	bx	lr
    2e58:	mov	r0, r3
    2e5a:	mov	r1, r3
		return sdfatfile.curPosition();
	}
    2e5c:	bx	lr
    2e5e:	nop

00002e60 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
    2e60:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    2e62:	cbz	r3, 2e6a <SDFile::read(void*, unsigned int)+0xa>
    2e64:	mov	r0, r3
    2e66:	b.w	55bc <FatFile::read(void*, unsigned int)>
    2e6a:	ldr	r0, [r0, #96]	; 0x60
    2e6c:	cbz	r0, 2e72 <SDFile::read(void*, unsigned int)+0x12>
    2e6e:	b.w	3968 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
    2e72:	mov.w	r0, #4294967295
    2e76:	bx	lr

00002e78 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
    2e78:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2e7a:	cbz	r3, 2e8a <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    2e7c:	ldrb	r3, [r3, #0]
    2e7e:	tst.w	r3, #112	; 0x70
    2e82:	ite	ne
    2e84:	movne	r0, #1
    2e86:	moveq	r0, #0
    2e88:	bx	lr
    2e8a:	ldr	r0, [r0, #96]	; 0x60
    2e8c:	cbz	r0, 2e9c <SDFile::isDirectory()+0x24>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    2e8e:	ldrb.w	r3, [r0, #49]	; 0x31
    2e92:	tst.w	r3, #80	; 0x50
    2e96:	ite	ne
    2e98:	movne	r0, #1
    2e9a:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
    2e9c:	bx	lr
    2e9e:	nop

00002ea0 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
    2ea0:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2ea2:	cbz	r3, 2eaa <SDFile::write(void const*, unsigned int)+0xa>
    2ea4:	mov	r0, r3
    2ea6:	b.w	5c84 <FatFile::write(void const*, unsigned int)>
    2eaa:	ldr	r0, [r0, #96]	; 0x60
    2eac:	cbz	r0, 2eb2 <SDFile::write(void const*, unsigned int)+0x12>
    2eae:	b.w	4e44 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
    2eb2:	bx	lr

00002eb4 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
    2eb4:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
    2eb6:	cbz	r2, 2ed2 <SDFile::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
    2eb8:	ldrb	r3, [r2, #0]
    2eba:	and.w	r3, r3, #8
    2ebe:	and.w	r0, r3, #255	; 0xff
    2ec2:	cbz	r3, 2f06 <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    2ec4:	ldr	r3, [r2, #28]
    2ec6:	ldr	r0, [r2, #20]
    2ec8:	subs	r0, r3, r0
    2eca:	it	mi
    2ecc:	mvnmi.w	r0, #2147483648	; 0x80000000
    2ed0:	bx	lr
    2ed2:	ldr	r1, [r0, #96]	; 0x60
    2ed4:	cbz	r1, 2f08 <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
    2ed6:	ldrb.w	r3, [r1, #49]	; 0x31
    2eda:	and.w	r3, r3, #8
    2ede:	and.w	r0, r3, #255	; 0xff
    2ee2:	cbz	r3, 2f06 <SDFile::available()+0x52>
    2ee4:	ldrd	r2, r3, [r1, #16]
    2ee8:	ldrd	r0, r1, [r1]
    2eec:	subs	r0, r2, r0
    2eee:	push	{r4, r5}
    2ef0:	sbc.w	r1, r3, r1
    2ef4:	movs	r5, #0
    2ef6:	mvn.w	r4, #2147483648	; 0x80000000
    2efa:	cmp	r5, r1
    2efc:	it	eq
    2efe:	cmpeq	r4, r0
    2f00:	bcs.n	2f04 <SDFile::available()+0x50>
    2f02:	mov	r0, r4
		return sdfatfile.available();
	}
    2f04:	pop	{r4, r5}
    2f06:	bx	lr
    2f08:	mov	r0, r1
    2f0a:	bx	lr

00002f0c <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    2f0c:	push	{r4, r6, r7}
    2f0e:	ldr	r4, [sp, #12]
    2f10:	mov	r6, r2
    2f12:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    2f14:	cbz	r4, 2f24 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    2f16:	cmp	r4, #1
    2f18:	beq.n	2f58 <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    2f1a:	cmp	r4, #2
    2f1c:	beq.n	2f3a <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
    2f1e:	movs	r0, #0
    2f20:	pop	{r4, r6, r7}
    2f22:	bx	lr
    2f24:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f26:	cbz	r4, 2f60 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2f28:	cmp	r3, #1
    2f2a:	it	eq
    2f2c:	cmpeq	r2, #0
    2f2e:	bcs.n	2f1e <SDFile::seek(unsigned long long, int)+0x12>
    2f30:	mov	r0, r4
    2f32:	mov	r1, r2
    2f34:	pop	{r4, r6, r7}
    2f36:	b.w	59f8 <FatFile::seekSet(unsigned long)>
    2f3a:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2f3c:	cbz	r3, 2f6c <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
    2f3e:	ldr	r2, [r3, #28]
    2f40:	adds	r6, r6, r2
    2f42:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2f46:	cmp	r7, #1
    2f48:	it	eq
    2f4a:	cmpeq	r6, #0
    2f4c:	bcs.n	2f1e <SDFile::seek(unsigned long long, int)+0x12>
    2f4e:	mov	r1, r6
    2f50:	mov	r0, r3
    2f52:	pop	{r4, r6, r7}
    2f54:	b.w	59f8 <FatFile::seekSet(unsigned long)>
    2f58:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    2f5a:	cbz	r3, 2f80 <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
    2f5c:	ldr	r2, [r3, #20]
    2f5e:	b.n	2f40 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f60:	ldr	r0, [r0, #96]	; 0x60
    2f62:	cmp	r0, #0
    2f64:	beq.n	2f1e <SDFile::seek(unsigned long long, int)+0x12>
    2f66:	pop	{r4, r6, r7}
    2f68:	b.w	3b40 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2f6c:	ldr	r0, [r0, #96]	; 0x60
    2f6e:	cmp	r0, #0
    2f70:	beq.n	2f1e <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f72:	ldrd	r2, r3, [r0, #16]
    2f76:	adds	r2, r2, r6
    2f78:	adcs	r3, r7
    2f7a:	pop	{r4, r6, r7}
    2f7c:	b.w	3b40 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    2f80:	ldr	r0, [r0, #96]	; 0x60
    2f82:	cmp	r0, #0
    2f84:	beq.n	2f1e <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f86:	ldrd	r2, r3, [r0]
    2f8a:	adds	r2, r2, r6
    2f8c:	adcs	r3, r7
    2f8e:	b.n	2f66 <SDFile::seek(unsigned long long, int)+0x5a>

00002f90 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f90:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f92:	ldr	r3, [pc, #32]	; (2fb4 <File::~File()+0x24>)
    2f94:	push	{r4, lr}
    2f96:	mov	r4, r0
    2f98:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f9a:	cbz	r2, 2fae <File::~File()+0x1e>
    2f9c:	ldr	r3, [r2, #16]
    2f9e:	subs	r3, #1
    2fa0:	str	r3, [r2, #16]
    2fa2:	cbnz	r3, 2fae <File::~File()+0x1e>
    2fa4:	ldr	r0, [r0, #16]
    2fa6:	cbz	r0, 2fae <File::~File()+0x1e>
    2fa8:	ldr	r3, [r0, #0]
    2faa:	ldr	r3, [r3, #32]
    2fac:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2fae:	mov	r0, r4
    2fb0:	pop	{r4, pc}
    2fb2:	nop
    2fb4:	.word	0x000131f0

00002fb8 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    2fb8:	push	{r3, r4, r5, lr}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2fba:	ldr	r3, [r0, #92]	; 0x5c
    2fbc:	ldr	r2, [pc, #80]	; (3010 <SDFile::~SDFile()+0x58>)
    2fbe:	str	r2, [r0, #0]
    2fc0:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    2fc2:	add.w	r5, r0, #36	; 0x24
    2fc6:	cbz	r3, 3006 <SDFile::~SDFile()+0x4e>
    2fc8:	mov	r0, r5
    2fca:	bl	6cbc <FsBaseFile::close()>
		if (filename) free(filename);
    2fce:	ldr	r0, [r4, #100]	; 0x64
    2fd0:	cbz	r0, 2fd6 <SDFile::~SDFile()+0x1e>
    2fd2:	bl	b918 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    2fd6:	ldr	r3, [pc, #60]	; (3014 <SDFile::~SDFile()+0x5c>)
    2fd8:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    2fda:	mov	r0, r5
    2fdc:	bl	6cbc <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fe0:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2fe2:	ldr	r3, [pc, #52]	; (3018 <SDFile::~SDFile()+0x60>)
    2fe4:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fe6:	cbz	r2, 2ffa <SDFile::~SDFile()+0x42>
    2fe8:	ldr	r3, [r2, #16]
    2fea:	subs	r3, #1
    2fec:	str	r3, [r2, #16]
    2fee:	cbnz	r3, 2ffa <SDFile::~SDFile()+0x42>
    2ff0:	ldr	r0, [r4, #16]
    2ff2:	cbz	r0, 2ffa <SDFile::~SDFile()+0x42>
    2ff4:	ldr	r3, [r0, #0]
    2ff6:	ldr	r3, [r3, #32]
    2ff8:	blx	r3
	}
    2ffa:	mov	r0, r4
    2ffc:	movs	r1, #104	; 0x68
    2ffe:	bl	aa54 <operator delete(void*, unsigned int)>
    3002:	mov	r0, r4
    3004:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    3006:	ldr	r3, [r0, #96]	; 0x60
    3008:	cmp	r3, #0
    300a:	bne.n	2fc8 <SDFile::~SDFile()+0x10>
    300c:	b.n	2fce <SDFile::~SDFile()+0x16>
    300e:	nop
    3010:	.word	0x00013250
    3014:	.word	0x00012cc4
    3018:	.word	0x000131f0

0000301c <File::~File()>:
    301c:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    301e:	ldr	r3, [pc, #40]	; (3048 <File::~File()+0x2c>)
    3020:	push	{r4, lr}
    3022:	mov	r4, r0
    3024:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3026:	cbz	r2, 303a <File::~File()+0x1e>
    3028:	ldr	r3, [r2, #16]
    302a:	subs	r3, #1
    302c:	str	r3, [r2, #16]
    302e:	cbnz	r3, 303a <File::~File()+0x1e>
    3030:	ldr	r0, [r0, #16]
    3032:	cbz	r0, 303a <File::~File()+0x1e>
    3034:	ldr	r3, [r0, #0]
    3036:	ldr	r3, [r3, #32]
    3038:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    303a:	mov	r0, r4
    303c:	movs	r1, #20
    303e:	bl	aa54 <operator delete(void*, unsigned int)>
    3042:	mov	r0, r4
    3044:	pop	{r4, pc}
    3046:	nop
    3048:	.word	0x000131f0

0000304c <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    304c:	push	{r3, r4, r5, lr}
    304e:	ldr	r3, [r0, #92]	; 0x5c
    3050:	ldr	r2, [pc, #72]	; (309c <SDFile::~SDFile()+0x50>)
    3052:	str	r2, [r0, #0]
    3054:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    3056:	add.w	r5, r0, #36	; 0x24
    305a:	cbz	r3, 3092 <SDFile::~SDFile()+0x46>
    305c:	mov	r0, r5
    305e:	bl	6cbc <FsBaseFile::close()>
		if (filename) free(filename);
    3062:	ldr	r0, [r4, #100]	; 0x64
    3064:	cbz	r0, 306a <SDFile::~SDFile()+0x1e>
    3066:	bl	b918 <free>
    306a:	ldr	r3, [pc, #52]	; (30a0 <SDFile::~SDFile()+0x54>)
    306c:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    306e:	mov	r0, r5
    3070:	bl	6cbc <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3074:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3076:	ldr	r3, [pc, #44]	; (30a4 <SDFile::~SDFile()+0x58>)
    3078:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    307a:	cbz	r2, 308e <SDFile::~SDFile()+0x42>
    307c:	ldr	r3, [r2, #16]
    307e:	subs	r3, #1
    3080:	str	r3, [r2, #16]
    3082:	cbnz	r3, 308e <SDFile::~SDFile()+0x42>
    3084:	ldr	r0, [r4, #16]
    3086:	cbz	r0, 308e <SDFile::~SDFile()+0x42>
    3088:	ldr	r3, [r0, #0]
    308a:	ldr	r3, [r3, #32]
    308c:	blx	r3
	}
    308e:	mov	r0, r4
    3090:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    3092:	ldr	r3, [r0, #96]	; 0x60
    3094:	cmp	r3, #0
    3096:	bne.n	305c <SDFile::~SDFile()+0x10>
    3098:	b.n	3062 <SDFile::~SDFile()+0x16>
    309a:	nop
    309c:	.word	0x00013250
    30a0:	.word	0x00012cc4
    30a4:	.word	0x000131f0

000030a8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    30a8:	ldr	r2, [pc, #8]	; (30b4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    30aa:	ldr	r1, [pc, #12]	; (30b8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    30ac:	ldr	r0, [pc, #12]	; (30bc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    30ae:	b.w	ab2c <__aeabi_atexit>
    30b2:	nop
    30b4:	.word	0x20013730
    30b8:	.word	0x00002735
    30bc:	.word	0x20019514

000030c0 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    30c0:	ldr	r2, [pc, #8]	; (30cc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    30c2:	ldr	r1, [pc, #12]	; (30d0 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    30c4:	ldr	r0, [pc, #12]	; (30d4 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    30c6:	b.w	ab2c <__aeabi_atexit>
    30ca:	nop
    30cc:	.word	0x20013730
    30d0:	.word	0x00002735
    30d4:	.word	0x2001951c

000030d8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    30d8:	ldr	r2, [pc, #8]	; (30e4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    30da:	ldr	r1, [pc, #12]	; (30e8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    30dc:	ldr	r0, [pc, #12]	; (30ec <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    30de:	b.w	ab2c <__aeabi_atexit>
    30e2:	nop
    30e4:	.word	0x20013730
    30e8:	.word	0x00002735
    30ec:	.word	0x20019524

000030f0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    30f0:	ldr	r2, [pc, #8]	; (30fc <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    30f2:	ldr	r1, [pc, #12]	; (3100 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    30f4:	ldr	r0, [pc, #12]	; (3104 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    30f6:	b.w	ab2c <__aeabi_atexit>
    30fa:	nop
    30fc:	.word	0x20013730
    3100:	.word	0x00002735
    3104:	.word	0x2001952c

00003108 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    3108:	ldr	r2, [pc, #8]	; (3114 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    310a:	ldr	r1, [pc, #12]	; (3118 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    310c:	ldr	r0, [pc, #12]	; (311c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    310e:	b.w	ab2c <__aeabi_atexit>
    3112:	nop
    3114:	.word	0x20013730
    3118:	.word	0x00002735
    311c:	.word	0x20019534

00003120 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    3120:	ldr	r2, [pc, #8]	; (312c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    3122:	ldr	r1, [pc, #12]	; (3130 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    3124:	ldr	r0, [pc, #12]	; (3134 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    3126:	b.w	ab2c <__aeabi_atexit>
    312a:	nop
    312c:	.word	0x20013730
    3130:	.word	0x00002735
    3134:	.word	0x2001953c

00003138 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    3138:	ldr	r2, [pc, #8]	; (3144 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    313a:	ldr	r1, [pc, #12]	; (3148 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    313c:	ldr	r0, [pc, #12]	; (314c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    313e:	b.w	ab2c <__aeabi_atexit>
    3142:	nop
    3144:	.word	0x20013730
    3148:	.word	0x00002735
    314c:	.word	0x20019544

00003150 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    3150:	ldr	r2, [pc, #8]	; (315c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    3152:	ldr	r1, [pc, #12]	; (3160 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    3154:	ldr	r0, [pc, #12]	; (3164 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    3156:	b.w	ab2c <__aeabi_atexit>
    315a:	nop
    315c:	.word	0x20013730
    3160:	.word	0x00002735
    3164:	.word	0x2001954c

00003168 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    3168:	ldrb.w	r2, [r0, #57]	; 0x39
    316c:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    3170:	subs	r0, r2, r0
    3172:	bx	lr

00003174 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3174:	ldrb.w	r3, [r0, #56]	; 0x38
    3178:	ldrb.w	r2, [r0, #57]	; 0x39
    317c:	cmp	r2, r3
    317e:	bls.n	318c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    3180:	adds	r2, r3, #1
    3182:	add	r3, r0
    3184:	strb.w	r2, [r0, #56]	; 0x38
    3188:	ldrb	r0, [r3, #24]
    318a:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    318c:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    3190:	bx	lr
    3192:	nop

00003194 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3194:	ldrb.w	r3, [r0, #56]	; 0x38
    3198:	ldrb.w	r2, [r0, #57]	; 0x39
    319c:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    319e:	itte	hi
    31a0:	addhi	r3, r3, r0
    31a2:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    31a4:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    31a8:	bx	lr
    31aa:	nop

000031ac <TwoWire::flush()>:
	virtual void flush(void) {
    31ac:	bx	lr
    31ae:	nop

000031b0 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    31b0:	push	{r3, r4, r5, lr}
    31b2:	mov	r5, r0
	if (transmitting || slave_mode) {
    31b4:	ldrh.w	r0, [r0, #94]	; 0x5e
    31b8:	cbz	r0, 31e0 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    31ba:	ldrb.w	r3, [r5, #93]	; 0x5d
    31be:	mov	r4, r2
    31c0:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    31c4:	cmp	r4, r2
    31c6:	bhi.n	31e2 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    31c8:	add.w	r0, r5, #59	; 0x3b
    31cc:	add	r0, r3
    31ce:	mov	r2, r4
    31d0:	bl	887c <memcpy>
		txBufferLength += quantity;
    31d4:	ldrb.w	r3, [r5, #93]	; 0x5d
    31d8:	add	r3, r4
    31da:	strb.w	r3, [r5, #93]	; 0x5d
    31de:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    31e0:	pop	{r3, r4, r5, pc}
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    31e2:	movs	r0, #1
    31e4:	mov	r4, r2
    31e6:	strb	r0, [r5, #4]
    31e8:	b.n	31c8 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    31ea:	nop

000031ec <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    31ec:	ldrh.w	r3, [r0, #94]	; 0x5e
    31f0:	cbz	r3, 320e <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    31f2:	ldrb.w	r3, [r0, #93]	; 0x5d
    31f6:	cmp	r3, #32
    31f8:	bhi.n	320a <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    31fa:	adds	r2, r0, r3
    31fc:	adds	r3, #1
    31fe:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    3202:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    3204:	strb.w	r1, [r2, #59]	; 0x3b
    3208:	bx	lr
    320a:	movs	r3, #1
    320c:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    320e:	movs	r0, #0
    3210:	bx	lr
    3212:	nop

00003214 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    3214:	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    3216:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    3218:	ldrb	r4, [r2, #3]
    321a:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    321c:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    321e:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    3220:	bpl.n	326c <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    3222:	movs	r3, #16
    3224:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    3226:	lsls	r3, r4, #25
    3228:	bpl.n	326a <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    322a:	and.w	r4, r4, #4
    322e:	and.w	r3, r4, #255	; 0xff
    3232:	cmp	r4, #0
    3234:	beq.n	32ec <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3236:	ldr	r1, [pc, #264]	; (3340 <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    3238:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    323a:	movs	r3, #0
    323c:	strb	r3, [r1, #0]
			txBufferLength = 0;
    323e:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    3242:	cmp	r2, #0
    3244:	beq.n	3314 <TwoWire::isr()+0x100>
				user_onRequest();
    3246:	blx	r2
			}
			if (txBufferLength == 0) {
    3248:	ldrb.w	r3, [r5, #93]	; 0x5d
    324c:	cmp	r3, #0
    324e:	beq.n	3314 <TwoWire::isr()+0x100>
    3250:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3252:	movs	r2, #208	; 0xd0
    3254:	strb	r2, [r3, #2]
    3256:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    3258:	ldrb.w	r2, [r5, #59]	; 0x3b
    325c:	strb	r2, [r3, #4]
    325e:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    3260:	movs	r2, #1
    3262:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3266:	movs	r2, #2
    3268:	strb	r2, [r3, #3]
    326a:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    326c:	and.w	r3, r4, #64	; 0x40
    3270:	and.w	r0, r3, #255	; 0xff
    3274:	cmp	r3, #0
    3276:	bne.n	322a <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    3278:	ldrb	r3, [r2, #6]
    327a:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    327c:	and.w	r1, r3, #96	; 0x60
    3280:	cmp	r1, #96	; 0x60
    3282:	beq.n	3322 <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    3284:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    3286:	and.w	r3, r3, #16
    328a:	and.w	r1, r3, #255	; 0xff
    328e:	cbz	r3, 32be <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    3290:	ands.w	r4, r4, #1
    3294:	bne.n	3306 <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    3296:	ldrb.w	r3, [r5, #92]	; 0x5c
    329a:	ldrb.w	r1, [r5, #93]	; 0x5d
    329e:	cmp	r1, r3
    32a0:	bls.n	333a <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    32a2:	adds	r1, r3, #1
    32a4:	add	r3, r5
    32a6:	strb.w	r1, [r5, #92]	; 0x5c
    32aa:	ldrb.w	r3, [r3, #59]	; 0x3b
    32ae:	strb	r3, [r2, #4]
    32b0:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    32b2:	movs	r2, #208	; 0xd0
    32b4:	strb	r2, [r3, #2]
    32b6:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    32b8:	movs	r2, #2
    32ba:	strb	r2, [r3, #3]
    32bc:	b.n	326a <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    32be:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    32c2:	ldrb	r3, [r2, #6]
    32c4:	orr.w	r3, r3, #32
    32c8:	strb	r3, [r2, #6]
    32ca:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    32cc:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    32d0:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    32d2:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    32d4:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    32d6:	bhi.n	3266 <TwoWire::isr()+0x52>
    32d8:	ldr	r0, [pc, #100]	; (3340 <TwoWire::isr()+0x12c>)
    32da:	ldrb	r0, [r0, #0]
    32dc:	cmp	r0, #0
    32de:	beq.n	3266 <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    32e0:	adds	r0, r5, r1
    32e2:	adds	r1, #1
    32e4:	strb.w	r1, [r5, #57]	; 0x39
    32e8:	strb	r2, [r0, #24]
    32ea:	b.n	3266 <TwoWire::isr()+0x52>
    32ec:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    32ee:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    32f2:	movs	r3, #192	; 0xc0
    32f4:	strb	r3, [r2, #2]
    32f6:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    32f8:	ldr	r2, [pc, #68]	; (3340 <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    32fa:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    32fc:	movs	r1, #1
    32fe:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3300:	movs	r2, #2
    3302:	strb	r2, [r3, #3]
    3304:	b.n	326a <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    3306:	movs	r3, #192	; 0xc0
    3308:	strb	r3, [r2, #2]
    330a:	ldr	r3, [r5, #16]
			data = port().D;
    330c:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    330e:	movs	r2, #2
    3310:	strb	r2, [r3, #3]
    3312:	b.n	326a <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3314:	movs	r2, #1
				txBuffer[0] = 0;
    3316:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3318:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    331c:	strb.w	r3, [r5, #59]	; 0x3b
    3320:	b.n	3250 <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    3322:	and.w	r3, r3, #223	; 0xdf
    3326:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    3328:	ldr	r3, [r5, #104]	; 0x68
    332a:	cbz	r3, 3336 <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    332c:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    3330:	ldrb.w	r0, [r5, #57]	; 0x39
    3334:	blx	r3
    3336:	ldr	r2, [r5, #16]
    3338:	b.n	3284 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    333a:	strb	r4, [r2, #4]
    333c:	b.n	32b0 <TwoWire::isr()+0x9c>
    333e:	nop
    3340:	.word	0x20019554

00003344 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    3344:	ldr	r0, [pc, #4]	; (334c <i2c0_isr+0x8>)
    3346:	b.w	3214 <TwoWire::isr()>
    334a:	nop
    334c:	.word	0x200137fc

00003350 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    3350:	ldr	r0, [pc, #4]	; (3358 <i2c1_isr+0x8>)
    3352:	b.w	3214 <TwoWire::isr()>
    3356:	nop
    3358:	.word	0x20013868

0000335c <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    335c:	ldr	r0, [pc, #4]	; (3364 <i2c2_isr+0x8>)
    335e:	b.w	3214 <TwoWire::isr()>
    3362:	nop
    3364:	.word	0x20013790

00003368 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    3368:	bx	lr
    336a:	nop

0000336c <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
    336c:	push	{r4, lr}
    336e:	ldr.w	r4, [r0, #1156]	; 0x484
    3372:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    3374:	cbz	r4, 33a0 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    3376:	mov	r2, r1
    3378:	mov	r0, sp
    337a:	mov	r1, r4
    337c:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    337e:	movs	r4, #0
    3380:	strb.w	r4, [sp]
    3384:	strb.w	r4, [sp, #1]
    3388:	strb.w	r4, [sp, #2]
    338c:	bl	5550 <FatFile::open(FatVolume*, char const*, int)>
    3390:	cbnz	r0, 3396 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
    3392:	add	sp, #56	; 0x38
    3394:	pop	{r4, pc}
    3396:	mov	r0, sp
    3398:	bl	665c <FatFile::remove()>
    339c:	add	sp, #56	; 0x38
    339e:	pop	{r4, pc}
    33a0:	ldr.w	r0, [r0, #1160]	; 0x488
    33a4:	cmp	r0, #0
    33a6:	beq.n	3392 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    33a8:	mov	r2, r1
    33aa:	movs	r3, #1
    33ac:	mov	r1, r0
    33ae:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    33b0:	strb.w	r4, [sp, #49]	; 0x31
    33b4:	strb.w	r4, [sp, #50]	; 0x32
    33b8:	strb.w	r4, [sp, #51]	; 0x33
    33bc:	bl	411c <ExFatFile::open(ExFatVolume*, char const*, int)>
    33c0:	cmp	r0, #0
    33c2:	beq.n	3392 <SDClass::remove(char const*)+0x26>
    33c4:	mov	r0, sp
    33c6:	bl	4734 <ExFatFile::remove()>
    33ca:	add	sp, #56	; 0x38
    33cc:	pop	{r4, pc}
    33ce:	nop

000033d0 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    33d0:	push	{r4, lr}
    33d2:	ldr.w	r4, [r0, #1156]	; 0x484
    33d6:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    33d8:	cbz	r4, 33fa <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    33da:	mov	r2, r1
    33dc:	movs	r3, #1
    33de:	addw	r1, r4, #1092	; 0x444
    33e2:	mov	r0, sp
    33e4:	movs	r4, #0
    33e6:	strb.w	r4, [sp]
    33ea:	strb.w	r4, [sp, #1]
    33ee:	strb.w	r4, [sp, #2]
    33f2:	bl	53cc <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
    33f6:	add	sp, #56	; 0x38
    33f8:	pop	{r4, pc}
    33fa:	ldr.w	r0, [r0, #1160]	; 0x488
    33fe:	cmp	r0, #0
    3400:	beq.n	33f6 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    3402:	mov	r2, r1
    3404:	movs	r3, #1
    3406:	add.w	r1, r0, #1096	; 0x448
    340a:	mov	r0, sp
    340c:	strb.w	r4, [sp, #49]	; 0x31
    3410:	strb.w	r4, [sp, #50]	; 0x32
    3414:	strb.w	r4, [sp, #51]	; 0x33
    3418:	bl	4b50 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    341c:	add	sp, #56	; 0x38
    341e:	pop	{r4, pc}

00003420 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    3420:	push	{r4, r5, lr}
    3422:	ldr.w	r4, [r0, #1156]	; 0x484
    3426:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    3428:	cbz	r4, 3448 <SDClass::exists(char const*)+0x28>
    342a:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    342c:	mov	r2, r1
    342e:	mov	r3, r5
    3430:	mov	r1, r4
    3432:	mov	r0, sp
    3434:	strb.w	r5, [sp]
    3438:	strb.w	r5, [sp, #1]
    343c:	strb.w	r5, [sp, #2]
    3440:	bl	5550 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    3444:	add	sp, #60	; 0x3c
    3446:	pop	{r4, r5, pc}
    3448:	ldr.w	r0, [r0, #1160]	; 0x488
    344c:	cmp	r0, #0
    344e:	beq.n	3444 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    3450:	mov	r2, r1
    3452:	mov	r3, r4
    3454:	mov	r1, r0
    3456:	mov	r0, sp
    3458:	strb.w	r4, [sp, #49]	; 0x31
    345c:	strb.w	r4, [sp, #50]	; 0x32
    3460:	strb.w	r4, [sp, #51]	; 0x33
    3464:	bl	411c <ExFatFile::open(ExFatVolume*, char const*, int)>
    3468:	add	sp, #60	; 0x3c
    346a:	pop	{r4, r5, pc}

0000346c <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
    346c:	push	{r3, r4, r5, lr}
    346e:	mov	r5, r0
    3470:	ldr.w	r0, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    3474:	cbz	r0, 34a8 <SDClass::usedSize()+0x3c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    3476:	ldr	r4, [r0, #28]
    3478:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    347a:	bl	60dc <FatPartition::freeClusterCount()>
    347e:	ldr.w	r3, [r5, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    3482:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    3484:	cbz	r3, 3498 <SDClass::usedSize()+0x2c>
    3486:	ldrb	r0, [r3, #6]
    3488:	mov.w	r3, #512	; 0x200
    348c:	lsl.w	r0, r3, r0
    3490:	uxth	r0, r0
    3492:	umull	r0, r1, r0, r4
    3496:	pop	{r3, r4, r5, pc}
    3498:	ldr.w	r3, [r5, #1160]	; 0x488
    349c:	cbz	r3, 34b8 <SDClass::usedSize()+0x4c>
    349e:	ldr.w	r0, [r3, #1084]	; 0x43c
    34a2:	umull	r0, r1, r0, r4
    34a6:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    34a8:	ldr.w	r0, [r5, #1160]	; 0x488
    34ac:	cbz	r0, 34b8 <SDClass::usedSize()+0x4c>
    34ae:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    34b2:	bl	44a8 <ExFatPartition::freeClusterCount()>
    34b6:	b.n	347e <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    34b8:	movs	r0, #0
    34ba:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    34bc:	pop	{r3, r4, r5, pc}
    34be:	nop

000034c0 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    34c0:	push	{r4, r5, lr}
    34c2:	ldr.w	r4, [r0, #1156]	; 0x484
    34c6:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    34c8:	cbz	r4, 34f4 <SDClass::rmdir(char const*)+0x34>
    34ca:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    34cc:	mov	r2, r1
    34ce:	mov	r3, r5
    34d0:	mov	r1, r4
    34d2:	mov	r0, sp
    34d4:	strb.w	r5, [sp]
    34d8:	strb.w	r5, [sp, #1]
    34dc:	strb.w	r5, [sp, #2]
    34e0:	bl	5550 <FatFile::open(FatVolume*, char const*, int)>
    34e4:	cbnz	r0, 34ea <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
    34e6:	add	sp, #60	; 0x3c
    34e8:	pop	{r4, r5, pc}
    34ea:	mov	r0, sp
    34ec:	bl	599c <FatFile::rmdir()>
    34f0:	add	sp, #60	; 0x3c
    34f2:	pop	{r4, r5, pc}
    34f4:	ldr.w	r0, [r0, #1160]	; 0x488
    34f8:	cmp	r0, #0
    34fa:	beq.n	34e6 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    34fc:	mov	r2, r1
    34fe:	mov	r3, r4
    3500:	mov	r1, r0
    3502:	mov	r0, sp
    3504:	strb.w	r4, [sp, #49]	; 0x31
    3508:	strb.w	r4, [sp, #50]	; 0x32
    350c:	strb.w	r4, [sp, #51]	; 0x33
    3510:	bl	411c <ExFatFile::open(ExFatVolume*, char const*, int)>
    3514:	cmp	r0, #0
    3516:	beq.n	34e6 <SDClass::rmdir(char const*)+0x26>
    3518:	mov	r0, sp
    351a:	bl	480c <ExFatFile::rmdir()>
    351e:	add	sp, #60	; 0x3c
    3520:	pop	{r4, r5, pc}
    3522:	nop

00003524 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
    3524:	push	{r4, r5, r6, lr}
    3526:	ldr.w	r4, [r0, #1156]	; 0x484
    352a:	sub	sp, #56	; 0x38
    352c:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    352e:	cbz	r4, 3562 <SDClass::rename(char const*, char const*)+0x3e>
    3530:	movs	r5, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    3532:	addw	r4, r4, #1092	; 0x444
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    3536:	mov	r2, r1
    3538:	mov	r3, r5
    353a:	mov	r1, r4
    353c:	mov	r0, sp
    353e:	strb.w	r5, [sp]
    3542:	strb.w	r5, [sp, #1]
    3546:	strb.w	r5, [sp, #2]
    354a:	bl	5490 <FatFile::open(FatFile*, char const*, int)>
    354e:	cbnz	r0, 3554 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
    3550:	add	sp, #56	; 0x38
    3552:	pop	{r4, r5, r6, pc}
    3554:	mov	r2, r6
    3556:	mov	r1, r4
    3558:	mov	r0, sp
    355a:	bl	57c8 <FatFile::rename(FatFile*, char const*)>
    355e:	add	sp, #56	; 0x38
    3560:	pop	{r4, r5, r6, pc}
    3562:	ldr.w	r0, [r0, #1160]	; 0x488
    3566:	cmp	r0, #0
    3568:	beq.n	3550 <SDClass::rename(char const*, char const*)+0x2c>
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    356a:	add.w	r5, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    356e:	mov	r2, r1
    3570:	mov	r3, r4
    3572:	mov	r1, r5
    3574:	mov	r0, sp
    3576:	strb.w	r4, [sp, #49]	; 0x31
    357a:	strb.w	r4, [sp, #50]	; 0x32
    357e:	strb.w	r4, [sp, #51]	; 0x33
    3582:	bl	401c <ExFatFile::open(ExFatFile*, char const*, int)>
    3586:	cmp	r0, #0
    3588:	beq.n	3550 <SDClass::rename(char const*, char const*)+0x2c>
    358a:	mov	r2, r6
    358c:	mov	r1, r5
    358e:	mov	r0, sp
    3590:	bl	4cb4 <ExFatFile::rename(ExFatFile*, char const*)>
    3594:	add	sp, #56	; 0x38
    3596:	pop	{r4, r5, r6, pc}

00003598 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    3598:	ldr.w	r2, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    359c:	cbz	r2, 35b2 <SDClass::totalSize()+0x1a>
    359e:	ldrb	r1, [r2, #6]
    35a0:	ldr	r0, [r2, #28]
    35a2:	mov.w	r3, #512	; 0x200
    35a6:	lsls	r3, r1
    35a8:	uxth	r3, r3
    35aa:	subs	r0, #1
    35ac:	umull	r0, r1, r3, r0
    35b0:	bx	lr
    35b2:	ldr.w	r2, [r0, #1160]	; 0x488
    35b6:	cbz	r2, 35c6 <SDClass::totalSize()+0x2e>
    35b8:	ldr.w	r3, [r2, #1072]	; 0x430
    35bc:	ldr.w	r0, [r2, #1084]	; 0x43c
    35c0:	umull	r0, r1, r3, r0
    35c4:	bx	lr
    35c6:	movs	r0, #0
    35c8:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
    35ca:	bx	lr

000035cc <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    35cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    35d0:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    35d2:	sub	sp, #80	; 0x50
    35d4:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    35d6:	beq.n	365c <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    35d8:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
    35da:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    35de:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    35e2:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    35e4:	it	ne
    35e6:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    35e8:	bl	6e8c <FsVolume::open(char const*, int)>
    35ec:	ldr	r3, [sp, #72]	; 0x48
    35ee:	cmp	r3, #0
    35f0:	beq.n	366e <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
    35f2:	movs	r0, #104	; 0x68
    35f4:	bl	aa50 <operator new(unsigned int)>
    35f8:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    35fa:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    35fe:	ldr	r0, [pc, #136]	; (3688 <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    3600:	ldr	r1, [pc, #136]	; (368c <SDClass::open(char const*, unsigned char)+0xc0>)
    3602:	ldr	r2, [sp, #8]
    3604:	ldrb.w	r3, [sp, #12]
    3608:	str	r0, [r4, #0]
    360a:	add	r7, sp, #16
    360c:	strb	r6, [r4, #24]
    360e:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    3610:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3612:	mov.w	r8, #1000	; 0x3e8
    3616:	mov	r1, r7
    3618:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    361c:	str	r2, [r4, #28]
    361e:	strb.w	r3, [r4, #32]
    3622:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3624:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    3626:	str	r6, [r4, #16]
    3628:	str.w	r8, [r4, #8]
    362c:	bl	6c44 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    3630:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3632:	ldr	r1, [pc, #92]	; (3690 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3634:	ldr	r2, [pc, #92]	; (3694 <SDClass::open(char const*, unsigned char)+0xc8>)
    3636:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    3638:	adds	r3, #1
    363a:	strb	r6, [r5, #4]
    363c:	str.w	r8, [r5, #8]
    3640:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    3642:	str	r4, [r5, #16]
    3644:	str	r1, [r4, #20]
		if (f) f->refcount++;
    3646:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3648:	str	r2, [r5, #0]
    364a:	ldr	r3, [pc, #76]	; (3698 <SDClass::open(char const*, unsigned char)+0xcc>)
    364c:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    364e:	mov	r0, r7
    3650:	bl	6cbc <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
    3654:	mov	r0, r5
    3656:	add	sp, #80	; 0x50
    3658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    365c:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3660:	adds	r1, #4
    3662:	mov	r0, sp
    3664:	bl	6e8c <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    3668:	ldr	r3, [sp, #72]	; 0x48
    366a:	cmp	r3, #0
    366c:	bne.n	35f2 <SDClass::open(char const*, unsigned char)+0x26>
    366e:	ldr	r3, [sp, #76]	; 0x4c
    3670:	cmp	r3, #0
    3672:	bne.n	35f2 <SDClass::open(char const*, unsigned char)+0x26>
    3674:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    3678:	ldr	r2, [pc, #24]	; (3694 <SDClass::open(char const*, unsigned char)+0xc8>)
    367a:	strb	r3, [r5, #4]
    367c:	strb	r3, [r5, #12]
    367e:	str	r3, [r5, #16]
    3680:	str	r1, [r5, #8]
    3682:	str	r2, [r5, #0]
    3684:	add	r7, sp, #16
    3686:	b.n	364a <SDClass::open(char const*, unsigned char)+0x7e>
    3688:	.word	0x00013250
    368c:	.word	0x000131cc
    3690:	.word	0x00012ce8
    3694:	.word	0x000131f0
    3698:	.word	0x00012cc4

0000369c <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    369c:	push	{r4, r5, r6, r7}


class SDClass : public FS
{
public:
	SDClass() { }
    369e:	ldr	r3, [pc, #68]	; (36e4 <_GLOBAL__sub_I_SD+0x48>)
    36a0:	ldr	r5, [pc, #68]	; (36e8 <_GLOBAL__sub_I_SD+0x4c>)
    36a2:	ldr	r4, [pc, #72]	; (36ec <_GLOBAL__sub_I_SD+0x50>)
    36a4:	str	r5, [r3, #0]
    36a6:	str.w	r4, [r3, #1184]	; 0x4a0
    36aa:	movs	r5, #41	; 0x29
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    36ac:	movs	r4, #0
    36ae:	ldr	r0, [pc, #64]	; (36f0 <_GLOBAL__sub_I_SD+0x54>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    36b0:	ldr	r7, [pc, #64]	; (36f4 <_GLOBAL__sub_I_SD+0x58>)
    36b2:	strb.w	r5, [r3, #1203]	; 0x4b3
    36b6:	movs	r6, #1
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    36b8:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    36bc:	strb.w	r4, [r3, #1181]	; 0x49d
    36c0:	strb.w	r4, [r3, #1206]	; 0x4b6
    36c4:	str.w	r0, [r3, #1172]	; 0x494
    36c8:	str.w	r7, [r3, #1192]	; 0x4a8
    36cc:	strb.w	r6, [r3, #1201]	; 0x4b1
    36d0:	str.w	r4, [r3, #1156]	; 0x484
    36d4:	str.w	r4, [r3, #1160]	; 0x488
    36d8:	ldr	r2, [pc, #28]	; (36f8 <_GLOBAL__sub_I_SD+0x5c>)
    36da:	ldr	r1, [pc, #32]	; (36fc <_GLOBAL__sub_I_SD+0x60>)
    36dc:	mov	r0, r3
    36de:	pop	{r4, r5, r6, r7}
    36e0:	b.w	ab2c <__aeabi_atexit>
    36e4:	.word	0x20019558
    36e8:	.word	0x00013370
    36ec:	.word	0x000133a0
    36f0:	.word	0x000133f8
    36f4:	.word	0x38011001
    36f8:	.word	0x20013730
    36fc:	.word	0x00003369

00003700 <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3700:	push	{r3, r4, r5, r6, r7, lr}
    3702:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    3704:	add.w	r6, r0, #16
    3708:	ldr	r0, [r0, #4]
    370a:	ldr	r1, [r4, #12]
    370c:	ldr	r3, [r0, #0]
    370e:	mov	r2, r6
    3710:	ldr	r3, [r3, #28]
    3712:	blx	r3
    3714:	cbz	r0, 3728 <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    3716:	ldrb	r3, [r4, #0]
    3718:	lsls	r2, r3, #30
    371a:	mov	r5, r0
    371c:	bmi.n	372e <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    371e:	bic.w	r3, r3, #1
    3722:	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    3724:	mov	r0, r5
    3726:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    3728:	movs	r5, #0
}
    372a:	mov	r0, r5
    372c:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    372e:	ldr	r0, [r4, #4]
    3730:	ldr	r1, [r4, #12]
    3732:	ldr	r2, [r0, #0]
    3734:	ldr	r3, [r4, #8]
    3736:	ldr	r7, [r2, #28]
    3738:	add	r1, r3
    373a:	mov	r2, r6
    373c:	blx	r7
    373e:	cmp	r0, #0
    3740:	beq.n	3728 <FsCache::sync() [clone .part.0]+0x28>
    3742:	ldrb	r3, [r4, #0]
    3744:	b.n	371e <FsCache::sync() [clone .part.0]+0x1e>
    3746:	nop

00003748 <FsCache::get(unsigned long, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    3748:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    374a:	ldr	r5, [r0, #4]
    374c:	cbz	r5, 378e <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    374e:	ldr	r3, [r0, #12]
    3750:	cmp	r3, r1
    3752:	mov	r4, r0
    3754:	mov	r7, r2
    3756:	mov	r6, r1
    3758:	beq.n	3778 <FsCache::get(unsigned long, unsigned char)+0x30>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    375a:	ldrb	r3, [r0, #0]
    375c:	lsls	r2, r3, #31
    375e:	bmi.n	3786 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3760:	lsls	r3, r7, #29
    3762:	bpl.n	3792 <FsCache::get(unsigned long, unsigned char)+0x4a>
    3764:	add.w	r5, r4, #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3768:	and.w	r2, r7, #3
    376c:	movs	r3, #0
    376e:	orrs	r3, r2
    3770:	strb	r3, [r4, #0]
    3772:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    3774:	str	r6, [r4, #12]
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
}
    3776:	pop	{r3, r4, r5, r6, r7, pc}
    3778:	ldrsb.w	r3, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    377c:	and.w	r2, r7, #3
    3780:	orrs	r3, r2
    3782:	strb	r3, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    3784:	pop	{r3, r4, r5, r6, r7, pc}
    3786:	bl	3700 <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    378a:	cmp	r0, #0
    378c:	bne.n	3760 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    378e:	movs	r0, #0
    3790:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    3792:	ldr	r0, [r4, #4]
    3794:	ldr	r3, [r0, #0]
    3796:	add.w	r5, r4, #16
    379a:	ldr	r3, [r3, #12]
    379c:	mov	r2, r5
    379e:	mov	r1, r6
    37a0:	blx	r3
    37a2:	cmp	r0, #0
    37a4:	bne.n	3768 <FsCache::get(unsigned long, unsigned char)+0x20>
    37a6:	b.n	378e <FsCache::get(unsigned long, unsigned char)+0x46>

000037a8 <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    37a8:	ldrb	r3, [r0, #0]
    37aa:	lsls	r3, r3, #31
    37ac:	bmi.n	37b2 <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    37ae:	movs	r0, #1
    37b0:	bx	lr
    37b2:	b.w	3700 <FsCache::sync() [clone .part.0]>
    37b6:	nop

000037b8 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    37b8:	push	{r4, lr}
    37ba:	mov	r4, r0
  bool rtn = sync();
    37bc:	bl	49ac <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    37c0:	movs	r3, #0
    37c2:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    37c6:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    37ca:	pop	{r4, pc}

000037cc <ExFatFile::getName(char*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    37cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    37d0:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    37d4:	mov	r9, r0
    37d6:	mov	r7, r1
    37d8:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    37da:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    37de:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    37e0:	ldrb.w	r3, [r9, #49]	; 0x31
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    37e4:	add	r6, sp, #4
    37e6:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    37ea:	cmp	r3, #0
    37ec:	beq.n	386c <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    37ee:	ldrb.w	r3, [r9, #48]	; 0x30
    37f2:	cmp	r3, #1
    37f4:	bls.n	3876 <ExFatFile::getName(char*, unsigned int)+0xaa>
    37f6:	mov.w	r8, #1
    37fa:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    37fc:	cmp.w	r8, #1
    3800:	ite	ne
    3802:	movne	r2, #32
    3804:	moveq	r2, #64	; 0x40
    3806:	mov	r1, r6
    3808:	ldr.w	r0, [r9, #32]
    380c:	bl	4398 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3810:	cmp	r0, #1
    3812:	bne.n	386c <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    3814:	movs	r2, #0
    3816:	mov	r1, r6
    3818:	ldr.w	r0, [r9, #32]
    381c:	bl	4364 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3820:	cbz	r0, 386c <ExFatFile::getName(char*, unsigned int)+0xa0>
    3822:	ldrb	r3, [r0, #0]
    3824:	cmp	r3, #193	; 0xc1
    3826:	bne.n	386c <ExFatFile::getName(char*, unsigned int)+0xa0>
    3828:	adds	r1, r7, r4
    382a:	add.w	lr, r4, #15
    382e:	b.n	3832 <ExFatFile::getName(char*, unsigned int)+0x66>
    3830:	mov	r4, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3832:	ldrh.w	r3, [r0, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
    3836:	adds	r2, r4, #1
    3838:	cbz	r3, 3860 <ExFatFile::getName(char*, unsigned int)+0x94>
    383a:	cmp	r2, r5
    383c:	bcs.n	3860 <ExFatFile::getName(char*, unsigned int)+0x94>
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    383e:	cmp	r3, #126	; 0x7e
    3840:	ite	ls
    3842:	uxtbls	r3, r3
    3844:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3846:	cmp	r2, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3848:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    384c:	bne.n	3830 <ExFatFile::getName(char*, unsigned int)+0x64>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    384e:	add.w	r8, r8, #1
    3852:	ldrb.w	r3, [r9, #48]	; 0x30
    3856:	uxtb.w	r8, r8
    385a:	cmp	r3, r8
    385c:	mov	r4, r2
    385e:	bhi.n	37fc <ExFatFile::getName(char*, unsigned int)+0x30>
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3860:	movs	r3, #0
  return n;
    3862:	mov	r0, r4
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3864:	strb	r3, [r7, r4]
  return n;

 fail:
  *name = 0;
  return 0;
}
    3866:	add	sp, #20
    3868:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    386c:	movs	r0, #0
    386e:	strb	r0, [r7, #0]
  return 0;
}
    3870:	add	sp, #20
    3872:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3876:	movs	r4, #0
    3878:	b.n	3860 <ExFatFile::getName(char*, unsigned int)+0x94>
    387a:	nop

0000387c <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    387c:	ldrb.w	r2, [r0, #49]	; 0x31
    3880:	cbz	r2, 3886 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3882:	movs	r0, #0
    3884:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3886:	push	{r3, r4, r5, lr}
    3888:	mov	r4, r0
    388a:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    388c:	mov	r1, r2
    388e:	movs	r2, #56	; 0x38
    3890:	bl	c09c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3894:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3896:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3898:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    389c:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    38a0:	str	r5, [r4, #32]
    38a2:	pop	{r3, r4, r5, pc}

000038a4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    38a4:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    38a6:	ldrb	r0, [r1, #0]
    38a8:	cmp	r0, #32
    38aa:	bne.n	38b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    38ac:	ldrb.w	r0, [r1, #1]!
    38b0:	cmp	r0, #32
    38b2:	beq.n	38ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    38b4:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    38b6:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    38b8:	cmp	r0, #0
    38ba:	beq.n	3960 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    38bc:	cmp	r0, #47	; 0x2f
    38be:	beq.n	3918 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    38c0:	cmp	r0, #92	; 0x5c
    38c2:	beq.n	3906 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    38c4:	sub.w	r4, r0, #34	; 0x22
    38c8:	uxtb	r4, r4
    38ca:	cmp	r4, #29
    38cc:	bls.n	390a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    38ce:	ldr.w	lr, [pc, #148]	; 3964 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    38d2:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    38d4:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    38d6:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    38d8:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    38dc:	mov	r7, r6
    38de:	beq.n	3906 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    38e0:	cmp	r5, #94	; 0x5e
    38e2:	bhi.n	3906 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    38e4:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    38e8:	sub.w	r5, r0, #34	; 0x22
    38ec:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    38ee:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    38f0:	cbz	r0, 3952 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    38f2:	cmp	r0, #47	; 0x2f
    38f4:	beq.n	391a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    38f6:	cmp	r0, #92	; 0x5c
    38f8:	lsr.w	r7, lr, r5
    38fc:	beq.n	3906 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    38fe:	cmp	r5, #29
    3900:	bhi.n	38d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    3902:	lsls	r5, r7, #31
    3904:	bpl.n	38d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3906:	movs	r0, #0
    3908:	pop	{r4, r5, r6, r7, pc}
    390a:	ldr	r5, [pc, #88]	; (3964 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    390c:	lsr.w	r4, r5, r4
    3910:	lsls	r6, r4, #31
    3912:	bpl.n	38ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    3914:	movs	r0, #0
    3916:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3918:	movs	r4, #0
    391a:	adds	r7, r1, r4
    391c:	mov	r6, r7
    391e:	mov	r5, r4
    3920:	movs	r0, #47	; 0x2f
    3922:	b.n	392a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    3924:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3928:	adds	r5, #1
    392a:	cmp	r0, #32
    392c:	beq.n	3924 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    392e:	cmp	r0, #47	; 0x2f
    3930:	beq.n	3924 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    3932:	add	r1, r5
    3934:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    3936:	cbz	r4, 394a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    3938:	mov	r1, r7
    c = path[len - 1];
    393a:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    393e:	cmp	r3, #46	; 0x2e
    3940:	beq.n	3946 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    3942:	cmp	r3, #32
    3944:	bne.n	3958 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3946:	subs	r4, #1
    3948:	bne.n	393a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    394a:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    394c:	str	r0, [r2, #0]
  return true;
    394e:	movs	r0, #1
    3950:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3952:	str	r7, [r3, #0]
    3954:	adds	r7, r1, r4
    3956:	b.n	3938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    3958:	cmp	r4, #255	; 0xff
    395a:	ble.n	394a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    395c:	movs	r0, #0
    395e:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3960:	str	r1, [r3, #0]
    3962:	b.n	394c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    3964:	.word	0x35000101

00003968 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3968:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    396c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3970:	lsls	r6, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3972:	sub	sp, #12
    3974:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3976:	bpl.n	3a2e <ExFatFile::read(void*, unsigned int)+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3978:	lsls	r5, r3, #25
    397a:	mov	r6, r1
    397c:	mov	fp, r2
    397e:	bpl.w	3af2 <ExFatFile::read(void*, unsigned int)+0x18a>
    if ((m_curPosition + count) > m_validLength) {
    3982:	ldrd	r0, r1, [r4]
    3986:	ldrd	r2, r3, [r4, #16]
    398a:	adds.w	r8, r0, fp
    398e:	adc.w	r9, r1, #0
    3992:	cmp	r3, r9
    3994:	it	eq
    3996:	cmpeq	r2, r8
    3998:	bcc.w	3afe <ExFatFile::read(void*, unsigned int)+0x196>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    399c:	cmp.w	fp, #0
    39a0:	beq.n	3a80 <ExFatFile::read(void*, unsigned int)+0x118>
    39a2:	mov	r9, r4
    39a4:	ldrd	r0, r1, [r9], #24
    39a8:	mov	r5, fp
    clusterOffset = m_curPosition & m_vol->clusterMask();
    39aa:	ldr	r7, [r4, #32]
    39ac:	ldr.w	r3, [r7, #1080]	; 0x438
    39b0:	ands	r3, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    39b2:	ubfx	sl, r3, #0, #9
    if (clusterOffset == 0) {
    39b6:	cmp	r3, #0
    39b8:	bne.n	3a8c <ExFatFile::read(void*, unsigned int)+0x124>
      if (m_curPosition == 0) {
    39ba:	orrs.w	r2, r0, r1
    39be:	bne.n	3aac <ExFatFile::read(void*, unsigned int)+0x144>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    39c0:	ldrb.w	r2, [r4, #49]	; 0x31
    39c4:	lsls	r1, r2, #25
    39c6:	ite	mi
    39c8:	ldrmi.w	r2, [r7, #1076]	; 0x434
    39cc:	ldrpl	r2, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    39ce:	str	r2, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    39d0:	ldr.w	r0, [r7, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    39d4:	ldrb.w	lr, [r7, #1093]	; 0x445
    39d8:	lsrs	r3, r3, #9
    39da:	subs	r2, #2
    39dc:	adds	r1, r3, r0
    39de:	lsl.w	r2, r2, lr
    39e2:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    39e4:	cmp.w	sl, #0
    39e8:	bne.n	3a44 <ExFatFile::read(void*, unsigned int)+0xdc>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    39ea:	cmp.w	r5, #512	; 0x200
    39ee:	bcc.n	3a44 <ExFatFile::read(void*, unsigned int)+0xdc>
    39f0:	ldr.w	r2, [r7, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    39f4:	cmp	r1, r2
    39f6:	beq.n	3a44 <ExFatFile::read(void*, unsigned int)+0xdc>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    39f8:	cmp.w	r5, #1024	; 0x400
    39fc:	bcc.n	3aba <ExFatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    39fe:	mov.w	r8, #1
    3a02:	lsl.w	r8, r8, lr
    3a06:	rsb	r3, r3, r8
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3a0a:	mov.w	r8, r5, lsr #9
    3a0e:	cmp	r8, r3
    3a10:	it	cs
    3a12:	movcs	r8, r3
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3a14:	cmp	r1, r2
    3a16:	bhi.n	3a90 <ExFatFile::read(void*, unsigned int)+0x128>
    3a18:	add.w	r3, r8, r1
    3a1c:	cmp	r2, r3
    3a1e:	bcs.n	3a90 <ExFatFile::read(void*, unsigned int)+0x128>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    3a20:	add.w	r0, r7, #528	; 0x210
    3a24:	str	r1, [sp, #4]
    3a26:	bl	37a8 <FsCache::sync()>
    3a2a:	ldr	r1, [sp, #4]
    3a2c:	cbnz	r0, 3a90 <ExFatFile::read(void*, unsigned int)+0x128>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3a2e:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3a32:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3a36:	orr.w	r3, r3, #2
    3a3a:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    3a3e:	add	sp, #12
    3a40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    3a44:	add.w	r0, r7, #528	; 0x210
    3a48:	movs	r2, #0
    3a4a:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    3a4e:	cmp	r0, #0
    3a50:	beq.n	3a2e <ExFatFile::read(void*, unsigned int)+0xc6>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    3a52:	rsb	r8, sl, #512	; 0x200
    3a56:	cmp	r8, r5
    3a58:	it	cs
    3a5a:	movcs	r8, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3a5c:	add.w	r1, r0, sl
    3a60:	mov	r2, r8
    3a62:	mov	r0, r6
    3a64:	bl	887c <memcpy>
    3a68:	mov	r2, r8
    3a6a:	movs	r3, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3a6c:	ldrd	r0, r1, [r4]
    3a70:	adds	r0, r0, r2
    3a72:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3a74:	subs.w	r5, r5, r8
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3a78:	add	r6, r8
    m_curPosition += n;
    3a7a:	strd	r0, r1, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3a7e:	bne.n	39aa <ExFatFile::read(void*, unsigned int)+0x42>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3a80:	movs	r5, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3a82:	rsb	r0, r5, fp

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    3a86:	add	sp, #12
    3a88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a8c:	ldr	r2, [r4, #24]
    3a8e:	b.n	39d0 <ExFatFile::read(void*, unsigned int)+0x68>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    3a90:	ldr.w	r0, [r7, #532]	; 0x214
    3a94:	ldr	r3, [r0, #0]
    3a96:	mov	r2, r6
    3a98:	ldr	r7, [r3, #16]
    3a9a:	mov	r3, r8
    3a9c:	blx	r7
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3a9e:	cmp	r0, #0
    3aa0:	beq.n	3a2e <ExFatFile::read(void*, unsigned int)+0xc6>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3aa2:	mov.w	r8, r8, lsl #9
    3aa6:	mov	r2, r8
    3aa8:	movs	r3, #0
    3aaa:	b.n	3a6c <ExFatFile::read(void*, unsigned int)+0x104>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    3aac:	ldrb.w	r2, [r4, #51]	; 0x33
    3ab0:	lsls	r2, r2, #25
    3ab2:	bpl.n	3ad6 <ExFatFile::read(void*, unsigned int)+0x16e>
        m_curCluster++;
    3ab4:	ldr	r2, [r4, #24]
    3ab6:	adds	r2, #1
    3ab8:	b.n	39ce <ExFatFile::read(void*, unsigned int)+0x66>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    3aba:	ldr.w	r0, [r7, #532]	; 0x214
    3abe:	ldr	r3, [r0, #0]
    3ac0:	mov	r2, r6
    3ac2:	ldr	r3, [r3, #12]
    3ac4:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3ac6:	cmp	r0, #0
    3ac8:	beq.n	3a2e <ExFatFile::read(void*, unsigned int)+0xc6>
    3aca:	mov.w	r2, #512	; 0x200
    3ace:	movs	r3, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3ad0:	mov.w	r8, #512	; 0x200
    3ad4:	b.n	3a6c <ExFatFile::read(void*, unsigned int)+0x104>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3ad6:	mov	r0, r7
    3ad8:	mov	r2, r9
    3ada:	ldr	r1, [r4, #24]
    3adc:	str	r3, [sp, #4]
    3ade:	bl	43f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3ae2:	sxtb	r0, r0
        if (fg < 0) {
    3ae4:	cmp	r0, #0
    3ae6:	blt.n	3a2e <ExFatFile::read(void*, unsigned int)+0xc6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3ae8:	beq.n	3b04 <ExFatFile::read(void*, unsigned int)+0x19c>
    3aea:	ldr	r7, [r4, #32]
    3aec:	ldr	r2, [r4, #24]
    3aee:	ldr	r3, [sp, #4]
    3af0:	b.n	39d0 <ExFatFile::read(void*, unsigned int)+0x68>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3af2:	ldrb.w	r3, [r0, #49]	; 0x31
    3af6:	lsls	r0, r3, #28
    3af8:	bmi.w	3982 <ExFatFile::read(void*, unsigned int)+0x1a>
    3afc:	b.n	399c <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3afe:	rsb	fp, r0, r2
    3b02:	b.n	399c <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    3b04:	ldrb.w	r3, [r4, #49]	; 0x31
    3b08:	tst.w	r3, #80	; 0x50
    3b0c:	bne.n	3a82 <ExFatFile::read(void*, unsigned int)+0x11a>
    3b0e:	b.n	3a2e <ExFatFile::read(void*, unsigned int)+0xc6>

00003b10 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    3b10:	push	{r4, r5, r6, r7, lr}
    3b12:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3b14:	movs	r2, #1
    3b16:	add.w	r1, sp, #7
    3b1a:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    3b1c:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    3b20:	ldr	r5, [r0, #24]
    3b22:	bl	3968 <ExFatFile::read(void*, unsigned int)>
    3b26:	cmp	r0, #1
    3b28:	it	eq
    3b2a:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3b2e:	str	r5, [r4, #24]
    3b30:	it	ne
    3b32:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    3b36:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3b3a:	add	sp, #12
    3b3c:	pop	{r4, r5, r6, r7, pc}
    3b3e:	nop

00003b40 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3b40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b44:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3b48:	ldr	r5, [r0, #24]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3b4a:	sub	sp, #12
    3b4c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3b4e:	cmp.w	lr, #0
    3b52:	beq.n	3b8c <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3b54:	ldrd	r0, r1, [r0]
    3b58:	cmp	r1, r3
    3b5a:	it	eq
    3b5c:	cmpeq	r0, r2
    3b5e:	mov	r6, r2
    3b60:	mov	r7, r3
    3b62:	beq.n	3bdc <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    3b64:	orrs.w	r3, r6, r7
    3b68:	bne.n	3b7a <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    3b6a:	movs	r3, #0
    3b6c:	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    3b6e:	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    3b70:	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    3b74:	add	sp, #12
    3b76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3b7a:	tst.w	lr, #8
    3b7e:	beq.n	3b96 <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    3b80:	ldrd	r2, r3, [r4, #16]
    3b84:	cmp	r3, r7
    3b86:	it	eq
    3b88:	cmpeq	r2, r6
    3b8a:	bcs.n	3b96 <ExFatFile::seekSet(unsigned long long)+0x56>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    3b8c:	str	r5, [r4, #24]
  return false;
    3b8e:	movs	r0, #0
}
    3b90:	add	sp, #12
    3b92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3b96:	ldr	r3, [r4, #32]
    3b98:	str	r3, [sp, #4]
    3b9a:	ldrb.w	ip, [r3, #1093]	; 0x445
  if (isContiguous()) {
    3b9e:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3ba2:	add.w	ip, ip, #9
    3ba6:	uxtb.w	ip, ip
    3baa:	adds.w	r2, r6, #4294967295
    3bae:	adc.w	r3, r7, #4294967295
    3bb2:	rsb	r8, ip, #32
    3bb6:	lsl.w	fp, r3, r8
    3bba:	lsr.w	r2, r2, ip
    3bbe:	orr.w	r2, r2, fp
    3bc2:	sub.w	fp, ip, #32
    3bc6:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    3bca:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3bce:	orr.w	r2, r2, r3
  if (isContiguous()) {
    3bd2:	beq.n	3be0 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    3bd4:	ldr	r3, [r4, #28]
    3bd6:	add	r2, r3
    3bd8:	str	r2, [r4, #24]
    goto done;
    3bda:	b.n	3b6e <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3bdc:	movs	r0, #1
    3bde:	b.n	3b90 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3be0:	adds.w	r9, r0, #4294967295
    3be4:	adc.w	sl, r1, #4294967295
    3be8:	lsr.w	ip, r9, ip
    3bec:	lsl.w	r8, sl, r8
    3bf0:	orr.w	ip, ip, r8
    3bf4:	lsr.w	fp, sl, fp
    3bf8:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    3bfc:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3bfe:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3c00:	bcs.n	3c32 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3c02:	tst.w	lr, #64	; 0x40
    3c06:	itet	ne
    3c08:	ldrne	r3, [sp, #4]
    3c0a:	ldreq	r3, [r4, #28]
    3c0c:	ldrne.w	r3, [r3, #1076]	; 0x434
    3c10:	str	r3, [r4, #24]
    3c12:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3c14:	add.w	r9, r4, #24
    3c18:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3c1a:	cmp.w	r8, #0
    3c1e:	beq.n	3b6e <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3c20:	ldr	r1, [r4, #24]
    3c22:	ldr	r0, [r4, #32]
    3c24:	bl	43f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3c28:	add.w	r8, r8, #4294967295
    3c2c:	cmp	r0, #0
    3c2e:	bne.n	3c18 <ExFatFile::seekSet(unsigned long long)+0xd8>
    3c30:	b.n	3b8c <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    3c32:	orrs.w	r3, r0, r1
    3c36:	beq.n	3c02 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3c38:	rsb	r2, ip, r2
    3c3c:	b.n	3c12 <ExFatFile::seekSet(unsigned long long)+0xd2>
    3c3e:	nop

00003c40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    3c40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c44:	mov	r6, r1
    3c46:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    3c48:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    3c4c:	str	r2, [sp, #0]
    3c4e:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    3c50:	cbnz	r1, 3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3c52:	mov	sl, r3
    3c54:	ldrb.w	r3, [r6, #49]	; 0x31
    3c58:	tst.w	r3, #80	; 0x50
    3c5c:	bne.n	3c6e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    3c5e:	movs	r0, #0
    3c60:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    3c64:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    3c68:	add	sp, #76	; 0x4c
    3c6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    3c6e:	ldr	r3, [sp, #112]	; 0x70
    3c70:	and.w	r3, r3, #3
    3c74:	cmp	r3, #1
    3c76:	beq.n	3c86 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    3c78:	cmp	r3, #2
    3c7a:	beq.w	3e90 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    3c7e:	cmp	r3, #0
    3c80:	bne.n	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3c82:	movs	r3, #1
    3c84:	b.n	3c88 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    3c86:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3c88:	ldr	r2, [sp, #112]	; 0x70
    3c8a:	and.w	r2, r2, #8
    3c8e:	orrs	r3, r2
    3c90:	str	r3, [sp, #4]
  if (name) {
    3c92:	ldr	r3, [sp, #0]
    3c94:	cmp	r3, #0
    3c96:	beq.w	3e94 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    3c9a:	mov	r0, r3
    3c9c:	movs	r2, #0
    3c9e:	mov	r1, sl
    3ca0:	bl	466c <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3ca4:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    3ca8:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3caa:	cbz	r3, 3cc0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3cac:	ldrd	r2, r3, [r6]
    3cb0:	orrs	r3, r2
    3cb2:	beq.n	3cc0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    3cb4:	movs	r2, #0
    3cb6:	movs	r3, #0
    3cb8:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    3cbc:	movs	r1, #0
    3cbe:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3cc0:	ldr	r2, [pc, #736]	; (3fa4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    3cc2:	add.w	r3, sl, #14
    3cc6:	smull	r1, r2, r2, r3
    3cca:	add	r2, r3
    3ccc:	asrs	r3, r3, #31
    3cce:	rsb	r3, r3, r2, asr #3
    3cd2:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    3cd4:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3cd8:	str	r3, [sp, #12]
    3cda:	adds	r3, #2
    3cdc:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    3ce0:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    3ce2:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3ce4:	movs	r2, #32
    3ce6:	add	r1, sp, #40	; 0x28
    3ce8:	mov	r0, r6
    3cea:	bl	3968 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3cee:	cmp	r0, #0
    3cf0:	beq.n	3d6e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    3cf2:	cmp	r0, #32
    3cf4:	bne.n	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    3cf6:	ldrb.w	r3, [sp, #40]	; 0x28
    3cfa:	lsls	r2, r3, #24
    3cfc:	bmi.n	3dcc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    3cfe:	cmp	r4, #0
    3d00:	bne.n	3dc6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    3d02:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    3d04:	ldr	r1, [r6, #24]
    3d06:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    3d08:	subs	r2, #32
    3d0a:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    3d0c:	adds	r4, #1
    3d0e:	uxtb	r4, r4
      }
      if (!buf[0]) {
    3d10:	cbz	r3, 3d6e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    3d12:	cmp	r3, #192	; 0xc0
    3d14:	beq.w	3e3e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    3d18:	cmp	r3, #193	; 0xc1
    3d1a:	beq.n	3de2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    3d1c:	cmp	r3, #133	; 0x85
    3d1e:	bne.n	3ce4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    3d20:	movs	r2, #56	; 0x38
    3d22:	movs	r1, #0
    3d24:	mov	r0, r5
    3d26:	bl	c09c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3d2a:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    3d2e:	ldrb.w	r2, [sp, #41]	; 0x29
    3d32:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    3d36:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3d38:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    3d3c:	it	pl
    3d3e:	orrpl.w	r2, r2, #8
    3d42:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3d46:	ldr	r3, [r6, #0]
    3d48:	ldr	r1, [r6, #32]
    3d4a:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    3d4c:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    3d4e:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    3d50:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3d52:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    3d54:	ldrb.w	r3, [r6, #51]	; 0x33
    3d58:	ubfx	r3, r3, #6, #1
    3d5c:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3d60:	movs	r2, #32
    3d62:	add	r1, sp, #40	; 0x28
    3d64:	mov	r0, r6
    3d66:	bl	3968 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3d6a:	cmp	r0, #0
    3d6c:	bne.n	3cf2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    3d6e:	ldr	r3, [sp, #112]	; 0x70
    3d70:	lsls	r1, r3, #22
    3d72:	bpl.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3d76:	ldr	r3, [sp, #4]
    3d78:	lsls	r2, r3, #30
    3d7a:	bpl.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3d7e:	ldr	r3, [sp, #0]
    3d80:	cmp	r3, #0
    3d82:	beq.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3d86:	cmp	r4, fp
    3d88:	bcc.n	3da4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    3d8a:	b.n	3e9a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    3d8c:	cmp	r0, #32
    3d8e:	bne.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    3d92:	cbnz	r4, 3d9e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    3d94:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    3d96:	ldr	r1, [r6, #24]
    3d98:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    3d9a:	subs	r2, #32
    3d9c:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3d9e:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3da0:	cmp	fp, r4
    3da2:	bls.n	3e9a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    3da4:	movs	r2, #32
    3da6:	add	r1, sp, #40	; 0x28
    3da8:	mov	r0, r6
    3daa:	bl	3968 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3dae:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    3db0:	cmp	r0, #0
    3db2:	bne.n	3d8c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    3db4:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    3db6:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    3db8:	bl	4a0c <ExFatFile::addDirCluster()>
    3dbc:	cmp	r0, #0
    3dbe:	beq.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    3dc2:	str	r7, [r6, #24]
      continue;
    3dc4:	b.n	3da0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    3dc6:	cmp	r4, fp
    3dc8:	bcs.n	3d10 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    3dca:	b.n	3d0c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    3dcc:	cmp.w	r9, #0
    3dd0:	bne.n	3d12 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    3dd2:	cmp	r4, fp
    3dd4:	it	cc
    3dd6:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    3dd8:	cmp	r3, #133	; 0x85
    3dda:	bne.n	3ce4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    3ddc:	mov.w	r9, #1
    3de0:	b.n	3d20 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    3de2:	rsb	r8, r7, sl
    3de6:	uxtb.w	r8, r8
    3dea:	cmp.w	r8, #15
    3dee:	it	cs
    3df0:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    3df4:	mov	r3, r8
    3df6:	mov	r2, r7
    3df8:	ldr	r1, [sp, #0]
    3dfa:	add	r0, sp, #40	; 0x28
    3dfc:	bl	4614 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    3e00:	cmp	r0, #0
    3e02:	beq.n	3e7e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    3e04:	add	r7, r8
    3e06:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    3e08:	cmp	sl, r7
    3e0a:	bne.w	3ce4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    3e0e:	ldr	r3, [sp, #112]	; 0x70
    3e10:	lsls	r3, r3, #20
    3e12:	bmi.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    3e16:	ldr	r3, [sp, #112]	; 0x70
    3e18:	tst.w	r3, #17408	; 0x4400
    3e1c:	bne.w	3f60 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    3e20:	ldrb.w	r3, [r5, #51]	; 0x33
    3e24:	lsls	r7, r3, #30
    3e26:	bmi.w	3f60 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3e2a:	ldr	r3, [sp, #112]	; 0x70
    3e2c:	lsls	r3, r3, #21
    3e2e:	bmi.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3e32:	ldr	r3, [sp, #112]	; 0x70
    3e34:	lsls	r0, r3, #17
    3e36:	bmi.w	3fa8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    3e3a:	movs	r0, #1
    3e3c:	b.n	3c68 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3e3e:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    3e42:	ldr	r2, [sp, #4]
    3e44:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3e48:	lsls	r1, r3, #30
    3e4a:	bpl.n	3e54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    3e4c:	orr.w	r3, r2, #64	; 0x40
    3e50:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    3e54:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    3e58:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    3e5c:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    3e60:	ldr	r3, [sp, #60]	; 0x3c
    3e62:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    3e64:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    3e66:	strd	r0, r1, [r5, #8]
        if (!name) {
    3e6a:	cmp	r3, #0
    3e6c:	beq.n	3e0e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    3e6e:	ldrb.w	r3, [sp, #43]	; 0x2b
    3e72:	cmp	r3, sl
    3e74:	beq.n	3e82 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    3e76:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    3e7a:	mov	r7, r9
    3e7c:	b.n	3ce4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    3e7e:	mov	r9, r0
    3e80:	b.n	3ce4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    3e82:	ldrh.w	r3, [sp, #44]	; 0x2c
    3e86:	ldr	r2, [sp, #8]
    3e88:	cmp	r3, r2
    3e8a:	bne.n	3e76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    3e8c:	movs	r7, #0
    3e8e:	b.n	3ce4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    3e90:	movs	r3, #3
    3e92:	b.n	3c88 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    3e94:	ldr	r3, [sp, #0]
    3e96:	str	r3, [sp, #8]
    3e98:	b.n	3cc0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3e9a:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    3e9e:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3ea0:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    3ea4:	movs	r1, #0
    3ea6:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3ea8:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3eac:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    3eb0:	bl	c09c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3eb4:	ldr	r4, [sp, #12]
    3eb6:	ldr	r3, [r6, #32]
    3eb8:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3ebc:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3ec0:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3ec4:	movs	r4, #8
    3ec6:	strb.w	r4, [r5, #49]	; 0x31
    3eca:	add.w	r7, sl, #30
  m_dirPos = freePos;
    3ece:	add.w	r4, r5, #36	; 0x24
    3ed2:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    3ed6:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3ed8:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3edc:	stmia.w	r4, {r0, r1, r2}
    3ee0:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    3ee2:	movs	r6, #0
    3ee4:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    3ee6:	movs	r2, #1
    3ee8:	mov	r1, r8
    3eea:	bl	4364 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3eee:	mov	r4, r0
    3ef0:	cmp	r0, #0
    3ef2:	beq.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3ef6:	ldrsb.w	r3, [r0]
    3efa:	cmp	r3, #0
    3efc:	blt.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    3f00:	movs	r2, #32
    3f02:	movs	r1, #0
    3f04:	bl	c09c <memset>
    if (i == 0) {
    3f08:	cmp	r6, #0
    3f0a:	beq.n	3fda <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    3f0c:	cmp	r6, #1
    3f0e:	beq.n	3fba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    3f10:	rsb	r3, r6, r6, lsl #4
    3f14:	cmp	r7, #15
    3f16:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    3f1a:	mov.w	r2, #193	; 0xc1
    3f1e:	mov	r1, r7
    3f20:	it	cs
    3f22:	movcs	r1, #15
    3f24:	uxtb	r3, r3
    3f26:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    3f28:	cbz	r1, 3f40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    3f2a:	adds	r4, #2
    3f2c:	sxth	r1, r1
    3f2e:	add.w	r1, r4, r1, lsl #1
    3f32:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    3f34:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3f38:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    3f3c:	cmp	r1, r4
    3f3e:	bne.n	3f34 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    3f40:	adds	r6, #1
    3f42:	uxtb	r6, r6
    3f44:	cmp	fp, r6
    3f46:	bls.n	3f9c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    3f48:	movs	r2, #32
    3f4a:	mov	r1, r8
    3f4c:	ldr	r0, [r5, #32]
    3f4e:	bl	4398 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3f52:	cmp	r0, #1
    3f54:	bne.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3f58:	subs	r7, #15
    3f5a:	uxtb	r7, r7
    3f5c:	ldr	r0, [r5, #32]
    3f5e:	b.n	3ee6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    3f60:	ldrb.w	r3, [r5, #49]	; 0x31
    3f64:	tst.w	r3, #17
    3f68:	bne.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3f6c:	ldr	r3, [sp, #112]	; 0x70
    3f6e:	lsls	r6, r3, #21
    3f70:	bpl.w	3e32 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    3f74:	ldrb.w	r3, [r5, #51]	; 0x33
    3f78:	lsls	r4, r3, #30
    3f7a:	bpl.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    3f7e:	movs	r2, #0
    3f80:	movs	r3, #0
    3f82:	mov	r0, r5
    3f84:	bl	3b40 <ExFatFile::seekSet(unsigned long long)>
    3f88:	cmp	r0, #0
    3f8a:	beq.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3f8e:	mov	r0, r5
    3f90:	bl	4d60 <ExFatFile::truncate()>
    3f94:	cmp	r0, #0
    3f96:	beq.w	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3f9a:	b.n	3e3a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    3f9c:	mov	r0, r5
    3f9e:	bl	49ac <ExFatFile::sync()>
    3fa2:	b.n	3c68 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    3fa4:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3fa8:	ldrd	r2, r3, [r5, #16]
    3fac:	mov	r0, r5
    3fae:	bl	3b40 <ExFatFile::seekSet(unsigned long long)>
    3fb2:	cmp	r0, #0
    3fb4:	bne.w	3e3a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    3fb8:	b.n	3c5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3fba:	movs	r3, #192	; 0xc0
    3fbc:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3fbe:	ldr	r3, [sp, #4]
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3fc0:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3fc2:	orn	r3, r3, #63	; 0x3f
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3fc6:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3fc8:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    3fcc:	ldrb.w	r3, [sp, #12]
    3fd0:	strb	r3, [r4, #3]
    3fd2:	ldrh.w	r3, [sp, #8]
    3fd6:	strh	r3, [r4, #4]
    3fd8:	b.n	3f40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3fda:	movs	r3, #133	; 0x85
    3fdc:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    3fde:	ldr	r3, [pc, #56]	; (4018 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d8>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3fe0:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    3fe4:	strb.w	r9, [r4, #1]

      if (FsDateTime::callback) {
    3fe8:	ldr	r3, [r3, #0]
    3fea:	cbz	r3, 400c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3cc>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    3fec:	add.w	r2, sp, #23
    3ff0:	add.w	r1, sp, #26
    3ff4:	add	r0, sp, #24
    3ff6:	blx	r3
    3ff8:	ldrh.w	r1, [sp, #24]
    3ffc:	ldrh.w	r2, [sp, #26]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    4000:	ldrb.w	r3, [sp, #23]
    4004:	strh	r1, [r4, #10]
    4006:	strh	r2, [r4, #8]
    4008:	strb	r3, [r4, #20]
    400a:	b.n	3f40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    400c:	movw	r3, #21025	; 0x5221
    4010:	strh	r3, [r4, #10]
    4012:	strh	r3, [r4, #14]
    4014:	strh	r3, [r4, #18]
    4016:	b.n	3f40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4018:	.word	0x20019a10

0000401c <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    401c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4020:	mov	r6, r0
    4022:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4024:	ldrb.w	r4, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4028:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    402a:	movs	r0, #0
    402c:	strb.w	r0, [sp, #73]	; 0x49
    4030:	strb.w	r0, [sp, #74]	; 0x4a
    4034:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4038:	cbnz	r4, 4048 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    403a:	mov	r9, r3
    403c:	ldrb.w	r3, [r1, #49]	; 0x31
    4040:	tst.w	r3, #80	; 0x50
    4044:	mov	r5, r1
    4046:	bne.n	4050 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    4048:	movs	r0, #0
}
    404a:	add	sp, #84	; 0x54
    404c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4050:	ldrb	r3, [r2, #0]
    4052:	cmp	r3, #47	; 0x2f
    4054:	mov	r4, r2
    4056:	beq.n	40be <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4058:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    405c:	mov	r1, r4
    405e:	add	r3, sp, #12
    4060:	add	r2, sp, #16
    4062:	mov	r0, r6
    4064:	bl	38a4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4068:	cmp	r0, #0
    406a:	beq.n	4048 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    406c:	ldr	r3, [sp, #12]
    406e:	ldrb	r3, [r3, #0]
    4070:	cmp	r3, #0
    4072:	beq.n	40e8 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    4074:	ldrb.w	r3, [sp, #16]
    4078:	ldr	r2, [sp, #20]
    407a:	str.w	r8, [sp]
    407e:	mov	r1, r5
    4080:	mov	r0, r6
    4082:	bl	3c40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4086:	cmp	r0, #0
    4088:	beq.n	4048 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    408a:	mov	r4, r6
    408c:	add	r7, sp, #24
    408e:	add.w	lr, r6, #48	; 0x30
    4092:	ldr	r0, [r4, #0]
    4094:	ldr	r1, [r4, #4]
    4096:	ldr	r2, [r4, #8]
    4098:	ldr	r3, [r4, #12]
    409a:	mov	r5, r7
    409c:	stmia	r5!, {r0, r1, r2, r3}
    409e:	adds	r4, #16
    40a0:	cmp	r4, lr
    40a2:	mov	r7, r5
    40a4:	bne.n	4092 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    40a6:	ldr	r0, [r4, #0]
    40a8:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    40aa:	mov	r0, r6
    40ac:	bl	49ac <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    40b0:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    40b2:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    40b6:	strb.w	r8, [r6, #51]	; 0x33
    40ba:	ldr	r4, [sp, #12]
    40bc:	b.n	405c <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    40be:	adds	r4, #1
    40c0:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    40c2:	ldrb	r1, [r4, #0]
    40c4:	cmp	r1, #47	; 0x2f
    40c6:	beq.n	40be <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    40c8:	cbz	r1, 4100 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    40ca:	movs	r2, #56	; 0x38
    40cc:	add	r0, sp, #24
    40ce:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    40d0:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    40d2:	bl	c09c <memset>
  m_attributes = FILE_ATTR_ROOT;
    40d6:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    40d8:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    40da:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    40dc:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    40de:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    40e2:	strb.w	r3, [sp, #75]	; 0x4b
    40e6:	b.n	4058 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    40e8:	ldrb.w	r3, [sp, #16]
    40ec:	ldr	r2, [sp, #20]
    40ee:	str.w	r9, [sp]
    40f2:	mov	r1, r5
    40f4:	mov	r0, r6
    40f6:	bl	3c40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
}
    40fa:	add	sp, #84	; 0x54
    40fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4100:	movs	r2, #56	; 0x38
    4102:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4104:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4106:	bl	c09c <memset>
  m_attributes = FILE_ATTR_ROOT;
    410a:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    410c:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    410e:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4110:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4114:	strb.w	r0, [r6, #51]	; 0x33
    4118:	b.n	404a <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    411a:	nop

0000411c <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    411c:	cbz	r1, 4126 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    411e:	add.w	r1, r1, #1096	; 0x448
    4122:	b.w	401c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4126:	mov	r0, r1
    4128:	bx	lr
    412a:	nop

0000412c <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    412c:	ldrb.w	r3, [r0, #49]	; 0x31
    4130:	cbnz	r3, 4148 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    4132:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4134:	ldrb.w	r4, [r1, #49]	; 0x31
    4138:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    413c:	sub	sp, #12
    413e:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4140:	bne.n	414c <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    4142:	mov	r0, r4
}
    4144:	add	sp, #12
    4146:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    4148:	movs	r0, #0
}
    414a:	bx	lr
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    414c:	ldrd	r4, r5, [r5]
    4150:	movs	r5, #0
    4152:	and.w	r4, r4, #31
    4156:	orrs	r4, r5
    4158:	beq.n	4160 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    415a:	mov	r0, r3
}
    415c:	add	sp, #12
    415e:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    4160:	str	r2, [sp, #0]
    4162:	mov	r2, r3
    4164:	bl	3c40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    4168:	add	sp, #12
    416a:	pop	{r4, r5, pc}

0000416c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//------------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    416c:	push	{r3, r4, r5, lr}
    416e:	mov	r4, r1
    4170:	ldr.w	r1, [r0, #1060]	; 0x424
    4174:	mov	r5, r2
    4176:	add.w	r1, r1, r4, lsr #7
    417a:	add.w	r0, r0, #528	; 0x210
    417e:	movs	r2, #0
    4180:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4184:	cbz	r0, 4198 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4186:	lsls	r4, r4, #2
    4188:	ubfx	r4, r4, #0, #9
    418c:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    418e:	adds	r2, r3, #1
    4190:	beq.n	419c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    4192:	str	r3, [r5, #0]
  return 1;
    4194:	movs	r0, #1
    4196:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    4198:	movs	r0, #255	; 0xff
    419a:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    419c:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    419e:	pop	{r3, r4, r5, pc}

000041a0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    41a0:	push	{r3, r4, r5, lr}
    41a2:	mov	r4, r1
    41a4:	ldr.w	r1, [r0, #1060]	; 0x424
    41a8:	mov	r5, r2
    41aa:	add.w	r1, r1, r4, lsr #7
    41ae:	add.w	r0, r0, #528	; 0x210
    41b2:	movs	r2, #1
    41b4:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    41b8:	mov	r3, r0
    41ba:	cbz	r0, 41c8 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    41bc:	lsls	r4, r4, #2
    41be:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    41c2:	movs	r0, #1
    41c4:	str	r5, [r3, r4]
    41c6:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    41c8:	pop	{r3, r4, r5, pc}
    41ca:	nop

000041cc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    41cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41d0:	mov	r8, r0
    41d2:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    41d4:	mov	fp, r1
    41d6:	cmp	r1, #0
    41d8:	beq.n	4264 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    41da:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    41dc:	ldr.w	r3, [r8, #1072]	; 0x430
    41e0:	cmp	r7, r3
    41e2:	bcs.n	425c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    41e4:	and.w	r5, r7, #7
    41e8:	movs	r3, #1
    41ea:	lsl.w	r5, r3, r5
    41ee:	uxtb	r5, r5
    41f0:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    41f4:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    41f6:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    41f8:	ldr.w	r1, [r8, #1068]	; 0x42c
    41fc:	movs	r2, #0
    41fe:	add.w	r1, r1, r4, lsr #12
    4202:	mov	r0, r8
    4204:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4208:	cbz	r0, 423c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    420a:	ldrb.w	r1, [r0, sl]
    420e:	b.n	4226 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4210:	cmp	r2, r9
    4212:	beq.n	426a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4214:	cmp	r7, r4
    4216:	beq.n	423a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4218:	ldr.w	r2, [r8, #1072]	; 0x430
    421c:	cmp	r4, r2
    421e:	bcs.n	4250 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4220:	ands.w	r5, r3, #255	; 0xff
    4224:	beq.n	4240 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4226:	adds	r4, #1
        if (!(mask & cache[i])) {
    4228:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    422a:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    422e:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4232:	beq.n	4210 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4234:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4236:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4238:	bne.n	4218 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    423a:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    423c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4240:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4244:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4248:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    424c:	bne.n	420a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    424e:	b.n	4254 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4250:	movs	r6, #0
    4252:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4254:	mov.w	sl, #0
    4258:	movs	r5, #1
    425a:	b.n	41f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    425c:	movs	r7, #0
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    425e:	mov	sl, r7
    4260:	movs	r5, #1
    4262:	b.n	41f4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4264:	ldr.w	r7, [r0, #1056]	; 0x420
    4268:	b.n	41dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    426a:	cmp.w	fp, #0
    426e:	bne.n	427a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    4270:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4274:	it	eq
    4276:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    427a:	adds	r0, r6, #2
    427c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004280 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4280:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4284:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4286:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4288:	ldr.w	r0, [r0, #1072]	; 0x430
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    428c:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    428e:	adds	r2, r1, r2
    4290:	cmp	r2, r0
    4292:	bhi.n	4306 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4294:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4296:	ldr.w	r3, [r8, #1056]	; 0x420
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    429a:	cmp.w	sl, #0
    429e:	bne.n	430c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    42a0:	cmp	r1, r3
      m_bitmapStart = start;
    42a2:	it	cc
    42a4:	strcc.w	r1, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    42a8:	and.w	r4, r1, #7
    42ac:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    42ae:	ldr.w	r3, [r8, #1068]	; 0x42c
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    42b2:	lsl.w	r4, r2, r4
    42b6:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    42b8:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    42bc:	ubfx	r6, r1, #3, #9
    42c0:	movs	r2, #1
    42c2:	mov	r1, r9
    42c4:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    42c6:	add	r9, r2
    42c8:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    42cc:	cbz	r0, 4306 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    42ce:	adds	r7, r0, r6
    42d0:	add.w	r0, r0, #512	; 0x200
    42d4:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    42d8:	tst	r2, r4
    42da:	ite	ne
    42dc:	movne	r6, #1
    42de:	moveq	r6, #0
    42e0:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    42e2:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    42e6:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    42ea:	beq.n	4306 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    42ec:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    42ee:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    42f2:	beq.n	4320 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    42f4:	ands.w	r4, r4, #255	; 0xff
    42f8:	bne.n	42d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    42fa:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    42fc:	mov	r6, r4
    42fe:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4302:	bne.n	42d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    4304:	b.n	42c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    4306:	movs	r0, #0
    4308:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    430c:	cmp	r1, r3
    430e:	bhi.n	42a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4310:	cmp	r2, r3
    4312:	bls.n	42a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4314:	cmp	r2, r0
    4316:	it	cs
    4318:	movcs	r2, #0
    431a:	str.w	r2, [r8, #1056]	; 0x420
    431e:	b.n	42a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4320:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4322:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4326:	nop

00004328 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4328:	push	{r4, r5, r6, lr}
    432a:	sub	sp, #8
    432c:	add	r6, sp, #8
    432e:	mov	r5, r0
    4330:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    4334:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4336:	ldr.w	r3, [r5, #1072]	; 0x430
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    433a:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    433c:	adds	r3, #1
    433e:	cmp	r1, r3
    4340:	bls.n	4348 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    4342:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    4344:	add	sp, #8
    4346:	pop	{r4, r5, r6, pc}
    4348:	mov	r2, r6
    434a:	mov	r0, r5
    434c:	bl	416c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4350:	sxtb	r0, r0
    if (status < 0) return 0;
    4352:	cmp	r0, #0
    4354:	blt.n	4342 <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    4356:	add.w	r4, r4, #1
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    435a:	bne.n	4336 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    435c:	mov	r0, r4
  } while (status);
  return n;
}
    435e:	add	sp, #8
    4360:	pop	{r4, r5, r6, pc}
    4362:	nop

00004364 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4364:	push	{r3, r4, r5, r6, r7, lr}
    4366:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4368:	ldmia.w	r6, {r3, r5}
    436c:	ldr.w	r1, [r0, #1080]	; 0x438
    4370:	ldr.w	r4, [r0, #1068]	; 0x42c
    4374:	ldrb.w	r7, [r0, #1093]	; 0x445
    4378:	ands	r1, r5
    437a:	subs	r3, #2
    437c:	add.w	r1, r4, r1, lsr #9
    4380:	lsls	r3, r7
    4382:	add	r1, r3
    4384:	add.w	r0, r0, #528	; 0x210
    4388:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    438c:	cbz	r0, 4396 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    438e:	ldr	r3, [r6, #4]
    4390:	ubfx	r3, r3, #0, #9
    4394:	add	r0, r3
}
    4396:	pop	{r3, r4, r5, r6, r7, pc}

00004398 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4398:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    439a:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    439c:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    439e:	adds	r3, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    43a0:	ldr.w	r1, [r0, #1080]	; 0x438
  pos->position += offset;
    43a4:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    43a6:	ldrb.w	r3, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    43aa:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    43ac:	adds	r3, #9
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    43ae:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    43b0:	uxtb	r3, r3
    43b2:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    43b6:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    43b8:	cbz	r4, 43ca <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    43ba:	ldrb	r3, [r5, #8]
    43bc:	cbz	r3, 43ce <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    43be:	ldr	r3, [r5, #0]
    43c0:	adds	r3, #1
    43c2:	str	r3, [r5, #0]
    43c4:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    43c6:	cmp	r4, #0
    43c8:	bne.n	43ba <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    43ca:	movs	r0, #1
    43cc:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    43ce:	ldr.w	r3, [r6, #1072]	; 0x430
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    43d2:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    43d4:	adds	r3, #1
    43d6:	cmp	r1, r3
    43d8:	bls.n	43e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    43da:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    43de:	pop	{r4, r5, r6, pc}
    43e0:	mov	r2, r5
    43e2:	mov	r0, r6
    43e4:	bl	416c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    43e8:	sxtb	r0, r0
      if (status != 1) {
    43ea:	cmp	r0, #1
    43ec:	beq.n	43c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    43ee:	pop	{r4, r5, r6, pc}

000043f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    43f0:	ldr.w	r3, [r0, #1072]	; 0x430
    43f4:	adds	r3, #1
    43f6:	cmp	r3, r1
    43f8:	bcs.n	43fe <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    43fa:	movs	r0, #255	; 0xff
    43fc:	bx	lr
    43fe:	b.w	416c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    4402:	nop

00004404 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4404:	cmp	r1, #1
    4406:	bls.n	4424 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    4408:	ldr.w	r3, [r0, #1072]	; 0x430
    440c:	adds	r3, #1
    440e:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4410:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4412:	bls.n	441c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    4414:	movs	r0, #0
    4416:	ldr.w	r4, [sp], #4
    441a:	bx	lr
    441c:	ldr.w	r4, [sp], #4
    4420:	b.w	41a0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    4424:	movs	r0, #0
    4426:	bx	lr

00004428 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4428:	push	{r4, r5, r6, r7, lr}
    442a:	mov	r4, r1
    442c:	sub	sp, #12
    442e:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    4430:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4432:	ldr.w	r3, [r5, #1072]	; 0x430
    4436:	adds	r3, #1
    4438:	cmp	r4, r3
    443a:	bls.n	4442 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    443c:	movs	r0, #0
}
    443e:	add	sp, #12
    4440:	pop	{r4, r5, r6, r7, pc}
    4442:	add	r2, sp, #4
    4444:	mov	r1, r4
    4446:	mov	r0, r5
    4448:	bl	416c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    444c:	sxtb	r7, r0
    if (status < 0) {
    444e:	cmp	r7, #0
    4450:	blt.n	443c <ExFatPartition::freeChain(unsigned long)+0x14>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4452:	cmp	r4, #1
    4454:	bls.n	443c <ExFatPartition::freeChain(unsigned long)+0x14>
    4456:	ldr.w	r3, [r5, #1072]	; 0x430
    445a:	adds	r3, #1
    445c:	cmp	r4, r3
    445e:	bhi.n	443c <ExFatPartition::freeChain(unsigned long)+0x14>
    4460:	movs	r2, #0
    4462:	mov	r1, r4
    4464:	mov	r0, r5
    4466:	bl	41a0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    446a:	cmp	r0, #0
    446c:	beq.n	443c <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    446e:	ldr	r3, [sp, #4]
    4470:	adds	r4, #1
    4472:	cmp	r4, r3
    4474:	bne.n	448e <ExFatPartition::freeChain(unsigned long)+0x66>
    4476:	cmp	r7, #0
    4478:	bne.n	4432 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    447a:	mov	r3, r7
    447c:	subs	r2, r4, r6
    447e:	mov	r1, r6
    4480:	mov	r0, r5
    4482:	bl	4280 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4486:	cmp	r0, #0
    4488:	beq.n	443c <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    448a:	add	sp, #12
    448c:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    448e:	subs	r2, r4, r6
    4490:	mov	r1, r6
    4492:	movs	r3, #0
    4494:	mov	r0, r5
    4496:	bl	4280 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    449a:	cmp	r0, #0
    449c:	beq.n	443c <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    449e:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    44a0:	cmp	r7, #0
    44a2:	beq.n	443e <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    44a4:	mov	r6, r4
    44a6:	b.n	4432 <ExFatPartition::freeChain(unsigned long)+0xa>

000044a8 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    44a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    44ac:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    44ae:	ldr.w	r6, [r0, #1068]	; 0x42c

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    44b2:	mov	r8, r0
    44b4:	add.w	r7, r0, #528	; 0x210
  uint32_t nc = 0;
    44b8:	mov	r5, r4
    44ba:	mov	r1, r6
    44bc:	movs	r2, #0
    44be:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    44c0:	adds	r6, #1
    44c2:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    44c6:	cbz	r0, 4516 <ExFatPartition::freeClusterCount()+0x6e>
    44c8:	add.w	lr, r0, #4294967295
    44cc:	ldr.w	ip, [r8, #1072]	; 0x430
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    44d0:	ldrb.w	r0, [lr, #1]!
    44d4:	cmp	r0, #255	; 0xff
    44d6:	add.w	r9, r5, #4096	; 0x1000
    44da:	beq.n	4504 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    44dc:	cbz	r0, 44f2 <ExFatPartition::freeClusterCount()+0x4a>
    44de:	movs	r2, #8
    44e0:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    44e2:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    44e4:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    44e8:	it	ne
    44ea:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    44ec:	subs	r2, #1
    44ee:	uxtb	r3, r1
    44f0:	bne.n	44e2 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    44f2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    44f4:	cmp	ip, r5
    44f6:	bls.n	450e <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    44f8:	cmp	r5, r9
    44fa:	beq.n	44ba <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    44fc:	ldrb.w	r0, [lr, #1]!
    4500:	cmp	r0, #255	; 0xff
    4502:	bne.n	44dc <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4504:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4506:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    4508:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    450c:	bhi.n	44f8 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    450e:	rsb	r0, r4, ip
    4512:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    4516:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    451a:	nop

0000451c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    451c:	push	{r3, r4, r5, r6, r7, lr}
    451e:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4520:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4522:	mov.w	r6, #4294967295
    4526:	add.w	r7, r0, #528	; 0x210
  m_blockDev = dev;
    452a:	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    452e:	str	r1, [r0, #4]
    4530:	str.w	r1, [r0, #532]	; 0x214
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4534:	mov	r5, r2
    4536:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4538:	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    453c:	strb	r3, [r4, #0]
    453e:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4542:	str	r6, [r4, #12]
    4544:	str.w	r6, [r4, #540]	; 0x21c
    4548:	mov	r2, r3
    454a:	mov	r1, r3
    454c:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4550:	cmp	r5, #4
    4552:	bhi.n	456e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4554:	mov	r6, r0
    4556:	cbz	r0, 456e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4558:	cbnz	r5, 4572 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    455a:	movs	r2, #5
    455c:	ldr	r1, [pc, #152]	; (45f8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    455e:	adds	r0, r6, #3
    4560:	bl	c85c <strncmp>
    4564:	cbnz	r0, 456e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4566:	ldrb.w	r3, [r6, #108]	; 0x6c
    456a:	cmp	r3, #9
    456c:	beq.n	45a2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    456e:	movs	r0, #0
    4570:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4572:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4574:	add.w	r3, r0, r3, lsl #4
    4578:	ldrb.w	r2, [r3, #446]	; 0x1be
    457c:	ands.w	r2, r2, #127	; 0x7f
    4580:	bne.n	456e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4582:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4586:	cmp	r3, #0
    4588:	beq.n	456e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    458a:	add.w	r5, r0, r5, lsl #4
    458e:	mov	r0, r7
    4590:	ldr.w	r5, [r5, #438]	; 0x1b6
    4594:	mov	r1, r5
    4596:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    459a:	mov	r6, r0
    459c:	cmp	r0, #0
    459e:	bne.n	455a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    45a0:	b.n	456e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    45a2:	ldr	r3, [r6, #80]	; 0x50
    45a4:	add	r3, r5
    45a6:	str.w	r3, [r4, #1060]	; 0x424
    45aa:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    45ac:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    45b0:	ldr	r3, [r6, #88]	; 0x58
    45b2:	add	r5, r3
    45b4:	str.w	r5, [r4, #1068]	; 0x42c
    45b8:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    45ba:	str.w	r3, [r4, #1072]	; 0x430
    45be:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    45c0:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    45c4:	ldrb.w	r3, [r6, #109]	; 0x6d
    45c8:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    45cc:	movs	r5, #1
    45ce:	adds	r3, #9
    45d0:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    45d4:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    45d6:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    45da:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    45dc:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    45e0:	str.w	r2, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    45e4:	mov	r0, r4
    45e6:	mov	r2, r5
    45e8:	bl	41cc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    45ec:	movs	r3, #64	; 0x40
    45ee:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    45f2:	mov	r0, r5

 fail:
  return false;
}
    45f4:	pop	{r3, r4, r5, r6, r7, pc}
    45f6:	nop
    45f8:	.word	0x00013390

000045fc <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    45fc:	push	{r4, lr}
    45fe:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4600:	ldr.w	r1, [r0, #1076]	; 0x434
    4604:	bl	4328 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    4608:	ldrb.w	r3, [r4, #1093]	; 0x445
    460c:	adds	r3, #9
    460e:	uxtb	r3, r3
}
    4610:	lsls	r0, r3
    4612:	pop	{r4, pc}

00004614 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4614:	cbz	r3, 4668 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return true;
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4616:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4618:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    461a:	cmp	r4, #126	; 0x7e
    461c:	bhi.n	465c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    461e:	add	r3, r2
    4620:	adds	r5, r1, r3
    4622:	add	r2, r1
    4624:	adds	r0, #2
    4626:	ldrb.w	r3, [r2], #1
    462a:	uxtb	r4, r4
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    462c:	sub.w	r1, r3, #97	; 0x61
    4630:	cmp	r1, #25
    4632:	sub.w	r1, r4, #97	; 0x61
    4636:	ite	ls
    4638:	movls	r6, #32
    463a:	movhi	r6, #0
    463c:	cmp	r1, #25
    463e:	ite	ls
    4640:	movls	r1, #32
    4642:	movhi	r1, #0
    4644:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4646:	subs	r4, r4, r1
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4648:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    464a:	uxtb	r4, r4
    464c:	cmp	r4, r3
    464e:	bne.n	465c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4650:	cmp	r2, r5
    4652:	beq.n	4662 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4654:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4658:	cmp	r4, #126	; 0x7e
    465a:	bls.n	4626 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    465c:	movs	r0, #0
    }
  }
  return true;
}
    465e:	pop	{r4, r5, r6}
    4660:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4662:	movs	r0, #1
}
    4664:	pop	{r4, r5, r6}
    4666:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4668:	movs	r0, #1
}
    466a:	bx	lr

0000466c <exFatHashName(char const*, unsigned int, unsigned short)>:
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    466c:	cbz	r1, 46a2 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
    hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    466e:	push	{r4}
    4670:	add	r1, r0
    4672:	lsls	r3, r2, #15
    4674:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4678:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    467c:	sub.w	r4, r2, #97	; 0x61
    4680:	cmp	r4, #25
      c -= 'a' - 'A';
    4682:	itt	ls
    4684:	subls	r2, #32
    4686:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4688:	uxtah	r2, r2, r3
    468c:	uxth	r2, r2
    468e:	lsls	r3, r2, #15
    4690:	orr.w	r2, r3, r2, lsr #1
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4694:	cmp	r1, r0
    4696:	uxth	r2, r2
    4698:	bne.n	4672 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    469a:	mov	r0, r2
    469c:	ldr.w	r4, [sp], #4
    46a0:	bx	lr
    46a2:	mov	r0, r2
    46a4:	bx	lr
    46a6:	nop

000046a8 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    46a8:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    46aa:	push	{r3, r4, r5, r6, r7, lr}
    46ac:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    46ae:	ldr	r0, [r0, #32]
    46b0:	cbz	r1, 46b4 <ExFatFile::addCluster()+0xc>
    46b2:	adds	r1, #1
    46b4:	movs	r2, #1
    46b6:	bl	41cc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    46ba:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    46bc:	mov	r6, r0
  if (find < 2) {
    46be:	bls.n	4720 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    46c0:	movs	r3, #1
    46c2:	mov	r1, r0
    46c4:	mov	r2, r3
    46c6:	ldr	r0, [r4, #32]
    46c8:	bl	4280 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    46cc:	mov	r7, r0
    46ce:	cbz	r0, 4720 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    46d0:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    46d2:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    46d6:	cbz	r0, 4726 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    46d8:	lsls	r2, r3, #25
    46da:	bpl.n	4704 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    46dc:	adds	r2, r0, #1
    46de:	cmp	r6, r2
    46e0:	beq.n	472e <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    46e2:	bic.w	r2, r3, #64	; 0x40
    46e6:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    46ea:	ldr	r3, [r4, #28]
    46ec:	b.n	46fa <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    46ee:	ldr	r0, [r4, #32]
    46f0:	bl	4404 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    46f4:	cbz	r0, 4720 <ExFatFile::addCluster()+0x78>
    46f6:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    46f8:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    46fa:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    46fc:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    46fe:	mov	r1, r3
    4700:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4702:	bcc.n	46ee <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4704:	mov.w	r2, #4294967295
    4708:	mov	r1, r6
    470a:	ldr	r0, [r4, #32]
    470c:	bl	4404 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4710:	cbz	r0, 4720 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4712:	ldr	r1, [r4, #24]
    4714:	cbz	r1, 472e <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4716:	mov	r2, r6
    4718:	ldr	r0, [r4, #32]
    471a:	bl	4404 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    471e:	cbnz	r0, 472e <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4720:	movs	r7, #0
}
    4722:	mov	r0, r7
    4724:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4726:	orr.w	r3, r3, #64	; 0x40
    472a:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    472e:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4730:	mov	r0, r7
    4732:	pop	{r3, r4, r5, r6, r7, pc}

00004734 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4734:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    4738:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    473c:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    473e:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4742:	sub	sp, #20
    4744:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    4748:	add	r6, sp, #4
    474a:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    474e:	lsls	r2, r3, #30
    4750:	bpl.n	478a <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4752:	ldr	r1, [r5, #28]
    4754:	cbnz	r1, 4792 <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4756:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    4758:	movs	r2, #1
    475a:	mov	r1, r6
    475c:	ldr	r0, [r5, #32]
    475e:	bl	4364 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4762:	adds	r4, #1
    4764:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4766:	cbz	r0, 478a <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4768:	ldrb	r3, [r0, #0]
    476a:	and.w	r3, r3, #127	; 0x7f
    476e:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4770:	ldrb.w	r3, [r5, #48]	; 0x30
    4774:	cmp	r3, r4
    4776:	bcc.n	47dc <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    4778:	cmp	r4, #0
    477a:	beq.n	4758 <ExFatFile::remove()+0x24>
    477c:	movs	r2, #32
    477e:	mov	r1, r6
    4780:	ldr	r0, [r5, #32]
    4782:	bl	4398 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4786:	cmp	r0, #1
    4788:	beq.n	4758 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    478a:	movs	r0, #0
}
    478c:	add	sp, #20
    478e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4792:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4794:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4796:	bpl.n	47d2 <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4798:	ldrd	r2, r3, [r5, #8]
    479c:	ldrb.w	r4, [r0, #1093]	; 0x445
    47a0:	adds	r4, #9
    47a2:	uxtb	r4, r4
    47a4:	adds.w	r8, r2, #4294967295
    47a8:	adc.w	r9, r3, #4294967295
    47ac:	rsb	r7, r4, #32
    47b0:	lsl.w	r7, r9, r7
    47b4:	lsr.w	r2, r8, r4
    47b8:	sub.w	r3, r4, #32
    47bc:	lsr.w	r3, r9, r3
    47c0:	orrs	r2, r7
    47c2:	orrs	r2, r3
    47c4:	adds	r2, #1
    47c6:	movs	r3, #0
    47c8:	bl	4280 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    47cc:	cmp	r0, #0
    47ce:	bne.n	4756 <ExFatFile::remove()+0x22>
    47d0:	b.n	478a <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    47d2:	bl	4428 <ExFatPartition::freeChain(unsigned long)>
    47d6:	cmp	r0, #0
    47d8:	bne.n	4756 <ExFatFile::remove()+0x22>
    47da:	b.n	478a <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    47dc:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    47de:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    47e0:	mov	r0, r4
    47e2:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    47e6:	strb.w	r3, [r5, #51]	; 0x33
    47ea:	bl	37a8 <FsCache::sync()>
    47ee:	cmp	r0, #0
    47f0:	beq.n	478a <ExFatFile::remove()+0x56>
    47f2:	add.w	r0, r4, #528	; 0x210
    47f6:	bl	37a8 <FsCache::sync()>
    47fa:	cmp	r0, #0
    47fc:	beq.n	478a <ExFatFile::remove()+0x56>
    47fe:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4802:	ldr	r3, [r0, #0]
    4804:	ldr	r3, [r3, #24]
    4806:	blx	r3
    4808:	b.n	478c <ExFatFile::remove()+0x58>
    480a:	nop

0000480c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    480c:	ldrb.w	r3, [r0, #49]	; 0x31
    4810:	lsls	r1, r3, #27
    4812:	bmi.n	4818 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    4814:	movs	r0, #0
}
    4816:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4818:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    481a:	movs	r2, #0
    481c:	sub	sp, #32
    481e:	movs	r3, #0
    4820:	mov	r4, r0
    4822:	bl	3b40 <ExFatFile::seekSet(unsigned long long)>
    4826:	b.n	4836 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    4828:	cmp	r0, #32
    482a:	bne.n	4860 <ExFatFile::rmdir()+0x54>
    482c:	ldrb.w	r3, [sp]
    4830:	lsls	r2, r3, #24
    4832:	bmi.n	4860 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4834:	cbz	r3, 4844 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    4836:	movs	r2, #32
    4838:	mov	r1, sp
    483a:	mov	r0, r4
    483c:	bl	3968 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4840:	cmp	r0, #0
    4842:	bne.n	4828 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4844:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4848:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    484a:	orr.w	r3, r3, #2
    484e:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4852:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    4856:	mov	r0, r4
    4858:	bl	4734 <ExFatFile::remove()>

 fail:
  return false;
}
    485c:	add	sp, #32
    485e:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    4860:	movs	r0, #0
}
    4862:	add	sp, #32
    4864:	pop	{r4, pc}
    4866:	nop

00004868 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4868:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    486c:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4870:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4872:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4876:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4878:	add.w	r8, sp, #12
    487c:	stmia.w	r8, {r0, r1, r2}
    4880:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    4882:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4884:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    4886:	movs	r2, #0
    4888:	mov	r1, r8
    488a:	ldr	r0, [r6, #32]
    488c:	bl	4364 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    4890:	uxtb.w	r9, r7
    if (!cache) {
    4894:	mov	r5, r0
    4896:	cbz	r0, 48a6 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4898:	ldrb	r3, [r0, #0]
    489a:	cmp	r3, #192	; 0xc0
    489c:	beq.n	4942 <ExFatFile::syncDir()+0xda>
    489e:	cmp	r3, #193	; 0xc1
    48a0:	beq.n	493e <ExFatFile::syncDir()+0xd6>
    48a2:	cmp	r3, #133	; 0x85
    48a4:	beq.n	48ba <ExFatFile::syncDir()+0x52>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    48a6:	ldrb.w	r3, [r6, #50]	; 0x32
    48aa:	orr.w	r3, r3, #1
    48ae:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    48b2:	movs	r0, #0
}
    48b4:	add	sp, #28
    48b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    48ba:	ldr	r3, [pc, #236]	; (49a8 <ExFatFile::syncDir()+0x140>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    48bc:	ldrb.w	r2, [r6, #49]	; 0x31
    48c0:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    48c2:	ldrb.w	sl, [r0, #1]
    48c6:	and.w	r2, r2, #55	; 0x37
    48ca:	strh	r2, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    48cc:	cbz	r3, 48f0 <ExFatFile::syncDir()+0x88>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    48ce:	add.w	r2, sp, #7
    48d2:	add.w	r1, sp, #10
    48d6:	add	r0, sp, #8
    48d8:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    48da:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    48de:	ldrh.w	r3, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    48e2:	ldrb.w	r1, [sp, #7]
    48e6:	strb	r1, [r5, #21]
    48e8:	strh	r2, [r5, #12]
    48ea:	strh	r2, [r5, #16]
    48ec:	strh	r3, [r5, #14]
    48ee:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    48f0:	ldr	r2, [r6, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    48f2:	ldrb.w	r3, [r2, #528]	; 0x210
    48f6:	orr.w	r3, r3, #1
    48fa:	strb.w	r3, [r2, #528]	; 0x210
    48fe:	ldrb	r0, [r5, #0]
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4900:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4902:	ldrb	r2, [r5, r1]
    4904:	lsls	r3, r4, #15
    4906:	orr.w	r4, r3, r4, lsr #1
    490a:	uxtah	r4, r2, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    490e:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4910:	uxth	r4, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4912:	add.w	r1, r1, #1
    4916:	beq.n	4934 <ExFatFile::syncDir()+0xcc>
    4918:	cmp	r1, #31
    491a:	bls.n	4902 <ExFatFile::syncDir()+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    491c:	cmp	sl, r9
    491e:	beq.n	496e <ExFatFile::syncDir()+0x106>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4920:	movs	r2, #32
    4922:	mov	r1, r8
    4924:	ldr	r0, [r6, #32]
    4926:	bl	4398 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    492a:	cmp	r0, #1
    492c:	add.w	r7, r7, #1
    4930:	beq.n	4886 <ExFatFile::syncDir()+0x1e>
    4932:	b.n	48a6 <ExFatFile::syncDir()+0x3e>
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4934:	cmp	r0, #133	; 0x85
    4936:	ite	eq
    4938:	moveq	r1, #4
    493a:	movne	r1, #2
    493c:	b.n	4902 <ExFatFile::syncDir()+0x9a>
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    493e:	mov	r0, r3
    4940:	b.n	4900 <ExFatFile::syncDir()+0x98>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4942:	ldrb.w	r3, [r6, #51]	; 0x33
    4946:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    494a:	ldrb	r3, [r0, #1]
    494c:	ite	ne
    494e:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4952:	biceq.w	r3, r3, #2
    4956:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    4958:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    495c:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4960:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    4964:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4966:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4968:	strd	r2, r3, [r0, #24]
    496c:	b.n	48f0 <ExFatFile::syncDir()+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    496e:	mov	r1, fp
    4970:	movs	r2, #1
    4972:	ldr	r0, [r6, #32]
    4974:	bl	4364 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4978:	cmp	r0, #0
    497a:	beq.n	48a6 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    497c:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    497e:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4980:	mov	r0, r5
    4982:	bl	37a8 <FsCache::sync()>
    4986:	cmp	r0, #0
    4988:	beq.n	48a6 <ExFatFile::syncDir()+0x3e>
    498a:	add.w	r0, r5, #528	; 0x210
    498e:	bl	37a8 <FsCache::sync()>
    4992:	cmp	r0, #0
    4994:	beq.n	48a6 <ExFatFile::syncDir()+0x3e>
    4996:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    499a:	ldr	r3, [r0, #0]
    499c:	ldr	r3, [r3, #24]
    499e:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    49a0:	cmp	r0, #0
    49a2:	beq.n	48a6 <ExFatFile::syncDir()+0x3e>
    49a4:	b.n	48b4 <ExFatFile::syncDir()+0x4c>
    49a6:	nop
    49a8:	.word	0x20019a10

000049ac <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    49ac:	ldrb.w	r2, [r0, #49]	; 0x31
    49b0:	cbz	r2, 49d8 <ExFatFile::sync()+0x2c>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    49b2:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    49b4:	ldrb.w	r2, [r0, #51]	; 0x33
    49b8:	lsls	r1, r2, #24
    49ba:	bmi.n	49dc <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    49bc:	ldr	r5, [r0, #32]
    49be:	mov	r4, r0
    49c0:	mov	r0, r5
    49c2:	bl	37a8 <FsCache::sync()>
    49c6:	cbnz	r0, 49ec <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    49c8:	ldrb.w	r3, [r4, #50]	; 0x32
    49cc:	orr.w	r3, r3, #1
    49d0:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    49d4:	movs	r0, #0
}
    49d6:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    49d8:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    49da:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    49dc:	and.w	r2, r2, #127	; 0x7f
    49e0:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    49e4:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    49e8:	b.w	4868 <ExFatFile::syncDir()>
    49ec:	add.w	r0, r5, #528	; 0x210
    49f0:	bl	37a8 <FsCache::sync()>
    49f4:	cmp	r0, #0
    49f6:	beq.n	49c8 <ExFatFile::sync()+0x1c>
    49f8:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    49fc:	ldr	r3, [r0, #0]
    49fe:	ldr	r3, [r3, #24]
    4a00:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a02:	cmp	r0, #0
    4a04:	beq.n	49c8 <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4a06:	movs	r0, #1
    4a08:	pop	{r3, r4, r5, pc}
    4a0a:	nop

00004a0c <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4a0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4a10:	ldrb.w	r3, [r0, #49]	; 0x31
    4a14:	lsls	r1, r3, #25

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4a16:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4a18:	bmi.n	4adc <ExFatFile::addDirCluster()+0xd0>
    4a1a:	ldr	r0, [r0, #8]
    4a1c:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4a1e:	ldr.w	r3, [r3, #1084]	; 0x43c
    4a22:	add	r0, r3
    4a24:	cmp.w	r0, #67108864	; 0x4000000
    4a28:	bcc.n	4a30 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    4a2a:	movs	r0, #0
    4a2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    4a30:	mov	r0, r4
    4a32:	bl	46a8 <ExFatFile::addCluster()>
    4a36:	cmp	r0, #0
    4a38:	beq.n	4a2a <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    4a3a:	ldr	r6, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4a3c:	ldrb.w	r3, [r6, #528]	; 0x210
    4a40:	lsls	r2, r3, #31
    4a42:	bmi.n	4ae4 <ExFatFile::addDirCluster()+0xd8>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4a44:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4a48:	movs	r5, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    4a4a:	add.w	r8, r6, #544	; 0x220
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4a4e:	str.w	r3, [r6, #540]	; 0x21c
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4a52:	strb.w	r5, [r6, #528]	; 0x210
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    4a56:	mov	r1, r5
    4a58:	mov.w	r2, #512	; 0x200
    4a5c:	mov	r0, r8
    4a5e:	bl	c09c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    4a62:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4a64:	ldr	r3, [r4, #24]
    4a66:	ldrb.w	r0, [r2, #1093]	; 0x445
    4a6a:	ldr.w	r1, [r2, #1068]	; 0x42c
    4a6e:	subs	r3, #2
    4a70:	lsls	r3, r0
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4a72:	movs	r6, #1
    4a74:	adds	r7, r3, r1
    4a76:	lsls.w	r3, r6, r0
    4a7a:	beq.n	4a9e <ExFatFile::addDirCluster()+0x92>
    4a7c:	ldr.w	r0, [r2, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4a80:	ldr	r3, [r0, #0]
    4a82:	adds	r1, r7, r5
    4a84:	ldr	r3, [r3, #28]
    4a86:	mov	r2, r8
    4a88:	blx	r3
    4a8a:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    4a8c:	cmp	r0, #0
    4a8e:	beq.n	4a2a <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4a90:	ldr	r2, [r4, #32]
    4a92:	ldrb.w	r3, [r2, #1093]	; 0x445
    4a96:	lsl.w	r3, r6, r3
    4a9a:	cmp	r3, r5
    4a9c:	bhi.n	4a7c <ExFatFile::addDirCluster()+0x70>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    4a9e:	ldrb.w	r3, [r4, #49]	; 0x31
    4aa2:	lsls	r3, r3, #25
    4aa4:	bmi.n	4ad2 <ExFatFile::addDirCluster()+0xc6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4aa6:	ldrb.w	r3, [r4, #51]	; 0x33
    4aaa:	orn	r3, r3, #127	; 0x7f
    4aae:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4ab2:	ldr.w	r6, [r2, #1084]	; 0x43c
    4ab6:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4aba:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4abe:	adds	r2, r2, r6
    4ac0:	mov.w	r7, #0
    4ac4:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    4ac6:	adds	r0, r0, r6
    4ac8:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4aca:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4ace:	strd	r0, r1, [r4, #16]
  }
  return sync();
    4ad2:	mov	r0, r4

 fail:
  return false;
}
    4ad4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    4ad8:	b.w	49ac <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4adc:	ldr	r0, [r0, #32]
    4ade:	bl	45fc <ExFatPartition::rootLength()>
    4ae2:	b.n	4a1c <ExFatFile::addDirCluster()+0x10>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4ae4:	add.w	r0, r6, #528	; 0x210
    4ae8:	bl	37a8 <FsCache::sync()>
    4aec:	cmp	r0, #0
    4aee:	bne.n	4a44 <ExFatFile::addDirCluster()+0x38>
    4af0:	b.n	4a2a <ExFatFile::addDirCluster()+0x1e>
    4af2:	nop

00004af4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    4af4:	ldrb.w	r3, [r1, #49]	; 0x31
    4af8:	tst.w	r3, #80	; 0x50
    4afc:	bne.n	4b02 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4afe:	movs	r0, #0
    4b00:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4b02:	push	{r4, r5, lr}
    4b04:	sub	sp, #12
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4b06:	movw	r5, #2562	; 0xa02
    4b0a:	ldrb	r3, [r2, #0]
    4b0c:	ldr	r2, [r2, #4]
    4b0e:	str	r5, [sp, #0]
    4b10:	mov	r4, r0
    4b12:	bl	3c40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4b16:	cbnz	r0, 4b1e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4b18:	movs	r0, #0
    4b1a:	add	sp, #12
    4b1c:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    4b1e:	movs	r3, #16
    4b20:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    4b24:	mov	r0, r4
    4b26:	bl	4a0c <ExFatFile::addDirCluster()>
    4b2a:	cmp	r0, #0
    4b2c:	beq.n	4b18 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    4b2e:	ldr	r3, [r4, #24]
    4b30:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4b32:	movs	r2, #0
    4b34:	movs	r3, #0
    4b36:	mov	r0, r4
    4b38:	bl	3b40 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4b3c:	movs	r3, #193	; 0xc1
  return sync();
    4b3e:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4b40:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    4b44:	add	sp, #12
    4b46:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    4b4a:	b.w	49ac <ExFatFile::sync()>
    4b4e:	nop

00004b50 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    4b50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b54:	mov	r6, r0
    4b56:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    4b58:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    4b5c:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    4b5e:	movs	r0, #0
    4b60:	strb.w	r0, [sp, #73]	; 0x49
    4b64:	strb.w	r0, [sp, #74]	; 0x4a
    4b68:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    4b6c:	cbnz	r5, 4b7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4b6e:	mov	r9, r3
    4b70:	ldrb.w	r3, [r1, #49]	; 0x31
    4b74:	tst.w	r3, #80	; 0x50
    4b78:	mov	r4, r1
    4b7a:	bne.n	4b84 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    4b7c:	movs	r0, #0
}
    4b7e:	add	sp, #84	; 0x54
    4b80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4b84:	ldrb	r3, [r2, #0]
    4b86:	cmp	r3, #47	; 0x2f
    4b88:	mov	r1, r2
    4b8a:	beq.n	4bfa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4b8c:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4b90:	add	r3, sp, #12
    4b92:	add	r2, sp, #16
    4b94:	mov	r0, r6
    4b96:	bl	38a4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4b9a:	cmp	r0, #0
    4b9c:	beq.n	4b7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    4b9e:	ldr	r3, [sp, #12]
    4ba0:	ldrb	r3, [r3, #0]
    4ba2:	cmp	r3, #0
    4ba4:	beq.n	4c16 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    4ba6:	ldrb.w	r3, [sp, #16]
    4baa:	ldr	r2, [sp, #20]
    4bac:	str.w	r8, [sp]
    4bb0:	mov	r1, r4
    4bb2:	mov	r0, r6
    4bb4:	bl	3c40 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    4bb8:	cbnz	r0, 4bce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    4bba:	cmp.w	r9, #0
    4bbe:	beq.n	4b7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4bc0:	mov	r1, r4
    4bc2:	add	r2, sp, #16
    4bc4:	mov	r0, r6
    4bc6:	bl	4af4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4bca:	cmp	r0, #0
    4bcc:	beq.n	4b7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    4bce:	mov	r4, r6
    4bd0:	add	r7, sp, #24
    4bd2:	add.w	lr, r6, #48	; 0x30
    4bd6:	ldr	r0, [r4, #0]
    4bd8:	ldr	r1, [r4, #4]
    4bda:	ldr	r2, [r4, #8]
    4bdc:	ldr	r3, [r4, #12]
    4bde:	mov	r5, r7
    4be0:	stmia	r5!, {r0, r1, r2, r3}
    4be2:	adds	r4, #16
    4be4:	cmp	r4, lr
    4be6:	mov	r7, r5
    4be8:	bne.n	4bd6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    4bea:	ldr	r0, [r4, #0]
    4bec:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    4bee:	mov	r0, r6
    4bf0:	bl	37b8 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    4bf4:	add	r4, sp, #24
    4bf6:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    4bf8:	b.n	4b90 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4bfa:	adds	r1, #1
    4bfc:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4bfe:	ldrb	r3, [r1, #0]
    4c00:	cmp	r3, #47	; 0x2f
    4c02:	beq.n	4bfa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    4c04:	ldr	r1, [r4, #32]
    4c06:	add	r0, sp, #24
    4c08:	bl	387c <ExFatFile::openRoot(ExFatVolume*)>
    4c0c:	cmp	r0, #0
    4c0e:	beq.n	4b7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4c10:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    4c12:	add	r4, sp, #24
    4c14:	b.n	4b8c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    4c16:	add	r2, sp, #16
    4c18:	mov	r1, r4
    4c1a:	mov	r0, r6
    4c1c:	bl	4af4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

 fail:
  return false;
}
    4c20:	add	sp, #84	; 0x54
    4c22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c26:	nop

00004c28 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4c28:	orrs.w	r1, r2, r3
    4c2c:	beq.n	4c36 <ExFatFile::preAllocate(unsigned long long)+0xe>
    4c2e:	ldrb.w	r1, [r0, #51]	; 0x33
    4c32:	lsls	r1, r1, #30
    4c34:	bmi.n	4c3a <ExFatFile::preAllocate(unsigned long long)+0x12>
  }
  return true;

 fail:
  return false;
}
    4c36:	movs	r0, #0
    4c38:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4c3a:	ldr	r1, [r0, #28]
    4c3c:	cmp	r1, #0
    4c3e:	bne.n	4c36 <ExFatFile::preAllocate(unsigned long long)+0xe>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    4c40:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c44:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    4c46:	ldr	r0, [r0, #32]
    4c48:	mov	r5, r3
    4c4a:	ldrb.w	r3, [r0, #1093]	; 0x445
    4c4e:	adds	r3, #9
    4c50:	adds.w	r8, r2, #4294967295
    4c54:	uxtb	r3, r3
    4c56:	adc.w	r9, r5, #4294967295
    4c5a:	rsb	r7, r3, #32
    4c5e:	lsl.w	r7, r9, r7
    4c62:	mov	r4, r2
    4c64:	lsr.w	r2, r8, r3
    4c68:	subs	r3, #32
    4c6a:	orrs	r2, r7
    4c6c:	lsr.w	r3, r9, r3
    4c70:	orrs	r2, r3
    4c72:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    4c74:	mov	r2, r7
    4c76:	bl	41cc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4c7a:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    4c7c:	mov	r8, r0
  if (find < 2) {
    4c7e:	bls.n	4c8e <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    4c80:	mov	r1, r0
    4c82:	mov	r2, r7
    4c84:	movs	r3, #1
    4c86:	ldr	r0, [r6, #32]
    4c88:	bl	4280 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4c8c:	cbnz	r0, 4c94 <ExFatFile::preAllocate(unsigned long long)+0x6c>
  }
  return true;

 fail:
  return false;
}
    4c8e:	movs	r0, #0
    4c90:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4c94:	ldrb.w	r3, [r6, #51]	; 0x33
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    4c98:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4c9c:	orn	r3, r3, #63	; 0x3f
    4ca0:	strb.w	r3, [r6, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    4ca4:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    4ca8:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    4caa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    4cae:	b.w	49ac <ExFatFile::sync()>
    4cb2:	nop

00004cb4 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    4cb4:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4cb6:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    4cba:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    4cbc:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4cbe:	tst.w	r4, #24
    4cc2:	strb.w	r3, [sp, #49]	; 0x31
    4cc6:	strb.w	r3, [sp, #50]	; 0x32
    4cca:	strb.w	r3, [sp, #51]	; 0x33
    4cce:	strb.w	r3, [sp, #105]	; 0x69
    4cd2:	strb.w	r3, [sp, #106]	; 0x6a
    4cd6:	strb.w	r3, [sp, #107]	; 0x6b
    4cda:	beq.n	4ce4 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    4cdc:	ldr	r3, [r1, #32]
    4cde:	ldr	r4, [r0, #32]
    4ce0:	cmp	r4, r3
    4ce2:	beq.n	4cea <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    4ce4:	movs	r0, #0
}
    4ce6:	add	sp, #116	; 0x74
    4ce8:	pop	{r4, r5, r6, r7, pc}
    4cea:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4cec:	movw	r3, #2561	; 0xa01
    4cf0:	mov	r0, sp
    4cf2:	bl	401c <ExFatFile::open(ExFatFile*, char const*, int)>
    4cf6:	cmp	r0, #0
    4cf8:	beq.n	4ce4 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    4cfa:	add	r7, sp, #56	; 0x38
    4cfc:	mov	r5, r4
    4cfe:	add.w	lr, r4, #48	; 0x30
    4d02:	ldr	r0, [r5, #0]
    4d04:	ldr	r1, [r5, #4]
    4d06:	ldr	r2, [r5, #8]
    4d08:	ldr	r3, [r5, #12]
    4d0a:	mov	r6, r7
    4d0c:	stmia	r6!, {r0, r1, r2, r3}
    4d0e:	adds	r5, #16
    4d10:	cmp	r5, lr
    4d12:	mov	r7, r6
    4d14:	bne.n	4d02 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    4d16:	ldr	r0, [r5, #0]
    4d18:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    4d1a:	add	r3, sp, #36	; 0x24
    4d1c:	ldmia.w	r3, {r0, r1, r2}
    4d20:	add.w	r3, r4, #36	; 0x24
    4d24:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d28:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    4d2c:	ldrb.w	r2, [sp, #48]	; 0x30
    4d30:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d34:	orn	r3, r3, #127	; 0x7f
    4d38:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4d3c:	mov	r0, r4
    4d3e:	bl	49ac <ExFatFile::sync()>
    4d42:	cmp	r0, #0
    4d44:	beq.n	4ce4 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4d46:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4d48:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4d4a:	movs	r3, #8
  return oldFile.remove();
    4d4c:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4d4e:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4d50:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4d54:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4d58:	bl	4734 <ExFatFile::remove()>
    4d5c:	b.n	4ce6 <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    4d5e:	nop

00004d60 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4d60:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4d64:	lsls	r2, r3, #30
    4d66:	bpl.n	4d9a <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4d68:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4d6a:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4d6c:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4d6e:	cbz	r5, 4d94 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    4d70:	and.w	r3, r3, #64	; 0x40
    4d74:	mov	r4, r0
    4d76:	and.w	r0, r3, #255	; 0xff
    4d7a:	cbnz	r3, 4d9e <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    4d7c:	ldr	r1, [r4, #24]
    4d7e:	cmp	r1, #0
    4d80:	bne.n	4e06 <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    4d82:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4d84:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    4d86:	mov	r1, r5
    4d88:	ldr	r0, [r4, #32]
    4d8a:	bl	4428 <ExFatPartition::freeChain(unsigned long)>
    4d8e:	cbnz	r0, 4dde <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4d90:	movs	r0, #0
    4d92:	b.n	4d96 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4d94:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4d96:	add	sp, #12
    4d98:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4d9a:	movs	r0, #0
}
    4d9c:	bx	lr
    4d9e:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    4da0:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4da2:	ldrb.w	r3, [r0, #1093]	; 0x445
    4da6:	ldrd	r6, r7, [r4, #8]
    4daa:	adds	r3, #9
    4dac:	uxtb	r3, r3
    4dae:	adds.w	r6, r6, #4294967295
    4db2:	rsb	lr, r3, #32
    4db6:	adc.w	r7, r7, #4294967295
    4dba:	lsr.w	r2, r6, r3
    4dbe:	lsl.w	lr, r7, lr
    4dc2:	subs	r3, #32
    4dc4:	orr.w	r2, r2, lr
    4dc8:	lsr.w	r3, r7, r3
    4dcc:	orrs	r2, r3
    4dce:	adds	r2, #1
    if (m_curCluster) {
    4dd0:	cbz	r1, 4e00 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4dd2:	subs	r5, #1
    4dd4:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4dd6:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    4dd8:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4dda:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4ddc:	cbnz	r2, 4e22 <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4dde:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4de2:	ldrb.w	r3, [r4, #51]	; 0x33
    4de6:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4dea:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4dee:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4df2:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    4df6:	mov	r0, r4
    4df8:	bl	49ac <ExFatFile::sync()>

 fail:
  return false;
}
    4dfc:	add	sp, #12
    4dfe:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    4e00:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4e02:	str	r1, [r4, #28]
    4e04:	b.n	4ddc <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4e06:	add	r2, sp, #8
    4e08:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4e0c:	ldr	r0, [r4, #32]
    4e0e:	bl	43f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4e12:	sxtb	r0, r0
      if (fg < 0) {
    4e14:	cmp	r0, #0
    4e16:	blt.n	4d90 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    4e18:	bne.n	4e30 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    4e1a:	ldr	r5, [sp, #4]
    4e1c:	cmp	r5, #0
    4e1e:	beq.n	4dde <ExFatFile::truncate()+0x7e>
    4e20:	b.n	4d86 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4e22:	movs	r3, #0
    4e24:	ldr	r1, [sp, #4]
    4e26:	bl	4280 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4e2a:	cmp	r0, #0
    4e2c:	bne.n	4dde <ExFatFile::truncate()+0x7e>
    4e2e:	b.n	4d90 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4e30:	mov.w	r2, #4294967295
    4e34:	ldr	r1, [r4, #24]
    4e36:	ldr	r0, [r4, #32]
    4e38:	bl	4404 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e3c:	cmp	r0, #0
    4e3e:	bne.n	4e1a <ExFatFile::truncate()+0xba>
    4e40:	b.n	4d90 <ExFatFile::truncate()+0x30>
    4e42:	nop

00004e44 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4e44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e48:	ldrb.w	r3, [r0, #51]	; 0x33
    4e4c:	sub	sp, #12

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4e4e:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4e50:	mov	r4, r0
    4e52:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4e54:	bmi.n	4e6c <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4e56:	ldrb.w	r3, [r4, #50]	; 0x32
    4e5a:	orr.w	r3, r3, #1
    4e5e:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    4e62:	mov.w	r0, #4294967295
}
    4e66:	add	sp, #12
    4e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4e6c:	lsls	r2, r3, #28
    4e6e:	mov	r9, r1
    4e70:	bmi.w	5076 <ExFatFile::write(void const*, unsigned int)+0x232>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4e74:	ldr	r3, [sp, #0]
    4e76:	cmp	r3, #0
    4e78:	beq.w	509e <ExFatFile::write(void const*, unsigned int)+0x25a>
    4e7c:	mov	r1, r4
    4e7e:	ldrd	r2, r3, [r1], #24
    4e82:	ldr.w	r8, [sp]
    4e86:	str	r1, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4e88:	mov.w	fp, #1
    4e8c:	mov	sl, r9
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4e8e:	ldr	r0, [r4, #32]
    4e90:	ldr.w	r5, [r0, #1080]	; 0x438
    4e94:	ands	r5, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4e96:	ubfx	r9, r5, #0, #9
    if (clusterOffset == 0) {
    4e9a:	cbnz	r5, 4eee <ExFatFile::write(void const*, unsigned int)+0xaa>
      // start of new cluster
      if (m_curCluster != 0) {
    4e9c:	ldr	r1, [r4, #24]
    4e9e:	cmp	r1, #0
    4ea0:	beq.w	5000 <ExFatFile::write(void const*, unsigned int)+0x1bc>
        int fg;

        if (isContiguous()) {
    4ea4:	ldrb.w	r3, [r4, #51]	; 0x33
    4ea8:	lsls	r3, r3, #25
    4eaa:	bpl.w	5048 <ExFatFile::write(void const*, unsigned int)+0x204>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4eae:	ldrd	r6, r7, [r4, #8]
    4eb2:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    4eb6:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4eb8:	adds	r2, #9
    4eba:	uxtb	r2, r2
    4ebc:	adds.w	r6, r6, #4294967295
    4ec0:	adc.w	r7, r7, #4294967295
    4ec4:	rsb	lr, r2, #32
    4ec8:	lsrs	r6, r2
    4eca:	lsl.w	lr, r7, lr
    4ece:	subs	r2, #32
    4ed0:	orr.w	r6, r6, lr
    4ed4:	lsr.w	r2, r7, r2
    4ed8:	orrs	r6, r2
    4eda:	add	r3, r6
    4edc:	cmp	r1, r3
    4ede:	bcc.w	502e <ExFatFile::write(void const*, unsigned int)+0x1ea>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    4ee2:	mov	r0, r4
    4ee4:	bl	46a8 <ExFatFile::addCluster()>
    4ee8:	cmp	r0, #0
    4eea:	beq.n	4e56 <ExFatFile::write(void const*, unsigned int)+0x12>
    4eec:	ldr	r0, [r4, #32]
    4eee:	ldr	r6, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4ef0:	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4ef4:	ldrb.w	lr, [r0, #1093]	; 0x445
    4ef8:	lsrs	r5, r5, #9
    4efa:	subs	r6, #2
    4efc:	adds	r1, r5, r7
    4efe:	lsl.w	r6, r6, lr
    4f02:	add	r1, r6

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4f04:	cmp.w	r9, #0
    4f08:	bne.n	4ff2 <ExFatFile::write(void const*, unsigned int)+0x1ae>
    4f0a:	cmp.w	r8, #512	; 0x200
    4f0e:	bcs.n	4fac <ExFatFile::write(void const*, unsigned int)+0x168>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4f10:	ldrd	r2, r3, [r4, #16]
    4f14:	ldrd	r6, r7, [r4]
    4f18:	cmp.w	r8, #512	; 0x200
    4f1c:	mov	r5, r8
    4f1e:	it	cs
    4f20:	movcs.w	r5, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4f24:	cmp	r7, r3
    4f26:	it	eq
    4f28:	cmpeq	r6, r2
    4f2a:	ite	cc
    4f2c:	movcc	r2, #1
    4f2e:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4f30:	add.w	r0, r0, #528	; 0x210
    4f34:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    4f38:	cmp	r0, #0
    4f3a:	beq.n	4e56 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4f3c:	add	r0, r9
    4f3e:	mov	r2, r5
    4f40:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4f42:	add	r9, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4f44:	bl	887c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4f48:	cmp.w	r9, #512	; 0x200
    4f4c:	beq.w	5064 <ExFatFile::write(void const*, unsigned int)+0x220>
    4f50:	mov	r0, r5
    4f52:	movs	r1, #0
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4f54:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4f58:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4f5c:	adds	r2, r2, r0
    4f5e:	adcs	r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4f60:	cmp	r7, r3
    4f62:	it	eq
    4f64:	cmpeq	r6, r2
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    4f66:	add	sl, r5
    toWrite -= n;
    4f68:	rsb	r8, r5, r8
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4f6c:	strd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4f70:	bcs.n	4f82 <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4f72:	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    4f76:	strd	r2, r3, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4f7a:	orn	r1, r1, #127	; 0x7f
    4f7e:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4f82:	cmp.w	r8, #0
    4f86:	bne.n	4e8e <ExFatFile::write(void const*, unsigned int)+0x4a>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    4f88:	ldrd	r0, r1, [r4, #8]
    4f8c:	cmp	r1, r3
    4f8e:	it	eq
    4f90:	cmpeq	r0, r2
    4f92:	bcc.n	5086 <ExFatFile::write(void const*, unsigned int)+0x242>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4f94:	ldr	r3, [pc, #268]	; (50a4 <ExFatFile::write(void const*, unsigned int)+0x260>)
    4f96:	ldr	r3, [r3, #0]
    4f98:	cmp	r3, #0
    4f9a:	beq.n	509a <ExFatFile::write(void const*, unsigned int)+0x256>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4f9c:	ldrb.w	r3, [r4, #51]	; 0x33
    4fa0:	ldr	r0, [sp, #0]
    4fa2:	orn	r3, r3, #127	; 0x7f
    4fa6:	strb.w	r3, [r4, #51]	; 0x33
    4faa:	b.n	4e66 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    4fac:	cmp.w	r8, #1024	; 0x400
    4fb0:	bcc.n	5008 <ExFatFile::write(void const*, unsigned int)+0x1c4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4fb2:	lsl.w	r3, fp, lr
    4fb6:	subs	r5, r3, r5
    4fb8:	ldr.w	r2, [r0, #540]	; 0x21c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    4fbc:	mov.w	r3, r8, lsr #9
    4fc0:	cmp	r3, r5
    4fc2:	it	cs
    4fc4:	movcs	r3, r5
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    4fc6:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    4fc8:	mov.w	r5, r3, lsl #9
    4fcc:	bhi.n	4fe0 <ExFatFile::write(void const*, unsigned int)+0x19c>
    4fce:	adds	r6, r1, r3
    4fd0:	cmp	r2, r6
    4fd2:	bcs.n	4fe0 <ExFatFile::write(void const*, unsigned int)+0x19c>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4fd4:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4fd8:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4fdc:	str.w	r2, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    4fe0:	ldr.w	r0, [r0, #532]	; 0x214
    4fe4:	ldr	r6, [r0, #0]
    4fe6:	mov	r2, sl
    4fe8:	ldr	r6, [r6, #32]
    4fea:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    4fec:	cmp	r0, #0
    4fee:	bne.n	4f50 <ExFatFile::write(void const*, unsigned int)+0x10c>
    4ff0:	b.n	4e56 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    4ff2:	rsb	r5, r9, #512	; 0x200
    4ff6:	cmp	r5, r8
    4ff8:	it	cs
    4ffa:	movcs	r5, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4ffc:	movs	r2, #1
    4ffe:	b.n	4f30 <ExFatFile::write(void const*, unsigned int)+0xec>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5000:	ldr	r6, [r4, #28]
    5002:	cbz	r6, 5034 <ExFatFile::write(void const*, unsigned int)+0x1f0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5004:	str	r6, [r4, #24]
    5006:	b.n	4ef0 <ExFatFile::write(void const*, unsigned int)+0xac>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    5008:	ldr.w	r3, [r0, #540]	; 0x21c
    500c:	cmp	r1, r3
    500e:	beq.n	5056 <ExFatFile::write(void const*, unsigned int)+0x212>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    5010:	ldr.w	r0, [r0, #532]	; 0x214
    5014:	ldr	r3, [r0, #0]
    5016:	mov	r2, sl
    5018:	ldr	r3, [r3, #28]
    501a:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    501c:	cmp	r0, #0
    501e:	beq.w	4e56 <ExFatFile::write(void const*, unsigned int)+0x12>
    5022:	mov.w	r0, #512	; 0x200
    5026:	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    5028:	mov.w	r5, #512	; 0x200
    502c:	b.n	4f54 <ExFatFile::write(void const*, unsigned int)+0x110>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    502e:	adds	r6, r1, #1
    5030:	str	r6, [r4, #24]
    5032:	b.n	4ef0 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5034:	mov	r0, r4
    5036:	bl	46a8 <ExFatFile::addCluster()>
    503a:	cmp	r0, #0
    503c:	beq.w	4e56 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5040:	ldr	r6, [r4, #24]
    5042:	str	r6, [r4, #28]
    5044:	ldr	r0, [r4, #32]
    5046:	b.n	4ef0 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5048:	ldr	r2, [sp, #4]
    504a:	bl	43f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    504e:	cmp	r0, #0
    5050:	bne.w	4eec <ExFatFile::write(void const*, unsigned int)+0xa8>
    5054:	b.n	4ee2 <ExFatFile::write(void const*, unsigned int)+0x9e>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5056:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    505a:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    505e:	str.w	r3, [r0, #540]	; 0x21c
    5062:	b.n	5010 <ExFatFile::write(void const*, unsigned int)+0x1cc>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    5064:	ldr	r0, [r4, #32]
    5066:	add.w	r0, r0, #528	; 0x210
    506a:	bl	37a8 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    506e:	cmp	r0, #0
    5070:	bne.w	4f50 <ExFatFile::write(void const*, unsigned int)+0x10c>
    5074:	b.n	4e56 <ExFatFile::write(void const*, unsigned int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5076:	ldrd	r2, r3, [r0, #16]
    507a:	bl	3b40 <ExFatFile::seekSet(unsigned long long)>
    507e:	cmp	r0, #0
    5080:	beq.w	4e56 <ExFatFile::write(void const*, unsigned int)+0x12>
    5084:	b.n	4e74 <ExFatFile::write(void const*, unsigned int)+0x30>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5086:	ldrb.w	r1, [r4, #51]	; 0x33
    508a:	ldr	r0, [sp, #0]
    508c:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5090:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5094:	strb.w	r1, [r4, #51]	; 0x33
    5098:	b.n	4e66 <ExFatFile::write(void const*, unsigned int)+0x22>
    509a:	ldr	r0, [sp, #0]
    509c:	b.n	4e66 <ExFatFile::write(void const*, unsigned int)+0x22>
    509e:	ldrd	r2, r3, [r4]
    50a2:	b.n	4f88 <ExFatFile::write(void const*, unsigned int)+0x144>
    50a4:	.word	0x20019a10

000050a8 <FatFile::openRoot(FatVolume*) [clone .part.38]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    50a8:	push	{r3, r4, r5, lr}
    50aa:	mov	r4, r0
    50ac:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    50ae:	movs	r2, #36	; 0x24
    50b0:	movs	r1, #0
    50b2:	bl	c09c <memset>

  m_vol = vol;
    50b6:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    50b8:	ldrb	r3, [r5, #7]
    50ba:	cmp	r3, #16
    50bc:	beq.n	50d0 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x28>
    50be:	cmp	r3, #32
    50c0:	bne.n	50cc <FatFile::openRoot(FatVolume*) [clone .part.38]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    50c2:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    50c4:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    50c6:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    50c8:	strb	r0, [r4, #2]
    50ca:	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    50cc:	movs	r0, #0
}
    50ce:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    50d0:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    50d2:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    50d4:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    50d6:	strb	r0, [r4, #2]
    50d8:	pop	{r3, r4, r5, pc}
    50da:	nop

000050dc <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    50dc:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    50de:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    50e0:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    50e4:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    50e6:	mov	r1, r5
    50e8:	ldr	r0, [r0, #8]
    50ea:	bl	5f74 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    50ee:	cbz	r0, 5106 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    50f0:	cbz	r5, 5108 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    50f2:	ldr	r3, [r4, #16]
    50f4:	adds	r5, #1
    50f6:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    50f8:	ldrb	r3, [r4, #2]
    50fa:	it	ne
    50fc:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5100:	orn	r3, r3, #127	; 0x7f
    5104:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5106:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5108:	ldrb	r3, [r4, #2]
    510a:	orr.w	r3, r3, #64	; 0x40
    510e:	b.n	5100 <FatFile::addCluster()+0x24>

00005110 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5110:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5114:	ldrb	r3, [r0, #0]
    5116:	and.w	r3, r3, #32
    511a:	cbnz	r3, 5128 <FatFile::addDirCluster()+0x18>
    511c:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5120:	ldr	r1, [r0, #20]
    5122:	ldr	r3, [pc, #128]	; (51a4 <FatFile::addDirCluster()+0x94>)
    5124:	cmp	r1, r3
    5126:	bls.n	5130 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    5128:	movs	r6, #0
}
    512a:	mov	r0, r6
    512c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5130:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5132:	bl	50dc <FatFile::addCluster()>
    5136:	mov	r6, r0
    5138:	cmp	r0, #0
    513a:	beq.n	5128 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    513c:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    513e:	ldr	r3, [r5, #16]
    5140:	ldrb	r7, [r0, #6]
    5142:	ldr	r2, [r0, #20]
    5144:	subs	r3, #2
    5146:	lsls	r3, r7
    5148:	adds	r7, r3, r2
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    514a:	adds	r0, #36	; 0x24
    514c:	mov	r1, r7
    514e:	movs	r2, #5
    5150:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5154:	mov	r8, r0
    5156:	cmp	r0, #0
    5158:	beq.n	5128 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    515a:	mov.w	r2, #512	; 0x200
    515e:	mov	r1, r4
    5160:	bl	c09c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5164:	ldr	r3, [r5, #8]
    5166:	ldrb	r2, [r3, #4]
    5168:	cmp	r2, #1
    516a:	bls.n	518e <FatFile::addDirCluster()+0x7e>
    516c:	movs	r4, #1
    516e:	b.n	5178 <FatFile::addDirCluster()+0x68>
    5170:	ldr	r3, [r5, #8]
    5172:	ldrb	r2, [r3, #4]
    5174:	cmp	r2, r4
    5176:	bls.n	518e <FatFile::addDirCluster()+0x7e>
    5178:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    517a:	ldr	r3, [r0, #0]
    517c:	adds	r1, r4, r7
    517e:	ldr	r3, [r3, #28]
    5180:	mov	r2, r8
    5182:	blx	r3
    5184:	adds	r4, #1
    5186:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5188:	cmp	r0, #0
    518a:	bne.n	5170 <FatFile::addDirCluster()+0x60>
    518c:	b.n	5128 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    518e:	ldrb	r3, [r3, #6]
    5190:	ldr	r1, [r5, #20]
    5192:	mov.w	r2, #512	; 0x200
    5196:	lsl.w	r3, r2, r3
    519a:	uxtah	r3, r1, r3
    519e:	str	r3, [r5, #20]
    51a0:	b.n	512a <FatFile::addDirCluster()+0x1a>
    51a2:	nop
    51a4:	.word	0x001ffdff

000051a8 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    51a8:	push	{r4, lr}
    51aa:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    51ac:	ldr	r0, [r0, #8]
    51ae:	mov	r2, r1
    51b0:	adds	r0, #36	; 0x24
    51b2:	ldr	r1, [r4, #24]
    51b4:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    51b8:	cbz	r0, 51c4 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    51ba:	ldrh	r3, [r4, #4]
    51bc:	and.w	r3, r3, #15
    51c0:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    51c4:	pop	{r4, pc}
    51c6:	nop

000051c8 <FatFile::sync() [clone .part.42]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    51c8:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    51ca:	ldrsb.w	r3, [r0, #2]
    51ce:	cmp	r3, #0
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    51d0:	sub	sp, #8
    51d2:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    51d4:	blt.n	520a <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    51d6:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    51d8:	add.w	r0, r5, #36	; 0x24
    51dc:	bl	37a8 <FsCache::sync()>
    51e0:	cbnz	r0, 51f0 <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    51e2:	ldrb	r3, [r4, #1]
    51e4:	orr.w	r3, r3, #1
    51e8:	strb	r3, [r4, #1]
  return false;
    51ea:	movs	r0, #0
}
    51ec:	add	sp, #8
    51ee:	pop	{r4, r5, r6, pc}
    51f0:	add.w	r0, r5, #564	; 0x234
    51f4:	bl	37a8 <FsCache::sync()>
    51f8:	cmp	r0, #0
    51fa:	beq.n	51e2 <FatFile::sync() [clone .part.42]+0x1a>
    51fc:	ldr	r0, [r5, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    51fe:	ldr	r3, [r0, #0]
    5200:	ldr	r3, [r3, #24]
    5202:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5204:	cmp	r0, #0
    5206:	beq.n	51e2 <FatFile::sync() [clone .part.42]+0x1a>
    5208:	b.n	51ec <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    520a:	movs	r1, #1
    520c:	bl	51a8 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5210:	mov	r5, r0
    5212:	cmp	r0, #0
    5214:	beq.n	51e2 <FatFile::sync() [clone .part.42]+0x1a>
    5216:	ldrb	r3, [r0, #0]
    5218:	cmp	r3, #229	; 0xe5
    521a:	beq.n	51e2 <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    521c:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    521e:	ldr	r2, [pc, #56]	; (5258 <FatFile::sync() [clone .part.42]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5220:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5222:	itt	mi
    5224:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5226:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5228:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    522a:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    522c:	strh	r3, [r0, #26]
    522e:	lsrs	r3, r3, #16
    5230:	strh	r3, [r0, #20]
    5232:	cbz	r6, 524e <FatFile::sync() [clone .part.42]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5234:	add.w	r2, sp, #3
    5238:	add.w	r1, sp, #6
    523c:	add	r0, sp, #4
    523e:	blx	r6
      setLe16(dir->modifyDate, date);
    5240:	ldrh.w	r3, [sp, #4]
    5244:	ldrh.w	r2, [sp, #6]
    5248:	strh	r3, [r5, #24]
    524a:	strh	r3, [r5, #18]
    524c:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    524e:	ldrb	r3, [r4, #2]
    5250:	and.w	r3, r3, #127	; 0x7f
    5254:	strb	r3, [r4, #2]
    5256:	b.n	51d6 <FatFile::sync() [clone .part.42]+0xe>
    5258:	.word	0x20019a10

0000525c <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    525c:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    525e:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5260:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5262:	cbnz	r3, 526e <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5264:	movs	r3, #0
    5266:	strb	r3, [r4, #0]
  m_flags = 0;
    5268:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    526a:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    526c:	pop	{r4, pc}
    526e:	bl	51c8 <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5272:	movs	r3, #0
    5274:	strb	r3, [r4, #0]
  m_flags = 0;
    5276:	strb	r3, [r4, #2]
  return rtn;
}
    5278:	pop	{r4, pc}
    527a:	nop

0000527c <FatFile::mkdir(FatFile*, fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    527c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    5280:	ldrb	r4, [r1, #0]
    5282:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    5286:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    5288:	bne.n	5292 <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
}
    528a:	movs	r0, #0
    528c:	add	sp, #36	; 0x24
    528e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5292:	movw	r3, #2562	; 0xa02
    5296:	mov	r5, r0
    5298:	mov	r4, r1
    529a:	bl	683c <FatFile::open(FatFile*, fname_t*, int)>
    529e:	cmp	r0, #0
    52a0:	beq.n	528a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    52a2:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    52a4:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    52a6:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    52a8:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    52aa:	mov	r0, r5
    52ac:	bl	5110 <FatFile::addDirCluster()>
    52b0:	cmp	r0, #0
    52b2:	beq.n	528a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    52b4:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    52b6:	ldr	r2, [r5, #16]
    52b8:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    52ba:	cmp	r3, #0
    52bc:	bne.n	53aa <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    52be:	movs	r1, #1
    52c0:	mov	r0, r5
    52c2:	bl	51a8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    52c6:	mov	r6, r0
    52c8:	cmp	r0, #0
    52ca:	beq.n	528a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    52cc:	movs	r3, #16
    52ce:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    52d0:	ldr	r2, [r0, #8]
    52d2:	ldr	r1, [r6, #4]
    52d4:	ldr	r3, [r6, #12]
    52d6:	ldr	r0, [r0, #0]
    52d8:	ldrh.w	r8, [r6, #20]
    52dc:	ldrh.w	r9, [r6, #26]
    52e0:	mov	r7, sp
    52e2:	stmia	r7!, {r0, r1, r2, r3}
    52e4:	ldr	r1, [r6, #20]
    52e6:	ldr	r2, [r6, #24]
    52e8:	ldr	r3, [r6, #28]
    52ea:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    52ec:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    52ee:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    52f0:	movs	r3, #46	; 0x2e
    52f2:	strb.w	r3, [r6, #-32]!
    52f6:	add.w	r1, sp, #10
    52fa:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    52fc:	movs	r2, #32
    52fe:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    5302:	cmp	r3, r1
    5304:	bne.n	52fe <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    5306:	ldr	r0, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5308:	ldr	r3, [r5, #32]
    530a:	ldrb	r2, [r0, #6]
    530c:	ldr	r1, [r0, #20]
    530e:	subs	r3, #2
    5310:	lsls	r3, r2
    5312:	add	r1, r3
    5314:	adds	r0, #36	; 0x24
    5316:	movs	r2, #1
    5318:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    531c:	mov	lr, r0
    531e:	cmp	r0, #0
    5320:	beq.n	528a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    5322:	mov	r7, r6
    5324:	strh.w	r8, [sp, #20]
    5328:	strh.w	r9, [sp, #26]
    532c:	ldmia	r7!, {r0, r1, r2, r3}
    532e:	str.w	r0, [lr]
    5332:	str.w	r1, [lr, #4]
    5336:	str.w	r2, [lr, #8]
    533a:	str.w	r3, [lr, #12]
    533e:	ldmia	r7!, {r0, r1, r2, r3}
    5340:	str.w	r0, [lr, #16]
    5344:	str.w	r1, [lr, #20]
    5348:	str.w	r2, [lr, #24]
    534c:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5350:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5352:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    5356:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5358:	lsrs	r3, r3, #16
    535a:	mov	r4, r6
    535c:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    5360:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5364:	ldmia	r4!, {r0, r1, r2, r3}
    5366:	add.w	r6, lr, #32
    536a:	str.w	r0, [lr, #32]
    536e:	str	r1, [r6, #4]
    5370:	str	r2, [r6, #8]
    5372:	str	r3, [r6, #12]
    5374:	ldmia	r4!, {r0, r1, r2, r3}
    5376:	str	r0, [r6, #16]
    5378:	str	r1, [r6, #20]
    537a:	str	r2, [r6, #24]
    537c:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    537e:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5380:	add.w	r0, r4, #36	; 0x24
    5384:	bl	37a8 <FsCache::sync()>
    5388:	cmp	r0, #0
    538a:	beq.w	528a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    538e:	add.w	r0, r4, #564	; 0x234
    5392:	bl	37a8 <FsCache::sync()>
    5396:	cmp	r0, #0
    5398:	beq.w	528a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    539c:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    539e:	ldr	r3, [r0, #0]
    53a0:	ldr	r3, [r3, #24]

 fail:
  return false;
}
    53a2:	add	sp, #36	; 0x24
    53a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53a8:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    53aa:	ldr	r3, [r5, #20]
    53ac:	cbz	r3, 53bc <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    53ae:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    53b0:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    53b2:	bic.w	r3, r3, #32
    53b6:	strb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    53b8:	str	r2, [r5, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    53ba:	str	r2, [r5, #20]
    53bc:	mov	r0, r5
    53be:	bl	51c8 <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    53c2:	cmp	r0, #0
    53c4:	beq.w	528a <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    53c8:	b.n	52be <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    53ca:	nop

000053cc <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    53cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53d0:	mov	r6, r0
    53d2:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    53d4:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    53d6:	str	r2, [sp, #4]
    53d8:	movs	r0, #0
    53da:	strb.w	r0, [sp, #36]	; 0x24
    53de:	strb.w	r0, [sp, #37]	; 0x25
    53e2:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    53e6:	cbnz	r5, 53f4 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    53e8:	mov	r8, r3
    53ea:	ldrb	r3, [r1, #0]
    53ec:	tst.w	r3, #112	; 0x70
    53f0:	mov	r4, r1
    53f2:	bne.n	53fc <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    53f4:	movs	r0, #0
}
    53f6:	add	sp, #72	; 0x48
    53f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    53fc:	ldrb	r3, [r2, #0]
    53fe:	cmp	r3, #47	; 0x2f
    5400:	mov	r0, r2
    5402:	beq.n	545a <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5404:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5406:	add	r2, sp, #4
    5408:	add	r1, sp, #12
    540a:	bl	6410 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    540e:	add	r2, sp, #12
    5410:	mov	r1, r4
    5412:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5414:	cmp	r0, #0
    5416:	beq.n	53f4 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5418:	ldr	r5, [sp, #4]
    541a:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    541c:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    541e:	cmp	r5, #0
    5420:	beq.n	547e <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5422:	bl	683c <FatFile::open(FatFile*, fname_t*, int)>
    5426:	cbnz	r0, 543c <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    5428:	cmp.w	r8, #0
    542c:	beq.n	53f4 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    542e:	mov	r1, r4
    5430:	add	r2, sp, #12
    5432:	mov	r0, r6
    5434:	bl	527c <FatFile::mkdir(FatFile*, fname_t*)>
    5438:	cmp	r0, #0
    543a:	beq.n	53f4 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    543c:	mov	r5, r6
    543e:	ldmia	r5!, {r0, r1, r2, r3}
    5440:	add	r4, sp, #36	; 0x24
    5442:	stmia	r4!, {r0, r1, r2, r3}
    5444:	ldmia	r5!, {r0, r1, r2, r3}
    5446:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5448:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    544a:	ldr	r2, [r5, #0]
    544c:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    544e:	cbnz	r3, 5476 <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5450:	strb	r7, [r6, #0]
  m_flags = 0;
    5452:	strb	r7, [r6, #2]
    5454:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    5456:	add	r4, sp, #36	; 0x24
    5458:	b.n	5406 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    545a:	adds	r0, #1
    545c:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    545e:	ldrb	r3, [r0, #0]
    5460:	cmp	r3, #47	; 0x2f
    5462:	beq.n	545a <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    5464:	ldr	r1, [r4, #8]
    5466:	add	r0, sp, #36	; 0x24
    5468:	bl	50a8 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    546c:	cmp	r0, #0
    546e:	beq.n	53f4 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    5470:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    5472:	add	r4, sp, #36	; 0x24
    5474:	b.n	5404 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    5476:	mov	r0, r6
    5478:	bl	51c8 <FatFile::sync() [clone .part.42]>
    547c:	b.n	5450 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    547e:	add	r2, sp, #12
    5480:	mov	r1, r4
    5482:	mov	r0, r6
    5484:	bl	527c <FatFile::mkdir(FatFile*, fname_t*)>

 fail:
  return false;
}
    5488:	add	sp, #72	; 0x48
    548a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    548e:	nop

00005490 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5490:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5494:	mov	r6, r0
    5496:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5498:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    549a:	str	r2, [sp, #4]
    549c:	movs	r0, #0
    549e:	strb.w	r0, [sp, #36]	; 0x24
    54a2:	strb.w	r0, [sp, #37]	; 0x25
    54a6:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    54aa:	cbnz	r5, 54b8 <FatFile::open(FatFile*, char const*, int)+0x28>
    54ac:	mov	r8, r3
    54ae:	ldrb	r3, [r1, #0]
    54b0:	tst.w	r3, #112	; 0x70
    54b4:	mov	r4, r1
    54b6:	bne.n	54c0 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    54b8:	movs	r0, #0
}
    54ba:	add	sp, #72	; 0x48
    54bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    54c0:	ldrb	r3, [r2, #0]
    54c2:	cmp	r3, #47	; 0x2f
    54c4:	mov	r0, r2
    54c6:	beq.n	5514 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    54c8:	movs	r7, #0
    54ca:	b.n	54d4 <FatFile::open(FatFile*, char const*, int)+0x44>
    54cc:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    54ce:	strb	r7, [r6, #0]
  m_flags = 0;
    54d0:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    54d2:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    54d4:	add	r2, sp, #4
    54d6:	add	r1, sp, #12
    54d8:	bl	6410 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    54dc:	add	r2, sp, #12
    54de:	mov	r1, r4
    54e0:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    54e2:	cmp	r0, #0
    54e4:	beq.n	54b8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    54e6:	ldr	r5, [sp, #4]
    54e8:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    54ea:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    54ec:	cbz	r5, 5532 <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    54ee:	bl	683c <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    54f2:	mov	r5, r6
    54f4:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    54f6:	cmp	r0, #0
    54f8:	beq.n	54b8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    54fa:	ldmia	r5!, {r0, r1, r2, r3}
    54fc:	stmia	r4!, {r0, r1, r2, r3}
    54fe:	ldmia	r5!, {r0, r1, r2, r3}
    5500:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5502:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5504:	ldr	r2, [r5, #0]
    5506:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5508:	cmp	r3, #0
    550a:	beq.n	54cc <FatFile::open(FatFile*, char const*, int)+0x3c>
    550c:	mov	r0, r6
    550e:	bl	51c8 <FatFile::sync() [clone .part.42]>
    5512:	b.n	54cc <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5514:	adds	r0, #1
    5516:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5518:	ldrb	r3, [r0, #0]
    551a:	cmp	r3, #47	; 0x2f
    551c:	beq.n	5514 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    551e:	cbz	r3, 5544 <FatFile::open(FatFile*, char const*, int)+0xb4>
    5520:	ldr	r1, [r4, #8]
    5522:	add	r0, sp, #36	; 0x24
    5524:	bl	50a8 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5528:	cmp	r0, #0
    552a:	beq.n	54b8 <FatFile::open(FatFile*, char const*, int)+0x28>
    552c:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    552e:	add	r4, sp, #36	; 0x24
    5530:	b.n	54c8 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5532:	mov	r3, r8
    5534:	add	r2, sp, #12
    5536:	mov	r1, r4
    5538:	mov	r0, r6
    553a:	bl	683c <FatFile::open(FatFile*, fname_t*, int)>

 fail:
  return false;
}
    553e:	add	sp, #72	; 0x48
    5540:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5544:	ldr	r1, [r4, #8]
    5546:	mov	r0, r6
    5548:	bl	50a8 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    554c:	b.n	54ba <FatFile::open(FatFile*, char const*, int)+0x2a>
    554e:	nop

00005550 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5550:	cbz	r1, 555a <FatFile::open(FatVolume*, char const*, int)+0xa>
    5552:	addw	r1, r1, #1092	; 0x444
    5556:	b.w	5490 <FatFile::open(FatFile*, char const*, int)>
}
    555a:	mov	r0, r1
    555c:	bx	lr
    555e:	nop

00005560 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    5560:	ldrb	r3, [r0, #0]
    5562:	cbz	r3, 5568 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    5564:	movs	r0, #0
    5566:	bx	lr
    5568:	b.w	50a8 <FatFile::openRoot(FatVolume*) [clone .part.38]>

0000556c <FatFile::preAllocate(unsigned long)>:
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    556c:	cbnz	r1, 5572 <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    556e:	movs	r0, #0
}
    5570:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    5572:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5574:	ldrb	r3, [r0, #2]
    5576:	lsls	r3, r3, #30
    5578:	bmi.n	557e <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    557a:	movs	r0, #0
    557c:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    557e:	ldr	r3, [r0, #32]
    5580:	cmp	r3, #0
    5582:	bne.n	557a <FatFile::preAllocate(unsigned long)+0xe>
    5584:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    5586:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    5588:	ldrb	r3, [r0, #6]
    558a:	adds	r3, #9
    558c:	mov	r5, r1
    558e:	uxtb	r3, r3
    5590:	subs	r1, #1
    5592:	lsrs	r1, r3
    5594:	adds	r1, #1
    5596:	add.w	r2, r4, #32
    559a:	bl	5ff8 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    559e:	cmp	r0, #0
    55a0:	beq.n	557a <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    55a2:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    55a4:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    55a6:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    55a8:	orn	r3, r3, #31
    55ac:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    55ae:	cbnz	r2, 55b2 <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    55b0:	pop	{r3, r4, r5, pc}
    55b2:	mov	r0, r4
    55b4:	ldmia.w	sp!, {r3, r4, r5, lr}
    55b8:	b.w	51c8 <FatFile::sync() [clone .part.42]>

000055bc <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    55bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    55c0:	ldrb	r3, [r0, #2]
    55c2:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    55c4:	sub	sp, #12
    55c6:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    55c8:	bpl.w	56f0 <FatFile::read(void*, unsigned int)+0x134>
    55cc:	mov	r7, r1
    55ce:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    55d0:	lsls	r6, r1, #28
    55d2:	mov	r9, r2
    55d4:	bmi.w	5702 <FatFile::read(void*, unsigned int)+0x146>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    55d8:	lsls	r4, r1, #26
    55da:	bpl.n	55ee <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    55dc:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    55de:	ldr	r3, [r0, #20]
    55e0:	ldrh	r2, [r2, #8]
    55e2:	rsb	r3, r3, r2, lsl #5
    55e6:	uxth	r3, r3
    55e8:	cmp	r9, r3
    55ea:	it	cs
    55ec:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    55ee:	cmp.w	r9, #0
    55f2:	beq.w	574e <FatFile::read(void*, unsigned int)+0x192>
    55f6:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    55f8:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    55fa:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    55fc:	mov	r6, r9
    55fe:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5602:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5606:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    560a:	bpl.n	568e <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    560c:	ldr	r1, [r2, #32]
    560e:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5612:	cmp.w	fp, #0
    5616:	bne.n	56c4 <FatFile::read(void*, unsigned int)+0x108>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5618:	cmp.w	r6, #512	; 0x200
    561c:	bcc.n	56c4 <FatFile::read(void*, unsigned int)+0x108>
    561e:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    5620:	cmp	r1, r3
    5622:	beq.n	56c4 <FatFile::read(void*, unsigned int)+0x108>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5624:	cmp.w	r6, #1024	; 0x400
    5628:	bcc.n	5714 <FatFile::read(void*, unsigned int)+0x158>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    562a:	ldrb	r0, [r5, #0]
    562c:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    562e:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5632:	bmi.n	5640 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5634:	ldrb	r0, [r2, #4]
    5636:	rsb	r0, r8, r0
    563a:	cmp	fp, r0
    563c:	it	cs
    563e:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    5640:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5642:	mov.w	r4, fp, lsl #9
    5646:	bhi.n	5664 <FatFile::read(void*, unsigned int)+0xa8>
    5648:	add.w	r0, r1, fp
    564c:	cmp	r3, r0
    564e:	bcs.n	5664 <FatFile::read(void*, unsigned int)+0xa8>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    5650:	add.w	r0, r2, #36	; 0x24
    5654:	str	r1, [sp, #4]
    5656:	str	r2, [sp, #0]
    5658:	bl	37a8 <FsCache::sync()>
    565c:	ldr	r2, [sp, #0]
    565e:	ldr	r1, [sp, #4]
    5660:	cmp	r0, #0
    5662:	beq.n	56f0 <FatFile::read(void*, unsigned int)+0x134>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    5664:	ldr	r0, [r2, #40]	; 0x28
    5666:	ldr	r2, [r0, #0]
    5668:	mov	r3, fp
    566a:	ldr.w	fp, [r2, #16]
    566e:	mov	r2, r7
    5670:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5672:	cmp	r0, #0
    5674:	beq.n	56f0 <FatFile::read(void*, unsigned int)+0x134>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5676:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5678:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    567a:	add	r3, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    567c:	add	r7, r4
    m_curPosition += n;
    567e:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5680:	beq.n	574e <FatFile::read(void*, unsigned int)+0x192>
    5682:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5684:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5686:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5688:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    568c:	bmi.n	560c <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    568e:	ldrb.w	r8, [r2, #5]
    5692:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5696:	cmp.w	fp, #0
    569a:	bne.n	5710 <FatFile::read(void*, unsigned int)+0x154>
    569c:	cmp.w	r8, #0
    56a0:	bne.n	5710 <FatFile::read(void*, unsigned int)+0x154>
        // start of new cluster
        if (m_curPosition == 0) {
    56a2:	cmp	r3, #0
    56a4:	bne.n	5728 <FatFile::read(void*, unsigned int)+0x16c>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    56a6:	lsls	r1, r1, #25
    56a8:	ite	mi
    56aa:	ldrmi	r4, [r2, #32]
    56ac:	ldrpl	r4, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    56ae:	str	r4, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    56b0:	ldrb	r1, [r2, #6]
    56b2:	ldr	r0, [r2, #20]
    56b4:	subs	r4, #2
    56b6:	lsls	r4, r1
    56b8:	add.w	r1, r8, r0
    56bc:	add	r1, r4
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    56be:	cmp.w	fp, #0
    56c2:	beq.n	5618 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    56c4:	add.w	r0, r2, #36	; 0x24
    56c8:	movs	r2, #0
    56ca:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    56ce:	cbz	r0, 56f0 <FatFile::read(void*, unsigned int)+0x134>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    56d0:	rsb	r4, fp, #512	; 0x200
    56d4:	cmp	r4, r6
    56d6:	it	cs
    56d8:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    56da:	add.w	r1, r0, fp
    56de:	mov	r2, r4
    56e0:	mov	r0, r7
    56e2:	bl	887c <memcpy>
    56e6:	b.n	5676 <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    56e8:	ldrb	r3, [r5, #0]
    56ea:	tst.w	r3, #112	; 0x70
    56ee:	bne.n	5750 <FatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    56f0:	ldrb	r3, [r5, #1]
  return -1;
    56f2:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    56f6:	orr.w	r3, r3, #2
    56fa:	strb	r3, [r5, #1]
  return -1;
}
    56fc:	add	sp, #12
    56fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5702:	ldr	r3, [r0, #28]
    5704:	ldr	r2, [r0, #20]
    5706:	subs	r3, r3, r2
    5708:	cmp	r9, r3
    570a:	it	cs
    570c:	movcs	r9, r3
    570e:	b.n	55ee <FatFile::read(void*, unsigned int)+0x32>
    5710:	ldr	r4, [r5, #16]
    5712:	b.n	56b0 <FatFile::read(void*, unsigned int)+0xf4>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    5714:	ldr	r0, [r2, #40]	; 0x28
    5716:	ldr	r3, [r0, #0]
    5718:	mov	r2, r7
    571a:	ldr	r3, [r3, #12]
    571c:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    571e:	cmp	r0, #0
    5720:	beq.n	56f0 <FatFile::read(void*, unsigned int)+0x134>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5722:	mov.w	r4, #512	; 0x200
    5726:	b.n	5676 <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5728:	lsls	r3, r1, #28
    572a:	bpl.n	5738 <FatFile::read(void*, unsigned int)+0x17c>
    572c:	ldrb	r3, [r5, #2]
    572e:	lsls	r4, r3, #25
    5730:	bpl.n	5738 <FatFile::read(void*, unsigned int)+0x17c>
          m_curCluster++;
    5732:	ldr	r4, [r5, #16]
    5734:	adds	r4, #1
    5736:	b.n	56ae <FatFile::read(void*, unsigned int)+0xf2>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5738:	mov	r0, r2
    573a:	ldr	r1, [r5, #16]
    573c:	mov	r2, sl
    573e:	bl	5e9c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5742:	cmp	r0, #0
    5744:	blt.n	56f0 <FatFile::read(void*, unsigned int)+0x134>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5746:	beq.n	56e8 <FatFile::read(void*, unsigned int)+0x12c>
    5748:	ldr	r2, [r5, #8]
    574a:	ldr	r4, [r5, #16]
    574c:	b.n	56b0 <FatFile::read(void*, unsigned int)+0xf4>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    574e:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5750:	rsb	r0, r6, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    5754:	add	sp, #12
    5756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    575a:	nop

0000575c <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    575c:	push	{r4, r5, r6, lr}
    575e:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5760:	movs	r2, #1
    5762:	add.w	r1, sp, #7
    5766:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5768:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    576a:	ldr	r5, [r0, #16]
    576c:	bl	55bc <FatFile::read(void*, unsigned int)>
    5770:	cmp	r0, #1
    5772:	it	eq
    5774:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5778:	str	r6, [r4, #20]
    577a:	it	ne
    577c:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5780:	str	r5, [r4, #16]
  return c;
}
    5782:	add	sp, #8
    5784:	pop	{r4, r5, r6, pc}
    5786:	nop

00005788 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5788:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    578a:	ldr	r3, [r0, #20]
    578c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5790:	sub	sp, #12
    5792:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5794:	cbz	r5, 5798 <FatFile::readDirCache(bool)+0x10>
    5796:	cbnz	r1, 57bc <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    5798:	movs	r2, #1
    579a:	add.w	r1, sp, #7
    579e:	mov	r0, r4
    57a0:	bl	55bc <FatFile::read(void*, unsigned int)>
    57a4:	sxtb	r0, r0
    if  (n != 1) {
    57a6:	cmp	r0, #1
    57a8:	bne.n	57c2 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    57aa:	ldr	r3, [r4, #20]
    57ac:	adds	r3, #31
    57ae:	str	r3, [r4, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    57b0:	ldr	r0, [r4, #8]
    57b2:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    57b4:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    57b8:	add	sp, #12
    57ba:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    57bc:	adds	r3, #32
    57be:	str	r3, [r0, #20]
    57c0:	b.n	57b0 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    57c2:	movs	r0, #0
}
    57c4:	add	sp, #12
    57c6:	pop	{r4, r5, pc}

000057c8 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    57c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    57cc:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    57ce:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    57d0:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    57d2:	tst.w	r5, #24
    57d6:	strb.w	r4, [sp, #32]
    57da:	strb.w	r4, [sp, #33]	; 0x21
    57de:	strb.w	r4, [sp, #34]	; 0x22
    57e2:	strb.w	r4, [sp, #68]	; 0x44
    57e6:	strb.w	r4, [sp, #69]	; 0x45
    57ea:	strb.w	r4, [sp, #70]	; 0x46
    57ee:	beq.n	57fa <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    57f0:	ldr	r6, [r0, #8]
    57f2:	ldr	r5, [r1, #8]
    57f4:	cmp	r6, r5
    57f6:	mov	r3, r0
    57f8:	beq.n	5802 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    57fa:	movs	r0, #0
}
    57fc:	add	sp, #104	; 0x68
    57fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5802:	mov	r5, r3
    5804:	mov	r8, r2
    5806:	mov	r6, r1
    5808:	bl	51c8 <FatFile::sync() [clone .part.42]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    580c:	mov	lr, r5
    580e:	ldmia.w	lr!, {r0, r1, r2, r3}
    5812:	add	r7, sp, #68	; 0x44
    5814:	stmia	r7!, {r0, r1, r2, r3}
    5816:	ldmia.w	lr!, {r0, r1, r2, r3}
    581a:	stmia	r7!, {r0, r1, r2, r3}
    581c:	ldr.w	r3, [lr]
    5820:	str	r3, [r7, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5822:	mov	r1, r4
    5824:	mov	r0, r5
    5826:	bl	51a8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    582a:	mov	lr, r0
    582c:	cmp	r0, #0
    582e:	beq.n	57fa <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5830:	ldr.w	r1, [lr, #4]
    5834:	ldr.w	r2, [lr, #8]
    5838:	ldr.w	r3, [lr, #12]
    583c:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    583e:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5842:	mov	r7, sp
    5844:	stmia	r7!, {r0, r1, r2, r3}
    5846:	ldr.w	r1, [lr, #20]
    584a:	ldr.w	r2, [lr, #24]
    584e:	ldr.w	r3, [lr, #28]
    5852:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    5856:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    585a:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    585c:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5860:	mov	r2, r8
    5862:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    5864:	cmp.w	lr, #0
    5868:	beq.w	598c <FatFile::rename(FatFile*, char const*)+0x1c4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    586c:	movw	r3, #2561	; 0xa01
    5870:	add	r0, sp, #32
    5872:	bl	5490 <FatFile::open(FatFile*, char const*, int)>
    5876:	cmp	r0, #0
    5878:	beq.n	57fa <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    587a:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    587c:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    5880:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    5884:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    5886:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    5888:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    588a:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    588c:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    588e:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5890:	movs	r1, #1
    5892:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    5894:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    5898:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    589c:	bl	51a8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    58a0:	cmp	r0, #0
    58a2:	beq.n	57fa <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    58a4:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    58a6:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    58aa:	ldr.w	r7, [r3, #-91]!
    58ae:	str.w	r7, [r0, #13]
    58b2:	ldr	r7, [r3, #4]
    58b4:	str.w	r7, [r0, #17]
    58b8:	ldr	r7, [r3, #8]
    58ba:	str.w	r7, [r0, #21]
    58be:	ldr	r7, [r3, #12]
    58c0:	str.w	r7, [r0, #25]
    58c4:	ldrh	r7, [r3, #16]
    58c6:	ldrb	r3, [r3, #18]
    58c8:	strh.w	r7, [r0, #29]
    58cc:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    58ce:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    58d0:	cmp	r4, #0
    58d2:	beq.n	5948 <FatFile::rename(FatFile*, char const*)+0x180>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    58d4:	ldr	r0, [r5, #8]
    58d6:	ldrb	r2, [r0, #6]
    58d8:	ldr	r1, [r0, #20]
    58da:	subs	r3, r4, #2
    58dc:	lsls	r3, r2
    58de:	add	r1, r3
    58e0:	mov	r2, r6
    58e2:	adds	r0, #36	; 0x24
    58e4:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    58e8:	cmp	r0, #0
    58ea:	beq.n	57fa <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    58ec:	mov	r6, r0
    58ee:	mov	r7, sp
    58f0:	ldr.w	r0, [r6, #32]!
    58f4:	ldr	r1, [r6, #4]
    58f6:	ldr	r2, [r6, #8]
    58f8:	ldr	r3, [r6, #12]
    58fa:	stmia	r7!, {r0, r1, r2, r3}
    58fc:	ldr	r0, [r6, #16]
    58fe:	ldr	r1, [r6, #20]
    5900:	ldr	r2, [r6, #24]
    5902:	ldr	r3, [r6, #28]
    5904:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    5906:	mov	r1, r4
    5908:	ldr	r0, [r5, #8]
    590a:	bl	60a0 <FatPartition::freeChain(unsigned long)>
    590e:	cmp	r0, #0
    5910:	beq.w	57fa <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    5914:	ldr	r0, [r5, #8]
    5916:	ldr	r3, [r5, #32]
    5918:	ldrb	r2, [r0, #6]
    591a:	ldr	r1, [r0, #20]
    591c:	subs	r3, #2
    591e:	lsls	r3, r2
    5920:	add	r1, r3
    5922:	adds	r0, #36	; 0x24
    5924:	movs	r2, #1
    5926:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    592a:	mov	r7, r0
    592c:	cmp	r0, #0
    592e:	beq.w	57fa <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    5932:	mov	r4, sp
    5934:	ldmia	r4!, {r0, r1, r2, r3}
    5936:	str	r0, [r7, #32]
    5938:	str	r1, [r7, #36]	; 0x24
    593a:	str	r2, [r7, #40]	; 0x28
    593c:	str	r3, [r7, #44]	; 0x2c
    593e:	ldmia	r4!, {r0, r1, r2, r3}
    5940:	str	r0, [r7, #48]	; 0x30
    5942:	str	r1, [r7, #52]	; 0x34
    5944:	str	r2, [r7, #56]	; 0x38
    5946:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5948:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    594a:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    594c:	movs	r3, #8
  if (!oldFile.remove()) {
    594e:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5950:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    5952:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    5956:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    595a:	bl	665c <FatFile::remove()>
    595e:	cmp	r0, #0
    5960:	beq.w	57fa <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    5964:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5966:	add.w	r0, r4, #36	; 0x24
    596a:	bl	37a8 <FsCache::sync()>
    596e:	cmp	r0, #0
    5970:	beq.w	57fa <FatFile::rename(FatFile*, char const*)+0x32>
    5974:	add.w	r0, r4, #564	; 0x234
    5978:	bl	37a8 <FsCache::sync()>
    597c:	cmp	r0, #0
    597e:	beq.w	57fa <FatFile::rename(FatFile*, char const*)+0x32>
    5982:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5984:	ldr	r3, [r0, #0]
    5986:	ldr	r3, [r3, #24]
    5988:	blx	r3
    598a:	b.n	57fc <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    598c:	add	r0, sp, #32
    598e:	bl	53cc <FatFile::mkdir(FatFile*, char const*, bool)>
    5992:	cmp	r0, #0
    5994:	beq.w	57fa <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    5998:	ldr	r4, [sp, #64]	; 0x40
    599a:	b.n	587a <FatFile::rename(FatFile*, char const*)+0xb2>

0000599c <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    599c:	ldrb	r3, [r0, #0]
    599e:	lsls	r2, r3, #27
    59a0:	bpl.n	59d8 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    59a2:	ldr	r3, [r0, #20]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    59a4:	push	{r4, lr}
    59a6:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    59a8:	cbz	r3, 59b8 <FatFile::rmdir()+0x1c>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    59aa:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    59ac:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    59ae:	bic.w	r3, r3, #32
    59b2:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    59b4:	str	r2, [r0, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    59b6:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    59b8:	movs	r1, #1
    59ba:	mov	r0, r4
    59bc:	bl	5788 <FatFile::readDirCache(bool)>
    if (!dir) {
    59c0:	cbz	r0, 59dc <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    59c2:	ldrb	r3, [r0, #0]
    59c4:	cbz	r3, 59e2 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    59c6:	cmp	r3, #229	; 0xe5
    59c8:	beq.n	59b8 <FatFile::rmdir()+0x1c>
    59ca:	cmp	r3, #46	; 0x2e
    59cc:	beq.n	59b8 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    59ce:	ldrb	r3, [r0, #11]
    59d0:	lsls	r3, r3, #28
    59d2:	bmi.n	59b8 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    59d4:	movs	r0, #0
    59d6:	pop	{r4, pc}
    59d8:	movs	r0, #0
    59da:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    59dc:	ldrb	r3, [r4, #1]
    59de:	cmp	r3, #0
    59e0:	bne.n	59d4 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    59e2:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    59e4:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    59e6:	orr.w	r3, r3, #2
    59ea:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    59ec:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    59ee:	mov	r0, r4

 fail:
  return false;
}
    59f0:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    59f4:	b.w	665c <FatFile::remove()>

000059f8 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    59f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59fc:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    59fe:	ldr	r7, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5a00:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5a02:	cbz	r3, 5a32 <FatFile::seekSet(unsigned long)+0x3a>
    5a04:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5a06:	ldr	r1, [r0, #20]
    5a08:	cmp	r1, r5
    5a0a:	beq.n	5a64 <FatFile::seekSet(unsigned long)+0x6c>
    return true;
  }
  if (pos == 0) {
    5a0c:	cbnz	r5, 5a20 <FatFile::seekSet(unsigned long)+0x28>
    5a0e:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    5a10:	str	r5, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5a12:	bic.w	r3, r3, #32
    5a16:	strb	r3, [r4, #2]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5a18:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    5a1a:	movs	r0, #1
    5a1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5a20:	lsls	r0, r3, #28
    5a22:	bmi.n	5a3a <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5a24:	lsls	r2, r3, #26
    5a26:	bpl.n	5a40 <FatFile::seekSet(unsigned long)+0x48>
    5a28:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5a2a:	ldrh	r3, [r3, #8]
    5a2c:	cmp.w	r5, r3, lsl #5
    5a30:	bls.n	5a9c <FatFile::seekSet(unsigned long)+0xa4>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    5a32:	str	r7, [r4, #16]
  return false;
    5a34:	movs	r0, #0
    5a36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    5a3a:	ldr	r2, [r4, #28]
    5a3c:	cmp	r5, r2
    5a3e:	bhi.n	5a32 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5a40:	ldr.w	lr, [r4, #8]
    5a44:	ldrb	r2, [r4, #2]
    5a46:	ldrb.w	r0, [lr, #6]
    5a4a:	adds	r0, #9
    5a4c:	uxtb	r0, r0
    5a4e:	subs	r6, r5, #1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    5a50:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5a54:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    5a58:	beq.n	5a6a <FatFile::seekSet(unsigned long)+0x72>
    m_curCluster = m_firstCluster + nNew;
    5a5a:	ldr	r3, [r4, #32]
    5a5c:	add	r6, r3
    5a5e:	str	r6, [r4, #16]
    goto done;
    5a60:	mov	r3, r2
    5a62:	b.n	5a12 <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5a64:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    5a66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5a6a:	subs	r2, r1, #1
    5a6c:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    5a70:	cmp	r6, r0
    5a72:	bcs.n	5aa0 <FatFile::seekSet(unsigned long)+0xa8>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5a74:	lsls	r3, r3, #25
    5a76:	ite	mi
    5a78:	ldrmi.w	r3, [lr, #32]
    5a7c:	ldrpl	r3, [r4, #32]
    5a7e:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a80:	add.w	r8, r4, #16
    5a84:	b.n	5a96 <FatFile::seekSet(unsigned long)+0x9e>
    5a86:	ldr	r1, [r4, #16]
    5a88:	ldr	r0, [r4, #8]
    5a8a:	bl	5e9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    5a8e:	cmp	r0, #0
    5a90:	add.w	r6, r6, #4294967295
    5a94:	ble.n	5a32 <FatFile::seekSet(unsigned long)+0x3a>
    5a96:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5a98:	cmp	r6, #0
    5a9a:	bne.n	5a86 <FatFile::seekSet(unsigned long)+0x8e>
    5a9c:	ldrb	r3, [r4, #2]
    5a9e:	b.n	5a12 <FatFile::seekSet(unsigned long)+0x1a>
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    5aa0:	cmp	r1, #0
    5aa2:	beq.n	5a74 <FatFile::seekSet(unsigned long)+0x7c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5aa4:	subs	r6, r6, r0
    5aa6:	b.n	5a80 <FatFile::seekSet(unsigned long)+0x88>

00005aa8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5aa8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5aac:	mov	r5, r1
    5aae:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5ab0:	movs	r1, #0
    5ab2:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5ab4:	mov	r4, r0
    5ab6:	mov	r7, r3
    5ab8:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5abc:	bl	c09c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5ac0:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5ac2:	ldr	r3, [r5, #32]
    5ac4:	str	r3, [r4, #12]
    5ac6:	add.w	r2, r0, #52	; 0x34
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5aca:	and.w	r3, r8, #15
    5ace:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5ad2:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    5ad4:	strh.w	r8, [r4, #4]
    5ad8:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5ada:	lsls	r5, r1, #28
    5adc:	bmi.n	5b04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5ade:	and.w	r1, r1, #23
    5ae2:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    5ae4:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5ae6:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5ae8:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5aec:	it	eq
    5aee:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5af2:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    5af6:	it	eq
    5af8:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5afa:	cmp	r3, #1
    5afc:	beq.n	5b0e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    5afe:	cmp	r3, #2
    5b00:	beq.n	5b56 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    5b02:	cbz	r3, 5b4c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    5b04:	movs	r0, #0
    5b06:	strb	r0, [r4, #0]
  m_flags = 0;
    5b08:	strb	r0, [r4, #2]
  return false;
    5b0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    5b0e:	movs	r3, #2
    5b10:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5b12:	ldrb	r1, [r4, #0]
    5b14:	tst.w	r1, #17
    5b18:	bne.n	5b04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b1a:	sxtb	r1, r3
    5b1c:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    5b20:	and.w	r3, r7, #8
    5b24:	orrs	r3, r1
    5b26:	uxtb	r3, r3
    5b28:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5b2a:	ldrh.w	lr, [r2, #20]
    5b2e:	ldrh	r1, [r2, #26]
    5b30:	ldr	r6, [r0, #48]	; 0x30
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    5b32:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5b34:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    5b38:	cbz	r5, 5b5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5b3a:	cbnz	r1, 5b72 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5b3c:	orn	r3, r3, #127	; 0x7f
    5b40:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5b42:	lsls	r3, r7, #17
    5b44:	bmi.n	5b64 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5b46:	movs	r0, #1
    5b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    5b4c:	ands.w	r5, r7, #1024	; 0x400
    5b50:	bne.n	5b04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b52:	movs	r1, #1
    5b54:	b.n	5b20 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5b56:	movs	r3, #3
    5b58:	strb	r3, [r4, #2]
      break;
    5b5a:	b.n	5b12 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5b5c:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5b5e:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5b60:	str	r3, [r4, #28]
    5b62:	b.n	5b42 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5b64:	ldr	r1, [r4, #28]
    5b66:	mov	r0, r4
    5b68:	bl	59f8 <FatFile::seekSet(unsigned long)>
    5b6c:	cmp	r0, #0
    5b6e:	bne.n	5b46 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    5b70:	b.n	5b04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5b72:	bl	60a0 <FatPartition::freeChain(unsigned long)>
    5b76:	cmp	r0, #0
    5b78:	beq.n	5b04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b7a:	ldrb	r3, [r4, #2]
    5b7c:	b.n	5b3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    5b7e:	nop

00005b80 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5b80:	ldrb	r3, [r0, #0]
    5b82:	cbnz	r3, 5b8c <FatFile::openNext(FatFile*, int)+0xc>
    5b84:	ldrb	r3, [r1, #0]
    5b86:	tst.w	r3, #112	; 0x70
    5b8a:	bne.n	5b90 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    5b8c:	movs	r0, #0
}
    5b8e:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5b90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b94:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5b96:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5b9a:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5b9c:	bne.n	5be2 <FatFile::openNext(FatFile*, int)+0x62>
    5b9e:	mov	r9, r2
    5ba0:	mov	r5, r1
    5ba2:	mov	r8, r0
    5ba4:	mov	sl, r7
    5ba6:	b.n	5bac <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    5ba8:	movs	r7, #0
    5baa:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    5bac:	movs	r1, #0
    5bae:	mov	r0, r5
    5bb0:	bl	5788 <FatFile::readDirCache(bool)>
    if (!dir) {
    5bb4:	cbz	r0, 5be2 <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5bb6:	ldrb	r3, [r0, #0]
    5bb8:	cbz	r3, 5be2 <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    5bba:	cmp	r3, #46	; 0x2e
    5bbc:	beq.n	5ba8 <FatFile::openNext(FatFile*, int)+0x28>
    5bbe:	cmp	r3, #229	; 0xe5
    5bc0:	beq.n	5ba8 <FatFile::openNext(FatFile*, int)+0x28>
    5bc2:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    5bc4:	lsls	r1, r2, #28
    5bc6:	bpl.n	5bea <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    5bc8:	cmp	r2, #15
    5bca:	bne.n	5ba8 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    5bcc:	lsls	r2, r3, #25
    5bce:	bpl.n	5baa <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    5bd0:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    5bd4:	ldrb.w	sl, [r0, #13]
    5bd8:	b.n	5baa <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5bda:	bl	62d0 <FatFile::lfnChecksum(unsigned char*)>
    5bde:	cmp	r0, sl
    5be0:	beq.n	5bee <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    5be2:	movs	r0, #0
}
    5be4:	add	sp, #8
    5be6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5bea:	cmp	r7, #0
    5bec:	bne.n	5bda <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    5bee:	str	r7, [sp, #0]
    5bf0:	mov	r3, r9
    5bf2:	ubfx	r2, r6, #5, #16
    5bf6:	mov	r1, r5
    5bf8:	mov	r0, r8
    5bfa:	bl	5aa8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    5bfe:	b.n	5be4 <FatFile::openNext(FatFile*, int)+0x64>

00005c00 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c00:	ldrb	r3, [r0, #0]
    5c02:	cbz	r3, 5c08 <FatFile::sync()+0x8>
    5c04:	b.w	51c8 <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5c08:	movs	r0, #1
    5c0a:	bx	lr

00005c0c <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5c0c:	ldrb	r3, [r0, #2]
    5c0e:	lsls	r3, r3, #30
    5c10:	bpl.n	5c48 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5c12:	ldr	r3, [r0, #32]
    5c14:	cbz	r3, 5c44 <FatFile::truncate()+0x38>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5c16:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5c18:	ldr	r1, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5c1a:	sub	sp, #8
    5c1c:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5c1e:	cbnz	r1, 5c5e <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    5c20:	str	r3, [sp, #4]
    m_firstCluster = 0;
    5c22:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    5c24:	mov	r1, r3
    5c26:	ldr	r0, [r4, #8]
    5c28:	bl	60a0 <FatPartition::freeChain(unsigned long)>
    5c2c:	cbz	r0, 5c5a <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c2e:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c30:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    5c32:	ldr	r1, [r4, #20]
    5c34:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c36:	orn	r3, r3, #127	; 0x7f
    5c3a:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c3c:	cbnz	r2, 5c7a <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5c3e:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5c40:	add	sp, #8
    5c42:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5c44:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5c46:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    5c48:	movs	r0, #0
}
    5c4a:	bx	lr
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5c4c:	mvn.w	r2, #4026531840	; 0xf0000000
    5c50:	ldr	r1, [r4, #16]
    5c52:	ldr	r0, [r4, #8]
    5c54:	bl	5f0c <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    5c58:	cbnz	r0, 5c72 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    5c5a:	movs	r0, #0
    5c5c:	b.n	5c40 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    5c5e:	add	r2, sp, #8
    5c60:	movs	r3, #0
    5c62:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5c66:	ldr	r0, [r0, #8]
    5c68:	bl	5e9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5c6c:	cmp	r0, #0
    5c6e:	blt.n	5c5a <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    5c70:	bne.n	5c4c <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    5c72:	ldr	r3, [sp, #4]
    5c74:	cmp	r3, #0
    5c76:	beq.n	5c2e <FatFile::truncate()+0x22>
    5c78:	b.n	5c24 <FatFile::truncate()+0x18>
    5c7a:	mov	r0, r4
    5c7c:	bl	51c8 <FatFile::sync() [clone .part.42]>
    5c80:	b.n	5c40 <FatFile::truncate()+0x34>
    5c82:	nop

00005c84 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5c84:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c88:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5c8a:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5c8c:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5c8e:	bmi.n	5ca0 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5c90:	ldrb	r3, [r4, #1]
    5c92:	orr.w	r3, r3, #1
    5c96:	strb	r3, [r4, #1]
  return -1;
    5c98:	mov.w	r0, #4294967295
    5c9c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ca0:	mov	r8, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5ca2:	lsls	r2, r3, #28
    5ca4:	mov	r7, r1
    5ca6:	bmi.w	5e46 <FatFile::write(void const*, unsigned int)+0x1c2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5caa:	ldr	r2, [r4, #20]
    5cac:	mvns	r3, r2
    5cae:	cmp	r8, r3
    5cb0:	bhi.n	5c90 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5cb2:	cmp.w	r8, #0
    5cb6:	beq.w	5e68 <FatFile::write(void const*, unsigned int)+0x1e4>
    5cba:	mov	r6, r8
    5cbc:	b.n	5d34 <FatFile::write(void const*, unsigned int)+0xb0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5cbe:	cmp.w	r9, #0
    5cc2:	bne.n	5d76 <FatFile::write(void const*, unsigned int)+0xf2>
      // start of new cluster
      if (m_curCluster != 0) {
    5cc4:	ldr	r1, [r4, #16]
    5cc6:	cmp	r1, #0
    5cc8:	beq.w	5df2 <FatFile::write(void const*, unsigned int)+0x16e>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5ccc:	ldrb	r3, [r4, #2]
    5cce:	lsls	r3, r3, #25
    5cd0:	bpl.w	5e06 <FatFile::write(void const*, unsigned int)+0x182>
    5cd4:	ldr	r3, [r4, #28]
    5cd6:	cmp	r3, r2
    5cd8:	bls.w	5e06 <FatFile::write(void const*, unsigned int)+0x182>
          m_curCluster++;
    5cdc:	adds	r3, r1, #1
    5cde:	str	r3, [r4, #16]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5ce0:	ldrb	r2, [r0, #6]
    5ce2:	ldr	r3, [r0, #20]
    5ce4:	subs	r1, #1
    5ce6:	lsls	r1, r2
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5ce8:	cmp.w	r6, #512	; 0x200
    5cec:	add	r1, r3
    5cee:	bcs.n	5d92 <FatFile::write(void const*, unsigned int)+0x10e>
    5cf0:	cmp.w	r6, #512	; 0x200
    5cf4:	mov	r5, r6
    5cf6:	it	cs
    5cf8:	movcs.w	r5, #512	; 0x200
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    5cfc:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5cfe:	tst.w	r3, #32
    5d02:	ite	eq
    5d04:	moveq	r2, #1
    5d06:	movne	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5d08:	adds	r0, #36	; 0x24
    5d0a:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    5d0e:	cmp	r0, #0
    5d10:	beq.n	5c90 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5d12:	add	r0, r9
    5d14:	mov	r2, r5
    5d16:	mov	r1, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5d18:	add	r9, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5d1a:	bl	887c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5d1e:	cmp.w	r9, #512	; 0x200
    5d22:	beq.w	5e36 <FatFile::write(void const*, unsigned int)+0x1b2>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d26:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5d28:	subs	r6, r6, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d2a:	add	r2, r5
    src += n;
    5d2c:	add	r7, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d2e:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5d30:	beq.w	5e68 <FatFile::write(void const*, unsigned int)+0x1e4>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5d34:	ldr	r0, [r4, #8]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5d36:	ldrb	r3, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5d38:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    5d3c:	ubfx	r9, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5d40:	beq.n	5cbe <FatFile::write(void const*, unsigned int)+0x3a>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    5d42:	ldr	r3, [r4, #16]
    5d44:	ldrb	r1, [r0, #6]
    5d46:	ldr	r2, [r0, #20]
    5d48:	subs	r3, #2
    5d4a:	lsl.w	r1, r3, r1
    5d4e:	add	r1, r2
    5d50:	add	r1, r5

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5d52:	cmp.w	r9, #0
    5d56:	bne.n	5d84 <FatFile::write(void const*, unsigned int)+0x100>
    5d58:	cmp.w	r6, #512	; 0x200
    5d5c:	bcs.n	5d92 <FatFile::write(void const*, unsigned int)+0x10e>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5d5e:	ldr	r2, [r4, #20]
    5d60:	ldr	r3, [r4, #28]
    5d62:	cmp.w	r6, #512	; 0x200
    5d66:	mov	r5, r6
    5d68:	it	cs
    5d6a:	movcs.w	r5, #512	; 0x200
    5d6e:	cmp	r2, r3
    5d70:	bcc.n	5cfc <FatFile::write(void const*, unsigned int)+0x78>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5d72:	movs	r2, #5
    5d74:	b.n	5d08 <FatFile::write(void const*, unsigned int)+0x84>
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5d76:	ldr	r3, [r4, #16]
    5d78:	ldrb	r1, [r0, #6]
    5d7a:	ldr	r2, [r0, #20]
    5d7c:	subs	r3, #2
    5d7e:	lsl.w	r1, r3, r1
    5d82:	add	r1, r2
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5d84:	rsb	r5, r9, #512	; 0x200
    5d88:	cmp	r5, r6
    5d8a:	it	cs
    5d8c:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5d8e:	movs	r2, #1
    5d90:	b.n	5d08 <FatFile::write(void const*, unsigned int)+0x84>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5d92:	cmp.w	r6, #1024	; 0x400
    5d96:	bcc.n	5dd6 <FatFile::write(void const*, unsigned int)+0x152>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5d98:	ldrb	r3, [r0, #4]
    5d9a:	ldr.w	lr, [r0, #48]	; 0x30
    5d9e:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5da0:	lsrs	r2, r6, #9
    5da2:	cmp	r3, r2
    5da4:	it	cs
    5da6:	movcs	r3, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    5da8:	cmp	lr, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5daa:	mov.w	r5, r3, lsl #9
    5dae:	bcc.n	5dc4 <FatFile::write(void const*, unsigned int)+0x140>
    5db0:	adds	r2, r3, r1
    5db2:	cmp	lr, r2
    5db4:	bcs.n	5dc4 <FatFile::write(void const*, unsigned int)+0x140>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5db6:	mov.w	lr, #0
    m_sector = 0XFFFFFFFF;
    5dba:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5dbe:	strb.w	lr, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    5dc2:	str	r2, [r0, #48]	; 0x30
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    5dc4:	ldr	r0, [r0, #40]	; 0x28
    5dc6:	ldr	r2, [r0, #0]
    5dc8:	ldr.w	r9, [r2, #32]
    5dcc:	mov	r2, r7
    5dce:	blx	r9
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    5dd0:	cmp	r0, #0
    5dd2:	bne.n	5d26 <FatFile::write(void const*, unsigned int)+0xa2>
    5dd4:	b.n	5c90 <FatFile::write(void const*, unsigned int)+0xc>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    5dd6:	ldr	r3, [r0, #48]	; 0x30
    5dd8:	cmp	r3, r1
    5dda:	beq.n	5e28 <FatFile::write(void const*, unsigned int)+0x1a4>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    5ddc:	ldr	r0, [r0, #40]	; 0x28
    5dde:	ldr	r3, [r0, #0]
    5de0:	mov	r2, r7
    5de2:	ldr	r3, [r3, #28]
    5de4:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5de6:	cmp	r0, #0
    5de8:	beq.w	5c90 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5dec:	mov.w	r5, #512	; 0x200
    5df0:	b.n	5d26 <FatFile::write(void const*, unsigned int)+0xa2>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5df2:	ldr	r3, [r4, #32]
    5df4:	cbz	r3, 5e54 <FatFile::write(void const*, unsigned int)+0x1d0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5df6:	str	r3, [r4, #16]
    5df8:	ldrb	r1, [r0, #6]
    5dfa:	ldr	r2, [r0, #20]
    5dfc:	subs	r3, #2
    5dfe:	lsl.w	r1, r3, r1
    5e02:	add	r1, r2
    5e04:	b.n	5d58 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e06:	add.w	r2, r4, #16
    5e0a:	bl	5e9c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5e0e:	cmp	r0, #0
    5e10:	blt.w	5c90 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    5e14:	bne.n	5e22 <FatFile::write(void const*, unsigned int)+0x19e>
          // add cluster if at end of chain
          if (!addCluster()) {
    5e16:	mov	r0, r4
    5e18:	bl	50dc <FatFile::addCluster()>
    5e1c:	cmp	r0, #0
    5e1e:	beq.w	5c90 <FatFile::write(void const*, unsigned int)+0xc>
    5e22:	ldr	r3, [r4, #16]
    5e24:	ldr	r0, [r4, #8]
    5e26:	b.n	5df8 <FatFile::write(void const*, unsigned int)+0x174>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5e28:	movs	r2, #0
    m_sector = 0XFFFFFFFF;
    5e2a:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5e2e:	strb.w	r2, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    5e32:	str	r3, [r0, #48]	; 0x30
    5e34:	b.n	5ddc <FatFile::write(void const*, unsigned int)+0x158>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5e36:	ldr	r0, [r4, #8]
    5e38:	adds	r0, #36	; 0x24
    5e3a:	bl	37a8 <FsCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    5e3e:	cmp	r0, #0
    5e40:	bne.w	5d26 <FatFile::write(void const*, unsigned int)+0xa2>
    5e44:	b.n	5c90 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    5e46:	ldr	r1, [r0, #28]
    5e48:	bl	59f8 <FatFile::seekSet(unsigned long)>
    5e4c:	cmp	r0, #0
    5e4e:	beq.w	5c90 <FatFile::write(void const*, unsigned int)+0xc>
    5e52:	b.n	5caa <FatFile::write(void const*, unsigned int)+0x26>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5e54:	mov	r0, r4
    5e56:	bl	50dc <FatFile::addCluster()>
    5e5a:	cmp	r0, #0
    5e5c:	beq.w	5c90 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5e60:	ldr	r3, [r4, #16]
    5e62:	str	r3, [r4, #32]
    5e64:	ldr	r0, [r4, #8]
    5e66:	b.n	5df8 <FatFile::write(void const*, unsigned int)+0x174>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5e68:	ldr	r3, [r4, #28]
    5e6a:	cmp	r3, r2
    5e6c:	bcc.n	5e82 <FatFile::write(void const*, unsigned int)+0x1fe>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5e6e:	ldr	r3, [pc, #40]	; (5e98 <FatFile::write(void const*, unsigned int)+0x214>)
    5e70:	ldr	r3, [r3, #0]
    5e72:	cbz	r3, 5e92 <FatFile::write(void const*, unsigned int)+0x20e>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e74:	ldrb	r3, [r4, #2]
    5e76:	orn	r3, r3, #127	; 0x7f
    5e7a:	strb	r3, [r4, #2]
    5e7c:	mov	r0, r8
    5e7e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e82:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    5e84:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e86:	orn	r3, r3, #127	; 0x7f
    5e8a:	strb	r3, [r4, #2]
    5e8c:	mov	r0, r8
    5e8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e92:	mov	r0, r8
    5e94:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e98:	.word	0x20019a10

00005e9c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5e9c:	cmp	r1, #1
    5e9e:	bls.n	5f04 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    5ea0:	ldr	r3, [r0, #28]
    5ea2:	cmp	r1, r3
    5ea4:	bhi.n	5f04 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5ea6:	push	{r4, r5, r6, lr}
    5ea8:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5eaa:	cmp	r3, #32
    5eac:	mov	r6, r2
    5eae:	mov	r5, r0
    5eb0:	mov	r4, r1
    5eb2:	beq.n	5ee6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5eb4:	cmp	r3, #16
    5eb6:	bne.n	5ee0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    5eb8:	ldr	r3, [r0, #24]
    5eba:	ubfx	r1, r1, #8, #8
    5ebe:	add	r1, r3
    5ec0:	movs	r2, #2
    5ec2:	add.w	r0, r0, #564	; 0x234
    5ec6:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    5eca:	cbz	r0, 5ee0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5ecc:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5ece:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5ed2:	ldr	r2, [r5, #28]
    5ed4:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    5ed6:	itte	ls
    5ed8:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    5eda:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    5edc:	movhi	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    5ede:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

 fail:
  return -1;
    5ee0:	mov.w	r0, #4294967295
    5ee4:	pop	{r4, r5, r6, pc}
    5ee6:	ldr	r1, [r0, #24]
    5ee8:	movs	r2, #2
    5eea:	add.w	r1, r1, r4, lsr #7
    5eee:	add.w	r0, r0, #564	; 0x234
    5ef2:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    5ef6:	cmp	r0, #0
    5ef8:	beq.n	5ee0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5efa:	and.w	r1, r4, #127	; 0x7f
    5efe:	ldr.w	r3, [r0, r1, lsl #2]
    5f02:	b.n	5ed2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    5f04:	mov.w	r0, #4294967295
}
    5f08:	bx	lr
    5f0a:	nop

00005f0c <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5f0c:	cmp	r1, #1
    5f0e:	bls.n	5f4c <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5f10:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5f12:	ldr	r3, [r0, #28]
    5f14:	cmp	r1, r3
    5f16:	bhi.n	5f26 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    5f18:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5f1a:	cmp	r3, #32
    5f1c:	mov	r5, r2
    5f1e:	mov	r4, r1
    5f20:	beq.n	5f50 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5f22:	cmp	r3, #16
    5f24:	beq.n	5f2a <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    5f26:	movs	r0, #0
    5f28:	pop	{r3, r4, r5, pc}
    5f2a:	ldr	r3, [r0, #24]
    5f2c:	ubfx	r1, r1, #8, #8
    5f30:	add	r1, r3
    5f32:	add.w	r0, r0, #564	; 0x234
    5f36:	movs	r2, #3
    5f38:	bl	3748 <FsCache::get(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    5f3c:	mov	r3, r0
    5f3e:	cmp	r0, #0
    5f40:	beq.n	5f26 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5f42:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    5f44:	movs	r0, #1
    5f46:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

 fail:
  return false;
}
    5f4a:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    5f4c:	movs	r0, #0
}
    5f4e:	bx	lr
    5f50:	ldr	r1, [r0, #24]
    5f52:	movs	r2, #3
    5f54:	add.w	r0, r0, #564	; 0x234
    5f58:	add.w	r1, r1, r4, lsr #7
    5f5c:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    5f60:	mov	r3, r0
    5f62:	cmp	r0, #0
    5f64:	beq.n	5f26 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5f66:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    5f6a:	movs	r0, #1
    5f6c:	str.w	r5, [r3, r1, lsl #2]
    5f70:	pop	{r3, r4, r5, pc}
    5f72:	nop

00005f74 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5f74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    5f78:	ldr	r4, [r0, #12]
    5f7a:	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5f7c:	sub	sp, #8
    5f7e:	mov	r5, r0
    5f80:	mov	r7, r1
    5f82:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    5f84:	itte	cc
    5f86:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    5f88:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    5f8a:	movcs	r6, #1
    5f8c:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    5f8e:	adds	r4, #1
    if (find > m_lastCluster) {
    5f90:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5f92:	add	r2, sp, #4
    5f94:	mov	r0, r5
    5f96:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    5f98:	bls.n	5fae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    5f9a:	cbnz	r6, 5fec <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    5f9c:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    5f9e:	adds	r4, #1
    if (find > m_lastCluster) {
    5fa0:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    5fa2:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5fa6:	add	r2, sp, #4
    5fa8:	mov	r0, r5
    5faa:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    5fac:	bhi.n	5f9a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    5fae:	cmp	r7, r4
    5fb0:	beq.n	5fec <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5fb2:	bl	5e9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5fb6:	cmp	r0, #0
    5fb8:	blt.n	5fec <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    5fba:	beq.n	5f8c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    5fbc:	ldr	r3, [sp, #4]
    5fbe:	cmp	r3, #0
    5fc0:	bne.n	5f8c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    5fc2:	cbz	r6, 5fc6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    5fc4:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5fc6:	mvn.w	r2, #4026531840	; 0xf0000000
    5fca:	mov	r1, r4
    5fcc:	mov	r0, r5
    5fce:	bl	5f0c <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    5fd2:	mov	r6, r0
    5fd4:	cbz	r0, 5fec <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    5fd6:	cbnz	r7, 5fde <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    5fd8:	str.w	r4, [r8]
  return true;
    5fdc:	b.n	5fee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    5fde:	mov	r1, r7
    5fe0:	mov	r0, r5
    5fe2:	mov	r2, r4
    5fe4:	bl	5f0c <FatPartition::fatPut(unsigned long, unsigned long)>
    5fe8:	cmp	r0, #0
    5fea:	bne.n	5fd8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    5fec:	movs	r6, #0
}
    5fee:	mov	r0, r6
    5ff0:	add	sp, #8
    5ff2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ff6:	nop

00005ff8 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5ff8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    5ffc:	ldr	r4, [r0, #12]

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    5ffe:	ldr	r3, [r0, #28]
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    6000:	adds	r7, r4, #1

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6002:	cmp	r7, r3
 fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    6004:	sub	sp, #8
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6006:	bhi.n	6056 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    6008:	mov	sl, r2
    600a:	mov	r9, r1
    600c:	mov	r6, r0
    600e:	adds	r4, #2
    6010:	mov.w	r8, #1
    6014:	b.n	602a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    6016:	subs	r2, r4, r7
    6018:	mov	r3, r4
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    601a:	cbz	r0, 6040 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x48>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    601c:	cmp	r2, r9
    601e:	beq.n	6060 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x68>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6020:	ldr	r2, [r6, #28]
    6022:	cmp	r3, r2
    6024:	add.w	r4, r4, #1
    6028:	bhi.n	6056 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    602a:	subs	r5, r4, #1
      // Can't find space.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    602c:	mov	r1, r5
    602e:	add	r2, sp, #4
    6030:	mov	r0, r6
    6032:	bl	5e9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6036:	cmp	r0, #0
    6038:	blt.n	6056 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    603a:	ldr	r3, [sp, #4]
    603c:	cmp	r3, #0
    603e:	beq.n	6016 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6040:	ldr	r2, [r6, #28]
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    6042:	mov	r3, r4
      goto fail;
    }
    if (f || fg == 0) {
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    6044:	cmp	r7, r5
    6046:	it	ne
    6048:	movne.w	r8, #0
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    604c:	cmp	r3, r2
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    604e:	mov	r7, r4
    6050:	add.w	r4, r4, #1
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6054:	bls.n	602a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

 fail:
  return false;
    6056:	movs	r4, #0
}
    6058:	mov	r0, r4
    605a:	add	sp, #8
    605c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      break;
    }
    endCluster++;
  }
  // Remember possible next free cluster.
  if (setStart) {
    6060:	cmp.w	r8, #0
    6064:	beq.n	6068 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x70>
    m_allocSearchStart = endCluster;
    6066:	str	r5, [r6, #12]
    6068:	mvn.w	r2, #4026531840	; 0xf0000000
    606c:	mov	r1, r5
    606e:	mov	r0, r6
    6070:	bl	5f0c <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    6074:	mov	r4, r0
    6076:	cmp	r0, #0
    6078:	beq.n	6056 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    607a:	cmp	r7, r5
    607c:	bcc.n	6084 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8c>
    607e:	b.n	609a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    6080:	cmp	r5, r7
    6082:	bls.n	609a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    if (!fatPut(endCluster - 1, endCluster)) {
    6084:	add.w	r8, r5, #4294967295
    6088:	mov	r2, r5
    608a:	mov	r1, r8
    608c:	mov	r0, r6
    608e:	bl	5f0c <FatPartition::fatPut(unsigned long, unsigned long)>
    6092:	mov	r5, r8
    6094:	cmp	r0, #0
    6096:	bne.n	6080 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x88>
    6098:	b.n	6056 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    609a:	str.w	r7, [sl]
  return true;
    609e:	b.n	6058 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x60>

000060a0 <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    60a0:	push	{r4, r5, r6, lr}
    60a2:	mov	r5, r0
    60a4:	sub	sp, #8
    60a6:	mov	r4, r1
    60a8:	b.n	60c0 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    60aa:	bl	5f0c <FatPartition::fatPut(unsigned long, unsigned long)>
    60ae:	cbz	r0, 60d6 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    60b0:	ldr	r3, [r5, #12]
    60b2:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    60b4:	itt	cc
    60b6:	addcc.w	r4, r4, #4294967295
    60ba:	strcc	r4, [r5, #12]
    }
    cluster = next;
    60bc:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    60be:	cbz	r6, 60d8 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    60c0:	add	r2, sp, #4
    60c2:	mov	r1, r4
    60c4:	mov	r0, r5
    60c6:	bl	5e9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    60ca:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    60cc:	mov	r1, r4
    60ce:	mov.w	r2, #0
    60d2:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    60d4:	bge.n	60aa <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

 fail:
  return false;
    60d6:	movs	r0, #0
}
    60d8:	add	sp, #8
    60da:	pop	{r4, r5, r6, pc}

000060dc <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    60dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60e0:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    60e2:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    60e4:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    60e6:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    60ea:	beq.n	60f8 <FatPartition::freeClusterCount()+0x1c>
    60ec:	cmp	r3, #32
    60ee:	beq.n	60f8 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

 fail:
  return -1;
    60f0:	mov.w	r0, #4294967295
    60f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    60f8:	ldr	r5, [r0, #24]
    while (todo) {
    60fa:	cmp.w	r8, #0
    60fe:	beq.n	617e <FatPartition::freeClusterCount()+0xa2>
    6100:	mov	r6, r0
    6102:	add.w	r7, r0, #564	; 0x234
    6106:	movs	r4, #0
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    6108:	mov	r1, r5
    610a:	movs	r2, #2
    610c:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
    610e:	adds	r5, #1
    6110:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
      if (!pc) {
    6114:	cmp	r0, #0
    6116:	beq.n	60f0 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6118:	ldrb	r3, [r6, #7]
    611a:	cmp	r3, #16
    611c:	beq.n	614c <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    611e:	cmp.w	r8, #127	; 0x7f
    6122:	bhi.n	6176 <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    6124:	uxth.w	r1, r8
    6128:	mov	lr, r8
    612a:	subs	r1, #1
    612c:	uxth	r1, r1
    612e:	add.w	r1, r0, r1, lsl #2
    6132:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    6134:	ldr.w	r2, [r3, #4]!
    6138:	cbnz	r2, 613c <FatPartition::freeClusterCount()+0x60>
            free++;
    613a:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    613c:	cmp	r3, r1
    613e:	bne.n	6134 <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6140:	subs.w	r8, r8, lr
    6144:	bne.n	6108 <FatPartition::freeClusterCount()+0x2c>
    6146:	mov	r0, r4
    6148:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    614c:	cmp.w	r8, #255	; 0xff
    6150:	bls.n	6184 <FatPartition::freeClusterCount()+0xa8>
    6152:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6156:	mov	r3, lr
    6158:	subs	r1, r3, #1
    615a:	uxth	r1, r1
    615c:	add.w	r1, r0, r1, lsl #1
    6160:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    6162:	ldrh.w	r2, [r3, #2]!
    6166:	cbnz	r2, 616a <FatPartition::freeClusterCount()+0x8e>
            free++;
    6168:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    616a:	cmp	r1, r3
    616c:	bne.n	6162 <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    616e:	subs.w	r8, r8, lr
    6172:	bne.n	6108 <FatPartition::freeClusterCount()+0x2c>
    6174:	b.n	6146 <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6176:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    617a:	mov	r1, lr
    617c:	b.n	612a <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    617e:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    6180:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    6184:	uxth.w	r3, r8
    6188:	mov	lr, r8
    618a:	b.n	6158 <FatPartition::freeClusterCount()+0x7c>

0000618c <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

 fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    618c:	push	{r3, r4, r5, r6, r7, lr}
    618e:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6190:	movs	r3, #0
  m_allocSearchStart = 1;
    6192:	movs	r5, #1
    6194:	mov.w	r0, #4294967295
    6198:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    619a:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    619c:	str	r1, [r4, #40]	; 0x28
    619e:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    61a2:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    61a4:	strb.w	r3, [r4, #36]	; 0x24
    61a8:	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    61ac:	str	r0, [r4, #48]	; 0x30
    61ae:	str.w	r0, [r4, #576]	; 0x240
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    61b2:	mov	r5, r2
    61b4:	cbz	r2, 61ee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    61b6:	cmp	r2, #4
    61b8:	bls.n	61be <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    61ba:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    61bc:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    61be:	add.w	r6, r4, #36	; 0x24
    61c2:	mov	r2, r3
    61c4:	mov	r1, r3
    61c6:	mov	r0, r6
    61c8:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    61cc:	add.w	r5, r5, #268435456	; 0x10000000
    61d0:	subs	r5, #1
    61d2:	lsls	r5, r5, #4
    61d4:	add.w	r3, r0, #446	; 0x1be
    61d8:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    61da:	cmp	r0, #0
    61dc:	beq.n	61ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    61de:	ldrb	r1, [r2, #4]
    61e0:	cmp	r1, #0
    61e2:	beq.n	61ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    61e4:	ldrb	r3, [r3, r5]
    61e6:	lsls	r3, r3, #25
    61e8:	bne.n	61ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    61ea:	ldr	r5, [r2, #8]
    61ec:	b.n	61f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    61ee:	add.w	r6, r4, #36	; 0x24
    61f2:	mov	r0, r6
    61f4:	movs	r2, #0
    61f6:	mov	r1, r5
    61f8:	bl	3748 <FsCache::get(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    61fc:	cmp	r0, #0
    61fe:	beq.n	61ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6200:	ldrb	r3, [r0, #16]
    6202:	cmp	r3, #2
    6204:	bne.n	61ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6206:	ldrh.w	r3, [r0, #11]
    620a:	cmp.w	r3, #512	; 0x200
    620e:	bne.n	61ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6210:	ldrb	r6, [r0, #13]
    6212:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6214:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6216:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6218:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    621a:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    621c:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    621e:	beq.n	6240 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    6220:	movs	r2, #1
    6222:	mov	r1, r2
    6224:	b.n	6228 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    6226:	mov	r2, r3
    6228:	lsls	r1, r1, #1
    622a:	uxtb	r1, r1
    622c:	adds	r3, r2, #1
    622e:	cmp	r6, r1
    6230:	uxtb	r3, r3
    6232:	beq.n	623e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    6234:	cmp	r3, #9
    6236:	bne.n	6226 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    6238:	strb	r2, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    623a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    623c:	pop	{r3, r4, r5, r6, r7, pc}
    623e:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6240:	ldrh	r6, [r0, #22]
    6242:	str	r6, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6244:	cbnz	r6, 624a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    6246:	ldr	r6, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6248:	str	r6, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    624a:	ldrh	r1, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    624c:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6250:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6252:	add	r1, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6254:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6256:	add.w	r7, r1, r6, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    625a:	addw	r3, r3, #511	; 0x1ff
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    625e:	str	r1, [r4, #24]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6260:	ldrh.w	r1, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6264:	str	r7, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6266:	add.w	r3, r7, r3, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    626a:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    626c:	cbnz	r1, 6270 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    626e:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6270:	subs	r5, r5, r3
    6272:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6274:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6278:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    627c:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    627e:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6280:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6282:	bls.n	62a0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6284:	movw	r3, #65524	; 0xfff4
    6288:	cmp	r2, r3
    628a:	ittet	hi
    628c:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    628e:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    6290:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    6292:	movhi	r3, #32
    6294:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    6296:	str	r6, [r4, #44]	; 0x2c
    6298:	str.w	r6, [r4, #572]	; 0x23c
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    629c:	movs	r0, #1
    629e:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    62a0:	movs	r3, #12
    62a2:	strb	r3, [r4, #7]
    62a4:	b.n	61ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    62a6:	nop

000062a8 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    62a8:	cmp	r1, #4
    62aa:	bls.n	62c6 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    62ac:	cmp	r1, #10
    62ae:	bls.n	62be <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    62b0:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    62b2:	itte	ls
    62b4:	addls.w	r1, r0, r1, lsl #1
    62b8:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    62ba:	movhi	r0, #0
}
    62bc:	bx	lr
    62be:	add.w	r1, r0, r1, lsl #1
    62c2:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    62c4:	bx	lr
    62c6:	add.w	r1, r0, r1, lsl #1
    62ca:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    62ce:	bx	lr

000062d0 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    62d0:	push	{r4}
    62d2:	subs	r2, r0, #1
    62d4:	add.w	r4, r0, #10
  uint8_t sum = 0;
    62d8:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    62da:	ldrb.w	r1, [r2, #1]!
    62de:	lsrs	r3, r0, #1
    62e0:	orr.w	r0, r3, r0, lsl #7
    62e4:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    62e8:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    62ea:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    62ec:	bne.n	62da <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    62ee:	ldr.w	r4, [sp], #4
    62f2:	bx	lr

000062f4 <FatFile::openCluster(FatFile*)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    62f4:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    62f6:	ldr	r3, [r1, #12]
    62f8:	cbz	r3, 6318 <FatFile::openCluster(FatFile*)+0x24>
    62fa:	mov	r5, r0
    62fc:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    62fe:	movs	r2, #36	; 0x24
    6300:	movs	r1, #0
    6302:	bl	c09c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6306:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6308:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    630a:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    630c:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    630e:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6310:	ldr	r3, [r4, #12]
    6312:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    6314:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6316:	pop	{r3, r4, r5, pc}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6318:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    631a:	ldmia.w	sp!, {r3, r4, r5, lr}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    631e:	b.w	5560 <FatFile::openRoot(FatVolume*)>
    6322:	nop

00006324 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    6324:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6328:	sub	sp, #52	; 0x34
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    632a:	ldrb	r3, [r0, #0]
    632c:	movs	r4, #0
    632e:	strb.w	r4, [sp, #12]
    6332:	strb.w	r4, [sp, #13]
    6336:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    633a:	mov	r8, r1
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    633c:	cbz	r3, 6344 <FatFile::getName(char*, unsigned int)+0x20>
    633e:	cmp	r2, #12
    6340:	mov	r9, r2
    6342:	bhi.n	6350 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
    6344:	movs	r0, #0
    6346:	strb.w	r0, [r8]
  return 0;
}
    634a:	add	sp, #52	; 0x34
    634c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    6350:	ldrb	r3, [r0, #3]
    6352:	mov	r7, r0
    6354:	cmp	r3, #0
    6356:	beq.n	63fe <FatFile::getName(char*, unsigned int)+0xda>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    6358:	add	r0, sp, #12
    635a:	mov	r1, r7
    635c:	bl	62f4 <FatFile::openCluster(FatFile*)>
    6360:	cmp	r0, #0
    6362:	beq.n	6344 <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6364:	ldrb	r3, [r7, #3]
    6366:	cmp	r3, #0
    6368:	beq.n	6344 <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    636a:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    636c:	movs	r6, #1
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    636e:	add.w	r5, r9, #4294967295
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6372:	ldrh	r1, [r7, #4]
    6374:	subs	r1, r1, r6
    6376:	lsls	r1, r1, #5
    6378:	add	r0, sp, #12
    637a:	bl	59f8 <FatFile::seekSet(unsigned long)>
    637e:	cmp	r0, #0
    6380:	beq.n	6344 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6382:	movs	r1, #0
    6384:	add	r0, sp, #12
    6386:	bl	5788 <FatFile::readDirCache(bool)>
    if (!ldir) {
    638a:	mov	fp, r0
    638c:	cmp	r0, #0
    638e:	beq.n	6344 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    6390:	ldrb	r3, [r0, #11]
    6392:	cmp	r3, #15
    6394:	bne.n	6344 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    6396:	ldrb	r3, [r0, #0]
    6398:	and.w	r3, r3, #31
    639c:	cmp	r6, r3
    639e:	bne.n	6344 <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    63a0:	subs	r3, r6, #1
    63a2:	add.w	r4, r3, r3, lsl #1
    63a6:	add.w	r4, r3, r4, lsl #2
    63aa:	mov	r3, r4
    63ac:	add.w	sl, r8, r4
    63b0:	add.w	r2, r4, #13
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    63b4:	subs	r1, r3, r4
    63b6:	uxtb	r1, r1
    63b8:	mov	r0, fp
    63ba:	bl	62a8 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= (n - 1)) {
    63be:	cbz	r0, 6408 <FatFile::getName(char*, unsigned int)+0xe4>
    63c0:	cmp	r5, r3
    63c2:	bls.n	6408 <FatFile::getName(char*, unsigned int)+0xe4>
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    63c4:	cmp	r0, #126	; 0x7e
    63c6:	add.w	r3, r3, #1
    63ca:	ite	ls
    63cc:	uxtbls	r0, r0
    63ce:	movhi	r0, #63	; 0x3f
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    63d0:	cmp	r2, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    63d2:	strb.w	r0, [sl], #1
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    63d6:	bne.n	63b4 <FatFile::getName(char*, unsigned int)+0x90>
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  if (k >= n) {  // <<----------added
    k = n - 1;   // <<--------- added
    63d8:	cmp	r9, r2
    63da:	it	ls
    63dc:	movls	r2, r5
  }             // <<---------added
  name[k] = '\0';
    63de:	ldrb.w	r3, [sp, #4]
    63e2:	strb.w	r3, [r8, r2]
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    n = lfnGetName(ldir, name, size);
    if (n == 0) {
    63e6:	cmp	r2, #0
    63e8:	beq.n	6344 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    63ea:	ldrb.w	r3, [fp]
    63ee:	lsls	r3, r3, #25
    63f0:	bmi.n	640c <FatFile::getName(char*, unsigned int)+0xe8>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    63f2:	adds	r6, #1
    63f4:	ldrb	r3, [r7, #3]
    63f6:	uxtb	r6, r6
    63f8:	cmp	r3, r6
    63fa:	bcs.n	6372 <FatFile::getName(char*, unsigned int)+0x4e>
    63fc:	b.n	6344 <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    63fe:	bl	6bcc <FatFile::getSFN(char*)>
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
  return 0;
}
    6402:	add	sp, #52	; 0x34
    6404:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    6408:	mov	r2, r3
    640a:	b.n	63d8 <FatFile::getName(char*, unsigned int)+0xb4>
    640c:	mov	r0, r2
    640e:	b.n	634a <FatFile::getName(char*, unsigned int)+0x26>

00006410 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    6410:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    6414:	ldrb	r3, [r0, #0]
    6416:	cmp	r3, #32
    6418:	bne.n	6422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    641a:	ldrb.w	r3, [r0, #1]!
    641e:	cmp	r3, #32
    6420:	beq.n	641a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    6422:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    6424:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    6426:	cmp	r3, #0
    6428:	beq.w	663a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    642c:	cmp	r3, #47	; 0x2f
    642e:	beq.n	6490 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6430:	cmp	r3, #92	; 0x5c
    6432:	beq.n	647a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6434:	sub.w	r4, r3, #34	; 0x22
    6438:	uxtb	r4, r4
    643a:	cmp	r4, #29
    643c:	bls.n	6480 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    643e:	ldr.w	lr, [pc, #536]	; 6658 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    6442:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6444:	movs	r4, #0
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6446:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6448:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    644c:	mov	r7, r6
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    644e:	beq.n	647a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6450:	cmp	r5, #94	; 0x5e
    6452:	bhi.n	647a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6454:	ldrb.w	r3, [r6], #1
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6458:	sub.w	r5, r3, #34	; 0x22
    645c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    645e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    6460:	cmp	r3, #0
    6462:	beq.w	660c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    6466:	cmp	r3, #47	; 0x2f
    6468:	beq.n	6492 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    646a:	cmp	r3, #92	; 0x5c
    646c:	lsr.w	r7, lr, r5
    6470:	beq.n	647a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6472:	cmp	r5, #29
    6474:	bhi.n	6446 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    6476:	lsls	r7, r7, #31
    6478:	bpl.n	6446 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    647a:	movs	r0, #0
    647c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6480:	ldr	r5, [pc, #468]	; (6658 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    6482:	lsr.w	r4, r5, r4
    6486:	lsls	r4, r4, #31
    6488:	bpl.n	643e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    648a:	movs	r0, #0
    648c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6490:	movs	r4, #0
    6492:	adds	r7, r0, r4
    6494:	mov	r6, r7
    6496:	mov	r5, r4
    6498:	movs	r3, #47	; 0x2f
    649a:	b.n	64a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    649c:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    64a0:	adds	r5, #1
    64a2:	cmp	r3, #32
    64a4:	beq.n	649c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    64a6:	cmp	r3, #47	; 0x2f
    64a8:	beq.n	649c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    64aa:	add	r5, r0
    64ac:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    64ae:	cbz	r4, 64c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    64b0:	mov	r2, r7
    c = path[len - 1];
    64b2:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    64b6:	cmp	r3, #46	; 0x2e
    64b8:	beq.n	64c0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    64ba:	cmp	r3, #32
    64bc:	bne.w	6612 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    64c0:	subs	r4, #1
    64c2:	bne.n	64b2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    64c4:	mov.w	r5, #4294967295
    64c8:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    64ca:	str	r3, [r1, #4]
    64cc:	add.w	r6, r1, #23
    64d0:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    64d4:	movs	r2, #32
    64d6:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    64da:	cmp	r3, r6
    64dc:	bne.n	64d6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    64de:	subs	r6, r0, #1
    64e0:	movs	r2, #0
    64e2:	b.n	64e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    64e4:	adds	r2, #1
    64e6:	ldrb.w	r3, [r6, #1]!
    64ea:	cmp	r3, #46	; 0x2e
    64ec:	beq.n	64e4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    64ee:	cmp	r3, #32
    64f0:	beq.n	64e4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    64f2:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    64f6:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    64f8:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    64fc:	beq.n	6518 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    64fe:	ldrb	r7, [r0, r5]
    6500:	cmp	r7, #46	; 0x2e
    6502:	add.w	r6, r0, r5
    6506:	bne.n	6512 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    6508:	b.n	6518 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    650a:	ldrb.w	r7, [r6, #-1]!
    650e:	cmp	r7, #46	; 0x2e
    6510:	beq.n	6518 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    6512:	adds.w	r5, r5, #4294967295
    6516:	bcs.n	650a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    6518:	cmp	r2, r4
    651a:	mov.w	r9, #0
    651e:	bge.w	6644 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    6522:	mov	r6, r9
    6524:	mov	sl, r9
    6526:	movs	r7, #7
    6528:	mov.w	r8, #8
    652c:	b.n	657a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    652e:	cmp	r3, #46	; 0x2e
    6530:	beq.n	65c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    6532:	cmp	r3, #34	; 0x22
    6534:	beq.n	654e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6536:	cmp	r3, #124	; 0x7c
    6538:	beq.n	654e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    653a:	sub.w	lr, r3, #42	; 0x2a
    653e:	cmp.w	lr, #5
    6542:	bls.n	65d6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6544:	sub.w	lr, r3, #58	; 0x3a
    6548:	cmp.w	lr, #5
    654c:	bhi.n	6600 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    654e:	cmp	r5, r2
    6550:	beq.n	65c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6552:	cmp	r7, r6
    6554:	bcc.n	65aa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6556:	mov.w	ip, #0
      c = '_';
    655a:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    655c:	add.w	lr, r6, #1
    6560:	add.w	fp, r1, r6
    6564:	uxtb.w	r6, lr
      if (i < 7) {
    6568:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    656a:	strb.w	r3, [fp, #13]
      if (i < 7) {
    656e:	bhi.n	6572 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    6570:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6572:	adds	r2, #1
    6574:	cmp	r2, r4
    6576:	bge.n	6588 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    6578:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    657a:	cmp	r3, #32
    657c:	bne.n	652e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    657e:	adds	r2, #1
    6580:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    6582:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6586:	blt.n	6578 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6588:	ldrb	r3, [r1, #13]
    658a:	cmp	r3, #32
    658c:	beq.w	647a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    6590:	cmp.w	ip, #0
    6594:	beq.n	6626 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6596:	tst.w	sl, r9
    659a:	it	ne
    659c:	movne.w	r9, #2
    65a0:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    65a4:	movs	r0, #1
    65a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    65aa:	cmp	r7, #10
    65ac:	beq.n	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    65ae:	cmp	r5, r2
    65b0:	blt.n	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    65b2:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    65b4:	movs	r7, #10
      i = 8;    // Place for extension.
    65b6:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    65b8:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    65bc:	mov.w	ip, #0
    65c0:	b.n	6572 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    65c2:	cmp	r5, r2
    65c4:	bne.n	657e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    65c6:	cmp	r7, #10
    65c8:	beq.n	661e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    65ca:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    65cc:	movs	r7, #10
      i = 8;    // Place for extension.
    65ce:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    65d0:	mov.w	r8, #16
    65d4:	b.n	6572 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    65d6:	cmp	r3, #45	; 0x2d
    65d8:	bne.n	654e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    65da:	sub.w	lr, r3, #33	; 0x21
    65de:	cmp.w	lr, #93	; 0x5d
    65e2:	bhi.n	654e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    65e4:	cmp	r5, r2
    65e6:	beq.n	65c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    65e8:	cmp	r7, r6
    65ea:	bcc.n	65aa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    65ec:	sub.w	lr, r3, #97	; 0x61
    65f0:	cmp.w	lr, #25
    65f4:	bhi.n	6648 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    65f6:	subs	r3, #32
    65f8:	uxtb	r3, r3
        lc |= bit;
    65fa:	orr.w	r9, r8, r9
    65fe:	b.n	655c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    6600:	sub.w	lr, r3, #91	; 0x5b
    6604:	cmp.w	lr, #2
    6608:	bls.n	654e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    660a:	b.n	65da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    660c:	str	r7, [r2, #0]
    660e:	adds	r7, r0, r4
    6610:	b.n	64b0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    6612:	cmp	r4, #255	; 0xff
    6614:	bgt.w	647a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6618:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    661a:	mov	r3, r4
    661c:	b.n	64ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    661e:	ldrb	r3, [r1, #13]
    6620:	cmp	r3, #32
    6622:	beq.w	647a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6626:	ldrb	r3, [r1, #12]
    6628:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    662a:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    662c:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    662e:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6630:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    6632:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    6634:	strb	r2, [r3, #14]
    6636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    663a:	str	r0, [r2, #0]
    663c:	mov	r4, r3
    663e:	mov.w	r5, #4294967295
    6642:	b.n	64ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6644:	mov	sl, r9
    6646:	b.n	6588 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    6648:	sub.w	lr, r3, #65	; 0x41
    664c:	cmp.w	lr, #25
        uc |= bit;
    6650:	it	ls
    6652:	orrls.w	sl, r8, sl
    6656:	b.n	655c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    6658:	.word	0x35000101

0000665c <FatFile::remove()>:

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    665c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    6660:	ldrb	r2, [r0, #2]

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    6662:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    6664:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    6666:	lsls	r2, r2, #30
    6668:	strb.w	r3, [sp, #4]
    666c:	strb.w	r3, [sp, #5]
    6670:	strb.w	r3, [sp, #6]
    6674:	bpl.n	66bc <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    6676:	ldr	r1, [r0, #32]
    6678:	mov	r5, r0
    667a:	cbnz	r1, 66c6 <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    667c:	movs	r1, #1
    667e:	mov	r0, r5
    6680:	bl	51a8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6684:	cbz	r0, 66bc <FatFile::remove()+0x60>
    6686:	subs	r1, r0, #1
    6688:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    668c:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    668e:	lsrs	r2, r4, #1
    6690:	ldrb.w	r6, [r1, #1]!
    6694:	orr.w	r3, r2, r4, lsl #7
    6698:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    669c:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    669e:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    66a0:	bne.n	668e <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    66a2:	mov.w	r8, #229	; 0xe5
    66a6:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    66aa:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    66ac:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    66ae:	add.w	r0, r6, #36	; 0x24
    66b2:	strb	r3, [r5, #0]
  m_flags = 0;
    66b4:	strb	r3, [r5, #2]
    66b6:	bl	37a8 <FsCache::sync()>
    66ba:	cbnz	r0, 66d2 <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    66bc:	movs	r6, #0
}
    66be:	mov	r0, r6
    66c0:	add	sp, #40	; 0x28
    66c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    66c6:	ldr	r0, [r0, #8]
    66c8:	bl	60a0 <FatPartition::freeChain(unsigned long)>
    66cc:	cmp	r0, #0
    66ce:	bne.n	667c <FatFile::remove()+0x20>
    66d0:	b.n	66bc <FatFile::remove()+0x60>
    66d2:	add.w	r0, r6, #564	; 0x234
    66d6:	bl	37a8 <FsCache::sync()>
    66da:	cmp	r0, #0
    66dc:	beq.n	66bc <FatFile::remove()+0x60>
    66de:	ldr	r0, [r6, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    66e0:	ldr	r3, [r0, #0]
    66e2:	ldr	r3, [r3, #24]
    66e4:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    66e6:	mov	r6, r0
    66e8:	cmp	r0, #0
    66ea:	beq.n	66bc <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    66ec:	ldrb	r3, [r5, #3]
    66ee:	cmp	r3, #0
    66f0:	beq.n	66be <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    66f2:	add	r0, sp, #4
    66f4:	mov	r1, r5
    66f6:	bl	62f4 <FatFile::openCluster(FatFile*)>
    66fa:	cmp	r0, #0
    66fc:	beq.n	66bc <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    66fe:	ldrb	r3, [r5, #3]
    6700:	cmp	r3, #0
    6702:	beq.n	66bc <FatFile::remove()+0x60>
    6704:	movs	r7, #1
    6706:	b.n	6748 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6708:	add	r0, sp, #4
    670a:	bl	5788 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    670e:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    6710:	cmp	r0, #0
    6712:	beq.n	66bc <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6714:	ldrb	r2, [r0, #11]
    6716:	cmp	r2, #15
    6718:	bne.n	66bc <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    671a:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    671c:	and.w	r1, r2, #31
    6720:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6722:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6724:	bne.n	66bc <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    6726:	ldrb	r3, [r0, #13]
    6728:	cmp	r3, r4
    672a:	bne.n	66bc <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    672c:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    6730:	ldr	r1, [r5, #8]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6732:	ldrb.w	r3, [r1, #36]	; 0x24
    6736:	orr.w	r3, r3, #1
    673a:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    673e:	lsls	r3, r2, #25
    6740:	bmi.n	675c <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6742:	ldrb	r3, [r5, #3]
    6744:	cmp	r3, r7
    6746:	bcc.n	66bc <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6748:	ldrh	r1, [r5, #4]
    674a:	subs	r1, r1, r7
    674c:	lsls	r1, r1, #5
    674e:	add	r0, sp, #4
    6750:	bl	59f8 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6754:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6756:	cmp	r0, #0
    6758:	bne.n	6708 <FatFile::remove()+0xac>
    675a:	b.n	66bc <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    675c:	ldr	r4, [r5, #8]
    675e:	add.w	r0, r4, #36	; 0x24
    6762:	bl	37a8 <FsCache::sync()>
    6766:	cmp	r0, #0
    6768:	beq.n	66bc <FatFile::remove()+0x60>
    676a:	add.w	r0, r4, #564	; 0x234
    676e:	bl	37a8 <FsCache::sync()>
    6772:	cmp	r0, #0
    6774:	beq.n	66bc <FatFile::remove()+0x60>
    6776:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6778:	ldr	r3, [r0, #0]
    677a:	ldr	r3, [r3, #24]
    677c:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    677e:	cmp	r0, #0
    6780:	beq.n	66bc <FatFile::remove()+0x60>
    6782:	b.n	66be <FatFile::remove()+0x62>

00006784 <FatFile::lfnUniqueSfn(fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6784:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6788:	ldrb	r7, [r1, #12]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    678a:	mov	r6, r1
    678c:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    678e:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6792:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6796:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    679a:	ldr	r0, [r6, #4]
    679c:	ldr	r1, [r6, #8]
    679e:	add.w	r3, r8, r0
    67a2:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    67a4:	cbz	r0, 67b8 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    67a6:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    67a8:	ldrb.w	r2, [r1], #1
    67ac:	add.w	r3, r3, r3, lsl #5
    67b0:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    67b2:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    67b4:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    67b6:	bne.n	67a8 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    67b8:	cmp	r7, #3
    67ba:	it	cs
    67bc:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    67be:	adds	r2, r7, #4
    67c0:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    67c2:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    67c6:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    67c8:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    67ca:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    67cc:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    67ce:	ite	ls
    67d0:	addls	r1, #48	; 0x30
    67d2:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    67d4:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    67d6:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    67da:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    67dc:	bcc.n	67c2 <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    67de:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    67e0:	movs	r1, #0
    67e2:	strb.w	r9, [r3, #13]
    67e6:	mov	r0, r4
    67e8:	bl	59f8 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    67ec:	movs	r1, #1
    67ee:	mov	r0, r4
    67f0:	bl	5788 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    67f4:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    67f6:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    67f8:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    67fa:	cbz	r0, 6828 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    67fc:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6800:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6802:	cmp.w	lr, #0
    6806:	beq.n	6834 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6808:	ldrb	r3, [r3, #11]
    680a:	lsls	r3, r3, #28
    680c:	bmi.n	67ec <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    680e:	bl	bf70 <memcmp>
    6812:	cmp	r0, #0
    6814:	bne.n	67ec <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    6816:	add.w	r8, r8, #1
    681a:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    681e:	cmp.w	r8, #100	; 0x64
    6822:	bne.n	679a <FatFile::lfnUniqueSfn(fname_t*)+0x16>
 fail:
  return false;

 done:
  return true;
}
    6824:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    6828:	ldrb	r0, [r4, #1]
    682a:	clz	r0, r0
    682e:	lsrs	r0, r0, #5
    6830:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

 fail:
  return false;

 done:
  return true;
    6834:	movs	r0, #1
    6836:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    683a:	nop

0000683c <FatFile::open(FatFile*, fname_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    683c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6840:	ldrb	r4, [r1, #0]
    6842:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6846:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6848:	beq.n	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    684a:	ldrb	r4, [r0, #0]
    684c:	cbz	r4, 6856 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    684e:	movs	r0, #0
}
    6850:	add	sp, #52	; 0x34
    6852:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6856:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    6858:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    685c:	lsls	r4, r4, #30
    685e:	bne.n	68e6 <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    6860:	mov.w	r8, #1
    6864:	mov	r6, r1
    6866:	mov	fp, r2
    6868:	str	r0, [sp, #36]	; 0x24
    686a:	movs	r1, #0
    686c:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    686e:	mov	r7, r1
    6870:	str	r3, [sp, #28]
    6872:	bl	59f8 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6876:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    687a:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    687c:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    687e:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6880:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    6882:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6884:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    6886:	movs	r1, #1
    6888:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    688a:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    688c:	bl	5788 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6890:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    6894:	mov	r3, r0
    6896:	cmp	r0, #0
    6898:	beq.w	69b4 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    689c:	ldrb	r2, [r0, #0]
    689e:	cmp	r2, #229	; 0xe5
    68a0:	beq.n	6918 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    68a2:	cmp	r2, #0
    68a4:	beq.n	6918 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    68a6:	cmp	r4, r8
    68a8:	it	cc
    68aa:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    68ac:	cmp	r2, #46	; 0x2e
    68ae:	beq.n	6912 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    68b0:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    68b2:	cmp	r1, #15
    68b4:	beq.n	6934 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    68b6:	and.w	r1, r1, #8
    68ba:	and.w	r2, r1, #255	; 0xff
    68be:	cbnz	r1, 6912 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    68c0:	cmp.w	r9, #0
    68c4:	bne.w	6b88 <FatFile::open(FatFile*, fname_t*, int)+0x34c>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    68c8:	mov	r0, r3
    68ca:	movs	r2, #11
    68cc:	ldr	r1, [sp, #16]
    68ce:	bl	bf70 <memcmp>
    68d2:	cmp	r0, #0
    68d4:	bne.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    68d6:	ldrb.w	r3, [fp]
    68da:	lsls	r0, r3, #31
    68dc:	bpl.w	6bb0 <FatFile::open(FatFile*, fname_t*, int)+0x374>
          goto found;
        }
        fnameFound = true;
    68e0:	movs	r3, #1
    68e2:	str	r3, [sp, #20]
    68e4:	b.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    68e6:	ldr	r5, [pc, #732]	; (6bc4 <FatFile::open(FatFile*, fname_t*, int)+0x388>)
    68e8:	add.w	r4, sl, #12
    68ec:	umull	r4, r8, r5, r4
    68f0:	mov.w	r8, r8, lsr #2
    68f4:	add.w	r8, r8, #1
    68f8:	uxtb.w	r8, r8
    68fc:	b.n	6864 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    68fe:	ldr	r1, [sp, #12]
    6900:	subs	r1, #1
    6902:	uxtb	r1, r1
    6904:	cmp	r2, r1
    6906:	str	r1, [sp, #12]
    6908:	bne.n	6912 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    690a:	ldrb	r2, [r3, #13]
    690c:	ldr	r1, [sp, #24]
    690e:	cmp	r1, r2
    6910:	beq.n	694a <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6912:	mov.w	r9, #0
    6916:	b.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6918:	cmp	r4, #0
    691a:	it	eq
    691c:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    691e:	cmp	r4, r8
        freeFound++;
    6920:	itt	cc
    6922:	addcc	r4, #1
    6924:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6926:	cmp	r2, #0
    6928:	beq.n	69bc <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    692a:	cmp	r2, #229	; 0xe5
    692c:	bne.n	68ac <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    692e:	mov.w	r9, #0
    6932:	b.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    6934:	cmp.w	r9, #0
    6938:	bne.n	68fe <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    693a:	lsls	r5, r2, #25
    693c:	bpl.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    693e:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    6942:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6944:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    6948:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    694a:	ldr	r2, [sp, #12]
    694c:	subs	r2, #1
    694e:	add.w	r5, r2, r2, lsl #1
    6952:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    6956:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6958:	mov	r2, r5
      if (k >= len) {
    695a:	bls.n	6912 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    695c:	add.w	r1, r5, #13
    6960:	str.w	r9, [sp, #32]
    6964:	mov	r9, r1
    6966:	b.n	6990 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6968:	ldr.w	r0, [fp, #8]
    696c:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    696e:	cmp.w	ip, #25
    6972:	it	ls
    6974:	addls	r1, #32
    6976:	sub.w	r0, r2, #65	; 0x41
    697a:	it	ls
    697c:	uxtbls	r1, r1
    697e:	cmp	r0, #25
    6980:	itt	ls
    6982:	addls	r2, #32
    6984:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6986:	cmp	r1, r2
    6988:	bne.n	6912 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    698a:	cmp	lr, r9
    698c:	beq.n	6a14 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    698e:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    6990:	subs	r1, r2, r5
    6992:	uxtb	r1, r1
    6994:	mov	r0, r3
    6996:	bl	62a8 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    699a:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    699c:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    699e:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    69a2:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    69a6:	beq.w	6b7a <FatFile::open(FatFile*, fname_t*, int)+0x33e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    69aa:	cmp	r0, #255	; 0xff
    69ac:	bls.n	6968 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    69ae:	mov.w	r9, #0
    69b2:	b.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    69b4:	ldrb	r3, [r6, #1]
    69b6:	cmp	r3, #0
    69b8:	bne.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    69bc:	ldr	r2, [sp, #28]
    69be:	mov	r3, r2
    69c0:	lsls	r2, r3, #22
    69c2:	bpl.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    69c6:	and.w	r3, r3, #3
    69ca:	subs	r3, #1
    69cc:	cmp	r3, #1
    69ce:	bhi.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    69d2:	cmp	r4, #0
    69d4:	it	eq
    69d6:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    69d8:	cmp	r4, r8
    69da:	bcc.n	69e4 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    69dc:	b.n	6a1a <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    69de:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    69e0:	cmp	r8, r4
    69e2:	bls.n	6a1a <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    69e4:	movs	r1, #0
    69e6:	mov	r0, r6
    69e8:	bl	5788 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    69ec:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    69ee:	cmp	r0, #0
    69f0:	bne.n	69de <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    69f2:	ldrb	r3, [r6, #1]
    69f4:	cbz	r3, 6a00 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    69f6:	b.n	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    69f8:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    69fa:	ldrb	r3, [r3, #4]
    69fc:	cmp	r3, #1
    69fe:	bhi.n	6a1a <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6a00:	cmp	r8, r4
    6a02:	bls.n	6a1a <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6a04:	mov	r0, r6
    6a06:	bl	5110 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    6a0a:	adds	r4, #16
    6a0c:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6a0e:	cmp	r0, #0
    6a10:	bne.n	69f8 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    6a12:	b.n	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6a14:	ldr.w	r9, [sp, #32]
    6a18:	b.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    6a1a:	ldr	r3, [sp, #20]
    6a1c:	cbz	r3, 6a2c <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    6a1e:	mov	r1, fp
    6a20:	mov	r0, r6
    6a22:	bl	6784 <FatFile::lfnUniqueSfn(fname_t*)>
    6a26:	cmp	r0, #0
    6a28:	beq.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    6a2c:	lsls	r1, r7, #5
    6a2e:	mov	r0, r6
    6a30:	bl	59f8 <FatFile::seekSet(unsigned long)>
    6a34:	cmp	r0, #0
    6a36:	beq.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    6a3a:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    6a3e:	ands.w	r9, r8, #255	; 0xff
    6a42:	beq.n	6af8 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a44:	orr.w	r4, r9, #64	; 0x40
    6a48:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6a4a:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    6a4c:	movs	r7, #0
    6a4e:	movs	r1, #0
    6a50:	mov	r0, r6
    6a52:	bl	5788 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6a56:	cmp	r0, #0
    6a58:	beq.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6a5c:	ldr	r2, [r6, #8]
    6a5e:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a62:	cmp	r9, r5
    6a64:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6a68:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a6c:	ite	ne
    6a6e:	movne	r1, r5
    6a70:	moveq	r1, r4
    6a72:	strb.w	r3, [r2, #36]	; 0x24
    6a76:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6a7a:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    6a7e:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a80:	strb	r1, [r0, #0]
    6a82:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    6a86:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6a88:	ldrb.w	r8, [lr, #1]!
    6a8c:	lsrs	r2, r3, #1
    6a8e:	orr.w	r3, r2, r3, lsl #7
    6a92:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6a96:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6a98:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6a9a:	bne.n	6a88 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6a9c:	and.w	r1, r1, #31
    6aa0:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6aa2:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6aa4:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6aa8:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6aac:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6aae:	add.w	r2, r1, r2, lsl #2
    6ab2:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    6ab4:	movs	r3, #0
    6ab6:	b.n	6ad8 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6ab8:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6aba:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6abe:	bls.n	6aea <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6ac0:	cmp	r3, #10
    6ac2:	ite	ls
    6ac4:	strhls	r1, [r0, #0]
    6ac6:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6ac8:	adds	r3, #1
    6aca:	uxtb	r3, r3
    6acc:	cmp	r3, #13
    6ace:	add.w	r2, r2, #1
    6ad2:	add.w	r0, r0, #2
    6ad6:	beq.n	6af0 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6ad8:	cmp	sl, r2
    6ada:	bhi.n	6ab8 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    6adc:	ite	ne
    6ade:	movne.w	r1, #4294967295
    6ae2:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6ae4:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6ae6:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6ae8:	bhi.n	6ac0 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    6aea:	strh.w	r1, [r0, #-3]
    6aee:	b.n	6ac8 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6af0:	subs	r5, #1
    6af2:	ands.w	r5, r5, #255	; 0xff
    6af6:	bne.n	6a4e <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    6af8:	movs	r1, #0
    6afa:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6afc:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    6afe:	bl	5788 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6b02:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    6b06:	mov	r4, r0
    6b08:	cmp	r0, #0
    6b0a:	beq.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    6b0e:	movs	r2, #32
    6b10:	movs	r1, #0
    6b12:	bl	c09c <memset>
  memcpy(dir->name, fname->sfn, 11);
    6b16:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    6b18:	ldr	r2, [pc, #172]	; (6bc8 <FatFile::open(FatFile*, fname_t*, int)+0x38c>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    6b1a:	ldr.w	r1, [r3, #13]!
    6b1e:	ldr	r0, [r3, #4]
    6b20:	str	r0, [r4, #4]
    6b22:	str	r1, [r4, #0]
    6b24:	ldrh	r1, [r3, #8]
    6b26:	ldrb	r3, [r3, #10]
    6b28:	strb	r3, [r4, #10]
    6b2a:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6b2c:	ldrb.w	r3, [fp]

  // Set timestamps.
  if (FsDateTime::callback) {
    6b30:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6b32:	and.w	r3, r3, #24
    6b36:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    6b38:	cmp	r7, #0
    6b3a:	beq.n	6bb8 <FatFile::open(FatFile*, fname_t*, int)+0x37c>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    6b3c:	add.w	r2, sp, #43	; 0x2b
    6b40:	add.w	r1, sp, #46	; 0x2e
    6b44:	add	r0, sp, #44	; 0x2c
    6b46:	blx	r7
    6b48:	ldrh.w	r1, [sp, #44]	; 0x2c
    6b4c:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    6b50:	ldrb.w	r3, [sp, #43]	; 0x2b
    6b54:	strh	r1, [r4, #16]
    6b56:	strh	r2, [r4, #14]
    6b58:	strb	r3, [r4, #13]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6b5a:	ldr	r2, [r6, #8]
    6b5c:	ldrb.w	r3, [r2, #36]	; 0x24
    6b60:	orr.w	r3, r3, #1
    6b64:	strb.w	r3, [r2, #36]	; 0x24

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6b68:	str.w	r9, [sp]
    6b6c:	ldr	r3, [sp, #28]
    6b6e:	ldr	r0, [sp, #36]	; 0x24
    6b70:	mov	r2, r5
    6b72:	mov	r1, r6
    6b74:	bl	5aa8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6b78:	b.n	6850 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6b7a:	cmp	r0, #0
    6b7c:	ldr.w	r9, [sp, #32]
    6b80:	it	ne
    6b82:	movne.w	r9, #0
    6b86:	b.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6b88:	ldr	r1, [sp, #12]
    6b8a:	cmp	r1, #1
    6b8c:	bne.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6b90:	subs	r4, r3, #1
    6b92:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6b94:	ldrb.w	r0, [r4, #1]!
    6b98:	lsrs	r1, r2, #1
    6b9a:	orr.w	r2, r1, r2, lsl #7
    6b9e:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6ba2:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6ba4:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6ba6:	bne.n	6b94 <FatFile::open(FatFile*, fname_t*, int)+0x358>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6ba8:	ldr	r3, [sp, #24]
    6baa:	cmp	r3, r2
    6bac:	bne.w	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6bb0:	ldr	r3, [sp, #28]
    6bb2:	lsls	r1, r3, #20
    6bb4:	bpl.n	6b68 <FatFile::open(FatFile*, fname_t*, int)+0x32c>
    6bb6:	b.n	684e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6bb8:	movw	r3, #21025	; 0x5221
    6bbc:	strh	r3, [r4, #16]
    6bbe:	strh	r3, [r4, #24]
    6bc0:	strh	r3, [r4, #18]
    6bc2:	b.n	6b5a <FatFile::open(FatFile*, fname_t*, int)+0x31e>
    6bc4:	.word	0x4ec4ec4f
    6bc8:	.word	0x20019a10

00006bcc <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name) {
    6bcc:	push	{r3, r4, r5, r6, r7, lr}
    6bce:	ldrb	r3, [r0, #0]
    6bd0:	mov	r5, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t* dir;

  if (!isOpen()) {
    6bd2:	cbz	r3, 6be6 <FatFile::getSFN(char*)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6bd4:	ands.w	r4, r3, #96	; 0x60
    6bd8:	beq.n	6bec <FatFile::getSFN(char*)+0x20>
    name[0] = '/';
    6bda:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    6bdc:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    6bde:	strb	r2, [r1, #0]
    name[1] = '\0';
    6be0:	strb	r3, [r1, #1]
    return 1;
    6be2:	movs	r0, #1
    6be4:	pop	{r3, r4, r5, r6, r7, pc}
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    6be6:	movs	r0, #0
    6be8:	strb	r0, [r5, #0]
  return 0;
}
    6bea:	pop	{r3, r4, r5, r6, r7, pc}
    name[0] = '/';
    name[1] = '\0';
    return 1;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FsCache::CACHE_FOR_READ));
    6bec:	mov	r1, r4
    6bee:	bl	51a8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6bf2:	cmp	r0, #0
    6bf4:	beq.n	6be6 <FatFile::getSFN(char*)+0x1a>
    6bf6:	mov	r1, r4
    6bf8:	mov	r3, r4
    6bfa:	movs	r7, #8
    6bfc:	subs	r4, r0, #1
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    6bfe:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    6c02:	ldrb.w	r2, [r4, #1]!
    6c06:	cmp	r2, #32
    6c08:	beq.n	6c26 <FatFile::getSFN(char*)+0x5a>
      continue;
    }
    if (i == 8) {
    6c0a:	cmp	r1, #8
    6c0c:	beq.n	6c34 <FatFile::getSFN(char*)+0x68>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6c0e:	sub.w	r6, r2, #65	; 0x41
    6c12:	cmp	r6, #25
    6c14:	bhi.n	6c20 <FatFile::getSFN(char*)+0x54>
    6c16:	ldrb	r6, [r0, #12]
    6c18:	tst	r7, r6
      c += 'a' - 'A';
    6c1a:	itt	ne
    6c1c:	addne	r2, #32
    6c1e:	uxtbne	r2, r2
    }
    name[j++] = c;
    6c20:	strb	r2, [r5, r3]
    6c22:	adds	r3, #1
    6c24:	uxtb	r3, r3
    6c26:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    6c28:	cmp	r1, #11
    6c2a:	bne.n	6c02 <FatFile::getSFN(char*)+0x36>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = '\0';
    6c2c:	movs	r2, #0
    6c2e:	strb	r2, [r5, r3]
  return j;
    6c30:	mov	r0, r3
    6c32:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    6c34:	strb.w	lr, [r5, r3]
    6c38:	adds	r3, #1
    6c3a:	uxtb	r3, r3
    6c3c:	ldrb	r2, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    6c3e:	movs	r7, #16
    6c40:	b.n	6c0e <FatFile::getSFN(char*)+0x42>
    6c42:	nop

00006c44 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6c44:	push	{r3, r4, r5, r6, r7, lr}
    6c46:	movs	r5, #0
    6c48:	str	r5, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6c4a:	ldr	r4, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6c4c:	str	r5, [r0, #60]	; 0x3c
    6c4e:	mov	r6, r0
    6c50:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6c52:	cbz	r4, 6c78 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    6c54:	mov	r1, r0
    6c56:	movs	r0, #36	; 0x24
    6c58:	bl	6eb4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    6c5c:	strb	r5, [r0, #0]
    6c5e:	strb	r5, [r0, #1]
    6c60:	strb	r5, [r0, #2]
    6c62:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    6c64:	ldr	r5, [r7, #56]	; 0x38
    6c66:	mov	r4, r0
    6c68:	ldmia	r5!, {r0, r1, r2, r3}
    6c6a:	stmia	r4!, {r0, r1, r2, r3}
    6c6c:	ldmia	r5!, {r0, r1, r2, r3}
    6c6e:	stmia	r4!, {r0, r1, r2, r3}
    6c70:	ldr	r3, [r5, #0]
    6c72:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    6c74:	mov	r0, r6
    6c76:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    6c78:	ldr	r3, [r1, #60]	; 0x3c
    6c7a:	cmp	r3, #0
    6c7c:	beq.n	6c74 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    6c7e:	mov	r1, r0
    6c80:	movs	r0, #56	; 0x38
    6c82:	bl	6eb4 <operator new(unsigned int, unsigned long*)>
    6c86:	strb.w	r4, [r0, #49]	; 0x31
    6c8a:	strb.w	r4, [r0, #50]	; 0x32
    6c8e:	strb.w	r4, [r0, #51]	; 0x33
    6c92:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    6c94:	ldr	r3, [r7, #60]	; 0x3c
    6c96:	mov	r2, r0
    6c98:	add.w	r1, r3, #48	; 0x30
    6c9c:	ldr	r5, [r3, #0]
    6c9e:	ldr	r4, [r3, #4]
    6ca0:	ldr	r0, [r3, #8]
    6ca2:	ldr	r7, [r3, #12]
    6ca4:	str	r7, [r2, #12]
    6ca6:	adds	r3, #16
    6ca8:	cmp	r3, r1
    6caa:	str	r5, [r2, #0]
    6cac:	str	r4, [r2, #4]
    6cae:	str	r0, [r2, #8]
    6cb0:	add.w	r2, r2, #16
    6cb4:	bne.n	6c9c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    6cb6:	ldr	r3, [r3, #0]
    6cb8:	str	r3, [r2, #0]
    6cba:	b.n	6c74 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00006cbc <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6cbc:	push	{r4, lr}
    6cbe:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    6cc0:	ldr	r0, [r0, #56]	; 0x38
    6cc2:	cbz	r0, 6cd0 <FsBaseFile::close()+0x14>
    6cc4:	bl	525c <FatFile::close()>
    6cc8:	cbz	r0, 6cd0 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    6cca:	movs	r3, #0
    6ccc:	str	r3, [r4, #56]	; 0x38
    return true;
    6cce:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    6cd0:	ldr	r0, [r4, #60]	; 0x3c
    6cd2:	cbz	r0, 6ce0 <FsBaseFile::close()+0x24>
    6cd4:	bl	37b8 <ExFatFile::close()>
    6cd8:	cbz	r0, 6ce0 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    6cda:	movs	r3, #0
    6cdc:	str	r3, [r4, #60]	; 0x3c
    6cde:	pop	{r4, pc}
    return true;
  }
  return false;
    6ce0:	movs	r0, #0
}
    6ce2:	pop	{r4, pc}

00006ce4 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    6ce4:	cbz	r1, 6d5a <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    6ce6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cea:	mov	r4, r1
    6cec:	mov	r5, r0
    6cee:	mov	r8, r3
    6cf0:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    6cf2:	bl	6cbc <FsBaseFile::close()>
  if (vol->m_fVol) {
    6cf6:	ldr.w	r6, [r4, #1152]	; 0x480
    6cfa:	cbz	r6, 6d28 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    6cfc:	mov	r1, r5
    6cfe:	movs	r0, #36	; 0x24
    6d00:	bl	6eb4 <operator new(unsigned int, unsigned long*)>
    6d04:	movs	r1, #0
    6d06:	strb	r1, [r0, #0]
    6d08:	strb	r1, [r0, #1]
    6d0a:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6d0c:	ldr.w	r1, [r4, #1152]	; 0x480
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    6d10:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6d12:	mov	r3, r8
    6d14:	mov	r2, r7
    6d16:	bl	5550 <FatFile::open(FatVolume*, char const*, int)>
    6d1a:	cbz	r0, 6d22 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    6d1c:	movs	r0, #1
    6d1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    6d22:	str	r0, [r5, #56]	; 0x38
    6d24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    6d28:	ldr.w	r3, [r4, #1156]	; 0x484
    6d2c:	cbz	r3, 6d5e <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    6d2e:	mov	r1, r5
    6d30:	movs	r0, #56	; 0x38
    6d32:	bl	6eb4 <operator new(unsigned int, unsigned long*)>
    6d36:	strb.w	r6, [r0, #49]	; 0x31
    6d3a:	strb.w	r6, [r0, #50]	; 0x32
    6d3e:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6d42:	ldr.w	r1, [r4, #1156]	; 0x484
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    6d46:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6d48:	mov	r3, r8
    6d4a:	mov	r2, r7
    6d4c:	bl	411c <ExFatFile::open(ExFatVolume*, char const*, int)>
    6d50:	cmp	r0, #0
    6d52:	bne.n	6d1c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    6d54:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    6d56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6d5a:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    6d5c:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6d5e:	movs	r0, #0
    6d60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006d64 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    6d64:	push	{r3, r4, r5, r6, r7, lr}
    6d66:	mov	r5, r1
    6d68:	mov	r7, r2
    6d6a:	mov	r4, r0
  close();
    6d6c:	bl	6cbc <FsBaseFile::close()>
  if (dir->m_fFile) {
    6d70:	ldr	r6, [r5, #56]	; 0x38
    6d72:	cbz	r6, 6d98 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    6d74:	mov	r1, r4
    6d76:	movs	r0, #36	; 0x24
    6d78:	bl	6eb4 <operator new(unsigned int, unsigned long*)>
    6d7c:	movs	r2, #0
    6d7e:	strb	r2, [r0, #0]
    6d80:	strb	r2, [r0, #1]
    6d82:	strb	r2, [r0, #2]
    6d84:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    6d86:	mov	r2, r7
    6d88:	ldr	r1, [r5, #56]	; 0x38
    6d8a:	bl	5b80 <FatFile::openNext(FatFile*, int)>
    6d8e:	cbz	r0, 6d94 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    6d90:	movs	r0, #1
    6d92:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    6d94:	str	r0, [r4, #56]	; 0x38
    6d96:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    6d98:	ldr	r0, [r5, #60]	; 0x3c
    6d9a:	cbz	r0, 6dc0 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    6d9c:	mov	r1, r4
    6d9e:	movs	r0, #56	; 0x38
    6da0:	bl	6eb4 <operator new(unsigned int, unsigned long*)>
    6da4:	strb.w	r6, [r0, #49]	; 0x31
    6da8:	strb.w	r6, [r0, #50]	; 0x32
    6dac:	strb.w	r6, [r0, #51]	; 0x33
    6db0:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    6db2:	mov	r2, r7
    6db4:	ldr	r1, [r5, #60]	; 0x3c
    6db6:	bl	412c <ExFatFile::openNext(ExFatFile*, int)>
    6dba:	cmp	r0, #0
    6dbc:	bne.n	6d90 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    6dbe:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    6dc0:	pop	{r3, r4, r5, r6, r7, pc}
    6dc2:	nop

00006dc4 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6dc4:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6dc6:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6dc8:	mov	r4, r0
  m_blockDev = blockDev;
    6dca:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    6dce:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    6dd2:	mov	r1, r0
    6dd4:	mov.w	r0, #1152	; 0x480
    6dd8:	bl	6eb4 <operator new(unsigned int, unsigned long*)>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    6ddc:	strb.w	r6, [r0, #1092]	; 0x444
    6de0:	strb.w	r6, [r0, #1145]	; 0x479
    6de4:	strb.w	r6, [r0, #1146]	; 0x47a
    6de8:	strb.w	r6, [r0, #1147]	; 0x47b
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6dec:	movs	r2, #1
    6dee:	ldr.w	r1, [r4, #1160]	; 0x488
    6df2:	str.w	r0, [r4, #1156]	; 0x484
    6df6:	mov	r5, r0
    6df8:	bl	451c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    6dfc:	cbnz	r0, 6e3a <FsVolume::begin(BlockDeviceInterface*)+0x76>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6dfe:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6e00:	mov	r1, r4
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6e02:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    6e06:	mov.w	r0, #1128	; 0x468
    6e0a:	bl	6eb4 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    6e0e:	strb	r6, [r0, #7]
    6e10:	strb.w	r6, [r0, #1092]	; 0x444
    6e14:	strb.w	r6, [r0, #1093]	; 0x445
    6e18:	strb.w	r6, [r0, #1094]	; 0x446
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6e1c:	movs	r2, #1
    6e1e:	ldr.w	r1, [r4, #1160]	; 0x488
    6e22:	str.w	r0, [r4, #1152]	; 0x480
    6e26:	mov	r5, r0
    6e28:	bl	618c <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6e2c:	cbnz	r0, 6e5e <FsVolume::begin(BlockDeviceInterface*)+0x9a>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    6e2e:	ldr	r3, [pc, #80]	; (6e80 <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
    6e30:	movs	r0, #0
    6e32:	str	r0, [r3, #0]
  m_fVol = nullptr;
    6e34:	str.w	r0, [r4, #1152]	; 0x480
  return false;

 done:
  m_cwv = this;
  return true;
}
    6e38:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6e3a:	add.w	r6, r5, #1096	; 0x448
    6e3e:	mov	r0, r6
    6e40:	bl	37b8 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    6e44:	mov	r1, r5
    6e46:	mov	r0, r6
    6e48:	bl	387c <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6e4c:	cmp	r0, #0
    6e4e:	beq.n	6dfe <FsVolume::begin(BlockDeviceInterface*)+0x3a>
      return false;
    }
    if (setCwv || !m_cwv) {
    6e50:	ldr	r3, [pc, #48]	; (6e84 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    6e52:	ldr	r2, [r3, #0]
    6e54:	cbz	r2, 6e7c <FsVolume::begin(BlockDeviceInterface*)+0xb8>
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6e56:	ldr	r3, [pc, #40]	; (6e80 <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
  return true;
    6e58:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6e5a:	str	r4, [r3, #0]
  return true;
    6e5c:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6e5e:	addw	r6, r5, #1092	; 0x444
    6e62:	mov	r0, r6
    6e64:	bl	525c <FatFile::close()>
    return m_vwd.openRoot(this);
    6e68:	mov	r1, r5
    6e6a:	mov	r0, r6
    6e6c:	bl	5560 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6e70:	cmp	r0, #0
    6e72:	beq.n	6e2e <FsVolume::begin(BlockDeviceInterface*)+0x6a>
      return false;
    }
    if (setCwv || !m_cwv) {
    6e74:	ldr	r3, [pc, #16]	; (6e88 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
    6e76:	ldr	r2, [r3, #0]
    6e78:	cmp	r2, #0
    6e7a:	bne.n	6e56 <FsVolume::begin(BlockDeviceInterface*)+0x92>
      m_cwv = this;
    6e7c:	str	r5, [r3, #0]
    6e7e:	b.n	6e56 <FsVolume::begin(BlockDeviceInterface*)+0x92>
    6e80:	.word	0x20019a1c
    6e84:	.word	0x20019a14
    6e88:	.word	0x20019a18

00006e8c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    6e8c:	push	{r3, r4, r5, r6, r7, lr}
    6e8e:	movs	r5, #0
    6e90:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6e94:	ldr	r6, [pc, #24]	; (6eb0 <FsVolume::open(char const*, int)+0x24>)
    6e96:	str	r7, [r0, #8]
    6e98:	mov	r4, r0
    6e9a:	strb	r5, [r0, #4]
    6e9c:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    6e9e:	str	r5, [r0, #72]	; 0x48
    6ea0:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6ea2:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    6ea6:	bl	6ce4 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    6eaa:	mov	r0, r4
    6eac:	pop	{r3, r4, r5, r6, r7, pc}
    6eae:	nop
    6eb0:	.word	0x00012ce8

00006eb4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    6eb4:	mov	r0, r1
    6eb6:	bx	lr

00006eb8 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6eb8:	ldrb	r0, [r0, #19]
    6eba:	bx	lr

00006ebc <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6ebc:	ldrb	r0, [r0, #21]
    6ebe:	bx	lr

00006ec0 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    6ec0:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6ec2:	ldr	r4, [r0, #0]
    6ec4:	ldr	r4, [r4, #16]
    6ec6:	movs	r3, #1
    6ec8:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    6eca:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6ece:	bx	ip

00006ed0 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6ed0:	ldrb	r0, [r0, #22]
    6ed2:	bx	lr

00006ed4 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6ed4:	bx	lr
    6ed6:	nop

00006ed8 <SdSpiCard::~SdSpiCard()>:
    6ed8:	push	{r4, lr}
    6eda:	movs	r1, #24
    6edc:	mov	r4, r0
    6ede:	bl	aa54 <operator delete(void*, unsigned int)>
    6ee2:	mov	r0, r4
    6ee4:	pop	{r4, pc}
    6ee6:	nop

00006ee8 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    6ee8:	push	{r4, lr}
    6eea:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    6eec:	adds	r0, #4
    6eee:	bl	86f8 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    6ef2:	ldrb	r0, [r4, #18]
    6ef4:	movs	r1, #0
    6ef6:	bl	8878 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6efa:	movs	r3, #1
    6efc:	strb	r3, [r4, #20]
    6efe:	pop	{r4, pc}

00006f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    6f00:	push	{r3, r4, r5, lr}
    6f02:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6f04:	movs	r1, #1
    6f06:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6f08:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6f0a:	bl	8878 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6f0e:	mov	r0, r5
    6f10:	movs	r1, #255	; 0xff
    6f12:	bl	880c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    6f16:	mov	r0, r5
    6f18:	bl	8788 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6f1c:	movs	r3, #0
    6f1e:	strb	r3, [r4, #20]
    6f20:	pop	{r3, r4, r5, pc}
    6f22:	nop

00006f24 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6f24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f28:	mov	r6, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6f2a:	ldrb	r1, [r0, #16]
    6f2c:	cmp	r1, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6f2e:	mov	r5, r0
    6f30:	mov	r4, r2
    6f32:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6f34:	beq.n	6f7a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    if (!writeStart(sector)) {
    6f36:	ldr	r3, [r5, #0]
    6f38:	mov	r1, r6
    6f3a:	ldr	r3, [r3, #72]	; 0x48
    6f3c:	mov	r0, r5
    6f3e:	blx	r3
    6f40:	cbz	r0, 6f66 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    6f42:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    6f44:	str	r6, [r5, #12]
    m_curState = WRITE_STATE;
    6f46:	strb	r3, [r5, #16]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6f48:	movs	r6, #0
    6f4a:	cbnz	r7, 6f52 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    6f4c:	b.n	6f82 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    6f4e:	cmp	r7, r6
    6f50:	beq.n	6f82 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    if (!writeData(src)) {
    6f52:	ldr	r3, [r5, #0]
    6f54:	mov	r1, r4
    6f56:	ldr	r3, [r3, #68]	; 0x44
    6f58:	mov	r0, r5
    6f5a:	blx	r3
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6f5c:	adds	r6, #1
    6f5e:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    6f62:	cmp	r0, #0
    6f64:	bne.n	6f4e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f66:	ldrb	r0, [r5, #20]
    6f68:	cbnz	r0, 6f6e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    6f6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f6e:	mov	r0, r5
    6f70:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
    6f74:	movs	r0, #0
}
    6f76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6f7a:	ldr	r3, [r0, #12]
    6f7c:	cmp	r3, r6
    6f7e:	bne.n	6f36 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    6f80:	b.n	6f48 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    6f82:	ldr	r3, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    6f84:	ldrb	r2, [r5, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    6f86:	add	r7, r3
    6f88:	str	r7, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    6f8a:	cbnz	r2, 6f92 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6e>
    6f8c:	movs	r0, #1
    6f8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f92:	ldr	r3, [r5, #0]
    6f94:	mov	r0, r5
    6f96:	ldr	r3, [r3, #24]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    6f98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6f9c:	bx	r3
    6f9e:	nop

00006fa0 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6fa0:	push	{r3, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    6fa2:	ldrb	r3, [r0, #16]
    6fa4:	cmp	r3, #1
    6fa6:	beq.n	6fea <SdSpiCard::isBusy()+0x4a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
  bool spiActive = m_spiActive;
    6fa8:	ldrb	r7, [r0, #20]
    6faa:	mov	r5, r0
  if (!spiActive) {
    6fac:	cbz	r7, 6fda <SdSpiCard::isBusy()+0x3a>
    6fae:	adds	r6, r5, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6fb0:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6fb2:	mov	r0, r6
    6fb4:	bl	87d0 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    6fb8:	cmp	r0, #255	; 0xff
    6fba:	add.w	r3, r4, #4294967295
    6fbe:	beq.n	6fd2 <SdSpiCard::isBusy()+0x32>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    6fc0:	ands.w	r4, r3, #255	; 0xff
    6fc4:	bne.n	6fb2 <SdSpiCard::isBusy()+0x12>
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
    6fc6:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    6fc8:	cbnz	r7, 6fce <SdSpiCard::isBusy()+0x2e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6fca:	ldrb	r3, [r5, #20]
    6fcc:	cbnz	r3, 6fe0 <SdSpiCard::isBusy()+0x40>
    }
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    6fce:	mov	r0, r4
}
    6fd0:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    6fd2:	movs	r4, #0
      break;
    }
  }
  if (!spiActive) {
    6fd4:	cmp	r7, #0
    6fd6:	beq.n	6fca <SdSpiCard::isBusy()+0x2a>
    6fd8:	b.n	6fce <SdSpiCard::isBusy()+0x2e>
    6fda:	bl	6ee8 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    6fde:	b.n	6fae <SdSpiCard::isBusy()+0xe>
    6fe0:	mov	r0, r5
    6fe2:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    spiStop();
  }
  return rtn;
    6fe6:	mov	r0, r4
    6fe8:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    6fea:	movs	r0, #0
    6fec:	pop	{r3, r4, r5, r6, r7, pc}
    6fee:	nop

00006ff0 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    6ff0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ff4:	ldr	r6, [pc, #116]	; (706c <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    6ff6:	sub	sp, #12
    6ff8:	ldr	r3, [r6, #0]
    6ffa:	str	r3, [sp, #0]
	return ret;
    6ffc:	ldr	r5, [sp, #0]
    6ffe:	mov	r4, r0
    7000:	mov	r8, r1
    7002:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7004:	uxth	r5, r5
    7006:	adds	r7, r0, #4
    7008:	b.n	701a <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    700a:	ldr	r3, [r6, #0]
    700c:	str	r3, [sp, #4]
	return ret;
    700e:	ldr	r3, [sp, #4]
    7010:	uxth	r3, r3
    7012:	subs	r3, r3, r5
    7014:	cmp.w	r3, #300	; 0x12c
    7018:	bgt.n	7040 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    701a:	mov	r0, r7
    701c:	bl	87d0 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7020:	cmp	r0, #255	; 0xff
    7022:	strb	r0, [r4, #21]
    7024:	beq.n	700a <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    7026:	cmp	r0, #254	; 0xfe
    7028:	beq.n	7046 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    702a:	movs	r3, #24
    702c:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    702e:	ldrb	r0, [r4, #20]
    7030:	cbz	r0, 703a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7032:	mov	r0, r4
    7034:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    7038:	movs	r0, #0
}
    703a:	add	sp, #12
    703c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7040:	movs	r3, #29
    7042:	strb	r3, [r4, #19]
    7044:	b.n	702e <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    7046:	mov	r2, r9
    7048:	mov	r1, r8
    704a:	mov	r0, r7
    704c:	bl	87ec <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    7050:	strb	r0, [r4, #21]
    7052:	cbz	r0, 705a <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7054:	movs	r3, #37	; 0x25
    7056:	strb	r3, [r4, #19]
    7058:	b.n	702e <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    705a:	mov	r0, r7
    705c:	bl	87d0 <SdSpiArduinoDriver::receive()>
    7060:	mov	r0, r7
    7062:	bl	87d0 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    7066:	movs	r0, #1
    7068:	b.n	703a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    706a:	nop
    706c:	.word	0x20019a84

00007070 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    7070:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7072:	ldr	r5, [pc, #52]	; (70a8 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    7074:	sub	sp, #12
    7076:	ldr	r3, [r5, #0]
    7078:	str	r3, [sp, #0]
	return ret;
    707a:	ldr	r4, [sp, #0]
    707c:	mov	r7, r1
    707e:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7080:	uxth	r4, r4
    7082:	b.n	7092 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7084:	ldr	r3, [r5, #0]
    7086:	str	r3, [sp, #4]
	return ret;
    7088:	ldr	r3, [sp, #4]
    708a:	uxth	r3, r3
    708c:	subs	r3, r3, r4
    708e:	cmp	r3, r7
    7090:	bgt.n	70a2 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    7092:	mov	r0, r6
    7094:	bl	87d0 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7098:	cmp	r0, #255	; 0xff
    709a:	bne.n	7084 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    709c:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    709e:	add	sp, #12
    70a0:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    70a2:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    70a4:	add	sp, #12
    70a6:	pop	{r4, r5, r6, r7, pc}
    70a8:	.word	0x20019a84

000070ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    70ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70b0:	sub	sp, #8
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    70b2:	ldrb	r3, [r0, #16]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    70b4:	str	r2, [sp, #4]
    70b6:	mov	r4, r0
    70b8:	mov	r7, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    70ba:	cbnz	r3, 711c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
    return 0XFF;
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    70bc:	ldrb	r3, [r4, #20]
    70be:	cmp	r3, #0
    70c0:	beq.n	713a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    70c2:	cmp	r7, #0
    70c4:	bne.n	712e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x82>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    70c6:	adds	r5, r4, #4
    70c8:	mov	r0, r5
    70ca:	orr.w	r1, r7, #64	; 0x40
    70ce:	bl	880c <SdSpiArduinoDriver::send(unsigned char)>
    70d2:	add.w	r8, sp, #4
    70d6:	add	r6, sp, #8
    70d8:	ldrb.w	r1, [r6, #-1]!
    70dc:	mov	r0, r5
    70de:	bl	880c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    70e2:	cmp	r8, r6
    70e4:	bne.n	70d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    70e6:	cmp	r7, #0
    70e8:	ite	eq
    70ea:	moveq	r1, #149	; 0x95
    70ec:	movne	r1, #135	; 0x87
    70ee:	mov	r0, r5
    70f0:	bl	880c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    70f4:	mov	r0, r5
    70f6:	bl	87d0 <SdSpiArduinoDriver::receive()>
    70fa:	movs	r6, #11
    70fc:	mov	r0, r5
    70fe:	bl	87d0 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7102:	lsls	r3, r0, #24
    7104:	strb	r0, [r4, #21]
    7106:	bmi.n	710e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    7108:	add	sp, #8
    710a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    710e:	subs	r3, r6, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7110:	ands.w	r6, r3, #255	; 0xff
    7114:	bne.n	70fc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    7116:	add	sp, #8
    7118:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    711c:	ldr	r3, [r0, #0]
    711e:	ldr	r3, [r3, #24]
    7120:	blx	r3
    7122:	cmp	r0, #0
    7124:	bne.n	70bc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x10>
    return 0XFF;
    7126:	movs	r0, #255	; 0xff

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
  }
  return m_status;
}
    7128:	add	sp, #8
    712a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    712e:	mov.w	r1, #300	; 0x12c
    7132:	mov	r0, r4
    7134:	bl	7070 <SdSpiCard::waitNotBusy(unsigned short)>
    7138:	b.n	70c6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    713a:	mov	r0, r4
    713c:	bl	6ee8 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    7140:	b.n	70c2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    7142:	nop

00007144 <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7144:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    7146:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7148:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    714a:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    714c:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    714e:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7152:	cbnz	r0, 7170 <SdSpiCard::readOCR(unsigned long*)+0x2c>
    7154:	adds	r7, r6, #4
    7156:	adds	r4, r5, #4
    7158:	mov	r0, r7
    715a:	bl	87d0 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    715e:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    7162:	cmp	r5, r4
    7164:	bne.n	7158 <SdSpiCard::readOCR(unsigned long*)+0x14>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7166:	ldrb	r4, [r6, #20]
    7168:	cbnz	r4, 7186 <SdSpiCard::readOCR(unsigned long*)+0x42>
    716a:	movs	r4, #1
  return true;

 fail:
  spiStop();
  return false;
}
    716c:	mov	r0, r4
    716e:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7170:	ldrb	r4, [r6, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7172:	movs	r3, #18
    7174:	strb	r3, [r6, #19]
    7176:	cmp	r4, #0
    7178:	beq.n	716c <SdSpiCard::readOCR(unsigned long*)+0x28>
    717a:	mov	r0, r6
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    717c:	movs	r4, #0
    717e:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    7182:	mov	r0, r4
    7184:	pop	{r3, r4, r5, r6, r7, pc}
    7186:	mov	r0, r6
    7188:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    718c:	mov	r0, r4
    718e:	pop	{r3, r4, r5, r6, r7, pc}

00007190 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    7190:	push	{r3, r4, r5, lr}
    7192:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    7194:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    7196:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    7198:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    719c:	cbz	r0, 71b0 <SdSpiCard::readRegister(unsigned char, void*)+0x20>
    719e:	movs	r3, #27
    71a0:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    71a2:	ldrb	r0, [r4, #20]
    71a4:	cbz	r0, 71ae <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    71a6:	mov	r0, r4
    71a8:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    71ac:	movs	r0, #0
}
    71ae:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    71b0:	mov	r1, r5
    71b2:	movs	r2, #16
    71b4:	mov	r0, r4
    71b6:	bl	6ff0 <SdSpiCard::readData(unsigned char*, unsigned int)>
    71ba:	cmp	r0, #0
    71bc:	beq.n	71a2 <SdSpiCard::readRegister(unsigned char, void*)+0x12>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    71be:	ldrb	r5, [r4, #20]
    71c0:	cmp	r5, #0
    71c2:	beq.n	71ae <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    71c4:	mov	r0, r4
    71c6:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    71ca:	mov	r0, r5
    71cc:	pop	{r3, r4, r5, pc}
    71ce:	nop

000071d0 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    71d0:	mov	r2, r1
    71d2:	movs	r1, #9
    71d4:	b.w	7190 <SdSpiCard::readRegister(unsigned char, void*)>

000071d8 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    71d8:	mov	r2, r1
    71da:	movs	r1, #10
    71dc:	b.w	7190 <SdSpiCard::readRegister(unsigned char, void*)>

000071e0 <SdSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    71e0:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    71e2:	ldr	r3, [r0, #0]
    71e4:	ldr	r2, [pc, #140]	; (7274 <SdSpiCard::sectorCount()+0x94>)
    71e6:	ldr	r3, [r3, #52]	; 0x34
    71e8:	cmp	r3, r2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    71ea:	sub	sp, #20
    71ec:	bne.n	724e <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    71ee:	mov	r2, sp
    71f0:	movs	r1, #9
    71f2:	bl	7190 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    71f6:	cbz	r0, 7208 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    71f8:	ldrb.w	r3, [sp]
    71fc:	ands.w	r3, r3, #192	; 0xc0
    7200:	beq.n	720c <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7202:	cmp	r3, #64	; 0x40
    7204:	beq.n	7254 <SdSpiCard::sectorCount()+0x74>
    7206:	movs	r0, #0
}
    7208:	add	sp, #20
    720a:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    720c:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7210:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7214:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7218:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    721c:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7220:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7224:	and.w	r4, r4, #3
    7228:	lsls	r4, r4, #1
    722a:	lsls	r2, r2, #2
    722c:	and.w	r3, r3, #3
    7230:	orr.w	r0, r4, r0, lsr #7
    7234:	and.w	r1, r1, #15
    7238:	orr.w	r3, r2, r3, lsl #10
    723c:	add	r0, r1
    723e:	orr.w	r3, r3, r5, lsr #6
    7242:	adds	r3, #1
    7244:	subs	r0, #7
    7246:	lsl.w	r0, r3, r0
    724a:	add	sp, #20
    724c:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    724e:	mov	r1, sp
    7250:	blx	r3
    7252:	b.n	71f6 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7254:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7258:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    725c:	ldrb.w	r0, [sp, #8]
    7260:	adds	r2, r3, #1
    7262:	and.w	r3, r1, #63	; 0x3f
    7266:	add.w	r3, r2, r3, lsl #16
    726a:	add.w	r0, r3, r0, lsl #8
    726e:	lsls	r0, r0, #10
}
    7270:	add	sp, #20
    7272:	pop	{r4, r5, pc}
    7274:	.word	0x000071d1

00007278 <SdSpiCard::readStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    7278:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    727a:	ldr	r3, [r0, #0]
    727c:	ldr	r5, [pc, #68]	; (72c4 <SdSpiCard::readStart(unsigned long)+0x4c>)
    727e:	ldr	r3, [r3, #64]	; 0x40
    7280:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    7282:	sub	sp, #12
    7284:	mov	r4, r0
    7286:	mov	r2, r1
    7288:	bne.n	72ba <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    728a:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    728c:	cmp	r0, #3
    sector <<= 9;
    728e:	it	ne
    7290:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    7292:	movs	r1, #18
    7294:	mov	r0, r4
    7296:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    729a:	cbz	r0, 72b4 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    729c:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    729e:	movs	r3, #12
    72a0:	strb	r3, [r4, #19]
    72a2:	cbnz	r0, 72a8 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    72a4:	add	sp, #12
    72a6:	pop	{r4, r5, pc}
    72a8:	mov	r0, r4
    72aa:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    72ae:	movs	r0, #0
    72b0:	add	sp, #12
    72b2:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    72b4:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    72b6:	add	sp, #12
    72b8:	pop	{r4, r5, pc}
    72ba:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    72bc:	blx	r3
    72be:	ldr	r2, [sp, #4]
    72c0:	b.n	728c <SdSpiCard::readStart(unsigned long)+0x14>
    72c2:	nop
    72c4:	.word	0x00006ed1

000072c8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    72c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72cc:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    72ce:	ldrb	r1, [r0, #16]
    72d0:	cmp	r1, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    72d2:	mov	r6, r0
    72d4:	mov	r4, r2
    72d6:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    72d8:	beq.n	7310 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    if (!readStart(sector)) {
    72da:	mov	r1, r5
    72dc:	mov	r0, r6
    72de:	bl	7278 <SdSpiCard::readStart(unsigned long)>
    72e2:	cbz	r0, 730a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    72e4:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    72e6:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    72e8:	strb	r3, [r6, #16]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    72ea:	movs	r5, #0
    72ec:	cbnz	r7, 72f4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    72ee:	b.n	7318 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    72f0:	cmp	r7, r5
    72f2:	beq.n	7318 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    if (!readData(dst, 512)) {
    72f4:	mov	r1, r4
    72f6:	mov.w	r2, #512	; 0x200
    72fa:	mov	r0, r6
    72fc:	bl	6ff0 <SdSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7300:	adds	r5, #1
    7302:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    7306:	cmp	r0, #0
    7308:	bne.n	72f0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    730a:	movs	r0, #0
    730c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7310:	ldr	r3, [r0, #12]
    7312:	cmp	r3, r5
    7314:	bne.n	72da <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    7316:	b.n	72ea <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    7318:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    731a:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    731c:	add	r7, r3
    731e:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    7320:	cbnz	r2, 7328 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x60>
    7322:	movs	r0, #1
    7324:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7328:	ldr	r3, [r6, #0]
    732a:	mov	r0, r6
    732c:	ldr	r3, [r3, #24]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    732e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7332:	bx	r3

00007334 <SdSpiCard::readStop()>:
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7334:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    7336:	movs	r2, #0
    7338:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    733a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    733c:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7340:	ldrb	r4, [r5, #20]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7342:	cbz	r0, 734e <SdSpiCard::readStop()+0x1a>
    7344:	movs	r3, #9
    7346:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7348:	cbnz	r4, 7360 <SdSpiCard::readStop()+0x2c>
  return true;

 fail:
  spiStop();
  return false;
}
    734a:	mov	r0, r4
    734c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    734e:	cbnz	r4, 7356 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    7350:	movs	r4, #1

 fail:
  spiStop();
  return false;
}
    7352:	mov	r0, r4
    7354:	pop	{r3, r4, r5, pc}
    7356:	mov	r0, r5
    7358:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    735c:	mov	r0, r4
    735e:	pop	{r3, r4, r5, pc}
    7360:	mov	r0, r5
    7362:	movs	r4, #0
    7364:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    7368:	mov	r0, r4
    736a:	pop	{r3, r4, r5, pc}

0000736c <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    736c:	ldrb	r2, [r0, #16]
  m_curState = IDLE_STATE;
    736e:	movs	r1, #0
  if (state == WRITE_STATE) {
    7370:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    7372:	strb	r1, [r0, #16]
  if (state == WRITE_STATE) {
    7374:	beq.n	7382 <SdSpiCard::syncDevice()+0x16>
    return writeStop();
  }
  if (state == READ_STATE) {
    7376:	cmp	r2, #1
    7378:	beq.n	737e <SdSpiCard::syncDevice()+0x12>
    return readStop();
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    737a:	movs	r0, #1
    737c:	bx	lr
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
  }
  if (state == READ_STATE) {
    return readStop();
    737e:	b.w	7334 <SdSpiCard::readStop()>
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
    7382:	ldr	r3, [r0, #0]
    7384:	ldr	r3, [r3, #76]	; 0x4c
    7386:	bx	r3

00007388 <SdSpiCard::writeStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7388:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    738a:	ldr	r3, [r0, #0]
    738c:	ldr	r5, [pc, #68]	; (73d4 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    738e:	ldr	r3, [r3, #64]	; 0x40
    7390:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7392:	sub	sp, #12
    7394:	mov	r4, r0
    7396:	mov	r2, r1
    7398:	bne.n	73ca <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    739a:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    739c:	cmp	r0, #3
    sector <<= 9;
    739e:	it	ne
    73a0:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    73a2:	movs	r1, #25
    73a4:	mov	r0, r4
    73a6:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    73aa:	cbz	r0, 73c4 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    73ac:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73ae:	movs	r3, #14
    73b0:	strb	r3, [r4, #19]
    73b2:	cbnz	r0, 73b8 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    73b4:	add	sp, #12
    73b6:	pop	{r4, r5, pc}
    73b8:	mov	r0, r4
    73ba:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    73be:	movs	r0, #0
    73c0:	add	sp, #12
    73c2:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    73c4:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    73c6:	add	sp, #12
    73c8:	pop	{r4, r5, pc}
    73ca:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    73cc:	blx	r3
    73ce:	ldr	r2, [sp, #4]
    73d0:	b.n	739c <SdSpiCard::writeStart(unsigned long)+0x14>
    73d2:	nop
    73d4:	.word	0x00006ed1

000073d8 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    73d8:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    73da:	ldr	r3, [r0, #0]
    73dc:	ldr	r7, [pc, #172]	; (748c <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    73de:	ldr	r3, [r3, #52]	; 0x34
    73e0:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    73e2:	sub	sp, #20
    73e4:	mov	r4, r0
    73e6:	mov	r5, r1
    73e8:	mov	r6, r2
    73ea:	bne.n	7448 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    73ec:	mov	r2, sp
    73ee:	movs	r1, #9
    73f0:	bl	7190 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    73f4:	cbz	r0, 741c <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    73f6:	ldrb.w	r3, [sp, #10]
    73fa:	lsls	r2, r3, #25
    73fc:	bpl.n	742c <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    73fe:	ldrb	r3, [r4, #22]
    7400:	cmp	r3, #3
    firstSector <<= 9;
    7402:	it	ne
    7404:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7406:	mov	r2, r5
    7408:	mov.w	r1, #32
    740c:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    740e:	it	ne
    7410:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    7412:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7416:	cbz	r0, 744e <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7418:	movs	r3, #38	; 0x26
    741a:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    741c:	ldrb	r0, [r4, #20]
    741e:	cbz	r0, 7428 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7420:	mov	r0, r4
    7422:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    7426:	movs	r0, #0
}
    7428:	add	sp, #20
    742a:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    742c:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    7430:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7434:	lsls	r3, r3, #1
    7436:	adds	r2, r6, #1
    7438:	orr.w	r3, r3, r1, lsr #7
    743c:	orrs	r2, r5
    743e:	tst	r3, r2
    7440:	beq.n	73fe <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    7442:	movs	r3, #39	; 0x27
    7444:	strb	r3, [r4, #19]
    7446:	b.n	741c <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    7448:	mov	r1, sp
    744a:	blx	r3
    744c:	b.n	73f4 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    744e:	mov	r2, r6
    7450:	movs	r1, #33	; 0x21
    7452:	mov	r0, r4
    7454:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7458:	cmp	r0, #0
    745a:	bne.n	7418 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    745c:	mov	r2, r0
    745e:	movs	r1, #38	; 0x26
    7460:	mov	r0, r4
    7462:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7466:	cmp	r0, #0
    7468:	bne.n	7418 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    746a:	movw	r1, #10000	; 0x2710
    746e:	mov	r0, r4
    7470:	bl	7070 <SdSpiCard::waitNotBusy(unsigned short)>
    7474:	cbnz	r0, 747c <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    7476:	movs	r3, #40	; 0x28
    7478:	strb	r3, [r4, #19]
    747a:	b.n	741c <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    747c:	ldrb	r5, [r4, #20]
    747e:	cmp	r5, #0
    7480:	beq.n	7428 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7482:	mov	r0, r4
    7484:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    7488:	mov	r0, r5
    748a:	b.n	7428 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    748c:	.word	0x000071d1

00007490 <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    7490:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7492:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    7496:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7498:	bl	7070 <SdSpiCard::waitNotBusy(unsigned short)>
    749c:	mov	r6, r0
    749e:	cbnz	r0, 74b8 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    74a0:	ldrb	r4, [r5, #20]
    74a2:	movs	r3, #30
    74a4:	strb	r3, [r5, #19]
    74a6:	cbnz	r4, 74ac <SdSpiCard::writeStop()+0x1c>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    74a8:	mov	r0, r4
    74aa:	pop	{r4, r5, r6, pc}
    74ac:	mov	r0, r5
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    74ae:	mov	r4, r6
    74b0:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    74b4:	mov	r0, r4
    74b6:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    74b8:	movs	r1, #253	; 0xfd
    74ba:	adds	r0, r5, #4
    74bc:	bl	880c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    74c0:	ldrb	r4, [r5, #20]
    74c2:	cbnz	r4, 74ca <SdSpiCard::writeStop()+0x3a>
    74c4:	mov	r4, r6

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    74c6:	mov	r0, r4
    74c8:	pop	{r4, r5, r6, pc}
    74ca:	mov	r0, r5
    74cc:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    74d0:	b.n	74a8 <SdSpiCard::writeStop()+0x18>
    74d2:	nop

000074d4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    74d4:	push	{r4, r5, r6, lr}
    74d6:	adds	r4, r0, #4
    74d8:	mov	r6, r2
    74da:	mov	r5, r0
    74dc:	mov	r0, r4
    74de:	bl	880c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    74e2:	mov.w	r2, #512	; 0x200
    74e6:	mov	r1, r6
    74e8:	mov	r0, r4
    74ea:	bl	8824 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    74ee:	mov	r0, r4
    74f0:	movs	r1, #255	; 0xff
    74f2:	bl	880c <SdSpiArduinoDriver::send(unsigned char)>
    74f6:	mov	r0, r4
    74f8:	movs	r1, #255	; 0xff
    74fa:	bl	880c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    74fe:	mov	r0, r4
    7500:	bl	87d0 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7504:	and.w	r3, r0, #31
    7508:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    750a:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    750c:	beq.n	7522 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    750e:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7510:	movs	r3, #32
    7512:	strb	r3, [r5, #19]
    7514:	cbnz	r0, 7518 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    7516:	pop	{r4, r5, r6, pc}
    7518:	mov	r0, r5
    751a:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    751e:	movs	r0, #0
    7520:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    7522:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    7524:	pop	{r4, r5, r6, pc}
    7526:	nop

00007528 <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7528:	push	{r3, r4, r5, lr}
    752a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    752c:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7530:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7532:	bl	7070 <SdSpiCard::waitNotBusy(unsigned short)>
    7536:	cbnz	r0, 754a <SdSpiCard::writeData(unsigned char const*)+0x22>
    7538:	movs	r3, #36	; 0x24
    753a:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    753c:	ldrb	r0, [r4, #20]
    753e:	cbz	r0, 7548 <SdSpiCard::writeData(unsigned char const*)+0x20>
    7540:	mov	r0, r4
    7542:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    7546:	movs	r0, #0
}
    7548:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    754a:	mov	r2, r5
    754c:	movs	r1, #252	; 0xfc
    754e:	mov	r0, r4
    7550:	bl	74d4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    7554:	cmp	r0, #0
    7556:	beq.n	753c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

 fail:
  spiStop();
  return false;
}
    7558:	pop	{r3, r4, r5, pc}
    755a:	nop

0000755c <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    755c:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    755e:	ldr	r3, [r0, #0]
    7560:	ldr	r5, [pc, #88]	; (75bc <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x60>)
    7562:	ldr	r3, [r3, #64]	; 0x40
    7564:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    7566:	sub	sp, #8
    7568:	mov	r4, r0
    756a:	mov	r6, r2
    756c:	bne.n	75b4 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x58>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    756e:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7570:	cmp	r0, #3
    sector <<= 9;
    7572:	it	ne
    7574:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    7576:	mov	r2, r1
    7578:	mov	r0, r4
    757a:	movs	r1, #24
    757c:	bl	70ac <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7580:	cbz	r0, 7596 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7582:	movs	r3, #13
    7584:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7586:	ldrb	r0, [r4, #20]
    7588:	cbz	r0, 7592 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    758a:	mov	r0, r4
    758c:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    7590:	movs	r0, #0
}
    7592:	add	sp, #8
    7594:	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    7596:	mov	r2, r6
    7598:	movs	r1, #254	; 0xfe
    759a:	mov	r0, r4
    759c:	bl	74d4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    75a0:	cmp	r0, #0
    75a2:	beq.n	7586 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75a4:	ldrb	r5, [r4, #20]
    75a6:	cmp	r5, #0
    75a8:	beq.n	7592 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    75aa:	mov	r0, r4
    75ac:	bl	6f00 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    75b0:	mov	r0, r5
    75b2:	b.n	7592 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    75b4:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    75b6:	blx	r3
    75b8:	ldr	r1, [sp, #4]
    75ba:	b.n	7570 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x14>
    75bc:	.word	0x00006ed1

000075c0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    75c0:	push	{r4}
    if (m_sharedSpi) {
    75c2:	ldrb	r4, [r0, #17]
    75c4:	cbnz	r4, 75d4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    75c6:	ldr	r4, [r0, #0]
    75c8:	ldr	r4, [r4, #32]
    75ca:	movs	r3, #1
    75cc:	mov	ip, r4
    }
  }
    75ce:	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    75d2:	bx	ip
    }
  }
    75d4:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    75d8:	b.w	755c <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>

000075dc <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    75dc:	push	{r4}
  SDHC_IRQSIGEN = 0;
    75de:	ldr	r4, [pc, #28]	; (75fc <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    75e0:	ldr	r2, [pc, #28]	; (7600 <sdIrs()+0x24>)
    75e2:	ldr	r1, [pc, #32]	; (7604 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    75e4:	ldr	r0, [pc, #32]	; (7608 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    75e6:	movs	r3, #0
    75e8:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    75ea:	ldr	r4, [r2, #0]
    75ec:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    75ee:	ldr	r1, [r1, #0]
    75f0:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    75f2:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    75f6:	strb	r3, [r0, #0]
}
    75f8:	bx	lr
    75fa:	nop
    75fc:	.word	0x400b1038
    7600:	.word	0x400b1030
    7604:	.word	0x20019a48
    7608:	.word	0x20019a60

0000760c <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    760c:	ldr	r3, [pc, #12]	; (761c <isBusyCommandComplete()+0x10>)
    760e:	ldr	r0, [pc, #16]	; (7620 <isBusyCommandComplete()+0x14>)
    7610:	ldr	r3, [r3, #0]
    7612:	ands	r0, r3
}
    7614:	clz	r0, r0
    7618:	lsrs	r0, r0, #5
    761a:	bx	lr
    761c:	.word	0x400b1030
    7620:	.word	0x000f0001

00007624 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7624:	ldr	r3, [pc, #8]	; (7630 <isBusyCommandInhibit()+0xc>)
    7626:	ldr	r0, [r3, #0]
}
    7628:	and.w	r0, r0, #1
    762c:	bx	lr
    762e:	nop
    7630:	.word	0x400b1024

00007634 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    7634:	ldr	r3, [pc, #12]	; (7644 <isBusyDat()+0x10>)
    7636:	ldr	r0, [r3, #0]
    7638:	eor.w	r0, r0, #16777216	; 0x1000000
}
    763c:	ubfx	r0, r0, #24, #1
    7640:	bx	lr
    7642:	nop
    7644:	.word	0x400b1024

00007648 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7648:	ldr	r3, [pc, #4]	; (7650 <isBusyDMA()+0x8>)
    764a:	ldrb	r0, [r3, #0]
}
    764c:	bx	lr
    764e:	nop
    7650:	.word	0x20019a60

00007654 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    7654:	ldr	r3, [pc, #12]	; (7664 <isBusyFifoRead()+0x10>)
    7656:	ldr	r0, [r3, #0]
    7658:	eor.w	r0, r0, #2048	; 0x800
}
    765c:	ubfx	r0, r0, #11, #1
    7660:	bx	lr
    7662:	nop
    7664:	.word	0x400b1024

00007668 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    7668:	ldr	r3, [pc, #12]	; (7678 <isBusyFifoWrite()+0x10>)
    766a:	ldr	r0, [r3, #0]
    766c:	eor.w	r0, r0, #1024	; 0x400
}
    7670:	ubfx	r0, r0, #10, #1
    7674:	bx	lr
    7676:	nop
    7678:	.word	0x400b1024

0000767c <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    767c:	ldr	r3, [pc, #12]	; (768c <isBusyTransferComplete()+0x10>)
    767e:	ldr	r0, [pc, #16]	; (7690 <isBusyTransferComplete()+0x14>)
    7680:	ldr	r3, [r3, #0]
    7682:	ands	r0, r3
}
    7684:	clz	r0, r0
    7688:	lsrs	r0, r0, #5
    768a:	bx	lr
    768c:	.word	0x400b1030
    7690:	.word	0x117f0002

00007694 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7694:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7698:	ldr	r3, [pc, #176]	; (774c <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    769a:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    769e:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    76a0:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    76a2:	bhi.n	773c <setSdclk(unsigned long)+0xa8>
    76a4:	ldr	r5, [pc, #168]	; (7750 <setSdclk(unsigned long)+0xbc>)
    76a6:	movs	r2, #8
    76a8:	movs	r1, #1
    sdclkfs <<= 1;
    76aa:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    76ac:	lsls	r3, r1, #4
    76ae:	udiv	r3, r5, r3
    76b2:	cmp	r0, r3
    76b4:	ldr	r4, [pc, #152]	; (7750 <setSdclk(unsigned long)+0xbc>)
    76b6:	bcs.n	7734 <setSdclk(unsigned long)+0xa0>
    76b8:	subs	r2, #1
    76ba:	bne.n	76aa <setSdclk(unsigned long)+0x16>
    76bc:	udiv	r4, r4, r1
    76c0:	lsrs	r3, r1, #1
    76c2:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    76c4:	cmp	r0, r4
    76c6:	bcs.n	7744 <setSdclk(unsigned long)+0xb0>
    76c8:	ldr	r6, [pc, #132]	; (7750 <setSdclk(unsigned long)+0xbc>)
    76ca:	lsls	r3, r1, #1
    76cc:	movs	r2, #1
    76ce:	b.n	76d2 <setSdclk(unsigned long)+0x3e>
    76d0:	mov	r3, r4
    76d2:	udiv	r4, r6, r3
    76d6:	cmp	r0, r4
    dvs++;
    76d8:	add.w	r5, r2, #1
    76dc:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    76e0:	bcs.n	7730 <setSdclk(unsigned long)+0x9c>
    76e2:	cmp	r5, #16
    76e4:	mov	r2, r5
    76e6:	bne.n	76d0 <setSdclk(unsigned long)+0x3c>
    76e8:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    76ea:	ldr	r6, [pc, #104]	; (7754 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    76ec:	ldr	r4, [pc, #104]	; (7758 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    76ee:	ldr	r0, [pc, #96]	; (7750 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    76f0:	ldr	r1, [pc, #104]	; (775c <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    76f2:	mov.w	r5, #1000	; 0x3e8
    76f6:	mul.w	r3, r5, r3
    76fa:	udiv	r3, r0, r3
    76fe:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    7700:	ldr	r3, [r4, #0]
    7702:	bic.w	r3, r3, #8
    7706:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    7708:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    770a:	bic.w	r3, r0, #1044480	; 0xff000
    770e:	bic.w	r3, r3, #4080	; 0xff0
    7712:	orr.w	r3, r3, #917504	; 0xe0000
    7716:	orrs	r3, r7
    7718:	orrs	r2, r3
    771a:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    771c:	ldr	r3, [r1, #0]
    771e:	lsls	r3, r3, #28
    7720:	bpl.n	771c <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    7722:	ldr	r2, [pc, #52]	; (7758 <setSdclk(unsigned long)+0xc4>)
    7724:	ldr	r3, [r2, #0]
    7726:	orr.w	r3, r3, #8
    772a:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    772c:	pop	{r4, r5, r6, r7}
    772e:	bx	lr
    7730:	lsls	r2, r2, #4
    7732:	b.n	76ea <setSdclk(unsigned long)+0x56>
    7734:	udiv	r4, r4, r1
    7738:	lsls	r7, r1, #7
    773a:	b.n	76c4 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    773c:	ldr	r4, [pc, #16]	; (7750 <setSdclk(unsigned long)+0xbc>)
    773e:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    7740:	movs	r1, #1
    7742:	b.n	76c4 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7744:	mov	r3, r1
    7746:	movs	r2, #0
    7748:	b.n	76ea <setSdclk(unsigned long)+0x56>
    774a:	nop
    774c:	.word	0x005b8d7f
    7750:	.word	0x05b8d800
    7754:	.word	0x20019a64
    7758:	.word	0x400b102c
    775c:	.word	0x400b1024

00007760 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    7760:	ldr	r3, [pc, #4]	; (7768 <SdioCard::errorCode() const+0x8>)
}
    7762:	ldrb	r0, [r3, #0]
    7764:	bx	lr
    7766:	nop
    7768:	.word	0x200138d4

0000776c <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    776c:	ldr	r3, [pc, #4]	; (7774 <SdioCard::errorData() const+0x8>)
    776e:	ldr	r0, [r3, #0]
}
    7770:	bx	lr
    7772:	nop
    7774:	.word	0x20019a48

00007778 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7778:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    777a:	ldr	r4, [pc, #20]	; (7790 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    777c:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    777e:	ldmia	r4!, {r0, r1, r2, r3}
    7780:	str	r0, [r5, #0]
    7782:	str	r1, [r5, #4]
    7784:	str	r2, [r5, #8]
    7786:	str	r3, [r5, #12]
  return true;
}
    7788:	movs	r0, #1
    778a:	pop	{r4, r5}
    778c:	bx	lr
    778e:	nop
    7790:	.word	0x20019a24

00007794 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7794:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    7796:	ldr	r4, [pc, #20]	; (77ac <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7798:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    779a:	ldmia	r4!, {r0, r1, r2, r3}
    779c:	str	r0, [r5, #0]
    779e:	str	r1, [r5, #4]
    77a0:	str	r2, [r5, #8]
    77a2:	str	r3, [r5, #12]
  return true;
}
    77a4:	movs	r0, #1
    77a6:	pop	{r4, r5}
    77a8:	bx	lr
    77aa:	nop
    77ac:	.word	0x20019a50

000077b0 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    77b0:	ldr	r3, [pc, #8]	; (77bc <SdioCard::readOCR(unsigned long*)+0xc>)
    77b2:	ldr	r3, [r3, #0]
    77b4:	str	r3, [r1, #0]
  return true;
}
    77b6:	movs	r0, #1
    77b8:	bx	lr
    77ba:	nop
    77bc:	.word	0x20019a3c

000077c0 <SdioCard::~SdioCard()>:
    77c0:	bx	lr
    77c2:	nop

000077c4 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    77c4:	push	{r3, r4, r5, r6, r7, lr}
    77c6:	mov	r5, r0
  uint32_t m = micros();
    77c8:	bl	929c <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    77cc:	ldr	r7, [pc, #24]	; (77e8 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    77ce:	mov	r6, r0
    77d0:	b.n	77dc <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    77d2:	bl	929c <micros>
    77d6:	subs	r0, r0, r6
    77d8:	cmp	r0, r7
    77da:	bhi.n	77e4 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    77dc:	blx	r5
    77de:	mov	r4, r0
    77e0:	cmp	r0, #0
    77e2:	bne.n	77d2 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    77e4:	mov	r0, r4
    77e6:	pop	{r3, r4, r5, r6, r7, pc}
    77e8:	.word	0x000f4240

000077ec <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    77ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    77f0:	ldr.w	r8, [pc, #64]	; 7834 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    77f4:	ldr	r7, [pc, #56]	; (7830 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    77f6:	str.w	r0, [r8]
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    77fa:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    77fc:	bl	929c <micros>
    7800:	mov	r6, r0
    7802:	b.n	7812 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7804:	bl	929c <micros>
    7808:	subs	r0, r0, r6
    780a:	cmp	r0, r7
    780c:	bhi.n	7824 <yieldTimeout(bool (*)())+0x38>
    780e:	bl	a2bc <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    7812:	blx	r5
    7814:	mov	r4, r0
    7816:	cmp	r0, #0
    7818:	bne.n	7804 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    781a:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    781e:	mov	r0, r4
    7820:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    7824:	movs	r3, #0
    7826:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    782a:	mov	r0, r4
    782c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7830:	.word	0x000f4240
    7834:	.word	0x20019a34

00007838 <SdioCard::~SdioCard()>:
    7838:	push	{r4, lr}
    783a:	movs	r1, #12
    783c:	mov	r4, r0
    783e:	bl	aa54 <operator delete(void*, unsigned int)>
    7842:	mov	r0, r4
    7844:	pop	{r4, pc}
    7846:	nop

00007848 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7848:	ldr	r3, [pc, #20]	; (7860 <SdioCard::type() const+0x18>)
    784a:	ldrb	r3, [r3, #0]
    784c:	cbz	r3, 785c <SdioCard::type() const+0x14>
    784e:	ldr	r3, [pc, #20]	; (7864 <SdioCard::type() const+0x1c>)
    7850:	ldrb	r3, [r3, #0]
    7852:	cmp	r3, #0
    7854:	ite	ne
    7856:	movne	r0, #3
    7858:	moveq	r0, #2
    785a:	bx	lr
    785c:	movs	r0, #1
}
    785e:	bx	lr
    7860:	.word	0x20019a20
    7864:	.word	0x20019a38

00007868 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7868:	push	{r3, r4, r5, lr}
    786a:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    786c:	ldr	r0, [pc, #60]	; (78ac <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    786e:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7870:	bl	77c4 <waitTimeout(bool (*)())>
    7874:	cbz	r0, 787a <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7876:	movs	r0, #0
    7878:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    787a:	ldr	r2, [pc, #52]	; (78b0 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    787c:	ldr	r3, [pc, #52]	; (78b4 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    787e:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    7880:	ldr	r0, [pc, #52]	; (78b8 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    7882:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    7884:	bl	77c4 <waitTimeout(bool (*)())>
    7888:	cmp	r0, #0
    788a:	bne.n	7876 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    788c:	ldr	r2, [pc, #44]	; (78bc <cardCommand(unsigned long, unsigned long)+0x54>)
    788e:	ldr	r3, [pc, #48]	; (78c0 <cardCommand(unsigned long, unsigned long)+0x58>)
    7890:	ldr	r1, [r2, #0]
    7892:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7894:	ldr	r1, [r3, #0]
    7896:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7898:	ldr	r2, [r3, #0]
    789a:	lsls	r2, r2, #31
    789c:	bpl.n	7876 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    789e:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    78a0:	tst.w	r3, #983040	; 0xf0000
    78a4:	bne.n	7876 <cardCommand(unsigned long, unsigned long)+0xe>
    78a6:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    78a8:	pop	{r3, r4, r5, pc}
    78aa:	nop
    78ac:	.word	0x00007625
    78b0:	.word	0x400b1008
    78b4:	.word	0x400b100c
    78b8:	.word	0x0000760d
    78bc:	.word	0x400b1030
    78c0:	.word	0x20019a48

000078c4 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    78c4:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    78c6:	ldr	r3, [pc, #28]	; (78e4 <isBusyCMD13()+0x20>)
    78c8:	ldr	r0, [pc, #28]	; (78e8 <isBusyCMD13()+0x24>)
    78ca:	ldr	r1, [r3, #0]
    78cc:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    78d0:	cbz	r0, 78e0 <isBusyCMD13()+0x1c>
    78d2:	ldr	r3, [pc, #24]	; (78ec <isBusyCMD13()+0x28>)
    78d4:	ldr	r0, [r3, #0]
    78d6:	eor.w	r0, r0, #256	; 0x100
    78da:	ubfx	r0, r0, #8, #1
    78de:	pop	{r3, pc}
    78e0:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    78e2:	pop	{r3, pc}
    78e4:	.word	0x20019a40
    78e8:	.word	0x0d1a0000
    78ec:	.word	0x400b1010

000078f0 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    78f0:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    78f2:	ldr	r3, [pc, #16]	; (7904 <SdioCard::status()+0x14>)
    78f4:	ldr	r0, [pc, #16]	; (7908 <SdioCard::status()+0x18>)
    78f6:	ldr	r1, [r3, #0]
    78f8:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    78fc:	cbz	r0, 7902 <SdioCard::status()+0x12>
    78fe:	ldr	r3, [pc, #12]	; (790c <SdioCard::status()+0x1c>)
    7900:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    7902:	pop	{r3, pc}
    7904:	.word	0x20019a40
    7908:	.word	0x0d1a0000
    790c:	.word	0x400b1010

00007910 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7910:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7912:	ldr	r3, [pc, #84]	; (7968 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7914:	sub	sp, #20
    7916:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7918:	ldr	r1, [r3, #0]
    791a:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    791e:	cbz	r0, 7962 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    7920:	ldr	r2, [pc, #72]	; (796c <readReg16(unsigned long, void*)+0x5c>)
    7922:	ldr	r3, [pc, #76]	; (7970 <readReg16(unsigned long, void*)+0x60>)
    7924:	ldr	r2, [r2, #0]
    7926:	str	r2, [sp, #0]
    7928:	ldr	r1, [r3, #0]
    792a:	str	r1, [sp, #4]
    792c:	ldr	r1, [r3, #4]
    792e:	str	r1, [sp, #8]
    7930:	adds	r3, #8
    7932:	add.w	r4, r5, #15
    7936:	ldr	r3, [r3, #0]
    7938:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    793a:	movs	r3, #0
    793c:	b.n	7942 <readReg16(unsigned long, void*)+0x32>
    793e:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7942:	and.w	r1, r3, #3
    7946:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7948:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    794a:	lsrs	r2, r1
    794c:	add.w	lr, sp, #16
    7950:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7954:	cmp	r3, #15
    7956:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7958:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    795c:	bne.n	793e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    795e:	movs	r3, #0
    7960:	strb	r3, [r5, #15]
  return true;
}
    7962:	add	sp, #20
    7964:	pop	{r4, r5, pc}
    7966:	nop
    7968:	.word	0x20019a40
    796c:	.word	0x400b1010
    7970:	.word	0x400b1014

00007974 <waitDmaStatus() [clone .part.4]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7974:	ldr	r3, [pc, #20]	; (798c <waitDmaStatus() [clone .part.4]+0x18>)
    7976:	ldr	r0, [r3, #0]
    7978:	ands.w	r0, r0, #2
    797c:	beq.n	798a <waitDmaStatus() [clone .part.4]+0x16>
    797e:	ldr	r3, [r3, #0]
    7980:	ldr	r0, [pc, #12]	; (7990 <waitDmaStatus() [clone .part.4]+0x1c>)
    7982:	ands	r0, r3
    7984:	clz	r0, r0
    7988:	lsrs	r0, r0, #5
}
    798a:	bx	lr
    798c:	.word	0x20019a48
    7990:	.word	0x117f0000

00007994 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    7994:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    7996:	lsls	r4, r2, #30
    7998:	bne.n	799c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    799a:	cbnz	r3, 79ae <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    799c:	ldr	r1, [pc, #124]	; (7a1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    799e:	ldr	r3, [pc, #128]	; (7a20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    79a0:	movs	r0, #37	; 0x25
  m_errorLine = line;
    79a2:	movw	r2, #503	; 0x1f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    79a6:	strb	r0, [r1, #0]
  m_errorLine = line;
    79a8:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    79aa:	movs	r0, #0
    79ac:	pop	{r3, r4, r5, r6, r7, pc}
    79ae:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    79b0:	ldr	r0, [pc, #112]	; (7a24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    79b2:	mov	r4, r3
    79b4:	mov	r7, r1
    79b6:	mov	r5, r2
    79b8:	bl	77ec <yieldTimeout(bool (*)())>
    79bc:	cbnz	r0, 7a06 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    79be:	ldr	r1, [pc, #104]	; (7a28 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    79c0:	ldr	r2, [pc, #104]	; (7a2c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    79c2:	ldr.w	lr, [pc, #128]	; 7a44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    79c6:	mov.w	ip, #1
    79ca:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    79ce:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    79d0:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    79d2:	ldr	r4, [pc, #92]	; (7a30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    79d4:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    79d6:	ldr	r2, [pc, #92]	; (7a34 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    79d8:	ldr	r1, [pc, #92]	; (7a38 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    79da:	ldr	r0, [pc, #96]	; (7a3c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    79dc:	orr.w	r3, r3, #512	; 0x200
    79e0:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    79e2:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    79e4:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    79e6:	cbnz	r3, 7a16 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    79e8:	lsls	r1, r7, #9
    79ea:	mov	r0, r6
    79ec:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    79f0:	cmp	r0, #0
    79f2:	beq.n	79aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    79f4:	ldr	r0, [pc, #72]	; (7a40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    79f6:	bl	77ec <yieldTimeout(bool (*)())>
    79fa:	cmp	r0, #0
    79fc:	bne.n	79aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    79fe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7a02:	b.w	7974 <waitDmaStatus() [clone .part.4]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a06:	ldr	r1, [pc, #20]	; (7a1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7a08:	ldr	r3, [pc, #20]	; (7a20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a0a:	movs	r0, #10
  m_errorLine = line;
    7a0c:	mov.w	r2, #506	; 0x1fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a10:	strb	r0, [r1, #0]
  m_errorLine = line;
    7a12:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7a14:	b.n	79aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7a16:	mov	r1, r7
    7a18:	b.n	79ea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    7a1a:	nop
    7a1c:	.word	0x200138d4
    7a20:	.word	0x20019a68
    7a24:	.word	0x000078c5
    7a28:	.word	0x20019a48
    7a2c:	.word	0x400b1000
    7a30:	.word	0x400b1004
    7a34:	.word	0x20019a38
    7a38:	.word	0x400b1038
    7a3c:	.word	0x117f0002
    7a40:	.word	0x00007649
    7a44:	.word	0x20019a60

00007a48 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7a48:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7a4a:	ldr	r1, [pc, #100]	; (7ab0 <SdioCard::sectorCount()+0x68>)
    7a4c:	ldrb	r3, [r1, #0]
    7a4e:	ands.w	r3, r3, #192	; 0xc0
    7a52:	beq.n	7a78 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7a54:	cmp	r3, #64	; 0x40
    7a56:	beq.n	7a5e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7a58:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    7a5a:	pop	{r4, r5, r6}
    7a5c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7a5e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7a60:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7a62:	ldrb	r0, [r1, #8]
    7a64:	adds	r2, r3, #1
    7a66:	and.w	r3, r4, #63	; 0x3f
    7a6a:	add.w	r3, r2, r3, lsl #16
    7a6e:	add.w	r0, r3, r0, lsl #8
    7a72:	lsls	r0, r0, #10
    7a74:	pop	{r4, r5, r6}
    7a76:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7a78:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7a7a:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7a7c:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7a7e:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7a80:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7a82:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7a84:	and.w	r1, r5, #3
    7a88:	lsls	r1, r1, #1
    7a8a:	and.w	r3, r3, #3
    7a8e:	lsls	r2, r2, #2
    7a90:	orr.w	r0, r1, r0, lsr #7
    7a94:	orr.w	r3, r2, r3, lsl #10
    7a98:	and.w	r1, r4, #15
    7a9c:	orr.w	r3, r3, r6, lsr #6
    7aa0:	add	r0, r1
    7aa2:	subs	r0, #7
    7aa4:	adds	r3, #1
    7aa6:	lsl.w	r0, r3, r0
    7aaa:	pop	{r4, r5, r6}
    7aac:	bx	lr
    7aae:	nop
    7ab0:	.word	0x20019a50

00007ab4 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7ab4:	push	{r4, r5, r6, lr}
    7ab6:	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7ab8:	ldrb	r1, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7aba:	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7abc:	cbnz	r1, 7b1a <SdioCard::erase(unsigned long, unsigned long)+0x66>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7abe:	ldr	r2, [pc, #192]	; (7b80 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    7ac0:	ldrb	r3, [r2, #10]
    7ac2:	and.w	r0, r3, #64	; 0x40
    7ac6:	and.w	r4, r0, #255	; 0xff
    7aca:	cbz	r0, 7af4 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    7acc:	ldr	r3, [pc, #180]	; (7b84 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    7ace:	ldrb	r3, [r3, #0]
    7ad0:	cbnz	r3, 7ad6 <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    7ad2:	lsls	r5, r5, #9
    lastSector <<= 9;
    7ad4:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    7ad6:	mov	r1, r5
    7ad8:	ldr	r0, [pc, #172]	; (7b88 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7ada:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    7ade:	mov	r4, r0
    7ae0:	cbnz	r0, 7b2a <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ae2:	ldr	r1, [pc, #168]	; (7b8c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7ae4:	ldr	r3, [pc, #168]	; (7b90 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ae6:	movs	r0, #15
  m_errorLine = line;
    7ae8:	mov.w	r2, #752	; 0x2f0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7aec:	strb	r0, [r1, #0]
  m_errorLine = line;
    7aee:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7af0:	mov	r0, r4
    7af2:	pop	{r4, r5, r6, pc}
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    7af4:	ldrb	r1, [r2, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7af6:	and.w	r3, r3, #63	; 0x3f
    7afa:	lsls	r3, r3, #1
    7afc:	adds	r2, r6, #1
    7afe:	orr.w	r3, r3, r1, lsr #7
    7b02:	orrs	r2, r5
    7b04:	tst	r3, r2
    7b06:	beq.n	7acc <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b08:	ldr	r1, [pc, #128]	; (7b8c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7b0a:	ldr	r3, [pc, #132]	; (7b90 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b0c:	movs	r0, #39	; 0x27
  m_errorLine = line;
    7b0e:	mov.w	r2, #744	; 0x2e8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b12:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b14:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7b16:	mov	r0, r4
    7b18:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7b1a:	ldr	r3, [r0, #0]
    7b1c:	ldr	r3, [r3, #24]
    7b1e:	blx	r3
    7b20:	mov	r4, r0
    7b22:	cmp	r0, #0
    7b24:	bne.n	7abe <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7b26:	mov	r0, r4
    7b28:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    7b2a:	mov	r1, r6
    7b2c:	ldr	r0, [pc, #100]	; (7b94 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    7b2e:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    7b32:	mov	r4, r0
    7b34:	cbnz	r0, 7b46 <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b36:	ldr	r1, [pc, #84]	; (7b8c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7b38:	ldr	r3, [pc, #84]	; (7b90 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b3a:	movs	r0, #16
  m_errorLine = line;
    7b3c:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b40:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b42:	str	r2, [r3, #0]
    7b44:	b.n	7af0 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    7b46:	movs	r1, #0
    7b48:	ldr	r0, [pc, #76]	; (7b98 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    7b4a:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    7b4e:	mov	r4, r0
    7b50:	cbnz	r0, 7b62 <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b52:	ldr	r1, [pc, #56]	; (7b8c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7b54:	ldr	r3, [pc, #56]	; (7b90 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b56:	movs	r0, #17
  m_errorLine = line;
    7b58:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b5c:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b5e:	str	r2, [r3, #0]
    7b60:	b.n	7af0 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    7b62:	ldr	r0, [pc, #56]	; (7b9c <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    7b64:	bl	77c4 <waitTimeout(bool (*)())>
    7b68:	cmp	r0, #0
    7b6a:	beq.n	7af0 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b6c:	ldr	r1, [pc, #28]	; (7b8c <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7b6e:	ldr	r3, [pc, #32]	; (7b90 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b70:	movs	r0, #40	; 0x28
  m_errorLine = line;
    7b72:	movw	r2, #761	; 0x2f9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b76:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b78:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7b7a:	movs	r4, #0
    7b7c:	b.n	7af0 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    7b7e:	nop
    7b80:	.word	0x20019a50
    7b84:	.word	0x20019a38
    7b88:	.word	0x201a0000
    7b8c:	.word	0x200138d4
    7b90:	.word	0x20019a68
    7b94:	.word	0x211a0000
    7b98:	.word	0x261b0000
    7b9c:	.word	0x000078c5

00007ba0 <waitTransferComplete() [clone .part.8]>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    7ba0:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    7ba2:	ldr	r0, [pc, #56]	; (7bdc <waitTransferComplete() [clone .part.8]+0x3c>)
    7ba4:	bl	77c4 <waitTimeout(bool (*)())>
  m_transferActive = false;
    7ba8:	ldr	r1, [pc, #52]	; (7be0 <waitTransferComplete() [clone .part.8]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    7baa:	ldr	r2, [pc, #56]	; (7be4 <waitTransferComplete() [clone .part.8]+0x44>)
    7bac:	ldr	r3, [pc, #56]	; (7be8 <waitTransferComplete() [clone .part.8]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    7bae:	movs	r4, #0
    7bb0:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    7bb2:	ldr	r1, [r2, #0]
    7bb4:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7bb6:	ldr	r1, [r3, #0]
    7bb8:	str	r1, [r2, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    7bba:	cbnz	r0, 7bc4 <waitTransferComplete() [clone .part.8]+0x24>
    7bbc:	ldr	r2, [r3, #0]
    7bbe:	ldr	r3, [pc, #44]	; (7bec <waitTransferComplete() [clone .part.8]+0x4c>)
    7bc0:	ands	r3, r2
    7bc2:	cbz	r3, 7bd6 <waitTransferComplete() [clone .part.8]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bc4:	ldr	r1, [pc, #40]	; (7bf0 <waitTransferComplete() [clone .part.8]+0x50>)
  m_errorLine = line;
    7bc6:	ldr	r3, [pc, #44]	; (7bf4 <waitTransferComplete() [clone .part.8]+0x54>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bc8:	movs	r0, #31
  m_errorLine = line;
    7bca:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bce:	strb	r0, [r1, #0]
  m_errorLine = line;
    7bd0:	str	r2, [r3, #0]
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    7bd2:	movs	r0, #0
  }
  return true;
}
    7bd4:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    7bd6:	movs	r0, #1
    7bd8:	pop	{r4, pc}
    7bda:	nop
    7bdc:	.word	0x0000767d
    7be0:	.word	0x20019a44
    7be4:	.word	0x400b1030
    7be8:	.word	0x20019a48
    7bec:	.word	0x117f0000
    7bf0:	.word	0x200138d4
    7bf4:	.word	0x20019a68

00007bf8 <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    7bf8:	push	{r4, r5, r6, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7bfa:	ldr	r4, [pc, #104]	; (7c64 <SdioCard::readStop()+0x6c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7bfc:	ldr	r0, [pc, #104]	; (7c68 <SdioCard::readStop()+0x70>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7bfe:	ldr	r3, [r4, #0]
    7c00:	bic.w	r3, r3, #65536	; 0x10000
    7c04:	str	r3, [r4, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7c06:	movs	r1, #0
    7c08:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    7c0c:	mov	r5, r0
    7c0e:	cbnz	r0, 7c22 <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c10:	ldr	r1, [pc, #88]	; (7c6c <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    7c12:	ldr	r3, [pc, #92]	; (7c70 <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c14:	movs	r0, #9
  m_errorLine = line;
    7c16:	movw	r2, #575	; 0x23f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c1a:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c1c:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7c1e:	mov	r0, r5
    7c20:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    7c22:	ldr	r0, [pc, #80]	; (7c74 <SdioCard::readStop()+0x7c>)
    7c24:	bl	77ec <yieldTimeout(bool (*)())>
    7c28:	cbnz	r0, 7c4e <SdioCard::readStop()+0x56>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    7c2a:	ldr	r3, [pc, #76]	; (7c78 <SdioCard::readStop()+0x80>)
    7c2c:	ldr	r3, [r3, #0]
    7c2e:	lsls	r3, r3, #30
    7c30:	bpl.n	7c1e <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    7c32:	ldr	r1, [pc, #72]	; (7c7c <SdioCard::readStop()+0x84>)
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7c34:	ldr	r0, [pc, #72]	; (7c80 <SdioCard::readStop()+0x88>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    7c36:	ldr	r6, [r1, #0]
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7c38:	ldr	r3, [r4, #0]
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7c3a:	ldr	r2, [r0, #0]
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7c3c:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7c40:	orr.w	r2, r2, #67108864	; 0x4000000
    7c44:	str	r2, [r0, #0]
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    7c46:	str	r6, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7c48:	mov	r0, r5
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    SDHC_PROCTL = proctl;
    7c4a:	str	r3, [r4, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7c4c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c4e:	ldr	r1, [pc, #28]	; (7c6c <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    7c50:	ldr	r3, [pc, #28]	; (7c70 <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c52:	movs	r0, #10
  m_errorLine = line;
    7c54:	movw	r2, #579	; 0x243
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c58:	strb	r0, [r1, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7c5a:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c5c:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7c5e:	mov	r0, r5
    7c60:	pop	{r4, r5, r6, pc}
    7c62:	nop
    7c64:	.word	0x400b1028
    7c68:	.word	0x0cdb0000
    7c6c:	.word	0x200138d4
    7c70:	.word	0x20019a68
    7c74:	.word	0x00007635
    7c78:	.word	0x400b1024
    7c7c:	.word	0x400b1034
    7c80:	.word	0x400b102c

00007c84 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7c84:	push	{r4, r5, r6, lr}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    7c86:	ldr	r6, [pc, #124]	; (7d04 <SdioCard::writeData(unsigned char const*)+0x80>)
    7c88:	ldrb	r3, [r6, #0]
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7c8a:	mov	r5, r1
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    7c8c:	cmp	r3, #0
    7c8e:	bne.n	7cf8 <SdioCard::writeData(unsigned char const*)+0x74>
  if (!waitTransferComplete()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    7c90:	ldr	r3, [pc, #116]	; (7d08 <SdioCard::writeData(unsigned char const*)+0x84>)
    7c92:	ldr	r3, [r3, #0]
    7c94:	lsls	r1, r3, #23
    7c96:	bmi.n	7caa <SdioCard::writeData(unsigned char const*)+0x26>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7c98:	ldr	r3, [pc, #112]	; (7d0c <SdioCard::writeData(unsigned char const*)+0x88>)
    7c9a:	ldr	r2, [r3, #0]
    7c9c:	bic.w	r2, r2, #65536	; 0x10000
    7ca0:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7ca2:	ldr	r2, [r3, #0]
    7ca4:	orr.w	r2, r2, #131072	; 0x20000
    7ca8:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7caa:	ldr	r2, [pc, #96]	; (7d0c <SdioCard::writeData(unsigned char const*)+0x88>)
  if (waitTimeout(isBusyFifoWrite)) {
    7cac:	ldr	r0, [pc, #96]	; (7d10 <SdioCard::writeData(unsigned char const*)+0x8c>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7cae:	ldr	r3, [r2, #0]
    7cb0:	orr.w	r3, r3, #65536	; 0x10000
    7cb4:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    7cb6:	bl	77c4 <waitTimeout(bool (*)())>
    7cba:	cbnz	r0, 7ce6 <SdioCard::writeData(unsigned char const*)+0x62>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7cbc:	ldr	r4, [pc, #72]	; (7d08 <SdioCard::writeData(unsigned char const*)+0x84>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7cbe:	ldr	r0, [pc, #84]	; (7d14 <SdioCard::writeData(unsigned char const*)+0x90>)
    7cc0:	subs	r3, r5, #4
    7cc2:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7cc6:	ldr	r2, [r4, #0]
    7cc8:	lsls	r2, r2, #21
    7cca:	bpl.n	7cc6 <SdioCard::writeData(unsigned char const*)+0x42>
    7ccc:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7cd0:	ldr.w	r2, [r3, #4]!
    7cd4:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7cd6:	cmp	r1, r3
    7cd8:	bne.n	7cd0 <SdioCard::writeData(unsigned char const*)+0x4c>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7cda:	cmp	r5, r1
    7cdc:	mov	r3, r1
    7cde:	bne.n	7cc6 <SdioCard::writeData(unsigned char const*)+0x42>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    7ce0:	movs	r0, #1
    7ce2:	strb	r0, [r6, #0]
    7ce4:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ce6:	ldr	r1, [pc, #48]	; (7d18 <SdioCard::writeData(unsigned char const*)+0x94>)
  m_errorLine = line;
    7ce8:	ldr	r3, [pc, #48]	; (7d1c <SdioCard::writeData(unsigned char const*)+0x98>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cea:	movs	r0, #33	; 0x21
  m_errorLine = line;
    7cec:	mov.w	r2, #1012	; 0x3f4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cf0:	strb	r0, [r1, #0]
  m_errorLine = line;
    7cf2:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    7cf4:	movs	r0, #0
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    7cf6:	pop	{r4, r5, r6, pc}
    7cf8:	bl	7ba0 <waitTransferComplete() [clone .part.8]>
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    7cfc:	cmp	r0, #0
    7cfe:	bne.n	7c90 <SdioCard::writeData(unsigned char const*)+0xc>
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    7d00:	pop	{r4, r5, r6, pc}
    7d02:	nop
    7d04:	.word	0x20019a44
    7d08:	.word	0x400b1024
    7d0c:	.word	0x400b1028
    7d10:	.word	0x00007669
    7d14:	.word	0x400b1020
    7d18:	.word	0x200138d4
    7d1c:	.word	0x20019a68

00007d20 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7d20:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    7d22:	ldr	r0, [pc, #80]	; (7d74 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7d24:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    7d26:	bl	77ec <yieldTimeout(bool (*)())>
    7d2a:	cbnz	r0, 7d60 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d2c:	ldr	r2, [pc, #72]	; (7d78 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7d2e:	ldr	r1, [pc, #76]	; (7d7c <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d30:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    7d32:	ldr	r0, [pc, #76]	; (7d80 <SdioCard::writeStart(unsigned long)+0x60>)
    7d34:	ldr	r5, [pc, #76]	; (7d84 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d36:	bic.w	r3, r3, #65536	; 0x10000
    7d3a:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7d3c:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    7d3e:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7d40:	cbnz	r3, 7d5c <SdioCard::writeStart(unsigned long)+0x3c>
    7d42:	lsls	r1, r4, #9
    7d44:	ldr	r0, [pc, #64]	; (7d88 <SdioCard::writeStart(unsigned long)+0x68>)
    7d46:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    7d4a:	cbnz	r0, 7d5a <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d4c:	ldr	r1, [pc, #60]	; (7d8c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7d4e:	ldr	r3, [pc, #64]	; (7d90 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d50:	movs	r4, #14
  m_errorLine = line;
    7d52:	mov.w	r2, #1128	; 0x468
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d56:	strb	r4, [r1, #0]
  m_errorLine = line;
    7d58:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    7d5a:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7d5c:	mov	r1, r4
    7d5e:	b.n	7d44 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d60:	ldr	r1, [pc, #40]	; (7d8c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7d62:	ldr	r3, [pc, #44]	; (7d90 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d64:	movs	r0, #10
  m_errorLine = line;
    7d66:	movw	r2, #1116	; 0x45c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d6a:	strb	r0, [r1, #0]
  m_errorLine = line;
    7d6c:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7d6e:	movs	r0, #0
    7d70:	pop	{r3, r4, r5, pc}
    7d72:	nop
    7d74:	.word	0x000078c5
    7d78:	.word	0x400b1028
    7d7c:	.word	0x20019a38
    7d80:	.word	0x400b1004
    7d84:	.word	0xffff0200
    7d88:	.word	0x193a0022
    7d8c:	.word	0x200138d4
    7d90:	.word	0x20019a68

00007d94 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7d94:	push	{r3, r4, r5, r6, r7, lr}
    7d96:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7d98:	ldrb	r0, [r0, #8]
    7d9a:	lsls	r0, r0, #31
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7d9c:	mov	r4, r1
    7d9e:	mov	r5, r2
    7da0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7da2:	bmi.n	7dcc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7da4:	cbz	r3, 7dc8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7da6:	add	r7, r1
    7da8:	b.n	7dae <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    7daa:	cmp	r4, r7
    7dac:	beq.n	7dc8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    7dae:	ldr	r3, [r6, #0]
    7db0:	mov	r2, r5
    7db2:	mov	r1, r4
    7db4:	ldr	r3, [r3, #28]
    7db6:	mov	r0, r6
    7db8:	blx	r3
    7dba:	adds	r4, #1
    7dbc:	add.w	r5, r5, #512	; 0x200
    7dc0:	cmp	r0, #0
    7dc2:	bne.n	7daa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    7dc4:	movs	r0, #0
    7dc6:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7dc8:	movs	r0, #1
    7dca:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    7dcc:	lsls	r0, r2, #30
    7dce:	beq.n	7df6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7dd0:	cmp	r3, #0
    7dd2:	beq.n	7dc8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7dd4:	add	r7, r1
    7dd6:	b.n	7ddc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    7dd8:	cmp	r7, r4
    7dda:	beq.n	7dc8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    7ddc:	ldr	r3, [r6, #0]
    7dde:	mov	r2, r5
    7de0:	mov	r1, r4
    7de2:	ldr	r3, [r3, #28]
    7de4:	mov	r0, r6
    7de6:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7de8:	adds	r4, #1
    7dea:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    7dee:	cmp	r0, #0
    7df0:	bne.n	7dd8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    7df2:	movs	r0, #0
    7df4:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    7df6:	ldr	r0, [pc, #24]	; (7e10 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    7df8:	bl	7994 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7dfc:	cmp	r0, #0
    7dfe:	bne.n	7dc8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e00:	ldr	r1, [pc, #16]	; (7e14 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    7e02:	ldr	r3, [pc, #20]	; (7e18 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e04:	movs	r4, #14
  m_errorLine = line;
    7e06:	movw	r2, #1102	; 0x44e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e0a:	strb	r4, [r1, #0]
  m_errorLine = line;
    7e0c:	str	r2, [r3, #0]
    7e0e:	pop	{r3, r4, r5, r6, r7, pc}
    7e10:	.word	0x193a0027
    7e14:	.word	0x200138d4
    7e18:	.word	0x20019a68

00007e1c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7e1c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7e1e:	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7e20:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7e22:	lsls	r2, r3, #31
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7e24:	sub.w	sp, sp, #512	; 0x200
    7e28:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    7e2a:	bpl.n	7e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    7e2c:	lsls	r3, r5, #30
    7e2e:	beq.n	7e3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    7e30:	mov	r1, r5
    7e32:	mov	r0, sp
    7e34:	mov.w	r2, #512	; 0x200
    7e38:	bl	887c <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    7e3c:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    7e3e:	mov	r2, r5
    7e40:	mov	r1, r6
    7e42:	movs	r3, #1
    7e44:	ldr	r0, [pc, #144]	; (7ed8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    7e46:	bl	7994 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7e4a:	cbnz	r0, 7e5a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e4c:	ldr	r1, [pc, #140]	; (7edc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc0>)
  m_errorLine = line;
    7e4e:	ldr	r3, [pc, #144]	; (7ee0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e50:	movs	r4, #13
  m_errorLine = line;
    7e52:	movw	r2, #1046	; 0x416
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e56:	strb	r4, [r1, #0]
  m_errorLine = line;
    7e58:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    7e5a:	add.w	sp, sp, #512	; 0x200
    7e5e:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    7e60:	ldr	r3, [pc, #128]	; (7ee4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    7e62:	ldrb	r3, [r3, #0]
    7e64:	mov	r4, r0
    7e66:	cbnz	r3, 7e8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x6e>
    if (!waitTransferComplete()) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7e68:	ldr	r3, [pc, #124]	; (7ee8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
    7e6a:	ldr	r3, [r3, #0]
    7e6c:	lsrs	r3, r3, #16
    7e6e:	lsls	r3, r3, #16
    7e70:	cbz	r3, 7ec8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7e72:	ldrb	r3, [r4, #9]
    7e74:	cmp	r3, #2
    7e76:	beq.n	7e96 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7a>
      if (!syncDevice()) {
    7e78:	ldr	r3, [r4, #0]
    7e7a:	mov	r0, r4
    7e7c:	ldr	r3, [r3, #24]
    7e7e:	blx	r3
    7e80:	cbnz	r0, 7e9e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    7e82:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    7e84:	add.w	sp, sp, #512	; 0x200
    7e88:	pop	{r4, r5, r6, pc}
    7e8a:	bl	7ba0 <waitTransferComplete() [clone .part.8]>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    7e8e:	cmp	r0, #0
    7e90:	bne.n	7e68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    7e92:	movs	r0, #0
    7e94:	b.n	7e84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x68>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7e96:	ldr	r3, [r4, #4]
    7e98:	cmp	r6, r3
    7e9a:	bne.n	7e78 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    7e9c:	b.n	7eb2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x96>
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    7e9e:	ldr	r3, [r4, #0]
    7ea0:	mov	r1, r6
    7ea2:	ldr	r3, [r3, #72]	; 0x48
    7ea4:	mov	r0, r4
    7ea6:	blx	r3
    7ea8:	cmp	r0, #0
    7eaa:	beq.n	7e82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    7eac:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    7eae:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    7eb0:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    7eb2:	ldr	r3, [r4, #0]
    7eb4:	mov	r1, r5
    7eb6:	ldr	r3, [r3, #68]	; 0x44
    7eb8:	mov	r0, r4
    7eba:	blx	r3
    7ebc:	cmp	r0, #0
    7ebe:	beq.n	7e82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
      return false;
    }
    m_curSector++;
    7ec0:	ldr	r3, [r4, #4]
    7ec2:	adds	r3, #1
    7ec4:	str	r3, [r4, #4]
    7ec6:	b.n	7e5a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    7ec8:	ldr	r3, [r4, #0]
    7eca:	mov	r0, r4
    7ecc:	ldr	r3, [r3, #24]
    7ece:	blx	r3
    7ed0:	cmp	r0, #0
    7ed2:	bne.n	7e72 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
    7ed4:	b.n	7e82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
    7ed6:	nop
    7ed8:	.word	0x183a0001
    7edc:	.word	0x200138d4
    7ee0:	.word	0x20019a68
    7ee4:	.word	0x20019a44
    7ee8:	.word	0x400b1004

00007eec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7eec:	push	{r3, r4, r5, r6, r7, lr}
    7eee:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7ef0:	ldrb	r0, [r0, #8]
    7ef2:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7ef4:	mov	r4, r1
    7ef6:	mov	r5, r2
    7ef8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7efa:	bmi.n	7f24 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7efc:	cbz	r3, 7f20 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7efe:	add	r7, r1
    7f00:	b.n	7f06 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    7f02:	cmp	r4, r7
    7f04:	beq.n	7f20 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    7f06:	ldr	r3, [r6, #0]
    7f08:	mov	r2, r5
    7f0a:	mov	r1, r4
    7f0c:	ldr	r3, [r3, #12]
    7f0e:	mov	r0, r6
    7f10:	blx	r3
    7f12:	adds	r4, #1
    7f14:	add.w	r5, r5, #512	; 0x200
    7f18:	cmp	r0, #0
    7f1a:	bne.n	7f02 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    7f1c:	movs	r0, #0
    7f1e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7f20:	movs	r0, #1
    7f22:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    7f24:	lsls	r0, r2, #30
    7f26:	beq.n	7f4e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7f28:	cmp	r3, #0
    7f2a:	beq.n	7f20 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7f2c:	add	r7, r1
    7f2e:	b.n	7f34 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    7f30:	cmp	r7, r4
    7f32:	beq.n	7f20 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    7f34:	ldr	r3, [r6, #0]
    7f36:	mov	r2, r5
    7f38:	mov	r1, r4
    7f3a:	ldr	r3, [r3, #12]
    7f3c:	mov	r0, r6
    7f3e:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7f40:	adds	r4, #1
    7f42:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    7f46:	cmp	r0, #0
    7f48:	bne.n	7f30 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    7f4a:	movs	r0, #0
    7f4c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    7f4e:	ldr	r0, [pc, #24]	; (7f68 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    7f50:	bl	7994 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7f54:	cmp	r0, #0
    7f56:	bne.n	7f20 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f58:	ldr	r1, [pc, #16]	; (7f6c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    7f5a:	ldr	r3, [pc, #20]	; (7f70 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f5c:	movs	r4, #12
  m_errorLine = line;
    7f5e:	movw	r2, #909	; 0x38d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f62:	strb	r4, [r1, #0]
  m_errorLine = line;
    7f64:	str	r2, [r3, #0]
    7f66:	pop	{r3, r4, r5, r6, r7, pc}
    7f68:	.word	0x123a0037
    7f6c:	.word	0x200138d4
    7f70:	.word	0x20019a68

00007f74 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7f74:	push	{r3, r4, r5, r6, r7, lr}
    7f76:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7f78:	ldr	r0, [pc, #116]	; (7ff0 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7f7a:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7f7c:	bl	77c4 <waitTimeout(bool (*)())>
    7f80:	cbz	r0, 7f94 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f82:	ldr	r1, [pc, #112]	; (7ff4 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7f84:	ldr	r3, [pc, #112]	; (7ff8 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f86:	movs	r0, #10
  m_errorLine = line;
    7f88:	mov.w	r2, #410	; 0x19a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f8c:	strb	r0, [r1, #0]
  m_errorLine = line;
    7f8e:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7f90:	movs	r0, #0
    7f92:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7f94:	ldr	r2, [pc, #100]	; (7ffc <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7f96:	ldr.w	lr, [pc, #132]	; 801c <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7f9a:	ldr	r7, [pc, #100]	; (8000 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7f9c:	ldr	r6, [pc, #100]	; (8004 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7f9e:	ldr	r3, [pc, #104]	; (8008 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7fa0:	mov.w	ip, #1
    7fa4:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7fa8:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7faa:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7fac:	ldr	r5, [pc, #92]	; (800c <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7fae:	ldr	r2, [pc, #96]	; (8010 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7fb0:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7fb2:	ldr	r0, [pc, #96]	; (8014 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7fb4:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7fb6:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7fb8:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    7fbc:	cbnz	r0, 7fce <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fbe:	ldr	r1, [pc, #52]	; (7ff4 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7fc0:	ldr	r3, [pc, #52]	; (7ff8 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fc2:	movs	r4, #4
  m_errorLine = line;
    7fc4:	movw	r2, #417	; 0x1a1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fc8:	strb	r4, [r1, #0]
  m_errorLine = line;
    7fca:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    7fcc:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7fce:	ldr	r0, [pc, #72]	; (8018 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    7fd0:	bl	77ec <yieldTimeout(bool (*)())>
    7fd4:	cbnz	r0, 7fde <cardCMD6(unsigned long, unsigned char*)+0x6a>
    7fd6:	bl	7974 <waitDmaStatus() [clone .part.4]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    7fda:	cbz	r0, 7fde <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    7fdc:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fde:	ldr	r1, [pc, #20]	; (7ff4 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7fe0:	ldr	r3, [pc, #20]	; (7ff8 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fe2:	movs	r0, #37	; 0x25
  m_errorLine = line;
    7fe4:	mov.w	r2, #420	; 0x1a4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fe8:	strb	r0, [r1, #0]
  m_errorLine = line;
    7fea:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    7fec:	movs	r0, #0
    7fee:	pop	{r3, r4, r5, r6, r7, pc}
    7ff0:	.word	0x000078c5
    7ff4:	.word	0x200138d4
    7ff8:	.word	0x20019a68
    7ffc:	.word	0x20019a48
    8000:	.word	0x400b1000
    8004:	.word	0x400b1004
    8008:	.word	0x400b1038
    800c:	.word	0x00010040
    8010:	.word	0x117f0002
    8014:	.word	0x063a0011
    8018:	.word	0x00007649
    801c:	.word	0x20019a60

00008020 <SdioCard::begin(SdioConfig)>:
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8020:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8024:	ldr	r5, [pc, #568]	; (8260 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8026:	ldr	r4, [pc, #572]	; (8264 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    8028:	ldr.w	r8, [pc, #684]	; 82d8 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    802c:	ldr	r7, [pc, #568]	; (8268 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    802e:	ldr	r6, [pc, #572]	; (826c <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    8030:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    8032:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8034:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8036:	strb	r3, [r0, #9]
  m_initDone = false;
    8038:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    803c:	strb	r3, [r7, #0]
  m_version2 = false;
    803e:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8040:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8042:	ldr	r2, [pc, #556]	; (8270 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8044:	ldr	r0, [pc, #556]	; (8274 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8046:	ldr	r1, [pc, #560]	; (8278 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8048:	ldr.w	lr, [pc, #656]	; 82dc <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    804c:	orr.w	r3, r3, #201326592	; 0xc000000
    8050:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8052:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8054:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8058:	orr.w	r3, r3, #131072	; 0x20000
    805c:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    805e:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8060:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8064:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8068:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    806c:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    806e:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8072:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8074:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8076:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8078:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    807a:	ldr	r3, [r2, #0]
    807c:	orr.w	r3, r3, #16777216	; 0x1000000
    8080:	orr.w	r3, r3, #32768	; 0x8000
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8084:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8086:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8088:	ldr	r3, [r2, #0]
    808a:	ldr	r4, [pc, #496]	; (827c <SdioCard::begin(SdioConfig)+0x25c>)
    808c:	lsls	r1, r3, #7
    808e:	bmi.n	8088 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8090:	mov.w	r0, #400	; 0x190
    8094:	bl	7694 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8098:	ldr.w	ip, [pc, #472]	; 8274 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    809c:	ldr.w	lr, [pc, #572]	; 82dc <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    80a0:	ldr	r1, [pc, #468]	; (8278 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    80a2:	ldr	r2, [pc, #476]	; (8280 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    80a4:	ldr	r0, [pc, #476]	; (8284 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    80a6:	movw	r3, #1091	; 0x443
    80aa:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    80ae:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    80b2:	mov.w	lr, #1088	; 0x440
    80b6:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    80ba:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    80bc:	add.w	r2, r2, #409600	; 0x64000
    80c0:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    80c2:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    80c4:	ldr	r0, [pc, #448]	; (8288 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    80c6:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    80c8:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    80ca:	ldr	r1, [pc, #448]	; (828c <SdioCard::begin(SdioConfig)+0x26c>)
    80cc:	movs	r0, #81	; 0x51
    80ce:	bl	9228 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    80d2:	ldr	r3, [pc, #444]	; (8290 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    80d4:	ldr	r1, [pc, #444]	; (8294 <SdioCard::begin(SdioConfig)+0x274>)
    80d6:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    80d8:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    80dc:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    80de:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    80e0:	ldr	r3, [r4, #0]
    80e2:	orr.w	r3, r3, #134217728	; 0x8000000
    80e6:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    80e8:	ldr	r1, [r4, #0]
    80ea:	ands.w	r1, r1, #134217728	; 0x8000000
    80ee:	bne.n	80e8 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    80f0:	mov	r0, r1
    80f2:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    80f6:	mov	r4, r0
    80f8:	cmp	r0, #0
    80fa:	beq.n	819a <SdioCard::begin(SdioConfig)+0x17a>
    80fc:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    80fe:	mov.w	r1, #426	; 0x1aa
    8102:	ldr	r0, [pc, #404]	; (8298 <SdioCard::begin(SdioConfig)+0x278>)
    8104:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    8108:	cmp	r0, #0
    810a:	bne.n	81c8 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    810c:	subs	r4, #1
    810e:	bne.n	80fe <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8110:	ldrb	r3, [r6, #0]
    8112:	ldr	r6, [pc, #392]	; (829c <SdioCard::begin(SdioConfig)+0x27c>)
    8114:	cmp	r3, #0
    8116:	it	eq
    8118:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    811c:	bl	929c <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8120:	ldr	r4, [pc, #380]	; (82a0 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    8122:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8124:	movs	r1, #0
    8126:	ldr	r0, [pc, #380]	; (82a4 <SdioCard::begin(SdioConfig)+0x284>)
    8128:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    812c:	cbnz	r0, 8144 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    812e:	ldr	r2, [pc, #376]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    8130:	mov.w	r1, #676	; 0x2a4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8134:	movs	r3, #23
  m_errorLine = line;
    8136:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8138:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    813a:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    813c:	mov	r0, r4
    813e:	add	sp, #68	; 0x44
    8140:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8144:	mov	r1, r6
    8146:	ldr	r0, [pc, #356]	; (82ac <SdioCard::begin(SdioConfig)+0x28c>)
    8148:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    814c:	cmp	r0, #0
    814e:	beq.n	812e <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8150:	bl	929c <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8154:	ldr	r3, [pc, #344]	; (82b0 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8156:	ldr	r2, [pc, #328]	; (82a0 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8158:	rsb	r0, r9, r0
    815c:	cmp	r0, r3
    815e:	bhi.n	812e <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8160:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    8162:	cmp	r3, #0
    8164:	bge.n	8124 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    8166:	ldr	r3, [pc, #332]	; (82b4 <SdioCard::begin(SdioConfig)+0x294>)
    8168:	ldr	r1, [r2, #0]
    816a:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    816c:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    816e:	ldr	r0, [pc, #328]	; (82b8 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    8170:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    8172:	it	mi
    8174:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8176:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    817a:	it	mi
    817c:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    817e:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    8182:	mov	r4, r0
    8184:	cbnz	r0, 81ae <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8186:	ldr	r2, [pc, #288]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    8188:	movw	r1, #685	; 0x2ad
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    818c:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    818e:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8190:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8192:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8194:	add	sp, #68	; 0x44
    8196:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    819a:	ldr	r2, [pc, #268]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    819c:	movw	r1, #659	; 0x293
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81a0:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    81a2:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81a4:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81a6:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    81a8:	add	sp, #68	; 0x44
    81aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    81ae:	movs	r1, #0
    81b0:	ldr	r0, [pc, #264]	; (82bc <SdioCard::begin(SdioConfig)+0x29c>)
    81b2:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    81b6:	mov	r4, r0
    81b8:	cbnz	r0, 81ea <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81ba:	ldr	r2, [pc, #236]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    81bc:	mov.w	r1, #688	; 0x2b0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81c0:	movs	r3, #3
  m_errorLine = line;
    81c2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81c4:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    81c6:	b.n	813c <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    81c8:	ldr	r3, [pc, #212]	; (82a0 <SdioCard::begin(SdioConfig)+0x280>)
    81ca:	ldr	r3, [r3, #0]
    81cc:	cmp.w	r3, #426	; 0x1aa
    81d0:	beq.n	81e2 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81d2:	ldr	r2, [pc, #212]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    81d4:	movw	r1, #665	; 0x299
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81d8:	movs	r3, #6
  m_errorLine = line;
    81da:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81dc:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    81de:	movs	r4, #0
    81e0:	b.n	813c <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    81e2:	movs	r3, #1
    81e4:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    81e6:	ldr	r6, [pc, #180]	; (829c <SdioCard::begin(SdioConfig)+0x27c>)
    81e8:	b.n	811c <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    81ea:	ldr	r3, [pc, #180]	; (82a0 <SdioCard::begin(SdioConfig)+0x280>)
    81ec:	ldr	r6, [pc, #208]	; (82c0 <SdioCard::begin(SdioConfig)+0x2a0>)
    81ee:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    81f0:	ldr	r1, [pc, #208]	; (82c4 <SdioCard::begin(SdioConfig)+0x2a4>)
    81f2:	ldr	r0, [pc, #212]	; (82c8 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    81f4:	lsrs	r3, r3, #16
    81f6:	lsls	r3, r3, #16
    81f8:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    81fa:	bl	7910 <readReg16(unsigned long, void*)>
    81fe:	mov	r4, r0
    8200:	cbnz	r0, 8210 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8202:	ldr	r2, [pc, #164]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    8204:	movw	r1, #693	; 0x2b5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8208:	movs	r3, #7
  m_errorLine = line;
    820a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    820c:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    820e:	b.n	813c <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    8210:	ldr	r1, [pc, #184]	; (82cc <SdioCard::begin(SdioConfig)+0x2ac>)
    8212:	ldr	r0, [pc, #188]	; (82d0 <SdioCard::begin(SdioConfig)+0x2b0>)
    8214:	bl	7910 <readReg16(unsigned long, void*)>
    8218:	mov	r4, r0
    821a:	cbnz	r0, 822a <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    821c:	ldr	r2, [pc, #136]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    821e:	mov.w	r1, #696	; 0x2b8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8222:	movs	r3, #8
  m_errorLine = line;
    8224:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8226:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8228:	b.n	813c <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    822a:	ldr	r1, [r6, #0]
    822c:	ldr	r0, [pc, #164]	; (82d4 <SdioCard::begin(SdioConfig)+0x2b4>)
    822e:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    8232:	mov	r4, r0
    8234:	cbnz	r0, 8244 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8236:	ldr	r2, [pc, #112]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    8238:	movw	r1, #699	; 0x2bb
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    823c:	movs	r3, #5
  m_errorLine = line;
    823e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8240:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    8242:	b.n	813c <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8244:	ldr	r1, [r6, #0]
    8246:	ldr	r0, [pc, #92]	; (82a4 <SdioCard::begin(SdioConfig)+0x284>)
    8248:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    824c:	cmp	r0, #0
    824e:	bne.n	82e0 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8250:	ldr	r2, [pc, #84]	; (82a8 <SdioCard::begin(SdioConfig)+0x288>)
    8252:	movw	r1, #703	; 0x2bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8256:	movs	r3, #20
  m_errorLine = line;
    8258:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    825a:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    825c:	movs	r4, #0
    825e:	b.n	813c <SdioCard::begin(SdioConfig)+0x11c>
    8260:	.word	0x200138d4
    8264:	.word	0x4000d800
    8268:	.word	0x20019a38
    826c:	.word	0x20019a20
    8270:	.word	0x40048030
    8274:	.word	0x4004d000
    8278:	.word	0x4004d008
    827c:	.word	0x400b102c
    8280:	.word	0x4004d00c
    8284:	.word	0x4004d010
    8288:	.word	0x117f000b
    828c:	.word	0x000075dd
    8290:	.word	0xe000e108
    8294:	.word	0xe000e451
    8298:	.word	0x081a0000
    829c:	.word	0x40300000
    82a0:	.word	0x400b1010
    82a4:	.word	0x371a0000
    82a8:	.word	0x20019a68
    82ac:	.word	0x29020000
    82b0:	.word	0x000f4240
    82b4:	.word	0x20019a3c
    82b8:	.word	0x02090000
    82bc:	.word	0x031a0000
    82c0:	.word	0x20019a40
    82c4:	.word	0x20019a50
    82c8:	.word	0x09090000
    82cc:	.word	0x20019a24
    82d0:	.word	0x0a090000
    82d4:	.word	0x071b0000
    82d8:	.word	0x20019a4c
    82dc:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    82e0:	movs	r1, #2
    82e2:	ldr	r0, [pc, #168]	; (838c <SdioCard::begin(SdioConfig)+0x36c>)
    82e4:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    82e8:	mov	r4, r0
    82ea:	cmp	r0, #0
    82ec:	beq.n	8250 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    82ee:	ldr	r3, [pc, #160]	; (8390 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    82f0:	ldr	r0, [pc, #160]	; (8394 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    82f2:	ldr	r2, [r3, #0]
    82f4:	bic.w	r2, r2, #6
    82f8:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    82fa:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    82fc:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8300:	orr.w	r2, r2, #2
    8304:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8306:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8308:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    830a:	mvn.w	r0, #4278190080	; 0xff000000
    830e:	bl	7f74 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8312:	cbz	r0, 831c <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8314:	ldrb.w	r3, [sp, #13]
    8318:	lsls	r3, r3, #30
    831a:	bmi.n	836e <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    831c:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8320:	ldr.w	fp, [pc, #132]	; 83a8 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8324:	ldr.w	sl, [pc, #132]	; 83ac <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8328:	ldr.w	r9, [pc, #132]	; 83b0 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    832c:	ldr	r7, [pc, #104]	; (8398 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    832e:	ldr	r6, [pc, #108]	; (839c <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8330:	ldr	r5, [pc, #108]	; (83a0 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8332:	movw	r3, #259	; 0x103
    8336:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    833a:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    833e:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8342:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8344:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8346:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    8348:	bl	7694 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    834c:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8350:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8354:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8356:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    835a:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    835e:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8362:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8364:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8366:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8368:	strb.w	r2, [r8]
  return true;
    836c:	b.n	813c <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    836e:	mov	r1, sp
    8370:	ldr	r0, [pc, #48]	; (83a4 <SdioCard::begin(SdioConfig)+0x384>)
    8372:	bl	7f74 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8376:	cmp	r0, #0
    8378:	beq.n	831c <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    837a:	ldrb.w	r3, [sp, #16]
    837e:	and.w	r3, r3, #15
    8382:	cmp	r3, #1
    8384:	bne.n	831c <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    8386:	movw	r0, #50000	; 0xc350
    838a:	b.n	8320 <SdioCard::begin(SdioConfig)+0x300>
    838c:	.word	0x061a0000
    8390:	.word	0x400b1028
    8394:	.word	0x400b1044
    8398:	.word	0x4004d00c
    839c:	.word	0x4004d010
    83a0:	.word	0x4004d014
    83a4:	.word	0x80fffff1
    83a8:	.word	0x4004d000
    83ac:	.word	0x4004d004
    83b0:	.word	0x4004d008

000083b4 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    83b4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    83b6:	ldr	r3, [pc, #160]	; (8458 <SdioCard::readData(unsigned char*)+0xa4>)
    83b8:	ldr	r3, [r3, #0]
    83ba:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    83bc:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    83be:	bmi.n	83de <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    83c0:	ldr	r3, [pc, #152]	; (845c <SdioCard::readData(unsigned char*)+0xa8>)
    83c2:	ldr	r2, [r3, #0]
    83c4:	bic.w	r2, r2, #65536	; 0x10000
    83c8:	str	r2, [r3, #0]
    noInterrupts();
    83ca:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    83cc:	ldr	r2, [r3, #0]
    83ce:	orr.w	r2, r2, #131072	; 0x20000
    83d2:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    83d4:	ldr	r2, [r3, #0]
    83d6:	orr.w	r2, r2, #65536	; 0x10000
    83da:	str	r2, [r3, #0]
    interrupts();
    83dc:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    83de:	ldr	r0, [pc, #128]	; (8460 <SdioCard::readData(unsigned char*)+0xac>)
    83e0:	bl	77c4 <waitTimeout(bool (*)())>
    83e4:	cmp	r0, #0
    83e6:	bne.n	8446 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    83e8:	ldr	r4, [pc, #108]	; (8458 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    83ea:	ldr	r0, [pc, #120]	; (8464 <SdioCard::readData(unsigned char*)+0xb0>)
    83ec:	subs	r3, r5, #4
    83ee:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    83f2:	ldr	r2, [r4, #0]
    83f4:	lsls	r1, r2, #20
    83f6:	bpl.n	83f2 <SdioCard::readData(unsigned char*)+0x3e>
    83f8:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    83fc:	ldr	r2, [r0, #0]
    83fe:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8402:	cmp	r1, r3
    8404:	bne.n	83fc <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8406:	cmp	r5, r1
    8408:	mov	r3, r1
    840a:	bne.n	83f2 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    840c:	ldr	r0, [pc, #88]	; (8468 <SdioCard::readData(unsigned char*)+0xb4>)
    840e:	bl	77c4 <waitTimeout(bool (*)())>
    8412:	cbnz	r0, 8434 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8414:	ldr	r2, [pc, #84]	; (846c <SdioCard::readData(unsigned char*)+0xb8>)
    8416:	ldr	r3, [pc, #88]	; (8470 <SdioCard::readData(unsigned char*)+0xbc>)
    8418:	ldr	r1, [r2, #0]
    841a:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    841c:	ldr	r1, [r3, #0]
    841e:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8420:	ldr	r2, [r3, #0]
    8422:	lsls	r2, r2, #30
    8424:	bpl.n	8456 <SdioCard::readData(unsigned char*)+0xa2>
    8426:	ldr	r3, [r3, #0]
    8428:	ldr	r0, [pc, #72]	; (8474 <SdioCard::readData(unsigned char*)+0xc0>)
    842a:	ands	r0, r3
    842c:	clz	r0, r0
    8430:	lsrs	r0, r0, #5
    8432:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8434:	ldr	r1, [pc, #64]	; (8478 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8436:	ldr	r3, [pc, #68]	; (847c <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8438:	movs	r0, #29
  m_errorLine = line;
    843a:	movw	r2, #843	; 0x34b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    843e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8440:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    8442:	movs	r0, #0
    8444:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8446:	ldr	r1, [pc, #48]	; (8478 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8448:	ldr	r3, [pc, #48]	; (847c <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    844a:	movs	r0, #26
  m_errorLine = line;
    844c:	mov.w	r2, #832	; 0x340
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8450:	strb	r0, [r1, #0]
  m_errorLine = line;
    8452:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8454:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8456:	pop	{r3, r4, r5, pc}
    8458:	.word	0x400b1024
    845c:	.word	0x400b1028
    8460:	.word	0x00007655
    8464:	.word	0x400b1020
    8468:	.word	0x0000767d
    846c:	.word	0x400b1030
    8470:	.word	0x20019a48
    8474:	.word	0x117f0000
    8478:	.word	0x200138d4
    847c:	.word	0x20019a68

00008480 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    8480:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    8482:	ldr	r0, [pc, #80]	; (84d4 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    8484:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    8486:	bl	77ec <yieldTimeout(bool (*)())>
    848a:	cbnz	r0, 84c0 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    848c:	ldr	r2, [pc, #72]	; (84d8 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    848e:	ldr	r1, [pc, #76]	; (84dc <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8490:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    8492:	ldr	r0, [pc, #76]	; (84e0 <SdioCard::readStart(unsigned long)+0x60>)
    8494:	ldr	r5, [pc, #76]	; (84e4 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8496:	orr.w	r3, r3, #65536	; 0x10000
    849a:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    849c:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    849e:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    84a0:	cbnz	r3, 84bc <SdioCard::readStart(unsigned long)+0x3c>
    84a2:	lsls	r1, r4, #9
    84a4:	ldr	r0, [pc, #64]	; (84e8 <SdioCard::readStart(unsigned long)+0x68>)
    84a6:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    84aa:	cbnz	r0, 84ba <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84ac:	ldr	r1, [pc, #60]	; (84ec <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    84ae:	ldr	r3, [pc, #64]	; (84f0 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84b0:	movs	r4, #12
  m_errorLine = line;
    84b2:	movw	r2, #937	; 0x3a9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84b6:	strb	r4, [r1, #0]
  m_errorLine = line;
    84b8:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    84ba:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    84bc:	mov	r1, r4
    84be:	b.n	84a4 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84c0:	ldr	r1, [pc, #40]	; (84ec <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    84c2:	ldr	r3, [pc, #44]	; (84f0 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84c4:	movs	r0, #10
  m_errorLine = line;
    84c6:	movw	r2, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84ca:	strb	r0, [r1, #0]
  m_errorLine = line;
    84cc:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    84ce:	movs	r0, #0
    84d0:	pop	{r3, r4, r5, pc}
    84d2:	nop
    84d4:	.word	0x000078c5
    84d8:	.word	0x400b1028
    84dc:	.word	0x20019a38
    84e0:	.word	0x400b1004
    84e4:	.word	0xffff0200
    84e8:	.word	0x123a0032
    84ec:	.word	0x200138d4
    84f0:	.word	0x20019a68

000084f4 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    84f4:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    84f6:	ldrb	r3, [r0, #8]
    84f8:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    84fa:	sub.w	sp, sp, #512	; 0x200
    84fe:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8500:	bpl.n	8528 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    8502:	lsls	r3, r2, #30
    8504:	beq.n	854c <SdioCard::readSector(unsigned long, unsigned char*)+0x58>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8506:	mov	r2, sp
    8508:	movs	r3, #1
    850a:	ldr	r0, [pc, #196]	; (85d0 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    850c:	bl	7994 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8510:	cbz	r0, 8558 <SdioCard::readSector(unsigned long, unsigned char*)+0x64>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    8512:	mov	r1, sp
    8514:	mov	r0, r5
    8516:	mov.w	r2, #512	; 0x200
    851a:	bl	887c <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    851e:	movs	r5, #1
}
    8520:	mov	r0, r5
    8522:	add.w	sp, sp, #512	; 0x200
    8526:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    8528:	ldr	r3, [pc, #168]	; (85d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    852a:	ldrb	r3, [r3, #0]
    852c:	mov	r4, r0
    852e:	mov	r6, r1
    8530:	cbnz	r3, 8584 <SdioCard::readSector(unsigned long, unsigned char*)+0x90>
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    8532:	ldrb	r3, [r4, #9]
    8534:	cmp	r3, #1
    8536:	beq.n	8570 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    8538:	ldr	r3, [r4, #0]
    853a:	mov	r0, r4
    853c:	ldr	r3, [r3, #24]
    853e:	blx	r3
    8540:	cbnz	r0, 8590 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    8542:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8544:	mov	r0, r5
    8546:	add.w	sp, sp, #512	; 0x200
    854a:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    854c:	movs	r3, #1
    854e:	ldr	r0, [pc, #128]	; (85d0 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    8550:	bl	7994 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8554:	cmp	r0, #0
    8556:	bne.n	851e <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8558:	ldr	r1, [pc, #124]	; (85d8 <SdioCard::readSector(unsigned long, unsigned char*)+0xe4>)
  m_errorLine = line;
    855a:	ldr	r3, [pc, #128]	; (85dc <SdioCard::readSector(unsigned long, unsigned char*)+0xe8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    855c:	movs	r0, #11
  m_errorLine = line;
    855e:	movw	r2, #862	; 0x35e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8562:	strb	r0, [r1, #0]
  m_errorLine = line;
    8564:	str	r2, [r3, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    8566:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8568:	mov	r0, r5
    856a:	add.w	sp, sp, #512	; 0x200
    856e:	pop	{r4, r5, r6, pc}
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    8570:	ldr	r3, [r4, #4]
    8572:	cmp	r6, r3
    8574:	beq.n	85a2 <SdioCard::readSector(unsigned long, unsigned char*)+0xae>
      if (!syncDevice()) {
    8576:	ldr	r3, [r4, #0]
    8578:	mov	r0, r4
    857a:	ldr	r3, [r3, #24]
    857c:	blx	r3
    857e:	cmp	r0, #0
    8580:	beq.n	8542 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    8582:	b.n	8590 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
    8584:	bl	7ba0 <waitTransferComplete() [clone .part.8]>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    8588:	cmp	r0, #0
    858a:	bne.n	8532 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
      return false;
    858c:	movs	r5, #0
    858e:	b.n	8544 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    8590:	mov	r1, r6
    8592:	mov	r0, r4
    8594:	bl	8480 <SdioCard::readStart(unsigned long)>
    8598:	cmp	r0, #0
    859a:	beq.n	8542 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    859c:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    859e:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    85a0:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    85a2:	mov	r1, r5
    85a4:	mov	r0, r4
    85a6:	bl	83b4 <SdioCard::readData(unsigned char*)>
    85aa:	mov	r5, r0
    85ac:	cmp	r0, #0
    85ae:	beq.n	8542 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    85b0:	ldr	r3, [pc, #44]	; (85e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xec>)
    85b2:	ldr	r3, [r3, #0]
    85b4:	lsrs	r3, r3, #16
    85b6:	lsls	r3, r3, #16
    85b8:	cbz	r3, 85c2 <SdioCard::readSector(unsigned long, unsigned char*)+0xce>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    85ba:	ldr	r3, [r4, #4]
    85bc:	adds	r3, #1
    85be:	str	r3, [r4, #4]
    85c0:	b.n	8568 <SdioCard::readSector(unsigned long, unsigned char*)+0x74>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    85c2:	ldr	r3, [r4, #0]
    85c4:	mov	r0, r4
    85c6:	ldr	r3, [r3, #24]
    85c8:	blx	r3
    85ca:	cmp	r0, #0
    85cc:	bne.n	85ba <SdioCard::readSector(unsigned long, unsigned char*)+0xc6>
    85ce:	b.n	8542 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    85d0:	.word	0x113a0011
    85d4:	.word	0x20019a44
    85d8:	.word	0x200138d4
    85dc:	.word	0x20019a68
    85e0:	.word	0x400b1004

000085e4 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    85e4:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    85e6:	ldr	r2, [pc, #80]	; (8638 <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    85e8:	movs	r5, #0
    85ea:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    85ec:	ldr	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    85ee:	ldr	r0, [pc, #76]	; (863c <SdioCard::stopTransmission(bool)+0x58>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    85f0:	bic.w	r3, r3, #65536	; 0x10000
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    85f4:	mov	r6, r1
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    85f6:	str	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    85f8:	mov	r1, r5
    85fa:	bl	7868 <cardCommand(unsigned long, unsigned long)>
    85fe:	mov	r4, r0
    8600:	cbz	r0, 8626 <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    8602:	cbnz	r6, 8608 <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    8604:	mov	r0, r4
    8606:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    8608:	ldr	r0, [pc, #52]	; (8640 <SdioCard::stopTransmission(bool)+0x5c>)
    860a:	bl	77ec <yieldTimeout(bool (*)())>
    860e:	cmp	r0, #0
    8610:	beq.n	8604 <SdioCard::stopTransmission(bool)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8612:	ldr	r1, [pc, #48]	; (8644 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    8614:	ldr	r3, [pc, #48]	; (8648 <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8616:	movs	r0, #10
  m_errorLine = line;
    8618:	movw	r2, #963	; 0x3c3
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    861c:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    861e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8620:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    8622:	mov	r0, r4
    8624:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8626:	ldr	r1, [pc, #28]	; (8644 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    8628:	ldr	r3, [pc, #28]	; (8648 <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    862a:	movs	r0, #9
  m_errorLine = line;
    862c:	movw	r2, #959	; 0x3bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8630:	strb	r0, [r1, #0]
  m_errorLine = line;
    8632:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    8634:	mov	r0, r4
    8636:	pop	{r4, r5, r6, pc}
    8638:	.word	0x400b1028
    863c:	.word	0x0cdb0000
    8640:	.word	0x00007635
    8644:	.word	0x200138d4
    8648:	.word	0x20019a68

0000864c <SdioCard::isBusy()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
    864c:	push	{r4, r5, r6, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    864e:	ldrb	r3, [r0, #8]
    8650:	ands.w	r3, r3, #1
    8654:	beq.n	8662 <SdioCard::isBusy()+0x16>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8656:	ldr	r3, [pc, #88]	; (86b0 <SdioCard::isBusy()+0x64>)
    8658:	ldr	r3, [r3, #0]
    865a:	cbz	r3, 8694 <SdioCard::isBusy()+0x48>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    865c:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8660:	bx	r3
  } else {
    if (m_transferActive) {
    8662:	ldr	r2, [pc, #80]	; (86b4 <SdioCard::isBusy()+0x68>)
    8664:	ldrb	r4, [r2, #0]
    8666:	cbnz	r4, 8678 <SdioCard::isBusy()+0x2c>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8668:	ldr	r3, [pc, #76]	; (86b8 <SdioCard::isBusy()+0x6c>)
    866a:	ldr	r4, [r3, #0]
    866c:	eor.w	r4, r4, #16777216	; 0x1000000
    8670:	ubfx	r4, r4, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    8674:	mov	r0, r4
    8676:	pop	{r4, r5, r6, pc}
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8678:	ldr	r5, [pc, #64]	; (86bc <SdioCard::isBusy()+0x70>)
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    867a:	ldr	r1, [pc, #68]	; (86c0 <SdioCard::isBusy()+0x74>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    867c:	ldr	r5, [r5, #0]
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    867e:	ands	r1, r5
    8680:	cmp	r1, #0
    8682:	beq.n	8674 <SdioCard::isBusy()+0x28>
        return true;
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
    8684:	ldr	r1, [pc, #60]	; (86c4 <SdioCard::isBusy()+0x78>)
    8686:	ldr	r5, [r1, #0]
    8688:	lsrs	r5, r5, #16
    868a:	lsls	r5, r5, #16
    868c:	cbz	r5, 86a4 <SdioCard::isBusy()+0x58>
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    868e:	mov	r4, r3
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    8690:	mov	r0, r4
    8692:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8694:	ldr	r3, [pc, #48]	; (86c8 <SdioCard::isBusy()+0x7c>)
    8696:	ldrb	r4, [r3, #0]
    8698:	cmp	r4, #0
    869a:	beq.n	8674 <SdioCard::isBusy()+0x28>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    869c:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    86a0:	b.w	78c4 <isBusyCMD13()>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
      stopTransmission(false);
    86a4:	mov	r1, r5
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
    86a6:	strb	r5, [r2, #0]
      stopTransmission(false);
    86a8:	bl	85e4 <SdioCard::stopTransmission(bool)>
    86ac:	b.n	8674 <SdioCard::isBusy()+0x28>
    86ae:	nop
    86b0:	.word	0x20019a34
    86b4:	.word	0x20019a44
    86b8:	.word	0x400b1024
    86bc:	.word	0x400b1030
    86c0:	.word	0x117f0002
    86c4:	.word	0x400b1004
    86c8:	.word	0x20019a4c

000086cc <SdioCard::syncDevice()>:
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    86cc:	ldr	r3, [pc, #36]	; (86f4 <SdioCard::syncDevice()+0x28>)
    86ce:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    86d0:	push	{r4, lr}
    86d2:	mov	r4, r0
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    86d4:	cbnz	r3, 86ea <SdioCard::syncDevice()+0x1e>
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    86d6:	ldrb	r3, [r4, #9]
    86d8:	cbnz	r3, 86de <SdioCard::syncDevice()+0x12>
    if (!writeStop()) {
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
    86da:	movs	r0, #1
    86dc:	pop	{r4, pc}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    86de:	mov	r0, r4
    86e0:	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    86e2:	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    86e6:	b.w	85e4 <SdioCard::stopTransmission(bool)>
    86ea:	bl	7ba0 <waitTransferComplete() [clone .part.8]>
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    86ee:	cmp	r0, #0
    86f0:	bne.n	86d6 <SdioCard::syncDevice()+0xa>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    86f2:	pop	{r4, pc}
    86f4:	.word	0x20019a44

000086f8 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    86f8:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    86fa:	ldr	r3, [r0, #0]
    86fc:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    86fe:	ldrb	r1, [r3, #11]
    8700:	cbz	r1, 8742 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    8702:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8704:	ldrb	r1, [r3, #11]
    8706:	lsls	r0, r1, #31
    8708:	bpl.n	8718 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    870a:	ldr	r0, [pc, #100]	; (8770 <SdSpiArduinoDriver::activate()+0x78>)
    870c:	ldr	r1, [r3, #12]
    870e:	ldr	r4, [r0, #0]
    8710:	ands	r1, r4
    8712:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    8714:	str	r1, [r0, #0]
    8716:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8718:	lsls	r4, r1, #30
    871a:	bpl.n	872a <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    871c:	ldr	r0, [pc, #84]	; (8774 <SdSpiArduinoDriver::activate()+0x7c>)
    871e:	ldr	r1, [r3, #16]
    8720:	ldr	r4, [r0, #0]
    8722:	ands	r1, r4
    8724:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    8726:	str	r1, [r0, #0]
    8728:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    872a:	lsls	r0, r1, #29
    872c:	bpl.n	873c <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    872e:	ldr	r0, [pc, #72]	; (8778 <SdSpiArduinoDriver::activate()+0x80>)
    8730:	ldr	r1, [r3, #20]
    8732:	ldr	r4, [r0, #0]
    8734:	ands	r1, r4
    8736:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    8738:	str	r1, [r0, #0]
    873a:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    873c:	lsls	r1, r1, #28
    873e:	bmi.n	8760 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    8740:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8742:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    8744:	ldr	r1, [r3, #12]
    8746:	cmp	r1, r2
    8748:	beq.n	875a <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    874a:	ldr	r0, [pc, #48]	; (877c <SdSpiArduinoDriver::activate()+0x84>)
    874c:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    874e:	ldr	r1, [pc, #48]	; (8780 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    8750:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    8752:	orr.w	r0, r2, #1073741824	; 0x40000000
    8756:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    8758:	str	r1, [r3, #0]
}
    875a:	ldr.w	r4, [sp], #4
    875e:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    8760:	ldr	r0, [pc, #32]	; (8784 <SdSpiArduinoDriver::activate()+0x8c>)
    8762:	ldr	r1, [r3, #24]
    8764:	ldr	r4, [r0, #0]
    8766:	ands	r1, r4
    8768:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    876a:	str	r1, [r0, #0]
    876c:	b.n	8740 <SdSpiArduinoDriver::activate()+0x48>
    876e:	nop
    8770:	.word	0xe000e180
    8774:	.word	0xe000e184
    8778:	.word	0xe000e188
    877c:	.word	0x003f4001
    8780:	.word	0x803f0000
    8784:	.word	0xe000e18c

00008788 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    8788:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    878a:	ldrb	r3, [r2, #11]
    878c:	cbz	r3, 87bc <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    878e:	lsls	r1, r3, #31
    8790:	bpl.n	879a <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    8792:	ldr	r3, [pc, #44]	; (87c0 <SdSpiArduinoDriver::deactivate()+0x38>)
    8794:	ldr	r1, [r2, #28]
    8796:	str	r1, [r3, #0]
    8798:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    879a:	lsls	r0, r3, #30
    879c:	bpl.n	87a6 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    879e:	ldr	r3, [pc, #36]	; (87c4 <SdSpiArduinoDriver::deactivate()+0x3c>)
    87a0:	ldr	r1, [r2, #32]
    87a2:	str	r1, [r3, #0]
    87a4:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    87a6:	lsls	r1, r3, #29
    87a8:	bpl.n	87b2 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    87aa:	ldr	r3, [pc, #28]	; (87c8 <SdSpiArduinoDriver::deactivate()+0x40>)
    87ac:	ldr	r1, [r2, #36]	; 0x24
    87ae:	str	r1, [r3, #0]
    87b0:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    87b2:	lsls	r3, r3, #28
    87b4:	bpl.n	87bc <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    87b6:	ldr	r3, [pc, #20]	; (87cc <SdSpiArduinoDriver::deactivate()+0x44>)
    87b8:	ldr	r2, [r2, #40]	; 0x28
    87ba:	str	r2, [r3, #0]
    87bc:	bx	lr
    87be:	nop
    87c0:	.word	0xe000e100
    87c4:	.word	0xe000e104
    87c8:	.word	0xe000e108
    87cc:	.word	0xe000e10c

000087d0 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    87d0:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    87d2:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    87d4:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    87d8:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    87da:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    87dc:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    87de:	ldr	r3, [r2, #44]	; 0x2c
    87e0:	cmp	r3, #0
    87e2:	bge.n	87de <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    87e4:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    87e6:	uxtb	r0, r0
    87e8:	bx	lr
    87ea:	nop

000087ec <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    87ec:	push	{r4, r5, r6, lr}
    87ee:	mov	r5, r0
    87f0:	mov	r4, r1
    87f2:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    87f4:	mov	r0, r1
    87f6:	movs	r1, #255	; 0xff
    87f8:	bl	c09c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    87fc:	ldr	r0, [r5, #0]
    87fe:	mov	r3, r6
    8800:	mov	r2, r4
    8802:	mov	r1, r4
    8804:	bl	22a4 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8808:	movs	r0, #0
    880a:	pop	{r4, r5, r6, pc}

0000880c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    880c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    880e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8810:	mov.w	r3, #2147483648	; 0x80000000
    8814:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8816:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8818:	ldr	r3, [r2, #44]	; 0x2c
    881a:	cmp	r3, #0
    881c:	bge.n	8818 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    881e:	ldr	r3, [r2, #56]	; 0x38
    8820:	bx	lr
    8822:	nop

00008824 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8824:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    8826:	subs	r5, r2, #1
    8828:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    882c:	sub.w	sp, sp, #516	; 0x204
    8830:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    8832:	bcc.n	885a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    8834:	cbz	r2, 8854 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    8836:	ldr	r2, [r0, #0]
    8838:	ldr	r2, [r2, #0]
    883a:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    883c:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    8840:	ldrb.w	r3, [r1], #1
    8844:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8846:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8848:	ldr	r3, [r2, #44]	; 0x2c
    884a:	cmp	r3, #0
    884c:	bge.n	8848 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    884e:	cmp	r1, r0
		return port().POPR;
    8850:	ldr	r3, [r2, #56]	; 0x38
    8852:	bne.n	8840 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    8854:	add.w	sp, sp, #516	; 0x204
    8858:	pop	{r4, r5, pc}
    885a:	mov	r5, r0
    885c:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    885e:	mov	r0, sp
    8860:	bl	887c <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8864:	mov	r3, r4
    8866:	mov	r2, sp
    8868:	mov	r1, sp
    886a:	ldr	r0, [r5, #0]
    886c:	bl	22a4 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    8870:	add.w	sp, sp, #516	; 0x204
    8874:	pop	{r4, r5, pc}
    8876:	nop

00008878 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    8878:	b.w	9268 <digitalWrite>

0000887c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    887c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    887e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8882:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8886:	bne.n	8964 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8888:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    888a:	bcc.n	8910 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    888c:	ldr.w	r3, [r1], #4
    8890:	str.w	r3, [r0], #4
    8894:	ldr.w	r3, [r1], #4
    8898:	str.w	r3, [r0], #4
    889c:	ldr.w	r3, [r1], #4
    88a0:	str.w	r3, [r0], #4
    88a4:	ldr.w	r3, [r1], #4
    88a8:	str.w	r3, [r0], #4
    88ac:	ldr.w	r3, [r1], #4
    88b0:	str.w	r3, [r0], #4
    88b4:	ldr.w	r3, [r1], #4
    88b8:	str.w	r3, [r0], #4
    88bc:	ldr.w	r3, [r1], #4
    88c0:	str.w	r3, [r0], #4
    88c4:	ldr.w	r3, [r1], #4
    88c8:	str.w	r3, [r0], #4
    88cc:	ldr.w	r3, [r1], #4
    88d0:	str.w	r3, [r0], #4
    88d4:	ldr.w	r3, [r1], #4
    88d8:	str.w	r3, [r0], #4
    88dc:	ldr.w	r3, [r1], #4
    88e0:	str.w	r3, [r0], #4
    88e4:	ldr.w	r3, [r1], #4
    88e8:	str.w	r3, [r0], #4
    88ec:	ldr.w	r3, [r1], #4
    88f0:	str.w	r3, [r0], #4
    88f4:	ldr.w	r3, [r1], #4
    88f8:	str.w	r3, [r0], #4
    88fc:	ldr.w	r3, [r1], #4
    8900:	str.w	r3, [r0], #4
    8904:	ldr.w	r3, [r1], #4
    8908:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    890c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    890e:	bcs.n	888c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8910:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8912:	bcc.n	8938 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8914:	ldr.w	r3, [r1], #4
    8918:	str.w	r3, [r0], #4
    891c:	ldr.w	r3, [r1], #4
    8920:	str.w	r3, [r0], #4
    8924:	ldr.w	r3, [r1], #4
    8928:	str.w	r3, [r0], #4
    892c:	ldr.w	r3, [r1], #4
    8930:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8934:	subs	r2, #16
	bhs	.Lmid_block_loop
    8936:	bcs.n	8914 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8938:	adds	r2, #12
	blo	.Lcopy_less_than_4
    893a:	bcc.n	8948 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    893c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8940:	str.w	r3, [r0], #4
	subs	r2, #4
    8944:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8946:	bcs.n	893c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8948:	adds	r2, #4
	beq	.Ldone
    894a:	beq.n	895e <memcpy+0xe2>

	lsls	r2, r2, #31
    894c:	lsls	r2, r2, #31
	itt ne
    894e:	itt	ne
	ldrbne  r3, [r1], #1
    8950:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8954:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8958:	bcc.n	895e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    895a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    895c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    895e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8960:	bx	lr
    8962:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8964:	cmp	r2, #8
	blo	.Lbyte_copy
    8966:	bcc.n	8990 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8968:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    896a:	beq.n	8888 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    896c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8970:	beq.n	8888 <memcpy+0xc>

	rsb	r3, #4
    8972:	rsb	r3, r3, #4
	subs	r2, r3
    8976:	subs	r2, r2, r3

	lsls    r3, r3, #31
    8978:	lsls	r3, r3, #31
	itt ne
    897a:	itt	ne
	ldrbne  r3, [r1], #1
    897c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8980:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8984:	bcc.n	8888 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8986:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    898a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    898e:	b.n	8888 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8990:	subs	r2, #4
	blo	.Lcopy_less_than_4
    8992:	bcc.n	8948 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8994:	subs	r2, #1
	ldrb    r3, [r1], #1
    8996:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    899a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    899e:	bcs.n	8994 <memcpy+0x118>

	ldrb	r3, [r1]
    89a0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    89a2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    89a4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    89a6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    89a8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    89aa:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    89ac:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    89ae:	bx	lr

000089b0 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    89b0:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    89b2:	ldr	r5, [pc, #60]	; (89f0 <usb_serial_getchar+0x40>)
    89b4:	ldr	r0, [r5, #0]
    89b6:	cbz	r0, 89d8 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    89b8:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    89ba:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    89bc:	adds	r1, r0, r3
    89be:	adds	r3, #1
	if (i >= rx_packet->len) {
    89c0:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    89c2:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    89c4:	bcs.n	89cc <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    89c6:	strh	r3, [r0, #2]
	}
	return c;
    89c8:	mov	r0, r4
}
    89ca:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    89cc:	bl	9528 <usb_free>
		rx_packet = NULL;
    89d0:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    89d2:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    89d4:	str	r3, [r5, #0]
    89d6:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    89d8:	ldr	r3, [pc, #24]	; (89f4 <usb_serial_getchar+0x44>)
    89da:	ldrb	r3, [r3, #0]
    89dc:	cbz	r3, 89ea <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    89de:	movs	r0, #3
    89e0:	bl	9574 <usb_rx>
    89e4:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    89e6:	cmp	r0, #0
    89e8:	bne.n	89b8 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    89ea:	mov.w	r0, #4294967295
    89ee:	pop	{r3, r4, r5, pc}
    89f0:	.word	0x20019a78
    89f4:	.word	0x20019b68

000089f8 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    89f8:	push	{r4, lr}
	if (!rx_packet) {
    89fa:	ldr	r4, [pc, #36]	; (8a20 <usb_serial_peekchar+0x28>)
    89fc:	ldr	r0, [r4, #0]
    89fe:	cbz	r0, 8a08 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    8a00:	ldrh	r3, [r0, #2]
    8a02:	add	r0, r3
    8a04:	ldrb	r0, [r0, #8]
}
    8a06:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8a08:	ldr	r3, [pc, #24]	; (8a24 <usb_serial_peekchar+0x2c>)
    8a0a:	ldrb	r3, [r3, #0]
    8a0c:	cbz	r3, 8a1a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8a0e:	movs	r0, #3
    8a10:	bl	9574 <usb_rx>
    8a14:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    8a16:	cmp	r0, #0
    8a18:	bne.n	8a00 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8a1a:	mov.w	r0, #4294967295
    8a1e:	pop	{r4, pc}
    8a20:	.word	0x20019a78
    8a24:	.word	0x20019b68

00008a28 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8a28:	ldr	r3, [pc, #16]	; (8a3c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    8a2a:	ldr	r2, [pc, #20]	; (8a40 <usb_serial_available+0x18>)
    8a2c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    8a2e:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8a30:	cbz	r3, 8a3a <usb_serial_available+0x12>
    8a32:	ldrh	r2, [r3, #0]
    8a34:	ldrh	r3, [r3, #2]
    8a36:	subs	r3, r2, r3
    8a38:	add	r0, r3
	return count;
}
    8a3a:	bx	lr
    8a3c:	.word	0x20019a78
    8a40:	.word	0x20019c6c

00008a44 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    8a44:	ldr	r3, [pc, #44]	; (8a74 <usb_serial_flush_input+0x30>)
    8a46:	ldrb	r3, [r3, #0]
    8a48:	cbz	r3, 8a72 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8a4a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    8a4c:	ldr	r4, [pc, #40]	; (8a78 <usb_serial_flush_input+0x34>)
    8a4e:	ldr	r0, [r4, #0]
    8a50:	cbz	r0, 8a66 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    8a52:	bl	9528 <usb_free>
		rx_packet = NULL;
    8a56:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8a58:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8a5a:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8a5c:	bl	9574 <usb_rx>
		if (!rx) break;
    8a60:	cbz	r0, 8a70 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    8a62:	bl	9528 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8a66:	movs	r0, #3
    8a68:	bl	9574 <usb_rx>
		if (!rx) break;
    8a6c:	cmp	r0, #0
    8a6e:	bne.n	8a62 <usb_serial_flush_input+0x1e>
    8a70:	pop	{r4, pc}
    8a72:	bx	lr
    8a74:	.word	0x20019b68
    8a78:	.word	0x20019a78

00008a7c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8a7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8a80:	ldr.w	r9, [pc, #248]	; 8b7c <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8a84:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8a86:	movs	r2, #1
    8a88:	strb.w	r2, [r9]
	while (size > 0) {
    8a8c:	str	r1, [sp, #4]
    8a8e:	cbz	r1, 8aec <usb_serial_write+0x70>
    8a90:	ldr.w	r8, [pc, #236]	; 8b80 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8a94:	ldr	r7, [pc, #216]	; (8b70 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8a96:	ldr	r6, [sp, #4]
    8a98:	mov	fp, r0
		if (!tx_packet) {
    8a9a:	ldr.w	r0, [r8]
    8a9e:	cbz	r0, 8b0e <usb_serial_write+0x92>
    8aa0:	ldr	r5, [pc, #208]	; (8b74 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    8aa2:	ldrh	r4, [r0, #2]
    8aa4:	rsb	r1, r4, #64	; 0x40
    8aa8:	cmp	r1, r6
    8aaa:	it	cs
    8aac:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8aae:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8ab2:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8ab4:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8ab8:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    8aba:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8abc:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    8ac0:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    8ac4:	cbz	r1, 8adc <usb_serial_write+0x60>
    8ac6:	subs	r4, #1
    8ac8:	add	r2, r4
    8aca:	add	r1, fp
    8acc:	ldrb.w	r4, [fp], #1
    8ad0:	strb.w	r4, [r2, #1]!
    8ad4:	cmp	fp, r1
    8ad6:	bne.n	8acc <usb_serial_write+0x50>
    8ad8:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    8adc:	cmp.w	lr, #63	; 0x3f
    8ae0:	bhi.n	8afa <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    8ae2:	ldr	r2, [pc, #148]	; (8b78 <usb_serial_write+0xfc>)
    8ae4:	movs	r1, #5
    8ae6:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8ae8:	cmp	r6, #0
    8aea:	bne.n	8a9a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    8aec:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    8aee:	movs	r3, #0
    8af0:	strb.w	r3, [r9]
	return ret;
}
    8af4:	add	sp, #12
    8af6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    8afa:	movs	r2, #64	; 0x40
    8afc:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8afe:	mov	r1, r0
    8b00:	movs	r0, #4
    8b02:	bl	96a4 <usb_tx>
			tx_packet = NULL;
    8b06:	movs	r2, #0
    8b08:	str.w	r2, [r8]
    8b0c:	b.n	8ae2 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8b0e:	ldrb	r2, [r7, #0]
    8b10:	cbz	r2, 8b5e <usb_serial_write+0xe2>
    8b12:	ldr	r5, [pc, #96]	; (8b74 <usb_serial_write+0xf8>)
    8b14:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    8b18:	mov.w	sl, #1
    8b1c:	b.n	8b2e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8b1e:	subs	r4, #1
    8b20:	beq.n	8b50 <usb_serial_write+0xd4>
    8b22:	ldrb	r2, [r5, #0]
    8b24:	cbnz	r2, 8b50 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    8b26:	bl	a2bc <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8b2a:	ldrb	r2, [r7, #0]
    8b2c:	cbz	r2, 8b5e <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    8b2e:	movs	r0, #4
    8b30:	bl	95b0 <usb_tx_packet_count>
    8b34:	cmp	r0, #7
    8b36:	bhi.n	8b1e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    8b38:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    8b3c:	bl	94e8 <usb_malloc>
    8b40:	str.w	r0, [r8]
					if (tx_packet) break;
    8b44:	cmp	r0, #0
    8b46:	bne.n	8aa2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    8b48:	ldr	r3, [pc, #48]	; (8b7c <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8b4a:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    8b4c:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8b4e:	bne.n	8b22 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    8b50:	movs	r3, #1
					return -1;
    8b52:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    8b56:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8b58:	add	sp, #12
    8b5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8b5e:	movs	r3, #0
					return -1;
    8b60:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8b64:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8b68:	add	sp, #12
    8b6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b6e:	nop
    8b70:	.word	0x20019b68
    8b74:	.word	0x20019a74
    8b78:	.word	0x20019a6c
    8b7c:	.word	0x20019a6d
    8b80:	.word	0x20019a70

00008b84 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8b84:	push	{lr}
    8b86:	sub	sp, #12
    8b88:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    8b8a:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8b8c:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    8b90:	mov	r0, r3
    8b92:	bl	8a7c <usb_serial_write>
}
    8b96:	add	sp, #12
    8b98:	ldr.w	pc, [sp], #4

00008b9c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    8b9c:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    8b9e:	ldr	r5, [pc, #56]	; (8bd8 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8ba0:	ldr	r4, [pc, #56]	; (8bdc <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    8ba2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8ba4:	movs	r3, #1
    8ba6:	strb	r3, [r4, #0]
	if (!tx_packet) {
    8ba8:	cbz	r0, 8bb6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8baa:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    8bac:	movs	r3, #0
    8bae:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8bb0:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    8bb4:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8bb6:	ldr	r3, [pc, #40]	; (8be0 <usb_serial_write_buffer_free+0x44>)
    8bb8:	ldrb	r3, [r3, #0]
    8bba:	cbnz	r3, 8bc2 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    8bbc:	movs	r0, #0
    8bbe:	strb	r0, [r4, #0]
			return 0;
    8bc0:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8bc2:	movs	r0, #4
    8bc4:	bl	95b0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8bc8:	cmp	r0, #7
    8bca:	bhi.n	8bbc <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    8bcc:	bl	94e8 <usb_malloc>
    8bd0:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8bd2:	cmp	r0, #0
    8bd4:	bne.n	8baa <usb_serial_write_buffer_free+0xe>
    8bd6:	b.n	8bbc <usb_serial_write_buffer_free+0x20>
    8bd8:	.word	0x20019a70
    8bdc:	.word	0x20019a6d
    8be0:	.word	0x20019b68

00008be4 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    8be4:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    8be6:	ldr	r3, [pc, #68]	; (8c2c <usb_serial_flush_output+0x48>)
    8be8:	ldrb	r3, [r3, #0]
    8bea:	cbz	r3, 8c10 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    8bec:	ldr	r6, [pc, #64]	; (8c30 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8bee:	ldr	r5, [pc, #68]	; (8c34 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    8bf0:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8bf2:	movs	r7, #1
    8bf4:	strb	r7, [r5, #0]
	if (tx_packet) {
    8bf6:	cbz	r4, 8c12 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    8bf8:	ldr	r2, [pc, #60]	; (8c38 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    8bfa:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    8bfc:	movs	r7, #0
    8bfe:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8c00:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    8c02:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8c04:	movs	r0, #4
    8c06:	bl	96a4 <usb_tx>
		tx_packet = NULL;
    8c0a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    8c0c:	movs	r3, #0
    8c0e:	strb	r3, [r5, #0]
    8c10:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8c12:	bl	94e8 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8c16:	ldr	r3, [pc, #32]	; (8c38 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    8c18:	cbz	r0, 8c26 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    8c1a:	mov	r1, r0
    8c1c:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8c1e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8c20:	bl	96a4 <usb_tx>
    8c24:	b.n	8c0c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8c26:	strb	r7, [r3, #0]
    8c28:	b.n	8c0c <usb_serial_flush_output+0x28>
    8c2a:	nop
    8c2c:	.word	0x20019b68
    8c30:	.word	0x20019a70
    8c34:	.word	0x20019a6d
    8c38:	.word	0x20019a6c

00008c3c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    8c3c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    8c3e:	ldr	r3, [pc, #56]	; (8c78 <usb_serial_flush_callback+0x3c>)
    8c40:	ldrb	r3, [r3, #0]
    8c42:	cbnz	r3, 8c62 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    8c44:	ldr	r4, [pc, #52]	; (8c7c <usb_serial_flush_callback+0x40>)
    8c46:	ldr	r1, [r4, #0]
    8c48:	cbz	r1, 8c64 <usb_serial_flush_callback+0x28>
    8c4a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    8c4e:	ldrh	r3, [r1, #2]
    8c50:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8c52:	movs	r0, #4
    8c54:	bl	96a4 <usb_tx>
		tx_packet = NULL;
    8c58:	str	r5, [r4, #0]
    8c5a:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8c5c:	ldr	r3, [pc, #32]	; (8c80 <usb_serial_flush_callback+0x44>)
    8c5e:	movs	r2, #1
    8c60:	strb	r2, [r3, #0]
    8c62:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8c64:	bl	94e8 <usb_malloc>
		if (tx) {
    8c68:	cmp	r0, #0
    8c6a:	beq.n	8c5c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    8c6c:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    8c6e:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    8c72:	movs	r0, #4
    8c74:	b.w	96a4 <usb_tx>
    8c78:	.word	0x20019a6d
    8c7c:	.word	0x20019a70
    8c80:	.word	0x20019a6c

00008c84 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    8c84:	ldr	r2, [pc, #220]	; (8d64 <wait_for_cal+0xe0>)
    8c86:	ldr	r1, [pc, #224]	; (8d68 <wait_for_cal+0xe4>)
    8c88:	ldr	r3, [r2, #0]
    8c8a:	lsls	r3, r3, #24
    8c8c:	bmi.n	8c88 <wait_for_cal+0x4>
    8c8e:	ldr	r3, [r1, #0]
    8c90:	ands.w	r3, r3, #128	; 0x80
    8c94:	bne.n	8c88 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    8c96:	cpsid	i
	if (calibrating) {
    8c98:	ldr	r1, [pc, #208]	; (8d6c <wait_for_cal+0xe8>)
    8c9a:	ldrb	r2, [r1, #0]
    8c9c:	cmp	r2, #0
    8c9e:	beq.n	8d60 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    8ca0:	ldr	r2, [pc, #204]	; (8d70 <wait_for_cal+0xec>)
    8ca2:	ldr	r0, [pc, #208]	; (8d74 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    8ca4:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    8ca6:	ldr	r4, [pc, #208]	; (8d78 <wait_for_cal+0xf4>)
    8ca8:	ldr	r7, [r2, #0]
    8caa:	ldr	r6, [r0, #0]
    8cac:	ldr	r5, [r4, #0]
    8cae:	ldr	r4, [r2, #12]
    8cb0:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    8cb2:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    8cb4:	adds	r2, #20
    8cb6:	ldr	r0, [r0, #0]
    8cb8:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    8cba:	ldr	r7, [pc, #192]	; (8d7c <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    8cbc:	add	r5, r6
    8cbe:	add	r4, r5
    8cc0:	add	r0, r4
    8cc2:	add	r2, r0
    8cc4:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    8cc8:	ldr	r6, [pc, #180]	; (8d80 <wait_for_cal+0xfc>)
    8cca:	ldr	r0, [pc, #184]	; (8d84 <wait_for_cal+0x100>)
    8ccc:	ldr	r5, [pc, #184]	; (8d88 <wait_for_cal+0x104>)
    8cce:	ldr	r4, [pc, #188]	; (8d8c <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    8cd0:	orr.w	r2, r2, #32768	; 0x8000
    8cd4:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    8cd6:	ldr	r7, [r6, #0]
    8cd8:	ldr	r6, [r0, #0]
    8cda:	ldr	r5, [r5, #0]
    8cdc:	ldr	r2, [pc, #176]	; (8d90 <wait_for_cal+0x10c>)
    8cde:	ldr	r4, [r4, #0]
    8ce0:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    8ce2:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    8ce4:	ldr	r0, [r0, #0]
    8ce6:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    8ce8:	ldr	r7, [pc, #168]	; (8d94 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    8cea:	add	r5, r6
    8cec:	add	r4, r5
    8cee:	add	r0, r4
    8cf0:	add	r2, r0
    8cf2:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    8cf6:	ldr	r6, [pc, #160]	; (8d98 <wait_for_cal+0x114>)
    8cf8:	ldr	r0, [pc, #160]	; (8d9c <wait_for_cal+0x118>)
    8cfa:	ldr	r5, [pc, #164]	; (8da0 <wait_for_cal+0x11c>)
    8cfc:	ldr	r4, [pc, #164]	; (8da4 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    8cfe:	orr.w	r2, r2, #32768	; 0x8000
    8d02:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    8d04:	ldr	r7, [r6, #0]
    8d06:	ldr	r6, [r0, #0]
    8d08:	ldr	r5, [r5, #0]
    8d0a:	ldr	r2, [pc, #156]	; (8da8 <wait_for_cal+0x124>)
    8d0c:	ldr	r4, [r4, #0]
    8d0e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    8d10:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    8d12:	ldr	r0, [r0, #0]
    8d14:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    8d16:	ldr	r7, [pc, #148]	; (8dac <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    8d18:	add	r5, r6
    8d1a:	add	r4, r5
    8d1c:	add	r0, r4
    8d1e:	add	r2, r0
    8d20:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    8d24:	ldr	r6, [pc, #136]	; (8db0 <wait_for_cal+0x12c>)
    8d26:	ldr	r0, [pc, #140]	; (8db4 <wait_for_cal+0x130>)
    8d28:	ldr	r5, [pc, #140]	; (8db8 <wait_for_cal+0x134>)
    8d2a:	ldr	r4, [pc, #144]	; (8dbc <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    8d2c:	orr.w	r2, r2, #32768	; 0x8000
    8d30:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    8d32:	ldr	r7, [r6, #0]
    8d34:	ldr	r6, [r0, #0]
    8d36:	ldr	r5, [r5, #0]
    8d38:	ldr	r2, [pc, #132]	; (8dc0 <wait_for_cal+0x13c>)
    8d3a:	ldr	r4, [r4, #0]
    8d3c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    8d3e:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    8d40:	ldr	r0, [r0, #0]
    8d42:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    8d44:	add	r5, r6
    8d46:	add	r4, r5
    8d48:	add	r0, r4
    8d4a:	add	r2, r0
    8d4c:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    8d50:	ldr	r0, [pc, #112]	; (8dc4 <wait_for_cal+0x140>)
    8d52:	orr.w	r2, r2, #32768	; 0x8000
    8d56:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    8d58:	strb	r3, [r1, #0]
	}
	__enable_irq();
    8d5a:	cpsie	i
}
    8d5c:	pop	{r4, r5, r6, r7}
    8d5e:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    8d60:	cpsie	i
    8d62:	bx	lr
    8d64:	.word	0x4003b024
    8d68:	.word	0x400bb024
    8d6c:	.word	0x20019a7e
    8d70:	.word	0x4003b038
    8d74:	.word	0x4003b03c
    8d78:	.word	0x4003b040
    8d7c:	.word	0x4003b02c
    8d80:	.word	0x4003b058
    8d84:	.word	0x4003b05c
    8d88:	.word	0x4003b060
    8d8c:	.word	0x4003b064
    8d90:	.word	0x4003b06c
    8d94:	.word	0x4003b030
    8d98:	.word	0x400bb038
    8d9c:	.word	0x400bb03c
    8da0:	.word	0x400bb040
    8da4:	.word	0x400bb044
    8da8:	.word	0x400bb04c
    8dac:	.word	0x400bb02c
    8db0:	.word	0x400bb058
    8db4:	.word	0x400bb05c
    8db8:	.word	0x400bb060
    8dbc:	.word	0x400bb064
    8dc0:	.word	0x400bb06c
    8dc4:	.word	0x400bb030

00008dc8 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    8dc8:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8dca:	ldr	r0, [pc, #164]	; (8e70 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8dcc:	ldr	r2, [pc, #164]	; (8e74 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    8dce:	ldr	r3, [pc, #168]	; (8e78 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8dd0:	ldr	r5, [pc, #168]	; (8e7c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8dd2:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8dd4:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8dd6:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8dd8:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    8dda:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8ddc:	ldr	r4, [pc, #160]	; (8e80 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    8dde:	cmp	r3, #8
    8de0:	beq.n	8e44 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8de2:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8de4:	ldr	r0, [pc, #156]	; (8e84 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8de6:	ldr	r1, [pc, #160]	; (8e88 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8de8:	beq.n	8e5a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    8dea:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    8dec:	ite	eq
    8dee:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8df0:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8df2:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8df4:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8df6:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8df8:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8dfa:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8dfc:	ldr	r3, [pc, #140]	; (8e8c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8dfe:	ldr	r1, [pc, #144]	; (8e90 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8e00:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8e02:	ldr	r2, [pc, #144]	; (8e94 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8e04:	cbz	r3, 8e36 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8e06:	movs	r3, #1
    8e08:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8e0a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8e0c:	ldr	r3, [pc, #136]	; (8e98 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8e0e:	ldr	r1, [pc, #140]	; (8e9c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8e10:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8e12:	ldr	r2, [pc, #140]	; (8ea0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    8e14:	cmp	r3, #1
    8e16:	bls.n	8e66 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    8e18:	cmp	r3, #4
    8e1a:	bls.n	8e3c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    8e1c:	cmp	r3, #8
    8e1e:	bls.n	8e5e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    8e20:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8e22:	ite	ls
    8e24:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8e26:	movhi	r3, #135	; 0x87
    8e28:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8e2a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    8e2c:	ldr	r3, [pc, #116]	; (8ea4 <analog_init+0xdc>)
    8e2e:	movs	r2, #1
    8e30:	strb	r2, [r3, #0]
}
    8e32:	pop	{r4, r5}
    8e34:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8e36:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8e38:	str	r3, [r2, #0]
    8e3a:	b.n	8e0c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8e3c:	movs	r3, #132	; 0x84
    8e3e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8e40:	str	r3, [r2, #0]
    8e42:	b.n	8e2c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8e44:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8e48:	ldr	r1, [pc, #60]	; (8e88 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8e4a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8e4c:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8e4e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8e50:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8e52:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8e54:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8e56:	str	r3, [r1, #0]
    8e58:	b.n	8dfc <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8e5a:	movs	r2, #57	; 0x39
    8e5c:	b.n	8e4e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8e5e:	movs	r3, #133	; 0x85
    8e60:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8e62:	str	r3, [r2, #0]
    8e64:	b.n	8e2c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8e66:	movs	r3, #128	; 0x80
    8e68:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8e6a:	str	r3, [r2, #0]
    8e6c:	b.n	8e2c <analog_init+0x64>
    8e6e:	nop
    8e70:	.word	0x40074000
    8e74:	.word	0x40074001
    8e78:	.word	0x200138d5
    8e7c:	.word	0x4003b008
    8e80:	.word	0x4003b00c
    8e84:	.word	0x400bb008
    8e88:	.word	0x400bb00c
    8e8c:	.word	0x20019a81
    8e90:	.word	0x4003b020
    8e94:	.word	0x400bb020
    8e98:	.word	0x200138d6
    8e9c:	.word	0x4003b024
    8ea0:	.word	0x400bb024
    8ea4:	.word	0x20019a7e

00008ea8 <analogReference>:
#define EXTERNAL        1
#endif

void analogReference(uint8_t type)
{
	if (type) {
    8ea8:	cbz	r0, 8ec6 <analogReference+0x1e>
		// internal reference requested
		if (!analog_reference_internal) {
    8eaa:	ldr	r2, [pc, #56]	; (8ee4 <analogReference+0x3c>)
    8eac:	ldrb	r3, [r2, #0]
    8eae:	cbnz	r3, 8ee2 <analogReference+0x3a>
			analog_reference_internal = 1;
			if (calibrating) {
    8eb0:	ldr	r1, [pc, #52]	; (8ee8 <analogReference+0x40>)
    8eb2:	ldrb	r1, [r1, #0]
void analogReference(uint8_t type)
{
	if (type) {
		// internal reference requested
		if (!analog_reference_internal) {
			analog_reference_internal = 1;
    8eb4:	movs	r0, #1
    8eb6:	strb	r0, [r2, #0]
			if (calibrating) {
    8eb8:	cbz	r1, 8ec2 <analogReference+0x1a>
				ADC0_SC3 = 0; // cancel cal
    8eba:	ldr	r1, [pc, #48]	; (8eec <analogReference+0x44>)
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
    8ebc:	ldr	r2, [pc, #48]	; (8ef0 <analogReference+0x48>)
	if (type) {
		// internal reference requested
		if (!analog_reference_internal) {
			analog_reference_internal = 1;
			if (calibrating) {
				ADC0_SC3 = 0; // cancel cal
    8ebe:	str	r3, [r1, #0]
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
    8ec0:	str	r3, [r2, #0]
#endif
			}
			analog_init();
    8ec2:	b.w	8dc8 <analog_init>
		}
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
    8ec6:	ldr	r3, [pc, #28]	; (8ee4 <analogReference+0x3c>)
    8ec8:	ldrb	r2, [r3, #0]
    8eca:	cbz	r2, 8ee2 <analogReference+0x3a>
			analog_reference_internal = 0;
			if (calibrating) {
    8ecc:	ldr	r2, [pc, #24]	; (8ee8 <analogReference+0x40>)
			analog_init();
		}
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
			analog_reference_internal = 0;
    8ece:	strb	r0, [r3, #0]
			if (calibrating) {
    8ed0:	ldrb	r3, [r2, #0]
    8ed2:	cmp	r3, #0
    8ed4:	beq.n	8ec2 <analogReference+0x1a>
				ADC0_SC3 = 0; // cancel cal
    8ed6:	ldr	r2, [pc, #20]	; (8eec <analogReference+0x44>)
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
    8ed8:	ldr	r3, [pc, #20]	; (8ef0 <analogReference+0x48>)
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
			analog_reference_internal = 0;
			if (calibrating) {
				ADC0_SC3 = 0; // cancel cal
    8eda:	str	r0, [r2, #0]
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
    8edc:	str	r0, [r3, #0]
				ADC0_SC3 = 0; // cancel cal
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
#endif
			}
			analog_init();
    8ede:	b.w	8dc8 <analog_init>
    8ee2:	bx	lr
    8ee4:	.word	0x20019a81
    8ee8:	.word	0x20019a7e
    8eec:	.word	0x4003b024
    8ef0:	.word	0x400bb024

00008ef4 <analogReadRes>:

void analogReadRes(unsigned int bits)
{
	unsigned int config;

	if (bits >= 13) {
    8ef4:	cmp	r0, #12
	}
}


void analogReadRes(unsigned int bits)
{
    8ef6:	push	{r4, r5}
	unsigned int config;

	if (bits >= 13) {
    8ef8:	bls.n	8f2a <analogReadRes+0x36>
    8efa:	movs	r3, #16
    8efc:	cmp	r0, r3
    8efe:	it	cs
    8f00:	movcs	r0, r3
		if (bits > 16) bits = 16;
		config = 16;
    8f02:	mov	r4, r3
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
	if (config != analog_config_bits) {
    8f04:	ldr	r2, [pc, #64]	; (8f48 <analogReadRes+0x54>)
	} else if (bits >= 9) {
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
    8f06:	ldr	r5, [pc, #68]	; (8f4c <analogReadRes+0x58>)
	if (config != analog_config_bits) {
    8f08:	ldrb	r1, [r2, #0]
	} else if (bits >= 9) {
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
    8f0a:	subs	r0, r3, r0
	if (config != analog_config_bits) {
    8f0c:	cmp	r4, r1
	} else if (bits >= 9) {
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
    8f0e:	strb	r0, [r5, #0]
	if (config != analog_config_bits) {
    8f10:	beq.n	8f44 <analogReadRes+0x50>
		analog_config_bits = config;
		if (calibrating) {
    8f12:	ldr	r1, [pc, #60]	; (8f50 <analogReadRes+0x5c>)
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
	if (config != analog_config_bits) {
		analog_config_bits = config;
    8f14:	strb	r3, [r2, #0]
		if (calibrating) {
    8f16:	ldrb	r3, [r1, #0]
    8f18:	cbz	r3, 8f24 <analogReadRes+0x30>
			ADC0_SC3 = 0; // cancel cal
    8f1a:	ldr	r1, [pc, #56]	; (8f54 <analogReadRes+0x60>)
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
    8f1c:	ldr	r2, [pc, #56]	; (8f58 <analogReadRes+0x64>)
	}
	analog_right_shift = config - bits;
	if (config != analog_config_bits) {
		analog_config_bits = config;
		if (calibrating) {
			ADC0_SC3 = 0; // cancel cal
    8f1e:	movs	r3, #0
    8f20:	str	r3, [r1, #0]
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
    8f22:	str	r3, [r2, #0]
			#endif
		}
		analog_init();
	}
}
    8f24:	pop	{r4, r5}
			ADC0_SC3 = 0; // cancel cal
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
			#endif
		}
		analog_init();
    8f26:	b.w	8dc8 <analog_init>
	unsigned int config;

	if (bits >= 13) {
		if (bits > 16) bits = 16;
		config = 16;
	} else if (bits >= 11) {
    8f2a:	cmp	r0, #10
    8f2c:	bls.n	8f34 <analogReadRes+0x40>
    8f2e:	movs	r3, #12
		config = 12;
    8f30:	mov	r4, r3
    8f32:	b.n	8f04 <analogReadRes+0x10>
	} else if (bits >= 9) {
    8f34:	cmp	r0, #8
    8f36:	bls.n	8f3e <analogReadRes+0x4a>
    8f38:	movs	r3, #10
		config = 10;
    8f3a:	mov	r4, r3
    8f3c:	b.n	8f04 <analogReadRes+0x10>
    8f3e:	movs	r3, #8
	} else {
		config = 8;
    8f40:	mov	r4, r3
    8f42:	b.n	8f04 <analogReadRes+0x10>
			ADC1_SC3 = 0;
			#endif
		}
		analog_init();
	}
}
    8f44:	pop	{r4, r5}
    8f46:	bx	lr
    8f48:	.word	0x200138d5
    8f4c:	.word	0x20019a7d
    8f50:	.word	0x20019a7e
    8f54:	.word	0x4003b024
    8f58:	.word	0x400bb024

00008f5c <analogReadAveraging>:

void analogReadAveraging(unsigned int num)
{
    8f5c:	push	{r4, lr}

	if (calibrating) wait_for_cal();
    8f5e:	ldr	r3, [pc, #104]	; (8fc8 <analogReadAveraging+0x6c>)
    8f60:	ldrb	r3, [r3, #0]
		analog_init();
	}
}

void analogReadAveraging(unsigned int num)
{
    8f62:	mov	r4, r0

	if (calibrating) wait_for_cal();
    8f64:	cbnz	r3, 8f96 <analogReadAveraging+0x3a>
	if (num <= 1) {
    8f66:	cmp	r4, #1
    8f68:	bls.n	8f9e <analogReadAveraging+0x42>
		num = 0;
		ADC0_SC3 = 0;
	} else if (num <= 4) {
    8f6a:	cmp	r4, #4
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8f6c:	ldr	r3, [pc, #92]	; (8fcc <analogReadAveraging+0x70>)
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8f6e:	ldr	r1, [pc, #96]	; (8fd0 <analogReadAveraging+0x74>)

	if (calibrating) wait_for_cal();
	if (num <= 1) {
		num = 0;
		ADC0_SC3 = 0;
	} else if (num <= 4) {
    8f70:	bls.n	8f88 <analogReadAveraging+0x2c>
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
#endif
	} else if (num <= 8) {
    8f72:	cmp	r4, #8
    8f74:	bls.n	8fb8 <analogReadAveraging+0x5c>
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
#endif
	} else if (num <= 16) {
    8f76:	cmp	r4, #16
    8f78:	bls.n	8faa <analogReadAveraging+0x4e>
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
#endif
	} else {
		num = 32;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8f7a:	movs	r2, #7
    8f7c:	str	r2, [r3, #0]
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8f7e:	str	r2, [r1, #0]
#endif
	}
	analog_num_average = num;
    8f80:	ldr	r2, [pc, #80]	; (8fd4 <analogReadAveraging+0x78>)
#endif
	} else {
		num = 32;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8f82:	movs	r3, #32
#endif
	}
	analog_num_average = num;
    8f84:	strb	r3, [r2, #0]
    8f86:	pop	{r4, pc}
	if (num <= 1) {
		num = 0;
		ADC0_SC3 = 0;
	} else if (num <= 4) {
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8f88:	movs	r2, #4
    8f8a:	str	r2, [r3, #0]
    8f8c:	mov	r3, r2
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8f8e:	str	r2, [r1, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#endif
	}
	analog_num_average = num;
    8f90:	ldr	r2, [pc, #64]	; (8fd4 <analogReadAveraging+0x78>)
    8f92:	strb	r3, [r2, #0]
    8f94:	pop	{r4, pc}
}

void analogReadAveraging(unsigned int num)
{

	if (calibrating) wait_for_cal();
    8f96:	bl	8c84 <wait_for_cal>
	if (num <= 1) {
    8f9a:	cmp	r4, #1
    8f9c:	bhi.n	8f6a <analogReadAveraging+0xe>
		num = 0;
		ADC0_SC3 = 0;
    8f9e:	ldr	r2, [pc, #44]	; (8fcc <analogReadAveraging+0x70>)
    8fa0:	movs	r3, #0
    8fa2:	str	r3, [r2, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#endif
	}
	analog_num_average = num;
    8fa4:	ldr	r2, [pc, #44]	; (8fd4 <analogReadAveraging+0x78>)
    8fa6:	strb	r3, [r2, #0]
    8fa8:	pop	{r4, pc}
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
#endif
	} else if (num <= 16) {
		num = 16;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8faa:	movs	r2, #6
    8fac:	str	r2, [r3, #0]
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8fae:	str	r2, [r1, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#endif
	}
	analog_num_average = num;
    8fb0:	ldr	r2, [pc, #32]	; (8fd4 <analogReadAveraging+0x78>)
    8fb2:	movs	r3, #16
    8fb4:	strb	r3, [r2, #0]
    8fb6:	pop	{r4, pc}
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
#endif
	} else if (num <= 8) {
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8fb8:	movs	r2, #5
    8fba:	str	r2, [r3, #0]
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8fbc:	str	r2, [r1, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#endif
	}
	analog_num_average = num;
    8fbe:	ldr	r2, [pc, #20]	; (8fd4 <analogReadAveraging+0x78>)
    8fc0:	movs	r3, #8
    8fc2:	strb	r3, [r2, #0]
    8fc4:	pop	{r4, pc}
    8fc6:	nop
    8fc8:	.word	0x20019a7e
    8fcc:	.word	0x4003b024
    8fd0:	.word	0x400bb024
    8fd4:	.word	0x200138d6

00008fd8 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    8fd8:	cmp	r0, #71	; 0x47
    8fda:	bhi.n	903c <analogRead+0x64>
	channel = pin2sc1a[pin];
    8fdc:	ldr	r3, [pc, #204]	; (90ac <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    8fde:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    8fe2:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    8fe4:	cmp	r6, #255	; 0xff
    8fe6:	beq.n	9040 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    8fe8:	ldr	r3, [pc, #196]	; (90b0 <analogRead+0xd8>)
    8fea:	ldrb	r3, [r3, #0]
    8fec:	cmp	r3, #0
    8fee:	bne.n	9046 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    8ff0:	lsls	r2, r6, #24
    8ff2:	bmi.n	904e <analogRead+0x76>
#endif

	__disable_irq();
    8ff4:	cpsid	i
    8ff6:	ldr	r5, [pc, #188]	; (90b4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    8ff8:	ldr	r4, [pc, #188]	; (90b8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    8ffa:	mov	r7, r5
    8ffc:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    8ffe:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    9000:	strb	r3, [r5, #0]
	__enable_irq();
    9002:	cpsie	i
	while (1) {
		__disable_irq();
    9004:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    9006:	ldr	r3, [r4, #0]
    9008:	lsls	r3, r3, #24
    900a:	bmi.n	9026 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    900c:	ldrb	r3, [r7, #0]
    900e:	cbnz	r3, 9018 <analogRead+0x40>
    9010:	b.n	8ffc <analogRead+0x24>
    9012:	ldrb	r3, [r5, #0]
    9014:	cmp	r3, #0
    9016:	beq.n	8ffc <analogRead+0x24>
		__enable_irq();
    9018:	cpsie	i
		yield();
    901a:	bl	a2bc <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    901e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    9020:	ldr	r3, [r4, #0]
    9022:	lsls	r0, r3, #24
    9024:	bpl.n	9012 <analogRead+0x3a>
			result = ADC0_RA;
    9026:	ldr	r3, [pc, #148]	; (90bc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    9028:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    902a:	movs	r2, #0
    902c:	strb	r2, [r5, #0]
			__enable_irq();
    902e:	cpsie	i
			result >>= analog_right_shift;
    9030:	ldr	r2, [pc, #140]	; (90c0 <analogRead+0xe8>)
    9032:	ldrb	r0, [r2, #0]
    9034:	asr.w	r0, r3, r0
			return result;
    9038:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    903c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    903e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    9040:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    9042:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    9046:	bl	8c84 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    904a:	lsls	r2, r6, #24
    904c:	bpl.n	8ff4 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    904e:	cpsid	i
    9050:	ldr	r5, [pc, #112]	; (90c4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    9052:	ldr.w	r8, [pc, #124]	; 90d0 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    9056:	ldr	r4, [pc, #112]	; (90c8 <analogRead+0xf0>)
    9058:	and.w	r7, r6, #64	; 0x40
    905c:	uxtb	r7, r7
    905e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    9062:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    9066:	cbz	r7, 90a0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    9068:	bic.w	r3, r3, #16
    906c:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    9070:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    9072:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    9074:	ldr	r2, [pc, #76]	; (90c4 <analogRead+0xec>)
    9076:	strb	r3, [r5, #0]
	__enable_irq();
    9078:	cpsie	i
	while (1) {
		__disable_irq();
    907a:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    907c:	ldr	r3, [r4, #0]
    907e:	lsls	r1, r3, #24
    9080:	bmi.n	909c <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    9082:	ldrb	r3, [r2, #0]
    9084:	cbnz	r3, 908e <analogRead+0xb6>
    9086:	b.n	9062 <analogRead+0x8a>
    9088:	ldrb	r3, [r5, #0]
    908a:	cmp	r3, #0
    908c:	beq.n	9062 <analogRead+0x8a>
		__enable_irq();
    908e:	cpsie	i
		yield();
    9090:	bl	a2bc <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    9094:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    9096:	ldr	r3, [r4, #0]
    9098:	lsls	r3, r3, #24
    909a:	bpl.n	9088 <analogRead+0xb0>
			result = ADC1_RA;
    909c:	ldr	r3, [pc, #44]	; (90cc <analogRead+0xf4>)
    909e:	b.n	9028 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    90a0:	orr.w	r3, r3, #16
    90a4:	str.w	r3, [r8]
    90a8:	b.n	9070 <analogRead+0x98>
    90aa:	nop
    90ac:	.word	0x00013448
    90b0:	.word	0x20019a7e
    90b4:	.word	0x20019a80
    90b8:	.word	0x4003b000
    90bc:	.word	0x4003b010
    90c0:	.word	0x20019a7d
    90c4:	.word	0x20019a7f
    90c8:	.word	0x400bb000
    90cc:	.word	0x400bb010
    90d0:	.word	0x400bb00c

000090d4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    90d4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    90d6:	ldr	r4, [pc, #64]	; (9118 <fault_isr+0x44>)
    90d8:	b.n	90ec <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    90da:	ldr	r3, [r4, #0]
    90dc:	lsls	r1, r3, #21
    90de:	bmi.n	90fc <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    90e0:	ldr	r3, [r4, #0]
    90e2:	lsls	r2, r3, #20
    90e4:	bmi.n	9106 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    90e6:	ldr	r3, [r4, #0]
    90e8:	lsls	r3, r3, #19
    90ea:	bmi.n	9110 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    90ec:	ldr	r3, [r4, #0]
    90ee:	lsls	r0, r3, #13
    90f0:	bpl.n	90da <fault_isr+0x6>
    90f2:	bl	9728 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    90f6:	ldr	r3, [r4, #0]
    90f8:	lsls	r1, r3, #21
    90fa:	bpl.n	90e0 <fault_isr+0xc>
    90fc:	bl	911c <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9100:	ldr	r3, [r4, #0]
    9102:	lsls	r2, r3, #20
    9104:	bpl.n	90e6 <fault_isr+0x12>
    9106:	bl	911c <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    910a:	ldr	r3, [r4, #0]
    910c:	lsls	r3, r3, #19
    910e:	bpl.n	90ec <fault_isr+0x18>
    9110:	bl	911c <unused_isr>
    9114:	b.n	90ec <fault_isr+0x18>
    9116:	nop
    9118:	.word	0x40048034

0000911c <unused_isr>:
	}
}

void unused_isr(void)
{
    911c:	push	{r3, lr}
	fault_isr();
    911e:	bl	90d4 <fault_isr>
    9122:	nop

00009124 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9124:	ldr	r3, [pc, #4]	; (912c <startup_early_hook+0x8>)
    9126:	movs	r2, #16
    9128:	strh	r2, [r3, #0]
    912a:	bx	lr
    912c:	.word	0x40052000

00009130 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    9130:	bx	lr
    9132:	nop

00009134 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9134:	ldr	r1, [pc, #36]	; (915c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    9136:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    9138:	ldr	r3, [r1, #0]
	if (incr != 0) {
    913a:	cbz	r0, 914a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    913c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    913e:	add	r0, r3
    9140:	sub.w	r2, r2, #8192	; 0x2000
    9144:	cmp	r0, r2
    9146:	bcs.n	914e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9148:	str	r0, [r1, #0]
	}
	return prev;
    914a:	mov	r0, r3
}
    914c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    914e:	bl	b85c <__errno>
    9152:	movs	r3, #12
    9154:	str	r3, [r0, #0]
			return (void *)-1;
    9156:	mov.w	r0, #4294967295
    915a:	pop	{r3, pc}
    915c:	.word	0x200138d8

00009160 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    9160:	b.n	9160 <__cxa_pure_virtual>
    9162:	nop

00009164 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9164:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9166:	ldr	r3, [pc, #68]	; (91ac <digitalWrite.part.1+0x48>)
    9168:	ldr.w	r2, [r3, r0, lsl #3]
    916c:	ldrb.w	r4, [r2, #640]	; 0x280
    9170:	cbz	r4, 9180 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    9172:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9174:	cbz	r1, 9196 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    9176:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    917a:	ldr.w	r4, [sp], #4
    917e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9180:	add.w	r3, r3, r0, lsl #3
    9184:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9186:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    9188:	cbnz	r1, 91a0 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    918a:	bic.w	r2, r2, #2
    918e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9190:	ldr.w	r4, [sp], #4
    9194:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    9196:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    919a:	ldr.w	r4, [sp], #4
    919e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    91a0:	orr.w	r2, r2, #3
    91a4:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    91a6:	ldr.w	r4, [sp], #4
    91aa:	bx	lr
    91ac:	.word	0x00013490

000091b0 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    91b0:	ldr	r2, [pc, #112]	; (9224 <pinMode.part.2+0x74>)
    91b2:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    91b6:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    91b8:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    91ba:	beq.n	91e0 <pinMode.part.2+0x30>
    91bc:	cmp	r1, #4
    91be:	beq.n	91f8 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    91c0:	ldr.w	r0, [r2, r0, lsl #3]
    91c4:	movs	r2, #0
    91c6:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    91ca:	cbz	r1, 91d8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    91cc:	cmp	r1, #2
    91ce:	beq.n	9212 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    91d0:	cmp	r1, #3
    91d2:	beq.n	921a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    91d4:	str	r2, [r3, #0]
    91d6:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    91d8:	mov.w	r2, #256	; 0x100
    91dc:	str	r2, [r3, #0]
    91de:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    91e0:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    91e4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    91e8:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    91ec:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    91ee:	ldr	r2, [r3, #0]
    91f0:	bic.w	r2, r2, #32
    91f4:	str	r2, [r3, #0]
    91f6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    91f8:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    91fc:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9200:	movs	r0, #1
    9202:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9206:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    9208:	ldr	r2, [r3, #0]
    920a:	orr.w	r2, r2, #32
    920e:	str	r2, [r3, #0]
    9210:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    9212:	movw	r2, #259	; 0x103
    9216:	str	r2, [r3, #0]
    9218:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    921a:	mov.w	r2, #258	; 0x102
    921e:	str	r2, [r3, #0]
    9220:	bx	lr
    9222:	nop
    9224:	.word	0x00013490

00009228 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9228:	adds	r0, #16
    922a:	ldr	r3, [pc, #8]	; (9234 <attachInterruptVector+0xc>)
    922c:	str.w	r1, [r3, r0, lsl #2]
    9230:	bx	lr
    9232:	nop
    9234:	.word	0x20013200

00009238 <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    9238:	ldr	r3, [pc, #4]	; (9240 <rtc_get+0x8>)
    923a:	ldr	r0, [r3, #0]
}
    923c:	bx	lr
    923e:	nop
    9240:	.word	0x4003d000

00009244 <rtc_set>:

void rtc_set(unsigned long t)
{
    9244:	push	{r4, r5}
	RTC_SR = 0;
    9246:	ldr	r3, [pc, #20]	; (925c <rtc_set+0x18>)
	RTC_TPR = 0;
    9248:	ldr	r5, [pc, #20]	; (9260 <rtc_set+0x1c>)
	RTC_TSR = t;
    924a:	ldr	r4, [pc, #24]	; (9264 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    924c:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    924e:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9250:	str	r2, [r3, #0]
	RTC_TPR = 0;
    9252:	str	r2, [r5, #0]
	RTC_TSR = t;
    9254:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    9256:	str	r1, [r3, #0]
}
    9258:	pop	{r4, r5}
    925a:	bx	lr
    925c:	.word	0x4003d014
    9260:	.word	0x4003d004
    9264:	.word	0x4003d000

00009268 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9268:	cmp	r0, #63	; 0x3f
    926a:	bhi.n	9270 <digitalWrite+0x8>
    926c:	b.w	9164 <digitalWrite.part.1>
    9270:	bx	lr
    9272:	nop

00009274 <digitalRead>:
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    9274:	cmp	r0, #63	; 0x3f
    9276:	bhi.n	9286 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    9278:	ldr	r3, [pc, #16]	; (928c <digitalRead+0x18>)
    927a:	ldr.w	r3, [r3, r0, lsl #3]
    927e:	ldrb.w	r0, [r3, #512]	; 0x200
    9282:	uxtb	r0, r0
    9284:	bx	lr
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    9286:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    9288:	bx	lr
    928a:	nop
    928c:	.word	0x00013490

00009290 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    9290:	cmp	r0, #63	; 0x3f
    9292:	bhi.n	9298 <pinMode+0x8>
    9294:	b.w	91b0 <pinMode.part.2>
    9298:	bx	lr
    929a:	nop

0000929c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    929c:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    929e:	ldr	r1, [pc, #48]	; (92d0 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    92a0:	ldr	r3, [pc, #48]	; (92d4 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    92a2:	ldr	r2, [pc, #52]	; (92d8 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    92a4:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    92a6:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    92a8:	ldr	r2, [r2, #0]
	__enable_irq();
    92aa:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    92ac:	lsls	r2, r2, #5
    92ae:	bpl.n	92b6 <micros+0x1a>
    92b0:	cmp	r3, #50	; 0x32
    92b2:	it	hi
    92b4:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    92b6:	ldr	r1, [pc, #36]	; (92dc <micros+0x40>)
    92b8:	rsb	r3, r3, #95744	; 0x17600
    92bc:	mov.w	r2, #1000	; 0x3e8
    92c0:	adds	r3, #255	; 0xff
    92c2:	umull	r1, r3, r1, r3
    92c6:	mul.w	r0, r2, r0
}
    92ca:	add.w	r0, r0, r3, lsr #6
    92ce:	bx	lr
    92d0:	.word	0x20019a84
    92d4:	.word	0xe000e018
    92d8:	.word	0xe000ed04
    92dc:	.word	0xaaaaaaab

000092e0 <delay>:

void delay(uint32_t ms)
{
    92e0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92e4:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    92e6:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    92e8:	ldr	r7, [pc, #128]	; (936c <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    92ea:	ldr	r3, [pc, #132]	; (9370 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    92ec:	ldr	r2, [pc, #132]	; (9374 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    92ee:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    92f0:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    92f2:	ldr	r2, [r2, #0]
	__enable_irq();
    92f4:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    92f6:	lsls	r2, r2, #5
    92f8:	bpl.n	9300 <delay+0x20>
    92fa:	cmp	r3, #50	; 0x32
    92fc:	it	hi
    92fe:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    9300:	cbz	r5, 9368 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9302:	rsb	r3, r3, #95744	; 0x17600
    9306:	ldr	r6, [pc, #112]	; (9378 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9308:	ldr.w	r9, [pc, #100]	; 9370 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    930c:	ldr.w	r8, [pc, #100]	; 9374 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9310:	adds	r3, #255	; 0xff
    9312:	mov.w	r2, #1000	; 0x3e8
    9316:	umull	r1, r3, r6, r3
    931a:	mul.w	r4, r2, r4
    931e:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9322:	cpsid	i
	current = SYST_CVR;
    9324:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9328:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    932a:	ldr.w	lr, [r8]
	__enable_irq();
    932e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9330:	rsb	r3, r1, #95744	; 0x17600
    9334:	adds	r3, #255	; 0xff
    9336:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    933a:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    933e:	rsb	r3, r4, r3, lsr #6
    9342:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9346:	beq.n	934e <delay+0x6e>
    9348:	cmp	r1, #50	; 0x32
    934a:	it	hi
    934c:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    934e:	mla	r3, r0, r2, r3
    9352:	cmp.w	r3, #1000	; 0x3e8
    9356:	bcc.n	9362 <delay+0x82>
				ms--;
				if (ms == 0) return;
    9358:	subs	r5, #1
    935a:	beq.n	9368 <delay+0x88>
				start += 1000;
    935c:	add.w	r4, r4, #1000	; 0x3e8
    9360:	b.n	9322 <delay+0x42>
			}
			yield();
    9362:	bl	a2bc <yield>
		}
    9366:	b.n	9322 <delay+0x42>
    9368:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    936c:	.word	0x20019a84
    9370:	.word	0xe000e018
    9374:	.word	0xe000ed04
    9378:	.word	0xaaaaaaab

0000937c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    937c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    937e:	ldr	r3, [pc, #312]	; (94b8 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9380:	ldr	r0, [pc, #312]	; (94bc <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    9382:	ldr.w	ip, [pc, #348]	; 94e0 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9386:	ldr	r4, [pc, #312]	; (94c0 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    9388:	ldr	r1, [pc, #312]	; (94c4 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    938a:	ldr.w	lr, [pc, #344]	; 94e4 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    938e:	ldr	r6, [pc, #312]	; (94c8 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    9390:	ldr	r5, [pc, #312]	; (94cc <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    9392:	ldr	r7, [pc, #316]	; (94d0 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9394:	mov.w	r2, #134217728	; 0x8000000
    9398:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    939a:	mov.w	r2, #268435456	; 0x10000000
    939e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    93a0:	mov.w	r2, #536870912	; 0x20000000
    93a4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    93a6:	mov.w	r2, #1073741824	; 0x40000000
    93aa:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    93ac:	mov.w	r2, #2147483648	; 0x80000000
    93b0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    93b2:	movs	r2, #0
    93b4:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    93b6:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    93b8:	movw	r0, #49151	; 0xbfff
    93bc:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    93c0:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    93c4:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    93c6:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    93ca:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    93cc:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    93ce:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    93d0:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    93d4:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    93d6:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    93da:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    93dc:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    93e0:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    93e2:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    93e6:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    93ea:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    93ee:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    93f2:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    93f6:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    93f8:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    93fc:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    93fe:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9400:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    9402:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9406:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9408:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    940a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    940c:	ldr	r4, [pc, #196]	; (94d4 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    940e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    9410:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9412:	movs	r1, #9
    9414:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9416:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    941a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    941e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    9420:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9422:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9424:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9426:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    9428:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    942a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    942e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    9432:	add.w	r7, r7, #520192	; 0x7f000
    9436:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9438:	addw	r4, r4, #2044	; 0x7fc
    943c:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    943e:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    9440:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    9442:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9444:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9448:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    944a:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    944e:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    9452:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9454:	sub.w	r4, r4, #460800	; 0x70800
    9458:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    945c:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    945e:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9460:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9464:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9466:	ldr	r0, [pc, #112]	; (94d8 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9468:	orr.w	r1, r1, #512	; 0x200
    946c:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    946e:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9470:	ldr	r4, [pc, #104]	; (94dc <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    9472:	add.w	lr, lr, #65280	; 0xff00
    9476:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    947a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    947e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9482:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9486:	orr.w	r1, r1, #33554432	; 0x2000000
    948a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    948c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    9490:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9494:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    9496:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9498:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    949a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    949c:	str	r2, [r4, #0]
#endif
	analog_init();
    949e:	bl	8dc8 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    94a2:	movs	r0, #25
    94a4:	bl	92e0 <delay>
	usb_init();
    94a8:	bl	a1f4 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    94ac:	movw	r0, #275	; 0x113
}
    94b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    94b4:	b.w	92e0 <delay>
    94b8:	.word	0xe000e104
    94bc:	.word	0x40038004
    94c0:	.word	0x40038014
    94c4:	.word	0x4003801c
    94c8:	.word	0x40038024
    94cc:	.word	0x4003802c
    94d0:	.word	0x40038034
    94d4:	.word	0x40038000
    94d8:	.word	0x40048004
    94dc:	.word	0x400c9000
    94e0:	.word	0x40038008
    94e4:	.word	0x4003800c

000094e8 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    94e8:	cpsid	i
	avail = usb_buffer_available;
    94ea:	ldr	r0, [pc, #52]	; (9520 <usb_malloc+0x38>)
    94ec:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    94ee:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    94f2:	cmp	r3, #11
    94f4:	bgt.n	9518 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    94f6:	mov.w	r1, #2147483648	; 0x80000000
    94fa:	lsrs	r1, r3
    94fc:	bic.w	r2, r2, r1
    9500:	str	r2, [r0, #0]
	__enable_irq();
    9502:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9504:	ldr	r0, [pc, #28]	; (9524 <usb_malloc+0x3c>)
    9506:	add.w	r3, r3, r3, lsl #3
    950a:	lsls	r3, r3, #3
    950c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    950e:	movs	r1, #0
    9510:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    9512:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9514:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9516:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9518:	cpsie	i
		return NULL;
    951a:	movs	r0, #0
    951c:	bx	lr
    951e:	nop
    9520:	.word	0x200138dc
    9524:	.word	0x200133d0

00009528 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9528:	ldr	r3, [pc, #52]	; (9560 <usb_free+0x38>)
    952a:	ldr	r2, [pc, #56]	; (9564 <usb_free+0x3c>)
    952c:	subs	r3, r0, r3
    952e:	umull	r2, r3, r2, r3
    9532:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9534:	cmp	r3, #11
    9536:	bhi.n	9552 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9538:	ldr	r2, [pc, #44]	; (9568 <usb_free+0x40>)
    953a:	ldrb	r2, [r2, #0]
    953c:	cbnz	r2, 9554 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    953e:	cpsid	i
	usb_buffer_available |= mask;
    9540:	ldr	r0, [pc, #40]	; (956c <usb_free+0x44>)
    9542:	mov.w	r1, #2147483648	; 0x80000000
    9546:	ldr	r2, [r0, #0]
    9548:	lsr.w	r3, r1, r3
    954c:	orrs	r2, r3
    954e:	str	r2, [r0, #0]
	__enable_irq();
    9550:	cpsie	i
    9552:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9554:	ldr	r2, [pc, #24]	; (9570 <usb_free+0x48>)
    9556:	ldrb	r2, [r2, #0]
    9558:	cmp	r2, #0
    955a:	beq.n	953e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    955c:	b.w	95dc <usb_rx_memory>
    9560:	.word	0x200133d0
    9564:	.word	0x38e38e39
    9568:	.word	0x20019b5d
    956c:	.word	0x200138dc
    9570:	.word	0x20019b68

00009574 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9574:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9576:	cmp	r3, #3
    9578:	bhi.n	95a4 <usb_rx+0x30>
	__disable_irq();
    957a:	cpsid	i
	ret = rx_first[endpoint];
    957c:	ldr	r1, [pc, #40]	; (95a8 <usb_rx+0x34>)
    957e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9582:	cbz	r0, 95a0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9584:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9586:	ldr	r4, [pc, #36]	; (95ac <usb_rx+0x38>)
    9588:	ldrh	r5, [r0, #0]
    958a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    958e:	ldr	r6, [r0, #4]
    9590:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9594:	subs	r2, r2, r5
    9596:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    959a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    959c:	pop	{r4, r5, r6}
    959e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    95a0:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    95a2:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    95a4:	movs	r0, #0
    95a6:	bx	lr
    95a8:	.word	0x20019ae0
    95ac:	.word	0x20019c6c

000095b0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    95b0:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    95b2:	cmp	r0, #3
    95b4:	bhi.n	95ce <usb_tx_packet_count+0x1e>
	__disable_irq();
    95b6:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    95b8:	ldr	r3, [pc, #28]	; (95d8 <usb_tx_packet_count+0x28>)
    95ba:	ldr.w	r3, [r3, r0, lsl #2]
    95be:	cbz	r3, 95d2 <usb_tx_packet_count+0x22>
    95c0:	movs	r0, #0
    95c2:	ldr	r3, [r3, #4]
    95c4:	adds	r0, #1
    95c6:	cmp	r3, #0
    95c8:	bne.n	95c2 <usb_tx_packet_count+0x12>
	__enable_irq();
    95ca:	cpsie	i
	return count;
    95cc:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    95ce:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    95d0:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    95d2:	mov	r0, r3
    95d4:	b.n	95ca <usb_tx_packet_count+0x1a>
    95d6:	nop
    95d8:	.word	0x20019b34

000095dc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    95dc:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    95de:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    95e0:	ldr	r2, [pc, #172]	; (9690 <usb_rx_memory+0xb4>)
    95e2:	ldrb	r3, [r2, #0]
    95e4:	lsls	r5, r3, #28
    95e6:	bpl.n	95f6 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    95e8:	ldr	r3, [pc, #168]	; (9694 <usb_rx_memory+0xb8>)
    95ea:	ldr	r1, [r3, #32]
    95ec:	cmp	r1, #0
    95ee:	beq.n	965e <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    95f0:	ldr	r1, [r3, #40]	; 0x28
    95f2:	cmp	r1, #0
    95f4:	beq.n	967a <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    95f6:	ldrb	r3, [r2, #1]
    95f8:	lsls	r4, r3, #28
    95fa:	bpl.n	960a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    95fc:	ldr	r3, [pc, #148]	; (9694 <usb_rx_memory+0xb8>)
    95fe:	ldr	r1, [r3, #64]	; 0x40
    9600:	cmp	r1, #0
    9602:	beq.n	9682 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9604:	ldr	r1, [r3, #72]	; 0x48
    9606:	cmp	r1, #0
    9608:	beq.n	967e <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    960a:	ldrb	r3, [r2, #2]
    960c:	lsls	r1, r3, #28
    960e:	bpl.n	961c <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9610:	ldr	r3, [pc, #128]	; (9694 <usb_rx_memory+0xb8>)
    9612:	ldr	r1, [r3, #96]	; 0x60
    9614:	cmp	r1, #0
    9616:	beq.n	9686 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9618:	ldr	r1, [r3, #104]	; 0x68
    961a:	cbz	r1, 9640 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    961c:	ldrb	r3, [r2, #3]
    961e:	lsls	r3, r3, #28
    9620:	bpl.n	9632 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9622:	ldr	r3, [pc, #112]	; (9694 <usb_rx_memory+0xb8>)
    9624:	ldr.w	r2, [r3, #128]	; 0x80
    9628:	cbz	r2, 968a <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    962a:	ldr.w	r2, [r3, #136]	; 0x88
    962e:	movs	r1, #17
    9630:	cbz	r2, 9642 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9632:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9634:	ldr	r3, [pc, #96]	; (9698 <usb_rx_memory+0xbc>)
    9636:	movs	r2, #0
    9638:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    963a:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    963c:	b.w	9528 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9640:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9642:	ldr	r4, [pc, #84]	; (9698 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9644:	ldr	r5, [pc, #84]	; (969c <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    9646:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9648:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    964c:	add.w	r3, r3, r1, lsl #3
    9650:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9652:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9654:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9656:	strb	r2, [r4, #0]
				__enable_irq();
    9658:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    965a:	pop	{r4, r5}
    965c:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    965e:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9660:	ldr	r4, [pc, #52]	; (9698 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9662:	ldr	r5, [pc, #60]	; (96a0 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    9664:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9666:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    966a:	add.w	r3, r3, r2, lsl #3
    966e:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9670:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9672:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9674:	strb	r2, [r4, #0]
				__enable_irq();
    9676:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9678:	b.n	965a <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    967a:	movs	r1, #5
    967c:	b.n	9642 <usb_rx_memory+0x66>
    967e:	movs	r1, #9
    9680:	b.n	9642 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9682:	movs	r2, #8
    9684:	b.n	9660 <usb_rx_memory+0x84>
    9686:	movs	r2, #12
    9688:	b.n	9660 <usb_rx_memory+0x84>
    968a:	movs	r2, #16
    968c:	b.n	9660 <usb_rx_memory+0x84>
    968e:	nop
    9690:	.word	0x000136bc
    9694:	.word	0x1fff0000
    9698:	.word	0x20019b5d
    969c:	.word	0x004000c8
    96a0:	.word	0x00400088

000096a4 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    96a4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    96a6:	cmp	r3, #3
    96a8:	bhi.n	96e6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    96aa:	ldr	r2, [pc, #108]	; (9718 <usb_tx+0x74>)
    96ac:	lsls	r0, r0, #5
    96ae:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    96b2:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    96b4:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    96b6:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    96b8:	ldr	r4, [pc, #96]	; (971c <usb_tx+0x78>)
    96ba:	ldrb	r2, [r4, r3]
    96bc:	cmp	r2, #3
    96be:	bhi.n	96f8 <usb_tx+0x54>
    96c0:	tbb	[pc, r2]
    96c4:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    96c8:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    96ca:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    96cc:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    96ce:	tst.w	r0, #8
    96d2:	ite	ne
    96d4:	movne	r3, #200	; 0xc8
    96d6:	moveq	r3, #136	; 0x88
    96d8:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    96dc:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    96de:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    96e0:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    96e2:	cpsie	i
}
    96e4:	pop	{r4, r5}
    96e6:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    96e8:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    96ea:	movs	r2, #2
		break;
    96ec:	b.n	96ca <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    96ee:	movs	r2, #5
    96f0:	b.n	96ca <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    96f2:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    96f4:	movs	r2, #4
		break;
    96f6:	b.n	96ca <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    96f8:	ldr	r2, [pc, #36]	; (9720 <usb_tx+0x7c>)
    96fa:	ldr.w	r0, [r2, r3, lsl #2]
    96fe:	cbz	r0, 9710 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    9700:	ldr	r2, [pc, #32]	; (9724 <usb_tx+0x80>)
    9702:	ldr.w	r0, [r2, r3, lsl #2]
    9706:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9708:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    970c:	cpsie	i
		return;
    970e:	b.n	96e4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    9710:	str.w	r1, [r2, r3, lsl #2]
    9714:	ldr	r2, [pc, #12]	; (9724 <usb_tx+0x80>)
    9716:	b.n	9708 <usb_tx+0x64>
    9718:	.word	0x1fff0000
    971c:	.word	0x20019b6c
    9720:	.word	0x20019b34
    9724:	.word	0x20019b44

00009728 <usb_isr>:
}



void usb_isr(void)
{
    9728:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    972c:	ldr.w	fp, [pc, #792]	; 9a48 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    9730:	ldr.w	sl, [pc, #792]	; 9a4c <usb_isr+0x324>
}



void usb_isr(void)
{
    9734:	sub	sp, #28
    9736:	b.n	97c2 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9738:	ldr	r7, [pc, #696]	; (99f4 <usb_isr+0x2cc>)
    973a:	mov.w	r8, r3, lsr #2
    973e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9742:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9744:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9748:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    974c:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    974e:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9752:	and.w	r4, r3, #255	; 0xff
    9756:	cmp	r3, #0
    9758:	bne.w	9964 <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    975c:	ldr.w	r3, [r7, r8, lsl #3]
    9760:	lsrs	r3, r3, #16
    9762:	uxth	r1, r3
    9764:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    9768:	cmp	r3, #0
    976a:	beq.w	9952 <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    976e:	ldr	r3, [pc, #648]	; (99f8 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    9770:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    9774:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    9778:	ldr.w	r2, [r3, r6, lsl #2]
    977c:	cmp	r2, #0
    977e:	beq.w	9a5e <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    9782:	ldr	r5, [pc, #632]	; (99fc <usb_isr+0x2d4>)
    9784:	ldr.w	r3, [r5, r6, lsl #2]
    9788:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    978a:	ldr	r4, [pc, #628]	; (9a00 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    978c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    9790:	ldrh.w	r3, [r4, r6, lsl #1]
    9794:	add	r1, r3
    9796:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    979a:	bl	94e8 <usb_malloc>
					if (packet) {
    979e:	cmp	r0, #0
    97a0:	beq.w	9a50 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    97a4:	ldr	r2, [pc, #604]	; (9a04 <usb_isr+0x2dc>)
    97a6:	ldr	r3, [pc, #608]	; (9a08 <usb_isr+0x2e0>)
    97a8:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    97ac:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    97b0:	it	ne
    97b2:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    97b4:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    97b8:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    97bc:	movs	r3, #8
    97be:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    97c2:	ldrb.w	r4, [fp]
    97c6:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    97c8:	lsls	r1, r4, #29
    97ca:	bpl.n	9804 <usb_isr+0xdc>
		if (usb_configuration) {
    97cc:	ldr	r3, [pc, #572]	; (9a0c <usb_isr+0x2e4>)
    97ce:	ldrb	r3, [r3, #0]
    97d0:	cbz	r3, 97fe <usb_isr+0xd6>
			t = usb_reboot_timer;
    97d2:	ldr	r1, [pc, #572]	; (9a10 <usb_isr+0x2e8>)
    97d4:	ldrb	r2, [r1, #0]
			if (t) {
    97d6:	and.w	r3, r2, #255	; 0xff
    97da:	cbz	r2, 97e8 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    97dc:	subs	r3, #1
    97de:	uxtb	r3, r3
    97e0:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    97e2:	cmp	r3, #0
    97e4:	beq.w	a1c6 <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    97e8:	ldr	r1, [pc, #552]	; (9a14 <usb_isr+0x2ec>)
    97ea:	ldrb	r2, [r1, #0]
			if (t) {
    97ec:	and.w	r3, r2, #255	; 0xff
    97f0:	cbz	r2, 97fe <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    97f2:	subs	r3, #1
    97f4:	uxtb	r3, r3
    97f6:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    97f8:	cmp	r3, #0
    97fa:	beq.w	99ec <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    97fe:	movs	r3, #4
    9800:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    9804:	and.w	r3, r4, #8
    9808:	and.w	r2, r3, #255	; 0xff
    980c:	cmp	r3, #0
    980e:	beq.w	99be <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    9812:	ldrb.w	r3, [sl]
    9816:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    9818:	lsrs	r6, r3, #4
    981a:	bne.n	9738 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    981c:	lsrs	r4, r3, #2
    981e:	ldr.w	r9, [pc, #468]	; 99f4 <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9822:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9826:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    982a:	ubfx	r2, r2, #2, #4
    982e:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    9830:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9832:	cmp	r2, #12
    9834:	bhi.n	9934 <usb_isr+0x20c>
    9836:	tbb	[pc, r2]
    983a:	.short	0x8181
    983c:	.word	0x7d7d7d7d
    9840:	.word	0x7d477d7d
    9844:	.short	0x7d7d
    9846:	.byte	0x07
    9847:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9848:	ldr	r0, [r1, #0]
    984a:	ldr	r5, [pc, #460]	; (9a18 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    984c:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    984e:	ldr	r7, [pc, #460]	; (9a1c <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9850:	ldr	r6, [pc, #460]	; (9a20 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9852:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9854:	uxth	r1, r0
    9856:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    985a:	ldr	r3, [pc, #424]	; (9a04 <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    985c:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    985e:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9862:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9864:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9866:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    986a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    986c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    9870:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9874:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    9878:	ldr	r4, [pc, #376]	; (99f4 <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    987a:	bhi.w	9a66 <usb_isr+0x33e>
    987e:	cmp.w	r1, #1664	; 0x680
    9882:	bcs.w	9f76 <usb_isr+0x84e>
    9886:	cmp.w	r1, #258	; 0x102
    988a:	beq.w	9f52 <usb_isr+0x82a>
    988e:	bhi.w	9da0 <usb_isr+0x678>
    9892:	cmp	r1, #128	; 0x80
    9894:	beq.w	9e70 <usb_isr+0x748>
    9898:	cmp	r1, #130	; 0x82
    989a:	bne.w	9eda <usb_isr+0x7b2>
    989e:	ldrh	r1, [r5, #4]
    98a0:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    98a4:	cmp	r1, #4
    98a6:	bhi.w	9eda <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    98aa:	ldr	r0, [pc, #376]	; (9a24 <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    98ac:	ldr	r4, [pc, #376]	; (9a28 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    98ae:	lsls	r1, r1, #2
    98b0:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    98b2:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    98b4:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    98b6:	ldrb	r2, [r0, #0]
    98b8:	lsls	r3, r2, #30
    98ba:	bpl.w	9fb0 <usb_isr+0x888>
    98be:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    98c2:	mov.w	lr, #2
    98c6:	b.n	9e7a <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    98c8:	ldr	r7, [pc, #336]	; (9a1c <usb_isr+0x2f4>)
    98ca:	ldr	r2, [r7, #0]
		if (data) {
    98cc:	cbz	r2, 9920 <usb_isr+0x1f8>
			size = ep0_tx_len;
    98ce:	ldr	r3, [pc, #348]	; (9a2c <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    98d0:	ldr	r6, [pc, #332]	; (9a20 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    98d2:	ldr	r1, [pc, #348]	; (9a30 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    98d4:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    98d6:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    98d8:	ldrb	r5, [r1, #0]
    98da:	cmp	r0, #64	; 0x40
    98dc:	mov	lr, r0
    98de:	orr.w	r8, r5, #2
    98e2:	it	cs
    98e4:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    98e8:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    98ea:	eor.w	r4, r4, #1
    98ee:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    98f0:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    98f4:	ite	eq
    98f6:	moveq	r4, #136	; 0x88
    98f8:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    98fa:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    98fe:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9900:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9904:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9908:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    990a:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    990c:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    9910:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9912:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9914:	cbnz	r0, 991e <usb_isr+0x1f6>
    9916:	cmp.w	lr, #64	; 0x40
    991a:	it	ne
    991c:	movne	r2, #0
    991e:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    9920:	ldr	r3, [pc, #244]	; (9a18 <usb_isr+0x2f0>)
    9922:	ldrh	r2, [r3, #0]
    9924:	cmp.w	r2, #1280	; 0x500
    9928:	bne.n	9934 <usb_isr+0x20c>
			setup.bRequest = 0;
    992a:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    992c:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    992e:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9930:	ldr	r3, [pc, #256]	; (9a34 <usb_isr+0x30c>)
    9932:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9934:	ldr	r2, [pc, #256]	; (9a38 <usb_isr+0x310>)
    9936:	movs	r3, #1
    9938:	strb	r3, [r2, #0]
    993a:	b.n	97bc <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    993c:	ldr	r2, [pc, #216]	; (9a18 <usb_isr+0x2f0>)
    993e:	ldrh	r5, [r2, #0]
    9940:	movw	r0, #8225	; 0x2021
    9944:	cmp	r5, r0
    9946:	beq.w	9d48 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    994a:	ldr	r2, [pc, #184]	; (9a04 <usb_isr+0x2dc>)
    994c:	str.w	r2, [r9, r4, lsl #3]
    9950:	b.n	9934 <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9952:	ldr	r2, [pc, #176]	; (9a04 <usb_isr+0x2dc>)
    9954:	ldr	r3, [pc, #176]	; (9a08 <usb_isr+0x2e0>)
    9956:	tst.w	r9, #8
    995a:	it	ne
    995c:	movne	r3, r2
    995e:	str.w	r3, [r7, r8, lsl #3]
    9962:	b.n	97bc <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    9964:	bl	9528 <usb_free>
				packet = tx_first[endpoint];
    9968:	ldr	r2, [pc, #208]	; (9a3c <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    996a:	ldr	r1, [pc, #212]	; (9a40 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    996c:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    9970:	cmp	r3, #0
    9972:	beq.w	9ce2 <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9976:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9978:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    997a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    997e:	add.w	r2, r3, #8
    9982:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    9986:	cmp	r4, #3
    9988:	bhi.n	9996 <usb_isr+0x26e>
    998a:	tbb	[pc, r4]
    998e:	.short	0x0f12
    9990:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    9992:	movs	r2, #4
    9994:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    9996:	ldrh	r2, [r3, #0]
    9998:	tst.w	r9, #8
    999c:	ite	eq
    999e:	moveq	r3, #136	; 0x88
    99a0:	movne	r3, #200	; 0xc8
    99a2:	orr.w	r3, r3, r2, lsl #16
    99a6:	str.w	r3, [r7, r8, lsl #3]
    99aa:	b.n	97bc <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    99ac:	movs	r2, #2
    99ae:	strb	r2, [r1, r6]
						break;
    99b0:	b.n	9996 <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    99b2:	movs	r2, #3
    99b4:	strb	r2, [r1, r6]
						break;
    99b6:	b.n	9996 <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    99b8:	movs	r2, #5
    99ba:	strb	r2, [r1, r6]
						break;
    99bc:	b.n	9996 <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    99be:	lsls	r0, r4, #31
    99c0:	bmi.w	9df8 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    99c4:	lsls	r1, r4, #24
    99c6:	bmi.w	9e5c <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    99ca:	lsls	r2, r4, #30
    99cc:	bpl.n	99dc <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    99ce:	ldr	r2, [pc, #116]	; (9a44 <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    99d0:	ldr	r1, [pc, #116]	; (9a48 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    99d2:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    99d4:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    99d6:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    99d8:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    99da:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    99dc:	lsls	r3, r4, #27
    99de:	bpl.n	99e6 <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    99e0:	ldr	r3, [pc, #100]	; (9a48 <usb_isr+0x320>)
    99e2:	movs	r2, #16
    99e4:	strb	r2, [r3, #0]
	}

}
    99e6:	add	sp, #28
    99e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    99ec:	bl	8c3c <usb_serial_flush_callback>
    99f0:	b.n	97fe <usb_isr+0xd6>
    99f2:	nop
    99f4:	.word	0x1fff0000
    99f8:	.word	0x20019ae0
    99fc:	.word	0x20019a8c
    9a00:	.word	0x20019c6c
    9a04:	.word	0x004000c8
    9a08:	.word	0x00400088
    9a0c:	.word	0x20019b68
    9a10:	.word	0x20019af1
    9a14:	.word	0x20019a6c
    9a18:	.word	0x20019b54
    9a1c:	.word	0x20019a88
    9a20:	.word	0x20019af0
    9a24:	.word	0x400720c0
    9a28:	.word	0x20019b60
    9a2c:	.word	0x20019a9c
    9a30:	.word	0x20019b5c
    9a34:	.word	0x40072098
    9a38:	.word	0x40072094
    9a3c:	.word	0x20019b34
    9a40:	.word	0x20019b6c
    9a44:	.word	0x40072088
    9a48:	.word	0x40072080
    9a4c:	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9a50:	ldr	r2, [pc, #684]	; (9d00 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    9a52:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    9a56:	ldrb	r3, [r2, #0]
    9a58:	adds	r3, #1
    9a5a:	strb	r3, [r2, #0]
    9a5c:	b.n	97bc <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    9a5e:	str.w	r0, [r3, r6, lsl #2]
    9a62:	ldr	r5, [pc, #672]	; (9d04 <usb_isr+0x5dc>)
    9a64:	b.n	978a <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9a66:	movw	r0, #8225	; 0x2021
    9a6a:	cmp	r1, r0
    9a6c:	beq.w	9cda <usb_isr+0x5b2>
    9a70:	bhi.w	9dd2 <usb_isr+0x6aa>
    9a74:	cmp.w	r1, #2176	; 0x880
    9a78:	beq.w	9eb2 <usb_isr+0x78a>
    9a7c:	cmp.w	r1, #2304	; 0x900
    9a80:	bne.w	9eda <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9a84:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    9a86:	ldr	r1, [pc, #640]	; (9d08 <usb_isr+0x5e0>)
    9a88:	ldrb	r0, [r5, #2]
    9a8a:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9a8c:	lsls	r2, r2, #24
    9a8e:	bmi.w	a11c <usb_isr+0x9f4>
    9a92:	ldr.w	r2, [r9, #40]	; 0x28
    9a96:	ldr	r1, [pc, #628]	; (9d0c <usb_isr+0x5e4>)
    9a98:	lsls	r3, r2, #24
    9a9a:	bmi.w	a112 <usb_isr+0x9ea>
    9a9e:	ldr.w	r2, [r9, #48]	; 0x30
    9aa2:	ldr	r1, [pc, #616]	; (9d0c <usb_isr+0x5e4>)
    9aa4:	lsls	r5, r2, #24
    9aa6:	bmi.w	a108 <usb_isr+0x9e0>
    9aaa:	ldr.w	r2, [r9, #56]	; 0x38
    9aae:	ldr	r1, [pc, #604]	; (9d0c <usb_isr+0x5e4>)
    9ab0:	lsls	r4, r2, #24
    9ab2:	bmi.w	a0fe <usb_isr+0x9d6>
    9ab6:	ldr.w	r2, [r9, #64]	; 0x40
    9aba:	ldr	r1, [pc, #592]	; (9d0c <usb_isr+0x5e4>)
    9abc:	lsls	r0, r2, #24
    9abe:	bmi.w	a0f4 <usb_isr+0x9cc>
    9ac2:	ldr.w	r2, [r9, #72]	; 0x48
    9ac6:	ldr	r1, [pc, #580]	; (9d0c <usb_isr+0x5e4>)
    9ac8:	lsls	r2, r2, #24
    9aca:	bmi.w	a0ea <usb_isr+0x9c2>
    9ace:	ldr.w	r2, [r9, #80]	; 0x50
    9ad2:	ldr	r1, [pc, #568]	; (9d0c <usb_isr+0x5e4>)
    9ad4:	lsls	r3, r2, #24
    9ad6:	bmi.w	a0e0 <usb_isr+0x9b8>
    9ada:	ldr.w	r2, [r9, #88]	; 0x58
    9ade:	ldr	r1, [pc, #556]	; (9d0c <usb_isr+0x5e4>)
    9ae0:	lsls	r5, r2, #24
    9ae2:	bmi.w	a0d6 <usb_isr+0x9ae>
    9ae6:	ldr.w	r2, [r9, #96]	; 0x60
    9aea:	ldr	r1, [pc, #544]	; (9d0c <usb_isr+0x5e4>)
    9aec:	lsls	r4, r2, #24
    9aee:	bmi.w	a144 <usb_isr+0xa1c>
    9af2:	ldr.w	r2, [r9, #104]	; 0x68
    9af6:	ldr	r1, [pc, #532]	; (9d0c <usb_isr+0x5e4>)
    9af8:	lsls	r0, r2, #24
    9afa:	bmi.w	a13a <usb_isr+0xa12>
    9afe:	ldr.w	r2, [r9, #112]	; 0x70
    9b02:	ldr	r1, [pc, #520]	; (9d0c <usb_isr+0x5e4>)
    9b04:	lsls	r2, r2, #24
    9b06:	bmi.w	a130 <usb_isr+0xa08>
    9b0a:	ldr.w	r2, [r9, #120]	; 0x78
    9b0e:	ldr	r1, [pc, #508]	; (9d0c <usb_isr+0x5e4>)
    9b10:	lsls	r3, r2, #24
    9b12:	bmi.w	a126 <usb_isr+0x9fe>
    9b16:	ldr.w	r2, [r9, #128]	; 0x80
    9b1a:	ldr	r1, [pc, #496]	; (9d0c <usb_isr+0x5e4>)
    9b1c:	lsls	r5, r2, #24
    9b1e:	bmi.w	a15a <usb_isr+0xa32>
    9b22:	ldr.w	r2, [r9, #136]	; 0x88
    9b26:	ldr	r1, [pc, #484]	; (9d0c <usb_isr+0x5e4>)
    9b28:	lsls	r4, r2, #24
    9b2a:	bmi.w	a14e <usb_isr+0xa26>
    9b2e:	ldr.w	r2, [r9, #144]	; 0x90
    9b32:	ldr	r1, [pc, #472]	; (9d0c <usb_isr+0x5e4>)
    9b34:	lsls	r0, r2, #24
    9b36:	bmi.w	a0ca <usb_isr+0x9a2>
    9b3a:	ldr.w	r2, [r9, #152]	; 0x98
    9b3e:	ldr	r1, [pc, #460]	; (9d0c <usb_isr+0x5e4>)
    9b40:	lsls	r2, r2, #24
    9b42:	bmi.w	a0be <usb_isr+0x996>
    9b46:	ldr	r0, [pc, #456]	; (9d10 <usb_isr+0x5e8>)
    9b48:	ldr	r2, [pc, #456]	; (9d14 <usb_isr+0x5ec>)
    9b4a:	ldr	r1, [pc, #460]	; (9d18 <usb_isr+0x5f0>)
    9b4c:	str	r0, [sp, #4]
    9b4e:	ldr	r0, [pc, #460]	; (9d1c <usb_isr+0x5f4>)
    9b50:	ldr	r5, [pc, #432]	; (9d04 <usb_isr+0x5dc>)
    9b52:	ldr	r4, [pc, #460]	; (9d20 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9b54:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    9b56:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9b58:	str	r6, [sp, #20]
    9b5a:	str	r5, [sp, #8]
    9b5c:	mov	r8, r0
    9b5e:	mov	r7, r2
    9b60:	mov	r6, r1
    9b62:	mov	r5, r3
    9b64:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    9b66:	ldr	r0, [r7, #0]
			while (p) {
    9b68:	cbz	r0, 9b76 <usb_isr+0x44e>
				n = p->next;
    9b6a:	ldr	r4, [r0, #4]
				usb_free(p);
    9b6c:	bl	9528 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9b70:	mov	r0, r4
    9b72:	cmp	r4, #0
    9b74:	bne.n	9b6a <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    9b76:	movs	r3, #0
    9b78:	str	r3, [r7, #0]
			rx_last[i] = NULL;
    9b7a:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9b7c:	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9b7e:	mov	r2, r3
    9b80:	movs	r3, #0
    9b82:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    9b86:	cbz	r0, 9b94 <usb_isr+0x46c>
				n = p->next;
    9b88:	ldr	r4, [r0, #4]
				usb_free(p);
    9b8a:	bl	9528 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9b8e:	mov	r0, r4
    9b90:	cmp	r4, #0
    9b92:	bne.n	9b88 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9b94:	movs	r2, #0
    9b96:	str	r2, [r6, #0]
			tx_last[i] = NULL;
    9b98:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9b9a:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9b9e:	mov	r1, r2
    9ba0:	movs	r2, #0
    9ba2:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    9ba6:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9ba8:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9baa:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9bac:	mov.w	r1, #0
    9bb0:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    9bb4:	cmp	r3, #3
    9bb6:	bhi.n	9bcc <usb_isr+0x4a4>
    9bb8:	tbh	[pc, r3, lsl #1]
    9bbc:	.word	0x0004014b
    9bc0:	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9bc4:	mov.w	r3, #1
    9bc8:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    9bcc:	adds	r5, #1
    9bce:	cmp	r5, #4
    9bd0:	add.w	r7, r7, #4
    9bd4:	add.w	r6, r6, #4
    9bd8:	add.w	r8, r8, #1
    9bdc:	bne.n	9b66 <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9bde:	ldr	r4, [pc, #324]	; (9d24 <usb_isr+0x5fc>)
			*reg = epconf;
    9be0:	ldr	r3, [pc, #324]	; (9d28 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9be2:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    9be4:	ldr	r5, [pc, #280]	; (9d00 <usb_isr+0x5d8>)
    9be6:	ldr	r7, [sp, #16]
    9be8:	ldr	r6, [sp, #20]
    9bea:	movs	r1, #0
    9bec:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9bee:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9bf0:	lsls	r3, r2, #28
    9bf2:	bmi.w	a094 <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9bf6:	ldrb	r2, [r4, #1]
			*reg = epconf;
    9bf8:	ldr	r1, [pc, #304]	; (9d2c <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9bfa:	ldr.w	r8, [pc, #272]	; 9d0c <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9bfe:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9c00:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9c02:	mov.w	r1, #0
    9c06:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    9c0a:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9c0e:	bmi.w	a068 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9c12:	ldr	r1, [pc, #284]	; (9d30 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9c14:	ldrb	r2, [r4, #2]
			*reg = epconf;
    9c16:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9c18:	movs	r1, #0
    9c1a:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    9c1e:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9c22:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9c24:	ldr.w	r8, [pc, #228]	; 9d0c <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9c28:	bmi.w	9fe4 <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9c2c:	ldrb	r2, [r4, #3]
			*reg = epconf;
    9c2e:	ldr	r1, [pc, #260]	; (9d34 <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9c30:	ldr	r4, [pc, #216]	; (9d0c <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9c32:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9c34:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9c36:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9c38:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    9c3c:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9c40:	bmi.w	9fb6 <usb_isr+0x88e>
    9c44:	ldrb	r3, [r6, #0]
    9c46:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9c48:	movs	r1, #0
    9c4a:	eor.w	r2, r3, #1
    9c4e:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    9c52:	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9c56:	movs	r0, #0
    9c58:	str	r0, [sp, #8]
    9c5a:	mov	r8, r0
    9c5c:	mov	ip, r0
    9c5e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c60:	ldr	r1, [pc, #212]	; (9d38 <usb_isr+0x610>)
    9c62:	ldrb	r5, [r1, #0]
    9c64:	orr.w	lr, r5, #2
    9c68:	add.w	r3, r9, lr, lsl #3
    9c6c:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c6e:	ldr	r3, [sp, #4]
    9c70:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c72:	ldr	r3, [sp, #12]
    9c74:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c76:	ite	eq
    9c78:	moveq	r4, #136	; 0x88
    9c7a:	movne	r4, #200	; 0xc8
    9c7c:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9c80:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c84:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9c88:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9c8a:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c8c:	ldr.w	lr, [pc, #124]	; 9d0c <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    9c90:	ldr	r3, [pc, #168]	; (9d3c <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    9c92:	ldr.w	r8, [pc, #164]	; 9d38 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9c96:	cmp	r0, #0
    9c98:	bne.w	9ee8 <usb_isr+0x7c0>
    9c9c:	cmp.w	ip, #64	; 0x40
    9ca0:	bne.n	9cda <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ca2:	orr.w	ip, r4, #2
    9ca6:	add.w	r3, r9, ip, lsl #3
    9caa:	ldr	r4, [sp, #8]
    9cac:	ldr.w	lr, [pc, #92]	; 9d0c <usb_isr+0x5e4>
    9cb0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cb2:	cmp	r2, #0
    9cb4:	bne.w	9f14 <usb_isr+0x7ec>
    9cb8:	lsls	r2, r0, #16
    9cba:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9cbe:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cc2:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9cc6:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9cc8:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9cca:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9ccc:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9cce:	cmp	r0, #64	; 0x40
    9cd0:	bne.n	9cda <usb_isr+0x5b2>
    9cd2:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    9cd4:	ldr	r2, [pc, #104]	; (9d40 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    9cd6:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    9cd8:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9cda:	ldr	r2, [pc, #104]	; (9d44 <usb_isr+0x61c>)
    9cdc:	movs	r3, #1
    9cde:	strb	r3, [r2, #0]
    9ce0:	b.n	9934 <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    9ce2:	ldrb	r3, [r1, r6]
    9ce4:	cmp	r3, #3
    9ce6:	bhi.w	9f44 <usb_isr+0x81c>
    9cea:	add	r2, pc, #4	; (adr r2, 9cf0 <usb_isr+0x5c8>)
    9cec:	ldr.w	pc, [r2, r3, lsl #2]
    9cf0:	.word	0x000097bd
    9cf4:	.word	0x000097bd
    9cf8:	.word	0x00009e47
    9cfc:	.word	0x00009e4d
    9d00:	.word	0x20019b5d
    9d04:	.word	0x20019a8c
    9d08:	.word	0x20019b68
    9d0c:	.word	0x1fff0000
    9d10:	.word	0x20019b44
    9d14:	.word	0x20019ae0
    9d18:	.word	0x20019b34
    9d1c:	.word	0x20019b6c
    9d20:	.word	0x20019c6c
    9d24:	.word	0x000136bc
    9d28:	.word	0x400720c4
    9d2c:	.word	0x400720c8
    9d30:	.word	0x400720cc
    9d34:	.word	0x400720d0
    9d38:	.word	0x20019b5c
    9d3c:	.word	0x20019af0
    9d40:	.word	0x20019a9c
    9d44:	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    9d48:	ldrh	r2, [r2, #4]
    9d4a:	cbnz	r2, 9d72 <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9d4c:	ldr	r2, [pc, #708]	; (a014 <usb_isr+0x8ec>)
    9d4e:	ldrb	r5, [r1, #0]
    9d50:	ldrb	r0, [r1, #1]
    9d52:	strb	r5, [r2, #0]
    9d54:	strb	r0, [r2, #1]
    9d56:	ldrb	r5, [r1, #2]
    9d58:	ldrb	r0, [r1, #3]
    9d5a:	strb	r5, [r2, #2]
    9d5c:	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9d5e:	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9d60:	ldrb	r5, [r1, #4]
    9d62:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9d64:	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9d66:	ldrb	r5, [r1, #5]
    9d68:	ldrb	r1, [r1, #6]
    9d6a:	strb	r5, [r2, #5]
    9d6c:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9d6e:	beq.w	9ebc <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d72:	ldr	r1, [pc, #676]	; (a018 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d74:	ldr	r6, [pc, #676]	; (a01c <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d76:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d78:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9d7a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d7e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d80:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9d84:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d86:	ite	eq
    9d88:	moveq	r1, #136	; 0x88
    9d8a:	movne	r1, #200	; 0xc8
    9d8c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d90:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9d94:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d98:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9d9a:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d9c:	str	r1, [r2, #4]
    9d9e:	b.n	994a <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9da0:	movw	r2, #770	; 0x302
    9da4:	cmp	r1, r2
    9da6:	bne.w	9ec4 <usb_isr+0x79c>
    9daa:	ldrh	r1, [r5, #4]
    9dac:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9db0:	cmp	r1, #4
    9db2:	bhi.w	9eda <usb_isr+0x7b2>
    9db6:	ldrh	r2, [r5, #2]
    9db8:	cmp	r2, #0
    9dba:	bne.w	9eda <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    9dbe:	ldr	r0, [pc, #608]	; (a020 <usb_isr+0x8f8>)
    9dc0:	str.w	lr, [sp, #4]
    9dc4:	lsls	r1, r1, #2
    9dc6:	add	r0, r1
    9dc8:	ldrb	r1, [r0, #0]
    9dca:	orr.w	r1, r1, #2
    9dce:	strb	r1, [r0, #0]
    9dd0:	b.n	9c56 <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9dd2:	movw	r0, #8737	; 0x2221
    9dd6:	cmp	r1, r0
    9dd8:	bne.n	9ed2 <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    9dda:	ldrh	r1, [r5, #4]
    9ddc:	cmp	r1, #0
    9dde:	bne.w	9faa <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9de2:	ldr	r3, [pc, #576]	; (a024 <usb_isr+0x8fc>)
    9de4:	ldr	r2, [pc, #576]	; (a028 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    9de6:	ldr	r0, [pc, #580]	; (a02c <usb_isr+0x904>)
    9de8:	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9dea:	ldr	r5, [r3, #0]
    9dec:	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9dee:	str.w	lr, [sp, #4]
    9df2:	mov	r2, r1
    9df4:	strb	r4, [r0, #0]
    9df6:	b.n	9c56 <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9df8:	ldr	r3, [pc, #564]	; (a030 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9dfa:	ldr	r0, [pc, #568]	; (a034 <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    9dfc:	ldr	r1, [pc, #536]	; (a018 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    9dfe:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9e00:	mov.w	lr, #2
    9e04:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9e08:	ldr	r7, [pc, #532]	; (a020 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    9e0a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9e0c:	ldr	r1, [pc, #552]	; (a038 <usb_isr+0x910>)
    9e0e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9e10:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9e12:	ldr	r6, [pc, #552]	; (a03c <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    9e14:	ldr	r5, [pc, #552]	; (a040 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9e16:	ldr	r4, [pc, #556]	; (a044 <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    9e18:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9e1a:	movs	r1, #13
    9e1c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9e1e:	movs	r1, #255	; 0xff
    9e20:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9e22:	ldr.w	lr, [pc, #576]	; a064 <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    9e26:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9e28:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9e2a:	ldr	r5, [pc, #540]	; (a048 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9e2c:	ldr	r2, [pc, #540]	; (a04c <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9e2e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9e32:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9e34:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9e36:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9e3a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9e3c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9e3e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    9e40:	add	sp, #28
    9e42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9e46:	movs	r3, #0
    9e48:	strb	r3, [r1, r6]
						break;
    9e4a:	b.n	97bc <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9e4c:	movs	r3, #1
    9e4e:	strb	r3, [r1, r6]
						break;
    9e50:	b.n	97bc <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9e52:	mov.w	r3, #0
    9e56:	strb.w	r3, [r8]
    9e5a:	b.n	9bcc <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9e5c:	ldr	r1, [pc, #448]	; (a020 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9e5e:	ldr	r3, [pc, #480]	; (a040 <usb_isr+0x918>)
    9e60:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9e62:	movs	r0, #13
    9e64:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    9e66:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9e68:	lsls	r2, r4, #30
    9e6a:	bpl.w	99dc <usb_isr+0x2b4>
    9e6e:	b.n	99ce <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9e70:	ldr	r4, [pc, #476]	; (a050 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    9e72:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9e76:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    9e78:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9e7a:	ldrh	r2, [r5, #6]
    9e7c:	cmp	r2, lr
    9e7e:	bcs.w	a1c8 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9e82:	ldr	r1, [pc, #404]	; (a018 <usb_isr+0x8f0>)
    9e84:	ldrb	r5, [r1, #0]
    9e86:	cmp	r2, #64	; 0x40
    9e88:	mov	ip, r2
    9e8a:	orr.w	lr, r5, #2
    9e8e:	it	cs
    9e90:	movcs.w	ip, #64	; 0x40
    9e94:	add.w	r3, r4, ip
    9e98:	add.w	r0, r9, lr, lsl #3
    9e9c:	str	r3, [sp, #8]
    9e9e:	movs	r3, #1
    9ea0:	str	r4, [r0, #4]
    9ea2:	mov.w	r8, ip, lsl #16
    9ea6:	rsb	r0, ip, r2
    9eaa:	str	r3, [sp, #4]
    9eac:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9eae:	movs	r4, #200	; 0xc8
    9eb0:	b.n	9c7c <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9eb2:	ldr	r2, [pc, #416]	; (a054 <usb_isr+0x92c>)
    9eb4:	ldr	r4, [pc, #408]	; (a050 <usb_isr+0x928>)
    9eb6:	ldrb	r2, [r2, #0]
    9eb8:	strb	r2, [r4, #0]
    9eba:	b.n	9e7a <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9ebc:	ldr	r2, [pc, #408]	; (a058 <usb_isr+0x930>)
    9ebe:	movs	r1, #15
    9ec0:	strb	r1, [r2, #0]
    9ec2:	b.n	9d72 <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9ec4:	cmp.w	r1, #1280	; 0x500
    9ec8:	bne.n	9eda <usb_isr+0x7b2>
    9eca:	movs	r3, #1
    9ecc:	movs	r2, #0
    9ece:	str	r3, [sp, #4]
    9ed0:	b.n	9c56 <usb_isr+0x52e>
    9ed2:	movw	r2, #8993	; 0x2321
    9ed6:	cmp	r1, r2
    9ed8:	beq.n	9eca <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9eda:	ldr	r2, [pc, #324]	; (a020 <usb_isr+0x8f8>)
    9edc:	movs	r3, #15
    9ede:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9ee0:	ldr	r2, [pc, #336]	; (a034 <usb_isr+0x90c>)
    9ee2:	movs	r3, #1
    9ee4:	strb	r3, [r2, #0]
    9ee6:	b.n	9934 <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    9ee8:	cmp	r0, #64	; 0x40
    9eea:	bls.w	9ca2 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9eee:	orr.w	r4, r4, #2
    9ef2:	add.w	r1, lr, r4, lsl #3
    9ef6:	ldr	r6, [sp, #8]
    9ef8:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9efa:	cbz	r2, 9f2c <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    9efc:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f00:	ldr	r2, [pc, #344]	; (a05c <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    9f02:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9f04:	mov	r3, r6
    9f06:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9f08:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9f0c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f0e:	str.w	r2, [lr, r4, lsl #3]
    9f12:	b.n	9cd4 <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    9f14:	ldrb.w	r3, [sp, #4]
    9f18:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f1a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9f1c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9f1e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f20:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9f24:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f26:	str.w	r2, [lr, ip, lsl #3]
    9f2a:	b.n	9cce <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    9f2c:	ldrb.w	r1, [sp, #4]
    9f30:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9f32:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f34:	ldr	r2, [pc, #256]	; (a038 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9f36:	strb.w	r5, [r8]
    9f3a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9f3c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f3e:	str.w	r2, [lr, r4, lsl #3]
    9f42:	b.n	9cd4 <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    9f44:	tst.w	r9, #8
    9f48:	ite	eq
    9f4a:	moveq	r3, #2
    9f4c:	movne	r3, #3
    9f4e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    9f50:	b.n	97bc <usb_isr+0x94>
    9f52:	ldrh	r1, [r5, #4]
    9f54:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9f58:	cmp	r1, #4
    9f5a:	bhi.n	9eda <usb_isr+0x7b2>
    9f5c:	ldrh	r2, [r5, #2]
    9f5e:	cmp	r2, #0
    9f60:	bne.n	9eda <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    9f62:	ldr	r0, [pc, #188]	; (a020 <usb_isr+0x8f8>)
    9f64:	str.w	lr, [sp, #4]
    9f68:	lsls	r1, r1, #2
    9f6a:	add	r0, r1
    9f6c:	ldrb	r1, [r0, #0]
    9f6e:	bic.w	r1, r1, #2
    9f72:	strb	r1, [r0, #0]
    9f74:	b.n	9c56 <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    9f76:	ldr	r2, [pc, #232]	; (a060 <usb_isr+0x938>)
    9f78:	ldr	r4, [r2, #4]
    9f7a:	cmp	r4, #0
    9f7c:	beq.n	9eda <usb_isr+0x7b2>
    9f7e:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9f80:	ldrh.w	lr, [r5, #4]
    9f84:	b.n	9f8e <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    9f86:	adds	r2, #12
			if (list->addr == NULL) break;
    9f88:	ldr	r4, [r2, #4]
    9f8a:	cmp	r4, #0
    9f8c:	beq.n	9eda <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9f8e:	ldrh	r3, [r2, #0]
    9f90:	cmp	r3, r0
    9f92:	bne.n	9f86 <usb_isr+0x85e>
    9f94:	ldrh	r3, [r2, #2]
    9f96:	cmp	r3, lr
    9f98:	bne.n	9f86 <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    9f9a:	lsrs	r0, r0, #8
    9f9c:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    9f9e:	ite	eq
    9fa0:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    9fa4:	ldrhne.w	lr, [r2, #8]
    9fa8:	b.n	9e7a <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    9faa:	str.w	lr, [sp, #4]
    9fae:	b.n	9c56 <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    9fb0:	mov.w	lr, #2
    9fb4:	b.n	9e7a <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9fb6:	bl	94e8 <usb_malloc>
				if (p) {
    9fba:	cmp	r0, #0
    9fbc:	beq.w	a1a2 <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9fc0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9fc2:	ldr	r2, [pc, #116]	; (a038 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9fc4:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9fc8:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9fcc:	bl	94e8 <usb_malloc>
				if (p) {
    9fd0:	cmp	r0, #0
    9fd2:	beq.w	a196 <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    9fd6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9fd8:	ldr	r2, [pc, #128]	; (a05c <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9fda:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9fde:	str.w	r2, [r9, #136]	; 0x88
    9fe2:	b.n	9c44 <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9fe4:	bl	94e8 <usb_malloc>
				if (p) {
    9fe8:	cmp	r0, #0
    9fea:	beq.w	a1ba <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    9fee:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9ff0:	ldr	r2, [pc, #68]	; (a038 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9ff2:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9ff6:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9ffa:	bl	94e8 <usb_malloc>
				if (p) {
    9ffe:	cmp	r0, #0
    a000:	beq.w	a1ae <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    a004:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a006:	ldr	r2, [pc, #84]	; (a05c <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a008:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a00c:	str.w	r2, [r9, #104]	; 0x68
    a010:	b.n	9c2c <usb_isr+0x504>
    a012:	nop
    a014:	.word	0x20019c60
    a018:	.word	0x20019b5c
    a01c:	.word	0x20019af0
    a020:	.word	0x400720c0
    a024:	.word	0x20019a84
    a028:	.word	0x20019c68
    a02c:	.word	0x20019a7c
    a030:	.word	0x1fff0000
    a034:	.word	0x40072094
    a038:	.word	0x00400088
    a03c:	.word	0x40072088
    a040:	.word	0x40072080
    a044:	.word	0x40072098
    a048:	.word	0x20019aa0
    a04c:	.word	0x20019af4
    a050:	.word	0x20019b60
    a054:	.word	0x20019b68
    a058:	.word	0x20019af1
    a05c:	.word	0x004000c8
    a060:	.word	0x000136c0
    a064:	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a068:	bl	94e8 <usb_malloc>
				if (p) {
    a06c:	cmp	r0, #0
    a06e:	beq.w	a18a <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    a072:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a074:	ldr	r2, [pc, #372]	; (a1ec <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a076:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a07a:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a07e:	bl	94e8 <usb_malloc>
				if (p) {
    a082:	cmp	r0, #0
    a084:	beq.n	a17e <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    a086:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a088:	ldr	r2, [pc, #356]	; (a1f0 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a08a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a08e:	str.w	r2, [r9, #72]	; 0x48
    a092:	b.n	9c12 <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a094:	bl	94e8 <usb_malloc>
				if (p) {
    a098:	cmp	r0, #0
    a09a:	beq.n	a172 <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    a09c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a09e:	ldr	r2, [pc, #332]	; (a1ec <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a0a0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0a4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a0a8:	bl	94e8 <usb_malloc>
				if (p) {
    a0ac:	cmp	r0, #0
    a0ae:	beq.n	a166 <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    a0b0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a0b2:	ldr	r2, [pc, #316]	; (a1f0 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a0b4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a0b8:	str.w	r2, [r9, #40]	; 0x28
    a0bc:	b.n	9bf6 <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a0be:	ldr.w	r0, [r1, #156]	; 0x9c
    a0c2:	subs	r0, #8
    a0c4:	bl	9528 <usb_free>
    a0c8:	b.n	9b46 <usb_isr+0x41e>
    a0ca:	ldr.w	r0, [r1, #148]	; 0x94
    a0ce:	subs	r0, #8
    a0d0:	bl	9528 <usb_free>
    a0d4:	b.n	9b3a <usb_isr+0x412>
    a0d6:	ldr	r0, [r1, #92]	; 0x5c
    a0d8:	subs	r0, #8
    a0da:	bl	9528 <usb_free>
    a0de:	b.n	9ae6 <usb_isr+0x3be>
    a0e0:	ldr	r0, [r1, #84]	; 0x54
    a0e2:	subs	r0, #8
    a0e4:	bl	9528 <usb_free>
    a0e8:	b.n	9ada <usb_isr+0x3b2>
    a0ea:	ldr	r0, [r1, #76]	; 0x4c
    a0ec:	subs	r0, #8
    a0ee:	bl	9528 <usb_free>
    a0f2:	b.n	9ace <usb_isr+0x3a6>
    a0f4:	ldr	r0, [r1, #68]	; 0x44
    a0f6:	subs	r0, #8
    a0f8:	bl	9528 <usb_free>
    a0fc:	b.n	9ac2 <usb_isr+0x39a>
    a0fe:	ldr	r0, [r1, #60]	; 0x3c
    a100:	subs	r0, #8
    a102:	bl	9528 <usb_free>
    a106:	b.n	9ab6 <usb_isr+0x38e>
    a108:	ldr	r0, [r1, #52]	; 0x34
    a10a:	subs	r0, #8
    a10c:	bl	9528 <usb_free>
    a110:	b.n	9aaa <usb_isr+0x382>
    a112:	ldr	r0, [r1, #44]	; 0x2c
    a114:	subs	r0, #8
    a116:	bl	9528 <usb_free>
    a11a:	b.n	9a9e <usb_isr+0x376>
    a11c:	ldr	r0, [r4, #36]	; 0x24
    a11e:	subs	r0, #8
    a120:	bl	9528 <usb_free>
    a124:	b.n	9a92 <usb_isr+0x36a>
    a126:	ldr	r0, [r1, #124]	; 0x7c
    a128:	subs	r0, #8
    a12a:	bl	9528 <usb_free>
    a12e:	b.n	9b16 <usb_isr+0x3ee>
    a130:	ldr	r0, [r1, #116]	; 0x74
    a132:	subs	r0, #8
    a134:	bl	9528 <usb_free>
    a138:	b.n	9b0a <usb_isr+0x3e2>
    a13a:	ldr	r0, [r1, #108]	; 0x6c
    a13c:	subs	r0, #8
    a13e:	bl	9528 <usb_free>
    a142:	b.n	9afe <usb_isr+0x3d6>
    a144:	ldr	r0, [r1, #100]	; 0x64
    a146:	subs	r0, #8
    a148:	bl	9528 <usb_free>
    a14c:	b.n	9af2 <usb_isr+0x3ca>
    a14e:	ldr.w	r0, [r1, #140]	; 0x8c
    a152:	subs	r0, #8
    a154:	bl	9528 <usb_free>
    a158:	b.n	9b2e <usb_isr+0x406>
    a15a:	ldr.w	r0, [r1, #132]	; 0x84
    a15e:	subs	r0, #8
    a160:	bl	9528 <usb_free>
    a164:	b.n	9b22 <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a166:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a168:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    a16c:	adds	r2, #1
    a16e:	strb	r2, [r5, #0]
    a170:	b.n	9bf6 <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a172:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a174:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    a178:	adds	r2, #1
    a17a:	strb	r2, [r5, #0]
    a17c:	b.n	a0a8 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a17e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a180:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    a184:	adds	r2, #1
    a186:	strb	r2, [r5, #0]
    a188:	b.n	9c12 <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a18a:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a18c:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    a190:	adds	r2, #1
    a192:	strb	r2, [r5, #0]
    a194:	b.n	a07e <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a196:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a198:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    a19c:	adds	r2, #1
    a19e:	strb	r2, [r5, #0]
    a1a0:	b.n	9c44 <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a1a2:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a1a4:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    a1a8:	adds	r2, #1
    a1aa:	strb	r2, [r5, #0]
    a1ac:	b.n	9fcc <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a1ae:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a1b0:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    a1b4:	adds	r2, #1
    a1b6:	strb	r2, [r5, #0]
    a1b8:	b.n	9c2c <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a1ba:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a1bc:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    a1c0:	adds	r2, #1
    a1c2:	strb	r2, [r5, #0]
    a1c4:	b.n	9ffa <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    a1c6:	bkpt	0x0000
    a1c8:	cmp.w	lr, #64	; 0x40
    a1cc:	mov	ip, lr
    a1ce:	it	cs
    a1d0:	movcs.w	ip, #64	; 0x40
    a1d4:	add.w	r3, r4, ip
    a1d8:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a1da:	movs	r3, #1
    a1dc:	rsb	r0, ip, lr
    a1e0:	mov.w	r8, ip, lsl #16
    a1e4:	movs	r2, #0
    a1e6:	str	r3, [sp, #4]
    a1e8:	b.n	9c60 <usb_isr+0x538>
    a1ea:	nop
    a1ec:	.word	0x00400088
    a1f0:	.word	0x004000c8

0000a1f4 <usb_init>:
}



void usb_init(void)
{
    a1f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a1f8:	ldr	r4, [pc, #144]	; (a28c <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a1fa:	bl	aa58 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a1fe:	movs	r2, #0
    a200:	add.w	r0, r4, #160	; 0xa0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a204:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a206:	str	r2, [r3, #0]
		table[i].addr = 0;
    a208:	str	r2, [r3, #4]
    a20a:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a20c:	cmp	r3, r0
		table[i].desc = 0;
    a20e:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a212:	bne.n	a206 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a214:	ldr	r0, [pc, #120]	; (a290 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a216:	ldr	r2, [pc, #124]	; (a294 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a218:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a21a:	ldr.w	lr, [pc, #144]	; a2ac <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a21e:	ldr	r7, [pc, #120]	; (a298 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a220:	ldr	r5, [pc, #120]	; (a29c <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a222:	ldr	r6, [pc, #124]	; (a2a0 <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a224:	ldr.w	r8, [pc, #136]	; a2b0 <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    a228:	ldr.w	ip, [pc, #136]	; a2b4 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a22c:	ldr.w	r9, [pc, #136]	; a2b8 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a230:	orr.w	r3, r3, #262144	; 0x40000
    a234:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a236:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a238:	ldr	r0, [pc, #104]	; (a2a4 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a23a:	orr.w	r3, r3, #50331648	; 0x3000000
    a23e:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a240:	ubfx	r3, r4, #8, #8
    a244:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a248:	ubfx	r3, r4, #16, #8
    a24c:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a24e:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a250:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a252:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a256:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a258:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a25c:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a260:	ldr	r5, [pc, #68]	; (a2a8 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    a262:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    a266:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a268:	movs	r3, #1
    a26a:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a26e:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a270:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a274:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a278:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    a27a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a27e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a280:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a282:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a284:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a288:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a28c:	.word	0x1fff0000
    a290:	.word	0x40048034
    a294:	.word	0x4000d800
    a298:	.word	0x400720b0
    a29c:	.word	0x400720b4
    a2a0:	.word	0x40072010
    a2a4:	.word	0xe000e104
    a2a8:	.word	0xe000e435
    a2ac:	.word	0x4007209c
    a2b0:	.word	0x40072080
    a2b4:	.word	0x40072088
    a2b8:	.word	0x40072094

0000a2bc <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a2bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a2c0:	ldr	r6, [pc, #196]	; (a388 <yield+0xcc>)
    a2c2:	ldrb	r3, [r6, #0]
    a2c4:	cbz	r3, a2ec <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    a2c6:	ldr	r7, [pc, #196]	; (a38c <yield+0xd0>)
    a2c8:	ldrb	r2, [r7, #0]
    a2ca:	cbnz	r2, a2ec <yield+0x30>
	running = 1;
    a2cc:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a2ce:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a2d0:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a2d2:	bmi.n	a342 <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    a2d4:	lsls	r2, r3, #30
    a2d6:	bmi.n	a30c <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a2d8:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a2da:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a2dc:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a2de:	bpl.n	a2ec <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    a2e0:	ldr	r3, [pc, #172]	; (a390 <yield+0xd4>)
    a2e2:	ldr	r2, [r3, #0]
    a2e4:	cbz	r2, a2ec <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a2e6:	mrs	r2, IPSR
		if (ipsr != 0) return;
    a2ea:	cbz	r2, a2f0 <yield+0x34>
    a2ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a2f0:	mrs	r1, PRIMASK
		__disable_irq();
    a2f4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a2f6:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a2f8:	cbz	r0, a302 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a2fa:	ldr	r4, [pc, #152]	; (a394 <yield+0xd8>)
    a2fc:	ldrb	r2, [r4, #0]
    a2fe:	cmp	r2, #0
    a300:	beq.n	a360 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a302:	cmp	r1, #0
    a304:	bne.n	a2ec <yield+0x30>
    a306:	cpsie	i
    a308:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a30c:	ldr.w	r8, [pc, #144]	; a3a0 <yield+0xe4>
    a310:	ldrb.w	r2, [r8]
    a314:	cmp	r2, #0
    a316:	beq.n	a2d8 <yield+0x1c>
    a318:	ldr.w	r9, [pc, #136]	; a3a4 <yield+0xe8>
    a31c:	movs	r4, #0
    a31e:	b.n	a32c <yield+0x70>
    a320:	adds	r4, #1
    a322:	ldrb.w	r3, [r8]
    a326:	uxtb	r4, r4
    a328:	cmp	r3, r4
    a32a:	bls.n	a352 <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    a32c:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    a330:	ldr	r3, [r5, #0]
    a332:	mov	r0, r5
    a334:	ldr	r3, [r3, #16]
    a336:	blx	r3
    a338:	cmp	r0, #0
    a33a:	beq.n	a320 <yield+0x64>
    a33c:	ldr	r3, [r5, #16]
    a33e:	blx	r3
    a340:	b.n	a320 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a342:	bl	8a28 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a346:	cbnz	r0, a37c <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a348:	ldr	r3, [pc, #76]	; (a398 <yield+0xdc>)
    a34a:	ldrb	r3, [r3, #0]
    a34c:	cbnz	r3, a356 <yield+0x9a>
    a34e:	ldrb	r3, [r6, #0]
    a350:	b.n	a2d4 <yield+0x18>
    a352:	ldrb	r3, [r6, #0]
    a354:	b.n	a2d8 <yield+0x1c>
    a356:	ldrb	r3, [r6, #0]
    a358:	and.w	r3, r3, #254	; 0xfe
    a35c:	strb	r3, [r6, #0]
    a35e:	b.n	a2d4 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    a360:	ldr	r5, [r0, #20]
    a362:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a364:	movs	r3, #1
    a366:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    a368:	cbz	r5, a382 <yield+0xc6>
			firstYield->_prev = nullptr;
    a36a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a36c:	cbnz	r1, a370 <yield+0xb4>
    a36e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a370:	movs	r5, #0
    a372:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a374:	ldr	r3, [r0, #8]
    a376:	blx	r3
		runningFromYield = false;
    a378:	strb	r5, [r4, #0]
    a37a:	b.n	a2ec <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a37c:	bl	aa4c <serialEvent()>
    a380:	b.n	a348 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a382:	ldr	r3, [pc, #24]	; (a39c <yield+0xe0>)
    a384:	str	r5, [r3, #0]
    a386:	b.n	a36c <yield+0xb0>
    a388:	.word	0x200138e0
    a38c:	.word	0x20019b70
    a390:	.word	0x20019b80
    a394:	.word	0x20019b84
    a398:	.word	0x200138f4
    a39c:	.word	0x20019b7c
    a3a0:	.word	0x20019c28
    a3a4:	.word	0x20019c10

0000a3a8 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    a3a8:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    a3aa:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    a3ac:	cbnz	r1, a3d6 <DMAChannel::begin(bool)+0x2e>
    a3ae:	ldr	r2, [r0, #0]
    a3b0:	cbz	r2, a3d6 <DMAChannel::begin(bool)+0x2e>
    a3b2:	ldrb	r3, [r0, #4]
    a3b4:	cmp	r3, #15
    a3b6:	bhi.n	a3d6 <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    a3b8:	ldr	r4, [pc, #160]	; (a45c <DMAChannel::begin(bool)+0xb4>)
    a3ba:	ldrh	r1, [r4, #0]
    a3bc:	asr.w	r5, r1, r3
    a3c0:	lsls	r5, r5, #31
    a3c2:	bpl.n	a3da <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    a3c4:	add.w	r3, r3, #33554432	; 0x2000000
    a3c8:	add.w	r3, r3, #1152	; 0x480
    a3cc:	cmp.w	r2, r3, lsl #5
    a3d0:	bne.n	a3da <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    a3d2:	cpsie	i
		return;
    a3d4:	pop	{r4, r5, r6, r7, pc}
    a3d6:	ldr	r4, [pc, #132]	; (a45c <DMAChannel::begin(bool)+0xb4>)
    a3d8:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    a3da:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    a3dc:	asr.w	r2, r1, r3
    a3e0:	ands.w	r2, r2, #1
    a3e4:	beq.n	a3f6 <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    a3e6:	adds	r3, #1
    a3e8:	cmp	r3, #16
    a3ea:	bne.n	a3dc <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    a3ec:	cpsie	i
			TCD = (TCD_t *)0;
    a3ee:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    a3f0:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    a3f2:	str	r2, [r0, #0]
    a3f4:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    a3f6:	movs	r5, #1
    a3f8:	lsls	r5, r3
    a3fa:	orrs	r1, r5
    a3fc:	strh	r1, [r4, #0]
			__enable_irq();
    a3fe:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    a400:	ldr	r6, [pc, #92]	; (a460 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    a402:	ldr	r5, [pc, #96]	; (a464 <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    a404:	ldr	r7, [pc, #96]	; (a468 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    a406:	ldr.w	lr, [pc, #104]	; a470 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    a40a:	uxtb	r1, r3
    a40c:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    a40e:	ldr	r4, [r6, #0]
    a410:	orr.w	r4, r4, #2
    a414:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    a416:	ldr	r4, [r5, #0]
    a418:	orr.w	r4, r4, #2
    a41c:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a41e:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    a422:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    a426:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a42a:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    a42e:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a430:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a434:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    a436:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    a438:	ldr	r4, [pc, #48]	; (a46c <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    a43a:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a43e:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a440:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    a442:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    a444:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a446:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    a448:	str	r2, [r3, #0]
	*p++ = 0;
    a44a:	str	r2, [r3, #4]
	*p++ = 0;
    a44c:	str	r2, [r3, #8]
	*p++ = 0;
    a44e:	str	r2, [r3, #12]
	*p++ = 0;
    a450:	str	r2, [r3, #16]
	*p++ = 0;
    a452:	str	r2, [r3, #20]
	*p++ = 0;
    a454:	str	r2, [r3, #24]
	*p++ = 0;
    a456:	str	r2, [r3, #28]
    a458:	pop	{r4, r5, r6, r7, pc}
    a45a:	nop
    a45c:	.word	0x20019b72
    a460:	.word	0x40048040
    a464:	.word	0x4004803c
    a468:	.word	0x40008000
    a46c:	.word	0x4000801f
    a470:	.word	0x4000801a

0000a474 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    a474:	ldrb	r3, [r0, #4]
    a476:	cmp	r3, #15
    a478:	bhi.n	a4a0 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    a47a:	ldr	r2, [pc, #40]	; (a4a4 <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    a47c:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    a47e:	strb	r3, [r2, #0]
	__disable_irq();
    a480:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    a482:	ldr	r1, [pc, #36]	; (a4a8 <DMAChannel::release()+0x34>)
    a484:	ldrb	r4, [r0, #4]
    a486:	ldrh	r2, [r1, #0]
    a488:	movs	r3, #1
    a48a:	lsls	r3, r4
    a48c:	bic.w	r3, r2, r3
    a490:	strh	r3, [r1, #0]
	__enable_irq();
    a492:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    a494:	movs	r2, #16
	TCD = (TCD_t *)0;
    a496:	movs	r3, #0
}
    a498:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    a49c:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    a49e:	str	r3, [r0, #0]
}
    a4a0:	bx	lr
    a4a2:	nop
    a4a4:	.word	0x4000801a
    a4a8:	.word	0x20019b72

0000a4ac <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a4ac:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a4ae:	mrs	r2, PRIMASK
		__disable_irq();
    a4b2:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a4b4:	ldr	r4, [pc, #48]	; (a4e8 <EventResponder::runFromInterrupt()+0x3c>)
    a4b6:	ldr	r0, [r4, #0]
		if (first) {
    a4b8:	cbz	r0, a4dc <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a4ba:	ldr	r6, [pc, #48]	; (a4ec <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a4bc:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a4be:	ldr	r3, [r0, #20]
    a4c0:	str	r3, [r4, #0]
			if (firstInterrupt) {
    a4c2:	cbz	r3, a4e2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a4c4:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a4c6:	cbnz	r2, a4ca <EventResponder::runFromInterrupt()+0x1e>
    a4c8:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a4ca:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a4cc:	ldr	r3, [r0, #8]
    a4ce:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a4d0:	mrs	r2, PRIMASK
		__disable_irq();
    a4d4:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a4d6:	ldr	r0, [r4, #0]
		if (first) {
    a4d8:	cmp	r0, #0
    a4da:	bne.n	a4be <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a4dc:	cbnz	r2, a4e0 <EventResponder::runFromInterrupt()+0x34>
    a4de:	cpsie	i
    a4e0:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a4e2:	str	r3, [r6, #0]
    a4e4:	b.n	a4c6 <EventResponder::runFromInterrupt()+0x1a>
    a4e6:	nop
    a4e8:	.word	0x20019b74
    a4ec:	.word	0x20019b78

0000a4f0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a4f0:	b.w	a4ac <EventResponder::runFromInterrupt()>

0000a4f4 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    a4f4:	ldr	r2, [pc, #8]	; (a500 <systick_isr+0xc>)
    a4f6:	ldr	r3, [r2, #0]
    a4f8:	adds	r3, #1
    a4fa:	str	r3, [r2, #0]
    a4fc:	bx	lr
    a4fe:	nop
    a500:	.word	0x20019a84

0000a504 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a504:	b.w	8a44 <usb_serial_flush_input>

0000a508 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a508:	b.w	89f8 <usb_serial_peekchar>

0000a50c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a50c:	b.w	89b0 <usb_serial_getchar>

0000a510 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a510:	b.w	8a28 <usb_serial_available>

0000a514 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a514:	b.w	8be4 <usb_serial_flush_output>

0000a518 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a518:	b.w	8b9c <usb_serial_write_buffer_free>

0000a51c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a51c:	mov	r0, r1
    a51e:	mov	r1, r2
    a520:	b.w	8a7c <usb_serial_write>

0000a524 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a524:	mov	r0, r1
    a526:	b.w	8b84 <usb_serial_putchar>
    a52a:	nop

0000a52c <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    a52c:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    a52e:	mov	r6, r1
    a530:	cbz	r1, a550 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    a532:	cbz	r2, a554 <Print::write(unsigned char const*, unsigned int)+0x28>
    a534:	mov	r7, r0
    a536:	mov	r4, r2
    a538:	movs	r5, #0
    a53a:	ldr	r3, [r7, #0]
    a53c:	ldrb.w	r1, [r6], #1
    a540:	ldr	r3, [r3, #0]
    a542:	mov	r0, r7
    a544:	blx	r3
    a546:	subs	r4, #1
    a548:	add	r5, r0
    a54a:	bne.n	a53a <Print::write(unsigned char const*, unsigned int)+0xe>
    a54c:	mov	r0, r5
    a54e:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    a550:	mov	r0, r1
    a552:	pop	{r3, r4, r5, r6, r7, pc}
    a554:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    a556:	pop	{r3, r4, r5, r6, r7, pc}

0000a558 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a558:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    a55a:	ldr	r2, [pc, #24]	; (a574 <Print::println()+0x1c>)
	return write(buf, 2);
    a55c:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a55e:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    a560:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a562:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a564:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a566:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a56a:	movs	r2, #2
    a56c:	blx	r3
}
    a56e:	add	sp, #12
    a570:	ldr.w	pc, [sp], #4
    a574:	.word	0x000136b8

0000a578 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a578:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    a57a:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a57c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a57e:	ldr	r3, [r3, #4]
    a580:	blx	r3
	return len;
}
    a582:	mov	r0, r4
    a584:	pop	{r4, pc}
    a586:	nop

0000a588 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a588:	push	{r1, r2, r3}
    a58a:	push	{lr}
    a58c:	sub	sp, #8
    a58e:	add	r2, sp, #12
    a590:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    a594:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a596:	bl	ff48 <vdprintf>
#endif
}
    a59a:	add	sp, #8
    a59c:	ldr.w	lr, [sp], #4
    a5a0:	add	sp, #12
    a5a2:	bx	lr

0000a5a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a5a4:	push	{r4, r5, r6, r7, lr}
    a5a6:	mov	r7, r0
    a5a8:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a5aa:	cmp	r2, #0
    a5ac:	beq.n	a616 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a5ae:	cmp	r2, #1
    a5b0:	it	eq
    a5b2:	moveq	r2, #10
	}


	if (n == 0) {
    a5b4:	cbz	r1, a60c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a5b6:	movs	r4, #33	; 0x21
    a5b8:	b.n	a5bc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a5ba:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a5bc:	udiv	r5, r1, r2
    a5c0:	mls	r1, r2, r5, r1
    a5c4:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a5c6:	cmp	r1, #9
    a5c8:	add.w	r1, r0, #48	; 0x30
    a5cc:	it	ls
    a5ce:	uxtbls	r0, r1
    a5d0:	add	r1, sp, #40	; 0x28
    a5d2:	it	hi
    a5d4:	addhi	r0, #55	; 0x37
    a5d6:	add	r1, r4
    a5d8:	it	hi
    a5da:	uxtbhi	r0, r0
    a5dc:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    a5e0:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    a5e2:	mov	r1, r5
    a5e4:	cmp	r5, #0
    a5e6:	bne.n	a5ba <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a5e8:	cbz	r3, a5f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a5ea:	subs	r4, #1
    a5ec:	uxtb	r4, r4
		buf[i] = '-';
    a5ee:	add	r3, sp, #40	; 0x28
    a5f0:	add	r3, r4
    a5f2:	movs	r2, #45	; 0x2d
    a5f4:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a5f8:	ldr	r3, [r7, #0]
    a5fa:	add	r2, sp, #4
    a5fc:	adds	r1, r2, r4
    a5fe:	ldr	r3, [r3, #4]
    a600:	mov	r0, r7
    a602:	rsb	r2, r4, #34	; 0x22
    a606:	blx	r3
}
    a608:	add	sp, #44	; 0x2c
    a60a:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a60c:	movs	r2, #48	; 0x30
    a60e:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a612:	movs	r4, #33	; 0x21
    a614:	b.n	a5e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a616:	ldr	r3, [r0, #0]
    a618:	uxtb	r1, r1
    a61a:	ldr	r3, [r3, #0]
    a61c:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a61e:	add	sp, #44	; 0x2c
    a620:	pop	{r4, r5, r6, r7, pc}
    a622:	nop

0000a624 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a624:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a626:	bl	18c4 <setup>
	while (1) {
		loop();
    a62a:	bl	1c30 <loop>
		yield();
    a62e:	bl	a2bc <yield>
    a632:	b.n	a62a <main+0x6>

0000a634 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    a634:	cmp.w	r1, #896	; 0x380
    a638:	push	{r4, r5, r6, r7}
    a63a:	it	cs
    a63c:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    a640:	cpsid	i
	memory_pool = data;
    a642:	ldr	r2, [pc, #76]	; (a690 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    a644:	ldr	r4, [pc, #76]	; (a694 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)
    a646:	ldr	r3, [pc, #80]	; (a698 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    a648:	str	r0, [r2, #0]
	memory_pool_first_mask = 0;
    a64a:	movs	r2, #0
    a64c:	strh	r2, [r4, #0]
    a64e:	add.w	r4, r3, #112	; 0x70
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    a652:	str.w	r2, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
    a656:	cmp	r3, r4
    a658:	bne.n	a652 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x1e>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a65a:	cbz	r1, a68a <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
    a65c:	ldr	r6, [pc, #60]	; (a69c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
    a65e:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a660:	movs	r7, #1
    a662:	lsrs	r5, r3, #5
    a664:	and.w	r4, r3, #31
    a668:	ldr.w	r2, [r6, r5, lsl #2]
    a66c:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a670:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a672:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a674:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a676:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a67a:	bne.n	a662 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    a67c:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    a67e:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    a680:	adds	r3, #1
    a682:	cmp	r3, r1
    a684:	add.w	r0, r0, #260	; 0x104
    a688:	bne.n	a67e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4a>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    a68a:	cpsie	i

}
    a68c:	pop	{r4, r5, r6, r7}
    a68e:	bx	lr
    a690:	.word	0x20019b90
    a694:	.word	0x20019c0a
    a698:	.word	0x20019b94
    a69c:	.word	0x20019b98

0000a6a0 <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    a6a0:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    a6a2:	cpsid	i
	index = memory_pool_first_mask;
    a6a4:	ldr	r7, [pc, #140]	; (a734 <AudioStream::allocate()+0x94>)
	p += index;
    a6a6:	ldr	r6, [pc, #144]	; (a738 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    a6a8:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    a6aa:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    a6ae:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    a6b2:	cmp	r0, r3
    a6b4:	bcs.n	a6dc <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a6b6:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    a6ba:	cbnz	r1, a6e4 <AudioStream::allocate()+0x44>
    a6bc:	adds	r2, r0, #4
    a6be:	add.w	r5, r6, #115	; 0x73
    a6c2:	adds	r3, r4, #1
    a6c4:	subs	r5, r5, r2
    a6c6:	add.w	r5, r3, r5, lsr #2
    a6ca:	b.n	a6d4 <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a6cc:	ldr.w	r1, [r2], #4
		if (avail) break;
    a6d0:	cbnz	r1, a6e4 <AudioStream::allocate()+0x44>
    a6d2:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a6d4:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    a6d6:	mov	r4, r3
		p++;
    a6d8:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a6da:	bne.n	a6cc <AudioStream::allocate()+0x2c>
			__enable_irq();
    a6dc:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    a6de:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a6e0:	pop	{r4, r5, r6, r7}
    a6e2:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    a6e4:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    a6e8:	mov.w	r2, #2147483648	; 0x80000000
    a6ec:	lsrs	r2, r3
    a6ee:	bic.w	r1, r1, r2
	*p = avail;
    a6f2:	str	r1, [r0, #0]
	if (!avail) index++;
    a6f4:	cbnz	r1, a6f8 <AudioStream::allocate()+0x58>
    a6f6:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    a6f8:	ldr	r1, [pc, #64]	; (a73c <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    a6fa:	strh	r4, [r7, #0]
	used = memory_used + 1;
    a6fc:	ldrh	r2, [r1, #0]
    a6fe:	adds	r2, #1
	memory_used = used;
    a700:	uxth	r4, r2
    a702:	strh	r4, [r1, #0]
	__enable_irq();
    a704:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a706:	subs	r0, r0, r6
    a708:	asrs	r0, r0, #2
    a70a:	rsb	r0, r3, r0, lsl #5
    a70e:	add.w	r0, r0, r0, lsl #6
    a712:	lsls	r3, r0, #2
    a714:	ldr	r0, [pc, #40]	; (a740 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a716:	ldr	r1, [pc, #44]	; (a744 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a718:	ldr	r0, [r0, #0]
    a71a:	add.w	r3, r3, #8032	; 0x1f60
    a71e:	adds	r3, #28
	block->ref_count = 1;
    a720:	movs	r5, #1
    a722:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    a724:	ldrh	r5, [r1, #0]
    a726:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a728:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a72a:	it	hi
    a72c:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a72e:	pop	{r4, r5, r6, r7}
    a730:	bx	lr
    a732:	nop
    a734:	.word	0x20019c0a
    a738:	.word	0x20019b98
    a73c:	.word	0x20019c0c
    a740:	.word	0x20019b90
    a744:	.word	0x20019b8c

0000a748 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    a748:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    a74a:	cpsid	i
	if (block->ref_count > 1) {
    a74c:	ldrb	r3, [r0, #0]
    a74e:	cmp	r3, #1
    a750:	bls.n	a75a <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    a752:	subs	r3, #1
    a754:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    a756:	cpsie	i
    a758:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    a75a:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    a75c:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a75e:	ldr	r4, [pc, #48]	; (a790 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a760:	ldr	r5, [pc, #48]	; (a794 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a762:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a766:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a768:	mvns	r2, r2
    a76a:	mov.w	r0, #2147483648	; 0x80000000
    a76e:	and.w	r2, r2, #31
    a772:	lsr.w	r2, r0, r2
    a776:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    a778:	ldr	r2, [pc, #28]	; (a798 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a77a:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a77e:	cmp	r3, r6
    a780:	it	cc
    a782:	strhcc	r3, [r5, #0]
		memory_used--;
    a784:	ldrh	r3, [r2, #0]
    a786:	subs	r3, #1
    a788:	strh	r3, [r2, #0]
	}
	__enable_irq();
    a78a:	cpsie	i
}
    a78c:	pop	{r4, r5, r6}
    a78e:	bx	lr
    a790:	.word	0x20019b98
    a794:	.word	0x20019c0a
    a798:	.word	0x20019c0c

0000a79c <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a79c:	ldr	r3, [r0, #12]
    a79e:	cbz	r3, a7ce <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    a7a0:	push	{r4, r5}
    a7a2:	b.n	a7a8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a7a4:	ldr	r3, [r3, #12]
    a7a6:	cbz	r3, a7cc <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    a7a8:	ldrb	r0, [r3, #8]
    a7aa:	cmp	r0, r2
    a7ac:	bne.n	a7a4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    a7ae:	ldr	r0, [r3, #4]
    a7b0:	ldrb	r4, [r3, #9]
    a7b2:	ldr	r0, [r0, #16]
    a7b4:	ldr.w	r5, [r0, r4, lsl #2]
    a7b8:	cmp	r5, #0
    a7ba:	bne.n	a7a4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    a7bc:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    a7c0:	ldrb	r0, [r1, #0]
    a7c2:	adds	r0, #1
    a7c4:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a7c6:	ldr	r3, [r3, #12]
    a7c8:	cmp	r3, #0
    a7ca:	bne.n	a7a8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    a7cc:	pop	{r4, r5}
    a7ce:	bx	lr

0000a7d0 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a7d0:	ldrb	r3, [r0, #9]
    a7d2:	cmp	r3, r1
    a7d4:	bls.n	a7e4 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    a7d6:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    a7d8:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    a7da:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    a7de:	str.w	r2, [r3, r1, lsl #2]
	return in;
    a7e2:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a7e4:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    a7e6:	bx	lr

0000a7e8 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    a7e8:	ldrb	r3, [r0, #16]
    a7ea:	cbnz	r3, a836 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    a7ec:	ldr	r3, [r0, #4]
    a7ee:	ldrb	r2, [r0, #9]
    a7f0:	ldrb	r3, [r3, #9]
    a7f2:	cmp	r2, r3
    a7f4:	bhi.n	a836 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    a7f6:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    a7f8:	cpsid	i
	p = src.destination_list;
    a7fa:	ldr	r4, [r0, #0]
    a7fc:	ldr	r3, [r4, #12]
	if (p == NULL) {
    a7fe:	cbz	r3, a84c <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a800:	ldr	r2, [r3, #12]
    a802:	cbz	r2, a812 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    a804:	ldr	r1, [r3, #0]
    a806:	cmp	r4, r1
    a808:	beq.n	a838 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    a80a:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a80c:	ldr	r2, [r3, #12]
    a80e:	cmp	r2, #0
    a810:	bne.n	a804 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    a812:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    a814:	movs	r3, #0
    a816:	str	r3, [r0, #12]
	src.numConnections++;
    a818:	ldrb	r3, [r4, #10]
    a81a:	adds	r3, #1
    a81c:	strb	r3, [r4, #10]
	src.active = true;
    a81e:	ldr	r2, [r0, #0]

	dst.numConnections++;
    a820:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    a822:	movs	r3, #1
    a824:	strb	r3, [r2, #8]

	dst.numConnections++;
    a826:	ldrb	r2, [r1, #10]
    a828:	add	r2, r3
    a82a:	strb	r2, [r1, #10]
	dst.active = true;
    a82c:	ldr	r2, [r0, #4]
    a82e:	strb	r3, [r2, #8]

	isConnected = true;
    a830:	strb	r3, [r0, #16]

	__enable_irq();
    a832:	cpsie	i
}
    a834:	pop	{r4, r5}
    a836:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    a838:	ldr	r5, [r3, #4]
    a83a:	ldr	r1, [r0, #4]
    a83c:	cmp	r5, r1
    a83e:	bne.n	a80a <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    a840:	ldrh	r1, [r3, #8]
    a842:	ldrh	r3, [r0, #8]
    a844:	cmp	r1, r3
    a846:	beq.n	a832 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    a848:	mov	r3, r2
    a84a:	b.n	a80c <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    a84c:	str	r0, [r4, #12]
    a84e:	b.n	a814 <AudioConnection::connect()+0x2c>

0000a850 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    a850:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    a852:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    a854:	cmp	r3, #0
    a856:	beq.n	a8be <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    a858:	ldr	r3, [r0, #4]
    a85a:	ldrb	r2, [r0, #9]
    a85c:	ldrb	r3, [r3, #9]
    a85e:	cmp	r2, r3
    a860:	bhi.n	a8be <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    a862:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    a864:	ldr	r2, [r0, #0]
    a866:	ldr	r3, [r2, #12]
	if (p == NULL) {
    a868:	cbz	r3, a8bc <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    a86a:	cmp	r0, r3
    a86c:	bne.n	a874 <AudioConnection::disconnect()+0x24>
    a86e:	b.n	a8c4 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    a870:	cmp	r0, r3
    a872:	beq.n	a87a <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    a874:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    a876:	cmp	r3, #0
    a878:	bne.n	a870 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    a87a:	ldr	r3, [r0, #4]
    a87c:	ldrb	r1, [r0, #9]
    a87e:	ldr	r3, [r3, #16]
    a880:	mov	r4, r0
    a882:	ldr.w	r0, [r3, r1, lsl #2]
    a886:	cbz	r0, a89c <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    a888:	bl	a748 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    a88c:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    a88e:	ldr	r3, [r4, #4]
    a890:	ldrb	r2, [r4, #9]
    a892:	ldr	r3, [r3, #16]
    a894:	movs	r1, #0
    a896:	str.w	r1, [r3, r2, lsl #2]
    a89a:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    a89c:	ldrb	r3, [r2, #10]
    a89e:	subs	r3, #1
    a8a0:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    a8a2:	ldr	r3, [r4, #0]
    a8a4:	ldrb	r2, [r3, #10]
    a8a6:	cbnz	r2, a8aa <AudioConnection::disconnect()+0x5a>
		src.active = false;
    a8a8:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    a8aa:	ldr	r2, [r4, #4]
    a8ac:	ldrb	r3, [r2, #10]
    a8ae:	subs	r3, #1
    a8b0:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    a8b2:	ldr	r3, [r4, #4]
    a8b4:	ldrb	r2, [r3, #10]
    a8b6:	cbz	r2, a8c0 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    a8b8:	movs	r3, #0
    a8ba:	strb	r3, [r4, #16]

	__enable_irq();
    a8bc:	cpsie	i
    a8be:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    a8c0:	strb	r2, [r3, #8]
    a8c2:	b.n	a8b8 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    a8c4:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    a8c6:	str	r3, [r2, #12]
    a8c8:	b.n	a87a <AudioConnection::disconnect()+0x2a>
    a8ca:	nop

0000a8cc <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a8cc:	ldr	r3, [pc, #32]	; (a8f0 <AudioStream::update_setup()+0x24>)
    a8ce:	ldrb	r2, [r3, #0]
    a8d0:	cbnz	r2, a8ea <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a8d2:	ldr	r0, [pc, #32]	; (a8f4 <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a8d4:	ldr	r1, [pc, #32]	; (a8f8 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    a8d6:	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a8d8:	movs	r4, #208	; 0xd0
    a8da:	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a8dc:	movs	r2, #1
	update_scheduled = true;
	return true;
    a8de:	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a8e0:	str	r2, [r1, #0]
	update_scheduled = true;
    a8e2:	strb	r2, [r3, #0]
	return true;
}
    a8e4:	ldr.w	r4, [sp], #4
    a8e8:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a8ea:	movs	r0, #0
    a8ec:	bx	lr
    a8ee:	nop
    a8f0:	.word	0x20019b94
    a8f4:	.word	0xe000e440
    a8f8:	.word	0xe000e108

0000a8fc <software_isr>:
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a8fc:	ldr	r1, [pc, #104]	; (a968 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a8fe:	ldr	r2, [pc, #108]	; (a96c <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a900:	ldr	r0, [pc, #108]	; (a970 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    a902:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a904:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a906:	ldr	r5, [pc, #108]	; (a974 <software_isr+0x78>)
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a908:	ldr	r4, [r0, #0]
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a90a:	orr.w	r3, r3, #16777216	; 0x1000000
    a90e:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a910:	ldr	r3, [r2, #0]
    a912:	orr.w	r3, r3, #1
    a916:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a918:	ldr	r6, [r5, #0]
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a91a:	cbnz	r4, a922 <software_isr+0x26>
    a91c:	b.n	a94a <software_isr+0x4e>
    a91e:	ldr	r4, [r4, #20]
    a920:	cbz	r4, a94a <software_isr+0x4e>
		if (p->active) {
    a922:	ldrb	r3, [r4, #8]
    a924:	cmp	r3, #0
    a926:	beq.n	a91e <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    a928:	ldr	r3, [r4, #0]
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    a92a:	ldr	r7, [r5, #0]
			p->update();
    a92c:	ldr	r3, [r3, #0]
    a92e:	mov	r0, r4
    a930:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a932:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a934:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a936:	subs	r3, r3, r7
    a938:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    a93a:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a93c:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    a93e:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a940:	it	hi
    a942:	strhhi	r2, [r4, #6]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a944:	ldr	r4, [r4, #20]
    a946:	cmp	r4, #0
    a948:	bne.n	a922 <software_isr+0x26>
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    a94a:	ldr	r3, [pc, #40]	; (a974 <software_isr+0x78>)
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a94c:	ldr	r2, [pc, #40]	; (a978 <software_isr+0x7c>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    a94e:	ldr	r3, [r3, #0]
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a950:	ldrh	r0, [r2, #0]
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    a952:	ldr	r4, [pc, #40]	; (a97c <software_isr+0x80>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    a954:	subs	r3, r3, r6
    a956:	lsrs	r3, r3, #4
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    a958:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a95a:	cmp	r3, r0
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    a95c:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a95e:	bls.n	a964 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    a960:	strh	r1, [r2, #0]
    a962:	pop	{r3, r4, r5, r6, r7, pc}
    a964:	pop	{r3, r4, r5, r6, r7, pc}
    a966:	nop
    a968:	.word	0xe000edfc
    a96c:	.word	0xe0001000
    a970:	.word	0x20019b88
    a974:	.word	0xe0001004
    a978:	.word	0x20019c08
    a97c:	.word	0x20019c0e

0000a980 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a980:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a982:	ldr	r5, [pc, #56]	; (a9bc <Stream::timedPeek()+0x3c>)
    a984:	sub	sp, #8
    a986:	ldr	r3, [r5, #0]
    a988:	str	r3, [sp, #0]
	return ret;
    a98a:	ldr	r6, [sp, #0]
    a98c:	mov	r4, r0
    a98e:	b.n	a9a2 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a990:	bl	a2bc <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a994:	ldr	r3, [r5, #0]
    a996:	str	r3, [sp, #4]
	return ret;
    a998:	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a99a:	ldr	r2, [r4, #8]
    a99c:	subs	r3, r3, r6
    a99e:	cmp	r3, r2
    a9a0:	bcs.n	a9b2 <Stream::timedPeek()+0x32>
    c = peek();
    a9a2:	ldr	r3, [r4, #0]
    a9a4:	mov	r0, r4
    a9a6:	ldr	r3, [r3, #24]
    a9a8:	blx	r3
    if (c >= 0) return c;
    a9aa:	cmp	r0, #0
    a9ac:	blt.n	a990 <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a9ae:	add	sp, #8
    a9b0:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a9b2:	mov.w	r0, #4294967295
}
    a9b6:	add	sp, #8
    a9b8:	pop	{r4, r5, r6, pc}
    a9ba:	nop
    a9bc:	.word	0x20019a84

0000a9c0 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a9c0:	push	{r4, lr}
    a9c2:	mov	r4, r0
    a9c4:	b.n	a9d4 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a9c6:	cmp	r3, #45	; 0x2d
    a9c8:	beq.n	a9e4 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a9ca:	cmp	r2, #9
    a9cc:	bls.n	a9e4 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a9ce:	ldr	r3, [r4, #0]
    a9d0:	ldr	r3, [r3, #20]
    a9d2:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a9d4:	mov	r0, r4
    a9d6:	bl	a980 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a9da:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a9dc:	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    a9e0:	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a9e2:	bge.n	a9c6 <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a9e4:	mov	r0, r3
    a9e6:	pop	{r4, pc}

0000a9e8 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a9e8:	push	{r3, r4, r5, r6, r7, lr}
    a9ea:	mov	r5, r1
    a9ec:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a9ee:	bl	a9c0 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a9f2:	cmp	r0, #0
    a9f4:	blt.n	aa3e <Stream::parseInt(char)+0x56>
    a9f6:	movs	r6, #0
    a9f8:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a9fa:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a9fc:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    aa00:	beq.n	aa16 <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    aa02:	cmp	r0, #45	; 0x2d
    aa04:	beq.n	aa36 <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    aa06:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    aa0a:	cmp	r2, #9
      value = value * 10 + c - '0';
    aa0c:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    aa10:	bhi.n	aa16 <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    aa12:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    aa16:	ldr	r3, [r4, #0]
    aa18:	mov	r0, r4
    aa1a:	ldr	r3, [r3, #20]
    aa1c:	blx	r3
    c = timedPeek();
    aa1e:	mov	r0, r4
    aa20:	bl	a980 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    aa24:	sub.w	r3, r0, #48	; 0x30
    aa28:	cmp	r3, #9
    aa2a:	bls.n	a9fa <Stream::parseInt(char)+0x12>
    aa2c:	cmp	r0, r5
    aa2e:	beq.n	a9fa <Stream::parseInt(char)+0x12>

  if(isNegative)
    aa30:	cbz	r7, aa3a <Stream::parseInt(char)+0x52>
    value = -value;
    aa32:	negs	r0, r6
    aa34:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    aa36:	movs	r7, #1
    aa38:	b.n	aa16 <Stream::parseInt(char)+0x2e>
    aa3a:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    aa3c:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    aa3e:	movs	r0, #0
    aa40:	pop	{r3, r4, r5, r6, r7, pc}
    aa42:	nop

0000aa44 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    aa44:	movs	r1, #1
    aa46:	b.w	a9e8 <Stream::parseInt(char)>
    aa4a:	nop

0000aa4c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    aa4c:	bx	lr
    aa4e:	nop

0000aa50 <operator new(unsigned int)>:
    aa50:	b.w	b908 <malloc>

0000aa54 <operator delete(void*, unsigned int)>:
    aa54:	b.w	b918 <free>

0000aa58 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    aa58:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    aa5a:	ldr	r2, [pc, #96]	; (aabc <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    aa5c:	ldr	r3, [pc, #96]	; (aac0 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    aa5e:	ldr	r1, [pc, #100]	; (aac4 <usb_init_serialnumber+0x6c>)
    aa60:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    aa62:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    aa64:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    aa66:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    aa68:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    aa6a:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    aa6c:	ldrb	r3, [r2, #0]
    aa6e:	lsls	r3, r3, #24
    aa70:	bpl.n	aa6c <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    aa72:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    aa74:	ldr	r3, [pc, #80]	; (aac8 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    aa76:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    aa78:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    aa7a:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    aa7c:	ldr	r3, [pc, #76]	; (aacc <usb_init_serialnumber+0x74>)
    aa7e:	ldr	r4, [pc, #80]	; (aad0 <usb_init_serialnumber+0x78>)
    aa80:	cmp	r0, r3
    aa82:	it	ls
    aa84:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    aa88:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    aa8a:	it	ls
    aa8c:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    aa8e:	movs	r2, #10
    aa90:	bl	aad4 <ultoa>
    aa94:	add	r1, sp, #4
    aa96:	mov	r0, r4
	for (i=0; i<10; i++) {
    aa98:	movs	r3, #0
		char c = buf[i];
    aa9a:	ldrb.w	r2, [r1], #1
    aa9e:	adds	r3, #1
		if (!c) break;
    aaa0:	cbz	r2, aab2 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    aaa2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    aaa4:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    aaa8:	bne.n	aa9a <usb_init_serialnumber+0x42>
    aaaa:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    aaac:	strb	r3, [r4, #0]
}
    aaae:	add	sp, #16
    aab0:	pop	{r4, pc}
    aab2:	lsls	r3, r3, #1
    aab4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    aab6:	strb	r3, [r4, #0]
}
    aab8:	add	sp, #16
    aaba:	pop	{r4, pc}
    aabc:	.word	0x40020004
    aac0:	.word	0x40020000
    aac4:	.word	0x41070000
    aac8:	.word	0x4002000c
    aacc:	.word	0x0098967f
    aad0:	.word	0x20013984

0000aad4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    aad4:	push	{r4, r5, r6, r7}
    aad6:	subs	r5, r1, #1
    aad8:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    aada:	movs	r4, #0
    aadc:	b.n	aae0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    aade:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    aae0:	udiv	r3, r0, r2
    aae4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    aae8:	cmp	r0, #9
    aaea:	add.w	r7, r0, #48	; 0x30
    aaee:	itet	hi
    aaf0:	addhi	r0, #55	; 0x37
    aaf2:	uxtbls	r0, r7
    aaf4:	uxtbhi	r0, r0
    aaf6:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    aafa:	mov	r0, r3
    aafc:	cmp	r3, #0
    aafe:	bne.n	aade <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    ab00:	adds	r2, r1, r4
    ab02:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    ab04:	cbz	r4, ab1a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    ab06:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    ab08:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    ab0c:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ab0e:	adds	r3, #1
    ab10:	subs	r0, r4, r3
    ab12:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    ab14:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ab18:	blt.n	ab06 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    ab1a:	mov	r0, r1
    ab1c:	pop	{r4, r5, r6, r7}
    ab1e:	bx	lr

0000ab20 <nanf>:
    ab20:	vldr	s0, [pc, #4]	; ab28 <nanf+0x8>
    ab24:	bx	lr
    ab26:	nop
    ab28:	.word	0x7fc00000

0000ab2c <__aeabi_atexit>:
    ab2c:	mov	r3, r1
    ab2e:	mov	r1, r0
    ab30:	mov	r0, r3
    ab32:	b.w	b850 <__cxa_atexit>
    ab36:	nop

0000ab38 <__aeabi_drsub>:
    ab38:	eor.w	r1, r1, #2147483648	; 0x80000000
    ab3c:	b.n	ab44 <__adddf3>
    ab3e:	nop

0000ab40 <__aeabi_dsub>:
    ab40:	eor.w	r3, r3, #2147483648	; 0x80000000

0000ab44 <__adddf3>:
    ab44:	push	{r4, r5, lr}
    ab46:	mov.w	r4, r1, lsl #1
    ab4a:	mov.w	r5, r3, lsl #1
    ab4e:	teq	r4, r5
    ab52:	it	eq
    ab54:	teqeq	r0, r2
    ab58:	itttt	ne
    ab5a:	orrsne.w	ip, r4, r0
    ab5e:	orrsne.w	ip, r5, r2
    ab62:	mvnsne.w	ip, r4, asr #21
    ab66:	mvnsne.w	ip, r5, asr #21
    ab6a:	beq.w	ad32 <__adddf3+0x1ee>
    ab6e:	mov.w	r4, r4, lsr #21
    ab72:	rsbs	r5, r4, r5, lsr #21
    ab76:	it	lt
    ab78:	neglt	r5, r5
    ab7a:	ble.n	ab96 <__adddf3+0x52>
    ab7c:	add	r4, r5
    ab7e:	eor.w	r2, r0, r2
    ab82:	eor.w	r3, r1, r3
    ab86:	eor.w	r0, r2, r0
    ab8a:	eor.w	r1, r3, r1
    ab8e:	eor.w	r2, r0, r2
    ab92:	eor.w	r3, r1, r3
    ab96:	cmp	r5, #54	; 0x36
    ab98:	it	hi
    ab9a:	pophi	{r4, r5, pc}
    ab9c:	tst.w	r1, #2147483648	; 0x80000000
    aba0:	mov.w	r1, r1, lsl #12
    aba4:	mov.w	ip, #1048576	; 0x100000
    aba8:	orr.w	r1, ip, r1, lsr #12
    abac:	beq.n	abb4 <__adddf3+0x70>
    abae:	negs	r0, r0
    abb0:	sbc.w	r1, r1, r1, lsl #1
    abb4:	tst.w	r3, #2147483648	; 0x80000000
    abb8:	mov.w	r3, r3, lsl #12
    abbc:	orr.w	r3, ip, r3, lsr #12
    abc0:	beq.n	abc8 <__adddf3+0x84>
    abc2:	negs	r2, r2
    abc4:	sbc.w	r3, r3, r3, lsl #1
    abc8:	teq	r4, r5
    abcc:	beq.w	ad1e <__adddf3+0x1da>
    abd0:	sub.w	r4, r4, #1
    abd4:	rsbs	lr, r5, #32
    abd8:	blt.n	abf6 <__adddf3+0xb2>
    abda:	lsl.w	ip, r2, lr
    abde:	lsr.w	r2, r2, r5
    abe2:	adds	r0, r0, r2
    abe4:	adc.w	r1, r1, #0
    abe8:	lsl.w	r2, r3, lr
    abec:	adds	r0, r0, r2
    abee:	asr.w	r3, r3, r5
    abf2:	adcs	r1, r3
    abf4:	b.n	ac14 <__adddf3+0xd0>
    abf6:	sub.w	r5, r5, #32
    abfa:	add.w	lr, lr, #32
    abfe:	cmp	r2, #1
    ac00:	lsl.w	ip, r3, lr
    ac04:	it	cs
    ac06:	orrcs.w	ip, ip, #2
    ac0a:	asr.w	r3, r3, r5
    ac0e:	adds	r0, r0, r3
    ac10:	adcs.w	r1, r1, r3, asr #31
    ac14:	and.w	r5, r1, #2147483648	; 0x80000000
    ac18:	bpl.n	ac2a <__adddf3+0xe6>
    ac1a:	mov.w	lr, #0
    ac1e:	rsbs	ip, ip, #0
    ac22:	sbcs.w	r0, lr, r0
    ac26:	sbc.w	r1, lr, r1
    ac2a:	cmp.w	r1, #1048576	; 0x100000
    ac2e:	bcc.n	ac68 <__adddf3+0x124>
    ac30:	cmp.w	r1, #2097152	; 0x200000
    ac34:	bcc.n	ac50 <__adddf3+0x10c>
    ac36:	lsrs	r1, r1, #1
    ac38:	movs.w	r0, r0, rrx
    ac3c:	mov.w	ip, ip, rrx
    ac40:	add.w	r4, r4, #1
    ac44:	mov.w	r2, r4, lsl #21
    ac48:	cmn.w	r2, #4194304	; 0x400000
    ac4c:	bcs.w	ad84 <__adddf3+0x240>
    ac50:	cmp.w	ip, #2147483648	; 0x80000000
    ac54:	it	eq
    ac56:	movseq.w	ip, r0, lsr #1
    ac5a:	adcs.w	r0, r0, #0
    ac5e:	adc.w	r1, r1, r4, lsl #20
    ac62:	orr.w	r1, r1, r5
    ac66:	pop	{r4, r5, pc}
    ac68:	movs.w	ip, ip, lsl #1
    ac6c:	adcs	r0, r0
    ac6e:	adc.w	r1, r1, r1
    ac72:	tst.w	r1, #1048576	; 0x100000
    ac76:	sub.w	r4, r4, #1
    ac7a:	bne.n	ac50 <__adddf3+0x10c>
    ac7c:	teq	r1, #0
    ac80:	itt	eq
    ac82:	moveq	r1, r0
    ac84:	moveq	r0, #0
    ac86:	clz	r3, r1
    ac8a:	it	eq
    ac8c:	addeq	r3, #32
    ac8e:	sub.w	r3, r3, #11
    ac92:	subs.w	r2, r3, #32
    ac96:	bge.n	acb2 <__adddf3+0x16e>
    ac98:	adds	r2, #12
    ac9a:	ble.n	acae <__adddf3+0x16a>
    ac9c:	add.w	ip, r2, #20
    aca0:	rsb	r2, r2, #12
    aca4:	lsl.w	r0, r1, ip
    aca8:	lsr.w	r1, r1, r2
    acac:	b.n	acc8 <__adddf3+0x184>
    acae:	add.w	r2, r2, #20
    acb2:	it	le
    acb4:	rsble	ip, r2, #32
    acb8:	lsl.w	r1, r1, r2
    acbc:	lsr.w	ip, r0, ip
    acc0:	itt	le
    acc2:	orrle.w	r1, r1, ip
    acc6:	lslle	r0, r2
    acc8:	subs	r4, r4, r3
    acca:	ittt	ge
    accc:	addge.w	r1, r1, r4, lsl #20
    acd0:	orrge	r1, r5
    acd2:	popge	{r4, r5, pc}
    acd4:	mvn.w	r4, r4
    acd8:	subs	r4, #31
    acda:	bge.n	ad16 <__adddf3+0x1d2>
    acdc:	adds	r4, #12
    acde:	bgt.n	acfe <__adddf3+0x1ba>
    ace0:	add.w	r4, r4, #20
    ace4:	rsb	r2, r4, #32
    ace8:	lsr.w	r0, r0, r4
    acec:	lsl.w	r3, r1, r2
    acf0:	orr.w	r0, r0, r3
    acf4:	lsr.w	r3, r1, r4
    acf8:	orr.w	r1, r5, r3
    acfc:	pop	{r4, r5, pc}
    acfe:	rsb	r4, r4, #12
    ad02:	rsb	r2, r4, #32
    ad06:	lsr.w	r0, r0, r2
    ad0a:	lsl.w	r3, r1, r4
    ad0e:	orr.w	r0, r0, r3
    ad12:	mov	r1, r5
    ad14:	pop	{r4, r5, pc}
    ad16:	lsr.w	r0, r1, r4
    ad1a:	mov	r1, r5
    ad1c:	pop	{r4, r5, pc}
    ad1e:	teq	r4, #0
    ad22:	eor.w	r3, r3, #1048576	; 0x100000
    ad26:	itte	eq
    ad28:	eoreq.w	r1, r1, #1048576	; 0x100000
    ad2c:	addeq	r4, #1
    ad2e:	subne	r5, #1
    ad30:	b.n	abd0 <__adddf3+0x8c>
    ad32:	mvns.w	ip, r4, asr #21
    ad36:	it	ne
    ad38:	mvnsne.w	ip, r5, asr #21
    ad3c:	beq.n	ad92 <__adddf3+0x24e>
    ad3e:	teq	r4, r5
    ad42:	it	eq
    ad44:	teqeq	r0, r2
    ad48:	beq.n	ad56 <__adddf3+0x212>
    ad4a:	orrs.w	ip, r4, r0
    ad4e:	itt	eq
    ad50:	moveq	r1, r3
    ad52:	moveq	r0, r2
    ad54:	pop	{r4, r5, pc}
    ad56:	teq	r1, r3
    ad5a:	ittt	ne
    ad5c:	movne	r1, #0
    ad5e:	movne	r0, #0
    ad60:	popne	{r4, r5, pc}
    ad62:	movs.w	ip, r4, lsr #21
    ad66:	bne.n	ad74 <__adddf3+0x230>
    ad68:	lsls	r0, r0, #1
    ad6a:	adcs	r1, r1
    ad6c:	it	cs
    ad6e:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ad72:	pop	{r4, r5, pc}
    ad74:	adds.w	r4, r4, #4194304	; 0x400000
    ad78:	itt	cc
    ad7a:	addcc.w	r1, r1, #1048576	; 0x100000
    ad7e:	popcc	{r4, r5, pc}
    ad80:	and.w	r5, r1, #2147483648	; 0x80000000
    ad84:	orr.w	r1, r5, #2130706432	; 0x7f000000
    ad88:	orr.w	r1, r1, #15728640	; 0xf00000
    ad8c:	mov.w	r0, #0
    ad90:	pop	{r4, r5, pc}
    ad92:	mvns.w	ip, r4, asr #21
    ad96:	itte	ne
    ad98:	movne	r1, r3
    ad9a:	movne	r0, r2
    ad9c:	mvnseq.w	ip, r5, asr #21
    ada0:	itt	ne
    ada2:	movne	r3, r1
    ada4:	movne	r2, r0
    ada6:	orrs.w	r4, r0, r1, lsl #12
    adaa:	itte	eq
    adac:	orrseq.w	r5, r2, r3, lsl #12
    adb0:	teqeq	r1, r3
    adb4:	orrne.w	r1, r1, #524288	; 0x80000
    adb8:	pop	{r4, r5, pc}
    adba:	nop

0000adbc <__aeabi_ui2d>:
    adbc:	teq	r0, #0
    adc0:	itt	eq
    adc2:	moveq	r1, #0
    adc4:	bxeq	lr
    adc6:	push	{r4, r5, lr}
    adc8:	mov.w	r4, #1024	; 0x400
    adcc:	add.w	r4, r4, #50	; 0x32
    add0:	mov.w	r5, #0
    add4:	mov.w	r1, #0
    add8:	b.n	ac7c <__adddf3+0x138>
    adda:	nop

0000addc <__aeabi_i2d>:
    addc:	teq	r0, #0
    ade0:	itt	eq
    ade2:	moveq	r1, #0
    ade4:	bxeq	lr
    ade6:	push	{r4, r5, lr}
    ade8:	mov.w	r4, #1024	; 0x400
    adec:	add.w	r4, r4, #50	; 0x32
    adf0:	ands.w	r5, r0, #2147483648	; 0x80000000
    adf4:	it	mi
    adf6:	negmi	r0, r0
    adf8:	mov.w	r1, #0
    adfc:	b.n	ac7c <__adddf3+0x138>
    adfe:	nop

0000ae00 <__aeabi_f2d>:
    ae00:	lsls	r2, r0, #1
    ae02:	mov.w	r1, r2, asr #3
    ae06:	mov.w	r1, r1, rrx
    ae0a:	mov.w	r0, r2, lsl #28
    ae0e:	itttt	ne
    ae10:	andsne.w	r3, r2, #4278190080	; 0xff000000
    ae14:	teqne	r3, #4278190080	; 0xff000000
    ae18:	eorne.w	r1, r1, #939524096	; 0x38000000
    ae1c:	bxne	lr
    ae1e:	teq	r2, #0
    ae22:	ite	ne
    ae24:	teqne	r3, #4278190080	; 0xff000000
    ae28:	bxeq	lr
    ae2a:	push	{r4, r5, lr}
    ae2c:	mov.w	r4, #896	; 0x380
    ae30:	and.w	r5, r1, #2147483648	; 0x80000000
    ae34:	bic.w	r1, r1, #2147483648	; 0x80000000
    ae38:	b.n	ac7c <__adddf3+0x138>
    ae3a:	nop

0000ae3c <__aeabi_ul2d>:
    ae3c:	orrs.w	r2, r0, r1
    ae40:	it	eq
    ae42:	bxeq	lr
    ae44:	push	{r4, r5, lr}
    ae46:	mov.w	r5, #0
    ae4a:	b.n	ae62 <__aeabi_l2d+0x16>

0000ae4c <__aeabi_l2d>:
    ae4c:	orrs.w	r2, r0, r1
    ae50:	it	eq
    ae52:	bxeq	lr
    ae54:	push	{r4, r5, lr}
    ae56:	ands.w	r5, r1, #2147483648	; 0x80000000
    ae5a:	bpl.n	ae62 <__aeabi_l2d+0x16>
    ae5c:	negs	r0, r0
    ae5e:	sbc.w	r1, r1, r1, lsl #1
    ae62:	mov.w	r4, #1024	; 0x400
    ae66:	add.w	r4, r4, #50	; 0x32
    ae6a:	movs.w	ip, r1, lsr #22
    ae6e:	beq.w	ac2a <__adddf3+0xe6>
    ae72:	mov.w	r2, #3
    ae76:	movs.w	ip, ip, lsr #3
    ae7a:	it	ne
    ae7c:	addne	r2, #3
    ae7e:	movs.w	ip, ip, lsr #3
    ae82:	it	ne
    ae84:	addne	r2, #3
    ae86:	add.w	r2, r2, ip, lsr #3
    ae8a:	rsb	r3, r2, #32
    ae8e:	lsl.w	ip, r0, r3
    ae92:	lsr.w	r0, r0, r2
    ae96:	lsl.w	lr, r1, r3
    ae9a:	orr.w	r0, r0, lr
    ae9e:	lsr.w	r1, r1, r2
    aea2:	add	r4, r2
    aea4:	b.n	ac2a <__adddf3+0xe6>
    aea6:	nop

0000aea8 <__aeabi_dmul>:
    aea8:	push	{r4, r5, r6, lr}
    aeaa:	mov.w	ip, #255	; 0xff
    aeae:	orr.w	ip, ip, #1792	; 0x700
    aeb2:	ands.w	r4, ip, r1, lsr #20
    aeb6:	ittte	ne
    aeb8:	andsne.w	r5, ip, r3, lsr #20
    aebc:	teqne	r4, ip
    aec0:	teqne	r5, ip
    aec4:	bleq	b084 <__aeabi_dmul+0x1dc>
    aec8:	add	r4, r5
    aeca:	eor.w	r6, r1, r3
    aece:	bic.w	r1, r1, ip, lsl #21
    aed2:	bic.w	r3, r3, ip, lsl #21
    aed6:	orrs.w	r5, r0, r1, lsl #12
    aeda:	it	ne
    aedc:	orrsne.w	r5, r2, r3, lsl #12
    aee0:	orr.w	r1, r1, #1048576	; 0x100000
    aee4:	orr.w	r3, r3, #1048576	; 0x100000
    aee8:	beq.n	af5c <__aeabi_dmul+0xb4>
    aeea:	umull	ip, lr, r0, r2
    aeee:	mov.w	r5, #0
    aef2:	umlal	lr, r5, r1, r2
    aef6:	and.w	r2, r6, #2147483648	; 0x80000000
    aefa:	umlal	lr, r5, r0, r3
    aefe:	mov.w	r6, #0
    af02:	umlal	r5, r6, r1, r3
    af06:	teq	ip, #0
    af0a:	it	ne
    af0c:	orrne.w	lr, lr, #1
    af10:	sub.w	r4, r4, #255	; 0xff
    af14:	cmp.w	r6, #512	; 0x200
    af18:	sbc.w	r4, r4, #768	; 0x300
    af1c:	bcs.n	af28 <__aeabi_dmul+0x80>
    af1e:	movs.w	lr, lr, lsl #1
    af22:	adcs	r5, r5
    af24:	adc.w	r6, r6, r6
    af28:	orr.w	r1, r2, r6, lsl #11
    af2c:	orr.w	r1, r1, r5, lsr #21
    af30:	mov.w	r0, r5, lsl #11
    af34:	orr.w	r0, r0, lr, lsr #21
    af38:	mov.w	lr, lr, lsl #11
    af3c:	subs.w	ip, r4, #253	; 0xfd
    af40:	it	hi
    af42:	cmphi.w	ip, #1792	; 0x700
    af46:	bhi.n	af86 <__aeabi_dmul+0xde>
    af48:	cmp.w	lr, #2147483648	; 0x80000000
    af4c:	it	eq
    af4e:	movseq.w	lr, r0, lsr #1
    af52:	adcs.w	r0, r0, #0
    af56:	adc.w	r1, r1, r4, lsl #20
    af5a:	pop	{r4, r5, r6, pc}
    af5c:	and.w	r6, r6, #2147483648	; 0x80000000
    af60:	orr.w	r1, r6, r1
    af64:	orr.w	r0, r0, r2
    af68:	eor.w	r1, r1, r3
    af6c:	subs.w	r4, r4, ip, lsr #1
    af70:	ittt	gt
    af72:	rsbsgt	r5, r4, ip
    af76:	orrgt.w	r1, r1, r4, lsl #20
    af7a:	popgt	{r4, r5, r6, pc}
    af7c:	orr.w	r1, r1, #1048576	; 0x100000
    af80:	mov.w	lr, #0
    af84:	subs	r4, #1
    af86:	bgt.w	b0e0 <__aeabi_dmul+0x238>
    af8a:	cmn.w	r4, #54	; 0x36
    af8e:	ittt	le
    af90:	movle	r0, #0
    af92:	andle.w	r1, r1, #2147483648	; 0x80000000
    af96:	pople	{r4, r5, r6, pc}
    af98:	rsb	r4, r4, #0
    af9c:	subs	r4, #32
    af9e:	bge.n	b00c <__aeabi_dmul+0x164>
    afa0:	adds	r4, #12
    afa2:	bgt.n	afdc <__aeabi_dmul+0x134>
    afa4:	add.w	r4, r4, #20
    afa8:	rsb	r5, r4, #32
    afac:	lsl.w	r3, r0, r5
    afb0:	lsr.w	r0, r0, r4
    afb4:	lsl.w	r2, r1, r5
    afb8:	orr.w	r0, r0, r2
    afbc:	and.w	r2, r1, #2147483648	; 0x80000000
    afc0:	bic.w	r1, r1, #2147483648	; 0x80000000
    afc4:	adds.w	r0, r0, r3, lsr #31
    afc8:	lsr.w	r6, r1, r4
    afcc:	adc.w	r1, r2, r6
    afd0:	orrs.w	lr, lr, r3, lsl #1
    afd4:	it	eq
    afd6:	biceq.w	r0, r0, r3, lsr #31
    afda:	pop	{r4, r5, r6, pc}
    afdc:	rsb	r4, r4, #12
    afe0:	rsb	r5, r4, #32
    afe4:	lsl.w	r3, r0, r4
    afe8:	lsr.w	r0, r0, r5
    afec:	lsl.w	r2, r1, r4
    aff0:	orr.w	r0, r0, r2
    aff4:	and.w	r1, r1, #2147483648	; 0x80000000
    aff8:	adds.w	r0, r0, r3, lsr #31
    affc:	adc.w	r1, r1, #0
    b000:	orrs.w	lr, lr, r3, lsl #1
    b004:	it	eq
    b006:	biceq.w	r0, r0, r3, lsr #31
    b00a:	pop	{r4, r5, r6, pc}
    b00c:	rsb	r5, r4, #32
    b010:	lsl.w	r2, r0, r5
    b014:	orr.w	lr, lr, r2
    b018:	lsr.w	r3, r0, r4
    b01c:	lsl.w	r2, r1, r5
    b020:	orr.w	r3, r3, r2
    b024:	lsr.w	r0, r1, r4
    b028:	and.w	r1, r1, #2147483648	; 0x80000000
    b02c:	lsr.w	r2, r1, r4
    b030:	bic.w	r0, r0, r2
    b034:	add.w	r0, r0, r3, lsr #31
    b038:	orrs.w	lr, lr, r3, lsl #1
    b03c:	it	eq
    b03e:	biceq.w	r0, r0, r3, lsr #31
    b042:	pop	{r4, r5, r6, pc}
    b044:	teq	r4, #0
    b048:	bne.n	b06a <__aeabi_dmul+0x1c2>
    b04a:	and.w	r6, r1, #2147483648	; 0x80000000
    b04e:	lsls	r0, r0, #1
    b050:	adc.w	r1, r1, r1
    b054:	tst.w	r1, #1048576	; 0x100000
    b058:	it	eq
    b05a:	subeq	r4, #1
    b05c:	beq.n	b04e <__aeabi_dmul+0x1a6>
    b05e:	orr.w	r1, r1, r6
    b062:	teq	r5, #0
    b066:	it	ne
    b068:	bxne	lr
    b06a:	and.w	r6, r3, #2147483648	; 0x80000000
    b06e:	lsls	r2, r2, #1
    b070:	adc.w	r3, r3, r3
    b074:	tst.w	r3, #1048576	; 0x100000
    b078:	it	eq
    b07a:	subeq	r5, #1
    b07c:	beq.n	b06e <__aeabi_dmul+0x1c6>
    b07e:	orr.w	r3, r3, r6
    b082:	bx	lr
    b084:	teq	r4, ip
    b088:	and.w	r5, ip, r3, lsr #20
    b08c:	it	ne
    b08e:	teqne	r5, ip
    b092:	beq.n	b0ae <__aeabi_dmul+0x206>
    b094:	orrs.w	r6, r0, r1, lsl #1
    b098:	it	ne
    b09a:	orrsne.w	r6, r2, r3, lsl #1
    b09e:	bne.n	b044 <__aeabi_dmul+0x19c>
    b0a0:	eor.w	r1, r1, r3
    b0a4:	and.w	r1, r1, #2147483648	; 0x80000000
    b0a8:	mov.w	r0, #0
    b0ac:	pop	{r4, r5, r6, pc}
    b0ae:	orrs.w	r6, r0, r1, lsl #1
    b0b2:	itte	eq
    b0b4:	moveq	r0, r2
    b0b6:	moveq	r1, r3
    b0b8:	orrsne.w	r6, r2, r3, lsl #1
    b0bc:	beq.n	b0f2 <__aeabi_dmul+0x24a>
    b0be:	teq	r4, ip
    b0c2:	bne.n	b0ca <__aeabi_dmul+0x222>
    b0c4:	orrs.w	r6, r0, r1, lsl #12
    b0c8:	bne.n	b0f2 <__aeabi_dmul+0x24a>
    b0ca:	teq	r5, ip
    b0ce:	bne.n	b0dc <__aeabi_dmul+0x234>
    b0d0:	orrs.w	r6, r2, r3, lsl #12
    b0d4:	itt	ne
    b0d6:	movne	r0, r2
    b0d8:	movne	r1, r3
    b0da:	bne.n	b0f2 <__aeabi_dmul+0x24a>
    b0dc:	eor.w	r1, r1, r3
    b0e0:	and.w	r1, r1, #2147483648	; 0x80000000
    b0e4:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b0e8:	orr.w	r1, r1, #15728640	; 0xf00000
    b0ec:	mov.w	r0, #0
    b0f0:	pop	{r4, r5, r6, pc}
    b0f2:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b0f6:	orr.w	r1, r1, #16252928	; 0xf80000
    b0fa:	pop	{r4, r5, r6, pc}

0000b0fc <__aeabi_ddiv>:
    b0fc:	push	{r4, r5, r6, lr}
    b0fe:	mov.w	ip, #255	; 0xff
    b102:	orr.w	ip, ip, #1792	; 0x700
    b106:	ands.w	r4, ip, r1, lsr #20
    b10a:	ittte	ne
    b10c:	andsne.w	r5, ip, r3, lsr #20
    b110:	teqne	r4, ip
    b114:	teqne	r5, ip
    b118:	bleq	b26a <__aeabi_ddiv+0x16e>
    b11c:	sub.w	r4, r4, r5
    b120:	eor.w	lr, r1, r3
    b124:	orrs.w	r5, r2, r3, lsl #12
    b128:	mov.w	r1, r1, lsl #12
    b12c:	beq.w	b240 <__aeabi_ddiv+0x144>
    b130:	mov.w	r3, r3, lsl #12
    b134:	mov.w	r5, #268435456	; 0x10000000
    b138:	orr.w	r3, r5, r3, lsr #4
    b13c:	orr.w	r3, r3, r2, lsr #24
    b140:	mov.w	r2, r2, lsl #8
    b144:	orr.w	r5, r5, r1, lsr #4
    b148:	orr.w	r5, r5, r0, lsr #24
    b14c:	mov.w	r6, r0, lsl #8
    b150:	and.w	r1, lr, #2147483648	; 0x80000000
    b154:	cmp	r5, r3
    b156:	it	eq
    b158:	cmpeq	r6, r2
    b15a:	adc.w	r4, r4, #253	; 0xfd
    b15e:	add.w	r4, r4, #768	; 0x300
    b162:	bcs.n	b16a <__aeabi_ddiv+0x6e>
    b164:	lsrs	r3, r3, #1
    b166:	mov.w	r2, r2, rrx
    b16a:	subs	r6, r6, r2
    b16c:	sbc.w	r5, r5, r3
    b170:	lsrs	r3, r3, #1
    b172:	mov.w	r2, r2, rrx
    b176:	mov.w	r0, #1048576	; 0x100000
    b17a:	mov.w	ip, #524288	; 0x80000
    b17e:	subs.w	lr, r6, r2
    b182:	sbcs.w	lr, r5, r3
    b186:	ittt	cs
    b188:	subcs	r6, r6, r2
    b18a:	movcs	r5, lr
    b18c:	orrcs.w	r0, r0, ip
    b190:	lsrs	r3, r3, #1
    b192:	mov.w	r2, r2, rrx
    b196:	subs.w	lr, r6, r2
    b19a:	sbcs.w	lr, r5, r3
    b19e:	ittt	cs
    b1a0:	subcs	r6, r6, r2
    b1a2:	movcs	r5, lr
    b1a4:	orrcs.w	r0, r0, ip, lsr #1
    b1a8:	lsrs	r3, r3, #1
    b1aa:	mov.w	r2, r2, rrx
    b1ae:	subs.w	lr, r6, r2
    b1b2:	sbcs.w	lr, r5, r3
    b1b6:	ittt	cs
    b1b8:	subcs	r6, r6, r2
    b1ba:	movcs	r5, lr
    b1bc:	orrcs.w	r0, r0, ip, lsr #2
    b1c0:	lsrs	r3, r3, #1
    b1c2:	mov.w	r2, r2, rrx
    b1c6:	subs.w	lr, r6, r2
    b1ca:	sbcs.w	lr, r5, r3
    b1ce:	ittt	cs
    b1d0:	subcs	r6, r6, r2
    b1d2:	movcs	r5, lr
    b1d4:	orrcs.w	r0, r0, ip, lsr #3
    b1d8:	orrs.w	lr, r5, r6
    b1dc:	beq.n	b210 <__aeabi_ddiv+0x114>
    b1de:	mov.w	r5, r5, lsl #4
    b1e2:	orr.w	r5, r5, r6, lsr #28
    b1e6:	mov.w	r6, r6, lsl #4
    b1ea:	mov.w	r3, r3, lsl #3
    b1ee:	orr.w	r3, r3, r2, lsr #29
    b1f2:	mov.w	r2, r2, lsl #3
    b1f6:	movs.w	ip, ip, lsr #4
    b1fa:	bne.n	b17e <__aeabi_ddiv+0x82>
    b1fc:	tst.w	r1, #1048576	; 0x100000
    b200:	bne.n	b21a <__aeabi_ddiv+0x11e>
    b202:	orr.w	r1, r1, r0
    b206:	mov.w	r0, #0
    b20a:	mov.w	ip, #2147483648	; 0x80000000
    b20e:	b.n	b17e <__aeabi_ddiv+0x82>
    b210:	tst.w	r1, #1048576	; 0x100000
    b214:	itt	eq
    b216:	orreq	r1, r0
    b218:	moveq	r0, #0
    b21a:	subs.w	ip, r4, #253	; 0xfd
    b21e:	it	hi
    b220:	cmphi.w	ip, #1792	; 0x700
    b224:	bhi.w	af86 <__aeabi_dmul+0xde>
    b228:	subs.w	ip, r5, r3
    b22c:	itt	eq
    b22e:	subseq.w	ip, r6, r2
    b232:	movseq.w	ip, r0, lsr #1
    b236:	adcs.w	r0, r0, #0
    b23a:	adc.w	r1, r1, r4, lsl #20
    b23e:	pop	{r4, r5, r6, pc}
    b240:	and.w	lr, lr, #2147483648	; 0x80000000
    b244:	orr.w	r1, lr, r1, lsr #12
    b248:	adds.w	r4, r4, ip, lsr #1
    b24c:	ittt	gt
    b24e:	rsbsgt	r5, r4, ip
    b252:	orrgt.w	r1, r1, r4, lsl #20
    b256:	popgt	{r4, r5, r6, pc}
    b258:	orr.w	r1, r1, #1048576	; 0x100000
    b25c:	mov.w	lr, #0
    b260:	subs	r4, #1
    b262:	b.n	af86 <__aeabi_dmul+0xde>
    b264:	orr.w	lr, r5, r6
    b268:	b.n	af86 <__aeabi_dmul+0xde>
    b26a:	and.w	r5, ip, r3, lsr #20
    b26e:	teq	r4, ip
    b272:	it	eq
    b274:	teqeq	r5, ip
    b278:	beq.w	b0f2 <__aeabi_dmul+0x24a>
    b27c:	teq	r4, ip
    b280:	bne.n	b298 <__aeabi_ddiv+0x19c>
    b282:	orrs.w	r4, r0, r1, lsl #12
    b286:	bne.w	b0f2 <__aeabi_dmul+0x24a>
    b28a:	teq	r5, ip
    b28e:	bne.w	b0dc <__aeabi_dmul+0x234>
    b292:	mov	r0, r2
    b294:	mov	r1, r3
    b296:	b.n	b0f2 <__aeabi_dmul+0x24a>
    b298:	teq	r5, ip
    b29c:	bne.n	b2ac <__aeabi_ddiv+0x1b0>
    b29e:	orrs.w	r5, r2, r3, lsl #12
    b2a2:	beq.w	b0a0 <__aeabi_dmul+0x1f8>
    b2a6:	mov	r0, r2
    b2a8:	mov	r1, r3
    b2aa:	b.n	b0f2 <__aeabi_dmul+0x24a>
    b2ac:	orrs.w	r6, r0, r1, lsl #1
    b2b0:	it	ne
    b2b2:	orrsne.w	r6, r2, r3, lsl #1
    b2b6:	bne.w	b044 <__aeabi_dmul+0x19c>
    b2ba:	orrs.w	r4, r0, r1, lsl #1
    b2be:	bne.w	b0dc <__aeabi_dmul+0x234>
    b2c2:	orrs.w	r5, r2, r3, lsl #1
    b2c6:	bne.w	b0a0 <__aeabi_dmul+0x1f8>
    b2ca:	b.n	b0f2 <__aeabi_dmul+0x24a>

0000b2cc <__gedf2>:
    b2cc:	mov.w	ip, #4294967295
    b2d0:	b.n	b2e0 <__cmpdf2+0x4>
    b2d2:	nop

0000b2d4 <__ledf2>:
    b2d4:	mov.w	ip, #1
    b2d8:	b.n	b2e0 <__cmpdf2+0x4>
    b2da:	nop

0000b2dc <__cmpdf2>:
    b2dc:	mov.w	ip, #1
    b2e0:	str.w	ip, [sp, #-4]!
    b2e4:	mov.w	ip, r1, lsl #1
    b2e8:	mvns.w	ip, ip, asr #21
    b2ec:	mov.w	ip, r3, lsl #1
    b2f0:	it	ne
    b2f2:	mvnsne.w	ip, ip, asr #21
    b2f6:	beq.n	b330 <__cmpdf2+0x54>
    b2f8:	add	sp, #4
    b2fa:	orrs.w	ip, r0, r1, lsl #1
    b2fe:	ite	eq
    b300:	orrseq.w	ip, r2, r3, lsl #1
    b304:	teqne	r1, r3
    b308:	ittt	eq
    b30a:	teqeq	r0, r2
    b30e:	moveq	r0, #0
    b310:	bxeq	lr
    b312:	cmn.w	r0, #0
    b316:	teq	r1, r3
    b31a:	it	pl
    b31c:	cmppl	r1, r3
    b31e:	it	eq
    b320:	cmpeq	r0, r2
    b322:	ite	cs
    b324:	asrcs	r0, r3, #31
    b326:	mvncc.w	r0, r3, asr #31
    b32a:	orr.w	r0, r0, #1
    b32e:	bx	lr
    b330:	mov.w	ip, r1, lsl #1
    b334:	mvns.w	ip, ip, asr #21
    b338:	bne.n	b340 <__cmpdf2+0x64>
    b33a:	orrs.w	ip, r0, r1, lsl #12
    b33e:	bne.n	b350 <__cmpdf2+0x74>
    b340:	mov.w	ip, r3, lsl #1
    b344:	mvns.w	ip, ip, asr #21
    b348:	bne.n	b2f8 <__cmpdf2+0x1c>
    b34a:	orrs.w	ip, r2, r3, lsl #12
    b34e:	beq.n	b2f8 <__cmpdf2+0x1c>
    b350:	ldr.w	r0, [sp], #4
    b354:	bx	lr
    b356:	nop

0000b358 <__aeabi_cdrcmple>:
    b358:	mov	ip, r0
    b35a:	mov	r0, r2
    b35c:	mov	r2, ip
    b35e:	mov	ip, r1
    b360:	mov	r1, r3
    b362:	mov	r3, ip
    b364:	b.n	b368 <__aeabi_cdcmpeq>
    b366:	nop

0000b368 <__aeabi_cdcmpeq>:
    b368:	push	{r0, lr}
    b36a:	bl	b2dc <__cmpdf2>
    b36e:	cmp	r0, #0
    b370:	it	mi
    b372:	cmnmi.w	r0, #0
    b376:	pop	{r0, pc}

0000b378 <__aeabi_dcmpeq>:
    b378:	str.w	lr, [sp, #-8]!
    b37c:	bl	b368 <__aeabi_cdcmpeq>
    b380:	ite	eq
    b382:	moveq	r0, #1
    b384:	movne	r0, #0
    b386:	ldr.w	pc, [sp], #8
    b38a:	nop

0000b38c <__aeabi_dcmplt>:
    b38c:	str.w	lr, [sp, #-8]!
    b390:	bl	b368 <__aeabi_cdcmpeq>
    b394:	ite	cc
    b396:	movcc	r0, #1
    b398:	movcs	r0, #0
    b39a:	ldr.w	pc, [sp], #8
    b39e:	nop

0000b3a0 <__aeabi_dcmple>:
    b3a0:	str.w	lr, [sp, #-8]!
    b3a4:	bl	b368 <__aeabi_cdcmpeq>
    b3a8:	ite	ls
    b3aa:	movls	r0, #1
    b3ac:	movhi	r0, #0
    b3ae:	ldr.w	pc, [sp], #8
    b3b2:	nop

0000b3b4 <__aeabi_dcmpge>:
    b3b4:	str.w	lr, [sp, #-8]!
    b3b8:	bl	b358 <__aeabi_cdrcmple>
    b3bc:	ite	ls
    b3be:	movls	r0, #1
    b3c0:	movhi	r0, #0
    b3c2:	ldr.w	pc, [sp], #8
    b3c6:	nop

0000b3c8 <__aeabi_dcmpgt>:
    b3c8:	str.w	lr, [sp, #-8]!
    b3cc:	bl	b358 <__aeabi_cdrcmple>
    b3d0:	ite	cc
    b3d2:	movcc	r0, #1
    b3d4:	movcs	r0, #0
    b3d6:	ldr.w	pc, [sp], #8
    b3da:	nop

0000b3dc <__aeabi_dcmpun>:
    b3dc:	mov.w	ip, r1, lsl #1
    b3e0:	mvns.w	ip, ip, asr #21
    b3e4:	bne.n	b3ec <__aeabi_dcmpun+0x10>
    b3e6:	orrs.w	ip, r0, r1, lsl #12
    b3ea:	bne.n	b402 <__aeabi_dcmpun+0x26>
    b3ec:	mov.w	ip, r3, lsl #1
    b3f0:	mvns.w	ip, ip, asr #21
    b3f4:	bne.n	b3fc <__aeabi_dcmpun+0x20>
    b3f6:	orrs.w	ip, r2, r3, lsl #12
    b3fa:	bne.n	b402 <__aeabi_dcmpun+0x26>
    b3fc:	mov.w	r0, #0
    b400:	bx	lr
    b402:	mov.w	r0, #1
    b406:	bx	lr

0000b408 <__aeabi_d2iz>:
    b408:	mov.w	r2, r1, lsl #1
    b40c:	adds.w	r2, r2, #2097152	; 0x200000
    b410:	bcs.n	b43e <__aeabi_d2iz+0x36>
    b412:	bpl.n	b438 <__aeabi_d2iz+0x30>
    b414:	mvn.w	r3, #992	; 0x3e0
    b418:	subs.w	r2, r3, r2, asr #21
    b41c:	bls.n	b444 <__aeabi_d2iz+0x3c>
    b41e:	mov.w	r3, r1, lsl #11
    b422:	orr.w	r3, r3, #2147483648	; 0x80000000
    b426:	orr.w	r3, r3, r0, lsr #21
    b42a:	tst.w	r1, #2147483648	; 0x80000000
    b42e:	lsr.w	r0, r3, r2
    b432:	it	ne
    b434:	negne	r0, r0
    b436:	bx	lr
    b438:	mov.w	r0, #0
    b43c:	bx	lr
    b43e:	orrs.w	r0, r0, r1, lsl #12
    b442:	bne.n	b450 <__aeabi_d2iz+0x48>
    b444:	ands.w	r0, r1, #2147483648	; 0x80000000
    b448:	it	eq
    b44a:	mvneq.w	r0, #2147483648	; 0x80000000
    b44e:	bx	lr
    b450:	mov.w	r0, #0
    b454:	bx	lr
    b456:	nop

0000b458 <__aeabi_d2uiz>:
    b458:	lsls	r2, r1, #1
    b45a:	bcs.n	b480 <__aeabi_d2uiz+0x28>
    b45c:	adds.w	r2, r2, #2097152	; 0x200000
    b460:	bcs.n	b486 <__aeabi_d2uiz+0x2e>
    b462:	bpl.n	b480 <__aeabi_d2uiz+0x28>
    b464:	mvn.w	r3, #992	; 0x3e0
    b468:	subs.w	r2, r3, r2, asr #21
    b46c:	bmi.n	b48c <__aeabi_d2uiz+0x34>
    b46e:	mov.w	r3, r1, lsl #11
    b472:	orr.w	r3, r3, #2147483648	; 0x80000000
    b476:	orr.w	r3, r3, r0, lsr #21
    b47a:	lsr.w	r0, r3, r2
    b47e:	bx	lr
    b480:	mov.w	r0, #0
    b484:	bx	lr
    b486:	orrs.w	r0, r0, r1, lsl #12
    b48a:	bne.n	b492 <__aeabi_d2uiz+0x3a>
    b48c:	mov.w	r0, #4294967295
    b490:	bx	lr
    b492:	mov.w	r0, #0
    b496:	bx	lr

0000b498 <__aeabi_d2f>:
    b498:	mov.w	r2, r1, lsl #1
    b49c:	subs.w	r3, r2, #1879048192	; 0x70000000
    b4a0:	itt	cs
    b4a2:	subscs.w	ip, r3, #2097152	; 0x200000
    b4a6:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    b4aa:	bls.n	b4c8 <__aeabi_d2f+0x30>
    b4ac:	and.w	ip, r1, #2147483648	; 0x80000000
    b4b0:	mov.w	r2, r0, lsl #3
    b4b4:	orr.w	r0, ip, r0, lsr #29
    b4b8:	cmp.w	r2, #2147483648	; 0x80000000
    b4bc:	adc.w	r0, r0, r3, lsl #2
    b4c0:	it	eq
    b4c2:	biceq.w	r0, r0, #1
    b4c6:	bx	lr
    b4c8:	tst.w	r1, #1073741824	; 0x40000000
    b4cc:	bne.n	b512 <__aeabi_d2f+0x7a>
    b4ce:	adds.w	r2, r3, #48234496	; 0x2e00000
    b4d2:	itt	lt
    b4d4:	andlt.w	r0, r1, #2147483648	; 0x80000000
    b4d8:	bxlt	lr
    b4da:	orr.w	r1, r1, #1048576	; 0x100000
    b4de:	mov.w	r2, r2, lsr #21
    b4e2:	rsb	r2, r2, #24
    b4e6:	rsb	ip, r2, #32
    b4ea:	lsls.w	r3, r0, ip
    b4ee:	lsr.w	r0, r0, r2
    b4f2:	it	ne
    b4f4:	orrne.w	r0, r0, #1
    b4f8:	mov.w	r3, r1, lsl #11
    b4fc:	mov.w	r3, r3, lsr #11
    b500:	lsl.w	ip, r3, ip
    b504:	orr.w	r0, r0, ip
    b508:	lsr.w	r3, r3, r2
    b50c:	mov.w	r3, r3, lsl #1
    b510:	b.n	b4ac <__aeabi_d2f+0x14>
    b512:	mvns.w	r3, r2, asr #21
    b516:	bne.n	b528 <__aeabi_d2f+0x90>
    b518:	orrs.w	r3, r0, r1, lsl #12
    b51c:	ittt	ne
    b51e:	movne.w	r0, #2130706432	; 0x7f000000
    b522:	orrne.w	r0, r0, #12582912	; 0xc00000
    b526:	bxne	lr
    b528:	and.w	r0, r1, #2147483648	; 0x80000000
    b52c:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b530:	orr.w	r0, r0, #8388608	; 0x800000
    b534:	bx	lr
    b536:	nop

0000b538 <__aeabi_uldivmod>:
    b538:	cbnz	r3, b550 <__aeabi_uldivmod+0x18>
    b53a:	cbnz	r2, b550 <__aeabi_uldivmod+0x18>
    b53c:	cmp	r1, #0
    b53e:	it	eq
    b540:	cmpeq	r0, #0
    b542:	itt	ne
    b544:	movne.w	r1, #4294967295
    b548:	movne.w	r0, #4294967295
    b54c:	b.w	b84c <__aeabi_idiv0>
    b550:	sub.w	ip, sp, #8
    b554:	strd	ip, lr, [sp, #-16]!
    b558:	bl	b568 <__udivmoddi4>
    b55c:	ldr.w	lr, [sp, #4]
    b560:	ldrd	r2, r3, [sp, #8]
    b564:	add	sp, #16
    b566:	bx	lr

0000b568 <__udivmoddi4>:
    b568:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b56c:	mov	ip, r1
    b56e:	mov	r6, r1
    b570:	mov	r4, r0
    b572:	ldr	r5, [sp, #32]
    b574:	cmp	r3, #0
    b576:	bne.n	b61a <__udivmoddi4+0xb2>
    b578:	cmp	r2, r1
    b57a:	mov	r7, r2
    b57c:	bls.n	b658 <__udivmoddi4+0xf0>
    b57e:	clz	lr, r2
    b582:	cmp.w	lr, #0
    b586:	beq.n	b5a0 <__udivmoddi4+0x38>
    b588:	rsb	r4, lr, #32
    b58c:	lsr.w	r4, r0, r4
    b590:	lsl.w	r6, r1, lr
    b594:	orr.w	ip, r4, r6
    b598:	lsl.w	r7, r2, lr
    b59c:	lsl.w	r4, r0, lr
    b5a0:	mov.w	r9, r7, lsr #16
    b5a4:	lsrs	r2, r4, #16
    b5a6:	udiv	r0, ip, r9
    b5aa:	uxth.w	r8, r7
    b5ae:	mls	r6, r9, r0, ip
    b5b2:	orr.w	r6, r2, r6, lsl #16
    b5b6:	mul.w	r3, r0, r8
    b5ba:	cmp	r3, r6
    b5bc:	bls.n	b5d2 <__udivmoddi4+0x6a>
    b5be:	adds	r6, r6, r7
    b5c0:	add.w	r2, r0, #4294967295
    b5c4:	bcs.w	b80c <__udivmoddi4+0x2a4>
    b5c8:	cmp	r3, r6
    b5ca:	bls.w	b80c <__udivmoddi4+0x2a4>
    b5ce:	subs	r0, #2
    b5d0:	add	r6, r7
    b5d2:	subs	r6, r6, r3
    b5d4:	uxth	r2, r4
    b5d6:	udiv	r3, r6, r9
    b5da:	mls	r6, r9, r3, r6
    b5de:	orr.w	r4, r2, r6, lsl #16
    b5e2:	mul.w	r8, r3, r8
    b5e6:	cmp	r8, r4
    b5e8:	bls.n	b5fe <__udivmoddi4+0x96>
    b5ea:	adds	r4, r4, r7
    b5ec:	add.w	r2, r3, #4294967295
    b5f0:	bcs.w	b808 <__udivmoddi4+0x2a0>
    b5f4:	cmp	r8, r4
    b5f6:	bls.w	b808 <__udivmoddi4+0x2a0>
    b5fa:	subs	r3, #2
    b5fc:	add	r4, r7
    b5fe:	rsb	r4, r8, r4
    b602:	orr.w	r0, r3, r0, lsl #16
    b606:	movs	r1, #0
    b608:	cmp	r5, #0
    b60a:	beq.n	b6d2 <__udivmoddi4+0x16a>
    b60c:	lsr.w	r4, r4, lr
    b610:	movs	r3, #0
    b612:	str	r4, [r5, #0]
    b614:	str	r3, [r5, #4]
    b616:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b61a:	cmp	r3, r1
    b61c:	bls.n	b62e <__udivmoddi4+0xc6>
    b61e:	cmp	r5, #0
    b620:	beq.n	b6ce <__udivmoddi4+0x166>
    b622:	movs	r1, #0
    b624:	stmia.w	r5, {r0, r6}
    b628:	mov	r0, r1
    b62a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b62e:	clz	r1, r3
    b632:	cmp	r1, #0
    b634:	bne.w	b758 <__udivmoddi4+0x1f0>
    b638:	cmp	r3, r6
    b63a:	bcc.n	b642 <__udivmoddi4+0xda>
    b63c:	cmp	r2, r0
    b63e:	bhi.w	b832 <__udivmoddi4+0x2ca>
    b642:	subs	r4, r0, r2
    b644:	sbc.w	r6, r6, r3
    b648:	movs	r0, #1
    b64a:	mov	ip, r6
    b64c:	cmp	r5, #0
    b64e:	beq.n	b6d2 <__udivmoddi4+0x16a>
    b650:	stmia.w	r5, {r4, ip}
    b654:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b658:	cbnz	r2, b660 <__udivmoddi4+0xf8>
    b65a:	movs	r7, #1
    b65c:	udiv	r7, r7, r2
    b660:	clz	lr, r7
    b664:	cmp.w	lr, #0
    b668:	bne.n	b6d6 <__udivmoddi4+0x16e>
    b66a:	subs	r3, r6, r7
    b66c:	mov.w	r8, r7, lsr #16
    b670:	uxth.w	ip, r7
    b674:	movs	r1, #1
    b676:	udiv	r0, r3, r8
    b67a:	lsrs	r2, r4, #16
    b67c:	mls	r6, r8, r0, r3
    b680:	orr.w	r6, r2, r6, lsl #16
    b684:	mul.w	r3, ip, r0
    b688:	cmp	r3, r6
    b68a:	bls.n	b69c <__udivmoddi4+0x134>
    b68c:	adds	r6, r6, r7
    b68e:	add.w	r2, r0, #4294967295
    b692:	bcs.n	b69a <__udivmoddi4+0x132>
    b694:	cmp	r3, r6
    b696:	bhi.w	b836 <__udivmoddi4+0x2ce>
    b69a:	mov	r0, r2
    b69c:	subs	r6, r6, r3
    b69e:	uxth	r2, r4
    b6a0:	udiv	r3, r6, r8
    b6a4:	mls	r6, r8, r3, r6
    b6a8:	orr.w	r4, r2, r6, lsl #16
    b6ac:	mul.w	ip, ip, r3
    b6b0:	cmp	ip, r4
    b6b2:	bls.n	b6c4 <__udivmoddi4+0x15c>
    b6b4:	adds	r4, r4, r7
    b6b6:	add.w	r2, r3, #4294967295
    b6ba:	bcs.n	b6c2 <__udivmoddi4+0x15a>
    b6bc:	cmp	ip, r4
    b6be:	bhi.w	b82c <__udivmoddi4+0x2c4>
    b6c2:	mov	r3, r2
    b6c4:	rsb	r4, ip, r4
    b6c8:	orr.w	r0, r3, r0, lsl #16
    b6cc:	b.n	b608 <__udivmoddi4+0xa0>
    b6ce:	mov	r1, r5
    b6d0:	mov	r0, r5
    b6d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6d6:	rsb	r1, lr, #32
    b6da:	lsl.w	r3, r6, lr
    b6de:	lsl.w	r7, r7, lr
    b6e2:	lsr.w	r9, r0, r1
    b6e6:	mov.w	r8, r7, lsr #16
    b6ea:	lsrs	r6, r1
    b6ec:	orr.w	r9, r9, r3
    b6f0:	udiv	sl, r6, r8
    b6f4:	mov.w	r4, r9, lsr #16
    b6f8:	mls	r6, r8, sl, r6
    b6fc:	uxth.w	ip, r7
    b700:	orr.w	r3, r4, r6, lsl #16
    b704:	mul.w	r2, sl, ip
    b708:	cmp	r2, r3
    b70a:	lsl.w	r4, r0, lr
    b70e:	bls.n	b726 <__udivmoddi4+0x1be>
    b710:	adds	r3, r3, r7
    b712:	add.w	r1, sl, #4294967295
    b716:	bcs.w	b828 <__udivmoddi4+0x2c0>
    b71a:	cmp	r2, r3
    b71c:	bls.w	b828 <__udivmoddi4+0x2c0>
    b720:	sub.w	sl, sl, #2
    b724:	add	r3, r7
    b726:	subs	r3, r3, r2
    b728:	uxth.w	r9, r9
    b72c:	udiv	r1, r3, r8
    b730:	mls	r3, r8, r1, r3
    b734:	orr.w	r3, r9, r3, lsl #16
    b738:	mul.w	r6, r1, ip
    b73c:	cmp	r6, r3
    b73e:	bls.n	b750 <__udivmoddi4+0x1e8>
    b740:	adds	r3, r3, r7
    b742:	add.w	r2, r1, #4294967295
    b746:	bcs.n	b820 <__udivmoddi4+0x2b8>
    b748:	cmp	r6, r3
    b74a:	bls.n	b820 <__udivmoddi4+0x2b8>
    b74c:	subs	r1, #2
    b74e:	add	r3, r7
    b750:	subs	r3, r3, r6
    b752:	orr.w	r1, r1, sl, lsl #16
    b756:	b.n	b676 <__udivmoddi4+0x10e>
    b758:	rsb	lr, r1, #32
    b75c:	lsr.w	r4, r2, lr
    b760:	lsls	r3, r1
    b762:	orrs	r3, r4
    b764:	lsr.w	r7, r0, lr
    b768:	lsl.w	r4, r6, r1
    b76c:	mov.w	ip, r3, lsr #16
    b770:	lsr.w	r6, r6, lr
    b774:	orrs	r4, r7
    b776:	udiv	r9, r6, ip
    b77a:	lsrs	r7, r4, #16
    b77c:	mls	r6, ip, r9, r6
    b780:	uxth.w	r8, r3
    b784:	orr.w	r6, r7, r6, lsl #16
    b788:	mul.w	r7, r9, r8
    b78c:	cmp	r7, r6
    b78e:	lsl.w	r2, r2, r1
    b792:	lsl.w	sl, r0, r1
    b796:	bls.n	b7aa <__udivmoddi4+0x242>
    b798:	adds	r6, r6, r3
    b79a:	add.w	r0, r9, #4294967295
    b79e:	bcs.n	b824 <__udivmoddi4+0x2bc>
    b7a0:	cmp	r7, r6
    b7a2:	bls.n	b824 <__udivmoddi4+0x2bc>
    b7a4:	sub.w	r9, r9, #2
    b7a8:	add	r6, r3
    b7aa:	subs	r6, r6, r7
    b7ac:	uxth	r0, r4
    b7ae:	udiv	r4, r6, ip
    b7b2:	mls	r6, ip, r4, r6
    b7b6:	orr.w	r7, r0, r6, lsl #16
    b7ba:	mul.w	r8, r4, r8
    b7be:	cmp	r8, r7
    b7c0:	bls.n	b7d2 <__udivmoddi4+0x26a>
    b7c2:	adds	r7, r7, r3
    b7c4:	add.w	r0, r4, #4294967295
    b7c8:	bcs.n	b81c <__udivmoddi4+0x2b4>
    b7ca:	cmp	r8, r7
    b7cc:	bls.n	b81c <__udivmoddi4+0x2b4>
    b7ce:	subs	r4, #2
    b7d0:	add	r7, r3
    b7d2:	orr.w	r0, r4, r9, lsl #16
    b7d6:	rsb	r7, r8, r7
    b7da:	umull	r8, r9, r0, r2
    b7de:	cmp	r7, r9
    b7e0:	mov	r4, r8
    b7e2:	mov	r6, r9
    b7e4:	bcc.n	b810 <__udivmoddi4+0x2a8>
    b7e6:	beq.n	b83c <__udivmoddi4+0x2d4>
    b7e8:	cbz	r5, b844 <__udivmoddi4+0x2dc>
    b7ea:	subs.w	r3, sl, r4
    b7ee:	sbc.w	r7, r7, r6
    b7f2:	lsl.w	lr, r7, lr
    b7f6:	lsrs	r3, r1
    b7f8:	lsrs	r7, r1
    b7fa:	orr.w	r3, lr, r3
    b7fe:	stmia.w	r5, {r3, r7}
    b802:	movs	r1, #0
    b804:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b808:	mov	r3, r2
    b80a:	b.n	b5fe <__udivmoddi4+0x96>
    b80c:	mov	r0, r2
    b80e:	b.n	b5d2 <__udivmoddi4+0x6a>
    b810:	subs.w	r4, r8, r2
    b814:	sbc.w	r6, r9, r3
    b818:	subs	r0, #1
    b81a:	b.n	b7e8 <__udivmoddi4+0x280>
    b81c:	mov	r4, r0
    b81e:	b.n	b7d2 <__udivmoddi4+0x26a>
    b820:	mov	r1, r2
    b822:	b.n	b750 <__udivmoddi4+0x1e8>
    b824:	mov	r9, r0
    b826:	b.n	b7aa <__udivmoddi4+0x242>
    b828:	mov	sl, r1
    b82a:	b.n	b726 <__udivmoddi4+0x1be>
    b82c:	subs	r3, #2
    b82e:	add	r4, r7
    b830:	b.n	b6c4 <__udivmoddi4+0x15c>
    b832:	mov	r0, r1
    b834:	b.n	b64c <__udivmoddi4+0xe4>
    b836:	subs	r0, #2
    b838:	add	r6, r7
    b83a:	b.n	b69c <__udivmoddi4+0x134>
    b83c:	cmp	sl, r8
    b83e:	bcc.n	b810 <__udivmoddi4+0x2a8>
    b840:	mov	r6, r7
    b842:	b.n	b7e8 <__udivmoddi4+0x280>
    b844:	mov	r1, r5
    b846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b84a:	nop

0000b84c <__aeabi_idiv0>:
    b84c:	bx	lr
    b84e:	nop

0000b850 <__cxa_atexit>:
    b850:	mov	r3, r2
    b852:	mov	r2, r1
    b854:	mov	r1, r0
    b856:	movs	r0, #2
    b858:	b.w	ffa8 <__register_exitproc>

0000b85c <__errno>:
    b85c:	ldr	r3, [pc, #4]	; (b864 <__errno+0x8>)
    b85e:	ldr	r0, [r3, #0]
    b860:	bx	lr
    b862:	nop
    b864:	.word	0x20013dc8

0000b868 <__libc_init_array>:
    b868:	push	{r4, r5, r6, lr}
    b86a:	ldr	r6, [pc, #60]	; (b8a8 <__libc_init_array+0x40>)
    b86c:	ldr	r5, [pc, #60]	; (b8ac <__libc_init_array+0x44>)
    b86e:	subs	r6, r6, r5
    b870:	asrs	r6, r6, #2
    b872:	it	ne
    b874:	movne	r4, #0
    b876:	beq.n	b884 <__libc_init_array+0x1c>
    b878:	adds	r4, #1
    b87a:	ldr.w	r3, [r5], #4
    b87e:	blx	r3
    b880:	cmp	r6, r4
    b882:	bne.n	b878 <__libc_init_array+0x10>
    b884:	ldr	r6, [pc, #40]	; (b8b0 <__libc_init_array+0x48>)
    b886:	ldr	r5, [pc, #44]	; (b8b4 <__libc_init_array+0x4c>)
    b888:	subs	r6, r6, r5
    b88a:	bl	13b2c <_init>
    b88e:	asrs	r6, r6, #2
    b890:	it	ne
    b892:	movne	r4, #0
    b894:	beq.n	b8a4 <__libc_init_array+0x3c>
    b896:	adds	r4, #1
    b898:	ldr.w	r3, [r5], #4
    b89c:	blx	r3
    b89e:	cmp	r6, r4
    b8a0:	bne.n	b896 <__libc_init_array+0x2e>
    b8a2:	pop	{r4, r5, r6, pc}
    b8a4:	pop	{r4, r5, r6, pc}
    b8a6:	nop
    b8a8:	.word	0x00013b38
    b8ac:	.word	0x00013b38
    b8b0:	.word	0x00013b8c
    b8b4:	.word	0x00013b38

0000b8b8 <__get_current_locale>:
    b8b8:	ldr	r2, [pc, #12]	; (b8c8 <__get_current_locale+0x10>)
    b8ba:	ldr	r3, [pc, #16]	; (b8cc <__get_current_locale+0x14>)
    b8bc:	ldr	r2, [r2, #0]
    b8be:	ldr	r0, [r2, #52]	; 0x34
    b8c0:	cmp	r0, #0
    b8c2:	it	eq
    b8c4:	moveq	r0, r3
    b8c6:	bx	lr
    b8c8:	.word	0x20013dc8
    b8cc:	.word	0x20013dcc

0000b8d0 <__locale_mb_cur_max>:
    b8d0:	ldr	r3, [pc, #16]	; (b8e4 <__locale_mb_cur_max+0x14>)
    b8d2:	ldr	r2, [pc, #20]	; (b8e8 <__locale_mb_cur_max+0x18>)
    b8d4:	ldr	r3, [r3, #0]
    b8d6:	ldr	r3, [r3, #52]	; 0x34
    b8d8:	cmp	r3, #0
    b8da:	it	eq
    b8dc:	moveq	r3, r2
    b8de:	ldrb.w	r0, [r3, #296]	; 0x128
    b8e2:	bx	lr
    b8e4:	.word	0x20013dc8
    b8e8:	.word	0x20013dcc

0000b8ec <__locale_ctype_ptr_l>:
    b8ec:	ldr.w	r0, [r0, #236]	; 0xec
    b8f0:	bx	lr
    b8f2:	nop

0000b8f4 <__locale_ctype_ptr>:
    b8f4:	push	{r3, lr}
    b8f6:	ldr	r3, [pc, #12]	; (b904 <__locale_ctype_ptr+0x10>)
    b8f8:	ldr	r0, [r3, #0]
    b8fa:	bl	b8b8 <__get_current_locale>
    b8fe:	ldr.w	r0, [r0, #236]	; 0xec
    b902:	pop	{r3, pc}
    b904:	.word	0x20013dc8

0000b908 <malloc>:
    b908:	ldr	r3, [pc, #8]	; (b914 <malloc+0xc>)
    b90a:	mov	r1, r0
    b90c:	ldr	r0, [r3, #0]
    b90e:	b.w	b928 <_malloc_r>
    b912:	nop
    b914:	.word	0x20013dc8

0000b918 <free>:
    b918:	ldr	r3, [pc, #8]	; (b924 <free+0xc>)
    b91a:	mov	r1, r0
    b91c:	ldr	r0, [r3, #0]
    b91e:	b.w	11090 <_free_r>
    b922:	nop
    b924:	.word	0x20013dc8

0000b928 <_malloc_r>:
    b928:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b92c:	add.w	r5, r1, #11
    b930:	cmp	r5, #22
    b932:	sub	sp, #12
    b934:	mov	r6, r0
    b936:	bls.w	ba78 <_malloc_r+0x150>
    b93a:	bics.w	r5, r5, #7
    b93e:	bmi.w	bac0 <_malloc_r+0x198>
    b942:	cmp	r1, r5
    b944:	bhi.w	bac0 <_malloc_r+0x198>
    b948:	bl	c138 <__malloc_lock>
    b94c:	cmp.w	r5, #504	; 0x1f8
    b950:	bcc.w	be8c <_malloc_r+0x564>
    b954:	lsrs	r3, r5, #9
    b956:	beq.w	bace <_malloc_r+0x1a6>
    b95a:	cmp	r3, #4
    b95c:	bhi.w	bc66 <_malloc_r+0x33e>
    b960:	lsrs	r0, r5, #6
    b962:	add.w	lr, r0, #57	; 0x39
    b966:	mov.w	r3, lr, lsl #1
    b96a:	adds	r0, #56	; 0x38
    b96c:	ldr	r7, [pc, #784]	; (bc80 <_malloc_r+0x358>)
    b96e:	add.w	r3, r7, r3, lsl #2
    b972:	sub.w	r1, r3, #8
    b976:	ldr	r4, [r3, #4]
    b978:	cmp	r1, r4
    b97a:	bne.n	b98c <_malloc_r+0x64>
    b97c:	b.n	bad8 <_malloc_r+0x1b0>
    b97e:	cmp	r2, #0
    b980:	bge.w	badc <_malloc_r+0x1b4>
    b984:	ldr	r4, [r4, #12]
    b986:	cmp	r1, r4
    b988:	beq.w	bad8 <_malloc_r+0x1b0>
    b98c:	ldr	r3, [r4, #4]
    b98e:	bic.w	r3, r3, #3
    b992:	subs	r2, r3, r5
    b994:	cmp	r2, #15
    b996:	ble.n	b97e <_malloc_r+0x56>
    b998:	ldr	r1, [pc, #740]	; (bc80 <_malloc_r+0x358>)
    b99a:	ldr	r4, [r7, #16]
    b99c:	add.w	lr, r1, #8
    b9a0:	cmp	r4, lr
    b9a2:	beq.w	bd0c <_malloc_r+0x3e4>
    b9a6:	ldr	r3, [r4, #4]
    b9a8:	bic.w	r3, r3, #3
    b9ac:	subs	r2, r3, r5
    b9ae:	cmp	r2, #15
    b9b0:	bgt.w	bce6 <_malloc_r+0x3be>
    b9b4:	cmp	r2, #0
    b9b6:	str.w	lr, [r1, #20]
    b9ba:	str.w	lr, [r1, #16]
    b9be:	bge.w	bafe <_malloc_r+0x1d6>
    b9c2:	cmp.w	r3, #512	; 0x200
    b9c6:	bcs.w	bc98 <_malloc_r+0x370>
    b9ca:	lsrs	r3, r3, #3
    b9cc:	add.w	ip, r3, #1
    b9d0:	movs	r2, #1
    b9d2:	asrs	r3, r3, #2
    b9d4:	lsl.w	r3, r2, r3
    b9d8:	ldr	r2, [r1, #4]
    b9da:	ldr.w	r8, [r1, ip, lsl #3]
    b9de:	str.w	r8, [r4, #8]
    b9e2:	add.w	r9, r1, ip, lsl #3
    b9e6:	orrs	r2, r3
    b9e8:	sub.w	r3, r9, #8
    b9ec:	str	r3, [r4, #12]
    b9ee:	str	r2, [r1, #4]
    b9f0:	str.w	r4, [r1, ip, lsl #3]
    b9f4:	str.w	r4, [r8, #12]
    b9f8:	asrs	r3, r0, #2
    b9fa:	movs	r4, #1
    b9fc:	lsls	r4, r3
    b9fe:	cmp	r4, r2
    ba00:	bhi.w	bb18 <_malloc_r+0x1f0>
    ba04:	tst	r4, r2
    ba06:	bne.n	ba16 <_malloc_r+0xee>
    ba08:	bic.w	r0, r0, #3
    ba0c:	lsls	r4, r4, #1
    ba0e:	tst	r4, r2
    ba10:	add.w	r0, r0, #4
    ba14:	beq.n	ba0c <_malloc_r+0xe4>
    ba16:	add.w	r9, r7, r0, lsl #3
    ba1a:	mov	ip, r9
    ba1c:	mov	r8, r0
    ba1e:	ldr.w	r1, [ip, #12]
    ba22:	cmp	ip, r1
    ba24:	bne.n	ba36 <_malloc_r+0x10e>
    ba26:	b.n	bd10 <_malloc_r+0x3e8>
    ba28:	cmp	r2, #0
    ba2a:	bge.w	bd30 <_malloc_r+0x408>
    ba2e:	ldr	r1, [r1, #12]
    ba30:	cmp	ip, r1
    ba32:	beq.w	bd10 <_malloc_r+0x3e8>
    ba36:	ldr	r3, [r1, #4]
    ba38:	bic.w	r3, r3, #3
    ba3c:	subs	r2, r3, r5
    ba3e:	cmp	r2, #15
    ba40:	ble.n	ba28 <_malloc_r+0x100>
    ba42:	mov	r4, r1
    ba44:	ldr.w	ip, [r1, #12]
    ba48:	ldr.w	r8, [r4, #8]!
    ba4c:	adds	r3, r1, r5
    ba4e:	orr.w	r5, r5, #1
    ba52:	str	r5, [r1, #4]
    ba54:	orr.w	r1, r2, #1
    ba58:	str.w	ip, [r8, #12]
    ba5c:	mov	r0, r6
    ba5e:	str.w	r8, [ip, #8]
    ba62:	str	r3, [r7, #20]
    ba64:	str	r3, [r7, #16]
    ba66:	str.w	lr, [r3, #12]
    ba6a:	str.w	lr, [r3, #8]
    ba6e:	str	r1, [r3, #4]
    ba70:	str	r2, [r3, r2]
    ba72:	bl	c13c <__malloc_unlock>
    ba76:	b.n	bab8 <_malloc_r+0x190>
    ba78:	cmp	r1, #16
    ba7a:	bhi.n	bac0 <_malloc_r+0x198>
    ba7c:	bl	c138 <__malloc_lock>
    ba80:	movs	r5, #16
    ba82:	movs	r3, #6
    ba84:	movs	r0, #2
    ba86:	ldr	r7, [pc, #504]	; (bc80 <_malloc_r+0x358>)
    ba88:	add.w	r3, r7, r3, lsl #2
    ba8c:	sub.w	r2, r3, #8
    ba90:	ldr	r4, [r3, #4]
    ba92:	cmp	r4, r2
    ba94:	beq.w	bd22 <_malloc_r+0x3fa>
    ba98:	ldr	r3, [r4, #4]
    ba9a:	ldr	r1, [r4, #12]
    ba9c:	ldr	r5, [r4, #8]
    ba9e:	bic.w	r3, r3, #3
    baa2:	add	r3, r4
    baa4:	mov	r0, r6
    baa6:	ldr	r2, [r3, #4]
    baa8:	str	r1, [r5, #12]
    baaa:	orr.w	r2, r2, #1
    baae:	str	r5, [r1, #8]
    bab0:	str	r2, [r3, #4]
    bab2:	bl	c13c <__malloc_unlock>
    bab6:	adds	r4, #8
    bab8:	mov	r0, r4
    baba:	add	sp, #12
    babc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bac0:	movs	r4, #0
    bac2:	movs	r3, #12
    bac4:	mov	r0, r4
    bac6:	str	r3, [r6, #0]
    bac8:	add	sp, #12
    baca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bace:	movs	r3, #128	; 0x80
    bad0:	mov.w	lr, #64	; 0x40
    bad4:	movs	r0, #63	; 0x3f
    bad6:	b.n	b96c <_malloc_r+0x44>
    bad8:	mov	r0, lr
    bada:	b.n	b998 <_malloc_r+0x70>
    badc:	add	r3, r4
    bade:	ldr	r1, [r4, #12]
    bae0:	ldr	r2, [r3, #4]
    bae2:	ldr	r5, [r4, #8]
    bae4:	orr.w	r2, r2, #1
    bae8:	str	r1, [r5, #12]
    baea:	mov	r0, r6
    baec:	str	r5, [r1, #8]
    baee:	str	r2, [r3, #4]
    baf0:	bl	c13c <__malloc_unlock>
    baf4:	adds	r4, #8
    baf6:	mov	r0, r4
    baf8:	add	sp, #12
    bafa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bafe:	add	r3, r4
    bb00:	mov	r0, r6
    bb02:	ldr	r2, [r3, #4]
    bb04:	orr.w	r2, r2, #1
    bb08:	str	r2, [r3, #4]
    bb0a:	bl	c13c <__malloc_unlock>
    bb0e:	adds	r4, #8
    bb10:	mov	r0, r4
    bb12:	add	sp, #12
    bb14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb18:	ldr	r4, [r7, #8]
    bb1a:	ldr	r3, [r4, #4]
    bb1c:	bic.w	r8, r3, #3
    bb20:	cmp	r8, r5
    bb22:	bcc.n	bb2e <_malloc_r+0x206>
    bb24:	rsb	r3, r5, r8
    bb28:	cmp	r3, #15
    bb2a:	bgt.w	bc46 <_malloc_r+0x31e>
    bb2e:	ldr	r3, [pc, #340]	; (bc84 <_malloc_r+0x35c>)
    bb30:	ldr.w	r9, [pc, #352]	; bc94 <_malloc_r+0x36c>
    bb34:	ldr	r2, [r3, #0]
    bb36:	ldr.w	r3, [r9]
    bb3a:	adds	r3, #1
    bb3c:	add	r2, r5
    bb3e:	add.w	sl, r4, r8
    bb42:	beq.w	be06 <_malloc_r+0x4de>
    bb46:	add.w	r2, r2, #4096	; 0x1000
    bb4a:	adds	r2, #15
    bb4c:	bic.w	r2, r2, #4080	; 0xff0
    bb50:	bic.w	r2, r2, #15
    bb54:	mov	r1, r2
    bb56:	mov	r0, r6
    bb58:	str	r2, [sp, #4]
    bb5a:	bl	c520 <_sbrk_r>
    bb5e:	cmp.w	r0, #4294967295
    bb62:	mov	fp, r0
    bb64:	ldr	r2, [sp, #4]
    bb66:	beq.w	be1a <_malloc_r+0x4f2>
    bb6a:	cmp	sl, r0
    bb6c:	bhi.w	bd68 <_malloc_r+0x440>
    bb70:	ldr	r3, [pc, #276]	; (bc88 <_malloc_r+0x360>)
    bb72:	ldr	r1, [r3, #0]
    bb74:	cmp	sl, fp
    bb76:	add	r1, r2
    bb78:	str	r1, [r3, #0]
    bb7a:	beq.w	be24 <_malloc_r+0x4fc>
    bb7e:	ldr.w	r0, [r9]
    bb82:	ldr.w	lr, [pc, #272]	; bc94 <_malloc_r+0x36c>
    bb86:	adds	r0, #1
    bb88:	ittet	ne
    bb8a:	rsbne	sl, sl, fp
    bb8e:	addne	r1, sl
    bb90:	streq.w	fp, [lr]
    bb94:	strne	r1, [r3, #0]
    bb96:	ands.w	r1, fp, #7
    bb9a:	beq.w	bdcc <_malloc_r+0x4a4>
    bb9e:	rsb	r0, r1, #8
    bba2:	rsb	r1, r1, #4096	; 0x1000
    bba6:	add	fp, r0
    bba8:	adds	r1, #8
    bbaa:	add	r2, fp
    bbac:	ubfx	r2, r2, #0, #12
    bbb0:	rsb	r9, r2, r1
    bbb4:	mov	r1, r9
    bbb6:	mov	r0, r6
    bbb8:	str	r3, [sp, #4]
    bbba:	bl	c520 <_sbrk_r>
    bbbe:	adds	r3, r0, #1
    bbc0:	ldr	r3, [sp, #4]
    bbc2:	beq.w	be44 <_malloc_r+0x51c>
    bbc6:	rsb	r2, fp, r0
    bbca:	add	r2, r9
    bbcc:	orr.w	r2, r2, #1
    bbd0:	ldr	r1, [r3, #0]
    bbd2:	str.w	fp, [r7, #8]
    bbd6:	add	r1, r9
    bbd8:	cmp	r4, r7
    bbda:	str.w	r2, [fp, #4]
    bbde:	str	r1, [r3, #0]
    bbe0:	ldr.w	r9, [pc, #164]	; bc88 <_malloc_r+0x360>
    bbe4:	beq.n	bc14 <_malloc_r+0x2ec>
    bbe6:	cmp.w	r8, #15
    bbea:	bls.w	bde8 <_malloc_r+0x4c0>
    bbee:	ldr	r2, [r4, #4]
    bbf0:	sub.w	r3, r8, #12
    bbf4:	bic.w	r3, r3, #7
    bbf8:	adds	r0, r4, r3
    bbfa:	and.w	r2, r2, #1
    bbfe:	mov.w	lr, #5
    bc02:	orrs	r2, r3
    bc04:	cmp	r3, #15
    bc06:	str	r2, [r4, #4]
    bc08:	str.w	lr, [r0, #4]
    bc0c:	str.w	lr, [r0, #8]
    bc10:	bhi.w	be4c <_malloc_r+0x524>
    bc14:	ldr	r3, [pc, #116]	; (bc8c <_malloc_r+0x364>)
    bc16:	ldr	r4, [r7, #8]
    bc18:	ldr	r2, [r3, #0]
    bc1a:	cmp	r1, r2
    bc1c:	it	hi
    bc1e:	strhi	r1, [r3, #0]
    bc20:	ldr	r3, [pc, #108]	; (bc90 <_malloc_r+0x368>)
    bc22:	ldr	r2, [r3, #0]
    bc24:	cmp	r1, r2
    bc26:	ldr	r2, [r4, #4]
    bc28:	it	hi
    bc2a:	strhi	r1, [r3, #0]
    bc2c:	bic.w	r2, r2, #3
    bc30:	cmp	r5, r2
    bc32:	sub.w	r3, r2, r5
    bc36:	bhi.n	bc3c <_malloc_r+0x314>
    bc38:	cmp	r3, #15
    bc3a:	bgt.n	bc46 <_malloc_r+0x31e>
    bc3c:	mov	r0, r6
    bc3e:	bl	c13c <__malloc_unlock>
    bc42:	movs	r4, #0
    bc44:	b.n	bab8 <_malloc_r+0x190>
    bc46:	adds	r2, r4, r5
    bc48:	orr.w	r3, r3, #1
    bc4c:	orr.w	r5, r5, #1
    bc50:	str	r5, [r4, #4]
    bc52:	mov	r0, r6
    bc54:	str	r2, [r7, #8]
    bc56:	str	r3, [r2, #4]
    bc58:	bl	c13c <__malloc_unlock>
    bc5c:	adds	r4, #8
    bc5e:	mov	r0, r4
    bc60:	add	sp, #12
    bc62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc66:	cmp	r3, #20
    bc68:	bls.n	bd4e <_malloc_r+0x426>
    bc6a:	cmp	r3, #84	; 0x54
    bc6c:	bhi.w	bdb8 <_malloc_r+0x490>
    bc70:	lsrs	r0, r5, #12
    bc72:	add.w	lr, r0, #111	; 0x6f
    bc76:	mov.w	r3, lr, lsl #1
    bc7a:	adds	r0, #110	; 0x6e
    bc7c:	b.n	b96c <_malloc_r+0x44>
    bc7e:	nop
    bc80:	.word	0x20013f38
    bc84:	.word	0x20019c34
    bc88:	.word	0x20019c38
    bc8c:	.word	0x20019c30
    bc90:	.word	0x20019c2c
    bc94:	.word	0x20014344
    bc98:	lsrs	r2, r3, #9
    bc9a:	cmp	r2, #4
    bc9c:	bls.n	bd5c <_malloc_r+0x434>
    bc9e:	cmp	r2, #20
    bca0:	bhi.w	be0a <_malloc_r+0x4e2>
    bca4:	add.w	r1, r2, #92	; 0x5c
    bca8:	lsls	r1, r1, #1
    bcaa:	adds	r2, #91	; 0x5b
    bcac:	add.w	ip, r7, r1, lsl #2
    bcb0:	ldr.w	r1, [r7, r1, lsl #2]
    bcb4:	ldr.w	r8, [pc, #476]	; be94 <_malloc_r+0x56c>
    bcb8:	sub.w	ip, ip, #8
    bcbc:	cmp	ip, r1
    bcbe:	beq.w	bdd2 <_malloc_r+0x4aa>
    bcc2:	ldr	r2, [r1, #4]
    bcc4:	bic.w	r2, r2, #3
    bcc8:	cmp	r3, r2
    bcca:	bcs.n	bcd2 <_malloc_r+0x3aa>
    bccc:	ldr	r1, [r1, #8]
    bcce:	cmp	ip, r1
    bcd0:	bne.n	bcc2 <_malloc_r+0x39a>
    bcd2:	ldr.w	ip, [r1, #12]
    bcd6:	ldr	r2, [r7, #4]
    bcd8:	str.w	ip, [r4, #12]
    bcdc:	str	r1, [r4, #8]
    bcde:	str.w	r4, [ip, #8]
    bce2:	str	r4, [r1, #12]
    bce4:	b.n	b9f8 <_malloc_r+0xd0>
    bce6:	adds	r3, r4, r5
    bce8:	orr.w	r7, r2, #1
    bcec:	orr.w	r5, r5, #1
    bcf0:	str	r5, [r4, #4]
    bcf2:	mov	r0, r6
    bcf4:	str	r3, [r1, #20]
    bcf6:	str	r3, [r1, #16]
    bcf8:	str.w	lr, [r3, #12]
    bcfc:	str.w	lr, [r3, #8]
    bd00:	str	r7, [r3, #4]
    bd02:	str	r2, [r3, r2]
    bd04:	adds	r4, #8
    bd06:	bl	c13c <__malloc_unlock>
    bd0a:	b.n	bab8 <_malloc_r+0x190>
    bd0c:	ldr	r2, [r1, #4]
    bd0e:	b.n	b9f8 <_malloc_r+0xd0>
    bd10:	add.w	r8, r8, #1
    bd14:	tst.w	r8, #3
    bd18:	add.w	ip, ip, #8
    bd1c:	bne.w	ba1e <_malloc_r+0xf6>
    bd20:	b.n	bd84 <_malloc_r+0x45c>
    bd22:	ldr	r4, [r3, #12]
    bd24:	cmp	r3, r4
    bd26:	it	eq
    bd28:	addeq	r0, #2
    bd2a:	beq.w	b998 <_malloc_r+0x70>
    bd2e:	b.n	ba98 <_malloc_r+0x170>
    bd30:	add	r3, r1
    bd32:	mov	r4, r1
    bd34:	ldr	r2, [r3, #4]
    bd36:	ldr	r1, [r1, #12]
    bd38:	ldr.w	r5, [r4, #8]!
    bd3c:	orr.w	r2, r2, #1
    bd40:	str	r2, [r3, #4]
    bd42:	mov	r0, r6
    bd44:	str	r1, [r5, #12]
    bd46:	str	r5, [r1, #8]
    bd48:	bl	c13c <__malloc_unlock>
    bd4c:	b.n	bab8 <_malloc_r+0x190>
    bd4e:	add.w	lr, r3, #92	; 0x5c
    bd52:	add.w	r0, r3, #91	; 0x5b
    bd56:	mov.w	r3, lr, lsl #1
    bd5a:	b.n	b96c <_malloc_r+0x44>
    bd5c:	lsrs	r2, r3, #6
    bd5e:	add.w	r1, r2, #57	; 0x39
    bd62:	lsls	r1, r1, #1
    bd64:	adds	r2, #56	; 0x38
    bd66:	b.n	bcac <_malloc_r+0x384>
    bd68:	cmp	r4, r7
    bd6a:	ldr	r3, [pc, #296]	; (be94 <_malloc_r+0x56c>)
    bd6c:	beq.w	bb70 <_malloc_r+0x248>
    bd70:	ldr	r4, [r3, #8]
    bd72:	ldr	r2, [r4, #4]
    bd74:	bic.w	r2, r2, #3
    bd78:	b.n	bc30 <_malloc_r+0x308>
    bd7a:	ldr.w	r3, [r9], #-8
    bd7e:	cmp	r9, r3
    bd80:	bne.w	be88 <_malloc_r+0x560>
    bd84:	tst.w	r0, #3
    bd88:	add.w	r0, r0, #4294967295
    bd8c:	bne.n	bd7a <_malloc_r+0x452>
    bd8e:	ldr	r3, [r7, #4]
    bd90:	bic.w	r3, r3, r4
    bd94:	str	r3, [r7, #4]
    bd96:	lsls	r4, r4, #1
    bd98:	cmp	r4, r3
    bd9a:	bhi.w	bb18 <_malloc_r+0x1f0>
    bd9e:	cmp	r4, #0
    bda0:	beq.w	bb18 <_malloc_r+0x1f0>
    bda4:	tst	r4, r3
    bda6:	mov	r0, r8
    bda8:	bne.w	ba16 <_malloc_r+0xee>
    bdac:	lsls	r4, r4, #1
    bdae:	tst	r4, r3
    bdb0:	add.w	r0, r0, #4
    bdb4:	beq.n	bdac <_malloc_r+0x484>
    bdb6:	b.n	ba16 <_malloc_r+0xee>
    bdb8:	cmp.w	r3, #340	; 0x154
    bdbc:	bhi.n	bdf0 <_malloc_r+0x4c8>
    bdbe:	lsrs	r0, r5, #15
    bdc0:	add.w	lr, r0, #120	; 0x78
    bdc4:	mov.w	r3, lr, lsl #1
    bdc8:	adds	r0, #119	; 0x77
    bdca:	b.n	b96c <_malloc_r+0x44>
    bdcc:	mov.w	r1, #4096	; 0x1000
    bdd0:	b.n	bbaa <_malloc_r+0x282>
    bdd2:	movs	r1, #1
    bdd4:	ldr.w	r3, [r8, #4]
    bdd8:	asrs	r2, r2, #2
    bdda:	lsl.w	r2, r1, r2
    bdde:	orrs	r2, r3
    bde0:	str.w	r2, [r8, #4]
    bde4:	mov	r1, ip
    bde6:	b.n	bcd8 <_malloc_r+0x3b0>
    bde8:	movs	r3, #1
    bdea:	str.w	r3, [fp, #4]
    bdee:	b.n	bc3c <_malloc_r+0x314>
    bdf0:	movw	r2, #1364	; 0x554
    bdf4:	cmp	r3, r2
    bdf6:	bhi.n	be3a <_malloc_r+0x512>
    bdf8:	lsrs	r0, r5, #18
    bdfa:	add.w	lr, r0, #125	; 0x7d
    bdfe:	mov.w	r3, lr, lsl #1
    be02:	adds	r0, #124	; 0x7c
    be04:	b.n	b96c <_malloc_r+0x44>
    be06:	adds	r2, #16
    be08:	b.n	bb54 <_malloc_r+0x22c>
    be0a:	cmp	r2, #84	; 0x54
    be0c:	bhi.n	be5c <_malloc_r+0x534>
    be0e:	lsrs	r2, r3, #12
    be10:	add.w	r1, r2, #111	; 0x6f
    be14:	lsls	r1, r1, #1
    be16:	adds	r2, #110	; 0x6e
    be18:	b.n	bcac <_malloc_r+0x384>
    be1a:	ldr	r4, [r7, #8]
    be1c:	ldr	r2, [r4, #4]
    be1e:	bic.w	r2, r2, #3
    be22:	b.n	bc30 <_malloc_r+0x308>
    be24:	ubfx	r0, sl, #0, #12
    be28:	cmp	r0, #0
    be2a:	bne.w	bb7e <_malloc_r+0x256>
    be2e:	add	r2, r8
    be30:	ldr	r3, [r7, #8]
    be32:	orr.w	r2, r2, #1
    be36:	str	r2, [r3, #4]
    be38:	b.n	bc14 <_malloc_r+0x2ec>
    be3a:	movs	r3, #254	; 0xfe
    be3c:	mov.w	lr, #127	; 0x7f
    be40:	movs	r0, #126	; 0x7e
    be42:	b.n	b96c <_malloc_r+0x44>
    be44:	movs	r2, #1
    be46:	mov.w	r9, #0
    be4a:	b.n	bbd0 <_malloc_r+0x2a8>
    be4c:	add.w	r1, r4, #8
    be50:	mov	r0, r6
    be52:	bl	11090 <_free_r>
    be56:	ldr.w	r1, [r9]
    be5a:	b.n	bc14 <_malloc_r+0x2ec>
    be5c:	cmp.w	r2, #340	; 0x154
    be60:	bhi.n	be6e <_malloc_r+0x546>
    be62:	lsrs	r2, r3, #15
    be64:	add.w	r1, r2, #120	; 0x78
    be68:	lsls	r1, r1, #1
    be6a:	adds	r2, #119	; 0x77
    be6c:	b.n	bcac <_malloc_r+0x384>
    be6e:	movw	r1, #1364	; 0x554
    be72:	cmp	r2, r1
    be74:	bhi.n	be82 <_malloc_r+0x55a>
    be76:	lsrs	r2, r3, #18
    be78:	add.w	r1, r2, #125	; 0x7d
    be7c:	lsls	r1, r1, #1
    be7e:	adds	r2, #124	; 0x7c
    be80:	b.n	bcac <_malloc_r+0x384>
    be82:	movs	r1, #254	; 0xfe
    be84:	movs	r2, #126	; 0x7e
    be86:	b.n	bcac <_malloc_r+0x384>
    be88:	ldr	r3, [r7, #4]
    be8a:	b.n	bd96 <_malloc_r+0x46e>
    be8c:	lsrs	r0, r5, #3
    be8e:	adds	r3, r0, #1
    be90:	lsls	r3, r3, #1
    be92:	b.n	ba86 <_malloc_r+0x15e>
    be94:	.word	0x20013f38

0000be98 <__ascii_mbtowc>:
    be98:	sub	sp, #8
    be9a:	cbz	r1, beb0 <__ascii_mbtowc+0x18>
    be9c:	cbz	r2, beb6 <__ascii_mbtowc+0x1e>
    be9e:	cbz	r3, bebc <__ascii_mbtowc+0x24>
    bea0:	ldrb	r3, [r2, #0]
    bea2:	str	r3, [r1, #0]
    bea4:	ldrb	r2, [r2, #0]
    bea6:	adds	r0, r2, #0
    bea8:	it	ne
    beaa:	movne	r0, #1
    beac:	add	sp, #8
    beae:	bx	lr
    beb0:	add	r1, sp, #4
    beb2:	cmp	r2, #0
    beb4:	bne.n	be9e <__ascii_mbtowc+0x6>
    beb6:	mov	r0, r2
    beb8:	add	sp, #8
    beba:	bx	lr
    bebc:	mvn.w	r0, #1
    bec0:	b.n	beac <__ascii_mbtowc+0x14>
    bec2:	nop
    bec4:			; <UNDEFINED> instruction: 0xffffffff
    bec8:			; <UNDEFINED> instruction: 0xffffffff
    becc:			; <UNDEFINED> instruction: 0xffffffff

0000bed0 <memchr>:
    bed0:	and.w	r1, r1, #255	; 0xff
    bed4:	cmp	r2, #16
    bed6:	blt.n	bf30 <memchr+0x60>
    bed8:	tst.w	r0, #7
    bedc:	beq.n	bef0 <memchr+0x20>
    bede:	ldrb.w	r3, [r0], #1
    bee2:	subs	r2, #1
    bee4:	cmp	r3, r1
    bee6:	beq.n	bf44 <memchr+0x74>
    bee8:	tst.w	r0, #7
    beec:	cbz	r2, bf40 <memchr+0x70>
    beee:	bne.n	bede <memchr+0xe>
    bef0:	push	{r4, r5, r6, r7}
    bef2:	orr.w	r1, r1, r1, lsl #8
    bef6:	orr.w	r1, r1, r1, lsl #16
    befa:	bic.w	r4, r2, #7
    befe:	mvns.w	r7, #0
    bf02:	movs	r3, #0
    bf04:	ldrd	r5, r6, [r0], #8
    bf08:	subs	r4, #8
    bf0a:	eor.w	r5, r5, r1
    bf0e:	eor.w	r6, r6, r1
    bf12:	uadd8	r5, r5, r7
    bf16:	sel	r5, r3, r7
    bf1a:	uadd8	r6, r6, r7
    bf1e:	sel	r6, r5, r7
    bf22:	cbnz	r6, bf48 <memchr+0x78>
    bf24:	bne.n	bf04 <memchr+0x34>
    bf26:	pop	{r4, r5, r6, r7}
    bf28:	and.w	r1, r1, #255	; 0xff
    bf2c:	and.w	r2, r2, #7
    bf30:	cbz	r2, bf40 <memchr+0x70>
    bf32:	ldrb.w	r3, [r0], #1
    bf36:	subs	r2, #1
    bf38:	eor.w	r3, r3, r1
    bf3c:	cbz	r3, bf44 <memchr+0x74>
    bf3e:	bne.n	bf32 <memchr+0x62>
    bf40:	movs	r0, #0
    bf42:	bx	lr
    bf44:	subs	r0, #1
    bf46:	bx	lr
    bf48:	cmp	r5, #0
    bf4a:	itte	eq
    bf4c:	moveq	r5, r6
    bf4e:	subeq	r0, #3
    bf50:	subne	r0, #7
    bf52:	tst.w	r5, #1
    bf56:	bne.n	bf68 <memchr+0x98>
    bf58:	adds	r0, #1
    bf5a:	tst.w	r5, #256	; 0x100
    bf5e:	ittt	eq
    bf60:	addeq	r0, #1
    bf62:	tsteq.w	r5, #98304	; 0x18000
    bf66:	addeq	r0, #1
    bf68:	pop	{r4, r5, r6, r7}
    bf6a:	subs	r0, #1
    bf6c:	bx	lr
    bf6e:	nop

0000bf70 <memcmp>:
    bf70:	cmp	r2, #3
    bf72:	push	{r4, r5, r6}
    bf74:	bls.n	bfc4 <memcmp+0x54>
    bf76:	orr.w	r3, r0, r1
    bf7a:	lsls	r3, r3, #30
    bf7c:	beq.n	bfa2 <memcmp+0x32>
    bf7e:	ldrb	r4, [r0, #0]
    bf80:	ldrb	r5, [r1, #0]
    bf82:	cmp	r4, r5
    bf84:	bne.n	bfcc <memcmp+0x5c>
    bf86:	add	r2, r0
    bf88:	adds	r3, r0, #1
    bf8a:	b.n	bf98 <memcmp+0x28>
    bf8c:	ldrb.w	r4, [r3], #1
    bf90:	ldrb.w	r5, [r1, #1]!
    bf94:	cmp	r4, r5
    bf96:	bne.n	bfcc <memcmp+0x5c>
    bf98:	cmp	r3, r2
    bf9a:	bne.n	bf8c <memcmp+0x1c>
    bf9c:	movs	r0, #0
    bf9e:	pop	{r4, r5, r6}
    bfa0:	bx	lr
    bfa2:	mov	r4, r1
    bfa4:	mov	r3, r0
    bfa6:	ldr	r6, [r3, #0]
    bfa8:	ldr	r5, [r4, #0]
    bfaa:	cmp	r6, r5
    bfac:	mov	r0, r3
    bfae:	mov	r1, r4
    bfb0:	add.w	r3, r3, #4
    bfb4:	add.w	r4, r4, #4
    bfb8:	bne.n	bf7e <memcmp+0xe>
    bfba:	subs	r2, #4
    bfbc:	cmp	r2, #3
    bfbe:	mov	r0, r3
    bfc0:	mov	r1, r4
    bfc2:	bhi.n	bfa6 <memcmp+0x36>
    bfc4:	cmp	r2, #0
    bfc6:	bne.n	bf7e <memcmp+0xe>
    bfc8:	mov	r0, r2
    bfca:	b.n	bf9e <memcmp+0x2e>
    bfcc:	subs	r0, r4, r5
    bfce:	pop	{r4, r5, r6}
    bfd0:	bx	lr
    bfd2:	nop

0000bfd4 <memmove>:
    bfd4:	cmp	r0, r1
    bfd6:	push	{r4, r5, r6, r7, lr}
    bfd8:	bls.n	bff6 <memmove+0x22>
    bfda:	adds	r3, r1, r2
    bfdc:	cmp	r0, r3
    bfde:	bcs.n	bff6 <memmove+0x22>
    bfe0:	adds	r1, r0, r2
    bfe2:	cmp	r2, #0
    bfe4:	beq.n	c08a <memmove+0xb6>
    bfe6:	subs	r2, r3, r2
    bfe8:	ldrb.w	r4, [r3, #-1]!
    bfec:	strb.w	r4, [r1, #-1]!
    bff0:	cmp	r3, r2
    bff2:	bne.n	bfe8 <memmove+0x14>
    bff4:	pop	{r4, r5, r6, r7, pc}
    bff6:	cmp	r2, #15
    bff8:	bls.n	c08c <memmove+0xb8>
    bffa:	orr.w	r3, r1, r0
    bffe:	lsls	r3, r3, #30
    c000:	bne.n	c090 <memmove+0xbc>
    c002:	add.w	r4, r0, #16
    c006:	add.w	r3, r1, #16
    c00a:	mov	r5, r2
    c00c:	ldr.w	r6, [r3, #-16]
    c010:	str.w	r6, [r4, #-16]
    c014:	ldr.w	r6, [r3, #-12]
    c018:	str.w	r6, [r4, #-12]
    c01c:	ldr.w	r6, [r3, #-8]
    c020:	str.w	r6, [r4, #-8]
    c024:	subs	r5, #16
    c026:	ldr.w	r6, [r3, #-4]
    c02a:	str.w	r6, [r4, #-4]
    c02e:	cmp	r5, #15
    c030:	add.w	r3, r3, #16
    c034:	add.w	r4, r4, #16
    c038:	bhi.n	c00c <memmove+0x38>
    c03a:	sub.w	r3, r2, #16
    c03e:	bic.w	r3, r3, #15
    c042:	and.w	lr, r2, #15
    c046:	adds	r3, #16
    c048:	cmp.w	lr, #3
    c04c:	add	r1, r3
    c04e:	add	r3, r0
    c050:	bls.n	c096 <memmove+0xc2>
    c052:	subs	r6, r3, #4
    c054:	mov	r5, r1
    c056:	mov	r4, lr
    c058:	subs	r4, #4
    c05a:	ldr.w	r7, [r5], #4
    c05e:	str.w	r7, [r6, #4]!
    c062:	cmp	r4, #3
    c064:	bhi.n	c058 <memmove+0x84>
    c066:	sub.w	r4, lr, #4
    c06a:	bic.w	r4, r4, #3
    c06e:	adds	r4, #4
    c070:	add	r3, r4
    c072:	add	r1, r4
    c074:	and.w	r2, r2, #3
    c078:	cbz	r2, c094 <memmove+0xc0>
    c07a:	subs	r3, #1
    c07c:	add	r2, r1
    c07e:	ldrb.w	r4, [r1], #1
    c082:	strb.w	r4, [r3, #1]!
    c086:	cmp	r2, r1
    c088:	bne.n	c07e <memmove+0xaa>
    c08a:	pop	{r4, r5, r6, r7, pc}
    c08c:	mov	r3, r0
    c08e:	b.n	c078 <memmove+0xa4>
    c090:	mov	r3, r0
    c092:	b.n	c07a <memmove+0xa6>
    c094:	pop	{r4, r5, r6, r7, pc}
    c096:	mov	r2, lr
    c098:	b.n	c078 <memmove+0xa4>
    c09a:	nop

0000c09c <memset>:
    c09c:	push	{r4, r5, r6}
    c09e:	lsls	r4, r0, #30
    c0a0:	beq.n	c130 <memset+0x94>
    c0a2:	subs	r4, r2, #1
    c0a4:	cmp	r2, #0
    c0a6:	beq.n	c12c <memset+0x90>
    c0a8:	uxtb	r5, r1
    c0aa:	mov	r3, r0
    c0ac:	b.n	c0b4 <memset+0x18>
    c0ae:	subs	r2, r4, #1
    c0b0:	cbz	r4, c12c <memset+0x90>
    c0b2:	mov	r4, r2
    c0b4:	strb.w	r5, [r3], #1
    c0b8:	lsls	r2, r3, #30
    c0ba:	bne.n	c0ae <memset+0x12>
    c0bc:	cmp	r4, #3
    c0be:	bls.n	c11e <memset+0x82>
    c0c0:	uxtb	r5, r1
    c0c2:	orr.w	r5, r5, r5, lsl #8
    c0c6:	cmp	r4, #15
    c0c8:	orr.w	r5, r5, r5, lsl #16
    c0cc:	bls.n	c102 <memset+0x66>
    c0ce:	add.w	r2, r3, #16
    c0d2:	mov	r6, r4
    c0d4:	subs	r6, #16
    c0d6:	cmp	r6, #15
    c0d8:	str.w	r5, [r2, #-16]
    c0dc:	str.w	r5, [r2, #-12]
    c0e0:	str.w	r5, [r2, #-8]
    c0e4:	str.w	r5, [r2, #-4]
    c0e8:	add.w	r2, r2, #16
    c0ec:	bhi.n	c0d4 <memset+0x38>
    c0ee:	sub.w	r2, r4, #16
    c0f2:	bic.w	r2, r2, #15
    c0f6:	and.w	r4, r4, #15
    c0fa:	adds	r2, #16
    c0fc:	cmp	r4, #3
    c0fe:	add	r3, r2
    c100:	bls.n	c11e <memset+0x82>
    c102:	mov	r6, r3
    c104:	mov	r2, r4
    c106:	subs	r2, #4
    c108:	cmp	r2, #3
    c10a:	str.w	r5, [r6], #4
    c10e:	bhi.n	c106 <memset+0x6a>
    c110:	subs	r2, r4, #4
    c112:	bic.w	r2, r2, #3
    c116:	adds	r2, #4
    c118:	add	r3, r2
    c11a:	and.w	r4, r4, #3
    c11e:	cbz	r4, c12c <memset+0x90>
    c120:	uxtb	r1, r1
    c122:	add	r4, r3
    c124:	strb.w	r1, [r3], #1
    c128:	cmp	r3, r4
    c12a:	bne.n	c124 <memset+0x88>
    c12c:	pop	{r4, r5, r6}
    c12e:	bx	lr
    c130:	mov	r4, r2
    c132:	mov	r3, r0
    c134:	b.n	c0bc <memset+0x20>
    c136:	nop

0000c138 <__malloc_lock>:
    c138:	bx	lr
    c13a:	nop

0000c13c <__malloc_unlock>:
    c13c:	bx	lr
    c13e:	nop

0000c140 <_realloc_r>:
    c140:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c144:	mov	r7, r2
    c146:	sub	sp, #12
    c148:	cmp	r1, #0
    c14a:	beq.w	c2d0 <_realloc_r+0x190>
    c14e:	mov	r6, r1
    c150:	mov	r9, r0
    c152:	add.w	r5, r7, #11
    c156:	bl	c138 <__malloc_lock>
    c15a:	ldr.w	lr, [r6, #-4]
    c15e:	cmp	r5, #22
    c160:	bic.w	r4, lr, #3
    c164:	sub.w	r8, r6, #8
    c168:	bhi.n	c1ec <_realloc_r+0xac>
    c16a:	movs	r2, #16
    c16c:	mov	r5, r2
    c16e:	cmp	r7, r5
    c170:	bhi.n	c1f6 <_realloc_r+0xb6>
    c172:	cmp	r4, r2
    c174:	bge.n	c262 <_realloc_r+0x122>
    c176:	ldr	r3, [pc, #804]	; (c49c <_realloc_r+0x35c>)
    c178:	ldr	r1, [r3, #8]
    c17a:	add.w	r0, r8, r4
    c17e:	cmp	r0, r1
    c180:	ldr	r1, [r0, #4]
    c182:	beq.w	c338 <_realloc_r+0x1f8>
    c186:	bic.w	r3, r1, #1
    c18a:	add	r3, r0
    c18c:	ldr	r3, [r3, #4]
    c18e:	lsls	r3, r3, #31
    c190:	bpl.n	c28e <_realloc_r+0x14e>
    c192:	tst.w	lr, #1
    c196:	beq.n	c204 <_realloc_r+0xc4>
    c198:	mov	r1, r7
    c19a:	mov	r0, r9
    c19c:	bl	b928 <_malloc_r>
    c1a0:	mov	r7, r0
    c1a2:	cbz	r0, c1de <_realloc_r+0x9e>
    c1a4:	ldr.w	r3, [r6, #-4]
    c1a8:	bic.w	r3, r3, #1
    c1ac:	add	r3, r8
    c1ae:	sub.w	r2, r0, #8
    c1b2:	cmp	r2, r3
    c1b4:	beq.w	c440 <_realloc_r+0x300>
    c1b8:	subs	r2, r4, #4
    c1ba:	cmp	r2, #36	; 0x24
    c1bc:	bhi.w	c422 <_realloc_r+0x2e2>
    c1c0:	cmp	r2, #19
    c1c2:	bhi.w	c3ce <_realloc_r+0x28e>
    c1c6:	mov	r3, r0
    c1c8:	mov	r2, r6
    c1ca:	ldr	r1, [r2, #0]
    c1cc:	str	r1, [r3, #0]
    c1ce:	ldr	r1, [r2, #4]
    c1d0:	str	r1, [r3, #4]
    c1d2:	ldr	r2, [r2, #8]
    c1d4:	str	r2, [r3, #8]
    c1d6:	mov	r1, r6
    c1d8:	mov	r0, r9
    c1da:	bl	11090 <_free_r>
    c1de:	mov	r0, r9
    c1e0:	bl	c13c <__malloc_unlock>
    c1e4:	mov	r0, r7
    c1e6:	add	sp, #12
    c1e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1ec:	bic.w	r5, r5, #7
    c1f0:	cmp	r5, #0
    c1f2:	mov	r2, r5
    c1f4:	bge.n	c16e <_realloc_r+0x2e>
    c1f6:	movs	r3, #12
    c1f8:	movs	r0, #0
    c1fa:	str.w	r3, [r9]
    c1fe:	add	sp, #12
    c200:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c204:	ldr.w	r3, [r6, #-8]
    c208:	rsb	sl, r3, r8
    c20c:	ldr.w	r3, [sl, #4]
    c210:	bic.w	ip, r3, #3
    c214:	add.w	r3, r4, ip
    c218:	cmp	r3, r2
    c21a:	blt.n	c198 <_realloc_r+0x58>
    c21c:	mov	r7, sl
    c21e:	ldr.w	r1, [sl, #12]
    c222:	ldr.w	r0, [r7, #8]!
    c226:	subs	r2, r4, #4
    c228:	cmp	r2, #36	; 0x24
    c22a:	str	r1, [r0, #12]
    c22c:	str	r0, [r1, #8]
    c22e:	bhi.w	c460 <_realloc_r+0x320>
    c232:	cmp	r2, #19
    c234:	bls.w	c45c <_realloc_r+0x31c>
    c238:	ldr	r1, [r6, #0]
    c23a:	str.w	r1, [sl, #8]
    c23e:	ldr	r1, [r6, #4]
    c240:	str.w	r1, [sl, #12]
    c244:	cmp	r2, #27
    c246:	bhi.w	c4a0 <_realloc_r+0x360>
    c24a:	adds	r6, #8
    c24c:	add.w	r2, sl, #16
    c250:	ldr	r1, [r6, #0]
    c252:	str	r1, [r2, #0]
    c254:	ldr	r1, [r6, #4]
    c256:	str	r1, [r2, #4]
    c258:	ldr	r1, [r6, #8]
    c25a:	str	r1, [r2, #8]
    c25c:	mov	r6, r7
    c25e:	mov	r4, r3
    c260:	mov	r8, sl
    c262:	subs	r3, r4, r5
    c264:	cmp	r3, #15
    c266:	bhi.n	c2a4 <_realloc_r+0x164>
    c268:	ldr.w	r3, [r8, #4]
    c26c:	and.w	r3, r3, #1
    c270:	orrs	r3, r4
    c272:	add	r4, r8
    c274:	str.w	r3, [r8, #4]
    c278:	ldr	r3, [r4, #4]
    c27a:	orr.w	r3, r3, #1
    c27e:	str	r3, [r4, #4]
    c280:	mov	r0, r9
    c282:	bl	c13c <__malloc_unlock>
    c286:	mov	r0, r6
    c288:	add	sp, #12
    c28a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c28e:	bic.w	r1, r1, #3
    c292:	add	r1, r4
    c294:	cmp	r1, r2
    c296:	blt.n	c2dc <_realloc_r+0x19c>
    c298:	ldr	r3, [r0, #12]
    c29a:	ldr	r2, [r0, #8]
    c29c:	mov	r4, r1
    c29e:	str	r3, [r2, #12]
    c2a0:	str	r2, [r3, #8]
    c2a2:	b.n	c262 <_realloc_r+0x122>
    c2a4:	ldr.w	r2, [r8, #4]
    c2a8:	add.w	r1, r8, r5
    c2ac:	and.w	r2, r2, #1
    c2b0:	orrs	r5, r2
    c2b2:	orr.w	r2, r3, #1
    c2b6:	add	r3, r1
    c2b8:	str.w	r5, [r8, #4]
    c2bc:	str	r2, [r1, #4]
    c2be:	ldr	r2, [r3, #4]
    c2c0:	orr.w	r2, r2, #1
    c2c4:	adds	r1, #8
    c2c6:	str	r2, [r3, #4]
    c2c8:	mov	r0, r9
    c2ca:	bl	11090 <_free_r>
    c2ce:	b.n	c280 <_realloc_r+0x140>
    c2d0:	mov	r1, r2
    c2d2:	add	sp, #12
    c2d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2d8:	b.w	b928 <_malloc_r>
    c2dc:	tst.w	lr, #1
    c2e0:	bne.w	c198 <_realloc_r+0x58>
    c2e4:	ldr.w	r3, [r6, #-8]
    c2e8:	rsb	sl, r3, r8
    c2ec:	ldr.w	r3, [sl, #4]
    c2f0:	bic.w	ip, r3, #3
    c2f4:	add.w	lr, r1, ip
    c2f8:	cmp	lr, r2
    c2fa:	blt.n	c214 <_realloc_r+0xd4>
    c2fc:	ldr	r3, [r0, #12]
    c2fe:	ldr	r2, [r0, #8]
    c300:	mov	r7, sl
    c302:	str	r3, [r2, #12]
    c304:	str	r2, [r3, #8]
    c306:	ldr.w	r1, [r7, #8]!
    c30a:	ldr.w	r3, [sl, #12]
    c30e:	str	r3, [r1, #12]
    c310:	subs	r2, r4, #4
    c312:	cmp	r2, #36	; 0x24
    c314:	str	r1, [r3, #8]
    c316:	bhi.w	c44c <_realloc_r+0x30c>
    c31a:	cmp	r2, #19
    c31c:	bls.n	c3e4 <_realloc_r+0x2a4>
    c31e:	ldr	r3, [r6, #0]
    c320:	str.w	r3, [sl, #8]
    c324:	ldr	r3, [r6, #4]
    c326:	str.w	r3, [sl, #12]
    c32a:	cmp	r2, #27
    c32c:	bhi.w	c470 <_realloc_r+0x330>
    c330:	adds	r6, #8
    c332:	add.w	r3, sl, #16
    c336:	b.n	c3e6 <_realloc_r+0x2a6>
    c338:	bic.w	fp, r1, #3
    c33c:	add	fp, r4
    c33e:	add.w	r0, r5, #16
    c342:	cmp	fp, r0
    c344:	bge.n	c3fa <_realloc_r+0x2ba>
    c346:	tst.w	lr, #1
    c34a:	bne.w	c198 <_realloc_r+0x58>
    c34e:	ldr.w	r1, [r6, #-8]
    c352:	rsb	sl, r1, r8
    c356:	ldr.w	r1, [sl, #4]
    c35a:	bic.w	ip, r1, #3
    c35e:	add	fp, ip
    c360:	cmp	r0, fp
    c362:	bgt.w	c214 <_realloc_r+0xd4>
    c366:	mov	r7, sl
    c368:	ldr.w	r1, [sl, #12]
    c36c:	ldr.w	r0, [r7, #8]!
    c370:	subs	r2, r4, #4
    c372:	cmp	r2, #36	; 0x24
    c374:	str	r1, [r0, #12]
    c376:	str	r0, [r1, #8]
    c378:	bhi.w	c4e4 <_realloc_r+0x3a4>
    c37c:	cmp	r2, #19
    c37e:	bls.w	c4cc <_realloc_r+0x38c>
    c382:	ldr	r1, [r6, #0]
    c384:	str.w	r1, [sl, #8]
    c388:	ldr	r1, [r6, #4]
    c38a:	str.w	r1, [sl, #12]
    c38e:	cmp	r2, #27
    c390:	bhi.w	c4f2 <_realloc_r+0x3b2>
    c394:	adds	r6, #8
    c396:	add.w	r2, sl, #16
    c39a:	ldr	r1, [r6, #0]
    c39c:	str	r1, [r2, #0]
    c39e:	ldr	r1, [r6, #4]
    c3a0:	str	r1, [r2, #4]
    c3a2:	ldr	r1, [r6, #8]
    c3a4:	str	r1, [r2, #8]
    c3a6:	add.w	r1, sl, r5
    c3aa:	rsb	r2, r5, fp
    c3ae:	orr.w	r2, r2, #1
    c3b2:	str	r1, [r3, #8]
    c3b4:	str	r2, [r1, #4]
    c3b6:	ldr.w	r3, [sl, #4]
    c3ba:	and.w	r3, r3, #1
    c3be:	orrs	r5, r3
    c3c0:	mov	r0, r9
    c3c2:	str.w	r5, [sl, #4]
    c3c6:	bl	c13c <__malloc_unlock>
    c3ca:	mov	r0, r7
    c3cc:	b.n	c288 <_realloc_r+0x148>
    c3ce:	ldr	r3, [r6, #0]
    c3d0:	str	r3, [r0, #0]
    c3d2:	ldr	r3, [r6, #4]
    c3d4:	str	r3, [r0, #4]
    c3d6:	cmp	r2, #27
    c3d8:	bhi.n	c42a <_realloc_r+0x2ea>
    c3da:	add.w	r3, r0, #8
    c3de:	add.w	r2, r6, #8
    c3e2:	b.n	c1ca <_realloc_r+0x8a>
    c3e4:	mov	r3, r7
    c3e6:	ldr	r2, [r6, #0]
    c3e8:	str	r2, [r3, #0]
    c3ea:	ldr	r2, [r6, #4]
    c3ec:	str	r2, [r3, #4]
    c3ee:	ldr	r2, [r6, #8]
    c3f0:	str	r2, [r3, #8]
    c3f2:	mov	r6, r7
    c3f4:	mov	r4, lr
    c3f6:	mov	r8, sl
    c3f8:	b.n	c262 <_realloc_r+0x122>
    c3fa:	add.w	r1, r8, r5
    c3fe:	rsb	fp, r5, fp
    c402:	orr.w	r2, fp, #1
    c406:	str	r1, [r3, #8]
    c408:	str	r2, [r1, #4]
    c40a:	ldr.w	r3, [r6, #-4]
    c40e:	and.w	r3, r3, #1
    c412:	orrs	r5, r3
    c414:	mov	r0, r9
    c416:	str.w	r5, [r6, #-4]
    c41a:	bl	c13c <__malloc_unlock>
    c41e:	mov	r0, r6
    c420:	b.n	c288 <_realloc_r+0x148>
    c422:	mov	r1, r6
    c424:	bl	bfd4 <memmove>
    c428:	b.n	c1d6 <_realloc_r+0x96>
    c42a:	ldr	r3, [r6, #8]
    c42c:	str	r3, [r0, #8]
    c42e:	ldr	r3, [r6, #12]
    c430:	str	r3, [r0, #12]
    c432:	cmp	r2, #36	; 0x24
    c434:	beq.n	c488 <_realloc_r+0x348>
    c436:	add.w	r3, r0, #16
    c43a:	add.w	r2, r6, #16
    c43e:	b.n	c1ca <_realloc_r+0x8a>
    c440:	ldr.w	r3, [r0, #-4]
    c444:	bic.w	r3, r3, #3
    c448:	add	r4, r3
    c44a:	b.n	c262 <_realloc_r+0x122>
    c44c:	mov	r1, r6
    c44e:	mov	r0, r7
    c450:	mov	r4, lr
    c452:	mov	r8, sl
    c454:	bl	bfd4 <memmove>
    c458:	mov	r6, r7
    c45a:	b.n	c262 <_realloc_r+0x122>
    c45c:	mov	r2, r7
    c45e:	b.n	c250 <_realloc_r+0x110>
    c460:	mov	r1, r6
    c462:	mov	r0, r7
    c464:	mov	r4, r3
    c466:	mov	r8, sl
    c468:	bl	bfd4 <memmove>
    c46c:	mov	r6, r7
    c46e:	b.n	c262 <_realloc_r+0x122>
    c470:	ldr	r3, [r6, #8]
    c472:	str.w	r3, [sl, #16]
    c476:	ldr	r3, [r6, #12]
    c478:	str.w	r3, [sl, #20]
    c47c:	cmp	r2, #36	; 0x24
    c47e:	beq.n	c4b8 <_realloc_r+0x378>
    c480:	adds	r6, #16
    c482:	add.w	r3, sl, #24
    c486:	b.n	c3e6 <_realloc_r+0x2a6>
    c488:	ldr	r3, [r6, #16]
    c48a:	str	r3, [r0, #16]
    c48c:	ldr	r3, [r6, #20]
    c48e:	str	r3, [r0, #20]
    c490:	add.w	r2, r6, #24
    c494:	add.w	r3, r0, #24
    c498:	b.n	c1ca <_realloc_r+0x8a>
    c49a:	nop
    c49c:	.word	0x20013f38
    c4a0:	ldr	r1, [r6, #8]
    c4a2:	str.w	r1, [sl, #16]
    c4a6:	ldr	r1, [r6, #12]
    c4a8:	str.w	r1, [sl, #20]
    c4ac:	cmp	r2, #36	; 0x24
    c4ae:	beq.n	c4d0 <_realloc_r+0x390>
    c4b0:	adds	r6, #16
    c4b2:	add.w	r2, sl, #24
    c4b6:	b.n	c250 <_realloc_r+0x110>
    c4b8:	ldr	r3, [r6, #16]
    c4ba:	str.w	r3, [sl, #24]
    c4be:	ldr	r3, [r6, #20]
    c4c0:	str.w	r3, [sl, #28]
    c4c4:	adds	r6, #24
    c4c6:	add.w	r3, sl, #32
    c4ca:	b.n	c3e6 <_realloc_r+0x2a6>
    c4cc:	mov	r2, r7
    c4ce:	b.n	c39a <_realloc_r+0x25a>
    c4d0:	ldr	r2, [r6, #16]
    c4d2:	str.w	r2, [sl, #24]
    c4d6:	ldr	r2, [r6, #20]
    c4d8:	str.w	r2, [sl, #28]
    c4dc:	adds	r6, #24
    c4de:	add.w	r2, sl, #32
    c4e2:	b.n	c250 <_realloc_r+0x110>
    c4e4:	mov	r1, r6
    c4e6:	mov	r0, r7
    c4e8:	str	r3, [sp, #4]
    c4ea:	bl	bfd4 <memmove>
    c4ee:	ldr	r3, [sp, #4]
    c4f0:	b.n	c3a6 <_realloc_r+0x266>
    c4f2:	ldr	r1, [r6, #8]
    c4f4:	str.w	r1, [sl, #16]
    c4f8:	ldr	r1, [r6, #12]
    c4fa:	str.w	r1, [sl, #20]
    c4fe:	cmp	r2, #36	; 0x24
    c500:	beq.n	c50a <_realloc_r+0x3ca>
    c502:	adds	r6, #16
    c504:	add.w	r2, sl, #24
    c508:	b.n	c39a <_realloc_r+0x25a>
    c50a:	ldr	r2, [r6, #16]
    c50c:	str.w	r2, [sl, #24]
    c510:	ldr	r2, [r6, #20]
    c512:	str.w	r2, [sl, #28]
    c516:	adds	r6, #24
    c518:	add.w	r2, sl, #32
    c51c:	b.n	c39a <_realloc_r+0x25a>
    c51e:	nop

0000c520 <_sbrk_r>:
    c520:	push	{r3, r4, r5, lr}
    c522:	ldr	r4, [pc, #28]	; (c540 <_sbrk_r+0x20>)
    c524:	movs	r3, #0
    c526:	mov	r5, r0
    c528:	mov	r0, r1
    c52a:	str	r3, [r4, #0]
    c52c:	bl	9134 <_sbrk>
    c530:	adds	r3, r0, #1
    c532:	beq.n	c536 <_sbrk_r+0x16>
    c534:	pop	{r3, r4, r5, pc}
    c536:	ldr	r3, [r4, #0]
    c538:	cmp	r3, #0
    c53a:	beq.n	c534 <_sbrk_r+0x14>
    c53c:	str	r3, [r5, #0]
    c53e:	pop	{r3, r4, r5, pc}
    c540:	.word	0x20019c74

0000c544 <sprintf>:
    c544:	push	{r1, r2, r3}
    c546:	push	{r4, r5, r6, r7, lr}
    c548:	sub	sp, #112	; 0x70
    c54a:	add	r3, sp, #132	; 0x84
    c54c:	ldr	r1, [pc, #60]	; (c58c <sprintf+0x48>)
    c54e:	ldr.w	r2, [r3], #4
    c552:	str	r3, [sp, #4]
    c554:	mov	r5, r0
    c556:	mvn.w	r4, #2147483648	; 0x80000000
    c55a:	ldr	r0, [r1, #0]
    c55c:	str	r5, [sp, #8]
    c55e:	mov.w	r7, #520	; 0x208
    c562:	movw	r6, #65535	; 0xffff
    c566:	add	r1, sp, #8
    c568:	str	r5, [sp, #24]
    c56a:	strh.w	r7, [sp, #20]
    c56e:	str	r4, [sp, #16]
    c570:	str	r4, [sp, #28]
    c572:	strh.w	r6, [sp, #22]
    c576:	bl	d990 <_svfprintf_r>
    c57a:	ldr	r3, [sp, #8]
    c57c:	movs	r2, #0
    c57e:	strb	r2, [r3, #0]
    c580:	add	sp, #112	; 0x70
    c582:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c586:	add	sp, #12
    c588:	bx	lr
    c58a:	nop
    c58c:	.word	0x20013dc8

0000c590 <sscanf>:
    c590:	push	{r1, r2, r3}
    c592:	push	{r4, r5, r6, r7, lr}
    c594:	sub	sp, #112	; 0x70
    c596:	add	r4, sp, #132	; 0x84
    c598:	mov.w	r2, #516	; 0x204
    c59c:	ldr.w	r6, [r4], #4
    c5a0:	strh.w	r2, [sp, #20]
    c5a4:	str	r0, [sp, #8]
    c5a6:	str	r0, [sp, #24]
    c5a8:	bl	c780 <strlen>
    c5ac:	ldr	r3, [pc, #48]	; (c5e0 <sscanf+0x50>)
    c5ae:	str	r4, [sp, #4]
    c5b0:	mov	r5, r0
    c5b2:	mov	r2, r6
    c5b4:	ldr	r7, [pc, #44]	; (c5e4 <sscanf+0x54>)
    c5b6:	ldr	r0, [r3, #0]
    c5b8:	str	r5, [sp, #12]
    c5ba:	mov	r3, r4
    c5bc:	movw	r6, #65535	; 0xffff
    c5c0:	movs	r4, #0
    c5c2:	add	r1, sp, #8
    c5c4:	str	r5, [sp, #28]
    c5c6:	str	r7, [sp, #40]	; 0x28
    c5c8:	str	r4, [sp, #56]	; 0x38
    c5ca:	str	r4, [sp, #76]	; 0x4c
    c5cc:	strh.w	r6, [sp, #22]
    c5d0:	bl	f074 <__ssvfscanf_r>
    c5d4:	add	sp, #112	; 0x70
    c5d6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c5da:	add	sp, #12
    c5dc:	bx	lr
    c5de:	nop
    c5e0:	.word	0x20013dc8
    c5e4:	.word	0x0000c5e9

0000c5e8 <__seofread>:
    c5e8:	movs	r0, #0
    c5ea:	bx	lr

0000c5ec <strchr>:
    c5ec:	push	{r4, r5, r6}
    c5ee:	ands.w	r4, r1, #255	; 0xff
    c5f2:	beq.n	c65e <strchr+0x72>
    c5f4:	lsls	r5, r0, #30
    c5f6:	beq.n	c618 <strchr+0x2c>
    c5f8:	ldrb	r3, [r0, #0]
    c5fa:	cmp	r3, #0
    c5fc:	beq.n	c6b4 <strchr+0xc8>
    c5fe:	cmp	r4, r3
    c600:	beq.n	c65a <strchr+0x6e>
    c602:	adds	r3, r0, #1
    c604:	b.n	c612 <strchr+0x26>
    c606:	ldrb.w	r2, [r3], #1
    c60a:	cmp	r2, #0
    c60c:	beq.n	c6ae <strchr+0xc2>
    c60e:	cmp	r4, r2
    c610:	beq.n	c65a <strchr+0x6e>
    c612:	lsls	r2, r3, #30
    c614:	mov	r0, r3
    c616:	bne.n	c606 <strchr+0x1a>
    c618:	lsls	r6, r1, #8
    c61a:	and.w	r6, r6, #65280	; 0xff00
    c61e:	orrs	r6, r4
    c620:	ldr	r3, [r0, #0]
    c622:	orr.w	r6, r6, r6, lsl #16
    c626:	b.n	c62c <strchr+0x40>
    c628:	ldr.w	r3, [r0, #4]!
    c62c:	eor.w	r5, r6, r3
    c630:	sub.w	r2, r5, #16843009	; 0x1010101
    c634:	sub.w	r1, r3, #16843009	; 0x1010101
    c638:	bic.w	r2, r2, r5
    c63c:	bic.w	r3, r1, r3
    c640:	orrs	r3, r2
    c642:	tst.w	r3, #2155905152	; 0x80808080
    c646:	beq.n	c628 <strchr+0x3c>
    c648:	ldrb	r3, [r0, #0]
    c64a:	cbnz	r3, c656 <strchr+0x6a>
    c64c:	b.n	c6b4 <strchr+0xc8>
    c64e:	ldrb.w	r3, [r0, #1]!
    c652:	cmp	r3, #0
    c654:	beq.n	c6b4 <strchr+0xc8>
    c656:	cmp	r4, r3
    c658:	bne.n	c64e <strchr+0x62>
    c65a:	pop	{r4, r5, r6}
    c65c:	bx	lr
    c65e:	lsls	r4, r0, #30
    c660:	beq.n	c67a <strchr+0x8e>
    c662:	ldrb	r3, [r0, #0]
    c664:	cmp	r3, #0
    c666:	beq.n	c65a <strchr+0x6e>
    c668:	adds	r3, r0, #1
    c66a:	b.n	c674 <strchr+0x88>
    c66c:	ldrb	r2, [r0, #0]
    c66e:	adds	r3, #1
    c670:	cmp	r2, #0
    c672:	beq.n	c65a <strchr+0x6e>
    c674:	lsls	r1, r3, #30
    c676:	mov	r0, r3
    c678:	bne.n	c66c <strchr+0x80>
    c67a:	ldr	r2, [r0, #0]
    c67c:	sub.w	r3, r2, #16843009	; 0x1010101
    c680:	bic.w	r3, r3, r2
    c684:	tst.w	r3, #2155905152	; 0x80808080
    c688:	bne.n	c69c <strchr+0xb0>
    c68a:	ldr.w	r2, [r0, #4]!
    c68e:	sub.w	r3, r2, #16843009	; 0x1010101
    c692:	bic.w	r3, r3, r2
    c696:	tst.w	r3, #2155905152	; 0x80808080
    c69a:	beq.n	c68a <strchr+0x9e>
    c69c:	ldrb	r3, [r0, #0]
    c69e:	cmp	r3, #0
    c6a0:	beq.n	c65a <strchr+0x6e>
    c6a2:	ldrb.w	r3, [r0, #1]!
    c6a6:	cmp	r3, #0
    c6a8:	bne.n	c6a2 <strchr+0xb6>
    c6aa:	pop	{r4, r5, r6}
    c6ac:	bx	lr
    c6ae:	mov	r0, r2
    c6b0:	pop	{r4, r5, r6}
    c6b2:	bx	lr
    c6b4:	mov	r0, r3
    c6b6:	pop	{r4, r5, r6}
    c6b8:	bx	lr
    c6ba:	nop

0000c6bc <strcpy>:
    c6bc:	eor.w	r2, r0, r1
    c6c0:	mov	ip, r0
    c6c2:	tst.w	r2, #3
    c6c6:	bne.n	c768 <strcpy+0xac>
    c6c8:	tst.w	r1, #3
    c6cc:	bne.n	c734 <strcpy+0x78>
    c6ce:	str.w	r4, [sp, #-4]!
    c6d2:	tst.w	r1, #4
    c6d6:	ldr.w	r3, [r1], #4
    c6da:	beq.n	c6f4 <strcpy+0x38>
    c6dc:	sub.w	r2, r3, #16843009	; 0x1010101
    c6e0:	bics	r2, r3
    c6e2:	tst.w	r2, #2155905152	; 0x80808080
    c6e6:	itt	eq
    c6e8:	streq.w	r3, [ip], #4
    c6ec:	ldreq.w	r3, [r1], #4
    c6f0:	bne.n	c720 <strcpy+0x64>
    c6f2:	nop
    c6f4:	ldr.w	r4, [r1], #4
    c6f8:	sub.w	r2, r3, #16843009	; 0x1010101
    c6fc:	bics	r2, r3
    c6fe:	tst.w	r2, #2155905152	; 0x80808080
    c702:	sub.w	r2, r4, #16843009	; 0x1010101
    c706:	bne.n	c720 <strcpy+0x64>
    c708:	str.w	r3, [ip], #4
    c70c:	bics	r2, r4
    c70e:	tst.w	r2, #2155905152	; 0x80808080
    c712:	itt	eq
    c714:	ldreq.w	r3, [r1], #4
    c718:	streq.w	r4, [ip], #4
    c71c:	beq.n	c6f4 <strcpy+0x38>
    c71e:	mov	r3, r4
    c720:	strb.w	r3, [ip], #1
    c724:	tst.w	r3, #255	; 0xff
    c728:	mov.w	r3, r3, ror #8
    c72c:	bne.n	c720 <strcpy+0x64>
    c72e:	ldr.w	r4, [sp], #4
    c732:	bx	lr
    c734:	tst.w	r1, #1
    c738:	beq.n	c748 <strcpy+0x8c>
    c73a:	ldrb.w	r2, [r1], #1
    c73e:	strb.w	r2, [ip], #1
    c742:	cmp	r2, #0
    c744:	it	eq
    c746:	bxeq	lr
    c748:	tst.w	r1, #2
    c74c:	beq.n	c6ce <strcpy+0x12>
    c74e:	ldrh.w	r2, [r1], #2
    c752:	tst.w	r2, #255	; 0xff
    c756:	itet	ne
    c758:	strhne.w	r2, [ip], #2
    c75c:	strbeq.w	r2, [ip]
    c760:	tstne.w	r2, #65280	; 0xff00
    c764:	bne.n	c6ce <strcpy+0x12>
    c766:	bx	lr
    c768:	ldrb.w	r2, [r1], #1
    c76c:	strb.w	r2, [ip], #1
    c770:	cmp	r2, #0
    c772:	bne.n	c768 <strcpy+0xac>
    c774:	bx	lr
    c776:	nop
    c778:			; <UNDEFINED> instruction: 0xffffffff
    c77c:			; <UNDEFINED> instruction: 0xffffffff

0000c780 <strlen>:
    c780:	pld	[r0]
    c784:	strd	r4, r5, [sp, #-8]!
    c788:	bic.w	r1, r0, #7
    c78c:	mvn.w	ip, #0
    c790:	ands.w	r4, r0, #7
    c794:	pld	[r1, #32]
    c798:	bne.w	c82e <strlen+0xae>
    c79c:	mov.w	r4, #0
    c7a0:	mvn.w	r0, #7
    c7a4:	ldrd	r2, r3, [r1]
    c7a8:	pld	[r1, #64]	; 0x40
    c7ac:	add.w	r0, r0, #8
    c7b0:	uadd8	r2, r2, ip
    c7b4:	sel	r2, r4, ip
    c7b8:	uadd8	r3, r3, ip
    c7bc:	sel	r3, r2, ip
    c7c0:	cbnz	r3, c816 <strlen+0x96>
    c7c2:	ldrd	r2, r3, [r1, #8]
    c7c6:	uadd8	r2, r2, ip
    c7ca:	add.w	r0, r0, #8
    c7ce:	sel	r2, r4, ip
    c7d2:	uadd8	r3, r3, ip
    c7d6:	sel	r3, r2, ip
    c7da:	cbnz	r3, c816 <strlen+0x96>
    c7dc:	ldrd	r2, r3, [r1, #16]
    c7e0:	uadd8	r2, r2, ip
    c7e4:	add.w	r0, r0, #8
    c7e8:	sel	r2, r4, ip
    c7ec:	uadd8	r3, r3, ip
    c7f0:	sel	r3, r2, ip
    c7f4:	cbnz	r3, c816 <strlen+0x96>
    c7f6:	ldrd	r2, r3, [r1, #24]
    c7fa:	add.w	r1, r1, #32
    c7fe:	uadd8	r2, r2, ip
    c802:	add.w	r0, r0, #8
    c806:	sel	r2, r4, ip
    c80a:	uadd8	r3, r3, ip
    c80e:	sel	r3, r2, ip
    c812:	cmp	r3, #0
    c814:	beq.n	c7a4 <strlen+0x24>
    c816:	cmp	r2, #0
    c818:	itt	eq
    c81a:	addeq	r0, #4
    c81c:	moveq	r2, r3
    c81e:	rev	r2, r2
    c820:	clz	r2, r2
    c824:	ldrd	r4, r5, [sp], #8
    c828:	add.w	r0, r0, r2, lsr #3
    c82c:	bx	lr
    c82e:	ldrd	r2, r3, [r1]
    c832:	and.w	r5, r4, #3
    c836:	rsb	r0, r4, #0
    c83a:	mov.w	r5, r5, lsl #3
    c83e:	tst.w	r4, #4
    c842:	pld	[r1, #64]	; 0x40
    c846:	lsl.w	r5, ip, r5
    c84a:	orn	r2, r2, r5
    c84e:	itt	ne
    c850:	ornne	r3, r3, r5
    c854:	movne	r2, ip
    c856:	mov.w	r4, #0
    c85a:	b.n	c7b0 <strlen+0x30>

0000c85c <strncmp>:
    c85c:	cmp	r2, #0
    c85e:	beq.n	c8e4 <strncmp+0x88>
    c860:	orr.w	r3, r0, r1
    c864:	ands.w	r3, r3, #3
    c868:	push	{r4, r5, r6, r7}
    c86a:	bne.n	c8b8 <strncmp+0x5c>
    c86c:	cmp	r2, #3
    c86e:	bls.n	c8b8 <strncmp+0x5c>
    c870:	ldr	r4, [r0, #0]
    c872:	ldr	r5, [r1, #0]
    c874:	cmp	r4, r5
    c876:	bne.n	c8b8 <strncmp+0x5c>
    c878:	subs	r2, #4
    c87a:	beq.n	c8e8 <strncmp+0x8c>
    c87c:	sub.w	r5, r4, #16843009	; 0x1010101
    c880:	bic.w	r4, r5, r4
    c884:	tst.w	r4, #2155905152	; 0x80808080
    c888:	bne.n	c8ee <strncmp+0x92>
    c88a:	adds	r7, r0, #4
    c88c:	adds	r5, r1, #4
    c88e:	b.n	c8ac <strncmp+0x50>
    c890:	ldr.w	r3, [r7], #4
    c894:	ldr	r6, [r1, #0]
    c896:	sub.w	r4, r3, #16843009	; 0x1010101
    c89a:	cmp	r3, r6
    c89c:	bic.w	r4, r4, r3
    c8a0:	bne.n	c8b8 <strncmp+0x5c>
    c8a2:	subs	r2, #4
    c8a4:	beq.n	c8e8 <strncmp+0x8c>
    c8a6:	tst.w	r4, #2155905152	; 0x80808080
    c8aa:	bne.n	c8f4 <strncmp+0x98>
    c8ac:	cmp	r2, #3
    c8ae:	mov	r1, r5
    c8b0:	mov	r0, r7
    c8b2:	add.w	r5, r5, #4
    c8b6:	bhi.n	c890 <strncmp+0x34>
    c8b8:	ldrb	r3, [r0, #0]
    c8ba:	ldrb	r4, [r1, #0]
    c8bc:	cmp	r4, r3
    c8be:	add.w	r2, r2, #4294967295
    c8c2:	bne.n	c8de <strncmp+0x82>
    c8c4:	cbz	r2, c8e8 <strncmp+0x8c>
    c8c6:	cbnz	r4, c8ce <strncmp+0x72>
    c8c8:	b.n	c8f8 <strncmp+0x9c>
    c8ca:	cbz	r2, c8e8 <strncmp+0x8c>
    c8cc:	cbz	r3, c8ee <strncmp+0x92>
    c8ce:	ldrb.w	r3, [r0, #1]!
    c8d2:	ldrb.w	r4, [r1, #1]!
    c8d6:	cmp	r3, r4
    c8d8:	add.w	r2, r2, #4294967295
    c8dc:	beq.n	c8ca <strncmp+0x6e>
    c8de:	subs	r0, r3, r4
    c8e0:	pop	{r4, r5, r6, r7}
    c8e2:	bx	lr
    c8e4:	mov	r0, r2
    c8e6:	bx	lr
    c8e8:	mov	r0, r2
    c8ea:	pop	{r4, r5, r6, r7}
    c8ec:	bx	lr
    c8ee:	mov	r0, r3
    c8f0:	pop	{r4, r5, r6, r7}
    c8f2:	bx	lr
    c8f4:	movs	r0, #0
    c8f6:	b.n	c8e0 <strncmp+0x84>
    c8f8:	mov	r0, r4
    c8fa:	b.n	c8e0 <strncmp+0x84>

0000c8fc <sulp>:
    c8fc:	push	{r4, r5, r6, lr}
    c8fe:	mov	r4, r0
    c900:	mov	r5, r1
    c902:	vmov	d0, r4, r5
    c906:	mov	r6, r2
    c908:	bl	12060 <__ulp>
    c90c:	vmov	r0, r1, d0
    c910:	cbz	r6, c932 <sulp+0x36>
    c912:	ubfx	r3, r5, #20, #11
    c916:	rsb	r3, r3, #107	; 0x6b
    c91a:	cmp	r3, #0
    c91c:	ble.n	c932 <sulp+0x36>
    c91e:	lsls	r3, r3, #20
    c920:	add.w	r5, r3, #1069547520	; 0x3fc00000
    c924:	movs	r4, #0
    c926:	add.w	r5, r5, #3145728	; 0x300000
    c92a:	mov	r2, r4
    c92c:	mov	r3, r5
    c92e:	bl	aea8 <__aeabi_dmul>
    c932:	pop	{r4, r5, r6, pc}
    c934:			; <UNDEFINED> instruction: 0xffffffff

0000c938 <_strtod_l>:
    c938:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c93c:	mov	r5, r3
    c93e:	sub	sp, #132	; 0x84
    c940:	movs	r3, #0
    c942:	mov	fp, r0
    c944:	mov	r0, r5
    c946:	mov	r6, r1
    c948:	str	r2, [sp, #24]
    c94a:	str	r3, [sp, #112]	; 0x70
    c94c:	bl	119e4 <__localeconv_l>
    c950:	movs	r4, #0
    c952:	movs	r3, #0
    c954:	mov	sl, r0
    c956:	ldr	r0, [r0, #0]
    c958:	strd	r3, r4, [sp, #16]
    c95c:	bl	c780 <strlen>
    c960:	str	r6, [sp, #108]	; 0x6c
    c962:	mov	r9, r0
    c964:	mov	r2, r6
    c966:	mov	r4, r2
    c968:	ldrb.w	r7, [r2], #1
    c96c:	cmp	r7, #45	; 0x2d
    c96e:	bhi.w	cad0 <_strtod_l+0x198>
    c972:	tbb	[pc, r7]
    c976:	.short	0xad17
    c978:	.word	0xadadadad
    c97c:	.word	0x81adadad
    c980:	.word	0x81818181
    c984:	.word	0xadadadad
    c988:	.word	0xadadadad
    c98c:	.word	0xadadadad
    c990:	.word	0xadadadad
    c994:	.word	0xad81adad
    c998:	.word	0xadadadad
    c99c:	.word	0xadadadad
    c9a0:	.word	0x7ead2bad
    c9a4:	ldr	r3, [sp, #24]
    c9a6:	mov.w	r8, #0
    c9aa:	mov.w	r9, #0
    c9ae:	cbz	r3, c9c2 <_strtod_l+0x8a>
    c9b0:	movs	r3, #0
    c9b2:	str	r3, [sp, #28]
    c9b4:	ldr	r3, [sp, #24]
    c9b6:	str	r6, [r3, #0]
    c9b8:	ldr	r3, [sp, #28]
    c9ba:	cbz	r3, c9c2 <_strtod_l+0x8a>
    c9bc:	add.w	r3, r9, #2147483648	; 0x80000000
    c9c0:	mov	r9, r3
    c9c2:	vmov	d0, r8, r9
    c9c6:	add	sp, #132	; 0x84
    c9c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9cc:	movs	r3, #0
    c9ce:	str	r3, [sp, #28]
    c9d0:	adds	r2, r4, #1
    c9d2:	str	r2, [sp, #108]	; 0x6c
    c9d4:	ldrb	r7, [r4, #1]
    c9d6:	cmp	r7, #0
    c9d8:	beq.n	c9a4 <_strtod_l+0x6c>
    c9da:	cmp	r7, #48	; 0x30
    c9dc:	mov	r4, r2
    c9de:	beq.n	cad8 <_strtod_l+0x1a0>
    c9e0:	movs	r3, #0
    c9e2:	str	r4, [sp, #32]
    c9e4:	str	r3, [sp, #40]	; 0x28
    c9e6:	sub.w	r3, r7, #48	; 0x30
    c9ea:	cmp	r3, #9
    c9ec:	bhi.w	d1fe <_strtod_l+0x8c6>
    c9f0:	mov.w	r8, #0
    c9f4:	mov	r0, r4
    c9f6:	mov	r5, r8
    c9f8:	mov	r4, r8
    c9fa:	cmp	r4, #8
    c9fc:	it	gt
    c9fe:	addgt.w	r8, r8, r8, lsl #2
    ca02:	add.w	r3, r5, r5, lsl #2
    ca06:	add.w	r0, r0, #1
    ca0a:	add.w	r3, r7, r3, lsl #1
    ca0e:	str	r0, [sp, #108]	; 0x6c
    ca10:	itt	gt
    ca12:	addgt.w	r7, r7, r8, lsl #1
    ca16:	subgt.w	r8, r7, #48	; 0x30
    ca1a:	ldrb	r7, [r0, #0]
    ca1c:	it	le
    ca1e:	suble.w	r5, r3, #48	; 0x30
    ca22:	sub.w	r3, r7, #48	; 0x30
    ca26:	cmp	r3, #9
    ca28:	add.w	r4, r4, #1
    ca2c:	bls.n	c9fa <_strtod_l+0xc2>
    ca2e:	ldr.w	r1, [sl]
    ca32:	mov	r2, r9
    ca34:	bl	c85c <strncmp>
    ca38:	cbz	r0, ca7c <_strtod_l+0x144>
    ca3a:	movs	r0, #0
    ca3c:	mov	r3, r7
    ca3e:	mov	r9, r0
    ca40:	mov	r7, r0
    ca42:	mov	sl, r4
    ca44:	cmp	r3, #101	; 0x65
    ca46:	beq.w	cbae <_strtod_l+0x276>
    ca4a:	cmp	r3, #69	; 0x45
    ca4c:	beq.w	cbae <_strtod_l+0x276>
    ca50:	movs	r2, #0
    ca52:	cmp	r4, #0
    ca54:	bne.n	cafc <_strtod_l+0x1c4>
    ca56:	cbnz	r0, ca60 <_strtod_l+0x128>
    ca58:	ldr	r2, [sp, #40]	; 0x28
    ca5a:	cmp	r2, #0
    ca5c:	beq.w	d002 <_strtod_l+0x6ca>
    ca60:	mov.w	r8, #0
    ca64:	mov.w	r9, #0
    ca68:	ldr	r3, [sp, #24]
    ca6a:	cmp	r3, #0
    ca6c:	beq.n	c9b8 <_strtod_l+0x80>
    ca6e:	ldr	r6, [sp, #108]	; 0x6c
    ca70:	b.n	c9b4 <_strtod_l+0x7c>
    ca72:	movs	r3, #1
    ca74:	str	r3, [sp, #28]
    ca76:	b.n	c9d0 <_strtod_l+0x98>
    ca78:	str	r2, [sp, #108]	; 0x6c
    ca7a:	b.n	c966 <_strtod_l+0x2e>
    ca7c:	ldr	r3, [sp, #108]	; 0x6c
    ca7e:	add.w	r2, r3, r9
    ca82:	str	r2, [sp, #108]	; 0x6c
    ca84:	ldrb.w	r3, [r3, r9]
    ca88:	mov	r7, r0
    ca8a:	mov	sl, r4
    ca8c:	sub.w	r2, r3, #48	; 0x30
    ca90:	cmp	r2, #9
    ca92:	bhi.w	cf88 <_strtod_l+0x650>
    ca96:	adds	r1, r0, #1
    ca98:	mov	r3, r2
    ca9a:	cmp	r2, #0
    ca9c:	beq.w	d7de <_strtod_l+0xea6>
    caa0:	cmp	r1, #1
    caa2:	add	r7, r1
    caa4:	it	ne
    caa6:	addne	r0, r0, r4
    caa8:	bne.n	cab6 <_strtod_l+0x17e>
    caaa:	b.w	d7d6 <_strtod_l+0xe9e>
    caae:	lsls	r5, r1, #1
    cab0:	cmp	r4, r0
    cab2:	beq.w	d42c <_strtod_l+0xaf4>
    cab6:	adds	r4, #1
    cab8:	subs	r1, r4, #1
    caba:	cmp	r1, #8
    cabc:	add.w	r1, r5, r5, lsl #2
    cac0:	ble.n	caae <_strtod_l+0x176>
    cac2:	cmp	r4, #16
    cac4:	itt	le
    cac6:	addle.w	r8, r8, r8, lsl #2
    caca:	movle.w	r8, r8, lsl #1
    cace:	b.n	cab0 <_strtod_l+0x178>
    cad0:	movs	r3, #0
    cad2:	cmp	r7, #48	; 0x30
    cad4:	str	r3, [sp, #28]
    cad6:	bne.n	c9e0 <_strtod_l+0xa8>
    cad8:	ldrb	r3, [r4, #1]
    cada:	cmp	r3, #88	; 0x58
    cadc:	beq.w	d1c6 <_strtod_l+0x88e>
    cae0:	cmp	r3, #120	; 0x78
    cae2:	beq.w	d1c6 <_strtod_l+0x88e>
    cae6:	adds	r4, #1
    cae8:	str	r4, [sp, #108]	; 0x6c
    caea:	ldrb	r7, [r4, #0]
    caec:	cmp	r7, #48	; 0x30
    caee:	beq.n	cae6 <_strtod_l+0x1ae>
    caf0:	cmp	r7, #0
    caf2:	beq.n	ca60 <_strtod_l+0x128>
    caf4:	movs	r3, #1
    caf6:	str	r4, [sp, #32]
    caf8:	str	r3, [sp, #40]	; 0x28
    cafa:	b.n	c9e6 <_strtod_l+0xae>
    cafc:	cmp	r4, #16
    cafe:	sub.w	r3, r2, r7
    cb02:	mov	r0, r5
    cb04:	mov	r9, r4
    cb06:	str	r3, [sp, #44]	; 0x2c
    cb08:	it	ge
    cb0a:	movge.w	r9, #16
    cb0e:	bl	adbc <__aeabi_ui2d>
    cb12:	cmp.w	sl, #0
    cb16:	it	eq
    cb18:	moveq	sl, r4
    cb1a:	cmp.w	r9, #9
    cb1e:	strd	r0, r1, [sp, #16]
    cb22:	ble.n	cb4c <_strtod_l+0x214>
    cb24:	ldr	r3, [pc, #292]	; (cc4c <_strtod_l+0x314>)
    cb26:	add.w	r3, r3, r9, lsl #3
    cb2a:	ldrd	r2, r3, [r3, #-72]	; 0x48
    cb2e:	bl	aea8 <__aeabi_dmul>
    cb32:	mov	r6, r0
    cb34:	mov	r0, r8
    cb36:	mov	r7, r1
    cb38:	bl	adbc <__aeabi_ui2d>
    cb3c:	mov	r2, r0
    cb3e:	mov	r3, r1
    cb40:	mov	r0, r6
    cb42:	mov	r1, r7
    cb44:	bl	ab44 <__adddf3>
    cb48:	strd	r0, r1, [sp, #16]
    cb4c:	cmp	r4, #15
    cb4e:	bgt.w	cc5c <_strtod_l+0x324>
    cb52:	ldr	r3, [sp, #44]	; 0x2c
    cb54:	cmp	r3, #0
    cb56:	beq.n	cba8 <_strtod_l+0x270>
    cb58:	ble.w	d594 <_strtod_l+0xc5c>
    cb5c:	ldr	r3, [sp, #44]	; 0x2c
    cb5e:	cmp	r3, #22
    cb60:	bgt.w	d460 <_strtod_l+0xb28>
    cb64:	ldr	r7, [pc, #228]	; (cc4c <_strtod_l+0x314>)
    cb66:	add.w	r7, r7, r3, lsl #3
    cb6a:	ldrd	r0, r1, [r7]
    cb6e:	ldrd	r2, r3, [sp, #16]
    cb72:	bl	aea8 <__aeabi_dmul>
    cb76:	mov	r8, r0
    cb78:	mov	r9, r1
    cb7a:	b.n	ca68 <_strtod_l+0x130>
    cb7c:	add	r0, sp, #108	; 0x6c
    cb7e:	ldr	r1, [pc, #208]	; (cc50 <_strtod_l+0x318>)
    cb80:	bl	11818 <__match>
    cb84:	cmp	r0, #0
    cb86:	beq.w	c9a4 <_strtod_l+0x6c>
    cb8a:	ldr	r3, [sp, #108]	; 0x6c
    cb8c:	ldr	r1, [pc, #196]	; (cc54 <_strtod_l+0x31c>)
    cb8e:	subs	r3, #1
    cb90:	add	r0, sp, #108	; 0x6c
    cb92:	str	r3, [sp, #108]	; 0x6c
    cb94:	bl	11818 <__match>
    cb98:	cbnz	r0, cba0 <_strtod_l+0x268>
    cb9a:	ldr	r3, [sp, #108]	; 0x6c
    cb9c:	adds	r3, #1
    cb9e:	str	r3, [sp, #108]	; 0x6c
    cba0:	ldr	r3, [pc, #180]	; (cc58 <_strtod_l+0x320>)
    cba2:	str	r3, [sp, #20]
    cba4:	movs	r3, #0
    cba6:	str	r3, [sp, #16]
    cba8:	ldrd	r8, r9, [sp, #16]
    cbac:	b.n	ca68 <_strtod_l+0x130>
    cbae:	cmp	r4, #0
    cbb0:	beq.w	cf48 <_strtod_l+0x610>
    cbb4:	ldr	r6, [sp, #108]	; 0x6c
    cbb6:	adds	r3, r6, #1
    cbb8:	str	r3, [sp, #108]	; 0x6c
    cbba:	ldrb	r3, [r6, #1]
    cbbc:	cmp	r3, #43	; 0x2b
    cbbe:	beq.w	d17c <_strtod_l+0x844>
    cbc2:	cmp	r3, #45	; 0x2d
    cbc4:	beq.w	cff2 <_strtod_l+0x6ba>
    cbc8:	mov.w	ip, #0
    cbcc:	sub.w	r2, r3, #48	; 0x30
    cbd0:	cmp	r2, #9
    cbd2:	bhi.w	d176 <_strtod_l+0x83e>
    cbd6:	cmp	r3, #48	; 0x30
    cbd8:	bne.n	cbe6 <_strtod_l+0x2ae>
    cbda:	ldr	r2, [sp, #108]	; 0x6c
    cbdc:	adds	r2, #1
    cbde:	str	r2, [sp, #108]	; 0x6c
    cbe0:	ldrb	r3, [r2, #0]
    cbe2:	cmp	r3, #48	; 0x30
    cbe4:	beq.n	cbdc <_strtod_l+0x2a4>
    cbe6:	sub.w	r2, r3, #49	; 0x31
    cbea:	cmp	r2, #8
    cbec:	bhi.w	ca50 <_strtod_l+0x118>
    cbf0:	ldr	r2, [sp, #108]	; 0x6c
    cbf2:	str	r2, [sp, #48]	; 0x30
    cbf4:	adds	r1, r2, #1
    cbf6:	subs	r3, #48	; 0x30
    cbf8:	str	r1, [sp, #108]	; 0x6c
    cbfa:	str	r3, [sp, #44]	; 0x2c
    cbfc:	ldrb	r3, [r2, #1]
    cbfe:	sub.w	lr, r3, #48	; 0x30
    cc02:	cmp.w	lr, #9
    cc06:	bhi.n	cc28 <_strtod_l+0x2f0>
    cc08:	ldr	r2, [sp, #44]	; 0x2c
    cc0a:	adds	r1, #1
    cc0c:	str	r1, [sp, #108]	; 0x6c
    cc0e:	add.w	r2, r2, r2, lsl #2
    cc12:	add.w	r2, r3, r2, lsl #1
    cc16:	ldrb	r3, [r1, #0]
    cc18:	sub.w	lr, r3, #48	; 0x30
    cc1c:	cmp.w	lr, #9
    cc20:	sub.w	r2, r2, #48	; 0x30
    cc24:	bls.n	cc0a <_strtod_l+0x2d2>
    cc26:	str	r2, [sp, #44]	; 0x2c
    cc28:	ldr	r2, [sp, #48]	; 0x30
    cc2a:	subs	r1, r1, r2
    cc2c:	cmp	r1, #8
    cc2e:	bgt.w	d44e <_strtod_l+0xb16>
    cc32:	ldr	r2, [sp, #44]	; 0x2c
    cc34:	movw	r1, #19999	; 0x4e1f
    cc38:	cmp	r2, r1
    cc3a:	it	ge
    cc3c:	movge	r2, r1
    cc3e:	cmp.w	ip, #0
    cc42:	beq.w	ca52 <_strtod_l+0x11a>
    cc46:	negs	r2, r2
    cc48:	b.n	ca52 <_strtod_l+0x11a>
    cc4a:	nop
    cc4c:	.word	0x00013a30
    cc50:	.word	0x0001373c
    cc54:	.word	0x00013740
    cc58:	.word	0x7ff00000
    cc5c:	ldr	r3, [sp, #44]	; 0x2c
    cc5e:	rsb	r9, r9, r4
    cc62:	add	r9, r3
    cc64:	cmp.w	r9, #0
    cc68:	ble.w	d37a <_strtod_l+0xa42>
    cc6c:	ands.w	r1, r9, #15
    cc70:	beq.n	cc88 <_strtod_l+0x350>
    cc72:	ldr	r3, [pc, #756]	; (cf68 <_strtod_l+0x630>)
    cc74:	add.w	r1, r3, r1, lsl #3
    cc78:	ldrd	r0, r1, [r1]
    cc7c:	ldrd	r2, r3, [sp, #16]
    cc80:	bl	aea8 <__aeabi_dmul>
    cc84:	strd	r0, r1, [sp, #16]
    cc88:	bics.w	r6, r9, #15
    cc8c:	bne.w	d0b0 <_strtod_l+0x778>
    cc90:	movs	r3, #0
    cc92:	str	r3, [sp, #40]	; 0x28
    cc94:	str	r5, [sp, #0]
    cc96:	mov	r3, r4
    cc98:	mov	r2, sl
    cc9a:	ldr	r1, [sp, #32]
    cc9c:	mov	r0, fp
    cc9e:	bl	11b40 <__s2b>
    cca2:	str	r0, [sp, #72]	; 0x48
    cca4:	cmp	r0, #0
    cca6:	beq.w	d2f6 <_strtod_l+0x9be>
    ccaa:	ldr	r2, [sp, #44]	; 0x2c
    ccac:	movs	r7, #0
    ccae:	cmp	r2, #0
    ccb0:	rsb	r3, r2, #0
    ccb4:	it	ge
    ccb6:	movge	r3, r7
    ccb8:	str	r3, [sp, #48]	; 0x30
    ccba:	bic.w	r3, r2, r2, asr #31
    ccbe:	str	r3, [sp, #44]	; 0x2c
    ccc0:	mov	sl, r7
    ccc2:	ldr	r4, [sp, #72]	; 0x48
    ccc4:	mov	r0, fp
    ccc6:	ldr	r1, [r4, #4]
    ccc8:	bl	11a60 <_Balloc>
    cccc:	mov	r6, r0
    ccce:	cmp	r0, #0
    ccd0:	beq.w	d188 <_strtod_l+0x850>
    ccd4:	ldr	r2, [r4, #16]
    ccd6:	vldr	d7, [sp, #16]
    ccda:	adds	r2, #2
    ccdc:	lsls	r2, r2, #2
    ccde:	add.w	r1, r4, #12
    cce2:	adds	r0, #12
    cce4:	vstr	d7, [sp, #32]
    cce8:	bl	887c <memcpy>
    ccec:	vldr	d0, [sp, #32]
    ccf0:	add	r2, sp, #120	; 0x78
    ccf2:	add	r1, sp, #116	; 0x74
    ccf4:	mov	r0, fp
    ccf6:	bl	12184 <__d2b>
    ccfa:	str	r0, [sp, #112]	; 0x70
    ccfc:	cmp	r0, #0
    ccfe:	beq.w	d18a <_strtod_l+0x852>
    cd02:	movs	r1, #1
    cd04:	mov	r0, fp
    cd06:	bl	11c74 <__i2b>
    cd0a:	mov	sl, r0
    cd0c:	cmp	r0, #0
    cd0e:	beq.w	d188 <_strtod_l+0x850>
    cd12:	ldr	r2, [sp, #116]	; 0x74
    cd14:	cmp	r2, #0
    cd16:	blt.w	cf80 <_strtod_l+0x648>
    cd1a:	ldr	r3, [sp, #48]	; 0x30
    cd1c:	ldr	r4, [sp, #44]	; 0x2c
    cd1e:	adds	r5, r3, r2
    cd20:	ldr	r0, [sp, #40]	; 0x28
    cd22:	ldr	r3, [sp, #120]	; 0x78
    cd24:	ldr	r1, [pc, #580]	; (cf6c <_strtod_l+0x634>)
    cd26:	subs	r2, r2, r0
    cd28:	add	r2, r3
    cd2a:	subs	r2, #1
    cd2c:	cmp	r2, r1
    cd2e:	rsb	r3, r3, #54	; 0x36
    cd32:	bge.w	cf12 <_strtod_l+0x5da>
    cd36:	subs	r1, r1, r2
    cd38:	cmp	r1, #31
    cd3a:	sub.w	r3, r3, r1
    cd3e:	bgt.w	cf8e <_strtod_l+0x656>
    cd42:	movs	r2, #1
    cd44:	lsls	r2, r1
    cd46:	str	r2, [sp, #56]	; 0x38
    cd48:	movs	r2, #0
    cd4a:	str	r2, [sp, #76]	; 0x4c
    cd4c:	add.w	r9, r5, r3
    cd50:	add	r4, r3
    cd52:	ldr	r3, [sp, #40]	; 0x28
    cd54:	cmp	r5, r9
    cd56:	mov	r2, r5
    cd58:	add	r4, r3
    cd5a:	it	ge
    cd5c:	movge	r2, r9
    cd5e:	cmp	r2, r4
    cd60:	it	ge
    cd62:	movge	r2, r4
    cd64:	cmp	r2, #0
    cd66:	ble.n	cd70 <_strtod_l+0x438>
    cd68:	rsb	r9, r2, r9
    cd6c:	subs	r4, r4, r2
    cd6e:	subs	r5, r5, r2
    cd70:	ldr	r3, [sp, #48]	; 0x30
    cd72:	cbz	r3, cda4 <_strtod_l+0x46c>
    cd74:	mov	r1, sl
    cd76:	mov	r2, r3
    cd78:	mov	r0, fp
    cd7a:	bl	11db8 <__pow5mult>
    cd7e:	mov	sl, r0
    cd80:	cmp	r0, #0
    cd82:	beq.w	d188 <_strtod_l+0x850>
    cd86:	mov	r1, r0
    cd88:	ldr	r2, [sp, #112]	; 0x70
    cd8a:	mov	r0, fp
    cd8c:	bl	11c88 <__multiply>
    cd90:	cmp	r0, #0
    cd92:	beq.w	d188 <_strtod_l+0x850>
    cd96:	str	r0, [sp, #52]	; 0x34
    cd98:	ldr	r1, [sp, #112]	; 0x70
    cd9a:	mov	r0, fp
    cd9c:	bl	11aac <_Bfree>
    cda0:	ldr	r2, [sp, #52]	; 0x34
    cda2:	str	r2, [sp, #112]	; 0x70
    cda4:	cmp.w	r9, #0
    cda8:	ble.n	cdbc <_strtod_l+0x484>
    cdaa:	mov	r2, r9
    cdac:	ldr	r1, [sp, #112]	; 0x70
    cdae:	mov	r0, fp
    cdb0:	bl	11e58 <__lshift>
    cdb4:	str	r0, [sp, #112]	; 0x70
    cdb6:	cmp	r0, #0
    cdb8:	beq.w	d18a <_strtod_l+0x852>
    cdbc:	ldr	r3, [sp, #44]	; 0x2c
    cdbe:	cbz	r3, cdd2 <_strtod_l+0x49a>
    cdc0:	mov	r1, r6
    cdc2:	ldr	r2, [sp, #44]	; 0x2c
    cdc4:	mov	r0, fp
    cdc6:	bl	11db8 <__pow5mult>
    cdca:	mov	r6, r0
    cdcc:	cmp	r0, #0
    cdce:	beq.w	d188 <_strtod_l+0x850>
    cdd2:	cmp	r4, #0
    cdd4:	ble.n	cde8 <_strtod_l+0x4b0>
    cdd6:	mov	r1, r6
    cdd8:	mov	r2, r4
    cdda:	mov	r0, fp
    cddc:	bl	11e58 <__lshift>
    cde0:	mov	r6, r0
    cde2:	cmp	r0, #0
    cde4:	beq.w	d188 <_strtod_l+0x850>
    cde8:	cmp	r5, #0
    cdea:	ble.n	cdfe <_strtod_l+0x4c6>
    cdec:	mov	r1, sl
    cdee:	mov	r2, r5
    cdf0:	mov	r0, fp
    cdf2:	bl	11e58 <__lshift>
    cdf6:	mov	sl, r0
    cdf8:	cmp	r0, #0
    cdfa:	beq.w	d188 <_strtod_l+0x850>
    cdfe:	mov	r2, r6
    ce00:	ldr	r1, [sp, #112]	; 0x70
    ce02:	mov	r0, fp
    ce04:	bl	11f4c <__mdiff>
    ce08:	mov	r7, r0
    ce0a:	cmp	r0, #0
    ce0c:	beq.w	d188 <_strtod_l+0x850>
    ce10:	movs	r3, #0
    ce12:	ldr	r2, [r0, #12]
    ce14:	str	r3, [r0, #12]
    ce16:	mov	r1, sl
    ce18:	str	r2, [sp, #52]	; 0x34
    ce1a:	bl	11f08 <__mcmp>
    ce1e:	cmp	r0, #0
    ce20:	blt.w	d63e <_strtod_l+0xd06>
    ce24:	beq.w	d5b8 <_strtod_l+0xc80>
    ce28:	mov	r1, sl
    ce2a:	mov	r0, r7
    ce2c:	bl	12240 <__ratio>
    ce30:	vmov	r4, r5, d0
    ce34:	movs	r2, #0
    ce36:	mov.w	r3, #1073741824	; 0x40000000
    ce3a:	vmov	r0, s0
    ce3e:	mov	r1, r5
    ce40:	bl	b3a0 <__aeabi_dcmple>
    ce44:	cmp	r0, #0
    ce46:	beq.n	cf1c <_strtod_l+0x5e4>
    ce48:	ldr	r3, [sp, #52]	; 0x34
    ce4a:	cmp	r3, #0
    ce4c:	beq.w	cf9e <_strtod_l+0x666>
    ce50:	vldr	d7, [pc, #260]	; cf58 <_strtod_l+0x620>
    ce54:	ldr	r3, [sp, #20]
    ce56:	ldr	r5, [pc, #280]	; (cf70 <_strtod_l+0x638>)
    ce58:	vstr	d7, [sp, #56]	; 0x38
    ce5c:	movs	r4, #0
    ce5e:	mov	r8, r3
    ce60:	ldr.w	r9, [pc, #276]	; cf78 <_strtod_l+0x640>
    ce64:	ldr	r3, [pc, #268]	; (cf74 <_strtod_l+0x63c>)
    ce66:	and.w	r9, r8, r9
    ce6a:	cmp	r9, r3
    ce6c:	beq.w	d29c <_strtod_l+0x964>
    ce70:	ldr	r3, [sp, #40]	; 0x28
    ce72:	cbz	r3, cec0 <_strtod_l+0x588>
    ce74:	cmp.w	r9, #111149056	; 0x6a00000
    ce78:	bhi.n	cec0 <_strtod_l+0x588>
    ce7a:	add	r3, pc, #228	; (adr r3, cf60 <_strtod_l+0x628>)
    ce7c:	ldrd	r2, r3, [r3]
    ce80:	ldrd	r0, r1, [sp, #56]	; 0x38
    ce84:	bl	b3a0 <__aeabi_dcmple>
    ce88:	cbz	r0, ceb8 <_strtod_l+0x580>
    ce8a:	ldrd	r0, r1, [sp, #56]	; 0x38
    ce8e:	bl	b458 <__aeabi_d2uiz>
    ce92:	cmp	r0, #0
    ce94:	beq.w	d518 <_strtod_l+0xbe0>
    ce98:	bl	adbc <__aeabi_ui2d>
    ce9c:	strd	r0, r1, [sp, #56]	; 0x38
    cea0:	ldr	r3, [sp, #52]	; 0x34
    cea2:	cmp	r3, #0
    cea4:	bne.w	d50e <_strtod_l+0xbd6>
    cea8:	ldrd	r1, r2, [sp, #56]	; 0x38
    ceac:	add.w	r3, r2, #2147483648	; 0x80000000
    ceb0:	str	r1, [sp, #80]	; 0x50
    ceb2:	str	r3, [sp, #84]	; 0x54
    ceb4:	ldrd	r4, r5, [sp, #80]	; 0x50
    ceb8:	add.w	r3, r5, #112197632	; 0x6b00000
    cebc:	rsb	r5, r9, r3
    cec0:	vldr	d0, [sp, #32]
    cec4:	bl	12060 <__ulp>
    cec8:	mov	r0, r4
    ceca:	vmov	r2, r3, d0
    cece:	mov	r1, r5
    ced0:	bl	aea8 <__aeabi_dmul>
    ced4:	ldrd	r2, r3, [sp, #32]
    ced8:	bl	ab44 <__adddf3>
    cedc:	strd	r0, r1, [sp, #16]
    cee0:	mov	r4, r1
    cee2:	ldr	r3, [sp, #40]	; 0x28
    cee4:	cbnz	r3, cef0 <_strtod_l+0x5b8>
    cee6:	ldr	r3, [pc, #144]	; (cf78 <_strtod_l+0x640>)
    cee8:	ands	r3, r4
    ceea:	cmp	r9, r3
    ceec:	beq.w	d30c <_strtod_l+0x9d4>
    cef0:	ldr	r1, [sp, #112]	; 0x70
    cef2:	mov	r0, fp
    cef4:	bl	11aac <_Bfree>
    cef8:	mov	r1, r6
    cefa:	mov	r0, fp
    cefc:	bl	11aac <_Bfree>
    cf00:	mov	r1, sl
    cf02:	mov	r0, fp
    cf04:	bl	11aac <_Bfree>
    cf08:	mov	r1, r7
    cf0a:	mov	r0, fp
    cf0c:	bl	11aac <_Bfree>
    cf10:	b.n	ccc2 <_strtod_l+0x38a>
    cf12:	movs	r2, #0
    cf14:	str	r2, [sp, #76]	; 0x4c
    cf16:	movs	r2, #1
    cf18:	str	r2, [sp, #56]	; 0x38
    cf1a:	b.n	cd4c <_strtod_l+0x414>
    cf1c:	ldr	r3, [pc, #92]	; (cf7c <_strtod_l+0x644>)
    cf1e:	mov	r0, r4
    cf20:	mov	r1, r5
    cf22:	movs	r2, #0
    cf24:	bl	aea8 <__aeabi_dmul>
    cf28:	ldr	r3, [sp, #52]	; 0x34
    cf2a:	strd	r0, r1, [sp, #56]	; 0x38
    cf2e:	cmp	r3, #0
    cf30:	bne.n	cfe8 <_strtod_l+0x6b0>
    cf32:	add.w	r3, r1, #2147483648	; 0x80000000
    cf36:	str	r0, [sp, #64]	; 0x40
    cf38:	str	r3, [sp, #68]	; 0x44
    cf3a:	ldr	r3, [sp, #20]
    cf3c:	ldrd	r4, r5, [sp, #64]	; 0x40
    cf40:	mov	r8, r3
    cf42:	b.n	ce60 <_strtod_l+0x528>
    cf44:	mov.w	r9, #1
    cf48:	cmp	r0, #0
    cf4a:	bne.n	cffe <_strtod_l+0x6c6>
    cf4c:	ldr	r3, [sp, #40]	; 0x28
    cf4e:	cmp	r3, #0
    cf50:	beq.w	c9a4 <_strtod_l+0x6c>
    cf54:	mov	r4, r0
    cf56:	b.n	cbb4 <_strtod_l+0x27c>
    cf58:	.word	0x00000000
    cf5c:	.word	0x3ff00000
    cf60:	.word	0xffc00000
    cf64:	.word	0x41dfffff
    cf68:	.word	0x00013a30
    cf6c:	.word	0xfffffc02
    cf70:	.word	0x3ff00000
    cf74:	.word	0x7fe00000
    cf78:	.word	0x7ff00000
    cf7c:	.word	0x3fe00000
    cf80:	ldr	r3, [sp, #44]	; 0x2c
    cf82:	ldr	r5, [sp, #48]	; 0x30
    cf84:	subs	r4, r3, r2
    cf86:	b.n	cd20 <_strtod_l+0x3e8>
    cf88:	mov.w	r9, #1
    cf8c:	b.n	ca44 <_strtod_l+0x10c>
    cf8e:	ldr	r1, [pc, #736]	; (d270 <_strtod_l+0x938>)
    cf90:	subs	r1, r1, r2
    cf92:	movs	r2, #1
    cf94:	lsl.w	r1, r2, r1
    cf98:	str	r1, [sp, #76]	; 0x4c
    cf9a:	str	r2, [sp, #56]	; 0x38
    cf9c:	b.n	cd4c <_strtod_l+0x414>
    cf9e:	ldrd	r1, r2, [sp, #16]
    cfa2:	cmp	r1, #0
    cfa4:	bne.w	d13a <_strtod_l+0x802>
    cfa8:	ubfx	r3, r2, #0, #20
    cfac:	mov	r8, r2
    cfae:	cmp	r3, #0
    cfb0:	bne.w	d146 <_strtod_l+0x80e>
    cfb4:	movs	r2, #0
    cfb6:	ldr	r3, [pc, #700]	; (d274 <_strtod_l+0x93c>)
    cfb8:	mov	r0, r4
    cfba:	mov	r1, r5
    cfbc:	bl	b38c <__aeabi_dcmplt>
    cfc0:	cmp	r0, #0
    cfc2:	bne.w	d6c2 <_strtod_l+0xd8a>
    cfc6:	movs	r2, #0
    cfc8:	ldr	r3, [pc, #684]	; (d278 <_strtod_l+0x940>)
    cfca:	mov	r0, r4
    cfcc:	mov	r1, r5
    cfce:	bl	aea8 <__aeabi_dmul>
    cfd2:	mov	r2, r1
    cfd4:	mov	r1, r0
    cfd6:	strd	r1, r2, [sp, #56]	; 0x38
    cfda:	add.w	r3, r2, #2147483648	; 0x80000000
    cfde:	str	r0, [sp, #96]	; 0x60
    cfe0:	str	r3, [sp, #100]	; 0x64
    cfe2:	ldrd	r4, r5, [sp, #96]	; 0x60
    cfe6:	b.n	ce60 <_strtod_l+0x528>
    cfe8:	vldr	d7, [sp, #56]	; 0x38
    cfec:	vstr	d7, [sp, #64]	; 0x40
    cff0:	b.n	cf3a <_strtod_l+0x602>
    cff2:	mov.w	ip, #1
    cff6:	adds	r3, r6, #2
    cff8:	str	r3, [sp, #108]	; 0x6c
    cffa:	ldrb	r3, [r6, #2]
    cffc:	b.n	cbcc <_strtod_l+0x294>
    cffe:	movs	r4, #0
    d000:	b.n	cbb4 <_strtod_l+0x27c>
    d002:	cmp.w	r9, #0
    d006:	bne.w	c9a4 <_strtod_l+0x6c>
    d00a:	subs	r3, #73	; 0x49
    d00c:	cmp	r3, #37	; 0x25
    d00e:	bhi.w	c9a4 <_strtod_l+0x6c>
    d012:	add	r2, pc, #4	; (adr r2, d018 <_strtod_l+0x6e0>)
    d014:	ldr.w	pc, [r2, r3, lsl #2]
    d018:	.word	0x0000cb7d
    d01c:	.word	0x0000c9a5
    d020:	.word	0x0000c9a5
    d024:	.word	0x0000c9a5
    d028:	.word	0x0000c9a5
    d02c:	.word	0x0000d155
    d030:	.word	0x0000c9a5
    d034:	.word	0x0000c9a5
    d038:	.word	0x0000c9a5
    d03c:	.word	0x0000c9a5
    d040:	.word	0x0000c9a5
    d044:	.word	0x0000c9a5
    d048:	.word	0x0000c9a5
    d04c:	.word	0x0000c9a5
    d050:	.word	0x0000c9a5
    d054:	.word	0x0000c9a5
    d058:	.word	0x0000c9a5
    d05c:	.word	0x0000c9a5
    d060:	.word	0x0000c9a5
    d064:	.word	0x0000c9a5
    d068:	.word	0x0000c9a5
    d06c:	.word	0x0000c9a5
    d070:	.word	0x0000c9a5
    d074:	.word	0x0000c9a5
    d078:	.word	0x0000c9a5
    d07c:	.word	0x0000c9a5
    d080:	.word	0x0000c9a5
    d084:	.word	0x0000c9a5
    d088:	.word	0x0000c9a5
    d08c:	.word	0x0000c9a5
    d090:	.word	0x0000c9a5
    d094:	.word	0x0000c9a5
    d098:	.word	0x0000cb7d
    d09c:	.word	0x0000c9a5
    d0a0:	.word	0x0000c9a5
    d0a4:	.word	0x0000c9a5
    d0a8:	.word	0x0000c9a5
    d0ac:	.word	0x0000d155
    d0b0:	cmp.w	r6, #308	; 0x134
    d0b4:	bgt.w	d2f6 <_strtod_l+0x9be>
    d0b8:	asrs	r6, r6, #4
    d0ba:	cmp	r6, #1
    d0bc:	ldr.w	r9, [pc, #472]	; d298 <_strtod_l+0x960>
    d0c0:	ble.w	d6f6 <_strtod_l+0xdbe>
    d0c4:	ldrd	r0, r1, [sp, #16]
    d0c8:	movs	r3, #0
    d0ca:	mov	r7, r9
    d0cc:	mov	r8, r3
    d0ce:	tst.w	r6, #1
    d0d2:	add.w	r8, r8, #1
    d0d6:	mov.w	r6, r6, asr #1
    d0da:	beq.n	d0e6 <_strtod_l+0x7ae>
    d0dc:	ldrd	r2, r3, [r7]
    d0e0:	bl	aea8 <__aeabi_dmul>
    d0e4:	movs	r3, #1
    d0e6:	cmp	r6, #1
    d0e8:	add.w	r7, r7, #8
    d0ec:	bne.n	d0ce <_strtod_l+0x796>
    d0ee:	cmp	r3, #0
    d0f0:	bne.w	d7ba <_strtod_l+0xe82>
    d0f4:	ldr	r3, [sp, #20]
    d0f6:	sub.w	r3, r3, #55574528	; 0x3500000
    d0fa:	str	r3, [sp, #20]
    d0fc:	add.w	r8, r9, r8, lsl #3
    d100:	ldrd	r2, r3, [sp, #16]
    d104:	ldrd	r0, r1, [r8]
    d108:	bl	aea8 <__aeabi_dmul>
    d10c:	bic.w	r3, r1, #2147483648	; 0x80000000
    d110:	lsrs	r3, r3, #20
    d112:	ldr	r2, [pc, #360]	; (d27c <_strtod_l+0x944>)
    d114:	lsls	r3, r3, #20
    d116:	cmp	r3, r2
    d118:	strd	r0, r1, [sp, #16]
    d11c:	bhi.w	d2f6 <_strtod_l+0x9be>
    d120:	sub.w	r2, r2, #1048576	; 0x100000
    d124:	cmp	r3, r2
    d126:	bls.w	d6b8 <_strtod_l+0xd80>
    d12a:	ldr	r3, [pc, #340]	; (d280 <_strtod_l+0x948>)
    d12c:	str	r3, [sp, #20]
    d12e:	movs	r3, #0
    d130:	str	r3, [sp, #40]	; 0x28
    d132:	mov.w	r3, #4294967295
    d136:	str	r3, [sp, #16]
    d138:	b.n	cc94 <_strtod_l+0x35c>
    d13a:	ldrd	r1, r2, [sp, #16]
    d13e:	cmp	r1, #1
    d140:	beq.w	d522 <_strtod_l+0xbea>
    d144:	mov	r8, r2
    d146:	vldr	d7, [pc, #288]	; d268 <_strtod_l+0x930>
    d14a:	movs	r4, #0
    d14c:	ldr	r5, [pc, #308]	; (d284 <_strtod_l+0x94c>)
    d14e:	vstr	d7, [sp, #56]	; 0x38
    d152:	b.n	ce60 <_strtod_l+0x528>
    d154:	add	r0, sp, #108	; 0x6c
    d156:	ldr	r1, [pc, #304]	; (d288 <_strtod_l+0x950>)
    d158:	bl	11818 <__match>
    d15c:	cmp	r0, #0
    d15e:	beq.w	c9a4 <_strtod_l+0x6c>
    d162:	ldr	r3, [sp, #108]	; 0x6c
    d164:	ldrb	r3, [r3, #0]
    d166:	cmp	r3, #40	; 0x28
    d168:	beq.w	d770 <_strtod_l+0xe38>
    d16c:	ldr	r3, [pc, #284]	; (d28c <_strtod_l+0x954>)
    d16e:	str	r3, [sp, #20]
    d170:	movs	r3, #0
    d172:	str	r3, [sp, #16]
    d174:	b.n	cba8 <_strtod_l+0x270>
    d176:	str	r6, [sp, #108]	; 0x6c
    d178:	movs	r2, #0
    d17a:	b.n	ca52 <_strtod_l+0x11a>
    d17c:	mov.w	ip, #0
    d180:	b.n	cff6 <_strtod_l+0x6be>
    d182:	adds	r3, #1
    d184:	bne.w	d756 <_strtod_l+0xe1e>
    d188:	ldr	r0, [sp, #112]	; 0x70
    d18a:	ldr	r3, [pc, #260]	; (d290 <_strtod_l+0x958>)
    d18c:	str	r3, [sp, #20]
    d18e:	movs	r2, #0
    d190:	str	r2, [sp, #16]
    d192:	ldrd	r8, r9, [sp, #16]
    d196:	movs	r3, #34	; 0x22
    d198:	str.w	r3, [fp]
    d19c:	mov	r1, r0
    d19e:	mov	r0, fp
    d1a0:	bl	11aac <_Bfree>
    d1a4:	mov	r1, r6
    d1a6:	mov	r0, fp
    d1a8:	bl	11aac <_Bfree>
    d1ac:	mov	r1, sl
    d1ae:	mov	r0, fp
    d1b0:	bl	11aac <_Bfree>
    d1b4:	ldr	r1, [sp, #72]	; 0x48
    d1b6:	mov	r0, fp
    d1b8:	bl	11aac <_Bfree>
    d1bc:	mov	r1, r7
    d1be:	mov	r0, fp
    d1c0:	bl	11aac <_Bfree>
    d1c4:	b.n	ca68 <_strtod_l+0x130>
    d1c6:	ldr	r2, [sp, #28]
    d1c8:	str	r5, [sp, #8]
    d1ca:	add	r3, sp, #112	; 0x70
    d1cc:	str	r2, [sp, #4]
    d1ce:	str	r3, [sp, #0]
    d1d0:	ldr	r2, [pc, #192]	; (d294 <_strtod_l+0x95c>)
    d1d2:	add	r3, sp, #116	; 0x74
    d1d4:	add	r1, sp, #108	; 0x6c
    d1d6:	mov	r0, fp
    d1d8:	bl	11308 <__gethex>
    d1dc:	ands.w	r6, r0, #7
    d1e0:	mov	r5, r0
    d1e2:	beq.w	ca60 <_strtod_l+0x128>
    d1e6:	cmp	r6, #6
    d1e8:	bne.w	d498 <_strtod_l+0xb60>
    d1ec:	adds	r4, #1
    d1ee:	movs	r3, #0
    d1f0:	str	r4, [sp, #108]	; 0x6c
    d1f2:	mov.w	r8, #0
    d1f6:	mov.w	r9, #0
    d1fa:	str	r3, [sp, #28]
    d1fc:	b.n	ca68 <_strtod_l+0x130>
    d1fe:	ldr.w	r1, [sl]
    d202:	mov	r0, r4
    d204:	mov	r2, r9
    d206:	bl	c85c <strncmp>
    d20a:	cbz	r0, d220 <_strtod_l+0x8e8>
    d20c:	mov.w	sl, #0
    d210:	mov	r3, r7
    d212:	mov	r8, sl
    d214:	mov	r5, sl
    d216:	mov	r0, sl
    d218:	mov	r7, sl
    d21a:	mov	r4, sl
    d21c:	mov	r9, sl
    d21e:	b.n	ca44 <_strtod_l+0x10c>
    d220:	ldr	r3, [sp, #108]	; 0x6c
    d222:	add.w	r2, r3, r9
    d226:	str	r2, [sp, #108]	; 0x6c
    d228:	ldrb.w	r3, [r3, r9]
    d22c:	cmp	r3, #48	; 0x30
    d22e:	bne.n	d23e <_strtod_l+0x906>
    d230:	adds	r2, #1
    d232:	str	r2, [sp, #108]	; 0x6c
    d234:	ldrb	r3, [r2, #0]
    d236:	cmp	r3, #48	; 0x30
    d238:	add.w	r0, r0, #1
    d23c:	beq.n	d230 <_strtod_l+0x8f8>
    d23e:	sub.w	r2, r3, #49	; 0x31
    d242:	cmp	r2, #8
    d244:	bls.w	d540 <_strtod_l+0xc08>
    d248:	mov.w	sl, #0
    d24c:	cmp	r3, #101	; 0x65
    d24e:	mov	r8, sl
    d250:	mov	r5, sl
    d252:	mov	r7, sl
    d254:	beq.w	cf44 <_strtod_l+0x60c>
    d258:	mov	r4, sl
    d25a:	mov.w	r9, #1
    d25e:	b.w	ca4a <_strtod_l+0x112>
    d262:	nop
    d264:	nop.w
    d268:	.word	0x00000000
    d26c:	.word	0x3ff00000
    d270:	.word	0xfffffbe2
    d274:	.word	0x3ff00000
    d278:	.word	0x3fe00000
    d27c:	.word	0x7ca00000
    d280:	.word	0x7fefffff
    d284:	.word	0xbff00000
    d288:	.word	0x00013748
    d28c:	.word	0xfff80000
    d290:	.word	0x7ff00000
    d294:	.word	0x00013728
    d298:	.word	0x00013af8
    d29c:	sub.w	r3, r8, #55574528	; 0x3500000
    d2a0:	str	r3, [sp, #20]
    d2a2:	vldr	d7, [sp, #16]
    d2a6:	vmov.f32	s0, s14
    d2aa:	vmov.f32	s1, s15
    d2ae:	bl	12060 <__ulp>
    d2b2:	mov	r0, r4
    d2b4:	vmov	r2, r3, d0
    d2b8:	mov	r1, r5
    d2ba:	bl	aea8 <__aeabi_dmul>
    d2be:	ldrd	r2, r3, [sp, #16]
    d2c2:	bl	ab44 <__adddf3>
    d2c6:	bic.w	r3, r1, #2147483648	; 0x80000000
    d2ca:	strd	r0, r1, [sp, #16]
    d2ce:	lsrs	r3, r3, #20
    d2d0:	ldr	r2, [pc, #684]	; (d580 <_strtod_l+0xc48>)
    d2d2:	ldrd	r0, r1, [sp, #32]
    d2d6:	lsls	r3, r3, #20
    d2d8:	cmp	r3, r2
    d2da:	strd	r0, r1, [sp, #88]	; 0x58
    d2de:	bls.w	d456 <_strtod_l+0xb1e>
    d2e2:	ldr	r3, [pc, #672]	; (d584 <_strtod_l+0xc4c>)
    d2e4:	cmp	r1, r3
    d2e6:	beq.w	d6ae <_strtod_l+0xd76>
    d2ea:	ldr	r3, [pc, #664]	; (d584 <_strtod_l+0xc4c>)
    d2ec:	str	r3, [sp, #20]
    d2ee:	mov.w	r3, #4294967295
    d2f2:	str	r3, [sp, #16]
    d2f4:	b.n	cef0 <_strtod_l+0x5b8>
    d2f6:	ldr	r3, [pc, #656]	; (d588 <_strtod_l+0xc50>)
    d2f8:	str	r3, [sp, #20]
    d2fa:	movs	r2, #0
    d2fc:	movs	r3, #34	; 0x22
    d2fe:	str	r2, [sp, #16]
    d300:	ldrd	r8, r9, [sp, #16]
    d304:	str.w	r3, [fp]
    d308:	b.w	ca68 <_strtod_l+0x130>
    d30c:	ldrd	r8, r9, [sp, #56]	; 0x38
    d310:	mov	r1, r9
    d312:	mov	r0, r8
    d314:	bl	b408 <__aeabi_d2iz>
    d318:	bl	addc <__aeabi_i2d>
    d31c:	mov	r3, r1
    d31e:	mov	r2, r0
    d320:	mov	r1, r9
    d322:	mov	r0, r8
    d324:	bl	ab40 <__aeabi_dsub>
    d328:	ldr	r3, [sp, #52]	; 0x34
    d32a:	mov	r8, r0
    d32c:	mov	r9, r1
    d32e:	cbnz	r3, d352 <_strtod_l+0xa1a>
    d330:	ldr	r3, [sp, #16]
    d332:	cbnz	r3, d352 <_strtod_l+0xa1a>
    d334:	ubfx	r4, r4, #0, #20
    d338:	cbnz	r4, d352 <_strtod_l+0xa1a>
    d33a:	add	r3, pc, #548	; (adr r3, d560 <_strtod_l+0xc28>)
    d33c:	ldrd	r2, r3, [r3]
    d340:	bl	b38c <__aeabi_dcmplt>
    d344:	cmp	r0, #0
    d346:	beq.w	cef0 <_strtod_l+0x5b8>
    d34a:	ldrd	r8, r9, [sp, #16]
    d34e:	ldr	r0, [sp, #112]	; 0x70
    d350:	b.n	d19c <_strtod_l+0x864>
    d352:	add	r3, pc, #532	; (adr r3, d568 <_strtod_l+0xc30>)
    d354:	ldrd	r2, r3, [r3]
    d358:	mov	r0, r8
    d35a:	mov	r1, r9
    d35c:	bl	b38c <__aeabi_dcmplt>
    d360:	cmp	r0, #0
    d362:	bne.n	d34a <_strtod_l+0xa12>
    d364:	mov	r0, r8
    d366:	mov	r1, r9
    d368:	add	r3, pc, #516	; (adr r3, d570 <_strtod_l+0xc38>)
    d36a:	ldrd	r2, r3, [r3]
    d36e:	bl	b3c8 <__aeabi_dcmpgt>
    d372:	cmp	r0, #0
    d374:	beq.w	cef0 <_strtod_l+0x5b8>
    d378:	b.n	d34a <_strtod_l+0xa12>
    d37a:	beq.w	cc90 <_strtod_l+0x358>
    d37e:	rsb	r6, r9, #0
    d382:	ands.w	r2, r6, #15
    d386:	beq.n	d39e <_strtod_l+0xa66>
    d388:	ldr	r3, [pc, #512]	; (d58c <_strtod_l+0xc54>)
    d38a:	add.w	r3, r3, r2, lsl #3
    d38e:	ldrd	r0, r1, [sp, #16]
    d392:	ldrd	r2, r3, [r3]
    d396:	bl	b0fc <__aeabi_ddiv>
    d39a:	strd	r0, r1, [sp, #16]
    d39e:	asrs	r6, r6, #4
    d3a0:	beq.w	cc90 <_strtod_l+0x358>
    d3a4:	cmp	r6, #31
    d3a6:	bgt.n	d41a <_strtod_l+0xae2>
    d3a8:	ands.w	r3, r6, #16
    d3ac:	beq.w	d720 <_strtod_l+0xde8>
    d3b0:	movs	r3, #106	; 0x6a
    d3b2:	cmp	r6, #0
    d3b4:	str	r3, [sp, #40]	; 0x28
    d3b6:	ble.n	d3e0 <_strtod_l+0xaa8>
    d3b8:	ldrd	r0, r1, [sp, #16]
    d3bc:	ldr	r7, [pc, #464]	; (d590 <_strtod_l+0xc58>)
    d3be:	movs	r3, #0
    d3c0:	lsls	r2, r6, #31
    d3c2:	bpl.n	d3ce <_strtod_l+0xa96>
    d3c4:	ldrd	r2, r3, [r7]
    d3c8:	bl	aea8 <__aeabi_dmul>
    d3cc:	movs	r3, #1
    d3ce:	asrs	r6, r6, #1
    d3d0:	add.w	r7, r7, #8
    d3d4:	bne.n	d3c0 <_strtod_l+0xa88>
    d3d6:	cmp	r3, #0
    d3d8:	bne.w	d7c0 <_strtod_l+0xe88>
    d3dc:	ldr	r3, [sp, #40]	; 0x28
    d3de:	cbz	r3, d408 <_strtod_l+0xad0>
    d3e0:	ldrd	r1, r2, [sp, #16]
    d3e4:	ubfx	r3, r2, #20, #11
    d3e8:	rsb	r3, r3, #107	; 0x6b
    d3ec:	cmp	r3, #0
    d3ee:	mov	r1, r2
    d3f0:	ble.n	d408 <_strtod_l+0xad0>
    d3f2:	cmp	r3, #31
    d3f4:	ble.w	d7aa <_strtod_l+0xe72>
    d3f8:	movs	r2, #0
    d3fa:	cmp	r3, #52	; 0x34
    d3fc:	str	r2, [sp, #16]
    d3fe:	ble.w	d7c6 <_strtod_l+0xe8e>
    d402:	mov.w	r3, #57671680	; 0x3700000
    d406:	str	r3, [sp, #20]
    d408:	movs	r2, #0
    d40a:	movs	r3, #0
    d40c:	ldrd	r0, r1, [sp, #16]
    d410:	bl	b378 <__aeabi_dcmpeq>
    d414:	cmp	r0, #0
    d416:	beq.w	cc94 <_strtod_l+0x35c>
    d41a:	movs	r3, #34	; 0x22
    d41c:	str.w	r3, [fp]
    d420:	mov.w	r8, #0
    d424:	mov.w	r9, #0
    d428:	b.w	ca68 <_strtod_l+0x130>
    d42c:	ldr	r1, [sp, #108]	; 0x6c
    d42e:	adds	r4, #1
    d430:	cmp	r0, #8
    d432:	ble.w	d552 <_strtod_l+0xc1a>
    d436:	cmp	r4, #16
    d438:	itt	le
    d43a:	addle.w	r8, r8, r8, lsl #2
    d43e:	addle.w	r8, r2, r8, lsl #1
    d442:	movs	r0, #0
    d444:	adds	r3, r1, #1
    d446:	str	r3, [sp, #108]	; 0x6c
    d448:	ldrb	r3, [r1, #1]
    d44a:	b.w	ca8c <_strtod_l+0x154>
    d44e:	movw	r2, #19999	; 0x4e1f
    d452:	b.w	cc3e <_strtod_l+0x306>
    d456:	ldr	r3, [sp, #20]
    d458:	add.w	r4, r3, #55574528	; 0x3500000
    d45c:	str	r4, [sp, #20]
    d45e:	b.n	cee2 <_strtod_l+0x5aa>
    d460:	ldr	r6, [sp, #44]	; 0x2c
    d462:	rsb	r3, r4, #37	; 0x25
    d466:	cmp	r6, r3
    d468:	bgt.w	cc5c <_strtod_l+0x324>
    d46c:	ldr	r5, [pc, #284]	; (d58c <_strtod_l+0xc54>)
    d46e:	rsb	r4, r4, #15
    d472:	add.w	r1, r5, r4, lsl #3
    d476:	subs	r4, r6, r4
    d478:	ldrd	r2, r3, [sp, #16]
    d47c:	ldrd	r0, r1, [r1]
    d480:	add.w	r5, r5, r4, lsl #3
    d484:	bl	aea8 <__aeabi_dmul>
    d488:	ldrd	r2, r3, [r5]
    d48c:	bl	aea8 <__aeabi_dmul>
    d490:	mov	r8, r0
    d492:	mov	r9, r1
    d494:	b.w	ca68 <_strtod_l+0x130>
    d498:	ldr	r2, [sp, #112]	; 0x70
    d49a:	cbz	r2, d4ac <_strtod_l+0xb74>
    d49c:	movs	r1, #53	; 0x35
    d49e:	add	r0, sp, #120	; 0x78
    d4a0:	bl	122a0 <__copybits>
    d4a4:	mov	r0, fp
    d4a6:	ldr	r1, [sp, #112]	; 0x70
    d4a8:	bl	11aac <_Bfree>
    d4ac:	cmp	r6, #6
    d4ae:	bhi.n	d4c8 <_strtod_l+0xb90>
    d4b0:	tbb	[pc, r6]
    d4b4:	.word	0x1318211d
    d4b8:	.short	0x2104
    d4ba:	.byte	0x1d
    d4bb:	.byte	0x00
    d4bc:	mvn.w	r3, #2147483648	; 0x80000000
    d4c0:	str	r3, [sp, #20]
    d4c2:	mov.w	r3, #4294967295
    d4c6:	str	r3, [sp, #16]
    d4c8:	lsls	r1, r5, #28
    d4ca:	bpl.w	cba8 <_strtod_l+0x270>
    d4ce:	ldr	r3, [sp, #20]
    d4d0:	orr.w	r3, r3, #2147483648	; 0x80000000
    d4d4:	str	r3, [sp, #20]
    d4d6:	b.w	cba8 <_strtod_l+0x270>
    d4da:	ldr	r3, [pc, #172]	; (d588 <_strtod_l+0xc50>)
    d4dc:	str	r3, [sp, #20]
    d4de:	movs	r3, #0
    d4e0:	str	r3, [sp, #16]
    d4e2:	b.n	d4c8 <_strtod_l+0xb90>
    d4e4:	ldr	r3, [sp, #120]	; 0x78
    d4e6:	str	r3, [sp, #16]
    d4e8:	ldr	r3, [sp, #124]	; 0x7c
    d4ea:	str	r3, [sp, #20]
    d4ec:	b.n	d4c8 <_strtod_l+0xb90>
    d4ee:	movs	r3, #0
    d4f0:	str	r3, [sp, #20]
    d4f2:	str	r3, [sp, #16]
    d4f4:	b.n	d4c8 <_strtod_l+0xb90>
    d4f6:	ldr	r2, [sp, #116]	; 0x74
    d4f8:	ldr	r3, [sp, #124]	; 0x7c
    d4fa:	ldr	r1, [sp, #120]	; 0x78
    d4fc:	str	r1, [sp, #16]
    d4fe:	addw	r2, r2, #1075	; 0x433
    d502:	bic.w	r3, r3, #1048576	; 0x100000
    d506:	orr.w	r3, r3, r2, lsl #20
    d50a:	str	r3, [sp, #20]
    d50c:	b.n	d4c8 <_strtod_l+0xb90>
    d50e:	vldr	d7, [sp, #56]	; 0x38
    d512:	vstr	d7, [sp, #80]	; 0x50
    d516:	b.n	ceb4 <_strtod_l+0x57c>
    d518:	vldr	d7, [pc, #92]	; d578 <_strtod_l+0xc40>
    d51c:	vstr	d7, [sp, #56]	; 0x38
    d520:	b.n	cea0 <_strtod_l+0x568>
    d522:	ldrd	r1, r2, [sp, #16]
    d526:	mov	r8, r2
    d528:	cmp	r2, #0
    d52a:	bne.w	d146 <_strtod_l+0x80e>
    d52e:	movs	r3, #34	; 0x22
    d530:	str.w	r3, [fp]
    d534:	ldr	r0, [sp, #112]	; 0x70
    d536:	mov.w	r8, #0
    d53a:	mov.w	r9, #0
    d53e:	b.n	d19c <_strtod_l+0x864>
    d540:	ldr	r2, [sp, #108]	; 0x6c
    d542:	str	r2, [sp, #32]
    d544:	movs	r5, #0
    d546:	subs	r3, #48	; 0x30
    d548:	adds	r7, r0, #1
    d54a:	mov	r1, r2
    d54c:	mov	sl, r5
    d54e:	mov	r8, r5
    d550:	movs	r4, #1
    d552:	add.w	r5, r5, r5, lsl #2
    d556:	add.w	r5, r3, r5, lsl #1
    d55a:	movs	r0, #0
    d55c:	b.n	d444 <_strtod_l+0xb0c>
    d55e:	nop
    d560:	.word	0x94a03595
    d564:	.word	0x3fcfffff
    d568:	.word	0x94a03595
    d56c:	.word	0x3fdfffff
    d570:	.word	0x35afe535
    d574:	.word	0x3fe00000
    d578:	.word	0x00000000
    d57c:	.word	0x3ff00000
    d580:	.word	0x7c9fffff
    d584:	.word	0x7fefffff
    d588:	.word	0x7ff00000
    d58c:	.word	0x00013a30
    d590:	.word	0x00013760
    d594:	ldr	r1, [sp, #44]	; 0x2c
    d596:	cmn.w	r1, #22
    d59a:	blt.w	cc5c <_strtod_l+0x324>
    d59e:	ldr	r2, [pc, #600]	; (d7f8 <_strtod_l+0xec0>)
    d5a0:	sub.w	r2, r2, r1, lsl #3
    d5a4:	ldrd	r2, r3, [r2]
    d5a8:	ldrd	r0, r1, [sp, #16]
    d5ac:	bl	b0fc <__aeabi_ddiv>
    d5b0:	mov	r8, r0
    d5b2:	mov	r9, r1
    d5b4:	b.w	ca68 <_strtod_l+0x130>
    d5b8:	ldr	r3, [sp, #52]	; 0x34
    d5ba:	ldrd	r8, r9, [sp, #32]
    d5be:	cmp	r3, #0
    d5c0:	beq.w	d6d4 <_strtod_l+0xd9c>
    d5c4:	ldrd	r4, r5, [sp, #16]
    d5c8:	ldr	r3, [pc, #560]	; (d7fc <_strtod_l+0xec4>)
    d5ca:	ubfx	r1, r5, #0, #20
    d5ce:	cmp	r1, r3
    d5d0:	mov	r2, r5
    d5d2:	beq.w	d72a <_strtod_l+0xdf2>
    d5d6:	ldr	r3, [sp, #76]	; 0x4c
    d5d8:	cmp	r3, #0
    d5da:	beq.w	d6ec <_strtod_l+0xdb4>
    d5de:	ldr	r2, [sp, #20]
    d5e0:	tst	r3, r2
    d5e2:	beq.n	d606 <_strtod_l+0xcce>
    d5e4:	ldr	r3, [sp, #52]	; 0x34
    d5e6:	ldr	r2, [sp, #40]	; 0x28
    d5e8:	ldrd	r0, r1, [sp, #16]
    d5ec:	cmp	r3, #0
    d5ee:	beq.w	d6fc <_strtod_l+0xdc4>
    d5f2:	bl	c8fc <sulp>
    d5f6:	mov	r2, r0
    d5f8:	mov	r3, r1
    d5fa:	mov	r0, r8
    d5fc:	mov	r1, r9
    d5fe:	bl	ab44 <__adddf3>
    d602:	mov	r8, r0
    d604:	mov	r9, r1
    d606:	ldr	r3, [sp, #40]	; 0x28
    d608:	cbz	r3, d63a <_strtod_l+0xd02>
    d60a:	ldr	r3, [pc, #500]	; (d800 <_strtod_l+0xec8>)
    d60c:	str	r3, [sp, #92]	; 0x5c
    d60e:	movs	r3, #0
    d610:	str	r3, [sp, #88]	; 0x58
    d612:	ldrd	r2, r3, [sp, #88]	; 0x58
    d616:	mov	r0, r8
    d618:	mov	r1, r9
    d61a:	bl	aea8 <__aeabi_dmul>
    d61e:	mov	r3, r0
    d620:	mov	r4, r1
    d622:	mov	r8, r0
    d624:	mov	r9, r1
    d626:	strd	r3, r4, [sp, #16]
    d62a:	cbnz	r1, d63a <_strtod_l+0xd02>
    d62c:	ldr	r3, [sp, #16]
    d62e:	cbnz	r3, d63a <_strtod_l+0xd02>
    d630:	movs	r3, #34	; 0x22
    d632:	ldr	r0, [sp, #112]	; 0x70
    d634:	str.w	r3, [fp]
    d638:	b.n	d19c <_strtod_l+0x864>
    d63a:	ldr	r0, [sp, #112]	; 0x70
    d63c:	b.n	d19c <_strtod_l+0x864>
    d63e:	ldr	r3, [sp, #52]	; 0x34
    d640:	ldrd	r8, r9, [sp, #32]
    d644:	cmp	r3, #0
    d646:	bne.n	d606 <_strtod_l+0xcce>
    d648:	ldrd	r1, r2, [sp, #16]
    d64c:	cmp	r1, #0
    d64e:	bne.n	d606 <_strtod_l+0xcce>
    d650:	ubfx	r3, r2, #0, #20
    d654:	mov	r4, r2
    d656:	cmp	r3, #0
    d658:	bne.n	d606 <_strtod_l+0xcce>
    d65a:	bic.w	r3, r2, #2147483648	; 0x80000000
    d65e:	lsrs	r3, r3, #20
    d660:	lsls	r3, r3, #20
    d662:	cmp.w	r3, #112197632	; 0x6b00000
    d666:	bls.n	d606 <_strtod_l+0xcce>
    d668:	ldr	r3, [r7, #20]
    d66a:	cbnz	r3, d672 <_strtod_l+0xd3a>
    d66c:	ldr	r3, [r7, #16]
    d66e:	cmp	r3, #1
    d670:	ble.n	d606 <_strtod_l+0xcce>
    d672:	mov	r1, r7
    d674:	movs	r2, #1
    d676:	mov	r0, fp
    d678:	bl	11e58 <__lshift>
    d67c:	mov	r1, sl
    d67e:	mov	r7, r0
    d680:	bl	11f08 <__mcmp>
    d684:	cmp	r0, #0
    d686:	ble.n	d606 <_strtod_l+0xcce>
    d688:	ldr	r3, [sp, #40]	; 0x28
    d68a:	cmp	r3, #0
    d68c:	bne.w	d794 <_strtod_l+0xe5c>
    d690:	ldr	r3, [pc, #368]	; (d804 <_strtod_l+0xecc>)
    d692:	ands	r3, r4
    d694:	sub.w	r3, r3, #1048576	; 0x100000
    d698:	mvn.w	r3, r3, lsr #20
    d69c:	mvn.w	r3, r3, lsl #20
    d6a0:	str	r3, [sp, #20]
    d6a2:	mov.w	r3, #4294967295
    d6a6:	str	r3, [sp, #16]
    d6a8:	ldrd	r8, r9, [sp, #16]
    d6ac:	b.n	d606 <_strtod_l+0xcce>
    d6ae:	ldr	r3, [sp, #88]	; 0x58
    d6b0:	adds	r3, #1
    d6b2:	bne.w	d2ea <_strtod_l+0x9b2>
    d6b6:	b.n	d188 <_strtod_l+0x850>
    d6b8:	add.w	r3, r1, #55574528	; 0x3500000
    d6bc:	str	r3, [sp, #20]
    d6be:	b.w	cc90 <_strtod_l+0x358>
    d6c2:	vldr	d7, [pc, #292]	; d7e8 <_strtod_l+0xeb0>
    d6c6:	vstr	d7, [sp, #96]	; 0x60
    d6ca:	vldr	d7, [pc, #292]	; d7f0 <_strtod_l+0xeb8>
    d6ce:	vstr	d7, [sp, #56]	; 0x38
    d6d2:	b.n	cfe2 <_strtod_l+0x6aa>
    d6d4:	ldrd	r1, r2, [sp, #16]
    d6d8:	ubfx	r3, r2, #0, #20
    d6dc:	mov	r4, r2
    d6de:	cmp	r3, #0
    d6e0:	bne.w	d5d6 <_strtod_l+0xc9e>
    d6e4:	cmp	r1, #0
    d6e6:	bne.w	d5d6 <_strtod_l+0xc9e>
    d6ea:	b.n	d688 <_strtod_l+0xd50>
    d6ec:	ldr	r3, [sp, #56]	; 0x38
    d6ee:	ldr	r2, [sp, #16]
    d6f0:	tst	r3, r2
    d6f2:	beq.n	d606 <_strtod_l+0xcce>
    d6f4:	b.n	d5e4 <_strtod_l+0xcac>
    d6f6:	mov.w	r8, #0
    d6fa:	b.n	d0f4 <_strtod_l+0x7bc>
    d6fc:	bl	c8fc <sulp>
    d700:	mov	r2, r0
    d702:	mov	r3, r1
    d704:	mov	r0, r8
    d706:	mov	r1, r9
    d708:	bl	ab40 <__aeabi_dsub>
    d70c:	movs	r2, #0
    d70e:	movs	r3, #0
    d710:	mov	r8, r0
    d712:	mov	r9, r1
    d714:	bl	b378 <__aeabi_dcmpeq>
    d718:	cmp	r0, #0
    d71a:	bne.w	d52e <_strtod_l+0xbf6>
    d71e:	b.n	d606 <_strtod_l+0xcce>
    d720:	cmp	r6, #0
    d722:	str	r3, [sp, #40]	; 0x28
    d724:	bgt.w	d3b8 <_strtod_l+0xa80>
    d728:	b.n	d408 <_strtod_l+0xad0>
    d72a:	ldr	r3, [sp, #40]	; 0x28
    d72c:	ldr	r1, [sp, #16]
    d72e:	cbz	r3, d76a <_strtod_l+0xe32>
    d730:	ldr	r3, [pc, #208]	; (d804 <_strtod_l+0xecc>)
    d732:	ands	r3, r5
    d734:	cmp.w	r3, #111149056	; 0x6a00000
    d738:	bhi.n	d76a <_strtod_l+0xe32>
    d73a:	lsrs	r3, r3, #20
    d73c:	rsb	r3, r3, #107	; 0x6b
    d740:	mov.w	r0, #4294967295
    d744:	lsl.w	r3, r0, r3
    d748:	cmp	r3, r1
    d74a:	bne.w	d5d6 <_strtod_l+0xc9e>
    d74e:	ldr	r1, [pc, #184]	; (d808 <_strtod_l+0xed0>)
    d750:	cmp	r2, r1
    d752:	beq.w	d182 <_strtod_l+0x84a>
    d756:	ldr	r3, [pc, #172]	; (d804 <_strtod_l+0xecc>)
    d758:	ands	r3, r2
    d75a:	add.w	r3, r3, #1048576	; 0x100000
    d75e:	str	r3, [sp, #20]
    d760:	movs	r3, #0
    d762:	str	r3, [sp, #16]
    d764:	ldrd	r8, r9, [sp, #16]
    d768:	b.n	d606 <_strtod_l+0xcce>
    d76a:	mov.w	r3, #4294967295
    d76e:	b.n	d748 <_strtod_l+0xe10>
    d770:	add	r0, sp, #108	; 0x6c
    d772:	add	r2, sp, #120	; 0x78
    d774:	ldr	r1, [pc, #148]	; (d80c <_strtod_l+0xed4>)
    d776:	bl	11848 <__hexnan>
    d77a:	cmp	r0, #5
    d77c:	bne.w	d16c <_strtod_l+0x834>
    d780:	ldr	r3, [sp, #124]	; 0x7c
    d782:	orr.w	r3, r3, #2139095040	; 0x7f800000
    d786:	orr.w	r3, r3, #7340032	; 0x700000
    d78a:	str	r3, [sp, #20]
    d78c:	ldr	r3, [sp, #120]	; 0x78
    d78e:	str	r3, [sp, #16]
    d790:	b.w	cba8 <_strtod_l+0x270>
    d794:	ldr	r3, [pc, #108]	; (d804 <_strtod_l+0xecc>)
    d796:	ands	r3, r4
    d798:	cmp.w	r3, #112197632	; 0x6b00000
    d79c:	bgt.w	d694 <_strtod_l+0xd5c>
    d7a0:	cmp.w	r3, #57671680	; 0x3700000
    d7a4:	bgt.w	d60a <_strtod_l+0xcd2>
    d7a8:	b.n	d52e <_strtod_l+0xbf6>
    d7aa:	mov.w	r2, #4294967295
    d7ae:	lsl.w	r3, r2, r3
    d7b2:	ldr	r2, [sp, #16]
    d7b4:	ands	r2, r3
    d7b6:	str	r2, [sp, #16]
    d7b8:	b.n	d408 <_strtod_l+0xad0>
    d7ba:	strd	r0, r1, [sp, #16]
    d7be:	b.n	d0f4 <_strtod_l+0x7bc>
    d7c0:	strd	r0, r1, [sp, #16]
    d7c4:	b.n	d3dc <_strtod_l+0xaa4>
    d7c6:	subs	r3, #32
    d7c8:	mov.w	r2, #4294967295
    d7cc:	lsl.w	r3, r2, r3
    d7d0:	ands	r3, r1
    d7d2:	str	r3, [sp, #20]
    d7d4:	b.n	d408 <_strtod_l+0xad0>
    d7d6:	mov	r0, r4
    d7d8:	ldr	r1, [sp, #108]	; 0x6c
    d7da:	adds	r4, #1
    d7dc:	b.n	d430 <_strtod_l+0xaf8>
    d7de:	mov	r0, r1
    d7e0:	ldr	r1, [sp, #108]	; 0x6c
    d7e2:	b.n	d444 <_strtod_l+0xb0c>
    d7e4:	nop.w
    d7e8:	.word	0x00000000
    d7ec:	.word	0xbfe00000
    d7f0:	.word	0x00000000
    d7f4:	.word	0x3fe00000
    d7f8:	.word	0x00013a30
    d7fc:	.word	0x000fffff
    d800:	.word	0x39500000
    d804:	.word	0x7ff00000
    d808:	.word	0x7fefffff
    d80c:	.word	0x0001374c

0000d810 <_strtod_r>:
    d810:	ldr	r3, [pc, #20]	; (d828 <_strtod_r+0x18>)
    d812:	ldr	r3, [r3, #0]
    d814:	push	{r4}
    d816:	ldr	r3, [r3, #52]	; 0x34
    d818:	ldr	r4, [pc, #16]	; (d82c <_strtod_r+0x1c>)
    d81a:	cmp	r3, #0
    d81c:	it	eq
    d81e:	moveq	r3, r4
    d820:	ldr.w	r4, [sp], #4
    d824:	b.w	c938 <_strtod_l>
    d828:	.word	0x20013dc8
    d82c:	.word	0x20013dcc

0000d830 <_strtol_l.isra.0>:
    d830:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d834:	ldr.w	r9, [sp, #40]	; 0x28
    d838:	mov	r7, r1
    d83a:	mov	r8, r0
    d83c:	mov	r6, r2
    d83e:	mov	r5, r3
    d840:	mov	fp, r1
    d842:	b.n	d846 <_strtol_l.isra.0+0x16>
    d844:	mov	fp, r4
    d846:	mov	r4, fp
    d848:	mov	r0, r9
    d84a:	ldrb.w	sl, [r4], #1
    d84e:	bl	b8ec <__locale_ctype_ptr_l>
    d852:	add	r0, sl
    d854:	ldrb	r1, [r0, #1]
    d856:	and.w	r1, r1, #8
    d85a:	and.w	ip, r1, #255	; 0xff
    d85e:	cmp	r1, #0
    d860:	bne.n	d844 <_strtol_l.isra.0+0x14>
    d862:	mov	r2, sl
    d864:	cmp	r2, #45	; 0x2d
    d866:	beq.n	d92c <_strtol_l.isra.0+0xfc>
    d868:	cmp	r2, #43	; 0x2b
    d86a:	itt	eq
    d86c:	ldrbeq.w	r2, [fp, #1]
    d870:	addeq.w	r4, fp, #2
    d874:	cmp	r5, #0
    d876:	beq.n	d900 <_strtol_l.isra.0+0xd0>
    d878:	cmp	r5, #16
    d87a:	beq.n	d948 <_strtol_l.isra.0+0x118>
    d87c:	mov	r9, r5
    d87e:	cmp.w	ip, #0
    d882:	ite	eq
    d884:	mvneq.w	sl, #2147483648	; 0x80000000
    d888:	movne.w	sl, #2147483648	; 0x80000000
    d88c:	movs	r1, #0
    d88e:	udiv	lr, sl, r9
    d892:	mov	r0, r1
    d894:	mls	sl, r9, lr, sl
    d898:	b.n	d8a6 <_strtol_l.isra.0+0x76>
    d89a:	beq.n	d8f0 <_strtol_l.isra.0+0xc0>
    d89c:	mla	r0, r9, r0, r3
    d8a0:	movs	r1, #1
    d8a2:	ldrb.w	r2, [r4], #1
    d8a6:	sub.w	r3, r2, #48	; 0x30
    d8aa:	cmp	r3, #9
    d8ac:	bls.n	d8ba <_strtol_l.isra.0+0x8a>
    d8ae:	sub.w	r3, r2, #65	; 0x41
    d8b2:	cmp	r3, #25
    d8b4:	bhi.n	d8cc <_strtol_l.isra.0+0x9c>
    d8b6:	sub.w	r3, r2, #55	; 0x37
    d8ba:	cmp	r5, r3
    d8bc:	ble.n	d8dc <_strtol_l.isra.0+0xac>
    d8be:	adds	r2, r1, #1
    d8c0:	beq.n	d8a2 <_strtol_l.isra.0+0x72>
    d8c2:	cmp	lr, r0
    d8c4:	bcs.n	d89a <_strtol_l.isra.0+0x6a>
    d8c6:	mov.w	r1, #4294967295
    d8ca:	b.n	d8a2 <_strtol_l.isra.0+0x72>
    d8cc:	sub.w	r3, r2, #97	; 0x61
    d8d0:	cmp	r3, #25
    d8d2:	bhi.n	d8dc <_strtol_l.isra.0+0xac>
    d8d4:	sub.w	r3, r2, #87	; 0x57
    d8d8:	cmp	r5, r3
    d8da:	bgt.n	d8be <_strtol_l.isra.0+0x8e>
    d8dc:	adds	r3, r1, #1
    d8de:	beq.n	d90c <_strtol_l.isra.0+0xdc>
    d8e0:	cmp.w	ip, #0
    d8e4:	bne.n	d908 <_strtol_l.isra.0+0xd8>
    d8e6:	cbz	r6, d8fc <_strtol_l.isra.0+0xcc>
    d8e8:	cbnz	r1, d924 <_strtol_l.isra.0+0xf4>
    d8ea:	str	r7, [r6, #0]
    d8ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8f0:	cmp	sl, r3
    d8f2:	bge.n	d89c <_strtol_l.isra.0+0x6c>
    d8f4:	mov	r0, lr
    d8f6:	mov.w	r1, #4294967295
    d8fa:	b.n	d8a2 <_strtol_l.isra.0+0x72>
    d8fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d900:	cmp	r2, #48	; 0x30
    d902:	beq.n	d93a <_strtol_l.isra.0+0x10a>
    d904:	movs	r5, #10
    d906:	b.n	d87c <_strtol_l.isra.0+0x4c>
    d908:	negs	r0, r0
    d90a:	b.n	d8e6 <_strtol_l.isra.0+0xb6>
    d90c:	cmp.w	ip, #0
    d910:	mov.w	r3, #34	; 0x22
    d914:	ite	eq
    d916:	mvneq.w	r0, #2147483648	; 0x80000000
    d91a:	movne.w	r0, #2147483648	; 0x80000000
    d91e:	str.w	r3, [r8]
    d922:	cbz	r6, d962 <_strtol_l.isra.0+0x132>
    d924:	subs	r7, r4, #1
    d926:	str	r7, [r6, #0]
    d928:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d92c:	add.w	r4, fp, #2
    d930:	ldrb.w	r2, [fp, #1]
    d934:	mov.w	ip, #1
    d938:	b.n	d874 <_strtol_l.isra.0+0x44>
    d93a:	ldrb	r3, [r4, #0]
    d93c:	and.w	r3, r3, #223	; 0xdf
    d940:	cmp	r3, #88	; 0x58
    d942:	beq.n	d956 <_strtol_l.isra.0+0x126>
    d944:	movs	r5, #8
    d946:	b.n	d87c <_strtol_l.isra.0+0x4c>
    d948:	cmp	r2, #48	; 0x30
    d94a:	bne.n	d87c <_strtol_l.isra.0+0x4c>
    d94c:	ldrb	r3, [r4, #0]
    d94e:	and.w	r3, r3, #223	; 0xdf
    d952:	cmp	r3, #88	; 0x58
    d954:	bne.n	d87c <_strtol_l.isra.0+0x4c>
    d956:	mov.w	r9, #16
    d95a:	ldrb	r2, [r4, #1]
    d95c:	mov	r5, r9
    d95e:	adds	r4, #2
    d960:	b.n	d87e <_strtol_l.isra.0+0x4e>
    d962:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d966:	nop

0000d968 <_strtol_r>:
    d968:	push	{r4, r5, lr}
    d96a:	ldr	r4, [pc, #24]	; (d984 <_strtol_r+0x1c>)
    d96c:	ldr	r5, [pc, #24]	; (d988 <_strtol_r+0x20>)
    d96e:	ldr	r4, [r4, #0]
    d970:	ldr	r4, [r4, #52]	; 0x34
    d972:	sub	sp, #12
    d974:	cmp	r4, #0
    d976:	it	eq
    d978:	moveq	r4, r5
    d97a:	str	r4, [sp, #0]
    d97c:	bl	d830 <_strtol_l.isra.0>
    d980:	add	sp, #12
    d982:	pop	{r4, r5, pc}
    d984:	.word	0x20013dc8
    d988:	.word	0x20013dcc
    d98c:	.word	0xffffffff

0000d990 <_svfprintf_r>:
    d990:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d994:	sub	sp, #260	; 0x104
    d996:	mov	r4, r1
    d998:	str	r1, [sp, #20]
    d99a:	mov	r5, r2
    d99c:	str	r3, [sp, #40]	; 0x28
    d99e:	str	r0, [sp, #24]
    d9a0:	bl	119e8 <_localeconv_r>
    d9a4:	ldr	r3, [r0, #0]
    d9a6:	str	r3, [sp, #76]	; 0x4c
    d9a8:	mov	r0, r3
    d9aa:	bl	c780 <strlen>
    d9ae:	ldrh	r3, [r4, #12]
    d9b0:	str	r0, [sp, #72]	; 0x48
    d9b2:	lsls	r6, r3, #24
    d9b4:	bpl.n	d9be <_svfprintf_r+0x2e>
    d9b6:	ldr	r3, [r4, #16]
    d9b8:	cmp	r3, #0
    d9ba:	beq.w	ec20 <_svfprintf_r+0x1290>
    d9be:	vldr	d7, [pc, #664]	; dc58 <_svfprintf_r+0x2c8>
    d9c2:	movs	r3, #0
    d9c4:	vstr	d7, [sp, #64]	; 0x40
    d9c8:	str	r3, [sp, #56]	; 0x38
    d9ca:	str	r3, [sp, #148]	; 0x94
    d9cc:	str	r3, [sp, #144]	; 0x90
    d9ce:	str	r3, [sp, #84]	; 0x54
    d9d0:	str	r3, [sp, #28]
    d9d2:	ldr.w	sl, [pc, #656]	; dc64 <_svfprintf_r+0x2d4>
    d9d6:	add	r3, sp, #192	; 0xc0
    d9d8:	str	r3, [sp, #140]	; 0x8c
    d9da:	mov	r9, r3
    d9dc:	mov	r8, r5
    d9de:	ldrb.w	r3, [r8]
    d9e2:	mov	r4, r8
    d9e4:	cbz	r3, da22 <_svfprintf_r+0x92>
    d9e6:	cmp	r3, #37	; 0x25
    d9e8:	bne.n	d9f0 <_svfprintf_r+0x60>
    d9ea:	b.n	da22 <_svfprintf_r+0x92>
    d9ec:	cmp	r3, #37	; 0x25
    d9ee:	beq.n	d9f8 <_svfprintf_r+0x68>
    d9f0:	ldrb.w	r3, [r4, #1]!
    d9f4:	cmp	r3, #0
    d9f6:	bne.n	d9ec <_svfprintf_r+0x5c>
    d9f8:	rsb	r5, r8, r4
    d9fc:	cbz	r5, da22 <_svfprintf_r+0x92>
    d9fe:	ldr	r3, [sp, #144]	; 0x90
    da00:	ldr	r2, [sp, #148]	; 0x94
    da02:	str.w	r8, [r9]
    da06:	adds	r3, #1
    da08:	add	r2, r5
    da0a:	cmp	r3, #7
    da0c:	str.w	r5, [r9, #4]
    da10:	str	r2, [sp, #148]	; 0x94
    da12:	str	r3, [sp, #144]	; 0x90
    da14:	bgt.w	db64 <_svfprintf_r+0x1d4>
    da18:	add.w	r9, r9, #8
    da1c:	ldr	r3, [sp, #28]
    da1e:	add	r3, r5
    da20:	str	r3, [sp, #28]
    da22:	ldrb	r3, [r4, #0]
    da24:	cmp	r3, #0
    da26:	beq.w	db76 <_svfprintf_r+0x1e6>
    da2a:	movs	r3, #0
    da2c:	mov	r2, r3
    da2e:	strb.w	r3, [sp, #111]	; 0x6f
    da32:	mov	r1, r3
    da34:	str	r3, [sp, #32]
    da36:	str	r3, [sp, #12]
    da38:	mov.w	fp, #4294967295
    da3c:	ldrb	r3, [r4, #1]
    da3e:	add.w	r8, r4, #1
    da42:	mov	r5, fp
    da44:	add.w	r8, r8, #1
    da48:	sub.w	r0, r3, #32
    da4c:	cmp	r0, #88	; 0x58
    da4e:	bhi.w	e2ba <_svfprintf_r+0x92a>
    da52:	tbh	[pc, r0, lsl #1]
    da56:	.short	0x03a0
    da58:	.word	0x04320432
    da5c:	.word	0x043203a8
    da60:	.word	0x04320432
    da64:	.word	0x04320432
    da68:	.word	0x03af0432
    da6c:	.word	0x043203bd
    da70:	.word	0x00e2005d
    da74:	.word	0x01090432
    da78:	.word	0x01100110
    da7c:	.word	0x01100110
    da80:	.word	0x01100110
    da84:	.word	0x01100110
    da88:	.word	0x04320110
    da8c:	.word	0x04320432
    da90:	.word	0x04320432
    da94:	.word	0x04320432
    da98:	.word	0x04320432
    da9c:	.word	0x01200432
    daa0:	.word	0x04320286
    daa4:	.word	0x04320286
    daa8:	.word	0x04320432
    daac:	.word	0x02d40432
    dab0:	.word	0x04320432
    dab4:	.word	0x043202e5
    dab8:	.word	0x04320432
    dabc:	.word	0x04320432
    dac0:	.word	0x0432030f
    dac4:	.word	0x033d0432
    dac8:	.word	0x04320432
    dacc:	.word	0x04320432
    dad0:	.word	0x04320432
    dad4:	.word	0x04320432
    dad8:	.word	0x04320432
    dadc:	.word	0x0391037e
    dae0:	.word	0x02860286
    dae4:	.word	0x03990286
    dae8:	.word	0x04320391
    daec:	.word	0x04070432
    daf0:	.word	0x04120432
    daf4:	.word	0x006400a3
    daf8:	.word	0x043203c2
    dafc:	.word	0x043203c9
    db00:	.word	0x043203ea
    db04:	.word	0x03f20432
    db08:	ldr	r0, [sp, #32]
    db0a:	str	r3, [sp, #40]	; 0x28
    db0c:	negs	r0, r0
    db0e:	str	r0, [sp, #32]
    db10:	ldr	r3, [sp, #12]
    db12:	orr.w	r3, r3, #4
    db16:	str	r3, [sp, #12]
    db18:	ldrb.w	r3, [r8]
    db1c:	b.n	da44 <_svfprintf_r+0xb4>
    db1e:	ldr	r0, [sp, #40]	; 0x28
    db20:	mov	fp, r5
    db22:	movs	r1, #0
    db24:	ldr	r4, [r0, #0]
    db26:	strb.w	r1, [sp, #111]	; 0x6f
    db2a:	adds	r7, r0, #4
    db2c:	ldr	r0, [sp, #12]
    db2e:	movs	r3, #48	; 0x30
    db30:	movs	r2, #120	; 0x78
    db32:	cmp	fp, r1
    db34:	strb.w	r3, [sp, #112]	; 0x70
    db38:	mov.w	r5, #0
    db3c:	strb.w	r2, [sp, #113]	; 0x71
    db40:	orr.w	r3, r0, #2
    db44:	blt.w	e2f4 <_svfprintf_r+0x964>
    db48:	bic.w	r3, r0, #128	; 0x80
    db4c:	orr.w	r3, r3, #2
    db50:	str	r3, [sp, #12]
    db52:	orrs.w	r3, r4, r5
    db56:	str	r7, [sp, #40]	; 0x28
    db58:	beq.w	e2a0 <_svfprintf_r+0x910>
    db5c:	mov	r7, r1
    db5e:	str	r2, [sp, #52]	; 0x34
    db60:	ldr	r0, [pc, #252]	; (dc60 <_svfprintf_r+0x2d0>)
    db62:	b.n	e132 <_svfprintf_r+0x7a2>
    db64:	add	r2, sp, #140	; 0x8c
    db66:	ldr	r1, [sp, #20]
    db68:	ldr	r0, [sp, #24]
    db6a:	bl	12928 <__ssprint_r>
    db6e:	cbnz	r0, db84 <_svfprintf_r+0x1f4>
    db70:	add.w	r9, sp, #192	; 0xc0
    db74:	b.n	da1c <_svfprintf_r+0x8c>
    db76:	ldr	r3, [sp, #148]	; 0x94
    db78:	cbz	r3, db84 <_svfprintf_r+0x1f4>
    db7a:	ldr	r0, [sp, #24]
    db7c:	ldr	r1, [sp, #20]
    db7e:	add	r2, sp, #140	; 0x8c
    db80:	bl	12928 <__ssprint_r>
    db84:	ldr	r3, [sp, #20]
    db86:	ldrh	r3, [r3, #12]
    db88:	tst.w	r3, #64	; 0x40
    db8c:	ldr	r3, [sp, #28]
    db8e:	it	ne
    db90:	movne.w	r3, #4294967295
    db94:	mov	r0, r3
    db96:	add	sp, #260	; 0x104
    db98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db9c:	str	r3, [sp, #52]	; 0x34
    db9e:	mov	fp, r5
    dba0:	cmp	r2, #0
    dba2:	bne.w	f00c <_svfprintf_r+0x167c>
    dba6:	ldr	r2, [sp, #12]
    dba8:	ands.w	r3, r2, #32
    dbac:	beq.w	e03c <_svfprintf_r+0x6ac>
    dbb0:	ldr	r7, [sp, #40]	; 0x28
    dbb2:	adds	r7, #7
    dbb4:	bic.w	r3, r7, #7
    dbb8:	movs	r7, #0
    dbba:	add.w	r1, r3, #8
    dbbe:	cmp	fp, r7
    dbc0:	str	r1, [sp, #40]	; 0x28
    dbc2:	ldrd	r4, r5, [r3]
    dbc6:	strb.w	r7, [sp, #111]	; 0x6f
    dbca:	blt.w	ea92 <_svfprintf_r+0x1102>
    dbce:	bic.w	r3, r2, #128	; 0x80
    dbd2:	str	r3, [sp, #12]
    dbd4:	orrs.w	r3, r4, r5
    dbd8:	beq.w	e2e4 <_svfprintf_r+0x954>
    dbdc:	add	r6, sp, #192	; 0xc0
    dbde:	lsrs	r2, r4, #3
    dbe0:	orr.w	r2, r2, r5, lsl #29
    dbe4:	lsrs	r1, r5, #3
    dbe6:	and.w	r3, r4, #7
    dbea:	mov	r5, r1
    dbec:	mov	r4, r2
    dbee:	adds	r3, #48	; 0x30
    dbf0:	orrs.w	r2, r4, r5
    dbf4:	strb.w	r3, [r6, #-1]!
    dbf8:	bne.n	dbde <_svfprintf_r+0x24e>
    dbfa:	ldr	r2, [sp, #12]
    dbfc:	lsls	r1, r2, #31
    dbfe:	bpl.w	dd20 <_svfprintf_r+0x390>
    dc02:	cmp	r3, #48	; 0x30
    dc04:	beq.w	dd20 <_svfprintf_r+0x390>
    dc08:	movs	r2, #48	; 0x30
    dc0a:	subs	r3, r6, #1
    dc0c:	strb.w	r2, [r6, #-1]
    dc10:	add	r2, sp, #192	; 0xc0
    dc12:	subs	r2, r2, r3
    dc14:	str	r2, [sp, #36]	; 0x24
    dc16:	mov	r6, r3
    dc18:	b.n	dd26 <_svfprintf_r+0x396>
    dc1a:	ldrb.w	r3, [r8]
    dc1e:	cmp	r3, #42	; 0x2a
    dc20:	add.w	r4, r8, #1
    dc24:	beq.w	eff0 <_svfprintf_r+0x1660>
    dc28:	sub.w	r0, r3, #48	; 0x30
    dc2c:	cmp	r0, #9
    dc2e:	it	ls
    dc30:	movls	r5, #0
    dc32:	bhi.w	ef42 <_svfprintf_r+0x15b2>
    dc36:	ldrb.w	r3, [r4], #1
    dc3a:	add.w	r5, r5, r5, lsl #2
    dc3e:	add.w	r5, r0, r5, lsl #1
    dc42:	sub.w	r0, r3, #48	; 0x30
    dc46:	cmp	r0, #9
    dc48:	bls.n	dc36 <_svfprintf_r+0x2a6>
    dc4a:	orr.w	r5, r5, r5, asr #31
    dc4e:	mov	r8, r4
    dc50:	b.n	da48 <_svfprintf_r+0xb8>
    dc52:	nop
    dc54:	nop.w
	...
    dc60:	.word	0x000137bc
    dc64:	.word	0x00013788
    dc68:	ldr	r3, [sp, #12]
    dc6a:	orr.w	r3, r3, #128	; 0x80
    dc6e:	str	r3, [sp, #12]
    dc70:	ldrb.w	r3, [r8]
    dc74:	b.n	da44 <_svfprintf_r+0xb4>
    dc76:	sub.w	r0, r3, #48	; 0x30
    dc7a:	movs	r3, #0
    dc7c:	mov	r4, r3
    dc7e:	ldrb.w	r3, [r8], #1
    dc82:	add.w	r4, r4, r4, lsl #2
    dc86:	add.w	r4, r0, r4, lsl #1
    dc8a:	sub.w	r0, r3, #48	; 0x30
    dc8e:	cmp	r0, #9
    dc90:	bls.n	dc7e <_svfprintf_r+0x2ee>
    dc92:	str	r4, [sp, #32]
    dc94:	b.n	da48 <_svfprintf_r+0xb8>
    dc96:	str	r3, [sp, #52]	; 0x34
    dc98:	mov	fp, r5
    dc9a:	cmp	r2, #0
    dc9c:	bne.w	f028 <_svfprintf_r+0x1698>
    dca0:	ldr	r3, [sp, #12]
    dca2:	orr.w	r3, r3, #16
    dca6:	str	r3, [sp, #12]
    dca8:	ldr	r3, [sp, #12]
    dcaa:	lsls	r4, r3, #26
    dcac:	bpl.w	e71e <_svfprintf_r+0xd8e>
    dcb0:	ldr	r7, [sp, #40]	; 0x28
    dcb2:	adds	r7, #7
    dcb4:	bic.w	r7, r7, #7
    dcb8:	ldrd	r2, r3, [r7]
    dcbc:	add.w	r1, r7, #8
    dcc0:	str	r1, [sp, #40]	; 0x28
    dcc2:	mov	r4, r2
    dcc4:	mov	r5, r3
    dcc6:	cmp	r2, #0
    dcc8:	sbcs.w	r3, r3, #0
    dccc:	blt.w	e794 <_svfprintf_r+0xe04>
    dcd0:	cmp.w	fp, #0
    dcd4:	ldrb.w	r7, [sp, #111]	; 0x6f
    dcd8:	blt.w	e75a <_svfprintf_r+0xdca>
    dcdc:	ldr	r3, [sp, #12]
    dcde:	bic.w	r3, r3, #128	; 0x80
    dce2:	str	r3, [sp, #12]
    dce4:	orrs.w	r3, r4, r5
    dce8:	beq.w	e0bc <_svfprintf_r+0x72c>
    dcec:	cmp	r5, #0
    dcee:	it	eq
    dcf0:	cmpeq	r4, #10
    dcf2:	bcc.w	e0c6 <_svfprintf_r+0x736>
    dcf6:	add	r6, sp, #192	; 0xc0
    dcf8:	mov	r0, r4
    dcfa:	mov	r1, r5
    dcfc:	movs	r2, #10
    dcfe:	movs	r3, #0
    dd00:	bl	b538 <__aeabi_uldivmod>
    dd04:	adds	r2, #48	; 0x30
    dd06:	strb.w	r2, [r6, #-1]!
    dd0a:	mov	r0, r4
    dd0c:	mov	r1, r5
    dd0e:	movs	r3, #0
    dd10:	movs	r2, #10
    dd12:	bl	b538 <__aeabi_uldivmod>
    dd16:	mov	r4, r0
    dd18:	mov	r5, r1
    dd1a:	orrs.w	r3, r4, r5
    dd1e:	bne.n	dcf8 <_svfprintf_r+0x368>
    dd20:	add	r3, sp, #192	; 0xc0
    dd22:	subs	r3, r3, r6
    dd24:	str	r3, [sp, #36]	; 0x24
    dd26:	ldr	r3, [sp, #36]	; 0x24
    dd28:	cmp	r3, fp
    dd2a:	it	lt
    dd2c:	movlt	r3, fp
    dd2e:	str	r3, [sp, #16]
    dd30:	movs	r3, #0
    dd32:	str	r3, [sp, #60]	; 0x3c
    dd34:	cbz	r7, dd3c <_svfprintf_r+0x3ac>
    dd36:	ldr	r3, [sp, #16]
    dd38:	adds	r3, #1
    dd3a:	str	r3, [sp, #16]
    dd3c:	ldr	r3, [sp, #12]
    dd3e:	ands.w	r3, r3, #2
    dd42:	str	r3, [sp, #44]	; 0x2c
    dd44:	beq.n	dd4c <_svfprintf_r+0x3bc>
    dd46:	ldr	r3, [sp, #16]
    dd48:	adds	r3, #2
    dd4a:	str	r3, [sp, #16]
    dd4c:	ldr	r3, [sp, #12]
    dd4e:	ands.w	r3, r3, #132	; 0x84
    dd52:	str	r3, [sp, #48]	; 0x30
    dd54:	bne.w	e30e <_svfprintf_r+0x97e>
    dd58:	ldr	r3, [sp, #32]
    dd5a:	ldr	r2, [sp, #16]
    dd5c:	subs	r5, r3, r2
    dd5e:	cmp	r5, #0
    dd60:	ble.w	e30e <_svfprintf_r+0x97e>
    dd64:	cmp	r5, #16
    dd66:	ldr	r1, [sp, #148]	; 0x94
    dd68:	ldr	r2, [sp, #144]	; 0x90
    dd6a:	ldr	r7, [pc, #672]	; (e00c <_svfprintf_r+0x67c>)
    dd6c:	ble.n	ddbe <_svfprintf_r+0x42e>
    dd6e:	str	r6, [sp, #80]	; 0x50
    dd70:	mov	r0, r9
    dd72:	movs	r4, #16
    dd74:	mov	r9, r7
    dd76:	ldr	r6, [sp, #20]
    dd78:	mov	r7, r5
    dd7a:	ldr	r5, [sp, #24]
    dd7c:	b.n	dd88 <_svfprintf_r+0x3f8>
    dd7e:	subs	r7, #16
    dd80:	cmp	r7, #16
    dd82:	add.w	r0, r0, #8
    dd86:	ble.n	ddb6 <_svfprintf_r+0x426>
    dd88:	adds	r2, #1
    dd8a:	ldr	r3, [pc, #640]	; (e00c <_svfprintf_r+0x67c>)
    dd8c:	str	r2, [sp, #144]	; 0x90
    dd8e:	adds	r1, #16
    dd90:	cmp	r2, #7
    dd92:	str	r1, [sp, #148]	; 0x94
    dd94:	stmia.w	r0, {r3, r4}
    dd98:	ble.n	dd7e <_svfprintf_r+0x3ee>
    dd9a:	add	r2, sp, #140	; 0x8c
    dd9c:	mov	r1, r6
    dd9e:	mov	r0, r5
    dda0:	bl	12928 <__ssprint_r>
    dda4:	cmp	r0, #0
    dda6:	bne.w	db84 <_svfprintf_r+0x1f4>
    ddaa:	subs	r7, #16
    ddac:	cmp	r7, #16
    ddae:	ldr	r1, [sp, #148]	; 0x94
    ddb0:	ldr	r2, [sp, #144]	; 0x90
    ddb2:	add	r0, sp, #192	; 0xc0
    ddb4:	bgt.n	dd88 <_svfprintf_r+0x3f8>
    ddb6:	ldr	r6, [sp, #80]	; 0x50
    ddb8:	mov	r5, r7
    ddba:	mov	r7, r9
    ddbc:	mov	r9, r0
    ddbe:	adds	r2, #1
    ddc0:	adds	r4, r5, r1
    ddc2:	cmp	r2, #7
    ddc4:	str	r4, [sp, #148]	; 0x94
    ddc6:	str	r2, [sp, #144]	; 0x90
    ddc8:	str.w	r7, [r9]
    ddcc:	str.w	r5, [r9, #4]
    ddd0:	bgt.w	e62e <_svfprintf_r+0xc9e>
    ddd4:	ldrb.w	r7, [sp, #111]	; 0x6f
    ddd8:	add.w	r9, r9, #8
    dddc:	cbz	r7, ddfc <_svfprintf_r+0x46c>
    ddde:	ldr	r3, [sp, #144]	; 0x90
    dde0:	adds	r3, #1
    dde2:	adds	r4, #1
    dde4:	add.w	r1, sp, #111	; 0x6f
    dde8:	movs	r2, #1
    ddea:	cmp	r3, #7
    ddec:	str	r4, [sp, #148]	; 0x94
    ddee:	str	r3, [sp, #144]	; 0x90
    ddf0:	stmia.w	r9, {r1, r2}
    ddf4:	bgt.w	e542 <_svfprintf_r+0xbb2>
    ddf8:	add.w	r9, r9, #8
    ddfc:	ldr	r3, [sp, #44]	; 0x2c
    ddfe:	cbz	r3, de1c <_svfprintf_r+0x48c>
    de00:	ldr	r3, [sp, #144]	; 0x90
    de02:	adds	r3, #1
    de04:	adds	r4, #2
    de06:	add	r1, sp, #112	; 0x70
    de08:	movs	r2, #2
    de0a:	cmp	r3, #7
    de0c:	str	r4, [sp, #148]	; 0x94
    de0e:	str	r3, [sp, #144]	; 0x90
    de10:	stmia.w	r9, {r1, r2}
    de14:	bgt.w	e55a <_svfprintf_r+0xbca>
    de18:	add.w	r9, r9, #8
    de1c:	ldr	r3, [sp, #48]	; 0x30
    de1e:	cmp	r3, #128	; 0x80
    de20:	beq.w	e3e6 <_svfprintf_r+0xa56>
    de24:	ldr	r3, [sp, #36]	; 0x24
    de26:	rsb	r7, r3, fp
    de2a:	cmp	r7, #0
    de2c:	ble.n	de96 <_svfprintf_r+0x506>
    de2e:	ldr	r2, [pc, #480]	; (e010 <_svfprintf_r+0x680>)
    de30:	ldr	r3, [sp, #144]	; 0x90
    de32:	str	r2, [sp, #44]	; 0x2c
    de34:	cmp	r7, #16
    de36:	ble.n	de7e <_svfprintf_r+0x4ee>
    de38:	mov	r2, r4
    de3a:	mov.w	fp, #16
    de3e:	ldr	r5, [sp, #24]
    de40:	ldr	r4, [sp, #20]
    de42:	b.n	de4e <_svfprintf_r+0x4be>
    de44:	subs	r7, #16
    de46:	cmp	r7, #16
    de48:	add.w	r9, r9, #8
    de4c:	ble.n	de7c <_svfprintf_r+0x4ec>
    de4e:	adds	r3, #1
    de50:	adds	r2, #16
    de52:	cmp	r3, #7
    de54:	str	r2, [sp, #148]	; 0x94
    de56:	str	r3, [sp, #144]	; 0x90
    de58:	stmia.w	r9, {sl, fp}
    de5c:	ble.n	de44 <_svfprintf_r+0x4b4>
    de5e:	add	r2, sp, #140	; 0x8c
    de60:	mov	r1, r4
    de62:	mov	r0, r5
    de64:	bl	12928 <__ssprint_r>
    de68:	cmp	r0, #0
    de6a:	bne.w	db84 <_svfprintf_r+0x1f4>
    de6e:	subs	r7, #16
    de70:	cmp	r7, #16
    de72:	ldr	r2, [sp, #148]	; 0x94
    de74:	ldr	r3, [sp, #144]	; 0x90
    de76:	add.w	r9, sp, #192	; 0xc0
    de7a:	bgt.n	de4e <_svfprintf_r+0x4be>
    de7c:	mov	r4, r2
    de7e:	adds	r3, #1
    de80:	ldr	r2, [sp, #44]	; 0x2c
    de82:	str	r3, [sp, #144]	; 0x90
    de84:	add	r4, r7
    de86:	cmp	r3, #7
    de88:	str	r4, [sp, #148]	; 0x94
    de8a:	stmia.w	r9, {r2, r7}
    de8e:	bgt.w	e52a <_svfprintf_r+0xb9a>
    de92:	add.w	r9, r9, #8
    de96:	ldr	r3, [sp, #12]
    de98:	lsls	r2, r3, #23
    de9a:	bmi.w	e312 <_svfprintf_r+0x982>
    de9e:	ldr	r3, [sp, #144]	; 0x90
    dea0:	ldr	r1, [sp, #36]	; 0x24
    dea2:	str.w	r6, [r9]
    dea6:	adds	r3, #1
    dea8:	add	r4, r1
    deaa:	cmp	r3, #7
    deac:	str	r4, [sp, #148]	; 0x94
    deae:	str.w	r1, [r9, #4]
    deb2:	str	r3, [sp, #144]	; 0x90
    deb4:	bgt.w	e4fe <_svfprintf_r+0xb6e>
    deb8:	add.w	r9, r9, #8
    debc:	ldr	r3, [sp, #12]
    debe:	lsls	r1, r3, #29
    dec0:	bpl.n	df42 <_svfprintf_r+0x5b2>
    dec2:	ldr	r3, [sp, #32]
    dec4:	ldr	r2, [sp, #16]
    dec6:	subs	r5, r3, r2
    dec8:	cmp	r5, #0
    deca:	ble.n	df42 <_svfprintf_r+0x5b2>
    decc:	cmp	r5, #16
    dece:	ldr	r3, [sp, #144]	; 0x90
    ded0:	ldr	r7, [pc, #312]	; (e00c <_svfprintf_r+0x67c>)
    ded2:	ble.n	df1c <_svfprintf_r+0x58c>
    ded4:	mov	r2, r4
    ded6:	movs	r6, #16
    ded8:	ldr.w	fp, [sp, #24]
    dedc:	ldr	r4, [sp, #20]
    dede:	b.n	deea <_svfprintf_r+0x55a>
    dee0:	subs	r5, #16
    dee2:	cmp	r5, #16
    dee4:	add.w	r9, r9, #8
    dee8:	ble.n	df1a <_svfprintf_r+0x58a>
    deea:	adds	r3, #1
    deec:	ldr	r1, [pc, #284]	; (e00c <_svfprintf_r+0x67c>)
    deee:	str	r3, [sp, #144]	; 0x90
    def0:	adds	r2, #16
    def2:	cmp	r3, #7
    def4:	str	r2, [sp, #148]	; 0x94
    def6:	stmia.w	r9, {r1, r6}
    defa:	ble.n	dee0 <_svfprintf_r+0x550>
    defc:	add	r2, sp, #140	; 0x8c
    defe:	mov	r1, r4
    df00:	mov	r0, fp
    df02:	bl	12928 <__ssprint_r>
    df06:	cmp	r0, #0
    df08:	bne.w	db84 <_svfprintf_r+0x1f4>
    df0c:	subs	r5, #16
    df0e:	cmp	r5, #16
    df10:	ldr	r2, [sp, #148]	; 0x94
    df12:	ldr	r3, [sp, #144]	; 0x90
    df14:	add.w	r9, sp, #192	; 0xc0
    df18:	bgt.n	deea <_svfprintf_r+0x55a>
    df1a:	mov	r4, r2
    df1c:	adds	r3, #1
    df1e:	add	r4, r5
    df20:	cmp	r3, #7
    df22:	str	r4, [sp, #148]	; 0x94
    df24:	str	r3, [sp, #144]	; 0x90
    df26:	str.w	r7, [r9]
    df2a:	str.w	r5, [r9, #4]
    df2e:	ble.n	df42 <_svfprintf_r+0x5b2>
    df30:	add	r2, sp, #140	; 0x8c
    df32:	ldr	r1, [sp, #20]
    df34:	ldr	r0, [sp, #24]
    df36:	bl	12928 <__ssprint_r>
    df3a:	cmp	r0, #0
    df3c:	bne.w	db84 <_svfprintf_r+0x1f4>
    df40:	ldr	r4, [sp, #148]	; 0x94
    df42:	ldr	r3, [sp, #28]
    df44:	ldr	r2, [sp, #32]
    df46:	ldr	r1, [sp, #16]
    df48:	cmp	r2, r1
    df4a:	ite	ge
    df4c:	addge	r3, r3, r2
    df4e:	addlt	r3, r3, r1
    df50:	str	r3, [sp, #28]
    df52:	cmp	r4, #0
    df54:	bne.w	e516 <_svfprintf_r+0xb86>
    df58:	movs	r3, #0
    df5a:	str	r3, [sp, #144]	; 0x90
    df5c:	add.w	r9, sp, #192	; 0xc0
    df60:	b.n	d9de <_svfprintf_r+0x4e>
    df62:	str	r3, [sp, #52]	; 0x34
    df64:	mov	fp, r5
    df66:	cmp	r2, #0
    df68:	bne.w	f030 <_svfprintf_r+0x16a0>
    df6c:	ldr	r3, [sp, #12]
    df6e:	ldr	r7, [sp, #40]	; 0x28
    df70:	lsls	r2, r3, #28
    df72:	add.w	r7, r7, #7
    df76:	bpl.w	ea62 <_svfprintf_r+0x10d2>
    df7a:	bic.w	r3, r7, #7
    df7e:	vldr	d7, [r3]
    df82:	vstr	d7, [sp, #64]	; 0x40
    df86:	add.w	r2, r3, #8
    df8a:	str	r2, [sp, #40]	; 0x28
    df8c:	ldrd	r1, r2, [sp, #64]	; 0x40
    df90:	bic.w	r3, r2, #2147483648	; 0x80000000
    df94:	str	r1, [sp, #88]	; 0x58
    df96:	str	r3, [sp, #92]	; 0x5c
    df98:	ldrd	r4, r5, [sp, #88]	; 0x58
    df9c:	mov.w	r2, #4294967295
    dfa0:	mov	r0, r4
    dfa2:	mov	r1, r5
    dfa4:	ldr	r3, [pc, #108]	; (e014 <_svfprintf_r+0x684>)
    dfa6:	bl	b3dc <__aeabi_dcmpun>
    dfaa:	cmp	r0, #0
    dfac:	bne.w	e964 <_svfprintf_r+0xfd4>
    dfb0:	mov.w	r2, #4294967295
    dfb4:	ldr	r3, [pc, #92]	; (e014 <_svfprintf_r+0x684>)
    dfb6:	mov	r0, r4
    dfb8:	mov	r1, r5
    dfba:	bl	b3a0 <__aeabi_dcmple>
    dfbe:	cmp	r0, #0
    dfc0:	bne.w	e964 <_svfprintf_r+0xfd4>
    dfc4:	movs	r2, #0
    dfc6:	movs	r3, #0
    dfc8:	ldrd	r0, r1, [sp, #64]	; 0x40
    dfcc:	bl	b38c <__aeabi_dcmplt>
    dfd0:	cmp	r0, #0
    dfd2:	bne.w	ee7a <_svfprintf_r+0x14ea>
    dfd6:	ldrb.w	r7, [sp, #111]	; 0x6f
    dfda:	ldr	r6, [pc, #60]	; (e018 <_svfprintf_r+0x688>)
    dfdc:	ldr	r3, [pc, #60]	; (e01c <_svfprintf_r+0x68c>)
    dfde:	ldr	r1, [sp, #12]
    dfe0:	bic.w	r1, r1, #128	; 0x80
    dfe4:	str	r1, [sp, #12]
    dfe6:	ldr	r1, [sp, #52]	; 0x34
    dfe8:	movs	r2, #3
    dfea:	mov.w	fp, #0
    dfee:	str	r2, [sp, #16]
    dff0:	cmp	r1, #71	; 0x47
    dff2:	it	le
    dff4:	movle	r6, r3
    dff6:	str	r2, [sp, #36]	; 0x24
    dff8:	str.w	fp, [sp, #60]	; 0x3c
    dffc:	b.n	dd34 <_svfprintf_r+0x3a4>
    dffe:	ldr	r3, [sp, #12]
    e000:	orr.w	r3, r3, #8
    e004:	str	r3, [sp, #12]
    e006:	ldrb.w	r3, [r8]
    e00a:	b.n	da44 <_svfprintf_r+0xb4>
    e00c:	.word	0x000137dc
    e010:	.word	0x00013788
    e014:	.word	0x7fefffff
    e018:	.word	0x0001379c
    e01c:	.word	0x00013798
    e020:	str	r3, [sp, #52]	; 0x34
    e022:	mov	fp, r5
    e024:	cmp	r2, #0
    e026:	bne.w	f048 <_svfprintf_r+0x16b8>
    e02a:	ldr	r3, [sp, #12]
    e02c:	orr.w	r3, r3, #16
    e030:	str	r3, [sp, #12]
    e032:	ldr	r2, [sp, #12]
    e034:	ands.w	r3, r2, #32
    e038:	bne.w	dbb0 <_svfprintf_r+0x220>
    e03c:	ldr	r1, [sp, #12]
    e03e:	ands.w	r2, r1, #16
    e042:	beq.w	e8fc <_svfprintf_r+0xf6c>
    e046:	ldr	r0, [sp, #40]	; 0x28
    e048:	strb.w	r3, [sp, #111]	; 0x6f
    e04c:	cmp.w	fp, #0
    e050:	ldr	r4, [r0, #0]
    e052:	add.w	r7, r0, #4
    e056:	mov.w	r5, #0
    e05a:	blt.w	ea90 <_svfprintf_r+0x1100>
    e05e:	mov	r2, r1
    e060:	bic.w	r2, r2, #128	; 0x80
    e064:	str	r2, [sp, #12]
    e066:	orrs.w	r2, r4, r5
    e06a:	str	r7, [sp, #40]	; 0x28
    e06c:	beq.w	e2e4 <_svfprintf_r+0x954>
    e070:	mov	r7, r3
    e072:	b.n	dbdc <_svfprintf_r+0x24c>
    e074:	str	r3, [sp, #52]	; 0x34
    e076:	mov	fp, r5
    e078:	cmp	r2, #0
    e07a:	bne.w	f040 <_svfprintf_r+0x16b0>
    e07e:	ldr	r3, [sp, #12]
    e080:	orr.w	r3, r3, #16
    e084:	str	r3, [sp, #12]
    e086:	ldr	r2, [sp, #12]
    e088:	ands.w	r3, r2, #32
    e08c:	beq.w	e6e8 <_svfprintf_r+0xd58>
    e090:	ldr	r7, [sp, #40]	; 0x28
    e092:	adds	r7, #7
    e094:	bic.w	r3, r7, #7
    e098:	movs	r7, #0
    e09a:	add.w	r1, r3, #8
    e09e:	cmp	fp, r7
    e0a0:	str	r1, [sp, #40]	; 0x28
    e0a2:	ldrd	r4, r5, [r3]
    e0a6:	strb.w	r7, [sp, #111]	; 0x6f
    e0aa:	blt.w	e75a <_svfprintf_r+0xdca>
    e0ae:	bic.w	r3, r2, #128	; 0x80
    e0b2:	str	r3, [sp, #12]
    e0b4:	orrs.w	r3, r4, r5
    e0b8:	bne.w	dcec <_svfprintf_r+0x35c>
    e0bc:	cmp.w	fp, #0
    e0c0:	beq.w	e2ae <_svfprintf_r+0x91e>
    e0c4:	movs	r4, #0
    e0c6:	add	r6, sp, #256	; 0x100
    e0c8:	adds	r4, #48	; 0x30
    e0ca:	strb.w	r4, [r6, #-65]!
    e0ce:	b.n	dd20 <_svfprintf_r+0x390>
    e0d0:	str	r3, [sp, #52]	; 0x34
    e0d2:	mov	fp, r5
    e0d4:	cmp	r2, #0
    e0d6:	bne.w	f038 <_svfprintf_r+0x16a8>
    e0da:	ldr	r3, [sp, #12]
    e0dc:	ldr	r0, [pc, #700]	; (e39c <_svfprintf_r+0xa0c>)
    e0de:	lsls	r5, r3, #26
    e0e0:	bpl.w	e24e <_svfprintf_r+0x8be>
    e0e4:	ldr	r7, [sp, #40]	; 0x28
    e0e6:	adds	r7, #7
    e0e8:	bic.w	r3, r7, #7
    e0ec:	ldrd	r4, r5, [r3]
    e0f0:	add.w	r2, r3, #8
    e0f4:	str	r2, [sp, #40]	; 0x28
    e0f6:	ldr	r2, [sp, #12]
    e0f8:	ands.w	r7, r2, #1
    e0fc:	beq.w	e572 <_svfprintf_r+0xbe2>
    e100:	orrs.w	r3, r4, r5
    e104:	beq.w	eb0c <_svfprintf_r+0x117c>
    e108:	ldrb.w	r2, [sp, #52]	; 0x34
    e10c:	strb.w	r2, [sp, #113]	; 0x71
    e110:	movs	r7, #0
    e112:	ldr	r2, [sp, #12]
    e114:	strb.w	r7, [sp, #111]	; 0x6f
    e118:	movs	r3, #48	; 0x30
    e11a:	cmp	fp, r7
    e11c:	strb.w	r3, [sp, #112]	; 0x70
    e120:	orr.w	r3, r2, #2
    e124:	blt.w	ee84 <_svfprintf_r+0x14f4>
    e128:	bic.w	r3, r2, #128	; 0x80
    e12c:	orr.w	r3, r3, #2
    e130:	str	r3, [sp, #12]
    e132:	add	r6, sp, #192	; 0xc0
    e134:	lsrs	r3, r4, #4
    e136:	and.w	r1, r4, #15
    e13a:	orr.w	r3, r3, r5, lsl #28
    e13e:	lsrs	r2, r5, #4
    e140:	mov	r4, r3
    e142:	mov	r5, r2
    e144:	ldrb	r3, [r0, r1]
    e146:	strb.w	r3, [r6, #-1]!
    e14a:	orrs.w	r3, r4, r5
    e14e:	bne.n	e134 <_svfprintf_r+0x7a4>
    e150:	b.n	dd20 <_svfprintf_r+0x390>
    e152:	ldr	r1, [sp, #40]	; 0x28
    e154:	str	r3, [sp, #52]	; 0x34
    e156:	ldr	r2, [r1, #0]
    e158:	strb.w	r2, [sp, #152]	; 0x98
    e15c:	movs	r3, #0
    e15e:	mov	r2, r1
    e160:	mov	r7, r3
    e162:	strb.w	r3, [sp, #111]	; 0x6f
    e166:	adds	r2, #4
    e168:	movs	r3, #1
    e16a:	str	r3, [sp, #16]
    e16c:	mov	fp, r7
    e16e:	str	r7, [sp, #60]	; 0x3c
    e170:	str	r2, [sp, #40]	; 0x28
    e172:	str	r3, [sp, #36]	; 0x24
    e174:	add	r6, sp, #152	; 0x98
    e176:	b.n	dd3c <_svfprintf_r+0x3ac>
    e178:	str	r3, [sp, #52]	; 0x34
    e17a:	mov	fp, r5
    e17c:	cmp	r2, #0
    e17e:	beq.w	dca8 <_svfprintf_r+0x318>
    e182:	strb.w	r1, [sp, #111]	; 0x6f
    e186:	b.n	dca8 <_svfprintf_r+0x318>
    e188:	ldr	r3, [sp, #12]
    e18a:	orr.w	r3, r3, #64	; 0x40
    e18e:	str	r3, [sp, #12]
    e190:	ldrb.w	r3, [r8]
    e194:	b.n	da44 <_svfprintf_r+0xb4>
    e196:	ldrb.w	r3, [r8]
    e19a:	cmp	r1, #0
    e19c:	bne.w	da44 <_svfprintf_r+0xb4>
    e1a0:	movs	r2, #1
    e1a2:	movs	r1, #32
    e1a4:	b.n	da44 <_svfprintf_r+0xb4>
    e1a6:	ldr	r3, [sp, #12]
    e1a8:	orr.w	r3, r3, #1
    e1ac:	str	r3, [sp, #12]
    e1ae:	ldrb.w	r3, [r8]
    e1b2:	b.n	da44 <_svfprintf_r+0xb4>
    e1b4:	ldr	r4, [sp, #40]	; 0x28
    e1b6:	ldr	r3, [r4, #0]
    e1b8:	str	r3, [sp, #32]
    e1ba:	mov	r0, r3
    e1bc:	cmp	r0, #0
    e1be:	mov	r3, r4
    e1c0:	add.w	r3, r3, #4
    e1c4:	blt.w	db08 <_svfprintf_r+0x178>
    e1c8:	str	r3, [sp, #40]	; 0x28
    e1ca:	ldrb.w	r3, [r8]
    e1ce:	b.n	da44 <_svfprintf_r+0xb4>
    e1d0:	ldrb.w	r3, [r8]
    e1d4:	movs	r2, #1
    e1d6:	movs	r1, #43	; 0x2b
    e1d8:	b.n	da44 <_svfprintf_r+0xb4>
    e1da:	ldr	r3, [sp, #12]
    e1dc:	orr.w	r3, r3, #32
    e1e0:	str	r3, [sp, #12]
    e1e2:	ldrb.w	r3, [r8]
    e1e6:	b.n	da44 <_svfprintf_r+0xb4>
    e1e8:	ldr	r2, [sp, #40]	; 0x28
    e1ea:	str	r3, [sp, #52]	; 0x34
    e1ec:	ldr	r6, [r2, #0]
    e1ee:	movs	r4, #0
    e1f0:	strb.w	r4, [sp, #111]	; 0x6f
    e1f4:	adds	r7, r2, #4
    e1f6:	cmp	r6, #0
    e1f8:	beq.w	ee34 <_svfprintf_r+0x14a4>
    e1fc:	cmp	r5, #0
    e1fe:	blt.w	ecc4 <_svfprintf_r+0x1334>
    e202:	mov	r2, r5
    e204:	mov	r1, r4
    e206:	mov	r0, r6
    e208:	bl	bed0 <memchr>
    e20c:	cmp	r0, #0
    e20e:	beq.w	eed8 <_svfprintf_r+0x1548>
    e212:	subs	r3, r0, r6
    e214:	str	r3, [sp, #36]	; 0x24
    e216:	mov	fp, r4
    e218:	bic.w	r3, r3, r3, asr #31
    e21c:	str	r7, [sp, #40]	; 0x28
    e21e:	str	r3, [sp, #16]
    e220:	str.w	fp, [sp, #60]	; 0x3c
    e224:	ldrb.w	r7, [sp, #111]	; 0x6f
    e228:	b.n	dd34 <_svfprintf_r+0x3a4>
    e22a:	str	r3, [sp, #52]	; 0x34
    e22c:	mov	fp, r5
    e22e:	cmp	r2, #0
    e230:	beq.w	e086 <_svfprintf_r+0x6f6>
    e234:	strb.w	r1, [sp, #111]	; 0x6f
    e238:	b.n	e086 <_svfprintf_r+0x6f6>
    e23a:	str	r3, [sp, #52]	; 0x34
    e23c:	mov	fp, r5
    e23e:	cmp	r2, #0
    e240:	bne.w	f060 <_svfprintf_r+0x16d0>
    e244:	ldr	r3, [sp, #12]
    e246:	ldr	r0, [pc, #344]	; (e3a0 <_svfprintf_r+0xa10>)
    e248:	lsls	r5, r3, #26
    e24a:	bmi.w	e0e4 <_svfprintf_r+0x754>
    e24e:	ldr	r3, [sp, #12]
    e250:	lsls	r4, r3, #27
    e252:	bpl.w	ead2 <_svfprintf_r+0x1142>
    e256:	ldr	r2, [sp, #40]	; 0x28
    e258:	mov	r3, r2
    e25a:	adds	r3, #4
    e25c:	ldr	r4, [r2, #0]
    e25e:	str	r3, [sp, #40]	; 0x28
    e260:	movs	r5, #0
    e262:	b.n	e0f6 <_svfprintf_r+0x766>
    e264:	ldrb.w	r3, [r8]
    e268:	cmp	r3, #108	; 0x6c
    e26a:	beq.w	ebf2 <_svfprintf_r+0x1262>
    e26e:	ldr	r0, [sp, #12]
    e270:	orr.w	r0, r0, #16
    e274:	str	r0, [sp, #12]
    e276:	b.w	da44 <_svfprintf_r+0xb4>
    e27a:	cmp	r2, #0
    e27c:	bne.w	f058 <_svfprintf_r+0x16c8>
    e280:	ldr	r3, [sp, #12]
    e282:	lsls	r3, r3, #26
    e284:	bpl.w	e936 <_svfprintf_r+0xfa6>
    e288:	ldr	r2, [sp, #40]	; 0x28
    e28a:	ldr	r1, [sp, #28]
    e28c:	ldr	r3, [r2, #0]
    e28e:	asrs	r5, r1, #31
    e290:	mov	r0, r1
    e292:	adds	r2, #4
    e294:	mov	r1, r5
    e296:	str	r2, [sp, #40]	; 0x28
    e298:	strd	r0, r1, [r3]
    e29c:	b.w	d9de <_svfprintf_r+0x4e>
    e2a0:	ldr	r0, [pc, #252]	; (e3a0 <_svfprintf_r+0xa10>)
    e2a2:	str	r2, [sp, #52]	; 0x34
    e2a4:	cmp.w	fp, #0
    e2a8:	bne.w	e594 <_svfprintf_r+0xc04>
    e2ac:	mov	r7, fp
    e2ae:	mov.w	fp, #0
    e2b2:	str.w	fp, [sp, #36]	; 0x24
    e2b6:	add	r6, sp, #192	; 0xc0
    e2b8:	b.n	dd26 <_svfprintf_r+0x396>
    e2ba:	str	r3, [sp, #52]	; 0x34
    e2bc:	cmp	r2, #0
    e2be:	bne.w	f050 <_svfprintf_r+0x16c0>
    e2c2:	ldr	r2, [sp, #52]	; 0x34
    e2c4:	cmp	r2, #0
    e2c6:	beq.w	db76 <_svfprintf_r+0x1e6>
    e2ca:	movs	r3, #0
    e2cc:	movs	r1, #1
    e2ce:	mov	r7, r3
    e2d0:	str	r1, [sp, #16]
    e2d2:	strb.w	r2, [sp, #152]	; 0x98
    e2d6:	strb.w	r3, [sp, #111]	; 0x6f
    e2da:	mov	fp, r3
    e2dc:	str	r3, [sp, #60]	; 0x3c
    e2de:	str	r1, [sp, #36]	; 0x24
    e2e0:	add	r6, sp, #152	; 0x98
    e2e2:	b.n	dd3c <_svfprintf_r+0x3ac>
    e2e4:	cmp.w	fp, #0
    e2e8:	beq.w	ef08 <_svfprintf_r+0x1578>
    e2ec:	movs	r7, #0
    e2ee:	movs	r4, #0
    e2f0:	movs	r5, #0
    e2f2:	b.n	dbdc <_svfprintf_r+0x24c>
    e2f4:	ldr	r0, [pc, #168]	; (e3a0 <_svfprintf_r+0xa10>)
    e2f6:	str	r3, [sp, #12]
    e2f8:	str	r2, [sp, #52]	; 0x34
    e2fa:	orrs.w	r3, r4, r5
    e2fe:	str	r7, [sp, #40]	; 0x28
    e300:	mov.w	r7, #0
    e304:	bne.w	e132 <_svfprintf_r+0x7a2>
    e308:	movs	r4, #0
    e30a:	movs	r5, #0
    e30c:	b.n	e132 <_svfprintf_r+0x7a2>
    e30e:	ldr	r4, [sp, #148]	; 0x94
    e310:	b.n	dddc <_svfprintf_r+0x44c>
    e312:	ldr	r3, [sp, #52]	; 0x34
    e314:	cmp	r3, #101	; 0x65
    e316:	ble.w	e46e <_svfprintf_r+0xade>
    e31a:	movs	r2, #0
    e31c:	movs	r3, #0
    e31e:	ldrd	r0, r1, [sp, #64]	; 0x40
    e322:	bl	b378 <__aeabi_dcmpeq>
    e326:	cmp	r0, #0
    e328:	beq.w	e598 <_svfprintf_r+0xc08>
    e32c:	ldr	r3, [sp, #144]	; 0x90
    e32e:	ldr	r2, [pc, #116]	; (e3a4 <_svfprintf_r+0xa14>)
    e330:	str.w	r2, [r9]
    e334:	adds	r3, #1
    e336:	adds	r4, #1
    e338:	movs	r2, #1
    e33a:	cmp	r3, #7
    e33c:	str	r4, [sp, #148]	; 0x94
    e33e:	str	r3, [sp, #144]	; 0x90
    e340:	str.w	r2, [r9, #4]
    e344:	bgt.w	eb24 <_svfprintf_r+0x1194>
    e348:	add.w	r9, r9, #8
    e34c:	ldr	r3, [sp, #116]	; 0x74
    e34e:	ldr	r2, [sp, #56]	; 0x38
    e350:	cmp	r3, r2
    e352:	blt.n	e35c <_svfprintf_r+0x9cc>
    e354:	ldr	r3, [sp, #12]
    e356:	lsls	r3, r3, #31
    e358:	bpl.w	debc <_svfprintf_r+0x52c>
    e35c:	ldr	r3, [sp, #144]	; 0x90
    e35e:	ldr	r1, [sp, #72]	; 0x48
    e360:	ldr	r2, [sp, #76]	; 0x4c
    e362:	str.w	r2, [r9]
    e366:	adds	r3, #1
    e368:	add	r4, r1
    e36a:	cmp	r3, #7
    e36c:	str	r4, [sp, #148]	; 0x94
    e36e:	str.w	r1, [r9, #4]
    e372:	str	r3, [sp, #144]	; 0x90
    e374:	bgt.w	ec06 <_svfprintf_r+0x1276>
    e378:	add.w	r9, r9, #8
    e37c:	ldr	r3, [sp, #56]	; 0x38
    e37e:	subs	r5, r3, #1
    e380:	cmp	r5, #0
    e382:	ble.w	debc <_svfprintf_r+0x52c>
    e386:	ldr	r2, [pc, #32]	; (e3a8 <_svfprintf_r+0xa18>)
    e388:	ldr	r3, [sp, #144]	; 0x90
    e38a:	str	r2, [sp, #44]	; 0x2c
    e38c:	cmp	r5, #16
    e38e:	ble.w	e764 <_svfprintf_r+0xdd4>
    e392:	movs	r6, #16
    e394:	ldr	r7, [sp, #24]
    e396:	ldr.w	fp, [sp, #20]
    e39a:	b.n	e3b8 <_svfprintf_r+0xa28>
    e39c:	.word	0x000137a8
    e3a0:	.word	0x000137bc
    e3a4:	.word	0x000137d8
    e3a8:	.word	0x00013788
    e3ac:	add.w	r9, r9, #8
    e3b0:	subs	r5, #16
    e3b2:	cmp	r5, #16
    e3b4:	ble.w	e764 <_svfprintf_r+0xdd4>
    e3b8:	adds	r3, #1
    e3ba:	adds	r4, #16
    e3bc:	cmp	r3, #7
    e3be:	str	r4, [sp, #148]	; 0x94
    e3c0:	str	r3, [sp, #144]	; 0x90
    e3c2:	str.w	sl, [r9]
    e3c6:	str.w	r6, [r9, #4]
    e3ca:	ble.n	e3ac <_svfprintf_r+0xa1c>
    e3cc:	add	r2, sp, #140	; 0x8c
    e3ce:	mov	r1, fp
    e3d0:	mov	r0, r7
    e3d2:	bl	12928 <__ssprint_r>
    e3d6:	cmp	r0, #0
    e3d8:	bne.w	db84 <_svfprintf_r+0x1f4>
    e3dc:	ldr	r4, [sp, #148]	; 0x94
    e3de:	ldr	r3, [sp, #144]	; 0x90
    e3e0:	add.w	r9, sp, #192	; 0xc0
    e3e4:	b.n	e3b0 <_svfprintf_r+0xa20>
    e3e6:	ldr	r3, [sp, #32]
    e3e8:	ldr	r2, [sp, #16]
    e3ea:	subs	r7, r3, r2
    e3ec:	cmp	r7, #0
    e3ee:	ble.w	de24 <_svfprintf_r+0x494>
    e3f2:	ldr	r2, [pc, #752]	; (e6e4 <_svfprintf_r+0xd54>)
    e3f4:	ldr	r3, [sp, #144]	; 0x90
    e3f6:	str	r2, [sp, #44]	; 0x2c
    e3f8:	cmp	r7, #16
    e3fa:	ble.n	e454 <_svfprintf_r+0xac4>
    e3fc:	mov	r2, r9
    e3fe:	mov	r1, r4
    e400:	mov	r9, r7
    e402:	movs	r5, #16
    e404:	mov	r7, r6
    e406:	ldr	r4, [sp, #24]
    e408:	ldr	r6, [sp, #20]
    e40a:	b.n	e41a <_svfprintf_r+0xa8a>
    e40c:	sub.w	r9, r9, #16
    e410:	cmp.w	r9, #16
    e414:	add.w	r2, r2, #8
    e418:	ble.n	e44c <_svfprintf_r+0xabc>
    e41a:	adds	r3, #1
    e41c:	adds	r1, #16
    e41e:	cmp	r3, #7
    e420:	str	r1, [sp, #148]	; 0x94
    e422:	str	r3, [sp, #144]	; 0x90
    e424:	str.w	sl, [r2]
    e428:	str	r5, [r2, #4]
    e42a:	ble.n	e40c <_svfprintf_r+0xa7c>
    e42c:	add	r2, sp, #140	; 0x8c
    e42e:	mov	r1, r6
    e430:	mov	r0, r4
    e432:	bl	12928 <__ssprint_r>
    e436:	cmp	r0, #0
    e438:	bne.w	db84 <_svfprintf_r+0x1f4>
    e43c:	sub.w	r9, r9, #16
    e440:	cmp.w	r9, #16
    e444:	ldr	r1, [sp, #148]	; 0x94
    e446:	ldr	r3, [sp, #144]	; 0x90
    e448:	add	r2, sp, #192	; 0xc0
    e44a:	bgt.n	e41a <_svfprintf_r+0xa8a>
    e44c:	mov	r6, r7
    e44e:	mov	r4, r1
    e450:	mov	r7, r9
    e452:	mov	r9, r2
    e454:	adds	r3, #1
    e456:	ldr	r2, [sp, #44]	; 0x2c
    e458:	str	r3, [sp, #144]	; 0x90
    e45a:	add	r4, r7
    e45c:	cmp	r3, #7
    e45e:	str	r4, [sp, #148]	; 0x94
    e460:	stmia.w	r9, {r2, r7}
    e464:	bgt.w	e8e2 <_svfprintf_r+0xf52>
    e468:	add.w	r9, r9, #8
    e46c:	b.n	de24 <_svfprintf_r+0x494>
    e46e:	ldr	r3, [sp, #56]	; 0x38
    e470:	ldr	r5, [sp, #144]	; 0x90
    e472:	cmp	r3, #1
    e474:	ble.w	e88c <_svfprintf_r+0xefc>
    e478:	adds	r5, #1
    e47a:	adds	r4, #1
    e47c:	movs	r3, #1
    e47e:	cmp	r5, #7
    e480:	str	r4, [sp, #148]	; 0x94
    e482:	str	r5, [sp, #144]	; 0x90
    e484:	str.w	r6, [r9]
    e488:	str.w	r3, [r9, #4]
    e48c:	bgt.w	e8ae <_svfprintf_r+0xf1e>
    e490:	add.w	r9, r9, #8
    e494:	ldr	r2, [sp, #72]	; 0x48
    e496:	ldr	r3, [sp, #76]	; 0x4c
    e498:	str.w	r3, [r9]
    e49c:	adds	r5, #1
    e49e:	add	r4, r2
    e4a0:	cmp	r5, #7
    e4a2:	str	r4, [sp, #148]	; 0x94
    e4a4:	str	r5, [sp, #144]	; 0x90
    e4a6:	str.w	r2, [r9, #4]
    e4aa:	bgt.w	e8c8 <_svfprintf_r+0xf38>
    e4ae:	add.w	r9, r9, #8
    e4b2:	movs	r3, #0
    e4b4:	movs	r2, #0
    e4b6:	ldrd	r0, r1, [sp, #64]	; 0x40
    e4ba:	bl	b378 <__aeabi_dcmpeq>
    e4be:	ldr	r3, [sp, #56]	; 0x38
    e4c0:	cmp	r0, #0
    e4c2:	bne.w	e64c <_svfprintf_r+0xcbc>
    e4c6:	subs	r3, #1
    e4c8:	adds	r5, #1
    e4ca:	adds	r6, #1
    e4cc:	add	r4, r3
    e4ce:	cmp	r5, #7
    e4d0:	str	r5, [sp, #144]	; 0x90
    e4d2:	str	r4, [sp, #148]	; 0x94
    e4d4:	str.w	r6, [r9]
    e4d8:	str.w	r3, [r9, #4]
    e4dc:	bgt.w	e6ca <_svfprintf_r+0xd3a>
    e4e0:	add.w	r9, r9, #8
    e4e4:	ldr	r2, [sp, #84]	; 0x54
    e4e6:	str.w	r2, [r9, #4]
    e4ea:	adds	r5, #1
    e4ec:	add	r4, r2
    e4ee:	add	r3, sp, #124	; 0x7c
    e4f0:	cmp	r5, #7
    e4f2:	str	r4, [sp, #148]	; 0x94
    e4f4:	str	r5, [sp, #144]	; 0x90
    e4f6:	str.w	r3, [r9]
    e4fa:	ble.w	deb8 <_svfprintf_r+0x528>
    e4fe:	add	r2, sp, #140	; 0x8c
    e500:	ldr	r1, [sp, #20]
    e502:	ldr	r0, [sp, #24]
    e504:	bl	12928 <__ssprint_r>
    e508:	cmp	r0, #0
    e50a:	bne.w	db84 <_svfprintf_r+0x1f4>
    e50e:	ldr	r4, [sp, #148]	; 0x94
    e510:	add.w	r9, sp, #192	; 0xc0
    e514:	b.n	debc <_svfprintf_r+0x52c>
    e516:	add	r2, sp, #140	; 0x8c
    e518:	ldr	r1, [sp, #20]
    e51a:	ldr	r0, [sp, #24]
    e51c:	bl	12928 <__ssprint_r>
    e520:	cmp	r0, #0
    e522:	beq.w	df58 <_svfprintf_r+0x5c8>
    e526:	b.w	db84 <_svfprintf_r+0x1f4>
    e52a:	add	r2, sp, #140	; 0x8c
    e52c:	ldr	r1, [sp, #20]
    e52e:	ldr	r0, [sp, #24]
    e530:	bl	12928 <__ssprint_r>
    e534:	cmp	r0, #0
    e536:	bne.w	db84 <_svfprintf_r+0x1f4>
    e53a:	ldr	r4, [sp, #148]	; 0x94
    e53c:	add.w	r9, sp, #192	; 0xc0
    e540:	b.n	de96 <_svfprintf_r+0x506>
    e542:	add	r2, sp, #140	; 0x8c
    e544:	ldr	r1, [sp, #20]
    e546:	ldr	r0, [sp, #24]
    e548:	bl	12928 <__ssprint_r>
    e54c:	cmp	r0, #0
    e54e:	bne.w	db84 <_svfprintf_r+0x1f4>
    e552:	ldr	r4, [sp, #148]	; 0x94
    e554:	add.w	r9, sp, #192	; 0xc0
    e558:	b.n	ddfc <_svfprintf_r+0x46c>
    e55a:	add	r2, sp, #140	; 0x8c
    e55c:	ldr	r1, [sp, #20]
    e55e:	ldr	r0, [sp, #24]
    e560:	bl	12928 <__ssprint_r>
    e564:	cmp	r0, #0
    e566:	bne.w	db84 <_svfprintf_r+0x1f4>
    e56a:	ldr	r4, [sp, #148]	; 0x94
    e56c:	add.w	r9, sp, #192	; 0xc0
    e570:	b.n	de1c <_svfprintf_r+0x48c>
    e572:	cmp.w	fp, #0
    e576:	strb.w	r7, [sp, #111]	; 0x6f
    e57a:	blt.w	eb3c <_svfprintf_r+0x11ac>
    e57e:	bic.w	r3, r2, #128	; 0x80
    e582:	str	r3, [sp, #12]
    e584:	orrs.w	r3, r4, r5
    e588:	bne.w	e132 <_svfprintf_r+0x7a2>
    e58c:	cmp.w	fp, #0
    e590:	beq.w	e2ac <_svfprintf_r+0x91c>
    e594:	movs	r7, #0
    e596:	b.n	e308 <_svfprintf_r+0x978>
    e598:	ldr	r5, [sp, #116]	; 0x74
    e59a:	cmp	r5, #0
    e59c:	ble.w	eb42 <_svfprintf_r+0x11b2>
    e5a0:	ldr	r3, [sp, #60]	; 0x3c
    e5a2:	ldr	r2, [sp, #56]	; 0x38
    e5a4:	cmp	r3, r2
    e5a6:	it	ge
    e5a8:	movge	r3, r2
    e5aa:	cmp	r3, #0
    e5ac:	mov	r5, r3
    e5ae:	ble.n	e5cc <_svfprintf_r+0xc3c>
    e5b0:	ldr	r3, [sp, #144]	; 0x90
    e5b2:	str.w	r6, [r9]
    e5b6:	adds	r3, #1
    e5b8:	add	r4, r5
    e5ba:	cmp	r3, #7
    e5bc:	str	r4, [sp, #148]	; 0x94
    e5be:	str.w	r5, [r9, #4]
    e5c2:	str	r3, [sp, #144]	; 0x90
    e5c4:	bgt.w	ed1a <_svfprintf_r+0x138a>
    e5c8:	add.w	r9, r9, #8
    e5cc:	ldr	r3, [sp, #60]	; 0x3c
    e5ce:	cmp	r5, #0
    e5d0:	it	ge
    e5d2:	subge	r3, r3, r5
    e5d4:	cmp	r3, #0
    e5d6:	mov	r5, r3
    e5d8:	ble.w	e7cc <_svfprintf_r+0xe3c>
    e5dc:	ldr	r2, [pc, #260]	; (e6e4 <_svfprintf_r+0xd54>)
    e5de:	ldr	r3, [sp, #144]	; 0x90
    e5e0:	str	r2, [sp, #44]	; 0x2c
    e5e2:	cmp	r5, #16
    e5e4:	ble.w	eaee <_svfprintf_r+0x115e>
    e5e8:	mov	r2, r4
    e5ea:	movs	r7, #16
    e5ec:	ldr.w	fp, [sp, #24]
    e5f0:	ldr	r4, [sp, #20]
    e5f2:	b.n	e600 <_svfprintf_r+0xc70>
    e5f4:	add.w	r9, r9, #8
    e5f8:	subs	r5, #16
    e5fa:	cmp	r5, #16
    e5fc:	ble.w	eaec <_svfprintf_r+0x115c>
    e600:	adds	r3, #1
    e602:	adds	r2, #16
    e604:	cmp	r3, #7
    e606:	str	r2, [sp, #148]	; 0x94
    e608:	str	r3, [sp, #144]	; 0x90
    e60a:	str.w	sl, [r9]
    e60e:	str.w	r7, [r9, #4]
    e612:	ble.n	e5f4 <_svfprintf_r+0xc64>
    e614:	add	r2, sp, #140	; 0x8c
    e616:	mov	r1, r4
    e618:	mov	r0, fp
    e61a:	bl	12928 <__ssprint_r>
    e61e:	cmp	r0, #0
    e620:	bne.w	db84 <_svfprintf_r+0x1f4>
    e624:	ldr	r2, [sp, #148]	; 0x94
    e626:	ldr	r3, [sp, #144]	; 0x90
    e628:	add.w	r9, sp, #192	; 0xc0
    e62c:	b.n	e5f8 <_svfprintf_r+0xc68>
    e62e:	add	r2, sp, #140	; 0x8c
    e630:	ldr	r1, [sp, #20]
    e632:	ldr	r0, [sp, #24]
    e634:	bl	12928 <__ssprint_r>
    e638:	cmp	r0, #0
    e63a:	bne.w	db84 <_svfprintf_r+0x1f4>
    e63e:	ldrb.w	r7, [sp, #111]	; 0x6f
    e642:	ldr	r4, [sp, #148]	; 0x94
    e644:	add.w	r9, sp, #192	; 0xc0
    e648:	b.w	dddc <_svfprintf_r+0x44c>
    e64c:	subs	r6, r3, #1
    e64e:	cmp	r6, #0
    e650:	ble.w	e4e4 <_svfprintf_r+0xb54>
    e654:	ldr	r3, [pc, #140]	; (e6e4 <_svfprintf_r+0xd54>)
    e656:	str	r3, [sp, #44]	; 0x2c
    e658:	cmp	r6, #16
    e65a:	ble.n	e6b6 <_svfprintf_r+0xd26>
    e65c:	str.w	r8, [sp, #36]	; 0x24
    e660:	movs	r7, #16
    e662:	mov	r8, r6
    e664:	ldr.w	fp, [sp, #24]
    e668:	ldr	r6, [sp, #20]
    e66a:	b.n	e67a <_svfprintf_r+0xcea>
    e66c:	sub.w	r8, r8, #16
    e670:	cmp.w	r8, #16
    e674:	add.w	r9, r9, #8
    e678:	ble.n	e6b0 <_svfprintf_r+0xd20>
    e67a:	adds	r5, #1
    e67c:	adds	r4, #16
    e67e:	cmp	r5, #7
    e680:	str	r4, [sp, #148]	; 0x94
    e682:	str	r5, [sp, #144]	; 0x90
    e684:	str.w	sl, [r9]
    e688:	str.w	r7, [r9, #4]
    e68c:	ble.n	e66c <_svfprintf_r+0xcdc>
    e68e:	add	r2, sp, #140	; 0x8c
    e690:	mov	r1, r6
    e692:	mov	r0, fp
    e694:	bl	12928 <__ssprint_r>
    e698:	cmp	r0, #0
    e69a:	bne.w	db84 <_svfprintf_r+0x1f4>
    e69e:	sub.w	r8, r8, #16
    e6a2:	cmp.w	r8, #16
    e6a6:	ldr	r4, [sp, #148]	; 0x94
    e6a8:	ldr	r5, [sp, #144]	; 0x90
    e6aa:	add.w	r9, sp, #192	; 0xc0
    e6ae:	bgt.n	e67a <_svfprintf_r+0xcea>
    e6b0:	mov	r6, r8
    e6b2:	ldr.w	r8, [sp, #36]	; 0x24
    e6b6:	ldr	r3, [sp, #44]	; 0x2c
    e6b8:	adds	r5, #1
    e6ba:	add	r4, r6
    e6bc:	cmp	r5, #7
    e6be:	str	r4, [sp, #148]	; 0x94
    e6c0:	str	r5, [sp, #144]	; 0x90
    e6c2:	stmia.w	r9, {r3, r6}
    e6c6:	ble.w	e4e0 <_svfprintf_r+0xb50>
    e6ca:	add	r2, sp, #140	; 0x8c
    e6cc:	ldr	r1, [sp, #20]
    e6ce:	ldr	r0, [sp, #24]
    e6d0:	bl	12928 <__ssprint_r>
    e6d4:	cmp	r0, #0
    e6d6:	bne.w	db84 <_svfprintf_r+0x1f4>
    e6da:	ldr	r4, [sp, #148]	; 0x94
    e6dc:	ldr	r5, [sp, #144]	; 0x90
    e6de:	add.w	r9, sp, #192	; 0xc0
    e6e2:	b.n	e4e4 <_svfprintf_r+0xb54>
    e6e4:	.word	0x00013788
    e6e8:	ldr	r1, [sp, #12]
    e6ea:	ands.w	r2, r1, #16
    e6ee:	beq.w	ea98 <_svfprintf_r+0x1108>
    e6f2:	ldr	r0, [sp, #40]	; 0x28
    e6f4:	strb.w	r3, [sp, #111]	; 0x6f
    e6f8:	cmp.w	fp, #0
    e6fc:	ldr	r4, [r0, #0]
    e6fe:	add.w	r7, r0, #4
    e702:	mov.w	r5, #0
    e706:	blt.n	e756 <_svfprintf_r+0xdc6>
    e708:	mov	r2, r1
    e70a:	bic.w	r2, r2, #128	; 0x80
    e70e:	str	r2, [sp, #12]
    e710:	orrs.w	r2, r4, r5
    e714:	str	r7, [sp, #40]	; 0x28
    e716:	mov	r7, r3
    e718:	bne.w	dcec <_svfprintf_r+0x35c>
    e71c:	b.n	e0bc <_svfprintf_r+0x72c>
    e71e:	ldr	r3, [sp, #12]
    e720:	lsls	r0, r3, #27
    e722:	bmi.n	e77a <_svfprintf_r+0xdea>
    e724:	ldr	r3, [sp, #12]
    e726:	lsls	r1, r3, #25
    e728:	bpl.n	e77a <_svfprintf_r+0xdea>
    e72a:	ldr	r1, [sp, #40]	; 0x28
    e72c:	ldrsh.w	r4, [r1]
    e730:	adds	r1, #4
    e732:	asrs	r5, r4, #31
    e734:	mov	r2, r4
    e736:	mov	r3, r5
    e738:	str	r1, [sp, #40]	; 0x28
    e73a:	b.w	dcc6 <_svfprintf_r+0x336>
    e73e:	ldr	r1, [sp, #40]	; 0x28
    e740:	strb.w	r3, [sp, #111]	; 0x6f
    e744:	cmp.w	fp, #0
    e748:	ldr	r4, [r1, #0]
    e74a:	add.w	r7, r1, #4
    e74e:	mov.w	r5, #0
    e752:	bge.w	ebee <_svfprintf_r+0x125e>
    e756:	str	r7, [sp, #40]	; 0x28
    e758:	mov	r7, r3
    e75a:	orrs.w	r3, r4, r5
    e75e:	bne.w	dcec <_svfprintf_r+0x35c>
    e762:	b.n	e0c6 <_svfprintf_r+0x736>
    e764:	adds	r3, #1
    e766:	ldr	r2, [sp, #44]	; 0x2c
    e768:	str	r3, [sp, #144]	; 0x90
    e76a:	add	r4, r5
    e76c:	cmp	r3, #7
    e76e:	str	r4, [sp, #148]	; 0x94
    e770:	stmia.w	r9, {r2, r5}
    e774:	ble.w	deb8 <_svfprintf_r+0x528>
    e778:	b.n	e4fe <_svfprintf_r+0xb6e>
    e77a:	ldr	r2, [sp, #40]	; 0x28
    e77c:	ldr	r4, [r2, #0]
    e77e:	mov	r3, r2
    e780:	adds	r3, #4
    e782:	asrs	r5, r4, #31
    e784:	mov	r2, r4
    e786:	str	r3, [sp, #40]	; 0x28
    e788:	cmp	r2, #0
    e78a:	mov	r3, r5
    e78c:	sbcs.w	r3, r3, #0
    e790:	bge.w	dcd0 <_svfprintf_r+0x340>
    e794:	negs	r4, r4
    e796:	mov.w	r7, #45	; 0x2d
    e79a:	sbc.w	r5, r5, r5, lsl #1
    e79e:	cmp.w	fp, #0
    e7a2:	strb.w	r7, [sp, #111]	; 0x6f
    e7a6:	blt.w	dcec <_svfprintf_r+0x35c>
    e7aa:	ldr	r3, [sp, #12]
    e7ac:	bic.w	r3, r3, #128	; 0x80
    e7b0:	str	r3, [sp, #12]
    e7b2:	b.w	dcec <_svfprintf_r+0x35c>
    e7b6:	add	r2, sp, #140	; 0x8c
    e7b8:	ldr	r1, [sp, #20]
    e7ba:	ldr	r0, [sp, #24]
    e7bc:	bl	12928 <__ssprint_r>
    e7c0:	cmp	r0, #0
    e7c2:	bne.w	db84 <_svfprintf_r+0x1f4>
    e7c6:	ldr	r4, [sp, #148]	; 0x94
    e7c8:	add.w	r9, sp, #192	; 0xc0
    e7cc:	ldr	r2, [sp, #60]	; 0x3c
    e7ce:	ldr	r3, [sp, #116]	; 0x74
    e7d0:	add	r2, r6
    e7d2:	mov	r7, r2
    e7d4:	ldr	r2, [sp, #56]	; 0x38
    e7d6:	cmp	r3, r2
    e7d8:	blt.n	e86a <_svfprintf_r+0xeda>
    e7da:	ldr	r2, [sp, #12]
    e7dc:	lsls	r5, r2, #31
    e7de:	bmi.n	e86a <_svfprintf_r+0xeda>
    e7e0:	ldr	r1, [sp, #56]	; 0x38
    e7e2:	add	r6, r1
    e7e4:	subs	r5, r6, r7
    e7e6:	subs	r3, r1, r3
    e7e8:	cmp	r5, r3
    e7ea:	it	ge
    e7ec:	movge	r5, r3
    e7ee:	cmp	r5, #0
    e7f0:	mov	r6, r5
    e7f2:	ble.n	e810 <_svfprintf_r+0xe80>
    e7f4:	ldr	r2, [sp, #144]	; 0x90
    e7f6:	str.w	r7, [r9]
    e7fa:	adds	r2, #1
    e7fc:	add	r4, r5
    e7fe:	cmp	r2, #7
    e800:	str	r4, [sp, #148]	; 0x94
    e802:	str.w	r5, [r9, #4]
    e806:	str	r2, [sp, #144]	; 0x90
    e808:	bgt.w	ee08 <_svfprintf_r+0x1478>
    e80c:	add.w	r9, r9, #8
    e810:	cmp	r6, #0
    e812:	ite	ge
    e814:	subge	r5, r3, r6
    e816:	movlt	r5, r3
    e818:	cmp	r5, #0
    e81a:	ble.w	debc <_svfprintf_r+0x52c>
    e81e:	ldr	r2, [pc, #744]	; (eb08 <_svfprintf_r+0x1178>)
    e820:	ldr	r3, [sp, #144]	; 0x90
    e822:	str	r2, [sp, #44]	; 0x2c
    e824:	cmp	r5, #16
    e826:	ble.n	e764 <_svfprintf_r+0xdd4>
    e828:	movs	r6, #16
    e82a:	ldr	r7, [sp, #24]
    e82c:	ldr.w	fp, [sp, #20]
    e830:	b.n	e83c <_svfprintf_r+0xeac>
    e832:	add.w	r9, r9, #8
    e836:	subs	r5, #16
    e838:	cmp	r5, #16
    e83a:	ble.n	e764 <_svfprintf_r+0xdd4>
    e83c:	adds	r3, #1
    e83e:	adds	r4, #16
    e840:	cmp	r3, #7
    e842:	str	r4, [sp, #148]	; 0x94
    e844:	str	r3, [sp, #144]	; 0x90
    e846:	str.w	sl, [r9]
    e84a:	str.w	r6, [r9, #4]
    e84e:	ble.n	e832 <_svfprintf_r+0xea2>
    e850:	add	r2, sp, #140	; 0x8c
    e852:	mov	r1, fp
    e854:	mov	r0, r7
    e856:	bl	12928 <__ssprint_r>
    e85a:	cmp	r0, #0
    e85c:	bne.w	db84 <_svfprintf_r+0x1f4>
    e860:	ldr	r4, [sp, #148]	; 0x94
    e862:	ldr	r3, [sp, #144]	; 0x90
    e864:	add.w	r9, sp, #192	; 0xc0
    e868:	b.n	e836 <_svfprintf_r+0xea6>
    e86a:	ldr	r2, [sp, #144]	; 0x90
    e86c:	ldr	r0, [sp, #72]	; 0x48
    e86e:	ldr	r1, [sp, #76]	; 0x4c
    e870:	str.w	r1, [r9]
    e874:	adds	r2, #1
    e876:	add	r4, r0
    e878:	cmp	r2, #7
    e87a:	str	r4, [sp, #148]	; 0x94
    e87c:	str.w	r0, [r9, #4]
    e880:	str	r2, [sp, #144]	; 0x90
    e882:	bgt.w	edee <_svfprintf_r+0x145e>
    e886:	add.w	r9, r9, #8
    e88a:	b.n	e7e0 <_svfprintf_r+0xe50>
    e88c:	ldr	r3, [sp, #12]
    e88e:	lsls	r0, r3, #31
    e890:	bmi.w	e478 <_svfprintf_r+0xae8>
    e894:	adds	r5, #1
    e896:	adds	r4, #1
    e898:	movs	r3, #1
    e89a:	cmp	r5, #7
    e89c:	str	r4, [sp, #148]	; 0x94
    e89e:	str	r5, [sp, #144]	; 0x90
    e8a0:	str.w	r6, [r9]
    e8a4:	str.w	r3, [r9, #4]
    e8a8:	ble.w	e4e0 <_svfprintf_r+0xb50>
    e8ac:	b.n	e6ca <_svfprintf_r+0xd3a>
    e8ae:	add	r2, sp, #140	; 0x8c
    e8b0:	ldr	r1, [sp, #20]
    e8b2:	ldr	r0, [sp, #24]
    e8b4:	bl	12928 <__ssprint_r>
    e8b8:	cmp	r0, #0
    e8ba:	bne.w	db84 <_svfprintf_r+0x1f4>
    e8be:	ldr	r4, [sp, #148]	; 0x94
    e8c0:	ldr	r5, [sp, #144]	; 0x90
    e8c2:	add.w	r9, sp, #192	; 0xc0
    e8c6:	b.n	e494 <_svfprintf_r+0xb04>
    e8c8:	add	r2, sp, #140	; 0x8c
    e8ca:	ldr	r1, [sp, #20]
    e8cc:	ldr	r0, [sp, #24]
    e8ce:	bl	12928 <__ssprint_r>
    e8d2:	cmp	r0, #0
    e8d4:	bne.w	db84 <_svfprintf_r+0x1f4>
    e8d8:	ldr	r4, [sp, #148]	; 0x94
    e8da:	ldr	r5, [sp, #144]	; 0x90
    e8dc:	add.w	r9, sp, #192	; 0xc0
    e8e0:	b.n	e4b2 <_svfprintf_r+0xb22>
    e8e2:	add	r2, sp, #140	; 0x8c
    e8e4:	ldr	r1, [sp, #20]
    e8e6:	ldr	r0, [sp, #24]
    e8e8:	bl	12928 <__ssprint_r>
    e8ec:	cmp	r0, #0
    e8ee:	bne.w	db84 <_svfprintf_r+0x1f4>
    e8f2:	ldr	r4, [sp, #148]	; 0x94
    e8f4:	add.w	r9, sp, #192	; 0xc0
    e8f8:	b.w	de24 <_svfprintf_r+0x494>
    e8fc:	ldr	r1, [sp, #12]
    e8fe:	ands.w	r3, r1, #64	; 0x40
    e902:	beq.w	ea78 <_svfprintf_r+0x10e8>
    e906:	ldr	r0, [sp, #40]	; 0x28
    e908:	strb.w	r2, [sp, #111]	; 0x6f
    e90c:	mov	r3, r0
    e90e:	cmp.w	fp, #0
    e912:	add.w	r3, r3, #4
    e916:	ldrh	r4, [r0, #0]
    e918:	mov.w	r5, #0
    e91c:	blt.w	eca0 <_svfprintf_r+0x1310>
    e920:	bic.w	r1, r1, #128	; 0x80
    e924:	str	r1, [sp, #12]
    e926:	orrs.w	r1, r4, r5
    e92a:	str	r3, [sp, #40]	; 0x28
    e92c:	beq.w	e2e4 <_svfprintf_r+0x954>
    e930:	mov	r7, r2
    e932:	b.w	dbdc <_svfprintf_r+0x24c>
    e936:	ldr	r3, [sp, #12]
    e938:	lsls	r7, r3, #27
    e93a:	bmi.n	e954 <_svfprintf_r+0xfc4>
    e93c:	ldr	r3, [sp, #12]
    e93e:	lsls	r6, r3, #25
    e940:	bpl.n	e954 <_svfprintf_r+0xfc4>
    e942:	ldr	r2, [sp, #40]	; 0x28
    e944:	ldr	r3, [r2, #0]
    e946:	adds	r2, #4
    e948:	str	r2, [sp, #40]	; 0x28
    e94a:	ldrh.w	r2, [sp, #28]
    e94e:	strh	r2, [r3, #0]
    e950:	b.w	d9de <_svfprintf_r+0x4e>
    e954:	ldr	r2, [sp, #40]	; 0x28
    e956:	ldr	r3, [r2, #0]
    e958:	adds	r2, #4
    e95a:	str	r2, [sp, #40]	; 0x28
    e95c:	ldr	r2, [sp, #28]
    e95e:	str	r2, [r3, #0]
    e960:	b.w	d9de <_svfprintf_r+0x4e>
    e964:	ldrd	r0, r1, [sp, #64]	; 0x40
    e968:	mov	r2, r0
    e96a:	mov	r3, r1
    e96c:	bl	b3dc <__aeabi_dcmpun>
    e970:	cmp	r0, #0
    e972:	bne.w	ef70 <_svfprintf_r+0x15e0>
    e976:	ldr	r3, [sp, #52]	; 0x34
    e978:	cmp.w	fp, #4294967295
    e97c:	bic.w	r7, r3, #32
    e980:	beq.w	ee52 <_svfprintf_r+0x14c2>
    e984:	cmp	r7, #71	; 0x47
    e986:	beq.w	ec8e <_svfprintf_r+0x12fe>
    e98a:	ldr	r3, [sp, #68]	; 0x44
    e98c:	ldr	r2, [sp, #12]
    e98e:	cmp	r3, #0
    e990:	orr.w	r2, r2, #256	; 0x100
    e994:	str	r2, [sp, #44]	; 0x2c
    e996:	blt.w	ee8a <_svfprintf_r+0x14fa>
    e99a:	vldr	d7, [sp, #64]	; 0x40
    e99e:	vstr	d7, [sp, #96]	; 0x60
    e9a2:	movs	r3, #0
    e9a4:	str	r3, [sp, #16]
    e9a6:	ldr	r3, [sp, #52]	; 0x34
    e9a8:	cmp	r3, #102	; 0x66
    e9aa:	beq.w	ee58 <_svfprintf_r+0x14c8>
    e9ae:	cmp	r3, #70	; 0x46
    e9b0:	beq.w	ec3e <_svfprintf_r+0x12ae>
    e9b4:	cmp	r7, #69	; 0x45
    e9b6:	ite	eq
    e9b8:	addeq.w	r5, fp, #1
    e9bc:	movne	r5, fp
    e9be:	add	r2, sp, #132	; 0x84
    e9c0:	add	r3, sp, #120	; 0x78
    e9c2:	str	r2, [sp, #4]
    e9c4:	str	r3, [sp, #0]
    e9c6:	mov	r2, r5
    e9c8:	add	r3, sp, #116	; 0x74
    e9ca:	movs	r1, #2
    e9cc:	vldr	d0, [sp, #96]	; 0x60
    e9d0:	ldr	r0, [sp, #24]
    e9d2:	bl	10198 <_dtoa_r>
    e9d6:	ldr	r3, [sp, #52]	; 0x34
    e9d8:	cmp	r3, #103	; 0x67
    e9da:	mov	r6, r0
    e9dc:	bne.w	eeb6 <_svfprintf_r+0x1526>
    e9e0:	ldr	r3, [sp, #12]
    e9e2:	lsls	r2, r3, #31
    e9e4:	bpl.w	ef5a <_svfprintf_r+0x15ca>
    e9e8:	adds	r4, r6, r5
    e9ea:	movs	r2, #0
    e9ec:	movs	r3, #0
    e9ee:	ldrd	r0, r1, [sp, #96]	; 0x60
    e9f2:	bl	b378 <__aeabi_dcmpeq>
    e9f6:	cmp	r0, #0
    e9f8:	bne.w	ed16 <_svfprintf_r+0x1386>
    e9fc:	ldr	r3, [sp, #132]	; 0x84
    e9fe:	cmp	r4, r3
    ea00:	bls.n	ea10 <_svfprintf_r+0x1080>
    ea02:	movs	r1, #48	; 0x30
    ea04:	adds	r2, r3, #1
    ea06:	str	r2, [sp, #132]	; 0x84
    ea08:	strb	r1, [r3, #0]
    ea0a:	ldr	r3, [sp, #132]	; 0x84
    ea0c:	cmp	r4, r3
    ea0e:	bhi.n	ea04 <_svfprintf_r+0x1074>
    ea10:	subs	r3, r3, r6
    ea12:	cmp	r7, #71	; 0x47
    ea14:	str	r3, [sp, #56]	; 0x38
    ea16:	beq.w	ed08 <_svfprintf_r+0x1378>
    ea1a:	ldr	r3, [sp, #52]	; 0x34
    ea1c:	cmp	r3, #101	; 0x65
    ea1e:	ble.w	eed4 <_svfprintf_r+0x1544>
    ea22:	ldr	r3, [sp, #52]	; 0x34
    ea24:	cmp	r3, #102	; 0x66
    ea26:	ldr	r3, [sp, #116]	; 0x74
    ea28:	str	r3, [sp, #60]	; 0x3c
    ea2a:	beq.w	eeee <_svfprintf_r+0x155e>
    ea2e:	ldr	r2, [sp, #60]	; 0x3c
    ea30:	ldr	r1, [sp, #56]	; 0x38
    ea32:	cmp	r2, r1
    ea34:	blt.w	ee9c <_svfprintf_r+0x150c>
    ea38:	ldr	r3, [sp, #12]
    ea3a:	lsls	r1, r3, #31
    ea3c:	bmi.w	ef5e <_svfprintf_r+0x15ce>
    ea40:	bic.w	r3, r2, r2, asr #31
    ea44:	str	r2, [sp, #36]	; 0x24
    ea46:	movs	r2, #103	; 0x67
    ea48:	str	r2, [sp, #52]	; 0x34
    ea4a:	ldr	r2, [sp, #16]
    ea4c:	cmp	r2, #0
    ea4e:	bne.w	ecb0 <_svfprintf_r+0x1320>
    ea52:	str	r3, [sp, #16]
    ea54:	ldr	r3, [sp, #44]	; 0x2c
    ea56:	str	r3, [sp, #12]
    ea58:	mov	fp, r2
    ea5a:	ldrb.w	r7, [sp, #111]	; 0x6f
    ea5e:	b.w	dd34 <_svfprintf_r+0x3a4>
    ea62:	bic.w	r7, r7, #7
    ea66:	vldr	d7, [r7]
    ea6a:	add.w	r3, r7, #8
    ea6e:	vstr	d7, [sp, #64]	; 0x40
    ea72:	str	r3, [sp, #40]	; 0x28
    ea74:	b.w	df8c <_svfprintf_r+0x5fc>
    ea78:	ldr	r1, [sp, #40]	; 0x28
    ea7a:	strb.w	r3, [sp, #111]	; 0x6f
    ea7e:	cmp.w	fp, #0
    ea82:	ldr	r4, [r1, #0]
    ea84:	add.w	r7, r1, #4
    ea88:	mov.w	r5, #0
    ea8c:	bge.w	ebe8 <_svfprintf_r+0x1258>
    ea90:	str	r7, [sp, #40]	; 0x28
    ea92:	movs	r7, #0
    ea94:	b.w	dbdc <_svfprintf_r+0x24c>
    ea98:	ldr	r1, [sp, #12]
    ea9a:	ands.w	r3, r1, #64	; 0x40
    ea9e:	beq.w	e73e <_svfprintf_r+0xdae>
    eaa2:	ldr	r0, [sp, #40]	; 0x28
    eaa4:	strb.w	r2, [sp, #111]	; 0x6f
    eaa8:	mov	r3, r0
    eaaa:	cmp.w	fp, #0
    eaae:	add.w	r3, r3, #4
    eab2:	ldrh	r4, [r0, #0]
    eab4:	mov.w	r5, #0
    eab8:	blt.w	ec9a <_svfprintf_r+0x130a>
    eabc:	bic.w	r1, r1, #128	; 0x80
    eac0:	str	r1, [sp, #12]
    eac2:	orrs.w	r1, r4, r5
    eac6:	str	r3, [sp, #40]	; 0x28
    eac8:	mov	r7, r2
    eaca:	bne.w	dcec <_svfprintf_r+0x35c>
    eace:	b.w	e0bc <_svfprintf_r+0x72c>
    ead2:	ldr	r3, [sp, #12]
    ead4:	ldr	r2, [sp, #40]	; 0x28
    ead6:	tst.w	r3, #64	; 0x40
    eada:	mov	r3, r2
    eadc:	beq.w	eca4 <_svfprintf_r+0x1314>
    eae0:	adds	r3, #4
    eae2:	ldrh	r4, [r2, #0]
    eae4:	str	r3, [sp, #40]	; 0x28
    eae6:	movs	r5, #0
    eae8:	b.w	e0f6 <_svfprintf_r+0x766>
    eaec:	mov	r4, r2
    eaee:	adds	r3, #1
    eaf0:	ldr	r2, [sp, #44]	; 0x2c
    eaf2:	str	r3, [sp, #144]	; 0x90
    eaf4:	add	r4, r5
    eaf6:	cmp	r3, #7
    eaf8:	str	r4, [sp, #148]	; 0x94
    eafa:	stmia.w	r9, {r2, r5}
    eafe:	bgt.w	e7b6 <_svfprintf_r+0xe26>
    eb02:	add.w	r9, r9, #8
    eb06:	b.n	e7cc <_svfprintf_r+0xe3c>
    eb08:	.word	0x00013788
    eb0c:	movs	r7, #0
    eb0e:	cmp	fp, r7
    eb10:	strb.w	r7, [sp, #111]	; 0x6f
    eb14:	blt.w	e308 <_svfprintf_r+0x978>
    eb18:	ldr	r3, [sp, #12]
    eb1a:	bic.w	r3, r3, #128	; 0x80
    eb1e:	str	r3, [sp, #12]
    eb20:	b.w	e2a4 <_svfprintf_r+0x914>
    eb24:	add	r2, sp, #140	; 0x8c
    eb26:	ldr	r1, [sp, #20]
    eb28:	ldr	r0, [sp, #24]
    eb2a:	bl	12928 <__ssprint_r>
    eb2e:	cmp	r0, #0
    eb30:	bne.w	db84 <_svfprintf_r+0x1f4>
    eb34:	ldr	r4, [sp, #148]	; 0x94
    eb36:	add.w	r9, sp, #192	; 0xc0
    eb3a:	b.n	e34c <_svfprintf_r+0x9bc>
    eb3c:	ldr	r7, [sp, #40]	; 0x28
    eb3e:	b.w	e2fa <_svfprintf_r+0x96a>
    eb42:	ldr	r3, [sp, #144]	; 0x90
    eb44:	ldr	r2, [pc, #736]	; (ee28 <_svfprintf_r+0x1498>)
    eb46:	str.w	r2, [r9]
    eb4a:	adds	r3, #1
    eb4c:	adds	r4, #1
    eb4e:	movs	r2, #1
    eb50:	cmp	r3, #7
    eb52:	str	r4, [sp, #148]	; 0x94
    eb54:	str	r3, [sp, #144]	; 0x90
    eb56:	str.w	r2, [r9, #4]
    eb5a:	bgt.w	ec74 <_svfprintf_r+0x12e4>
    eb5e:	add.w	r9, r9, #8
    eb62:	cbnz	r5, eb70 <_svfprintf_r+0x11e0>
    eb64:	ldr	r3, [sp, #56]	; 0x38
    eb66:	cbnz	r3, eb70 <_svfprintf_r+0x11e0>
    eb68:	ldr	r3, [sp, #12]
    eb6a:	lsls	r7, r3, #31
    eb6c:	bpl.w	debc <_svfprintf_r+0x52c>
    eb70:	ldr	r3, [sp, #144]	; 0x90
    eb72:	ldr	r1, [sp, #72]	; 0x48
    eb74:	ldr	r2, [sp, #76]	; 0x4c
    eb76:	str.w	r2, [r9]
    eb7a:	adds	r3, #1
    eb7c:	add	r4, r1
    eb7e:	cmp	r3, #7
    eb80:	str	r4, [sp, #148]	; 0x94
    eb82:	str.w	r1, [r9, #4]
    eb86:	str	r3, [sp, #144]	; 0x90
    eb88:	bgt.w	ef26 <_svfprintf_r+0x1596>
    eb8c:	add.w	r9, r9, #8
    eb90:	negs	r5, r5
    eb92:	cmp	r5, #0
    eb94:	ble.w	ecec <_svfprintf_r+0x135c>
    eb98:	ldr	r2, [pc, #656]	; (ee2c <_svfprintf_r+0x149c>)
    eb9a:	str	r2, [sp, #44]	; 0x2c
    eb9c:	cmp	r5, #16
    eb9e:	ble.w	ed34 <_svfprintf_r+0x13a4>
    eba2:	mov	r2, r4
    eba4:	movs	r7, #16
    eba6:	ldr.w	fp, [sp, #24]
    ebaa:	ldr	r4, [sp, #20]
    ebac:	b.n	ebba <_svfprintf_r+0x122a>
    ebae:	add.w	r9, r9, #8
    ebb2:	subs	r5, #16
    ebb4:	cmp	r5, #16
    ebb6:	ble.w	ed32 <_svfprintf_r+0x13a2>
    ebba:	adds	r3, #1
    ebbc:	adds	r2, #16
    ebbe:	cmp	r3, #7
    ebc0:	str	r2, [sp, #148]	; 0x94
    ebc2:	str	r3, [sp, #144]	; 0x90
    ebc4:	str.w	sl, [r9]
    ebc8:	str.w	r7, [r9, #4]
    ebcc:	ble.n	ebae <_svfprintf_r+0x121e>
    ebce:	add	r2, sp, #140	; 0x8c
    ebd0:	mov	r1, r4
    ebd2:	mov	r0, fp
    ebd4:	bl	12928 <__ssprint_r>
    ebd8:	cmp	r0, #0
    ebda:	bne.w	db84 <_svfprintf_r+0x1f4>
    ebde:	ldr	r2, [sp, #148]	; 0x94
    ebe0:	ldr	r3, [sp, #144]	; 0x90
    ebe2:	add.w	r9, sp, #192	; 0xc0
    ebe6:	b.n	ebb2 <_svfprintf_r+0x1222>
    ebe8:	ldr	r2, [sp, #12]
    ebea:	b.w	e060 <_svfprintf_r+0x6d0>
    ebee:	ldr	r2, [sp, #12]
    ebf0:	b.n	e70a <_svfprintf_r+0xd7a>
    ebf2:	ldr	r3, [sp, #12]
    ebf4:	orr.w	r3, r3, #32
    ebf8:	str	r3, [sp, #12]
    ebfa:	add.w	r8, r8, #1
    ebfe:	ldrb.w	r3, [r8]
    ec02:	b.w	da44 <_svfprintf_r+0xb4>
    ec06:	add	r2, sp, #140	; 0x8c
    ec08:	ldr	r1, [sp, #20]
    ec0a:	ldr	r0, [sp, #24]
    ec0c:	bl	12928 <__ssprint_r>
    ec10:	cmp	r0, #0
    ec12:	bne.w	db84 <_svfprintf_r+0x1f4>
    ec16:	ldr	r4, [sp, #148]	; 0x94
    ec18:	add.w	r9, sp, #192	; 0xc0
    ec1c:	b.w	e37c <_svfprintf_r+0x9ec>
    ec20:	movs	r1, #64	; 0x40
    ec22:	ldr	r0, [sp, #24]
    ec24:	bl	b928 <_malloc_r>
    ec28:	ldr	r2, [sp, #20]
    ec2a:	str	r0, [r2, #0]
    ec2c:	str	r0, [r2, #16]
    ec2e:	cmp	r0, #0
    ec30:	beq.w	f01a <_svfprintf_r+0x168a>
    ec34:	ldr	r2, [sp, #20]
    ec36:	movs	r3, #64	; 0x40
    ec38:	str	r3, [r2, #20]
    ec3a:	b.w	d9be <_svfprintf_r+0x2e>
    ec3e:	add	r2, sp, #132	; 0x84
    ec40:	add	r3, sp, #120	; 0x78
    ec42:	str	r2, [sp, #4]
    ec44:	str	r3, [sp, #0]
    ec46:	mov	r2, fp
    ec48:	add	r3, sp, #116	; 0x74
    ec4a:	movs	r1, #3
    ec4c:	vldr	d0, [sp, #96]	; 0x60
    ec50:	ldr	r0, [sp, #24]
    ec52:	bl	10198 <_dtoa_r>
    ec56:	mov	r5, fp
    ec58:	mov	r6, r0
    ec5a:	ldr	r3, [sp, #52]	; 0x34
    ec5c:	cmp	r3, #70	; 0x46
    ec5e:	add.w	r4, r6, r5
    ec62:	bne.w	e9ea <_svfprintf_r+0x105a>
    ec66:	ldrb	r3, [r6, #0]
    ec68:	cmp	r3, #48	; 0x30
    ec6a:	beq.w	ef7c <_svfprintf_r+0x15ec>
    ec6e:	ldr	r5, [sp, #116]	; 0x74
    ec70:	add	r4, r5
    ec72:	b.n	e9ea <_svfprintf_r+0x105a>
    ec74:	add	r2, sp, #140	; 0x8c
    ec76:	ldr	r1, [sp, #20]
    ec78:	ldr	r0, [sp, #24]
    ec7a:	bl	12928 <__ssprint_r>
    ec7e:	cmp	r0, #0
    ec80:	bne.w	db84 <_svfprintf_r+0x1f4>
    ec84:	ldr	r5, [sp, #116]	; 0x74
    ec86:	ldr	r4, [sp, #148]	; 0x94
    ec88:	add.w	r9, sp, #192	; 0xc0
    ec8c:	b.n	eb62 <_svfprintf_r+0x11d2>
    ec8e:	cmp.w	fp, #0
    ec92:	it	eq
    ec94:	moveq.w	fp, #1
    ec98:	b.n	e98a <_svfprintf_r+0xffa>
    ec9a:	str	r3, [sp, #40]	; 0x28
    ec9c:	mov	r7, r2
    ec9e:	b.n	e75a <_svfprintf_r+0xdca>
    eca0:	str	r3, [sp, #40]	; 0x28
    eca2:	b.n	ea92 <_svfprintf_r+0x1102>
    eca4:	adds	r3, #4
    eca6:	ldr	r4, [r2, #0]
    eca8:	str	r3, [sp, #40]	; 0x28
    ecaa:	movs	r5, #0
    ecac:	b.w	e0f6 <_svfprintf_r+0x766>
    ecb0:	movs	r7, #45	; 0x2d
    ecb2:	str	r3, [sp, #16]
    ecb4:	ldr	r3, [sp, #44]	; 0x2c
    ecb6:	str	r3, [sp, #12]
    ecb8:	strb.w	r7, [sp, #111]	; 0x6f
    ecbc:	mov.w	fp, #0
    ecc0:	b.w	dd36 <_svfprintf_r+0x3a6>
    ecc4:	mov	r0, r6
    ecc6:	bl	c780 <strlen>
    ecca:	mov	fp, r4
    eccc:	mov	r3, r0
    ecce:	str	r0, [sp, #36]	; 0x24
    ecd0:	b.w	e218 <_svfprintf_r+0x888>
    ecd4:	add	r2, sp, #140	; 0x8c
    ecd6:	ldr	r1, [sp, #20]
    ecd8:	ldr	r0, [sp, #24]
    ecda:	bl	12928 <__ssprint_r>
    ecde:	cmp	r0, #0
    ece0:	bne.w	db84 <_svfprintf_r+0x1f4>
    ece4:	ldr	r4, [sp, #148]	; 0x94
    ece6:	ldr	r3, [sp, #144]	; 0x90
    ece8:	add.w	r9, sp, #192	; 0xc0
    ecec:	ldr	r1, [sp, #56]	; 0x38
    ecee:	str.w	r6, [r9]
    ecf2:	adds	r3, #1
    ecf4:	add	r4, r1
    ecf6:	cmp	r3, #7
    ecf8:	str	r4, [sp, #148]	; 0x94
    ecfa:	str	r3, [sp, #144]	; 0x90
    ecfc:	str.w	r1, [r9, #4]
    ed00:	ble.w	deb8 <_svfprintf_r+0x528>
    ed04:	b.w	e4fe <_svfprintf_r+0xb6e>
    ed08:	ldr	r3, [sp, #116]	; 0x74
    ed0a:	adds	r5, r3, #3
    ed0c:	blt.n	ed4c <_svfprintf_r+0x13bc>
    ed0e:	cmp	fp, r3
    ed10:	blt.n	ed4c <_svfprintf_r+0x13bc>
    ed12:	str	r3, [sp, #60]	; 0x3c
    ed14:	b.n	ea2e <_svfprintf_r+0x109e>
    ed16:	mov	r3, r4
    ed18:	b.n	ea10 <_svfprintf_r+0x1080>
    ed1a:	add	r2, sp, #140	; 0x8c
    ed1c:	ldr	r1, [sp, #20]
    ed1e:	ldr	r0, [sp, #24]
    ed20:	bl	12928 <__ssprint_r>
    ed24:	cmp	r0, #0
    ed26:	bne.w	db84 <_svfprintf_r+0x1f4>
    ed2a:	ldr	r4, [sp, #148]	; 0x94
    ed2c:	add.w	r9, sp, #192	; 0xc0
    ed30:	b.n	e5cc <_svfprintf_r+0xc3c>
    ed32:	mov	r4, r2
    ed34:	adds	r3, #1
    ed36:	ldr	r2, [sp, #44]	; 0x2c
    ed38:	str	r3, [sp, #144]	; 0x90
    ed3a:	add	r4, r5
    ed3c:	cmp	r3, #7
    ed3e:	str	r4, [sp, #148]	; 0x94
    ed40:	stmia.w	r9, {r2, r5}
    ed44:	bgt.n	ecd4 <_svfprintf_r+0x1344>
    ed46:	add.w	r9, r9, #8
    ed4a:	b.n	ecec <_svfprintf_r+0x135c>
    ed4c:	ldr	r2, [sp, #52]	; 0x34
    ed4e:	subs	r2, #2
    ed50:	str	r2, [sp, #52]	; 0x34
    ed52:	subs	r3, #1
    ed54:	cmp	r3, #0
    ed56:	ldrb.w	r2, [sp, #52]	; 0x34
    ed5a:	str	r3, [sp, #116]	; 0x74
    ed5c:	it	lt
    ed5e:	neglt	r3, r3
    ed60:	strb.w	r2, [sp, #124]	; 0x7c
    ed64:	ite	lt
    ed66:	movlt	r2, #45	; 0x2d
    ed68:	movge	r2, #43	; 0x2b
    ed6a:	cmp	r3, #9
    ed6c:	strb.w	r2, [sp, #125]	; 0x7d
    ed70:	ble.w	ef4a <_svfprintf_r+0x15ba>
    ed74:	add.w	r0, sp, #139	; 0x8b
    ed78:	mov	r4, r0
    ed7a:	ldr	r2, [pc, #180]	; (ee30 <_svfprintf_r+0x14a0>)
    ed7c:	smull	r2, r1, r2, r3
    ed80:	asrs	r2, r3, #31
    ed82:	rsb	r2, r2, r1, asr #2
    ed86:	add.w	r1, r2, r2, lsl #2
    ed8a:	sub.w	r3, r3, r1, lsl #1
    ed8e:	add.w	r1, r3, #48	; 0x30
    ed92:	cmp	r2, #9
    ed94:	mov	r3, r2
    ed96:	strb.w	r1, [r4, #-1]!
    ed9a:	bgt.n	ed7a <_svfprintf_r+0x13ea>
    ed9c:	mov	r1, r4
    ed9e:	adds	r3, #48	; 0x30
    eda0:	uxtb	r2, r3
    eda2:	strb.w	r2, [r1, #-1]!
    eda6:	cmp	r0, r1
    eda8:	bls.w	f014 <_svfprintf_r+0x1684>
    edac:	add.w	r1, sp, #126	; 0x7e
    edb0:	mov	r3, r4
    edb2:	b.n	edb8 <_svfprintf_r+0x1428>
    edb4:	ldrb.w	r2, [r3], #1
    edb8:	strb.w	r2, [r1], #1
    edbc:	cmp	r0, r3
    edbe:	bne.n	edb4 <_svfprintf_r+0x1424>
    edc0:	adds	r3, r0, #1
    edc2:	subs	r3, r3, r4
    edc4:	add.w	r2, sp, #126	; 0x7e
    edc8:	add	r3, r2
    edca:	add	r2, sp, #124	; 0x7c
    edcc:	subs	r3, r3, r2
    edce:	ldr	r2, [sp, #56]	; 0x38
    edd0:	str	r3, [sp, #84]	; 0x54
    edd2:	cmp	r2, #1
    edd4:	add	r3, r2
    edd6:	str	r3, [sp, #36]	; 0x24
    edd8:	ble.w	efaa <_svfprintf_r+0x161a>
    eddc:	ldr	r3, [sp, #36]	; 0x24
    edde:	ldr	r2, [sp, #72]	; 0x48
    ede0:	add	r3, r2
    ede2:	movs	r2, #0
    ede4:	str	r3, [sp, #36]	; 0x24
    ede6:	str	r2, [sp, #60]	; 0x3c
    ede8:	bic.w	r3, r3, r3, asr #31
    edec:	b.n	ea4a <_svfprintf_r+0x10ba>
    edee:	add	r2, sp, #140	; 0x8c
    edf0:	ldr	r1, [sp, #20]
    edf2:	ldr	r0, [sp, #24]
    edf4:	bl	12928 <__ssprint_r>
    edf8:	cmp	r0, #0
    edfa:	bne.w	db84 <_svfprintf_r+0x1f4>
    edfe:	ldr	r3, [sp, #116]	; 0x74
    ee00:	ldr	r4, [sp, #148]	; 0x94
    ee02:	add.w	r9, sp, #192	; 0xc0
    ee06:	b.n	e7e0 <_svfprintf_r+0xe50>
    ee08:	add	r2, sp, #140	; 0x8c
    ee0a:	ldr	r1, [sp, #20]
    ee0c:	ldr	r0, [sp, #24]
    ee0e:	bl	12928 <__ssprint_r>
    ee12:	cmp	r0, #0
    ee14:	bne.w	db84 <_svfprintf_r+0x1f4>
    ee18:	ldr	r3, [sp, #116]	; 0x74
    ee1a:	ldr	r2, [sp, #56]	; 0x38
    ee1c:	ldr	r4, [sp, #148]	; 0x94
    ee1e:	subs	r3, r2, r3
    ee20:	add.w	r9, sp, #192	; 0xc0
    ee24:	b.n	e810 <_svfprintf_r+0xe80>
    ee26:	nop
    ee28:	.word	0x000137d8
    ee2c:	.word	0x00013788
    ee30:	.word	0x66666667
    ee34:	cmp	r5, #6
    ee36:	mov	r3, r5
    ee38:	it	cs
    ee3a:	movcs	r3, #6
    ee3c:	str	r3, [sp, #36]	; 0x24
    ee3e:	bic.w	r3, r3, r3, asr #31
    ee42:	mov	fp, r6
    ee44:	str	r7, [sp, #40]	; 0x28
    ee46:	str	r6, [sp, #60]	; 0x3c
    ee48:	mov	r7, r6
    ee4a:	str	r3, [sp, #16]
    ee4c:	ldr	r6, [pc, #536]	; (f068 <_svfprintf_r+0x16d8>)
    ee4e:	b.w	dd34 <_svfprintf_r+0x3a4>
    ee52:	mov.w	fp, #6
    ee56:	b.n	e98a <_svfprintf_r+0xffa>
    ee58:	add	r2, sp, #132	; 0x84
    ee5a:	add	r3, sp, #120	; 0x78
    ee5c:	str	r2, [sp, #4]
    ee5e:	str	r3, [sp, #0]
    ee60:	mov	r2, fp
    ee62:	add	r3, sp, #116	; 0x74
    ee64:	movs	r1, #3
    ee66:	vldr	d0, [sp, #96]	; 0x60
    ee6a:	ldr	r0, [sp, #24]
    ee6c:	bl	10198 <_dtoa_r>
    ee70:	mov	r5, fp
    ee72:	mov	r6, r0
    ee74:	add.w	r4, r0, fp
    ee78:	b.n	ec66 <_svfprintf_r+0x12d6>
    ee7a:	movs	r7, #45	; 0x2d
    ee7c:	strb.w	r7, [sp, #111]	; 0x6f
    ee80:	b.w	dfda <_svfprintf_r+0x64a>
    ee84:	str	r3, [sp, #12]
    ee86:	b.w	e132 <_svfprintf_r+0x7a2>
    ee8a:	ldrd	r1, r2, [sp, #64]	; 0x40
    ee8e:	add.w	r3, r2, #2147483648	; 0x80000000
    ee92:	str	r3, [sp, #100]	; 0x64
    ee94:	movs	r3, #45	; 0x2d
    ee96:	str	r1, [sp, #96]	; 0x60
    ee98:	str	r3, [sp, #16]
    ee9a:	b.n	e9a6 <_svfprintf_r+0x1016>
    ee9c:	ldr	r2, [sp, #72]	; 0x48
    ee9e:	ldr	r3, [sp, #56]	; 0x38
    eea0:	add	r3, r2
    eea2:	ldr	r2, [sp, #60]	; 0x3c
    eea4:	str	r3, [sp, #36]	; 0x24
    eea6:	cmp	r2, #0
    eea8:	ble.w	efbe <_svfprintf_r+0x162e>
    eeac:	movs	r2, #103	; 0x67
    eeae:	bic.w	r3, r3, r3, asr #31
    eeb2:	str	r2, [sp, #52]	; 0x34
    eeb4:	b.n	ea4a <_svfprintf_r+0x10ba>
    eeb6:	ldr	r3, [sp, #52]	; 0x34
    eeb8:	cmp	r3, #71	; 0x47
    eeba:	bne.w	e9e8 <_svfprintf_r+0x1058>
    eebe:	ldr	r3, [sp, #12]
    eec0:	lsls	r3, r3, #31
    eec2:	bmi.w	ec5a <_svfprintf_r+0x12ca>
    eec6:	ldr	r3, [sp, #132]	; 0x84
    eec8:	cmp	r7, #71	; 0x47
    eeca:	sub.w	r3, r3, r6
    eece:	str	r3, [sp, #56]	; 0x38
    eed0:	beq.w	ed08 <_svfprintf_r+0x1378>
    eed4:	ldr	r3, [sp, #116]	; 0x74
    eed6:	b.n	ed52 <_svfprintf_r+0x13c2>
    eed8:	bic.w	r3, r5, r5, asr #31
    eedc:	str	r7, [sp, #40]	; 0x28
    eede:	str	r3, [sp, #16]
    eee0:	str	r5, [sp, #36]	; 0x24
    eee2:	mov	fp, r0
    eee4:	str	r0, [sp, #60]	; 0x3c
    eee6:	ldrb.w	r7, [sp, #111]	; 0x6f
    eeea:	b.w	dd34 <_svfprintf_r+0x3a4>
    eeee:	cmp	r3, #0
    eef0:	ble.n	efce <_svfprintf_r+0x163e>
    eef2:	cmp.w	fp, #0
    eef6:	bne.n	ef98 <_svfprintf_r+0x1608>
    eef8:	ldr	r2, [sp, #12]
    eefa:	lsls	r4, r2, #31
    eefc:	bmi.n	ef98 <_svfprintf_r+0x1608>
    eefe:	mov	r2, r3
    ef00:	str	r2, [sp, #36]	; 0x24
    ef02:	bic.w	r3, r3, r3, asr #31
    ef06:	b.n	ea4a <_svfprintf_r+0x10ba>
    ef08:	ldr	r3, [sp, #12]
    ef0a:	lsls	r3, r3, #31
    ef0c:	mov	r7, fp
    ef0e:	bpl.n	ef1c <_svfprintf_r+0x158c>
    ef10:	add	r6, sp, #256	; 0x100
    ef12:	movs	r3, #48	; 0x30
    ef14:	strb.w	r3, [r6, #-65]!
    ef18:	b.w	dd20 <_svfprintf_r+0x390>
    ef1c:	str.w	fp, [sp, #36]	; 0x24
    ef20:	add	r6, sp, #192	; 0xc0
    ef22:	b.w	dd26 <_svfprintf_r+0x396>
    ef26:	add	r2, sp, #140	; 0x8c
    ef28:	ldr	r1, [sp, #20]
    ef2a:	ldr	r0, [sp, #24]
    ef2c:	bl	12928 <__ssprint_r>
    ef30:	cmp	r0, #0
    ef32:	bne.w	db84 <_svfprintf_r+0x1f4>
    ef36:	ldr	r5, [sp, #116]	; 0x74
    ef38:	ldr	r4, [sp, #148]	; 0x94
    ef3a:	ldr	r3, [sp, #144]	; 0x90
    ef3c:	add.w	r9, sp, #192	; 0xc0
    ef40:	b.n	eb90 <_svfprintf_r+0x1200>
    ef42:	mov	r8, r4
    ef44:	movs	r5, #0
    ef46:	b.w	da48 <_svfprintf_r+0xb8>
    ef4a:	adds	r3, #48	; 0x30
    ef4c:	movs	r2, #48	; 0x30
    ef4e:	strb.w	r3, [sp, #127]	; 0x7f
    ef52:	strb.w	r2, [sp, #126]	; 0x7e
    ef56:	add	r3, sp, #128	; 0x80
    ef58:	b.n	edca <_svfprintf_r+0x143a>
    ef5a:	ldr	r3, [sp, #132]	; 0x84
    ef5c:	b.n	ea10 <_svfprintf_r+0x1080>
    ef5e:	ldr	r2, [sp, #72]	; 0x48
    ef60:	ldr	r3, [sp, #60]	; 0x3c
    ef62:	add	r3, r2
    ef64:	movs	r2, #103	; 0x67
    ef66:	str	r3, [sp, #36]	; 0x24
    ef68:	str	r2, [sp, #52]	; 0x34
    ef6a:	bic.w	r3, r3, r3, asr #31
    ef6e:	b.n	ea4a <_svfprintf_r+0x10ba>
    ef70:	ldr	r6, [pc, #248]	; (f06c <_svfprintf_r+0x16dc>)
    ef72:	ldr	r3, [pc, #252]	; (f070 <_svfprintf_r+0x16e0>)
    ef74:	ldrb.w	r7, [sp, #111]	; 0x6f
    ef78:	b.w	dfde <_svfprintf_r+0x64e>
    ef7c:	movs	r2, #0
    ef7e:	movs	r3, #0
    ef80:	ldrd	r0, r1, [sp, #96]	; 0x60
    ef84:	bl	b378 <__aeabi_dcmpeq>
    ef88:	cmp	r0, #0
    ef8a:	bne.w	ec6e <_svfprintf_r+0x12de>
    ef8e:	rsb	r5, r5, #1
    ef92:	str	r5, [sp, #116]	; 0x74
    ef94:	add	r4, r5
    ef96:	b.n	e9ea <_svfprintf_r+0x105a>
    ef98:	ldr	r3, [sp, #60]	; 0x3c
    ef9a:	ldr	r2, [sp, #72]	; 0x48
    ef9c:	adds	r5, r3, r2
    ef9e:	add.w	r3, r5, fp
    efa2:	str	r3, [sp, #36]	; 0x24
    efa4:	bic.w	r3, r3, r3, asr #31
    efa8:	b.n	ea4a <_svfprintf_r+0x10ba>
    efaa:	ldr	r3, [sp, #12]
    efac:	ands.w	r3, r3, #1
    efb0:	bne.w	eddc <_svfprintf_r+0x144c>
    efb4:	str	r3, [sp, #60]	; 0x3c
    efb6:	ldr	r3, [sp, #36]	; 0x24
    efb8:	bic.w	r3, r3, r3, asr #31
    efbc:	b.n	ea4a <_svfprintf_r+0x10ba>
    efbe:	ldr	r3, [sp, #60]	; 0x3c
    efc0:	ldr	r2, [sp, #36]	; 0x24
    efc2:	rsb	r3, r3, #1
    efc6:	add	r2, r3
    efc8:	mov	r3, r2
    efca:	str	r2, [sp, #36]	; 0x24
    efcc:	b.n	eeac <_svfprintf_r+0x151c>
    efce:	cmp.w	fp, #0
    efd2:	bne.n	efda <_svfprintf_r+0x164a>
    efd4:	ldr	r3, [sp, #12]
    efd6:	lsls	r0, r3, #31
    efd8:	bpl.n	efea <_svfprintf_r+0x165a>
    efda:	ldr	r3, [sp, #72]	; 0x48
    efdc:	adds	r5, r3, #1
    efde:	add.w	r3, r5, fp
    efe2:	str	r3, [sp, #36]	; 0x24
    efe4:	bic.w	r3, r3, r3, asr #31
    efe8:	b.n	ea4a <_svfprintf_r+0x10ba>
    efea:	movs	r3, #1
    efec:	str	r3, [sp, #36]	; 0x24
    efee:	b.n	ea4a <_svfprintf_r+0x10ba>
    eff0:	ldr	r0, [sp, #40]	; 0x28
    eff2:	ldrb.w	r3, [r8, #1]
    eff6:	ldr	r5, [r0, #0]
    eff8:	adds	r0, #4
    effa:	cmp	r5, #0
    effc:	str	r0, [sp, #40]	; 0x28
    effe:	mov	r8, r4
    f000:	bge.w	da44 <_svfprintf_r+0xb4>
    f004:	mov.w	r5, #4294967295
    f008:	b.w	da44 <_svfprintf_r+0xb4>
    f00c:	strb.w	r1, [sp, #111]	; 0x6f
    f010:	b.w	dba6 <_svfprintf_r+0x216>
    f014:	add.w	r3, sp, #126	; 0x7e
    f018:	b.n	edca <_svfprintf_r+0x143a>
    f01a:	ldr	r2, [sp, #24]
    f01c:	movs	r3, #12
    f01e:	str	r3, [r2, #0]
    f020:	mov.w	r0, #4294967295
    f024:	b.w	db96 <_svfprintf_r+0x206>
    f028:	strb.w	r1, [sp, #111]	; 0x6f
    f02c:	b.w	dca0 <_svfprintf_r+0x310>
    f030:	strb.w	r1, [sp, #111]	; 0x6f
    f034:	b.w	df6c <_svfprintf_r+0x5dc>
    f038:	strb.w	r1, [sp, #111]	; 0x6f
    f03c:	b.w	e0da <_svfprintf_r+0x74a>
    f040:	strb.w	r1, [sp, #111]	; 0x6f
    f044:	b.w	e07e <_svfprintf_r+0x6ee>
    f048:	strb.w	r1, [sp, #111]	; 0x6f
    f04c:	b.w	e02a <_svfprintf_r+0x69a>
    f050:	strb.w	r1, [sp, #111]	; 0x6f
    f054:	b.w	e2c2 <_svfprintf_r+0x932>
    f058:	strb.w	r1, [sp, #111]	; 0x6f
    f05c:	b.w	e280 <_svfprintf_r+0x8f0>
    f060:	strb.w	r1, [sp, #111]	; 0x6f
    f064:	b.w	e244 <_svfprintf_r+0x8b4>
    f068:	.word	0x000137d0
    f06c:	.word	0x000137a4
    f070:	.word	0x000137a0

0000f074 <__ssvfscanf_r>:
    f074:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f078:	mov	fp, r1
    f07a:	ldrsh.w	r1, [r1, #12]
    f07e:	sub.w	sp, sp, #692	; 0x2b4
    f082:	mov	sl, r0
    f084:	lsls	r0, r1, #18
    f086:	mov	r4, r2
    f088:	str	r3, [sp, #20]
    f08a:	bmi.n	f0a0 <__ssvfscanf_r+0x2c>
    f08c:	ldr.w	r3, [fp, #100]	; 0x64
    f090:	orr.w	r1, r1, #8192	; 0x2000
    f094:	bic.w	r3, r3, #8192	; 0x2000
    f098:	strh.w	r1, [fp, #12]
    f09c:	str.w	r3, [fp, #100]	; 0x64
    f0a0:	mov	r6, r4
    f0a2:	movs	r3, #0
    f0a4:	str	r3, [sp, #28]
    f0a6:	str	r3, [sp, #16]
    f0a8:	mov	r7, r3
    f0aa:	str	r3, [sp, #24]
    f0ac:	ldrb.w	r3, [r6], #1
    f0b0:	str	r3, [sp, #68]	; 0x44
    f0b2:	cbz	r3, f110 <__ssvfscanf_r+0x9c>
    f0b4:	bl	b8f4 <__locale_ctype_ptr>
    f0b8:	ldr	r2, [sp, #68]	; 0x44
    f0ba:	add	r0, r2
    f0bc:	ldrb	r3, [r0, #1]
    f0be:	and.w	r3, r3, #8
    f0c2:	and.w	r5, r3, #255	; 0xff
    f0c6:	cbz	r3, f11a <__ssvfscanf_r+0xa6>
    f0c8:	ldr.w	r3, [fp, #4]
    f0cc:	b.n	f0f2 <__ssvfscanf_r+0x7e>
    f0ce:	bl	b8f4 <__locale_ctype_ptr>
    f0d2:	ldr.w	r3, [fp]
    f0d6:	ldrb	r2, [r3, #0]
    f0d8:	add	r0, r2
    f0da:	adds	r3, #1
    f0dc:	ldrb	r2, [r0, #1]
    f0de:	lsls	r1, r2, #28
    f0e0:	bpl.n	f102 <__ssvfscanf_r+0x8e>
    f0e2:	ldr.w	r2, [fp, #4]
    f0e6:	str.w	r3, [fp]
    f0ea:	subs	r3, r2, #1
    f0ec:	adds	r7, #1
    f0ee:	str.w	r3, [fp, #4]
    f0f2:	cmp	r3, #0
    f0f4:	bgt.n	f0ce <__ssvfscanf_r+0x5a>
    f0f6:	mov	r1, fp
    f0f8:	mov	r0, sl
    f0fa:	bl	12aac <__ssrefill_r>
    f0fe:	cmp	r0, #0
    f100:	beq.n	f0ce <__ssvfscanf_r+0x5a>
    f102:	mov	r4, r6
    f104:	mov	r6, r4
    f106:	ldrb.w	r3, [r6], #1
    f10a:	str	r3, [sp, #68]	; 0x44
    f10c:	cmp	r3, #0
    f10e:	bne.n	f0b4 <__ssvfscanf_r+0x40>
    f110:	ldr	r0, [sp, #24]
    f112:	add.w	sp, sp, #692	; 0x2b4
    f116:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f11a:	cmp	r2, #37	; 0x25
    f11c:	bne.w	f228 <__ssvfscanf_r+0x1b4>
    f120:	ldrb.w	r8, [r4, #1]
    f124:	mov	r4, r5
    f126:	adds	r3, r6, #1
    f128:	cmp.w	r8, #120	; 0x78
    f12c:	bhi.w	f5b6 <__ssvfscanf_r+0x542>
    f130:	tbh	[pc, r8, lsl #1]
    f134:	.word	0x02410092
    f138:	.word	0x02410241
    f13c:	.word	0x02410241
    f140:	.word	0x02410241
    f144:	.word	0x02410241
    f148:	.word	0x02410241
    f14c:	.word	0x02410241
    f150:	.word	0x02410241
    f154:	.word	0x02410241
    f158:	.word	0x02410241
    f15c:	.word	0x02410241
    f160:	.word	0x02410241
    f164:	.word	0x02410241
    f168:	.word	0x02410241
    f16c:	.word	0x02410241
    f170:	.word	0x02410241
    f174:	.word	0x02410241
    f178:	.word	0x02410241
    f17c:	.word	0x00790241
    f180:	.word	0x02410241
    f184:	.word	0x02410241
    f188:	.word	0x024101d8
    f18c:	.word	0x02410241
    f190:	.word	0x02410241
    f194:	.word	0x01cf01cf
    f198:	.word	0x01cf01cf
    f19c:	.word	0x01cf01cf
    f1a0:	.word	0x01cf01cf
    f1a4:	.word	0x01cf01cf
    f1a8:	.word	0x02410241
    f1ac:	.word	0x02410241
    f1b0:	.word	0x02410241
    f1b4:	.word	0x02410241
    f1b8:	.word	0x02410241
    f1bc:	.word	0x01b901c1
    f1c0:	.word	0x01b90241
    f1c4:	.word	0x02410241
    f1c8:	.word	0x02410241
    f1cc:	.word	0x024101b3
    f1d0:	.word	0x01a30241
    f1d4:	.word	0x02410241
    f1d8:	.word	0x02410241
    f1dc:	.word	0x02410241
    f1e0:	.word	0x02410241
    f1e4:	.word	0x02410193
    f1e8:	.word	0x01510241
    f1ec:	.word	0x02410241
    f1f0:	.word	0x02410241
    f1f4:	.word	0x02410241
    f1f8:	.word	0x01220241
    f1fc:	.word	0x01b90188
    f200:	.word	0x01b901b9
    f204:	.word	0x0098011c
    f208:	.word	0x02410241
    f20c:	.word	0x024100d5
    f210:	.word	0x0101010d
    f214:	.word	0x024100f3
    f218:	.word	0x00eb0241
    f21c:	.word	0x00df0241
    f220:	.word	0x02410241
    f224:	.short	0x0193
    f226:	mov	r6, r3
    f228:	ldr.w	r3, [fp, #4]
    f22c:	cmp	r3, #0
    f22e:	ble.w	f6d8 <__ssvfscanf_r+0x664>
    f232:	ldr.w	r3, [fp]
    f236:	ldrb.w	r2, [r6, #-1]
    f23a:	ldrb	r1, [r3, #0]
    f23c:	cmp	r1, r2
    f23e:	bne.w	f110 <__ssvfscanf_r+0x9c>
    f242:	ldr.w	r2, [fp, #4]
    f246:	adds	r3, #1
    f248:	subs	r2, #1
    f24a:	str.w	r3, [fp]
    f24e:	adds	r7, #1
    f250:	str.w	r2, [fp, #4]
    f254:	mov	r4, r6
    f256:	b.n	f104 <__ssvfscanf_r+0x90>
    f258:	mov.w	r0, #4294967295
    f25c:	add.w	sp, sp, #692	; 0x2b4
    f260:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f264:	str	r3, [sp, #12]
    f266:	ldr.w	r3, [fp, #4]
    f26a:	cmp	r3, #0
    f26c:	ble.w	f736 <__ssvfscanf_r+0x6c2>
    f270:	ldr	r3, [pc, #736]	; (f554 <__ssvfscanf_r+0x4e0>)
    f272:	str	r3, [sp, #28]
    f274:	movs	r3, #0
    f276:	str	r3, [sp, #16]
    f278:	movs	r6, #3
    f27a:	b.n	f280 <__ssvfscanf_r+0x20c>
    f27c:	str.w	lr, [fp]
    f280:	bl	b8f4 <__locale_ctype_ptr>
    f284:	ldr.w	r2, [fp]
    f288:	ldrb	r1, [r2, #0]
    f28a:	add	r0, r1
    f28c:	add.w	lr, r2, #1
    f290:	ldrb	r3, [r0, #1]
    f292:	and.w	r3, r3, #8
    f296:	and.w	r8, r3, #255	; 0xff
    f29a:	cmp	r3, #0
    f29c:	beq.w	f79e <__ssvfscanf_r+0x72a>
    f2a0:	ldr.w	r3, [fp, #4]
    f2a4:	subs	r3, #1
    f2a6:	cmp	r3, #0
    f2a8:	add.w	r7, r7, #1
    f2ac:	str.w	r3, [fp, #4]
    f2b0:	bgt.n	f27c <__ssvfscanf_r+0x208>
    f2b2:	mov	r1, fp
    f2b4:	mov	r0, sl
    f2b6:	bl	12aac <__ssrefill_r>
    f2ba:	cmp	r0, #0
    f2bc:	beq.n	f280 <__ssvfscanf_r+0x20c>
    f2be:	ldr	r2, [sp, #24]
    f2c0:	cmp	r2, #0
    f2c2:	beq.n	f258 <__ssvfscanf_r+0x1e4>
    f2c4:	ldrh.w	r3, [fp, #12]
    f2c8:	tst.w	r3, #64	; 0x40
    f2cc:	mov	r3, r2
    f2ce:	it	ne
    f2d0:	movne.w	r3, #4294967295
    f2d4:	mov	r0, r3
    f2d6:	add.w	sp, sp, #692	; 0x2b4
    f2da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2de:	ldrb.w	r8, [r6, #1]
    f2e2:	cmp.w	r8, #108	; 0x6c
    f2e6:	beq.w	f6ee <__ssvfscanf_r+0x67a>
    f2ea:	orr.w	r5, r5, #1
    f2ee:	mov	r6, r3
    f2f0:	b.n	f126 <__ssvfscanf_r+0xb2>
    f2f2:	str	r3, [sp, #12]
    f2f4:	ldr.w	r3, [fp, #4]
    f2f8:	cmp	r3, #0
    f2fa:	ble.w	f78e <__ssvfscanf_r+0x71a>
    f2fe:	ldr	r3, [pc, #600]	; (f558 <__ssvfscanf_r+0x4e4>)
    f300:	str	r3, [sp, #28]
    f302:	movs	r3, #10
    f304:	str	r3, [sp, #16]
    f306:	movs	r6, #3
    f308:	b.n	f280 <__ssvfscanf_r+0x20c>
    f30a:	str	r3, [sp, #12]
    f30c:	ldr.w	r3, [fp, #4]
    f310:	cmp	r3, #0
    f312:	ble.w	f77e <__ssvfscanf_r+0x70a>
    f316:	movs	r6, #2
    f318:	b.n	f280 <__ssvfscanf_r+0x20c>
    f31a:	str	r3, [sp, #12]
    f31c:	ldr.w	r3, [fp, #4]
    f320:	cmp	r3, #0
    f322:	orr.w	r5, r5, #544	; 0x220
    f326:	ble.w	f46a <__ssvfscanf_r+0x3f6>
    f32a:	ldr	r3, [pc, #556]	; (f558 <__ssvfscanf_r+0x4e4>)
    f32c:	str	r3, [sp, #28]
    f32e:	movs	r3, #16
    f330:	str	r3, [sp, #16]
    f332:	movs	r6, #3
    f334:	b.n	f280 <__ssvfscanf_r+0x20c>
    f336:	str	r3, [sp, #12]
    f338:	ldr.w	r3, [fp, #4]
    f33c:	cmp	r3, #0
    f33e:	ble.w	f48a <__ssvfscanf_r+0x416>
    f342:	ldr	r3, [pc, #532]	; (f558 <__ssvfscanf_r+0x4e4>)
    f344:	str	r3, [sp, #28]
    f346:	movs	r3, #8
    f348:	str	r3, [sp, #16]
    f34a:	movs	r6, #3
    f34c:	b.n	f280 <__ssvfscanf_r+0x20c>
    f34e:	lsls	r2, r5, #27
    f350:	mov	r6, r3
    f352:	str	r3, [sp, #12]
    f354:	bmi.w	f53c <__ssvfscanf_r+0x4c8>
    f358:	lsls	r3, r5, #29
    f35a:	bpl.w	f706 <__ssvfscanf_r+0x692>
    f35e:	ldr	r1, [sp, #20]
    f360:	ldr	r3, [r1, #0]
    f362:	strh	r7, [r3, #0]
    f364:	adds	r3, r1, #4
    f366:	str	r3, [sp, #20]
    f368:	mov	r4, r6
    f36a:	b.n	f104 <__ssvfscanf_r+0x90>
    f36c:	ldrb.w	r8, [r6, #1]
    f370:	orr.w	r5, r5, #4
    f374:	mov	r6, r3
    f376:	b.n	f126 <__ssvfscanf_r+0xb2>
    f378:	str	r3, [sp, #12]
    f37a:	ldr.w	r3, [fp, #4]
    f37e:	cmp	r3, #0
    f380:	ble.w	f75e <__ssvfscanf_r+0x6ea>
    f384:	cmp	r4, #0
    f386:	it	eq
    f388:	moveq	r4, #1
    f38a:	ands.w	r3, r5, #1
    f38e:	bne.w	f5d6 <__ssvfscanf_r+0x562>
    f392:	lsls	r2, r5, #27
    f394:	bpl.w	f6ae <__ssvfscanf_r+0x63a>
    f398:	mov	r5, r3
    f39a:	b.n	f3b0 <__ssvfscanf_r+0x33c>
    f39c:	add	r3, r2
    f39e:	str.w	r3, [fp]
    f3a2:	add	r5, r2
    f3a4:	subs	r4, r4, r2
    f3a6:	bl	12aac <__ssrefill_r>
    f3aa:	cmp	r0, #0
    f3ac:	bne.w	f6a6 <__ssvfscanf_r+0x632>
    f3b0:	ldr.w	r2, [fp, #4]
    f3b4:	ldr.w	r3, [fp]
    f3b8:	cmp	r2, r4
    f3ba:	mov	r1, fp
    f3bc:	mov	r0, sl
    f3be:	blt.n	f39c <__ssvfscanf_r+0x328>
    f3c0:	subs	r2, r2, r4
    f3c2:	add	r3, r4
    f3c4:	str.w	r2, [fp, #4]
    f3c8:	add	r5, r4
    f3ca:	str.w	r3, [fp]
    f3ce:	ldr	r6, [sp, #12]
    f3d0:	add	r7, r5
    f3d2:	mov	r4, r6
    f3d4:	b.n	f104 <__ssvfscanf_r+0x90>
    f3d6:	add.w	r9, sp, #80	; 0x50
    f3da:	mov	r1, r3
    f3dc:	mov	r0, r9
    f3de:	bl	12348 <__sccl>
    f3e2:	ldr.w	r3, [fp, #4]
    f3e6:	cmp	r3, #0
    f3e8:	mov	r6, r0
    f3ea:	ble.w	f74e <__ssvfscanf_r+0x6da>
    f3ee:	cmp	r4, #0
    f3f0:	ldr.w	r2, [fp]
    f3f4:	it	eq
    f3f6:	moveq.w	r4, #4294967295
    f3fa:	lsls	r3, r5, #27
    f3fc:	ldrb	r1, [r2, #0]
    f3fe:	bpl.w	f542 <__ssvfscanf_r+0x4ce>
    f402:	mov	r8, r4
    f404:	movs	r5, #0
    f406:	b.n	f40a <__ssvfscanf_r+0x396>
    f408:	ldrb	r1, [r2, #0]
    f40a:	ldrb.w	r3, [r9, r1]
    f40e:	adds	r2, #1
    f410:	cmp	r3, #0
    f412:	beq.w	f69c <__ssvfscanf_r+0x628>
    f416:	ldr.w	r3, [fp, #4]
    f41a:	str.w	r2, [fp]
    f41e:	adds	r5, #1
    f420:	subs	r3, #1
    f422:	cmp	r5, r4
    f424:	str.w	r3, [fp, #4]
    f428:	beq.w	f696 <__ssvfscanf_r+0x622>
    f42c:	cmp	r3, #0
    f42e:	bgt.n	f408 <__ssvfscanf_r+0x394>
    f430:	mov	r1, fp
    f432:	mov	r0, sl
    f434:	bl	12aac <__ssrefill_r>
    f438:	cmp	r0, #0
    f43a:	bne.w	f694 <__ssvfscanf_r+0x620>
    f43e:	ldr.w	r2, [fp]
    f442:	b.n	f408 <__ssvfscanf_r+0x394>
    f444:	str	r3, [sp, #12]
    f446:	ldr.w	r3, [fp, #4]
    f44a:	cmp	r3, #0
    f44c:	ble.n	f4c4 <__ssvfscanf_r+0x450>
    f44e:	ldr	r3, [pc, #260]	; (f554 <__ssvfscanf_r+0x4e0>)
    f450:	str	r3, [sp, #28]
    f452:	movs	r3, #10
    f454:	str	r3, [sp, #16]
    f456:	movs	r6, #3
    f458:	b.n	f280 <__ssvfscanf_r+0x20c>
    f45a:	str	r3, [sp, #12]
    f45c:	ldr.w	r3, [fp, #4]
    f460:	cmp	r3, #0
    f462:	orr.w	r5, r5, #512	; 0x200
    f466:	bgt.w	f32a <__ssvfscanf_r+0x2b6>
    f46a:	mov	r1, fp
    f46c:	mov	r0, sl
    f46e:	bl	12aac <__ssrefill_r>
    f472:	cmp	r0, #0
    f474:	beq.w	f32a <__ssvfscanf_r+0x2b6>
    f478:	b.n	f2be <__ssvfscanf_r+0x24a>
    f47a:	str	r3, [sp, #12]
    f47c:	ldr.w	r3, [fp, #4]
    f480:	cmp	r3, #0
    f482:	orr.w	r5, r5, #1
    f486:	bgt.w	f342 <__ssvfscanf_r+0x2ce>
    f48a:	mov	r1, fp
    f48c:	mov	r0, sl
    f48e:	bl	12aac <__ssrefill_r>
    f492:	cmp	r0, #0
    f494:	beq.w	f342 <__ssvfscanf_r+0x2ce>
    f498:	b.n	f2be <__ssvfscanf_r+0x24a>
    f49a:	ldrb.w	r8, [r6, #1]
    f49e:	orr.w	r5, r5, #2
    f4a2:	mov	r6, r3
    f4a4:	b.n	f126 <__ssvfscanf_r+0xb2>
    f4a6:	str	r3, [sp, #12]
    f4a8:	ldr.w	r3, [fp, #4]
    f4ac:	cmp	r3, #0
    f4ae:	ble.w	f76e <__ssvfscanf_r+0x6fa>
    f4b2:	movs	r6, #4
    f4b4:	b.n	f280 <__ssvfscanf_r+0x20c>
    f4b6:	str	r3, [sp, #12]
    f4b8:	ldr.w	r3, [fp, #4]
    f4bc:	cmp	r3, #0
    f4be:	orr.w	r5, r5, #1
    f4c2:	bgt.n	f44e <__ssvfscanf_r+0x3da>
    f4c4:	mov	r1, fp
    f4c6:	mov	r0, sl
    f4c8:	bl	12aac <__ssrefill_r>
    f4cc:	cmp	r0, #0
    f4ce:	beq.n	f44e <__ssvfscanf_r+0x3da>
    f4d0:	b.n	f2be <__ssvfscanf_r+0x24a>
    f4d2:	add.w	r4, r4, r4, lsl #2
    f4d6:	add.w	r4, r8, r4, lsl #1
    f4da:	subs	r4, #48	; 0x30
    f4dc:	ldrb.w	r8, [r6, #1]
    f4e0:	mov	r6, r3
    f4e2:	b.n	f126 <__ssvfscanf_r+0xb2>
    f4e4:	ldrb.w	r8, [r6, #1]
    f4e8:	orr.w	r5, r5, #16
    f4ec:	mov	r6, r3
    f4ee:	b.n	f126 <__ssvfscanf_r+0xb2>
    f4f0:	add	r3, sp, #72	; 0x48
    f4f2:	mov	r1, r8
    f4f4:	mov	r0, r3
    f4f6:	movs	r2, #8
    f4f8:	str	r3, [sp, #32]
    f4fa:	bl	c09c <memset>
    f4fe:	ands.w	r9, r5, #16
    f502:	bne.w	fdc8 <__ssvfscanf_r+0xd54>
    f506:	ldr	r2, [sp, #20]
    f508:	mov	r3, r2
    f50a:	adds	r3, #4
    f50c:	ldr.w	r8, [r2]
    f510:	str	r3, [sp, #20]
    f512:	movs	r6, #0
    f514:	bl	b8f4 <__locale_ctype_ptr>
    f518:	ldr.w	r3, [fp]
    f51c:	ldrb	r3, [r3, #0]
    f51e:	add	r0, r3
    f520:	ldrb	r3, [r0, #1]
    f522:	lsls	r0, r3, #28
    f524:	bmi.n	f52c <__ssvfscanf_r+0x4b8>
    f526:	cmp	r4, #0
    f528:	bne.w	fd2c <__ssvfscanf_r+0xcb8>
    f52c:	cmp.w	r9, #0
    f530:	bne.n	f53c <__ssvfscanf_r+0x4c8>
    f532:	str.w	r9, [r8]
    f536:	ldr	r3, [sp, #24]
    f538:	adds	r3, #1
    f53a:	str	r3, [sp, #24]
    f53c:	ldr	r6, [sp, #12]
    f53e:	mov	r4, r6
    f540:	b.n	f104 <__ssvfscanf_r+0x90>
    f542:	ldr	r0, [sp, #20]
    f544:	ldr	r5, [r0, #0]
    f546:	mov	r3, r0
    f548:	adds	r3, #4
    f54a:	add.w	r8, r5, r4
    f54e:	str	r3, [sp, #12]
    f550:	mov	r4, r5
    f552:	b.n	f562 <__ssvfscanf_r+0x4ee>
    f554:	.word	0x0000d969
    f558:	.word	0x000126f5
    f55c:	ldr.w	r2, [fp]
    f560:	ldrb	r1, [r2, #0]
    f562:	ldrb.w	r3, [r9, r1]
    f566:	adds	r0, r2, #1
    f568:	cbz	r3, f59c <__ssvfscanf_r+0x528>
    f56a:	ldr.w	r3, [fp, #4]
    f56e:	str.w	r0, [fp]
    f572:	subs	r3, #1
    f574:	str.w	r3, [fp, #4]
    f578:	ldrb	r3, [r2, #0]
    f57a:	strb.w	r3, [r4], #1
    f57e:	cmp	r8, r4
    f580:	beq.n	f59c <__ssvfscanf_r+0x528>
    f582:	ldr.w	r3, [fp, #4]
    f586:	cmp	r3, #0
    f588:	bgt.n	f55c <__ssvfscanf_r+0x4e8>
    f58a:	mov	r1, fp
    f58c:	mov	r0, sl
    f58e:	bl	12aac <__ssrefill_r>
    f592:	cmp	r0, #0
    f594:	beq.n	f55c <__ssvfscanf_r+0x4e8>
    f596:	cmp	r5, r4
    f598:	beq.w	f2be <__ssvfscanf_r+0x24a>
    f59c:	subs	r5, r4, r5
    f59e:	beq.w	f110 <__ssvfscanf_r+0x9c>
    f5a2:	ldr	r2, [sp, #24]
    f5a4:	adds	r2, #1
    f5a6:	movs	r3, #0
    f5a8:	str	r2, [sp, #24]
    f5aa:	ldr	r2, [sp, #12]
    f5ac:	str	r2, [sp, #20]
    f5ae:	strb	r3, [r4, #0]
    f5b0:	add	r7, r5
    f5b2:	mov	r4, r6
    f5b4:	b.n	f104 <__ssvfscanf_r+0x90>
    f5b6:	str	r3, [sp, #12]
    f5b8:	bl	b8f4 <__locale_ctype_ptr>
    f5bc:	add	r0, r8
    f5be:	ldrb	r3, [r0, #1]
    f5c0:	and.w	r3, r3, #3
    f5c4:	cmp	r3, #1
    f5c6:	ldr.w	r3, [fp, #4]
    f5ca:	beq.w	f6fa <__ssvfscanf_r+0x686>
    f5ce:	cmp	r3, #0
    f5d0:	bgt.w	f44e <__ssvfscanf_r+0x3da>
    f5d4:	b.n	f4c4 <__ssvfscanf_r+0x450>
    f5d6:	add	r3, sp, #72	; 0x48
    f5d8:	mov	r0, r3
    f5da:	movs	r2, #8
    f5dc:	movs	r1, #0
    f5de:	str	r3, [sp, #32]
    f5e0:	bl	c09c <memset>
    f5e4:	ands.w	r3, r5, #16
    f5e8:	str	r3, [sp, #40]	; 0x28
    f5ea:	bne.n	f6e8 <__ssvfscanf_r+0x674>
    f5ec:	ldr	r2, [sp, #20]
    f5ee:	mov	r3, r2
    f5f0:	adds	r3, #4
    f5f2:	ldr.w	r9, [r2]
    f5f6:	str	r3, [sp, #20]
    f5f8:	movs	r5, #0
    f5fa:	add.w	r8, sp, #336	; 0x150
    f5fe:	bl	b8d0 <__locale_mb_cur_max>
    f602:	cmp	r0, r5
    f604:	beq.w	f2be <__ssvfscanf_r+0x24a>
    f608:	ldmia.w	fp, {r2, r3}
    f60c:	ldrb.w	r0, [r2], #1
    f610:	str.w	r2, [fp]
    f614:	subs	r3, #1
    f616:	ldr	r2, [sp, #32]
    f618:	str	r2, [sp, #0]
    f61a:	adds	r6, r5, #1
    f61c:	str.w	r3, [fp, #4]
    f620:	mov	r1, r9
    f622:	strb.w	r0, [r8, r5]
    f626:	mov	r3, r6
    f628:	mov	r2, r8
    f62a:	mov	r0, sl
    f62c:	bl	11a04 <_mbrtowc_r>
    f630:	adds	r1, r0, #1
    f632:	beq.w	f2be <__ssvfscanf_r+0x24a>
    f636:	cbnz	r0, f662 <__ssvfscanf_r+0x5ee>
    f638:	ldr	r3, [sp, #40]	; 0x28
    f63a:	cbnz	r3, f682 <__ssvfscanf_r+0x60e>
    f63c:	str.w	r3, [r9]
    f640:	add	r7, r6
    f642:	subs	r4, #1
    f644:	add.w	r9, r9, #4
    f648:	ldr.w	r3, [fp, #4]
    f64c:	cmp	r3, #0
    f64e:	mov.w	r5, #0
    f652:	ble.n	f670 <__ssvfscanf_r+0x5fc>
    f654:	cmp	r4, #0
    f656:	bne.n	f5fe <__ssvfscanf_r+0x58a>
    f658:	ldr	r3, [sp, #40]	; 0x28
    f65a:	cmp	r3, #0
    f65c:	beq.w	f536 <__ssvfscanf_r+0x4c2>
    f660:	b.n	f53c <__ssvfscanf_r+0x4c8>
    f662:	adds	r0, #2
    f664:	bne.n	f688 <__ssvfscanf_r+0x614>
    f666:	ldr.w	r3, [fp, #4]
    f66a:	cmp	r3, #0
    f66c:	mov	r5, r6
    f66e:	bgt.n	f5fe <__ssvfscanf_r+0x58a>
    f670:	mov	r1, fp
    f672:	mov	r0, sl
    f674:	bl	12aac <__ssrefill_r>
    f678:	cmp	r0, #0
    f67a:	beq.n	f654 <__ssvfscanf_r+0x5e0>
    f67c:	cmp	r5, #0
    f67e:	beq.n	f658 <__ssvfscanf_r+0x5e4>
    f680:	b.n	f2be <__ssvfscanf_r+0x24a>
    f682:	add	r7, r6
    f684:	subs	r4, #1
    f686:	b.n	f648 <__ssvfscanf_r+0x5d4>
    f688:	ldr	r3, [sp, #40]	; 0x28
    f68a:	add	r7, r6
    f68c:	subs	r4, #1
    f68e:	cmp	r3, #0
    f690:	bne.n	f648 <__ssvfscanf_r+0x5d4>
    f692:	b.n	f644 <__ssvfscanf_r+0x5d0>
    f694:	mov	r8, r5
    f696:	mov	r5, r8
    f698:	add	r7, r5
    f69a:	b.n	f5b2 <__ssvfscanf_r+0x53e>
    f69c:	cmp	r5, #0
    f69e:	beq.w	f110 <__ssvfscanf_r+0x9c>
    f6a2:	add	r7, r5
    f6a4:	b.n	f5b2 <__ssvfscanf_r+0x53e>
    f6a6:	cmp	r5, #0
    f6a8:	bne.w	f3ce <__ssvfscanf_r+0x35a>
    f6ac:	b.n	f2be <__ssvfscanf_r+0x24a>
    f6ae:	ldr	r5, [sp, #20]
    f6b0:	mov	r3, r4
    f6b2:	ldr	r1, [r5, #0]
    f6b4:	str.w	fp, [sp]
    f6b8:	movs	r2, #1
    f6ba:	mov	r0, sl
    f6bc:	bl	12ae8 <_sfread_r>
    f6c0:	adds	r6, r5, #4
    f6c2:	cmp	r0, #0
    f6c4:	beq.w	f2be <__ssvfscanf_r+0x24a>
    f6c8:	ldr	r3, [sp, #24]
    f6ca:	str	r6, [sp, #20]
    f6cc:	ldr	r6, [sp, #12]
    f6ce:	adds	r3, #1
    f6d0:	add	r7, r0
    f6d2:	str	r3, [sp, #24]
    f6d4:	mov	r4, r6
    f6d6:	b.n	f104 <__ssvfscanf_r+0x90>
    f6d8:	mov	r1, fp
    f6da:	mov	r0, sl
    f6dc:	bl	12aac <__ssrefill_r>
    f6e0:	cmp	r0, #0
    f6e2:	beq.w	f232 <__ssvfscanf_r+0x1be>
    f6e6:	b.n	f2be <__ssvfscanf_r+0x24a>
    f6e8:	mov.w	r9, #0
    f6ec:	b.n	f5f8 <__ssvfscanf_r+0x584>
    f6ee:	ldrb.w	r8, [r6, #2]
    f6f2:	orr.w	r5, r5, #2
    f6f6:	adds	r6, #2
    f6f8:	b.n	f126 <__ssvfscanf_r+0xb2>
    f6fa:	cmp	r3, #0
    f6fc:	orr.w	r5, r5, #1
    f700:	bgt.w	f44e <__ssvfscanf_r+0x3da>
    f704:	b.n	f4c4 <__ssvfscanf_r+0x450>
    f706:	lsls	r4, r5, #31
    f708:	bmi.n	f724 <__ssvfscanf_r+0x6b0>
    f70a:	lsls	r0, r5, #30
    f70c:	bpl.n	f724 <__ssvfscanf_r+0x6b0>
    f70e:	ldr	r2, [sp, #20]
    f710:	ldr	r6, [sp, #12]
    f712:	ldr	r3, [r2, #0]
    f714:	mov	r0, r7
    f716:	asrs	r1, r7, #31
    f718:	adds	r2, #4
    f71a:	str	r2, [sp, #20]
    f71c:	strd	r0, r1, [r3]
    f720:	mov	r4, r6
    f722:	b.n	f104 <__ssvfscanf_r+0x90>
    f724:	ldr	r2, [sp, #20]
    f726:	ldr	r6, [sp, #12]
    f728:	ldr	r3, [r2, #0]
    f72a:	str	r7, [r3, #0]
    f72c:	mov	r3, r2
    f72e:	adds	r3, #4
    f730:	str	r3, [sp, #20]
    f732:	mov	r4, r6
    f734:	b.n	f104 <__ssvfscanf_r+0x90>
    f736:	mov	r1, fp
    f738:	mov	r0, sl
    f73a:	bl	12aac <__ssrefill_r>
    f73e:	cmp	r0, #0
    f740:	bne.w	f2be <__ssvfscanf_r+0x24a>
    f744:	ldr	r3, [pc, #504]	; (f940 <__ssvfscanf_r+0x8cc>)
    f746:	str	r0, [sp, #16]
    f748:	str	r3, [sp, #28]
    f74a:	movs	r6, #3
    f74c:	b.n	f280 <__ssvfscanf_r+0x20c>
    f74e:	mov	r1, fp
    f750:	mov	r0, sl
    f752:	bl	12aac <__ssrefill_r>
    f756:	cmp	r0, #0
    f758:	beq.w	f3ee <__ssvfscanf_r+0x37a>
    f75c:	b.n	f2be <__ssvfscanf_r+0x24a>
    f75e:	mov	r1, fp
    f760:	mov	r0, sl
    f762:	bl	12aac <__ssrefill_r>
    f766:	cmp	r0, #0
    f768:	beq.w	f384 <__ssvfscanf_r+0x310>
    f76c:	b.n	f2be <__ssvfscanf_r+0x24a>
    f76e:	mov	r1, fp
    f770:	mov	r0, sl
    f772:	bl	12aac <__ssrefill_r>
    f776:	cmp	r0, #0
    f778:	beq.w	f4b2 <__ssvfscanf_r+0x43e>
    f77c:	b.n	f2be <__ssvfscanf_r+0x24a>
    f77e:	mov	r1, fp
    f780:	mov	r0, sl
    f782:	bl	12aac <__ssrefill_r>
    f786:	cmp	r0, #0
    f788:	beq.w	f316 <__ssvfscanf_r+0x2a2>
    f78c:	b.n	f2be <__ssvfscanf_r+0x24a>
    f78e:	mov	r1, fp
    f790:	mov	r0, sl
    f792:	bl	12aac <__ssrefill_r>
    f796:	cmp	r0, #0
    f798:	beq.w	f2fe <__ssvfscanf_r+0x28a>
    f79c:	b.n	f2be <__ssvfscanf_r+0x24a>
    f79e:	cmp	r6, #3
    f7a0:	beq.w	fae2 <__ssvfscanf_r+0xa6e>
    f7a4:	cmp	r6, #4
    f7a6:	bne.w	fc24 <__ssvfscanf_r+0xbb0>
    f7aa:	mov	r0, sl
    f7ac:	bl	119e8 <_localeconv_r>
    f7b0:	subs	r3, r4, #1
    f7b2:	ldr	r2, [r0, #0]
    f7b4:	str	r2, [sp, #48]	; 0x30
    f7b6:	cmp.w	r3, #348	; 0x15c
    f7ba:	bls.w	fc8c <__ssvfscanf_r+0xc18>
    f7be:	mvn.w	r1, #348	; 0x15c
    f7c2:	adds	r3, r4, r1
    f7c4:	str	r3, [sp, #56]	; 0x38
    f7c6:	movw	r4, #349	; 0x15d
    f7ca:	add	r3, sp, #336	; 0x150
    f7cc:	mov.w	r8, #0
    f7d0:	mov	r2, r3
    f7d2:	str	r3, [sp, #40]	; 0x28
    f7d4:	orr.w	r5, r5, #1920	; 0x780
    f7d8:	mov	r3, r8
    f7da:	str.w	r8, [sp, #60]	; 0x3c
    f7de:	str.w	r8, [sp, #52]	; 0x34
    f7e2:	mov	r6, r8
    f7e4:	str.w	r8, [sp, #44]	; 0x2c
    f7e8:	mov	r9, r2
    f7ea:	ldr.w	r0, [fp]
    f7ee:	ldrb	r1, [r0, #0]
    f7f0:	sub.w	lr, r1, #43	; 0x2b
    f7f4:	cmp.w	lr, #78	; 0x4e
    f7f8:	bhi.w	fa92 <__ssvfscanf_r+0xa1e>
    f7fc:	tbh	[pc, lr, lsl #1]
    f800:	.word	0x0149007a
    f804:	.word	0x0149007a
    f808:	.word	0x006e0149
    f80c:	.word	0x004f004f
    f810:	.word	0x004f004f
    f814:	.word	0x004f004f
    f818:	.word	0x004f004f
    f81c:	.word	0x0149004f
    f820:	.word	0x01490149
    f824:	.word	0x01490149
    f828:	.word	0x01490149
    f82c:	.word	0x01490144
    f830:	.word	0x01490149
    f834:	.word	0x0125012c
    f838:	.word	0x01490149
    f83c:	.word	0x014900a2
    f840:	.word	0x01490149
    f844:	.word	0x008b0149
    f848:	.word	0x01490149
    f84c:	.word	0x01490149
    f850:	.word	0x00850149
    f854:	.word	0x01490149
    f858:	.word	0x01490149
    f85c:	.word	0x0149007f
    f860:	.word	0x01490149
    f864:	.word	0x01490149
    f868:	.word	0x01490149
    f86c:	.word	0x01490144
    f870:	.word	0x01490149
    f874:	.word	0x0125012c
    f878:	.word	0x01490149
    f87c:	.word	0x014900a2
    f880:	.word	0x01490149
    f884:	.word	0x008b0149
    f888:	.word	0x01490149
    f88c:	.word	0x01490149
    f890:	.word	0x00850149
    f894:	.word	0x01490149
    f898:	.word	0x01490149
    f89c:	.short	0x007f
    f89e:	cmn.w	r3, r8
    f8a2:	bne.n	f8d2 <__ssvfscanf_r+0x85e>
    f8a4:	bic.w	r5, r5, #384	; 0x180
    f8a8:	strb.w	r1, [r9]
    f8ac:	add.w	r9, r9, #1
    f8b0:	ldr.w	r1, [fp, #4]
    f8b4:	subs	r1, #1
    f8b6:	cmp	r1, #0
    f8b8:	add.w	r4, r4, #4294967295
    f8bc:	add.w	r7, r7, #1
    f8c0:	str.w	r1, [fp, #4]
    f8c4:	ble.w	faac <__ssvfscanf_r+0xa38>
    f8c8:	adds	r0, #1
    f8ca:	str.w	r0, [fp]
    f8ce:	cmp	r4, #0
    f8d0:	bne.n	f7ea <__ssvfscanf_r+0x776>
    f8d2:	cmp	r6, #0
    f8d4:	beq.n	f95c <__ssvfscanf_r+0x8e8>
    f8d6:	bic.w	r5, r5, #256	; 0x100
    f8da:	b.n	f95c <__ssvfscanf_r+0x8e8>
    f8dc:	lsls	r2, r5, #23
    f8de:	bpl.n	f89e <__ssvfscanf_r+0x82a>
    f8e0:	ldr	r2, [sp, #56]	; 0x38
    f8e2:	bic.w	r5, r5, #128	; 0x80
    f8e6:	adds	r6, #1
    f8e8:	cmp	r2, #0
    f8ea:	beq.n	f8b0 <__ssvfscanf_r+0x83c>
    f8ec:	subs	r2, #1
    f8ee:	str	r2, [sp, #56]	; 0x38
    f8f0:	adds	r4, #1
    f8f2:	b.n	f8b0 <__ssvfscanf_r+0x83c>
    f8f4:	lsls	r2, r5, #24
    f8f6:	bpl.n	f8d2 <__ssvfscanf_r+0x85e>
    f8f8:	bic.w	r5, r5, #128	; 0x80
    f8fc:	b.n	f8a8 <__ssvfscanf_r+0x834>
    f8fe:	cmp.w	r8, #7
    f902:	bne.n	f8d2 <__ssvfscanf_r+0x85e>
    f904:	mov.w	r8, #8
    f908:	b.n	f8a8 <__ssvfscanf_r+0x834>
    f90a:	cmp.w	r8, #6
    f90e:	bne.n	f8d2 <__ssvfscanf_r+0x85e>
    f910:	mov.w	r8, #7
    f914:	b.n	f8a8 <__ssvfscanf_r+0x834>
    f916:	cmp	r3, #0
    f918:	bne.w	fad8 <__ssvfscanf_r+0xa64>
    f91c:	cbnz	r6, f92a <__ssvfscanf_r+0x8b6>
    f91e:	and.w	lr, r5, #1792	; 0x700
    f922:	cmp.w	lr, #1792	; 0x700
    f926:	beq.w	fdb0 <__ssvfscanf_r+0xd3c>
    f92a:	cmp.w	r8, #1
    f92e:	beq.n	f936 <__ssvfscanf_r+0x8c2>
    f930:	cmp.w	r8, #4
    f934:	bne.n	f8d2 <__ssvfscanf_r+0x85e>
    f936:	add.w	r8, r8, #1
    f93a:	uxtb.w	r8, r8
    f93e:	b.n	f8a8 <__ssvfscanf_r+0x834>
    f940:	.word	0x0000d969
    f944:	cmp.w	r8, #0
    f948:	bne.w	fac6 <__ssvfscanf_r+0xa52>
    f94c:	cmp	r6, #0
    f94e:	bne.n	f8d6 <__ssvfscanf_r+0x862>
    f950:	and.w	lr, r5, #1792	; 0x700
    f954:	cmp.w	lr, #1792	; 0x700
    f958:	beq.w	fdd0 <__ssvfscanf_r+0xd5c>
    f95c:	subs	r3, #1
    f95e:	cmp	r3, #1
    f960:	bls.w	fe66 <__ssvfscanf_r+0xdf2>
    f964:	add.w	r3, r8, #4294967295
    f968:	cmp	r3, #6
    f96a:	bhi.n	f99a <__ssvfscanf_r+0x926>
    f96c:	cmp.w	r8, #2
    f970:	bls.w	feb4 <__ssvfscanf_r+0xe40>
    f974:	cmp.w	r8, #3
    f978:	beq.n	f99a <__ssvfscanf_r+0x926>
    f97a:	sub.w	r4, r8, #4
    f97e:	uxtb	r4, r4
    f980:	mvn.w	r8, r4
    f984:	add	r8, r9
    f986:	ldrb.w	r1, [r9, #-1]!
    f98a:	mov	r2, fp
    f98c:	mov	r0, sl
    f98e:	bl	12a28 <_sungetc_r>
    f992:	cmp	r8, r9
    f994:	bne.n	f986 <__ssvfscanf_r+0x912>
    f996:	subs	r7, #1
    f998:	subs	r7, r7, r4
    f99a:	lsls	r1, r5, #23
    f99c:	bpl.n	f9d8 <__ssvfscanf_r+0x964>
    f99e:	lsls	r2, r5, #21
    f9a0:	bmi.w	fe8a <__ssvfscanf_r+0xe16>
    f9a4:	ldrb.w	r1, [r9, #-1]
    f9a8:	cmp	r1, #101	; 0x65
    f9aa:	add.w	r4, r9, #4294967295
    f9ae:	add.w	r8, r7, #4294967295
    f9b2:	beq.n	f9cc <__ssvfscanf_r+0x958>
    f9b4:	cmp	r1, #69	; 0x45
    f9b6:	beq.n	f9cc <__ssvfscanf_r+0x958>
    f9b8:	mov	r2, fp
    f9ba:	mov	r0, sl
    f9bc:	bl	12a28 <_sungetc_r>
    f9c0:	ldrb.w	r1, [r9, #-2]
    f9c4:	sub.w	r8, r7, #2
    f9c8:	sub.w	r4, r9, #2
    f9cc:	mov	r2, fp
    f9ce:	mov	r0, sl
    f9d0:	bl	12a28 <_sungetc_r>
    f9d4:	mov	r7, r8
    f9d6:	mov	r9, r4
    f9d8:	ands.w	r2, r5, #16
    f9dc:	bne.w	f53c <__ssvfscanf_r+0x4c8>
    f9e0:	and.w	r3, r5, #1536	; 0x600
    f9e4:	cmp.w	r3, #1024	; 0x400
    f9e8:	strb.w	r2, [r9]
    f9ec:	beq.w	fdda <__ssvfscanf_r+0xd66>
    f9f0:	ldr	r3, [sp, #52]	; 0x34
    f9f2:	cmp	r3, #0
    f9f4:	bne.w	fdfc <__ssvfscanf_r+0xd88>
    f9f8:	ldr	r1, [sp, #40]	; 0x28
    f9fa:	movs	r2, #0
    f9fc:	mov	r0, sl
    f9fe:	bl	d810 <_strtod_r>
    fa02:	lsls	r3, r5, #31
    fa04:	bmi.w	fc92 <__ssvfscanf_r+0xc1e>
    fa08:	ands.w	r5, r5, #2
    fa0c:	bne.w	fc92 <__ssvfscanf_r+0xc1e>
    fa10:	vmov	r2, r3, d0
    fa14:	vmov	r0, r1, d0
    fa18:	vstr	d0, [sp, #32]
    fa1c:	bl	b3dc <__aeabi_dcmpun>
    fa20:	ldr	r4, [sp, #20]
    fa22:	vldr	d0, [sp, #32]
    fa26:	adds	r6, r4, #4
    fa28:	ldr	r4, [r4, #0]
    fa2a:	cmp	r0, #0
    fa2c:	bne.w	fee8 <__ssvfscanf_r+0xe74>
    fa30:	vmov	r0, r1, d0
    fa34:	bl	b498 <__aeabi_d2f>
    fa38:	str	r6, [sp, #20]
    fa3a:	str	r0, [r4, #0]
    fa3c:	ldr	r3, [sp, #24]
    fa3e:	ldr	r6, [sp, #12]
    fa40:	adds	r3, #1
    fa42:	str	r3, [sp, #24]
    fa44:	mov	r4, r6
    fa46:	b.w	f104 <__ssvfscanf_r+0x90>
    fa4a:	cmp.w	r8, #2
    fa4e:	bne.w	f8d2 <__ssvfscanf_r+0x85e>
    fa52:	mov.w	r8, #3
    fa56:	b.n	f8a8 <__ssvfscanf_r+0x834>
    fa58:	and.w	lr, r5, #1280	; 0x500
    fa5c:	cmp.w	lr, #1024	; 0x400
    fa60:	beq.n	fa6e <__ssvfscanf_r+0x9fa>
    fa62:	lsls	r2, r5, #21
    fa64:	bpl.w	f8d2 <__ssvfscanf_r+0x85e>
    fa68:	cmp	r6, #0
    fa6a:	beq.w	f95c <__ssvfscanf_r+0x8e8>
    fa6e:	lsls	r2, r5, #22
    fa70:	bmi.n	fa7c <__ssvfscanf_r+0xa08>
    fa72:	ldr	r2, [sp, #44]	; 0x2c
    fa74:	str.w	r9, [sp, #60]	; 0x3c
    fa78:	subs	r2, r6, r2
    fa7a:	str	r2, [sp, #52]	; 0x34
    fa7c:	bic.w	r5, r5, #1920	; 0x780
    fa80:	orr.w	r5, r5, #384	; 0x180
    fa84:	movs	r6, #0
    fa86:	b.n	f8a8 <__ssvfscanf_r+0x834>
    fa88:	cmp	r3, #1
    fa8a:	bne.w	f8d2 <__ssvfscanf_r+0x85e>
    fa8e:	movs	r3, #2
    fa90:	b.n	f8a8 <__ssvfscanf_r+0x834>
    fa92:	ldr	r2, [sp, #48]	; 0x30
    fa94:	ldrb.w	lr, [r2]
    fa98:	cmp	lr, r1
    fa9a:	bne.w	f8d2 <__ssvfscanf_r+0x85e>
    fa9e:	lsls	r2, r5, #22
    faa0:	bpl.w	f8d2 <__ssvfscanf_r+0x85e>
    faa4:	bic.w	r5, r5, #640	; 0x280
    faa8:	str	r6, [sp, #44]	; 0x2c
    faaa:	b.n	f8a8 <__ssvfscanf_r+0x834>
    faac:	mov	r1, fp
    faae:	mov	r0, sl
    fab0:	str	r3, [sp, #32]
    fab2:	bl	12aac <__ssrefill_r>
    fab6:	ldr	r3, [sp, #32]
    fab8:	cmp	r0, #0
    faba:	bne.w	f8d2 <__ssvfscanf_r+0x85e>
    fabe:	cmp	r4, #0
    fac0:	bne.w	f7ea <__ssvfscanf_r+0x776>
    fac4:	b.n	f8d2 <__ssvfscanf_r+0x85e>
    fac6:	cmp.w	r8, #3
    faca:	beq.w	f936 <__ssvfscanf_r+0x8c2>
    face:	cmp.w	r8, #5
    fad2:	beq.w	f936 <__ssvfscanf_r+0x8c2>
    fad6:	b.n	f8d2 <__ssvfscanf_r+0x85e>
    fad8:	cmp	r3, #2
    fada:	bne.w	f92a <__ssvfscanf_r+0x8b6>
    fade:	movs	r3, #3
    fae0:	b.n	f8a8 <__ssvfscanf_r+0x834>
    fae2:	subs	r3, r4, #1
    fae4:	cmp.w	r3, #348	; 0x15c
    fae8:	itte	hi
    faea:	mvnhi.w	r0, #348	; 0x15c
    faee:	addhi.w	r9, r4, r0
    faf2:	movls	r9, r8
    faf4:	add	r3, sp, #336	; 0x150
    faf6:	mov	r0, r2
    faf8:	mov	r2, r7
    fafa:	mov	r7, r9
    fafc:	ldr.w	r9, [sp, #16]
    fb00:	str	r3, [sp, #40]	; 0x28
    fb02:	it	hi
    fb04:	movwhi	r4, #349	; 0x15d
    fb08:	orr.w	r5, r5, #3456	; 0xd80
    fb0c:	mov	r6, r3
    fb0e:	mov.w	r8, #0
    fb12:	sub.w	r3, r1, #43	; 0x2b
    fb16:	cmp	r3, #77	; 0x4d
    fb18:	bhi.n	fbbe <__ssvfscanf_r+0xb4a>
    fb1a:	tbb	[pc, r3]
    fb1e:	.short	0x507e
    fb20:	.word	0x6f50507e
    fb24:	.word	0x69696969
    fb28:	.word	0x4a696969
    fb2c:	.word	0x5050504a
    fb30:	.word	0x50505050
    fb34:	.word	0x44444444
    fb38:	.word	0x50504444
    fb3c:	.word	0x50505050
    fb40:	.word	0x50505050
    fb44:	.word	0x50505050
    fb48:	.word	0x27505050
    fb4c:	.word	0x50505050
    fb50:	.word	0x50505050
    fb54:	.word	0x44444444
    fb58:	.word	0x50504444
    fb5c:	.word	0x50505050
    fb60:	.word	0x50505050
    fb64:	.word	0x50505050
    fb68:	.word	0x27505050
    fb6c:	and.w	r3, r5, #1536	; 0x600
    fb70:	cmp.w	r3, #512	; 0x200
    fb74:	bne.n	fbbe <__ssvfscanf_r+0xb4a>
    fb76:	bic.w	r5, r5, #512	; 0x200
    fb7a:	orr.w	r5, r5, #1280	; 0x500
    fb7e:	mov.w	r9, #16
    fb82:	strb	r1, [r6, #0]
    fb84:	adds	r6, #1
    fb86:	ldr.w	r3, [fp, #4]
    fb8a:	subs	r3, #1
    fb8c:	cmp	r3, #0
    fb8e:	str.w	r3, [fp, #4]
    fb92:	ble.n	fc7a <__ssvfscanf_r+0xc06>
    fb94:	adds	r0, #1
    fb96:	str.w	r0, [fp]
    fb9a:	subs	r4, #1
    fb9c:	beq.n	fbbe <__ssvfscanf_r+0xb4a>
    fb9e:	ldr.w	r0, [fp]
    fba2:	ldrb	r1, [r0, #0]
    fba4:	b.n	fb12 <__ssvfscanf_r+0xa9e>
    fba6:	cmp.w	r9, #10
    fbaa:	ble.n	fbbe <__ssvfscanf_r+0xb4a>
    fbac:	bic.w	r5, r5, #2944	; 0xb80
    fbb0:	b.n	fb82 <__ssvfscanf_r+0xb0e>
    fbb2:	ldr	r3, [pc, #756]	; (fea8 <__ssvfscanf_r+0xe34>)
    fbb4:	ldrsh.w	r9, [r3, r9, lsl #1]
    fbb8:	cmp.w	r9, #8
    fbbc:	bgt.n	fbac <__ssvfscanf_r+0xb38>
    fbbe:	lsls	r1, r5, #23
    fbc0:	mov	r7, r2
    fbc2:	str.w	r9, [sp, #16]
    fbc6:	bpl.n	fbd8 <__ssvfscanf_r+0xb64>
    fbc8:	ldr	r3, [sp, #40]	; 0x28
    fbca:	cmp	r6, r3
    fbcc:	bhi.w	fdb8 <__ssvfscanf_r+0xd44>
    fbd0:	ldr	r3, [sp, #40]	; 0x28
    fbd2:	cmp	r6, r3
    fbd4:	beq.w	f110 <__ssvfscanf_r+0x9c>
    fbd8:	ands.w	r4, r5, #16
    fbdc:	beq.w	fd04 <__ssvfscanf_r+0xc90>
    fbe0:	ldr	r3, [sp, #40]	; 0x28
    fbe2:	subs	r6, r6, r3
    fbe4:	add	r6, r8
    fbe6:	add	r7, r6
    fbe8:	ldr	r6, [sp, #12]
    fbea:	mov	r4, r6
    fbec:	b.w	f104 <__ssvfscanf_r+0x90>
    fbf0:	ldr	r3, [pc, #692]	; (fea8 <__ssvfscanf_r+0xe34>)
    fbf2:	bic.w	r5, r5, #2944	; 0xb80
    fbf6:	ldrsh.w	r9, [r3, r9, lsl #1]
    fbfa:	b.n	fb82 <__ssvfscanf_r+0xb0e>
    fbfc:	lsls	r3, r5, #20
    fbfe:	bpl.n	fb82 <__ssvfscanf_r+0xb0e>
    fc00:	cmp.w	r9, #0
    fc04:	bne.n	fc0e <__ssvfscanf_r+0xb9a>
    fc06:	orr.w	r5, r5, #512	; 0x200
    fc0a:	mov.w	r9, #8
    fc0e:	lsls	r3, r5, #21
    fc10:	bpl.w	fd94 <__ssvfscanf_r+0xd20>
    fc14:	bic.w	r5, r5, #1408	; 0x580
    fc18:	b.n	fb82 <__ssvfscanf_r+0xb0e>
    fc1a:	lsls	r3, r5, #24
    fc1c:	bpl.n	fbbe <__ssvfscanf_r+0xb4a>
    fc1e:	bic.w	r5, r5, #128	; 0x80
    fc22:	b.n	fb82 <__ssvfscanf_r+0xb0e>
    fc24:	cmp	r4, #0
    fc26:	it	eq
    fc28:	moveq.w	r4, #4294967295
    fc2c:	ands.w	r3, r5, #1
    fc30:	bne.w	f4f0 <__ssvfscanf_r+0x47c>
    fc34:	lsls	r1, r5, #27
    fc36:	bpl.n	fca0 <__ssvfscanf_r+0xc2c>
    fc38:	mov	r5, r3
    fc3a:	bl	b8f4 <__locale_ctype_ptr>
    fc3e:	ldr.w	r3, [fp]
    fc42:	ldrb	r2, [r3, #0]
    fc44:	add	r0, r2
    fc46:	adds	r3, #1
    fc48:	ldrb	r2, [r0, #1]
    fc4a:	lsls	r2, r2, #28
    fc4c:	bmi.w	f3ce <__ssvfscanf_r+0x35a>
    fc50:	ldr.w	r2, [fp, #4]
    fc54:	str.w	r3, [fp]
    fc58:	adds	r5, #1
    fc5a:	subs	r3, r2, #1
    fc5c:	cmp	r4, r5
    fc5e:	str.w	r3, [fp, #4]
    fc62:	beq.w	f3ce <__ssvfscanf_r+0x35a>
    fc66:	cmp	r3, #0
    fc68:	bgt.n	fc3a <__ssvfscanf_r+0xbc6>
    fc6a:	mov	r1, fp
    fc6c:	mov	r0, sl
    fc6e:	bl	12aac <__ssrefill_r>
    fc72:	cmp	r0, #0
    fc74:	beq.n	fc3a <__ssvfscanf_r+0xbc6>
    fc76:	b.w	f3ce <__ssvfscanf_r+0x35a>
    fc7a:	mov	r1, fp
    fc7c:	mov	r0, sl
    fc7e:	str	r2, [sp, #16]
    fc80:	bl	12aac <__ssrefill_r>
    fc84:	ldr	r2, [sp, #16]
    fc86:	cmp	r0, #0
    fc88:	beq.n	fb9a <__ssvfscanf_r+0xb26>
    fc8a:	b.n	fbbe <__ssvfscanf_r+0xb4a>
    fc8c:	str.w	r8, [sp, #56]	; 0x38
    fc90:	b.n	f7ca <__ssvfscanf_r+0x756>
    fc92:	ldr	r2, [sp, #20]
    fc94:	ldr	r3, [r2, #0]
    fc96:	adds	r2, #4
    fc98:	str	r2, [sp, #20]
    fc9a:	vstr	d0, [r3]
    fc9e:	b.n	fa3c <__ssvfscanf_r+0x9c8>
    fca0:	ldr	r2, [sp, #20]
    fca2:	ldr	r5, [r2, #0]
    fca4:	adds	r6, r2, #4
    fca6:	add	r4, r5
    fca8:	mov	r8, r5
    fcaa:	bl	b8f4 <__locale_ctype_ptr>
    fcae:	ldr.w	r2, [fp]
    fcb2:	ldrb	r3, [r2, #0]
    fcb4:	add	r0, r3
    fcb6:	adds	r1, r2, #1
    fcb8:	ldrb	r3, [r0, #1]
    fcba:	lsls	r3, r3, #28
    fcbc:	bmi.n	fcea <__ssvfscanf_r+0xc76>
    fcbe:	ldr.w	r3, [fp, #4]
    fcc2:	str.w	r1, [fp]
    fcc6:	subs	r3, #1
    fcc8:	str.w	r3, [fp, #4]
    fccc:	ldrb	r3, [r2, #0]
    fcce:	strb.w	r3, [r8], #1
    fcd2:	cmp	r4, r8
    fcd4:	beq.n	fcec <__ssvfscanf_r+0xc78>
    fcd6:	ldr.w	r3, [fp, #4]
    fcda:	cmp	r3, #0
    fcdc:	bgt.n	fcaa <__ssvfscanf_r+0xc36>
    fcde:	mov	r1, fp
    fce0:	mov	r0, sl
    fce2:	bl	12aac <__ssrefill_r>
    fce6:	cmp	r0, #0
    fce8:	beq.n	fcaa <__ssvfscanf_r+0xc36>
    fcea:	mov	r4, r8
    fcec:	ldr	r2, [sp, #24]
    fcee:	str	r6, [sp, #20]
    fcf0:	ldr	r6, [sp, #12]
    fcf2:	subs	r5, r4, r5
    fcf4:	movs	r3, #0
    fcf6:	adds	r2, #1
    fcf8:	strb	r3, [r4, #0]
    fcfa:	add	r7, r5
    fcfc:	str	r2, [sp, #24]
    fcfe:	mov	r4, r6
    fd00:	b.w	f104 <__ssvfscanf_r+0x90>
    fd04:	mov	r2, r4
    fd06:	strb	r4, [r6, #0]
    fd08:	ldr	r3, [sp, #16]
    fd0a:	ldr	r1, [sp, #40]	; 0x28
    fd0c:	ldr	r4, [sp, #28]
    fd0e:	mov	r0, sl
    fd10:	blx	r4
    fd12:	lsls	r2, r5, #26
    fd14:	bmi.n	fda4 <__ssvfscanf_r+0xd30>
    fd16:	lsls	r3, r5, #29
    fd18:	bpl.n	fe12 <__ssvfscanf_r+0xd9e>
    fd1a:	ldr	r2, [sp, #20]
    fd1c:	ldr	r3, [r2, #0]
    fd1e:	adds	r2, #4
    fd20:	str	r2, [sp, #20]
    fd22:	strh	r0, [r3, #0]
    fd24:	ldr	r3, [sp, #24]
    fd26:	adds	r3, #1
    fd28:	str	r3, [sp, #24]
    fd2a:	b.n	fbe0 <__ssvfscanf_r+0xb6c>
    fd2c:	bl	b8d0 <__locale_mb_cur_max>
    fd30:	cmp	r6, r0
    fd32:	beq.w	f2be <__ssvfscanf_r+0x24a>
    fd36:	ldmia.w	fp, {r2, r3}
    fd3a:	ldrb.w	r0, [r2], #1
    fd3e:	str.w	r2, [fp]
    fd42:	ldr	r2, [sp, #32]
    fd44:	str	r2, [sp, #0]
    fd46:	add	r2, sp, #336	; 0x150
    fd48:	adds	r5, r6, #1
    fd4a:	subs	r3, #1
    fd4c:	strb	r0, [r2, r6]
    fd4e:	str.w	r3, [fp, #4]
    fd52:	mov	r1, r8
    fd54:	mov	r3, r5
    fd56:	mov	r0, sl
    fd58:	bl	11a04 <_mbrtowc_r>
    fd5c:	adds	r6, r0, #1
    fd5e:	beq.w	f2be <__ssvfscanf_r+0x24a>
    fd62:	cmp	r0, #0
    fd64:	bne.n	fe3e <__ssvfscanf_r+0xdca>
    fd66:	str.w	r0, [r8]
    fd6a:	bl	119c8 <iswspace>
    fd6e:	cmp	r0, #0
    fd70:	beq.w	fed2 <__ssvfscanf_r+0xe5e>
    fd74:	cmp	r5, #0
    fd76:	beq.w	f52c <__ssvfscanf_r+0x4b8>
    fd7a:	add	r3, sp, #336	; 0x150
    fd7c:	adds	r4, r3, r5
    fd7e:	subs	r5, #1
    fd80:	mov	r2, fp
    fd82:	ldrb.w	r1, [r4, #-1]!
    fd86:	mov	r0, sl
    fd88:	bl	12a28 <_sungetc_r>
    fd8c:	cmp	r5, #0
    fd8e:	bne.n	fd7e <__ssvfscanf_r+0xd0a>
    fd90:	b.w	f52c <__ssvfscanf_r+0x4b8>
    fd94:	bic.w	r5, r5, #896	; 0x380
    fd98:	cbz	r7, fd9e <__ssvfscanf_r+0xd2a>
    fd9a:	subs	r7, #1
    fd9c:	adds	r4, #1
    fd9e:	add.w	r8, r8, #1
    fda2:	b.n	fb86 <__ssvfscanf_r+0xb12>
    fda4:	ldr	r2, [sp, #20]
    fda6:	ldr	r3, [r2, #0]
    fda8:	adds	r2, #4
    fdaa:	str	r2, [sp, #20]
    fdac:	str	r0, [r3, #0]
    fdae:	b.n	fd24 <__ssvfscanf_r+0xcb0>
    fdb0:	bic.w	r5, r5, #1920	; 0x780
    fdb4:	movs	r3, #1
    fdb6:	b.n	f8a8 <__ssvfscanf_r+0x834>
    fdb8:	ldrb.w	r1, [r6, #-1]
    fdbc:	mov	r2, fp
    fdbe:	mov	r0, sl
    fdc0:	bl	12a28 <_sungetc_r>
    fdc4:	subs	r6, #1
    fdc6:	b.n	fbd0 <__ssvfscanf_r+0xb5c>
    fdc8:	add.w	r8, sp, #68	; 0x44
    fdcc:	b.w	f512 <__ssvfscanf_r+0x49e>
    fdd0:	bic.w	r5, r5, #1920	; 0x780
    fdd4:	mov.w	r8, #1
    fdd8:	b.n	f8a8 <__ssvfscanf_r+0x834>
    fdda:	ldr	r3, [sp, #44]	; 0x2c
    fddc:	subs	r6, r6, r3
    fdde:	negs	r2, r6
    fde0:	cmp	r6, #0
    fde2:	beq.w	f9f8 <__ssvfscanf_r+0x984>
    fde6:	addw	r3, sp, #675	; 0x2a3
    fdea:	cmp	r9, r3
    fdec:	it	cs
    fdee:	addwcs	r9, sp, #674	; 0x2a2
    fdf2:	mov	r0, r9
    fdf4:	ldr	r1, [pc, #180]	; (feac <__ssvfscanf_r+0xe38>)
    fdf6:	bl	c544 <sprintf>
    fdfa:	b.n	f9f8 <__ssvfscanf_r+0x984>
    fdfc:	ldr	r4, [sp, #60]	; 0x3c
    fdfe:	mov	r1, r4
    fe00:	movs	r3, #10
    fe02:	adds	r1, #1
    fe04:	mov	r0, sl
    fe06:	bl	d968 <_strtol_r>
    fe0a:	ldr	r3, [sp, #52]	; 0x34
    fe0c:	mov	r9, r4
    fe0e:	subs	r2, r0, r3
    fe10:	b.n	fde6 <__ssvfscanf_r+0xd72>
    fe12:	ands.w	r2, r5, #1
    fe16:	bne.n	fda4 <__ssvfscanf_r+0xd30>
    fe18:	lsls	r4, r5, #30
    fe1a:	bpl.n	fda4 <__ssvfscanf_r+0xd30>
    fe1c:	ldr	r3, [sp, #28]
    fe1e:	mov	r1, r3
    fe20:	ldr	r3, [pc, #140]	; (feb0 <__ssvfscanf_r+0xe3c>)
    fe22:	cmp	r1, r3
    fe24:	mov	r0, sl
    fe26:	ldr	r3, [sp, #16]
    fe28:	ldr	r1, [sp, #40]	; 0x28
    fe2a:	beq.n	fef6 <__ssvfscanf_r+0xe82>
    fe2c:	bl	12568 <_strtoll_r>
    fe30:	ldr	r2, [sp, #20]
    fe32:	ldr	r3, [r2, #0]
    fe34:	adds	r2, #4
    fe36:	str	r2, [sp, #20]
    fe38:	strd	r0, r1, [r3]
    fe3c:	b.n	fd24 <__ssvfscanf_r+0xcb0>
    fe3e:	adds	r0, #2
    fe40:	bne.n	fe84 <__ssvfscanf_r+0xe10>
    fe42:	mov	r6, r5
    fe44:	ldr.w	r3, [fp, #4]
    fe48:	cmp	r3, #0
    fe4a:	bgt.w	f514 <__ssvfscanf_r+0x4a0>
    fe4e:	mov	r1, fp
    fe50:	mov	r0, sl
    fe52:	bl	12aac <__ssrefill_r>
    fe56:	cmp	r0, #0
    fe58:	beq.w	f514 <__ssvfscanf_r+0x4a0>
    fe5c:	cmp	r6, #0
    fe5e:	bne.w	f2be <__ssvfscanf_r+0x24a>
    fe62:	b.w	f52c <__ssvfscanf_r+0x4b8>
    fe66:	ldr	r3, [sp, #40]	; 0x28
    fe68:	cmp	r9, r3
    fe6a:	bls.w	f110 <__ssvfscanf_r+0x9c>
    fe6e:	ldrb.w	r1, [r9, #-1]!
    fe72:	mov	r2, fp
    fe74:	mov	r0, sl
    fe76:	bl	12a28 <_sungetc_r>
    fe7a:	ldr	r3, [sp, #40]	; 0x28
    fe7c:	cmp	r9, r3
    fe7e:	bne.n	fe6e <__ssvfscanf_r+0xdfa>
    fe80:	b.w	f110 <__ssvfscanf_r+0x9c>
    fe84:	ldr.w	r0, [r8]
    fe88:	b.n	fd6a <__ssvfscanf_r+0xcf6>
    fe8a:	ldr	r3, [sp, #40]	; 0x28
    fe8c:	cmp	r9, r3
    fe8e:	bls.w	f110 <__ssvfscanf_r+0x9c>
    fe92:	ldrb.w	r1, [r9, #-1]!
    fe96:	mov	r2, fp
    fe98:	mov	r0, sl
    fe9a:	bl	12a28 <_sungetc_r>
    fe9e:	ldr	r3, [sp, #40]	; 0x28
    fea0:	cmp	r9, r3
    fea2:	bne.n	fe92 <__ssvfscanf_r+0xe1e>
    fea4:	b.w	f110 <__ssvfscanf_r+0x9c>
    fea8:	.word	0x000137ec
    feac:	.word	0x00013810
    feb0:	.word	0x000126f5
    feb4:	ldr	r3, [sp, #40]	; 0x28
    feb6:	cmp	r9, r3
    feb8:	bls.w	f110 <__ssvfscanf_r+0x9c>
    febc:	ldrb.w	r1, [r9, #-1]!
    fec0:	mov	r2, fp
    fec2:	mov	r0, sl
    fec4:	bl	12a28 <_sungetc_r>
    fec8:	ldr	r3, [sp, #40]	; 0x28
    feca:	cmp	r9, r3
    fecc:	bne.n	febc <__ssvfscanf_r+0xe48>
    fece:	b.w	f110 <__ssvfscanf_r+0x9c>
    fed2:	add	r7, r5
    fed4:	subs	r4, #1
    fed6:	cmp.w	r9, #0
    feda:	bne.n	fee4 <__ssvfscanf_r+0xe70>
    fedc:	add.w	r8, r8, #4
    fee0:	mov	r6, r9
    fee2:	b.n	fe44 <__ssvfscanf_r+0xdd0>
    fee4:	mov	r6, r0
    fee6:	b.n	fe44 <__ssvfscanf_r+0xdd0>
    fee8:	mov	r0, r5
    feea:	bl	ab20 <nanf>
    feee:	str	r6, [sp, #20]
    fef0:	vstr	s0, [r4]
    fef4:	b.n	fa3c <__ssvfscanf_r+0x9c8>
    fef6:	bl	12904 <_strtoull_r>
    fefa:	b.n	fe30 <__ssvfscanf_r+0xdbc>

0000fefc <_vdprintf_r>:
    fefc:	push	{r4, r5, r6, r7, lr}
    fefe:	sub.w	sp, sp, #532	; 0x214
    ff02:	add	r5, sp, #16
    ff04:	str	r3, [sp, #0]
    ff06:	mov	r7, r1
    ff08:	mov	r3, r2
    ff0a:	mov.w	r4, #512	; 0x200
    ff0e:	add	r2, sp, #12
    ff10:	mov	r1, r5
    ff12:	str	r4, [sp, #12]
    ff14:	mov	r6, r0
    ff16:	bl	12be4 <_vasnprintf_r>
    ff1a:	cbz	r0, ff40 <_vdprintf_r+0x44>
    ff1c:	mov	r4, r0
    ff1e:	mov	r2, r0
    ff20:	mov	r1, r7
    ff22:	ldr	r3, [sp, #12]
    ff24:	mov	r0, r6
    ff26:	bl	ff7c <_write_r>
    ff2a:	cmp	r4, r5
    ff2c:	str	r0, [sp, #12]
    ff2e:	beq.n	ff3a <_vdprintf_r+0x3e>
    ff30:	mov	r0, r6
    ff32:	mov	r1, r4
    ff34:	bl	11090 <_free_r>
    ff38:	ldr	r0, [sp, #12]
    ff3a:	add.w	sp, sp, #532	; 0x214
    ff3e:	pop	{r4, r5, r6, r7, pc}
    ff40:	mov.w	r0, #4294967295
    ff44:	b.n	ff3a <_vdprintf_r+0x3e>
    ff46:	nop

0000ff48 <vdprintf>:
    ff48:	push	{r4}
    ff4a:	ldr	r4, [pc, #16]	; (ff5c <vdprintf+0x14>)
    ff4c:	mov	r3, r2
    ff4e:	mov	r2, r1
    ff50:	mov	r1, r0
    ff52:	ldr	r0, [r4, #0]
    ff54:	ldr.w	r4, [sp], #4
    ff58:	b.w	fefc <_vdprintf_r>
    ff5c:	.word	0x20013dc8

0000ff60 <__ascii_wctomb>:
    ff60:	cbz	r1, ff6c <__ascii_wctomb+0xc>
    ff62:	cmp	r2, #255	; 0xff
    ff64:	bhi.n	ff70 <__ascii_wctomb+0x10>
    ff66:	strb	r2, [r1, #0]
    ff68:	movs	r0, #1
    ff6a:	bx	lr
    ff6c:	mov	r0, r1
    ff6e:	bx	lr
    ff70:	movs	r3, #138	; 0x8a
    ff72:	str	r3, [r0, #0]
    ff74:	mov.w	r0, #4294967295
    ff78:	bx	lr
    ff7a:	nop

0000ff7c <_write_r>:
    ff7c:	push	{r4, r5, r6, lr}
    ff7e:	mov	r5, r1
    ff80:	ldr	r4, [pc, #32]	; (ffa4 <_write_r+0x28>)
    ff82:	mov	r1, r2
    ff84:	mov	r6, r0
    ff86:	mov	r2, r3
    ff88:	mov	r0, r5
    ff8a:	movs	r3, #0
    ff8c:	str	r3, [r4, #0]
    ff8e:	bl	a578 <_write>
    ff92:	adds	r3, r0, #1
    ff94:	beq.n	ff98 <_write_r+0x1c>
    ff96:	pop	{r4, r5, r6, pc}
    ff98:	ldr	r3, [r4, #0]
    ff9a:	cmp	r3, #0
    ff9c:	beq.n	ff96 <_write_r+0x1a>
    ff9e:	str	r3, [r6, #0]
    ffa0:	pop	{r4, r5, r6, pc}
    ffa2:	nop
    ffa4:	.word	0x20019c74

0000ffa8 <__register_exitproc>:
    ffa8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffac:	ldr	r4, [pc, #148]	; (10044 <__register_exitproc+0x9c>)
    ffae:	ldr	r5, [r4, #0]
    ffb0:	ldr.w	r4, [r5, #328]	; 0x148
    ffb4:	mov	r6, r0
    ffb6:	mov	r8, r1
    ffb8:	mov	sl, r2
    ffba:	mov	r9, r3
    ffbc:	cbz	r4, 10030 <__register_exitproc+0x88>
    ffbe:	ldr	r0, [r4, #4]
    ffc0:	cmp	r0, #31
    ffc2:	bgt.n	fff4 <__register_exitproc+0x4c>
    ffc4:	adds	r3, r0, #1
    ffc6:	cbz	r6, ffe6 <__register_exitproc+0x3e>
    ffc8:	add.w	r5, r4, r0, lsl #2
    ffcc:	movs	r2, #1
    ffce:	str.w	sl, [r5, #136]	; 0x88
    ffd2:	ldr.w	r1, [r4, #392]	; 0x188
    ffd6:	lsls	r2, r0
    ffd8:	orrs	r1, r2
    ffda:	cmp	r6, #2
    ffdc:	str.w	r1, [r4, #392]	; 0x188
    ffe0:	str.w	r9, [r5, #264]	; 0x108
    ffe4:	beq.n	10024 <__register_exitproc+0x7c>
    ffe6:	adds	r0, #2
    ffe8:	str	r3, [r4, #4]
    ffea:	str.w	r8, [r4, r0, lsl #2]
    ffee:	movs	r0, #0
    fff0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fff4:	ldr	r3, [pc, #80]	; (10048 <__register_exitproc+0xa0>)
    fff6:	cbz	r3, 1003a <__register_exitproc+0x92>
    fff8:	mov.w	r0, #400	; 0x190
    fffc:	bl	b908 <malloc>
   10000:	mov	r4, r0
   10002:	cbz	r0, 1003a <__register_exitproc+0x92>
   10004:	ldr.w	r3, [r5, #328]	; 0x148
   10008:	movs	r7, #0
   1000a:	stmia.w	r0, {r3, r7}
   1000e:	str.w	r4, [r5, #328]	; 0x148
   10012:	mov	r0, r7
   10014:	movs	r3, #1
   10016:	str.w	r7, [r4, #392]	; 0x188
   1001a:	str.w	r7, [r4, #396]	; 0x18c
   1001e:	cmp	r6, #0
   10020:	beq.n	ffe6 <__register_exitproc+0x3e>
   10022:	b.n	ffc8 <__register_exitproc+0x20>
   10024:	ldr.w	r1, [r4, #396]	; 0x18c
   10028:	orrs	r2, r1
   1002a:	str.w	r2, [r4, #396]	; 0x18c
   1002e:	b.n	ffe6 <__register_exitproc+0x3e>
   10030:	add.w	r4, r5, #332	; 0x14c
   10034:	str.w	r4, [r5, #328]	; 0x148
   10038:	b.n	ffbe <__register_exitproc+0x16>
   1003a:	mov.w	r0, #4294967295
   1003e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10042:	nop
   10044:	.word	0x00013714
   10048:	.word	0x0000b909

0001004c <register_fini>:
   1004c:	ldr	r3, [pc, #8]	; (10058 <register_fini+0xc>)
   1004e:	cbz	r3, 10056 <register_fini+0xa>
   10050:	ldr	r0, [pc, #8]	; (1005c <register_fini+0x10>)
   10052:	b.w	10060 <atexit>
   10056:	bx	lr
   10058:	.word	0x00000000
   1005c:	.word	0x00010fcd

00010060 <atexit>:
   10060:	movs	r3, #0
   10062:	mov	r1, r0
   10064:	mov	r2, r3
   10066:	mov	r0, r3
   10068:	b.w	ffa8 <__register_exitproc>

0001006c <quorem>:
   1006c:	ldr	r2, [r0, #16]
   1006e:	ldr	r3, [r1, #16]
   10070:	cmp	r3, r2
   10072:	bgt.w	10190 <quorem+0x124>
   10076:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1007a:	add.w	r8, r3, #4294967295
   1007e:	add.w	r7, r1, #20
   10082:	add.w	fp, r0, #20
   10086:	ldr.w	r2, [r7, r8, lsl #2]
   1008a:	ldr.w	r3, [fp, r8, lsl #2]
   1008e:	mov.w	r4, r8, lsl #2
   10092:	sub	sp, #12
   10094:	adds	r2, #1
   10096:	udiv	r9, r3, r2
   1009a:	add.w	r3, fp, r4
   1009e:	str	r4, [sp, #0]
   100a0:	add.w	sl, r7, r4
   100a4:	str	r3, [sp, #4]
   100a6:	cmp.w	r9, #0
   100aa:	beq.n	10120 <quorem+0xb4>
   100ac:	movs	r5, #0
   100ae:	mov	ip, r7
   100b0:	mov	lr, fp
   100b2:	mov	r3, r5
   100b4:	ldr.w	r6, [ip], #4
   100b8:	ldr.w	r2, [lr]
   100bc:	uxth	r4, r6
   100be:	mla	r5, r9, r4, r5
   100c2:	lsrs	r6, r6, #16
   100c4:	lsrs	r4, r5, #16
   100c6:	mla	r4, r9, r6, r4
   100ca:	uxth	r5, r5
   100cc:	subs	r3, r3, r5
   100ce:	uxth	r6, r4
   100d0:	uxtah	r3, r3, r2
   100d4:	rsb	r6, r6, r2, lsr #16
   100d8:	add.w	r6, r6, r3, asr #16
   100dc:	uxth	r3, r3
   100de:	orr.w	r3, r3, r6, lsl #16
   100e2:	cmp	sl, ip
   100e4:	str.w	r3, [lr], #4
   100e8:	mov.w	r5, r4, lsr #16
   100ec:	mov.w	r3, r6, asr #16
   100f0:	bcs.n	100b4 <quorem+0x48>
   100f2:	ldr	r3, [sp, #0]
   100f4:	ldr.w	r3, [fp, r3]
   100f8:	cbnz	r3, 10120 <quorem+0xb4>
   100fa:	ldr	r4, [sp, #4]
   100fc:	subs	r3, r4, #4
   100fe:	cmp	fp, r3
   10100:	bcs.n	1011c <quorem+0xb0>
   10102:	ldr.w	r3, [r4, #-4]
   10106:	cbnz	r3, 1011c <quorem+0xb0>
   10108:	sub.w	r3, r4, #8
   1010c:	b.n	10114 <quorem+0xa8>
   1010e:	ldr	r2, [r3, #0]
   10110:	subs	r3, #4
   10112:	cbnz	r2, 1011c <quorem+0xb0>
   10114:	cmp	fp, r3
   10116:	add.w	r8, r8, #4294967295
   1011a:	bcc.n	1010e <quorem+0xa2>
   1011c:	str.w	r8, [r0, #16]
   10120:	mov	r4, r0
   10122:	bl	11f08 <__mcmp>
   10126:	cmp	r0, #0
   10128:	blt.n	10188 <quorem+0x11c>
   1012a:	add.w	r9, r9, #1
   1012e:	mov	r5, fp
   10130:	movs	r3, #0
   10132:	ldr.w	r1, [r7], #4
   10136:	ldr	r0, [r5, #0]
   10138:	uxth	r2, r1
   1013a:	subs	r2, r3, r2
   1013c:	lsrs	r1, r1, #16
   1013e:	uxtah	r2, r2, r0
   10142:	rsb	r3, r1, r0, lsr #16
   10146:	add.w	r3, r3, r2, asr #16
   1014a:	uxth	r1, r2
   1014c:	orr.w	r1, r1, r3, lsl #16
   10150:	cmp	sl, r7
   10152:	str.w	r1, [r5], #4
   10156:	mov.w	r3, r3, asr #16
   1015a:	bcs.n	10132 <quorem+0xc6>
   1015c:	ldr.w	r2, [fp, r8, lsl #2]
   10160:	add.w	r3, fp, r8, lsl #2
   10164:	cbnz	r2, 10188 <quorem+0x11c>
   10166:	subs	r2, r3, #4
   10168:	cmp	fp, r2
   1016a:	bcs.n	10184 <quorem+0x118>
   1016c:	ldr.w	r2, [r3, #-4]
   10170:	cbnz	r2, 10184 <quorem+0x118>
   10172:	subs	r3, #8
   10174:	b.n	1017c <quorem+0x110>
   10176:	ldr	r2, [r3, #0]
   10178:	subs	r3, #4
   1017a:	cbnz	r2, 10184 <quorem+0x118>
   1017c:	cmp	fp, r3
   1017e:	add.w	r8, r8, #4294967295
   10182:	bcc.n	10176 <quorem+0x10a>
   10184:	str.w	r8, [r4, #16]
   10188:	mov	r0, r9
   1018a:	add	sp, #12
   1018c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10190:	movs	r0, #0
   10192:	bx	lr
   10194:			; <UNDEFINED> instruction: 0xffffffff

00010198 <_dtoa_r>:
   10198:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1019c:	vmov	r6, r7, d0
   101a0:	sub	sp, #108	; 0x6c
   101a2:	ldr	r4, [r0, #64]	; 0x40
   101a4:	ldr	r5, [sp, #144]	; 0x90
   101a6:	str	r1, [sp, #0]
   101a8:	mov	r9, r0
   101aa:	str	r2, [sp, #20]
   101ac:	str	r3, [sp, #12]
   101ae:	vmov	sl, s0
   101b2:	mov	fp, r7
   101b4:	cbz	r4, 101cc <_dtoa_r+0x34>
   101b6:	ldr	r2, [r0, #68]	; 0x44
   101b8:	str	r2, [r4, #4]
   101ba:	movs	r3, #1
   101bc:	lsls	r3, r2
   101be:	str	r3, [r4, #8]
   101c0:	mov	r1, r4
   101c2:	bl	11aac <_Bfree>
   101c6:	movs	r3, #0
   101c8:	str.w	r3, [r9, #64]	; 0x40
   101cc:	cmp.w	fp, #0
   101d0:	mov	r4, fp
   101d2:	blt.n	1023e <_dtoa_r+0xa6>
   101d4:	movs	r3, #0
   101d6:	str	r3, [r5, #0]
   101d8:	ldr	r3, [pc, #644]	; (10460 <_dtoa_r+0x2c8>)
   101da:	mov	r2, r3
   101dc:	ands	r3, r4
   101de:	cmp	r3, r2
   101e0:	beq.n	10210 <_dtoa_r+0x78>
   101e2:	movs	r2, #0
   101e4:	movs	r3, #0
   101e6:	mov	r0, sl
   101e8:	mov	r1, fp
   101ea:	bl	b378 <__aeabi_dcmpeq>
   101ee:	mov	r6, sl
   101f0:	mov	r7, fp
   101f2:	mov	r8, r0
   101f4:	cbz	r0, 1024a <_dtoa_r+0xb2>
   101f6:	ldr	r2, [sp, #12]
   101f8:	movs	r3, #1
   101fa:	str	r3, [r2, #0]
   101fc:	ldr	r3, [sp, #148]	; 0x94
   101fe:	cmp	r3, #0
   10200:	beq.w	10380 <_dtoa_r+0x1e8>
   10204:	ldr	r0, [pc, #604]	; (10464 <_dtoa_r+0x2cc>)
   10206:	str	r0, [r3, #0]
   10208:	subs	r0, #1
   1020a:	add	sp, #108	; 0x6c
   1020c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10210:	ldr	r2, [sp, #12]
   10212:	movw	r3, #9999	; 0x270f
   10216:	str	r3, [r2, #0]
   10218:	cmp.w	sl, #0
   1021c:	beq.w	10354 <_dtoa_r+0x1bc>
   10220:	ldr	r0, [pc, #580]	; (10468 <_dtoa_r+0x2d0>)
   10222:	ldr	r3, [sp, #148]	; 0x94
   10224:	cmp	r3, #0
   10226:	beq.n	1020a <_dtoa_r+0x72>
   10228:	ldrb	r3, [r0, #3]
   1022a:	cmp	r3, #0
   1022c:	beq.w	10384 <_dtoa_r+0x1ec>
   10230:	add.w	r3, r0, #8
   10234:	ldr	r2, [sp, #148]	; 0x94
   10236:	str	r3, [r2, #0]
   10238:	add	sp, #108	; 0x6c
   1023a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1023e:	movs	r3, #1
   10240:	bic.w	r4, fp, #2147483648	; 0x80000000
   10244:	str	r3, [r5, #0]
   10246:	mov	fp, r4
   10248:	b.n	101d8 <_dtoa_r+0x40>
   1024a:	add	r2, sp, #96	; 0x60
   1024c:	add	r1, sp, #100	; 0x64
   1024e:	vmov	d0, r6, r7
   10252:	mov	r0, r9
   10254:	bl	12184 <__d2b>
   10258:	lsrs	r5, r4, #20
   1025a:	str	r0, [sp, #40]	; 0x28
   1025c:	bne.w	10366 <_dtoa_r+0x1ce>
   10260:	ldr	r5, [sp, #96]	; 0x60
   10262:	ldr	r6, [sp, #100]	; 0x64
   10264:	add	r6, r5
   10266:	addw	r3, r6, #1074	; 0x432
   1026a:	cmp	r3, #32
   1026c:	ble.w	10780 <_dtoa_r+0x5e8>
   10270:	rsb	r3, r3, #64	; 0x40
   10274:	addw	r0, r6, #1042	; 0x412
   10278:	lsls	r4, r3
   1027a:	lsr.w	r0, sl, r0
   1027e:	orrs	r0, r4
   10280:	bl	adbc <__aeabi_ui2d>
   10284:	movs	r3, #1
   10286:	subs	r4, r6, #1
   10288:	sub.w	r1, r1, #32505856	; 0x1f00000
   1028c:	str	r3, [sp, #60]	; 0x3c
   1028e:	movs	r2, #0
   10290:	ldr	r3, [pc, #472]	; (1046c <_dtoa_r+0x2d4>)
   10292:	bl	ab40 <__aeabi_dsub>
   10296:	add	r3, pc, #432	; (adr r3, 10448 <_dtoa_r+0x2b0>)
   10298:	ldrd	r2, r3, [r3]
   1029c:	bl	aea8 <__aeabi_dmul>
   102a0:	add	r3, pc, #428	; (adr r3, 10450 <_dtoa_r+0x2b8>)
   102a2:	ldrd	r2, r3, [r3]
   102a6:	bl	ab44 <__adddf3>
   102aa:	mov	r6, r0
   102ac:	mov	r0, r4
   102ae:	mov	r7, r1
   102b0:	bl	addc <__aeabi_i2d>
   102b4:	add	r3, pc, #416	; (adr r3, 10458 <_dtoa_r+0x2c0>)
   102b6:	ldrd	r2, r3, [r3]
   102ba:	bl	aea8 <__aeabi_dmul>
   102be:	mov	r2, r0
   102c0:	mov	r3, r1
   102c2:	mov	r0, r6
   102c4:	mov	r1, r7
   102c6:	bl	ab44 <__adddf3>
   102ca:	mov	r6, r0
   102cc:	mov	r7, r1
   102ce:	bl	b408 <__aeabi_d2iz>
   102d2:	movs	r2, #0
   102d4:	str	r0, [sp, #16]
   102d6:	movs	r3, #0
   102d8:	mov	r0, r6
   102da:	mov	r1, r7
   102dc:	bl	b38c <__aeabi_dcmplt>
   102e0:	cmp	r0, #0
   102e2:	bne.w	10736 <_dtoa_r+0x59e>
   102e6:	ldr	r6, [sp, #16]
   102e8:	cmp	r6, #22
   102ea:	bhi.w	10730 <_dtoa_r+0x598>
   102ee:	ldr	r3, [pc, #384]	; (10470 <_dtoa_r+0x2d8>)
   102f0:	add.w	r3, r3, r6, lsl #3
   102f4:	ldrd	r0, r1, [r3]
   102f8:	mov	r2, sl
   102fa:	mov	r3, fp
   102fc:	bl	b3c8 <__aeabi_dcmpgt>
   10300:	cmp	r0, #0
   10302:	beq.w	1078a <_dtoa_r+0x5f2>
   10306:	subs	r3, r6, #1
   10308:	str	r3, [sp, #16]
   1030a:	movs	r3, #0
   1030c:	str	r3, [sp, #52]	; 0x34
   1030e:	subs	r5, r5, r4
   10310:	subs.w	r8, r5, #1
   10314:	bmi.w	1076c <_dtoa_r+0x5d4>
   10318:	movs	r3, #0
   1031a:	str	r3, [sp, #28]
   1031c:	ldr	r3, [sp, #16]
   1031e:	cmp	r3, #0
   10320:	blt.w	1075a <_dtoa_r+0x5c2>
   10324:	add	r8, r3
   10326:	str	r3, [sp, #48]	; 0x30
   10328:	movs	r3, #0
   1032a:	str	r3, [sp, #24]
   1032c:	ldr	r3, [sp, #0]
   1032e:	cmp	r3, #9
   10330:	bhi.n	10388 <_dtoa_r+0x1f0>
   10332:	cmp	r3, #5
   10334:	ble.w	10fc0 <_dtoa_r+0xe28>
   10338:	subs	r3, #4
   1033a:	str	r3, [sp, #0]
   1033c:	movs	r6, #0
   1033e:	ldr	r3, [sp, #0]
   10340:	subs	r3, #2
   10342:	cmp	r3, #3
   10344:	bhi.w	10f8e <_dtoa_r+0xdf6>
   10348:	tbh	[pc, r3, lsl #1]
   1034c:	.word	0x0224032b
   10350:	.word	0x04500336
   10354:	ldr	r3, [pc, #272]	; (10468 <_dtoa_r+0x2d0>)
   10356:	ldr	r2, [pc, #284]	; (10474 <_dtoa_r+0x2dc>)
   10358:	ubfx	r0, r4, #0, #20
   1035c:	cmp	r0, #0
   1035e:	ite	ne
   10360:	movne	r0, r3
   10362:	moveq	r0, r2
   10364:	b.n	10222 <_dtoa_r+0x8a>
   10366:	ubfx	r3, fp, #0, #20
   1036a:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   1036e:	subw	r4, r5, #1023	; 0x3ff
   10372:	mov	r0, sl
   10374:	str.w	r8, [sp, #60]	; 0x3c
   10378:	orr.w	r1, r1, #3145728	; 0x300000
   1037c:	ldr	r5, [sp, #96]	; 0x60
   1037e:	b.n	1028e <_dtoa_r+0xf6>
   10380:	ldr	r0, [pc, #244]	; (10478 <_dtoa_r+0x2e0>)
   10382:	b.n	1020a <_dtoa_r+0x72>
   10384:	adds	r3, r0, #3
   10386:	b.n	10234 <_dtoa_r+0x9c>
   10388:	movs	r1, #0
   1038a:	str.w	r1, [r9, #68]	; 0x44
   1038e:	mov	r0, r9
   10390:	mov	r4, r1
   10392:	str	r1, [sp, #0]
   10394:	bl	11a60 <_Balloc>
   10398:	mov.w	r3, #4294967295
   1039c:	str	r3, [sp, #32]
   1039e:	str	r3, [sp, #56]	; 0x38
   103a0:	movs	r3, #1
   103a2:	str	r0, [sp, #36]	; 0x24
   103a4:	str.w	r0, [r9, #64]	; 0x40
   103a8:	str	r4, [sp, #20]
   103aa:	str	r3, [sp, #44]	; 0x2c
   103ac:	ldr	r3, [sp, #100]	; 0x64
   103ae:	cmp	r3, #0
   103b0:	blt.w	10554 <_dtoa_r+0x3bc>
   103b4:	ldr	r2, [sp, #16]
   103b6:	cmp	r2, #14
   103b8:	bgt.w	10554 <_dtoa_r+0x3bc>
   103bc:	ldr	r3, [pc, #176]	; (10470 <_dtoa_r+0x2d8>)
   103be:	add.w	r3, r3, r2, lsl #3
   103c2:	vldr	d7, [r3]
   103c6:	ldr	r3, [sp, #20]
   103c8:	cmp	r3, #0
   103ca:	vstr	d7, [sp]
   103ce:	blt.w	109ce <_dtoa_r+0x836>
   103d2:	mov	r6, sl
   103d4:	mov	r7, fp
   103d6:	ldrd	sl, fp, [sp]
   103da:	mov	r0, r6
   103dc:	mov	r2, sl
   103de:	mov	r3, fp
   103e0:	mov	r1, r7
   103e2:	bl	b0fc <__aeabi_ddiv>
   103e6:	bl	b408 <__aeabi_d2iz>
   103ea:	mov	r4, r0
   103ec:	bl	addc <__aeabi_i2d>
   103f0:	mov	r2, sl
   103f2:	mov	r3, fp
   103f4:	bl	aea8 <__aeabi_dmul>
   103f8:	mov	r3, r1
   103fa:	mov	r2, r0
   103fc:	mov	r1, r7
   103fe:	mov	r0, r6
   10400:	bl	ab40 <__aeabi_dsub>
   10404:	ldr	r5, [sp, #36]	; 0x24
   10406:	add.w	r3, r4, #48	; 0x30
   1040a:	strb	r3, [r5, #0]
   1040c:	ldr	r3, [sp, #32]
   1040e:	cmp	r3, #1
   10410:	mov	r6, r0
   10412:	mov	r7, r1
   10414:	add.w	r5, r5, #1
   10418:	beq.n	104de <_dtoa_r+0x346>
   1041a:	movs	r2, #0
   1041c:	ldr	r3, [pc, #92]	; (1047c <_dtoa_r+0x2e4>)
   1041e:	bl	aea8 <__aeabi_dmul>
   10422:	movs	r2, #0
   10424:	movs	r3, #0
   10426:	mov	r6, r0
   10428:	mov	r7, r1
   1042a:	bl	b378 <__aeabi_dcmpeq>
   1042e:	cmp	r0, #0
   10430:	bne.n	1052e <_dtoa_r+0x396>
   10432:	str.w	r9, [sp, #20]
   10436:	ldr.w	sl, [sp, #32]
   1043a:	ldr.w	fp, [sp, #36]	; 0x24
   1043e:	ldrd	r8, r9, [sp]
   10442:	b.n	10496 <_dtoa_r+0x2fe>
   10444:	nop.w
   10448:	.word	0x636f4361
   1044c:	.word	0x3fd287a7
   10450:	.word	0x8b60c8b3
   10454:	.word	0x3fc68a28
   10458:	.word	0x509f79fb
   1045c:	.word	0x3fd34413
   10460:	.word	0x7ff00000
   10464:	.word	0x000137d9
   10468:	.word	0x00013928
   1046c:	.word	0x3ff80000
   10470:	.word	0x00013a30
   10474:	.word	0x0001391c
   10478:	.word	0x000137d8
   1047c:	.word	0x40240000
   10480:	bl	aea8 <__aeabi_dmul>
   10484:	movs	r2, #0
   10486:	movs	r3, #0
   10488:	mov	r6, r0
   1048a:	mov	r7, r1
   1048c:	bl	b378 <__aeabi_dcmpeq>
   10490:	cmp	r0, #0
   10492:	bne.w	10bf2 <_dtoa_r+0xa5a>
   10496:	mov	r2, r8
   10498:	mov	r3, r9
   1049a:	mov	r0, r6
   1049c:	mov	r1, r7
   1049e:	bl	b0fc <__aeabi_ddiv>
   104a2:	bl	b408 <__aeabi_d2iz>
   104a6:	mov	r4, r0
   104a8:	bl	addc <__aeabi_i2d>
   104ac:	mov	r2, r8
   104ae:	mov	r3, r9
   104b0:	bl	aea8 <__aeabi_dmul>
   104b4:	mov	r2, r0
   104b6:	mov	r3, r1
   104b8:	mov	r0, r6
   104ba:	mov	r1, r7
   104bc:	bl	ab40 <__aeabi_dsub>
   104c0:	add.w	lr, r4, #48	; 0x30
   104c4:	strb.w	lr, [r5], #1
   104c8:	rsb	lr, fp, r5
   104cc:	cmp	lr, sl
   104ce:	mov	r6, r0
   104d0:	mov	r7, r1
   104d2:	mov.w	r2, #0
   104d6:	ldr	r3, [pc, #696]	; (10790 <_dtoa_r+0x5f8>)
   104d8:	bne.n	10480 <_dtoa_r+0x2e8>
   104da:	ldr.w	r9, [sp, #20]
   104de:	mov	r2, r6
   104e0:	mov	r3, r7
   104e2:	mov	r0, r6
   104e4:	mov	r1, r7
   104e6:	bl	ab44 <__adddf3>
   104ea:	mov	r6, r0
   104ec:	mov	r7, r1
   104ee:	mov	r2, r0
   104f0:	mov	r3, r1
   104f2:	ldrd	r0, r1, [sp]
   104f6:	bl	b38c <__aeabi_dcmplt>
   104fa:	cbnz	r0, 1050e <_dtoa_r+0x376>
   104fc:	mov	r2, r6
   104fe:	mov	r3, r7
   10500:	ldrd	r0, r1, [sp]
   10504:	bl	b378 <__aeabi_dcmpeq>
   10508:	cbz	r0, 1052e <_dtoa_r+0x396>
   1050a:	lsls	r3, r4, #31
   1050c:	bpl.n	1052e <_dtoa_r+0x396>
   1050e:	ldrb.w	r4, [r5, #-1]
   10512:	ldr	r2, [sp, #36]	; 0x24
   10514:	subs	r3, r5, #1
   10516:	b.n	10522 <_dtoa_r+0x38a>
   10518:	cmp	r2, r3
   1051a:	beq.w	10d16 <_dtoa_r+0xb7e>
   1051e:	ldrb.w	r4, [r3, #-1]!
   10522:	cmp	r4, #57	; 0x39
   10524:	add.w	r5, r3, #1
   10528:	beq.n	10518 <_dtoa_r+0x380>
   1052a:	adds	r4, #1
   1052c:	strb	r4, [r3, #0]
   1052e:	ldr	r1, [sp, #40]	; 0x28
   10530:	mov	r0, r9
   10532:	bl	11aac <_Bfree>
   10536:	movs	r2, #0
   10538:	ldr	r3, [sp, #16]
   1053a:	strb	r2, [r5, #0]
   1053c:	ldr	r2, [sp, #12]
   1053e:	adds	r3, #1
   10540:	str	r3, [r2, #0]
   10542:	ldr	r3, [sp, #148]	; 0x94
   10544:	cmp	r3, #0
   10546:	beq.w	10c80 <_dtoa_r+0xae8>
   1054a:	ldr	r0, [sp, #36]	; 0x24
   1054c:	str	r5, [r3, #0]
   1054e:	add	sp, #108	; 0x6c
   10550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10554:	ldr	r2, [sp, #44]	; 0x2c
   10556:	cmp	r2, #0
   10558:	beq.w	10778 <_dtoa_r+0x5e0>
   1055c:	ldr	r2, [sp, #0]
   1055e:	cmp	r2, #1
   10560:	ble.w	10a12 <_dtoa_r+0x87a>
   10564:	ldr	r3, [sp, #32]
   10566:	ldr	r2, [sp, #24]
   10568:	subs	r7, r3, #1
   1056a:	cmp	r2, r7
   1056c:	blt.w	10c86 <_dtoa_r+0xaee>
   10570:	subs	r7, r2, r7
   10572:	ldr	r3, [sp, #32]
   10574:	cmp	r3, #0
   10576:	blt.w	10e7a <_dtoa_r+0xce2>
   1057a:	ldr	r5, [sp, #28]
   1057c:	ldr	r3, [sp, #32]
   1057e:	ldr	r2, [sp, #28]
   10580:	movs	r1, #1
   10582:	add	r2, r3
   10584:	mov	r0, r9
   10586:	str	r2, [sp, #28]
   10588:	add	r8, r3
   1058a:	bl	11c74 <__i2b>
   1058e:	mov	r6, r0
   10590:	cbz	r5, 105ac <_dtoa_r+0x414>
   10592:	cmp.w	r8, #0
   10596:	ble.n	105ac <_dtoa_r+0x414>
   10598:	cmp	r5, r8
   1059a:	ldr	r2, [sp, #28]
   1059c:	mov	r3, r5
   1059e:	it	ge
   105a0:	movge	r3, r8
   105a2:	subs	r2, r2, r3
   105a4:	str	r2, [sp, #28]
   105a6:	subs	r5, r5, r3
   105a8:	rsb	r8, r3, r8
   105ac:	ldr	r3, [sp, #24]
   105ae:	cmp	r3, #0
   105b0:	ble.w	10b9e <_dtoa_r+0xa06>
   105b4:	ldr	r2, [sp, #44]	; 0x2c
   105b6:	cmp	r2, #0
   105b8:	beq.w	109c0 <_dtoa_r+0x828>
   105bc:	cmp	r7, #0
   105be:	beq.w	109c0 <_dtoa_r+0x828>
   105c2:	mov	r1, r6
   105c4:	mov	r2, r7
   105c6:	mov	r0, r9
   105c8:	bl	11db8 <__pow5mult>
   105cc:	ldr	r2, [sp, #40]	; 0x28
   105ce:	mov	r1, r0
   105d0:	mov	r6, r0
   105d2:	mov	r0, r9
   105d4:	bl	11c88 <__multiply>
   105d8:	ldr	r1, [sp, #40]	; 0x28
   105da:	mov	r4, r0
   105dc:	mov	r0, r9
   105de:	bl	11aac <_Bfree>
   105e2:	ldr	r3, [sp, #24]
   105e4:	subs	r3, r3, r7
   105e6:	str	r3, [sp, #24]
   105e8:	bne.w	109be <_dtoa_r+0x826>
   105ec:	movs	r1, #1
   105ee:	mov	r0, r9
   105f0:	bl	11c74 <__i2b>
   105f4:	ldr	r3, [sp, #48]	; 0x30
   105f6:	str	r0, [sp, #24]
   105f8:	cmp	r3, #0
   105fa:	beq.w	10a28 <_dtoa_r+0x890>
   105fe:	mov	r1, r0
   10600:	mov	r2, r3
   10602:	mov	r0, r9
   10604:	bl	11db8 <__pow5mult>
   10608:	ldr	r3, [sp, #0]
   1060a:	str	r0, [sp, #24]
   1060c:	cmp	r3, #1
   1060e:	ble.w	10bf8 <_dtoa_r+0xa60>
   10612:	movs	r7, #0
   10614:	ldr	r2, [sp, #24]
   10616:	ldr	r3, [r2, #16]
   10618:	add.w	r3, r2, r3, lsl #2
   1061c:	ldr	r0, [r3, #16]
   1061e:	bl	11bd8 <__hi0bits>
   10622:	rsb	r0, r0, #32
   10626:	add	r0, r8
   10628:	ands.w	r0, r0, #31
   1062c:	beq.w	10a24 <_dtoa_r+0x88c>
   10630:	rsb	r3, r0, #32
   10634:	cmp	r3, #4
   10636:	ble.w	10fb4 <_dtoa_r+0xe1c>
   1063a:	rsb	r0, r0, #28
   1063e:	ldr	r3, [sp, #28]
   10640:	add	r3, r0
   10642:	str	r3, [sp, #28]
   10644:	add	r5, r0
   10646:	add	r8, r0
   10648:	ldr	r3, [sp, #28]
   1064a:	cmp	r3, #0
   1064c:	ble.n	1065a <_dtoa_r+0x4c2>
   1064e:	mov	r1, r4
   10650:	mov	r2, r3
   10652:	mov	r0, r9
   10654:	bl	11e58 <__lshift>
   10658:	mov	r4, r0
   1065a:	cmp.w	r8, #0
   1065e:	ble.n	1066c <_dtoa_r+0x4d4>
   10660:	mov	r2, r8
   10662:	ldr	r1, [sp, #24]
   10664:	mov	r0, r9
   10666:	bl	11e58 <__lshift>
   1066a:	str	r0, [sp, #24]
   1066c:	ldr	r3, [sp, #52]	; 0x34
   1066e:	cmp	r3, #0
   10670:	bne.w	10b68 <_dtoa_r+0x9d0>
   10674:	ldr	r3, [sp, #32]
   10676:	cmp	r3, #0
   10678:	ble.w	10ba2 <_dtoa_r+0xa0a>
   1067c:	ldr	r3, [sp, #44]	; 0x2c
   1067e:	cmp	r3, #0
   10680:	bne.w	10a6c <_dtoa_r+0x8d4>
   10684:	ldr.w	fp, [sp, #36]	; 0x24
   10688:	ldr	r7, [sp, #32]
   1068a:	ldr.w	r8, [sp, #24]
   1068e:	mov	r5, fp
   10690:	b.n	10698 <_dtoa_r+0x500>
   10692:	bl	11ac0 <__multadd>
   10696:	mov	r4, r0
   10698:	mov	r1, r8
   1069a:	mov	r0, r4
   1069c:	bl	1006c <quorem>
   106a0:	add.w	sl, r0, #48	; 0x30
   106a4:	strb.w	sl, [r5], #1
   106a8:	rsb	r3, fp, r5
   106ac:	cmp	r3, r7
   106ae:	mov.w	r2, #10
   106b2:	mov.w	r3, #0
   106b6:	mov	r1, r4
   106b8:	mov	r0, r9
   106ba:	blt.n	10692 <_dtoa_r+0x4fa>
   106bc:	ldr	r3, [sp, #36]	; 0x24
   106be:	ldr	r2, [sp, #32]
   106c0:	cmp	r2, #1
   106c2:	ite	ge
   106c4:	addge	r3, r3, r2
   106c6:	addlt	r3, #1
   106c8:	mov	r5, r3
   106ca:	mov.w	fp, #0
   106ce:	mov	r1, r4
   106d0:	movs	r2, #1
   106d2:	mov	r0, r9
   106d4:	bl	11e58 <__lshift>
   106d8:	ldr	r1, [sp, #24]
   106da:	str	r0, [sp, #40]	; 0x28
   106dc:	bl	11f08 <__mcmp>
   106e0:	cmp	r0, #0
   106e2:	ble.w	10cf0 <_dtoa_r+0xb58>
   106e6:	ldrb.w	r2, [r5, #-1]
   106ea:	ldr	r1, [sp, #36]	; 0x24
   106ec:	subs	r3, r5, #1
   106ee:	b.n	106fa <_dtoa_r+0x562>
   106f0:	cmp	r3, r1
   106f2:	beq.w	10bde <_dtoa_r+0xa46>
   106f6:	ldrb.w	r2, [r3, #-1]!
   106fa:	cmp	r2, #57	; 0x39
   106fc:	add.w	r5, r3, #1
   10700:	beq.n	106f0 <_dtoa_r+0x558>
   10702:	adds	r2, #1
   10704:	strb	r2, [r3, #0]
   10706:	ldr	r1, [sp, #24]
   10708:	mov	r0, r9
   1070a:	bl	11aac <_Bfree>
   1070e:	cmp	r6, #0
   10710:	beq.w	1052e <_dtoa_r+0x396>
   10714:	cmp.w	fp, #0
   10718:	beq.n	10726 <_dtoa_r+0x58e>
   1071a:	cmp	fp, r6
   1071c:	beq.n	10726 <_dtoa_r+0x58e>
   1071e:	mov	r1, fp
   10720:	mov	r0, r9
   10722:	bl	11aac <_Bfree>
   10726:	mov	r1, r6
   10728:	mov	r0, r9
   1072a:	bl	11aac <_Bfree>
   1072e:	b.n	1052e <_dtoa_r+0x396>
   10730:	movs	r3, #1
   10732:	str	r3, [sp, #52]	; 0x34
   10734:	b.n	1030e <_dtoa_r+0x176>
   10736:	ldr.w	r8, [sp, #16]
   1073a:	mov	r0, r8
   1073c:	bl	addc <__aeabi_i2d>
   10740:	mov	r2, r0
   10742:	mov	r3, r1
   10744:	mov	r0, r6
   10746:	mov	r1, r7
   10748:	bl	b378 <__aeabi_dcmpeq>
   1074c:	cmp	r0, #0
   1074e:	bne.w	102e6 <_dtoa_r+0x14e>
   10752:	add.w	r3, r8, #4294967295
   10756:	str	r3, [sp, #16]
   10758:	b.n	102e6 <_dtoa_r+0x14e>
   1075a:	ldr	r2, [sp, #28]
   1075c:	ldr	r3, [sp, #16]
   1075e:	subs	r2, r2, r3
   10760:	negs	r3, r3
   10762:	str	r3, [sp, #24]
   10764:	movs	r3, #0
   10766:	str	r2, [sp, #28]
   10768:	str	r3, [sp, #48]	; 0x30
   1076a:	b.n	1032c <_dtoa_r+0x194>
   1076c:	rsb	r3, r8, #0
   10770:	str	r3, [sp, #28]
   10772:	mov.w	r8, #0
   10776:	b.n	1031c <_dtoa_r+0x184>
   10778:	ldr	r7, [sp, #24]
   1077a:	ldr	r5, [sp, #28]
   1077c:	ldr	r6, [sp, #44]	; 0x2c
   1077e:	b.n	10590 <_dtoa_r+0x3f8>
   10780:	rsb	r4, r3, #32
   10784:	lsl.w	r0, sl, r4
   10788:	b.n	10280 <_dtoa_r+0xe8>
   1078a:	str	r0, [sp, #52]	; 0x34
   1078c:	b.n	1030e <_dtoa_r+0x176>
   1078e:	nop
   10790:	.word	0x40240000
   10794:	movs	r3, #0
   10796:	str	r3, [sp, #44]	; 0x2c
   10798:	ldr	r3, [sp, #16]
   1079a:	ldr	r2, [sp, #20]
   1079c:	add	r3, r2
   1079e:	str	r3, [sp, #56]	; 0x38
   107a0:	adds	r3, #1
   107a2:	cmp	r3, #0
   107a4:	str	r3, [sp, #32]
   107a6:	ble.w	10ca4 <_dtoa_r+0xb0c>
   107aa:	ldr	r4, [sp, #32]
   107ac:	mov	r5, r4
   107ae:	movs	r1, #0
   107b0:	cmp	r5, #23
   107b2:	str.w	r1, [r9, #68]	; 0x44
   107b6:	bls.n	107d0 <_dtoa_r+0x638>
   107b8:	movs	r2, #1
   107ba:	movs	r3, #4
   107bc:	lsls	r3, r3, #1
   107be:	add.w	r0, r3, #20
   107c2:	cmp	r0, r5
   107c4:	mov	r1, r2
   107c6:	add.w	r2, r2, #1
   107ca:	bls.n	107bc <_dtoa_r+0x624>
   107cc:	str.w	r1, [r9, #68]	; 0x44
   107d0:	mov	r0, r9
   107d2:	bl	11a60 <_Balloc>
   107d6:	cmp	r4, #14
   107d8:	str	r0, [sp, #36]	; 0x24
   107da:	str.w	r0, [r9, #64]	; 0x40
   107de:	bhi.w	103ac <_dtoa_r+0x214>
   107e2:	cmp	r6, #0
   107e4:	beq.w	103ac <_dtoa_r+0x214>
   107e8:	ldr	r1, [sp, #16]
   107ea:	cmp	r1, #0
   107ec:	strd	sl, fp, [sp, #64]	; 0x40
   107f0:	ble.w	10d28 <_dtoa_r+0xb90>
   107f4:	ldr	r3, [pc, #576]	; (10a38 <_dtoa_r+0x8a0>)
   107f6:	and.w	r2, r1, #15
   107fa:	asrs	r6, r1, #4
   107fc:	add.w	r3, r3, r2, lsl #3
   10800:	lsls	r0, r6, #27
   10802:	ldrd	r4, r5, [r3]
   10806:	bpl.w	10c96 <_dtoa_r+0xafe>
   1080a:	ldr	r3, [pc, #560]	; (10a3c <_dtoa_r+0x8a4>)
   1080c:	mov	r0, sl
   1080e:	mov	r1, fp
   10810:	ldrd	r2, r3, [r3, #32]
   10814:	bl	b0fc <__aeabi_ddiv>
   10818:	strd	r0, r1, [sp, #72]	; 0x48
   1081c:	and.w	r6, r6, #15
   10820:	mov.w	sl, #3
   10824:	cbz	r6, 10848 <_dtoa_r+0x6b0>
   10826:	ldr	r7, [pc, #532]	; (10a3c <_dtoa_r+0x8a4>)
   10828:	lsls	r1, r6, #31
   1082a:	bpl.n	10840 <_dtoa_r+0x6a8>
   1082c:	mov	r0, r4
   1082e:	mov	r1, r5
   10830:	ldrd	r2, r3, [r7]
   10834:	bl	aea8 <__aeabi_dmul>
   10838:	add.w	sl, sl, #1
   1083c:	mov	r4, r0
   1083e:	mov	r5, r1
   10840:	asrs	r6, r6, #1
   10842:	add.w	r7, r7, #8
   10846:	bne.n	10828 <_dtoa_r+0x690>
   10848:	mov	r2, r4
   1084a:	mov	r3, r5
   1084c:	ldrd	r0, r1, [sp, #72]	; 0x48
   10850:	bl	b0fc <__aeabi_ddiv>
   10854:	mov	r6, r0
   10856:	mov	r7, r1
   10858:	ldr	r3, [sp, #52]	; 0x34
   1085a:	cbz	r3, 1086e <_dtoa_r+0x6d6>
   1085c:	movs	r2, #0
   1085e:	ldr	r3, [pc, #480]	; (10a40 <_dtoa_r+0x8a8>)
   10860:	mov	r0, r6
   10862:	mov	r1, r7
   10864:	bl	b38c <__aeabi_dcmplt>
   10868:	cmp	r0, #0
   1086a:	bne.w	10ea2 <_dtoa_r+0xd0a>
   1086e:	mov	r0, sl
   10870:	bl	addc <__aeabi_i2d>
   10874:	mov	r2, r6
   10876:	mov	r3, r7
   10878:	bl	aea8 <__aeabi_dmul>
   1087c:	ldr	r3, [pc, #452]	; (10a44 <_dtoa_r+0x8ac>)
   1087e:	movs	r2, #0
   10880:	bl	ab44 <__adddf3>
   10884:	ldr	r3, [sp, #32]
   10886:	mov	r4, r0
   10888:	sub.w	r5, r1, #54525952	; 0x3400000
   1088c:	cmp	r3, #0
   1088e:	beq.w	10c48 <_dtoa_r+0xab0>
   10892:	ldr	r3, [sp, #16]
   10894:	str	r3, [sp, #88]	; 0x58
   10896:	ldr	r3, [sp, #32]
   10898:	str	r3, [sp, #72]	; 0x48
   1089a:	ldr	r3, [sp, #44]	; 0x2c
   1089c:	cmp	r3, #0
   1089e:	beq.w	10dca <_dtoa_r+0xc32>
   108a2:	ldr	r2, [sp, #72]	; 0x48
   108a4:	ldr	r3, [pc, #400]	; (10a38 <_dtoa_r+0x8a0>)
   108a6:	ldr	r1, [pc, #416]	; (10a48 <_dtoa_r+0x8b0>)
   108a8:	add.w	r3, r3, r2, lsl #3
   108ac:	ldrd	r2, r3, [r3, #-8]
   108b0:	movs	r0, #0
   108b2:	bl	b0fc <__aeabi_ddiv>
   108b6:	mov	r2, r4
   108b8:	mov	r3, r5
   108ba:	bl	ab40 <__aeabi_dsub>
   108be:	mov	sl, r0
   108c0:	mov	fp, r1
   108c2:	mov	r0, r6
   108c4:	mov	r1, r7
   108c6:	bl	b408 <__aeabi_d2iz>
   108ca:	mov	r4, r0
   108cc:	bl	addc <__aeabi_i2d>
   108d0:	mov	r2, r0
   108d2:	mov	r3, r1
   108d4:	mov	r0, r6
   108d6:	mov	r1, r7
   108d8:	bl	ab40 <__aeabi_dsub>
   108dc:	adds	r4, #48	; 0x30
   108de:	ldr	r5, [sp, #36]	; 0x24
   108e0:	uxtb	r4, r4
   108e2:	mov	r6, r0
   108e4:	mov	r7, r1
   108e6:	strb	r4, [r5, #0]
   108e8:	mov	r2, r0
   108ea:	mov	r3, r1
   108ec:	mov	r0, sl
   108ee:	mov	r1, fp
   108f0:	adds	r5, #1
   108f2:	bl	b3c8 <__aeabi_dcmpgt>
   108f6:	cmp	r0, #0
   108f8:	bne.n	1099c <_dtoa_r+0x804>
   108fa:	mov	r2, r6
   108fc:	mov	r3, r7
   108fe:	movs	r0, #0
   10900:	ldr	r1, [pc, #316]	; (10a40 <_dtoa_r+0x8a8>)
   10902:	bl	ab40 <__aeabi_dsub>
   10906:	mov	r2, r0
   10908:	mov	r3, r1
   1090a:	mov	r0, sl
   1090c:	mov	r1, fp
   1090e:	bl	b3c8 <__aeabi_dcmpgt>
   10912:	cmp	r0, #0
   10914:	bne.w	10f28 <_dtoa_r+0xd90>
   10918:	ldr	r2, [sp, #72]	; 0x48
   1091a:	cmp	r2, #1
   1091c:	ble.w	10d0e <_dtoa_r+0xb76>
   10920:	ldr	r3, [sp, #72]	; 0x48
   10922:	ldr	r2, [sp, #36]	; 0x24
   10924:	str.w	r8, [sp, #72]	; 0x48
   10928:	add	r3, r2
   1092a:	mov	r8, r3
   1092c:	b.n	1094a <_dtoa_r+0x7b2>
   1092e:	movs	r0, #0
   10930:	ldr	r1, [pc, #268]	; (10a40 <_dtoa_r+0x8a8>)
   10932:	bl	ab40 <__aeabi_dsub>
   10936:	mov	r2, sl
   10938:	mov	r3, fp
   1093a:	bl	b38c <__aeabi_dcmplt>
   1093e:	cmp	r0, #0
   10940:	bne.w	10f28 <_dtoa_r+0xd90>
   10944:	cmp	r5, r8
   10946:	beq.w	10d0a <_dtoa_r+0xb72>
   1094a:	mov	r0, sl
   1094c:	mov	r1, fp
   1094e:	movs	r2, #0
   10950:	ldr	r3, [pc, #248]	; (10a4c <_dtoa_r+0x8b4>)
   10952:	bl	aea8 <__aeabi_dmul>
   10956:	movs	r2, #0
   10958:	ldr	r3, [pc, #240]	; (10a4c <_dtoa_r+0x8b4>)
   1095a:	mov	sl, r0
   1095c:	mov	fp, r1
   1095e:	mov	r0, r6
   10960:	mov	r1, r7
   10962:	bl	aea8 <__aeabi_dmul>
   10966:	mov	r7, r1
   10968:	mov	r6, r0
   1096a:	bl	b408 <__aeabi_d2iz>
   1096e:	mov	r4, r0
   10970:	bl	addc <__aeabi_i2d>
   10974:	mov	r2, r0
   10976:	mov	r3, r1
   10978:	mov	r0, r6
   1097a:	mov	r1, r7
   1097c:	bl	ab40 <__aeabi_dsub>
   10980:	adds	r4, #48	; 0x30
   10982:	uxtb	r4, r4
   10984:	mov	r2, sl
   10986:	mov	r3, fp
   10988:	strb.w	r4, [r5], #1
   1098c:	mov	r6, r0
   1098e:	mov	r7, r1
   10990:	bl	b38c <__aeabi_dcmplt>
   10994:	mov	r2, r6
   10996:	mov	r3, r7
   10998:	cmp	r0, #0
   1099a:	beq.n	1092e <_dtoa_r+0x796>
   1099c:	ldr	r3, [sp, #88]	; 0x58
   1099e:	str	r3, [sp, #16]
   109a0:	b.n	1052e <_dtoa_r+0x396>
   109a2:	movs	r3, #0
   109a4:	str	r3, [sp, #44]	; 0x2c
   109a6:	ldr	r3, [sp, #20]
   109a8:	cmp	r3, #0
   109aa:	ble.w	10cae <_dtoa_r+0xb16>
   109ae:	mov	r5, r3
   109b0:	mov	r4, r3
   109b2:	str	r3, [sp, #56]	; 0x38
   109b4:	str	r3, [sp, #32]
   109b6:	b.n	107ae <_dtoa_r+0x616>
   109b8:	movs	r3, #1
   109ba:	str	r3, [sp, #44]	; 0x2c
   109bc:	b.n	109a6 <_dtoa_r+0x80e>
   109be:	str	r4, [sp, #40]	; 0x28
   109c0:	ldr	r2, [sp, #24]
   109c2:	ldr	r1, [sp, #40]	; 0x28
   109c4:	mov	r0, r9
   109c6:	bl	11db8 <__pow5mult>
   109ca:	mov	r4, r0
   109cc:	b.n	105ec <_dtoa_r+0x454>
   109ce:	ldr	r3, [sp, #32]
   109d0:	cmp	r3, #0
   109d2:	bgt.w	103d2 <_dtoa_r+0x23a>
   109d6:	bne.w	10c78 <_dtoa_r+0xae0>
   109da:	movs	r2, #0
   109dc:	ldr	r3, [pc, #112]	; (10a50 <_dtoa_r+0x8b8>)
   109de:	ldrd	r0, r1, [sp]
   109e2:	bl	aea8 <__aeabi_dmul>
   109e6:	mov	r3, fp
   109e8:	mov	r2, sl
   109ea:	bl	b3b4 <__aeabi_dcmpge>
   109ee:	ldr	r3, [sp, #32]
   109f0:	str	r3, [sp, #24]
   109f2:	mov	r6, r3
   109f4:	cmp	r0, #0
   109f6:	beq.w	10bce <_dtoa_r+0xa36>
   109fa:	ldr	r3, [sp, #20]
   109fc:	ldr	r5, [sp, #36]	; 0x24
   109fe:	mvns	r3, r3
   10a00:	str	r3, [sp, #16]
   10a02:	ldr	r1, [sp, #24]
   10a04:	mov	r0, r9
   10a06:	bl	11aac <_Bfree>
   10a0a:	cmp	r6, #0
   10a0c:	beq.w	1052e <_dtoa_r+0x396>
   10a10:	b.n	10726 <_dtoa_r+0x58e>
   10a12:	ldr	r2, [sp, #60]	; 0x3c
   10a14:	cmp	r2, #0
   10a16:	beq.w	10e8a <_dtoa_r+0xcf2>
   10a1a:	addw	r3, r3, #1075	; 0x433
   10a1e:	ldr	r7, [sp, #24]
   10a20:	ldr	r5, [sp, #28]
   10a22:	b.n	1057e <_dtoa_r+0x3e6>
   10a24:	movs	r0, #28
   10a26:	b.n	1063e <_dtoa_r+0x4a6>
   10a28:	ldr	r3, [sp, #0]
   10a2a:	cmp	r3, #1
   10a2c:	ble.w	10f30 <_dtoa_r+0xd98>
   10a30:	ldr	r7, [sp, #48]	; 0x30
   10a32:	movs	r0, #1
   10a34:	b.n	10626 <_dtoa_r+0x48e>
   10a36:	nop
   10a38:	.word	0x00013a30
   10a3c:	.word	0x00013af8
   10a40:	.word	0x3ff00000
   10a44:	.word	0x401c0000
   10a48:	.word	0x3fe00000
   10a4c:	.word	0x40240000
   10a50:	.word	0x40140000
   10a54:	mov	r1, r6
   10a56:	movs	r3, #0
   10a58:	movs	r2, #10
   10a5a:	mov	r0, r9
   10a5c:	bl	11ac0 <__multadd>
   10a60:	ldr	r3, [sp, #56]	; 0x38
   10a62:	cmp	r3, #0
   10a64:	mov	r6, r0
   10a66:	ble.w	10f84 <_dtoa_r+0xdec>
   10a6a:	str	r3, [sp, #32]
   10a6c:	cmp	r5, #0
   10a6e:	ble.n	10a7c <_dtoa_r+0x8e4>
   10a70:	mov	r1, r6
   10a72:	mov	r2, r5
   10a74:	mov	r0, r9
   10a76:	bl	11e58 <__lshift>
   10a7a:	mov	r6, r0
   10a7c:	cmp	r7, #0
   10a7e:	bne.w	10d7a <_dtoa_r+0xbe2>
   10a82:	mov	r8, r6
   10a84:	ldr	r3, [sp, #32]
   10a86:	ldr	r2, [sp, #36]	; 0x24
   10a88:	subs	r3, #1
   10a8a:	adds	r3, r2, r3
   10a8c:	str	r3, [sp, #32]
   10a8e:	and.w	r3, sl, #1
   10a92:	str	r3, [sp, #40]	; 0x28
   10a94:	mov	r7, r2
   10a96:	ldr.w	fp, [sp, #24]
   10a9a:	mov	r0, r4
   10a9c:	mov	r1, fp
   10a9e:	bl	1006c <quorem>
   10aa2:	mov	r1, r6
   10aa4:	mov	r5, r0
   10aa6:	mov	r0, r4
   10aa8:	bl	11f08 <__mcmp>
   10aac:	mov	r2, r8
   10aae:	mov	r1, fp
   10ab0:	mov	sl, r0
   10ab2:	mov	r0, r9
   10ab4:	bl	11f4c <__mdiff>
   10ab8:	ldr	r2, [r0, #12]
   10aba:	mov	fp, r0
   10abc:	add.w	r3, r5, #48	; 0x30
   10ac0:	cmp	r2, #0
   10ac2:	bne.n	10b58 <_dtoa_r+0x9c0>
   10ac4:	mov	r1, r0
   10ac6:	mov	r0, r4
   10ac8:	str	r3, [sp, #28]
   10aca:	bl	11f08 <__mcmp>
   10ace:	mov	r1, fp
   10ad0:	str	r0, [sp, #20]
   10ad2:	mov	r0, r9
   10ad4:	bl	11aac <_Bfree>
   10ad8:	ldr	r2, [sp, #20]
   10ada:	ldr	r3, [sp, #28]
   10adc:	cbnz	r2, 10aea <_dtoa_r+0x952>
   10ade:	ldr	r1, [sp, #0]
   10ae0:	cbnz	r1, 10aea <_dtoa_r+0x952>
   10ae2:	ldr	r1, [sp, #40]	; 0x28
   10ae4:	cmp	r1, #0
   10ae6:	beq.w	10f54 <_dtoa_r+0xdbc>
   10aea:	cmp.w	sl, #0
   10aee:	blt.w	10cb8 <_dtoa_r+0xb20>
   10af2:	bne.n	10b00 <_dtoa_r+0x968>
   10af4:	ldr	r1, [sp, #0]
   10af6:	cbnz	r1, 10b00 <_dtoa_r+0x968>
   10af8:	ldr	r1, [sp, #40]	; 0x28
   10afa:	cmp	r1, #0
   10afc:	beq.w	10cb8 <_dtoa_r+0xb20>
   10b00:	cmp	r2, #0
   10b02:	bgt.w	10da2 <_dtoa_r+0xc0a>
   10b06:	ldr	r2, [sp, #32]
   10b08:	strb	r3, [r7, #0]
   10b0a:	add.w	sl, r7, #1
   10b0e:	cmp	r7, r2
   10b10:	mov	r5, sl
   10b12:	beq.w	10dba <_dtoa_r+0xc22>
   10b16:	mov	r1, r4
   10b18:	movs	r3, #0
   10b1a:	movs	r2, #10
   10b1c:	mov	r0, r9
   10b1e:	bl	11ac0 <__multadd>
   10b22:	cmp	r6, r8
   10b24:	mov	r4, r0
   10b26:	mov	r1, r6
   10b28:	mov.w	r3, #0
   10b2c:	mov.w	r2, #10
   10b30:	mov	r0, r9
   10b32:	beq.n	10b4c <_dtoa_r+0x9b4>
   10b34:	bl	11ac0 <__multadd>
   10b38:	mov	r1, r8
   10b3a:	mov	r6, r0
   10b3c:	movs	r3, #0
   10b3e:	movs	r2, #10
   10b40:	mov	r0, r9
   10b42:	bl	11ac0 <__multadd>
   10b46:	mov	r7, sl
   10b48:	mov	r8, r0
   10b4a:	b.n	10a96 <_dtoa_r+0x8fe>
   10b4c:	bl	11ac0 <__multadd>
   10b50:	mov	r7, sl
   10b52:	mov	r6, r0
   10b54:	mov	r8, r0
   10b56:	b.n	10a96 <_dtoa_r+0x8fe>
   10b58:	mov	r1, r0
   10b5a:	mov	r0, r9
   10b5c:	str	r3, [sp, #20]
   10b5e:	bl	11aac <_Bfree>
   10b62:	movs	r2, #1
   10b64:	ldr	r3, [sp, #20]
   10b66:	b.n	10aea <_dtoa_r+0x952>
   10b68:	ldr	r1, [sp, #24]
   10b6a:	mov	r0, r4
   10b6c:	bl	11f08 <__mcmp>
   10b70:	cmp	r0, #0
   10b72:	bge.w	10674 <_dtoa_r+0x4dc>
   10b76:	mov	r1, r4
   10b78:	ldr	r4, [sp, #16]
   10b7a:	movs	r3, #0
   10b7c:	subs	r4, #1
   10b7e:	movs	r2, #10
   10b80:	mov	r0, r9
   10b82:	str	r4, [sp, #16]
   10b84:	bl	11ac0 <__multadd>
   10b88:	ldr	r3, [sp, #44]	; 0x2c
   10b8a:	mov	r4, r0
   10b8c:	cmp	r3, #0
   10b8e:	bne.w	10a54 <_dtoa_r+0x8bc>
   10b92:	ldr	r3, [sp, #56]	; 0x38
   10b94:	cmp	r3, #0
   10b96:	ble.w	10f74 <_dtoa_r+0xddc>
   10b9a:	str	r3, [sp, #32]
   10b9c:	b.n	10684 <_dtoa_r+0x4ec>
   10b9e:	ldr	r4, [sp, #40]	; 0x28
   10ba0:	b.n	105ec <_dtoa_r+0x454>
   10ba2:	ldr	r3, [sp, #0]
   10ba4:	cmp	r3, #2
   10ba6:	ble.w	1067c <_dtoa_r+0x4e4>
   10baa:	ldr	r3, [sp, #32]
   10bac:	cmp	r3, #0
   10bae:	bne.w	10eec <_dtoa_r+0xd54>
   10bb2:	ldr	r1, [sp, #24]
   10bb4:	movs	r2, #5
   10bb6:	mov	r0, r9
   10bb8:	bl	11ac0 <__multadd>
   10bbc:	mov	r1, r0
   10bbe:	str	r0, [sp, #24]
   10bc0:	mov	r0, r4
   10bc2:	bl	11f08 <__mcmp>
   10bc6:	cmp	r0, #0
   10bc8:	str	r4, [sp, #40]	; 0x28
   10bca:	ble.w	109fa <_dtoa_r+0x862>
   10bce:	ldr	r2, [sp, #16]
   10bd0:	ldr	r1, [sp, #36]	; 0x24
   10bd2:	movs	r3, #49	; 0x31
   10bd4:	adds	r2, #1
   10bd6:	str	r2, [sp, #16]
   10bd8:	strb	r3, [r1, #0]
   10bda:	adds	r5, r1, #1
   10bdc:	b.n	10a02 <_dtoa_r+0x86a>
   10bde:	ldr	r2, [sp, #16]
   10be0:	adds	r2, #1
   10be2:	str	r2, [sp, #16]
   10be4:	ldr	r2, [sp, #36]	; 0x24
   10be6:	movs	r3, #49	; 0x31
   10be8:	strb	r3, [r2, #0]
   10bea:	b.n	10706 <_dtoa_r+0x56e>
   10bec:	movs	r3, #1
   10bee:	str	r3, [sp, #44]	; 0x2c
   10bf0:	b.n	10798 <_dtoa_r+0x600>
   10bf2:	ldr.w	r9, [sp, #20]
   10bf6:	b.n	1052e <_dtoa_r+0x396>
   10bf8:	cmp.w	sl, #0
   10bfc:	bne.w	10612 <_dtoa_r+0x47a>
   10c00:	ubfx	r3, fp, #0, #20
   10c04:	cmp	r3, #0
   10c06:	bne.w	10e86 <_dtoa_r+0xcee>
   10c0a:	bic.w	r7, fp, #2147483648	; 0x80000000
   10c0e:	lsrs	r7, r7, #20
   10c10:	lsls	r7, r7, #20
   10c12:	cbz	r7, 10c20 <_dtoa_r+0xa88>
   10c14:	ldr	r3, [sp, #28]
   10c16:	adds	r3, #1
   10c18:	str	r3, [sp, #28]
   10c1a:	add.w	r8, r8, #1
   10c1e:	movs	r7, #1
   10c20:	ldr	r3, [sp, #48]	; 0x30
   10c22:	movs	r0, #1
   10c24:	cmp	r3, #0
   10c26:	beq.w	10626 <_dtoa_r+0x48e>
   10c2a:	b.n	10614 <_dtoa_r+0x47c>
   10c2c:	mov	r0, sl
   10c2e:	bl	addc <__aeabi_i2d>
   10c32:	mov	r2, r6
   10c34:	mov	r3, r7
   10c36:	bl	aea8 <__aeabi_dmul>
   10c3a:	movs	r2, #0
   10c3c:	ldr	r3, [pc, #764]	; (10f3c <_dtoa_r+0xda4>)
   10c3e:	bl	ab44 <__adddf3>
   10c42:	mov	r4, r0
   10c44:	sub.w	r5, r1, #54525952	; 0x3400000
   10c48:	mov	r0, r6
   10c4a:	mov	r1, r7
   10c4c:	movs	r2, #0
   10c4e:	ldr	r3, [pc, #752]	; (10f40 <_dtoa_r+0xda8>)
   10c50:	bl	ab40 <__aeabi_dsub>
   10c54:	mov	r2, r4
   10c56:	mov	r3, r5
   10c58:	mov	r6, r0
   10c5a:	mov	r7, r1
   10c5c:	bl	b3c8 <__aeabi_dcmpgt>
   10c60:	cmp	r0, #0
   10c62:	bne.w	10dc2 <_dtoa_r+0xc2a>
   10c66:	mov	r2, r4
   10c68:	add.w	r3, r5, #2147483648	; 0x80000000
   10c6c:	mov	r0, r6
   10c6e:	mov	r1, r7
   10c70:	bl	b38c <__aeabi_dcmplt>
   10c74:	cmp	r0, #0
   10c76:	beq.n	10d0e <_dtoa_r+0xb76>
   10c78:	movs	r3, #0
   10c7a:	str	r3, [sp, #24]
   10c7c:	mov	r6, r3
   10c7e:	b.n	109fa <_dtoa_r+0x862>
   10c80:	ldr	r0, [sp, #36]	; 0x24
   10c82:	b.w	1020a <_dtoa_r+0x72>
   10c86:	ldr	r3, [sp, #24]
   10c88:	ldr	r2, [sp, #48]	; 0x30
   10c8a:	str	r7, [sp, #24]
   10c8c:	subs	r3, r7, r3
   10c8e:	add	r2, r3
   10c90:	str	r2, [sp, #48]	; 0x30
   10c92:	movs	r7, #0
   10c94:	b.n	10572 <_dtoa_r+0x3da>
   10c96:	vldr	d7, [sp, #64]	; 0x40
   10c9a:	mov.w	sl, #2
   10c9e:	vstr	d7, [sp, #72]	; 0x48
   10ca2:	b.n	10824 <_dtoa_r+0x68c>
   10ca4:	mov	r4, r3
   10ca6:	movs	r1, #0
   10ca8:	str.w	r1, [r9, #68]	; 0x44
   10cac:	b.n	107d0 <_dtoa_r+0x638>
   10cae:	movs	r4, #1
   10cb0:	str	r4, [sp, #56]	; 0x38
   10cb2:	str	r4, [sp, #32]
   10cb4:	str	r4, [sp, #20]
   10cb6:	b.n	10ca6 <_dtoa_r+0xb0e>
   10cb8:	cmp	r2, #0
   10cba:	mov	sl, r3
   10cbc:	ble.n	10ce2 <_dtoa_r+0xb4a>
   10cbe:	mov	r1, r4
   10cc0:	movs	r2, #1
   10cc2:	mov	r0, r9
   10cc4:	bl	11e58 <__lshift>
   10cc8:	ldr	r1, [sp, #24]
   10cca:	mov	r4, r0
   10ccc:	bl	11f08 <__mcmp>
   10cd0:	cmp	r0, #0
   10cd2:	ble.w	10f66 <_dtoa_r+0xdce>
   10cd6:	cmp.w	sl, #57	; 0x39
   10cda:	beq.w	10ef0 <_dtoa_r+0xd58>
   10cde:	add.w	sl, r5, #49	; 0x31
   10ce2:	mov	fp, r6
   10ce4:	strb.w	sl, [r7]
   10ce8:	adds	r5, r7, #1
   10cea:	mov	r6, r8
   10cec:	str	r4, [sp, #40]	; 0x28
   10cee:	b.n	10706 <_dtoa_r+0x56e>
   10cf0:	bne.n	10cfc <_dtoa_r+0xb64>
   10cf2:	tst.w	sl, #1
   10cf6:	beq.n	10cfc <_dtoa_r+0xb64>
   10cf8:	b.n	106e6 <_dtoa_r+0x54e>
   10cfa:	mov	r5, r2
   10cfc:	ldrb.w	r3, [r5, #-1]
   10d00:	cmp	r3, #48	; 0x30
   10d02:	add.w	r2, r5, #4294967295
   10d06:	beq.n	10cfa <_dtoa_r+0xb62>
   10d08:	b.n	10706 <_dtoa_r+0x56e>
   10d0a:	ldr.w	r8, [sp, #72]	; 0x48
   10d0e:	ldrd	sl, fp, [sp, #64]	; 0x40
   10d12:	b.w	103ac <_dtoa_r+0x214>
   10d16:	ldr	r1, [sp, #36]	; 0x24
   10d18:	movs	r2, #48	; 0x30
   10d1a:	strb	r2, [r1, #0]
   10d1c:	ldr	r2, [sp, #16]
   10d1e:	ldrb.w	r4, [r5, #-1]
   10d22:	adds	r2, #1
   10d24:	str	r2, [sp, #16]
   10d26:	b.n	1052a <_dtoa_r+0x392>
   10d28:	ldr	r3, [sp, #16]
   10d2a:	negs	r4, r3
   10d2c:	cmp	r4, #0
   10d2e:	beq.w	10e98 <_dtoa_r+0xd00>
   10d32:	ldr	r3, [pc, #528]	; (10f44 <_dtoa_r+0xdac>)
   10d34:	and.w	r2, r4, #15
   10d38:	add.w	r3, r3, r2, lsl #3
   10d3c:	ldrd	r2, r3, [r3]
   10d40:	ldrd	r0, r1, [sp, #64]	; 0x40
   10d44:	bl	aea8 <__aeabi_dmul>
   10d48:	asrs	r4, r4, #4
   10d4a:	mov	r6, r0
   10d4c:	mov	r7, r1
   10d4e:	beq.w	10f7e <_dtoa_r+0xde6>
   10d52:	ldr	r5, [pc, #500]	; (10f48 <_dtoa_r+0xdb0>)
   10d54:	mov.w	sl, #2
   10d58:	lsls	r2, r4, #31
   10d5a:	bpl.n	10d70 <_dtoa_r+0xbd8>
   10d5c:	mov	r0, r6
   10d5e:	mov	r1, r7
   10d60:	ldrd	r2, r3, [r5]
   10d64:	bl	aea8 <__aeabi_dmul>
   10d68:	add.w	sl, sl, #1
   10d6c:	mov	r6, r0
   10d6e:	mov	r7, r1
   10d70:	asrs	r4, r4, #1
   10d72:	add.w	r5, r5, #8
   10d76:	bne.n	10d58 <_dtoa_r+0xbc0>
   10d78:	b.n	10858 <_dtoa_r+0x6c0>
   10d7a:	ldr	r1, [r6, #4]
   10d7c:	mov	r0, r9
   10d7e:	bl	11a60 <_Balloc>
   10d82:	ldr	r3, [r6, #16]
   10d84:	adds	r2, r3, #2
   10d86:	mov	r5, r0
   10d88:	lsls	r2, r2, #2
   10d8a:	add.w	r1, r6, #12
   10d8e:	adds	r0, #12
   10d90:	bl	887c <memcpy>
   10d94:	mov	r1, r5
   10d96:	movs	r2, #1
   10d98:	mov	r0, r9
   10d9a:	bl	11e58 <__lshift>
   10d9e:	mov	r8, r0
   10da0:	b.n	10a84 <_dtoa_r+0x8ec>
   10da2:	cmp	r3, #57	; 0x39
   10da4:	beq.w	10ef0 <_dtoa_r+0xd58>
   10da8:	add.w	sl, r3, #1
   10dac:	mov	fp, r6
   10dae:	strb.w	sl, [r7]
   10db2:	adds	r5, r7, #1
   10db4:	mov	r6, r8
   10db6:	str	r4, [sp, #40]	; 0x28
   10db8:	b.n	10706 <_dtoa_r+0x56e>
   10dba:	mov	fp, r6
   10dbc:	mov	sl, r3
   10dbe:	mov	r6, r8
   10dc0:	b.n	106ce <_dtoa_r+0x536>
   10dc2:	movs	r3, #0
   10dc4:	str	r3, [sp, #24]
   10dc6:	mov	r6, r3
   10dc8:	b.n	10bce <_dtoa_r+0xa36>
   10dca:	ldr	r3, [sp, #72]	; 0x48
   10dcc:	ldr	r1, [pc, #372]	; (10f44 <_dtoa_r+0xdac>)
   10dce:	subs	r2, r3, #1
   10dd0:	add.w	r1, r1, r2, lsl #3
   10dd4:	mov	r3, r5
   10dd6:	str	r2, [sp, #92]	; 0x5c
   10dd8:	ldrd	r0, r1, [r1]
   10ddc:	mov	r2, r4
   10dde:	bl	aea8 <__aeabi_dmul>
   10de2:	strd	r0, r1, [sp, #80]	; 0x50
   10de6:	mov	r1, r7
   10de8:	mov	r0, r6
   10dea:	bl	b408 <__aeabi_d2iz>
   10dee:	mov	r4, r0
   10df0:	bl	addc <__aeabi_i2d>
   10df4:	mov	r3, r1
   10df6:	mov	r2, r0
   10df8:	mov	r1, r7
   10dfa:	mov	r0, r6
   10dfc:	bl	ab40 <__aeabi_dsub>
   10e00:	ldr	r3, [sp, #72]	; 0x48
   10e02:	mov	r7, r1
   10e04:	ldr	r1, [sp, #36]	; 0x24
   10e06:	adds	r4, #48	; 0x30
   10e08:	cmp	r3, #1
   10e0a:	mov	r6, r0
   10e0c:	strb	r4, [r1, #0]
   10e0e:	add.w	r5, r1, #1
   10e12:	beq.n	10e56 <_dtoa_r+0xcbe>
   10e14:	ldr	r3, [sp, #72]	; 0x48
   10e16:	ldr	r2, [sp, #36]	; 0x24
   10e18:	add	r3, r2
   10e1a:	mov	sl, r3
   10e1c:	mov	fp, r5
   10e1e:	movs	r2, #0
   10e20:	ldr	r3, [pc, #296]	; (10f4c <_dtoa_r+0xdb4>)
   10e22:	mov	r0, r6
   10e24:	mov	r1, r7
   10e26:	bl	aea8 <__aeabi_dmul>
   10e2a:	mov	r7, r1
   10e2c:	mov	r6, r0
   10e2e:	bl	b408 <__aeabi_d2iz>
   10e32:	mov	r4, r0
   10e34:	bl	addc <__aeabi_i2d>
   10e38:	adds	r4, #48	; 0x30
   10e3a:	mov	r2, r0
   10e3c:	mov	r3, r1
   10e3e:	mov	r0, r6
   10e40:	mov	r1, r7
   10e42:	bl	ab40 <__aeabi_dsub>
   10e46:	strb.w	r4, [fp], #1
   10e4a:	cmp	sl, fp
   10e4c:	mov	r6, r0
   10e4e:	mov	r7, r1
   10e50:	bne.n	10e1e <_dtoa_r+0xc86>
   10e52:	ldr	r3, [sp, #92]	; 0x5c
   10e54:	add	r5, r3
   10e56:	movs	r2, #0
   10e58:	ldr	r3, [pc, #244]	; (10f50 <_dtoa_r+0xdb8>)
   10e5a:	ldrd	r0, r1, [sp, #80]	; 0x50
   10e5e:	bl	ab44 <__adddf3>
   10e62:	mov	r2, r6
   10e64:	mov	r3, r7
   10e66:	bl	b38c <__aeabi_dcmplt>
   10e6a:	cmp	r0, #0
   10e6c:	beq.n	10f00 <_dtoa_r+0xd68>
   10e6e:	ldr	r3, [sp, #88]	; 0x58
   10e70:	str	r3, [sp, #16]
   10e72:	ldrb.w	r4, [r5, #-1]
   10e76:	b.w	10512 <_dtoa_r+0x37a>
   10e7a:	ldr	r3, [sp, #28]
   10e7c:	ldr	r2, [sp, #32]
   10e7e:	subs	r5, r3, r2
   10e80:	movs	r3, #0
   10e82:	b.w	1057e <_dtoa_r+0x3e6>
   10e86:	movs	r7, #0
   10e88:	b.n	10c20 <_dtoa_r+0xa88>
   10e8a:	ldr	r3, [sp, #96]	; 0x60
   10e8c:	ldr	r7, [sp, #24]
   10e8e:	ldr	r5, [sp, #28]
   10e90:	rsb	r3, r3, #54	; 0x36
   10e94:	b.w	1057e <_dtoa_r+0x3e6>
   10e98:	ldrd	r6, r7, [sp, #64]	; 0x40
   10e9c:	mov.w	sl, #2
   10ea0:	b.n	10858 <_dtoa_r+0x6c0>
   10ea2:	ldr	r3, [sp, #32]
   10ea4:	cmp	r3, #0
   10ea6:	beq.w	10c2c <_dtoa_r+0xa94>
   10eaa:	ldr	r3, [sp, #56]	; 0x38
   10eac:	cmp	r3, #0
   10eae:	ble.w	10d0e <_dtoa_r+0xb76>
   10eb2:	movs	r2, #0
   10eb4:	ldr	r3, [pc, #148]	; (10f4c <_dtoa_r+0xdb4>)
   10eb6:	mov	r0, r6
   10eb8:	mov	r1, r7
   10eba:	bl	aea8 <__aeabi_dmul>
   10ebe:	mov	r6, r0
   10ec0:	mov	r7, r1
   10ec2:	add.w	r0, sl, #1
   10ec6:	bl	addc <__aeabi_i2d>
   10eca:	mov	r2, r6
   10ecc:	mov	r3, r7
   10ece:	bl	aea8 <__aeabi_dmul>
   10ed2:	movs	r2, #0
   10ed4:	ldr	r3, [pc, #100]	; (10f3c <_dtoa_r+0xda4>)
   10ed6:	bl	ab44 <__adddf3>
   10eda:	ldr	r2, [sp, #16]
   10edc:	ldr	r3, [sp, #56]	; 0x38
   10ede:	str	r3, [sp, #72]	; 0x48
   10ee0:	subs	r2, #1
   10ee2:	mov	r4, r0
   10ee4:	sub.w	r5, r1, #54525952	; 0x3400000
   10ee8:	str	r2, [sp, #88]	; 0x58
   10eea:	b.n	1089a <_dtoa_r+0x702>
   10eec:	str	r4, [sp, #40]	; 0x28
   10eee:	b.n	109fa <_dtoa_r+0x862>
   10ef0:	movs	r2, #57	; 0x39
   10ef2:	mov	fp, r6
   10ef4:	str	r4, [sp, #40]	; 0x28
   10ef6:	mov	r6, r8
   10ef8:	strb	r2, [r7, #0]
   10efa:	adds	r5, r7, #1
   10efc:	b.w	106ea <_dtoa_r+0x552>
   10f00:	ldrd	r2, r3, [sp, #80]	; 0x50
   10f04:	movs	r0, #0
   10f06:	ldr	r1, [pc, #72]	; (10f50 <_dtoa_r+0xdb8>)
   10f08:	bl	ab40 <__aeabi_dsub>
   10f0c:	mov	r2, r6
   10f0e:	mov	r3, r7
   10f10:	bl	b3c8 <__aeabi_dcmpgt>
   10f14:	cbnz	r0, 10f1a <_dtoa_r+0xd82>
   10f16:	b.n	10d0e <_dtoa_r+0xb76>
   10f18:	mov	r5, r2
   10f1a:	ldrb.w	r3, [r5, #-1]
   10f1e:	cmp	r3, #48	; 0x30
   10f20:	add.w	r2, r5, #4294967295
   10f24:	beq.n	10f18 <_dtoa_r+0xd80>
   10f26:	b.n	1099c <_dtoa_r+0x804>
   10f28:	ldr	r3, [sp, #88]	; 0x58
   10f2a:	str	r3, [sp, #16]
   10f2c:	b.w	10512 <_dtoa_r+0x37a>
   10f30:	cmp.w	sl, #0
   10f34:	bne.w	10a30 <_dtoa_r+0x898>
   10f38:	b.n	10c00 <_dtoa_r+0xa68>
   10f3a:	nop
   10f3c:	.word	0x401c0000
   10f40:	.word	0x40140000
   10f44:	.word	0x00013a30
   10f48:	.word	0x00013af8
   10f4c:	.word	0x40240000
   10f50:	.word	0x3fe00000
   10f54:	cmp	r3, #57	; 0x39
   10f56:	mov	fp, sl
   10f58:	mov	sl, r3
   10f5a:	beq.n	10ef0 <_dtoa_r+0xd58>
   10f5c:	cmp.w	fp, #0
   10f60:	bgt.w	10cde <_dtoa_r+0xb46>
   10f64:	b.n	10ce2 <_dtoa_r+0xb4a>
   10f66:	bne.w	10ce2 <_dtoa_r+0xb4a>
   10f6a:	tst.w	sl, #1
   10f6e:	beq.w	10ce2 <_dtoa_r+0xb4a>
   10f72:	b.n	10cd6 <_dtoa_r+0xb3e>
   10f74:	ldr	r3, [sp, #0]
   10f76:	cmp	r3, #2
   10f78:	bgt.n	10fc6 <_dtoa_r+0xe2e>
   10f7a:	ldr	r3, [sp, #56]	; 0x38
   10f7c:	b.n	10b9a <_dtoa_r+0xa02>
   10f7e:	mov.w	sl, #2
   10f82:	b.n	10858 <_dtoa_r+0x6c0>
   10f84:	ldr	r3, [sp, #0]
   10f86:	cmp	r3, #2
   10f88:	bgt.n	10fc6 <_dtoa_r+0xe2e>
   10f8a:	ldr	r3, [sp, #56]	; 0x38
   10f8c:	b.n	10a6a <_dtoa_r+0x8d2>
   10f8e:	movs	r4, #0
   10f90:	str.w	r4, [r9, #68]	; 0x44
   10f94:	mov	r1, r4
   10f96:	mov	r0, r9
   10f98:	bl	11a60 <_Balloc>
   10f9c:	mov.w	r3, #4294967295
   10fa0:	str	r3, [sp, #32]
   10fa2:	str	r3, [sp, #56]	; 0x38
   10fa4:	movs	r3, #1
   10fa6:	str	r0, [sp, #36]	; 0x24
   10fa8:	str	r4, [sp, #20]
   10faa:	str.w	r0, [r9, #64]	; 0x40
   10fae:	str	r3, [sp, #44]	; 0x2c
   10fb0:	b.w	103ac <_dtoa_r+0x214>
   10fb4:	beq.w	10648 <_dtoa_r+0x4b0>
   10fb8:	rsb	r0, r0, #60	; 0x3c
   10fbc:	b.w	1063e <_dtoa_r+0x4a6>
   10fc0:	movs	r6, #1
   10fc2:	b.w	1033e <_dtoa_r+0x1a6>
   10fc6:	ldr	r3, [sp, #56]	; 0x38
   10fc8:	str	r3, [sp, #32]
   10fca:	b.n	10baa <_dtoa_r+0xa12>

00010fcc <__libc_fini_array>:
   10fcc:	push	{r3, r4, r5, lr}
   10fce:	ldr	r5, [pc, #28]	; (10fec <__libc_fini_array+0x20>)
   10fd0:	ldr	r4, [pc, #28]	; (10ff0 <__libc_fini_array+0x24>)
   10fd2:	subs	r4, r5, r4
   10fd4:	asrs	r4, r4, #2
   10fd6:	beq.n	10fe4 <__libc_fini_array+0x18>
   10fd8:	subs	r4, #1
   10fda:	ldr.w	r3, [r5, #-4]!
   10fde:	blx	r3
   10fe0:	cmp	r4, #0
   10fe2:	bne.n	10fd8 <__libc_fini_array+0xc>
   10fe4:	ldmia.w	sp!, {r3, r4, r5, lr}
   10fe8:	b.w	13b8c <__init_array_end>
	...

00010ff4 <_malloc_trim_r>:
   10ff4:	push	{r3, r4, r5, r6, r7, lr}
   10ff6:	ldr	r7, [pc, #140]	; (11084 <_malloc_trim_r+0x90>)
   10ff8:	mov	r4, r1
   10ffa:	mov	r6, r0
   10ffc:	bl	c138 <__malloc_lock>
   11000:	ldr	r3, [r7, #8]
   11002:	ldr	r5, [r3, #4]
   11004:	bic.w	r5, r5, #3
   11008:	subs	r1, r5, r4
   1100a:	addw	r1, r1, #4079	; 0xfef
   1100e:	bic.w	r1, r1, #4080	; 0xff0
   11012:	bic.w	r1, r1, #15
   11016:	sub.w	r4, r1, #4096	; 0x1000
   1101a:	cmp.w	r4, #4096	; 0x1000
   1101e:	blt.n	11030 <_malloc_trim_r+0x3c>
   11020:	movs	r1, #0
   11022:	mov	r0, r6
   11024:	bl	c520 <_sbrk_r>
   11028:	ldr	r3, [r7, #8]
   1102a:	add	r3, r5
   1102c:	cmp	r0, r3
   1102e:	beq.n	1103a <_malloc_trim_r+0x46>
   11030:	mov	r0, r6
   11032:	bl	c13c <__malloc_unlock>
   11036:	movs	r0, #0
   11038:	pop	{r3, r4, r5, r6, r7, pc}
   1103a:	negs	r1, r4
   1103c:	mov	r0, r6
   1103e:	bl	c520 <_sbrk_r>
   11042:	adds	r0, #1
   11044:	beq.n	11062 <_malloc_trim_r+0x6e>
   11046:	ldr	r3, [pc, #64]	; (11088 <_malloc_trim_r+0x94>)
   11048:	ldr	r2, [r7, #8]
   1104a:	ldr	r1, [r3, #0]
   1104c:	subs	r5, r5, r4
   1104e:	orr.w	r5, r5, #1
   11052:	mov	r0, r6
   11054:	subs	r1, r1, r4
   11056:	str	r5, [r2, #4]
   11058:	str	r1, [r3, #0]
   1105a:	bl	c13c <__malloc_unlock>
   1105e:	movs	r0, #1
   11060:	pop	{r3, r4, r5, r6, r7, pc}
   11062:	movs	r1, #0
   11064:	mov	r0, r6
   11066:	bl	c520 <_sbrk_r>
   1106a:	ldr	r2, [r7, #8]
   1106c:	subs	r3, r0, r2
   1106e:	cmp	r3, #15
   11070:	ble.n	11030 <_malloc_trim_r+0x3c>
   11072:	ldr	r4, [pc, #24]	; (1108c <_malloc_trim_r+0x98>)
   11074:	ldr	r1, [pc, #16]	; (11088 <_malloc_trim_r+0x94>)
   11076:	ldr	r4, [r4, #0]
   11078:	orr.w	r3, r3, #1
   1107c:	subs	r0, r0, r4
   1107e:	str	r3, [r2, #4]
   11080:	str	r0, [r1, #0]
   11082:	b.n	11030 <_malloc_trim_r+0x3c>
   11084:	.word	0x20013f38
   11088:	.word	0x20019c38
   1108c:	.word	0x20014344

00011090 <_free_r>:
   11090:	cmp	r1, #0
   11092:	beq.n	11120 <_free_r+0x90>
   11094:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11098:	mov	r5, r1
   1109a:	mov	r8, r0
   1109c:	bl	c138 <__malloc_lock>
   110a0:	ldr.w	r7, [r5, #-4]
   110a4:	ldr	r1, [pc, #424]	; (11250 <_free_r+0x1c0>)
   110a6:	bic.w	r3, r7, #1
   110aa:	sub.w	r4, r5, #8
   110ae:	adds	r2, r4, r3
   110b0:	ldr	r6, [r1, #8]
   110b2:	ldr	r0, [r2, #4]
   110b4:	cmp	r2, r6
   110b6:	bic.w	r0, r0, #3
   110ba:	beq.n	11182 <_free_r+0xf2>
   110bc:	lsls	r6, r7, #31
   110be:	str	r0, [r2, #4]
   110c0:	bmi.n	110da <_free_r+0x4a>
   110c2:	ldr.w	r7, [r5, #-8]
   110c6:	subs	r4, r4, r7
   110c8:	add.w	lr, r1, #8
   110cc:	ldr	r5, [r4, #8]
   110ce:	cmp	r5, lr
   110d0:	add	r3, r7
   110d2:	beq.n	111b4 <_free_r+0x124>
   110d4:	ldr	r7, [r4, #12]
   110d6:	str	r7, [r5, #12]
   110d8:	str	r5, [r7, #8]
   110da:	adds	r5, r2, r0
   110dc:	ldr	r5, [r5, #4]
   110de:	lsls	r5, r5, #31
   110e0:	bpl.n	11168 <_free_r+0xd8>
   110e2:	orr.w	r2, r3, #1
   110e6:	str	r2, [r4, #4]
   110e8:	str	r3, [r4, r3]
   110ea:	cmp.w	r3, #512	; 0x200
   110ee:	bcs.n	11122 <_free_r+0x92>
   110f0:	lsrs	r3, r3, #3
   110f2:	adds	r2, r3, #1
   110f4:	ldr	r5, [r1, #4]
   110f6:	ldr.w	r7, [r1, r2, lsl #3]
   110fa:	str	r7, [r4, #8]
   110fc:	movs	r0, #1
   110fe:	asrs	r3, r3, #2
   11100:	lsl.w	r3, r0, r3
   11104:	add.w	r0, r1, r2, lsl #3
   11108:	orrs	r5, r3
   1110a:	subs	r0, #8
   1110c:	str	r0, [r4, #12]
   1110e:	str	r5, [r1, #4]
   11110:	str.w	r4, [r1, r2, lsl #3]
   11114:	str	r4, [r7, #12]
   11116:	mov	r0, r8
   11118:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1111c:	b.w	c13c <__malloc_unlock>
   11120:	bx	lr
   11122:	lsrs	r2, r3, #9
   11124:	cmp	r2, #4
   11126:	bhi.n	111d0 <_free_r+0x140>
   11128:	lsrs	r2, r3, #6
   1112a:	add.w	r7, r2, #57	; 0x39
   1112e:	lsls	r7, r7, #1
   11130:	add.w	r5, r2, #56	; 0x38
   11134:	add.w	r0, r1, r7, lsl #2
   11138:	ldr.w	r2, [r1, r7, lsl #2]
   1113c:	ldr	r1, [pc, #272]	; (11250 <_free_r+0x1c0>)
   1113e:	subs	r0, #8
   11140:	cmp	r0, r2
   11142:	beq.n	111e0 <_free_r+0x150>
   11144:	ldr	r1, [r2, #4]
   11146:	bic.w	r1, r1, #3
   1114a:	cmp	r3, r1
   1114c:	bcs.n	11154 <_free_r+0xc4>
   1114e:	ldr	r2, [r2, #8]
   11150:	cmp	r0, r2
   11152:	bne.n	11144 <_free_r+0xb4>
   11154:	ldr	r0, [r2, #12]
   11156:	str	r0, [r4, #12]
   11158:	str	r2, [r4, #8]
   1115a:	str	r4, [r0, #8]
   1115c:	str	r4, [r2, #12]
   1115e:	mov	r0, r8
   11160:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11164:	b.w	c13c <__malloc_unlock>
   11168:	ldr	r5, [r2, #8]
   1116a:	ldr	r7, [pc, #232]	; (11254 <_free_r+0x1c4>)
   1116c:	cmp	r5, r7
   1116e:	add	r3, r0
   11170:	beq.n	111f2 <_free_r+0x162>
   11172:	ldr	r0, [r2, #12]
   11174:	str	r0, [r5, #12]
   11176:	orr.w	r2, r3, #1
   1117a:	str	r5, [r0, #8]
   1117c:	str	r2, [r4, #4]
   1117e:	str	r3, [r4, r3]
   11180:	b.n	110ea <_free_r+0x5a>
   11182:	lsls	r7, r7, #31
   11184:	add	r3, r0
   11186:	bmi.n	11198 <_free_r+0x108>
   11188:	ldr.w	r2, [r5, #-8]
   1118c:	subs	r4, r4, r2
   1118e:	add	r3, r2
   11190:	ldr	r0, [r4, #8]
   11192:	ldr	r2, [r4, #12]
   11194:	str	r2, [r0, #12]
   11196:	str	r0, [r2, #8]
   11198:	ldr	r2, [pc, #188]	; (11258 <_free_r+0x1c8>)
   1119a:	ldr	r2, [r2, #0]
   1119c:	orr.w	r0, r3, #1
   111a0:	cmp	r3, r2
   111a2:	str	r0, [r4, #4]
   111a4:	str	r4, [r1, #8]
   111a6:	bcc.n	11116 <_free_r+0x86>
   111a8:	ldr	r3, [pc, #176]	; (1125c <_free_r+0x1cc>)
   111aa:	mov	r0, r8
   111ac:	ldr	r1, [r3, #0]
   111ae:	bl	10ff4 <_malloc_trim_r>
   111b2:	b.n	11116 <_free_r+0x86>
   111b4:	adds	r1, r2, r0
   111b6:	ldr	r1, [r1, #4]
   111b8:	lsls	r1, r1, #31
   111ba:	bmi.n	11246 <_free_r+0x1b6>
   111bc:	ldr	r1, [r2, #8]
   111be:	ldr	r2, [r2, #12]
   111c0:	str	r2, [r1, #12]
   111c2:	add	r3, r0
   111c4:	orr.w	r0, r3, #1
   111c8:	str	r1, [r2, #8]
   111ca:	str	r0, [r4, #4]
   111cc:	str	r3, [r4, r3]
   111ce:	b.n	11116 <_free_r+0x86>
   111d0:	cmp	r2, #20
   111d2:	bhi.n	11204 <_free_r+0x174>
   111d4:	add.w	r7, r2, #92	; 0x5c
   111d8:	lsls	r7, r7, #1
   111da:	add.w	r5, r2, #91	; 0x5b
   111de:	b.n	11134 <_free_r+0xa4>
   111e0:	asrs	r2, r5, #2
   111e2:	ldr	r3, [r1, #4]
   111e4:	movs	r5, #1
   111e6:	lsl.w	r2, r5, r2
   111ea:	orrs	r3, r2
   111ec:	str	r3, [r1, #4]
   111ee:	mov	r2, r0
   111f0:	b.n	11156 <_free_r+0xc6>
   111f2:	orr.w	r2, r3, #1
   111f6:	str	r4, [r1, #20]
   111f8:	str	r4, [r1, #16]
   111fa:	str	r5, [r4, #12]
   111fc:	str	r5, [r4, #8]
   111fe:	str	r2, [r4, #4]
   11200:	str	r3, [r4, r3]
   11202:	b.n	11116 <_free_r+0x86>
   11204:	cmp	r2, #84	; 0x54
   11206:	bhi.n	11216 <_free_r+0x186>
   11208:	lsrs	r2, r3, #12
   1120a:	add.w	r7, r2, #111	; 0x6f
   1120e:	lsls	r7, r7, #1
   11210:	add.w	r5, r2, #110	; 0x6e
   11214:	b.n	11134 <_free_r+0xa4>
   11216:	cmp.w	r2, #340	; 0x154
   1121a:	bhi.n	1122a <_free_r+0x19a>
   1121c:	lsrs	r2, r3, #15
   1121e:	add.w	r7, r2, #120	; 0x78
   11222:	lsls	r7, r7, #1
   11224:	add.w	r5, r2, #119	; 0x77
   11228:	b.n	11134 <_free_r+0xa4>
   1122a:	movw	r0, #1364	; 0x554
   1122e:	cmp	r2, r0
   11230:	bhi.n	11240 <_free_r+0x1b0>
   11232:	lsrs	r2, r3, #18
   11234:	add.w	r7, r2, #125	; 0x7d
   11238:	lsls	r7, r7, #1
   1123a:	add.w	r5, r2, #124	; 0x7c
   1123e:	b.n	11134 <_free_r+0xa4>
   11240:	movs	r7, #254	; 0xfe
   11242:	movs	r5, #126	; 0x7e
   11244:	b.n	11134 <_free_r+0xa4>
   11246:	orr.w	r2, r3, #1
   1124a:	str	r2, [r4, #4]
   1124c:	str	r3, [r4, r3]
   1124e:	b.n	11116 <_free_r+0x86>
   11250:	.word	0x20013f38
   11254:	.word	0x20013f40
   11258:	.word	0x20014340
   1125c:	.word	0x20019c34

00011260 <rshift>:
   11260:	ldr	r2, [r0, #16]
   11262:	asrs	r3, r1, #5
   11264:	cmp	r3, r2
   11266:	bge.n	112c6 <rshift+0x66>
   11268:	push	{r4, r5, r6, r7, lr}
   1126a:	ands.w	r1, r1, #31
   1126e:	add.w	r6, r0, #20
   11272:	add.w	r2, r6, r2, lsl #2
   11276:	add.w	lr, r6, r3, lsl #2
   1127a:	beq.n	112d0 <rshift+0x70>
   1127c:	ldr.w	r3, [r6, r3, lsl #2]
   11280:	add.w	r5, lr, #4
   11284:	cmp	r2, r5
   11286:	lsr.w	r4, r3, r1
   1128a:	rsb	ip, r1, #32
   1128e:	bls.n	11304 <rshift+0xa4>
   11290:	add.w	r7, r0, #16
   11294:	ldr	r3, [r5, #0]
   11296:	lsl.w	r3, r3, ip
   1129a:	orrs	r3, r4
   1129c:	str.w	r3, [r7, #4]!
   112a0:	ldr.w	r3, [r5], #4
   112a4:	cmp	r2, r5
   112a6:	lsr.w	r4, r3, r1
   112aa:	bhi.n	11294 <rshift+0x34>
   112ac:	rsb	r2, lr, r2
   112b0:	subs	r2, #5
   112b2:	bic.w	r2, r2, #3
   112b6:	adds	r2, #4
   112b8:	add	r2, r6
   112ba:	str	r4, [r2, #0]
   112bc:	cbz	r4, 112c0 <rshift+0x60>
   112be:	adds	r2, #4
   112c0:	subs	r3, r2, r6
   112c2:	asrs	r3, r3, #2
   112c4:	b.n	112f4 <rshift+0x94>
   112c6:	movs	r3, #0
   112c8:	str	r3, [r0, #16]
   112ca:	movs	r3, #0
   112cc:	str	r3, [r0, #20]
   112ce:	bx	lr
   112d0:	cmp	r2, lr
   112d2:	bls.n	112fa <rshift+0x9a>
   112d4:	add.w	r4, r0, #16
   112d8:	mov	r1, lr
   112da:	ldr.w	r5, [r1], #4
   112de:	str.w	r5, [r4, #4]!
   112e2:	cmp	r2, r1
   112e4:	bhi.n	112da <rshift+0x7a>
   112e6:	mvn.w	r3, lr
   112ea:	add	r3, r2
   112ec:	bic.w	r3, r3, #3
   112f0:	adds	r3, #4
   112f2:	asrs	r3, r3, #2
   112f4:	str	r3, [r0, #16]
   112f6:	cbz	r3, 112fe <rshift+0x9e>
   112f8:	pop	{r4, r5, r6, r7, pc}
   112fa:	movs	r3, #0
   112fc:	str	r3, [r0, #16]
   112fe:	movs	r3, #0
   11300:	str	r3, [r0, #20]
   11302:	pop	{r4, r5, r6, r7, pc}
   11304:	mov	r2, r6
   11306:	b.n	112ba <rshift+0x5a>

00011308 <__gethex>:
   11308:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1130c:	sub	sp, #44	; 0x2c
   1130e:	mov	r9, r1
   11310:	str	r0, [sp, #20]
   11312:	ldr	r0, [sp, #88]	; 0x58
   11314:	str	r2, [sp, #12]
   11316:	str	r3, [sp, #32]
   11318:	bl	119e4 <__localeconv_l>
   1131c:	ldr	r3, [r0, #0]
   1131e:	str	r3, [sp, #8]
   11320:	mov	r0, r3
   11322:	mov	r4, r3
   11324:	bl	c780 <strlen>
   11328:	ldr.w	r3, [r9]
   1132c:	str	r0, [sp, #0]
   1132e:	ldrb	r2, [r3, #2]
   11330:	adds	r1, r4, r0
   11332:	cmp	r2, #48	; 0x30
   11334:	ldrb.w	fp, [r1, #-1]
   11338:	bne.w	1168e <__gethex+0x386>
   1133c:	adds	r3, #3
   1133e:	mov.w	r8, #0
   11342:	mov	r4, r3
   11344:	ldrb.w	r2, [r3], #1
   11348:	cmp	r2, #48	; 0x30
   1134a:	add.w	r8, r8, #1
   1134e:	beq.n	11342 <__gethex+0x3a>
   11350:	ldr	r6, [pc, #712]	; (1161c <__gethex+0x314>)
   11352:	ldrb	r3, [r6, r2]
   11354:	cmp	r3, #0
   11356:	beq.w	1153a <__gethex+0x232>
   1135a:	ldrb	r3, [r4, #0]
   1135c:	mov.w	sl, #0
   11360:	ldrb	r3, [r6, r3]
   11362:	mov	r5, sl
   11364:	mov	r7, r4
   11366:	cbz	r3, 11372 <__gethex+0x6a>
   11368:	ldrb.w	r3, [r7, #1]!
   1136c:	ldrb	r3, [r6, r3]
   1136e:	cmp	r3, #0
   11370:	bne.n	11368 <__gethex+0x60>
   11372:	ldr	r2, [sp, #0]
   11374:	ldr	r1, [sp, #8]
   11376:	mov	r0, r7
   11378:	bl	c85c <strncmp>
   1137c:	cmp	r0, #0
   1137e:	beq.w	114a6 <__gethex+0x19e>
   11382:	ldrb	r3, [r7, #0]
   11384:	cmp	r5, #0
   11386:	beq.w	1166c <__gethex+0x364>
   1138a:	subs	r5, r5, r7
   1138c:	lsls	r2, r5, #2
   1138e:	str	r2, [sp, #4]
   11390:	cmp	r3, #80	; 0x50
   11392:	beq.w	114b8 <__gethex+0x1b0>
   11396:	cmp	r3, #112	; 0x70
   11398:	beq.w	114b8 <__gethex+0x1b0>
   1139c:	mov	r5, r7
   1139e:	str.w	r7, [r9]
   113a2:	cmp.w	sl, #0
   113a6:	bne.w	11518 <__gethex+0x210>
   113aa:	subs	r3, r5, r4
   113ac:	subs	r3, #1
   113ae:	cmp	r3, #7
   113b0:	mov	r1, sl
   113b2:	ble.n	113be <__gethex+0xb6>
   113b4:	asrs	r3, r3, #1
   113b6:	cmp	r3, #7
   113b8:	add.w	r1, r1, #1
   113bc:	bgt.n	113b4 <__gethex+0xac>
   113be:	ldr	r0, [sp, #20]
   113c0:	bl	11a60 <_Balloc>
   113c4:	mov	r3, r0
   113c6:	adds	r3, #20
   113c8:	cmp	r5, r4
   113ca:	str	r0, [sp, #16]
   113cc:	str	r3, [sp, #28]
   113ce:	bls.w	11778 <__gethex+0x470>
   113d2:	mov	r9, r3
   113d4:	ldr	r3, [sp, #0]
   113d6:	mov.w	r8, #0
   113da:	rsb	r3, r3, #1
   113de:	mov	r7, r8
   113e0:	str	r3, [sp, #24]
   113e2:	b.n	11404 <__gethex+0xfc>
   113e4:	cmp	r7, #32
   113e6:	beq.w	11528 <__gethex+0x220>
   113ea:	mov	r2, r7
   113ec:	adds	r7, #4
   113ee:	ldrb.w	r3, [r5, #-1]
   113f2:	ldrb	r3, [r6, r3]
   113f4:	mov	r5, sl
   113f6:	and.w	r3, r3, #15
   113fa:	lsls	r3, r2
   113fc:	cmp	r5, r4
   113fe:	orr.w	r8, r8, r3
   11402:	bls.n	11430 <__gethex+0x128>
   11404:	ldrb.w	r3, [r5, #-1]
   11408:	cmp	r3, fp
   1140a:	add.w	sl, r5, #4294967295
   1140e:	bne.n	113e4 <__gethex+0xdc>
   11410:	ldr	r3, [sp, #24]
   11412:	add	r3, sl
   11414:	cmp	r3, r4
   11416:	bcc.n	113e4 <__gethex+0xdc>
   11418:	mov	r0, r3
   1141a:	ldr	r2, [sp, #0]
   1141c:	ldr	r1, [sp, #8]
   1141e:	str	r3, [sp, #36]	; 0x24
   11420:	bl	c85c <strncmp>
   11424:	ldr	r3, [sp, #36]	; 0x24
   11426:	cmp	r0, #0
   11428:	bne.n	113e4 <__gethex+0xdc>
   1142a:	mov	r5, r3
   1142c:	cmp	r5, r4
   1142e:	bhi.n	11404 <__gethex+0xfc>
   11430:	str.w	r8, [r9], #4
   11434:	ldr	r3, [sp, #28]
   11436:	ldr	r2, [sp, #16]
   11438:	rsb	r9, r3, r9
   1143c:	mov.w	r3, r9, asr #2
   11440:	str	r3, [r2, #16]
   11442:	mov	r0, r8
   11444:	mov.w	r9, r3, lsl #5
   11448:	bl	11bd8 <__hi0bits>
   1144c:	ldr	r3, [sp, #12]
   1144e:	ldr	r6, [r3, #0]
   11450:	rsb	r0, r0, r9
   11454:	cmp	r0, r6
   11456:	bgt.w	11620 <__gethex+0x318>
   1145a:	blt.w	11670 <__gethex+0x368>
   1145e:	movs	r7, #0
   11460:	ldr	r3, [sp, #12]
   11462:	ldr	r2, [sp, #4]
   11464:	ldr	r3, [r3, #8]
   11466:	cmp	r2, r3
   11468:	bgt.w	1159a <__gethex+0x292>
   1146c:	ldr	r0, [sp, #12]
   1146e:	ldr	r1, [sp, #4]
   11470:	ldr	r3, [r0, #4]
   11472:	cmp	r1, r3
   11474:	bge.w	115e2 <__gethex+0x2da>
   11478:	subs	r5, r3, r1
   1147a:	cmp	r6, r5
   1147c:	bgt.w	1169e <__gethex+0x396>
   11480:	ldr	r2, [r0, #12]
   11482:	cmp	r2, #2
   11484:	beq.w	11786 <__gethex+0x47e>
   11488:	cmp	r2, #3
   1148a:	beq.w	11746 <__gethex+0x43e>
   1148e:	cmp	r2, #1
   11490:	beq.w	1178e <__gethex+0x486>
   11494:	ldr	r0, [sp, #20]
   11496:	ldr	r1, [sp, #16]
   11498:	bl	11aac <_Bfree>
   1149c:	ldr	r2, [sp, #80]	; 0x50
   1149e:	movs	r3, #0
   114a0:	str	r3, [r2, #0]
   114a2:	movs	r0, #80	; 0x50
   114a4:	b.n	11522 <__gethex+0x21a>
   114a6:	cmp	r5, #0
   114a8:	beq.w	116de <__gethex+0x3d6>
   114ac:	ldrb	r3, [r7, #0]
   114ae:	b.n	1138a <__gethex+0x82>
   114b0:	movs	r3, #0
   114b2:	str	r3, [sp, #4]
   114b4:	mov.w	sl, #1
   114b8:	ldrb	r3, [r7, #1]
   114ba:	cmp	r3, #43	; 0x2b
   114bc:	beq.w	11618 <__gethex+0x310>
   114c0:	cmp	r3, #45	; 0x2d
   114c2:	beq.n	115b0 <__gethex+0x2a8>
   114c4:	adds	r1, r7, #1
   114c6:	movs	r5, #0
   114c8:	ldrb	r3, [r6, r3]
   114ca:	ldr	r0, [pc, #336]	; (1161c <__gethex+0x314>)
   114cc:	subs	r2, r3, #1
   114ce:	cmp	r2, #24
   114d0:	bhi.w	1139c <__gethex+0x94>
   114d4:	ldrb	r2, [r1, #1]
   114d6:	ldrb	r2, [r0, r2]
   114d8:	subs	r0, r2, #1
   114da:	cmp	r0, #24
   114dc:	sub.w	r3, r3, #16
   114e0:	add.w	r1, r1, #1
   114e4:	bhi.n	114fe <__gethex+0x1f6>
   114e6:	ldrb.w	r0, [r1, #1]!
   114ea:	add.w	r3, r3, r3, lsl #2
   114ee:	add.w	r3, r2, r3, lsl #1
   114f2:	ldrb	r2, [r6, r0]
   114f4:	subs	r0, r2, #1
   114f6:	cmp	r0, #24
   114f8:	sub.w	r3, r3, #16
   114fc:	bls.n	114e6 <__gethex+0x1de>
   114fe:	cbz	r5, 11502 <__gethex+0x1fa>
   11500:	negs	r3, r3
   11502:	ldr	r2, [sp, #4]
   11504:	mov	r5, r7
   11506:	add	r2, r3
   11508:	mov	r7, r1
   1150a:	str	r2, [sp, #4]
   1150c:	str.w	r7, [r9]
   11510:	cmp.w	sl, #0
   11514:	beq.w	113aa <__gethex+0xa2>
   11518:	cmp.w	r8, #0
   1151c:	ite	eq
   1151e:	moveq	r0, #6
   11520:	movne	r0, #0
   11522:	add	sp, #44	; 0x2c
   11524:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11528:	str.w	r8, [r9]
   1152c:	mov.w	r8, #0
   11530:	add.w	r9, r9, #4
   11534:	mov	r2, r8
   11536:	movs	r7, #4
   11538:	b.n	113ee <__gethex+0xe6>
   1153a:	ldr	r5, [sp, #0]
   1153c:	ldr	r1, [sp, #8]
   1153e:	mov	r2, r5
   11540:	mov	r0, r4
   11542:	bl	c85c <strncmp>
   11546:	cmp	r0, #0
   11548:	beq.n	115b8 <__gethex+0x2b0>
   1154a:	ldrb	r3, [r4, #0]
   1154c:	mov	r7, r4
   1154e:	cmp	r3, #80	; 0x50
   11550:	beq.n	114b0 <__gethex+0x1a8>
   11552:	cmp	r3, #112	; 0x70
   11554:	beq.n	114b0 <__gethex+0x1a8>
   11556:	str.w	r7, [r9]
   1155a:	b.n	11518 <__gethex+0x210>
   1155c:	ldr	r3, [sp, #16]
   1155e:	ldr	r3, [r3, #8]
   11560:	cmp	r7, r3
   11562:	bge.w	117ce <__gethex+0x4c6>
   11566:	mov	r3, r7
   11568:	ldr	r0, [sp, #16]
   1156a:	add.w	r2, r0, r3, lsl #2
   1156e:	movs	r1, #1
   11570:	adds	r3, #1
   11572:	cmp	r4, #2
   11574:	str	r3, [r0, #16]
   11576:	str	r1, [r2, #20]
   11578:	beq.w	117ac <__gethex+0x4a4>
   1157c:	cmp	r7, r3
   1157e:	bge.w	11738 <__gethex+0x430>
   11582:	movs	r1, #1
   11584:	ldr	r0, [sp, #16]
   11586:	bl	11260 <rshift>
   1158a:	ldr	r3, [sp, #12]
   1158c:	ldr	r2, [sp, #4]
   1158e:	ldr	r3, [r3, #8]
   11590:	adds	r2, #1
   11592:	cmp	r2, r3
   11594:	str	r2, [sp, #4]
   11596:	ble.w	1173e <__gethex+0x436>
   1159a:	ldr	r0, [sp, #20]
   1159c:	ldr	r1, [sp, #16]
   1159e:	bl	11aac <_Bfree>
   115a2:	ldr	r2, [sp, #80]	; 0x50
   115a4:	movs	r3, #0
   115a6:	movs	r0, #163	; 0xa3
   115a8:	str	r3, [r2, #0]
   115aa:	add	sp, #44	; 0x2c
   115ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115b0:	movs	r5, #1
   115b2:	ldrb	r3, [r7, #2]
   115b4:	adds	r1, r7, #2
   115b6:	b.n	114c8 <__gethex+0x1c0>
   115b8:	ldrb	r2, [r4, r5]
   115ba:	ldrb	r3, [r6, r2]
   115bc:	adds	r7, r4, r5
   115be:	cmp	r3, #0
   115c0:	beq.n	11696 <__gethex+0x38e>
   115c2:	cmp	r2, #48	; 0x30
   115c4:	mov	r4, r7
   115c6:	bne.n	115d2 <__gethex+0x2ca>
   115c8:	ldrb.w	r3, [r4, #1]!
   115cc:	cmp	r3, #48	; 0x30
   115ce:	beq.n	115c8 <__gethex+0x2c0>
   115d0:	ldrb	r3, [r6, r3]
   115d2:	clz	sl, r3
   115d6:	mov	r5, r7
   115d8:	mov.w	sl, sl, lsr #5
   115dc:	mov.w	r8, #1
   115e0:	b.n	11364 <__gethex+0x5c>
   115e2:	movs	r4, #1
   115e4:	cbz	r7, 11600 <__gethex+0x2f8>
   115e6:	ldr	r3, [sp, #12]
   115e8:	ldr	r3, [r3, #12]
   115ea:	cmp	r3, #2
   115ec:	beq.w	116fa <__gethex+0x3f2>
   115f0:	cmp	r3, #3
   115f2:	beq.w	11702 <__gethex+0x3fa>
   115f6:	cmp	r3, #1
   115f8:	beq.w	11766 <__gethex+0x45e>
   115fc:	orr.w	r4, r4, #16
   11600:	ldr	r3, [sp, #80]	; 0x50
   11602:	mov	r2, r3
   11604:	ldr	r3, [sp, #16]
   11606:	str	r3, [r2, #0]
   11608:	ldr	r3, [sp, #32]
   1160a:	mov	r2, r3
   1160c:	ldr	r3, [sp, #4]
   1160e:	str	r3, [r2, #0]
   11610:	mov	r0, r4
   11612:	add	sp, #44	; 0x2c
   11614:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11618:	movs	r5, #0
   1161a:	b.n	115b2 <__gethex+0x2aa>
   1161c:	.word	0x0001392c
   11620:	subs	r4, r0, r6
   11622:	mov	r1, r4
   11624:	ldr	r0, [sp, #16]
   11626:	bl	122e8 <__any_on>
   1162a:	cmp	r0, #0
   1162c:	beq.n	1169a <__gethex+0x392>
   1162e:	subs	r2, r4, #1
   11630:	asrs	r1, r2, #5
   11632:	ldr	r0, [sp, #28]
   11634:	and.w	r3, r2, #31
   11638:	ldr.w	r1, [r0, r1, lsl #2]
   1163c:	movs	r7, #1
   1163e:	lsl.w	r3, r7, r3
   11642:	tst	r3, r1
   11644:	beq.n	1165c <__gethex+0x354>
   11646:	cmp	r2, r7
   11648:	ble.w	11782 <__gethex+0x47a>
   1164c:	subs	r1, r4, #2
   1164e:	ldr	r0, [sp, #16]
   11650:	bl	122e8 <__any_on>
   11654:	cmp	r0, #0
   11656:	beq.w	11782 <__gethex+0x47a>
   1165a:	movs	r7, #3
   1165c:	ldr	r3, [sp, #4]
   1165e:	ldr	r0, [sp, #16]
   11660:	add	r3, r4
   11662:	mov	r1, r4
   11664:	str	r3, [sp, #4]
   11666:	bl	11260 <rshift>
   1166a:	b.n	11460 <__gethex+0x158>
   1166c:	str	r5, [sp, #4]
   1166e:	b.n	11390 <__gethex+0x88>
   11670:	subs	r4, r6, r0
   11672:	ldr	r1, [sp, #16]
   11674:	ldr	r0, [sp, #20]
   11676:	mov	r2, r4
   11678:	bl	11e58 <__lshift>
   1167c:	ldr	r3, [sp, #4]
   1167e:	str	r0, [sp, #16]
   11680:	subs	r3, r3, r4
   11682:	str	r3, [sp, #4]
   11684:	mov	r3, r0
   11686:	adds	r3, #20
   11688:	str	r3, [sp, #28]
   1168a:	movs	r7, #0
   1168c:	b.n	11460 <__gethex+0x158>
   1168e:	adds	r4, r3, #2
   11690:	mov.w	r8, #0
   11694:	b.n	11350 <__gethex+0x48>
   11696:	mov	r3, r2
   11698:	b.n	1154e <__gethex+0x246>
   1169a:	mov	r7, r0
   1169c:	b.n	1165c <__gethex+0x354>
   1169e:	subs	r4, r5, #1
   116a0:	cmp	r7, #0
   116a2:	bne.n	11742 <__gethex+0x43a>
   116a4:	cbz	r4, 116b0 <__gethex+0x3a8>
   116a6:	mov	r1, r4
   116a8:	ldr	r0, [sp, #16]
   116aa:	bl	122e8 <__any_on>
   116ae:	mov	r7, r0
   116b0:	asrs	r3, r4, #5
   116b2:	ldr	r2, [sp, #28]
   116b4:	ldr	r0, [sp, #16]
   116b6:	ldr.w	r2, [r2, r3, lsl #2]
   116ba:	and.w	r4, r4, #31
   116be:	movs	r3, #1
   116c0:	lsl.w	r4, r3, r4
   116c4:	tst	r4, r2
   116c6:	mov	r1, r5
   116c8:	it	ne
   116ca:	orrne.w	r7, r7, #2
   116ce:	bl	11260 <rshift>
   116d2:	ldr	r3, [sp, #12]
   116d4:	ldr	r3, [r3, #4]
   116d6:	str	r3, [sp, #4]
   116d8:	subs	r6, r6, r5
   116da:	movs	r4, #2
   116dc:	b.n	115e4 <__gethex+0x2dc>
   116de:	ldr	r1, [sp, #0]
   116e0:	ldrb	r3, [r7, r1]
   116e2:	ldrb	r2, [r6, r3]
   116e4:	adds	r5, r7, r1
   116e6:	mov	r7, r5
   116e8:	cmp	r2, #0
   116ea:	beq.w	1138a <__gethex+0x82>
   116ee:	ldrb.w	r3, [r7, #1]!
   116f2:	ldrb	r2, [r6, r3]
   116f4:	cmp	r2, #0
   116f6:	bne.n	116ee <__gethex+0x3e6>
   116f8:	b.n	1138a <__gethex+0x82>
   116fa:	ldr	r3, [sp, #84]	; 0x54
   116fc:	rsb	r3, r3, #1
   11700:	str	r3, [sp, #84]	; 0x54
   11702:	ldr	r3, [sp, #84]	; 0x54
   11704:	cmp	r3, #0
   11706:	beq.w	115fc <__gethex+0x2f4>
   1170a:	ldr	r3, [sp, #16]
   1170c:	ldr	r5, [sp, #28]
   1170e:	ldr	r7, [r3, #16]
   11710:	mov.w	r8, r7, lsl #2
   11714:	add.w	r0, r5, r8
   11718:	mov	r3, r5
   1171a:	movs	r1, #0
   1171c:	b.n	11728 <__gethex+0x420>
   1171e:	str.w	r1, [r3], #4
   11722:	cmp	r0, r3
   11724:	bls.w	1155c <__gethex+0x254>
   11728:	ldr	r2, [r3, #0]
   1172a:	cmp.w	r2, #4294967295
   1172e:	beq.n	1171e <__gethex+0x416>
   11730:	adds	r2, #1
   11732:	cmp	r4, #2
   11734:	str	r2, [r3, #0]
   11736:	beq.n	117ac <__gethex+0x4a4>
   11738:	ands.w	r6, r6, #31
   1173c:	bne.n	117ba <__gethex+0x4b2>
   1173e:	movs	r4, #33	; 0x21
   11740:	b.n	11600 <__gethex+0x2f8>
   11742:	movs	r7, #1
   11744:	b.n	116b0 <__gethex+0x3a8>
   11746:	ldr	r2, [sp, #84]	; 0x54
   11748:	cmp	r2, #0
   1174a:	beq.w	11494 <__gethex+0x18c>
   1174e:	ldr	r1, [sp, #32]
   11750:	str	r3, [r1, #0]
   11752:	ldr	r3, [sp, #28]
   11754:	ldr	r1, [sp, #16]
   11756:	movs	r2, #1
   11758:	str	r2, [r1, #16]
   1175a:	str	r2, [r3, #0]
   1175c:	ldr	r3, [sp, #80]	; 0x50
   1175e:	mov	r2, r3
   11760:	movs	r0, #98	; 0x62
   11762:	str	r1, [r2, #0]
   11764:	b.n	11522 <__gethex+0x21a>
   11766:	lsls	r2, r7, #30
   11768:	bpl.w	115fc <__gethex+0x2f4>
   1176c:	ldr	r3, [sp, #28]
   1176e:	ldr	r3, [r3, #0]
   11770:	orrs	r3, r7
   11772:	lsls	r3, r3, #31
   11774:	bmi.n	1170a <__gethex+0x402>
   11776:	b.n	115fc <__gethex+0x2f4>
   11778:	ldr.w	r9, [sp, #28]
   1177c:	mov.w	r8, #0
   11780:	b.n	11430 <__gethex+0x128>
   11782:	movs	r7, #2
   11784:	b.n	1165c <__gethex+0x354>
   11786:	ldr	r2, [sp, #84]	; 0x54
   11788:	cmp	r2, #0
   1178a:	beq.n	1174e <__gethex+0x446>
   1178c:	b.n	11494 <__gethex+0x18c>
   1178e:	cmp	r6, r5
   11790:	bne.w	11494 <__gethex+0x18c>
   11794:	cmp	r6, #1
   11796:	ble.n	1174e <__gethex+0x446>
   11798:	subs	r1, r6, #1
   1179a:	ldr	r0, [sp, #16]
   1179c:	bl	122e8 <__any_on>
   117a0:	cmp	r0, #0
   117a2:	beq.w	11494 <__gethex+0x18c>
   117a6:	ldr	r3, [sp, #12]
   117a8:	ldr	r3, [r3, #4]
   117aa:	b.n	1174e <__gethex+0x446>
   117ac:	ldr	r3, [sp, #12]
   117ae:	ldr	r3, [r3, #0]
   117b0:	subs	r3, #1
   117b2:	cmp	r6, r3
   117b4:	beq.n	11800 <__gethex+0x4f8>
   117b6:	movs	r4, #34	; 0x22
   117b8:	b.n	11600 <__gethex+0x2f8>
   117ba:	add	r5, r8
   117bc:	rsb	r6, r6, #32
   117c0:	ldr.w	r0, [r5, #-4]
   117c4:	bl	11bd8 <__hi0bits>
   117c8:	cmp	r0, r6
   117ca:	bge.n	1173e <__gethex+0x436>
   117cc:	b.n	11582 <__gethex+0x27a>
   117ce:	ldr	r3, [sp, #16]
   117d0:	ldr.w	r9, [sp, #20]
   117d4:	ldr	r1, [r3, #4]
   117d6:	mov	r0, r9
   117d8:	adds	r1, #1
   117da:	bl	11a60 <_Balloc>
   117de:	ldr	r1, [sp, #16]
   117e0:	ldr	r3, [r1, #16]
   117e2:	adds	r2, r3, #2
   117e4:	mov	r5, r0
   117e6:	lsls	r2, r2, #2
   117e8:	adds	r1, #12
   117ea:	adds	r0, #12
   117ec:	bl	887c <memcpy>
   117f0:	ldr	r1, [sp, #16]
   117f2:	mov	r0, r9
   117f4:	bl	11aac <_Bfree>
   117f8:	str	r5, [sp, #16]
   117fa:	ldr	r3, [r5, #16]
   117fc:	adds	r5, #20
   117fe:	b.n	11568 <__gethex+0x260>
   11800:	asrs	r3, r6, #5
   11802:	and.w	r6, r6, #31
   11806:	ldr.w	r2, [r5, r3, lsl #2]
   1180a:	movs	r3, #1
   1180c:	lsls	r3, r6
   1180e:	tst	r3, r2
   11810:	ite	ne
   11812:	movne	r4, #33	; 0x21
   11814:	moveq	r4, #34	; 0x22
   11816:	b.n	11600 <__gethex+0x2f8>

00011818 <__match>:
   11818:	push	{r4, r5}
   1181a:	ldr	r4, [r0, #0]
   1181c:	b.n	11830 <__match+0x18>
   1181e:	ldrb.w	r3, [r4, #1]!
   11822:	sub.w	r5, r3, #65	; 0x41
   11826:	cmp	r5, #25
   11828:	it	ls
   1182a:	addls	r3, #32
   1182c:	cmp	r3, r2
   1182e:	bne.n	11842 <__match+0x2a>
   11830:	ldrb.w	r2, [r1], #1
   11834:	cmp	r2, #0
   11836:	bne.n	1181e <__match+0x6>
   11838:	adds	r4, #1
   1183a:	str	r4, [r0, #0]
   1183c:	movs	r0, #1
   1183e:	pop	{r4, r5}
   11840:	bx	lr
   11842:	movs	r0, #0
   11844:	pop	{r4, r5}
   11846:	bx	lr

00011848 <__hexnan>:
   11848:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1184c:	ldr	r3, [r1, #0]
   1184e:	ldr.w	r9, [pc, #372]	; 119c4 <__hexnan+0x17c>
   11852:	sub	sp, #20
   11854:	asrs	r1, r3, #5
   11856:	add.w	r1, r2, r1, lsl #2
   1185a:	ands.w	r3, r3, #31
   1185e:	str	r1, [sp, #4]
   11860:	itt	ne
   11862:	addne	r1, #4
   11864:	strne	r1, [sp, #4]
   11866:	ldr	r4, [sp, #4]
   11868:	str	r0, [sp, #8]
   1186a:	str	r3, [sp, #12]
   1186c:	movs	r3, #0
   1186e:	mov	r1, r3
   11870:	str.w	r3, [r4, #-4]
   11874:	mov	sl, r3
   11876:	mov	lr, r3
   11878:	ldr	r3, [sp, #8]
   1187a:	sub.w	ip, r4, #4
   1187e:	ldr	r5, [r3, #0]
   11880:	mov	r8, ip
   11882:	mov	r0, ip
   11884:	ldrb.w	r3, [r5, #1]!
   11888:	cbz	r3, 118d4 <__hexnan+0x8c>
   1188a:	ldrb.w	r4, [r9, r3]
   1188e:	cmp	r4, #0
   11890:	bne.n	1191a <__hexnan+0xd2>
   11892:	cmp	r3, #32
   11894:	bhi.n	11952 <__hexnan+0x10a>
   11896:	cmp	lr, sl
   11898:	ble.n	11884 <__hexnan+0x3c>
   1189a:	cmp	r0, r8
   1189c:	bcs.n	118c6 <__hexnan+0x7e>
   1189e:	cmp	r1, #7
   118a0:	bgt.n	118c6 <__hexnan+0x7e>
   118a2:	rsb	r1, r1, #8
   118a6:	lsls	r1, r1, #2
   118a8:	ldr	r6, [r0, #0]
   118aa:	rsb	fp, r1, #32
   118ae:	mov	r3, r0
   118b0:	ldr	r7, [r3, #4]
   118b2:	lsl.w	r4, r7, fp
   118b6:	orrs	r4, r6
   118b8:	lsr.w	r6, r7, r1
   118bc:	str	r4, [r3, #0]
   118be:	str.w	r6, [r3, #4]!
   118c2:	cmp	r8, r3
   118c4:	bhi.n	118b0 <__hexnan+0x68>
   118c6:	cmp	r0, r2
   118c8:	bhi.n	11940 <__hexnan+0xf8>
   118ca:	ldrb.w	r3, [r5, #1]!
   118ce:	movs	r1, #8
   118d0:	cmp	r3, #0
   118d2:	bne.n	1188a <__hexnan+0x42>
   118d4:	cmp.w	lr, #0
   118d8:	beq.n	11956 <__hexnan+0x10e>
   118da:	cmp	r0, r8
   118dc:	bcs.n	118e2 <__hexnan+0x9a>
   118de:	cmp	r1, #7
   118e0:	ble.n	1199c <__hexnan+0x154>
   118e2:	cmp	r0, r2
   118e4:	bls.n	1195e <__hexnan+0x116>
   118e6:	mov	r3, r2
   118e8:	ldr.w	r1, [r0], #4
   118ec:	str.w	r1, [r3], #4
   118f0:	cmp	ip, r0
   118f2:	bcs.n	118e8 <__hexnan+0xa0>
   118f4:	movs	r1, #0
   118f6:	str.w	r1, [r3], #4
   118fa:	cmp	ip, r3
   118fc:	bcs.n	118f6 <__hexnan+0xae>
   118fe:	ldr	r3, [sp, #4]
   11900:	ldr.w	r3, [r3, #-4]
   11904:	cbnz	r3, 11912 <__hexnan+0xca>
   11906:	cmp	r2, ip
   11908:	beq.n	11980 <__hexnan+0x138>
   1190a:	ldr.w	r3, [ip, #-4]!
   1190e:	cmp	r3, #0
   11910:	beq.n	11906 <__hexnan+0xbe>
   11912:	movs	r0, #5
   11914:	add	sp, #20
   11916:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1191a:	adds	r1, #1
   1191c:	cmp	r1, #8
   1191e:	add.w	lr, lr, #1
   11922:	ble.n	11932 <__hexnan+0xea>
   11924:	cmp	r0, r2
   11926:	bls.n	11884 <__hexnan+0x3c>
   11928:	movs	r3, #0
   1192a:	str.w	r3, [r0, #-4]
   1192e:	movs	r1, #1
   11930:	subs	r0, #4
   11932:	ldr	r3, [r0, #0]
   11934:	and.w	r4, r4, #15
   11938:	orr.w	r4, r4, r3, lsl #4
   1193c:	str	r4, [r0, #0]
   1193e:	b.n	11884 <__hexnan+0x3c>
   11940:	movs	r3, #0
   11942:	sub.w	r8, r0, #4
   11946:	str.w	r3, [r0, #-4]
   1194a:	mov	sl, lr
   1194c:	mov	r0, r8
   1194e:	mov	r1, r3
   11950:	b.n	11884 <__hexnan+0x3c>
   11952:	cmp	r3, #41	; 0x29
   11954:	beq.n	1198e <__hexnan+0x146>
   11956:	movs	r0, #4
   11958:	add	sp, #20
   1195a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1195e:	ldr	r3, [sp, #12]
   11960:	cmp	r3, #0
   11962:	beq.n	118fe <__hexnan+0xb6>
   11964:	ldr	r4, [sp, #4]
   11966:	ldr	r3, [sp, #12]
   11968:	ldr.w	r1, [r4, #-4]
   1196c:	rsb	r3, r3, #32
   11970:	mov.w	r0, #4294967295
   11974:	lsr.w	r3, r0, r3
   11978:	ands	r3, r1
   1197a:	str.w	r3, [r4, #-4]
   1197e:	b.n	11904 <__hexnan+0xbc>
   11980:	movs	r3, #1
   11982:	movs	r0, #5
   11984:	str.w	r3, [ip]
   11988:	add	sp, #20
   1198a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1198e:	ldr	r3, [sp, #8]
   11990:	adds	r5, #1
   11992:	str	r5, [r3, #0]
   11994:	cmp.w	lr, #0
   11998:	bne.n	118da <__hexnan+0x92>
   1199a:	b.n	11956 <__hexnan+0x10e>
   1199c:	rsb	r3, r1, #8
   119a0:	lsls	r3, r3, #2
   119a2:	ldr	r5, [r0, #0]
   119a4:	rsb	r7, r3, #32
   119a8:	mov	r1, r0
   119aa:	ldr	r6, [r1, #4]
   119ac:	lsl.w	r4, r6, r7
   119b0:	orrs	r4, r5
   119b2:	lsr.w	r5, r6, r3
   119b6:	str	r4, [r1, #0]
   119b8:	str.w	r5, [r1, #4]!
   119bc:	cmp	r8, r1
   119be:	bhi.n	119aa <__hexnan+0x162>
   119c0:	b.n	118e2 <__hexnan+0x9a>
   119c2:	nop
   119c4:	.word	0x0001392c

000119c8 <iswspace>:
   119c8:	cmp	r0, #255	; 0xff
   119ca:	bls.n	119d0 <iswspace+0x8>
   119cc:	movs	r0, #0
   119ce:	bx	lr
   119d0:	push	{r4, lr}
   119d2:	mov	r4, r0
   119d4:	bl	b8f4 <__locale_ctype_ptr>
   119d8:	add	r0, r4
   119da:	ldrb	r0, [r0, #1]
   119dc:	and.w	r0, r0, #8
   119e0:	uxtb	r0, r0
   119e2:	pop	{r4, pc}

000119e4 <__localeconv_l>:
   119e4:	adds	r0, #240	; 0xf0
   119e6:	bx	lr

000119e8 <_localeconv_r>:
   119e8:	ldr	r2, [pc, #16]	; (119fc <_localeconv_r+0x14>)
   119ea:	ldr	r3, [pc, #20]	; (11a00 <_localeconv_r+0x18>)
   119ec:	ldr	r2, [r2, #0]
   119ee:	ldr	r0, [r2, #52]	; 0x34
   119f0:	cmp	r0, #0
   119f2:	it	eq
   119f4:	moveq	r0, r3
   119f6:	adds	r0, #240	; 0xf0
   119f8:	bx	lr
   119fa:	nop
   119fc:	.word	0x20013dc8
   11a00:	.word	0x20013dcc

00011a04 <_mbrtowc_r>:
   11a04:	push	{r4, r5, r6, r7, lr}
   11a06:	sub	sp, #12
   11a08:	mov	r7, r0
   11a0a:	ldr	r5, [sp, #32]
   11a0c:	cbz	r2, 11a34 <_mbrtowc_r+0x30>
   11a0e:	ldr	r4, [pc, #68]	; (11a54 <_mbrtowc_r+0x50>)
   11a10:	ldr	r6, [pc, #68]	; (11a58 <_mbrtowc_r+0x54>)
   11a12:	ldr	r4, [r4, #0]
   11a14:	ldr	r4, [r4, #52]	; 0x34
   11a16:	str	r5, [sp, #0]
   11a18:	cmp	r4, #0
   11a1a:	it	eq
   11a1c:	moveq	r4, r6
   11a1e:	ldr.w	r4, [r4, #228]	; 0xe4
   11a22:	blx	r4
   11a24:	adds	r3, r0, #1
   11a26:	bne.n	11a30 <_mbrtowc_r+0x2c>
   11a28:	movs	r2, #0
   11a2a:	movs	r3, #138	; 0x8a
   11a2c:	str	r2, [r5, #0]
   11a2e:	str	r3, [r7, #0]
   11a30:	add	sp, #12
   11a32:	pop	{r4, r5, r6, r7, pc}
   11a34:	ldr	r3, [pc, #28]	; (11a54 <_mbrtowc_r+0x50>)
   11a36:	ldr	r1, [pc, #32]	; (11a58 <_mbrtowc_r+0x54>)
   11a38:	ldr	r3, [r3, #0]
   11a3a:	ldr	r3, [r3, #52]	; 0x34
   11a3c:	str	r5, [sp, #0]
   11a3e:	cmp	r3, #0
   11a40:	it	eq
   11a42:	moveq	r3, r1
   11a44:	mov	r4, r2
   11a46:	mov	r1, r4
   11a48:	ldr	r2, [pc, #16]	; (11a5c <_mbrtowc_r+0x58>)
   11a4a:	ldr.w	r4, [r3, #228]	; 0xe4
   11a4e:	movs	r3, #1
   11a50:	blx	r4
   11a52:	b.n	11a24 <_mbrtowc_r+0x20>
   11a54:	.word	0x20013dc8
   11a58:	.word	0x20013dcc
   11a5c:	.word	0x00012db0

00011a60 <_Balloc>:
   11a60:	ldr	r3, [r0, #76]	; 0x4c
   11a62:	push	{r4, r5, r6, lr}
   11a64:	mov	r5, r0
   11a66:	mov	r4, r1
   11a68:	cbz	r3, 11a7e <_Balloc+0x1e>
   11a6a:	ldr.w	r0, [r3, r4, lsl #2]
   11a6e:	cbz	r0, 11a92 <_Balloc+0x32>
   11a70:	ldr	r2, [r0, #0]
   11a72:	str.w	r2, [r3, r4, lsl #2]
   11a76:	movs	r3, #0
   11a78:	str	r3, [r0, #16]
   11a7a:	str	r3, [r0, #12]
   11a7c:	pop	{r4, r5, r6, pc}
   11a7e:	movs	r2, #33	; 0x21
   11a80:	movs	r1, #4
   11a82:	bl	12c44 <_calloc_r>
   11a86:	str	r0, [r5, #76]	; 0x4c
   11a88:	mov	r3, r0
   11a8a:	cmp	r0, #0
   11a8c:	bne.n	11a6a <_Balloc+0xa>
   11a8e:	movs	r0, #0
   11a90:	pop	{r4, r5, r6, pc}
   11a92:	movs	r1, #1
   11a94:	lsl.w	r6, r1, r4
   11a98:	adds	r2, r6, #5
   11a9a:	mov	r0, r5
   11a9c:	lsls	r2, r2, #2
   11a9e:	bl	12c44 <_calloc_r>
   11aa2:	cmp	r0, #0
   11aa4:	beq.n	11a8e <_Balloc+0x2e>
   11aa6:	str	r4, [r0, #4]
   11aa8:	str	r6, [r0, #8]
   11aaa:	b.n	11a76 <_Balloc+0x16>

00011aac <_Bfree>:
   11aac:	cbz	r1, 11abc <_Bfree+0x10>
   11aae:	ldr	r3, [r0, #76]	; 0x4c
   11ab0:	ldr	r2, [r1, #4]
   11ab2:	ldr.w	r0, [r3, r2, lsl #2]
   11ab6:	str	r0, [r1, #0]
   11ab8:	str.w	r1, [r3, r2, lsl #2]
   11abc:	bx	lr
   11abe:	nop

00011ac0 <__multadd>:
   11ac0:	push	{r4, r5, r6, r7, lr}
   11ac2:	ldr	r4, [r1, #16]
   11ac4:	sub	sp, #12
   11ac6:	mov	r5, r1
   11ac8:	mov	r6, r0
   11aca:	add.w	lr, r1, #20
   11ace:	movs	r7, #0
   11ad0:	ldr.w	r0, [lr]
   11ad4:	uxth	r1, r0
   11ad6:	mla	r1, r2, r1, r3
   11ada:	lsrs	r3, r1, #16
   11adc:	lsrs	r0, r0, #16
   11ade:	mla	r3, r2, r0, r3
   11ae2:	uxth	r1, r1
   11ae4:	adds	r7, #1
   11ae6:	add.w	r1, r1, r3, lsl #16
   11aea:	cmp	r4, r7
   11aec:	str.w	r1, [lr], #4
   11af0:	mov.w	r3, r3, lsr #16
   11af4:	bgt.n	11ad0 <__multadd+0x10>
   11af6:	cbz	r3, 11b08 <__multadd+0x48>
   11af8:	ldr	r2, [r5, #8]
   11afa:	cmp	r4, r2
   11afc:	bge.n	11b0e <__multadd+0x4e>
   11afe:	add.w	r2, r5, r4, lsl #2
   11b02:	adds	r4, #1
   11b04:	str	r3, [r2, #20]
   11b06:	str	r4, [r5, #16]
   11b08:	mov	r0, r5
   11b0a:	add	sp, #12
   11b0c:	pop	{r4, r5, r6, r7, pc}
   11b0e:	ldr	r1, [r5, #4]
   11b10:	str	r3, [sp, #4]
   11b12:	adds	r1, #1
   11b14:	mov	r0, r6
   11b16:	bl	11a60 <_Balloc>
   11b1a:	ldr	r2, [r5, #16]
   11b1c:	adds	r2, #2
   11b1e:	add.w	r1, r5, #12
   11b22:	mov	r7, r0
   11b24:	lsls	r2, r2, #2
   11b26:	adds	r0, #12
   11b28:	bl	887c <memcpy>
   11b2c:	ldr	r2, [r6, #76]	; 0x4c
   11b2e:	ldr	r1, [r5, #4]
   11b30:	ldr	r3, [sp, #4]
   11b32:	ldr.w	r0, [r2, r1, lsl #2]
   11b36:	str	r0, [r5, #0]
   11b38:	str.w	r5, [r2, r1, lsl #2]
   11b3c:	mov	r5, r7
   11b3e:	b.n	11afe <__multadd+0x3e>

00011b40 <__s2b>:
   11b40:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b44:	ldr	r4, [pc, #140]	; (11bd4 <__s2b+0x94>)
   11b46:	ldr	r5, [sp, #32]
   11b48:	mov	r7, r3
   11b4a:	adds	r3, #8
   11b4c:	smull	r4, lr, r4, r3
   11b50:	asrs	r3, r3, #31
   11b52:	rsb	lr, r3, lr, asr #1
   11b56:	cmp.w	lr, #1
   11b5a:	mov	r6, r0
   11b5c:	mov	r4, r1
   11b5e:	mov	r8, r2
   11b60:	ble.n	11bce <__s2b+0x8e>
   11b62:	movs	r3, #1
   11b64:	movs	r1, #0
   11b66:	lsls	r3, r3, #1
   11b68:	cmp	lr, r3
   11b6a:	add.w	r1, r1, #1
   11b6e:	bgt.n	11b66 <__s2b+0x26>
   11b70:	mov	r0, r6
   11b72:	bl	11a60 <_Balloc>
   11b76:	movs	r3, #1
   11b78:	cmp.w	r8, #9
   11b7c:	str	r5, [r0, #20]
   11b7e:	str	r3, [r0, #16]
   11b80:	ble.n	11bc6 <__s2b+0x86>
   11b82:	add.w	r9, r4, #9
   11b86:	mov	r5, r9
   11b88:	add	r4, r8
   11b8a:	ldrb.w	r3, [r5], #1
   11b8e:	mov	r1, r0
   11b90:	subs	r3, #48	; 0x30
   11b92:	movs	r2, #10
   11b94:	mov	r0, r6
   11b96:	bl	11ac0 <__multadd>
   11b9a:	cmp	r5, r4
   11b9c:	bne.n	11b8a <__s2b+0x4a>
   11b9e:	add.w	r4, r9, r8
   11ba2:	subs	r4, #8
   11ba4:	cmp	r7, r8
   11ba6:	ble.n	11bc2 <__s2b+0x82>
   11ba8:	rsb	r7, r8, r7
   11bac:	add	r7, r4
   11bae:	ldrb.w	r3, [r4], #1
   11bb2:	mov	r1, r0
   11bb4:	subs	r3, #48	; 0x30
   11bb6:	movs	r2, #10
   11bb8:	mov	r0, r6
   11bba:	bl	11ac0 <__multadd>
   11bbe:	cmp	r7, r4
   11bc0:	bne.n	11bae <__s2b+0x6e>
   11bc2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11bc6:	adds	r4, #10
   11bc8:	mov.w	r8, #9
   11bcc:	b.n	11ba4 <__s2b+0x64>
   11bce:	movs	r1, #0
   11bd0:	b.n	11b70 <__s2b+0x30>
   11bd2:	nop
   11bd4:	.word	0x38e38e39

00011bd8 <__hi0bits>:
   11bd8:	lsrs	r3, r0, #16
   11bda:	lsls	r3, r3, #16
   11bdc:	cbnz	r3, 11c0c <__hi0bits+0x34>
   11bde:	lsls	r0, r0, #16
   11be0:	movs	r3, #16
   11be2:	tst.w	r0, #4278190080	; 0xff000000
   11be6:	itt	eq
   11be8:	lsleq	r0, r0, #8
   11bea:	addeq	r3, #8
   11bec:	tst.w	r0, #4026531840	; 0xf0000000
   11bf0:	itt	eq
   11bf2:	lsleq	r0, r0, #4
   11bf4:	addeq	r3, #4
   11bf6:	tst.w	r0, #3221225472	; 0xc0000000
   11bfa:	itt	eq
   11bfc:	lsleq	r0, r0, #2
   11bfe:	addeq	r3, #2
   11c00:	cmp	r0, #0
   11c02:	blt.n	11c14 <__hi0bits+0x3c>
   11c04:	lsls	r2, r0, #1
   11c06:	bmi.n	11c10 <__hi0bits+0x38>
   11c08:	movs	r0, #32
   11c0a:	bx	lr
   11c0c:	movs	r3, #0
   11c0e:	b.n	11be2 <__hi0bits+0xa>
   11c10:	adds	r0, r3, #1
   11c12:	bx	lr
   11c14:	mov	r0, r3
   11c16:	bx	lr

00011c18 <__lo0bits>:
   11c18:	ldr	r3, [r0, #0]
   11c1a:	ands.w	r2, r3, #7
   11c1e:	beq.n	11c30 <__lo0bits+0x18>
   11c20:	lsls	r1, r3, #31
   11c22:	bmi.n	11c66 <__lo0bits+0x4e>
   11c24:	lsls	r2, r3, #30
   11c26:	bmi.n	11c6a <__lo0bits+0x52>
   11c28:	lsrs	r3, r3, #2
   11c2a:	str	r3, [r0, #0]
   11c2c:	movs	r0, #2
   11c2e:	bx	lr
   11c30:	uxth	r1, r3
   11c32:	cbnz	r1, 11c38 <__lo0bits+0x20>
   11c34:	lsrs	r3, r3, #16
   11c36:	movs	r2, #16
   11c38:	tst.w	r3, #255	; 0xff
   11c3c:	itt	eq
   11c3e:	lsreq	r3, r3, #8
   11c40:	addeq	r2, #8
   11c42:	lsls	r1, r3, #28
   11c44:	itt	eq
   11c46:	lsreq	r3, r3, #4
   11c48:	addeq	r2, #4
   11c4a:	lsls	r1, r3, #30
   11c4c:	itt	eq
   11c4e:	lsreq	r3, r3, #2
   11c50:	addeq	r2, #2
   11c52:	lsls	r1, r3, #31
   11c54:	bmi.n	11c60 <__lo0bits+0x48>
   11c56:	lsrs	r3, r3, #1
   11c58:	bne.n	11c5e <__lo0bits+0x46>
   11c5a:	movs	r0, #32
   11c5c:	bx	lr
   11c5e:	adds	r2, #1
   11c60:	str	r3, [r0, #0]
   11c62:	mov	r0, r2
   11c64:	bx	lr
   11c66:	movs	r0, #0
   11c68:	bx	lr
   11c6a:	lsrs	r3, r3, #1
   11c6c:	str	r3, [r0, #0]
   11c6e:	movs	r0, #1
   11c70:	bx	lr
   11c72:	nop

00011c74 <__i2b>:
   11c74:	push	{r4, lr}
   11c76:	mov	r4, r1
   11c78:	movs	r1, #1
   11c7a:	bl	11a60 <_Balloc>
   11c7e:	movs	r2, #1
   11c80:	str	r4, [r0, #20]
   11c82:	str	r2, [r0, #16]
   11c84:	pop	{r4, pc}
   11c86:	nop

00011c88 <__multiply>:
   11c88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c8c:	ldr	r5, [r1, #16]
   11c8e:	ldr	r7, [r2, #16]
   11c90:	cmp	r5, r7
   11c92:	sub	sp, #12
   11c94:	mov	r4, r1
   11c96:	mov	r6, r2
   11c98:	bge.n	11ca4 <__multiply+0x1c>
   11c9a:	mov	r2, r5
   11c9c:	mov	r4, r6
   11c9e:	mov	r5, r7
   11ca0:	mov	r6, r1
   11ca2:	mov	r7, r2
   11ca4:	ldr	r3, [r4, #8]
   11ca6:	ldr	r1, [r4, #4]
   11ca8:	add.w	r8, r5, r7
   11cac:	cmp	r8, r3
   11cae:	it	gt
   11cb0:	addgt	r1, #1
   11cb2:	bl	11a60 <_Balloc>
   11cb6:	add.w	ip, r0, #20
   11cba:	add.w	r9, ip, r8, lsl #2
   11cbe:	cmp	ip, r9
   11cc0:	str	r0, [sp, #0]
   11cc2:	bcs.n	11cd0 <__multiply+0x48>
   11cc4:	mov	r3, ip
   11cc6:	movs	r1, #0
   11cc8:	str.w	r1, [r3], #4
   11ccc:	cmp	r9, r3
   11cce:	bhi.n	11cc8 <__multiply+0x40>
   11cd0:	add.w	r2, r6, #20
   11cd4:	add.w	sl, r2, r7, lsl #2
   11cd8:	add.w	r3, r4, #20
   11cdc:	cmp	r2, sl
   11cde:	add.w	lr, r3, r5, lsl #2
   11ce2:	bcs.n	11d8e <__multiply+0x106>
   11ce4:	str.w	r9, [sp, #4]
   11ce8:	mov	r9, r3
   11cea:	ldr.w	r3, [r2], #4
   11cee:	uxth.w	fp, r3
   11cf2:	cmp.w	fp, #0
   11cf6:	beq.n	11d3a <__multiply+0xb2>
   11cf8:	movs	r0, #0
   11cfa:	mov	r7, r9
   11cfc:	mov	r6, ip
   11cfe:	mov	r5, r0
   11d00:	b.n	11d04 <__multiply+0x7c>
   11d02:	mov	r6, r3
   11d04:	ldr.w	r4, [r7], #4
   11d08:	ldr	r0, [r6, #0]
   11d0a:	uxth	r1, r4
   11d0c:	uxth	r3, r0
   11d0e:	mla	r1, fp, r1, r3
   11d12:	lsrs	r4, r4, #16
   11d14:	lsrs	r0, r0, #16
   11d16:	adds	r3, r1, r5
   11d18:	mla	r0, fp, r4, r0
   11d1c:	add.w	r0, r0, r3, lsr #16
   11d20:	uxth	r1, r3
   11d22:	mov	r3, r6
   11d24:	orr.w	r1, r1, r0, lsl #16
   11d28:	cmp	lr, r7
   11d2a:	mov.w	r5, r0, lsr #16
   11d2e:	str.w	r1, [r3], #4
   11d32:	bhi.n	11d02 <__multiply+0x7a>
   11d34:	str	r5, [r6, #4]
   11d36:	ldr.w	r3, [r2, #-4]
   11d3a:	movs.w	fp, r3, lsr #16
   11d3e:	beq.n	11d82 <__multiply+0xfa>
   11d40:	ldr.w	r3, [ip]
   11d44:	mov	r7, ip
   11d46:	mov	r0, r3
   11d48:	mov	r5, r9
   11d4a:	movs	r1, #0
   11d4c:	b.n	11d50 <__multiply+0xc8>
   11d4e:	mov	r7, r6
   11d50:	ldrh	r4, [r5, #0]
   11d52:	lsrs	r0, r0, #16
   11d54:	mla	r0, fp, r4, r0
   11d58:	add	r1, r0
   11d5a:	uxth	r4, r3
   11d5c:	mov	r6, r7
   11d5e:	orr.w	r3, r4, r1, lsl #16
   11d62:	str.w	r3, [r6], #4
   11d66:	ldr	r0, [r7, #4]
   11d68:	ldr.w	r4, [r5], #4
   11d6c:	uxth	r3, r0
   11d6e:	lsrs	r4, r4, #16
   11d70:	mla	r4, fp, r4, r3
   11d74:	add.w	r3, r4, r1, lsr #16
   11d78:	cmp	lr, r5
   11d7a:	mov.w	r1, r3, lsr #16
   11d7e:	bhi.n	11d4e <__multiply+0xc6>
   11d80:	str	r3, [r7, #4]
   11d82:	cmp	sl, r2
   11d84:	add.w	ip, ip, #4
   11d88:	bhi.n	11cea <__multiply+0x62>
   11d8a:	ldr.w	r9, [sp, #4]
   11d8e:	cmp.w	r8, #0
   11d92:	ble.n	11dac <__multiply+0x124>
   11d94:	ldr.w	r3, [r9, #-4]
   11d98:	sub.w	r9, r9, #4
   11d9c:	cbz	r3, 11da6 <__multiply+0x11e>
   11d9e:	b.n	11dac <__multiply+0x124>
   11da0:	ldr.w	r3, [r9, #-4]!
   11da4:	cbnz	r3, 11dac <__multiply+0x124>
   11da6:	subs.w	r8, r8, #1
   11daa:	bne.n	11da0 <__multiply+0x118>
   11dac:	ldr	r0, [sp, #0]
   11dae:	str.w	r8, [r0, #16]
   11db2:	add	sp, #12
   11db4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011db8 <__pow5mult>:
   11db8:	ands.w	r3, r2, #3
   11dbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11dc0:	mov	r4, r2
   11dc2:	mov	r7, r0
   11dc4:	bne.n	11e24 <__pow5mult+0x6c>
   11dc6:	mov	r6, r1
   11dc8:	asrs	r4, r4, #2
   11dca:	beq.n	11e06 <__pow5mult+0x4e>
   11dcc:	ldr	r5, [r7, #72]	; 0x48
   11dce:	cbz	r5, 11e36 <__pow5mult+0x7e>
   11dd0:	lsls	r3, r4, #31
   11dd2:	mov.w	r8, #0
   11dd6:	bmi.n	11de6 <__pow5mult+0x2e>
   11dd8:	asrs	r4, r4, #1
   11dda:	beq.n	11e06 <__pow5mult+0x4e>
   11ddc:	ldr	r0, [r5, #0]
   11dde:	cbz	r0, 11e0c <__pow5mult+0x54>
   11de0:	mov	r5, r0
   11de2:	lsls	r3, r4, #31
   11de4:	bpl.n	11dd8 <__pow5mult+0x20>
   11de6:	mov	r2, r5
   11de8:	mov	r1, r6
   11dea:	mov	r0, r7
   11dec:	bl	11c88 <__multiply>
   11df0:	cbz	r6, 11e20 <__pow5mult+0x68>
   11df2:	ldr	r2, [r6, #4]
   11df4:	ldr	r3, [r7, #76]	; 0x4c
   11df6:	asrs	r4, r4, #1
   11df8:	ldr.w	r1, [r3, r2, lsl #2]
   11dfc:	str	r1, [r6, #0]
   11dfe:	str.w	r6, [r3, r2, lsl #2]
   11e02:	mov	r6, r0
   11e04:	bne.n	11ddc <__pow5mult+0x24>
   11e06:	mov	r0, r6
   11e08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e0c:	mov	r2, r5
   11e0e:	mov	r1, r5
   11e10:	mov	r0, r7
   11e12:	bl	11c88 <__multiply>
   11e16:	str	r0, [r5, #0]
   11e18:	str.w	r8, [r0]
   11e1c:	mov	r5, r0
   11e1e:	b.n	11de2 <__pow5mult+0x2a>
   11e20:	mov	r6, r0
   11e22:	b.n	11dd8 <__pow5mult+0x20>
   11e24:	subs	r2, r3, #1
   11e26:	ldr	r5, [pc, #44]	; (11e54 <__pow5mult+0x9c>)
   11e28:	movs	r3, #0
   11e2a:	ldr.w	r2, [r5, r2, lsl #2]
   11e2e:	bl	11ac0 <__multadd>
   11e32:	mov	r6, r0
   11e34:	b.n	11dc8 <__pow5mult+0x10>
   11e36:	movs	r1, #1
   11e38:	mov	r0, r7
   11e3a:	bl	11a60 <_Balloc>
   11e3e:	movw	r1, #625	; 0x271
   11e42:	movs	r2, #1
   11e44:	movs	r3, #0
   11e46:	str	r1, [r0, #20]
   11e48:	str	r2, [r0, #16]
   11e4a:	mov	r5, r0
   11e4c:	str	r0, [r7, #72]	; 0x48
   11e4e:	str	r3, [r0, #0]
   11e50:	b.n	11dd0 <__pow5mult+0x18>
   11e52:	nop
   11e54:	.word	0x00013b20

00011e58 <__lshift>:
   11e58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e5c:	mov	r9, r2
   11e5e:	ldr	r2, [r1, #16]
   11e60:	ldr	r3, [r1, #8]
   11e62:	mov.w	r4, r9, asr #5
   11e66:	add.w	r8, r4, r2
   11e6a:	add.w	r5, r8, #1
   11e6e:	cmp	r5, r3
   11e70:	mov	r6, r1
   11e72:	mov	sl, r0
   11e74:	ldr	r1, [r1, #4]
   11e76:	ble.n	11e82 <__lshift+0x2a>
   11e78:	lsls	r3, r3, #1
   11e7a:	cmp	r5, r3
   11e7c:	add.w	r1, r1, #1
   11e80:	bgt.n	11e78 <__lshift+0x20>
   11e82:	mov	r0, sl
   11e84:	bl	11a60 <_Balloc>
   11e88:	cmp	r4, #0
   11e8a:	add.w	r2, r0, #20
   11e8e:	ble.n	11f02 <__lshift+0xaa>
   11e90:	add.w	r3, r2, r4, lsl #2
   11e94:	movs	r1, #0
   11e96:	str.w	r1, [r2], #4
   11e9a:	cmp	r3, r2
   11e9c:	bne.n	11e96 <__lshift+0x3e>
   11e9e:	ldr	r4, [r6, #16]
   11ea0:	add.w	r1, r6, #20
   11ea4:	ands.w	r9, r9, #31
   11ea8:	add.w	lr, r1, r4, lsl #2
   11eac:	beq.n	11ef2 <__lshift+0x9a>
   11eae:	rsb	r2, r9, #32
   11eb2:	movs	r4, #0
   11eb4:	ldr	r7, [r1, #0]
   11eb6:	lsl.w	ip, r7, r9
   11eba:	orr.w	r4, ip, r4
   11ebe:	mov	ip, r3
   11ec0:	str.w	r4, [r3], #4
   11ec4:	ldr.w	r4, [r1], #4
   11ec8:	cmp	lr, r1
   11eca:	lsr.w	r4, r4, r2
   11ece:	bhi.n	11eb4 <__lshift+0x5c>
   11ed0:	str.w	r4, [ip, #4]
   11ed4:	cbz	r4, 11eda <__lshift+0x82>
   11ed6:	add.w	r5, r8, #2
   11eda:	ldr.w	r3, [sl, #76]	; 0x4c
   11ede:	ldr	r2, [r6, #4]
   11ee0:	subs	r5, #1
   11ee2:	ldr.w	r1, [r3, r2, lsl #2]
   11ee6:	str	r5, [r0, #16]
   11ee8:	str	r1, [r6, #0]
   11eea:	str.w	r6, [r3, r2, lsl #2]
   11eee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11ef2:	subs	r3, #4
   11ef4:	ldr.w	r2, [r1], #4
   11ef8:	str.w	r2, [r3, #4]!
   11efc:	cmp	lr, r1
   11efe:	bhi.n	11ef4 <__lshift+0x9c>
   11f00:	b.n	11eda <__lshift+0x82>
   11f02:	mov	r3, r2
   11f04:	b.n	11e9e <__lshift+0x46>
   11f06:	nop

00011f08 <__mcmp>:
   11f08:	ldr	r2, [r0, #16]
   11f0a:	ldr	r3, [r1, #16]
   11f0c:	subs	r2, r2, r3
   11f0e:	bne.n	11f38 <__mcmp+0x30>
   11f10:	lsls	r3, r3, #2
   11f12:	adds	r0, #20
   11f14:	adds	r1, #20
   11f16:	add	r1, r3
   11f18:	push	{r4}
   11f1a:	add	r3, r0
   11f1c:	b.n	11f22 <__mcmp+0x1a>
   11f1e:	cmp	r0, r3
   11f20:	bcs.n	11f3c <__mcmp+0x34>
   11f22:	ldr.w	r4, [r3, #-4]!
   11f26:	ldr.w	r2, [r1, #-4]!
   11f2a:	cmp	r4, r2
   11f2c:	beq.n	11f1e <__mcmp+0x16>
   11f2e:	bcc.n	11f44 <__mcmp+0x3c>
   11f30:	movs	r0, #1
   11f32:	ldr.w	r4, [sp], #4
   11f36:	bx	lr
   11f38:	mov	r0, r2
   11f3a:	bx	lr
   11f3c:	movs	r0, #0
   11f3e:	ldr.w	r4, [sp], #4
   11f42:	bx	lr
   11f44:	mov.w	r0, #4294967295
   11f48:	b.n	11f32 <__mcmp+0x2a>
   11f4a:	nop

00011f4c <__mdiff>:
   11f4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f50:	ldr	r3, [r1, #16]
   11f52:	mov	r7, r1
   11f54:	ldr	r1, [r2, #16]
   11f56:	subs	r3, r3, r1
   11f58:	cmp	r3, #0
   11f5a:	mov	r8, r2
   11f5c:	bne.n	11f8e <__mdiff+0x42>
   11f5e:	lsls	r1, r1, #2
   11f60:	add.w	r2, r7, #20
   11f64:	add.w	r5, r8, #20
   11f68:	adds	r3, r2, r1
   11f6a:	add	r1, r5
   11f6c:	b.n	11f72 <__mdiff+0x26>
   11f6e:	cmp	r2, r3
   11f70:	bcs.n	12030 <__mdiff+0xe4>
   11f72:	ldr.w	r6, [r3, #-4]!
   11f76:	ldr.w	r4, [r1, #-4]!
   11f7a:	cmp	r6, r4
   11f7c:	beq.n	11f6e <__mdiff+0x22>
   11f7e:	bcs.n	12042 <__mdiff+0xf6>
   11f80:	mov	r3, r7
   11f82:	mov	r4, r2
   11f84:	mov	r7, r8
   11f86:	mov.w	r9, #1
   11f8a:	mov	r8, r3
   11f8c:	b.n	11f9c <__mdiff+0x50>
   11f8e:	blt.n	1204c <__mdiff+0x100>
   11f90:	add.w	r5, r7, #20
   11f94:	add.w	r4, r2, #20
   11f98:	mov.w	r9, #0
   11f9c:	ldr	r1, [r7, #4]
   11f9e:	bl	11a60 <_Balloc>
   11fa2:	ldr.w	r3, [r8, #16]
   11fa6:	ldr	r6, [r7, #16]
   11fa8:	str.w	r9, [r0, #12]
   11fac:	add.w	ip, r4, r3, lsl #2
   11fb0:	mov	lr, r4
   11fb2:	add.w	r7, r5, r6, lsl #2
   11fb6:	add.w	r4, r0, #20
   11fba:	movs	r3, #0
   11fbc:	ldr.w	r1, [lr], #4
   11fc0:	ldr.w	r8, [r5], #4
   11fc4:	uxth	r2, r1
   11fc6:	uxtah	r3, r3, r8
   11fca:	lsrs	r1, r1, #16
   11fcc:	subs	r2, r3, r2
   11fce:	rsb	r3, r1, r8, lsr #16
   11fd2:	add.w	r3, r3, r2, asr #16
   11fd6:	uxth	r2, r2
   11fd8:	orr.w	r2, r2, r3, lsl #16
   11fdc:	cmp	ip, lr
   11fde:	str.w	r2, [r4], #4
   11fe2:	mov.w	r3, r3, asr #16
   11fe6:	bhi.n	11fbc <__mdiff+0x70>
   11fe8:	cmp	r7, r5
   11fea:	bls.n	1201c <__mdiff+0xd0>
   11fec:	mov	ip, r4
   11fee:	mov	r1, r5
   11ff0:	ldr.w	lr, [r1], #4
   11ff4:	uxtah	r2, r3, lr
   11ff8:	asrs	r3, r2, #16
   11ffa:	add.w	r3, r3, lr, lsr #16
   11ffe:	uxth	r2, r2
   12000:	orr.w	r2, r2, r3, lsl #16
   12004:	cmp	r7, r1
   12006:	str.w	r2, [ip], #4
   1200a:	mov.w	r3, r3, asr #16
   1200e:	bhi.n	11ff0 <__mdiff+0xa4>
   12010:	mvns	r5, r5
   12012:	add	r5, r7
   12014:	bic.w	r5, r5, #3
   12018:	adds	r5, #4
   1201a:	add	r4, r5
   1201c:	subs	r4, #4
   1201e:	cbnz	r2, 1202a <__mdiff+0xde>
   12020:	ldr.w	r3, [r4, #-4]!
   12024:	subs	r6, #1
   12026:	cmp	r3, #0
   12028:	beq.n	12020 <__mdiff+0xd4>
   1202a:	str	r6, [r0, #16]
   1202c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12030:	movs	r1, #0
   12032:	bl	11a60 <_Balloc>
   12036:	movs	r2, #1
   12038:	movs	r3, #0
   1203a:	str	r2, [r0, #16]
   1203c:	str	r3, [r0, #20]
   1203e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12042:	mov	r4, r5
   12044:	mov.w	r9, #0
   12048:	mov	r5, r2
   1204a:	b.n	11f9c <__mdiff+0x50>
   1204c:	mov	r3, r7
   1204e:	add.w	r4, r7, #20
   12052:	add.w	r5, r8, #20
   12056:	mov	r7, r8
   12058:	mov.w	r9, #1
   1205c:	mov	r8, r3
   1205e:	b.n	11f9c <__mdiff+0x50>

00012060 <__ulp>:
   12060:	ldr	r3, [pc, #76]	; (120b0 <__ulp+0x50>)
   12062:	vmov	r2, s1
   12066:	ands	r2, r3
   12068:	sub.w	r3, r2, #54525952	; 0x3400000
   1206c:	cmp	r3, #0
   1206e:	ble.n	1207a <__ulp+0x1a>
   12070:	movs	r0, #0
   12072:	mov	r1, r3
   12074:	vmov	d0, r0, r1
   12078:	bx	lr
   1207a:	negs	r3, r3
   1207c:	asrs	r3, r3, #20
   1207e:	cmp	r3, #19
   12080:	ble.n	1209e <__ulp+0x3e>
   12082:	subs	r3, #20
   12084:	cmp	r3, #30
   12086:	ittte	le
   12088:	rsble	r3, r3, #31
   1208c:	movle	r2, #1
   1208e:	lslle.w	r3, r2, r3
   12092:	movgt	r3, #1
   12094:	movs	r1, #0
   12096:	mov	r0, r3
   12098:	vmov	d0, r0, r1
   1209c:	bx	lr
   1209e:	mov.w	r2, #524288	; 0x80000
   120a2:	movs	r0, #0
   120a4:	asr.w	r1, r2, r3
   120a8:	vmov	d0, r0, r1
   120ac:	bx	lr
   120ae:	nop
   120b0:	.word	0x7ff00000

000120b4 <__b2d>:
   120b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120b8:	ldr	r6, [r0, #16]
   120ba:	add.w	r8, r0, #20
   120be:	add.w	r6, r8, r6, lsl #2
   120c2:	ldr.w	r7, [r6, #-4]
   120c6:	mov	r0, r7
   120c8:	bl	11bd8 <__hi0bits>
   120cc:	rsb	r3, r0, #32
   120d0:	cmp	r0, #10
   120d2:	str	r3, [r1, #0]
   120d4:	sub.w	r3, r6, #4
   120d8:	bgt.n	1210c <__b2d+0x58>
   120da:	cmp	r8, r3
   120dc:	rsb	r2, r0, #11
   120e0:	it	cc
   120e2:	ldrcc.w	r3, [r6, #-8]
   120e6:	lsr.w	r1, r7, r2
   120ea:	add.w	r0, r0, #21
   120ee:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   120f2:	ite	cc
   120f4:	lsrcc	r3, r2
   120f6:	movcs	r3, #0
   120f8:	lsl.w	r0, r7, r0
   120fc:	orr.w	r5, r5, #3145728	; 0x300000
   12100:	orr.w	r4, r0, r3
   12104:	vmov	d0, r4, r5
   12108:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1210c:	cmp	r8, r3
   1210e:	bcs.n	12152 <__b2d+0x9e>
   12110:	subs.w	r3, r0, #11
   12114:	ldr.w	r2, [r6, #-8]
   12118:	beq.n	12158 <__b2d+0xa4>
   1211a:	lsl.w	r0, r7, r3
   1211e:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   12122:	rsb	lr, r3, #32
   12126:	sub.w	r1, r6, #8
   1212a:	orr.w	r7, r7, #3145728	; 0x300000
   1212e:	lsr.w	r0, r2, lr
   12132:	cmp	r8, r1
   12134:	orr.w	r5, r7, r0
   12138:	bcs.n	1217c <__b2d+0xc8>
   1213a:	ldr.w	r1, [r6, #-12]
   1213e:	lsl.w	r0, r2, r3
   12142:	lsr.w	r3, r1, lr
   12146:	orrs	r0, r3
   12148:	mov	r4, r0
   1214a:	vmov	d0, r4, r5
   1214e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12152:	subs	r0, #11
   12154:	bne.n	1216a <__b2d+0xb6>
   12156:	mov	r2, r0
   12158:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   1215c:	orr.w	r5, r5, #3145728	; 0x300000
   12160:	mov	r4, r2
   12162:	vmov	d0, r4, r5
   12166:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1216a:	lsl.w	r0, r7, r0
   1216e:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   12172:	movs	r0, #0
   12174:	orr.w	r5, r5, #3145728	; 0x300000
   12178:	mov	r4, r0
   1217a:	b.n	1214a <__b2d+0x96>
   1217c:	lsl.w	r0, r2, r3
   12180:	mov	r4, r0
   12182:	b.n	1214a <__b2d+0x96>

00012184 <__d2b>:
   12184:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12188:	vmov	r6, r7, d0
   1218c:	sub	sp, #12
   1218e:	mov	r8, r1
   12190:	movs	r1, #1
   12192:	mov	r4, r7
   12194:	ubfx	r5, r7, #20, #11
   12198:	mov	r7, r2
   1219a:	bl	11a60 <_Balloc>
   1219e:	ubfx	r4, r4, #0, #20
   121a2:	mov	r9, r0
   121a4:	cbz	r5, 121aa <__d2b+0x26>
   121a6:	orr.w	r4, r4, #1048576	; 0x100000
   121aa:	str	r4, [sp, #4]
   121ac:	cbz	r6, 121f6 <__d2b+0x72>
   121ae:	add	r0, sp, #8
   121b0:	str.w	r6, [r0, #-8]!
   121b4:	bl	11c18 <__lo0bits>
   121b8:	cmp	r0, #0
   121ba:	bne.n	12226 <__d2b+0xa2>
   121bc:	ldmia.w	sp, {r2, r3}
   121c0:	str.w	r2, [r9, #20]
   121c4:	cmp	r3, #0
   121c6:	ite	eq
   121c8:	moveq	r1, #1
   121ca:	movne	r1, #2
   121cc:	str.w	r3, [r9, #24]
   121d0:	str.w	r1, [r9, #16]
   121d4:	cbnz	r5, 1220e <__d2b+0x8a>
   121d6:	add.w	r3, r9, r1, lsl #2
   121da:	subw	r0, r0, #1074	; 0x432
   121de:	str.w	r0, [r8]
   121e2:	ldr	r0, [r3, #16]
   121e4:	bl	11bd8 <__hi0bits>
   121e8:	rsb	r0, r0, r1, lsl #5
   121ec:	str	r0, [r7, #0]
   121ee:	mov	r0, r9
   121f0:	add	sp, #12
   121f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   121f6:	add	r0, sp, #4
   121f8:	bl	11c18 <__lo0bits>
   121fc:	ldr	r3, [sp, #4]
   121fe:	str.w	r3, [r9, #20]
   12202:	movs	r1, #1
   12204:	adds	r0, #32
   12206:	str.w	r1, [r9, #16]
   1220a:	cmp	r5, #0
   1220c:	beq.n	121d6 <__d2b+0x52>
   1220e:	subw	r5, r5, #1075	; 0x433
   12212:	add	r5, r0
   12214:	rsb	r0, r0, #53	; 0x35
   12218:	str.w	r5, [r8]
   1221c:	str	r0, [r7, #0]
   1221e:	mov	r0, r9
   12220:	add	sp, #12
   12222:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12226:	ldmia.w	sp, {r2, r3}
   1222a:	rsb	r1, r0, #32
   1222e:	lsl.w	r1, r3, r1
   12232:	orrs	r2, r1
   12234:	lsrs	r3, r0
   12236:	str	r3, [sp, #4]
   12238:	str.w	r2, [r9, #20]
   1223c:	b.n	121c4 <__d2b+0x40>
   1223e:	nop

00012240 <__ratio>:
   12240:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12244:	sub	sp, #12
   12246:	mov	r8, r1
   12248:	mov	r1, sp
   1224a:	mov	r9, r0
   1224c:	bl	120b4 <__b2d>
   12250:	mov	r0, r8
   12252:	add	r1, sp, #4
   12254:	vmov	r4, r5, d0
   12258:	bl	120b4 <__b2d>
   1225c:	ldmia.w	sp, {r1, r3}
   12260:	ldr.w	r2, [r9, #16]
   12264:	ldr.w	r0, [r8, #16]
   12268:	subs	r1, r1, r3
   1226a:	subs	r0, r2, r0
   1226c:	add.w	r3, r1, r0, lsl #5
   12270:	cmp	r3, #0
   12272:	vmov	r6, r7, d0
   12276:	ble.n	12294 <__ratio+0x54>
   12278:	add.w	r1, r5, r3, lsl #20
   1227c:	mov	r5, r1
   1227e:	mov	r2, r6
   12280:	mov	r3, r7
   12282:	mov	r0, r4
   12284:	mov	r1, r5
   12286:	bl	b0fc <__aeabi_ddiv>
   1228a:	vmov	d0, r0, r1
   1228e:	add	sp, #12
   12290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12294:	sub.w	r9, r7, r3, lsl #20
   12298:	vmov	r6, s0
   1229c:	mov	r7, r9
   1229e:	b.n	1227e <__ratio+0x3e>

000122a0 <__copybits>:
   122a0:	push	{r4, r5, r6}
   122a2:	ldr	r4, [r2, #16]
   122a4:	add.w	r3, r2, #20
   122a8:	subs	r1, #1
   122aa:	asrs	r6, r1, #5
   122ac:	add.w	r4, r3, r4, lsl #2
   122b0:	adds	r6, #1
   122b2:	cmp	r3, r4
   122b4:	add.w	r6, r0, r6, lsl #2
   122b8:	bcs.n	122d4 <__copybits+0x34>
   122ba:	subs	r1, r0, #4
   122bc:	ldr.w	r5, [r3], #4
   122c0:	str.w	r5, [r1, #4]!
   122c4:	cmp	r4, r3
   122c6:	bhi.n	122bc <__copybits+0x1c>
   122c8:	subs	r3, r4, r2
   122ca:	subs	r3, #21
   122cc:	bic.w	r3, r3, #3
   122d0:	adds	r3, #4
   122d2:	add	r0, r3
   122d4:	cmp	r6, r0
   122d6:	bls.n	122e2 <__copybits+0x42>
   122d8:	movs	r3, #0
   122da:	str.w	r3, [r0], #4
   122de:	cmp	r6, r0
   122e0:	bhi.n	122da <__copybits+0x3a>
   122e2:	pop	{r4, r5, r6}
   122e4:	bx	lr
   122e6:	nop

000122e8 <__any_on>:
   122e8:	ldr	r3, [r0, #16]
   122ea:	asrs	r2, r1, #5
   122ec:	cmp	r3, r2
   122ee:	push	{r4}
   122f0:	add.w	r4, r0, #20
   122f4:	bge.n	12318 <__any_on+0x30>
   122f6:	add.w	r3, r4, r3, lsl #2
   122fa:	cmp	r4, r3
   122fc:	bcs.n	12342 <__any_on+0x5a>
   122fe:	ldr.w	r0, [r3, #-4]
   12302:	subs	r3, #4
   12304:	cbz	r0, 1230e <__any_on+0x26>
   12306:	b.n	12334 <__any_on+0x4c>
   12308:	ldr.w	r2, [r3, #-4]!
   1230c:	cbnz	r2, 12334 <__any_on+0x4c>
   1230e:	cmp	r4, r3
   12310:	bcc.n	12308 <__any_on+0x20>
   12312:	ldr.w	r4, [sp], #4
   12316:	bx	lr
   12318:	ble.n	1233c <__any_on+0x54>
   1231a:	ands.w	r1, r1, #31
   1231e:	beq.n	1233c <__any_on+0x54>
   12320:	ldr.w	r0, [r4, r2, lsl #2]
   12324:	lsr.w	r3, r0, r1
   12328:	lsl.w	r1, r3, r1
   1232c:	cmp	r0, r1
   1232e:	add.w	r3, r4, r2, lsl #2
   12332:	beq.n	122fa <__any_on+0x12>
   12334:	movs	r0, #1
   12336:	ldr.w	r4, [sp], #4
   1233a:	bx	lr
   1233c:	add.w	r3, r4, r2, lsl #2
   12340:	b.n	122fa <__any_on+0x12>
   12342:	movs	r0, #0
   12344:	b.n	12312 <__any_on+0x2a>
   12346:	nop

00012348 <__sccl>:
   12348:	push	{r4, r5, r6}
   1234a:	ldrb	r5, [r1, #0]
   1234c:	cmp	r5, #94	; 0x5e
   1234e:	beq.n	123b0 <__sccl+0x68>
   12350:	movs	r2, #0
   12352:	adds	r1, #1
   12354:	mov	r6, r2
   12356:	subs	r3, r0, #1
   12358:	add.w	r4, r0, #255	; 0xff
   1235c:	strb.w	r2, [r3, #1]!
   12360:	cmp	r3, r4
   12362:	bne.n	1235c <__sccl+0x14>
   12364:	cbz	r5, 12388 <__sccl+0x40>
   12366:	eor.w	r2, r6, #1
   1236a:	strb	r2, [r0, r5]
   1236c:	adds	r4, r1, #1
   1236e:	ldrb.w	r3, [r4, #-1]
   12372:	cmp	r3, #45	; 0x2d
   12374:	beq.n	12394 <__sccl+0x4c>
   12376:	cmp	r3, #93	; 0x5d
   12378:	beq.n	1238e <__sccl+0x46>
   1237a:	cbz	r3, 12382 <__sccl+0x3a>
   1237c:	mov	r5, r3
   1237e:	mov	r1, r4
   12380:	b.n	1236a <__sccl+0x22>
   12382:	mov	r0, r1
   12384:	pop	{r4, r5, r6}
   12386:	bx	lr
   12388:	subs	r0, r1, #1
   1238a:	pop	{r4, r5, r6}
   1238c:	bx	lr
   1238e:	mov	r0, r4
   12390:	pop	{r4, r5, r6}
   12392:	bx	lr
   12394:	ldrb	r6, [r1, #1]
   12396:	cmp	r6, #93	; 0x5d
   12398:	beq.n	1237c <__sccl+0x34>
   1239a:	cmp	r5, r6
   1239c:	bgt.n	1237c <__sccl+0x34>
   1239e:	adds	r1, #2
   123a0:	adds	r3, r0, r5
   123a2:	adds	r5, #1
   123a4:	cmp	r6, r5
   123a6:	strb.w	r2, [r3, #1]!
   123aa:	bgt.n	123a2 <__sccl+0x5a>
   123ac:	adds	r4, #2
   123ae:	b.n	1236e <__sccl+0x26>
   123b0:	movs	r2, #1
   123b2:	ldrb	r5, [r1, #1]
   123b4:	mov	r6, r2
   123b6:	adds	r1, #2
   123b8:	b.n	12356 <__sccl+0xe>
   123ba:	nop

000123bc <_strtoll_l.isra.0>:
   123bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123c0:	sub	sp, #20
   123c2:	mov	sl, r3
   123c4:	str	r1, [sp, #8]
   123c6:	str	r0, [sp, #12]
   123c8:	str	r2, [sp, #4]
   123ca:	mov	r7, r1
   123cc:	ldr	r6, [sp, #56]	; 0x38
   123ce:	b.n	123d2 <_strtoll_l.isra.0+0x16>
   123d0:	mov	r7, r5
   123d2:	mov	r5, r7
   123d4:	mov	r0, r6
   123d6:	ldrb.w	r4, [r5], #1
   123da:	bl	b8ec <__locale_ctype_ptr_l>
   123de:	add	r0, r4
   123e0:	ldrb	r3, [r0, #1]
   123e2:	and.w	r3, r3, #8
   123e6:	and.w	r2, r3, #255	; 0xff
   123ea:	cmp	r3, #0
   123ec:	bne.n	123d0 <_strtoll_l.isra.0+0x14>
   123ee:	cmp	r4, #45	; 0x2d
   123f0:	beq.w	124fa <_strtoll_l.isra.0+0x13e>
   123f4:	cmp	r4, #43	; 0x2b
   123f6:	it	eq
   123f8:	ldrbeq	r4, [r7, #1]
   123fa:	str	r2, [sp, #0]
   123fc:	it	eq
   123fe:	addeq	r5, r7, #2
   12400:	cmp.w	sl, #0
   12404:	beq.n	12420 <_strtoll_l.isra.0+0x64>
   12406:	cmp.w	sl, #16
   1240a:	beq.w	12538 <_strtoll_l.isra.0+0x17c>
   1240e:	ldr	r3, [sp, #0]
   12410:	mov	r6, sl
   12412:	asrs	r7, r6, #31
   12414:	cbnz	r3, 12432 <_strtoll_l.isra.0+0x76>
   12416:	mov.w	r8, #4294967295
   1241a:	mvn.w	r9, #2147483648	; 0x80000000
   1241e:	b.n	1243a <_strtoll_l.isra.0+0x7e>
   12420:	cmp	r4, #48	; 0x30
   12422:	beq.n	12524 <_strtoll_l.isra.0+0x168>
   12424:	movs	r6, #10
   12426:	movs	r7, #0
   12428:	mov.w	sl, #10
   1242c:	ldr	r3, [sp, #0]
   1242e:	cmp	r3, #0
   12430:	beq.n	12416 <_strtoll_l.isra.0+0x5a>
   12432:	mov.w	r8, #0
   12436:	mov.w	r9, #2147483648	; 0x80000000
   1243a:	mov	r2, r6
   1243c:	mov	r3, r7
   1243e:	mov	r0, r8
   12440:	mov	r1, r9
   12442:	bl	b538 <__aeabi_uldivmod>
   12446:	mov	r3, r7
   12448:	mov	fp, r2
   1244a:	mov	r0, r8
   1244c:	mov	r2, r6
   1244e:	mov	r1, r9
   12450:	bl	b538 <__aeabi_uldivmod>
   12454:	mov.w	lr, #0
   12458:	movs	r2, #0
   1245a:	movs	r3, #0
   1245c:	b.n	1247e <_strtoll_l.isra.0+0xc2>
   1245e:	beq.n	124ec <_strtoll_l.isra.0+0x130>
   12460:	mul.w	r4, r2, r7
   12464:	mla	r4, r6, r3, r4
   12468:	umull	r2, r3, r2, r6
   1246c:	add	r3, r4
   1246e:	adds.w	r2, r2, ip
   12472:	adc.w	r3, r3, ip, asr #31
   12476:	mov.w	lr, #1
   1247a:	ldrb.w	r4, [r5], #1
   1247e:	sub.w	ip, r4, #48	; 0x30
   12482:	cmp.w	ip, #9
   12486:	bls.n	12496 <_strtoll_l.isra.0+0xda>
   12488:	sub.w	ip, r4, #65	; 0x41
   1248c:	cmp.w	ip, #25
   12490:	bhi.n	124ae <_strtoll_l.isra.0+0xf2>
   12492:	sub.w	ip, r4, #55	; 0x37
   12496:	cmp	sl, ip
   12498:	ble.n	124c0 <_strtoll_l.isra.0+0x104>
   1249a:	cmp.w	lr, #4294967295
   1249e:	beq.n	1247a <_strtoll_l.isra.0+0xbe>
   124a0:	cmp	r1, r3
   124a2:	it	eq
   124a4:	cmpeq	r0, r2
   124a6:	bcs.n	1245e <_strtoll_l.isra.0+0xa2>
   124a8:	mov.w	lr, #4294967295
   124ac:	b.n	1247a <_strtoll_l.isra.0+0xbe>
   124ae:	sub.w	ip, r4, #97	; 0x61
   124b2:	cmp.w	ip, #25
   124b6:	bhi.n	124c0 <_strtoll_l.isra.0+0x104>
   124b8:	sub.w	ip, r4, #87	; 0x57
   124bc:	cmp	sl, ip
   124be:	bgt.n	1249a <_strtoll_l.isra.0+0xde>
   124c0:	cmp.w	lr, #4294967295
   124c4:	beq.n	12504 <_strtoll_l.isra.0+0x148>
   124c6:	ldr	r1, [sp, #0]
   124c8:	cbz	r1, 124d0 <_strtoll_l.isra.0+0x114>
   124ca:	negs	r2, r2
   124cc:	sbc.w	r3, r3, r3, lsl #1
   124d0:	ldr	r1, [sp, #4]
   124d2:	cmp	r1, #0
   124d4:	beq.n	1255c <_strtoll_l.isra.0+0x1a0>
   124d6:	cmp.w	lr, #0
   124da:	bne.n	1251c <_strtoll_l.isra.0+0x160>
   124dc:	ldr	r5, [sp, #8]
   124de:	mov	r0, r2
   124e0:	mov	r1, r3
   124e2:	ldr	r3, [sp, #4]
   124e4:	str	r5, [r3, #0]
   124e6:	add	sp, #20
   124e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124ec:	cmp	fp, ip
   124ee:	bge.n	12460 <_strtoll_l.isra.0+0xa4>
   124f0:	mov	r2, r0
   124f2:	mov	r3, r1
   124f4:	mov.w	lr, #4294967295
   124f8:	b.n	1247a <_strtoll_l.isra.0+0xbe>
   124fa:	movs	r3, #1
   124fc:	adds	r5, r7, #2
   124fe:	ldrb	r4, [r7, #1]
   12500:	str	r3, [sp, #0]
   12502:	b.n	12400 <_strtoll_l.isra.0+0x44>
   12504:	ldr	r3, [sp, #0]
   12506:	cbnz	r3, 12554 <_strtoll_l.isra.0+0x198>
   12508:	mov.w	r0, #4294967295
   1250c:	mvn.w	r1, #2147483648	; 0x80000000
   12510:	ldr	r2, [sp, #12]
   12512:	movs	r3, #34	; 0x22
   12514:	str	r3, [r2, #0]
   12516:	ldr	r3, [sp, #4]
   12518:	cbnz	r3, 12520 <_strtoll_l.isra.0+0x164>
   1251a:	b.n	124e6 <_strtoll_l.isra.0+0x12a>
   1251c:	mov	r0, r2
   1251e:	mov	r1, r3
   12520:	subs	r5, #1
   12522:	b.n	124e2 <_strtoll_l.isra.0+0x126>
   12524:	ldrb	r3, [r5, #0]
   12526:	and.w	r3, r3, #223	; 0xdf
   1252a:	cmp	r3, #88	; 0x58
   1252c:	beq.n	12546 <_strtoll_l.isra.0+0x18a>
   1252e:	movs	r6, #8
   12530:	movs	r7, #0
   12532:	mov.w	sl, #8
   12536:	b.n	1242c <_strtoll_l.isra.0+0x70>
   12538:	cmp	r4, #48	; 0x30
   1253a:	bne.n	12562 <_strtoll_l.isra.0+0x1a6>
   1253c:	ldrb	r3, [r5, #0]
   1253e:	and.w	r3, r3, #223	; 0xdf
   12542:	cmp	r3, #88	; 0x58
   12544:	bne.n	12562 <_strtoll_l.isra.0+0x1a6>
   12546:	ldrb	r4, [r5, #1]
   12548:	movs	r6, #16
   1254a:	movs	r7, #0
   1254c:	adds	r5, #2
   1254e:	mov.w	sl, #16
   12552:	b.n	1242c <_strtoll_l.isra.0+0x70>
   12554:	movs	r0, #0
   12556:	mov.w	r1, #2147483648	; 0x80000000
   1255a:	b.n	12510 <_strtoll_l.isra.0+0x154>
   1255c:	mov	r0, r2
   1255e:	mov	r1, r3
   12560:	b.n	124e6 <_strtoll_l.isra.0+0x12a>
   12562:	movs	r6, #16
   12564:	movs	r7, #0
   12566:	b.n	1242c <_strtoll_l.isra.0+0x70>

00012568 <_strtoll_r>:
   12568:	push	{r4, r5, lr}
   1256a:	ldr	r4, [pc, #24]	; (12584 <_strtoll_r+0x1c>)
   1256c:	ldr	r5, [pc, #24]	; (12588 <_strtoll_r+0x20>)
   1256e:	ldr	r4, [r4, #0]
   12570:	ldr	r4, [r4, #52]	; 0x34
   12572:	sub	sp, #12
   12574:	cmp	r4, #0
   12576:	it	eq
   12578:	moveq	r4, r5
   1257a:	str	r4, [sp, #0]
   1257c:	bl	123bc <_strtoll_l.isra.0>
   12580:	add	sp, #12
   12582:	pop	{r4, r5, pc}
   12584:	.word	0x20013dc8
   12588:	.word	0x20013dcc

0001258c <_strtoul_l.isra.0>:
   1258c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12590:	ldr.w	r9, [sp, #40]	; 0x28
   12594:	mov	r6, r1
   12596:	mov	r7, r0
   12598:	mov	r5, r2
   1259a:	mov	r8, r3
   1259c:	mov	fp, r1
   1259e:	b.n	125a2 <_strtoul_l.isra.0+0x16>
   125a0:	mov	fp, r4
   125a2:	mov	r4, fp
   125a4:	mov	r0, r9
   125a6:	ldrb.w	sl, [r4], #1
   125aa:	bl	b8ec <__locale_ctype_ptr_l>
   125ae:	add	r0, sl
   125b0:	ldrb	r0, [r0, #1]
   125b2:	and.w	r0, r0, #8
   125b6:	and.w	ip, r0, #255	; 0xff
   125ba:	cmp	r0, #0
   125bc:	bne.n	125a0 <_strtoul_l.isra.0+0x14>
   125be:	mov	r1, sl
   125c0:	cmp	r1, #45	; 0x2d
   125c2:	beq.n	12688 <_strtoul_l.isra.0+0xfc>
   125c4:	cmp	r1, #43	; 0x2b
   125c6:	itt	eq
   125c8:	ldrbeq.w	r1, [fp, #1]
   125cc:	addeq.w	r4, fp, #2
   125d0:	cmp.w	r8, #0
   125d4:	beq.n	125f0 <_strtoul_l.isra.0+0x64>
   125d6:	cmp.w	r8, #16
   125da:	beq.n	12696 <_strtoul_l.isra.0+0x10a>
   125dc:	mov.w	r3, #4294967295
   125e0:	udiv	r3, r3, r8
   125e4:	mul.w	sl, r8, r3
   125e8:	mvn.w	sl, sl
   125ec:	mov	r9, r8
   125ee:	b.n	12600 <_strtoul_l.isra.0+0x74>
   125f0:	cmp	r1, #48	; 0x30
   125f2:	beq.n	126b8 <_strtoul_l.isra.0+0x12c>
   125f4:	mov.w	r8, #10
   125f8:	ldr	r3, [pc, #244]	; (126f0 <_strtoul_l.isra.0+0x164>)
   125fa:	mov	r9, r8
   125fc:	mov.w	sl, #5
   12600:	mov.w	lr, #0
   12604:	mov	r0, lr
   12606:	b.n	12616 <_strtoul_l.isra.0+0x8a>
   12608:	beq.n	1266a <_strtoul_l.isra.0+0xde>
   1260a:	mla	r0, r9, r0, r2
   1260e:	mov.w	lr, #1
   12612:	ldrb.w	r1, [r4], #1
   12616:	sub.w	r2, r1, #48	; 0x30
   1261a:	cmp	r2, #9
   1261c:	bls.n	1262a <_strtoul_l.isra.0+0x9e>
   1261e:	sub.w	r2, r1, #65	; 0x41
   12622:	cmp	r2, #25
   12624:	bhi.n	1263e <_strtoul_l.isra.0+0xb2>
   12626:	sub.w	r2, r1, #55	; 0x37
   1262a:	cmp	r8, r2
   1262c:	ble.n	1264e <_strtoul_l.isra.0+0xc2>
   1262e:	cmp.w	lr, #4294967295
   12632:	beq.n	12612 <_strtoul_l.isra.0+0x86>
   12634:	cmp	r0, r3
   12636:	bls.n	12608 <_strtoul_l.isra.0+0x7c>
   12638:	mov.w	lr, #4294967295
   1263c:	b.n	12612 <_strtoul_l.isra.0+0x86>
   1263e:	sub.w	r2, r1, #97	; 0x61
   12642:	cmp	r2, #25
   12644:	bhi.n	1264e <_strtoul_l.isra.0+0xc2>
   12646:	sub.w	r2, r1, #87	; 0x57
   1264a:	cmp	r8, r2
   1264c:	bgt.n	1262e <_strtoul_l.isra.0+0xa2>
   1264e:	cmp.w	lr, #4294967295
   12652:	beq.n	12678 <_strtoul_l.isra.0+0xec>
   12654:	cmp.w	ip, #0
   12658:	beq.n	1265c <_strtoul_l.isra.0+0xd0>
   1265a:	negs	r0, r0
   1265c:	cbz	r5, 12674 <_strtoul_l.isra.0+0xe8>
   1265e:	cmp.w	lr, #0
   12662:	bne.n	12680 <_strtoul_l.isra.0+0xf4>
   12664:	str	r6, [r5, #0]
   12666:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1266a:	cmp	r2, sl
   1266c:	ble.n	1260a <_strtoul_l.isra.0+0x7e>
   1266e:	mov.w	lr, #4294967295
   12672:	b.n	12612 <_strtoul_l.isra.0+0x86>
   12674:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12678:	movs	r3, #34	; 0x22
   1267a:	str	r3, [r7, #0]
   1267c:	mov	r0, lr
   1267e:	cbz	r5, 126d2 <_strtoul_l.isra.0+0x146>
   12680:	subs	r6, r4, #1
   12682:	str	r6, [r5, #0]
   12684:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12688:	add.w	r4, fp, #2
   1268c:	ldrb.w	r1, [fp, #1]
   12690:	mov.w	ip, #1
   12694:	b.n	125d0 <_strtoul_l.isra.0+0x44>
   12696:	cmp	r1, #48	; 0x30
   12698:	bne.n	126d6 <_strtoul_l.isra.0+0x14a>
   1269a:	ldrb	r3, [r4, #0]
   1269c:	and.w	r3, r3, #223	; 0xdf
   126a0:	cmp	r3, #88	; 0x58
   126a2:	bne.n	126e2 <_strtoul_l.isra.0+0x156>
   126a4:	mov.w	r9, #16
   126a8:	ldrb	r1, [r4, #1]
   126aa:	mov	r8, r9
   126ac:	mov.w	sl, #15
   126b0:	adds	r4, #2
   126b2:	mvn.w	r3, #4026531840	; 0xf0000000
   126b6:	b.n	12600 <_strtoul_l.isra.0+0x74>
   126b8:	ldrb	r3, [r4, #0]
   126ba:	and.w	r3, r3, #223	; 0xdf
   126be:	cmp	r3, #88	; 0x58
   126c0:	beq.n	126a4 <_strtoul_l.isra.0+0x118>
   126c2:	mov.w	r8, #8
   126c6:	mov	r9, r8
   126c8:	mov.w	sl, #7
   126cc:	mvn.w	r3, #3758096384	; 0xe0000000
   126d0:	b.n	12600 <_strtoul_l.isra.0+0x74>
   126d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d6:	mov.w	sl, #15
   126da:	mvn.w	r3, #4026531840	; 0xf0000000
   126de:	mov	r9, r8
   126e0:	b.n	12600 <_strtoul_l.isra.0+0x74>
   126e2:	mov	r9, r8
   126e4:	mov.w	sl, #15
   126e8:	mvn.w	r3, #4026531840	; 0xf0000000
   126ec:	b.n	12600 <_strtoul_l.isra.0+0x74>
   126ee:	nop
   126f0:	.word	0x19999999

000126f4 <_strtoul_r>:
   126f4:	push	{r4, r5, lr}
   126f6:	ldr	r4, [pc, #24]	; (12710 <_strtoul_r+0x1c>)
   126f8:	ldr	r5, [pc, #24]	; (12714 <_strtoul_r+0x20>)
   126fa:	ldr	r4, [r4, #0]
   126fc:	ldr	r4, [r4, #52]	; 0x34
   126fe:	sub	sp, #12
   12700:	cmp	r4, #0
   12702:	it	eq
   12704:	moveq	r4, r5
   12706:	str	r4, [sp, #0]
   12708:	bl	1258c <_strtoul_l.isra.0>
   1270c:	add	sp, #12
   1270e:	pop	{r4, r5, pc}
   12710:	.word	0x20013dc8
   12714:	.word	0x20013dcc

00012718 <_strtoull_l.isra.0>:
   12718:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1271c:	sub	sp, #20
   1271e:	mov	fp, r1
   12720:	str	r0, [sp, #8]
   12722:	mov	r7, r2
   12724:	mov	r6, r3
   12726:	mov	r8, r1
   12728:	ldr	r4, [sp, #56]	; 0x38
   1272a:	b.n	1272e <_strtoull_l.isra.0+0x16>
   1272c:	mov	r8, r5
   1272e:	mov	r5, r8
   12730:	mov	r0, r4
   12732:	ldrb.w	r9, [r5], #1
   12736:	bl	b8ec <__locale_ctype_ptr_l>
   1273a:	add	r0, r9
   1273c:	ldrb	r3, [r0, #1]
   1273e:	and.w	r3, r3, #8
   12742:	and.w	r2, r3, #255	; 0xff
   12746:	cmp	r3, #0
   12748:	bne.n	1272c <_strtoull_l.isra.0+0x14>
   1274a:	mov	r4, r9
   1274c:	cmp	r4, #45	; 0x2d
   1274e:	beq.w	1286a <_strtoull_l.isra.0+0x152>
   12752:	cmp	r4, #43	; 0x2b
   12754:	it	eq
   12756:	ldrbeq.w	r4, [r8, #1]
   1275a:	str	r2, [sp, #4]
   1275c:	it	eq
   1275e:	addeq.w	r5, r8, #2
   12762:	cbz	r6, 1279c <_strtoull_l.isra.0+0x84>
   12764:	cmp	r6, #16
   12766:	beq.w	12878 <_strtoull_l.isra.0+0x160>
   1276a:	mov.w	r9, r6, asr #31
   1276e:	mov	r2, r6
   12770:	mov	r3, r9
   12772:	mov.w	r0, #4294967295
   12776:	mov.w	r1, #4294967295
   1277a:	bl	b538 <__aeabi_uldivmod>
   1277e:	mov	r2, r6
   12780:	str	r0, [sp, #12]
   12782:	mov	sl, r1
   12784:	mov	r3, r9
   12786:	mov.w	r0, #4294967295
   1278a:	mov.w	r1, #4294967295
   1278e:	bl	b538 <__aeabi_uldivmod>
   12792:	mov	r8, r6
   12794:	mov	lr, r2
   12796:	ldr	r2, [sp, #12]
   12798:	mov	r3, sl
   1279a:	b.n	127b6 <_strtoull_l.isra.0+0x9e>
   1279c:	cmp	r4, #48	; 0x30
   1279e:	beq.w	128a4 <_strtoull_l.isra.0+0x18c>
   127a2:	ldr	r3, [pc, #348]	; (12900 <_strtoull_l.isra.0+0x1e8>)
   127a4:	mov.w	lr, #5
   127a8:	mov.w	r2, #2576980377	; 0x99999999
   127ac:	mov.w	r8, #10
   127b0:	mov.w	r9, #0
   127b4:	movs	r6, #10
   127b6:	mov.w	ip, #0
   127ba:	movs	r0, #0
   127bc:	movs	r1, #0
   127be:	b.n	127e6 <_strtoull_l.isra.0+0xce>
   127c0:	cmp	r1, r3
   127c2:	it	eq
   127c4:	cmpeq	r0, r2
   127c6:	beq.n	1284a <_strtoull_l.isra.0+0x132>
   127c8:	mul.w	r4, r0, r9
   127cc:	mla	r4, r8, r1, r4
   127d0:	umull	r0, r1, r0, r8
   127d4:	add	r1, r4
   127d6:	adds.w	r0, r0, sl
   127da:	adc.w	r1, r1, sl, asr #31
   127de:	mov.w	ip, #1
   127e2:	ldrb.w	r4, [r5], #1
   127e6:	sub.w	sl, r4, #48	; 0x30
   127ea:	cmp.w	sl, #9
   127ee:	bls.n	127fe <_strtoull_l.isra.0+0xe6>
   127f0:	sub.w	sl, r4, #65	; 0x41
   127f4:	cmp.w	sl, #25
   127f8:	bhi.n	12816 <_strtoull_l.isra.0+0xfe>
   127fa:	sub.w	sl, r4, #55	; 0x37
   127fe:	cmp	r6, sl
   12800:	ble.n	12828 <_strtoull_l.isra.0+0x110>
   12802:	cmp.w	ip, #4294967295
   12806:	beq.n	127e2 <_strtoull_l.isra.0+0xca>
   12808:	cmp	r3, r1
   1280a:	it	eq
   1280c:	cmpeq	r2, r0
   1280e:	bcs.n	127c0 <_strtoull_l.isra.0+0xa8>
   12810:	mov.w	ip, #4294967295
   12814:	b.n	127e2 <_strtoull_l.isra.0+0xca>
   12816:	sub.w	sl, r4, #97	; 0x61
   1281a:	cmp.w	sl, #25
   1281e:	bhi.n	12828 <_strtoull_l.isra.0+0x110>
   12820:	sub.w	sl, r4, #87	; 0x57
   12824:	cmp	r6, sl
   12826:	bgt.n	12802 <_strtoull_l.isra.0+0xea>
   12828:	cmp.w	ip, #4294967295
   1282c:	beq.n	12854 <_strtoull_l.isra.0+0x13c>
   1282e:	ldr	r3, [sp, #4]
   12830:	cbz	r3, 12838 <_strtoull_l.isra.0+0x120>
   12832:	negs	r0, r0
   12834:	sbc.w	r1, r1, r1, lsl #1
   12838:	cbz	r7, 12844 <_strtoull_l.isra.0+0x12c>
   1283a:	cmp.w	ip, #0
   1283e:	bne.n	12866 <_strtoull_l.isra.0+0x14e>
   12840:	mov	r5, fp
   12842:	str	r5, [r7, #0]
   12844:	add	sp, #20
   12846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1284a:	cmp	sl, lr
   1284c:	ble.n	127c8 <_strtoull_l.isra.0+0xb0>
   1284e:	mov.w	ip, #4294967295
   12852:	b.n	127e2 <_strtoull_l.isra.0+0xca>
   12854:	ldr	r2, [sp, #8]
   12856:	movs	r3, #34	; 0x22
   12858:	str	r3, [r2, #0]
   1285a:	mov.w	r0, #4294967295
   1285e:	mov.w	r1, #4294967295
   12862:	cmp	r7, #0
   12864:	beq.n	12844 <_strtoull_l.isra.0+0x12c>
   12866:	subs	r5, #1
   12868:	b.n	12842 <_strtoull_l.isra.0+0x12a>
   1286a:	movs	r3, #1
   1286c:	add.w	r5, r8, #2
   12870:	ldrb.w	r4, [r8, #1]
   12874:	str	r3, [sp, #4]
   12876:	b.n	12762 <_strtoull_l.isra.0+0x4a>
   12878:	cmp	r4, #48	; 0x30
   1287a:	bne.n	128c6 <_strtoull_l.isra.0+0x1ae>
   1287c:	ldrb	r3, [r5, #0]
   1287e:	and.w	r3, r3, #223	; 0xdf
   12882:	cmp	r3, #88	; 0x58
   12884:	bne.n	128dc <_strtoull_l.isra.0+0x1c4>
   12886:	mov.w	r3, #4294967295
   1288a:	ldrb	r4, [r5, #1]
   1288c:	str	r3, [sp, #12]
   1288e:	mov.w	lr, #15
   12892:	adds	r5, #2
   12894:	mvn.w	sl, #4026531840	; 0xf0000000
   12898:	mov.w	r8, #16
   1289c:	mov.w	r9, #0
   128a0:	movs	r6, #16
   128a2:	b.n	12796 <_strtoull_l.isra.0+0x7e>
   128a4:	ldrb	r3, [r5, #0]
   128a6:	and.w	r3, r3, #223	; 0xdf
   128aa:	cmp	r3, #88	; 0x58
   128ac:	beq.n	12886 <_strtoull_l.isra.0+0x16e>
   128ae:	mov.w	lr, #7
   128b2:	mov.w	r2, #4294967295
   128b6:	mvn.w	r3, #3758096384	; 0xe0000000
   128ba:	mov.w	r8, #8
   128be:	mov.w	r9, #0
   128c2:	movs	r6, #8
   128c4:	b.n	127b6 <_strtoull_l.isra.0+0x9e>
   128c6:	mov.w	lr, #15
   128ca:	mov.w	r2, #4294967295
   128ce:	mvn.w	r3, #4026531840	; 0xf0000000
   128d2:	mov.w	r8, #16
   128d6:	mov.w	r9, #0
   128da:	b.n	127b6 <_strtoull_l.isra.0+0x9e>
   128dc:	mov.w	r8, #16
   128e0:	mov.w	r9, #0
   128e4:	mov	r2, r8
   128e6:	mov	r3, r9
   128e8:	mov.w	r0, #4294967295
   128ec:	mov.w	r1, #4294967295
   128f0:	bl	b538 <__aeabi_uldivmod>
   128f4:	mvn.w	r3, #4026531840	; 0xf0000000
   128f8:	mov	lr, r2
   128fa:	mov.w	r2, #4294967295
   128fe:	b.n	127b6 <_strtoull_l.isra.0+0x9e>
   12900:	.word	0x19999999

00012904 <_strtoull_r>:
   12904:	push	{r4, r5, lr}
   12906:	ldr	r4, [pc, #24]	; (12920 <_strtoull_r+0x1c>)
   12908:	ldr	r5, [pc, #24]	; (12924 <_strtoull_r+0x20>)
   1290a:	ldr	r4, [r4, #0]
   1290c:	ldr	r4, [r4, #52]	; 0x34
   1290e:	sub	sp, #12
   12910:	cmp	r4, #0
   12912:	it	eq
   12914:	moveq	r4, r5
   12916:	str	r4, [sp, #0]
   12918:	bl	12718 <_strtoull_l.isra.0>
   1291c:	add	sp, #12
   1291e:	pop	{r4, r5, pc}
   12920:	.word	0x20013dc8
   12924:	.word	0x20013dcc

00012928 <__ssprint_r>:
   12928:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	ldr	r3, [r2, #8]
   1292e:	sub	sp, #12
   12930:	mov	r8, r2
   12932:	cmp	r3, #0
   12934:	beq.n	12a1c <__ssprint_r+0xf4>
   12936:	mov	fp, r0
   12938:	mov.w	r9, #0
   1293c:	ldr	r6, [r2, #0]
   1293e:	ldr	r0, [r1, #0]
   12940:	ldr	r3, [r1, #8]
   12942:	mov	r5, r1
   12944:	mov	r4, r9
   12946:	cmp	r4, #0
   12948:	beq.n	129d6 <__ssprint_r+0xae>
   1294a:	cmp	r4, r3
   1294c:	mov	r7, r3
   1294e:	mov	sl, r3
   12950:	bcc.n	129e0 <__ssprint_r+0xb8>
   12952:	ldrh	r3, [r5, #12]
   12954:	tst.w	r3, #1152	; 0x480
   12958:	beq.n	129b6 <__ssprint_r+0x8e>
   1295a:	ldr	r7, [r5, #20]
   1295c:	ldr	r1, [r5, #16]
   1295e:	add.w	r7, r7, r7, lsl #1
   12962:	rsb	sl, r1, r0
   12966:	add.w	r7, r7, r7, lsr #31
   1296a:	adds	r0, r4, #1
   1296c:	asrs	r7, r7, #1
   1296e:	add	r0, sl
   12970:	cmp	r0, r7
   12972:	mov	r2, r7
   12974:	itt	hi
   12976:	movhi	r7, r0
   12978:	movhi	r2, r7
   1297a:	lsls	r3, r3, #21
   1297c:	bpl.n	129e6 <__ssprint_r+0xbe>
   1297e:	mov	r1, r2
   12980:	mov	r0, fp
   12982:	bl	b928 <_malloc_r>
   12986:	cmp	r0, #0
   12988:	beq.n	129fa <__ssprint_r+0xd2>
   1298a:	mov	r2, sl
   1298c:	ldr	r1, [r5, #16]
   1298e:	str	r0, [sp, #4]
   12990:	bl	887c <memcpy>
   12994:	ldrh	r2, [r5, #12]
   12996:	ldr	r3, [sp, #4]
   12998:	bic.w	r2, r2, #1152	; 0x480
   1299c:	orr.w	r2, r2, #128	; 0x80
   129a0:	strh	r2, [r5, #12]
   129a2:	rsb	r2, sl, r7
   129a6:	add.w	r0, r3, sl
   129aa:	str	r7, [r5, #20]
   129ac:	str	r3, [r5, #16]
   129ae:	str	r0, [r5, #0]
   129b0:	str	r2, [r5, #8]
   129b2:	mov	r7, r4
   129b4:	mov	sl, r4
   129b6:	mov	r2, sl
   129b8:	mov	r1, r9
   129ba:	bl	bfd4 <memmove>
   129be:	ldr.w	r2, [r8, #8]
   129c2:	ldr	r3, [r5, #8]
   129c4:	ldr	r0, [r5, #0]
   129c6:	subs	r3, r3, r7
   129c8:	add	r0, sl
   129ca:	subs	r4, r2, r4
   129cc:	str	r3, [r5, #8]
   129ce:	str	r0, [r5, #0]
   129d0:	str.w	r4, [r8, #8]
   129d4:	cbz	r4, 12a1c <__ssprint_r+0xf4>
   129d6:	ldr.w	r9, [r6]
   129da:	ldr	r4, [r6, #4]
   129dc:	adds	r6, #8
   129de:	b.n	12946 <__ssprint_r+0x1e>
   129e0:	mov	r7, r4
   129e2:	mov	sl, r4
   129e4:	b.n	129b6 <__ssprint_r+0x8e>
   129e6:	mov	r0, fp
   129e8:	bl	c140 <_realloc_r>
   129ec:	mov	r3, r0
   129ee:	cmp	r0, #0
   129f0:	bne.n	129a2 <__ssprint_r+0x7a>
   129f2:	ldr	r1, [r5, #16]
   129f4:	mov	r0, fp
   129f6:	bl	11090 <_free_r>
   129fa:	movs	r3, #12
   129fc:	str.w	r3, [fp]
   12a00:	ldrh	r3, [r5, #12]
   12a02:	movs	r2, #0
   12a04:	orr.w	r3, r3, #64	; 0x40
   12a08:	mov.w	r0, #4294967295
   12a0c:	strh	r3, [r5, #12]
   12a0e:	str.w	r2, [r8, #8]
   12a12:	str.w	r2, [r8, #4]
   12a16:	add	sp, #12
   12a18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a1c:	movs	r0, #0
   12a1e:	str.w	r0, [r8, #4]
   12a22:	add	sp, #12
   12a24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012a28 <_sungetc_r>:
   12a28:	adds	r3, r1, #1
   12a2a:	push	{r4, r5, r6, lr}
   12a2c:	beq.n	12a66 <_sungetc_r+0x3e>
   12a2e:	ldrh	r3, [r2, #12]
   12a30:	ldr	r4, [r2, #48]	; 0x30
   12a32:	bic.w	r3, r3, #32
   12a36:	strh	r3, [r2, #12]
   12a38:	uxtb	r5, r1
   12a3a:	cbz	r4, 12a6c <_sungetc_r+0x44>
   12a3c:	mov	r4, r2
   12a3e:	ldr	r2, [r2, #4]
   12a40:	ldr	r3, [r4, #52]	; 0x34
   12a42:	cmp	r2, r3
   12a44:	mov	r6, r1
   12a46:	bge.n	12a5c <_sungetc_r+0x34>
   12a48:	ldr	r3, [r4, #0]
   12a4a:	subs	r2, r3, #1
   12a4c:	str	r2, [r4, #0]
   12a4e:	strb.w	r6, [r3, #-1]
   12a52:	ldr	r3, [r4, #4]
   12a54:	adds	r3, #1
   12a56:	str	r3, [r4, #4]
   12a58:	mov	r0, r5
   12a5a:	pop	{r4, r5, r6, pc}
   12a5c:	mov	r1, r4
   12a5e:	bl	12b6c <__submore>
   12a62:	cmp	r0, #0
   12a64:	beq.n	12a48 <_sungetc_r+0x20>
   12a66:	mov.w	r5, #4294967295
   12a6a:	b.n	12a58 <_sungetc_r+0x30>
   12a6c:	ldr	r0, [r2, #16]
   12a6e:	ldr	r3, [r2, #0]
   12a70:	cbz	r0, 12a7e <_sungetc_r+0x56>
   12a72:	cmp	r0, r3
   12a74:	bcs.n	12a7e <_sungetc_r+0x56>
   12a76:	ldrb.w	r0, [r3, #-1]
   12a7a:	cmp	r5, r0
   12a7c:	beq.n	12a9e <_sungetc_r+0x76>
   12a7e:	str	r3, [r2, #56]	; 0x38
   12a80:	mov	r3, r2
   12a82:	ldr	r6, [r2, #4]
   12a84:	str	r6, [r2, #60]	; 0x3c
   12a86:	add.w	r4, r2, #64	; 0x40
   12a8a:	movs	r0, #3
   12a8c:	str	r0, [r2, #52]	; 0x34
   12a8e:	str	r4, [r2, #48]	; 0x30
   12a90:	strb.w	r1, [r3, #66]!
   12a94:	movs	r1, #1
   12a96:	str	r3, [r2, #0]
   12a98:	str	r1, [r2, #4]
   12a9a:	mov	r0, r5
   12a9c:	pop	{r4, r5, r6, pc}
   12a9e:	ldr	r1, [r2, #4]
   12aa0:	subs	r3, #1
   12aa2:	adds	r1, #1
   12aa4:	str	r3, [r2, #0]
   12aa6:	str	r1, [r2, #4]
   12aa8:	b.n	12a58 <_sungetc_r+0x30>
   12aaa:	nop

00012aac <__ssrefill_r>:
   12aac:	push	{r4, lr}
   12aae:	mov	r4, r1
   12ab0:	ldr	r1, [r1, #48]	; 0x30
   12ab2:	cbz	r1, 12ad0 <__ssrefill_r+0x24>
   12ab4:	add.w	r3, r4, #64	; 0x40
   12ab8:	cmp	r1, r3
   12aba:	beq.n	12ac0 <__ssrefill_r+0x14>
   12abc:	bl	11090 <_free_r>
   12ac0:	ldr	r3, [r4, #60]	; 0x3c
   12ac2:	str	r3, [r4, #4]
   12ac4:	movs	r0, #0
   12ac6:	str	r0, [r4, #48]	; 0x30
   12ac8:	cbz	r3, 12ad0 <__ssrefill_r+0x24>
   12aca:	ldr	r3, [r4, #56]	; 0x38
   12acc:	str	r3, [r4, #0]
   12ace:	pop	{r4, pc}
   12ad0:	ldrh	r3, [r4, #12]
   12ad2:	ldr	r2, [r4, #16]
   12ad4:	str	r2, [r4, #0]
   12ad6:	orr.w	r3, r3, #32
   12ada:	movs	r2, #0
   12adc:	strh	r3, [r4, #12]
   12ade:	str	r2, [r4, #4]
   12ae0:	mov.w	r0, #4294967295
   12ae4:	pop	{r4, pc}
   12ae6:	nop

00012ae8 <_sfread_r>:
   12ae8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aec:	sub	sp, #12
   12aee:	mul.w	r9, r2, r3
   12af2:	str	r2, [sp, #4]
   12af4:	mov	sl, r3
   12af6:	ldr	r4, [sp, #48]	; 0x30
   12af8:	cmp.w	r9, #0
   12afc:	beq.n	12b52 <_sfread_r+0x6a>
   12afe:	mov	r7, r0
   12b00:	mov	r6, r1
   12b02:	mov	r5, r9
   12b04:	mov.w	r8, #0
   12b08:	b.n	12b2a <_sfread_r+0x42>
   12b0a:	ldr	r1, [r4, #0]
   12b0c:	bl	887c <memcpy>
   12b10:	ldr	r2, [r4, #0]
   12b12:	str.w	r8, [r4, #4]
   12b16:	add	r2, fp
   12b18:	str	r2, [r4, #0]
   12b1a:	mov	r1, r4
   12b1c:	mov	r0, r7
   12b1e:	add	r6, fp
   12b20:	rsb	r5, fp, r5
   12b24:	bl	12aac <__ssrefill_r>
   12b28:	cbnz	r0, 12b5a <_sfread_r+0x72>
   12b2a:	ldr.w	fp, [r4, #4]
   12b2e:	cmp	r5, fp
   12b30:	mov	r0, r6
   12b32:	mov	r2, fp
   12b34:	bhi.n	12b0a <_sfread_r+0x22>
   12b36:	mov	r2, r5
   12b38:	ldr	r1, [r4, #0]
   12b3a:	bl	887c <memcpy>
   12b3e:	ldr	r2, [r4, #4]
   12b40:	ldr	r3, [r4, #0]
   12b42:	subs	r2, r2, r5
   12b44:	add	r3, r5
   12b46:	mov	r0, sl
   12b48:	str	r2, [r4, #4]
   12b4a:	str	r3, [r4, #0]
   12b4c:	add	sp, #12
   12b4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b52:	mov	r0, r9
   12b54:	add	sp, #12
   12b56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b5a:	ldr	r3, [sp, #4]
   12b5c:	rsb	r9, r5, r9
   12b60:	udiv	r0, r9, r3
   12b64:	add	sp, #12
   12b66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b6a:	nop

00012b6c <__submore>:
   12b6c:	add.w	r3, r1, #64	; 0x40
   12b70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12b74:	mov	r4, r1
   12b76:	ldr	r1, [r1, #48]	; 0x30
   12b78:	cmp	r1, r3
   12b7a:	beq.n	12ba6 <__submore+0x3a>
   12b7c:	ldr	r6, [r4, #52]	; 0x34
   12b7e:	lsls	r7, r6, #1
   12b80:	mov	r2, r7
   12b82:	bl	c140 <_realloc_r>
   12b86:	mov	r5, r0
   12b88:	cbz	r0, 12bdc <__submore+0x70>
   12b8a:	add.w	r8, r0, r6
   12b8e:	mov	r2, r6
   12b90:	mov	r0, r8
   12b92:	mov	r1, r5
   12b94:	bl	887c <memcpy>
   12b98:	str.w	r8, [r4]
   12b9c:	str	r5, [r4, #48]	; 0x30
   12b9e:	str	r7, [r4, #52]	; 0x34
   12ba0:	movs	r0, #0
   12ba2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ba6:	mov.w	r1, #1024	; 0x400
   12baa:	bl	b928 <_malloc_r>
   12bae:	cbz	r0, 12bdc <__submore+0x70>
   12bb0:	ldrb.w	r3, [r4, #66]	; 0x42
   12bb4:	str	r0, [r4, #48]	; 0x30
   12bb6:	mov.w	r2, #1024	; 0x400
   12bba:	str	r2, [r4, #52]	; 0x34
   12bbc:	strb.w	r3, [r0, #1023]	; 0x3ff
   12bc0:	ldrb.w	r3, [r4, #65]	; 0x41
   12bc4:	strb.w	r3, [r0, #1022]	; 0x3fe
   12bc8:	ldrb.w	r3, [r4, #64]	; 0x40
   12bcc:	strb.w	r3, [r0, #1021]	; 0x3fd
   12bd0:	addw	r0, r0, #1021	; 0x3fd
   12bd4:	str	r0, [r4, #0]
   12bd6:	movs	r0, #0
   12bd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bdc:	mov.w	r0, #4294967295
   12be0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012be4 <_vasnprintf_r>:
   12be4:	push	{r4, r5, r6, lr}
   12be6:	mov	r5, r2
   12be8:	sub	sp, #104	; 0x68
   12bea:	ldr	r4, [r2, #0]
   12bec:	cbz	r1, 12bf2 <_vasnprintf_r+0xe>
   12bee:	cmp	r4, #0
   12bf0:	bne.n	12c28 <_vasnprintf_r+0x44>
   12bf2:	movs	r4, #0
   12bf4:	mov.w	r2, #648	; 0x288
   12bf8:	strh.w	r2, [sp, #12]
   12bfc:	str	r4, [sp, #0]
   12bfe:	str	r4, [sp, #16]
   12c00:	mov	r2, r3
   12c02:	movw	r6, #65535	; 0xffff
   12c06:	ldr	r3, [sp, #120]	; 0x78
   12c08:	str	r4, [sp, #8]
   12c0a:	mov	r1, sp
   12c0c:	str	r4, [sp, #20]
   12c0e:	strh.w	r6, [sp, #14]
   12c12:	bl	d990 <_svfprintf_r>
   12c16:	cmp	r0, #0
   12c18:	blt.n	12c3e <_vasnprintf_r+0x5a>
   12c1a:	ldr	r3, [sp, #0]
   12c1c:	str	r0, [r5, #0]
   12c1e:	movs	r2, #0
   12c20:	strb	r2, [r3, #0]
   12c22:	ldr	r0, [sp, #16]
   12c24:	add	sp, #104	; 0x68
   12c26:	pop	{r4, r5, r6, pc}
   12c28:	mov.w	r2, #1544	; 0x608
   12c2c:	str	r1, [sp, #0]
   12c2e:	str	r1, [sp, #16]
   12c30:	strh.w	r2, [sp, #12]
   12c34:	bge.n	12c00 <_vasnprintf_r+0x1c>
   12c36:	movs	r3, #139	; 0x8b
   12c38:	str	r3, [r0, #0]
   12c3a:	movs	r0, #0
   12c3c:	b.n	12c24 <_vasnprintf_r+0x40>
   12c3e:	movs	r0, #0
   12c40:	b.n	12c24 <_vasnprintf_r+0x40>
   12c42:	nop

00012c44 <_calloc_r>:
   12c44:	push	{r4, lr}
   12c46:	mul.w	r1, r2, r1
   12c4a:	bl	b928 <_malloc_r>
   12c4e:	mov	r4, r0
   12c50:	cbz	r0, 12c8a <_calloc_r+0x46>
   12c52:	ldr.w	r2, [r0, #-4]
   12c56:	bic.w	r2, r2, #3
   12c5a:	subs	r2, #4
   12c5c:	cmp	r2, #36	; 0x24
   12c5e:	bhi.n	12c92 <_calloc_r+0x4e>
   12c60:	cmp	r2, #19
   12c62:	bls.n	12c8e <_calloc_r+0x4a>
   12c64:	movs	r3, #0
   12c66:	cmp	r2, #27
   12c68:	str	r3, [r0, #0]
   12c6a:	str	r3, [r0, #4]
   12c6c:	bls.n	12c9c <_calloc_r+0x58>
   12c6e:	cmp	r2, #36	; 0x24
   12c70:	str	r3, [r0, #8]
   12c72:	str	r3, [r0, #12]
   12c74:	iteee	ne
   12c76:	addne.w	r2, r0, #16
   12c7a:	streq	r3, [r0, #16]
   12c7c:	streq	r3, [r0, #20]
   12c7e:	addeq.w	r2, r0, #24
   12c82:	movs	r3, #0
   12c84:	str	r3, [r2, #0]
   12c86:	str	r3, [r2, #4]
   12c88:	str	r3, [r2, #8]
   12c8a:	mov	r0, r4
   12c8c:	pop	{r4, pc}
   12c8e:	mov	r2, r0
   12c90:	b.n	12c82 <_calloc_r+0x3e>
   12c92:	movs	r1, #0
   12c94:	bl	c09c <memset>
   12c98:	mov	r0, r4
   12c9a:	pop	{r4, pc}
   12c9c:	add.w	r2, r0, #8
   12ca0:	b.n	12c82 <_calloc_r+0x3e>
   12ca2:	nop

00012ca4 <vtable for AudioStream>:
	...
   12cac:	a...

00012cb0 <vtable for mRecordQueue<500>>:
	...
   12cb8:	u...

00012cbc <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   12cc4:	........m.......
   12cd4:	-...........

00012ce0 <vtable for FsFile>:
	...
   12ce8:	........m.......
   12cf8:	-...........%02d
   12d08:	:%02d:%02d..%04d
   12d18:	/%02d/%02d..%d %
   12d28:	d %d %d %d %d %d
   12d38:	....%s_%04d_%02d
   12d48:	_%02d_%02d_%02d_
   12d58:	%02d%s..%04d_%02
   12d68:	d_%02d_%02d_%02d
   12d78:	_%02d...RIFF....
   12d88:	WAVE....fmt ....
   12d98:	data....Config.t
   12da8:	xt..%s......%10d
   12db8:	....%d..Envi_%s.
   12dc8:	txt.%04d_%02d_%0
   12dd8:	2d,.%02d_%02d_%0
   12de8:	2d,.%10.1f,.clos
   12df8:	e acquisition...
   12e08:	Hibernate now 1.
   12e18:	Hibernate now 3.
   12e28:	?!xa....oar1234n
   12e38:	dtchwseikp..%02d
   12e48:	....%c %5d on_ti
   12e58:	me......%c %5d a
   12e68:	cq_time.....%c %
   12e78:	5d rep_rate.....
   12e88:	%c %5d first_hou
   12e98:	r...%c %5d secon
   12ea8:	d_hour......%c %
   12eb8:	5d third_hour...
   12ec8:	%c %5d last_hour
   12ed8:	....%c %s name..
   12ee8:	....%c %s date..
   12ef8:	....%c %s time..
   12f08:	....exter 'a' to
   12f18:	 print this.exte
   12f28:	r '?c' to read v
   12f38:	alue c=(o,a,r,1,
   12f48:	2,3,4,n,d,t,c,h,
   12f58:	w,s,m,i,k,p)....
   12f68:	  e.g.: ?1 will 
   12f78:	print first hour
   12f88:	....exter '!cval
   12f98:	' to read value 
   12fa8:	c=(0,a,r,1,2,3,4
   12fb8:	,n,d,t,c,h,w,s,m
   12fc8:	,i,k,p) and val 
   12fd8:	is new value....
   12fe8:	  e.g.: !110 wil
   12ff8:	l set first hour
   13008:	 to 10..exter 'x
   13018:	val' to exit men
   13028:	u (x is delay in
   13038:	 minutes, -1 mea
   13048:	ns immediate)...
   13058:	  e.g.: x10 will
   13068:	 exit and hibern
   13078:	ate for 10 minut
   13088:	es..        x-1 
   13098:	with exit and st
   130a8:	art immediately.
   130b8:	microSoundRecord
   130c8:	er..End of Setup
   130d8:	....logFile.txt.
   130e8:	SdError: 0X.,0X.
   130f8:	Check SD format.
   13108:	....error: .file
   13118:	.write data fail
   13128:	ed..file.open fa
   13138:	iled....file.pre
   13148:	Allocate failed.
   13158:	closed...loop: %
   13168:	5d %4d; %5d %5d;
   13178:	 %5d.....loop: %
   13188:	5d %4d; %5d %5d;
   13198:	 %5d....; %5d %5
   131a8:	d...

000131ac <monthDays>:
   131ac:	............

000131b8 <vtable for AudioInputAnalog>:
	...
   131c0:	.(..

000131c4 <vtable for Stream>:
	...
   131cc:	a...-...m...q...
   131dc:	a...a...a...

000131e8 <vtable for File>:
	...
   131f0:	.+..-...m....*..
   13200:	.*...+...*.../..
   13210:	.0..-,...*...*..
   13220:	.*...+...+..-+..
   13230:	=+..I+..U+..i+..
   13240:	u+...+..

00013248 <vtable for SDFile>:
	...
   13250:	.+..-...m...A-..
   13260:	.....+..)-..M0..
   13270:	./..U,..a.......
   13280:	.-.../..E...)...
   13290:	.,...+..U-..y...
   132a0:	i,...-..  File  
   132b0:	  this=%x, f=%x.
   132c0:	....   SDFile th
   132d0:	is=%x, refcount=
   132e0:	%u..

000132e4 <TwoWire::i2c0_hardware>:
   132e4:	4..@@.....".0...
   132f4:	....!./.........

00013304 <TwoWire::i2c1_hardware>:
   13304:	4..@....&:......
   13314:	..%;............

00013324 <TwoWire::i2c2_hardware>:
   13324:	(..@@...........
   13334:	............J...

00013344 <vtable for TwoWire>:
	...
   1334c:	.1...1..m....1..
   1335c:	i1..u1...1..

00013368 <vtable for SDClass>:
	...
   13370:	.5..!4...3..%5..
   13380:	m3...4..m4...5..
   13390:	EXFAT...

00013398 <vtable for SdSpiCard>:
	...
   133a0:	.n...n...o...n..
   133b0:	.r...q..ms...u..
   133c0:	%o...s...n...n..
   133d0:	.q...q..Eq..u...
   133e0:	.n..)u...s...t..

000133f0 <vtable for SdioCard>:
	...
   133f8:	.w..9x..M.......
   13408:	.~..Iz.......~..
   13418:	.}...z..aw..mw..
   13428:	yw...w...w...x..
   13438:	Ix...|..!}...{..

00013448 <pin2sc1a>:
   13448:	................
   13458:	................
   13468:	................
   13478:	................
   13488:	........

00013490 <digital_pin_to_info_PGM>:
   13490:	@..C@..@D..CD..@
   134a0:	...C...@0..C0..@
   134b0:	4..C4..@...C...@
   134c0:	...C...@...C...@
   134d0:	...C...@...C...@
   134e0:	...C...@...C...@
   134f0:	...C...@...C...@
   13500:	...C...@...C...@
   13510:	...C...@...C...@
   13520:	...C...@...C...@
   13530:	...C...@...C...@
   13540:	...C...@...C...@
   13550:	h .Ch..@...C...@
   13560:	8..C8..@<..C<..@
   13570:	@..C@..@H..CH..@
   13580:	L..CL..@(..C(..@
   13590:	,..C,..@` .C`..@
   135a0:	d .Cd..@ ..C ..@
   135b0:	$..C$..@(..C(..@
   135c0:	,..C,..@D..CD..@
   135d0:	p..Cp..@t..Ct..@
   135e0:	h..Ch..@P..CP..@
   135f0:	X..CX..@\..C\..@
   13600:	T..CT..@ ..C ..@
   13610:	$..C$..@...C...@
   13620:	...C...@8..C8..@
   13630:	4..C4..@0..C0..@
   13640:	<..C<..@,..C,..@
   13650:	( .C(..@, .C,..@
   13660:	. .C...@. .C...@
   13670:	. .C...@. .C...@
   13680:	. .C...@. .C...@

00013690 <vtable for usb_serial_class>:
	...
   13698:	%...............
   136a8:	................
   136b8:	....

000136bc <usb_endpoint_config_table>:
   136bc:	....

000136c0 <usb_descriptor_list>:
   136c0:	.....8. ........
   136d0:	$9. C........9. 
   136e0:	.........9. ....
   136f0:	....h9. ........
   13700:	.9. ............
   13710:	....

00013714 <_global_impure_ptr>:
   13714:	.9. C...POSIX...
   13724:	....

00013728 <fpi.6173>:
   13728:	5...............
   13738:	....nf..inity...
   13748:	an..

0001374c <fpinan.6209>:
   1374c:	4...............
   1375c:	....

00013760 <tinytens>:
   13760:	.......<3...#.I9
   13770:	=..D...2......[%
   13780:	Co.d(.h.

00013788 <zeroes.7258>:
   13788:	0000000000000000
   13798:	INF.inf.NAN.nan.
   137a8:	0123456789ABCDEF
   137b8:	....0123456789ab
   137c8:	cdef....(null)..
   137d8:	0...

000137dc <blanks.7257>:
   137dc:	                

000137ec <basefix.7328>:
   137ec:	................
   137fc:	................
   1380c:	....e%ld....

00013818 <_ctype_>:
   13818:	.         ((((( 
   13828:	                
   13838:	 ...............
   13848:	................
   13858:	..AAAAAA........
   13868:	................
   13878:	..BBBBBB........
   13888:	................
   13898:	 ...............
	...
   13918:	....Infinity....
   13928:	NaN.

0001392c <__hexdig>:
	...
   1395c:	................
   1396c:	................
	...
   1398c:	................
	...
   13a2c:	....

00013a30 <__mprec_tens>:
   13a30:	.......?......$@
   13a40:	......Y@.....@.@
   13a50:	.......@.....j.@
   13a60:	.......A......cA
   13a70:	.......A....e..A
   13a80:	... _..B....vH7B
   13a90:	......mB..@..0.B
   13aa0:	.......B..4&.k.C
   13ab0:	...7y.AC....W4vC
   13ac0:	..Ngm..C.=.`.X.C
   13ad0:	@..x...DP.....KD
   13ae0:	..M....D.J...-.D
   13af0:	...yCx.D

00013af8 <__mprec_bigtens>:
   13af8:	...7y.AC.n.....F
   13b08:	..?..O8M2.0.Hw.Z
   13b18:	<.s..O.u

00013b20 <p05.6087>:
   13b20:	........}...

00013b2c <_init>:
   13b2c:	push	{r3, r4, r5, r6, r7, lr}
   13b2e:	nop
   13b30:	pop	{r3, r4, r5, r6, r7}
   13b32:	pop	{r3}
   13b34:	mov	lr, r3
   13b36:	bx	lr

00013b38 <__init_array_start>:
   13b38:	.word	0x0001004d

00013b3c <__frame_dummy_init_array_entry>:
   13b3c:	5.......A'..Y'..
   13b4c:	q'...'..)*..A*..
   13b5c:	Y*...*...*...0..
   13b6c:	.0...0...0...1..
   13b7c:	!1..91..Q1...6..

Disassembly of section .fini:

00013b8c <_fini>:
   13b8c:	push	{r3, r4, r5, r6, r7, lr}
   13b8e:	nop
