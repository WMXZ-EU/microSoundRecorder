
.vsteensy/build/microSoundRecorder.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0001394c l    d  .fini	00000000 .fini
00013950 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
200135d0 l    d  .usbbuffers	00000000 .usbbuffers
20013930 l    d  .data	00000000 .data
20014548 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00008cac l     F .text	0000000c startup_default_early_hook
00008cb8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
20014548 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
2001454c l       .bss	00000000 object.8610
000138fc l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 myAPP.cpp
00000520 l     F .text	0000001c llwuISR()
00000700 l     F .text	00000034 getTime(char*) [clone .constprop.39]
00000734 l     F .text	00000034 getDate(char*) [clone .constprop.40]
000021d0 l     F .text	000001cc _GLOBAL__sub_I_acqParameters
20014a70 l     O .bss	00000004 loop::t3
20014a74 l     O .bss	00000004 loop::t4
1fff0200 l     O .dmabuffers	00000400 i2s_rx_buffer_32
1fff0600 l     O .dmabuffers	00022d94 setup::data
20018c78 l     O .bss	00000028 makeFilename(char*)::filename
20018ca0 l     O .bss	00000004 checkDutyCycle(ACQ_Parameters_s*, short)::t_start
20018cd0 l     O .bss	00000030 wavHeader(unsigned long)::wheader
20018d40 l     O .bss	00000004 loop::loopCount
20018f44 l     O .bss	00000002 checkDutyCycle(ACQ_Parameters_s*, short)::recording
20019784 l     O .bss	00000002 loop::state
20019788 l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
0000239c l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
0000274c l     F .text	00000018 refreshCache(long) [clone .part.0]
2001978c l     O .bss	00000004 cacheTime
20019790 l     O .bss	00000007 tm
20019798 l     O .bss	00000004 sysTime
2001979c l     O .bss	00000001 Status
200197a4 l     O .bss	00000004 prevMillis
20013990 l     O .data	00000004 syncInterval
00012fc0 l     O .text	0000000c monthDays
200197a8 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
00002a24 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00002a3c l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00002a54 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00002a6c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00002a84 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 input_adc.cpp
00002a9c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 output_dac.cpp
00002ab4 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 output_tdm.cpp
00002acc l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00002ae4 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00002b14 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_dacs.cpp
00002b2c l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 play_sd_wav.cpp
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00003134 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
0000314c l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00003164 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
0000317c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
00003194 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_spdif.cpp
000031ac l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
20019840 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SD.cpp
000036f8 l     F .text	0000005c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000040f0 l     F .text	0000001e FsCache::sync() [clone .part.2]
0000417c l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000041b0 l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00005104 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
00005220 l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00005ea4 l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00006370 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00006ca0 l     F .text	00000058 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00007040 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00007058 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000763c l     F .text	00000030 sdIrs()
0000766c l     F .text	00000018 isBusyCommandComplete()
00007684 l     F .text	00000010 isBusyCommandInhibit()
00007694 l     F .text	0000000c isBusyDMA()
000076a0 l     F .text	00000014 isBusyFifoRead()
000076b4 l     F .text	00000014 isBusyFifoWrite()
000076c8 l     F .text	00000018 isBusyTransferComplete()
000076e0 l     F .text	000000cc setSdclk(unsigned long)
00007810 l     F .text	00000028 waitTimeout(bool (*)())
00007838 l     F .text	0000004c yieldTimeout(bool (*)())
000078b4 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
00007930 l     F .text	00000064 readReg16(unsigned long, void*)
00007994 l     F .text	0000002c isBusyCMD13()
000079dc l     F .text	00000020 waitDmaStatus() [clone .part.6]
000079fc l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007bf0 l     F .text	00000078 transferStop()
00007fa0 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
20019cfc l     O .bss	00000001 m_version2
20019d00 l     O .bss	00000010 m_cid
20019d10 l     O .bss	00000004 m_busyFcn
20019d14 l     O .bss	00000001 m_highCapacity
20019d18 l     O .bss	00000004 m_ocr
20019d1c l     O .bss	00000004 m_rca
20019d20 l     O .bss	00000004 m_irqstat
20013ad8 l     O .data	00000001 m_errorCode
20019d24 l     O .bss	00000001 m_initDone
20019d28 l     O .bss	00000010 m_csd
20019d38 l     O .bss	00000001 m_dmaBusy
20019d3c l     O .bss	00000004 m_sdClkKhz
20019d40 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
20019d45 l     O .bss	00000001 tx_noautoflush
20019d48 l     O .bss	00000004 tx_packet
20019d4c l     O .bss	00000001 transmit_previous_timeout
20019d50 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
20019d55 l     O .bss	00000001 calibrating
20013ad9 l     O .data	00000001 analog_config_bits
20019d56 l     O .bss	00000001 analog_reference_internal
20013ada l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00008cec l     F .text	0000004c digitalWrite.part.1
00008d38 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
20013ae0 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
20019d5c l     O .bss	00000004 ep0_tx_ptr
20019d60 l     O .bss	00000010 rx_last
20019d70 l     O .bss	00000002 ep0_tx_len
20019d74 l     O .bss	00000040 ep0_rx0_buf
20019db4 l     O .bss	00000010 rx_first
20019dc4 l     O .bss	00000001 ep0_tx_data_toggle
20019dc8 l     O .bss	00000040 ep0_rx1_buf
20019e08 l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
20019e18 l     O .bss	00000010 tx_last
20019e28 l     O .bss	00000008 setup
20019e30 l     O .bss	00000001 ep0_tx_bdt_bank
20019e34 l     O .bss	00000008 reply_buffer
20019e40 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
20019e44 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
20013afc l     O .data	00000012 device_descriptor
20013b28 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000b6cc l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000c73c l     F .text	00000038 sulp
000134e8 l     O .text	00000014 fpi.6173
0001350c l     O .text	00000014 fpinan.6209
00013520 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000d670 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00013548 l     O .text	00000010 zeroes.7258
0001359c l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
000135ac l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000fe8c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0000feac l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
000110a0 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
000138e0 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoll.c
000121fc l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
000123cc l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00012558 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20013ba0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
20014548 l       .bss	00000000 __bss_start__
20019f4c l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00008ca4  w    F .text	00000006 adc0_isr
0000af64 g     F .text	0000002c .hidden __aeabi_dcmpun
00008920 g     F .text	0000001c usb_serial_available
20018f4c g     O .bss	00000008 I2S_32::dma
00012128 g     F .text	0000005e __any_on
0000af28 g     F .text	00000012 .hidden __aeabi_dcmple
0000c4cc g     F .text	000000ba strcpy
0000ae64 g     F .text	0000007a .hidden __cmpdf2
20019e64 g     O .bss	00000004 AudioStream::memory_pool
00007dac g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009e44  w    F .text	000000ec yield
00005cbc g     F .text	000001e8 FatFile::write(void const*, unsigned int)
0000ae64 g     F .text	0000007a .hidden __eqdf2
00006fb4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00003bcc g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20013b10 g     O .data	00000018 usb_string_manufacturer_name_default
00005c44 g     F .text	00000076 FatFile::truncate()
20013a6c g     O .data	0000006c Wire1
0000a9d4 g     F .text	0000005a .hidden __floatdidf
00008c5c  w    F .text	00000048 hard_fault_isr
00008ca4  w    F .text	00000006 dma_ch6_isr
20019e68 g     O .bss	00000001 AudioStream::update_scheduled
20019cf4 g     O .bss	00000004 FsDateTime::callback
20013968 g     O .data	00000028 acqParameters
0000a0e0 g     F .text	00000020 Print::println()
00003270 g     F .text	00000130 TwoWire::isr()
20019ee0 g     O .bss	00000002 AudioStream::memory_used
00008ca4  w    F .text	00000006 uart0_lon_isr
00003acc g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00009164 g     F .text	000000c8 usb_rx_memory
00006f88  w    F .text	00000004 SdSpiCard::errorCode() const
00002b78  w    F .text	0000000c File::flush()
00008ca4  w    F .text	00000006 dma_ch8_isr
00001400 g     F .text	000006c4 doMenu()
0000bf4c g     F .text	00000002 __malloc_unlock
00002cf4  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
20019cf8 g     O .bss	00000004 FsVolume::m_cwv
00005538 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
00008b7c g     F .text	000000e0 analog_init
0000922c g     F .text	00000084 usb_tx
0000d650 g     F .text	00000020 _strtod_r
00008ca4  w    F .text	00000006 portcd_isr
0000fd3c g     F .text	0000004a _vdprintf_r
00013050  w    O .text	00000060 vtable for SDFile
00012928 g     F .text	00000082 _sfread_r
0000bde4 g     F .text	000000c6 memmove
20019804 g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000b708 g     F .text	00000014 __locale_ctype_ptr
000118a0 g     F .text	0000004c _Balloc
00008ca4  w    F .text	00000006 can1_rx_warn_isr
00013958 g       .ARM.exidx	00000000 __exidx_end
00008ca4  w    F .text	00000006 dma_error_isr
00006170 g     F .text	0000003c FatPartition::freeChain(unsigned long)
20019e58 g     O .bss	00000001 EventResponder::runningFromYield
000086c8 g     F .text	0000001a SdSpiArduinoDriver::receive()
00007178 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
000033a0 g     F .text	0000000c i2c0_isr
0000a0b4 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000ae54 g     F .text	0000008a .hidden __gtdf2
00006398 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000b670 g     F .text	0000000c __errno
00002f5c  w    F .text	00000026 SDFile::isDirectory()
00008ca4  w    F .text	00000006 portd_isr
00008ca4  w    F .text	00000006 enet_error_isr
0001312c g     O .text	00000020 TwoWire::i2c2_hardware
0000301c  w    F .text	00000028 File::~File()
00000c28 g     F .text	00000078 makeFilename(char*)
20019e48 g     O .bss	00000004 EventResponder::firstInterrupt
00011824 g     F .text	00000004 __localeconv_l
00006fb8  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00006d18 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
00008ca4  w    F .text	00000006 tpm1_isr
0000461c g     F .text	00000018 ExFatPartition::rootLength()
00000888  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00006f8c  w    F .text	00000004 SdSpiCard::errorData() const
0000a0a4  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013250 g     O .text	00000200 digital_pin_to_info_PGM
000060c8 g     F .text	000000a8 FatPartition::allocContiguous(unsigned long, unsigned long*)
20019f48 g     O .bss	00000004 errno
000071f4 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
000086e4 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006918 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
000044f0 g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000c3f8 g     F .text	00000004 __seofread
00013958 g       .ARM.exidx	00000000 _etext
20014548 g       .bss	00000000 _sbss
0000aef0 g     F .text	00000010 .hidden __aeabi_cdcmple
000077b8 g     F .text	0000000c SdioCard::errorData() const
0000b0cc g     F .text	00000160 .hidden __aeabi_fadd
00007ebc g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000b0c8 g     F .text	00000164 .hidden __subsf3
00008dfc g     F .text	0000001c digitalRead
00008ca4  w    F .text	00000006 porte_isr
00001e34 g     F .text	0000039c loop
0000a358 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
00008ca4  w    F .text	00000006 portb_isr
00008ca4  w    F .text	00000006 spi1_isr
00008ca4  w    F .text	00000006 uart3_status_isr
00003838 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00008ca4  w    F .text	00000006 mcm_isr
20018d00 g     O .bss	00000014 patchCord3
000083e0 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000a548 g     F .text	00000028 Stream::peekNextDigit()
00000678  w    F .text	0000001c c_uSD::~c_uSD()
000070bc g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
20019e4c g     O .bss	00000004 EventResponder::lastInterrupt
0000b30c g     F .text	00000024 .hidden __aeabi_f2lz
00008ca4  w    F .text	00000006 uart1_status_isr
00006d90 g     F .text	00000028 FsBaseFile::close()
00008774 g     F .text	00000134 memcpy
00008ca4  w    F .text	00000006 randnum_isr
00011688 g     F .text	00000180 __hexnan
0000aee0 g     F .text	00000020 .hidden __aeabi_cdrcmple
00002b5c  w    F .text	0000000c File::available()
00004528 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
000057ac g     F .text	0000002a FatFile::peek()
0000d7d0 g     F .text	000016e4 _svfprintf_r
0000a964 g     F .text	00000022 .hidden __floatsidf
00002ce0  w    F .text	00000014 SDFile::whoami()
2001980c  w    O .bss	00000001 SDFile::name()::zeroterm
20019d58 g     O .bss	00000004 systick_millis_count
0000ae5c g     F .text	00000082 .hidden __ltdf2
00004cec g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
00008c5c  w    F .text	00000048 bus_fault_isr
00002ec8  w    F .text	00000044 SDFile::truncate(unsigned long long)
00008ca4  w    F .text	00000006 watchdog_isr
0000b2dc g     F .text	00000000 .hidden __aeabi_uldivmod
000033ac g     F .text	0000000c i2c1_isr
20019e3c g     O .bss	00000001 usb_configuration
00008ca4  w    F .text	00000006 dma_ch11_isr
00000518  w    F .text	00000006 SdCardInterface::status()
00007f70 g     F .text	00000030 SdioCard::syncDevice()
00007c6c g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00000768  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
000057d8 g     F .text	00000040 FatFile::readDirCache(bool)
00012080 g     F .text	00000060 __ratio
000033b8 g     F .text	0000000c i2c2_isr
20019e6c g     O .bss	00000070 AudioStream::memory_pool_available_mask
200197dc g     O .bss	00000008 AudioOutputAnalog::dma
20013b10  w    O .data	00000018 usb_string_manufacturer_name
20019f40 g     O .bss	00000008 usb_rx_byte_count_data
00008ca4  w    F .text	00000006 pit1_isr
0000b71c g     F .text	00000010 malloc
20018ccc g     O .bss	00000004 maxNoise
00008ca4  w    F .text	00000006 dma_ch4_isr
0001310c g     O .text	00000020 TwoWire::i2c1_hardware
20018f54 g     O .bss	00000828 queue
0000a484 g     F .text	00000084 software_isr
00012b20  w    O .text	00000024 vtable for FsFile
00011808 g     F .text	0000001c iswspace
00008ca4  w    F .text	00000006 dma_ch7_isr
000031d0  w    F .text	0000001e TwoWire::read()
0000b234 g     F .text	0000001c .hidden __aeabi_i2f
000137f0 g     O .text	000000c8 __mprec_tens
00009d7c g     F .text	000000c8 usb_init
20019ede g     O .bss	00000002 AudioStream::memory_pool_first_mask
00006fa0  w    F .text	00000004 SdSpiCard::type() const
0000afe0 g     F .text	00000040 .hidden __fixunsdfsi
00008ca4  w    F .text	00000006 lptmr_isr
00002f98  w    F .text	00000084 SDFile::seek(unsigned long long, int)
20019f08 g     O .bss	00000004 __malloc_top_pad
00008dcc g     F .text	00000024 rtc_set
000128ec g     F .text	0000003a __ssrefill_r
00006fc8 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004d98 g     F .text	000000e2 ExFatFile::truncate()
20013930 g     O .data	00000000 .hidden __dso_handle
0000a944 g     F .text	0000001e .hidden __aeabi_ui2d
00011828 g     F .text	0000001c _localeconv_r
00012744 g     F .text	00000024 _strtoull_r
00008db0 g     F .text	00000010 attachInterruptVector
00008680 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00011ab4 g     F .text	00000012 __i2b
20013930 g       .data	00000000 _sdata
20019780 g     O .bss	00000004 maxValue
000130ec g     O .text	00000020 TwoWire::i2c0_hardware
00002bd4  w    F .text	0000000c File::operator bool()
00005f50 g     F .text	0000000e FatCache::sync()
0000b37c g     F .text	000002e2 .hidden __udivmoddi4
0000a6c0 g     F .text	00000000 .hidden __aeabi_drsub
00005138 g     F .text	00000034 FatFile::addCluster()
0000c330 g     F .text	00000024 _sbrk_r
00007248 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
00007894 g     F .text	00000020 SdioCard::type() const
00002b50  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
000088a8 g     F .text	00000048 usb_serial_getchar
00008ca4  w    F .text	00000006 can1_bus_off_isr
00008ca4  w    F .text	00000006 ftm2_isr
00002e38  w    F .text	0000004c SDFile::name()
20019f34 g     O .bss	00000008 usb_cdc_line_coding
00008df0 g     F .text	0000000a digitalWrite
20019e50 g     O .bss	00000004 EventResponder::lastYield
00008ca4  w    F .text	00000006 uart5_status_isr
00008ca4  w    F .text	00000006 lpuart0_status_isr
00003810 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
0001347c g     O .text	00000004 usb_endpoint_config_table
00008ca4  w    F .text	00000006 dma_ch9_isr
0000086c  w    F .text	0000001c Print::write(char const*)
000007ec  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00008ca4  w    F .text	00000006 pit2_isr
0000af14 g     F .text	00000012 .hidden __aeabi_dcmplt
20019f04 g     O .bss	00000004 __malloc_max_sbrked_mem
00002f28  w    F .text	0000001a SDFile::position()
00008e18 g     F .text	0000000a pinMode
00007544 g     F .text	00000042 SdSpiCard::writeStop()
20018d44 g     O .bss	00000200 tempBuffer
000090b0 g     F .text	0000004c usb_free
00008ca4  w    F .text	00000006 i2c3_isr
0000a988 g     F .text	0000003a .hidden __extendsfdf2
0000eeb4 g     F .text	00000e88 __ssvfscanf_r
0000ac84 g     F .text	000001d0 .hidden __aeabi_ddiv
0000a6cc g     F .text	00000276 .hidden __adddf3
20013994 g     O .data	0000006c Wire2
00007608 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00002b68  w    F .text	00000010 File::peek()
000061ac g     F .text	000000b0 FatPartition::freeClusterCount()
00003628  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
00011ef4 g     F .text	000000d0 __b2d
00001d00  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
00013950 g       .ARM.exidx	00000000 __exidx_start
0000aa30 g     F .text	00000254 .hidden __aeabi_dmul
000006a4  w    F .text	0000000c DMAChannel::~DMAChannel()
0000743c g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
00008ca4  w    F .text	00000006 pit0_isr
20019e54 g     O .bss	00000004 EventResponder::firstYield
000134d4 g     O .text	00000004 _global_impure_ptr
00008ca4  w    F .text	00000006 can1_error_isr
00000838  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000bf50 g     F .text	000003de _realloc_r
00002f44  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000b67c g     F .text	00000050 __libc_init_array
20019f4c g       .bss	00000000 __bss_end
00002e84  w    F .text	00000044 SDFile::rewindDirectory()
000031c4  w    F .text	0000000c TwoWire::available()
00008ca4  w    F .text	00000006 can0_wakeup_isr
000040a0 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000077c4 g     F .text	0000001c SdioCard::readCID(CID*)
000136ec g     O .text	00000100 __hexdig
00004a40 g     F .text	000000ea ExFatFile::addDirCluster()
000006b0  w    F .text	0000004e mRecordQueue<250>::update()
00008ca4  w    F .text	00000006 flash_cmd_isr
000075b4 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
000138b8 g     O .text	00000028 __mprec_bigtens
00011980 g     F .text	00000098 __s2b
0000a08c  w    F .text	00000004 usb_serial_class::clear()
0000a944 g     F .text	0000001e .hidden __floatunsidf
00008ca4  w    F .text	00000006 uart2_status_isr
00008cbc g     F .text	0000002c _sbrk
00000474 g     F .text	000000a4 I2S_32::isr32()
00011d48 g     F .text	00000042 __mcmp
00013170  w    O .text	00000028 vtable for SDClass
00002c88  w    F .text	00000012 SDFile::operator bool()
200197e4 g     O .bss	00000008 AudioOutputTDM::dma
20013adc g     O .data	00000004 __brkval
20019d54 g     O .bss	00000001 usb_cdc_line_rtsdtr
00008b34 g     F .text	00000048 usb_serial_flush_callback
000138ec g     F .text	00000000 _init
00005200 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
00008ca4  w    F .text	00000006 svcall_isr
0000a1bc g     F .text	0000006c AudioStream::initialize_memory(audio_block_struct*, unsigned int)
000033c8  w    F .text	00000062 SDClass::remove(char const*)
00002c9c  w    F .text	0000001c SDFile::close()
00008ca4  w    F .text	00000006 dma_ch15_isr
000030d8  w    F .text	0000005c SDFile::~SDFile()
0000b020 g     F .text	0000009e .hidden __aeabi_d2f
00002960 g     F .text	00000020 day()
0000b0c8 g     F .text	00000164 .hidden __aeabi_fsub
0001314c g     O .text	00000024 vtable for TwoWire
00008ca4  w    F .text	00000006 uart1_error_isr
00010e0c g     F .text	00000028 __libc_fini_array
0000c778 g     F .text	00000ed8 _strtod_l
00011658 g     F .text	00000030 __match
00008ca4  w    F .text	00000006 usbhs_phy_isr
200197ec g     O .bss	00000008 AudioInputAnalogStereo::dma0
20018d28 g     O .bss	00000018 acq
20019f4c g       .bss	00000000 _ebss
00007e34 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000052d4 g     F .text	00000050 FatFile::preAllocate(unsigned long)
20019818 g     O .bss	00000008 AudioOutputADAT::dma
000007d8  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00005ef0 g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
00011a18 g     F .text	00000040 __hi0bits
0000af90 g     F .text	0000004e .hidden __fixdfsi
00004b2c g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
00008ca4 g     F .text	00000006 unused_isr
00008ca4  w    F .text	00000006 spi0_isr
0000b260 g     F .text	0000007c .hidden __floatdisf
00008ca4  w    F .text	00000006 dma_ch3_isr
000033c4  w    F .text	00000002 SDClass::~SDClass()
000006a4  w    F .text	0000000c DMAChannel::~DMAChannel()
20014c78 g     O .bss	00004000 diskBuffer
20018ca8 g     O .bss	00000020 text
00000fac g     F .text	00000114 c_uSD::loadConfig(unsigned long*, int, long*, int)
0000301c  w    F .text	00000028 File::~File()
000029a0 g     F .text	00000024 year()
0000a5dc g     F .text	00000004 operator delete(void*, unsigned int)
00008ca4  w    F .text	00000006 flash_error_isr
0000a6cc g     F .text	00000276 .hidden __aeabi_dadd
0000ae5c g     F .text	00000082 .hidden __ledf2
000009a4 g     F .text	000000d4 I2S_32::begin()
00008ca4  w    F .text	00000006 uart5_error_isr
0000b330 g     F .text	0000004c .hidden __aeabi_f2ulz
00008ca4  w    F .text	00000006 rtc_seconds_isr
00008ca4  w    F .text	00000006 pdb_isr
00011bf8 g     F .text	000000a0 __pow5mult
000059f0 g     F .text	0000005c FatFile::rmdir()
0000a9c4 g     F .text	0000006a .hidden __aeabi_ul2d
00008c5c  w    F .text	00000048 usage_fault_isr
00008ca4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00006044 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00008ca4  w    F .text	00000006 dma_ch14_isr
000034f0  w    F .text	0000004c SDClass::exists(char const*)
00000694 g     F .text	00000004 getTeensy3Time()
00000000  w      *UND*	00000000 __deregister_frame_info
20019f3c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a07c g     F .text	00000010 systick_isr
00008ca4  w    F .text	00000006 rtc_alarm_isr
00000a78 g     F .text	000000b4 I2S_dividers(unsigned long*, unsigned long, unsigned long)
00002bf4  w    F .text	0000000c File::isDirectory()
00006cf8 g     F .text	00000020 FatFile::getSFN(char*)
0000738c g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20019e5c g     O .bss	00000004 AudioStream::first_update
00008ca4  w    F .text	00000006 dma_ch2_isr
00000ca0 g     F .text	0000006c wavHeader(unsigned long)
20013ae8 g     O .data	00000010 Serial
20019e60 g     O .bss	00000002 AudioStream::memory_used_max
00008ca4  w    F .text	00000006 ftm1_isr
00002b90  w    F .text	00000016 File::seek(unsigned long long, int)
00000698  w    F .text	0000000c AudioConnection::~AudioConnection()
0000a0ac  w    F .text	00000006 usb_serial_class::write(unsigned char)
00006e38 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
00008cac  w    F .text	0000000c startup_early_hook
00008ca4  w    F .text	00000006 dma_ch13_isr
000046c8 g     F .text	0000008c ExFatFile::addCluster()
00012ff0  w    O .text	00000060 vtable for File
00008ca4  w    F .text	00000006 uart2_error_isr
0000353c  w    F .text	00000054 SDClass::usedSize()
000088f0 g     F .text	00000030 usb_serial_peekchar
0000af50 g     F .text	00000012 .hidden __aeabi_dcmpgt
0000bce0 g     F .text	00000000 memchr
00005fdc g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
20013b88 g     O .data	00000016 usb_string_serial_number_default
00008c5c g     F .text	00000048 fault_isr
00010ed0 g     F .text	000001d0 _free_r
00007c68 g     F .text	00000004 SdioCard::readStop()
0000411c g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000b6e4 g     F .text	0000001c __locale_mb_cur_max
0000af3c g     F .text	00000012 .hidden __aeabi_dcmpge
00008ca4  w    F .text	00000006 usb_charge_isr
000029c4 g     F .text	00000044 setTime(long)
0000a09c  w    F .text	00000004 usb_serial_class::flush()
00012868 g     F .text	00000082 _sungetc_r
00008ca4  w    F .text	00000006 cmt_isr
0000a6c8 g     F .text	0000027a .hidden __aeabi_dsub
0000625c g     F .text	00000114 FatPartition::init(BlockDeviceInterface*, unsigned char)
00008ca4  w    F .text	00000006 usbhs_isr
00005324 g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
20014544 g     O .data	00000004 __malloc_sbrk_base
0000a094  w    F .text	00000004 usb_serial_class::read()
00008ca4  w    F .text	00000006 ftm3_isr
00002c38  w    F .text	0000000c File::rewindDirectory()
000123a8 g     F .text	00000024 _strtoll_r
2001977c g     O .bss	00000002 I2S_32::block_offset
00008ca4  w    F .text	00000006 tsi0_isr
00006738 g     F .text	00000128 FatFile::remove()
20014564 g     O .bss	0000050c uSD
0000a9c4 g     F .text	0000006a .hidden __floatundidf
00008ce8  w    F .text	00000002 __cxa_pure_virtual
00011c98 g     F .text	000000ae __lshift
00005474 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
00008ca4  w    F .text	00000006 spi2_isr
00004670 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
200197f4 g     O .bss	00000008 AudioInputAnalogStereo::dma1
0000b234 g     F .text	0000001c .hidden __floatsisf
00012768 g     F .text	00000100 __ssprint_r
00012a24 g     F .text	0000005e _vasnprintf_r
0000a5d4  w    F .text	00000002 serialEvent()
20019dc5 g     O .bss	00000001 usb_reboot_timer
00012af0  w    O .text	0000000c vtable for mRecordQueue<250>
200197ac g     O .bss	00000008 AudioOutputPWM::dma
0000fde8 g     F .text	000000a4 __register_exitproc
00003fa0 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00002a08 g     F .text	0000001c setSyncProvider(long (*)())
0000c69c g     F .text	000000a0 strncmp
00001258 g     F .text	00000164 checkDutyCycle(ACQ_Parameters_s*, short)
00004b88 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000893c g     F .text	00000038 usb_serial_flush_input
000045a8 g     F .text	00000072 ExFatPartition::freeClusterCount()
00012b44 g     O .text	0000000c vtable for I2S_32
00011ac8 g     F .text	00000130 __multiply
00008a7c g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
20019f0c g     O .bss	00000028 __malloc_current_mallinfo
00011fc4 g     F .text	000000ba __d2b
20019ee4 g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
00008ca4  w    F .text	00000006 can0_bus_off_isr
00007884  w    F .text	0000000e SdioCard::~SdioCard()
000008ac g     F .text	000000f8 I2S_32::config_i2s()
00003768 g     F .text	000000a6 ExFatFile::getName(char*, unsigned int)
20019e31 g     O .bss	00000001 usb_rx_memory_needed
00007d38 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00012534 g     F .text	00000024 _strtoul_r
000092b0 g     F .text	00000acc usb_isr
0000b664 g     F .text	0000000c __cxa_atexit
000038fc g     F .text	0000019e ExFatFile::read(void*, unsigned int)
0000a454 g     F .text	00000030 AudioStream::update_setup()
0000a964 g     F .text	00000022 .hidden __aeabi_i2d
0000b30c g     F .text	00000024 .hidden __fixsfdi
00002e0c  w    F .text	00000018 SDFile::peek()
000041dc g     F .text	0000000e FsCache::sync()
0000a5cc g     F .text	00000006 Stream::parseInt()
0000bd80 g     F .text	00000062 memcmp
20018ca4 g     O .bss	00000004 I2S_32::block_right
00013450  w    O .text	00000028 vtable for usb_serial_class
00008704 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
00008ca4  w    F .text	00000006 uart3_error_isr
0000b250 g     F .text	0000008c .hidden __floatundisf
2001393c g     O .data	00000005 postfix
00008770 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000a508 g     F .text	00000040 Stream::timedPeek()
0000c3a0 g     F .text	00000058 sscanf
0000b660  w    F .text	00000002 .hidden __aeabi_ldiv0
0000482c g     F .text	0000005a ExFatFile::rmdir()
20019828 g     O .bss	00000008 AudioInputI2SHex::dma
00008ca4  w    F .text	00000006 porta_isr
0000ac84 g     F .text	000001d0 .hidden __divdf3
000010c0 g     F .text	00000198 setWakeupCallandSleep(unsigned long)
000120e0 g     F .text	00000046 __copybits
200135d0 g     O .usbbuffers	00000360 usb_buffer_memory
000072a4 g     F .text	00000098 SdSpiCard::sectorCount()
00008ca4  w    F .text	00000006 low_voltage_isr
20014138 g     O .data	00000408 __malloc_av_
0000b22c g     F .text	00000024 .hidden __aeabi_ui2f
00008ca4  w    F .text	00000006 can0_error_isr
00008f04 g     F .text	0000016c _init_Teensyduino_internal_
20013934 g     O .data	00000004 outptr
00002e24  w    F .text	00000014 SDFile::flush()
0000aa30 g     F .text	00000254 .hidden __muldf3
00008adc g     F .text	00000058 usb_serial_flush_output
00008ca4  w    F .text	00000006 dma_ch12_isr
200197b4 g     O .bss	00000008 AudioInputI2S::dma
0000bf48 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000064ec g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
00008ca4  w    F .text	00000006 can1_wakeup_isr
20013400 g     O .dmabuffers	000001d0 _VectorsRam
0000871c g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00012a84 g     F .text	0000005e _calloc_r
00008ca4  w    F .text	00000006 pit3_isr
200197a0 g     O .bss	00000004 getTimePtr
20013ae4 g     O .data	00000001 yield_active_check_flags
00008ca4  w    F .text	00000006 enet_rx_isr
000049e0 g     F .text	0000005e ExFatFile::sync()
00005818 g     F .text	000001d6 FatFile::rename(FatFile*, char const*)
000079c0 g     F .text	0000001c SdioCard::isBusy()
00008ca4  w    F .text	00000006 portc_isr
00007404 g     F .text	00000038 SdSpiCard::readStop()
00000b2c g     F .text	000000fc I2S_modification(unsigned long, unsigned short, int)
200197fc g     O .bss	00000008 AudioInputI2SQuad::dma
0000beac g     F .text	0000009a memset
0000a1ac g     F .text	00000010 main
200197c4 g     O .bss	00000008 AudioOutputI2S::dma
20019f00 g     O .bss	00000004 __malloc_max_total_mem
000041ec g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000b260 g     F .text	0000007c .hidden __aeabi_l2f
20018f48 g     O .bss	00000004 I2S_32::block_left
00002860 g     F .text	000000a0 now()
00004e7c g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
00008c5c  w    F .text	00000048 memmanage_fault_isr
20013944 g     O .data	00000020 snipParameters
00002db4  w    F .text	00000058 SDFile::available()
00002bc8  w    F .text	0000000c File::close()
0000a5e0 g     F .text	0000007c usb_init_serialnumber
000013bc g     F .text	00000042 setRTCTime(int, int, int, int, int, int)
0000d7a8 g     F .text	00000024 _strtol_r
0000b020 g     F .text	0000009e .hidden __truncdfsf2
0001394c g       .text	00000000 __init_array_end
0000ffd8 g     F .text	00000e34 _dtoa_r
0000b73c g     F .text	00000570 _malloc_r
20019efc g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00008ca4  w    F .text	00000006 debugmonitor_isr
0000fda0 g     F .text	0000001a __ascii_wctomb
00006d18 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000a9d4 g     F .text	0000005a .hidden __aeabi_l2d
200197cc g     O .bss	00000008 AudioInputI2SOct::dma
000129ac g     F .text	00000078 __submore
00002594 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
5fd4c47a g       *ABS*	00000000 __rtc_localtime
00008e24 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00002c00  w    F .text	00000038 File::openNextFile(unsigned char)
00000d0c g     F .text	00000070 c_uSD::init()
0000b250 g     F .text	0000008c .hidden __aeabi_ul2f
00008ca4  w    F .text	00000006 cmp1_isr
0000b330 g     F .text	0000004c .hidden __fixunssfdi
00008ca4  w    F .text	00000006 ftm0_isr
20013964 g     O .data	00000002 mustStore
00004888 g     F .text	00000158 ExFatFile::syncDir()
00010e34 g     F .text	0000009c _malloc_trim_r
20013b84 g     O .data	00000004 string0
00008974 g     F .text	00000108 usb_serial_write
00008cb8  w    F .text	00000002 startup_late_hook
0000a098  w    F .text	00000004 usb_serial_class::available()
00000d7c g     F .text	00000108 c_uSD::close()
20013af8 g     O .data	00000001 _serialEvent_default
00005c38 g     F .text	0000000c FatFile::sync()
000034a0  w    F .text	00000050 SDClass::mkdir(char const*)
20013b6c  w    O .data	00000016 usb_string_product_name
00008e68 g     F .text	0000009c delay
0000ae64 g     F .text	0000007a .hidden __nedf2
00008ca4  w    F .text	00000006 tpm0_isr
20019e46 g     O .bss	00000002 dma_channel_allocated_mask
0001394c g     F .fini	00000000 _fini
00002be0  w    F .text	00000014 File::name()
00003248 g     F .text	00000026 TwoWire::write(unsigned char)
200197bc g     O .bss	00000008 AudioOutputPT8211::dma
00002980 g     F .text	00000020 month()
00001d28 g     F .text	0000010c c_uSD::write(short*, long)
0000733c g     F .text	00000050 SdSpiCard::readStart(unsigned long)
000040b0 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
0000a110 g     F .text	0000001c Print::printf(char const*, ...)
0000c354 g     F .text	0000004c sprintf
00008ca4  w    F .text	00000006 i2s0_rx_isr
00008ca4  w    F .text	00000006 uart4_error_isr
000052b4 g     F .text	0000001e FatFile::close()
00002ba8  w    F .text	00000010 File::position()
00003044  w    F .text	00000064 SDFile::~SDFile()
00005f60 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000fea0 g     F .text	0000000c atexit
0000780c  w    F .text	00000002 SdioCard::~SdioCard()
000007c0  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00002c70  w    F .text	00000018 File::write(unsigned char)
0000fdbc g     F .text	0000002c _write_r
0000053c g     F .text	000000a4 I2S_32::update()
20019844 g     O .bss	000004b0 SD
00007b1c g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
20018cc8 g     O .bss	00000001 I2S_32::update_responsibility
0000b0c0 g     F .text	0000016c .hidden __aeabi_frsub
0000a2d0 g     F .text	00000054 AudioStream::release(audio_block_struct*)
00008ca4  w    F .text	00000006 can0_message_isr
0000a6a8 g     F .text	0000000c nanf
20013fc8 g     O .data	00000004 _impure_ptr
00012fcc  w    O .text	00000024 vtable for Stream
00008ca4  w    F .text	00000006 can1_message_isr
00003a9c g     F .text	0000002e ExFatFile::peek()
00012afc  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20019838 g     O .bss	00000008 AudioOutputSPDIF::dma
00011844 g     F .text	0000005c _mbrtowc_r
00008ca4  w    F .text	00000006 nmi_isr
20013a00 g     O .data	0000006c Wire
00006860 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00002f84  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000a324 g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00006f5c g     F .text	00000028 FsVolume::open(char const*, int)
000077ac g     F .text	0000000c SdioCard::errorCode() const
000055f8 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000824  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
000138f8 g       .text	00000000 __preinit_array_end
000005e0 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00006fb4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
20019820 g     O .bss	00000008 AudioInputTDM::dma
00008ca4  w    F .text	00000006 sdhc_isr
00002920 g     F .text	00000020 minute()
000042a0 g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004c60 g     F .text	0000008a ExFatFile::preAllocate(unsigned long long)
00004464 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000748c g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000bcac g     F .text	0000002a __ascii_mbtowc
0000707c g     F .text	0000003e SdSpiCard::isBusy()
00011ea0 g     F .text	00000054 __ulp
000131a0 g     O .text	00000058 vtable for SdSpiCard
0000a228 g     F .text	000000a8 AudioStream::allocate()
20014a78 g     O .bss	00000200 header
0000729c  w    F .text	00000008 SdSpiCard::readCID(CID*)
000031f0  w    F .text	00000016 TwoWire::peek()
00003208  w    F .text	00000002 TwoWire::flush()
00001ac4 g     F .text	000001a4 setup
00013480 g     O .text	00000054 usb_descriptor_list
000090fc g     F .text	0000003c usb_rx
00007910 g     F .text	00000020 SdioCard::status()
00008ca4  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000afe0 g     F .text	00000040 .hidden __aeabi_d2uiz
00000e84 g     F .text	00000128 c_uSD::storeConfig(unsigned long*, int, long*, int)
00008ca4  w    F .text	00000006 uart0_error_isr
00002bb8  w    F .text	00000010 File::size()
20018d14 g     O .bss	00000014 patchCord4
00003590  w    F .text	00000062 SDClass::rmdir(char const*)
00009070 g     F .text	00000040 usb_malloc
00005614 g     F .text	00000198 FatFile::read(void*, unsigned int)
00008ca4  w    F .text	00000006 i2s0_isr
00005608 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00006f84 g     F .text	00000004 operator new(unsigned int, unsigned long*)
00007294  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
00009ffc g     F .text	00000038 DMAChannel::release()
00002c44  w    F .text	0000002c File::read()
00008a94 g     F .text	00000048 usb_serial_write_buffer_free
0000713c g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
00008ca4  w    F .text	00000006 enet_timer_isr
0000a370 g     F .text	00000068 AudioConnection::connect()
0000af00 g     F .text	00000012 .hidden __aeabi_dcmpeq
00002764 g     F .text	000000fc makeTime(tmElements_t const&)
20019830 g     O .bss	00000008 AudioInputPDM::dma
0000320c g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
000030a8  w    F .text	00000030 File::~File()
0000a100  w    F .text	0000000e _write
20014548 g       .data	00000000 _edata
00004504 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
0000780c  w    F .text	00000002 SdioCard::~SdioCard()
00008ca4  w    F .text	00000006 i2s0_tx_isr
00008ca4  w    F .text	00000006 adc1_isr
00007588 g     F .text	0000002c SdSpiCard::syncDevice()
0000516c g     F .text	00000094 FatFile::addDirCluster()
00002b44  w    F .text	0000000c File::read(void*, unsigned int)
0000a0a0  w    F .text	00000004 usb_serial_class::availableForWrite()
20013938 g     O .data	00000002 I2S_32::shift
00008ca4  w    F .text	00000006 cmp0_isr
00002b84  w    F .text	0000000c File::truncate(unsigned long long)
0000a65c g     F .text	0000004c ultoa
000033c4  w    F .text	00000002 SDClass::~SDClass()
00002940 g     F .text	00000020 second()
00001c68  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
00006db8 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
0000a5d8 g     F .text	00000004 operator new(unsigned int)
0000a034 g     F .text	00000044 EventResponder::runFromInterrupt()
20014540 g     O .data	00000004 __malloc_trim_threshold
0000a090  w    F .text	00000004 usb_serial_class::peek()
0000a3d8 g     F .text	0000007a AudioConnection::disconnect()
0000b22c g     F .text	00000024 .hidden __floatunsisf
00011d8c g     F .text	00000114 __mdiff
000077fc g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000af90 g     F .text	0000004e .hidden __aeabi_d2iz
00004498 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
20019d44 g     O .bss	00000001 usb_cdc_transmit_flush_timer
20019ee2 g     O .bss	00000002 AudioStream::cpu_cycles_total
00008ca4  w    F .text	00000006 pit_isr
00002900 g     F .text	00000020 hour()
00007c68 g     F .text	00000004 SdioCard::writeStop()
00006fa4  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012188 g     F .text	00000072 __sccl
00003754 g     F .text	00000014 ExFatFile::close()
000135d8 g     O .text	00000101 _ctype_
00008ca4  w    F .text	00000006 dac0_isr
00006f90  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
000138f8 g       .text	00000000 __init_array_start
0000b660  w    F .text	00000002 .hidden __aeabi_idiv0
00008ca4  w    F .text	00000006 can1_tx_warn_isr
0000af64 g     F .text	0000002c .hidden __unorddf2
0000342c  w    F .text	00000074 SDClass::rename(char const*, char const*)
00008ca4  w    F .text	00000006 uart0_status_isr
00008ca4  w    F .text	00000006 mcg_isr
0000a570 g     F .text	0000005a Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
00009f30 g     F .text	000000cc DMAChannel::begin(bool)
0000c5c0 g     F .text	000000dc strlen
000063bc g     F .text	0000002e FatFile::openCluster(FatFile*)
0000b700 g     F .text	00000006 __locale_ctype_ptr_l
0000aef0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000ae54 g     F .text	0000008a .hidden __gedf2
00005a4c g     F .text	00000094 FatFile::seekSet(unsigned long)
00011148 g     F .text	00000510 __gethex
20013b6c g     O .data	00000016 usb_string_product_name_default
20019810 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000fd88 g     F .text	00000018 vdprintf
00008ca4  w    F .text	00000006 dma_ch1_isr
00007ab0 g     F .text	0000006c SdioCard::sectorCount()
00006e98 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
00000678  w    F .text	0000001c c_uSD::~c_uSD()
00009138 g     F .text	0000002c usb_tx_packet_count
00005bb8 g     F .text	00000080 FatFile::openNext(FatFile*, int)
0000c3fc g     F .text	000000ce strchr
000131f8 g     O .text	00000058 vtable for SdioCard
0000a988 g     F .text	0000003a .hidden __aeabi_f2d
00008ca4  w    F .text	00000006 dma_ch5_isr
000063ec g     F .text	00000100 FatFile::getName(char*, unsigned int)
00008ca4  w    F .text	00000006 can0_rx_warn_isr
00008ca4  w    F .text	00000006 can0_tx_warn_isr
00008ca4  w    F .text	00000006 uart4_status_isr
000084ac g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
200197d4 g     O .bss	00000008 AudioInputAnalog::dma
20019edc g     O .bss	00000002 AudioStream::cpu_cycles_total_max
000085f0 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000a6c8 g     F .text	0000027a .hidden __subdf3
000138f8 g       .text	00000000 __preinit_array_start
00012ae4  w    O .text	0000000c vtable for AudioStream
00004380 g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00002cb8  w    F .text	00000028 File::whoami()
00011a58 g     F .text	0000005a __lo0bits
00004428 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00005ae0 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000a6b4 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00008dc0 g     F .text	0000000c rtc_get
00004754 g     F .text	000000d6 ExFatFile::remove()
00008ca4  w    F .text	00000006 cmp2_isr
0000b0cc g     F .text	00000160 .hidden __addsf3
0000a078 g     F .text	00000004 pendablesrvreq_isr
000035f4  w    F .text	00000034 SDClass::totalSize()
00000698  w    F .text	0000000c AudioConnection::~AudioConnection()
0000046c  w    F .text	00000004 Print::availableForWrite()
20013fcc g     O .data	0000016c __global_locale
00008ca4  w    F .text	00000006 wakeup_isr
0000804c g     F .text	00000394 SdioCard::begin(SdioConfig)
00004110 g     F .text	0000000c FsCache::invalidate()
00008ca4  w    F .text	00000006 cmp3_isr
0000259c g     F .text	000001b0 breakTime(long, tmElements_t&)
0000a12c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00005f6c g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000b72c g     F .text	00000010 free
00008ca4  w    F .text	00000006 tpm2_isr
00011900 g     F .text	00000080 __multadd
000118ec g     F .text	00000012 _Bfree
00002f0c  w    F .text	0000001a SDFile::size()
00008ca4  w    F .text	00000006 dma_ch0_isr
000030d8  w    F .text	0000005c SDFile::~SDFile()
20013b88  w    O .data	00000016 usb_string_serial_number
00008ca4  w    F .text	00000006 enet_tx_isr
00004634 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00008520 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
000077e0 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ........]...
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	]...]...]...]...
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	]...]...].......
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	....]...y...}...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	.3...3..........
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	.........3......
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	8cac <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	8f04 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	8dcc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	8dcc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	b67c <__libc_init_array>

	startup_late_hook();
     32c:	bl	8cb8 <startup_late_hook>
	main();
     330:	bl	a1ac <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x20014548
     360:	.word	0x00013954
     364:	.word	0x20013930
     368:	.word	0x20014548
     36c:	.word	0x20019f4c
     370:	.word	0x20013400
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x5fd4c47a
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x20014548
     42c:	.word	0x00000000
     430:	.word	0x00013950

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x2001454c
     460:	.word	0x00013950
     464:	.word	0x20014548
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <I2S_32::isr32()>:
  uint32_t daddr, offset;
  const int32_t *src, *end;
  int16_t *dest_left, *dest_right;
  audio_block_t *left, *right;

  daddr = (uint32_t)(dma.TCD->DADDR);
     474:	ldr	r2, [pc, #124]	; (4f4 <I2S_32::isr32()+0x80>)

  dma.clearInterrupt();
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     476:	ldr	r3, [pc, #128]	; (4f8 <I2S_32::isr32()+0x84>)
  uint32_t daddr, offset;
  const int32_t *src, *end;
  int16_t *dest_left, *dest_right;
  audio_block_t *left, *right;

  daddr = (uint32_t)(dma.TCD->DADDR);
     478:	ldr	r1, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     47a:	ldr	r0, [pc, #128]	; (4fc <I2S_32::isr32()+0x88>)
     47c:	ldr	r1, [r1, #16]

  dma.attachInterrupt(isr32); 
}

void I2S_32::isr32(void)
{
     47e:	push	{r4, r5, r6}

  daddr = (uint32_t)(dma.TCD->DADDR);

  dma.clearInterrupt();
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     480:	cmp	r1, r3
     482:	ldrb	r2, [r2, #4]
     484:	strb	r2, [r0, #0]
     486:	bcs.n	49a <I2S_32::isr32()+0x26>
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
    if (I2S_32::update_responsibility) AudioStream::update_all();
     488:	ldr	r2, [pc, #116]	; (500 <I2S_32::isr32()+0x8c>)
     48a:	ldrb	r2, [r2, #0]
     48c:	cbz	r2, 4ec <I2S_32::isr32()+0x78>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     48e:	ldr	r2, [pc, #116]	; (504 <I2S_32::isr32()+0x90>)
     490:	movs	r1, #1
     492:	str	r1, [r2, #0]
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     494:	add.w	r6, r3, #512	; 0x200
     498:	b.n	4a0 <I2S_32::isr32()+0x2c>
    if (I2S_32::update_responsibility) AudioStream::update_all();
  } else {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
    src = (int32_t *)&i2s_rx_buffer_32[0];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
     49a:	mov	r6, r3
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
    if (I2S_32::update_responsibility) AudioStream::update_all();
  } else {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
    src = (int32_t *)&i2s_rx_buffer_32[0];
     49c:	sub.w	r3, r3, #512	; 0x200
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
  }
  
   // extract 16 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES" samples
  left = I2S_32::block_left;
     4a0:	ldr	r1, [pc, #100]	; (508 <I2S_32::isr32()+0x94>)
  right = I2S_32::block_right;
     4a2:	ldr	r2, [pc, #104]	; (50c <I2S_32::isr32()+0x98>)
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
  }
  
   // extract 16 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES" samples
  left = I2S_32::block_left;
     4a4:	ldr	r1, [r1, #0]
  right = I2S_32::block_right;
     4a6:	ldr	r0, [r2, #0]
  if (left != NULL && right != NULL) {
     4a8:	cbz	r1, 4e8 <I2S_32::isr32()+0x74>
     4aa:	cbz	r0, 4e8 <I2S_32::isr32()+0x74>
    offset = I2S_32::block_offset;
     4ac:	ldr	r5, [pc, #96]	; (510 <I2S_32::isr32()+0x9c>)
     4ae:	ldrh	r4, [r5, #0]
    if (offset <= AUDIO_BLOCK_SAMPLES/2) {
     4b0:	cmp	r4, #64	; 0x40
     4b2:	bhi.n	4e8 <I2S_32::isr32()+0x74>
      dest_left = &(left->data[offset]);
     4b4:	lsls	r2, r4, #1
     4b6:	add	r1, r2
      dest_right = &(right->data[offset]);
     4b8:	add	r0, r2
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
     4ba:	add.w	r2, r4, #64	; 0x40
     4be:	ldr	r4, [pc, #84]	; (514 <I2S_32::isr32()+0xa0>)
     4c0:	strh	r2, [r5, #0]
     4c2:	adds	r1, #2
     4c4:	adds	r0, #2
      do {
        *dest_left++ = (*src++)>>I2S_32::shift;
     4c6:	ldr.w	r2, [r3], #8
     4ca:	ldrsh.w	r5, [r4]
     4ce:	asrs	r2, r5
     4d0:	strh.w	r2, [r1, #2]!
        *dest_right++ = (*src++)>>I2S_32::shift;
     4d4:	ldr.w	r2, [r3, #-4]
     4d8:	ldrsh.w	r5, [r4]
      } while (src < end);
     4dc:	cmp	r6, r3
      dest_left = &(left->data[offset]);
      dest_right = &(right->data[offset]);
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
      do {
        *dest_left++ = (*src++)>>I2S_32::shift;
        *dest_right++ = (*src++)>>I2S_32::shift;
     4de:	asr.w	r2, r2, r5
     4e2:	strh.w	r2, [r0, #2]!
      } while (src < end);
     4e6:	bhi.n	4c6 <I2S_32::isr32()+0x52>
    }
  }
}
     4e8:	pop	{r4, r5, r6}
     4ea:	bx	lr
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     4ec:	add.w	r6, r3, #512	; 0x200
     4f0:	b.n	4a0 <I2S_32::isr32()+0x2c>
     4f2:	nop
     4f4:	.word	0x20018f4c
     4f8:	.word	0x1fff0400
     4fc:	.word	0x4000801f
     500:	.word	0x20018cc8
     504:	.word	0xe000e208
     508:	.word	0x20018f48
     50c:	.word	0x20018ca4
     510:	.word	0x2001977c
     514:	.word	0x20013938

00000518 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     518:	mov.w	r0, #4294967295
     51c:	bx	lr
     51e:	nop

00000520 <llwuISR()>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     520:	ldr	r2, [pc, #16]	; (534 <llwuISR()+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     522:	ldr	r1, [pc, #20]	; (538 <llwuISR()+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     524:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     526:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     528:	orr.w	r3, r3, #32
     52c:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     52e:	str	r0, [r1, #0]
     530:	bx	lr
     532:	nop
     534:	.word	0x4007c00d
     538:	.word	0x4003d01c

0000053c <I2S_32::update()>:
    }
  }
}

void I2S_32::update(void)
{
     53c:	push	{r3, r4, r5, r6, r7, lr}
     53e:	mov	r6, r0
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
     540:	bl	a228 <AudioStream::allocate()>
  if (new_left != NULL) {
     544:	mov	r4, r0
     546:	cbz	r0, 584 <I2S_32::update()+0x48>
    new_right = allocate();
     548:	bl	a228 <AudioStream::allocate()>
    if (new_right == NULL) {
     54c:	mov	r5, r0
     54e:	cmp	r0, #0
     550:	beq.n	5c8 <I2S_32::update()+0x8c>
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     552:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     554:	ldr	r3, [pc, #124]	; (5d4 <I2S_32::update()+0x98>)
     556:	ldrh	r2, [r3, #0]
     558:	cmp	r2, #127	; 0x7f
     55a:	bhi.n	590 <I2S_32::update()+0x54>
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
  } else if (new_left != NULL) {
     55c:	cmp	r4, #0
     55e:	beq.n	5c4 <I2S_32::update()+0x88>
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
     560:	ldr	r1, [pc, #116]	; (5d8 <I2S_32::update()+0x9c>)
     562:	ldr	r2, [r1, #0]
     564:	cbz	r2, 578 <I2S_32::update()+0x3c>
      block_right = new_right;
      block_offset = 0;
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
     566:	cpsie	i
      release(new_left);
     568:	mov	r0, r4
     56a:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
      release(new_right);
     56e:	mov	r0, r5
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     570:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
      release(new_left);
      release(new_right);
     574:	b.w	a2d0 <AudioStream::release(audio_block_struct*)>
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
      block_right = new_right;
     578:	ldr	r0, [pc, #96]	; (5dc <I2S_32::update()+0xa0>)
  } else if (new_left != NULL) {
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
     57a:	str	r4, [r1, #0]
      block_right = new_right;
      block_offset = 0;
     57c:	strh	r2, [r3, #0]
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
      block_right = new_right;
     57e:	str	r5, [r0, #0]
      block_offset = 0;
      __enable_irq();
     580:	cpsie	i
     582:	pop	{r3, r4, r5, r6, r7, pc}
  }
}

void I2S_32::update(void)
{
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     584:	mov	r5, r0
    if (new_right == NULL) {
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     586:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     588:	ldr	r3, [pc, #72]	; (5d4 <I2S_32::update()+0x98>)
     58a:	ldrh	r2, [r3, #0]
     58c:	cmp	r2, #127	; 0x7f
     58e:	bls.n	55c <I2S_32::update()+0x20>
      { block_left->data[64]=1<<10;
        block_right->data[32]=1<<9;
        count=0;
      }
#endif
    out_left = block_left;
     590:	ldr	r2, [pc, #68]	; (5d8 <I2S_32::update()+0x9c>)
    block_left = new_left;
    out_right = block_right;
     592:	ldr	r1, [pc, #72]	; (5dc <I2S_32::update()+0xa0>)
      { block_left->data[64]=1<<10;
        block_right->data[32]=1<<9;
        count=0;
      }
#endif
    out_left = block_left;
     594:	ldr	r7, [r2, #0]
    block_left = new_left;
     596:	str	r4, [r2, #0]
    out_right = block_right;
    block_right = new_right;
    block_offset = 0;
     598:	movs	r2, #0
        count=0;
      }
#endif
    out_left = block_left;
    block_left = new_left;
    out_right = block_right;
     59a:	ldr	r4, [r1, #0]
    block_right = new_right;
    block_offset = 0;
     59c:	strh	r2, [r3, #0]
      }
#endif
    out_left = block_left;
    block_left = new_left;
    out_right = block_right;
    block_right = new_right;
     59e:	str	r5, [r1, #0]
    block_offset = 0;
    __enable_irq();
     5a0:	cpsie	i
    
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
     5a2:	mov	r1, r7
     5a4:	mov	r0, r6
     5a6:	bl	a324 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     5aa:	mov	r0, r7
     5ac:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     5b0:	mov	r0, r6
     5b2:	mov	r1, r4
     5b4:	movs	r2, #1
     5b6:	bl	a324 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     5ba:	mov	r0, r4
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     5bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
     5c0:	b.w	a2d0 <AudioStream::release(audio_block_struct*)>
    }
  } else {
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
     5c4:	cpsie	i
     5c6:	pop	{r3, r4, r5, r6, r7, pc}
  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
  if (new_left != NULL) {
    new_right = allocate();
    if (new_right == NULL) {
      release(new_left);
     5c8:	mov	r0, r4
     5ca:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
      new_left = NULL;
     5ce:	mov	r4, r5
     5d0:	b.n	552 <I2S_32::update()+0x16>
     5d2:	nop
     5d4:	.word	0x2001977c
     5d8:	.word	0x20018f48
     5dc:	.word	0x20018ca4

000005e0 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

#include <TimeLib.h>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     5e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5e4:	mov	r7, r1
     5e6:	mov	r6, r2
     5e8:	mov	r8, r0
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     5ea:	bl	29a0 <year()>
     5ee:	mov	r4, r0
     5f0:	bl	2980 <month()>
     5f4:	mov	r5, r0
     5f6:	bl	2960 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     5fa:	subw	r3, r4, #1980	; 0x7bc
     5fe:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     600:	cmp	r3, #127	; 0x7f
     602:	bhi.n	60a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     604:	uxtb	r2, r5
     606:	cmp	r2, #12
     608:	bls.n	662 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     60a:	movs	r3, #0
     60c:	strh.w	r3, [r8]

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(hour(), minute(), second());
     610:	bl	2900 <hour()>
     614:	mov	r4, r0
     616:	bl	2920 <minute()>
     61a:	mov	r5, r0
     61c:	bl	2940 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     620:	uxtb	r3, r4
     622:	cmp	r3, #23
     624:	bhi.n	62c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     626:	uxtb	r3, r5
     628:	cmp	r3, #59	; 0x3b
     62a:	bls.n	644 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     62c:	movs	r3, #0
     62e:	strh	r3, [r7, #0]

  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
     630:	bl	2940 <second()>
     634:	tst.w	r0, #1
     638:	ite	ne
     63a:	movne	r3, #100	; 0x64
     63c:	moveq	r3, #0
     63e:	strb	r3, [r6, #0]
     640:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     644:	uxtb	r3, r0
     646:	cmp	r3, #59	; 0x3b
     648:	bhi.n	62c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     64a:	lsls	r4, r4, #11
     64c:	lsls	r3, r5, #5
     64e:	and.w	r4, r4, #522240	; 0x7f800
     652:	and.w	r3, r3, #8160	; 0x1fe0
     656:	orrs	r3, r4
     658:	ubfx	r0, r0, #1, #7
     65c:	orrs	r3, r0
     65e:	uxth	r3, r3
     660:	b.n	62e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     662:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     664:	cmp	r0, #31
     666:	bhi.n	60a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     668:	lsls	r5, r5, #5
     66a:	and.w	r5, r5, #8160	; 0x1fe0
     66e:	orrs	r0, r5
     670:	orr.w	r3, r0, r3, lsl #9
     674:	uxth	r3, r3
     676:	b.n	60c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000678 <c_uSD::~c_uSD()>:
int16_t diskBuffer[BUFFERSIZE];
int16_t *outptr = diskBuffer;

char header[512];

class c_uSD
     678:	push	{r4, lr}
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     67a:	ldr	r3, [pc, #20]	; (690 <c_uSD::~c_uSD()+0x18>)
     67c:	str.w	r3, [r0, #1196]	; 0x4ac
     680:	mov	r4, r0
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     682:	addw	r0, r0, #1212	; 0x4bc
     686:	bl	6d90 <FsBaseFile::close()>
     68a:	mov	r0, r4
     68c:	pop	{r4, pc}
     68e:	nop
     690:	.word	0x00012b04

00000694 <getTeensy3Time()>:
#ifdef __cplusplus
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     694:	b.w	8dc0 <rtc_get>

00000698 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     698:	push	{r4, lr}
     69a:	mov	r4, r0
		disconnect();
     69c:	bl	a3d8 <AudioConnection::disconnect()>
	}
     6a0:	mov	r0, r4
     6a2:	pop	{r4, pc}

000006a4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     6a4:	push	{r4, lr}
     6a6:	mov	r4, r0
		release();
     6a8:	bl	9ffc <DMAChannel::release()>
	}
     6ac:	mov	r0, r4
     6ae:	pop	{r4, pc}

000006b0 <mRecordQueue<250>::update()>:
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     6b0:	push	{r4, lr}
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     6b2:	movs	r1, #0
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     6b4:	mov	r4, r0
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     6b6:	bl	a358 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     6ba:	cbz	r0, 6e8 <mRecordQueue<250>::update()+0x38>
	if (!enabled) {
     6bc:	ldrh.w	r3, [r4, #1040]	; 0x410
     6c0:	uxth	r3, r3
     6c2:	cbz	r3, 6ea <mRecordQueue<250>::update()+0x3a>
		release(block);
		return;
	}
	h = head + 1;
     6c4:	ldrh.w	r3, [r4, #1036]	; 0x40c
	if (h >= mq) h = 0;
	if (h == tail) {
     6c8:	ldrh.w	r2, [r4, #1038]	; 0x40e
	if (!block) return;
	if (!enabled) {
		release(block);
		return;
	}
	h = head + 1;
     6cc:	adds	r3, #1
     6ce:	uxth	r3, r3
	if (h >= mq) h = 0;
     6d0:	cmp	r3, #250	; 0xfa
     6d2:	it	cs
     6d4:	movcs	r3, #0
	if (h == tail) {
     6d6:	uxth	r2, r2
     6d8:	cmp	r3, r2
     6da:	beq.n	6f2 <mRecordQueue<250>::update()+0x42>
		release(block); // drop incomming data
    dropCount++; // flag for main to know
	} else {
		queue[h] = block; // store incomming data
     6dc:	add.w	r2, r3, #8
     6e0:	str.w	r0, [r4, r2, lsl #2]
		head = h;
     6e4:	strh.w	r3, [r4, #1036]	; 0x40c
     6e8:	pop	{r4, pc}
	}
}
     6ea:	ldmia.w	sp!, {r4, lr}
	uint16_t h;

	block = receiveReadOnly();
	if (!block) return;
	if (!enabled) {
		release(block);
     6ee:	b.w	a2d0 <AudioStream::release(audio_block_struct*)>
		return;
	}
	h = head + 1;
	if (h >= mq) h = 0;
	if (h == tail) {
		release(block); // drop incomming data
     6f2:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
    dropCount++; // flag for main to know
     6f6:	ldr	r3, [r4, #24]
     6f8:	adds	r3, #1
     6fa:	str	r3, [r4, #24]
     6fc:	pop	{r4, pc}
			ch3_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch3_offset = 0;
			release(block_ch3_1st);
			block_ch3_1st = block_ch3_2nd;
			block_ch3_2nd = NULL;
     6fe:	nop

00000700 <getTime(char*) [clone .constprop.39]>:
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
    return text;  
}

static char * getTime(char *text)
     700:	push	{r4, r5, r6, lr}
     702:	sub	sp, #8
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
     704:	bl	2900 <hour()>
     708:	mov	r5, r0
     70a:	bl	2920 <minute()>
     70e:	mov	r6, r0
     710:	bl	2940 <second()>
     714:	ldr	r4, [pc, #20]	; (72c <getTime(char*) [clone .constprop.39]+0x2c>)
     716:	str	r0, [sp, #0]
     718:	mov	r3, r6
     71a:	mov	r2, r5
     71c:	mov	r0, r4
     71e:	ldr	r1, [pc, #16]	; (730 <getTime(char*) [clone .constprop.39]+0x30>)
     720:	bl	c354 <sprintf>
    return text;
}
     724:	mov	r0, r4
     726:	add	sp, #8
     728:	pop	{r4, r5, r6, pc}
     72a:	nop
     72c:	.word	0x20018ca8
     730:	.word	0x00012b50

00000734 <getDate(char*) [clone .constprop.40]>:
*/


#include <TimeLib.h>

static char * getDate(char *text)
     734:	push	{r4, r5, r6, lr}
     736:	sub	sp, #8
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
     738:	bl	29a0 <year()>
     73c:	mov	r5, r0
     73e:	bl	2980 <month()>
     742:	mov	r6, r0
     744:	bl	2960 <day()>
     748:	ldr	r4, [pc, #20]	; (760 <getDate(char*) [clone .constprop.40]+0x2c>)
     74a:	str	r0, [sp, #0]
     74c:	mov	r3, r6
     74e:	mov	r2, r5
     750:	mov	r0, r4
     752:	ldr	r1, [pc, #16]	; (764 <getDate(char*) [clone .constprop.40]+0x30>)
     754:	bl	c354 <sprintf>
    return text;  
}
     758:	mov	r0, r4
     75a:	add	sp, #8
     75c:	pop	{r4, r5, r6, pc}
     75e:	nop
     760:	.word	0x20018ca8
     764:	.word	0x00012b60

00000768 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     768:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     76a:	cbz	r2, 786 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     76c:	ldrb	r3, [r2, #0]
     76e:	and.w	r3, r3, #8
     772:	and.w	r0, r3, #255	; 0xff
     776:	cbz	r3, 7ba <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     778:	ldr	r3, [r2, #28]
     77a:	ldr	r0, [r2, #20]
     77c:	subs	r0, r3, r0
     77e:	it	mi
     780:	mvnmi.w	r0, #2147483648	; 0x80000000
     784:	bx	lr
     786:	ldr	r1, [r0, #76]	; 0x4c
     788:	cbz	r1, 7bc <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     78a:	ldrb.w	r3, [r1, #49]	; 0x31
     78e:	and.w	r3, r3, #8
     792:	and.w	r0, r3, #255	; 0xff
     796:	cbz	r3, 7ba <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     798:	ldrd	r2, r3, [r1, #16]
     79c:	ldrd	r0, r1, [r1]
     7a0:	subs	r0, r2, r0
     7a2:	push	{r4, r5}
     7a4:	sbc.w	r1, r3, r1
     7a8:	movs	r5, #0
     7aa:	mvn.w	r4, #2147483648	; 0x80000000
     7ae:	cmp	r5, r1
     7b0:	it	eq
     7b2:	cmpeq	r4, r0
     7b4:	bcs.n	7b8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     7b6:	mov	r0, r4
    return BaseFile::available();
  }
     7b8:	pop	{r4, r5}
     7ba:	bx	lr
     7bc:	mov	r0, r1
     7be:	bx	lr

000007c0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7c0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     7c2:	cbz	r3, 7ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     7c4:	mov	r0, r3
     7c6:	b.w	57ac <FatFile::peek()>
     7ca:	ldr	r0, [r0, #76]	; 0x4c
     7cc:	cbz	r0, 7d2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     7ce:	b.w	3a9c <ExFatFile::peek()>
    return BaseFile::peek();
  }
     7d2:	mov.w	r0, #4294967295
     7d6:	bx	lr

000007d8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     7d8:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     7da:	cbz	r3, 7e2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     7dc:	mov	r0, r3
     7de:	b.w	5c38 <FatFile::sync()>
     7e2:	ldr	r0, [r0, #76]	; 0x4c
     7e4:	cbz	r0, 7ea <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     7e6:	b.w	49e0 <ExFatFile::sync()>
     7ea:	bx	lr

000007ec <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     7ec:	push	{lr}
     7ee:	ldr	r3, [r0, #72]	; 0x48
     7f0:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     7f2:	cbz	r3, 80e <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     7f4:	mov	r0, r3
     7f6:	movs	r2, #1
     7f8:	add.w	r1, sp, #7
     7fc:	bl	5614 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     800:	cmp	r0, #1
     802:	bne.n	81e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     804:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     808:	add	sp, #12
     80a:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     80e:	ldr	r0, [r0, #76]	; 0x4c
     810:	cbz	r0, 81e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     812:	movs	r2, #1
     814:	add.w	r1, sp, #7
     818:	bl	38fc <ExFatFile::read(void*, unsigned int)>
     81c:	b.n	800 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     81e:	mov.w	r0, #4294967295
     822:	b.n	808 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000824 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     824:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     826:	cbz	r3, 82e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     828:	mov	r0, r3
     82a:	b.w	5cbc <FatFile::write(void const*, unsigned int)>
     82e:	ldr	r0, [r0, #76]	; 0x4c
     830:	cbz	r0, 836 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     832:	b.w	4e7c <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     836:	bx	lr

00000838 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     838:	push	{lr}
     83a:	ldr	r3, [r0, #72]	; 0x48
     83c:	sub	sp, #12
     83e:	strb.w	r1, [sp, #7]
     842:	cbz	r3, 856 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     844:	mov	r0, r3
     846:	movs	r2, #1
     848:	add.w	r1, sp, #7
     84c:	bl	5cbc <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     850:	add	sp, #12
     852:	ldr.w	pc, [sp], #4
     856:	ldr	r0, [r0, #76]	; 0x4c
     858:	cmp	r0, #0
     85a:	beq.n	850 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     85c:	movs	r2, #1
     85e:	add.w	r1, sp, #7
     862:	bl	4e7c <ExFatFile::write(void const*, unsigned int)>
     866:	add	sp, #12
     868:	ldr.w	pc, [sp], #4

0000086c <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     86c:	push	{r4, r5, r6, lr}
     86e:	mov	r4, r0
     870:	mov	r0, r1
     872:	mov	r5, r1
     874:	bl	c5c0 <strlen>
     878:	ldr	r3, [r4, #0]
     87a:	mov	r2, r0
     87c:	mov	r1, r5
     87e:	mov	r0, r4
     880:	ldr	r3, [r3, #4]
     882:	ldmia.w	sp!, {r4, r5, r6, lr}
     886:	bx	r3

00000888 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     888:	push	{r3, r4, r5, lr}
     88a:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     88c:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     88e:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     890:	bl	c5c0 <strlen>
     894:	ldr	r3, [r4, #0]
     896:	mov	r2, r0
     898:	mov	r1, r5
     89a:	ldr	r3, [r3, #4]
     89c:	mov	r0, r4
     89e:	blx	r3
     8a0:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     8a2:	mov	r0, r4
     8a4:	bl	a0e0 <Print::println()>
     8a8:	add	r0, r5
     8aa:	pop	{r3, r4, r5, pc}

000008ac <I2S_32::config_i2s()>:
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     8ac:	ldr	r3, [pc, #160]	; (950 <I2S_32::config_i2s()+0xa4>)
  SIM_SCGC7 |= SIM_SCGC7_DMA;
     8ae:	ldr	r1, [pc, #164]	; (954 <I2S_32::config_i2s()+0xa8>)
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     8b0:	ldr	r2, [r3, #0]
  SIM_SCGC7 |= SIM_SCGC7_DMA;
  SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

  // if either transmitter or receiver is enabled, do nothing
  if (I2S0_TCSR & I2S_TCSR_TE) return;
     8b2:	ldr	r0, [pc, #164]	; (958 <I2S_32::config_i2s()+0xac>)
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     8b4:	orr.w	r2, r2, #32768	; 0x8000
     8b8:	str	r2, [r3, #0]
  SIM_SCGC7 |= SIM_SCGC7_DMA;
     8ba:	ldr	r2, [r1, #0]
     8bc:	orr.w	r2, r2, #2
     8c0:	str	r2, [r1, #0]
  SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     8c2:	ldr	r2, [r3, #0]
     8c4:	orr.w	r2, r2, #2
     8c8:	str	r2, [r3, #0]

  // if either transmitter or receiver is enabled, do nothing
  if (I2S0_TCSR & I2S_TCSR_TE) return;
     8ca:	ldr	r3, [r0, #0]
     8cc:	cmp	r3, #0
     8ce:	blt.n	94e <I2S_32::config_i2s()+0xa2>
  if (I2S0_RCSR & I2S_RCSR_RE) return;
     8d0:	ldr	r3, [pc, #136]	; (95c <I2S_32::config_i2s()+0xb0>)
     8d2:	ldr	r3, [r3, #0]
     8d4:	cmp	r3, #0
     8d6:	blt.n	94e <I2S_32::config_i2s()+0xa2>

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
     8d8:	ldr	r2, [pc, #132]	; (960 <I2S_32::config_i2s()+0xb4>)
     8da:	mov.w	r3, #1124073472	; 0x43000000
     8de:	str	r3, [r2, #0]
  while (I2S0_MCR & I2S_MCR_DUF) ;
     8e0:	ldr	r3, [r2, #0]
     8e2:	cmp	r3, #0
     8e4:	blt.n	8e0 <I2S_32::config_i2s()+0x34>
  #define MCLK_SRC  0  // system clock
#endif
#endif

void I2S_32::config_i2s(void)
{
     8e6:	push	{r4, r5, r6, r7, lr}
  if (I2S0_RCSR & I2S_RCSR_RE) return;

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
  while (I2S0_MCR & I2S_MCR_DUF) ;
  I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
     8e8:	ldr	r4, [pc, #120]	; (964 <I2S_32::config_i2s()+0xb8>)

  // configure transmitter
  I2S0_TMR = 0;
     8ea:	ldr	r0, [pc, #124]	; (968 <I2S_32::config_i2s()+0xbc>)
  I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     8ec:	ldr.w	lr, [pc, #168]	; 998 <I2S_32::config_i2s()+0xec>
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
     8f0:	ldr	r1, [pc, #120]	; (96c <I2S_32::config_i2s()+0xc0>)
  I2S0_TCR3 = I2S_TCR3_TCE;
     8f2:	ldr	r3, [pc, #124]	; (970 <I2S_32::config_i2s()+0xc4>)
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
     8f4:	ldr	r2, [pc, #124]	; (974 <I2S_32::config_i2s()+0xc8>)
  I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
     8f6:	ldr	r7, [pc, #128]	; (978 <I2S_32::config_i2s()+0xcc>)

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
     8f8:	ldr	r6, [pc, #128]	; (97c <I2S_32::config_i2s()+0xd0>)
  I2S0_RCR1 = I2S_RCR1_RFW(1);
     8fa:	ldr	r5, [pc, #132]	; (980 <I2S_32::config_i2s()+0xd4>)
  if (I2S0_RCSR & I2S_RCSR_RE) return;

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
  while (I2S0_MCR & I2S_MCR_DUF) ;
  I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
     8fc:	movw	ip, #4112	; 0x1010
     900:	str.w	ip, [r4]

  // configure transmitter
  I2S0_TMR = 0;
     904:	movs	r4, #0
     906:	str	r4, [r0, #0]
  I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     908:	movs	r0, #1
     90a:	str.w	r0, [lr]
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
     90e:	ldr.w	lr, [pc, #140]	; 99c <I2S_32::config_i2s()+0xf0>
     912:	str.w	lr, [r1]
  I2S0_TCR3 = I2S_TCR3_TCE;
     916:	mov.w	r1, #65536	; 0x10000
     91a:	str	r1, [r3, #0]
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
     91c:	ldr	r3, [pc, #100]	; (984 <I2S_32::config_i2s()+0xd8>)
     91e:	str	r3, [r2, #0]

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
     920:	ldr.w	lr, [pc, #124]	; 9a0 <I2S_32::config_i2s()+0xf4>
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
  I2S0_TCR3 = I2S_TCR3_TCE;
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
  I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
     924:	ldr	r2, [pc, #96]	; (988 <I2S_32::config_i2s()+0xdc>)
     926:	str	r2, [r7, #0]

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
     928:	str	r4, [r6, #0]
  I2S0_RCR1 = I2S_RCR1_RFW(1);
     92a:	str	r0, [r5, #0]
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
     92c:	add.w	r0, r0, #1191182336	; 0x47000000
     930:	str.w	r0, [lr]
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     934:	ldr	r4, [pc, #84]	; (98c <I2S_32::config_i2s()+0xe0>)
  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
     936:	str	r1, [r7, #120]	; 0x78
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
  CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
     938:	ldr	r0, [pc, #84]	; (990 <I2S_32::config_i2s()+0xe4>)
  CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     93a:	ldr	r1, [pc, #88]	; (994 <I2S_32::config_i2s()+0xe8>)
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     93c:	str.w	r3, [r6, #-80]
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     940:	mov.w	r3, #1536	; 0x600
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
     944:	str	r2, [r5, #16]

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     946:	str	r3, [r4, #0]
  CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
     948:	str	r3, [r0, #0]
  CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     94a:	str	r3, [r1, #0]
     94c:	pop	{r4, r5, r6, r7, pc}
     94e:	bx	lr
     950:	.word	0x4004803c
     954:	.word	0x40048040
     958:	.word	0x4002f000
     95c:	.word	0x4002f080
     960:	.word	0x4002f100
     964:	.word	0x4002f104
     968:	.word	0x4002f060
     96c:	.word	0x4002f008
     970:	.word	0x4002f00c
     974:	.word	0x4002f010
     978:	.word	0x4002f014
     97c:	.word	0x4002f0e0
     980:	.word	0x4002f084
     984:	.word	0x00011f1b
     988:	.word	0x1f1f1f00
     98c:	.word	0x4004b008
     990:	.word	0x4004b00c
     994:	.word	0x4004b018
     998:	.word	0x4002f004
     99c:	.word	0x07000001
     9a0:	.word	0x4002f088

000009a4 <I2S_32::begin()>:
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);

void I2S_32::begin(void)
{ 
     9a4:	push	{r3, r4, r5, r6, r7, lr}

  dma.begin(true); // Allocate the DMA channel first
     9a6:	ldr	r4, [pc, #164]	; (a4c <I2S_32::begin()+0xa8>)
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     9a8:	ldr	r6, [pc, #164]	; (a50 <I2S_32::begin()+0xac>)
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);

void I2S_32::begin(void)
{ 
     9aa:	mov	r5, r0

  dma.begin(true); // Allocate the DMA channel first
     9ac:	movs	r1, #1
     9ae:	mov	r0, r4
     9b0:	bl	9f30 <DMAChannel::begin(bool)>

  config_i2s();
     9b4:	mov	r0, r5
     9b6:	bl	8ac <I2S_32::config_i2s()>

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     9ba:	ldr	r3, [pc, #152]	; (a54 <I2S_32::begin()+0xb0>)
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     9bc:	ldr	r2, [pc, #152]	; (a58 <I2S_32::begin()+0xb4>)
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
     9be:	ldr	r0, [pc, #156]	; (a5c <I2S_32::begin()+0xb8>)

  dma.begin(true); // Allocate the DMA channel first

  config_i2s();

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     9c0:	mov.w	r1, #1024	; 0x400
     9c4:	str	r1, [r3, #0]
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     9c6:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     9c8:	movs	r1, #0

  config_i2s();

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     9ca:	str	r2, [r3, #0]
  dma.TCD->SOFF = 0;
     9cc:	strh	r1, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
     9ce:	ldrb	r2, [r4, #4]
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
     9d0:	str	r0, [r3, #16]
     9d2:	add.w	r2, r2, #1073741824	; 0x40000000
     9d6:	add.w	r2, r2, #135168	; 0x21000

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     9da:	movw	r0, #514	; 0x202
     9de:	strh	r0, [r3, #6]
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     9e0:	str	r6, [r3, #24]
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     9e2:	mov.w	r5, #256	; 0x100
  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
     9e6:	movs	r0, #4
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     9e8:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
     9ea:	movs	r6, #140	; 0x8c
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     9ec:	strh	r5, [r3, #22]
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
     9ee:	str	r1, [r3, #12]
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     9f0:	strh	r5, [r3, #30]
  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
     9f2:	str	r0, [r3, #8]
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     9f4:	strh	r7, [r3, #28]
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
     9f6:	strh	r0, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
     9f8:	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
     9fa:	strb	r6, [r2, #0]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
     9fc:	bl	a454 <AudioStream::update_setup()>
     a00:	ldr	r1, [pc, #92]	; (a60 <I2S_32::begin()+0xbc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     a02:	ldr	r3, [pc, #96]	; (a64 <I2S_32::begin()+0xc0>)
     a04:	ldrb	r2, [r4, #4]
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     a06:	ldr	r7, [pc, #96]	; (a68 <I2S_32::begin()+0xc4>)
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
     a08:	strb	r0, [r1, #0]
     a0a:	strb	r2, [r3, #0]
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     a0c:	ldr	r1, [r7, #0]
     a0e:	ldrb	r2, [r4, #4]
  I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
     a10:	ldr	r4, [pc, #88]	; (a6c <I2S_32::begin()+0xc8>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     a12:	ldr	r5, [pc, #92]	; (a70 <I2S_32::begin()+0xcc>)
     a14:	ldr	r6, [pc, #92]	; (a74 <I2S_32::begin()+0xd0>)

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     a16:	orr.w	r1, r1, #2449473536	; 0x92000000
     a1a:	orr.w	r1, r1, #1
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     a1e:	asrs	r3, r2, #5
     a20:	str	r1, [r7, #0]
     a22:	lsls	r3, r3, #2
  I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
     a24:	ldr	r0, [r4, #0]
     a26:	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     a2a:	add.w	r7, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     a2e:	add.w	r3, r3, #57600	; 0xe100
     a32:	and.w	r2, r2, #31
     a36:	movs	r1, #1
     a38:	orr.w	r0, r0, #2415919104	; 0x90000000
     a3c:	lsl.w	r2, r1, r2
     a40:	str	r0, [r4, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     a42:	str.w	r6, [r5, r7, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     a46:	str	r2, [r3, #0]
     a48:	pop	{r3, r4, r5, r6, r7, pc}
     a4a:	nop
     a4c:	.word	0x20018f4c
     a50:	.word	0xfffffc00
     a54:	.word	0x4004b014
     a58:	.word	0x4002f0a0
     a5c:	.word	0x1fff0200
     a60:	.word	0x20018cc8
     a64:	.word	0x4000801b
     a68:	.word	0x4002f080
     a6c:	.word	0x4002f000
     a70:	.word	0x20013400
     a74:	.word	0x00000475

00000a78 <I2S_dividers(unsigned long*, unsigned long, unsigned long)>:

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     a78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a7c:	mov	r9, r0
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     a7e:	ldr	r0, [r0, #8]

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     a80:	vpush	{d8-d9}
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     a84:	adds	r0, #1

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     a86:	vmov	s17, r1
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     a8a:	movs	r1, #0

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     a8c:	vmov	s16, r2
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     a90:	bl	b260 <__aeabi_l2f>
     a94:	vldr	s15, [pc, #140]	; b24 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xac>
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     a98:	vldr	s18, [pc, #140]	; b28 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xb0>
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     a9c:	vmov	s14, r0
     aa0:	vdiv.f32	s13, s15, s14
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
     aa4:	movs	r0, #1
// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
     aa6:	mov	r8, r0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     aa8:	movs	r4, #1
     aaa:	movs	r5, #0
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     aac:	movw	r6, #257	; 0x101
     ab0:	movs	r7, #0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     ab2:	vcvt.f32.u32	s15, s17
     ab6:	vcvt.f32.u32	s16, s16
    float mn=1.0; 
     aba:	vmov.f32	s14, #112	; 0x3f800000  1.0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     abe:	vmul.f32	s15, s16, s15
     ac2:	vdiv.f32	s17, s13, s15
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
     ac6:	vmov	s15, r4
     aca:	vcvt.f32.s32	s15, s15
     ace:	vmul.f32	s15, s15, s17
     ad2:	vcvt.s32.f32	s16, s15
     ad6:	vcvt.f32.s32	s16, s16
     ada:	vsub.f32	s16, s15, s16
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     ade:	vcmpe.f32	s16, s14
     ae2:	vmrs	APSR_nzcv, fpscr
     ae6:	bpl.n	b00 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     ae8:	vcmpe.f32	s15, s18
     aec:	vmrs	APSR_nzcv, fpscr
     af0:	bpl.n	b00 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     af2:	vmov	r0, s15
     af6:	bl	b30c <__aeabi_f2lz>
     afa:	mov	r8, r4
     afc:	vmov.f32	s14, s16
     b00:	adds	r4, #1
     b02:	adc.w	r5, r5, #0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     b06:	cmp	r5, r7
     b08:	it	eq
     b0a:	cmpeq	r4, r6
     b0c:	bne.n	ac6 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x4e>
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
    iscl[1] = (int) (i2-1);
    iscl[2] = (int) (i3-1);
}
     b0e:	vpop	{d8-d9}
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     b12:	add.w	r3, r8, #4294967295
    iscl[1] = (int) (i2-1);
     b16:	subs	r0, #1
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     b18:	str.w	r3, [r9]
    iscl[1] = (int) (i2-1);
     b1c:	str.w	r0, [r9, #4]
    iscl[2] = (int) (i3-1);
}
     b20:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     b24:	.word	0x4c371b00
     b28:	.word	0x45800000

00000b2c <I2S_modification(unsigned long, unsigned short, int)>:
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     b2c:	push	{r4, r5, r6, r7, lr}

  if(nch==8)
     b2e:	cmp	r2, #8
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     b30:	sub	sp, #44	; 0x2c

  if(nch==8)
    iscl[2]=0;
     b32:	ite	eq
     b34:	moveq	r3, #0
  else
    iscl[2]=1;
     b36:	movne	r3, #1
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     b38:	mov	r6, r1
     b3a:	mov	r4, r2
     b3c:	mov	r7, r0
  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     b3e:	mul.w	r2, r1, r2
     b42:	mov	r1, r0
     b44:	add	r0, sp, #28
{ uint32_t iscl[3];

  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
     b46:	str	r3, [sp, #36]	; 0x24
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     b48:	bl	a78 <I2S_dividers(unsigned long*, unsigned long, unsigned long)>
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     b4c:	vldr	s15, [sp, #28]
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     b50:	ldr	r2, [sp, #32]
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     b52:	vldr	s13, [pc, #180]	; c08 <I2S_modification(unsigned long, unsigned short, int)+0xdc>
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     b56:	ldr	r5, [sp, #36]	; 0x24
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     b58:	ldr	r3, [sp, #28]
     b5a:	str	r6, [sp, #4]
     b5c:	vcvt.f32.u32	s14, s15
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     b60:	adds	r2, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     b62:	vmov.f32	s15, #112	; 0x3f800000  1.0
     b66:	vadd.f32	s15, s14, s15
     b6a:	vmov	s14, r2
     b6e:	vmul.f32	s15, s15, s13
     b72:	vcvt.f32.u32	s14, s14
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     b76:	adds	r5, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     b78:	vdiv.f32	s13, s15, s14
     b7c:	adds	r1, r3, #1
     b7e:	str	r1, [sp, #8]
     b80:	mov	r3, r7
     b82:	str	r2, [sp, #12]
     b84:	str	r5, [sp, #16]
     b86:	ldr	r2, [pc, #132]	; (c0c <I2S_modification(unsigned long, unsigned short, int)+0xe0>)
     b88:	ldr	r1, [pc, #132]	; (c10 <I2S_modification(unsigned long, unsigned short, int)+0xe4>)
     b8a:	ldr	r0, [pc, #136]	; (c14 <I2S_modification(unsigned long, unsigned short, int)+0xe8>)
     b8c:	vmov	s15, r5
     b90:	vmov.f32	s12, #96	; 0x3f000000  0.5
     b94:	vcvt.f32.u32	s14, s15
     b98:	vmul.f32	s13, s13, s12
     b9c:	vmov	s15, r4
     ba0:	vdiv.f32	s12, s13, s14
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
     ba4:	ldr	r5, [pc, #112]	; (c18 <I2S_modification(unsigned long, unsigned short, int)+0xec>)

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
     ba6:	ldr	r4, [pc, #116]	; (c1c <I2S_modification(unsigned long, unsigned short, int)+0xf0>)
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     ba8:	vmov	s14, r6
     bac:	vcvt.f32.s32	s15, s15
     bb0:	vcvt.f32.s32	s14, s14
     bb4:	vmul.f32	s15, s15, s14
     bb8:	vdiv.f32	s14, s12, s15
     bbc:	vcvt.s32.f32	s14, s14
     bc0:	vstr	s14, [sp]
     bc4:	bl	a110 <Print::printf(char const*, ...)>
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     bc8:	ldr	r1, [pc, #84]	; (c20 <I2S_modification(unsigned long, unsigned short, int)+0xf4>)
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
     bca:	ldr	r0, [pc, #88]	; (c24 <I2S_modification(unsigned long, unsigned short, int)+0xf8>)
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     bcc:	ldr	r3, [r1, #0]
     bce:	bic.w	r3, r3, #2415919104	; 0x90000000
     bd2:	str	r3, [r1, #0]

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
     bd4:	ldr	r2, [sp, #28]
     bd6:	ldr	r3, [sp, #32]
     bd8:	lsls	r2, r2, #12
     bda:	and.w	r2, r2, #1044480	; 0xff000
     bde:	ubfx	r3, r3, #0, #12
     be2:	orrs	r3, r2
     be4:	str	r3, [r5, #0]

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
     be6:	ldrb.w	r3, [sp, #36]	; 0x24
     bea:	orr.w	r3, r3, #117440512	; 0x7000000
     bee:	str	r3, [r4, #0]
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
     bf0:	ldrb.w	r3, [sp, #36]	; 0x24
     bf4:	orr.w	r3, r3, #1191182336	; 0x47000000
     bf8:	str	r3, [r0, #0]
//  I2S0_RCR4 = I2S_RCR4_FRSZ(nch-1) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
//    | I2S_RCR4_FSE | I2S_RCR4_FSD;

  //restart I2S
  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     bfa:	ldr	r3, [r1, #0]
     bfc:	orr.w	r3, r3, #2415919104	; 0x90000000
     c00:	str	r3, [r1, #0]
}
     c02:	add	sp, #44	; 0x2c
     c04:	pop	{r4, r5, r6, r7, pc}
     c06:	nop
     c08:	.word	0x4cb71b00
     c0c:	.word	0x05b8d800
     c10:	.word	0x00012b70
     c14:	.word	0x20013ae8
     c18:	.word	0x4002f104
     c1c:	.word	0x4002f008
     c20:	.word	0x4002f080
     c24:	.word	0x4002f088

00000c28 <makeFilename(char*)>:
  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
}

char *makeFilename(char * prefix)
{ static char filename[40];
     c28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c2c:	sub	sp, #24
     c2e:	mov	r5, r0

  sprintf(filename, "%s_%04d_%02d_%02d_%02d_%02d_%02d%s", prefix, 
     c30:	bl	29a0 <year()>
     c34:	mov	r6, r0
     c36:	bl	2980 <month()>
     c3a:	mov	sl, r0
     c3c:	bl	2960 <day()>
     c40:	mov	r7, r0
     c42:	bl	2900 <hour()>
     c46:	mov	r8, r0
     c48:	bl	2920 <minute()>
     c4c:	mov	r9, r0
     c4e:	bl	2940 <second()>
                    year(), month(), day(), hour(), minute(), second(), postfix);
     c52:	ldr	r4, [pc, #60]	; (c90 <makeFilename(char*)+0x68>)
     c54:	ldr	r1, [pc, #60]	; (c94 <makeFilename(char*)+0x6c>)
     c56:	str	r0, [sp, #16]
     c58:	mov	r3, r6
     c5a:	mov	r2, r5
     c5c:	str	r1, [sp, #20]
     c5e:	str.w	sl, [sp]
     c62:	ldr	r1, [pc, #52]	; (c98 <makeFilename(char*)+0x70>)
     c64:	str.w	r9, [sp, #12]
     c68:	str.w	r8, [sp, #8]
     c6c:	str	r7, [sp, #4]
     c6e:	mov	r0, r4
     c70:	bl	c354 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     c74:	mov	r0, r4
     c76:	bl	c5c0 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c7a:	mov	r1, r0
     c7c:	mov	r0, r4
     c7e:	bl	8974 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     c82:	ldr	r0, [pc, #24]	; (c9c <makeFilename(char*)+0x74>)
     c84:	bl	a0e0 <Print::println()>
#if DO_DEBUG>0
  Serial.println(filename);
#endif
  return filename;  
}
     c88:	mov	r0, r4
     c8a:	add	sp, #24
     c8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c90:	.word	0x20018c78
     c94:	.word	0x2001393c
     c98:	.word	0x00012b88
     c9c:	.word	0x20013ae8

00000ca0 <wavHeader(unsigned long)>:

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     ca0:	ldr	r3, [pc, #80]	; (cf4 <wavHeader(unsigned long)+0x54>)
     ca2:	ldr	r1, [pc, #84]	; (cf8 <wavHeader(unsigned long)+0x58>)
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     ca4:	ldr	r2, [pc, #84]	; (cfc <wavHeader(unsigned long)+0x5c>)

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     ca6:	push	{r4, r5, r6, r7}
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     ca8:	str	r2, [r3, #28]

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     caa:	mov	r2, r0

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     cac:	ldmia	r1, {r0, r1}
  strcpy(wheader+8,"WAVE");
     cae:	ldr	r6, [pc, #80]	; (d00 <wavHeader(unsigned long)+0x60>)

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     cb0:	str	r0, [r3, #0]
  strcpy(wheader+8,"WAVE");
     cb2:	ldmia.w	r6, {r0, r1}
  strcpy(wheader+12,"fmt ");
     cb6:	ldr	r5, [pc, #76]	; (d04 <wavHeader(unsigned long)+0x64>)
  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
     cb8:	str	r0, [r3, #8]
  strcpy(wheader+12,"fmt ");
     cba:	ldmia.w	r5, {r0, r1}
  strcpy(wheader+36,"data");
     cbe:	ldr	r4, [pc, #72]	; (d08 <wavHeader(unsigned long)+0x68>)
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
     cc0:	str	r0, [r3, #12]
  strcpy(wheader+36,"data");
     cc2:	ldmia.w	r4, {r0, r1}
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     cc6:	subs	r2, #44	; 0x2c
     cc8:	bic.w	r2, r2, #3
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     ccc:	add.w	r7, r2, #36	; 0x24
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     cd0:	movs	r6, #1
  *(int16_t*)(wheader+22)=nchan;// numChannels 
     cd2:	movs	r5, #2
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     cd4:	movw	r4, #48000	; 0xbb80
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
     cd8:	str	r0, [r3, #36]	; 0x24
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     cda:	movs	r1, #4
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     cdc:	str	r2, [r3, #40]	; 0x28
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     cde:	movs	r2, #16
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     ce0:	str	r7, [r3, #4]
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     ce2:	strh	r6, [r3, #20]
  *(int16_t*)(wheader+22)=nchan;// numChannels 
     ce4:	strh	r5, [r3, #22]
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     ce6:	str	r4, [r3, #24]
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     ce8:	mov	r0, r3
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     cea:	strh	r1, [r3, #32]
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     cec:	str	r2, [r3, #16]
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
     cee:	strh	r2, [r3, #34]	; 0x22
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     cf0:	pop	{r4, r5, r6, r7}
     cf2:	bx	lr
     cf4:	.word	0x20018cd0
     cf8:	.word	0x00012bcc
     cfc:	.word	0x00017700
     d00:	.word	0x00012bd4
     d04:	.word	0x00012bdc
     d08:	.word	0x00012be4

00000d0c <c_uSD::init()>:
//____________________________ FS Interface implementation______________________
void c_uSD::init()
{
     d0c:	push	{r4, r5, r6, lr}
     d0e:	mov	r4, r0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     d10:	add.w	r5, r0, #1160	; 0x488
     d14:	mov	r0, r5
     d16:	mov.w	r1, #0
     d1a:	bl	804c <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     d1e:	str.w	r5, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
     d22:	cbz	r5, d2e <c_uSD::init()+0x22>
     d24:	mov	r0, r5
     d26:	bl	77ac <SdioCard::errorCode() const>
     d2a:	mov	r5, r0
     d2c:	cbz	r0, d4e <c_uSD::init()+0x42>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     d2e:	ldr	r6, [pc, #60]	; (d6c <c_uSD::init()+0x60>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     d30:	ldr	r5, [pc, #60]	; (d70 <c_uSD::init()+0x64>)
  {
//    sd.errorHalt("sd.begin failed");
    while(1)
    {
      // blink code suggests insertion of an SD card
            pinMode(13,OUTPUT);
     d32:	movs	r1, #1
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     d34:	movs	r4, #32
     d36:	movs	r0, #13
     d38:	bl	8e18 <pinMode>
     d3c:	str	r4, [r6, #0]
            digitalWriteFast(13,HIGH);
            delay(200);
     d3e:	movs	r0, #200	; 0xc8
     d40:	bl	8e68 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     d44:	str	r4, [r5, #0]
            digitalWriteFast(13,LOW);
            delay(200);
     d46:	movs	r0, #200	; 0xc8
     d48:	bl	8e68 <delay>
     d4c:	b.n	d32 <c_uSD::init()+0x26>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     d4e:	ldr.w	r1, [r4, #1156]	; 0x484
     d52:	mov	r0, r4
     d54:	bl	6e98 <FsVolume::begin(BlockDeviceInterface*)>
     d58:	cmp	r0, #0
     d5a:	beq.n	d2e <c_uSD::init()+0x22>
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
     d5c:	ldr	r3, [pc, #20]	; (d74 <c_uSD::init()+0x68>)
     d5e:	ldr	r2, [pc, #24]	; (d78 <c_uSD::init()+0x6c>)
  //
  nbuf=0;
     d60:	strh.w	r5, [r4, #1278]	; 0x4fe
  state=0;
     d64:	strh.w	r5, [r4, #1276]	; 0x4fc
            delay(200);
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
     d68:	str	r2, [r3, #0]
  //
  nbuf=0;
  state=0;
}
     d6a:	pop	{r4, r5, r6, pc}
     d6c:	.word	0x400ff084
     d70:	.word	0x400ff088
     d74:	.word	0x20019cf4
     d78:	.word	0x000005e1

00000d7c <c_uSD::close()>:
    state=close();
  }
  return state;
}
int16_t c_uSD::close(void)
{   // close file
     d7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d80:	mov	r5, r0
     d82:	ldr.w	r0, [r0, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     d86:	cmp	r0, #0
     d88:	beq.n	e0e <c_uSD::close()+0x92>
     d8a:	bl	5c44 <FatFile::truncate()>
     d8e:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     d92:	cmp	r3, #0
     d94:	beq.n	e20 <c_uSD::close()+0xa4>
     d96:	ldr.w	sl, [r3, #28]
     d9a:	mov.w	r9, #0
     d9e:	mov	r8, sl
    file.truncate();
    #ifdef GEN_WAV_FILE
       uint32_t fileSize = file.size();
       memcpy(header,wavHeader(fileSize),44);
     da0:	mov	r0, sl
     da2:	bl	ca0 <wavHeader(unsigned long)>
     da6:	ldr	r7, [pc, #216]	; (e80 <c_uSD::close()+0x104>)
     da8:	mov	r4, r0
     daa:	add.w	lr, r0, #32
     dae:	ldr	r0, [r4, #0]
     db0:	ldr	r1, [r4, #4]
     db2:	ldr	r2, [r4, #8]
     db4:	ldr	r3, [r4, #12]
     db6:	mov	r6, r7
     db8:	stmia	r6!, {r0, r1, r2, r3}
     dba:	adds	r4, #16
     dbc:	cmp	r4, lr
     dbe:	mov	r7, r6
     dc0:	bne.n	dae <c_uSD::close()+0x32>
     dc2:	ldr	r0, [r4, #0]
     dc4:	ldr	r1, [r4, #4]
     dc6:	ldr	r2, [r4, #8]
     dc8:	stmia	r7!, {r0, r1, r2}
     dca:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     dce:	cmp	r0, #0
     dd0:	beq.n	e54 <c_uSD::close()+0xd8>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     dd2:	movs	r1, #0
     dd4:	bl	5a4c <FatFile::seekSet(unsigned long)>
     dd8:	ldr.w	r0, [r5, #1268]	; 0x4f4
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     ddc:	cbz	r0, e32 <c_uSD::close()+0xb6>
     dde:	mov.w	r2, #512	; 0x200
     de2:	ldr	r1, [pc, #156]	; (e80 <c_uSD::close()+0x104>)
     de4:	bl	5cbc <FatFile::write(void const*, unsigned int)>
     de8:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     dec:	cbnz	r0, e4c <c_uSD::close()+0xd0>
     dee:	ldr.w	r0, [r5, #1272]	; 0x4f8
     df2:	cbz	r0, dfc <c_uSD::close()+0x80>
     df4:	mov	r2, r8
     df6:	mov	r3, r9
     df8:	bl	3acc <ExFatFile::seekSet(unsigned long long)>
       file.seek(0);
       file.write(header,512);
       file.seek(fileSize);
    #endif
    file.close();
     dfc:	addw	r0, r5, #1212	; 0x4bc
     e00:	bl	6d90 <FsBaseFile::close()>
//#if DO_DEBUG>0
//    Serial.println("file Closed");    
//#endif
    state=0;  // flag to open new file
     e04:	movs	r0, #0
     e06:	strh.w	r0, [r5, #1276]	; 0x4fc
    return state;
}
     e0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     e0e:	ldr.w	r0, [r5, #1272]	; 0x4f8
     e12:	cbz	r0, e66 <c_uSD::close()+0xea>
     e14:	bl	4d98 <ExFatFile::truncate()>
     e18:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e1c:	cmp	r3, #0
     e1e:	bne.n	d96 <c_uSD::close()+0x1a>
     e20:	ldr.w	r3, [r5, #1272]	; 0x4f8
     e24:	cbz	r3, e72 <c_uSD::close()+0xf6>
     e26:	ldrd	r8, r9, [r3, #16]
     e2a:	mov.w	r9, #0
     e2e:	mov	sl, r8
     e30:	b.n	da0 <c_uSD::close()+0x24>
     e32:	ldr.w	r0, [r5, #1272]	; 0x4f8
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     e36:	cmp	r0, #0
     e38:	beq.n	dfc <c_uSD::close()+0x80>
     e3a:	mov.w	r2, #512	; 0x200
     e3e:	ldr	r1, [pc, #64]	; (e80 <c_uSD::close()+0x104>)
     e40:	bl	4e7c <ExFatFile::write(void const*, unsigned int)>
     e44:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e48:	cmp	r0, #0
     e4a:	beq.n	dee <c_uSD::close()+0x72>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e4c:	mov	r1, sl
     e4e:	bl	5a4c <FatFile::seekSet(unsigned long)>
     e52:	b.n	dfc <c_uSD::close()+0x80>
           m_xFile ? m_xFile->seekSet(pos) : false;
     e54:	ldr.w	r0, [r5, #1272]	; 0x4f8
     e58:	cmp	r0, #0
     e5a:	beq.n	dfc <c_uSD::close()+0x80>
     e5c:	movs	r2, #0
     e5e:	movs	r3, #0
     e60:	bl	3acc <ExFatFile::seekSet(unsigned long long)>
     e64:	b.n	dd8 <c_uSD::close()+0x5c>
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     e66:	mov	sl, r0
     e68:	mov.w	r8, #0
     e6c:	mov.w	r9, #0
     e70:	b.n	da0 <c_uSD::close()+0x24>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e72:	mov	sl, r3
     e74:	mov.w	r8, #0
     e78:	mov.w	r9, #0
     e7c:	b.n	da0 <c_uSD::close()+0x24>
     e7e:	nop
     e80:	.word	0x20014a78

00000e84 <c_uSD::storeConfig(unsigned long*, int, long*, int)>:

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
     e84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     e88:	ldr	r4, [pc, #272]	; (f9c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x118>)
     e8a:	sub	sp, #44	; 0x2c
     e8c:	ldr	r4, [r4, #0]
     e8e:	ldr.w	r9, [sp, #80]	; 0x50
     e92:	str	r3, [sp, #4]
     e94:	mov	r5, r0
     e96:	mov	sl, r1
     e98:	mov	r8, r2
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
     e9a:	addw	fp, r0, #1212	; 0x4bc
     e9e:	cbz	r4, eae <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x2a>
     ea0:	mov	r1, r4
     ea2:	movw	r3, #1537	; 0x601
     ea6:	ldr	r2, [pc, #248]	; (fa0 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x11c>)
     ea8:	mov	r0, fp
     eaa:	bl	6db8 <FsBaseFile::open(FsVolume*, char const*, int)>
  for(int ii=0; ii<n1; ii++)
     eae:	cmp.w	r8, #0
     eb2:	ble.n	f96 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x112>
     eb4:	sub.w	r7, sl, #4
     eb8:	movs	r6, #0
     eba:	add	r4, sp, #8
     ebc:	b.n	ec8 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     ebe:	bl	5cbc <FatFile::write(void const*, unsigned int)>
     ec2:	adds	r6, #1
     ec4:	cmp	r8, r6
     ec6:	beq.n	f02 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
     ec8:	ldr.w	r2, [r7, #4]!
     ecc:	ldr	r1, [pc, #212]	; (fa4 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     ece:	mov	r0, r4
     ed0:	bl	c354 <sprintf>
     ed4:	mov	r0, r4
     ed6:	bl	c5c0 <strlen>
     eda:	ldr.w	r3, [r5, #1268]	; 0x4f4
     ede:	mov	lr, r0
     ee0:	mov	r2, r0
     ee2:	mov	r1, r4
     ee4:	mov	r0, r3
     ee6:	cmp	r3, #0
     ee8:	bne.n	ebe <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3a>
     eea:	ldr.w	r3, [r5, #1272]	; 0x4f8
     eee:	mov	r2, lr
     ef0:	mov	r1, r4
     ef2:	mov	r0, r3
     ef4:	cmp	r3, #0
     ef6:	beq.n	ec2 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3e>
}

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
     ef8:	adds	r6, #1
     efa:	bl	4e7c <ExFatFile::write(void const*, unsigned int)>
     efe:	cmp	r8, r6
     f00:	bne.n	ec8 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     f02:	cmp.w	r9, #0
     f06:	ble.n	f54 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
     f08:	ldr	r3, [sp, #4]
     f0a:	movs	r6, #0
     f0c:	subs	r7, r3, #4
     f0e:	b.n	f1a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
     f10:	bl	5cbc <FatFile::write(void const*, unsigned int)>
     f14:	adds	r6, #1
     f16:	cmp	r9, r6
     f18:	beq.n	f54 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
     f1a:	ldr.w	r2, [r7, #4]!
     f1e:	ldr	r1, [pc, #132]	; (fa4 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     f20:	mov	r0, r4
     f22:	bl	c354 <sprintf>
     f26:	mov	r0, r4
     f28:	bl	c5c0 <strlen>
     f2c:	ldr.w	r3, [r5, #1268]	; 0x4f4
     f30:	mov	lr, r0
     f32:	mov	r2, r0
     f34:	mov	r1, r4
     f36:	mov	r0, r3
     f38:	cmp	r3, #0
     f3a:	bne.n	f10 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x8c>
     f3c:	ldr.w	r3, [r5, #1272]	; 0x4f8
     f40:	mov	r2, lr
     f42:	mov	r1, r4
     f44:	mov	r0, r3
     f46:	cmp	r3, #0
     f48:	beq.n	f14 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x90>
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     f4a:	adds	r6, #1
     f4c:	bl	4e7c <ExFatFile::write(void const*, unsigned int)>
     f50:	cmp	r9, r6
     f52:	bne.n	f1a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
     f54:	add.w	r2, sl, r8, lsl #2
     f58:	ldr	r1, [pc, #76]	; (fa8 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x124>)
     f5a:	mov	r0, r4
     f5c:	bl	c354 <sprintf>
     f60:	ldr.w	r0, [r5, #1268]	; 0x4f4
     f64:	cbz	r0, f7a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xf6>
     f66:	mov	r1, r4
     f68:	movs	r2, #6
     f6a:	bl	5cbc <FatFile::write(void const*, unsigned int)>
  file.write((uint8_t *)text,6);

  file.close();
     f6e:	mov	r0, fp
     f70:	bl	6d90 <FsBaseFile::close()>
  
}
     f74:	add	sp, #44	; 0x2c
     f76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f7a:	ldr.w	r0, [r5, #1272]	; 0x4f8
     f7e:	cmp	r0, #0
     f80:	beq.n	f6e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xea>
     f82:	mov	r1, r4
     f84:	movs	r2, #6
     f86:	bl	4e7c <ExFatFile::write(void const*, unsigned int)>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
  file.write((uint8_t *)text,6);

  file.close();
     f8a:	mov	r0, fp
     f8c:	bl	6d90 <FsBaseFile::close()>
  
}
     f90:	add	sp, #44	; 0x2c
     f92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f96:	add	r4, sp, #8
     f98:	b.n	f02 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
     f9a:	nop
     f9c:	.word	0x20019cf8
     fa0:	.word	0x00012bec
     fa4:	.word	0x00012c00
     fa8:	.word	0x00012bf8

00000fac <c_uSD::loadConfig(unsigned long*, int, long*, int)>:

void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
     fac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     fb0:	ldr	r4, [pc, #252]	; (10b0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x104>)
     fb2:	sub	sp, #44	; 0x2c
     fb4:	ldr	r4, [r4, #0]
     fb6:	ldr.w	r9, [sp, #80]	; 0x50
     fba:	cmp	r4, #0
     fbc:	beq.n	103a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
     fbe:	addw	fp, r0, #1212	; 0x4bc
     fc2:	str	r3, [sp, #4]
     fc4:	mov	r8, r2
     fc6:	mov	sl, r1
     fc8:	mov	r5, r0
     fca:	mov	r1, r4
     fcc:	mov	r0, fp
     fce:	movs	r3, #0
     fd0:	ldr	r2, [pc, #224]	; (10b4 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
     fd2:	bl	6db8 <FsBaseFile::open(FsVolume*, char const*, int)>
     fd6:	cbz	r0, 103a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  //
  for(int ii=0; ii<n1; ii++)
     fd8:	cmp.w	r8, #0
     fdc:	ldr.w	r3, [r5, #1268]	; 0x4f4
     fe0:	ble.n	1040 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x94>
     fe2:	mov	r7, sl
     fe4:	movs	r6, #0
     fe6:	add	r4, sp, #8
     fe8:	b.n	100a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x5e>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     fea:	bl	5614 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
     fee:	cmp	r0, #0
     ff0:	ldr	r1, [pc, #196]	; (10b8 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
     ff2:	ble.n	ffc <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x50>
     ff4:	mov	r2, r7
     ff6:	mov	r0, r4
     ff8:	bl	c3a0 <sscanf>
     ffc:	ldr.w	r3, [r5, #1268]	; 0x4f4
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
    1000:	adds	r6, #1
    1002:	cmp	r8, r6
    1004:	add.w	r7, r7, #4
    1008:	beq.n	1042 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x96>
    100a:	movs	r2, #12
    100c:	mov	r1, r4
    100e:	mov	r0, r3
    1010:	cmp	r3, #0
    1012:	bne.n	fea <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
    1014:	ldr.w	r0, [r5, #1272]	; 0x4f8
    1018:	cmp	r0, #0
    101a:	beq.n	1000 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x54>
    101c:	movs	r2, #12
    101e:	mov	r1, r4
    1020:	bl	38fc <ExFatFile::read(void*, unsigned int)>
    1024:	b.n	fee <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x42>
    1026:	cbz	r3, 108a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xde>
    1028:	mov	r0, r3
    102a:	movs	r2, #6
    102c:	mov	r1, r4
    102e:	bl	5614 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
    1032:	cbnz	r0, 109c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
  { text[5]=0;
    sscanf(text,"%s",(char *) &param1[n1]);
  }  
  file.close();
    1034:	mov	r0, fp
    1036:	bl	6d90 <FsBaseFile::close()>
}
    103a:	add	sp, #44	; 0x2c
    103c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1040:	add	r4, sp, #8
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
    1042:	cmp.w	r9, #0
    1046:	ble.n	1026 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
    1048:	ldr	r6, [sp, #4]
    104a:	movs	r7, #0
    104c:	b.n	106e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xc2>
    104e:	bl	5614 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
    1052:	cmp	r0, #0
    1054:	ldr	r1, [pc, #96]	; (10b8 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
    1056:	ble.n	1060 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb4>
    1058:	mov	r2, r6
    105a:	mov	r0, r4
    105c:	bl	c3a0 <sscanf>
    1060:	ldr.w	r3, [r5, #1268]	; 0x4f4
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
    1064:	adds	r7, #1
    1066:	cmp	r9, r7
    1068:	add.w	r6, r6, #4
    106c:	beq.n	1026 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
    106e:	movs	r2, #12
    1070:	mov	r1, r4
    1072:	mov	r0, r3
    1074:	cmp	r3, #0
    1076:	bne.n	104e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
    1078:	ldr.w	r0, [r5, #1272]	; 0x4f8
    107c:	cmp	r0, #0
    107e:	beq.n	1064 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb8>
    1080:	movs	r2, #12
    1082:	mov	r1, r4
    1084:	bl	38fc <ExFatFile::read(void*, unsigned int)>
    1088:	b.n	1052 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa6>
    108a:	ldr.w	r0, [r5, #1272]	; 0x4f8
    108e:	cbz	r0, 109c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
    1090:	movs	r2, #6
    1092:	mov	r1, r4
    1094:	bl	38fc <ExFatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
    1098:	cmp	r0, #0
    109a:	beq.n	1034 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
  { text[5]=0;
    109c:	movs	r3, #0
    sscanf(text,"%s",(char *) &param1[n1]);
    109e:	add.w	r2, sl, r8, lsl #2
    10a2:	mov	r0, r4
    10a4:	ldr	r1, [pc, #20]	; (10bc <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x110>)
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
  { text[5]=0;
    10a6:	strb.w	r3, [sp, #13]
    sscanf(text,"%s",(char *) &param1[n1]);
    10aa:	bl	c3a0 <sscanf>
    10ae:	b.n	1034 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
    10b0:	.word	0x20019cf8
    10b4:	.word	0x00012bec
    10b8:	.word	0x00012c08
    10bc:	.word	0x00012ba8

000010c0 <setWakeupCallandSleep(unsigned long)>:
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
    10c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
    10c4:	ldr	r4, [pc, #308]	; (11fc <setWakeupCallandSleep(unsigned long)+0x13c>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
    10c6:	ldr	r2, [pc, #312]	; (1200 <setWakeupCallandSleep(unsigned long)+0x140>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
    10c8:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
    10ca:	ldr	r1, [pc, #312]	; (1204 <setWakeupCallandSleep(unsigned long)+0x144>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    10cc:	ldr.w	r8, [pc, #376]	; 1248 <setWakeupCallandSleep(unsigned long)+0x188>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    10d0:	ldr	r6, [pc, #308]	; (1208 <setWakeupCallandSleep(unsigned long)+0x148>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
    10d2:	orr.w	r3, r3, #536870912	; 0x20000000
    10d6:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
    10d8:	ldr	r3, [r2, #0]
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
    10da:	ldr	r4, [pc, #304]	; (120c <setWakeupCallandSleep(unsigned long)+0x14c>)
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
    10dc:	orr.w	r3, r3, #256	; 0x100
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
    10e0:	mov	r7, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
    10e2:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
    10e4:	movs	r0, #21
    10e6:	bl	8db0 <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
    10ea:	ldr	r3, [pc, #292]	; (1210 <setWakeupCallandSleep(unsigned long)+0x150>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
    10ec:	ldr.w	ip, [pc, #348]	; 124c <setWakeupCallandSleep(unsigned long)+0x18c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
    10f0:	ldr	r1, [pc, #288]	; (1214 <setWakeupCallandSleep(unsigned long)+0x154>)
  LLWU_PE3 = 0;
    10f2:	ldr	r0, [pc, #292]	; (1218 <setWakeupCallandSleep(unsigned long)+0x158>)
  LLWU_PE4 = 0;
    10f4:	ldr	r2, [pc, #292]	; (121c <setWakeupCallandSleep(unsigned long)+0x15c>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
    10f6:	ldr.w	lr, [pc, #344]	; 1250 <setWakeupCallandSleep(unsigned long)+0x190>
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
    10fa:	movs	r5, #32
    10fc:	strb	r5, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
    10fe:	mov.w	r3, #2097152	; 0x200000
    1102:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
    1106:	str	r3, [r4, #0]
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
    1108:	ldr	r3, [pc, #276]	; (1220 <setWakeupCallandSleep(unsigned long)+0x160>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
    110a:	movs	r4, #0
    110c:	strb.w	r4, [lr]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    1110:	mvn.w	ip, #1020	; 0x3fc
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
    1114:	strb	r4, [r1, #0]
  LLWU_PE3 = 0;
    1116:	strb	r4, [r0, #0]
  LLWU_PE4 = 0;
    1118:	strb	r4, [r2, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
    111a:	strb	r4, [r3, #0]
  LLWU_PE6 = 0;
    111c:	strb	r4, [r1, #4]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    111e:	sub.w	r1, r1, #216064	; 0x34c00
    1122:	add	r1, ip
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
  LLWU_PE7 = 0;
    1124:	strb	r4, [r0, #4]
  LLWU_PE8 = 0;
    1126:	strb	r4, [r2, #4]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
    1128:	strb	r5, [r3, #4]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    112a:	ldr	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
    112c:	ldr	r2, [pc, #244]	; (1224 <setWakeupCallandSleep(unsigned long)+0x164>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    112e:	ldr.w	ip, [pc, #292]	; 1254 <setWakeupCallandSleep(unsigned long)+0x194>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    1132:	orr.w	r3, r3, #67108864	; 0x4000000
    1136:	str	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
    1138:	ldr	r3, [r2, #0]
    113a:	orr.w	r3, r3, #1073741824	; 0x40000000
    113e:	str	r3, [r2, #0]
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
    1140:	add.w	r1, r1, #12288	; 0x3000
    PORTB_PCR3 = PORT_PCR_MUX(0);
    1144:	add.w	r2, r2, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    1148:	sub.w	lr, lr, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
    114c:	sub.w	r0, r0, #207872	; 0x32c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    1150:	sub.w	lr, lr, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
    1154:	subw	r0, r0, #1014	; 0x3f6

    PORTB_PCR2 = PORT_PCR_MUX(0);
    1158:	adds	r1, #4
    PORTB_PCR3 = PORT_PCR_MUX(0);
    115a:	adds	r2, #12
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    115c:	ldr	r3, [pc, #200]	; (1228 <setWakeupCallandSleep(unsigned long)+0x168>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    115e:	str.w	r4, [r8]
    PORTA_PCR1 = PORT_PCR_MUX(0);
    1162:	str.w	r4, [ip]
    PORTA_PCR2 = PORT_PCR_MUX(0);
    1166:	str.w	r4, [lr]
    PORTA_PCR3 = PORT_PCR_MUX(0);
    116a:	str	r4, [r0, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
    116c:	str	r4, [r1, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
    116e:	str	r4, [r2, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    1170:	ldr	r3, [r3, #0]
    1172:	sub.w	r1, r1, #53248	; 0xd000
   RTC_IER |= RTC_IER_TAIE_MASK;
    1176:	sub.w	r2, r2, #52992	; 0xcf00
    117a:	subs	r2, #240	; 0xf0
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    117c:	add	r3, r7
    117e:	str	r3, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
    1180:	ldr	r3, [r2, #0]
    1182:	orr.w	r3, r3, #4
    1186:	str	r3, [r2, #0]
void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
   rtcSetup();
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
    1188:	bl	9e44 <yield>
    118c:	mov	r3, r4
    118e:	movs	r2, #10
    1190:	mov	r1, r7
    1192:	mov	r0, r6
    1194:	bl	a12c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1198:	mov	r0, r6
    119a:	bl	a0e0 <Print::println()>
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
    119e:	movs	r1, #1
    11a0:	movs	r0, #13
    11a2:	bl	8e18 <pinMode>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    11a6:	ldr	r3, [pc, #132]	; (122c <setWakeupCallandSleep(unsigned long)+0x16c>)

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    11a8:	ldr	r6, [pc, #132]	; (1230 <setWakeupCallandSleep(unsigned long)+0x170>)
    11aa:	str	r5, [r3, #0]
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
    11ac:	mov.w	r0, #1000	; 0x3e8
    11b0:	bl	8e68 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    11b4:	ldr	r3, [pc, #124]	; (1234 <setWakeupCallandSleep(unsigned long)+0x174>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
    11b6:	ldr	r7, [pc, #128]	; (1238 <setWakeupCallandSleep(unsigned long)+0x178>)
    11b8:	str	r5, [r3, #0]

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    11ba:	ldrb	r2, [r6, #5]
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
    11bc:	ldr	r5, [pc, #124]	; (123c <setWakeupCallandSleep(unsigned long)+0x17c>)
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
    11be:	ldr	r0, [pc, #128]	; (1240 <setWakeupCallandSleep(unsigned long)+0x180>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
    11c0:	ldr	r1, [pc, #128]	; (1244 <setWakeupCallandSleep(unsigned long)+0x184>)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    11c2:	sub.w	r3, r3, #528384	; 0x81000

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    11c6:	and.w	r2, r2, #223	; 0xdf
    11ca:	strb	r2, [r6, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    11cc:	subs	r3, #135	; 0x87
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
    11ce:	movs	r2, #2
    11d0:	strb	r2, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    11d2:	ldrb	r2, [r3, #0]
    11d4:	and.w	r2, r2, #248	; 0xf8
    11d8:	strb	r2, [r3, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
    11da:	ldrb	r2, [r3, #0]
    11dc:	orr.w	r2, r2, #4
    11e0:	strb	r2, [r3, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
    11e2:	strb	r4, [r5, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
    11e4:	ldrb	r3, [r3, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
    11e6:	ldr	r3, [r0, #0]
    11e8:	bic.w	r3, r3, #2
    11ec:	str	r3, [r0, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
    11ee:	ldr	r3, [r1, #0]
    11f0:	orr.w	r3, r3, #4
    11f4:	str	r3, [r1, #0]
   
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
    11f6:	wfi
    11f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11fc:	.word	0x4004803c
    1200:	.word	0x4003d010
    1204:	.word	0x00000521
    1208:	.word	0x20013ae8
    120c:	.word	0xe000e100
    1210:	.word	0xe000e415
    1214:	.word	0x4007c001
    1218:	.word	0x4007c002
    121c:	.word	0x4007c003
    1220:	.word	0x4007c004
    1224:	.word	0x40047000
    1228:	.word	0x4003d000
    122c:	.word	0x400ff084
    1230:	.word	0x40064000
    1234:	.word	0x400ff088
    1238:	.word	0x4007e000
    123c:	.word	0x4007e002
    1240:	.word	0xe000e010
    1244:	.word	0xe000ed10
    1248:	.word	0x40049000
    124c:	.word	0xe000e280
    1250:	.word	0x4007c000
    1254:	.word	0x40049004

00001258 <checkDutyCycle(ACQ_Parameters_s*, short)>:
  #define ShortSleepDuration 60   // i.e. wake up every 'ShortSleepDuration' seconds
#endif
//
// flag can be 0 file to be open // time to shutdown if required
int32_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
    1258:	push	{r3, r4, r5, r6, r7, lr}
    125a:	mov	r6, r0
    125c:	mov	r5, r1
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
    125e:	bl	2860 <now()>
    1262:	mov	r4, r0
  uint16_t to = hour();
    1264:	bl	2900 <hour()>
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
    1268:	ldrh	r7, [r6, #12]
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
    126a:	ldrh.w	lr, [r6, #24]
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
    126e:	ldrh	r3, [r6, #16]
  uint16_t T3 = acqParameters->T3;
    1270:	ldrh	r1, [r6, #20]
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    1272:	cmp	r7, lr
int32_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
  uint16_t to = hour();
    1274:	uxth	r0, r0
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    1276:	bls.n	1292 <checkDutyCycle(ACQ_Parameters_s*, short)+0x3a>
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
    1278:	cmp	r0, r1
    127a:	bcc.n	12f0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x98>
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
      
    if(flag>=0)
    127c:	cmp	r5, #0
    127e:	blt.n	128e <checkDutyCycle(ACQ_Parameters_s*, short)+0x36>
    { 
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
    1280:	beq.n	1306 <checkDutyCycle(ACQ_Parameters_s*, short)+0xae>
    1282:	ldr	r5, [pc, #280]	; (139c <checkDutyCycle(ACQ_Parameters_s*, short)+0x144>)
    1284:	ldrh	r2, [r6, #4]
    1286:	ldr	r3, [r5, #0]
    1288:	add	r3, r2
    128a:	cmp	r4, r3
    128c:	bcs.n	1384 <checkDutyCycle(ACQ_Parameters_s*, short)+0x12c>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    128e:	movs	r0, #0
    1290:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));
    1292:	cmp	r0, r7
    1294:	bcc.n	129a <checkDutyCycle(ACQ_Parameters_s*, short)+0x42>
    1296:	cmp	r0, r3
    1298:	bcc.n	127c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    129a:	cmp	r0, r1
    129c:	bcs.n	1320 <checkDutyCycle(ACQ_Parameters_s*, short)+0xc8>
    }
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    129e:	ldr	r2, [pc, #256]	; (13a0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x148>)
    12a0:	ldr	r5, [pc, #256]	; (13a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x14c>)
    12a2:	umull	r6, r2, r2, r4
    12a6:	lsrs	r2, r2, #16
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    12a8:	cmp	r0, r3
    }
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    12aa:	mls	r2, r5, r2, r4
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    12ae:	bcc.n	12b4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5c>
    12b0:	cmp	r0, r1
    12b2:	bcc.n	133e <checkDutyCycle(ACQ_Parameters_s*, short)+0xe6>
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    12b4:	movs	r4, #0
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    12b6:	cmp	r0, lr
    12b8:	bcc.n	12be <checkDutyCycle(ACQ_Parameters_s*, short)+0x66>
    12ba:	cmp	r7, lr
    12bc:	bcc.n	132e <checkDutyCycle(ACQ_Parameters_s*, short)+0xd6>
    {  nsec = (T1+24) * 3600 - tto;
    }
    //
    if(to<T1)                                            //eg: to=2:  T1=4; T2=9; T3=16; T4=20
    12be:	cmp	r0, r7
    12c0:	bcs.n	12cc <checkDutyCycle(ACQ_Parameters_s*, short)+0x74>
    { nsec = T1 * 3600 - tto;
    12c2:	mov.w	r0, #3600	; 0xe10
    12c6:	mul.w	r0, r0, r7
    12ca:	subs	r4, r0, r2

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    12cc:	movs	r3, #0
    12ce:	movs	r2, #10
    12d0:	mov	r1, r4
    12d2:	ldr	r0, [pc, #212]	; (13a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    12d4:	bl	a12c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    12d8:	ldr	r0, [pc, #204]	; (13a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    12da:	bl	a0e0 <Print::println()>
    12de:	movs	r1, #15
    12e0:	ldr	r0, [pc, #200]	; (13ac <checkDutyCycle(ACQ_Parameters_s*, short)+0x154>)
    12e2:	bl	8974 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    12e6:	ldr	r0, [pc, #192]	; (13a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    12e8:	bl	a0e0 <Print::println()>
    
#if DO_DEBUG>0
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
    12ec:	mov	r0, r4
    12ee:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
    12f0:	cmp	r0, lr
    12f2:	bcc.n	127c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    12f4:	cmp	r0, r7
    12f6:	bcc.n	129e <checkDutyCycle(ACQ_Parameters_s*, short)+0x46>
    12f8:	cmp	r0, r3
    12fa:	ite	cs
    12fc:	movcs	r2, #0
    12fe:	movcc	r2, #1
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    1300:	cmp	r2, #0
    1302:	beq.n	129e <checkDutyCycle(ACQ_Parameters_s*, short)+0x46>
    1304:	b.n	127c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
        return -1; // flag to close acquisition
      }
      
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
    1306:	ldr	r3, [pc, #168]	; (13b0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x158>)
    1308:	ldrh	r2, [r3, #0]
    130a:	cbz	r2, 134e <checkDutyCycle(ACQ_Parameters_s*, short)+0xf6>
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    130c:	ldrh	r3, [r6, #0]
    130e:	ldrh	r0, [r6, #8]
    1310:	cmp	r3, r0
    1312:	bcs.n	131c <checkDutyCycle(ACQ_Parameters_s*, short)+0xc4>
  if (doRecording) // we can record
  {
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
    1314:	ldr	r2, [r6, #28]
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    1316:	add	r3, r2
    1318:	cmp	r4, r3
    131a:	bcs.n	135c <checkDutyCycle(ACQ_Parameters_s*, short)+0x104>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    131c:	mov	r0, r5
}
    131e:	pop	{r3, r4, r5, r6, r7, pc}
    1320:	cmp	r0, lr
    1322:	ite	cs
    1324:	movcs	r2, #0
    1326:	movcc	r2, #1
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    1328:	cmp	r2, #0
    132a:	beq.n	129e <checkDutyCycle(ACQ_Parameters_s*, short)+0x46>
    132c:	b.n	127c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    {  nsec = (T1+24) * 3600 - tto;
    132e:	add.w	r4, r7, #24
    1332:	mov.w	r3, #3600	; 0xe10
    1336:	mul.w	r1, r3, r4
    133a:	subs	r4, r1, r2
    133c:	b.n	12be <checkDutyCycle(ACQ_Parameters_s*, short)+0x66>
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
    133e:	mov.w	r3, #3600	; 0xe10
    1342:	mul.w	r3, r3, r1
    1346:	cmp	r2, r3
    1348:	bcs.n	12b4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5c>
      nsec = T3 * 3600 - tto;
    134a:	subs	r4, r3, r2
    134c:	b.n	12b6 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5e>
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    134e:	ldr	r1, [pc, #76]	; (139c <checkDutyCycle(ACQ_Parameters_s*, short)+0x144>)
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
    1350:	str	r4, [r6, #28]
            recording=1; 
    1352:	movs	r2, #1
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    1354:	mov	r0, r5
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    1356:	str	r4, [r1, #0]
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
    1358:	strh	r2, [r3, #0]
    135a:	pop	{r3, r4, r5, r6, r7, pc}
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
        { // need to stop
          nsec = (t_rec + t_rep - tt);
    135c:	add	r0, r2
    135e:	subs	r4, r0, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1360:	mov	r3, r5
    1362:	movs	r2, #10
    1364:	mov	r1, r4
    1366:	ldr	r0, [pc, #64]	; (13a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    1368:	bl	a12c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    136c:	ldr	r0, [pc, #56]	; (13a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    136e:	bl	a0e0 <Print::println()>
    1372:	movs	r1, #15
    1374:	ldr	r0, [pc, #60]	; (13b4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x15c>)
    1376:	bl	8974 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    137a:	ldr	r0, [pc, #44]	; (13a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    137c:	bl	a0e0 <Print::println()>
          #endif
#if DO_DEBUG>0
          Serial.println(nsec); 
          Serial.println("Hibernate now 1");
#endif
          return nsec; 
    1380:	mov	r0, r4
    1382:	pop	{r3, r4, r5, r6, r7, pc}
    1384:	movs	r1, #17
    1386:	ldr	r0, [pc, #48]	; (13b8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x160>)
    1388:	bl	8974 <usb_serial_write>
    138c:	ldr	r0, [pc, #24]	; (13a8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    138e:	bl	a0e0 <Print::println()>
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
      { // need to close file
#if DO_DEBUG>0
        Serial.println("close acquisition");
#endif
        t_start = tt; // update start time for next file
    1392:	str	r4, [r5, #0]
        return -1; // flag to close acquisition
    1394:	mov.w	r0, #4294967295
    1398:	pop	{r3, r4, r5, r6, r7, pc}
    139a:	nop
    139c:	.word	0x20018ca0
    13a0:	.word	0xc22e4507
    13a4:	.word	0x00015180
    13a8:	.word	0x20013ae8
    13ac:	.word	0x00012c64
    13b0:	.word	0x20018f44
    13b4:	.word	0x00012c54
    13b8:	.word	0x00012c40

000013bc <setRTCTime(int, int, int, int, int, int)>:
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
    return text;
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
    13bc:	push	{r4, r5, r6, lr}
    13be:	sub	sp, #8
    13c0:	mov	r6, r0
    13c2:	ldr	r4, [sp, #28]
    13c4:	ldr	r5, [sp, #24]
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
    13c6:	strb.w	r3, [sp, #4]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    13ca:	add	r0, sp, #8
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
    13cc:	cmp	r4, #99	; 0x63
      yr = yr - 1970;
    13ce:	ite	gt
    13d0:	subwgt	r4, r4, #1970	; 0x7b2
  else
      yr += 30;  
    13d4:	addle	r4, #30
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    13d6:	strb.w	r2, [r0, #-8]!
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
    13da:	strb.w	r1, [sp, #1]
      yr = yr - 1970;
  else
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
    13de:	strb.w	r4, [sp, #6]
  tm.Month = mnth;
    13e2:	strb.w	r5, [sp, #5]
  tm.Day = dy;
  tm.Hour = hr;
    13e6:	strb.w	r6, [sp, #2]
  tm.Minute = min;
  tm.Second = sec;

  uint32_t tt = makeTime(tm);
    13ea:	bl	2764 <makeTime(tmElements_t const&)>
    13ee:	mov	r4, r0
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
	static void set(unsigned long t) __attribute__((always_inline)) { rtc_set(t); }
    13f0:	bl	8dcc <rtc_set>
  Teensy3Clock.set(tt); // for RTC
  setTime(tt); // local
    13f4:	mov	r0, r4
    13f6:	bl	29c4 <setTime(long)>
}
    13fa:	add	sp, #8
    13fc:	pop	{r4, r5, r6, pc}
    13fe:	nop

00001400 <doMenu()>:
      }
    }  
}

int16_t doMenu(void)
{
    1400:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1404:	ldr	r5, [pc, #700]	; (16c4 <doMenu()+0x2c4>)
      }
    }  
}

int16_t doMenu(void)
{
    1406:	sub	sp, #12
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1408:	bl	8920 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!Serial.available());
    140c:	cmp	r0, #0
    140e:	beq.n	1408 <doMenu()+0x8>
        virtual int read() { return usb_serial_getchar(); }
    1410:	bl	88a8 <usb_serial_getchar>
    1414:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    1416:	mov	r1, r4
    1418:	ldr	r0, [pc, #684]	; (16c8 <doMenu()+0x2c8>)
    141a:	bl	c3fc <strchr>
    141e:	cmp	r0, #0
    1420:	beq.n	1408 <doMenu()+0x8>
    { switch (c)
    1422:	cmp	r4, #63	; 0x3f
    1424:	beq.n	1446 <doMenu()+0x46>
    1426:	ble.w	157c <doMenu()+0x17c>
    142a:	cmp	r4, #97	; 0x61
    142c:	beq.w	16d4 <doMenu()+0x2d4>
    1430:	cmp	r4, #120	; 0x78
    1432:	bne.n	1408 <doMenu()+0x8>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = Serial.parseInt(); break;
    1434:	ldr	r0, [pc, #660]	; (16cc <doMenu()+0x2cc>)
    1436:	bl	a5cc <Stream::parseInt()>
    143a:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    143c:	cmp	r0, #0
    143e:	beq.n	1408 <doMenu()+0x8>
  return ret;
}
    1440:	add	sp, #12
    1442:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1446:	bl	8920 <usb_serial_available>
  Serial.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!Serial.available());
    144a:	cmp	r0, #0
    144c:	beq.n	1446 <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    144e:	bl	88a8 <usb_serial_getchar>
    1452:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    1454:	mov	r1, r4
    1456:	ldr	r0, [pc, #632]	; (16d0 <doMenu()+0x2d0>)
    1458:	bl	c3fc <strchr>
    145c:	cmp	r0, #0
    145e:	beq.n	1408 <doMenu()+0x8>
    { switch (c)
    1460:	subs	r4, #49	; 0x31
    1462:	cmp	r4, #67	; 0x43
    1464:	bhi.n	1408 <doMenu()+0x8>
    1466:	add	r3, pc, #4	; (adr r3, 146c <doMenu()+0x6c>)
    1468:	ldr.w	pc, [r3, r4, lsl #2]
    146c:	.word	0x00001839
    1470:	.word	0x00001845
    1474:	.word	0x00001851
    1478:	.word	0x0000185d
    147c:	.word	0x00001409
    1480:	.word	0x00001409
    1484:	.word	0x00001409
    1488:	.word	0x00001409
    148c:	.word	0x00001409
    1490:	.word	0x00001409
    1494:	.word	0x00001409
    1498:	.word	0x00001409
    149c:	.word	0x00001409
    14a0:	.word	0x00001409
    14a4:	.word	0x00001409
    14a8:	.word	0x00001409
    14ac:	.word	0x00001409
    14b0:	.word	0x00001409
    14b4:	.word	0x00001409
    14b8:	.word	0x00001409
    14bc:	.word	0x00001409
    14c0:	.word	0x00001409
    14c4:	.word	0x00001409
    14c8:	.word	0x00001409
    14cc:	.word	0x00001409
    14d0:	.word	0x00001409
    14d4:	.word	0x00001409
    14d8:	.word	0x00001409
    14dc:	.word	0x00001409
    14e0:	.word	0x00001409
    14e4:	.word	0x00001409
    14e8:	.word	0x00001409
    14ec:	.word	0x00001409
    14f0:	.word	0x00001409
    14f4:	.word	0x00001409
    14f8:	.word	0x00001409
    14fc:	.word	0x00001409
    1500:	.word	0x00001409
    1504:	.word	0x00001409
    1508:	.word	0x00001409
    150c:	.word	0x00001409
    1510:	.word	0x00001409
    1514:	.word	0x00001409
    1518:	.word	0x00001409
    151c:	.word	0x00001409
    1520:	.word	0x00001409
    1524:	.word	0x00001409
    1528:	.word	0x00001409
    152c:	.word	0x00001869
    1530:	.word	0x00001409
    1534:	.word	0x00001409
    1538:	.word	0x00001875
    153c:	.word	0x00001409
    1540:	.word	0x00001409
    1544:	.word	0x00001409
    1548:	.word	0x00001409
    154c:	.word	0x00001409
    1550:	.word	0x00001409
    1554:	.word	0x00001409
    1558:	.word	0x00001409
    155c:	.word	0x00001409
    1560:	.word	0x00001885
    1564:	.word	0x00001891
    1568:	.word	0x00001409
    156c:	.word	0x00001409
    1570:	.word	0x0000189d
    1574:	.word	0x00001409
    1578:	.word	0x000018a9
  {
    while(!Serial.available());
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    157c:	cmp	r4, #33	; 0x21
    157e:	bne.w	1408 <doMenu()+0x8>
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    1582:	add.w	r6, r5, #12
    1586:	ldmia.w	r6, {r6, r7, r8}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    158a:	bl	8920 <usb_serial_available>
    //int T4=acqParameters.T4; mot used
    //
    while(!Serial.available());
    158e:	cmp	r0, #0
    1590:	beq.n	158a <doMenu()+0x18a>
        virtual int read() { return usb_serial_getchar(); }
    1592:	bl	88a8 <usb_serial_getchar>
    1596:	uxtb	r4, r0
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    1598:	mov	r1, r4
    159a:	ldr	r0, [pc, #308]	; (16d0 <doMenu()+0x2d0>)
    159c:	bl	c3fc <strchr>
    15a0:	cmp	r0, #0
    15a2:	beq.w	1408 <doMenu()+0x8>
    { switch (c)
    15a6:	subs	r4, #49	; 0x31
    15a8:	cmp	r4, #67	; 0x43
    15aa:	bhi.w	1408 <doMenu()+0x8>
    15ae:	add	r3, pc, #4	; (adr r3, 15b4 <doMenu()+0x1b4>)
    15b0:	ldr.w	pc, [r3, r4, lsl #2]
    15b4:	.word	0x000018b9
    15b8:	.word	0x000018d1
    15bc:	.word	0x000018f1
    15c0:	.word	0x00001907
    15c4:	.word	0x00001409
    15c8:	.word	0x00001409
    15cc:	.word	0x00001409
    15d0:	.word	0x00001409
    15d4:	.word	0x00001409
    15d8:	.word	0x00001409
    15dc:	.word	0x00001409
    15e0:	.word	0x00001409
    15e4:	.word	0x00001409
    15e8:	.word	0x00001409
    15ec:	.word	0x00001409
    15f0:	.word	0x00001409
    15f4:	.word	0x00001409
    15f8:	.word	0x00001409
    15fc:	.word	0x00001409
    1600:	.word	0x00001409
    1604:	.word	0x00001409
    1608:	.word	0x00001409
    160c:	.word	0x00001409
    1610:	.word	0x00001409
    1614:	.word	0x00001409
    1618:	.word	0x00001409
    161c:	.word	0x00001409
    1620:	.word	0x00001409
    1624:	.word	0x00001409
    1628:	.word	0x00001409
    162c:	.word	0x00001409
    1630:	.word	0x00001409
    1634:	.word	0x00001409
    1638:	.word	0x00001409
    163c:	.word	0x00001409
    1640:	.word	0x00001409
    1644:	.word	0x00001409
    1648:	.word	0x00001409
    164c:	.word	0x00001409
    1650:	.word	0x00001409
    1654:	.word	0x00001409
    1658:	.word	0x00001409
    165c:	.word	0x00001409
    1660:	.word	0x00001409
    1664:	.word	0x00001409
    1668:	.word	0x00001409
    166c:	.word	0x00001409
    1670:	.word	0x00001409
    1674:	.word	0x00001925
    1678:	.word	0x00001409
    167c:	.word	0x00001409
    1680:	.word	0x00001941
    1684:	.word	0x00001409
    1688:	.word	0x00001409
    168c:	.word	0x00001409
    1690:	.word	0x00001409
    1694:	.word	0x00001409
    1698:	.word	0x00001409
    169c:	.word	0x00001409
    16a0:	.word	0x00001409
    16a4:	.word	0x00001409
    16a8:	.word	0x0000199f
    16ac:	.word	0x00001a15
    16b0:	.word	0x00001409
    16b4:	.word	0x00001409
    16b8:	.word	0x00001a2f
    16bc:	.word	0x00001409
    16c0:	.word	0x000017df
    16c4:	.word	0x20013968
    16c8:	.word	0x00012c74
    16cc:	.word	0x20013ae8
    16d0:	.word	0x00012c7c
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    16d4:	ldr	r3, [r5, #0]
    16d6:	ldr	r1, [pc, #736]	; (19b8 <doMenu()+0x5b8>)
    16d8:	ldr	r0, [pc, #736]	; (19bc <doMenu()+0x5bc>)
    16da:	movs	r2, #111	; 0x6f
    16dc:	bl	a110 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d acq_time\n\r",    'a',acqParameters.ad);
    16e0:	mov	r2, r4
    16e2:	ldr	r3, [r5, #4]
    16e4:	ldr	r1, [pc, #728]	; (19c0 <doMenu()+0x5c0>)
    16e6:	ldr	r0, [pc, #724]	; (19bc <doMenu()+0x5bc>)
    16e8:	bl	a110 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d rep_rate\n\r",    'r',acqParameters.ar);
    16ec:	ldr	r3, [r5, #8]
    16ee:	ldr	r1, [pc, #724]	; (19c4 <doMenu()+0x5c4>)
    16f0:	ldr	r0, [pc, #712]	; (19bc <doMenu()+0x5bc>)
    16f2:	movs	r2, #114	; 0x72
    16f4:	bl	a110 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d first_hour\n\r",  '1',acqParameters.T1);
    16f8:	ldr	r3, [r5, #12]
    16fa:	ldr	r1, [pc, #716]	; (19c8 <doMenu()+0x5c8>)
    16fc:	ldr	r0, [pc, #700]	; (19bc <doMenu()+0x5bc>)
    16fe:	movs	r2, #49	; 0x31
    1700:	bl	a110 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d second_hour\n\r", '2',acqParameters.T2);
    1704:	ldr	r3, [r5, #16]
    1706:	ldr	r1, [pc, #708]	; (19cc <doMenu()+0x5cc>)
    1708:	ldr	r0, [pc, #688]	; (19bc <doMenu()+0x5bc>)
    170a:	movs	r2, #50	; 0x32
    170c:	bl	a110 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d third_hour\n\r",  '3',acqParameters.T3);
    1710:	ldr	r3, [r5, #20]
    1712:	ldr	r1, [pc, #700]	; (19d0 <doMenu()+0x5d0>)
    1714:	ldr	r0, [pc, #676]	; (19bc <doMenu()+0x5bc>)
    1716:	movs	r2, #51	; 0x33
    1718:	bl	a110 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d last_hour\n\r",   '4',acqParameters.T4);
    171c:	ldr	r3, [r5, #24]
    171e:	ldr	r1, [pc, #692]	; (19d4 <doMenu()+0x5d4>)
    1720:	ldr	r0, [pc, #664]	; (19bc <doMenu()+0x5bc>)
    1722:	movs	r2, #52	; 0x34
    1724:	bl	a110 <Print::printf(char const*, ...)>
  Serial.println();
    1728:	ldr	r0, [pc, #656]	; (19bc <doMenu()+0x5bc>)
    172a:	bl	a0e0 <Print::println()>
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
    172e:	ldr	r3, [pc, #680]	; (19d8 <doMenu()+0x5d8>)
    1730:	ldr	r1, [pc, #680]	; (19dc <doMenu()+0x5dc>)
    1732:	ldr	r0, [pc, #648]	; (19bc <doMenu()+0x5bc>)
    1734:	movs	r2, #110	; 0x6e
    1736:	bl	a110 <Print::printf(char const*, ...)>
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
    173a:	bl	734 <getDate(char*) [clone .constprop.40]>
    173e:	movs	r2, #100	; 0x64
    1740:	mov	r3, r0
    1742:	ldr	r1, [pc, #668]	; (19e0 <doMenu()+0x5e0>)
    1744:	ldr	r0, [pc, #628]	; (19bc <doMenu()+0x5bc>)
    1746:	bl	a110 <Print::printf(char const*, ...)>
  Serial.printf("%c %s time\n\r",         't',getTime(text));
    174a:	bl	700 <getTime(char*) [clone .constprop.39]>
    174e:	movs	r2, #116	; 0x74
    1750:	mov	r3, r0
    1752:	ldr	r1, [pc, #656]	; (19e4 <doMenu()+0x5e4>)
    1754:	ldr	r0, [pc, #612]	; (19bc <doMenu()+0x5bc>)
    1756:	bl	a110 <Print::printf(char const*, ...)>
  Serial.println();
    175a:	ldr	r0, [pc, #608]	; (19bc <doMenu()+0x5bc>)
    175c:	bl	a0e0 <Print::println()>
  Serial.printf("%c %5d inhibit window\r\n",        'i',snipParameters.inhib);
  Serial.printf("%c %5d noise repetition rate\r\n", 'k',snipParameters.nrep);
  Serial.printf("%c %5d pre trigger delay\r\n",     'p',snipParameters.ndel);
  #endif
  //
  Serial.println();
    1760:	ldr	r0, [pc, #600]	; (19bc <doMenu()+0x5bc>)
    1762:	bl	a0e0 <Print::println()>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1766:	movs	r1, #23
    1768:	ldr	r0, [pc, #636]	; (19e8 <doMenu()+0x5e8>)
    176a:	bl	8974 <usb_serial_write>
    176e:	ldr	r0, [pc, #588]	; (19bc <doMenu()+0x5bc>)
    1770:	bl	a0e0 <Print::println()>
    1774:	movs	r1, #64	; 0x40
    1776:	ldr	r0, [pc, #628]	; (19ec <doMenu()+0x5ec>)
    1778:	bl	8974 <usb_serial_write>
    177c:	ldr	r0, [pc, #572]	; (19bc <doMenu()+0x5bc>)
    177e:	bl	a0e0 <Print::println()>
    1782:	movs	r1, #32
    1784:	ldr	r0, [pc, #616]	; (19f0 <doMenu()+0x5f0>)
    1786:	bl	8974 <usb_serial_write>
    178a:	ldr	r0, [pc, #560]	; (19bc <doMenu()+0x5bc>)
    178c:	bl	a0e0 <Print::println()>
    1790:	movs	r1, #88	; 0x58
    1792:	ldr	r0, [pc, #608]	; (19f4 <doMenu()+0x5f4>)
    1794:	bl	8974 <usb_serial_write>
    1798:	ldr	r0, [pc, #544]	; (19bc <doMenu()+0x5bc>)
    179a:	bl	a0e0 <Print::println()>
    179e:	movs	r1, #38	; 0x26
    17a0:	ldr	r0, [pc, #596]	; (19f8 <doMenu()+0x5f8>)
    17a2:	bl	8974 <usb_serial_write>
    17a6:	ldr	r0, [pc, #532]	; (19bc <doMenu()+0x5bc>)
    17a8:	bl	a0e0 <Print::println()>
    17ac:	movs	r1, #69	; 0x45
    17ae:	ldr	r0, [pc, #588]	; (19fc <doMenu()+0x5fc>)
    17b0:	bl	8974 <usb_serial_write>
    17b4:	ldr	r0, [pc, #516]	; (19bc <doMenu()+0x5bc>)
    17b6:	bl	a0e0 <Print::println()>
    17ba:	movs	r1, #50	; 0x32
    17bc:	ldr	r0, [pc, #576]	; (1a00 <doMenu()+0x600>)
    17be:	bl	8974 <usb_serial_write>
    17c2:	ldr	r0, [pc, #504]	; (19bc <doMenu()+0x5bc>)
    17c4:	bl	a0e0 <Print::println()>
    17c8:	movs	r1, #43	; 0x2b
    17ca:	ldr	r0, [pc, #568]	; (1a04 <doMenu()+0x604>)
    17cc:	bl	8974 <usb_serial_write>
    17d0:	ldr	r0, [pc, #488]	; (19bc <doMenu()+0x5bc>)
    17d2:	bl	a0e0 <Print::println()>
  Serial.println("exter '!cval' to read value c=(0,a,r,1,2,3,4,n,d,t,c,h,w,s,m,i,k,p) and val is new value");
  Serial.println("  e.g.: !110 will set first hour to 10");
  Serial.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  Serial.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  Serial.println("        x-1 with exit and start immediately");
  Serial.println();
    17d6:	ldr	r0, [pc, #484]	; (19bc <doMenu()+0x5bc>)
    17d8:	bl	a0e0 <Print::println()>
    17dc:	b.n	1408 <doMenu()+0x8>
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
    17de:	ldr	r0, [pc, #476]	; (19bc <doMenu()+0x5bc>)
    17e0:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17e4:	subs	r4, r0, #0
    17e6:	blt.w	1aa4 <doMenu()+0x6a4>
    if(val>maxVal) val=maxVal;
    17ea:	cmp	r4, #23
    17ec:	it	ge
    17ee:	movge	r4, #23
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
    17f0:	ldr	r0, [pc, #456]	; (19bc <doMenu()+0x5bc>)
    17f2:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17f6:	subs	r6, r0, #0
    17f8:	blt.w	1a9c <doMenu()+0x69c>
    if(val>maxVal) val=maxVal;
    17fc:	cmp	r6, #59	; 0x3b
    17fe:	it	ge
    1800:	movge	r6, #59	; 0x3b
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
    1802:	ldr	r0, [pc, #440]	; (19bc <doMenu()+0x5bc>)
    1804:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1808:	subs	r7, r0, #0
    180a:	blt.w	1a98 <doMenu()+0x698>
    if(val>maxVal) val=maxVal;
    180e:	cmp	r7, #59	; 0x3b
    1810:	it	ge
    1812:	movge	r7, #59	; 0x3b
    setRTCTime(hour(),minute(),second(),day, month, year);
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    setRTCTime(hour,minutes,seconds,day(),month(),year());
    1814:	bl	2960 <day()>
    1818:	mov	r8, r0
    181a:	bl	2980 <month()>
    181e:	mov	r9, r0
    1820:	bl	29a0 <year()>
    1824:	str.w	r9, [sp]
    1828:	str	r0, [sp, #4]
    182a:	mov	r3, r8
    182c:	mov	r2, r7
    182e:	mov	r1, r6
    1830:	mov	r0, r4
    1832:	bl	13bc <setRTCTime(int, int, int, int, int, int)>
    1836:	b.n	1408 <doMenu()+0x8>
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
    1838:	ldr	r2, [r5, #12]
    183a:	ldr	r1, [pc, #460]	; (1a08 <doMenu()+0x608>)
    183c:	ldr	r0, [pc, #380]	; (19bc <doMenu()+0x5bc>)
    183e:	bl	a110 <Print::printf(char const*, ...)>
    1842:	b.n	1408 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
    1844:	ldr	r2, [r5, #16]
    1846:	ldr	r1, [pc, #448]	; (1a08 <doMenu()+0x608>)
    1848:	ldr	r0, [pc, #368]	; (19bc <doMenu()+0x5bc>)
    184a:	bl	a110 <Print::printf(char const*, ...)>
    184e:	b.n	1408 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
    1850:	ldr	r2, [r5, #20]
    1852:	ldr	r1, [pc, #436]	; (1a08 <doMenu()+0x608>)
    1854:	ldr	r0, [pc, #356]	; (19bc <doMenu()+0x5bc>)
    1856:	bl	a110 <Print::printf(char const*, ...)>
    185a:	b.n	1408 <doMenu()+0x8>
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
    185c:	ldr	r2, [r5, #24]
    185e:	ldr	r1, [pc, #424]	; (1a08 <doMenu()+0x608>)
    1860:	ldr	r0, [pc, #344]	; (19bc <doMenu()+0x5bc>)
    1862:	bl	a110 <Print::printf(char const*, ...)>
    1866:	b.n	1408 <doMenu()+0x8>
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
    1868:	ldr	r2, [r5, #4]
    186a:	ldr	r1, [pc, #412]	; (1a08 <doMenu()+0x608>)
    186c:	ldr	r0, [pc, #332]	; (19bc <doMenu()+0x5bc>)
    186e:	bl	a110 <Print::printf(char const*, ...)>
    1872:	b.n	1408 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
    1874:	bl	734 <getDate(char*) [clone .constprop.40]>
    1878:	ldr	r1, [pc, #400]	; (1a0c <doMenu()+0x60c>)
    187a:	mov	r2, r0
    187c:	ldr	r0, [pc, #316]	; (19bc <doMenu()+0x5bc>)
    187e:	bl	a110 <Print::printf(char const*, ...)>
    1882:	b.n	1408 <doMenu()+0x8>
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
    1884:	ldr	r2, [pc, #336]	; (19d8 <doMenu()+0x5d8>)
    1886:	ldr	r1, [pc, #388]	; (1a0c <doMenu()+0x60c>)
    1888:	ldr	r0, [pc, #304]	; (19bc <doMenu()+0x5bc>)
    188a:	bl	a110 <Print::printf(char const*, ...)>
    188e:	b.n	1408 <doMenu()+0x8>
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
    1890:	ldr	r2, [r5, #0]
    1892:	ldr	r1, [pc, #372]	; (1a08 <doMenu()+0x608>)
    1894:	ldr	r0, [pc, #292]	; (19bc <doMenu()+0x5bc>)
    1896:	bl	a110 <Print::printf(char const*, ...)>
    189a:	b.n	1408 <doMenu()+0x8>
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
    189c:	ldr	r2, [r5, #8]
    189e:	ldr	r1, [pc, #360]	; (1a08 <doMenu()+0x608>)
    18a0:	ldr	r0, [pc, #280]	; (19bc <doMenu()+0x5bc>)
    18a2:	bl	a110 <Print::printf(char const*, ...)>
    18a6:	b.n	1408 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
    18a8:	bl	700 <getTime(char*) [clone .constprop.39]>
    18ac:	ldr	r1, [pc, #348]	; (1a0c <doMenu()+0x60c>)
    18ae:	mov	r2, r0
    18b0:	ldr	r0, [pc, #264]	; (19bc <doMenu()+0x5bc>)
    18b2:	bl	a110 <Print::printf(char const*, ...)>
    18b6:	b.n	1408 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    18b8:	ldr	r0, [pc, #256]	; (19bc <doMenu()+0x5bc>)
    18ba:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    18be:	cmp	r0, #0
    18c0:	blt.w	1aa0 <doMenu()+0x6a0>
    18c4:	cmp	r0, #24
    18c6:	mov	r3, r0
    18c8:	it	ge
    18ca:	movge	r3, #24
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    18cc:	str	r3, [r5, #12]
    18ce:	b.n	1408 <doMenu()+0x8>
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    18d0:	ldr	r0, [pc, #232]	; (19bc <doMenu()+0x5bc>)
    18d2:	bl	a5cc <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    18d6:	cmp	r6, #23
    18d8:	bgt.w	1a58 <doMenu()+0x658>
  {
    if(val<minVal) val=minVal;
    18dc:	cmp	r6, r0
    18de:	bgt.n	18ec <doMenu()+0x4ec>
    if(val>maxVal) val=maxVal;
    18e0:	cmp	r0, #24
    18e2:	it	gt
    18e4:	movgt	r0, #24
    18e6:	bgt.w	1a5e <doMenu()+0x65e>
    18ea:	mov	r6, r0
    18ec:	mov	r0, r6
    18ee:	b.n	1a5e <doMenu()+0x65e>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    18f0:	ldr	r0, [pc, #200]	; (19bc <doMenu()+0x5bc>)
    18f2:	bl	a5cc <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    18f6:	cmp	r7, #23
    18f8:	bgt.w	1a4e <doMenu()+0x64e>
  {
    if(val<minVal) val=minVal;
    18fc:	cmp	r7, r0
    18fe:	ble.w	1a8c <doMenu()+0x68c>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    1902:	str	r7, [r5, #20]
    1904:	b.n	1408 <doMenu()+0x8>
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1906:	ldr	r0, [pc, #180]	; (19bc <doMenu()+0x5bc>)
    1908:	bl	a5cc <Stream::parseInt()>
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    190c:	cmp	r6, r8
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    190e:	mov	r4, r8
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1910:	ble.w	1a62 <doMenu()+0x662>
  {
    if(val<minVal) val=minVal;
    1914:	cmp	r8, r0
    1916:	bgt.n	1920 <doMenu()+0x520>
    if(val>maxVal) val=maxVal;
    1918:	cmp	r6, r0
    191a:	blt.w	1a88 <doMenu()+0x688>
    191e:	mov	r4, r0
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    1920:	mov	r6, r4
    1922:	b.n	1a88 <doMenu()+0x688>
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1924:	ldr	r0, [pc, #148]	; (19bc <doMenu()+0x5bc>)
    1926:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    192a:	cmp	r0, #0
    192c:	blt.w	1ab8 <doMenu()+0x6b8>
    1930:	cmp.w	r0, #131072	; 0x20000
    1934:	mov	r3, r0
    1936:	it	ge
    1938:	movge.w	r3, #131072	; 0x20000
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    193c:	str	r3, [r5, #4]
    193e:	b.n	1408 <doMenu()+0x8>
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    1940:	ldr	r0, [pc, #120]	; (19bc <doMenu()+0x5bc>)
    1942:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1946:	cmp.w	r0, #2000	; 0x7d0
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    194a:	mov	r4, r0
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    194c:	blt.n	1a48 <doMenu()+0x648>
    if(val>maxVal) val=maxVal;
    194e:	movw	r3, #3000	; 0xbb8
    1952:	cmp	r0, r3
    1954:	it	ge
    1956:	movge	r4, r3
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
    1958:	ldr	r0, [pc, #96]	; (19bc <doMenu()+0x5bc>)
    195a:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    195e:	subs	r7, r0, #0
    1960:	ble.w	1ab4 <doMenu()+0x6b4>
    if(val>maxVal) val=maxVal;
    1964:	cmp	r7, #12
    1966:	it	ge
    1968:	movge	r7, #12
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
    196a:	ldr	r0, [pc, #80]	; (19bc <doMenu()+0x5bc>)
    196c:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1970:	subs	r6, r0, #0
    1972:	ble.w	1ab0 <doMenu()+0x6b0>
    if(val>maxVal) val=maxVal;
    1976:	cmp	r6, #31
    1978:	it	ge
    197a:	movge	r6, #31
  setTime(tt); // local
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    setRTCTime(hour(),minute(),second(),day, month, year);
    197c:	bl	2900 <hour()>
    1980:	mov	r8, r0
    1982:	bl	2920 <minute()>
    1986:	mov	r9, r0
    1988:	bl	2940 <second()>
    198c:	mov	r1, r9
    198e:	mov	r2, r0
    1990:	str	r4, [sp, #4]
    1992:	mov	r0, r8
    1994:	str	r7, [sp, #0]
    1996:	mov	r3, r6
    1998:	bl	13bc <setRTCTime(int, int, int, int, int, int)>
    199c:	b.n	1408 <doMenu()+0x8>
    199e:	ldr	r4, [pc, #112]	; (1a10 <doMenu()+0x610>)
    19a0:	adds	r6, r4, #4
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    19a2:	bl	88a8 <usb_serial_getchar>
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
    19a6:	strb.w	r0, [r4, #1]!
    19aa:	cmp	r4, r6
    19ac:	bne.n	19a2 <doMenu()+0x5a2>
                  acqParameters.name[4]=0; break;
    19ae:	movs	r3, #0
    19b0:	strb.w	r3, [r5, #36]	; 0x24
    19b4:	b.n	1408 <doMenu()+0x8>
    19b6:	nop
    19b8:	.word	0x00012c98
    19bc:	.word	0x20013ae8
    19c0:	.word	0x00012cac
    19c4:	.word	0x00012cc0
    19c8:	.word	0x00012cd4
    19cc:	.word	0x00012ce8
    19d0:	.word	0x00012d00
    19d4:	.word	0x00012d14
    19d8:	.word	0x20013988
    19dc:	.word	0x00012d28
    19e0:	.word	0x00012d38
    19e4:	.word	0x00012d48
    19e8:	.word	0x00012d58
    19ec:	.word	0x00012d70
    19f0:	.word	0x00012db4
    19f4:	.word	0x00012dd8
    19f8:	.word	0x00012e34
    19fc:	.word	0x00012e5c
    1a00:	.word	0x00012ea4
    1a04:	.word	0x00012ed8
    1a08:	.word	0x00012c90
    1a0c:	.word	0x00012bf8
    1a10:	.word	0x20013987
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1a14:	ldr	r0, [pc, #168]	; (1ac0 <doMenu()+0x6c0>)
    1a16:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1a1a:	cmp	r0, #0
    1a1c:	blt.n	1aac <doMenu()+0x6ac>
    1a1e:	cmp.w	r0, #131072	; 0x20000
    1a22:	mov	r3, r0
    1a24:	it	ge
    1a26:	movge.w	r3, #131072	; 0x20000
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1a2a:	str	r3, [r5, #0]
    1a2c:	b.n	1408 <doMenu()+0x8>
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1a2e:	ldr	r0, [pc, #144]	; (1ac0 <doMenu()+0x6c0>)
    1a30:	bl	a5cc <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1a34:	cmp	r0, #0
    1a36:	blt.n	1aa8 <doMenu()+0x6a8>
    1a38:	cmp.w	r0, #131072	; 0x20000
    1a3c:	mov	r3, r0
    1a3e:	it	ge
    1a40:	movge.w	r3, #131072	; 0x20000
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1a44:	str	r3, [r5, #8]
    1a46:	b.n	1408 <doMenu()+0x8>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1a48:	mov.w	r4, #2000	; 0x7d0
    1a4c:	b.n	1958 <doMenu()+0x558>
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if((val>maxVal) && (val<minVal)) val=maxVal;
    1a4e:	cmp	r0, #24
    1a50:	it	ge
    1a52:	movge	r0, #24
    1a54:	mov	r7, r0
    1a56:	b.n	1902 <doMenu()+0x502>
    1a58:	cmp	r0, #24
    1a5a:	it	ge
    1a5c:	movge	r0, #24
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    1a5e:	str	r0, [r5, #16]
    1a60:	b.n	1408 <doMenu()+0x8>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    1a62:	cmp	r0, #0
    1a64:	blt.n	1abc <doMenu()+0x6bc>
    if(val>modVal) val=modVal;
    1a66:	cmp	r0, #24
    1a68:	it	ge
    1a6a:	movge	r0, #24
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    1a6c:	cmp	r6, r0
    1a6e:	bge.n	1a86 <doMenu()+0x686>
    1a70:	cmp	r8, r0
    1a72:	ble.n	1a86 <doMenu()+0x686>
    { if(val>(minVal+maxVal)/2) val = minVal; else val=maxVal;
    1a74:	add.w	r3, r6, r8
    1a78:	add.w	r3, r3, r3, lsr #31
    1a7c:	cmp.w	r0, r3, asr #1
    1a80:	it	gt
    1a82:	movgt	r6, r8
    1a84:	b.n	1a88 <doMenu()+0x688>
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    1a86:	mov	r6, r0
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1a88:	str	r6, [r5, #24]
    1a8a:	b.n	1408 <doMenu()+0x8>
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
    1a8c:	cmp	r0, #24
    1a8e:	it	gt
    1a90:	movgt	r7, #24
    1a92:	bgt.w	1902 <doMenu()+0x502>
    1a96:	b.n	1a54 <doMenu()+0x654>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1a98:	movs	r7, #0
    1a9a:	b.n	1814 <doMenu()+0x414>
    1a9c:	movs	r6, #0
    1a9e:	b.n	1802 <doMenu()+0x402>
    1aa0:	movs	r3, #0
    1aa2:	b.n	18cc <doMenu()+0x4cc>
    1aa4:	movs	r4, #0
    1aa6:	b.n	17f0 <doMenu()+0x3f0>
    1aa8:	movs	r3, #0
    1aaa:	b.n	1a44 <doMenu()+0x644>
    1aac:	movs	r3, #0
    1aae:	b.n	1a2a <doMenu()+0x62a>
    1ab0:	movs	r6, #1
    1ab2:	b.n	197c <doMenu()+0x57c>
    1ab4:	movs	r7, #1
    1ab6:	b.n	196a <doMenu()+0x56a>
    1ab8:	movs	r3, #0
    1aba:	b.n	193c <doMenu()+0x53c>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    1abc:	movs	r0, #0
    1abe:	b.n	1a6c <doMenu()+0x66c>
    1ac0:	.word	0x20013ae8

00001ac4 <setup>:
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
//int started=0;
extern "C" void setup() {
    1ac4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // put your setup code here, to run once:
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    1ac8:	movs	r0, #3
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
//int started=0;
extern "C" void setup() {
    1aca:	sub	sp, #12
  // put your setup code here, to run once:
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    1acc:	movs	r1, #2
    1ace:	bl	8e18 <pinMode>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);
    1ad2:	ldr	r0, [pc, #328]	; (1c1c <setup+0x158>)
    1ad4:	ldr	r4, [pc, #328]	; (1c20 <setup+0x15c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1ad6:	ldr	r5, [pc, #332]	; (1c24 <setup+0x160>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1ad8:	ldr	r7, [pc, #332]	; (1c28 <setup+0x164>)
    1ada:	ldr	r6, [pc, #336]	; (1c2c <setup+0x168>)
    1adc:	bl	2a08 <setSyncProvider(long (*)())>
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1ae0:	ldrb	r3, [r4, #0]

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    1ae2:	movs	r0, #3
    1ae4:	cmp	r3, #0
    1ae6:	beq.w	1c0e <setup+0x14a>
    1aea:	ldrb	r3, [r5, #0]
    1aec:	lsls	r2, r3, #31
    1aee:	bpl.w	1c0e <setup+0x14a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1af2:	ldr	r3, [r7, #0]
    1af4:	ldr	r2, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1af6:	subs	r3, r3, r2
    1af8:	cmp	r3, #14
    1afa:	bls.w	1c0e <setup+0x14a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1afe:	movs	r1, #18
    1b00:	ldr	r0, [pc, #300]	; (1c30 <setup+0x16c>)
    1b02:	bl	8974 <usb_serial_write>
    1b06:	ldr	r0, [pc, #300]	; (1c34 <setup+0x170>)
    1b08:	bl	a0e0 <Print::println()>
  // for 16bit resolution
  temperature = -0.0293 * analogRead(70) + 440.5;
*/

#define MAUDIO (MAX_Q+MDEL+50)
	AudioMemory (MAUDIO); // 600 blocks use about 200 kB (requires Teensy 3.6)
    1b0c:	movw	r1, #549	; 0x225
    1b10:	ldr	r0, [pc, #292]	; (1c38 <setup+0x174>)
    1b12:	bl	a1bc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
}

void I2S_stop(void)
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1b16:	ldr	r2, [pc, #292]	; (1c3c <setup+0x178>)
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1b18:	ldr	r0, [pc, #292]	; (1c40 <setup+0x17c>)
    1b1a:	ldr	r3, [r2, #0]
    1b1c:	bic.w	r3, r3, #2415919104	; 0x90000000
    1b20:	str	r3, [r2, #0]

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1b22:	movs	r4, #8
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1b24:	bl	d0c <c_uSD::init()>

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1b28:	ldr	r3, [pc, #280]	; (1c44 <setup+0x180>)
    1b2a:	str	r4, [sp, #0]
    1b2c:	mov	r2, r4
    1b2e:	ldr	r1, [pc, #280]	; (1c48 <setup+0x184>)
    1b30:	ldr	r0, [pc, #268]	; (1c40 <setup+0x17c>)
    1b32:	bl	fac <c_uSD::loadConfig(unsigned long*, int, long*, int)>
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
    1b36:	ldr	r3, [pc, #276]	; (1c4c <setup+0x188>)
    1b38:	ldr	r3, [r3, #0]
    1b3a:	lsls	r3, r3, #19
    1b3c:	bmi.n	1b50 <setup+0x8c>
#endif

  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    1b3e:	bl	1400 <doMenu()>
    if(ret<0) ;  // should shutdown now (not implemented) // keep compiler happy
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1b42:	str	r4, [sp, #0]
    1b44:	mov	r2, r4
    1b46:	ldr	r3, [pc, #252]	; (1c44 <setup+0x180>)
    1b48:	ldr	r1, [pc, #252]	; (1c48 <setup+0x184>)
    1b4a:	ldr	r0, [pc, #244]	; (1c40 <setup+0x17c>)
    1b4c:	bl	e84 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
  }
  //
  #if MDEL<0
    // check if it is our time to record
    int32_t nsec;
    nsec=checkDutyCycle(&acqParameters, -1);
    1b50:	mov.w	r1, #4294967295
    1b54:	ldr	r0, [pc, #240]	; (1c48 <setup+0x184>)
    1b56:	bl	1258 <checkDutyCycle(ACQ_Parameters_s*, short)>
    if(nsec>0) 
    1b5a:	cmp	r0, #0
    1b5c:	ble.n	1b6c <setup+0xa8>
    iscl[2] = (int) (i3-1);
}

void I2S_stopClock(void)
{
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
    1b5e:	ldr	r2, [pc, #240]	; (1c50 <setup+0x18c>)
    1b60:	ldr	r3, [r2, #0]
    1b62:	bic.w	r3, r3, #32768	; 0x8000
    1b66:	str	r3, [r2, #0]
    { 
      #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // will not return if we should not continue with acquisition 
    1b68:	bl	10c0 <setWakeupCallandSleep(unsigned long)>
  
  #elif (ACQ == _I2S_QUAD)
    I2S_modification(F_SAMP,16,4); // I2S_Quad not modified for 32 bit (therefore 16 bit)
  
  #elif((ACQ == _I2S_32) || (ACQ == _I2S_32_MONO))
    I2S_modification(F_SAMP,32,2);
    1b6c:	movs	r2, #2
    1b6e:	movs	r1, #32
    1b70:	movw	r0, #48000	; 0xbb80
    1b74:	bl	b2c <I2S_modification(unsigned long, unsigned short, int)>
public:

	I2S_32(void) : AudioStream(0, NULL) {begin();}
  void begin(void);
  virtual void update(void);
  void digitalShift(int16_t val){I2S_32::shift=val;}
    1b78:	ldr	r3, [pc, #216]	; (1c54 <setup+0x190>)
  state=0;
}

void c_uSD::setPrefix(char *prefix)
{
  strcpy(name,prefix);
    1b7a:	ldr	r1, [pc, #220]	; (1c58 <setup+0x194>)
    1b7c:	ldr	r0, [pc, #220]	; (1c5c <setup+0x198>)
    1b7e:	ldr	r7, [pc, #224]	; (1c60 <setup+0x19c>)
    1b80:	movs	r2, #12
    1b82:	strh	r2, [r3, #0]
    1b84:	bl	c4cc <strcpy>
  // lets start
  #if MDET
    process1.begin(&snipParameters); 
  #endif

  for(int ii=0; ii<NCH; ii++) queue[ii].begin();
    1b88:	mov.w	r8, #0
    1b8c:	mov	r9, r7
{
	uint16_t t;

	if (userblock) {
		release(userblock);
		userblock = NULL;
    1b8e:	mov	fp, r8
	}
	t = tail;
    1b90:	movw	sl, #1044	; 0x414
template <int mq>
void mRecordQueue<mq>::clear(void)
{
	uint16_t t;

	if (userblock) {
    1b94:	ldr.w	r0, [r9, #1032]	; 0x408
    1b98:	cbz	r0, 1ba2 <setup+0xde>
		release(userblock);
    1b9a:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1b9e:	str.w	fp, [r9, #1032]	; 0x408
	}
	t = tail;
    1ba2:	mla	r5, sl, r8, r7
    1ba6:	ldrh.w	r4, [r5, #1038]	; 0x40e
	while (t != head) {
    1baa:	ldrh.w	r3, [r5, #1036]	; 0x40c

	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
    1bae:	uxth	r4, r4
	while (t != head) {
    1bb0:	uxth	r3, r3
    1bb2:	cmp	r4, r3
    1bb4:	beq.n	1be0 <setup+0x11c>
		if (++t >= mq) t = 0;
		release(queue[t]);
    1bb6:	add.w	r6, r8, r8, lsl #6
    1bba:	add.w	r6, r8, r6, lsl #2
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
		if (++t >= mq) t = 0;
    1bbe:	adds	r4, #1
    1bc0:	uxth	r4, r4
    1bc2:	cmp	r4, #249	; 0xf9
    1bc4:	it	hi
    1bc6:	movhi	r4, #0
    1bc8:	mov	r3, r4
		release(queue[t]);
    1bca:	add	r3, r6
    1bcc:	adds	r3, #8
    1bce:	ldr.w	r0, [r7, r3, lsl #2]
    1bd2:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
    1bd6:	ldrh.w	r3, [r5, #1036]	; 0x40c
    1bda:	uxth	r3, r3
    1bdc:	cmp	r3, r4
    1bde:	bne.n	1bbe <setup+0xfa>
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1be0:	movs	r2, #1
	t = tail;
	while (t != head) {
		if (++t >= mq) t = 0;
		release(queue[t]);
	}
	tail = t;
    1be2:	mla	r3, sl, r8, r7
    1be6:	add	r8, r2
    1be8:	cmp.w	r8, #2
    1bec:	strh.w	r4, [r3, #1038]	; 0x40e
    1bf0:	addw	r9, r9, #1044	; 0x414
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1bf4:	strh.w	r2, [r3, #1040]	; 0x410
    1bf8:	bne.n	1b94 <setup+0xd0>
    1bfa:	movs	r1, #12
    1bfc:	ldr	r0, [pc, #100]	; (1c64 <setup+0x1a0>)
    1bfe:	bl	8974 <usb_serial_write>
    1c02:	ldr	r0, [pc, #48]	; (1c34 <setup+0x170>)
  //
  Serial.println("End of Setup");
//  started=0;
}
    1c04:	add	sp, #12
    1c06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c0a:	b.w	a0e0 <Print::println()>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    1c0e:	bl	8dfc <digitalRead>
    1c12:	cmp	r0, #0
    1c14:	beq.w	1ae0 <setup+0x1c>
    1c18:	b.n	1afe <setup+0x3a>
    1c1a:	nop
    1c1c:	.word	0x00000695
    1c20:	.word	0x20019e3c
    1c24:	.word	0x20019d54
    1c28:	.word	0x20019d58
    1c2c:	.word	0x20019f3c
    1c30:	.word	0x00012f04
    1c34:	.word	0x20013ae8
    1c38:	.word	0x1fff0600
    1c3c:	.word	0x4002f080
    1c40:	.word	0x20014564
    1c44:	.word	0x20013944
    1c48:	.word	0x20013968
    1c4c:	.word	0x400ff010
    1c50:	.word	0x4004803c
    1c54:	.word	0x20013938
    1c58:	.word	0x20013988
    1c5c:	.word	0x20014a66
    1c60:	.word	0x20018f54
    1c64:	.word	0x00012f18

00001c68 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    1c68:	mov	r5, r0
    1c6a:	ldr.w	r0, [r0, #1156]	; 0x484
    1c6e:	push	{r3, lr}
    1c70:	mov	r4, r1
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1c72:	cbz	r0, 1ca4 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1c74:	ldr	r3, [r0, #0]
    1c76:	ldr	r3, [r3, #36]	; 0x24
    1c78:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    1c7a:	cbnz	r0, 1ca4 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1c7c:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1c80:	cbz	r3, 1c8c <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    1c82:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1c84:	cbz	r3, 1c9a <SdBase<FsVolume>::errorHalt(Print*)+0x32>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    1c86:	bl	9e44 <yield>
    1c8a:	b.n	1c86 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1c8c:	ldr.w	r3, [r5, #1148]	; 0x47c
    1c90:	cbz	r3, 1c9a <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    1c92:	ldrb.w	r3, [r3, #1084]	; 0x43c
    1c96:	cmp	r3, #0
    1c98:	bne.n	1c86 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1c9a:	mov	r0, r4
    1c9c:	ldr	r1, [pc, #84]	; (1cf4 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1c9e:	bl	888 <Print::println(__FlashStringHelper const*)>
    1ca2:	b.n	1c86 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1ca4:	ldr	r1, [pc, #80]	; (1cf8 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1ca6:	mov	r0, r4
    1ca8:	bl	86c <Print::write(char const*)>
    1cac:	ldr.w	r0, [r5, #1156]	; 0x484
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1cb0:	cbz	r0, 1cf0 <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    1cb2:	ldr	r3, [r0, #0]
    1cb4:	ldr	r3, [r3, #36]	; 0x24
    1cb6:	blx	r3
    1cb8:	mov	r1, r0
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1cba:	movs	r3, #0
    1cbc:	movs	r2, #16
    1cbe:	mov	r0, r4
    1cc0:	bl	a12c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1cc4:	ldr	r1, [pc, #52]	; (1cfc <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1cc6:	mov	r0, r4
    1cc8:	bl	86c <Print::write(char const*)>
    1ccc:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1cd0:	cbz	r0, 1cec <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    1cd2:	ldr	r3, [r0, #0]
    1cd4:	ldr	r3, [r3, #40]	; 0x28
    1cd6:	blx	r3
    1cd8:	uxtb	r1, r0
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1cda:	movs	r3, #0
    1cdc:	movs	r2, #16
    1cde:	mov	r0, r4
    1ce0:	bl	a12c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1ce4:	mov	r0, r4
    1ce6:	bl	a0e0 <Print::println()>
    1cea:	b.n	1c86 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1cec:	mov	r1, r0
    1cee:	b.n	1cda <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1cf0:	movs	r1, #41	; 0x29
    1cf2:	b.n	1cba <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    1cf4:	.word	0x00012f38
    1cf8:	.word	0x00012f28
    1cfc:	.word	0x00012f34

00001d00 <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1d00:	ldr	r4, [pc, #28]	; (1d20 <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1d02:	push	{r3, lr}
    1d04:	mov	r5, r0
    1d06:	mov	r6, r1
    1d08:	mov	r0, r4
    1d0a:	ldr	r1, [pc, #24]	; (1d24 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1d0c:	bl	86c <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1d10:	mov	r1, r6
    1d12:	mov	r0, r4
    1d14:	bl	888 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1d18:	mov	r1, r4
    1d1a:	mov	r0, r5
    1d1c:	bl	1c68 <SdBase<FsVolume>::errorHalt(Print*)>
    1d20:	.word	0x20013ae8
    1d24:	.word	0x00012f4c

00001d28 <c_uSD::write(short*, long)>:
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1d28:	push	{r4, r5, r6, lr}
    1d2a:	mov	r4, r0
  if(state == 0)
    1d2c:	ldrsh.w	r0, [r0, #1276]	; 0x4fc
{
  strcpy(name,prefix);
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1d30:	mov	r6, r1
    1d32:	mov	r5, r2
  if(state == 0)
    1d34:	cbz	r0, 1d44 <c_uSD::write(short*, long)+0x1c>
    #endif
    state=1; // flag that file is open
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
    1d36:	subs	r3, r0, #1
    1d38:	uxth	r3, r3
    1d3a:	cmp	r3, #1
    1d3c:	bls.n	1d8a <c_uSD::write(short*, long)+0x62>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
  }
  
  if(state == 3)
    1d3e:	cmp	r0, #3
    1d40:	beq.n	1dfc <c_uSD::write(short*, long)+0xd4>
  {
    state=close();
  }
  return state;
}
    1d42:	pop	{r4, r5, r6, pc}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    1d44:	addw	r0, r4, #1282	; 0x502
    1d48:	bl	c28 <makeFilename(char*)>
    if(!filename) {state=-1; return state;} // flag to do not anything
    1d4c:	cmp	r0, #0
    1d4e:	beq.n	1e08 <c_uSD::write(short*, long)+0xe0>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1d50:	ldr	r3, [pc, #204]	; (1e20 <c_uSD::write(short*, long)+0xf8>)
    1d52:	ldr	r1, [r3, #0]
    1d54:	cmp	r1, #0
    1d56:	beq.n	1dd6 <c_uSD::write(short*, long)+0xae>
    1d58:	mov	r2, r0
    1d5a:	movw	r3, #1538	; 0x602
    1d5e:	addw	r0, r4, #1212	; 0x4bc
    1d62:	bl	6db8 <FsBaseFile::open(FsVolume*, char const*, int)>
    1d66:	cbz	r0, 1dd6 <c_uSD::write(short*, long)+0xae>
    1d68:	ldr.w	r0, [r4, #1268]	; 0x4f4
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1d6c:	cbz	r0, 1dba <c_uSD::write(short*, long)+0x92>
   *
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
    1d6e:	mov.w	r1, #41943040	; 0x2800000
    1d72:	bl	52d4 <FatFile::preAllocate(unsigned long)>
    1d76:	cbz	r0, 1dce <c_uSD::write(short*, long)+0xa6>
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    #ifdef  GEN_WAV_FILE // keep first record
          memcpy(header,(const char *)data,512);
    1d78:	mov.w	r2, #512	; 0x200
    1d7c:	mov	r1, r6
    1d7e:	ldr	r0, [pc, #164]	; (1e24 <c_uSD::write(short*, long)+0xfc>)
    1d80:	bl	8774 <memcpy>
    #endif
    state=1; // flag that file is open
    nbuf=0;
    1d84:	movs	r3, #0
    1d86:	strh.w	r3, [r4, #1278]	; 0x4fe
    1d8a:	ldr.w	r0, [r4, #1268]	; 0x4f4
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1d8e:	movs	r3, #2
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1d90:	lsls	r5, r5, #1
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1d92:	strh.w	r3, [r4, #1276]	; 0x4fc
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1d96:	cbz	r0, 1dde <c_uSD::write(short*, long)+0xb6>
    1d98:	mov	r1, r6
    1d9a:	mov	r2, r5
    1d9c:	bl	5cbc <FatFile::write(void const*, unsigned int)>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1da0:	cmp	r0, r5
    1da2:	bne.n	1e16 <c_uSD::write(short*, long)+0xee>
    nbuf++;
    1da4:	ldrh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    1da8:	ldrsh.w	r2, [r4, #1280]	; 0x500
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    1dac:	adds	r3, #1
    1dae:	strh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    1db2:	cbnz	r2, 1df0 <c_uSD::write(short*, long)+0xc8>
    1db4:	ldrsh.w	r0, [r4, #1276]	; 0x4fc
    1db8:	b.n	1d3e <c_uSD::write(short*, long)+0x16>
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1dba:	ldr.w	r0, [r4, #1272]	; 0x4f8
    1dbe:	cbz	r0, 1dce <c_uSD::write(short*, long)+0xa6>
    1dc0:	mov.w	r2, #41943040	; 0x2800000
    1dc4:	movs	r3, #0
    1dc6:	bl	4c60 <ExFatFile::preAllocate(unsigned long long)>
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    1dca:	cmp	r0, #0
    1dcc:	bne.n	1d78 <c_uSD::write(short*, long)+0x50>
    1dce:	mov	r0, r4
    1dd0:	ldr	r1, [pc, #84]	; (1e28 <c_uSD::write(short*, long)+0x100>)
    1dd2:	bl	1d00 <SdBase<FsVolume>::errorHalt(char const*)>
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    1dd6:	mov	r0, r4
    1dd8:	ldr	r1, [pc, #80]	; (1e2c <c_uSD::write(short*, long)+0x104>)
    1dda:	bl	1d00 <SdBase<FsVolume>::errorHalt(char const*)>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1dde:	ldr.w	r0, [r4, #1272]	; 0x4f8
    1de2:	cmp	r0, #0
    1de4:	beq.n	1da0 <c_uSD::write(short*, long)+0x78>
    1de6:	mov	r1, r6
    1de8:	mov	r2, r5
    1dea:	bl	4e7c <ExFatFile::write(void const*, unsigned int)>
    1dee:	b.n	1da0 <c_uSD::write(short*, long)+0x78>
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
    1df0:	movs	r2, #0
    1df2:	movs	r3, #3
    1df4:	strh.w	r2, [r4, #1280]	; 0x500
    1df8:	strh.w	r3, [r4, #1276]	; 0x4fc
  }
  
  if(state == 3)
  {
    state=close();
    1dfc:	mov	r0, r4
    1dfe:	bl	d7c <c_uSD::close()>
    1e02:	strh.w	r0, [r4, #1276]	; 0x4fc
  }
  return state;
    1e06:	pop	{r4, r5, r6, pc}
int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    1e08:	movw	r3, #65535	; 0xffff
    1e0c:	strh.w	r3, [r4, #1276]	; 0x4fc
    1e10:	mov.w	r0, #4294967295
    1e14:	pop	{r4, r5, r6, pc}
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1e16:	mov	r0, r4
    1e18:	ldr	r1, [pc, #20]	; (1e30 <c_uSD::write(short*, long)+0x108>)
    1e1a:	bl	1d00 <SdBase<FsVolume>::errorHalt(char const*)>
    1e1e:	nop
    1e20:	.word	0x20019cf8
    1e24:	.word	0x20014a78
    1e28:	.word	0x00012f80
    1e2c:	.word	0x00012f6c
    1e30:	.word	0x00012f54

00001e34 <loop>:
  int16_t mustStore=1;
#else
  int16_t mustStore=0;
#endif

extern "C" void loop() {
    1e34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    1e38:	ldr	r6, [pc, #700]	; (20f8 <loop+0x2c4>)
    1e3a:	ldrh.w	r3, [r6, #1036]	; 0x40c
  t = tail;
    1e3e:	ldrh.w	r1, [r6, #1038]	; 0x40e
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    1e42:	uxth	r3, r3
  t = tail;
    1e44:	uxth	r1, r1
  if (h >= t) return h - t;
    1e46:	cmp	r3, r1
  return mq + h - t;
    1e48:	itte	cc
    1e4a:	addcc.w	r2, r3, #250	; 0xfa
    1e4e:	subcc	r3, r2, r1
{
  uint16_t h, t;

  h = head;
  t = tail;
  if (h >= t) return h - t;
    1e50:	subcs	r3, r3, r1
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    1e52:	ldrh.w	r2, [r6, #2080]	; 0x820
  t = tail;
    1e56:	ldrh.w	r1, [r6, #2082]	; 0x822
  if (h >= t) return h - t;
    1e5a:	uxth	r3, r3
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    1e5c:	uxth	r2, r2
  t = tail;
    1e5e:	uxth	r1, r1
  // put your main code here, to run repeatedly:
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
    1e60:	adds	r3, #0
    1e62:	it	ne
    1e64:	movne	r3, #1
  if (h >= t) return h - t;
    1e66:	cmp	r2, r1
  return mq + h - t;
    1e68:	it	cc
    1e6a:	addcc	r2, #250	; 0xfa
    1e6c:	subs	r2, r2, r1
    1e6e:	uxth	r2, r2
  int16_t mustStore=1;
#else
  int16_t mustStore=0;
#endif

extern "C" void loop() {
    1e70:	sub	sp, #32
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    1e72:	cmp	r2, #0
    1e74:	beq.w	1fd6 <loop+0x1a2>

  if(have_data)
    1e78:	cmp	r3, #0
    1e7a:	beq.w	1fd6 <loop+0x1a2>
  { // have data on queue
//    started=1; // flag that we have now data
    #if MDEL<0
      int32_t nsec;
      nsec=checkDutyCycle(&acqParameters, state);
    1e7e:	ldr	r4, [pc, #636]	; (20fc <loop+0x2c8>)
    1e80:	ldr	r0, [pc, #636]	; (2100 <loop+0x2cc>)
    1e82:	ldrsh.w	r1, [r4]
    1e86:	bl	1258 <checkDutyCycle(ACQ_Parameters_s*, short)>
      if(nsec<0) { uSD.setClosing();} // this will be last record in file
    1e8a:	cmp	r0, #0
    1e8c:	blt.w	20a6 <loop+0x272>
      if(nsec>0) 
    1e90:	beq.n	1ea0 <loop+0x6c>
    1e92:	ldr	r2, [pc, #624]	; (2104 <loop+0x2d0>)
    1e94:	ldr	r3, [r2, #0]
    1e96:	bic.w	r3, r3, #32768	; 0x8000
    1e9a:	str	r3, [r2, #0]
      { 
        #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
          I2S_stopClock();
        #endif
        setWakeupCallandSleep(nsec); // file closed sleep now
    1e9c:	bl	10c0 <setWakeupCallandSleep(unsigned long)>
    1ea0:	ldr	r1, [pc, #596]	; (20f8 <loop+0x2c4>)
  int16_t mustStore=1;
#else
  int16_t mustStore=0;
#endif

extern "C" void loop() {
    1ea2:	movs	r2, #0
    1ea4:	add	r0, sp, #24
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    1ea6:	movw	r5, #1044	; 0x414
template <int mq>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
    1eaa:	ldr.w	r3, [r1, #1032]	; 0x408
    1eae:	cmp	r3, #0
    1eb0:	beq.w	215c <loop+0x328>
    1eb4:	movs	r3, #0
      
    #endif
    //
    // fetch data from queues
    int16_t * data[NCH];
    for(int ii=0; ii<NCH; ii++) data[ii] = (int16_t *)queue[ii].readBuffer();
    1eb6:	str.w	r3, [r0, r2, lsl #2]
    1eba:	adds	r2, #1
    1ebc:	cmp	r2, #2
    1ebe:	addw	r1, r1, #1044	; 0x414
    1ec2:	bne.n	1eaa <loop+0x76>
    1ec4:	ldr	r3, [pc, #576]	; (2108 <loop+0x2d4>)
    1ec6:	ldr	r1, [sp, #24]
    1ec8:	ldr	r2, [sp, #28]
    1eca:	add.w	r5, r3, #512	; 0x200
    1ece:	subs	r1, #2
    1ed0:	subs	r2, #2
    // multiplex data
    int16_t *tmp = tempBuffer;
    for(int ii=0;ii<AUDIO_BLOCK_SAMPLES;ii++) for(int jj=0; jj<NCH; jj++) *tmp++ = *data[jj]++;
    1ed2:	ldrsh.w	r0, [r1, #2]!
    1ed6:	strh.w	r0, [r3, #-4]
    1eda:	ldrsh.w	r0, [r2, #2]!
    1ede:	strh.w	r0, [r3, #-2]
    1ee2:	adds	r3, #4
    1ee4:	cmp	r3, r5
    1ee6:	bne.n	1ed2 <loop+0x9e>
}

template <int mq>
void mRecordQueue<mq>::freeBuffer(void)
{
	if (userblock == NULL) return;
    1ee8:	ldr.w	r0, [r6, #1032]	; 0x408
    1eec:	ldr	r5, [pc, #520]	; (20f8 <loop+0x2c4>)
    1eee:	cbz	r0, 1efa <loop+0xc6>
	release(userblock);
    1ef0:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    1ef4:	movs	r3, #0
    1ef6:	str.w	r3, [r5, #1032]	; 0x408
}

template <int mq>
void mRecordQueue<mq>::freeBuffer(void)
{
	if (userblock == NULL) return;
    1efa:	ldr.w	r0, [r6, #2076]	; 0x81c
    1efe:	ldr	r5, [pc, #504]	; (20f8 <loop+0x2c4>)
    1f00:	cbz	r0, 1f0c <loop+0xd8>
	release(userblock);
    1f02:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    1f06:	movs	r3, #0
    1f08:	str.w	r3, [r5, #2076]	; 0x81c

    #if(MDET)
      mustStore = process1.getSigCount() >  0;
    #endif

    if(mustStore)
    1f0c:	ldr	r3, [pc, #508]	; (210c <loop+0x2d8>)
    1f0e:	ldrsh.w	r3, [r3]
    1f12:	cmp	r3, #0
    1f14:	beq.w	2054 <loop+0x220>
    {
      if(state==0)
    1f18:	ldrsh.w	r0, [r4]
      { // generate header before file is opened
        #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
          uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
          //
          int ndat=outptr-diskBuffer;
    1f1c:	ldr	r5, [pc, #496]	; (2110 <loop+0x2dc>)
      mustStore = process1.getSigCount() >  0;
    #endif

    if(mustStore)
    {
      if(state==0)
    1f1e:	cmp	r0, #0
    1f20:	beq.w	20b0 <loop+0x27c>
    1f24:	ldr	r6, [r5, #0]
      
      // number of data in tempBuffer
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1f26:	ldr	r7, [pc, #492]	; (2114 <loop+0x2e0>)
    1f28:	subs	r7, r7, r6
    1f2a:	asrs	r7, r7, #1

      tmp = tempBuffer;
      if (nout>ndat)
    1f2c:	cmp.w	r7, #256	; 0x100
      
      // number of data in tempBuffer
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1f30:	mov	r8, r6

      tmp = tempBuffer;
      if (nout>ndat)
    1f32:	bgt.w	208c <loop+0x258>
    1f36:	ldr	r3, [pc, #480]	; (2118 <loop+0x2e4>)
        ndat=0;
      }
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
    1f38:	ldrsh.w	r3, [r3, #1280]	; 0x500
    1f3c:	cmp	r3, #0
    1f3e:	bne.w	21ac <loop+0x378>
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    1f42:	cmp	r7, #0
    1f44:	ble.w	21c2 <loop+0x38e>
    1f48:	ldr.w	lr, [pc, #516]	; 2150 <loop+0x31c>
    1f4c:	mov	r3, r6
    1f4e:	lsls	r6, r7, #1
    1f50:	adds	r0, r3, r6
    1f52:	mov	r2, lr
    1f54:	ldrsh.w	r1, [r2], #2
    1f58:	strh.w	r1, [r3], #2
    1f5c:	cmp	r0, r3
    1f5e:	bne.n	1f54 <loop+0x120>
    1f60:	add	r6, lr
    1f62:	mov	r8, r0
      }
      
      if(nout==0) //buffer has been filled, so write to disk
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
    1f64:	bl	8e24 <micros>
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1f68:	ldr.w	r9, [pc, #440]	; 2124 <loop+0x2f0>
    1f6c:	rsb	r2, r9, r8
    1f70:	asrs	r2, r2, #1
      }
      
      if(nout==0) //buffer has been filled, so write to disk
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
    1f72:	mov	sl, r0
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1f74:	mov	r1, r9
    1f76:	ldr	r0, [pc, #416]	; (2118 <loop+0x2e4>)
    1f78:	bl	1d28 <c_uSD::write(short*, long)>
    1f7c:	strh	r0, [r4, #0]
        t1=micros();
    1f7e:	bl	8e24 <micros>
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
    1f82:	ldr	r2, [pc, #408]	; (211c <loop+0x2e8>)
    1f84:	ldr	r3, [r2, #0]
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
    1f86:	rsb	r0, sl, r0
        if(t2<t3) t3=t2; // accumulate some time statistics
    1f8a:	cmp	r0, r3
        if(t2>t4) t4=t2;
    1f8c:	ldr	r3, [pc, #400]	; (2120 <loop+0x2ec>)
      
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
    1f8e:	it	cc
    1f90:	strcc	r0, [r2, #0]
        if(t2>t4) t4=t2;
    1f92:	ldr	r2, [r3, #0]
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
        ndat-=nbuf;
    1f94:	rsb	r7, r7, #256	; 0x100
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
        if(t2>t4) t4=t2;
    1f98:	cmp	r0, r2
    1f9a:	it	hi
    1f9c:	strhi	r0, [r3, #0]
    1f9e:	ldr	r2, [pc, #388]	; (2124 <loop+0x2f0>)

        ptr=(int16_t *)diskBuffer;
      }

      if(ndat>0) // save residual data
    1fa0:	cbz	r7, 1fb2 <loop+0x17e>
    1fa2:	movs	r3, #0
      {
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1fa4:	adds	r3, #1
    1fa6:	ldrh.w	r1, [r6], #2
    1faa:	strh.w	r1, [r2], #2
    1fae:	cmp	r7, r3
    1fb0:	bgt.n	1fa4 <loop+0x170>
      }
      
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position

      if(!state)
    1fb2:	ldrsh.w	r3, [r4]
      {
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
      }
      
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position
    1fb6:	str	r2, [r5, #0]

      if(!state)
    1fb8:	cbnz	r3, 1fd6 <loop+0x1a2>
      { // store config again if you wanted time of latest file stored
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1fba:	movs	r2, #8
    1fbc:	str	r2, [sp, #0]
    1fbe:	ldr	r3, [pc, #360]	; (2128 <loop+0x2f4>)
    1fc0:	ldr	r1, [pc, #316]	; (2100 <loop+0x2cc>)
    1fc2:	ldr	r0, [pc, #340]	; (2118 <loop+0x2e4>)
    1fc4:	bl	e84 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
    1fc8:	movs	r1, #6
    1fca:	ldr	r0, [pc, #352]	; (212c <loop+0x2f8>)
    1fcc:	bl	8974 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1fd0:	ldr	r0, [pc, #348]	; (2130 <loop+0x2fc>)
    1fd2:	bl	a0e0 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1fd6:	ldr	r1, [pc, #348]	; (2134 <loop+0x300>)
#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
    1fd8:	ldr.w	lr, [pc, #376]	; 2154 <loop+0x320>
    1fdc:	ldr	r3, [r1, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1fde:	ldr	r5, [pc, #344]	; (2138 <loop+0x304>)
    1fe0:	str	r3, [sp, #20]
  if(millis()>t0+1000)
    1fe2:	ldr.w	r3, [lr]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1fe6:	ldr	r2, [r5, #0]
	return ret;
    1fe8:	ldr	r0, [sp, #20]
  if(millis()>t0+1000)
    1fea:	add.w	r3, r3, #1000	; 0x3e8

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1fee:	adds	r2, #1
  if(millis()>t0+1000)
    1ff0:	cmp	r0, r3

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1ff2:	str	r2, [r5, #0]
  if(millis()>t0+1000)
    1ff4:	bls.n	204c <loop+0x218>
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    1ff6:	ldr	r7, [pc, #292]	; (211c <loop+0x2e8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ff8:	ldr	r1, [r1, #0]
    1ffa:	ldr	r0, [r7, #0]
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    1ffc:	ldr.w	ip, [pc, #344]	; 2158 <loop+0x324>
    2000:	ldr	r4, [pc, #312]	; (213c <loop+0x308>)
    2002:	str	r1, [sp, #24]
	return ret;
    2004:	ldr	r1, [sp, #24]
    2006:	ldr	r3, [pc, #272]	; (2118 <loop+0x2e4>)
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();
    2008:	str.w	r1, [lr]

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    200c:	cmp	r0, ip
    200e:	it	hi
    2010:	movhi.w	r0, #4294967295
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    2014:	ldrh	r1, [r4, #0]
    2016:	ldr	r6, [pc, #264]	; (2120 <loop+0x2ec>)
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    2018:	ldrh.w	r3, [r3, #1278]	; 0x4fe
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    201c:	str	r0, [sp, #0]
    201e:	str	r1, [sp, #8]
    2020:	ldr	r1, [r6, #0]
    2022:	str	r1, [sp, #4]
    2024:	ldr	r0, [pc, #264]	; (2130 <loop+0x2fc>)
    2026:	ldr	r1, [pc, #280]	; (2140 <loop+0x30c>)
    2028:	bl	a110 <Print::printf(char const*, ...)>
      //
    AudioMemoryUsageMaxReset();
    202c:	ldr	r3, [pc, #276]	; (2144 <loop+0x310>)
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    202e:	ldr	r0, [pc, #256]	; (2130 <loop+0x2fc>)

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    AudioMemoryUsageMaxReset();
    2030:	ldrh	r3, [r3, #0]
    2032:	strh	r3, [r4, #0]
    t3=1<<31;
    t4=0;
    2034:	movs	r4, #0
    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    2036:	mov.w	r3, #2147483648	; 0x80000000
    203a:	str	r3, [r7, #0]
    t4=0;
    203c:	str	r4, [r6, #0]
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    203e:	bl	a0e0 <Print::println()>
    loopCount=0;
    maxValue=0;
    2042:	ldr	r2, [pc, #260]	; (2148 <loop+0x314>)
    maxNoise=0;
    2044:	ldr	r3, [pc, #260]	; (214c <loop+0x318>)
  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    loopCount=0;
    maxValue=0;
    2046:	str	r4, [r2, #0]

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    loopCount=0;
    2048:	str	r4, [r5, #0]
    maxValue=0;
    maxNoise=0;
    204a:	str	r4, [r3, #0]
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
    204c:	wfi
}
    204e:	add	sp, #32
    2050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        #if DO_DEBUG>0
          Serial.println("closed");
        #endif
      }
    }
    else if(state>0)
    2054:	ldrsh.w	r3, [r4]
    2058:	ldr	r6, [pc, #160]	; (20fc <loop+0x2c8>)
    205a:	cmp	r3, #0
    205c:	ble.n	1fd6 <loop+0x1a2>
    { // close file
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
    205e:	ldr	r5, [pc, #176]	; (2110 <loop+0x2dc>)
    2060:	ldr.w	r9, [pc, #192]	; 2124 <loop+0x2f0>
    2064:	ldr	r3, [r5, #0]
    2066:	rsb	r3, r9, r3
      if(nbuf>0)
    206a:	asrs	r2, r3, #1
    206c:	bne.w	21b6 <loop+0x382>
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
      }
      state=uSD.close();
    2070:	ldr	r0, [pc, #164]	; (2118 <loop+0x2e4>)
    2072:	bl	d7c <c_uSD::close()>
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    2076:	movs	r2, #8
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
      if(nbuf>0)
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
      }
      state=uSD.close();
    2078:	strh	r0, [r4, #0]
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    207a:	ldr	r3, [pc, #172]	; (2128 <loop+0x2f4>)
    207c:	str	r2, [sp, #0]
    207e:	ldr	r1, [pc, #128]	; (2100 <loop+0x2cc>)
    2080:	ldr	r0, [pc, #148]	; (2118 <loop+0x2e4>)
    2082:	bl	e84 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
      outptr = diskBuffer;
    2086:	str.w	r9, [r5]
    208a:	b.n	1fd6 <loop+0x1a2>
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;

      tmp = tempBuffer;
      if (nout>ndat)
    208c:	ldr	r3, [pc, #192]	; (2150 <loop+0x31c>)
    208e:	subs	r2, r6, #2
    2090:	add.w	r0, r3, #512	; 0x200
      { // sufficient space for all data
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    2094:	ldrsh.w	r1, [r3], #2
    2098:	strh.w	r1, [r2, #2]!
    209c:	cmp	r3, r0
    209e:	bne.n	2094 <loop+0x260>
    20a0:	add.w	r2, r6, #512	; 0x200
    20a4:	b.n	1fb2 <loop+0x17e>
  public:
    c_uSD(): state(-1), closing(0) {;}
    void init();
    int16_t write(int16_t * data, int32_t ndat);
    uint16_t getNbuf(void) {return nbuf;}
    void setClosing(void) {closing=1;}
    20a6:	ldr	r3, [pc, #112]	; (2118 <loop+0x2e4>)
    20a8:	movs	r2, #1
    20aa:	strh.w	r2, [r3, #1280]	; 0x500
    20ae:	b.n	1ea0 <loop+0x6c>
    if(mustStore)
    {
      if(state==0)
      { // generate header before file is opened
        #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
          uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
    20b0:	bl	ca0 <wavHeader(unsigned long)>
          //
          int ndat=outptr-diskBuffer;
    20b4:	ldr	r7, [r5, #0]
    20b6:	ldr	r2, [pc, #108]	; (2124 <loop+0x2f0>)
    20b8:	subs	r6, r7, r2
    20ba:	asrs	r6, r6, #1
          if(ndat>0)
    20bc:	cmp	r6, #0
    20be:	ble.n	20da <loop+0x2a6>
    20c0:	add.w	r6, r6, #2147483648	; 0x80000000
    20c4:	subs	r6, #1
    20c6:	add.w	r6, r2, r6, lsl #1
    20ca:	subs	r3, r2, #2
    20cc:	adds	r2, #42	; 0x2a
          { // shift exisiting data after header, which is always at beginnig of file
            for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
    20ce:	ldrsh.w	r1, [r3, #2]!
    20d2:	strh.w	r1, [r2, #2]!
    20d6:	cmp	r3, r6
    20d8:	bne.n	20ce <loop+0x29a>
    20da:	ldr	r2, [pc, #72]	; (2124 <loop+0x2f0>)
    20dc:	subs	r3, r0, #4
    20de:	adds	r0, #40	; 0x28
          }
          // copy header to disk buffer
          uint32_t *ptr=(uint32_t *) diskBuffer;
          for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
    20e0:	ldr.w	r1, [r3, #4]!
    20e4:	str.w	r1, [r2], #4
    20e8:	cmp	r0, r3
    20ea:	bne.n	20e0 <loop+0x2ac>
          outptr+=22; //(44 bytes)
    20ec:	add.w	r6, r7, #44	; 0x2c
          uint32_t *ptr=(uint32_t *) diskBuffer;
          // copy to disk buffer
          for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
          outptr+=256; //(512 bytes)
        #endif
        state=1;
    20f0:	movs	r3, #1
            for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
          }
          // copy header to disk buffer
          uint32_t *ptr=(uint32_t *) diskBuffer;
          for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
          outptr+=22; //(44 bytes)
    20f2:	str	r6, [r5, #0]
          uint32_t *ptr=(uint32_t *) diskBuffer;
          // copy to disk buffer
          for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
          outptr+=256; //(512 bytes)
        #endif
        state=1;
    20f4:	strh	r3, [r4, #0]
    20f6:	b.n	1f26 <loop+0xf2>
    20f8:	.word	0x20018f54
    20fc:	.word	0x20019784
    2100:	.word	0x20013968
    2104:	.word	0x4004803c
    2108:	.word	0x20018d48
    210c:	.word	0x20013964
    2110:	.word	0x20013934
    2114:	.word	0x20018c78
    2118:	.word	0x20014564
    211c:	.word	0x20014a70
    2120:	.word	0x20014a74
    2124:	.word	0x20014c78
    2128:	.word	0x20013944
    212c:	.word	0x00012f98
    2130:	.word	0x20013ae8
    2134:	.word	0x20019d58
    2138:	.word	0x20018d40
    213c:	.word	0x20019e60
    2140:	.word	0x00012fa0
    2144:	.word	0x20019ee0
    2148:	.word	0x20019780
    214c:	.word	0x20018ccc
    2150:	.word	0x20018d44
    2154:	.word	0x20019788
    2158:	.word	0x000186a0
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    215c:	mla	lr, r5, r2, r6
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
    2160:	mov	ip, r3
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2162:	ldrh.w	r7, [lr, #1038]	; 0x40e
	if (t == head) return NULL;
    2166:	ldrh.w	r8, [lr, #1036]	; 0x40c
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    216a:	uxth	r7, r7
	if (t == head) return NULL;
    216c:	uxth.w	r8, r8
	if (++t >= mq) t = 0;
    2170:	add.w	lr, r7, #1
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    2174:	cmp	r7, r8
	if (++t >= mq) t = 0;
    2176:	uxth.w	lr, lr
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    217a:	beq.w	1eb6 <loop+0x82>
	if (++t >= mq) t = 0;
    217e:	cmp.w	lr, #249	; 0xf9
	userblock = queue[t];
    2182:	add.w	r3, r2, r2, lsl #6
    2186:	it	ls
    2188:	movls	ip, lr
    218a:	add.w	r3, r2, r3, lsl #2
    218e:	add	r3, ip
    2190:	add.w	r3, r3, #8
	tail = t;
    2194:	mla	r7, r5, r2, r6

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
	userblock = queue[t];
    2198:	ldr.w	r3, [r6, r3, lsl #2]
    219c:	str.w	r3, [r1, #1032]	; 0x408
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
    21a0:	it	hi
    21a2:	movhi	lr, ip
	userblock = queue[t];
	tail = t;
	return (void *) userblock->data;
    21a4:	adds	r3, #4
	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
	userblock = queue[t];
	tail = t;
    21a6:	strh.w	lr, [r7, #1038]	; 0x40e
    21aa:	b.n	1eb6 <loop+0x82>
        ndat=0;
      }
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
    21ac:	add.w	r7, r7, r7, lsr #31
    21b0:	bic.w	r7, r7, #1
    21b4:	b.n	1f42 <loop+0x10e>
    else if(state>0)
    { // close file
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
      if(nbuf>0)
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
    21b6:	mov	r1, r9
    21b8:	ldr	r0, [pc, #12]	; (21c8 <loop+0x394>)
    21ba:	bl	1d28 <c_uSD::write(short*, long)>
    21be:	strh	r0, [r6, #0]
    21c0:	b.n	2070 <loop+0x23c>
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;

      tmp = tempBuffer;
    21c2:	ldr	r6, [pc, #8]	; (21cc <loop+0x398>)
    21c4:	b.n	1f64 <loop+0x130>
    21c6:	nop
    21c8:	.word	0x20014564
    21cc:	.word	0x20018d44

000021d0 <_GLOBAL__sub_I_acqParameters>:
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    21d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    21d4:	ldr	r6, [pc, #376]	; (2350 <_GLOBAL__sub_I_acqParameters+0x180>)

audio_block_t * I2S_32:: block_left = NULL;
audio_block_t * I2S_32:: block_right = NULL;
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);
    21d6:	ldr	r2, [pc, #380]	; (2354 <_GLOBAL__sub_I_acqParameters+0x184>)
    21d8:	ldr	r1, [pc, #380]	; (2358 <_GLOBAL__sub_I_acqParameters+0x188>)
    21da:	ldr	r0, [pc, #384]	; (235c <_GLOBAL__sub_I_acqParameters+0x18c>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    21dc:	ldr	r4, [pc, #384]	; (2360 <_GLOBAL__sub_I_acqParameters+0x190>)
    21de:	ldr	r7, [pc, #388]	; (2364 <_GLOBAL__sub_I_acqParameters+0x194>)
    21e0:	bl	a6b4 <__aeabi_atexit>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    21e4:	ldr	r2, [r6, #0]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    21e6:	str	r7, [r4, #0]
    21e8:	movs	r3, #0
    21ea:	strb	r3, [r4, #9]
    21ec:	str	r3, [r4, #16]
			active = false;
    21ee:	strb	r3, [r4, #8]
			destination_list = NULL;
    21f0:	str	r3, [r4, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    21f2:	cbnz	r2, 21f8 <_GLOBAL__sub_I_acqParameters+0x28>
    21f4:	b.n	234a <_GLOBAL__sub_I_acqParameters+0x17a>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    21f6:	mov	r2, r3
    21f8:	ldr	r3, [r2, #20]
    21fa:	cmp	r3, #0
    21fc:	bne.n	21f6 <_GLOBAL__sub_I_acqParameters+0x26>
				p->next_update = this;
    21fe:	str	r4, [r2, #20]
			}
			next_update = NULL;
    2200:	movs	r5, #0

class I2S_32 : public AudioStream
{
public:

	I2S_32(void) : AudioStream(0, NULL) {begin();}
    2202:	ldr	r3, [pc, #356]	; (2368 <_GLOBAL__sub_I_acqParameters+0x198>)
    2204:	ldr	r0, [pc, #344]	; (2360 <_GLOBAL__sub_I_acqParameters+0x190>)
    2206:	str	r5, [r4, #20]
			cpu_cycles = 0;
    2208:	strh	r5, [r4, #4]
			cpu_cycles_max = 0;
    220a:	strh	r5, [r4, #6]
			numConnections = 0;
    220c:	strb	r5, [r4, #10]
    220e:	str	r3, [r4, #0]
    2210:	bl	9a4 <I2S_32::begin()>
    2214:	ldr	r2, [pc, #340]	; (236c <_GLOBAL__sub_I_acqParameters+0x19c>)
    2216:	ldr.w	r9, [pc, #380]	; 2394 <_GLOBAL__sub_I_acqParameters+0x1c4>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    221a:	ldr.w	sl, [pc, #308]	; 2350 <_GLOBAL__sub_I_acqParameters+0x180>
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    221e:	mov	r1, r5
    2220:	addw	ip, r2, #2088	; 0x828

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2224:	mov.w	lr, #1
    2228:	str.w	r7, [r2, #-28]
    222c:	strb.w	lr, [r2, #-19]
    2230:	str.w	r2, [r2, #-12]
			active = false;
    2234:	strb.w	r1, [r2, #-20]
			destination_list = NULL;
    2238:	str.w	r1, [r2, #-16]
    223c:	sub.w	r8, r2, #28
    2240:	mov	r0, r2
    2242:	movs	r3, #0
    2244:	b.n	224a <_GLOBAL__sub_I_acqParameters+0x7a>
    2246:	ldr.w	r0, [r2, #-12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    224a:	str.w	r1, [r0, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    224e:	ldrb.w	r0, [r2, #-19]
    2252:	adds	r3, #1
    2254:	cmp	r0, r3
    2256:	bgt.n	2246 <_GLOBAL__sub_I_acqParameters+0x76>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2258:	ldr	r0, [r6, #0]
    225a:	cbnz	r0, 2260 <_GLOBAL__sub_I_acqParameters+0x90>
    225c:	b.n	2344 <_GLOBAL__sub_I_acqParameters+0x174>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    225e:	mov	r0, r3
    2260:	ldr	r3, [r0, #20]
    2262:	cmp	r3, #0
    2264:	bne.n	225e <_GLOBAL__sub_I_acqParameters+0x8e>
				p->next_update = this;
    2266:	str.w	r8, [r0, #20]
template <int mq>
class mRecordQueue : public AudioStream
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
    226a:	str.w	r1, [r2, #1004]	; 0x3ec
			}
			next_update = NULL;
    226e:	str.w	r1, [r2, #-8]
			cpu_cycles = 0;
    2272:	strh.w	r1, [r2, #-24]
			cpu_cycles_max = 0;
    2276:	strh.w	r1, [r2, #-22]
			numConnections = 0;
    227a:	strb.w	r1, [r2, #-18]
    227e:	str.w	r9, [r2, #-28]
    2282:	addw	r2, r2, #1044	; 0x414
    I2S_32         acq;
  #endif

  #define MQ (MAX_Q/NCH)
  #include "m_queue.h"
  mRecordQueue<MQ> queue[NCH];
    2286:	cmp	ip, r2
    2288:	strh.w	r1, [r8, #1036]	; 0x40c
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
    228c:	mov.w	r5, #0
    2290:	strh.w	r1, [r8, #1038]	; 0x40e
    2294:	strh.w	r1, [r8, #1040]	; 0x410
    2298:	bne.n	2228 <_GLOBAL__sub_I_acqParameters+0x58>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    229a:	ldr	r7, [pc, #212]	; (2370 <_GLOBAL__sub_I_acqParameters+0x1a0>)
    229c:	ldr	r6, [pc, #212]	; (2374 <_GLOBAL__sub_I_acqParameters+0x1a4>)
    229e:	ldr.w	r9, [pc, #248]	; 2398 <_GLOBAL__sub_I_acqParameters+0x1c8>
    22a2:	str	r4, [r7, #0]
		{ isConnected = false;
		  connect(); }
    22a4:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    22a6:	strb	r5, [r7, #8]
    22a8:	strb	r5, [r7, #9]
    22aa:	str	r5, [r7, #12]
		{ isConnected = false;
    22ac:	strb	r5, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    22ae:	str.w	r9, [r7, #4]
		{ isConnected = false;
		  connect(); }
    22b2:	bl	a370 <AudioConnection::connect()>
    #include "m_delay.h" 
    mDelay<NCH,(MDEL+2)>  delay1(2); // have two buffers more in queue only to be safe 
  #endif 

  #if MDEL<0
    AudioConnection     patchCord3(acq,0, queue[0],0);
    22b6:	ldr	r1, [pc, #192]	; (2378 <_GLOBAL__sub_I_acqParameters+0x1a8>)
    22b8:	ldr	r2, [pc, #152]	; (2354 <_GLOBAL__sub_I_acqParameters+0x184>)
    22ba:	mov	r0, r7
    22bc:	bl	a6b4 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    22c0:	addw	r3, r9, #1044	; 0x414
    22c4:	movs	r2, #1
		{ isConnected = false;
		  connect(); }
    22c6:	mov	r0, r6
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    22c8:	str	r3, [r6, #4]
    22ca:	str	r4, [r6, #0]
    22cc:	strb	r5, [r6, #9]
    22ce:	str	r5, [r6, #12]
		{ isConnected = false;
    22d0:	strb	r5, [r6, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    22d2:	strb	r2, [r6, #8]
		{ isConnected = false;
		  connect(); }
    22d4:	bl	a370 <AudioConnection::connect()>
    AudioConnection     patchCord4(acq,1, queue[1],0);
    22d8:	mov	r0, r6
    22da:	ldr	r2, [pc, #120]	; (2354 <_GLOBAL__sub_I_acqParameters+0x184>)
    22dc:	ldr	r1, [pc, #152]	; (2378 <_GLOBAL__sub_I_acqParameters+0x1a8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    22de:	ldr	r4, [pc, #156]	; (237c <_GLOBAL__sub_I_acqParameters+0x1ac>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    22e0:	ldr	r6, [pc, #156]	; (2380 <_GLOBAL__sub_I_acqParameters+0x1b0>)
    22e2:	bl	a6b4 <__aeabi_atexit>
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    22e6:	ldr	r3, [pc, #156]	; (2384 <_GLOBAL__sub_I_acqParameters+0x1b4>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    22e8:	ldr	r0, [pc, #156]	; (2388 <_GLOBAL__sub_I_acqParameters+0x1b8>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    22ea:	ldr	r1, [pc, #160]	; (238c <_GLOBAL__sub_I_acqParameters+0x1bc>)
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    22ec:	strb.w	r5, [r3, #1168]	; 0x490
    22f0:	movs	r7, #40	; 0x28
    22f2:	strb.w	r5, [r3, #1194]	; 0x4aa
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    22f6:	strb.w	r5, [r3, #1200]	; 0x4b0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    22fa:	strb.w	r5, [r3, #1208]	; 0x4b8
    22fe:	str.w	r5, [r3, #1144]	; 0x478
    2302:	str.w	r5, [r3, #1148]	; 0x47c
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    2306:	str.w	r5, [r3, #1268]	; 0x4f4
    230a:	str.w	r5, [r3, #1272]	; 0x4f8
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    230e:	strh.w	r5, [r3, #1280]	; 0x500
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2312:	str.w	r4, [r3, #1160]	; 0x488
    2316:	mov.w	r5, #1000	; 0x3e8
    231a:	movw	r4, #65535	; 0xffff
    231e:	strb.w	r7, [r3, #1191]	; 0x4a7
    2322:	str.w	r0, [r3, #1172]	; 0x494
    2326:	str.w	r1, [r3, #1180]	; 0x49c
    232a:	str.w	r5, [r3, #1204]	; 0x4b4
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    232e:	str.w	r6, [r3, #1196]	; 0x4ac
    2332:	strh.w	r4, [r3, #1276]	; 0x4fc
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2336:	ldr	r2, [pc, #28]	; (2354 <_GLOBAL__sub_I_acqParameters+0x184>)
    2338:	ldr	r1, [pc, #84]	; (2390 <_GLOBAL__sub_I_acqParameters+0x1c0>)
    233a:	mov	r0, r3
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    233c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2340:	b.w	a6b4 <__aeabi_atexit>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    2344:	str.w	r8, [sl]
    2348:	b.n	226a <_GLOBAL__sub_I_acqParameters+0x9a>
    234a:	str	r4, [r6, #0]
    234c:	b.n	2200 <_GLOBAL__sub_I_acqParameters+0x30>
    234e:	nop
    2350:	.word	0x20019e5c
    2354:	.word	0x20013930
    2358:	.word	0x000006a5
    235c:	.word	0x20018f4c
    2360:	.word	0x20018d28
    2364:	.word	0x00012aec
    2368:	.word	0x00012b4c
    236c:	.word	0x20018f70
    2370:	.word	0x20018d00
    2374:	.word	0x20018d14
    2378:	.word	0x00000699
    237c:	.word	0x00013200
    2380:	.word	0x00012b28
    2384:	.word	0x20014564
    2388:	.word	0x000131a8
    238c:	.word	0x38011001
    2390:	.word	0x00000679
    2394:	.word	0x00012af8
    2398:	.word	0x20018f54

0000239c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    239c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23a0:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    23a2:	ldr	r5, [r4, #12]
    23a4:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    23a8:	ldr	r5, [pc, #484]	; (2590 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    23aa:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    23ac:	bne.n	2454 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    23ae:	lsls	r7, r3, #31
    23b0:	bpl.w	251a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    23b4:	cmp	r1, #0
    23b6:	beq.w	2580 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23ba:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    23bc:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23be:	it	ne
    23c0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    23c4:	str	r5, [r4, #52]	; 0x34
    23c6:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    23c8:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    23cc:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    23d0:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    23d4:	cmp.w	ip, #0
    23d8:	beq.w	252c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    23dc:	cbz	r1, 23e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    23de:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    23e0:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    23e4:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    23e8:	ldr	r5, [r0, #4]
    23ea:	ldrb	r6, [r5, #8]
			if (count == 2)
    23ec:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    23f0:	add.w	r6, r6, #4294967295
    23f4:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    23f8:	ite	eq
    23fa:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    23fe:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2402:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2404:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2406:	sub.w	ip, ip, #2
    240a:	b.n	241e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    240c:	cbz	r2, 2412 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    240e:	strb	r4, [r2, #0]
    2410:	adds	r2, #1
						} 
						count_read--;
    2412:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2414:	and.w	r5, r5, #61440	; 0xf000
    2418:	cmp	r5, r6
    241a:	bls.n	244a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    241c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    241e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2420:	tst.w	r5, #240	; 0xf0
    2424:	beq.n	2414 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2426:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2428:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    242c:	mov	r7, r2
    242e:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2432:	bne.n	240c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2434:	cbz	r2, 243e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    2436:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    243a:	strb	r4, [r2, #1]
    243c:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    243e:	and.w	r5, r5, #61440	; 0xf000
    2442:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    2444:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2448:	bhi.n	241c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    244a:	cmp.w	ip, #0
    244e:	beq.n	252c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2450:	ldr	r4, [r0, #0]
    2452:	b.n	23dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2454:	lsls	r5, r3, #31
    2456:	bpl.n	24f2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    2458:	cmp	r1, #0
    245a:	beq.w	2570 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    245e:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2460:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2462:	it	ne
    2464:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2468:	str	r5, [r4, #52]	; 0x34
    246a:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    246c:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    2470:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2474:	cmp.w	lr, #0
    2478:	beq.n	24fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    247a:	cbz	r1, 2488 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    247c:	ldrb.w	ip, [r1, #1]
    2480:	ldrb	r5, [r1, #0]
    2482:	adds	r1, #2
    2484:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2488:	ldr	r5, [r0, #4]
    248a:	ldrb	r6, [r5, #8]
			if (count == 2)
    248c:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2490:	add.w	r6, r6, #4294967295
    2494:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2498:	ite	eq
    249a:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    249e:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    24a2:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    24a4:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    24a6:	sub.w	lr, lr, #2
    24aa:	b.n	24be <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    24ac:	cbz	r2, 24b2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    24ae:	strb	r4, [r2, #0]
    24b0:	adds	r2, #1
						} 
						count_read--;
    24b2:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    24b4:	and.w	r5, r5, #61440	; 0xf000
    24b8:	cmp	r5, r6
    24ba:	bls.n	24e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    24bc:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    24be:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    24c0:	tst.w	r5, #240	; 0xf0
    24c4:	beq.n	24b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    24c6:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    24ca:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    24cc:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    24ce:	bne.n	24ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    24d0:	cbz	r2, 24dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    24d2:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    24d6:	asrs	r4, r4, #8
    24d8:	strb	r4, [r2, #1]
    24da:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    24dc:	and.w	r5, r5, #61440	; 0xf000
    24e0:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    24e2:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    24e6:	bhi.n	24bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    24e8:	cmp.w	lr, #0
    24ec:	beq.n	24fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    24ee:	ldr	r4, [r0, #0]
    24f0:	b.n	247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    24f2:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    24f4:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    24f8:	cmp.w	lr, #0
    24fc:	bne.n	247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    24fe:	cbz	r3, 2548 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2500:	ldr	r4, [r0, #0]
			sr = port().SR;
    2502:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2504:	tst.w	r1, #240	; 0xf0
    2508:	beq.n	2502 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    250a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    250c:	lsls	r4, r3, #31
    250e:	bpl.n	254c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    2510:	cbz	r2, 2516 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    2512:	strb	r1, [r2, #0]
    2514:	adds	r2, #1
					count_read--;
    2516:	subs	r3, #1
    2518:	b.n	24fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    251a:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    251e:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2520:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2524:	cmp.w	ip, #0
    2528:	bne.w	23dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    252c:	cbz	r3, 2548 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    252e:	ldr	r4, [r0, #0]
			sr = port().SR;
    2530:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2532:	tst.w	r1, #240	; 0xf0
    2536:	beq.n	2530 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    2538:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    253a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    253c:	bpl.n	255e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    253e:	cbz	r2, 2544 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    2540:	strb	r1, [r2, #0]
    2542:	adds	r2, #1
					count_read--;
    2544:	subs	r3, #1
    2546:	b.n	252c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2548:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    254c:	cbz	r2, 255a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    254e:	mov	r4, r2
						*p_read++ = w >> 8;
    2550:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    2552:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    2556:	strb	r5, [r2, #1]
    2558:	mov	r2, r4
					}
					count_read -= 2;
    255a:	subs	r3, #2
    255c:	b.n	24fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    255e:	cbz	r2, 256c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    2560:	mov	r4, r2
    2562:	asrs	r5, r1, #8
    2564:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    2568:	strb	r1, [r2, #1]
    256a:	mov	r2, r4
					}
					count_read -= 2;
    256c:	subs	r3, #2
    256e:	b.n	252c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2570:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2574:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2576:	it	ne
    2578:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    257c:	str	r5, [r4, #52]	; 0x34
    257e:	b.n	246c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2580:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2584:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2586:	it	ne
    2588:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    258c:	str	r5, [r4, #52]	; 0x34
    258e:	b.n	23c8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    2590:	.word	0x801f0400

00002594 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    2594:	cbz	r3, 259a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2596:	b.w	239c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    259a:	bx	lr

0000259c <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    259c:	ldr	r2, [pc, #400]	; (2730 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    259e:	ldr	r3, [pc, #404]	; (2734 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    25a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    25a4:	ldr	r6, [pc, #400]	; (2738 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    25a6:	ldr.w	sl, [pc, #416]	; 2748 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    25aa:	ldr	r4, [pc, #400]	; (273c <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    25ac:	ldr.w	r9, [pc, #400]	; 2740 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    25b0:	umull	r5, r2, r2, r0
    25b4:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    25b8:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    25bc:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    25c0:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    25c4:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    25c8:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    25ca:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    25cc:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    25d0:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    25d4:	rsb	r6, fp, r7
    25d8:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    25dc:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    25de:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    25e0:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    25e2:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    25e6:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    25ea:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    25ee:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    25f2:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    25f4:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    25f8:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    25fc:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2600:	adds	r6, #1
    2602:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2604:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2606:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2608:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    260a:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    260c:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    260e:	movw	fp, #365	; 0x16d
    2612:	mov.w	r8, #100	; 0x64
    2616:	mov.w	sl, #400	; 0x190
    261a:	b.n	263a <breakTime(long, tmElements_t&)+0x9e>
    261c:	rsb	r5, r6, r5, asr #7
    2620:	mls	r5, sl, r5, r3
    2624:	cbnz	r0, 2684 <breakTime(long, tmElements_t&)+0xe8>
    2626:	cmp	r5, #0
    2628:	ite	ne
    262a:	movne	r0, fp
    262c:	moveq.w	r0, #366	; 0x16e
    2630:	add	r2, r0
    2632:	cmp	ip, r2
    2634:	add.w	r4, r4, #1
    2638:	bcc.n	2662 <breakTime(long, tmElements_t&)+0xc6>
    263a:	uxtb	r7, r4
    263c:	addw	r3, r7, #1970	; 0x7b2
    2640:	smull	r0, r5, r9, r3
    2644:	asrs	r6, r3, #31
    2646:	rsb	r0, r6, r5, asr #5
    264a:	ands.w	lr, r3, #3
    264e:	mls	r0, r8, r0, r3
    2652:	beq.n	261c <breakTime(long, tmElements_t&)+0x80>
    2654:	movw	r0, #365	; 0x16d
    2658:	add	r2, r0
    265a:	cmp	ip, r2
    265c:	add.w	r4, r4, #1
    2660:	bcs.n	263a <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    2662:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2664:	cmp.w	lr, #0
    2668:	bne.n	268a <breakTime(long, tmElements_t&)+0xee>
    266a:	ldr	r0, [pc, #212]	; (2740 <breakTime(long, tmElements_t&)+0x1a4>)
    266c:	asrs	r6, r3, #31
    266e:	smull	r4, r0, r0, r3
    2672:	rsb	r4, r6, r0, asr #5
    2676:	movs	r5, #100	; 0x64
    2678:	mls	r4, r5, r4, r3
    267c:	cbz	r4, 26ee <breakTime(long, tmElements_t&)+0x152>
    267e:	mov.w	r4, #366	; 0x16e
    2682:	b.n	2690 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2684:	mov.w	r0, #366	; 0x16e
    2688:	b.n	2630 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    268a:	movw	r4, #365	; 0x16d
    268e:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2690:	ldr	r0, [pc, #172]	; (2740 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    2692:	ldr	r5, [pc, #176]	; (2744 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2694:	smull	r7, r0, r0, r3
    2698:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    269c:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    269e:	rsb	r6, r6, r0, asr #7
    26a2:	movs	r4, #100	; 0x64
    26a4:	mov.w	r0, #400	; 0x190
    26a8:	mls	r6, r0, r6, r3
    26ac:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    26b0:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    26b4:	movs	r0, #1
    26b6:	movs	r3, #0
    26b8:	b.n	26c0 <breakTime(long, tmElements_t&)+0x124>
    26ba:	adds	r0, #1
    26bc:	uxtb	r0, r0
    26be:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    26c0:	cmp	r3, #1
    26c2:	uxtb	r7, r3
    26c4:	beq.n	2708 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    26c6:	ldrb	r4, [r3, r5]
    26c8:	cmp	r4, r2
    26ca:	bhi.n	26e0 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    26cc:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    26ce:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    26d2:	bne.n	26ba <breakTime(long, tmElements_t&)+0x11e>
    26d4:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    26d6:	adds	r2, #1
    26d8:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    26da:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    26dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26e0:	adds	r7, #1
    26e2:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    26e4:	adds	r2, #1
    26e6:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    26e8:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    26ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    26ee:	mov.w	r4, #400	; 0x190
    26f2:	rsb	r0, r6, r0, asr #7
    26f6:	mls	r0, r4, r0, r3
    26fa:	cmp	r0, #0
    26fc:	movw	r4, #365	; 0x16d
    2700:	it	eq
    2702:	moveq.w	r4, #366	; 0x16e
    2706:	b.n	2690 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2708:	cmp.w	lr, #0
    270c:	bne.n	2724 <breakTime(long, tmElements_t&)+0x188>
    270e:	cmp.w	r8, #0
    2712:	bne.n	272c <breakTime(long, tmElements_t&)+0x190>
    2714:	cmp	r6, #0
    2716:	ite	ne
    2718:	movne	r4, #28
    271a:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    271c:	cmp	r2, r4
    271e:	bcc.n	2728 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    2720:	subs	r2, r2, r4
    2722:	b.n	26ba <breakTime(long, tmElements_t&)+0x11e>
    2724:	movs	r4, #28
    2726:	b.n	271c <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2728:	movs	r7, #2
    272a:	b.n	26d6 <breakTime(long, tmElements_t&)+0x13a>
    272c:	movs	r4, #29
    272e:	b.n	271c <breakTime(long, tmElements_t&)+0x180>
    2730:	.word	0xc22e4507
    2734:	.word	0x88888889
    2738:	.word	0x91a2b3c5
    273c:	.word	0xaaaaaaab
    2740:	.word	0x51eb851f
    2744:	.word	0x00012fc0
    2748:	.word	0x24924925

0000274c <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    274c:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    274e:	ldr	r1, [pc, #12]	; (275c <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    2750:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    2752:	bl	259c <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    2756:	ldr	r3, [pc, #8]	; (2760 <refreshCache(long) [clone .part.0]+0x14>)
    2758:	str	r4, [r3, #0]
    275a:	pop	{r4, pc}
    275c:	.word	0x20019790
    2760:	.word	0x2001978c

00002764 <makeTime(tmElements_t const&)>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(const tmElements_t &tm){   
    2764:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    2768:	ldr	r1, [pc, #228]	; (2850 <makeTime(tmElements_t const&)+0xec>)
    276a:	ldrb	r6, [r0, #6]
    276c:	mul.w	r1, r1, r6
  for (i = 0; i < tm.Year; i++) {
    2770:	cbz	r6, 27b4 <makeTime(tmElements_t const&)+0x50>
    2772:	addw	ip, r6, #1970	; 0x7b2
    2776:	movw	r3, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    277a:	ldr.w	lr, [pc, #216]	; 2854 <makeTime(tmElements_t const&)+0xf0>
    277e:	movs	r7, #100	; 0x64
    2780:	mov.w	r8, #400	; 0x190
    2784:	b.n	27a2 <makeTime(tmElements_t const&)+0x3e>
    2786:	tst.w	r3, #3
    278a:	bne.n	27a0 <makeTime(tmElements_t const&)+0x3c>
    278c:	rsb	r2, r2, r5, asr #7
    2790:	mls	r2, r8, r2, r3
    2794:	cbnz	r4, 2798 <makeTime(tmElements_t const&)+0x34>
    2796:	cbnz	r2, 27a0 <makeTime(tmElements_t const&)+0x3c>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    2798:	add.w	r1, r1, #86016	; 0x15000
    279c:	add.w	r1, r1, #384	; 0x180
    27a0:	adds	r3, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    27a2:	smull	r2, r5, lr, r3
    27a6:	asrs	r2, r3, #31
    27a8:	rsb	r4, r2, r5, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    27ac:	cmp	r3, ip
    if (LEAP_YEAR(i)) {
    27ae:	mls	r4, r7, r4, r3
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    27b2:	bne.n	2786 <makeTime(tmElements_t const&)+0x22>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    27b4:	ldrb	r7, [r0, #5]
    27b6:	cmp	r7, #1
    27b8:	ble.n	281a <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    27ba:	ldr	r4, [pc, #152]	; (2854 <makeTime(tmElements_t const&)+0xf0>)
    27bc:	ldr	r2, [pc, #152]	; (2858 <makeTime(tmElements_t const&)+0xf4>)
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    27be:	ldr.w	lr, [pc, #156]	; 285c <makeTime(tmElements_t const&)+0xf8>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    27c2:	addw	r3, r6, #1970	; 0x7b2
    27c6:	smull	r4, r6, r4, r3
    27ca:	asrs	r4, r3, #31
    27cc:	rsb	ip, r4, r6, asr #5
    27d0:	movs	r5, #100	; 0x64
    27d2:	rsb	r6, r4, r6, asr #7
    27d6:	mov.w	r4, #400	; 0x190
    27da:	mls	ip, r5, ip, r3
    27de:	mls	r6, r4, r6, r3
    27e2:	and.w	r5, r3, #3
    27e6:	movs	r3, #1
    27e8:	b.n	27fa <makeTime(tmElements_t const&)+0x96>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    27ea:	ldrb	r4, [r2, #0]
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    27ec:	adds	r3, #1
    27ee:	cmp	r3, r7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    27f0:	mla	r1, lr, r4, r1
    27f4:	add.w	r2, r2, #1
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    27f8:	beq.n	281a <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    27fa:	cmp	r3, #2
    27fc:	bne.n	27ea <makeTime(tmElements_t const&)+0x86>
    27fe:	cmp	r5, #0
    2800:	bne.n	27ea <makeTime(tmElements_t const&)+0x86>
    2802:	cmp.w	ip, #0
    2806:	beq.n	2840 <makeTime(tmElements_t const&)+0xdc>
      seconds += SECS_PER_DAY * 29;
    2808:	add.w	r1, r1, #2490368	; 0x260000
    280c:	add.w	r1, r1, #15232	; 0x3b80
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2810:	adds	r3, #1
    2812:	cmp	r3, r7
    2814:	add.w	r2, r2, #1
    2818:	bne.n	27fa <makeTime(tmElements_t const&)+0x96>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
    281a:	ldrb	r3, [r0, #1]
    281c:	ldrb	r5, [r0, #2]
    281e:	ldrb	r4, [r0, #0]
    2820:	ldrb	r2, [r0, #4]
    2822:	ldr	r0, [pc, #56]	; (285c <makeTime(tmElements_t const&)+0xf8>)
    2824:	rsb	r3, r3, r3, lsl #4
    2828:	mov.w	r6, #3600	; 0xe10
    282c:	lsls	r3, r3, #2
    282e:	mla	r3, r6, r5, r3
    2832:	add	r3, r4
    2834:	subs	r2, #1
    2836:	mla	r0, r0, r2, r3
}
    283a:	add	r0, r1
    283c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2840:	cmp	r6, #0
    2842:	bne.n	27ea <makeTime(tmElements_t const&)+0x86>
      seconds += SECS_PER_DAY * 29;
    2844:	add.w	r1, r1, #2490368	; 0x260000
    2848:	add.w	r1, r1, #15232	; 0x3b80
    284c:	b.n	2810 <makeTime(tmElements_t const&)+0xac>
    284e:	nop
    2850:	.word	0x01e13380
    2854:	.word	0x51eb851f
    2858:	.word	0x00012fc0
    285c:	.word	0x00015180

00002860 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    2860:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2862:	ldr	r4, [pc, #128]	; (28e4 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2864:	ldr	r6, [pc, #128]	; (28e8 <now()+0x88>)
    2866:	ldr	r3, [r4, #0]
    2868:	ldr	r2, [r6, #0]
    286a:	ldr	r5, [pc, #128]	; (28ec <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    286c:	sub	sp, #12
    286e:	ldr	r0, [r5, #0]
    2870:	str	r3, [sp, #0]
	return ret;
    2872:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2874:	subs	r3, r3, r2
    2876:	cmp.w	r3, #1000	; 0x3e8
    287a:	bcc.n	289c <now()+0x3c>
    287c:	adds	r0, #1
    287e:	b.n	2882 <now()+0x22>
    2880:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2882:	ldr	r3, [r4, #0]
    2884:	str	r3, [sp, #0]
	return ret;
    2886:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    2888:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    288c:	subs	r3, r3, r2
    288e:	cmp.w	r3, #1000	; 0x3e8
    2892:	add.w	r1, r0, #1
    2896:	bcs.n	2880 <now()+0x20>
    2898:	str	r0, [r5, #0]
    289a:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    289c:	ldr	r7, [pc, #80]	; (28f0 <now()+0x90>)
    289e:	ldr	r3, [r7, #0]
    28a0:	cmp	r0, r3
    28a2:	bcc.n	28c4 <now()+0x64>
    if (getTimePtr != 0) {
    28a4:	ldr	r3, [pc, #76]	; (28f4 <now()+0x94>)
    28a6:	ldr	r3, [r3, #0]
    28a8:	cbz	r3, 28c4 <now()+0x64>
      time_t t = getTimePtr();
    28aa:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    28ac:	ldr	r3, [pc, #72]	; (28f8 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    28ae:	cbnz	r0, 28c8 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    28b0:	ldr	r1, [pc, #72]	; (28fc <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    28b2:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    28b4:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    28b6:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    28b8:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    28ba:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    28bc:	it	ne
    28be:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    28c0:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    28c2:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    28c4:	add	sp, #12
    28c6:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28c8:	ldr	r2, [r4, #0]
    28ca:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    28cc:	ldr	r3, [r3, #0]
  Status = timeSet;
    28ce:	ldr	r2, [pc, #44]	; (28fc <now()+0x9c>)
	return ret;
    28d0:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    28d2:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    28d4:	add	r3, r0
  Status = timeSet;
    28d6:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    28d8:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    28da:	str	r3, [r7, #0]
  Status = timeSet;
    28dc:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    28de:	add	sp, #12
    28e0:	pop	{r4, r5, r6, r7, pc}
    28e2:	nop
    28e4:	.word	0x20019d58
    28e8:	.word	0x200197a4
    28ec:	.word	0x20019798
    28f0:	.word	0x200197a8
    28f4:	.word	0x200197a0
    28f8:	.word	0x20013990
    28fc:	.word	0x2001979c

00002900 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    2900:	push	{r3, lr}
  return hour(now()); 
    2902:	bl	2860 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2906:	ldr	r3, [pc, #16]	; (2918 <hour()+0x18>)
    2908:	ldr	r3, [r3, #0]
    290a:	cmp	r0, r3
    290c:	beq.n	2912 <hour()+0x12>
    290e:	bl	274c <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    2912:	ldr	r3, [pc, #8]	; (291c <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    2914:	ldrb	r0, [r3, #2]
    2916:	pop	{r3, pc}
    2918:	.word	0x2001978c
    291c:	.word	0x20019790

00002920 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    2920:	push	{r3, lr}
  return minute(now()); 
    2922:	bl	2860 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2926:	ldr	r3, [pc, #16]	; (2938 <minute()+0x18>)
    2928:	ldr	r3, [r3, #0]
    292a:	cmp	r0, r3
    292c:	beq.n	2932 <minute()+0x12>
    292e:	bl	274c <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    2932:	ldr	r3, [pc, #8]	; (293c <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    2934:	ldrb	r0, [r3, #1]
    2936:	pop	{r3, pc}
    2938:	.word	0x2001978c
    293c:	.word	0x20019790

00002940 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    2940:	push	{r3, lr}
  return second(now()); 
    2942:	bl	2860 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2946:	ldr	r3, [pc, #16]	; (2958 <second()+0x18>)
    2948:	ldr	r3, [r3, #0]
    294a:	cmp	r0, r3
    294c:	beq.n	2952 <second()+0x12>
    294e:	bl	274c <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    2952:	ldr	r3, [pc, #8]	; (295c <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    2954:	ldrb	r0, [r3, #0]
    2956:	pop	{r3, pc}
    2958:	.word	0x2001978c
    295c:	.word	0x20019790

00002960 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    2960:	push	{r3, lr}
  return(day(now())); 
    2962:	bl	2860 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2966:	ldr	r3, [pc, #16]	; (2978 <day()+0x18>)
    2968:	ldr	r3, [r3, #0]
    296a:	cmp	r0, r3
    296c:	beq.n	2972 <day()+0x12>
    296e:	bl	274c <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    2972:	ldr	r3, [pc, #8]	; (297c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    2974:	ldrb	r0, [r3, #4]
    2976:	pop	{r3, pc}
    2978:	.word	0x2001978c
    297c:	.word	0x20019790

00002980 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    2980:	push	{r3, lr}
  return month(now()); 
    2982:	bl	2860 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2986:	ldr	r3, [pc, #16]	; (2998 <month()+0x18>)
    2988:	ldr	r3, [r3, #0]
    298a:	cmp	r0, r3
    298c:	beq.n	2992 <month()+0x12>
    298e:	bl	274c <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    2992:	ldr	r3, [pc, #8]	; (299c <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    2994:	ldrb	r0, [r3, #5]
    2996:	pop	{r3, pc}
    2998:	.word	0x2001978c
    299c:	.word	0x20019790

000029a0 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    29a0:	push	{r3, lr}
  return year(now()); 
    29a2:	bl	2860 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    29a6:	ldr	r3, [pc, #20]	; (29bc <year()+0x1c>)
    29a8:	ldr	r3, [r3, #0]
    29aa:	cmp	r0, r3
    29ac:	beq.n	29b2 <year()+0x12>
    29ae:	bl	274c <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    29b2:	ldr	r3, [pc, #12]	; (29c0 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    29b4:	ldrb	r0, [r3, #6]
}
    29b6:	addw	r0, r0, #1970	; 0x7b2
    29ba:	pop	{r3, pc}
    29bc:	.word	0x2001978c
    29c0:	.word	0x20019790

000029c4 <setTime(long)>:
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    29c4:	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29c6:	ldr	r3, [pc, #40]	; (29f0 <setTime(long)+0x2c>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    29c8:	ldr	r2, [pc, #40]	; (29f4 <setTime(long)+0x30>)
    29ca:	ldr	r3, [r3, #0]
    29cc:	ldr	r2, [r2, #0]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    29ce:	ldr	r6, [pc, #40]	; (29f8 <setTime(long)+0x34>)
  nextSyncTime = (uint32_t)t + syncInterval;
    29d0:	ldr	r5, [pc, #40]	; (29fc <setTime(long)+0x38>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    29d2:	ldr	r1, [pc, #44]	; (2a00 <setTime(long)+0x3c>)
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    29d4:	str	r0, [r6, #0]
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    29d6:	sub	sp, #12
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    29d8:	add	r0, r2
    29da:	str	r3, [sp, #4]
	return ret;
    29dc:	ldr	r4, [sp, #4]
  Status = timeSet;
    29de:	ldr	r3, [pc, #36]	; (2a04 <setTime(long)+0x40>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    29e0:	str	r0, [r5, #0]
  Status = timeSet;
    29e2:	movs	r2, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    29e4:	str	r4, [r1, #0]
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    29e6:	strb	r2, [r3, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 
    29e8:	add	sp, #12
    29ea:	pop	{r4, r5, r6}
    29ec:	bx	lr
    29ee:	nop
    29f0:	.word	0x20019d58
    29f4:	.word	0x20013990
    29f8:	.word	0x20019798
    29fc:	.word	0x200197a8
    2a00:	.word	0x200197a4
    2a04:	.word	0x2001979c

00002a08 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    2a08:	ldr	r1, [pc, #12]	; (2a18 <setSyncProvider(long (*)())+0x10>)
    2a0a:	ldr	r2, [pc, #16]	; (2a1c <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2a0c:	ldr	r3, [pc, #16]	; (2a20 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    2a0e:	ldr	r1, [r1, #0]
    2a10:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2a12:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    2a14:	b.w	2860 <now()>
    2a18:	.word	0x20019798
    2a1c:	.word	0x200197a8
    2a20:	.word	0x200197a0

00002a24 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    2a24:	ldr	r2, [pc, #8]	; (2a30 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    2a26:	ldr	r1, [pc, #12]	; (2a34 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    2a28:	ldr	r0, [pc, #12]	; (2a38 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    2a2a:	b.w	a6b4 <__aeabi_atexit>
    2a2e:	nop
    2a30:	.word	0x20013930
    2a34:	.word	0x000006a5
    2a38:	.word	0x200197ac

00002a3c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    2a3c:	ldr	r2, [pc, #8]	; (2a48 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    2a3e:	ldr	r1, [pc, #12]	; (2a4c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    2a40:	ldr	r0, [pc, #12]	; (2a50 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    2a42:	b.w	a6b4 <__aeabi_atexit>
    2a46:	nop
    2a48:	.word	0x20013930
    2a4c:	.word	0x000006a5
    2a50:	.word	0x200197b4

00002a54 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    2a54:	ldr	r2, [pc, #8]	; (2a60 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    2a56:	ldr	r1, [pc, #12]	; (2a64 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    2a58:	ldr	r0, [pc, #12]	; (2a68 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    2a5a:	b.w	a6b4 <__aeabi_atexit>
    2a5e:	nop
    2a60:	.word	0x20013930
    2a64:	.word	0x000006a5
    2a68:	.word	0x200197bc

00002a6c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    2a6c:	ldr	r2, [pc, #8]	; (2a78 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    2a6e:	ldr	r1, [pc, #12]	; (2a7c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    2a70:	ldr	r0, [pc, #12]	; (2a80 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    2a72:	b.w	a6b4 <__aeabi_atexit>
    2a76:	nop
    2a78:	.word	0x20013930
    2a7c:	.word	0x000006a5
    2a80:	.word	0x200197c4

00002a84 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    2a84:	ldr	r2, [pc, #8]	; (2a90 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    2a86:	ldr	r1, [pc, #12]	; (2a94 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    2a88:	ldr	r0, [pc, #12]	; (2a98 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    2a8a:	b.w	a6b4 <__aeabi_atexit>
    2a8e:	nop
    2a90:	.word	0x20013930
    2a94:	.word	0x000006a5
    2a98:	.word	0x200197cc

00002a9c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    2a9c:	ldr	r2, [pc, #8]	; (2aa8 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    2a9e:	ldr	r1, [pc, #12]	; (2aac <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    2aa0:	ldr	r0, [pc, #12]	; (2ab0 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    2aa2:	b.w	a6b4 <__aeabi_atexit>
    2aa6:	nop
    2aa8:	.word	0x20013930
    2aac:	.word	0x000006a5
    2ab0:	.word	0x200197d4

00002ab4 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    2ab4:	ldr	r2, [pc, #8]	; (2ac0 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    2ab6:	ldr	r1, [pc, #12]	; (2ac4 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    2ab8:	ldr	r0, [pc, #12]	; (2ac8 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    2aba:	b.w	a6b4 <__aeabi_atexit>
    2abe:	nop
    2ac0:	.word	0x20013930
    2ac4:	.word	0x000006a5
    2ac8:	.word	0x200197dc

00002acc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    2acc:	ldr	r2, [pc, #8]	; (2ad8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    2ace:	ldr	r1, [pc, #12]	; (2adc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    2ad0:	ldr	r0, [pc, #12]	; (2ae0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    2ad2:	b.w	a6b4 <__aeabi_atexit>
    2ad6:	nop
    2ad8:	.word	0x20013930
    2adc:	.word	0x000006a5
    2ae0:	.word	0x200197e4

00002ae4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2ae4:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    2ae6:	ldr	r5, [pc, #28]	; (2b04 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    2ae8:	ldr	r4, [pc, #28]	; (2b08 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    2aea:	ldr	r0, [pc, #32]	; (2b0c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    2aec:	mov	r2, r5
    2aee:	mov	r1, r4
    2af0:	bl	a6b4 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    2af4:	mov	r2, r5
    2af6:	mov	r1, r4
    2af8:	ldr	r0, [pc, #20]	; (2b10 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2afa:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    2afe:	b.w	a6b4 <__aeabi_atexit>
    2b02:	nop
    2b04:	.word	0x20013930
    2b08:	.word	0x000006a5
    2b0c:	.word	0x200197ec
    2b10:	.word	0x200197f4

00002b14 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    2b14:	ldr	r2, [pc, #8]	; (2b20 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    2b16:	ldr	r1, [pc, #12]	; (2b24 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    2b18:	ldr	r0, [pc, #12]	; (2b28 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    2b1a:	b.w	a6b4 <__aeabi_atexit>
    2b1e:	nop
    2b20:	.word	0x20013930
    2b24:	.word	0x000006a5
    2b28:	.word	0x200197fc

00002b2c <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    2b2c:	ldr	r2, [pc, #8]	; (2b38 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    2b2e:	ldr	r1, [pc, #12]	; (2b3c <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    2b30:	ldr	r0, [pc, #12]	; (2b40 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    2b32:	b.w	a6b4 <__aeabi_atexit>
    2b36:	nop
    2b38:	.word	0x20013930
    2b3c:	.word	0x000006a5
    2b40:	.word	0x20019804

00002b44 <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2b44:	ldr	r0, [r0, #16]
    2b46:	cbz	r0, 2b4e <File::read(void*, unsigned int)+0xa>
    2b48:	ldr	r3, [r0, #0]
    2b4a:	ldr	r3, [r3, #40]	; 0x28
    2b4c:	bx	r3
	}
    2b4e:	bx	lr

00002b50 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2b50:	ldr	r0, [r0, #16]
    2b52:	cbz	r0, 2b5a <File::write(void const*, unsigned int)+0xa>
    2b54:	ldr	r3, [r0, #0]
    2b56:	ldr	r3, [r3, #44]	; 0x2c
    2b58:	bx	r3
	}
    2b5a:	bx	lr

00002b5c <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
    2b5c:	ldr	r0, [r0, #16]
    2b5e:	cbz	r0, 2b66 <File::available()+0xa>
    2b60:	ldr	r3, [r0, #0]
    2b62:	ldr	r3, [r3, #16]
    2b64:	bx	r3
	}
    2b66:	bx	lr

00002b68 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
    2b68:	ldr	r0, [r0, #16]
    2b6a:	cbz	r0, 2b72 <File::peek()+0xa>
    2b6c:	ldr	r3, [r0, #0]
    2b6e:	ldr	r3, [r3, #24]
    2b70:	bx	r3
	}
    2b72:	mov.w	r0, #4294967295
    2b76:	bx	lr

00002b78 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
    2b78:	ldr	r0, [r0, #16]
    2b7a:	cbz	r0, 2b82 <File::flush()+0xa>
    2b7c:	ldr	r3, [r0, #0]
    2b7e:	ldr	r3, [r3, #12]
    2b80:	bx	r3
    2b82:	bx	lr

00002b84 <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
    2b84:	ldr	r0, [r0, #16]
    2b86:	cbz	r0, 2b8e <File::truncate(unsigned long long)+0xa>
    2b88:	ldr	r1, [r0, #0]
    2b8a:	ldr	r1, [r1, #48]	; 0x30
    2b8c:	bx	r1
	}
    2b8e:	bx	lr

00002b90 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
    2b90:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
    2b92:	ldr	r0, [r0, #16]
    2b94:	cbz	r0, 2ba0 <File::seek(unsigned long long, int)+0x10>
    2b96:	ldr	r4, [r0, #0]
    2b98:	ldr	r1, [r4, #52]	; 0x34
	}
    2b9a:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2b9e:	bx	r1
	}
    2ba0:	ldr.w	r4, [sp], #4
    2ba4:	bx	lr
    2ba6:	nop

00002ba8 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
    2ba8:	ldr	r0, [r0, #16]
    2baa:	cbz	r0, 2bb2 <File::position()+0xa>
    2bac:	ldr	r3, [r0, #0]
    2bae:	ldr	r3, [r3, #56]	; 0x38
    2bb0:	bx	r3
	}
    2bb2:	movs	r0, #0
    2bb4:	movs	r1, #0
    2bb6:	bx	lr

00002bb8 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2bb8:	ldr	r0, [r0, #16]
    2bba:	cbz	r0, 2bc2 <File::size()+0xa>
    2bbc:	ldr	r3, [r0, #0]
    2bbe:	ldr	r3, [r3, #60]	; 0x3c
    2bc0:	bx	r3
	}
    2bc2:	movs	r0, #0
    2bc4:	movs	r1, #0
    2bc6:	bx	lr

00002bc8 <File::close()>:
	virtual void close() {
		if (f) f->close();
    2bc8:	ldr	r0, [r0, #16]
    2bca:	cbz	r0, 2bd2 <File::close()+0xa>
    2bcc:	ldr	r3, [r0, #0]
    2bce:	ldr	r3, [r3, #64]	; 0x40
    2bd0:	bx	r3
    2bd2:	bx	lr

00002bd4 <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2bd4:	ldr	r0, [r0, #16]
    2bd6:	cbz	r0, 2bde <File::operator bool()+0xa>
    2bd8:	ldr	r3, [r0, #0]
    2bda:	ldr	r3, [r3, #68]	; 0x44
    2bdc:	bx	r3
	}
    2bde:	bx	lr

00002be0 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
    2be0:	ldr	r0, [r0, #16]
    2be2:	cbz	r0, 2bea <File::name()+0xa>
    2be4:	ldr	r3, [r0, #0]
    2be6:	ldr	r3, [r3, #72]	; 0x48
    2be8:	bx	r3
	}
    2bea:	ldr	r0, [pc, #4]	; (2bf0 <File::name()+0x10>)
    2bec:	bx	lr
    2bee:	nop
    2bf0:	.word	0x00012bfc

00002bf4 <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    2bf4:	ldr	r0, [r0, #16]
    2bf6:	cbz	r0, 2bfe <File::isDirectory()+0xa>
    2bf8:	ldr	r3, [r0, #0]
    2bfa:	ldr	r3, [r3, #76]	; 0x4c
    2bfc:	bx	r3
	}
    2bfe:	bx	lr

00002c00 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
    2c00:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
    2c02:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
    2c04:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
    2c06:	cbz	r3, 2c14 <File::openNextFile(unsigned char)+0x14>
    2c08:	ldr	r5, [r3, #0]
    2c0a:	mov	r1, r3
    2c0c:	ldr	r3, [r5, #80]	; 0x50
    2c0e:	blx	r3
	}
    2c10:	mov	r0, r4
    2c12:	pop	{r3, r4, r5, pc}
    2c14:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2c18:	ldr	r2, [pc, #24]	; (2c34 <File::openNextFile(unsigned char)+0x34>)
    2c1a:	strb	r3, [r4, #4]
    2c1c:	strb	r3, [r4, #12]
    2c1e:	str	r0, [r4, #8]
    2c20:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    2c22:	ldr	r3, [r1, #16]
    2c24:	str	r3, [r4, #16]
		if (f) f->refcount++;
    2c26:	cmp	r3, #0
    2c28:	beq.n	2c10 <File::openNextFile(unsigned char)+0x10>
    2c2a:	ldr	r2, [r3, #16]
    2c2c:	adds	r2, #1
    2c2e:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
    2c30:	mov	r0, r4
    2c32:	pop	{r3, r4, r5, pc}
    2c34:	.word	0x00012ff8

00002c38 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
    2c38:	ldr	r0, [r0, #16]
    2c3a:	cbz	r0, 2c42 <File::rewindDirectory()+0xa>
    2c3c:	ldr	r3, [r0, #0]
    2c3e:	ldr	r3, [r3, #84]	; 0x54
    2c40:	bx	r3
    2c42:	bx	lr

00002c44 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    2c44:	ldr	r0, [r0, #16]
    2c46:	cbz	r0, 2c6a <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
    2c48:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    2c4a:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
    2c4c:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    2c4e:	ldr	r3, [r3, #40]	; 0x28
    2c50:	movs	r2, #1
    2c52:	add.w	r1, sp, #7
    2c56:	blx	r3
    2c58:	cbz	r0, 2c64 <File::read()+0x20>
		return b;
    2c5a:	ldrb.w	r0, [sp, #7]
	}
    2c5e:	add	sp, #12
    2c60:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    2c64:	mov.w	r0, #4294967295
    2c68:	b.n	2c5e <File::read()+0x1a>
    2c6a:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
    2c6e:	bx	lr

00002c70 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
    2c70:	push	{r4, lr}
    2c72:	sub	sp, #8
    2c74:	add	r3, sp, #8
		return write(&b, 1);
    2c76:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
    2c78:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
    2c7c:	ldr	r4, [r2, #44]	; 0x2c
    2c7e:	mov	r1, r3
    2c80:	movs	r2, #1
    2c82:	blx	r4
	}
    2c84:	add	sp, #8
    2c86:	pop	{r4, pc}

00002c88 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    2c88:	ldr	r3, [r0, #92]	; 0x5c
    2c8a:	cbz	r3, 2c90 <SDFile::operator bool()+0x8>
    2c8c:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
    2c8e:	bx	lr
    2c90:	ldr	r0, [r0, #96]	; 0x60
    2c92:	adds	r0, #0
    2c94:	it	ne
    2c96:	movne	r0, #1
    2c98:	bx	lr
    2c9a:	nop

00002c9c <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
    2c9c:	push	{r4, lr}
    2c9e:	mov	r4, r0
		if (filename) {
    2ca0:	ldr	r0, [r0, #100]	; 0x64
    2ca2:	cbz	r0, 2cac <SDFile::close()+0x10>
			free(filename);
    2ca4:	bl	b72c <free>
			filename = nullptr;
    2ca8:	movs	r3, #0
    2caa:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
    2cac:	add.w	r0, r4, #36	; 0x24
	}
    2cb0:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
    2cb4:	b.w	6d90 <FsBaseFile::close()>

00002cb8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
    2cb8:	push	{r4, lr}
    2cba:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
    2cbc:	mov	r2, r0
    2cbe:	ldr	r3, [r0, #16]
    2cc0:	ldr	r1, [pc, #20]	; (2cd8 <File::whoami()+0x20>)
    2cc2:	ldr	r0, [pc, #24]	; (2cdc <File::whoami()+0x24>)
    2cc4:	bl	a110 <Print::printf(char const*, ...)>
		if (f) f->whoami();
    2cc8:	ldr	r0, [r4, #16]
    2cca:	cbz	r0, 2cd6 <File::whoami()+0x1e>
    2ccc:	ldr	r3, [r0, #0]
	}
    2cce:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
    2cd2:	ldr	r3, [r3, #36]	; 0x24
    2cd4:	bx	r3
    2cd6:	pop	{r4, pc}
    2cd8:	.word	0x000130b0
    2cdc:	.word	0x20013ae8

00002ce0 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
    2ce0:	mov	r2, r0
    2ce2:	ldr	r3, [r0, #16]
    2ce4:	ldr	r1, [pc, #4]	; (2cec <SDFile::whoami()+0xc>)
    2ce6:	ldr	r0, [pc, #8]	; (2cf0 <SDFile::whoami()+0x10>)
    2ce8:	b.w	a110 <Print::printf(char const*, ...)>
    2cec:	.word	0x000130cc
    2cf0:	.word	0x20013ae8

00002cf4 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
    2cf4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cf8:	movs	r3, #0
    2cfa:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    2cfc:	mov	r2, r3
    2cfe:	mov	r5, r0
    2d00:	adds	r1, #36	; 0x24
    2d02:	add	r0, sp, #16
    2d04:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2d08:	ldr	r7, [pc, #148]	; (2da0 <SDFile::openNextFile(unsigned char)+0xac>)
    2d0a:	strb.w	r3, [sp, #4]
    2d0e:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    2d12:	str	r3, [sp, #72]	; 0x48
    2d14:	str	r3, [sp, #76]	; 0x4c
    2d16:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2d18:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    2d1a:	bl	6e38 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    2d1e:	ldr	r3, [sp, #72]	; 0x48
    2d20:	cmp	r3, #0
    2d22:	beq.n	2d8a <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
    2d24:	movs	r0, #104	; 0x68
    2d26:	bl	a5d8 <operator new(unsigned int)>
    2d2a:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    2d2c:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    2d30:	ldr	r2, [sp, #8]
    2d32:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2d36:	ldr	r0, [pc, #108]	; (2da4 <SDFile::openNextFile(unsigned char)+0xb0>)
    2d38:	ldr	r1, [pc, #108]	; (2da8 <SDFile::openNextFile(unsigned char)+0xb4>)
    2d3a:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2d3c:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    2d40:	movs	r6, #0
    2d42:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    2d44:	str	r1, [r4, #20]
    2d46:	str	r2, [r4, #28]
    2d48:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    2d4c:	add.w	r0, r4, #36	; 0x24
    2d50:	add	r1, sp, #16
    2d52:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2d54:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    2d56:	str	r6, [r4, #16]
    2d58:	str.w	r8, [r4, #8]
    2d5c:	bl	6d18 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    2d60:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    2d62:	ldr	r2, [pc, #72]	; (2dac <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2d64:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    2d66:	adds	r3, #1
    2d68:	str	r6, [r4, #100]	; 0x64
    2d6a:	strb	r6, [r5, #4]
    2d6c:	str.w	r8, [r5, #8]
    2d70:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    2d72:	str	r4, [r5, #16]
		if (f) f->refcount++;
    2d74:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    2d76:	str	r2, [r5, #0]
    2d78:	ldr	r3, [pc, #52]	; (2db0 <SDFile::openNextFile(unsigned char)+0xbc>)
    2d7a:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    2d7c:	add	r0, sp, #16
    2d7e:	bl	6d90 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
    2d82:	mov	r0, r5
    2d84:	add	sp, #80	; 0x50
    2d86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    2d8a:	ldr	r3, [sp, #76]	; 0x4c
    2d8c:	cmp	r3, #0
    2d8e:	bne.n	2d24 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    2d90:	ldr	r2, [pc, #24]	; (2dac <SDFile::openNextFile(unsigned char)+0xb8>)
    2d92:	strb	r3, [r5, #4]
    2d94:	str	r4, [r5, #8]
    2d96:	strb	r3, [r5, #12]
    2d98:	str	r3, [r5, #16]
    2d9a:	str	r2, [r5, #0]
    2d9c:	b.n	2d78 <SDFile::openNextFile(unsigned char)+0x84>
    2d9e:	nop
    2da0:	.word	0x00012b28
    2da4:	.word	0x00013058
    2da8:	.word	0x00012fd4
    2dac:	.word	0x00012ff8
    2db0:	.word	0x00012b04

00002db4 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
    2db4:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
    2db6:	cbz	r2, 2dd2 <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
    2db8:	ldrb	r3, [r2, #0]
    2dba:	and.w	r3, r3, #8
    2dbe:	and.w	r0, r3, #255	; 0xff
    2dc2:	cbz	r3, 2e06 <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    2dc4:	ldr	r3, [r2, #28]
    2dc6:	ldr	r0, [r2, #20]
    2dc8:	subs	r0, r3, r0
    2dca:	it	mi
    2dcc:	mvnmi.w	r0, #2147483648	; 0x80000000
    2dd0:	bx	lr
    2dd2:	ldr	r1, [r0, #96]	; 0x60
    2dd4:	cbz	r1, 2e08 <SDFile::available()+0x54>
    2dd6:	ldrb.w	r3, [r1, #49]	; 0x31
    2dda:	and.w	r3, r3, #8
    2dde:	and.w	r0, r3, #255	; 0xff
    2de2:	cbz	r3, 2e06 <SDFile::available()+0x52>
    2de4:	ldrd	r2, r3, [r1, #16]
    2de8:	ldrd	r0, r1, [r1]
    2dec:	subs	r0, r2, r0
    2dee:	push	{r4, r5}
    2df0:	sbc.w	r1, r3, r1
    2df4:	movs	r5, #0
    2df6:	mvn.w	r4, #2147483648	; 0x80000000
    2dfa:	cmp	r5, r1
    2dfc:	it	eq
    2dfe:	cmpeq	r4, r0
    2e00:	bcs.n	2e04 <SDFile::available()+0x50>
    2e02:	mov	r0, r4
		return sdfatfile.available();
	}
    2e04:	pop	{r4, r5}
    2e06:	bx	lr
    2e08:	mov	r0, r1
    2e0a:	bx	lr

00002e0c <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
    2e0c:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
    2e0e:	cbz	r3, 2e16 <SDFile::peek()+0xa>
    2e10:	mov	r0, r3
    2e12:	b.w	57ac <FatFile::peek()>
    2e16:	ldr	r0, [r0, #96]	; 0x60
    2e18:	cbz	r0, 2e1e <SDFile::peek()+0x12>
    2e1a:	b.w	3a9c <ExFatFile::peek()>
		return sdfatfile.peek();
	}
    2e1e:	mov.w	r0, #4294967295
    2e22:	bx	lr

00002e24 <SDFile::flush()>:
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
    2e24:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    2e26:	cbz	r3, 2e2e <SDFile::flush()+0xa>
    2e28:	mov	r0, r3
    2e2a:	b.w	5c38 <FatFile::sync()>
    2e2e:	ldr	r0, [r0, #96]	; 0x60
    2e30:	cbz	r0, 2e36 <SDFile::flush()+0x12>
    2e32:	b.w	49e0 <ExFatFile::sync()>
    2e36:	bx	lr

00002e38 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
    2e38:	push	{r3, r4, r5, lr}
		if (!filename) {
    2e3a:	ldr	r4, [r0, #100]	; 0x64
    2e3c:	cbz	r4, 2e42 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
    2e3e:	mov	r0, r4
    2e40:	pop	{r3, r4, r5, pc}
    2e42:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
    2e44:	mov.w	r0, #256	; 0x100
    2e48:	bl	b71c <malloc>
    2e4c:	mov	r1, r0
    2e4e:	str	r0, [r5, #100]	; 0x64
			if (filename) {
    2e50:	cbz	r0, 2e74 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
    2e52:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    2e54:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
    2e56:	cbz	r0, 2e64 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
    2e58:	mov.w	r2, #256	; 0x100
    2e5c:	bl	63ec <FatFile::getName(char*, unsigned int)>
    2e60:	ldr	r4, [r5, #100]	; 0x64
    2e62:	b.n	2e3e <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
    2e64:	ldr	r0, [r5, #96]	; 0x60
    2e66:	cbz	r0, 2e7a <SDFile::name()+0x42>
    2e68:	mov.w	r2, #256	; 0x100
    2e6c:	bl	3768 <ExFatFile::getName(char*, unsigned int)>
    2e70:	ldr	r4, [r5, #100]	; 0x64
    2e72:	b.n	2e3e <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
    2e74:	ldr	r4, [pc, #8]	; (2e80 <SDFile::name()+0x48>)
    2e76:	str	r4, [r5, #100]	; 0x64
    2e78:	b.n	2e3e <SDFile::name()+0x6>
    2e7a:	mov	r4, r1
    2e7c:	b.n	2e3e <SDFile::name()+0x6>
    2e7e:	nop
    2e80:	.word	0x2001980c

00002e84 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
    2e84:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2e86:	cbz	r3, 2eb0 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
    2e88:	ldrb	r2, [r3, #0]
    2e8a:	tst.w	r2, #112	; 0x70
    2e8e:	bne.n	2e92 <SDFile::rewindDirectory()+0xe>
    2e90:	bx	lr
    2e92:	push	{r4, lr}
    2e94:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    2e96:	movs	r1, #0
    2e98:	mov	r0, r3
    2e9a:	bl	5a4c <FatFile::seekSet(unsigned long)>
    2e9e:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
    2ea0:	cbz	r0, 2eae <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    2ea2:	movs	r2, #0
    2ea4:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
    2ea6:	ldmia.w	sp!, {r4, lr}
    2eaa:	b.w	3acc <ExFatFile::seekSet(unsigned long long)>
    2eae:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2eb0:	ldr	r0, [r0, #96]	; 0x60
    2eb2:	cmp	r0, #0
    2eb4:	beq.n	2e90 <SDFile::rewindDirectory()+0xc>
    2eb6:	ldrb.w	r3, [r0, #49]	; 0x31
    2eba:	tst.w	r3, #80	; 0x50
    2ebe:	beq.n	2e90 <SDFile::rewindDirectory()+0xc>
    2ec0:	movs	r2, #0
    2ec2:	movs	r3, #0
    2ec4:	b.w	3acc <ExFatFile::seekSet(unsigned long long)>

00002ec8 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
    2ec8:	push	{r4, r6, r7, lr}
    2eca:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
    2ecc:	cbz	r4, 2ef2 <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
    2ece:	cmp	r3, #1
    2ed0:	it	eq
    2ed2:	cmpeq	r2, #0
    2ed4:	bcc.n	2eda <SDFile::truncate(unsigned long long)+0x12>
    2ed6:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
    2ed8:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
    2eda:	mov	r1, r2
    2edc:	mov	r0, r4
    2ede:	bl	5a4c <FatFile::seekSet(unsigned long)>
    2ee2:	cmp	r0, #0
    2ee4:	beq.n	2ed6 <SDFile::truncate(unsigned long long)+0xe>
    2ee6:	mov	r0, r4
    2ee8:	bl	5c44 <FatFile::truncate()>
    2eec:	cmp	r0, #0
    2eee:	beq.n	2ed6 <SDFile::truncate(unsigned long long)+0xe>
    2ef0:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
    2ef2:	ldr	r4, [r0, #96]	; 0x60
    2ef4:	cmp	r4, #0
    2ef6:	beq.n	2ed6 <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    2ef8:	mov	r0, r4
    2efa:	bl	3acc <ExFatFile::seekSet(unsigned long long)>
    2efe:	cmp	r0, #0
    2f00:	beq.n	2ed6 <SDFile::truncate(unsigned long long)+0xe>
    2f02:	mov	r0, r4
    2f04:	ldmia.w	sp!, {r4, r6, r7, lr}
    2f08:	b.w	4d98 <ExFatFile::truncate()>

00002f0c <SDFile::size()>:
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
    2f0c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2f0e:	cbz	r3, 2f16 <SDFile::size()+0xa>
    2f10:	ldr	r0, [r3, #28]
    2f12:	movs	r1, #0
    2f14:	bx	lr
    2f16:	ldr	r3, [r0, #96]	; 0x60
    2f18:	cbz	r3, 2f20 <SDFile::size()+0x14>
    2f1a:	ldr	r0, [r3, #16]
    2f1c:	ldr	r1, [r3, #20]
    2f1e:	bx	lr
    2f20:	mov	r0, r3
    2f22:	mov	r1, r3
		return sdfatfile.size();
	}
    2f24:	bx	lr
    2f26:	nop

00002f28 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
    2f28:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    2f2a:	cbz	r3, 2f32 <SDFile::position()+0xa>
    2f2c:	ldr	r0, [r3, #20]
    2f2e:	movs	r1, #0
    2f30:	bx	lr
    2f32:	ldr	r3, [r0, #96]	; 0x60
    2f34:	cbz	r3, 2f3c <SDFile::position()+0x14>
    2f36:	ldmia.w	r3, {r0, r1}
    2f3a:	bx	lr
    2f3c:	mov	r0, r3
    2f3e:	mov	r1, r3
		return sdfatfile.curPosition();
	}
    2f40:	bx	lr
    2f42:	nop

00002f44 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
    2f44:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    2f46:	cbz	r3, 2f4e <SDFile::read(void*, unsigned int)+0xa>
    2f48:	mov	r0, r3
    2f4a:	b.w	5614 <FatFile::read(void*, unsigned int)>
    2f4e:	ldr	r0, [r0, #96]	; 0x60
    2f50:	cbz	r0, 2f56 <SDFile::read(void*, unsigned int)+0x12>
    2f52:	b.w	38fc <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
    2f56:	mov.w	r0, #4294967295
    2f5a:	bx	lr

00002f5c <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
    2f5c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2f5e:	cbz	r3, 2f6e <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
    2f60:	ldrb	r3, [r3, #0]
    2f62:	tst.w	r3, #112	; 0x70
    2f66:	ite	ne
    2f68:	movne	r0, #1
    2f6a:	moveq	r0, #0
    2f6c:	bx	lr
    2f6e:	ldr	r0, [r0, #96]	; 0x60
    2f70:	cbz	r0, 2f80 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    2f72:	ldrb.w	r3, [r0, #49]	; 0x31
    2f76:	tst.w	r3, #80	; 0x50
    2f7a:	ite	ne
    2f7c:	movne	r0, #1
    2f7e:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
    2f80:	bx	lr
    2f82:	nop

00002f84 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
    2f84:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2f86:	cbz	r3, 2f8e <SDFile::write(void const*, unsigned int)+0xa>
    2f88:	mov	r0, r3
    2f8a:	b.w	5cbc <FatFile::write(void const*, unsigned int)>
    2f8e:	ldr	r0, [r0, #96]	; 0x60
    2f90:	cbz	r0, 2f96 <SDFile::write(void const*, unsigned int)+0x12>
    2f92:	b.w	4e7c <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
    2f96:	bx	lr

00002f98 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    2f98:	push	{r4, r6, r7}
    2f9a:	ldr	r4, [sp, #12]
    2f9c:	mov	r6, r2
    2f9e:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    2fa0:	cbz	r4, 2fb0 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    2fa2:	cmp	r4, #1
    2fa4:	beq.n	2fe4 <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    2fa6:	cmp	r4, #2
    2fa8:	beq.n	2fc6 <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
    2faa:	movs	r0, #0
    2fac:	pop	{r4, r6, r7}
    2fae:	bx	lr
    2fb0:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2fb2:	cbz	r4, 2fec <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2fb4:	cmp	r3, #1
    2fb6:	it	eq
    2fb8:	cmpeq	r2, #0
    2fba:	bcs.n	2faa <SDFile::seek(unsigned long long, int)+0x12>
    2fbc:	mov	r0, r4
    2fbe:	mov	r1, r2
    2fc0:	pop	{r4, r6, r7}
    2fc2:	b.w	5a4c <FatFile::seekSet(unsigned long)>
    2fc6:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2fc8:	cbz	r3, 2ff8 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
    2fca:	ldr	r2, [r3, #28]
    2fcc:	adds	r6, r6, r2
    2fce:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2fd2:	cmp	r7, #1
    2fd4:	it	eq
    2fd6:	cmpeq	r6, #0
    2fd8:	bcs.n	2faa <SDFile::seek(unsigned long long, int)+0x12>
    2fda:	mov	r1, r6
    2fdc:	mov	r0, r3
    2fde:	pop	{r4, r6, r7}
    2fe0:	b.w	5a4c <FatFile::seekSet(unsigned long)>
    2fe4:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    2fe6:	cbz	r3, 300c <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
    2fe8:	ldr	r2, [r3, #20]
    2fea:	b.n	2fcc <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2fec:	ldr	r0, [r0, #96]	; 0x60
    2fee:	cmp	r0, #0
    2ff0:	beq.n	2faa <SDFile::seek(unsigned long long, int)+0x12>
    2ff2:	pop	{r4, r6, r7}
    2ff4:	b.w	3acc <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2ff8:	ldr	r0, [r0, #96]	; 0x60
    2ffa:	cmp	r0, #0
    2ffc:	beq.n	2faa <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2ffe:	ldrd	r2, r3, [r0, #16]
    3002:	adds	r2, r2, r6
    3004:	adcs	r3, r7
    3006:	pop	{r4, r6, r7}
    3008:	b.w	3acc <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    300c:	ldr	r0, [r0, #96]	; 0x60
    300e:	cmp	r0, #0
    3010:	beq.n	2faa <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    3012:	ldrd	r2, r3, [r0]
    3016:	adds	r2, r2, r6
    3018:	adcs	r3, r7
    301a:	b.n	2ff2 <SDFile::seek(unsigned long long, int)+0x5a>

0000301c <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    301c:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    301e:	ldr	r3, [pc, #32]	; (3040 <File::~File()+0x24>)
    3020:	push	{r4, lr}
    3022:	mov	r4, r0
    3024:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3026:	cbz	r2, 303a <File::~File()+0x1e>
    3028:	ldr	r3, [r2, #16]
    302a:	subs	r3, #1
    302c:	str	r3, [r2, #16]
    302e:	cbnz	r3, 303a <File::~File()+0x1e>
    3030:	ldr	r0, [r0, #16]
    3032:	cbz	r0, 303a <File::~File()+0x1e>
    3034:	ldr	r3, [r0, #0]
    3036:	ldr	r3, [r3, #32]
    3038:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    303a:	mov	r0, r4
    303c:	pop	{r4, pc}
    303e:	nop
    3040:	.word	0x00012ff8

00003044 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    3044:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    3046:	ldr	r3, [r0, #92]	; 0x5c
    3048:	ldr	r2, [pc, #80]	; (309c <SDFile::~SDFile()+0x58>)
    304a:	str	r2, [r0, #0]
    304c:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    304e:	add.w	r5, r0, #36	; 0x24
    3052:	cbz	r3, 3092 <SDFile::~SDFile()+0x4e>
    3054:	mov	r0, r5
    3056:	bl	6d90 <FsBaseFile::close()>
		if (filename) free(filename);
    305a:	ldr	r0, [r4, #100]	; 0x64
    305c:	cbz	r0, 3062 <SDFile::~SDFile()+0x1e>
    305e:	bl	b72c <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    3062:	ldr	r3, [pc, #60]	; (30a0 <SDFile::~SDFile()+0x5c>)
    3064:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    3066:	mov	r0, r5
    3068:	bl	6d90 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    306c:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    306e:	ldr	r3, [pc, #52]	; (30a4 <SDFile::~SDFile()+0x60>)
    3070:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3072:	cbz	r2, 3086 <SDFile::~SDFile()+0x42>
    3074:	ldr	r3, [r2, #16]
    3076:	subs	r3, #1
    3078:	str	r3, [r2, #16]
    307a:	cbnz	r3, 3086 <SDFile::~SDFile()+0x42>
    307c:	ldr	r0, [r4, #16]
    307e:	cbz	r0, 3086 <SDFile::~SDFile()+0x42>
    3080:	ldr	r3, [r0, #0]
    3082:	ldr	r3, [r3, #32]
    3084:	blx	r3
	}
    3086:	mov	r0, r4
    3088:	movs	r1, #104	; 0x68
    308a:	bl	a5dc <operator delete(void*, unsigned int)>
    308e:	mov	r0, r4
    3090:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    3092:	ldr	r3, [r0, #96]	; 0x60
    3094:	cmp	r3, #0
    3096:	bne.n	3054 <SDFile::~SDFile()+0x10>
    3098:	b.n	305a <SDFile::~SDFile()+0x16>
    309a:	nop
    309c:	.word	0x00013058
    30a0:	.word	0x00012b04
    30a4:	.word	0x00012ff8

000030a8 <File::~File()>:
    30a8:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    30aa:	ldr	r3, [pc, #40]	; (30d4 <File::~File()+0x2c>)
    30ac:	push	{r4, lr}
    30ae:	mov	r4, r0
    30b0:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    30b2:	cbz	r2, 30c6 <File::~File()+0x1e>
    30b4:	ldr	r3, [r2, #16]
    30b6:	subs	r3, #1
    30b8:	str	r3, [r2, #16]
    30ba:	cbnz	r3, 30c6 <File::~File()+0x1e>
    30bc:	ldr	r0, [r0, #16]
    30be:	cbz	r0, 30c6 <File::~File()+0x1e>
    30c0:	ldr	r3, [r0, #0]
    30c2:	ldr	r3, [r3, #32]
    30c4:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    30c6:	mov	r0, r4
    30c8:	movs	r1, #20
    30ca:	bl	a5dc <operator delete(void*, unsigned int)>
    30ce:	mov	r0, r4
    30d0:	pop	{r4, pc}
    30d2:	nop
    30d4:	.word	0x00012ff8

000030d8 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    30d8:	push	{r3, r4, r5, lr}
    30da:	ldr	r3, [r0, #92]	; 0x5c
    30dc:	ldr	r2, [pc, #72]	; (3128 <SDFile::~SDFile()+0x50>)
    30de:	str	r2, [r0, #0]
    30e0:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    30e2:	add.w	r5, r0, #36	; 0x24
    30e6:	cbz	r3, 311e <SDFile::~SDFile()+0x46>
    30e8:	mov	r0, r5
    30ea:	bl	6d90 <FsBaseFile::close()>
		if (filename) free(filename);
    30ee:	ldr	r0, [r4, #100]	; 0x64
    30f0:	cbz	r0, 30f6 <SDFile::~SDFile()+0x1e>
    30f2:	bl	b72c <free>
    30f6:	ldr	r3, [pc, #52]	; (312c <SDFile::~SDFile()+0x54>)
    30f8:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    30fa:	mov	r0, r5
    30fc:	bl	6d90 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3100:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3102:	ldr	r3, [pc, #44]	; (3130 <SDFile::~SDFile()+0x58>)
    3104:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3106:	cbz	r2, 311a <SDFile::~SDFile()+0x42>
    3108:	ldr	r3, [r2, #16]
    310a:	subs	r3, #1
    310c:	str	r3, [r2, #16]
    310e:	cbnz	r3, 311a <SDFile::~SDFile()+0x42>
    3110:	ldr	r0, [r4, #16]
    3112:	cbz	r0, 311a <SDFile::~SDFile()+0x42>
    3114:	ldr	r3, [r0, #0]
    3116:	ldr	r3, [r3, #32]
    3118:	blx	r3
	}
    311a:	mov	r0, r4
    311c:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    311e:	ldr	r3, [r0, #96]	; 0x60
    3120:	cmp	r3, #0
    3122:	bne.n	30e8 <SDFile::~SDFile()+0x10>
    3124:	b.n	30ee <SDFile::~SDFile()+0x16>
    3126:	nop
    3128:	.word	0x00013058
    312c:	.word	0x00012b04
    3130:	.word	0x00012ff8

00003134 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    3134:	ldr	r2, [pc, #8]	; (3140 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    3136:	ldr	r1, [pc, #12]	; (3144 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    3138:	ldr	r0, [pc, #12]	; (3148 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    313a:	b.w	a6b4 <__aeabi_atexit>
    313e:	nop
    3140:	.word	0x20013930
    3144:	.word	0x000006a5
    3148:	.word	0x20019810

0000314c <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    314c:	ldr	r2, [pc, #8]	; (3158 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    314e:	ldr	r1, [pc, #12]	; (315c <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    3150:	ldr	r0, [pc, #12]	; (3160 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    3152:	b.w	a6b4 <__aeabi_atexit>
    3156:	nop
    3158:	.word	0x20013930
    315c:	.word	0x000006a5
    3160:	.word	0x20019818

00003164 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    3164:	ldr	r2, [pc, #8]	; (3170 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    3166:	ldr	r1, [pc, #12]	; (3174 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    3168:	ldr	r0, [pc, #12]	; (3178 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    316a:	b.w	a6b4 <__aeabi_atexit>
    316e:	nop
    3170:	.word	0x20013930
    3174:	.word	0x000006a5
    3178:	.word	0x20019820

0000317c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    317c:	ldr	r2, [pc, #8]	; (3188 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    317e:	ldr	r1, [pc, #12]	; (318c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    3180:	ldr	r0, [pc, #12]	; (3190 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    3182:	b.w	a6b4 <__aeabi_atexit>
    3186:	nop
    3188:	.word	0x20013930
    318c:	.word	0x000006a5
    3190:	.word	0x20019828

00003194 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    3194:	ldr	r2, [pc, #8]	; (31a0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    3196:	ldr	r1, [pc, #12]	; (31a4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    3198:	ldr	r0, [pc, #12]	; (31a8 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    319a:	b.w	a6b4 <__aeabi_atexit>
    319e:	nop
    31a0:	.word	0x20013930
    31a4:	.word	0x000006a5
    31a8:	.word	0x20019830

000031ac <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    31ac:	ldr	r2, [pc, #8]	; (31b8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    31ae:	ldr	r1, [pc, #12]	; (31bc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    31b0:	ldr	r0, [pc, #12]	; (31c0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    31b2:	b.w	a6b4 <__aeabi_atexit>
    31b6:	nop
    31b8:	.word	0x20013930
    31bc:	.word	0x000006a5
    31c0:	.word	0x20019838

000031c4 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    31c4:	ldrb.w	r2, [r0, #57]	; 0x39
    31c8:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    31cc:	subs	r0, r2, r0
    31ce:	bx	lr

000031d0 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    31d0:	ldrb.w	r3, [r0, #56]	; 0x38
    31d4:	ldrb.w	r2, [r0, #57]	; 0x39
    31d8:	cmp	r2, r3
    31da:	bls.n	31e8 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    31dc:	adds	r2, r3, #1
    31de:	add	r3, r0
    31e0:	strb.w	r2, [r0, #56]	; 0x38
    31e4:	ldrb	r0, [r3, #24]
    31e6:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    31e8:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    31ec:	bx	lr
    31ee:	nop

000031f0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    31f0:	ldrb.w	r3, [r0, #56]	; 0x38
    31f4:	ldrb.w	r2, [r0, #57]	; 0x39
    31f8:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    31fa:	itte	hi
    31fc:	addhi	r3, r3, r0
    31fe:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3200:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    3204:	bx	lr
    3206:	nop

00003208 <TwoWire::flush()>:
	virtual void flush(void) {
    3208:	bx	lr
    320a:	nop

0000320c <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    320c:	push	{r3, r4, r5, lr}
    320e:	mov	r5, r0
	if (transmitting || slave_mode) {
    3210:	ldrh.w	r0, [r0, #94]	; 0x5e
    3214:	cbz	r0, 323c <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    3216:	ldrb.w	r3, [r5, #93]	; 0x5d
    321a:	mov	r4, r2
    321c:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    3220:	cmp	r4, r2
    3222:	bhi.n	323e <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    3224:	add.w	r0, r5, #59	; 0x3b
    3228:	add	r0, r3
    322a:	mov	r2, r4
    322c:	bl	8774 <memcpy>
		txBufferLength += quantity;
    3230:	ldrb.w	r3, [r5, #93]	; 0x5d
    3234:	add	r3, r4
    3236:	strb.w	r3, [r5, #93]	; 0x5d
    323a:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    323c:	pop	{r3, r4, r5, pc}
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    323e:	movs	r0, #1
    3240:	mov	r4, r2
    3242:	strb	r0, [r5, #4]
    3244:	b.n	3224 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    3246:	nop

00003248 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    3248:	ldrh.w	r3, [r0, #94]	; 0x5e
    324c:	cbz	r3, 326a <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    324e:	ldrb.w	r3, [r0, #93]	; 0x5d
    3252:	cmp	r3, #32
    3254:	bhi.n	3266 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    3256:	adds	r2, r0, r3
    3258:	adds	r3, #1
    325a:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    325e:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    3260:	strb.w	r1, [r2, #59]	; 0x3b
    3264:	bx	lr
    3266:	movs	r3, #1
    3268:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    326a:	movs	r0, #0
    326c:	bx	lr
    326e:	nop

00003270 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    3270:	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    3272:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    3274:	ldrb	r4, [r2, #3]
    3276:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    3278:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    327a:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    327c:	bpl.n	32c8 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    327e:	movs	r3, #16
    3280:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    3282:	lsls	r3, r4, #25
    3284:	bpl.n	32c6 <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    3286:	and.w	r4, r4, #4
    328a:	and.w	r3, r4, #255	; 0xff
    328e:	cmp	r4, #0
    3290:	beq.n	3348 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3292:	ldr	r1, [pc, #264]	; (339c <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    3294:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3296:	movs	r3, #0
    3298:	strb	r3, [r1, #0]
			txBufferLength = 0;
    329a:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    329e:	cmp	r2, #0
    32a0:	beq.n	3370 <TwoWire::isr()+0x100>
				user_onRequest();
    32a2:	blx	r2
			}
			if (txBufferLength == 0) {
    32a4:	ldrb.w	r3, [r5, #93]	; 0x5d
    32a8:	cmp	r3, #0
    32aa:	beq.n	3370 <TwoWire::isr()+0x100>
    32ac:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    32ae:	movs	r2, #208	; 0xd0
    32b0:	strb	r2, [r3, #2]
    32b2:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    32b4:	ldrb.w	r2, [r5, #59]	; 0x3b
    32b8:	strb	r2, [r3, #4]
    32ba:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    32bc:	movs	r2, #1
    32be:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    32c2:	movs	r2, #2
    32c4:	strb	r2, [r3, #3]
    32c6:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    32c8:	and.w	r3, r4, #64	; 0x40
    32cc:	and.w	r0, r3, #255	; 0xff
    32d0:	cmp	r3, #0
    32d2:	bne.n	3286 <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    32d4:	ldrb	r3, [r2, #6]
    32d6:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    32d8:	and.w	r1, r3, #96	; 0x60
    32dc:	cmp	r1, #96	; 0x60
    32de:	beq.n	337e <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    32e0:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    32e2:	and.w	r3, r3, #16
    32e6:	and.w	r1, r3, #255	; 0xff
    32ea:	cbz	r3, 331a <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    32ec:	ands.w	r4, r4, #1
    32f0:	bne.n	3362 <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    32f2:	ldrb.w	r3, [r5, #92]	; 0x5c
    32f6:	ldrb.w	r1, [r5, #93]	; 0x5d
    32fa:	cmp	r1, r3
    32fc:	bls.n	3396 <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    32fe:	adds	r1, r3, #1
    3300:	add	r3, r5
    3302:	strb.w	r1, [r5, #92]	; 0x5c
    3306:	ldrb.w	r3, [r3, #59]	; 0x3b
    330a:	strb	r3, [r2, #4]
    330c:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    330e:	movs	r2, #208	; 0xd0
    3310:	strb	r2, [r3, #2]
    3312:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3314:	movs	r2, #2
    3316:	strb	r2, [r3, #3]
    3318:	b.n	32c6 <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    331a:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    331e:	ldrb	r3, [r2, #6]
    3320:	orr.w	r3, r3, #32
    3324:	strb	r3, [r2, #6]
    3326:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3328:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    332c:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    332e:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    3330:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3332:	bhi.n	32c2 <TwoWire::isr()+0x52>
    3334:	ldr	r0, [pc, #100]	; (339c <TwoWire::isr()+0x12c>)
    3336:	ldrb	r0, [r0, #0]
    3338:	cmp	r0, #0
    333a:	beq.n	32c2 <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    333c:	adds	r0, r5, r1
    333e:	adds	r1, #1
    3340:	strb.w	r1, [r5, #57]	; 0x39
    3344:	strb	r2, [r0, #24]
    3346:	b.n	32c2 <TwoWire::isr()+0x52>
    3348:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    334a:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    334e:	movs	r3, #192	; 0xc0
    3350:	strb	r3, [r2, #2]
    3352:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3354:	ldr	r2, [pc, #68]	; (339c <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    3356:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3358:	movs	r1, #1
    335a:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    335c:	movs	r2, #2
    335e:	strb	r2, [r3, #3]
    3360:	b.n	32c6 <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    3362:	movs	r3, #192	; 0xc0
    3364:	strb	r3, [r2, #2]
    3366:	ldr	r3, [r5, #16]
			data = port().D;
    3368:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    336a:	movs	r2, #2
    336c:	strb	r2, [r3, #3]
    336e:	b.n	32c6 <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3370:	movs	r2, #1
				txBuffer[0] = 0;
    3372:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3374:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    3378:	strb.w	r3, [r5, #59]	; 0x3b
    337c:	b.n	32ac <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    337e:	and.w	r3, r3, #223	; 0xdf
    3382:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    3384:	ldr	r3, [r5, #104]	; 0x68
    3386:	cbz	r3, 3392 <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    3388:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    338c:	ldrb.w	r0, [r5, #57]	; 0x39
    3390:	blx	r3
    3392:	ldr	r2, [r5, #16]
    3394:	b.n	32e0 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    3396:	strb	r4, [r2, #4]
    3398:	b.n	330c <TwoWire::isr()+0x9c>
    339a:	nop
    339c:	.word	0x20019840

000033a0 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    33a0:	ldr	r0, [pc, #4]	; (33a8 <i2c0_isr+0x8>)
    33a2:	b.w	3270 <TwoWire::isr()>
    33a6:	nop
    33a8:	.word	0x20013a00

000033ac <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    33ac:	ldr	r0, [pc, #4]	; (33b4 <i2c1_isr+0x8>)
    33ae:	b.w	3270 <TwoWire::isr()>
    33b2:	nop
    33b4:	.word	0x20013a6c

000033b8 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    33b8:	ldr	r0, [pc, #4]	; (33c0 <i2c2_isr+0x8>)
    33ba:	b.w	3270 <TwoWire::isr()>
    33be:	nop
    33c0:	.word	0x20013994

000033c4 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    33c4:	bx	lr
    33c6:	nop

000033c8 <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
    33c8:	push	{r4, lr}
    33ca:	ldr.w	r4, [r0, #1148]	; 0x47c
    33ce:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    33d0:	cbz	r4, 33fc <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    33d2:	mov	r2, r1
    33d4:	mov	r0, sp
    33d6:	mov	r1, r4
    33d8:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    33da:	movs	r4, #0
    33dc:	strb.w	r4, [sp]
    33e0:	strb.w	r4, [sp, #1]
    33e4:	strb.w	r4, [sp, #2]
    33e8:	bl	55f8 <FatFile::open(FatVolume*, char const*, int)>
    33ec:	cbnz	r0, 33f2 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
    33ee:	add	sp, #56	; 0x38
    33f0:	pop	{r4, pc}
    33f2:	mov	r0, sp
    33f4:	bl	6738 <FatFile::remove()>
    33f8:	add	sp, #56	; 0x38
    33fa:	pop	{r4, pc}
    33fc:	ldr.w	r0, [r0, #1152]	; 0x480
    3400:	cmp	r0, #0
    3402:	beq.n	33ee <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    3404:	mov	r2, r1
    3406:	movs	r3, #1
    3408:	mov	r1, r0
    340a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    340c:	strb.w	r4, [sp, #49]	; 0x31
    3410:	strb.w	r4, [sp, #50]	; 0x32
    3414:	strb.w	r4, [sp, #51]	; 0x33
    3418:	bl	40a0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    341c:	cmp	r0, #0
    341e:	beq.n	33ee <SDClass::remove(char const*)+0x26>
    3420:	mov	r0, sp
    3422:	bl	4754 <ExFatFile::remove()>
    3426:	add	sp, #56	; 0x38
    3428:	pop	{r4, pc}
    342a:	nop

0000342c <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
    342c:	push	{r4, r5, r6, lr}
    342e:	ldr.w	r4, [r0, #1148]	; 0x47c
    3432:	sub	sp, #56	; 0x38
    3434:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    3436:	cbz	r4, 346a <SDClass::rename(char const*, char const*)+0x3e>
    3438:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    343a:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    343e:	mov	r2, r1
    3440:	mov	r3, r5
    3442:	mov	r1, r4
    3444:	mov	r0, sp
    3446:	strb.w	r5, [sp]
    344a:	strb.w	r5, [sp, #1]
    344e:	strb.w	r5, [sp, #2]
    3452:	bl	5538 <FatFile::open(FatFile*, char const*, int)>
    3456:	cbnz	r0, 345c <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
    3458:	add	sp, #56	; 0x38
    345a:	pop	{r4, r5, r6, pc}
    345c:	mov	r2, r6
    345e:	mov	r1, r4
    3460:	mov	r0, sp
    3462:	bl	5818 <FatFile::rename(FatFile*, char const*)>
    3466:	add	sp, #56	; 0x38
    3468:	pop	{r4, r5, r6, pc}
    346a:	ldr.w	r0, [r0, #1152]	; 0x480
    346e:	cmp	r0, #0
    3470:	beq.n	3458 <SDClass::rename(char const*, char const*)+0x2c>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    3472:	add.w	r5, r0, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    3476:	mov	r2, r1
    3478:	mov	r3, r4
    347a:	mov	r1, r5
    347c:	mov	r0, sp
    347e:	strb.w	r4, [sp, #49]	; 0x31
    3482:	strb.w	r4, [sp, #50]	; 0x32
    3486:	strb.w	r4, [sp, #51]	; 0x33
    348a:	bl	3fa0 <ExFatFile::open(ExFatFile*, char const*, int)>
    348e:	cmp	r0, #0
    3490:	beq.n	3458 <SDClass::rename(char const*, char const*)+0x2c>
    3492:	mov	r2, r6
    3494:	mov	r1, r5
    3496:	mov	r0, sp
    3498:	bl	4cec <ExFatFile::rename(ExFatFile*, char const*)>
    349c:	add	sp, #56	; 0x38
    349e:	pop	{r4, r5, r6, pc}

000034a0 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    34a0:	push	{r4, lr}
    34a2:	ldr.w	r4, [r0, #1148]	; 0x47c
    34a6:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    34a8:	cbz	r4, 34ca <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    34aa:	mov	r2, r1
    34ac:	movs	r3, #1
    34ae:	addw	r1, r4, #1084	; 0x43c
    34b2:	mov	r0, sp
    34b4:	movs	r4, #0
    34b6:	strb.w	r4, [sp]
    34ba:	strb.w	r4, [sp, #1]
    34be:	strb.w	r4, [sp, #2]
    34c2:	bl	5474 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
    34c6:	add	sp, #56	; 0x38
    34c8:	pop	{r4, pc}
    34ca:	ldr.w	r0, [r0, #1152]	; 0x480
    34ce:	cmp	r0, #0
    34d0:	beq.n	34c6 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    34d2:	mov	r2, r1
    34d4:	movs	r3, #1
    34d6:	add.w	r1, r0, #1088	; 0x440
    34da:	mov	r0, sp
    34dc:	strb.w	r4, [sp, #49]	; 0x31
    34e0:	strb.w	r4, [sp, #50]	; 0x32
    34e4:	strb.w	r4, [sp, #51]	; 0x33
    34e8:	bl	4b88 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    34ec:	add	sp, #56	; 0x38
    34ee:	pop	{r4, pc}

000034f0 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    34f0:	push	{r4, r5, lr}
    34f2:	ldr.w	r4, [r0, #1148]	; 0x47c
    34f6:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    34f8:	cbz	r4, 3518 <SDClass::exists(char const*)+0x28>
    34fa:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    34fc:	mov	r2, r1
    34fe:	mov	r3, r5
    3500:	mov	r1, r4
    3502:	mov	r0, sp
    3504:	strb.w	r5, [sp]
    3508:	strb.w	r5, [sp, #1]
    350c:	strb.w	r5, [sp, #2]
    3510:	bl	55f8 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    3514:	add	sp, #60	; 0x3c
    3516:	pop	{r4, r5, pc}
    3518:	ldr.w	r0, [r0, #1152]	; 0x480
    351c:	cmp	r0, #0
    351e:	beq.n	3514 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    3520:	mov	r2, r1
    3522:	mov	r3, r4
    3524:	mov	r1, r0
    3526:	mov	r0, sp
    3528:	strb.w	r4, [sp, #49]	; 0x31
    352c:	strb.w	r4, [sp, #50]	; 0x32
    3530:	strb.w	r4, [sp, #51]	; 0x33
    3534:	bl	40a0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3538:	add	sp, #60	; 0x3c
    353a:	pop	{r4, r5, pc}

0000353c <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
    353c:	push	{r3, r4, r5, lr}
    353e:	mov	r5, r0
    3540:	ldr.w	r0, [r0, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    3544:	cbz	r0, 3578 <SDClass::usedSize()+0x3c>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    3546:	ldr	r4, [r0, #28]
    3548:	subs	r4, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    354a:	bl	61ac <FatPartition::freeClusterCount()>
    354e:	ldr.w	r3, [r5, #1148]	; 0x47c
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    3552:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    3554:	cbz	r3, 3568 <SDClass::usedSize()+0x2c>
    3556:	ldrb	r0, [r3, #6]
    3558:	mov.w	r3, #512	; 0x200
    355c:	lsl.w	r0, r3, r0
    3560:	uxth	r0, r0
    3562:	umull	r0, r1, r0, r4
    3566:	pop	{r3, r4, r5, pc}
    3568:	ldr.w	r3, [r5, #1152]	; 0x480
    356c:	cbz	r3, 358a <SDClass::usedSize()+0x4e>
    356e:	ldr.w	r0, [r3, #1076]	; 0x434
    3572:	umull	r0, r1, r0, r4
    3576:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    3578:	ldr.w	r3, [r5, #1152]	; 0x480
    357c:	cbz	r3, 358a <SDClass::usedSize()+0x4e>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    357e:	mov	r0, r3
    3580:	ldr.w	r4, [r3, #1064]	; 0x428
    3584:	bl	45a8 <ExFatPartition::freeClusterCount()>
    3588:	b.n	354e <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    358a:	movs	r0, #0
    358c:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    358e:	pop	{r3, r4, r5, pc}

00003590 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    3590:	push	{r4, r5, lr}
    3592:	ldr.w	r4, [r0, #1148]	; 0x47c
    3596:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    3598:	cbz	r4, 35c4 <SDClass::rmdir(char const*)+0x34>
    359a:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    359c:	mov	r2, r1
    359e:	mov	r3, r5
    35a0:	mov	r1, r4
    35a2:	mov	r0, sp
    35a4:	strb.w	r5, [sp]
    35a8:	strb.w	r5, [sp, #1]
    35ac:	strb.w	r5, [sp, #2]
    35b0:	bl	55f8 <FatFile::open(FatVolume*, char const*, int)>
    35b4:	cbnz	r0, 35ba <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
    35b6:	add	sp, #60	; 0x3c
    35b8:	pop	{r4, r5, pc}
    35ba:	mov	r0, sp
    35bc:	bl	59f0 <FatFile::rmdir()>
    35c0:	add	sp, #60	; 0x3c
    35c2:	pop	{r4, r5, pc}
    35c4:	ldr.w	r0, [r0, #1152]	; 0x480
    35c8:	cmp	r0, #0
    35ca:	beq.n	35b6 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    35cc:	mov	r2, r1
    35ce:	mov	r3, r4
    35d0:	mov	r1, r0
    35d2:	mov	r0, sp
    35d4:	strb.w	r4, [sp, #49]	; 0x31
    35d8:	strb.w	r4, [sp, #50]	; 0x32
    35dc:	strb.w	r4, [sp, #51]	; 0x33
    35e0:	bl	40a0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    35e4:	cmp	r0, #0
    35e6:	beq.n	35b6 <SDClass::rmdir(char const*)+0x26>
    35e8:	mov	r0, sp
    35ea:	bl	482c <ExFatFile::rmdir()>
    35ee:	add	sp, #60	; 0x3c
    35f0:	pop	{r4, r5, pc}
    35f2:	nop

000035f4 <SDClass::totalSize()>:
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    35f4:	ldr.w	r2, [r0, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    35f8:	cbz	r2, 360e <SDClass::totalSize()+0x1a>
    35fa:	ldrb	r1, [r2, #6]
    35fc:	ldr	r0, [r2, #28]
    35fe:	mov.w	r3, #512	; 0x200
    3602:	lsls	r3, r1
    3604:	uxth	r3, r3
    3606:	subs	r0, #1
    3608:	umull	r0, r1, r3, r0
    360c:	bx	lr
    360e:	ldr.w	r2, [r0, #1152]	; 0x480
    3612:	cbz	r2, 3622 <SDClass::totalSize()+0x2e>
    3614:	ldr.w	r3, [r2, #1064]	; 0x428
    3618:	ldr.w	r0, [r2, #1076]	; 0x434
    361c:	umull	r0, r1, r3, r0
    3620:	bx	lr
    3622:	movs	r0, #0
    3624:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
    3626:	bx	lr

00003628 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    3628:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    362c:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    362e:	sub	sp, #80	; 0x50
    3630:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    3632:	beq.n	36b8 <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    3634:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3636:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    363a:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    363e:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    3640:	it	ne
    3642:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3644:	bl	6f5c <FsVolume::open(char const*, int)>
    3648:	ldr	r3, [sp, #72]	; 0x48
    364a:	cmp	r3, #0
    364c:	beq.n	36ca <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
    364e:	movs	r0, #104	; 0x68
    3650:	bl	a5d8 <operator new(unsigned int)>
    3654:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    3656:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    365a:	ldr	r0, [pc, #136]	; (36e4 <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    365c:	ldr	r1, [pc, #136]	; (36e8 <SDClass::open(char const*, unsigned char)+0xc0>)
    365e:	ldr	r2, [sp, #8]
    3660:	ldrb.w	r3, [sp, #12]
    3664:	str	r0, [r4, #0]
    3666:	add	r7, sp, #16
    3668:	strb	r6, [r4, #24]
    366a:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    366c:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    366e:	mov.w	r8, #1000	; 0x3e8
    3672:	mov	r1, r7
    3674:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    3678:	str	r2, [r4, #28]
    367a:	strb.w	r3, [r4, #32]
    367e:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3680:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    3682:	str	r6, [r4, #16]
    3684:	str.w	r8, [r4, #8]
    3688:	bl	6d18 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    368c:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    368e:	ldr	r1, [pc, #92]	; (36ec <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3690:	ldr	r2, [pc, #92]	; (36f0 <SDClass::open(char const*, unsigned char)+0xc8>)
    3692:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    3694:	adds	r3, #1
    3696:	strb	r6, [r5, #4]
    3698:	str.w	r8, [r5, #8]
    369c:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    369e:	str	r4, [r5, #16]
    36a0:	str	r1, [r4, #20]
		if (f) f->refcount++;
    36a2:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    36a4:	str	r2, [r5, #0]
    36a6:	ldr	r3, [pc, #76]	; (36f4 <SDClass::open(char const*, unsigned char)+0xcc>)
    36a8:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    36aa:	mov	r0, r7
    36ac:	bl	6d90 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
    36b0:	mov	r0, r5
    36b2:	add	sp, #80	; 0x50
    36b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    36b8:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    36bc:	adds	r1, #4
    36be:	mov	r0, sp
    36c0:	bl	6f5c <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    36c4:	ldr	r3, [sp, #72]	; 0x48
    36c6:	cmp	r3, #0
    36c8:	bne.n	364e <SDClass::open(char const*, unsigned char)+0x26>
    36ca:	ldr	r3, [sp, #76]	; 0x4c
    36cc:	cmp	r3, #0
    36ce:	bne.n	364e <SDClass::open(char const*, unsigned char)+0x26>
    36d0:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    36d4:	ldr	r2, [pc, #24]	; (36f0 <SDClass::open(char const*, unsigned char)+0xc8>)
    36d6:	strb	r3, [r5, #4]
    36d8:	strb	r3, [r5, #12]
    36da:	str	r3, [r5, #16]
    36dc:	str	r1, [r5, #8]
    36de:	str	r2, [r5, #0]
    36e0:	add	r7, sp, #16
    36e2:	b.n	36a6 <SDClass::open(char const*, unsigned char)+0x7e>
    36e4:	.word	0x00013058
    36e8:	.word	0x00012fd4
    36ec:	.word	0x00012b28
    36f0:	.word	0x00012ff8
    36f4:	.word	0x00012b04

000036f8 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    36f8:	push	{r4, r5, r6, r7}


class SDClass : public FS
{
public:
	SDClass() { }
    36fa:	ldr	r3, [pc, #60]	; (3738 <_GLOBAL__sub_I_SD+0x40>)
    36fc:	ldr	r4, [pc, #60]	; (373c <_GLOBAL__sub_I_SD+0x44>)
    36fe:	str.w	r4, [r3, #1164]	; 0x48c
    3702:	movs	r5, #40	; 0x28
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    3704:	movs	r4, #0
    3706:	ldr	r0, [pc, #56]	; (3740 <_GLOBAL__sub_I_SD+0x48>)
    3708:	ldr	r7, [pc, #56]	; (3744 <_GLOBAL__sub_I_SD+0x4c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    370a:	ldr	r6, [pc, #60]	; (3748 <_GLOBAL__sub_I_SD+0x50>)
    370c:	strb.w	r5, [r3, #1195]	; 0x4ab
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    3710:	strb.w	r4, [r3, #1172]	; 0x494
    3714:	strb.w	r4, [r3, #1198]	; 0x4ae
    3718:	str	r0, [r3, #0]
    371a:	str.w	r7, [r3, #1176]	; 0x498
    371e:	str.w	r6, [r3, #1184]	; 0x4a0
    3722:	str.w	r4, [r3, #1148]	; 0x47c
    3726:	str.w	r4, [r3, #1152]	; 0x480
    372a:	ldr	r2, [pc, #32]	; (374c <_GLOBAL__sub_I_SD+0x54>)
    372c:	ldr	r1, [pc, #32]	; (3750 <_GLOBAL__sub_I_SD+0x58>)
    372e:	mov	r0, r3
    3730:	pop	{r4, r5, r6, r7}
    3732:	b.w	a6b4 <__aeabi_atexit>
    3736:	nop
    3738:	.word	0x20019844
    373c:	.word	0x00013200
    3740:	.word	0x00013178
    3744:	.word	0x000131a8
    3748:	.word	0x38011001
    374c:	.word	0x20013930
    3750:	.word	0x000033c5

00003754 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3754:	push	{r4, lr}
    3756:	mov	r4, r0
  bool rtn = sync();
    3758:	bl	49e0 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    375c:	movs	r3, #0
    375e:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3762:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3766:	pop	{r4, pc}

00003768 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3768:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    376c:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3770:	mov	r6, r0
    3772:	mov	r8, r1
    3774:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3776:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    377a:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    377c:	ldrb.w	r3, [r6, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3780:	add.w	r9, sp, #4
    3784:	stmia.w	r9, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    3788:	cmp	r3, #0
    378a:	beq.n	37fe <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    378c:	ldrb.w	r3, [r6, #48]	; 0x30
    3790:	cmp	r3, #1
    3792:	bls.n	380a <ExFatFile::getName(char*, unsigned int)+0xa2>
    3794:	movs	r7, #1
    3796:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    3798:	cmp	r7, #1
    379a:	ite	eq
    379c:	moveq	r2, #64	; 0x40
    379e:	movne	r2, #32
    37a0:	mov	r1, r9
    37a2:	ldr	r0, [r6, #32]
    37a4:	bl	4498 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    37a8:	cmp	r0, #1
    37aa:	bne.n	37fe <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    37ac:	movs	r2, #0
    37ae:	mov	r1, r9
    37b0:	ldr	r0, [r6, #32]
    37b2:	bl	4464 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    37b6:	cbz	r0, 37fe <ExFatFile::getName(char*, unsigned int)+0x96>
    37b8:	ldrb	r3, [r0, #0]
    37ba:	cmp	r3, #193	; 0xc1
    37bc:	bne.n	37fe <ExFatFile::getName(char*, unsigned int)+0x96>
    37be:	add.w	r1, r0, #30
    37c2:	add.w	r2, r8, r4
    37c6:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    37c8:	adds	r4, #1
    37ca:	cmp	r4, r5
    37cc:	bcs.n	37f0 <ExFatFile::getName(char*, unsigned int)+0x88>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    37ce:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    37d2:	cmp	r3, #126	; 0x7e
    37d4:	ite	ls
    37d6:	uxtbls	r3, r3
    37d8:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    37da:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    37dc:	strb.w	r3, [r2], #1
    37e0:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    37e2:	bne.n	37c8 <ExFatFile::getName(char*, unsigned int)+0x60>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    37e4:	adds	r7, #1
    37e6:	ldrb.w	r2, [r6, #48]	; 0x30
    37ea:	uxtb	r7, r7
    37ec:	cmp	r2, r7
    37ee:	bhi.n	3798 <ExFatFile::getName(char*, unsigned int)+0x30>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    37f0:	movs	r2, #0
  return n;
    37f2:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    37f4:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    37f8:	add	sp, #20
    37fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    37fe:	movs	r0, #0
    3800:	strb.w	r0, [r8]
  return 0;
}
    3804:	add	sp, #20
    3806:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    380a:	movs	r3, #0
    380c:	b.n	37f0 <ExFatFile::getName(char*, unsigned int)+0x88>
    380e:	nop

00003810 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    3810:	ldrb.w	r2, [r0, #49]	; 0x31
    3814:	cbz	r2, 381a <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3816:	movs	r0, #0
    3818:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    381a:	push	{r3, r4, r5, lr}
    381c:	mov	r4, r0
    381e:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3820:	mov	r1, r2
    3822:	movs	r2, #56	; 0x38
    3824:	bl	beac <memset>
  m_attributes = FILE_ATTR_ROOT;
    3828:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    382a:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    382c:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3830:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3834:	str	r5, [r4, #32]
    3836:	pop	{r3, r4, r5, pc}

00003838 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3838:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    383a:	ldrb	r0, [r1, #0]
    383c:	cmp	r0, #32
    383e:	bne.n	3848 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3840:	ldrb.w	r0, [r1, #1]!
    3844:	cmp	r0, #32
    3846:	beq.n	3840 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    3848:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    384a:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    384c:	cmp	r0, #0
    384e:	beq.n	38f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    3850:	cmp	r0, #47	; 0x2f
    3852:	beq.n	38ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3854:	cmp	r0, #92	; 0x5c
    3856:	beq.n	389a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3858:	sub.w	r4, r0, #34	; 0x22
    385c:	uxtb	r4, r4
    385e:	cmp	r4, #29
    3860:	bls.n	389e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    3862:	ldr.w	lr, [pc, #148]	; 38f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    3866:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3868:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    386a:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    386c:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3870:	mov	r7, r6
    3872:	beq.n	389a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3874:	cmp	r5, #94	; 0x5e
    3876:	bhi.n	389a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3878:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    387c:	sub.w	r5, r0, #34	; 0x22
    3880:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3882:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    3884:	cbz	r0, 38e6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    3886:	cmp	r0, #47	; 0x2f
    3888:	beq.n	38ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    388a:	cmp	r0, #92	; 0x5c
    388c:	lsr.w	r7, lr, r5
    3890:	beq.n	389a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3892:	cmp	r5, #29
    3894:	bhi.n	386a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    3896:	lsls	r5, r7, #31
    3898:	bpl.n	386a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    389a:	movs	r0, #0
    389c:	pop	{r4, r5, r6, r7, pc}
    389e:	ldr	r5, [pc, #88]	; (38f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    38a0:	lsr.w	r4, r5, r4
    38a4:	lsls	r6, r4, #31
    38a6:	bpl.n	3862 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    38a8:	movs	r0, #0
    38aa:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    38ac:	movs	r4, #0
    38ae:	adds	r7, r1, r4
    38b0:	mov	r6, r7
    38b2:	mov	r5, r4
    38b4:	movs	r0, #47	; 0x2f
    38b6:	b.n	38be <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    38b8:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    38bc:	adds	r5, #1
    38be:	cmp	r0, #32
    38c0:	beq.n	38b8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    38c2:	cmp	r0, #47	; 0x2f
    38c4:	beq.n	38b8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    38c6:	add	r1, r5
    38c8:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    38ca:	cbz	r4, 38de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    38cc:	mov	r1, r7
    c = path[len - 1];
    38ce:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    38d2:	cmp	r3, #46	; 0x2e
    38d4:	beq.n	38da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    38d6:	cmp	r3, #32
    38d8:	bne.n	38ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    38da:	subs	r4, #1
    38dc:	bne.n	38ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    38de:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    38e0:	str	r0, [r2, #0]
  return true;
    38e2:	movs	r0, #1
    38e4:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    38e6:	str	r7, [r3, #0]
    38e8:	adds	r7, r1, r4
    38ea:	b.n	38cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    38ec:	cmp	r4, #255	; 0xff
    38ee:	ble.n	38de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    38f0:	movs	r0, #0
    38f2:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    38f4:	str	r1, [r3, #0]
    38f6:	b.n	38e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    38f8:	.word	0x35000101

000038fc <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    38fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3900:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3904:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3906:	sub	sp, #12
    3908:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    390a:	bpl.w	3a66 <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    390e:	lsls	r0, r3, #25
    3910:	mov	r5, r1
    3912:	mov	r6, r2
    3914:	bpl.w	3a7c <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    3918:	ldrd	r0, r1, [r4]
    391c:	ldrd	r2, r3, [r4, #16]
    3920:	adds.w	r8, r0, r6
    3924:	adc.w	r9, r1, #0
    3928:	cmp	r3, r9
    392a:	it	eq
    392c:	cmpeq	r2, r8
    392e:	bcc.w	3a88 <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3932:	cmp	r6, #0
    3934:	beq.w	3a8c <ExFatFile::read(void*, unsigned int)+0x190>
    3938:	mov	r9, r4
    393a:	ldrd	r2, r3, [r9], #24
    393e:	mov	r8, r6
    3940:	b.n	39e2 <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    3942:	orrs	r3, r2
    3944:	bne.n	3a1e <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3946:	ldrb.w	r3, [r4, #49]	; 0x31
    394a:	lsls	r2, r3, #25
    394c:	ite	mi
    394e:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    3952:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    3954:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3956:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    395a:	ldr.w	r2, [r0, #1060]	; 0x424
    395e:	subs	r1, #2
    3960:	lsrs	r7, r7, #9
    3962:	lsl.w	lr, r1, ip
    3966:	adds	r1, r7, r2
    3968:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    396a:	cmp.w	sl, #0
    396e:	bne.n	39f6 <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3970:	cmp.w	r8, #512	; 0x200
    3974:	bcc.n	39f6 <ExFatFile::read(void*, unsigned int)+0xfa>
    3976:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    397a:	cmp	r1, r2
    397c:	beq.n	39f6 <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    397e:	cmp.w	r8, #1024	; 0x400
    3982:	bcc.n	3a2c <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3984:	movs	r3, #1
    3986:	lsl.w	ip, r3, ip
    398a:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    398e:	mov.w	r3, r8, lsr #9
    3992:	cmp	r7, r3
    3994:	it	cs
    3996:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    3998:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    399a:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    399e:	bhi.n	39b8 <ExFatFile::read(void*, unsigned int)+0xbc>
    39a0:	adds	r3, r7, r1
    39a2:	cmp	r3, r2
    39a4:	bls.n	39b8 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    39a6:	add.w	r0, r0, #524	; 0x20c
    39aa:	str	r1, [sp, #4]
    39ac:	bl	41dc <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    39b0:	cmp	r0, #0
    39b2:	beq.n	3a66 <ExFatFile::read(void*, unsigned int)+0x16a>
    39b4:	ldr	r0, [r4, #32]
    39b6:	ldr	r1, [sp, #4]
    39b8:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    39bc:	ldr	r2, [r0, #0]
    39be:	mov	r3, r7
    39c0:	ldr	r7, [r2, #12]
    39c2:	mov	r2, r5
    39c4:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    39c6:	cmp	r0, #0
    39c8:	beq.n	3a66 <ExFatFile::read(void*, unsigned int)+0x16a>
    39ca:	mov	r0, fp
    39cc:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    39ce:	ldrd	r2, r3, [r4]
    39d2:	adds	r2, r2, r0
    39d4:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    39d6:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    39da:	add	r5, fp
    m_curPosition += n;
    39dc:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    39e0:	beq.n	3a8c <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    39e2:	ldr	r0, [r4, #32]
    39e4:	ldr.w	r7, [r0, #1072]	; 0x430
    39e8:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    39ea:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    39ee:	cmp	r7, #0
    39f0:	beq.n	3942 <ExFatFile::read(void*, unsigned int)+0x46>
    39f2:	ldr	r1, [r4, #24]
    39f4:	b.n	3956 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    39f6:	add.w	r0, r0, #524	; 0x20c
    39fa:	movs	r2, #0
    39fc:	bl	411c <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    3a00:	cbz	r0, 3a66 <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    3a02:	rsb	fp, sl, #512	; 0x200
    3a06:	cmp	fp, r8
    3a08:	it	cs
    3a0a:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3a0c:	add.w	r1, r0, sl
    3a10:	mov	r2, fp
    3a12:	mov	r0, r5
    3a14:	bl	8774 <memcpy>
    3a18:	mov	r0, fp
    3a1a:	movs	r1, #0
    3a1c:	b.n	39ce <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    3a1e:	ldrb.w	r3, [r4, #51]	; 0x33
    3a22:	lsls	r3, r3, #25
    3a24:	bpl.n	3a46 <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    3a26:	ldr	r1, [r4, #24]
    3a28:	adds	r1, #1
    3a2a:	b.n	3954 <ExFatFile::read(void*, unsigned int)+0x58>
    3a2c:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    3a30:	ldr	r3, [r0, #0]
    3a32:	mov	r2, r5
    3a34:	ldr	r3, [r3, #8]
    3a36:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    3a38:	cbz	r0, 3a66 <ExFatFile::read(void*, unsigned int)+0x16a>
    3a3a:	mov.w	r0, #512	; 0x200
    3a3e:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3a40:	mov.w	fp, #512	; 0x200
    3a44:	b.n	39ce <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3a46:	mov	r2, r9
    3a48:	ldr	r1, [r4, #24]
    3a4a:	bl	44f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3a4e:	sxtb	r0, r0
        if (fg < 0) {
    3a50:	cmp	r0, #0
    3a52:	blt.n	3a66 <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3a54:	beq.n	3a5c <ExFatFile::read(void*, unsigned int)+0x160>
    3a56:	ldr	r0, [r4, #32]
    3a58:	ldr	r1, [r4, #24]
    3a5a:	b.n	3956 <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    3a5c:	ldrb.w	r3, [r4, #49]	; 0x31
    3a60:	tst.w	r3, #80	; 0x50
    3a64:	bne.n	3a90 <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3a66:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3a6a:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3a6e:	orr.w	r3, r3, #2
    3a72:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    3a76:	add	sp, #12
    3a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3a7c:	ldrb.w	r3, [r4, #49]	; 0x31
    3a80:	lsls	r1, r3, #28
    3a82:	bmi.w	3918 <ExFatFile::read(void*, unsigned int)+0x1c>
    3a86:	b.n	3932 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3a88:	subs	r6, r2, r0
    3a8a:	b.n	3932 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3a8c:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3a90:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3a94:	add	sp, #12
    3a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a9a:	nop

00003a9c <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    3a9c:	push	{r4, r5, r6, r7, lr}
    3a9e:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3aa0:	movs	r2, #1
    3aa2:	add.w	r1, sp, #7
    3aa6:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    3aa8:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    3aac:	ldr	r5, [r0, #24]
    3aae:	bl	38fc <ExFatFile::read(void*, unsigned int)>
    3ab2:	cmp	r0, #1
    3ab4:	it	eq
    3ab6:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3aba:	str	r5, [r4, #24]
    3abc:	it	ne
    3abe:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    3ac2:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3ac6:	add	sp, #12
    3ac8:	pop	{r4, r5, r6, r7, pc}
    3aca:	nop

00003acc <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3acc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ad0:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3ad4:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3ad6:	sub	sp, #12
    3ad8:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3ada:	cmp.w	lr, #0
    3ade:	beq.n	3b18 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3ae0:	ldrd	r0, r1, [r0]
    3ae4:	cmp	r1, r3
    3ae6:	it	eq
    3ae8:	cmpeq	r0, r2
    3aea:	mov	r6, r2
    3aec:	mov	r7, r3
    3aee:	beq.n	3b68 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    3af0:	orrs.w	r3, r6, r7
    3af4:	bne.n	3b06 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    3af6:	movs	r3, #0
    3af8:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    3afa:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3afc:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    3b00:	add	sp, #12
    3b02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3b06:	tst.w	lr, #8
    3b0a:	beq.n	3b22 <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    3b0c:	ldrd	r2, r3, [r4, #16]
    3b10:	cmp	r3, r7
    3b12:	it	eq
    3b14:	cmpeq	r2, r6
    3b16:	bcs.n	3b22 <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    3b18:	str	r5, [r4, #24]
  return false;
    3b1a:	movs	r0, #0
}
    3b1c:	add	sp, #12
    3b1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3b22:	ldr	r3, [r4, #32]
    3b24:	str	r3, [sp, #4]
    3b26:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    3b2a:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3b2e:	add.w	ip, ip, #9
    3b32:	uxtb.w	ip, ip
    3b36:	adds.w	r2, r6, #4294967295
    3b3a:	adc.w	r3, r7, #4294967295
    3b3e:	rsb	r8, ip, #32
    3b42:	lsl.w	fp, r3, r8
    3b46:	lsr.w	r2, r2, ip
    3b4a:	orr.w	r2, r2, fp
    3b4e:	sub.w	fp, ip, #32
    3b52:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    3b56:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3b5a:	orr.w	r2, r2, r3
  if (isContiguous()) {
    3b5e:	beq.n	3b6c <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    3b60:	ldr	r3, [r4, #28]
    3b62:	add	r2, r3
    3b64:	str	r2, [r4, #24]
    goto done;
    3b66:	b.n	3afa <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3b68:	movs	r0, #1
    3b6a:	b.n	3b1c <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3b6c:	adds.w	r9, r0, #4294967295
    3b70:	adc.w	sl, r1, #4294967295
    3b74:	lsr.w	ip, r9, ip
    3b78:	lsl.w	r8, sl, r8
    3b7c:	orr.w	ip, ip, r8
    3b80:	lsr.w	fp, sl, fp
    3b84:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    3b88:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3b8a:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3b8c:	bcs.n	3bbe <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3b8e:	tst.w	lr, #64	; 0x40
    3b92:	itet	ne
    3b94:	ldrne	r3, [sp, #4]
    3b96:	ldreq	r3, [r4, #28]
    3b98:	ldrne.w	r3, [r3, #1068]	; 0x42c
    3b9c:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3b9e:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3ba0:	add.w	r9, r4, #24
    3ba4:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3ba6:	cmp.w	r8, #0
    3baa:	beq.n	3afa <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3bac:	ldr	r1, [r4, #24]
    3bae:	ldr	r0, [r4, #32]
    3bb0:	bl	44f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3bb4:	add.w	r8, r8, #4294967295
    3bb8:	cmp	r0, #0
    3bba:	bne.n	3ba4 <ExFatFile::seekSet(unsigned long long)+0xd8>
    3bbc:	b.n	3b18 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    3bbe:	orrs.w	r3, r0, r1
    3bc2:	beq.n	3b8e <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3bc4:	rsb	r2, ip, r2
    3bc8:	b.n	3b9e <ExFatFile::seekSet(unsigned long long)+0xd2>
    3bca:	nop

00003bcc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    3bcc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bd0:	mov	r6, r1
    3bd2:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    3bd4:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    3bd8:	str	r2, [sp, #0]
    3bda:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    3bdc:	cbnz	r1, 3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3bde:	mov	sl, r3
    3be0:	ldrb.w	r3, [r6, #49]	; 0x31
    3be4:	tst.w	r3, #80	; 0x50
    3be8:	bne.n	3bfa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    3bea:	movs	r0, #0
    3bec:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    3bf0:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    3bf4:	add	sp, #76	; 0x4c
    3bf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    3bfa:	ldr	r3, [sp, #112]	; 0x70
    3bfc:	and.w	r3, r3, #3
    3c00:	cmp	r3, #1
    3c02:	beq.n	3c12 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    3c04:	cmp	r3, #2
    3c06:	beq.w	3e1c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    3c0a:	cmp	r3, #0
    3c0c:	bne.n	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3c0e:	movs	r3, #1
    3c10:	b.n	3c14 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    3c12:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3c14:	ldr	r2, [sp, #112]	; 0x70
    3c16:	and.w	r2, r2, #8
    3c1a:	orrs	r3, r2
    3c1c:	str	r3, [sp, #4]
  if (name) {
    3c1e:	ldr	r3, [sp, #0]
    3c20:	cmp	r3, #0
    3c22:	beq.w	3e20 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    3c26:	mov	r0, r3
    3c28:	movs	r2, #0
    3c2a:	mov	r1, sl
    3c2c:	bl	4634 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3c30:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    3c34:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3c36:	cbz	r3, 3c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3c38:	ldrd	r2, r3, [r6]
    3c3c:	orrs	r3, r2
    3c3e:	beq.n	3c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3c40:	movs	r2, #0
    3c42:	movs	r3, #0
    3c44:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    3c48:	movs	r1, #0
    3c4a:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3c4c:	ldr	r2, [pc, #736]	; (3f30 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    3c4e:	add.w	r3, sl, #14
    3c52:	smull	r1, r2, r2, r3
    3c56:	add	r2, r3
    3c58:	asrs	r3, r3, #31
    3c5a:	rsb	r3, r3, r2, asr #3
    3c5e:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    3c60:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3c64:	str	r3, [sp, #12]
    3c66:	adds	r3, #2
    3c68:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    3c6c:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    3c6e:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3c70:	movs	r2, #32
    3c72:	add	r1, sp, #40	; 0x28
    3c74:	mov	r0, r6
    3c76:	bl	38fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3c7a:	cmp	r0, #0
    3c7c:	beq.n	3cfa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    3c7e:	cmp	r0, #32
    3c80:	bne.n	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    3c82:	ldrb.w	r3, [sp, #40]	; 0x28
    3c86:	lsls	r2, r3, #24
    3c88:	bmi.n	3d58 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    3c8a:	cmp	r4, #0
    3c8c:	bne.n	3d52 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    3c8e:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    3c90:	ldr	r1, [r6, #24]
    3c92:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    3c94:	subs	r2, #32
    3c96:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    3c98:	adds	r4, #1
    3c9a:	uxtb	r4, r4
      }
      if (!buf[0]) {
    3c9c:	cbz	r3, 3cfa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    3c9e:	cmp	r3, #192	; 0xc0
    3ca0:	beq.w	3dca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    3ca4:	cmp	r3, #193	; 0xc1
    3ca6:	beq.n	3d6e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    3ca8:	cmp	r3, #133	; 0x85
    3caa:	bne.n	3c70 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    3cac:	movs	r2, #56	; 0x38
    3cae:	movs	r1, #0
    3cb0:	mov	r0, r5
    3cb2:	bl	beac <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3cb6:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    3cba:	ldrb.w	r2, [sp, #41]	; 0x29
    3cbe:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    3cc2:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3cc4:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    3cc8:	it	pl
    3cca:	orrpl.w	r2, r2, #8
    3cce:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3cd2:	ldr	r3, [r6, #0]
    3cd4:	ldr	r1, [r6, #32]
    3cd6:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    3cd8:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    3cda:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    3cdc:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3cde:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    3ce0:	ldrb.w	r3, [r6, #51]	; 0x33
    3ce4:	ubfx	r3, r3, #6, #1
    3ce8:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3cec:	movs	r2, #32
    3cee:	add	r1, sp, #40	; 0x28
    3cf0:	mov	r0, r6
    3cf2:	bl	38fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3cf6:	cmp	r0, #0
    3cf8:	bne.n	3c7e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    3cfa:	ldr	r3, [sp, #112]	; 0x70
    3cfc:	lsls	r1, r3, #22
    3cfe:	bpl.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3d02:	ldr	r3, [sp, #4]
    3d04:	lsls	r2, r3, #30
    3d06:	bpl.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3d0a:	ldr	r3, [sp, #0]
    3d0c:	cmp	r3, #0
    3d0e:	beq.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3d12:	cmp	r4, fp
    3d14:	bcc.n	3d30 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    3d16:	b.n	3e26 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    3d18:	cmp	r0, #32
    3d1a:	bne.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    3d1e:	cbnz	r4, 3d2a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    3d20:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    3d22:	ldr	r1, [r6, #24]
    3d24:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    3d26:	subs	r2, #32
    3d28:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3d2a:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3d2c:	cmp	fp, r4
    3d2e:	bls.n	3e26 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    3d30:	movs	r2, #32
    3d32:	add	r1, sp, #40	; 0x28
    3d34:	mov	r0, r6
    3d36:	bl	38fc <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3d3a:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    3d3c:	cmp	r0, #0
    3d3e:	bne.n	3d18 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    3d40:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    3d42:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    3d44:	bl	4a40 <ExFatFile::addDirCluster()>
    3d48:	cmp	r0, #0
    3d4a:	beq.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    3d4e:	str	r7, [r6, #24]
      continue;
    3d50:	b.n	3d2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    3d52:	cmp	r4, fp
    3d54:	bcs.n	3c9c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    3d56:	b.n	3c98 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    3d58:	cmp.w	r9, #0
    3d5c:	bne.n	3c9e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    3d5e:	cmp	r4, fp
    3d60:	it	cc
    3d62:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    3d64:	cmp	r3, #133	; 0x85
    3d66:	bne.n	3c70 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    3d68:	mov.w	r9, #1
    3d6c:	b.n	3cac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    3d6e:	rsb	r8, r7, sl
    3d72:	uxtb.w	r8, r8
    3d76:	cmp.w	r8, #15
    3d7a:	it	cs
    3d7c:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    3d80:	mov	r3, r8
    3d82:	mov	r2, r7
    3d84:	ldr	r1, [sp, #0]
    3d86:	add	r0, sp, #40	; 0x28
    3d88:	bl	4670 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    3d8c:	cmp	r0, #0
    3d8e:	beq.n	3e0a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    3d90:	add	r7, r8
    3d92:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    3d94:	cmp	sl, r7
    3d96:	bne.w	3c70 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    3d9a:	ldr	r3, [sp, #112]	; 0x70
    3d9c:	lsls	r3, r3, #20
    3d9e:	bmi.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    3da2:	ldr	r3, [sp, #112]	; 0x70
    3da4:	tst.w	r3, #17408	; 0x4400
    3da8:	bne.w	3eec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    3dac:	ldrb.w	r3, [r5, #51]	; 0x33
    3db0:	lsls	r7, r3, #30
    3db2:	bmi.w	3eec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3db6:	ldr	r3, [sp, #112]	; 0x70
    3db8:	lsls	r3, r3, #21
    3dba:	bmi.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3dbe:	ldr	r3, [sp, #112]	; 0x70
    3dc0:	lsls	r0, r3, #17
    3dc2:	bmi.w	3f34 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    3dc6:	movs	r0, #1
    3dc8:	b.n	3bf4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3dca:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    3dce:	ldr	r2, [sp, #4]
    3dd0:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3dd4:	lsls	r1, r3, #30
    3dd6:	bpl.n	3de0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    3dd8:	orr.w	r3, r2, #64	; 0x40
    3ddc:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    3de0:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    3de4:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    3de8:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    3dec:	ldr	r3, [sp, #60]	; 0x3c
    3dee:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    3df0:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    3df2:	strd	r0, r1, [r5, #8]
        if (!name) {
    3df6:	cmp	r3, #0
    3df8:	beq.n	3d9a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    3dfa:	ldrb.w	r3, [sp, #43]	; 0x2b
    3dfe:	cmp	r3, sl
    3e00:	beq.n	3e0e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    3e02:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    3e06:	mov	r7, r9
    3e08:	b.n	3c70 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    3e0a:	mov	r9, r0
    3e0c:	b.n	3c70 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    3e0e:	ldrh.w	r3, [sp, #44]	; 0x2c
    3e12:	ldr	r2, [sp, #8]
    3e14:	cmp	r3, r2
    3e16:	bne.n	3e02 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    3e18:	movs	r7, #0
    3e1a:	b.n	3c70 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    3e1c:	movs	r3, #3
    3e1e:	b.n	3c14 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    3e20:	ldr	r3, [sp, #0]
    3e22:	str	r3, [sp, #8]
    3e24:	b.n	3c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3e26:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    3e2a:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3e2c:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    3e30:	movs	r1, #0
    3e32:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3e34:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3e38:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    3e3c:	bl	beac <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3e40:	ldr	r4, [sp, #12]
    3e42:	ldr	r3, [r6, #32]
    3e44:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3e48:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3e4c:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3e50:	movs	r4, #8
    3e52:	strb.w	r4, [r5, #49]	; 0x31
    3e56:	add.w	r7, sl, #30
  m_dirPos = freePos;
    3e5a:	add.w	r4, r5, #36	; 0x24
    3e5e:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    3e62:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3e64:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3e68:	stmia.w	r4, {r0, r1, r2}
    3e6c:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    3e6e:	movs	r6, #0
    3e70:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    3e72:	movs	r2, #1
    3e74:	mov	r1, r8
    3e76:	bl	4464 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3e7a:	mov	r4, r0
    3e7c:	cmp	r0, #0
    3e7e:	beq.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3e82:	ldrsb.w	r3, [r0]
    3e86:	cmp	r3, #0
    3e88:	blt.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    3e8c:	movs	r2, #32
    3e8e:	movs	r1, #0
    3e90:	bl	beac <memset>
    if (i == 0) {
    3e94:	cmp	r6, #0
    3e96:	beq.n	3f66 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    3e98:	cmp	r6, #1
    3e9a:	beq.n	3f46 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    3e9c:	rsb	r3, r6, r6, lsl #4
    3ea0:	cmp	r7, #15
    3ea2:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    3ea6:	mov.w	r2, #193	; 0xc1
    3eaa:	mov	r1, r7
    3eac:	it	cs
    3eae:	movcs	r1, #15
    3eb0:	uxtb	r3, r3
    3eb2:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    3eb4:	cbz	r1, 3ecc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    3eb6:	adds	r4, #2
    3eb8:	sxth	r1, r1
    3eba:	add.w	r1, r4, r1, lsl #1
    3ebe:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    3ec0:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3ec4:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    3ec8:	cmp	r1, r4
    3eca:	bne.n	3ec0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    3ecc:	adds	r6, #1
    3ece:	uxtb	r6, r6
    3ed0:	cmp	fp, r6
    3ed2:	bls.n	3f28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    3ed4:	movs	r2, #32
    3ed6:	mov	r1, r8
    3ed8:	ldr	r0, [r5, #32]
    3eda:	bl	4498 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3ede:	cmp	r0, #1
    3ee0:	bne.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3ee4:	subs	r7, #15
    3ee6:	uxtb	r7, r7
    3ee8:	ldr	r0, [r5, #32]
    3eea:	b.n	3e72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    3eec:	ldrb.w	r3, [r5, #49]	; 0x31
    3ef0:	tst.w	r3, #17
    3ef4:	bne.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3ef8:	ldr	r3, [sp, #112]	; 0x70
    3efa:	lsls	r6, r3, #21
    3efc:	bpl.w	3dbe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    3f00:	ldrb.w	r3, [r5, #51]	; 0x33
    3f04:	lsls	r4, r3, #30
    3f06:	bpl.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    3f0a:	movs	r2, #0
    3f0c:	movs	r3, #0
    3f0e:	mov	r0, r5
    3f10:	bl	3acc <ExFatFile::seekSet(unsigned long long)>
    3f14:	cmp	r0, #0
    3f16:	beq.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3f1a:	mov	r0, r5
    3f1c:	bl	4d98 <ExFatFile::truncate()>
    3f20:	cmp	r0, #0
    3f22:	beq.w	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3f26:	b.n	3dc6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    3f28:	mov	r0, r5
    3f2a:	bl	49e0 <ExFatFile::sync()>
    3f2e:	b.n	3bf4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    3f30:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3f34:	ldrd	r2, r3, [r5, #16]
    3f38:	mov	r0, r5
    3f3a:	bl	3acc <ExFatFile::seekSet(unsigned long long)>
    3f3e:	cmp	r0, #0
    3f40:	bne.w	3dc6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    3f44:	b.n	3bea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    3f46:	movs	r3, #192	; 0xc0
    3f48:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3f4a:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3f4c:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3f4e:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    3f52:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3f54:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    3f58:	ldrb.w	r3, [sp, #12]
    3f5c:	strb	r3, [r4, #3]
    3f5e:	ldrh.w	r3, [sp, #8]
    3f62:	strh	r3, [r4, #4]
    3f64:	b.n	3ecc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    3f66:	movs	r3, #133	; 0x85
    3f68:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    3f6a:	ldr	r3, [pc, #48]	; (3f9c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3f6c:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    3f70:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    3f74:	ldr	r3, [r3, #0]
    3f76:	cmp	r3, #0
    3f78:	beq.n	3ecc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    3f7a:	add.w	r2, sp, #23
    3f7e:	add.w	r1, sp, #26
    3f82:	add	r0, sp, #24
    3f84:	blx	r3
        dirFile->createTimeMs = ms10;
    3f86:	ldrb.w	r1, [sp, #23]
    3f8a:	ldrh.w	r2, [sp, #26]
    3f8e:	ldrh.w	r3, [sp, #24]
    3f92:	strb	r1, [r4, #20]
    3f94:	strh	r2, [r4, #8]
    3f96:	strh	r3, [r4, #10]
    3f98:	b.n	3ecc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    3f9a:	nop
    3f9c:	.word	0x20019cf4

00003fa0 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    3fa0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3fa4:	mov	r6, r0
    3fa6:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3fa8:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    3fac:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3fae:	movs	r0, #0
    3fb0:	strb.w	r0, [sp, #73]	; 0x49
    3fb4:	strb.w	r0, [sp, #74]	; 0x4a
    3fb8:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    3fbc:	cbnz	r4, 3fcc <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    3fbe:	mov	r9, r3
    3fc0:	ldrb.w	r3, [r1, #49]	; 0x31
    3fc4:	tst.w	r3, #80	; 0x50
    3fc8:	mov	r5, r1
    3fca:	bne.n	3fd4 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    3fcc:	movs	r0, #0
}
    3fce:	add	sp, #84	; 0x54
    3fd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    3fd4:	ldrb	r3, [r2, #0]
    3fd6:	cmp	r3, #47	; 0x2f
    3fd8:	mov	r4, r2
    3fda:	beq.n	4042 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    3fdc:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3fe0:	mov	r1, r4
    3fe2:	add	r3, sp, #12
    3fe4:	add	r2, sp, #16
    3fe6:	mov	r0, r6
    3fe8:	bl	3838 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3fec:	cmp	r0, #0
    3fee:	beq.n	3fcc <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    3ff0:	ldr	r3, [sp, #12]
    3ff2:	ldrb	r3, [r3, #0]
    3ff4:	cmp	r3, #0
    3ff6:	beq.n	406c <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    3ff8:	ldrb.w	r3, [sp, #16]
    3ffc:	ldr	r2, [sp, #20]
    3ffe:	str.w	r8, [sp]
    4002:	mov	r1, r5
    4004:	mov	r0, r6
    4006:	bl	3bcc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    400a:	cmp	r0, #0
    400c:	beq.n	3fcc <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    400e:	mov	r4, r6
    4010:	add	r7, sp, #24
    4012:	add.w	lr, r6, #48	; 0x30
    4016:	ldr	r0, [r4, #0]
    4018:	ldr	r1, [r4, #4]
    401a:	ldr	r2, [r4, #8]
    401c:	ldr	r3, [r4, #12]
    401e:	mov	r5, r7
    4020:	stmia	r5!, {r0, r1, r2, r3}
    4022:	adds	r4, #16
    4024:	cmp	r4, lr
    4026:	mov	r7, r5
    4028:	bne.n	4016 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    402a:	ldr	r0, [r4, #0]
    402c:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    402e:	mov	r0, r6
    4030:	bl	49e0 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    4034:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    4036:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    403a:	strb.w	r8, [r6, #51]	; 0x33
    403e:	ldr	r4, [sp, #12]
    4040:	b.n	3fe0 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4042:	adds	r4, #1
    4044:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4046:	ldrb	r1, [r4, #0]
    4048:	cmp	r1, #47	; 0x2f
    404a:	beq.n	4042 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    404c:	cbz	r1, 4084 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    404e:	movs	r2, #56	; 0x38
    4050:	add	r0, sp, #24
    4052:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4054:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4056:	bl	beac <memset>
  m_attributes = FILE_ATTR_ROOT;
    405a:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    405c:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    405e:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4060:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4062:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4066:	strb.w	r3, [sp, #75]	; 0x4b
    406a:	b.n	3fdc <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    406c:	ldrb.w	r3, [sp, #16]
    4070:	ldr	r2, [sp, #20]
    4072:	str.w	r9, [sp]
    4076:	mov	r1, r5
    4078:	mov	r0, r6
    407a:	bl	3bcc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    407e:	add	sp, #84	; 0x54
    4080:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4084:	movs	r2, #56	; 0x38
    4086:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4088:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    408a:	bl	beac <memset>
  m_attributes = FILE_ATTR_ROOT;
    408e:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4090:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4092:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4094:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4098:	strb.w	r0, [r6, #51]	; 0x33
    409c:	b.n	3fce <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    409e:	nop

000040a0 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    40a0:	cbz	r1, 40aa <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    40a2:	add.w	r1, r1, #1088	; 0x440
    40a6:	b.w	3fa0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    40aa:	mov	r0, r1
    40ac:	bx	lr
    40ae:	nop

000040b0 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    40b0:	ldrb.w	r3, [r0, #49]	; 0x31
    40b4:	cbnz	r3, 40cc <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    40b6:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    40b8:	ldrb.w	r4, [r1, #49]	; 0x31
    40bc:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    40c0:	sub	sp, #12
    40c2:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    40c4:	bne.n	40d0 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    40c6:	mov	r0, r4
}
    40c8:	add	sp, #12
    40ca:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    40cc:	movs	r0, #0
}
    40ce:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    40d0:	ldrd	r4, r5, [r5]
    40d4:	movs	r5, #0
    40d6:	and.w	r4, r4, #31
    40da:	orrs	r4, r5
    40dc:	beq.n	40e4 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    40de:	mov	r0, r3
}
    40e0:	add	sp, #12
    40e2:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    40e4:	str	r2, [sp, #0]
    40e6:	mov	r2, r3
    40e8:	bl	3bcc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    40ec:	add	sp, #12
    40ee:	pop	{r4, r5, pc}

000040f0 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    40f0:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    40f2:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    40f6:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    40f8:	ldr	r0, [r0, #4]
    40fa:	ldr	r1, [r4, #8]
    40fc:	ldr	r3, [r0, #0]
    40fe:	ldr	r3, [r3, #24]
    4100:	blx	r3
    4102:	cbz	r0, 410c <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4104:	ldrb	r3, [r4, #0]
    4106:	bic.w	r3, r3, #1
    410a:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    410c:	pop	{r4, pc}
    410e:	nop

00004110 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4110:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    4112:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4116:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    4118:	str	r3, [r0, #8]
    411a:	bx	lr

0000411c <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    411c:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    411e:	ldr	r5, [r0, #4]
    4120:	cbz	r5, 4162 <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4122:	ldr	r3, [r0, #8]
    4124:	cmp	r3, r1
    4126:	mov	r4, r0
    4128:	mov	r7, r2
    412a:	mov	r6, r1
    412c:	beq.n	414c <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    412e:	ldrb	r3, [r0, #0]
    4130:	lsls	r2, r3, #31
    4132:	bmi.n	415a <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4134:	lsls	r3, r7, #30
    4136:	bpl.n	4166 <FsCache::get(unsigned long, unsigned char)+0x4a>
    4138:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    413c:	and.w	r2, r7, #1
    4140:	movs	r3, #0
    4142:	orrs	r3, r2
    4144:	strb	r3, [r4, #0]
    4146:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4148:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    414a:	pop	{r3, r4, r5, r6, r7, pc}
    414c:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4150:	and.w	r2, r7, #1
    4154:	orrs	r3, r2
    4156:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4158:	pop	{r3, r4, r5, r6, r7, pc}
    415a:	bl	40f0 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    415e:	cmp	r0, #0
    4160:	bne.n	4134 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4162:	movs	r0, #0
    4164:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4166:	ldr	r0, [r4, #4]
    4168:	ldr	r3, [r0, #0]
    416a:	add.w	r5, r4, #12
    416e:	ldr	r3, [r3, #8]
    4170:	mov	r2, r5
    4172:	mov	r1, r6
    4174:	blx	r3
    4176:	cmp	r0, #0
    4178:	bne.n	413c <FsCache::get(unsigned long, unsigned char)+0x20>
    417a:	b.n	4162 <FsCache::get(unsigned long, unsigned char)+0x46>

0000417c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    417c:	push	{r3, r4, r5, lr}
    417e:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4180:	ldr.w	r1, [r0, #1052]	; 0x41c
    4184:	mov	r5, r2
    4186:	add.w	r1, r1, r4, lsr #7
    418a:	add.w	r0, r0, #524	; 0x20c
    418e:	movs	r2, #0
    4190:	bl	411c <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4194:	cbz	r0, 41a8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4196:	lsls	r4, r4, #2
    4198:	ubfx	r4, r4, #0, #9
    419c:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    419e:	adds	r2, r3, #1
    41a0:	beq.n	41ac <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    41a2:	str	r3, [r5, #0]
  return 1;
    41a4:	movs	r0, #1
    41a6:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    41a8:	movs	r0, #255	; 0xff
    41aa:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    41ac:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    41ae:	pop	{r3, r4, r5, pc}

000041b0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    41b0:	push	{r3, r4, r5, lr}
    41b2:	mov	r4, r1
    41b4:	ldr.w	r1, [r0, #1052]	; 0x41c
    41b8:	mov	r5, r2
    41ba:	add.w	r1, r1, r4, lsr #7
    41be:	add.w	r0, r0, #524	; 0x20c
    41c2:	movs	r2, #1
    41c4:	bl	411c <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    41c8:	mov	r3, r0
    41ca:	cbz	r0, 41d8 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    41cc:	lsls	r4, r4, #2
    41ce:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    41d2:	movs	r0, #1
    41d4:	str	r5, [r3, r4]
    41d6:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    41d8:	pop	{r3, r4, r5, pc}
    41da:	nop

000041dc <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    41dc:	ldrb	r3, [r0, #0]
    41de:	lsls	r3, r3, #31
    41e0:	bmi.n	41e6 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    41e2:	movs	r0, #1
    41e4:	bx	lr
    41e6:	b.w	40f0 <FsCache::sync() [clone .part.2]>
    41ea:	nop

000041ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    41ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41f0:	mov	r8, r0
    41f2:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    41f4:	mov	fp, r1
    41f6:	cmp	r1, #0
    41f8:	beq.n	4284 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    41fa:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    41fc:	ldr.w	r3, [r8, #1064]	; 0x428
    4200:	cmp	r7, r3
    4202:	bcs.n	427c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4204:	and.w	r5, r7, #7
    4208:	movs	r3, #1
    420a:	lsl.w	r5, r3, r5
    420e:	uxtb	r5, r5
    4210:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4214:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4216:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4218:	ldr.w	r1, [r8, #1060]	; 0x424
    421c:	movs	r2, #0
    421e:	add.w	r1, r1, r4, lsr #12
    4222:	mov	r0, r8
    4224:	bl	411c <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4228:	cbz	r0, 425c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    422a:	ldrb.w	r1, [r0, sl]
    422e:	b.n	4246 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4230:	cmp	r2, r9
    4232:	beq.n	428a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4234:	cmp	r7, r4
    4236:	beq.n	425a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4238:	ldr.w	r2, [r8, #1064]	; 0x428
    423c:	cmp	r4, r2
    423e:	bcs.n	4270 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4240:	ands.w	r5, r3, #255	; 0xff
    4244:	beq.n	4260 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4246:	adds	r4, #1
        if (!(mask & cache[i])) {
    4248:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    424a:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    424e:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4252:	beq.n	4230 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4254:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4256:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4258:	bne.n	4238 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    425a:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    425c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4260:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4264:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4268:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    426c:	bne.n	422a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    426e:	b.n	4274 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4270:	movs	r6, #0
    4272:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4274:	mov.w	sl, #0
    4278:	movs	r5, #1
    427a:	b.n	4218 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    427c:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    427e:	mov	sl, r7
    4280:	movs	r5, #1
    4282:	b.n	4214 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4284:	ldr.w	r7, [r0, #1048]	; 0x418
    4288:	b.n	41fc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    428a:	cmp.w	fp, #0
    428e:	bne.n	429a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    4290:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4294:	it	eq
    4296:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    429a:	adds	r0, r6, #2
    429c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000042a0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    42a0:	push	{r3, r4, r5, r6, r7, lr}
    42a2:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    42a4:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    42a6:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    42aa:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    42ae:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    42b2:	str	r1, [r0, #4]
    42b4:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    42b8:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    42ba:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    42bc:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    42c0:	strb	r3, [r4, #0]
    42c2:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    42c6:	str	r6, [r4, #8]
    42c8:	str.w	r6, [r4, #532]	; 0x214
    42cc:	mov	r2, r3
    42ce:	mov	r1, r3
    42d0:	bl	411c <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    42d4:	cmp	r5, #4
    42d6:	bhi.n	42f2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    42d8:	mov	r6, r0
    42da:	cbz	r0, 42f2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    42dc:	cbnz	r5, 42f6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    42de:	movs	r2, #5
    42e0:	ldr	r1, [pc, #152]	; (437c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    42e2:	adds	r0, r6, #3
    42e4:	bl	c69c <strncmp>
    42e8:	cbnz	r0, 42f2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    42ea:	ldrb.w	r3, [r6, #108]	; 0x6c
    42ee:	cmp	r3, #9
    42f0:	beq.n	4326 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    42f2:	movs	r0, #0
    42f4:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    42f6:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    42f8:	add.w	r3, r0, r3, lsl #4
    42fc:	ldrb.w	r2, [r3, #446]	; 0x1be
    4300:	ands.w	r2, r2, #127	; 0x7f
    4304:	bne.n	42f2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4306:	ldrb.w	r3, [r3, #450]	; 0x1c2
    430a:	cmp	r3, #0
    430c:	beq.n	42f2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    430e:	add.w	r5, r0, r5, lsl #4
    4312:	mov	r0, r7
    4314:	ldr.w	r5, [r5, #438]	; 0x1b6
    4318:	mov	r1, r5
    431a:	bl	411c <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    431e:	mov	r6, r0
    4320:	cmp	r0, #0
    4322:	bne.n	42de <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    4324:	b.n	42f2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4326:	ldr	r3, [r6, #80]	; 0x50
    4328:	add	r3, r5
    432a:	str.w	r3, [r4, #1052]	; 0x41c
    432e:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4330:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4334:	ldr	r3, [r6, #88]	; 0x58
    4336:	add	r5, r3
    4338:	str.w	r5, [r4, #1060]	; 0x424
    433c:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    433e:	str.w	r3, [r4, #1064]	; 0x428
    4342:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4344:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4348:	ldrb.w	r3, [r6, #109]	; 0x6d
    434c:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4350:	movs	r5, #1
    4352:	adds	r3, #9
    4354:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4358:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    435a:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    435e:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4360:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    4364:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4368:	mov	r0, r4
    436a:	mov	r2, r5
    436c:	bl	41ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4370:	movs	r3, #64	; 0x40
    4372:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    4376:	mov	r0, r5

 fail:
  return false;
}
    4378:	pop	{r3, r4, r5, r6, r7, pc}
    437a:	nop
    437c:	.word	0x00013198

00004380 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4380:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4384:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4386:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4388:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    438c:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    438e:	adds	r2, r1, r2
    4390:	cmp	r2, r0
    4392:	bhi.n	4406 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4394:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4396:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    439a:	cmp.w	sl, #0
    439e:	bne.n	440c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    43a0:	cmp	r1, r3
      m_bitmapStart = start;
    43a2:	it	cc
    43a4:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    43a8:	and.w	r4, r1, #7
    43ac:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    43ae:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    43b2:	lsl.w	r4, r2, r4
    43b6:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    43b8:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    43bc:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    43c0:	movs	r2, #1
    43c2:	mov	r1, r9
    43c4:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    43c6:	add	r9, r2
    43c8:	bl	411c <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    43cc:	cbz	r0, 4406 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    43ce:	adds	r7, r0, r6
    43d0:	add.w	r0, r0, #512	; 0x200
    43d4:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    43d8:	tst	r2, r4
    43da:	ite	ne
    43dc:	movne	r6, #1
    43de:	moveq	r6, #0
    43e0:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    43e2:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    43e6:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    43ea:	beq.n	4406 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    43ec:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    43ee:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    43f2:	beq.n	4420 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    43f4:	ands.w	r4, r4, #255	; 0xff
    43f8:	bne.n	43d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    43fa:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    43fc:	mov	r6, r4
    43fe:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4402:	bne.n	43d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    4404:	b.n	43c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    4406:	movs	r0, #0
    4408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    440c:	cmp	r1, r3
    440e:	bhi.n	43a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4410:	cmp	r2, r3
    4412:	bls.n	43a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4414:	cmp	r2, r0
    4416:	it	cs
    4418:	movcs	r2, #0
    441a:	str.w	r2, [r8, #1048]	; 0x418
    441e:	b.n	43a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4420:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4422:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4426:	nop

00004428 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4428:	push	{r4, r5, r6, lr}
    442a:	sub	sp, #8
    442c:	add	r6, sp, #8
    442e:	mov	r5, r0
    4430:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    4434:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4436:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    443a:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    443c:	adds	r3, #1
    443e:	cmp	r1, r3
    4440:	bls.n	4448 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    4442:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    4444:	add	sp, #8
    4446:	pop	{r4, r5, r6, pc}
    4448:	mov	r2, r6
    444a:	mov	r0, r5
    444c:	bl	417c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4450:	sxtb	r0, r0
    if (status < 0) return 0;
    4452:	cmp	r0, #0
    4454:	blt.n	4442 <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    4456:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    445a:	bne.n	4436 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    445c:	mov	r0, r4
  } while (status);
  return n;
}
    445e:	add	sp, #8
    4460:	pop	{r4, r5, r6, pc}
    4462:	nop

00004464 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4464:	push	{r3, r4, r5, r6, r7, lr}
    4466:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4468:	ldmia.w	r6, {r3, r5}
    446c:	ldr.w	r1, [r0, #1072]	; 0x430
    4470:	ldr.w	r4, [r0, #1060]	; 0x424
    4474:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4478:	ands	r1, r5
    447a:	subs	r3, #2
    447c:	add.w	r1, r4, r1, lsr #9
    4480:	lsls	r3, r7
    4482:	add	r1, r3
    4484:	add.w	r0, r0, #524	; 0x20c
    4488:	bl	411c <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    448c:	cbz	r0, 4496 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    448e:	ldr	r3, [r6, #4]
    4490:	ubfx	r3, r3, #0, #9
    4494:	add	r0, r3
}
    4496:	pop	{r3, r4, r5, r6, r7, pc}

00004498 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4498:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    449a:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    449c:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    449e:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    44a0:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    44a4:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    44a6:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    44aa:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    44ac:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    44ae:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    44b0:	uxtb	r3, r3
    44b2:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    44b6:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    44b8:	cbz	r4, 44ca <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    44ba:	ldrb	r3, [r5, #8]
    44bc:	cbz	r3, 44ce <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    44be:	ldr	r3, [r5, #0]
    44c0:	adds	r3, #1
    44c2:	str	r3, [r5, #0]
    44c4:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    44c6:	cmp	r4, #0
    44c8:	bne.n	44ba <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    44ca:	movs	r0, #1
    44cc:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    44ce:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    44d2:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    44d4:	adds	r3, #1
    44d6:	cmp	r1, r3
    44d8:	bls.n	44e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    44da:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    44de:	pop	{r4, r5, r6, pc}
    44e0:	mov	r2, r5
    44e2:	mov	r0, r6
    44e4:	bl	417c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    44e8:	sxtb	r0, r0
      if (status != 1) {
    44ea:	cmp	r0, #1
    44ec:	beq.n	44c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    44ee:	pop	{r4, r5, r6, pc}

000044f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    44f0:	ldr.w	r3, [r0, #1064]	; 0x428
    44f4:	adds	r3, #1
    44f6:	cmp	r3, r1
    44f8:	bcs.n	44fe <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    44fa:	movs	r0, #255	; 0xff
    44fc:	bx	lr
    44fe:	b.w	417c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    4502:	nop

00004504 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4504:	cmp	r1, #1
    4506:	bls.n	4524 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    4508:	ldr.w	r3, [r0, #1064]	; 0x428
    450c:	adds	r3, #1
    450e:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4510:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4512:	bls.n	451c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    4514:	movs	r0, #0
    4516:	ldr.w	r4, [sp], #4
    451a:	bx	lr
    451c:	ldr.w	r4, [sp], #4
    4520:	b.w	41b0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    4524:	movs	r0, #0
    4526:	bx	lr

00004528 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4528:	push	{r4, r5, r6, r7, lr}
    452a:	mov	r4, r1
    452c:	sub	sp, #12
    452e:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    4530:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4532:	ldr.w	r3, [r5, #1064]	; 0x428
    4536:	adds	r3, #1
    4538:	cmp	r4, r3
    453a:	bls.n	4542 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    453c:	movs	r0, #0
}
    453e:	add	sp, #12
    4540:	pop	{r4, r5, r6, r7, pc}
    4542:	add	r2, sp, #4
    4544:	mov	r1, r4
    4546:	mov	r0, r5
    4548:	bl	417c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    454c:	sxtb	r7, r0
    if (status < 0) {
    454e:	cmp	r7, #0
    4550:	blt.n	453c <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4552:	cmp	r4, #1
    4554:	bls.n	453c <ExFatPartition::freeChain(unsigned long)+0x14>
    4556:	ldr.w	r3, [r5, #1064]	; 0x428
    455a:	adds	r3, #1
    455c:	cmp	r4, r3
    455e:	bhi.n	453c <ExFatPartition::freeChain(unsigned long)+0x14>
    4560:	movs	r2, #0
    4562:	mov	r1, r4
    4564:	mov	r0, r5
    4566:	bl	41b0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    456a:	cmp	r0, #0
    456c:	beq.n	453c <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    456e:	ldr	r3, [sp, #4]
    4570:	adds	r4, #1
    4572:	cmp	r4, r3
    4574:	bne.n	458e <ExFatPartition::freeChain(unsigned long)+0x66>
    4576:	cmp	r7, #0
    4578:	bne.n	4532 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    457a:	mov	r3, r7
    457c:	subs	r2, r4, r6
    457e:	mov	r1, r6
    4580:	mov	r0, r5
    4582:	bl	4380 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4586:	cmp	r0, #0
    4588:	beq.n	453c <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    458a:	add	sp, #12
    458c:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    458e:	subs	r2, r4, r6
    4590:	mov	r1, r6
    4592:	movs	r3, #0
    4594:	mov	r0, r5
    4596:	bl	4380 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    459a:	cmp	r0, #0
    459c:	beq.n	453c <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    459e:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    45a0:	cmp	r7, #0
    45a2:	beq.n	453e <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    45a4:	mov	r6, r4
    45a6:	b.n	4532 <ExFatPartition::freeChain(unsigned long)+0xa>

000045a8 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    45a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    45ac:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    45ae:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    45b2:	mov	r8, r0
    45b4:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    45b8:	mov	r5, r4
    45ba:	mov	r1, r6
    45bc:	movs	r2, #0
    45be:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    45c0:	adds	r6, #1
    45c2:	bl	411c <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    45c6:	cbz	r0, 4616 <ExFatPartition::freeClusterCount()+0x6e>
    45c8:	add.w	lr, r0, #4294967295
    45cc:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    45d0:	ldrb.w	r0, [lr, #1]!
    45d4:	cmp	r0, #255	; 0xff
    45d6:	add.w	r9, r5, #4096	; 0x1000
    45da:	beq.n	4604 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    45dc:	cbz	r0, 45f2 <ExFatPartition::freeClusterCount()+0x4a>
    45de:	movs	r2, #8
    45e0:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    45e2:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    45e4:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    45e8:	it	ne
    45ea:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    45ec:	subs	r2, #1
    45ee:	uxtb	r3, r1
    45f0:	bne.n	45e2 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    45f2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    45f4:	cmp	ip, r5
    45f6:	bls.n	460e <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    45f8:	cmp	r5, r9
    45fa:	beq.n	45ba <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    45fc:	ldrb.w	r0, [lr, #1]!
    4600:	cmp	r0, #255	; 0xff
    4602:	bne.n	45dc <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4604:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4606:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    4608:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    460c:	bhi.n	45f8 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    460e:	rsb	r0, r4, ip
    4612:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    4616:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    461a:	nop

0000461c <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    461c:	push	{r4, lr}
    461e:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4620:	ldr.w	r1, [r0, #1068]	; 0x42c
    4624:	bl	4428 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    4628:	ldrb.w	r3, [r4, #1085]	; 0x43d
    462c:	adds	r3, #9
    462e:	uxtb	r3, r3
}
    4630:	lsls	r0, r3
    4632:	pop	{r4, pc}

00004634 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4634:	cbz	r1, 466a <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4636:	push	{r4}
    4638:	add	r1, r0
    463a:	lsls	r3, r2, #15
    463c:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4640:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    4644:	sub.w	r4, r2, #97	; 0x61
    4648:	cmp	r4, #25
      c -= 'a' - 'A';
    464a:	itt	ls
    464c:	subls	r2, #32
    464e:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4650:	uxtah	r2, r2, r3
    4654:	uxth	r2, r2
    4656:	lsls	r3, r2, #15
    4658:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    465c:	cmp	r1, r0
    465e:	uxth	r2, r2
    4660:	bne.n	463a <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4662:	mov	r0, r2
    4664:	ldr.w	r4, [sp], #4
    4668:	bx	lr
    466a:	mov	r0, r2
    466c:	bx	lr
    466e:	nop

00004670 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4670:	cbz	r3, 46c4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4672:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4674:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4676:	cmp	r4, #126	; 0x7e
    4678:	bhi.n	46b8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    467a:	add	r3, r2
    467c:	adds	r5, r1, r3
    467e:	add	r2, r1
    4680:	adds	r0, #2
    4682:	ldrb.w	r3, [r2], #1
    4686:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4688:	sub.w	r1, r3, #97	; 0x61
    468c:	cmp	r1, #25
    468e:	sub.w	r1, r4, #97	; 0x61
    4692:	ite	ls
    4694:	movls	r6, #32
    4696:	movhi	r6, #0
    4698:	cmp	r1, #25
    469a:	ite	ls
    469c:	movls	r1, #32
    469e:	movhi	r1, #0
    46a0:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    46a2:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    46a4:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    46a6:	uxtb	r4, r4
    46a8:	cmp	r4, r3
    46aa:	bne.n	46b8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    46ac:	cmp	r2, r5
    46ae:	beq.n	46be <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    46b0:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    46b4:	cmp	r4, #126	; 0x7e
    46b6:	bls.n	4682 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    46b8:	movs	r0, #0
    }
  }
  return true;
}
    46ba:	pop	{r4, r5, r6}
    46bc:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    46be:	movs	r0, #1
}
    46c0:	pop	{r4, r5, r6}
    46c2:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    46c4:	movs	r0, #1
}
    46c6:	bx	lr

000046c8 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    46c8:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    46ca:	push	{r3, r4, r5, r6, r7, lr}
    46cc:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    46ce:	ldr	r0, [r0, #32]
    46d0:	cbz	r1, 46d4 <ExFatFile::addCluster()+0xc>
    46d2:	adds	r1, #1
    46d4:	movs	r2, #1
    46d6:	bl	41ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    46da:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    46dc:	mov	r6, r0
  if (find < 2) {
    46de:	bls.n	4740 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    46e0:	movs	r3, #1
    46e2:	mov	r1, r0
    46e4:	mov	r2, r3
    46e6:	ldr	r0, [r4, #32]
    46e8:	bl	4380 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    46ec:	mov	r7, r0
    46ee:	cbz	r0, 4740 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    46f0:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    46f2:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    46f6:	cbz	r0, 4746 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    46f8:	lsls	r2, r3, #25
    46fa:	bpl.n	4724 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    46fc:	adds	r2, r0, #1
    46fe:	cmp	r6, r2
    4700:	beq.n	474e <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4702:	bic.w	r2, r3, #64	; 0x40
    4706:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    470a:	ldr	r3, [r4, #28]
    470c:	b.n	471a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    470e:	ldr	r0, [r4, #32]
    4710:	bl	4504 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4714:	cbz	r0, 4740 <ExFatFile::addCluster()+0x78>
    4716:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4718:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    471a:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    471c:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    471e:	mov	r1, r3
    4720:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4722:	bcc.n	470e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4724:	mov.w	r2, #4294967295
    4728:	mov	r1, r6
    472a:	ldr	r0, [r4, #32]
    472c:	bl	4504 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4730:	cbz	r0, 4740 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4732:	ldr	r1, [r4, #24]
    4734:	cbz	r1, 474e <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4736:	mov	r2, r6
    4738:	ldr	r0, [r4, #32]
    473a:	bl	4504 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    473e:	cbnz	r0, 474e <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4740:	movs	r7, #0
}
    4742:	mov	r0, r7
    4744:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4746:	orr.w	r3, r3, #64	; 0x40
    474a:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    474e:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4750:	mov	r0, r7
    4752:	pop	{r3, r4, r5, r6, r7, pc}

00004754 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4754:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    4758:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    475c:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    475e:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4762:	sub	sp, #20
    4764:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    4768:	add	r6, sp, #4
    476a:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    476e:	lsls	r2, r3, #30
    4770:	bpl.n	47aa <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4772:	ldr	r1, [r5, #28]
    4774:	cbnz	r1, 47b2 <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4776:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    4778:	movs	r2, #1
    477a:	mov	r1, r6
    477c:	ldr	r0, [r5, #32]
    477e:	bl	4464 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4782:	adds	r4, #1
    4784:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4786:	cbz	r0, 47aa <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4788:	ldrb	r3, [r0, #0]
    478a:	and.w	r3, r3, #127	; 0x7f
    478e:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4790:	ldrb.w	r3, [r5, #48]	; 0x30
    4794:	cmp	r3, r4
    4796:	bcc.n	47fc <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    4798:	cmp	r4, #0
    479a:	beq.n	4778 <ExFatFile::remove()+0x24>
    479c:	movs	r2, #32
    479e:	mov	r1, r6
    47a0:	ldr	r0, [r5, #32]
    47a2:	bl	4498 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    47a6:	cmp	r0, #1
    47a8:	beq.n	4778 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    47aa:	movs	r0, #0
}
    47ac:	add	sp, #20
    47ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    47b2:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    47b4:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    47b6:	bpl.n	47f2 <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    47b8:	ldrd	r2, r3, [r5, #8]
    47bc:	ldrb.w	r4, [r0, #1085]	; 0x43d
    47c0:	adds	r4, #9
    47c2:	uxtb	r4, r4
    47c4:	adds.w	r8, r2, #4294967295
    47c8:	adc.w	r9, r3, #4294967295
    47cc:	rsb	r7, r4, #32
    47d0:	lsl.w	r7, r9, r7
    47d4:	lsr.w	r2, r8, r4
    47d8:	sub.w	r3, r4, #32
    47dc:	lsr.w	r3, r9, r3
    47e0:	orrs	r2, r7
    47e2:	orrs	r2, r3
    47e4:	adds	r2, #1
    47e6:	movs	r3, #0
    47e8:	bl	4380 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    47ec:	cmp	r0, #0
    47ee:	bne.n	4776 <ExFatFile::remove()+0x22>
    47f0:	b.n	47aa <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    47f2:	bl	4528 <ExFatPartition::freeChain(unsigned long)>
    47f6:	cmp	r0, #0
    47f8:	bne.n	4776 <ExFatFile::remove()+0x22>
    47fa:	b.n	47aa <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    47fc:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    47fe:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4800:	mov	r0, r4
    4802:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4806:	strb.w	r3, [r5, #51]	; 0x33
    480a:	bl	41dc <FsCache::sync()>
    480e:	cmp	r0, #0
    4810:	beq.n	47aa <ExFatFile::remove()+0x56>
    4812:	add.w	r0, r4, #524	; 0x20c
    4816:	bl	41dc <FsCache::sync()>
    481a:	cmp	r0, #0
    481c:	beq.n	47aa <ExFatFile::remove()+0x56>
    481e:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4822:	ldr	r3, [r0, #0]
    4824:	ldr	r3, [r3, #20]
    4826:	blx	r3
    4828:	b.n	47ac <ExFatFile::remove()+0x58>
    482a:	nop

0000482c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    482c:	ldrb.w	r3, [r0, #49]	; 0x31
    4830:	lsls	r1, r3, #27
    4832:	bmi.n	4838 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4834:	movs	r0, #0
}
    4836:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4838:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    483a:	movs	r2, #0
    483c:	sub	sp, #32
    483e:	movs	r3, #0
    4840:	mov	r4, r0
    4842:	bl	3acc <ExFatFile::seekSet(unsigned long long)>
    4846:	b.n	4856 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    4848:	cmp	r0, #32
    484a:	bne.n	4880 <ExFatFile::rmdir()+0x54>
    484c:	ldrb.w	r3, [sp]
    4850:	lsls	r2, r3, #24
    4852:	bmi.n	4880 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4854:	cbz	r3, 4864 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    4856:	movs	r2, #32
    4858:	mov	r1, sp
    485a:	mov	r0, r4
    485c:	bl	38fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4860:	cmp	r0, #0
    4862:	bne.n	4848 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4864:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4868:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    486a:	orr.w	r3, r3, #2
    486e:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4872:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    4876:	mov	r0, r4
    4878:	bl	4754 <ExFatFile::remove()>

fail:
  return false;
}
    487c:	add	sp, #32
    487e:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4880:	movs	r0, #0
}
    4882:	add	sp, #32
    4884:	pop	{r4, pc}
    4886:	nop

00004888 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4888:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    488c:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4890:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4892:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4896:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4898:	add.w	r8, sp, #12
    489c:	stmia.w	r8, {r0, r1, r2}
    48a0:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    48a2:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    48a4:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    48a6:	movs	r2, #0
    48a8:	mov	r1, r8
    48aa:	ldr	r0, [r6, #32]
    48ac:	bl	4464 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    48b0:	uxtb.w	r9, r7
    if (!cache) {
    48b4:	mov	r5, r0
    48b6:	cbz	r0, 48c6 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    48b8:	ldrb	r2, [r0, #0]
    48ba:	cmp	r2, #192	; 0xc0
    48bc:	beq.n	4964 <ExFatFile::syncDir()+0xdc>
    48be:	cmp	r2, #193	; 0xc1
    48c0:	beq.n	48da <ExFatFile::syncDir()+0x52>
    48c2:	cmp	r2, #133	; 0x85
    48c4:	beq.n	491a <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    48c6:	ldrb.w	r3, [r6, #50]	; 0x32
    48ca:	orr.w	r3, r3, #1
    48ce:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    48d2:	movs	r0, #0
}
    48d4:	add	sp, #28
    48d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48da:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    48dc:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    48de:	ldrb	r2, [r5, r1]
    48e0:	lsls	r3, r4, #15
    48e2:	orr.w	r4, r3, r4, lsr #1
    48e6:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    48ea:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    48ec:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    48ee:	add.w	r1, r1, #1
    48f2:	beq.n	4910 <ExFatFile::syncDir()+0x88>
    48f4:	cmp	r1, #31
    48f6:	bls.n	48de <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    48f8:	cmp	sl, r9
    48fa:	beq.n	49a0 <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    48fc:	movs	r2, #32
    48fe:	mov	r1, r8
    4900:	ldr	r0, [r6, #32]
    4902:	bl	4498 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4906:	cmp	r0, #1
    4908:	add.w	r7, r7, #1
    490c:	beq.n	48a6 <ExFatFile::syncDir()+0x1e>
    490e:	b.n	48c6 <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4910:	cmp	r0, #133	; 0x85
    4912:	ite	eq
    4914:	moveq	r1, #4
    4916:	movne	r1, #2
    4918:	b.n	48de <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    491a:	ldr	r3, [pc, #192]	; (49dc <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    491c:	ldrb.w	r1, [r6, #49]	; 0x31
    4920:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    4922:	ldrb.w	sl, [r0, #1]
    4926:	and.w	r1, r1, #55	; 0x37
    492a:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    492c:	cmp	r3, #0
    492e:	beq.n	48da <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    4930:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4932:	ldrb.w	r2, [r1, #524]	; 0x20c
    4936:	orr.w	r2, r2, #1
    493a:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    493e:	add	r0, sp, #8
    4940:	add.w	r2, sp, #7
    4944:	add.w	r1, sp, #10
    4948:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    494a:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    494e:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    4952:	ldrb.w	r1, [sp, #7]
    4956:	strb	r1, [r5, #21]
    4958:	strh	r2, [r5, #12]
    495a:	strh	r2, [r5, #16]
    495c:	strh	r3, [r5, #14]
    495e:	strh	r3, [r5, #18]
    4960:	ldrb	r0, [r5, #0]
    4962:	b.n	48dc <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4964:	ldrb.w	r3, [r6, #51]	; 0x33
    4968:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    496c:	ldrb	r3, [r0, #1]
    496e:	ite	ne
    4970:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4974:	biceq.w	r3, r3, #2
    4978:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    497a:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    497e:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4982:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    4986:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4988:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    498a:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    498e:	ldr	r2, [r6, #32]
    4990:	ldrb.w	r3, [r2, #524]	; 0x20c
    4994:	orr.w	r3, r3, #1
    4998:	strb.w	r3, [r2, #524]	; 0x20c
    499c:	ldrb	r0, [r0, #0]
    499e:	b.n	48dc <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    49a0:	mov	r1, fp
    49a2:	movs	r2, #1
    49a4:	ldr	r0, [r6, #32]
    49a6:	bl	4464 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    49aa:	cmp	r0, #0
    49ac:	beq.n	48c6 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    49ae:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    49b0:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    49b2:	mov	r0, r5
    49b4:	bl	41dc <FsCache::sync()>
    49b8:	cmp	r0, #0
    49ba:	beq.n	48c6 <ExFatFile::syncDir()+0x3e>
    49bc:	add.w	r0, r5, #524	; 0x20c
    49c0:	bl	41dc <FsCache::sync()>
    49c4:	cmp	r0, #0
    49c6:	beq.w	48c6 <ExFatFile::syncDir()+0x3e>
    49ca:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    49ce:	ldr	r3, [r0, #0]
    49d0:	ldr	r3, [r3, #20]
    49d2:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    49d4:	cmp	r0, #0
    49d6:	beq.w	48c6 <ExFatFile::syncDir()+0x3e>
    49da:	b.n	48d4 <ExFatFile::syncDir()+0x4c>
    49dc:	.word	0x20019cf4

000049e0 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    49e0:	ldrb.w	r2, [r0, #49]	; 0x31
    49e4:	cbz	r2, 4a0c <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    49e6:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    49e8:	ldrb.w	r2, [r0, #51]	; 0x33
    49ec:	lsls	r1, r2, #24
    49ee:	bmi.n	4a10 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    49f0:	ldr	r5, [r0, #32]
    49f2:	mov	r4, r0
    49f4:	mov	r0, r5
    49f6:	bl	41dc <FsCache::sync()>
    49fa:	cbnz	r0, 4a20 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    49fc:	ldrb.w	r3, [r4, #50]	; 0x32
    4a00:	orr.w	r3, r3, #1
    4a04:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    4a08:	movs	r0, #0
}
    4a0a:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4a0c:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4a0e:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4a10:	and.w	r2, r2, #127	; 0x7f
    4a14:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4a18:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4a1c:	b.w	4888 <ExFatFile::syncDir()>
    4a20:	add.w	r0, r5, #524	; 0x20c
    4a24:	bl	41dc <FsCache::sync()>
    4a28:	cmp	r0, #0
    4a2a:	beq.n	49fc <ExFatFile::sync()+0x1c>
    4a2c:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4a30:	ldr	r3, [r0, #0]
    4a32:	ldr	r3, [r3, #20]
    4a34:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a36:	cmp	r0, #0
    4a38:	beq.n	49fc <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4a3a:	movs	r0, #1
    4a3c:	pop	{r3, r4, r5, pc}
    4a3e:	nop

00004a40 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4a40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4a44:	ldrb.w	r3, [r0, #49]	; 0x31
    4a48:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4a4a:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4a4c:	bmi.n	4b16 <ExFatFile::addDirCluster()+0xd6>
    4a4e:	ldr	r0, [r0, #8]
    4a50:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4a52:	ldr.w	r3, [r3, #1076]	; 0x434
    4a56:	add	r0, r3
    4a58:	cmp.w	r0, #67108864	; 0x4000000
    4a5c:	bcc.n	4a64 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    4a5e:	movs	r0, #0
    4a60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    4a64:	mov	r0, r4
    4a66:	bl	46c8 <ExFatFile::addCluster()>
    4a6a:	cmp	r0, #0
    4a6c:	beq.n	4a5e <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    4a6e:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4a70:	ldrb.w	r3, [r6, #524]	; 0x20c
    4a74:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    4a76:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4a7a:	bmi.n	4b1e <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    4a7c:	mov	r0, r5
    return m_cacheBuffer;
    4a7e:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    4a82:	bl	4110 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    4a86:	mov.w	r2, #512	; 0x200
    4a8a:	movs	r1, #0
    4a8c:	mov	r0, r6
    4a8e:	bl	beac <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    4a92:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4a94:	ldr	r3, [r4, #24]
    4a96:	ldrb.w	r0, [r2, #1085]	; 0x43d
    4a9a:	ldr.w	r1, [r2, #1060]	; 0x424
    4a9e:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4aa2:	movs	r7, #1
    4aa4:	lsl.w	r8, r8, r0
    4aa8:	lsls.w	r3, r7, r0
    4aac:	add	r8, r1
    4aae:	it	ne
    4ab0:	movne	r5, #0
    4ab2:	beq.n	4ad8 <ExFatFile::addDirCluster()+0x98>
    4ab4:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4ab8:	ldr	r3, [r0, #0]
    4aba:	add.w	r1, r8, r5
    4abe:	ldr	r3, [r3, #24]
    4ac0:	mov	r2, r6
    4ac2:	blx	r3
    4ac4:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    4ac6:	cmp	r0, #0
    4ac8:	beq.n	4a5e <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4aca:	ldr	r2, [r4, #32]
    4acc:	ldrb.w	r3, [r2, #1085]	; 0x43d
    4ad0:	lsl.w	r3, r7, r3
    4ad4:	cmp	r3, r5
    4ad6:	bhi.n	4ab4 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    4ad8:	ldrb.w	r3, [r4, #49]	; 0x31
    4adc:	lsls	r3, r3, #25
    4ade:	bmi.n	4b0c <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4ae0:	ldrb.w	r3, [r4, #51]	; 0x33
    4ae4:	orn	r3, r3, #127	; 0x7f
    4ae8:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4aec:	ldr.w	r6, [r2, #1076]	; 0x434
    4af0:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4af4:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4af8:	adds	r2, r2, r6
    4afa:	mov.w	r7, #0
    4afe:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    4b00:	adds	r0, r0, r6
    4b02:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4b04:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4b08:	strd	r0, r1, [r4, #16]
  }
  return sync();
    4b0c:	mov	r0, r4

 fail:
  return false;
}
    4b0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    4b12:	b.w	49e0 <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4b16:	ldr	r0, [r0, #32]
    4b18:	bl	461c <ExFatPartition::rootLength()>
    4b1c:	b.n	4a50 <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4b1e:	mov	r0, r5
    4b20:	bl	41dc <FsCache::sync()>
    4b24:	cmp	r0, #0
    4b26:	bne.n	4a7c <ExFatFile::addDirCluster()+0x3c>
    4b28:	b.n	4a5e <ExFatFile::addDirCluster()+0x1e>
    4b2a:	nop

00004b2c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    4b2c:	ldrb.w	r3, [r1, #49]	; 0x31
    4b30:	tst.w	r3, #80	; 0x50
    4b34:	bne.n	4b3a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    4b36:	movs	r0, #0
    4b38:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4b3a:	push	{r4, r5, lr}
    4b3c:	sub	sp, #12
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4b3e:	movw	r5, #2562	; 0xa02
    4b42:	ldrb	r3, [r2, #0]
    4b44:	ldr	r2, [r2, #4]
    4b46:	str	r5, [sp, #0]
    4b48:	mov	r4, r0
    4b4a:	bl	3bcc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4b4e:	cbnz	r0, 4b56 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    4b50:	movs	r0, #0
    4b52:	add	sp, #12
    4b54:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    4b56:	movs	r3, #16
    4b58:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    4b5c:	mov	r0, r4
    4b5e:	bl	4a40 <ExFatFile::addDirCluster()>
    4b62:	cmp	r0, #0
    4b64:	beq.n	4b50 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    4b66:	ldr	r3, [r4, #24]
    4b68:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4b6a:	movs	r2, #0
    4b6c:	movs	r3, #0
    4b6e:	mov	r0, r4
    4b70:	bl	3acc <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4b74:	movs	r3, #193	; 0xc1
  return sync();
    4b76:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4b78:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    4b7c:	add	sp, #12
    4b7e:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    4b82:	b.w	49e0 <ExFatFile::sync()>
    4b86:	nop

00004b88 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    4b88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b8c:	mov	r6, r0
    4b8e:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    4b90:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    4b94:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    4b96:	movs	r0, #0
    4b98:	strb.w	r0, [sp, #73]	; 0x49
    4b9c:	strb.w	r0, [sp, #74]	; 0x4a
    4ba0:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    4ba4:	cbnz	r5, 4bb4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4ba6:	mov	r9, r3
    4ba8:	ldrb.w	r3, [r1, #49]	; 0x31
    4bac:	tst.w	r3, #80	; 0x50
    4bb0:	mov	r4, r1
    4bb2:	bne.n	4bbc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    4bb4:	movs	r0, #0
}
    4bb6:	add	sp, #84	; 0x54
    4bb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4bbc:	ldrb	r3, [r2, #0]
    4bbe:	cmp	r3, #47	; 0x2f
    4bc0:	mov	r1, r2
    4bc2:	beq.n	4c32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4bc4:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4bc8:	add	r3, sp, #12
    4bca:	add	r2, sp, #16
    4bcc:	mov	r0, r6
    4bce:	bl	3838 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4bd2:	cmp	r0, #0
    4bd4:	beq.n	4bb4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    4bd6:	ldr	r3, [sp, #12]
    4bd8:	ldrb	r3, [r3, #0]
    4bda:	cmp	r3, #0
    4bdc:	beq.n	4c4e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    4bde:	ldrb.w	r3, [sp, #16]
    4be2:	ldr	r2, [sp, #20]
    4be4:	str.w	r8, [sp]
    4be8:	mov	r1, r4
    4bea:	mov	r0, r6
    4bec:	bl	3bcc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    4bf0:	cbnz	r0, 4c06 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    4bf2:	cmp.w	r9, #0
    4bf6:	beq.n	4bb4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4bf8:	mov	r1, r4
    4bfa:	add	r2, sp, #16
    4bfc:	mov	r0, r6
    4bfe:	bl	4b2c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4c02:	cmp	r0, #0
    4c04:	beq.n	4bb4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    4c06:	mov	r4, r6
    4c08:	add	r7, sp, #24
    4c0a:	add.w	lr, r6, #48	; 0x30
    4c0e:	ldr	r0, [r4, #0]
    4c10:	ldr	r1, [r4, #4]
    4c12:	ldr	r2, [r4, #8]
    4c14:	ldr	r3, [r4, #12]
    4c16:	mov	r5, r7
    4c18:	stmia	r5!, {r0, r1, r2, r3}
    4c1a:	adds	r4, #16
    4c1c:	cmp	r4, lr
    4c1e:	mov	r7, r5
    4c20:	bne.n	4c0e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    4c22:	ldr	r0, [r4, #0]
    4c24:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    4c26:	mov	r0, r6
    4c28:	bl	3754 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    4c2c:	add	r4, sp, #24
    4c2e:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    4c30:	b.n	4bc8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4c32:	adds	r1, #1
    4c34:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4c36:	ldrb	r3, [r1, #0]
    4c38:	cmp	r3, #47	; 0x2f
    4c3a:	beq.n	4c32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    4c3c:	ldr	r1, [r4, #32]
    4c3e:	add	r0, sp, #24
    4c40:	bl	3810 <ExFatFile::openRoot(ExFatVolume*)>
    4c44:	cmp	r0, #0
    4c46:	beq.n	4bb4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4c48:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    4c4a:	add	r4, sp, #24
    4c4c:	b.n	4bc4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    4c4e:	add	r2, sp, #16
    4c50:	mov	r1, r4
    4c52:	mov	r0, r6
    4c54:	bl	4b2c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    4c58:	add	sp, #84	; 0x54
    4c5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4c5e:	nop

00004c60 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4c60:	orrs.w	r1, r2, r3
    4c64:	beq.n	4c6e <ExFatFile::preAllocate(unsigned long long)+0xe>
    4c66:	ldrb.w	r1, [r0, #51]	; 0x33
    4c6a:	lsls	r1, r1, #30
    4c6c:	bmi.n	4c72 <ExFatFile::preAllocate(unsigned long long)+0x12>
  }
  return true;

 fail:
  return false;
}
    4c6e:	movs	r0, #0
    4c70:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4c72:	ldr	r1, [r0, #28]
    4c74:	cmp	r1, #0
    4c76:	bne.n	4c6e <ExFatFile::preAllocate(unsigned long long)+0xe>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    4c78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c7c:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    4c7e:	ldr	r0, [r0, #32]
    4c80:	mov	r5, r3
    4c82:	ldrb.w	r3, [r0, #1085]	; 0x43d
    4c86:	adds	r3, #9
    4c88:	adds.w	r8, r2, #4294967295
    4c8c:	uxtb	r3, r3
    4c8e:	adc.w	r9, r5, #4294967295
    4c92:	rsb	r7, r3, #32
    4c96:	lsl.w	r7, r9, r7
    4c9a:	mov	r4, r2
    4c9c:	lsr.w	r2, r8, r3
    4ca0:	subs	r3, #32
    4ca2:	orrs	r2, r7
    4ca4:	lsr.w	r3, r9, r3
    4ca8:	orrs	r2, r3
    4caa:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    4cac:	mov	r2, r7
    4cae:	bl	41ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4cb2:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    4cb4:	mov	r8, r0
  if (find < 2) {
    4cb6:	bls.n	4cc6 <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    4cb8:	mov	r1, r0
    4cba:	mov	r2, r7
    4cbc:	movs	r3, #1
    4cbe:	ldr	r0, [r6, #32]
    4cc0:	bl	4380 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4cc4:	cbnz	r0, 4ccc <ExFatFile::preAllocate(unsigned long long)+0x6c>
  }
  return true;

 fail:
  return false;
}
    4cc6:	movs	r0, #0
    4cc8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4ccc:	ldrb.w	r3, [r6, #51]	; 0x33
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    4cd0:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4cd4:	orn	r3, r3, #63	; 0x3f
    4cd8:	strb.w	r3, [r6, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    4cdc:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    4ce0:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    4ce2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    4ce6:	b.w	49e0 <ExFatFile::sync()>
    4cea:	nop

00004cec <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    4cec:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4cee:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    4cf2:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    4cf4:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4cf6:	tst.w	r4, #24
    4cfa:	strb.w	r3, [sp, #49]	; 0x31
    4cfe:	strb.w	r3, [sp, #50]	; 0x32
    4d02:	strb.w	r3, [sp, #51]	; 0x33
    4d06:	strb.w	r3, [sp, #105]	; 0x69
    4d0a:	strb.w	r3, [sp, #106]	; 0x6a
    4d0e:	strb.w	r3, [sp, #107]	; 0x6b
    4d12:	beq.n	4d1c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    4d14:	ldr	r3, [r1, #32]
    4d16:	ldr	r4, [r0, #32]
    4d18:	cmp	r4, r3
    4d1a:	beq.n	4d22 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    4d1c:	movs	r0, #0
}
    4d1e:	add	sp, #116	; 0x74
    4d20:	pop	{r4, r5, r6, r7, pc}
    4d22:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4d24:	movw	r3, #2561	; 0xa01
    4d28:	mov	r0, sp
    4d2a:	bl	3fa0 <ExFatFile::open(ExFatFile*, char const*, int)>
    4d2e:	cmp	r0, #0
    4d30:	beq.n	4d1c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    4d32:	add	r7, sp, #56	; 0x38
    4d34:	mov	r5, r4
    4d36:	add.w	lr, r4, #48	; 0x30
    4d3a:	ldr	r0, [r5, #0]
    4d3c:	ldr	r1, [r5, #4]
    4d3e:	ldr	r2, [r5, #8]
    4d40:	ldr	r3, [r5, #12]
    4d42:	mov	r6, r7
    4d44:	stmia	r6!, {r0, r1, r2, r3}
    4d46:	adds	r5, #16
    4d48:	cmp	r5, lr
    4d4a:	mov	r7, r6
    4d4c:	bne.n	4d3a <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    4d4e:	ldr	r0, [r5, #0]
    4d50:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    4d52:	add	r3, sp, #36	; 0x24
    4d54:	ldmia.w	r3, {r0, r1, r2}
    4d58:	add.w	r3, r4, #36	; 0x24
    4d5c:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d60:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    4d64:	ldrb.w	r2, [sp, #48]	; 0x30
    4d68:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d6c:	orn	r3, r3, #127	; 0x7f
    4d70:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4d74:	mov	r0, r4
    4d76:	bl	49e0 <ExFatFile::sync()>
    4d7a:	cmp	r0, #0
    4d7c:	beq.n	4d1c <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4d7e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4d80:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4d82:	movs	r3, #8
  return oldFile.remove();
    4d84:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4d86:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4d88:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4d8c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4d90:	bl	4754 <ExFatFile::remove()>
    4d94:	b.n	4d1e <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    4d96:	nop

00004d98 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4d98:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4d9c:	lsls	r2, r3, #30
    4d9e:	bpl.n	4dd2 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4da0:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4da2:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4da4:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4da6:	cbz	r5, 4dcc <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    4da8:	and.w	r3, r3, #64	; 0x40
    4dac:	mov	r4, r0
    4dae:	and.w	r0, r3, #255	; 0xff
    4db2:	cbnz	r3, 4dd6 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    4db4:	ldr	r1, [r4, #24]
    4db6:	cmp	r1, #0
    4db8:	bne.n	4e3e <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    4dba:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4dbc:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    4dbe:	mov	r1, r5
    4dc0:	ldr	r0, [r4, #32]
    4dc2:	bl	4528 <ExFatPartition::freeChain(unsigned long)>
    4dc6:	cbnz	r0, 4e16 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4dc8:	movs	r0, #0
    4dca:	b.n	4dce <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4dcc:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4dce:	add	sp, #12
    4dd0:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4dd2:	movs	r0, #0
}
    4dd4:	bx	lr
    4dd6:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    4dd8:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4dda:	ldrb.w	r3, [r0, #1085]	; 0x43d
    4dde:	ldrd	r6, r7, [r4, #8]
    4de2:	adds	r3, #9
    4de4:	uxtb	r3, r3
    4de6:	adds.w	r6, r6, #4294967295
    4dea:	rsb	lr, r3, #32
    4dee:	adc.w	r7, r7, #4294967295
    4df2:	lsr.w	r2, r6, r3
    4df6:	lsl.w	lr, r7, lr
    4dfa:	subs	r3, #32
    4dfc:	orr.w	r2, r2, lr
    4e00:	lsr.w	r3, r7, r3
    4e04:	orrs	r2, r3
    4e06:	adds	r2, #1
    if (m_curCluster) {
    4e08:	cbz	r1, 4e38 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4e0a:	subs	r5, #1
    4e0c:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4e0e:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    4e10:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4e12:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4e14:	cbnz	r2, 4e5a <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4e16:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4e1a:	ldrb.w	r3, [r4, #51]	; 0x33
    4e1e:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4e22:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4e26:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4e2a:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    4e2e:	mov	r0, r4
    4e30:	bl	49e0 <ExFatFile::sync()>

 fail:
  return false;
}
    4e34:	add	sp, #12
    4e36:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    4e38:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4e3a:	str	r1, [r4, #28]
    4e3c:	b.n	4e14 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4e3e:	add	r2, sp, #8
    4e40:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4e44:	ldr	r0, [r4, #32]
    4e46:	bl	44f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4e4a:	sxtb	r0, r0
      if (fg < 0) {
    4e4c:	cmp	r0, #0
    4e4e:	blt.n	4dc8 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    4e50:	bne.n	4e68 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    4e52:	ldr	r5, [sp, #4]
    4e54:	cmp	r5, #0
    4e56:	beq.n	4e16 <ExFatFile::truncate()+0x7e>
    4e58:	b.n	4dbe <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4e5a:	movs	r3, #0
    4e5c:	ldr	r1, [sp, #4]
    4e5e:	bl	4380 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4e62:	cmp	r0, #0
    4e64:	bne.n	4e16 <ExFatFile::truncate()+0x7e>
    4e66:	b.n	4dc8 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4e68:	mov.w	r2, #4294967295
    4e6c:	ldr	r1, [r4, #24]
    4e6e:	ldr	r0, [r4, #32]
    4e70:	bl	4504 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e74:	cmp	r0, #0
    4e76:	bne.n	4e52 <ExFatFile::truncate()+0xba>
    4e78:	b.n	4dc8 <ExFatFile::truncate()+0x30>
    4e7a:	nop

00004e7c <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4e7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e80:	ldrb.w	r3, [r0, #51]	; 0x33
    4e84:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4e86:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4e88:	mov	r6, r0
    4e8a:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4e8c:	bmi.n	4ea4 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4e8e:	ldrb.w	r3, [r6, #50]	; 0x32
    4e92:	orr.w	r3, r3, #1
    4e96:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    4e9a:	mov.w	r0, #4294967295
}
    4e9e:	add	sp, #20
    4ea0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4ea4:	lsls	r2, r3, #28
    4ea6:	mov	sl, r1
    4ea8:	bmi.w	50d0 <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4eac:	ldr	r3, [sp, #4]
    4eae:	cmp	r3, #0
    4eb0:	beq.w	50f8 <ExFatFile::write(void const*, unsigned int)+0x27c>
    4eb4:	mov	r1, r6
    4eb6:	ldrd	r2, r3, [r1], #24
    4eba:	ldr.w	r8, [sp, #4]
    4ebe:	str	r1, [sp, #12]
    4ec0:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4ec2:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    4ec4:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4ec6:	ldr.w	r4, [r0, #1072]	; 0x430
    4eca:	mov	r3, fp
    4ecc:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4ece:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    4ed2:	cbnz	r4, 4f28 <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    4ed4:	cmp	r5, #0
    4ed6:	beq.w	5056 <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    4eda:	ldrb.w	r3, [r6, #51]	; 0x33
    4ede:	lsls	r3, r3, #25
    4ee0:	bpl.w	509e <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4ee4:	ldrd	r2, r3, [r6, #8]
    4ee8:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4eec:	adds	r7, #9
    4eee:	uxtb	r7, r7
    4ef0:	adds.w	r2, r2, #4294967295
    4ef4:	adc.w	r3, r3, #4294967295
    4ef8:	rsb	lr, r7, #32
    4efc:	lsl.w	lr, r3, lr
    4f00:	lsr.w	r1, r2, r7
    4f04:	subs	r7, #32
    4f06:	lsr.w	r7, r3, r7
    4f0a:	orr.w	r1, r1, lr
    4f0e:	ldr	r3, [r6, #28]
    4f10:	orrs	r1, r7
    4f12:	add	r3, r1
    4f14:	cmp	r5, r3
    4f16:	bcc.w	5084 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    4f1a:	mov	r0, r6
    4f1c:	bl	46c8 <ExFatFile::addCluster()>
    4f20:	cmp	r0, #0
    4f22:	beq.n	4e8e <ExFatFile::write(void const*, unsigned int)+0x12>
    4f24:	ldr	r0, [r6, #32]
    4f26:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4f28:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4f2c:	ldrb.w	lr, [r0, #1085]	; 0x43d
    4f30:	lsrs	r4, r4, #9
    4f32:	subs	r5, #2
    4f34:	adds	r1, r4, r7
    4f36:	lsl.w	r5, r5, lr
    4f3a:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4f3c:	cmp.w	r9, #0
    4f40:	bne.w	5048 <ExFatFile::write(void const*, unsigned int)+0x1cc>
    4f44:	cmp.w	r8, #512	; 0x200
    4f48:	bcs.n	4ffa <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4f4a:	ldrd	r2, r3, [r6, #16]
    4f4e:	ldrd	r4, r5, [r6]
    4f52:	cmp.w	r8, #512	; 0x200
    4f56:	mov	r7, r8
    4f58:	it	cs
    4f5a:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4f5e:	cmp	r5, r3
    4f60:	it	eq
    4f62:	cmpeq	r4, r2
    4f64:	ite	cc
    4f66:	movcc	r2, #1
    4f68:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4f6a:	add.w	r0, r0, #524	; 0x20c
    4f6e:	bl	411c <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    4f72:	cmp	r0, #0
    4f74:	beq.n	4e8e <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4f76:	add	r0, r9
    4f78:	mov	r2, r7
    4f7a:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4f7c:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    4f7e:	bl	8774 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4f82:	cmp.w	r9, #512	; 0x200
    4f86:	beq.w	50ae <ExFatFile::write(void const*, unsigned int)+0x232>
    4f8a:	mov	r0, r7
    4f8c:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4f8e:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4f92:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4f96:	adds.w	fp, r2, r0
    4f9a:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4f9e:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4fa0:	mov	r2, fp
    4fa2:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4fa4:	it	eq
    4fa6:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    4fa8:	add	sl, r7
    toWrite -= n;
    4faa:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    4fae:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    4fb2:	bcs.n	4fc8 <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4fb4:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    4fb8:	mov	r4, ip
    4fba:	mov	r3, fp
    4fbc:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4fc0:	orn	r1, r1, #127	; 0x7f
    4fc4:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4fc8:	cmp.w	r8, #0
    4fcc:	bne.w	4ec2 <ExFatFile::write(void const*, unsigned int)+0x46>
    4fd0:	mov	r2, fp
    4fd2:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    4fd4:	ldrd	r0, r1, [r6, #8]
    4fd8:	cmp	r1, r3
    4fda:	it	eq
    4fdc:	cmpeq	r0, r2
    4fde:	bcc.n	50e0 <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4fe0:	ldr	r3, [pc, #284]	; (5100 <ExFatFile::write(void const*, unsigned int)+0x284>)
    4fe2:	ldr	r3, [r3, #0]
    4fe4:	cmp	r3, #0
    4fe6:	beq.w	50f4 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4fea:	ldrb.w	r3, [r6, #51]	; 0x33
    4fee:	ldr	r0, [sp, #4]
    4ff0:	orn	r3, r3, #127	; 0x7f
    4ff4:	strb.w	r3, [r6, #51]	; 0x33
    4ff8:	b.n	4e9e <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    4ffa:	cmp.w	r8, #1024	; 0x400
    4ffe:	bcc.n	505e <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5000:	movs	r3, #1
    5002:	lsl.w	lr, r3, lr
    5006:	rsb	lr, r4, lr
    500a:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    500e:	mov.w	r4, r8, lsr #9
    5012:	cmp	r4, lr
    5014:	it	cs
    5016:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5018:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    501a:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    501e:	bhi.n	5034 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    5020:	adds	r2, r4, r1
    5022:	cmp	r2, r3
    5024:	bls.n	5034 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5026:	add.w	r0, r0, #524	; 0x20c
    502a:	str	r1, [sp, #8]
    502c:	bl	4110 <FsCache::invalidate()>
    5030:	ldr	r0, [r6, #32]
    5032:	ldr	r1, [sp, #8]
    5034:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5038:	ldr	r5, [r0, #0]
    503a:	mov	r3, r4
    503c:	mov	r2, sl
    503e:	ldr	r4, [r5, #28]
    5040:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    5042:	cmp	r0, #0
    5044:	bne.n	4f8a <ExFatFile::write(void const*, unsigned int)+0x10e>
    5046:	b.n	4e8e <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5048:	rsb	r7, r9, #512	; 0x200
    504c:	cmp	r7, r8
    504e:	it	cs
    5050:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5052:	movs	r2, #1
    5054:	b.n	4f6a <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5056:	ldr	r5, [r6, #28]
    5058:	cbz	r5, 508a <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    505a:	str	r5, [r6, #24]
    505c:	b.n	4f28 <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    505e:	ldr.w	r3, [r0, #532]	; 0x214
    5062:	cmp	r1, r3
    5064:	beq.n	50c0 <ExFatFile::write(void const*, unsigned int)+0x244>
    5066:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    506a:	ldr	r3, [r0, #0]
    506c:	mov	r2, sl
    506e:	ldr	r3, [r3, #24]
    5070:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5072:	cmp	r0, #0
    5074:	beq.w	4e8e <ExFatFile::write(void const*, unsigned int)+0x12>
    5078:	mov.w	r0, #512	; 0x200
    507c:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    507e:	mov.w	r7, #512	; 0x200
    5082:	b.n	4f8e <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5084:	adds	r5, #1
    5086:	str	r5, [r6, #24]
    5088:	b.n	4f28 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    508a:	mov	r0, r6
    508c:	bl	46c8 <ExFatFile::addCluster()>
    5090:	cmp	r0, #0
    5092:	beq.w	4e8e <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5096:	ldr	r5, [r6, #24]
    5098:	str	r5, [r6, #28]
    509a:	ldr	r0, [r6, #32]
    509c:	b.n	4f28 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    509e:	mov	r1, r5
    50a0:	ldr	r2, [sp, #12]
    50a2:	bl	44f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    50a6:	cmp	r0, #0
    50a8:	bne.w	4f24 <ExFatFile::write(void const*, unsigned int)+0xa8>
    50ac:	b.n	4f1a <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    50ae:	ldr	r0, [r6, #32]
    50b0:	add.w	r0, r0, #524	; 0x20c
    50b4:	bl	41dc <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    50b8:	cmp	r0, #0
    50ba:	bne.w	4f8a <ExFatFile::write(void const*, unsigned int)+0x10e>
    50be:	b.n	4e8e <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    50c0:	add.w	r0, r0, #524	; 0x20c
    50c4:	str	r1, [sp, #8]
    50c6:	bl	4110 <FsCache::invalidate()>
    50ca:	ldr	r0, [r6, #32]
    50cc:	ldr	r1, [sp, #8]
    50ce:	b.n	5066 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    50d0:	ldrd	r2, r3, [r0, #16]
    50d4:	bl	3acc <ExFatFile::seekSet(unsigned long long)>
    50d8:	cmp	r0, #0
    50da:	beq.w	4e8e <ExFatFile::write(void const*, unsigned int)+0x12>
    50de:	b.n	4eac <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    50e0:	ldrb.w	r1, [r6, #51]	; 0x33
    50e4:	ldr	r0, [sp, #4]
    50e6:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    50ea:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    50ee:	strb.w	r1, [r6, #51]	; 0x33
    50f2:	b.n	4e9e <ExFatFile::write(void const*, unsigned int)+0x22>
    50f4:	ldr	r0, [sp, #4]
    50f6:	b.n	4e9e <ExFatFile::write(void const*, unsigned int)+0x22>
    50f8:	ldrd	r2, r3, [r6]
    50fc:	b.n	4fd4 <ExFatFile::write(void const*, unsigned int)+0x158>
    50fe:	nop
    5100:	.word	0x20019cf4

00005104 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5104:	push	{r3, r4, r5, lr}
    5106:	mov	r4, r0
    5108:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    510a:	movs	r2, #36	; 0x24
    510c:	movs	r1, #0
    510e:	bl	beac <memset>

  m_vol = vol;
    5112:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    5114:	ldrb	r3, [r5, #7]
    5116:	cmp	r3, #16
    5118:	beq.n	512c <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    511a:	cmp	r3, #32
    511c:	bne.n	5128 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    511e:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5120:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5122:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5124:	strb	r0, [r4, #2]
    5126:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    5128:	movs	r0, #0
}
    512a:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    512c:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    512e:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5130:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5132:	strb	r0, [r4, #2]
    5134:	pop	{r3, r4, r5, pc}
    5136:	nop

00005138 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5138:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    513a:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    513c:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5140:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5142:	mov	r1, r5
    5144:	ldr	r0, [r0, #8]
    5146:	bl	6044 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    514a:	cbz	r0, 5162 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    514c:	cbz	r5, 5164 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    514e:	ldr	r3, [r4, #16]
    5150:	adds	r5, #1
    5152:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5154:	ldrb	r3, [r4, #2]
    5156:	it	ne
    5158:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    515c:	orn	r3, r3, #127	; 0x7f
    5160:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5162:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5164:	ldrb	r3, [r4, #2]
    5166:	orr.w	r3, r3, #64	; 0x40
    516a:	b.n	515c <FatFile::addCluster()+0x24>

0000516c <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    516c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5170:	ldrb	r3, [r0, #0]
    5172:	and.w	r3, r3, #32
    5176:	cbnz	r3, 5184 <FatFile::addDirCluster()+0x18>
    5178:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    517c:	ldr	r1, [r0, #20]
    517e:	ldr	r3, [pc, #124]	; (51fc <FatFile::addDirCluster()+0x90>)
    5180:	cmp	r1, r3
    5182:	bls.n	518c <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5184:	movs	r6, #0
}
    5186:	mov	r0, r6
    5188:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    518c:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    518e:	bl	5138 <FatFile::addCluster()>
    5192:	mov	r6, r0
    5194:	cmp	r0, #0
    5196:	beq.n	5184 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5198:	ldr	r1, [r5, #16]
    519a:	ldr	r0, [r5, #8]
    519c:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
    51a0:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    51a2:	ldr	r0, [r5, #8]
    51a4:	mov	r1, r7
    51a6:	adds	r0, #36	; 0x24
    51a8:	movs	r2, #5
    51aa:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    51ae:	mov	r8, r0
    51b0:	cmp	r0, #0
    51b2:	beq.n	5184 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    51b4:	mov.w	r2, #512	; 0x200
    51b8:	mov	r1, r4
    51ba:	bl	beac <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    51be:	ldr	r3, [r5, #8]
    51c0:	ldrb	r2, [r3, #4]
    51c2:	cmp	r2, #1
    51c4:	bls.n	51e8 <FatFile::addDirCluster()+0x7c>
    51c6:	movs	r4, #1
    51c8:	b.n	51d2 <FatFile::addDirCluster()+0x66>
    51ca:	ldr	r3, [r5, #8]
    51cc:	ldrb	r2, [r3, #4]
    51ce:	cmp	r2, r4
    51d0:	bls.n	51e8 <FatFile::addDirCluster()+0x7c>
    51d2:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    51d4:	ldr	r3, [r0, #0]
    51d6:	adds	r1, r4, r7
    51d8:	ldr	r3, [r3, #24]
    51da:	mov	r2, r8
    51dc:	blx	r3
    51de:	adds	r4, #1
    51e0:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    51e2:	cmp	r0, #0
    51e4:	bne.n	51ca <FatFile::addDirCluster()+0x5e>
    51e6:	b.n	5184 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    51e8:	ldrb	r3, [r3, #6]
    51ea:	ldr	r1, [r5, #20]
    51ec:	mov.w	r2, #512	; 0x200
    51f0:	lsl.w	r3, r2, r3
    51f4:	uxtah	r3, r1, r3
    51f8:	str	r3, [r5, #20]
    51fa:	b.n	5186 <FatFile::addDirCluster()+0x1a>
    51fc:	.word	0x001ffdff

00005200 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5200:	push	{r4, lr}
    5202:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5204:	ldr	r0, [r0, #8]
    5206:	mov	r2, r1
    5208:	adds	r0, #36	; 0x24
    520a:	ldr	r1, [r4, #24]
    520c:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5210:	cbz	r0, 521c <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5212:	ldrh	r3, [r4, #4]
    5214:	and.w	r3, r3, #15
    5218:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    521c:	pop	{r4, pc}
    521e:	nop

00005220 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5220:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5222:	ldrsb.w	r3, [r0, #2]
    5226:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5228:	sub	sp, #8
    522a:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    522c:	blt.n	5262 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    522e:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5230:	add.w	r0, r5, #36	; 0x24
    5234:	bl	5f50 <FatCache::sync()>
    5238:	cbnz	r0, 5248 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    523a:	ldrb	r3, [r4, #1]
    523c:	orr.w	r3, r3, #1
    5240:	strb	r3, [r4, #1]
  return false;
    5242:	movs	r0, #0
}
    5244:	add	sp, #8
    5246:	pop	{r4, r5, r6, pc}
    5248:	add.w	r0, r5, #560	; 0x230
    524c:	bl	5f50 <FatCache::sync()>
    5250:	cmp	r0, #0
    5252:	beq.n	523a <FatFile::sync() [clone .part.40]+0x1a>
    5254:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5256:	ldr	r3, [r0, #0]
    5258:	ldr	r3, [r3, #20]
    525a:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    525c:	cmp	r0, #0
    525e:	beq.n	523a <FatFile::sync() [clone .part.40]+0x1a>
    5260:	b.n	5244 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5262:	movs	r1, #1
    5264:	bl	5200 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5268:	mov	r5, r0
    526a:	cmp	r0, #0
    526c:	beq.n	523a <FatFile::sync() [clone .part.40]+0x1a>
    526e:	ldrb	r3, [r0, #0]
    5270:	cmp	r3, #229	; 0xe5
    5272:	beq.n	523a <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5274:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5276:	ldr	r2, [pc, #56]	; (52b0 <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5278:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    527a:	itt	mi
    527c:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    527e:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5280:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5282:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5284:	strh	r3, [r0, #26]
    5286:	lsrs	r3, r3, #16
    5288:	strh	r3, [r0, #20]
    528a:	cbz	r6, 52a6 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    528c:	add.w	r2, sp, #3
    5290:	add.w	r1, sp, #6
    5294:	add	r0, sp, #4
    5296:	blx	r6
      setLe16(dir->modifyDate, date);
    5298:	ldrh.w	r3, [sp, #4]
    529c:	ldrh.w	r2, [sp, #6]
    52a0:	strh	r3, [r5, #24]
    52a2:	strh	r3, [r5, #18]
    52a4:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    52a6:	ldrb	r3, [r4, #2]
    52a8:	and.w	r3, r3, #127	; 0x7f
    52ac:	strb	r3, [r4, #2]
    52ae:	b.n	522e <FatFile::sync() [clone .part.40]+0xe>
    52b0:	.word	0x20019cf4

000052b4 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    52b4:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    52b6:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    52b8:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    52ba:	cbnz	r3, 52c6 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    52bc:	movs	r3, #0
    52be:	strb	r3, [r4, #0]
  m_flags = 0;
    52c0:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    52c2:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    52c4:	pop	{r4, pc}
    52c6:	bl	5220 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    52ca:	movs	r3, #0
    52cc:	strb	r3, [r4, #0]
  m_flags = 0;
    52ce:	strb	r3, [r4, #2]
  return rtn;
}
    52d0:	pop	{r4, pc}
    52d2:	nop

000052d4 <FatFile::preAllocate(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    52d4:	cbnz	r1, 52da <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    52d6:	movs	r0, #0
}
    52d8:	bx	lr
  close();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    52da:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    52dc:	ldrb	r3, [r0, #2]
    52de:	lsls	r3, r3, #30
    52e0:	bmi.n	52e6 <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    52e2:	movs	r0, #0
    52e4:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    52e6:	ldr	r3, [r0, #32]
    52e8:	cmp	r3, #0
    52ea:	bne.n	52e2 <FatFile::preAllocate(unsigned long)+0xe>
    52ec:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    52ee:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    52f0:	ldrb	r3, [r0, #6]
    52f2:	adds	r3, #9
    52f4:	mov	r5, r1
    52f6:	uxtb	r3, r3
    52f8:	subs	r1, #1
    52fa:	lsrs	r1, r3
    52fc:	adds	r1, #1
    52fe:	add.w	r2, r4, #32
    5302:	bl	60c8 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    5306:	cmp	r0, #0
    5308:	beq.n	52e2 <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    530a:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    530c:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    530e:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5310:	orn	r3, r3, #31
    5314:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5316:	cbnz	r2, 531a <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    5318:	pop	{r3, r4, r5, pc}
    531a:	mov	r0, r4
    531c:	ldmia.w	sp!, {r3, r4, r5, lr}
    5320:	b.w	5220 <FatFile::sync() [clone .part.40]>

00005324 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    5324:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    5328:	ldrb	r5, [r1, #0]
    532a:	tst.w	r5, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    532e:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    5330:	bne.n	533a <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    5332:	movs	r0, #0
    5334:	add	sp, #36	; 0x24
    5336:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    533a:	movw	r3, #2562	; 0xa02
    533e:	mov	r4, r0
    5340:	mov	r5, r1
    5342:	bl	6918 <FatFile::open(FatFile*, fname_t*, int)>
    5346:	cmp	r0, #0
    5348:	beq.n	5332 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    534a:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    534c:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    534e:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5350:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5352:	mov	r0, r4
    5354:	bl	516c <FatFile::addDirCluster()>
    5358:	cmp	r0, #0
    535a:	beq.n	5332 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    535c:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    535e:	ldr	r2, [r4, #16]
    5360:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5362:	cmp	r3, #0
    5364:	bne.n	5452 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5366:	movs	r1, #1
    5368:	mov	r0, r4
    536a:	bl	5200 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    536e:	mov	r6, r0
    5370:	cmp	r0, #0
    5372:	beq.n	5332 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    5374:	movs	r3, #16
    5376:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5378:	ldr	r2, [r0, #8]
    537a:	ldr	r1, [r6, #4]
    537c:	ldr	r3, [r6, #12]
    537e:	ldr	r0, [r0, #0]
    5380:	ldrh.w	r8, [r6, #20]
    5384:	ldrh.w	r9, [r6, #26]
    5388:	mov	r7, sp
    538a:	stmia	r7!, {r0, r1, r2, r3}
    538c:	ldr	r1, [r6, #20]
    538e:	ldr	r2, [r6, #24]
    5390:	ldr	r3, [r6, #28]
    5392:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    5394:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5396:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    5398:	movs	r3, #46	; 0x2e
    539a:	strb.w	r3, [r6, #-32]!
    539e:	add.w	r1, sp, #10
    53a2:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    53a4:	movs	r2, #32
    53a6:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    53aa:	cmp	r1, r3
    53ac:	bne.n	53a6 <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    53ae:	ldr	r1, [r4, #32]
    53b0:	ldr	r0, [r4, #8]
    53b2:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    53b6:	ldr	r3, [r4, #8]
    53b8:	mov	r1, r0
    53ba:	movs	r2, #1
    53bc:	add.w	r0, r3, #36	; 0x24
    53c0:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    53c4:	mov	lr, r0
    53c6:	cmp	r0, #0
    53c8:	beq.n	5332 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    53ca:	mov	r7, r6
    53cc:	strh.w	r8, [sp, #20]
    53d0:	strh.w	r9, [sp, #26]
    53d4:	ldmia	r7!, {r0, r1, r2, r3}
    53d6:	str.w	r0, [lr]
    53da:	str.w	r1, [lr, #4]
    53de:	str.w	r2, [lr, #8]
    53e2:	str.w	r3, [lr, #12]
    53e6:	ldmia	r7!, {r0, r1, r2, r3}
    53e8:	str.w	r0, [lr, #16]
    53ec:	str.w	r1, [lr, #20]
    53f0:	str.w	r2, [lr, #24]
    53f4:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    53f8:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    53fa:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    53fe:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5400:	lsrs	r3, r3, #16
    5402:	mov	r5, r6
    5404:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    5408:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    540c:	ldmia	r5!, {r0, r1, r2, r3}
    540e:	add.w	r6, lr, #32
    5412:	str.w	r0, [lr, #32]
    5416:	str	r1, [r6, #4]
    5418:	str	r2, [r6, #8]
    541a:	str	r3, [r6, #12]
    541c:	ldmia	r5!, {r0, r1, r2, r3}
    541e:	str	r0, [r6, #16]
    5420:	str	r1, [r6, #20]
    5422:	str	r2, [r6, #24]
    5424:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    5426:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5428:	add.w	r0, r4, #36	; 0x24
    542c:	bl	5f50 <FatCache::sync()>
    5430:	cmp	r0, #0
    5432:	beq.w	5332 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    5436:	add.w	r0, r4, #560	; 0x230
    543a:	bl	5f50 <FatCache::sync()>
    543e:	cmp	r0, #0
    5440:	beq.w	5332 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    5444:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5446:	ldr	r3, [r0, #0]
    5448:	ldr	r3, [r3, #20]

fail:
  return false;
}
    544a:	add	sp, #36	; 0x24
    544c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5450:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5452:	ldr	r3, [r4, #20]
    5454:	cbz	r3, 5464 <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5456:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5458:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    545a:	bic.w	r3, r3, #32
    545e:	strb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5460:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5462:	str	r2, [r4, #20]
    5464:	mov	r0, r4
    5466:	bl	5220 <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    546a:	cmp	r0, #0
    546c:	beq.w	5332 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    5470:	b.n	5366 <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    5472:	nop

00005474 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5474:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5478:	mov	r6, r0
    547a:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    547c:	ldrb	r5, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    547e:	str	r2, [sp, #4]
    5480:	movs	r0, #0
    5482:	strb.w	r0, [sp, #36]	; 0x24
    5486:	strb.w	r0, [sp, #37]	; 0x25
    548a:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    548e:	cbnz	r5, 549c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    5490:	mov	r8, r3
    5492:	ldrb	r3, [r1, #0]
    5494:	tst.w	r3, #112	; 0x70
    5498:	mov	r4, r1
    549a:	bne.n	54a4 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    549c:	movs	r0, #0
}
    549e:	add	sp, #72	; 0x48
    54a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    54a4:	ldrb	r3, [r2, #0]
    54a6:	cmp	r3, #47	; 0x2f
    54a8:	mov	r0, r2
    54aa:	beq.n	5502 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    54ac:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    54ae:	add	r2, sp, #4
    54b0:	add	r1, sp, #12
    54b2:	bl	64ec <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    54b6:	add	r2, sp, #12
    54b8:	mov	r1, r4
    54ba:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    54bc:	cmp	r0, #0
    54be:	beq.n	549c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    54c0:	ldr	r5, [sp, #4]
    54c2:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    54c4:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    54c6:	cmp	r5, #0
    54c8:	beq.n	5526 <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    54ca:	bl	6918 <FatFile::open(FatFile*, fname_t*, int)>
    54ce:	cbnz	r0, 54e4 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    54d0:	cmp.w	r8, #0
    54d4:	beq.n	549c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    54d6:	mov	r1, r4
    54d8:	add	r2, sp, #12
    54da:	mov	r0, r6
    54dc:	bl	5324 <FatFile::mkdir(FatFile*, fname_t*)>
    54e0:	cmp	r0, #0
    54e2:	beq.n	549c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    54e4:	mov	r5, r6
    54e6:	ldmia	r5!, {r0, r1, r2, r3}
    54e8:	add	r4, sp, #36	; 0x24
    54ea:	stmia	r4!, {r0, r1, r2, r3}
    54ec:	ldmia	r5!, {r0, r1, r2, r3}
    54ee:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    54f0:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    54f2:	ldr	r2, [r5, #0]
    54f4:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    54f6:	cbnz	r3, 551e <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    54f8:	strb	r7, [r6, #0]
  m_flags = 0;
    54fa:	strb	r7, [r6, #2]
    54fc:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    54fe:	add	r4, sp, #36	; 0x24
    5500:	b.n	54ae <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5502:	adds	r0, #1
    5504:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5506:	ldrb	r3, [r0, #0]
    5508:	cmp	r3, #47	; 0x2f
    550a:	beq.n	5502 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    550c:	ldr	r1, [r4, #8]
    550e:	add	r0, sp, #36	; 0x24
    5510:	bl	5104 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    5514:	cmp	r0, #0
    5516:	beq.n	549c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    5518:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    551a:	add	r4, sp, #36	; 0x24
    551c:	b.n	54ac <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    551e:	mov	r0, r6
    5520:	bl	5220 <FatFile::sync() [clone .part.40]>
    5524:	b.n	54f8 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    5526:	add	r2, sp, #12
    5528:	mov	r1, r4
    552a:	mov	r0, r6
    552c:	bl	5324 <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    5530:	add	sp, #72	; 0x48
    5532:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5536:	nop

00005538 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5538:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    553c:	mov	r6, r0
    553e:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5540:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5542:	str	r2, [sp, #4]
    5544:	movs	r0, #0
    5546:	strb.w	r0, [sp, #36]	; 0x24
    554a:	strb.w	r0, [sp, #37]	; 0x25
    554e:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5552:	cbnz	r5, 5560 <FatFile::open(FatFile*, char const*, int)+0x28>
    5554:	mov	r8, r3
    5556:	ldrb	r3, [r1, #0]
    5558:	tst.w	r3, #112	; 0x70
    555c:	mov	r4, r1
    555e:	bne.n	5568 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5560:	movs	r0, #0
}
    5562:	add	sp, #72	; 0x48
    5564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5568:	ldrb	r3, [r2, #0]
    556a:	cmp	r3, #47	; 0x2f
    556c:	mov	r0, r2
    556e:	beq.n	55bc <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5570:	movs	r7, #0
    5572:	b.n	557c <FatFile::open(FatFile*, char const*, int)+0x44>
    5574:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5576:	strb	r7, [r6, #0]
  m_flags = 0;
    5578:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    557a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    557c:	add	r2, sp, #4
    557e:	add	r1, sp, #12
    5580:	bl	64ec <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5584:	add	r2, sp, #12
    5586:	mov	r1, r4
    5588:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    558a:	cmp	r0, #0
    558c:	beq.n	5560 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    558e:	ldr	r5, [sp, #4]
    5590:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5592:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5594:	cbz	r5, 55da <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5596:	bl	6918 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    559a:	mov	r5, r6
    559c:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    559e:	cmp	r0, #0
    55a0:	beq.n	5560 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    55a2:	ldmia	r5!, {r0, r1, r2, r3}
    55a4:	stmia	r4!, {r0, r1, r2, r3}
    55a6:	ldmia	r5!, {r0, r1, r2, r3}
    55a8:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    55aa:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    55ac:	ldr	r2, [r5, #0]
    55ae:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    55b0:	cmp	r3, #0
    55b2:	beq.n	5574 <FatFile::open(FatFile*, char const*, int)+0x3c>
    55b4:	mov	r0, r6
    55b6:	bl	5220 <FatFile::sync() [clone .part.40]>
    55ba:	b.n	5574 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    55bc:	adds	r0, #1
    55be:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    55c0:	ldrb	r3, [r0, #0]
    55c2:	cmp	r3, #47	; 0x2f
    55c4:	beq.n	55bc <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    55c6:	cbz	r3, 55ec <FatFile::open(FatFile*, char const*, int)+0xb4>
    55c8:	ldr	r1, [r4, #8]
    55ca:	add	r0, sp, #36	; 0x24
    55cc:	bl	5104 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    55d0:	cmp	r0, #0
    55d2:	beq.n	5560 <FatFile::open(FatFile*, char const*, int)+0x28>
    55d4:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    55d6:	add	r4, sp, #36	; 0x24
    55d8:	b.n	5570 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    55da:	mov	r3, r8
    55dc:	add	r2, sp, #12
    55de:	mov	r1, r4
    55e0:	mov	r0, r6
    55e2:	bl	6918 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    55e6:	add	sp, #72	; 0x48
    55e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55ec:	ldr	r1, [r4, #8]
    55ee:	mov	r0, r6
    55f0:	bl	5104 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    55f4:	b.n	5562 <FatFile::open(FatFile*, char const*, int)+0x2a>
    55f6:	nop

000055f8 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    55f8:	cbz	r1, 5602 <FatFile::open(FatVolume*, char const*, int)+0xa>
    55fa:	addw	r1, r1, #1084	; 0x43c
    55fe:	b.w	5538 <FatFile::open(FatFile*, char const*, int)>
}
    5602:	mov	r0, r1
    5604:	bx	lr
    5606:	nop

00005608 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    5608:	ldrb	r3, [r0, #0]
    560a:	cbz	r3, 5610 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    560c:	movs	r0, #0
    560e:	bx	lr
    5610:	b.w	5104 <FatFile::openRoot(FatVolume*) [clone .part.36]>

00005614 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5614:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5618:	ldrb	r3, [r0, #2]
    561a:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    561c:	sub	sp, #12
    561e:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5620:	bpl.w	5742 <FatFile::read(void*, unsigned int)+0x12e>
    5624:	mov	r7, r1
    5626:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5628:	lsls	r6, r1, #28
    562a:	mov	r9, r2
    562c:	bmi.w	5754 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5630:	lsls	r4, r1, #26
    5632:	bpl.n	5646 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5634:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5636:	ldr	r3, [r0, #20]
    5638:	ldrh	r2, [r2, #8]
    563a:	rsb	r3, r3, r2, lsl #5
    563e:	uxth	r3, r3
    5640:	cmp	r9, r3
    5642:	it	cs
    5644:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5646:	cmp.w	r9, #0
    564a:	beq.w	57a0 <FatFile::read(void*, unsigned int)+0x18c>
    564e:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5650:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5652:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5654:	mov	r6, r9
    5656:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    565a:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    565e:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5662:	bpl.n	56e2 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5664:	ldr	r1, [r2, #32]
    5666:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    566a:	cmp.w	fp, #0
    566e:	bne.n	5716 <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5670:	cmp.w	r6, #512	; 0x200
    5674:	bcc.n	5716 <FatFile::read(void*, unsigned int)+0x102>
    5676:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    5678:	cmp	r1, r3
    567a:	beq.n	5716 <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    567c:	cmp.w	r6, #1024	; 0x400
    5680:	bcc.n	5766 <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5682:	ldrb	r0, [r5, #0]
    5684:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5686:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    568a:	bmi.n	5698 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    568c:	ldrb	r0, [r2, #4]
    568e:	rsb	r0, r8, r0
    5692:	cmp	fp, r0
    5694:	it	cs
    5696:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5698:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    569a:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    569e:	bhi.n	56b8 <FatFile::read(void*, unsigned int)+0xa4>
    56a0:	add	r3, fp
    56a2:	cmp	r1, r3
    56a4:	bcs.n	56b8 <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    56a6:	add.w	r0, r2, #36	; 0x24
    56aa:	str	r1, [sp, #4]
    56ac:	bl	5f50 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    56b0:	cmp	r0, #0
    56b2:	beq.n	5742 <FatFile::read(void*, unsigned int)+0x12e>
    56b4:	ldr	r2, [r5, #8]
    56b6:	ldr	r1, [sp, #4]
    56b8:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    56ba:	ldr	r2, [r0, #0]
    56bc:	mov	r3, fp
    56be:	ldr.w	fp, [r2, #12]
    56c2:	mov	r2, r7
    56c4:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    56c6:	cmp	r0, #0
    56c8:	beq.n	5742 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    56ca:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    56cc:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    56ce:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    56d0:	add	r7, r4
    m_curPosition += n;
    56d2:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    56d4:	beq.n	57a0 <FatFile::read(void*, unsigned int)+0x18c>
    56d6:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    56d8:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    56da:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    56dc:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    56e0:	bmi.n	5664 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    56e2:	ldrb.w	r8, [r2, #5]
    56e6:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    56ea:	cmp.w	fp, #0
    56ee:	bne.n	5762 <FatFile::read(void*, unsigned int)+0x14e>
    56f0:	cmp.w	r8, #0
    56f4:	bne.n	5762 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    56f6:	cmp	r3, #0
    56f8:	bne.n	577a <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    56fa:	lsls	r1, r1, #25
    56fc:	ite	mi
    56fe:	ldrmi	r1, [r2, #32]
    5700:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5702:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5704:	mov	r0, r2
    5706:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
    570a:	ldr	r2, [r5, #8]
    570c:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5710:	cmp.w	fp, #0
    5714:	beq.n	5670 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5716:	add.w	r0, r2, #36	; 0x24
    571a:	movs	r2, #0
    571c:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    5720:	cbz	r0, 5742 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5722:	rsb	r4, fp, #512	; 0x200
    5726:	cmp	r4, r6
    5728:	it	cs
    572a:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    572c:	add.w	r1, r0, fp
    5730:	mov	r2, r4
    5732:	mov	r0, r7
    5734:	bl	8774 <memcpy>
    5738:	b.n	56ca <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    573a:	ldrb	r3, [r5, #0]
    573c:	tst.w	r3, #112	; 0x70
    5740:	bne.n	57a2 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5742:	ldrb	r3, [r5, #1]
  return -1;
    5744:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5748:	orr.w	r3, r3, #2
    574c:	strb	r3, [r5, #1]
  return -1;
}
    574e:	add	sp, #12
    5750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5754:	ldr	r3, [r0, #28]
    5756:	ldr	r2, [r0, #20]
    5758:	subs	r3, r3, r2
    575a:	cmp	r9, r3
    575c:	it	cs
    575e:	movcs	r9, r3
    5760:	b.n	5646 <FatFile::read(void*, unsigned int)+0x32>
    5762:	ldr	r1, [r5, #16]
    5764:	b.n	5704 <FatFile::read(void*, unsigned int)+0xf0>
    5766:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5768:	ldr	r3, [r0, #0]
    576a:	mov	r2, r7
    576c:	ldr	r3, [r3, #8]
    576e:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    5770:	cmp	r0, #0
    5772:	beq.n	5742 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5774:	mov.w	r4, #512	; 0x200
    5778:	b.n	56ca <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    577a:	lsls	r3, r1, #28
    577c:	bpl.n	578a <FatFile::read(void*, unsigned int)+0x176>
    577e:	ldrb	r3, [r5, #2]
    5780:	lsls	r4, r3, #25
    5782:	bpl.n	578a <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    5784:	ldr	r1, [r5, #16]
    5786:	adds	r1, #1
    5788:	b.n	5702 <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    578a:	mov	r0, r2
    578c:	ldr	r1, [r5, #16]
    578e:	mov	r2, sl
    5790:	bl	5f6c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5794:	cmp	r0, #0
    5796:	blt.n	5742 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5798:	beq.n	573a <FatFile::read(void*, unsigned int)+0x126>
    579a:	ldr	r2, [r5, #8]
    579c:	ldr	r1, [r5, #16]
    579e:	b.n	5704 <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    57a0:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    57a2:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    57a6:	add	sp, #12
    57a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000057ac <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    57ac:	push	{r4, r5, r6, lr}
    57ae:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    57b0:	movs	r2, #1
    57b2:	add.w	r1, sp, #7
    57b6:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    57b8:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    57ba:	ldr	r5, [r0, #16]
    57bc:	bl	5614 <FatFile::read(void*, unsigned int)>
    57c0:	cmp	r0, #1
    57c2:	it	eq
    57c4:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    57c8:	str	r6, [r4, #20]
    57ca:	it	ne
    57cc:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    57d0:	str	r5, [r4, #16]
  return c;
}
    57d2:	add	sp, #8
    57d4:	pop	{r4, r5, r6, pc}
    57d6:	nop

000057d8 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    57d8:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    57da:	ldr	r3, [r0, #20]
    57dc:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    57e0:	sub	sp, #12
    57e2:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    57e4:	cbz	r5, 57e8 <FatFile::readDirCache(bool)+0x10>
    57e6:	cbnz	r1, 580c <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    57e8:	movs	r2, #1
    57ea:	add.w	r1, sp, #7
    57ee:	mov	r0, r4
    57f0:	bl	5614 <FatFile::read(void*, unsigned int)>
    57f4:	sxtb	r0, r0
    if  (n != 1) {
    57f6:	cmp	r0, #1
    57f8:	bne.n	5812 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    57fa:	ldr	r3, [r4, #20]
    57fc:	adds	r3, #31
    57fe:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5800:	ldr	r0, [r4, #8]
    5802:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5804:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    5808:	add	sp, #12
    580a:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    580c:	adds	r3, #32
    580e:	str	r3, [r0, #20]
    5810:	b.n	5800 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    5812:	movs	r0, #0
}
    5814:	add	sp, #12
    5816:	pop	{r4, r5, pc}

00005818 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5818:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    581c:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    581e:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5820:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5822:	tst.w	r5, #24
    5826:	strb.w	r4, [sp, #32]
    582a:	strb.w	r4, [sp, #33]	; 0x21
    582e:	strb.w	r4, [sp, #34]	; 0x22
    5832:	strb.w	r4, [sp, #68]	; 0x44
    5836:	strb.w	r4, [sp, #69]	; 0x45
    583a:	strb.w	r4, [sp, #70]	; 0x46
    583e:	beq.n	584a <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    5840:	ldr	r6, [r0, #8]
    5842:	ldr	r5, [r1, #8]
    5844:	cmp	r6, r5
    5846:	mov	r3, r0
    5848:	beq.n	5852 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    584a:	movs	r0, #0
}
    584c:	add	sp, #104	; 0x68
    584e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5852:	mov	r5, r3
    5854:	mov	r8, r2
    5856:	mov	r6, r1
    5858:	bl	5220 <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    585c:	mov	lr, r5
    585e:	ldmia.w	lr!, {r0, r1, r2, r3}
    5862:	add	r7, sp, #68	; 0x44
    5864:	stmia	r7!, {r0, r1, r2, r3}
    5866:	ldmia.w	lr!, {r0, r1, r2, r3}
    586a:	stmia	r7!, {r0, r1, r2, r3}
    586c:	ldr.w	r3, [lr]
    5870:	str	r3, [r7, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    5872:	mov	r1, r4
    5874:	mov	r0, r5
    5876:	bl	5200 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    587a:	mov	lr, r0
    587c:	cmp	r0, #0
    587e:	beq.n	584a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5880:	ldr.w	r1, [lr, #4]
    5884:	ldr.w	r2, [lr, #8]
    5888:	ldr.w	r3, [lr, #12]
    588c:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    588e:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5892:	mov	r7, sp
    5894:	stmia	r7!, {r0, r1, r2, r3}
    5896:	ldr.w	r1, [lr, #20]
    589a:	ldr.w	r2, [lr, #24]
    589e:	ldr.w	r3, [lr, #28]
    58a2:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    58a6:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    58aa:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    58ac:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    58b0:	mov	r2, r8
    58b2:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    58b4:	cmp.w	lr, #0
    58b8:	beq.w	59de <FatFile::rename(FatFile*, char const*)+0x1c6>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    58bc:	movw	r3, #2561	; 0xa01
    58c0:	add	r0, sp, #32
    58c2:	bl	5538 <FatFile::open(FatFile*, char const*, int)>
    58c6:	cmp	r0, #0
    58c8:	beq.n	584a <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    58ca:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    58cc:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    58d0:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    58d4:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    58d6:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    58d8:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    58da:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    58dc:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    58de:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    58e0:	movs	r1, #1
    58e2:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    58e4:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    58e8:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    58ec:	bl	5200 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    58f0:	cmp	r0, #0
    58f2:	beq.n	584a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    58f4:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    58f6:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    58fa:	ldr.w	r7, [r3, #-91]!
    58fe:	str.w	r7, [r0, #13]
    5902:	ldr	r7, [r3, #4]
    5904:	str.w	r7, [r0, #17]
    5908:	ldr	r7, [r3, #8]
    590a:	str.w	r7, [r0, #21]
    590e:	ldr	r7, [r3, #12]
    5910:	str.w	r7, [r0, #25]
    5914:	ldrh	r7, [r3, #16]
    5916:	ldrb	r3, [r3, #18]
    5918:	strh.w	r7, [r0, #29]
    591c:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    591e:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    5920:	cmp	r4, #0
    5922:	beq.n	599a <FatFile::rename(FatFile*, char const*)+0x182>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    5924:	mov	r1, r4
    5926:	ldr	r0, [r5, #8]
    5928:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    592c:	ldr	r3, [r5, #8]
    592e:	mov	r1, r0
    5930:	mov	r2, r6
    5932:	add.w	r0, r3, #36	; 0x24
    5936:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    593a:	cmp	r0, #0
    593c:	beq.n	584a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    593e:	mov	r6, r0
    5940:	mov	r7, sp
    5942:	ldr.w	r0, [r6, #32]!
    5946:	ldr	r1, [r6, #4]
    5948:	ldr	r2, [r6, #8]
    594a:	ldr	r3, [r6, #12]
    594c:	stmia	r7!, {r0, r1, r2, r3}
    594e:	ldr	r0, [r6, #16]
    5950:	ldr	r1, [r6, #20]
    5952:	ldr	r2, [r6, #24]
    5954:	ldr	r3, [r6, #28]
    5956:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    5958:	mov	r1, r4
    595a:	ldr	r0, [r5, #8]
    595c:	bl	6170 <FatPartition::freeChain(unsigned long)>
    5960:	cmp	r0, #0
    5962:	beq.w	584a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    5966:	ldr	r1, [r5, #32]
    5968:	ldr	r0, [r5, #8]
    596a:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
    596e:	ldr	r3, [r5, #8]
    5970:	mov	r1, r0
    5972:	movs	r2, #1
    5974:	add.w	r0, r3, #36	; 0x24
    5978:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    597c:	mov	r7, r0
    597e:	cmp	r0, #0
    5980:	beq.w	584a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    5984:	mov	r4, sp
    5986:	ldmia	r4!, {r0, r1, r2, r3}
    5988:	str	r0, [r7, #32]
    598a:	str	r1, [r7, #36]	; 0x24
    598c:	str	r2, [r7, #40]	; 0x28
    598e:	str	r3, [r7, #44]	; 0x2c
    5990:	ldmia	r4!, {r0, r1, r2, r3}
    5992:	str	r0, [r7, #48]	; 0x30
    5994:	str	r1, [r7, #52]	; 0x34
    5996:	str	r2, [r7, #56]	; 0x38
    5998:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    599a:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    599c:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    599e:	movs	r3, #8
  if (!oldFile.remove()) {
    59a0:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    59a2:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    59a4:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    59a8:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    59ac:	bl	6738 <FatFile::remove()>
    59b0:	cmp	r0, #0
    59b2:	beq.w	584a <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    59b6:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    59b8:	add.w	r0, r4, #36	; 0x24
    59bc:	bl	5f50 <FatCache::sync()>
    59c0:	cmp	r0, #0
    59c2:	beq.w	584a <FatFile::rename(FatFile*, char const*)+0x32>
    59c6:	add.w	r0, r4, #560	; 0x230
    59ca:	bl	5f50 <FatCache::sync()>
    59ce:	cmp	r0, #0
    59d0:	beq.w	584a <FatFile::rename(FatFile*, char const*)+0x32>
    59d4:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    59d6:	ldr	r3, [r0, #0]
    59d8:	ldr	r3, [r3, #20]
    59da:	blx	r3
    59dc:	b.n	584c <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    59de:	add	r0, sp, #32
    59e0:	bl	5474 <FatFile::mkdir(FatFile*, char const*, bool)>
    59e4:	cmp	r0, #0
    59e6:	beq.w	584a <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    59ea:	ldr	r4, [sp, #64]	; 0x40
    59ec:	b.n	58ca <FatFile::rename(FatFile*, char const*)+0xb2>
    59ee:	nop

000059f0 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    59f0:	ldrb	r3, [r0, #0]
    59f2:	lsls	r2, r3, #27
    59f4:	bpl.n	5a2c <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    59f6:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    59f8:	push	{r4, lr}
    59fa:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    59fc:	cbz	r3, 5a0c <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    59fe:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5a00:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5a02:	bic.w	r3, r3, #32
    5a06:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5a08:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5a0a:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    5a0c:	movs	r1, #1
    5a0e:	mov	r0, r4
    5a10:	bl	57d8 <FatFile::readDirCache(bool)>
    if (!dir) {
    5a14:	cbz	r0, 5a30 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5a16:	ldrb	r3, [r0, #0]
    5a18:	cbz	r3, 5a36 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    5a1a:	cmp	r3, #229	; 0xe5
    5a1c:	beq.n	5a0c <FatFile::rmdir()+0x1c>
    5a1e:	cmp	r3, #46	; 0x2e
    5a20:	beq.n	5a0c <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    5a22:	ldrb	r3, [r0, #11]
    5a24:	lsls	r3, r3, #28
    5a26:	bmi.n	5a0c <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    5a28:	movs	r0, #0
    5a2a:	pop	{r4, pc}
    5a2c:	movs	r0, #0
    5a2e:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    5a30:	ldrb	r3, [r4, #1]
    5a32:	cmp	r3, #0
    5a34:	bne.n	5a28 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    5a36:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5a38:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    5a3a:	orr.w	r3, r3, #2
    5a3e:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5a40:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5a42:	mov	r0, r4

fail:
  return false;
}
    5a44:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5a48:	b.w	6738 <FatFile::remove()>

00005a4c <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5a4c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a50:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5a52:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5a54:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5a56:	cbz	r3, 5a86 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5a58:	ldr	r2, [r0, #20]
    5a5a:	cmp	r2, r1
    5a5c:	mov	r6, r1
    5a5e:	beq.n	5ad6 <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    5a60:	cbnz	r1, 5a74 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    5a62:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5a64:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5a66:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5a68:	bic.w	r3, r3, #32
    5a6c:	strb	r3, [r4, #2]
  return true;
    5a6e:	movs	r0, #1
    5a70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5a74:	lsls	r0, r3, #28
    5a76:	bmi.n	5a8e <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5a78:	lsls	r1, r3, #26
    5a7a:	bpl.n	5a94 <FatFile::seekSet(unsigned long)+0x48>
    5a7c:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5a7e:	ldrh	r3, [r3, #8]
    5a80:	cmp.w	r6, r3, lsl #5
    5a84:	bls.n	5a64 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    5a86:	str	r7, [r4, #16]
  return false;
    5a88:	movs	r0, #0
    5a8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    5a8e:	ldr	r1, [r4, #28]
    5a90:	cmp	r6, r1
    5a92:	bhi.n	5a86 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5a94:	ldr.w	lr, [r4, #8]
    5a98:	ldrb.w	r5, [lr, #6]
    5a9c:	adds	r5, #9
    5a9e:	uxtb	r1, r5
    5aa0:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5aa2:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5aa4:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5aa6:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5aa8:	cmp	r0, r5
    5aaa:	bhi.n	5aae <FatFile::seekSet(unsigned long)+0x62>
    5aac:	cbnz	r2, 5adc <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5aae:	lsls	r3, r3, #25
    5ab0:	ite	mi
    5ab2:	ldrmi.w	r3, [lr, #32]
    5ab6:	ldrpl	r3, [r4, #32]
    5ab8:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5aba:	add.w	r8, r4, #16
    5abe:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5ac0:	cmp	r5, #0
    5ac2:	beq.n	5a64 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5ac4:	ldr	r1, [r4, #16]
    5ac6:	ldr	r0, [r4, #8]
    5ac8:	bl	5f6c <FatPartition::fatGet(unsigned long, unsigned long*)>
    5acc:	cmp	r0, #0
    5ace:	add.w	r5, r5, #4294967295
    5ad2:	bgt.n	5abe <FatFile::seekSet(unsigned long)+0x72>
    5ad4:	b.n	5a86 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5ad6:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5ad8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5adc:	subs	r5, r5, r0
    5ade:	b.n	5aba <FatFile::seekSet(unsigned long)+0x6e>

00005ae0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5ae0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ae4:	mov	r5, r1
    5ae6:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5ae8:	movs	r1, #0
    5aea:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5aec:	mov	r4, r0
    5aee:	mov	r7, r3
    5af0:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5af4:	bl	beac <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5af8:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5afa:	ldr	r3, [r5, #32]
    5afc:	str	r3, [r4, #12]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5afe:	add.w	r2, r0, #48	; 0x30
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5b02:	and.w	r3, r8, #15
    5b06:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5b0a:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    5b0c:	strh.w	r8, [r4, #4]
    5b10:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5b12:	lsls	r5, r1, #28
    5b14:	bmi.n	5b3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5b16:	and.w	r1, r1, #23
    5b1a:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    5b1c:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5b1e:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5b20:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5b24:	it	eq
    5b26:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5b2a:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    5b2e:	it	eq
    5b30:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5b32:	cmp	r3, #1
    5b34:	beq.n	5b46 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    5b36:	cmp	r3, #2
    5b38:	beq.n	5b8e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    5b3a:	cbz	r3, 5b84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5b3c:	movs	r0, #0
    5b3e:	strb	r0, [r4, #0]
  m_flags = 0;
    5b40:	strb	r0, [r4, #2]
  return false;
    5b42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    5b46:	movs	r3, #2
    5b48:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5b4a:	ldrb	r1, [r4, #0]
    5b4c:	tst.w	r1, #17
    5b50:	bne.n	5b3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b52:	sxtb	r1, r3
    5b54:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    5b58:	and.w	r3, r7, #8
    5b5c:	orrs	r3, r1
    5b5e:	uxtb	r3, r3
    5b60:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5b62:	ldrh.w	lr, [r2, #20]
    5b66:	ldrh	r1, [r2, #26]
    5b68:	ldr	r6, [r0, #44]	; 0x2c
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    5b6a:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5b6c:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    5b70:	cbz	r5, 5b94 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5b72:	cbnz	r1, 5baa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5b74:	orn	r3, r3, #127	; 0x7f
    5b78:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5b7a:	lsls	r3, r7, #17
    5b7c:	bmi.n	5b9c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5b7e:	movs	r0, #1
    5b80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    5b84:	ands.w	r5, r7, #1024	; 0x400
    5b88:	bne.n	5b3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b8a:	movs	r1, #1
    5b8c:	b.n	5b58 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5b8e:	movs	r3, #3
    5b90:	strb	r3, [r4, #2]
      break;
    5b92:	b.n	5b4a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5b94:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5b96:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5b98:	str	r3, [r4, #28]
    5b9a:	b.n	5b7a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5b9c:	ldr	r1, [r4, #28]
    5b9e:	mov	r0, r4
    5ba0:	bl	5a4c <FatFile::seekSet(unsigned long)>
    5ba4:	cmp	r0, #0
    5ba6:	bne.n	5b7e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    5ba8:	b.n	5b3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5baa:	bl	6170 <FatPartition::freeChain(unsigned long)>
    5bae:	cmp	r0, #0
    5bb0:	beq.n	5b3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5bb2:	ldrb	r3, [r4, #2]
    5bb4:	b.n	5b74 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    5bb6:	nop

00005bb8 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5bb8:	ldrb	r3, [r0, #0]
    5bba:	cbnz	r3, 5bc4 <FatFile::openNext(FatFile*, int)+0xc>
    5bbc:	ldrb	r3, [r1, #0]
    5bbe:	tst.w	r3, #112	; 0x70
    5bc2:	bne.n	5bc8 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    5bc4:	movs	r0, #0
}
    5bc6:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5bc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bcc:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5bce:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5bd2:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5bd4:	bne.n	5c1a <FatFile::openNext(FatFile*, int)+0x62>
    5bd6:	mov	r9, r2
    5bd8:	mov	r5, r1
    5bda:	mov	r8, r0
    5bdc:	mov	sl, r7
    5bde:	b.n	5be4 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    5be0:	movs	r7, #0
    5be2:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    5be4:	movs	r1, #0
    5be6:	mov	r0, r5
    5be8:	bl	57d8 <FatFile::readDirCache(bool)>
    if (!dir) {
    5bec:	cbz	r0, 5c1a <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5bee:	ldrb	r3, [r0, #0]
    5bf0:	cbz	r3, 5c1a <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    5bf2:	cmp	r3, #46	; 0x2e
    5bf4:	beq.n	5be0 <FatFile::openNext(FatFile*, int)+0x28>
    5bf6:	cmp	r3, #229	; 0xe5
    5bf8:	beq.n	5be0 <FatFile::openNext(FatFile*, int)+0x28>
    5bfa:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    5bfc:	lsls	r1, r2, #28
    5bfe:	bpl.n	5c22 <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    5c00:	cmp	r2, #15
    5c02:	bne.n	5be0 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    5c04:	lsls	r2, r3, #25
    5c06:	bpl.n	5be2 <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    5c08:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    5c0c:	ldrb.w	sl, [r0, #13]
    5c10:	b.n	5be2 <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5c12:	bl	6398 <FatFile::lfnChecksum(unsigned char*)>
    5c16:	cmp	r0, sl
    5c18:	beq.n	5c26 <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    5c1a:	movs	r0, #0
}
    5c1c:	add	sp, #8
    5c1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5c22:	cmp	r7, #0
    5c24:	bne.n	5c12 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    5c26:	str	r7, [sp, #0]
    5c28:	mov	r3, r9
    5c2a:	ubfx	r2, r6, #5, #16
    5c2e:	mov	r1, r5
    5c30:	mov	r0, r8
    5c32:	bl	5ae0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    5c36:	b.n	5c1c <FatFile::openNext(FatFile*, int)+0x64>

00005c38 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c38:	ldrb	r3, [r0, #0]
    5c3a:	cbz	r3, 5c40 <FatFile::sync()+0x8>
    5c3c:	b.w	5220 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5c40:	movs	r0, #1
    5c42:	bx	lr

00005c44 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5c44:	ldrb	r3, [r0, #2]
    5c46:	lsls	r3, r3, #30
    5c48:	bpl.n	5c80 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5c4a:	ldr	r3, [r0, #32]
    5c4c:	cbz	r3, 5c7c <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5c4e:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5c50:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5c52:	sub	sp, #8
    5c54:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5c56:	cbnz	r1, 5c96 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    5c58:	str	r3, [sp, #4]
    m_firstCluster = 0;
    5c5a:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    5c5c:	mov	r1, r3
    5c5e:	ldr	r0, [r4, #8]
    5c60:	bl	6170 <FatPartition::freeChain(unsigned long)>
    5c64:	cbz	r0, 5c92 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c66:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c68:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    5c6a:	ldr	r1, [r4, #20]
    5c6c:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c6e:	orn	r3, r3, #127	; 0x7f
    5c72:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c74:	cbnz	r2, 5cb2 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5c76:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5c78:	add	sp, #8
    5c7a:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5c7c:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5c7e:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    5c80:	movs	r0, #0
}
    5c82:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5c84:	mvn.w	r2, #4026531840	; 0xf0000000
    5c88:	ldr	r1, [r4, #16]
    5c8a:	ldr	r0, [r4, #8]
    5c8c:	bl	5fdc <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    5c90:	cbnz	r0, 5caa <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    5c92:	movs	r0, #0
    5c94:	b.n	5c78 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    5c96:	add	r2, sp, #8
    5c98:	movs	r3, #0
    5c9a:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5c9e:	ldr	r0, [r0, #8]
    5ca0:	bl	5f6c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5ca4:	cmp	r0, #0
    5ca6:	blt.n	5c92 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    5ca8:	bne.n	5c84 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    5caa:	ldr	r3, [sp, #4]
    5cac:	cmp	r3, #0
    5cae:	beq.n	5c66 <FatFile::truncate()+0x22>
    5cb0:	b.n	5c5c <FatFile::truncate()+0x18>
    5cb2:	mov	r0, r4
    5cb4:	bl	5220 <FatFile::sync() [clone .part.40]>
    5cb8:	b.n	5c78 <FatFile::truncate()+0x34>
    5cba:	nop

00005cbc <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5cbc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cc0:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5cc2:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5cc4:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5cc6:	bmi.n	5cd8 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5cc8:	ldrb	r3, [r4, #1]
    5cca:	orr.w	r3, r3, #1
    5cce:	strb	r3, [r4, #1]
  return -1;
    5cd0:	mov.w	r0, #4294967295
    5cd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cd8:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5cda:	lsls	r2, r3, #28
    5cdc:	mov	r8, r1
    5cde:	bmi.w	5e60 <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5ce2:	ldr	r2, [r4, #20]
    5ce4:	mvns	r3, r2
    5ce6:	cmp	r9, r3
    5ce8:	bhi.n	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5cea:	cmp.w	r9, #0
    5cee:	beq.w	5e6e <FatFile::write(void const*, unsigned int)+0x1b2>
    5cf2:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5cf4:	mov.w	sl, #0
    5cf8:	b.n	5d5c <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5cfa:	cmp	r1, #0
    5cfc:	beq.n	5df2 <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5cfe:	ldrb	r3, [r4, #2]
    5d00:	lsls	r3, r3, #25
    5d02:	bpl.n	5e00 <FatFile::write(void const*, unsigned int)+0x144>
    5d04:	ldr	r3, [r4, #28]
    5d06:	cmp	r3, r2
    5d08:	bls.n	5e00 <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    5d0a:	adds	r1, #1
    5d0c:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5d0e:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5d12:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5d16:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5d18:	bcs.n	5d96 <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5d1a:	ldr	r2, [r4, #20]
    5d1c:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5d1e:	ldr	r0, [r4, #8]
    5d20:	cmp.w	r6, #512	; 0x200
    5d24:	mov	r5, r6
    5d26:	it	cs
    5d28:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5d2c:	cmp	r2, r3
    5d2e:	bcc.n	5e22 <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5d30:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5d32:	adds	r0, #36	; 0x24
    5d34:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    5d38:	cmp	r0, #0
    5d3a:	beq.n	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5d3c:	add	r0, r7
    5d3e:	mov	r2, r5
    5d40:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5d42:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5d44:	bl	8774 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5d48:	cmp.w	r7, #512	; 0x200
    5d4c:	beq.n	5e3e <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d4e:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5d50:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d52:	add	r2, r5
    src += n;
    5d54:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5d56:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5d58:	beq.w	5e6e <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5d5c:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5d5e:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5d60:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5d62:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    5d66:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5d6a:	bne.n	5d86 <FatFile::write(void const*, unsigned int)+0xca>
    5d6c:	cmp	r7, #0
    5d6e:	beq.n	5cfa <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5d70:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
    5d74:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5d76:	rsb	r5, r7, #512	; 0x200
    5d7a:	cmp	r5, r6
    5d7c:	it	cs
    5d7e:	movcs	r5, r6
    5d80:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    5d82:	movs	r2, #1
    5d84:	b.n	5d32 <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5d86:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    5d8a:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5d8c:	cmp	r7, #0
    5d8e:	bne.n	5d76 <FatFile::write(void const*, unsigned int)+0xba>
    5d90:	cmp.w	r6, #512	; 0x200
    5d94:	bcc.n	5d1a <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5d96:	cmp.w	r6, #1024	; 0x400
    5d9a:	ldr	r2, [r4, #8]
    5d9c:	bcc.n	5dd6 <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5d9e:	ldrb	r3, [r2, #4]
    5da0:	ldr	r7, [r2, #44]	; 0x2c
    5da2:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5da4:	lsrs	r0, r6, #9
    5da6:	cmp	r3, r0
    5da8:	it	cs
    5daa:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5dac:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5dae:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5db2:	bcc.n	5dc6 <FatFile::write(void const*, unsigned int)+0x10a>
    5db4:	add	r7, r3
    5db6:	cmp	r7, r1
    5db8:	bls.n	5dc6 <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5dba:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5dbe:	mov.w	r0, #4294967295
    5dc2:	str	r0, [r2, #44]	; 0x2c
    5dc4:	ldr	r2, [r4, #8]
    5dc6:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    5dc8:	ldr	r2, [r0, #0]
    5dca:	ldr	r7, [r2, #28]
    5dcc:	mov	r2, r8
    5dce:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    5dd0:	cmp	r0, #0
    5dd2:	bne.n	5d4e <FatFile::write(void const*, unsigned int)+0x92>
    5dd4:	b.n	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    5dd6:	ldr	r3, [r2, #44]	; 0x2c
    5dd8:	cmp	r3, r1
    5dda:	beq.n	5e30 <FatFile::write(void const*, unsigned int)+0x174>
    5ddc:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5dde:	ldr	r3, [r0, #0]
    5de0:	mov	r2, r8
    5de2:	ldr	r3, [r3, #24]
    5de4:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5de6:	cmp	r0, #0
    5de8:	beq.w	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5dec:	mov.w	r5, #512	; 0x200
    5df0:	b.n	5d4e <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5df2:	ldr	r1, [r4, #32]
    5df4:	cbz	r1, 5e4c <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5df6:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5df8:	bl	5f60 <FatPartition::clusterStartSector(unsigned long) const>
    5dfc:	mov	r1, r0
    5dfe:	b.n	5d90 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e00:	add.w	r2, r4, #16
    5e04:	bl	5f6c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5e08:	cmp	r0, #0
    5e0a:	blt.w	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    5e0e:	bne.n	5e1c <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    5e10:	mov	r0, r4
    5e12:	bl	5138 <FatFile::addCluster()>
    5e16:	cmp	r0, #0
    5e18:	beq.w	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
    5e1c:	ldr	r0, [r4, #8]
    5e1e:	ldr	r1, [r4, #16]
    5e20:	b.n	5df8 <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    5e22:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5e24:	tst.w	r3, #32
    5e28:	ite	eq
    5e2a:	moveq	r2, #1
    5e2c:	movne	r2, #5
    5e2e:	b.n	5d32 <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5e30:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5e34:	mov.w	r3, #4294967295
    5e38:	str	r3, [r2, #44]	; 0x2c
    5e3a:	ldr	r2, [r4, #8]
    5e3c:	b.n	5ddc <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5e3e:	ldr	r0, [r4, #8]
    5e40:	adds	r0, #36	; 0x24
    5e42:	bl	5f50 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    5e46:	cmp	r0, #0
    5e48:	bne.n	5d4e <FatFile::write(void const*, unsigned int)+0x92>
    5e4a:	b.n	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5e4c:	mov	r0, r4
    5e4e:	bl	5138 <FatFile::addCluster()>
    5e52:	cmp	r0, #0
    5e54:	beq.w	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5e58:	ldr	r1, [r4, #16]
    5e5a:	str	r1, [r4, #32]
    5e5c:	ldr	r0, [r4, #8]
    5e5e:	b.n	5df8 <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    5e60:	ldr	r1, [r0, #28]
    5e62:	bl	5a4c <FatFile::seekSet(unsigned long)>
    5e66:	cmp	r0, #0
    5e68:	beq.w	5cc8 <FatFile::write(void const*, unsigned int)+0xc>
    5e6c:	b.n	5ce2 <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5e6e:	ldr	r3, [r4, #28]
    5e70:	cmp	r3, r2
    5e72:	bcc.n	5e88 <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5e74:	ldr	r3, [pc, #40]	; (5ea0 <FatFile::write(void const*, unsigned int)+0x1e4>)
    5e76:	ldr	r3, [r3, #0]
    5e78:	cbz	r3, 5e98 <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e7a:	ldrb	r3, [r4, #2]
    5e7c:	orn	r3, r3, #127	; 0x7f
    5e80:	strb	r3, [r4, #2]
    5e82:	mov	r0, r9
    5e84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e88:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    5e8a:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e8c:	orn	r3, r3, #127	; 0x7f
    5e90:	strb	r3, [r4, #2]
    5e92:	mov	r0, r9
    5e94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e98:	mov	r0, r9
    5e9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e9e:	nop
    5ea0:	.word	0x20019cf4

00005ea4 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5ea4:	push	{r3, r4, r5, r6, r7, lr}
    5ea6:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5ea8:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5eaa:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5eae:	mov	r4, r0
    5eb0:	ldr	r0, [r3, #0]
    5eb2:	ldr	r3, [r0, #0]
    5eb4:	mov	r2, r6
    5eb6:	ldr	r3, [r3, #24]
    5eb8:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5eba:	cbz	r0, 5ece <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5ebc:	ldrb	r3, [r4, #0]
    5ebe:	lsls	r2, r3, #30
    5ec0:	mov	r5, r0
    5ec2:	bmi.n	5ed4 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5ec4:	bic.w	r3, r3, #1
    5ec8:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    5eca:	mov	r0, r5
    5ecc:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    5ece:	movs	r5, #0
}
    5ed0:	mov	r0, r5
    5ed2:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5ed4:	ldr	r3, [r4, #4]
    5ed6:	ldr	r1, [r4, #8]
    5ed8:	ldr	r0, [r3, #0]
    5eda:	ldr	r7, [r3, #16]
    5edc:	ldr	r3, [r0, #0]
    5ede:	mov	r2, r6
    5ee0:	add	r1, r7
    5ee2:	ldr	r3, [r3, #24]
    5ee4:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5ee6:	cmp	r0, #0
    5ee8:	beq.n	5ece <FatCache::sync() [clone .part.8]+0x2a>
    5eea:	ldrb	r3, [r4, #0]
    5eec:	b.n	5ec4 <FatCache::sync() [clone .part.8]+0x20>
    5eee:	nop

00005ef0 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5ef0:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    5ef2:	ldr	r3, [r0, #8]
    5ef4:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5ef6:	mov	r6, r0
    5ef8:	mov	r4, r2
  if (m_lbn != sector) {
    5efa:	beq.n	5f1c <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5efc:	ldrb	r3, [r0, #0]
    5efe:	lsls	r2, r3, #31
    5f00:	mov	r7, r1
    5f02:	bmi.n	5f2a <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    5f04:	lsls	r3, r4, #29
    5f06:	bpl.n	5f36 <FatCache::read(unsigned long, unsigned char)+0x46>
    5f08:	add.w	r5, r6, #12
    5f0c:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5f0e:	and.w	r4, r4, #3
    5f12:	orrs	r4, r3
    5f14:	strb	r4, [r6, #0]
    5f16:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5f18:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    5f1a:	pop	{r3, r4, r5, r6, r7, pc}
    5f1c:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5f20:	and.w	r4, r4, #3
    5f24:	orrs	r4, r3
    5f26:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    5f28:	pop	{r3, r4, r5, r6, r7, pc}
    5f2a:	bl	5ea4 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    5f2e:	cmp	r0, #0
    5f30:	bne.n	5f04 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    5f32:	movs	r0, #0
    5f34:	pop	{r3, r4, r5, r6, r7, pc}
    5f36:	ldr	r3, [r6, #4]
    5f38:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5f3a:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5f3c:	add.w	r5, r6, #12
    5f40:	ldr	r3, [r3, #8]
    5f42:	mov	r2, r5
    5f44:	mov	r1, r7
    5f46:	blx	r3
    5f48:	cmp	r0, #0
    5f4a:	bne.n	5f0c <FatCache::read(unsigned long, unsigned char)+0x1c>
    5f4c:	b.n	5f32 <FatCache::read(unsigned long, unsigned char)+0x42>
    5f4e:	nop

00005f50 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5f50:	ldrb	r3, [r0, #0]
    5f52:	lsls	r3, r3, #31
    5f54:	bmi.n	5f5a <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    5f56:	movs	r0, #1
    5f58:	bx	lr
    5f5a:	b.w	5ea4 <FatCache::sync() [clone .part.8]>
    5f5e:	nop

00005f60 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5f60:	ldrb	r3, [r0, #6]
    5f62:	ldr	r0, [r0, #20]
    5f64:	subs	r1, #2
    5f66:	lsls	r1, r3
}
    5f68:	add	r0, r1
    5f6a:	bx	lr

00005f6c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5f6c:	cmp	r1, #1
    5f6e:	bls.n	5fd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    5f70:	ldr	r3, [r0, #28]
    5f72:	cmp	r1, r3
    5f74:	bhi.n	5fd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5f76:	push	{r4, r5, r6, lr}
    5f78:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5f7a:	cmp	r3, #32
    5f7c:	mov	r6, r2
    5f7e:	mov	r5, r0
    5f80:	mov	r4, r1
    5f82:	beq.n	5fb6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5f84:	cmp	r3, #16
    5f86:	bne.n	5fb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    5f88:	ldr	r3, [r0, #24]
    5f8a:	ubfx	r1, r1, #8, #8
    5f8e:	add	r1, r3
    5f90:	movs	r2, #2
    5f92:	add.w	r0, r0, #560	; 0x230
    5f96:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5f9a:	cbz	r0, 5fb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5f9c:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5f9e:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5fa2:	ldr	r2, [r5, #28]
    5fa4:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    5fa6:	itte	ls
    5fa8:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    5faa:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    5fac:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    5fae:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    5fb0:	mov.w	r0, #4294967295
    5fb4:	pop	{r4, r5, r6, pc}
    5fb6:	ldr	r1, [r0, #24]
    5fb8:	movs	r2, #2
    5fba:	add.w	r1, r1, r4, lsr #7
    5fbe:	add.w	r0, r0, #560	; 0x230
    5fc2:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5fc6:	cmp	r0, #0
    5fc8:	beq.n	5fb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5fca:	and.w	r1, r4, #127	; 0x7f
    5fce:	ldr.w	r3, [r0, r1, lsl #2]
    5fd2:	b.n	5fa2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    5fd4:	mov.w	r0, #4294967295
}
    5fd8:	bx	lr
    5fda:	nop

00005fdc <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5fdc:	cmp	r1, #1
    5fde:	bls.n	601c <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5fe0:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5fe2:	ldr	r3, [r0, #28]
    5fe4:	cmp	r1, r3
    5fe6:	bhi.n	5ff6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    5fe8:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5fea:	cmp	r3, #32
    5fec:	mov	r5, r2
    5fee:	mov	r4, r1
    5ff0:	beq.n	6020 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5ff2:	cmp	r3, #16
    5ff4:	beq.n	5ffa <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5ff6:	movs	r0, #0
    5ff8:	pop	{r3, r4, r5, pc}
    5ffa:	ldr	r3, [r0, #24]
    5ffc:	ubfx	r1, r1, #8, #8
    6000:	add	r1, r3
    6002:	add.w	r0, r0, #560	; 0x230
    6006:	movs	r2, #3
    6008:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    600c:	mov	r3, r0
    600e:	cmp	r0, #0
    6010:	beq.n	5ff6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6012:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    6014:	movs	r0, #1
    6016:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    601a:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    601c:	movs	r0, #0
}
    601e:	bx	lr
    6020:	ldr	r1, [r0, #24]
    6022:	movs	r2, #3
    6024:	add.w	r0, r0, #560	; 0x230
    6028:	add.w	r1, r1, r4, lsr #7
    602c:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6030:	mov	r3, r0
    6032:	cmp	r0, #0
    6034:	beq.n	5ff6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6036:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    603a:	movs	r0, #1
    603c:	str.w	r5, [r3, r1, lsl #2]
    6040:	pop	{r3, r4, r5, pc}
    6042:	nop

00006044 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6044:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6048:	ldr	r4, [r0, #12]
    604a:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    604c:	sub	sp, #8
    604e:	mov	r5, r0
    6050:	mov	r7, r1
    6052:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6054:	itte	cc
    6056:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6058:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    605a:	movcs	r6, #1
    605c:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    605e:	adds	r4, #1
    if (find > m_lastCluster) {
    6060:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6062:	add	r2, sp, #4
    6064:	mov	r0, r5
    6066:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6068:	bls.n	607e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    606a:	cbnz	r6, 60bc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    606c:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    606e:	adds	r4, #1
    if (find > m_lastCluster) {
    6070:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    6072:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6076:	add	r2, sp, #4
    6078:	mov	r0, r5
    607a:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    607c:	bhi.n	606a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    607e:	cmp	r7, r4
    6080:	beq.n	60bc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6082:	bl	5f6c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6086:	cmp	r0, #0
    6088:	blt.n	60bc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    608a:	beq.n	605c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    608c:	ldr	r3, [sp, #4]
    608e:	cmp	r3, #0
    6090:	bne.n	605c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    6092:	cbz	r6, 6096 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    6094:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6096:	mvn.w	r2, #4026531840	; 0xf0000000
    609a:	mov	r1, r4
    609c:	mov	r0, r5
    609e:	bl	5fdc <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    60a2:	mov	r6, r0
    60a4:	cbz	r0, 60bc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    60a6:	cbnz	r7, 60ae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    60a8:	str.w	r4, [r8]
  return true;
    60ac:	b.n	60be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    60ae:	mov	r1, r7
    60b0:	mov	r0, r5
    60b2:	mov	r2, r4
    60b4:	bl	5fdc <FatPartition::fatPut(unsigned long, unsigned long)>
    60b8:	cmp	r0, #0
    60ba:	bne.n	60a8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    60bc:	movs	r6, #0
}
    60be:	mov	r0, r6
    60c0:	add	sp, #8
    60c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60c6:	nop

000060c8 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    60c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    60cc:	ldr	r4, [r0, #12]

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60ce:	ldr	r3, [r0, #28]
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    60d0:	adds	r7, r4, #1

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60d2:	cmp	r7, r3
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    60d4:	sub	sp, #8
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60d6:	bhi.n	6126 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    60d8:	mov	sl, r2
    60da:	mov	r9, r1
    60dc:	mov	r6, r0
    60de:	adds	r4, #2
    60e0:	mov.w	r8, #1
    60e4:	b.n	60fa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    60e6:	subs	r2, r4, r7
    60e8:	mov	r3, r4
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    60ea:	cbz	r0, 6110 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x48>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    60ec:	cmp	r2, r9
    60ee:	beq.n	6130 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x68>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    60f0:	ldr	r2, [r6, #28]
    60f2:	cmp	r3, r2
    60f4:	add.w	r4, r4, #1
    60f8:	bhi.n	6126 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    60fa:	subs	r5, r4, #1
      // Can't find space.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    60fc:	mov	r1, r5
    60fe:	add	r2, sp, #4
    6100:	mov	r0, r6
    6102:	bl	5f6c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6106:	cmp	r0, #0
    6108:	blt.n	6126 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    610a:	ldr	r3, [sp, #4]
    610c:	cmp	r3, #0
    610e:	beq.n	60e6 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6110:	ldr	r2, [r6, #28]
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    6112:	mov	r3, r4
      goto fail;
    }
    if (f || fg == 0) {
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    6114:	cmp	r7, r5
    6116:	it	ne
    6118:	movne.w	r8, #0
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    611c:	cmp	r3, r2
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    611e:	mov	r7, r4
    6120:	add.w	r4, r4, #1
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6124:	bls.n	60fa <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

fail:
  return false;
    6126:	movs	r4, #0
}
    6128:	mov	r0, r4
    612a:	add	sp, #8
    612c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      break;
    }
    endCluster++;
  }
  // Remember possible next free cluster.
  if (setStart) {
    6130:	cmp.w	r8, #0
    6134:	beq.n	6138 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x70>
    m_allocSearchStart = endCluster;
    6136:	str	r5, [r6, #12]
    6138:	mvn.w	r2, #4026531840	; 0xf0000000
    613c:	mov	r1, r5
    613e:	mov	r0, r6
    6140:	bl	5fdc <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    6144:	mov	r4, r0
    6146:	cmp	r0, #0
    6148:	beq.n	6126 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    614a:	cmp	r7, r5
    614c:	bcc.n	6154 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8c>
    614e:	b.n	616a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    6150:	cmp	r5, r7
    6152:	bls.n	616a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    if (!fatPut(endCluster - 1, endCluster)) {
    6154:	add.w	r8, r5, #4294967295
    6158:	mov	r2, r5
    615a:	mov	r1, r8
    615c:	mov	r0, r6
    615e:	bl	5fdc <FatPartition::fatPut(unsigned long, unsigned long)>
    6162:	mov	r5, r8
    6164:	cmp	r0, #0
    6166:	bne.n	6150 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x88>
    6168:	b.n	6126 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    616a:	str.w	r7, [sl]
  return true;
    616e:	b.n	6128 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x60>

00006170 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6170:	push	{r4, r5, r6, lr}
    6172:	mov	r5, r0
    6174:	sub	sp, #8
    6176:	mov	r4, r1
    6178:	b.n	6190 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    617a:	bl	5fdc <FatPartition::fatPut(unsigned long, unsigned long)>
    617e:	cbz	r0, 61a6 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6180:	ldr	r3, [r5, #12]
    6182:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    6184:	itt	cc
    6186:	addcc.w	r4, r4, #4294967295
    618a:	strcc	r4, [r5, #12]
    }
    cluster = next;
    618c:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    618e:	cbz	r6, 61a8 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    6190:	add	r2, sp, #4
    6192:	mov	r1, r4
    6194:	mov	r0, r5
    6196:	bl	5f6c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    619a:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    619c:	mov	r1, r4
    619e:	mov.w	r2, #0
    61a2:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    61a4:	bge.n	617a <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    61a6:	movs	r0, #0
}
    61a8:	add	sp, #8
    61aa:	pop	{r4, r5, r6, pc}

000061ac <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    61ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61b0:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    61b2:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    61b4:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    61b6:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    61ba:	beq.n	61c8 <FatPartition::freeClusterCount()+0x1c>
    61bc:	cmp	r3, #32
    61be:	beq.n	61c8 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    61c0:	mov.w	r0, #4294967295
    61c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    61c8:	ldr	r5, [r0, #24]
    while (todo) {
    61ca:	cmp.w	r8, #0
    61ce:	beq.n	624e <FatPartition::freeClusterCount()+0xa2>
    61d0:	mov	r6, r0
    61d2:	add.w	r7, r0, #560	; 0x230
    61d6:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    61d8:	mov	r1, r5
    61da:	movs	r2, #2
    61dc:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    61de:	adds	r5, #1
    61e0:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    61e4:	cmp	r0, #0
    61e6:	beq.n	61c0 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    61e8:	ldrb	r3, [r6, #7]
    61ea:	cmp	r3, #16
    61ec:	beq.n	621c <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    61ee:	cmp.w	r8, #127	; 0x7f
    61f2:	bhi.n	6246 <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    61f4:	uxth.w	r1, r8
    61f8:	mov	lr, r8
    61fa:	subs	r1, #1
    61fc:	uxth	r1, r1
    61fe:	add.w	r1, r0, r1, lsl #2
    6202:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    6204:	ldr.w	r2, [r3, #4]!
    6208:	cbnz	r2, 620c <FatPartition::freeClusterCount()+0x60>
            free++;
    620a:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    620c:	cmp	r3, r1
    620e:	bne.n	6204 <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6210:	subs.w	r8, r8, lr
    6214:	bne.n	61d8 <FatPartition::freeClusterCount()+0x2c>
    6216:	mov	r0, r4
    6218:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    621c:	cmp.w	r8, #255	; 0xff
    6220:	bls.n	6254 <FatPartition::freeClusterCount()+0xa8>
    6222:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6226:	mov	r3, lr
    6228:	subs	r1, r3, #1
    622a:	uxth	r1, r1
    622c:	add.w	r1, r0, r1, lsl #1
    6230:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    6232:	ldrh.w	r2, [r3, #2]!
    6236:	cbnz	r2, 623a <FatPartition::freeClusterCount()+0x8e>
            free++;
    6238:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    623a:	cmp	r1, r3
    623c:	bne.n	6232 <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    623e:	subs.w	r8, r8, lr
    6242:	bne.n	61d8 <FatPartition::freeClusterCount()+0x2c>
    6244:	b.n	6216 <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6246:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    624a:	mov	r1, lr
    624c:	b.n	61fa <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    624e:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    6250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    6254:	uxth.w	r3, r8
    6258:	mov	lr, r8
    625a:	b.n	6228 <FatPartition::freeClusterCount()+0x7c>

0000625c <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    625c:	push	{r3, r4, r5, r6, r7, lr}
    625e:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6260:	movs	r3, #0
  m_allocSearchStart = 1;
    6262:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    6264:	mov.w	r0, #4294967295
    6268:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    626a:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    626c:	str	r4, [r4, #40]	; 0x28
    626e:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6272:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6274:	strb.w	r3, [r4, #36]	; 0x24
    6278:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    627c:	str	r0, [r4, #44]	; 0x2c
    627e:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6282:	mov	r5, r2
    6284:	cbz	r2, 62be <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    6286:	cmp	r2, #4
    6288:	bls.n	628e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    628a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    628c:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    628e:	add.w	r6, r4, #36	; 0x24
    6292:	mov	r2, r3
    6294:	mov	r1, r3
    6296:	mov	r0, r6
    6298:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    629c:	add.w	r5, r5, #268435456	; 0x10000000
    62a0:	subs	r5, #1
    62a2:	lsls	r5, r5, #4
    62a4:	add.w	r3, r0, #446	; 0x1be
    62a8:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    62aa:	cmp	r0, #0
    62ac:	beq.n	628a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    62ae:	ldrb	r1, [r2, #4]
    62b0:	cmp	r1, #0
    62b2:	beq.n	628a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    62b4:	ldrb	r3, [r3, r5]
    62b6:	lsls	r3, r3, #25
    62b8:	bne.n	628a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    62ba:	ldr	r5, [r2, #8]
    62bc:	b.n	62c2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    62be:	add.w	r6, r4, #36	; 0x24
    62c2:	mov	r0, r6
    62c4:	movs	r2, #0
    62c6:	mov	r1, r5
    62c8:	bl	5ef0 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    62cc:	cmp	r0, #0
    62ce:	beq.n	628a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    62d0:	ldrb	r3, [r0, #16]
    62d2:	cmp	r3, #2
    62d4:	bne.n	628a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    62d6:	ldrh.w	r3, [r0, #11]
    62da:	cmp.w	r3, #512	; 0x200
    62de:	bne.n	628a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    62e0:	ldrb	r6, [r0, #13]
    62e2:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    62e4:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    62e6:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    62e8:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    62ea:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    62ec:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    62ee:	beq.n	6310 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    62f0:	movs	r2, #1
    62f2:	mov	r1, r2
    62f4:	b.n	62f8 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    62f6:	mov	r2, r3
    62f8:	lsls	r1, r1, #1
    62fa:	uxtb	r1, r1
    62fc:	adds	r3, r2, #1
    62fe:	cmp	r6, r1
    6300:	uxtb	r3, r3
    6302:	beq.n	630e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    6304:	cmp	r3, #9
    6306:	bne.n	62f6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    6308:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    630a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    630c:	pop	{r3, r4, r5, r6, r7, pc}
    630e:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6310:	ldrh	r1, [r0, #22]
    6312:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6314:	cbnz	r1, 631a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    6316:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6318:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    631a:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    631c:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6320:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6322:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6324:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6326:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    632a:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    632e:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6332:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6334:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6338:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    633a:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    633c:	cbnz	r1, 6340 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    633e:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6340:	subs	r5, r5, r3
    6342:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6344:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6348:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    634c:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    634e:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6350:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6352:	bls.n	636a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6354:	movw	r3, #65524	; 0xfff4
    6358:	cmp	r2, r3
    635a:	ittet	hi
    635c:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    635e:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    6360:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    6362:	movhi	r3, #32
    6364:	strb	r3, [r4, #7]
  }
  return true;
    6366:	movs	r0, #1
    6368:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    636a:	movs	r3, #12
    636c:	strb	r3, [r4, #7]
    636e:	b.n	628a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>

00006370 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    6370:	cmp	r1, #4
    6372:	bls.n	638e <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6374:	cmp	r1, #10
    6376:	bls.n	6386 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    6378:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    637a:	itte	ls
    637c:	addls.w	r1, r0, r1, lsl #1
    6380:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    6382:	movhi	r0, #0
}
    6384:	bx	lr
    6386:	add.w	r1, r0, r1, lsl #1
    638a:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    638c:	bx	lr
    638e:	add.w	r1, r0, r1, lsl #1
    6392:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    6396:	bx	lr

00006398 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    6398:	push	{r4}
    639a:	subs	r2, r0, #1
    639c:	add.w	r4, r0, #10
  uint8_t sum = 0;
    63a0:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    63a2:	ldrb.w	r1, [r2, #1]!
    63a6:	lsrs	r3, r0, #1
    63a8:	orr.w	r0, r3, r0, lsl #7
    63ac:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    63b0:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    63b2:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    63b4:	bne.n	63a2 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    63b6:	ldr.w	r4, [sp], #4
    63ba:	bx	lr

000063bc <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    63bc:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    63be:	ldr	r3, [r1, #12]
    63c0:	cbz	r3, 63e0 <FatFile::openCluster(FatFile*)+0x24>
    63c2:	mov	r5, r0
    63c4:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    63c6:	movs	r2, #36	; 0x24
    63c8:	movs	r1, #0
    63ca:	bl	beac <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    63ce:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    63d0:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    63d2:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    63d4:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    63d6:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    63d8:	ldr	r3, [r4, #12]
    63da:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    63dc:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    63de:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    63e0:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    63e2:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    63e6:	b.w	5608 <FatFile::openRoot(FatVolume*)>
    63ea:	nop

000063ec <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    63ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63f0:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    63f2:	ldrb	r3, [r0, #0]
    63f4:	movs	r4, #0
    63f6:	strb.w	r4, [sp, #12]
    63fa:	strb.w	r4, [sp, #13]
    63fe:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    6402:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6404:	cbz	r3, 640c <FatFile::getName(char*, unsigned int)+0x20>
    6406:	cmp	r2, #12
    6408:	mov	r5, r2
    640a:	bhi.n	641a <FatFile::getName(char*, unsigned int)+0x2e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    640c:	movs	r7, #0
    640e:	strb.w	r7, [r9]
  return false;
}
    6412:	mov	r0, r7
    6414:	add	sp, #52	; 0x34
    6416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    641a:	ldrb	r3, [r0, #3]
    641c:	mov	r8, r0
    641e:	cmp	r3, #0
    6420:	beq.n	64da <FatFile::getName(char*, unsigned int)+0xee>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    6422:	add	r0, sp, #12
    6424:	mov	r1, r8
    6426:	bl	63bc <FatFile::openCluster(FatFile*)>
    642a:	cmp	r0, #0
    642c:	beq.n	640c <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    642e:	ldrb.w	r3, [r8, #3]
    6432:	cmp	r3, #0
    6434:	beq.n	640c <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6436:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6438:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    643a:	ldrh.w	r1, [r8, #4]
    643e:	subs	r1, r1, r6
    6440:	lsls	r1, r1, #5
    6442:	add	r0, sp, #12
    6444:	bl	5a4c <FatFile::seekSet(unsigned long)>
    6448:	mov	r7, r0
    644a:	cmp	r0, #0
    644c:	beq.n	640c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    644e:	movs	r1, #0
    6450:	add	r0, sp, #12
    6452:	bl	57d8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6456:	mov	sl, r0
    6458:	cmp	r0, #0
    645a:	beq.n	640c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    645c:	ldrb	r3, [r0, #11]
    645e:	cmp	r3, #15
    6460:	bne.n	640c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    6462:	ldrb	r3, [r0, #0]
    6464:	and.w	r3, r3, #31
    6468:	cmp	r6, r3
    646a:	bne.n	640c <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    646c:	subs	r3, r6, #1
    646e:	add.w	r2, r3, r3, lsl #1
    6472:	add.w	r2, r3, r2, lsl #2
    6476:	mov	r3, r2
    6478:	add.w	r4, r9, r2
    647c:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    6480:	subs	r1, r3, r2
    6482:	uxtb	r1, r1
    6484:	mov	r0, sl
    6486:	bl	6370 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    648a:	cbz	r0, 64e8 <FatFile::getName(char*, unsigned int)+0xfc>
    648c:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    648e:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    6492:	bls.n	64b8 <FatFile::getName(char*, unsigned int)+0xcc>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6494:	cmp	r0, #126	; 0x7e
    6496:	ite	ls
    6498:	uxtbls	r0, r0
    649a:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    649c:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    649e:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    64a2:	bne.n	6480 <FatFile::getName(char*, unsigned int)+0x94>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    64a4:	cmp	r5, fp
    64a6:	bls.n	64b8 <FatFile::getName(char*, unsigned int)+0xcc>
    64a8:	ldrb.w	r3, [sl]
    64ac:	lsls	r2, r3, #25
    name[k] = 0;
    64ae:	itt	mi
    64b0:	ldrbmi.w	r3, [sp, #4]
    64b4:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    64b8:	add.w	r3, r9, r5
    64bc:	ldrb.w	r2, [sp, #4]
    64c0:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    64c4:	ldrb.w	r3, [sl]
    64c8:	lsls	r3, r3, #25
    64ca:	bmi.n	6412 <FatFile::getName(char*, unsigned int)+0x26>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    64cc:	adds	r6, #1
    64ce:	ldrb.w	r3, [r8, #3]
    64d2:	uxtb	r6, r6
    64d4:	cmp	r3, r6
    64d6:	bcs.n	643a <FatFile::getName(char*, unsigned int)+0x4e>
    64d8:	b.n	640c <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    64da:	bl	6cf8 <FatFile::getSFN(char*)>
    64de:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    64e0:	mov	r0, r7
    64e2:	add	sp, #52	; 0x34
    64e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    64e8:	mov	fp, r3
    64ea:	b.n	64a4 <FatFile::getName(char*, unsigned int)+0xb8>

000064ec <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    64ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    64f0:	ldrb	r3, [r0, #0]
    64f2:	cmp	r3, #32
    64f4:	bne.n	64fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    64f6:	ldrb.w	r3, [r0, #1]!
    64fa:	cmp	r3, #32
    64fc:	beq.n	64f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    64fe:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    6500:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    6502:	cmp	r3, #0
    6504:	beq.w	6716 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    6508:	cmp	r3, #47	; 0x2f
    650a:	beq.n	656c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    650c:	cmp	r3, #92	; 0x5c
    650e:	beq.n	6556 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6510:	sub.w	r4, r3, #34	; 0x22
    6514:	uxtb	r4, r4
    6516:	cmp	r4, #29
    6518:	bls.n	655c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    651a:	ldr.w	lr, [pc, #536]	; 6734 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    651e:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6520:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6522:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6524:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6528:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    652a:	beq.n	6556 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    652c:	cmp	r5, #94	; 0x5e
    652e:	bhi.n	6556 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6530:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6534:	sub.w	r5, r3, #34	; 0x22
    6538:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    653a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    653c:	cmp	r3, #0
    653e:	beq.w	66e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    6542:	cmp	r3, #47	; 0x2f
    6544:	beq.n	656e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6546:	cmp	r3, #92	; 0x5c
    6548:	lsr.w	r7, lr, r5
    654c:	beq.n	6556 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    654e:	cmp	r5, #29
    6550:	bhi.n	6522 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    6552:	lsls	r7, r7, #31
    6554:	bpl.n	6522 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6556:	movs	r0, #0
    6558:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    655c:	ldr	r5, [pc, #468]	; (6734 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    655e:	lsr.w	r4, r5, r4
    6562:	lsls	r4, r4, #31
    6564:	bpl.n	651a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6566:	movs	r0, #0
    6568:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    656c:	movs	r4, #0
    656e:	adds	r7, r0, r4
    6570:	mov	r6, r7
    6572:	mov	r5, r4
    6574:	movs	r3, #47	; 0x2f
    6576:	b.n	657e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    6578:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    657c:	adds	r5, #1
    657e:	cmp	r3, #32
    6580:	beq.n	6578 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    6582:	cmp	r3, #47	; 0x2f
    6584:	beq.n	6578 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    6586:	add	r5, r0
    6588:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    658a:	cbz	r4, 65a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    658c:	mov	r2, r7
    c = path[len - 1];
    658e:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    6592:	cmp	r3, #46	; 0x2e
    6594:	beq.n	659c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    6596:	cmp	r3, #32
    6598:	bne.w	66ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    659c:	subs	r4, #1
    659e:	bne.n	658e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    65a0:	mov.w	r5, #4294967295
    65a4:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    65a6:	str	r3, [r1, #4]
    65a8:	add.w	r6, r1, #23
    65ac:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    65b0:	movs	r2, #32
    65b2:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    65b6:	cmp	r3, r6
    65b8:	bne.n	65b2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    65ba:	subs	r6, r0, #1
    65bc:	movs	r2, #0
    65be:	b.n	65c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    65c0:	adds	r2, #1
    65c2:	ldrb.w	r3, [r6, #1]!
    65c6:	cmp	r3, #46	; 0x2e
    65c8:	beq.n	65c0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    65ca:	cmp	r3, #32
    65cc:	beq.n	65c0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    65ce:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    65d2:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    65d4:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    65d8:	beq.n	65f4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    65da:	ldrb	r7, [r0, r5]
    65dc:	cmp	r7, #46	; 0x2e
    65de:	add.w	r6, r0, r5
    65e2:	bne.n	65ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    65e4:	b.n	65f4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    65e6:	ldrb.w	r7, [r6, #-1]!
    65ea:	cmp	r7, #46	; 0x2e
    65ec:	beq.n	65f4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    65ee:	adds.w	r5, r5, #4294967295
    65f2:	bcs.n	65e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    65f4:	cmp	r2, r4
    65f6:	mov.w	r9, #0
    65fa:	bge.w	6720 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    65fe:	mov	r6, r9
    6600:	mov	sl, r9
    6602:	movs	r7, #7
    6604:	mov.w	r8, #8
    6608:	b.n	6656 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    660a:	cmp	r3, #46	; 0x2e
    660c:	beq.n	669e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    660e:	cmp	r3, #34	; 0x22
    6610:	beq.n	662a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6612:	cmp	r3, #124	; 0x7c
    6614:	beq.n	662a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6616:	sub.w	lr, r3, #42	; 0x2a
    661a:	cmp.w	lr, #5
    661e:	bls.n	66b2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6620:	sub.w	lr, r3, #58	; 0x3a
    6624:	cmp.w	lr, #5
    6628:	bhi.n	66dc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    662a:	cmp	r5, r2
    662c:	beq.n	66a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    662e:	cmp	r7, r6
    6630:	bcc.n	6686 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6632:	mov.w	ip, #0
      c = '_';
    6636:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6638:	add.w	lr, r6, #1
    663c:	add.w	fp, r1, r6
    6640:	uxtb.w	r6, lr
      if (i < 7) {
    6644:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6646:	strb.w	r3, [fp, #13]
      if (i < 7) {
    664a:	bhi.n	664e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    664c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    664e:	adds	r2, #1
    6650:	cmp	r2, r4
    6652:	bge.n	6664 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    6654:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6656:	cmp	r3, #32
    6658:	bne.n	660a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    665a:	adds	r2, #1
    665c:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    665e:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6662:	blt.n	6654 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6664:	ldrb	r3, [r1, #13]
    6666:	cmp	r3, #32
    6668:	beq.w	6556 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    666c:	cmp.w	ip, #0
    6670:	beq.n	6702 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6672:	tst.w	sl, r9
    6676:	it	ne
    6678:	movne.w	r9, #2
    667c:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6680:	movs	r0, #1
    6682:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6686:	cmp	r7, #10
    6688:	beq.n	66fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    668a:	cmp	r5, r2
    668c:	blt.n	66fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    668e:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6690:	movs	r7, #10
      i = 8;    // Place for extension.
    6692:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6694:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    6698:	mov.w	ip, #0
    669c:	b.n	664e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    669e:	cmp	r5, r2
    66a0:	bne.n	665a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    66a2:	cmp	r7, #10
    66a4:	beq.n	66fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    66a6:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    66a8:	movs	r7, #10
      i = 8;    // Place for extension.
    66aa:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    66ac:	mov.w	r8, #16
    66b0:	b.n	664e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    66b2:	cmp	r3, #45	; 0x2d
    66b4:	bne.n	662a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    66b6:	sub.w	lr, r3, #33	; 0x21
    66ba:	cmp.w	lr, #93	; 0x5d
    66be:	bhi.n	662a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    66c0:	cmp	r5, r2
    66c2:	beq.n	66a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    66c4:	cmp	r7, r6
    66c6:	bcc.n	6686 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    66c8:	sub.w	lr, r3, #97	; 0x61
    66cc:	cmp.w	lr, #25
    66d0:	bhi.n	6724 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    66d2:	subs	r3, #32
    66d4:	uxtb	r3, r3
        lc |= bit;
    66d6:	orr.w	r9, r8, r9
    66da:	b.n	6638 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    66dc:	sub.w	lr, r3, #91	; 0x5b
    66e0:	cmp.w	lr, #2
    66e4:	bls.n	662a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    66e6:	b.n	66b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    66e8:	str	r7, [r2, #0]
    66ea:	adds	r7, r0, r4
    66ec:	b.n	658c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    66ee:	cmp	r4, #255	; 0xff
    66f0:	bgt.w	6556 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    66f4:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    66f6:	mov	r3, r4
    66f8:	b.n	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    66fa:	ldrb	r3, [r1, #13]
    66fc:	cmp	r3, #32
    66fe:	beq.w	6556 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6702:	ldrb	r3, [r1, #12]
    6704:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6706:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    6708:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    670a:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    670c:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    670e:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    6710:	strb	r2, [r3, #14]
    6712:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6716:	str	r0, [r2, #0]
    6718:	mov	r4, r3
    671a:	mov.w	r5, #4294967295
    671e:	b.n	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6720:	mov	sl, r9
    6722:	b.n	6664 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    6724:	sub.w	lr, r3, #65	; 0x41
    6728:	cmp.w	lr, #25
        uc |= bit;
    672c:	it	ls
    672e:	orrls.w	sl, r8, sl
    6732:	b.n	6638 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    6734:	.word	0x35000101

00006738 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    6738:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    673c:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    673e:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6740:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    6742:	lsls	r2, r2, #30
    6744:	strb.w	r3, [sp, #4]
    6748:	strb.w	r3, [sp, #5]
    674c:	strb.w	r3, [sp, #6]
    6750:	bpl.n	6798 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    6752:	ldr	r1, [r0, #32]
    6754:	mov	r5, r0
    6756:	cbnz	r1, 67a2 <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    6758:	movs	r1, #1
    675a:	mov	r0, r5
    675c:	bl	5200 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6760:	cbz	r0, 6798 <FatFile::remove()+0x60>
    6762:	subs	r1, r0, #1
    6764:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    6768:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    676a:	lsrs	r2, r4, #1
    676c:	ldrb.w	r6, [r1, #1]!
    6770:	orr.w	r3, r2, r4, lsl #7
    6774:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6778:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    677a:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    677c:	bne.n	676a <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    677e:	mov.w	r8, #229	; 0xe5
    6782:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    6786:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    6788:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    678a:	add.w	r0, r6, #36	; 0x24
    678e:	strb	r3, [r5, #0]
  m_flags = 0;
    6790:	strb	r3, [r5, #2]
    6792:	bl	5f50 <FatCache::sync()>
    6796:	cbnz	r0, 67ae <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    6798:	movs	r6, #0
}
    679a:	mov	r0, r6
    679c:	add	sp, #40	; 0x28
    679e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    67a2:	ldr	r0, [r0, #8]
    67a4:	bl	6170 <FatPartition::freeChain(unsigned long)>
    67a8:	cmp	r0, #0
    67aa:	bne.n	6758 <FatFile::remove()+0x20>
    67ac:	b.n	6798 <FatFile::remove()+0x60>
    67ae:	add.w	r0, r6, #560	; 0x230
    67b2:	bl	5f50 <FatCache::sync()>
    67b6:	cmp	r0, #0
    67b8:	beq.n	6798 <FatFile::remove()+0x60>
    67ba:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    67bc:	ldr	r3, [r0, #0]
    67be:	ldr	r3, [r3, #20]
    67c0:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    67c2:	mov	r6, r0
    67c4:	cmp	r0, #0
    67c6:	beq.n	6798 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    67c8:	ldrb	r3, [r5, #3]
    67ca:	cmp	r3, #0
    67cc:	beq.n	679a <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    67ce:	add	r0, sp, #4
    67d0:	mov	r1, r5
    67d2:	bl	63bc <FatFile::openCluster(FatFile*)>
    67d6:	cmp	r0, #0
    67d8:	beq.n	6798 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    67da:	ldrb	r3, [r5, #3]
    67dc:	cmp	r3, #0
    67de:	beq.n	6798 <FatFile::remove()+0x60>
    67e0:	movs	r7, #1
    67e2:	b.n	6824 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    67e4:	add	r0, sp, #4
    67e6:	bl	57d8 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    67ea:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    67ec:	cmp	r0, #0
    67ee:	beq.n	6798 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    67f0:	ldrb	r2, [r0, #11]
    67f2:	cmp	r2, #15
    67f4:	bne.n	6798 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    67f6:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    67f8:	and.w	r1, r2, #31
    67fc:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    67fe:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6800:	bne.n	6798 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    6802:	ldrb	r3, [r0, #13]
    6804:	cmp	r3, r4
    6806:	bne.n	6798 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    6808:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    680c:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    680e:	ldrb.w	r3, [r1, #36]	; 0x24
    6812:	orr.w	r3, r3, #1
    6816:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    681a:	lsls	r3, r2, #25
    681c:	bmi.n	6838 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    681e:	ldrb	r3, [r5, #3]
    6820:	cmp	r3, r7
    6822:	bcc.n	6798 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6824:	ldrh	r1, [r5, #4]
    6826:	subs	r1, r1, r7
    6828:	lsls	r1, r1, #5
    682a:	add	r0, sp, #4
    682c:	bl	5a4c <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6830:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6832:	cmp	r0, #0
    6834:	bne.n	67e4 <FatFile::remove()+0xac>
    6836:	b.n	6798 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    6838:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    683a:	add.w	r0, r4, #36	; 0x24
    683e:	bl	5f50 <FatCache::sync()>
    6842:	cmp	r0, #0
    6844:	beq.n	6798 <FatFile::remove()+0x60>
    6846:	add.w	r0, r4, #560	; 0x230
    684a:	bl	5f50 <FatCache::sync()>
    684e:	cmp	r0, #0
    6850:	beq.n	6798 <FatFile::remove()+0x60>
    6852:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6854:	ldr	r3, [r0, #0]
    6856:	ldr	r3, [r3, #20]
    6858:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    685a:	cmp	r0, #0
    685c:	beq.n	6798 <FatFile::remove()+0x60>
    685e:	b.n	679a <FatFile::remove()+0x62>

00006860 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6860:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6864:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6866:	mov	r6, r1
    6868:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    686a:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    686e:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6872:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    6876:	ldr	r0, [r6, #4]
    6878:	ldr	r1, [r6, #8]
    687a:	add.w	r3, r8, r0
    687e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6880:	cbz	r0, 6894 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    6882:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6884:	ldrb.w	r2, [r1], #1
    6888:	add.w	r3, r3, r3, lsl #5
    688c:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    688e:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6890:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6892:	bne.n	6884 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    6894:	cmp	r7, #3
    6896:	it	cs
    6898:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    689a:	adds	r2, r7, #4
    689c:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    689e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    68a2:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    68a4:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    68a6:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    68a8:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    68aa:	ite	ls
    68ac:	addls	r1, #48	; 0x30
    68ae:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    68b0:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    68b2:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    68b6:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    68b8:	bcc.n	689e <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    68ba:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    68bc:	movs	r1, #0
    68be:	strb.w	r9, [r3, #13]
    68c2:	mov	r0, r4
    68c4:	bl	5a4c <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    68c8:	movs	r1, #1
    68ca:	mov	r0, r4
    68cc:	bl	57d8 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68d0:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    68d2:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68d4:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    68d6:	cbz	r0, 6904 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    68d8:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68dc:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    68de:	cmp.w	lr, #0
    68e2:	beq.n	6910 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68e4:	ldrb	r3, [r3, #11]
    68e6:	lsls	r3, r3, #28
    68e8:	bmi.n	68c8 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    68ea:	bl	bd80 <memcmp>
    68ee:	cmp	r0, #0
    68f0:	bne.n	68c8 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    68f2:	add.w	r8, r8, #1
    68f6:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    68fa:	cmp.w	r8, #100	; 0x64
    68fe:	bne.n	6876 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    6900:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    6904:	ldrb	r0, [r4, #1]
    6906:	clz	r0, r0
    690a:	lsrs	r0, r0, #5
    690c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    6910:	movs	r0, #1
    6912:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6916:	nop

00006918 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6918:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    691c:	ldrb	r4, [r1, #0]
    691e:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6922:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6924:	beq.n	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6926:	ldrb	r4, [r0, #0]
    6928:	cbz	r4, 6932 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    692a:	movs	r0, #0
}
    692c:	add	sp, #52	; 0x34
    692e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6932:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    6934:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6938:	lsls	r4, r4, #30
    693a:	bne.n	69c2 <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    693c:	mov.w	r8, #1
    6940:	mov	r6, r1
    6942:	mov	fp, r2
    6944:	str	r0, [sp, #36]	; 0x24
    6946:	movs	r1, #0
    6948:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    694a:	mov	r7, r1
    694c:	str	r3, [sp, #28]
    694e:	bl	5a4c <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6952:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    6956:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6958:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    695a:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    695c:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    695e:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6960:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    6962:	movs	r1, #1
    6964:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6966:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    6968:	bl	57d8 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    696c:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    6970:	mov	r3, r0
    6972:	cmp	r0, #0
    6974:	beq.w	6a90 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6978:	ldrb	r2, [r0, #0]
    697a:	cmp	r2, #229	; 0xe5
    697c:	beq.n	69f4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    697e:	cmp	r2, #0
    6980:	beq.n	69f4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    6982:	cmp	r4, r8
    6984:	it	cc
    6986:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6988:	cmp	r2, #46	; 0x2e
    698a:	beq.n	69ee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    698c:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    698e:	cmp	r1, #15
    6990:	beq.n	6a10 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    6992:	and.w	r1, r1, #8
    6996:	and.w	r2, r1, #255	; 0xff
    699a:	cbnz	r1, 69ee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    699c:	cmp.w	r9, #0
    69a0:	bne.w	6c68 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    69a4:	mov	r0, r3
    69a6:	movs	r2, #11
    69a8:	ldr	r1, [sp, #16]
    69aa:	bl	bd80 <memcmp>
    69ae:	cmp	r0, #0
    69b0:	bne.n	6962 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    69b2:	ldrb.w	r3, [fp]
    69b6:	lsls	r0, r3, #31
    69b8:	bpl.w	6c90 <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    69bc:	movs	r3, #1
    69be:	str	r3, [sp, #20]
    69c0:	b.n	6962 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    69c2:	ldr	r5, [pc, #724]	; (6c98 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    69c4:	add.w	r4, sl, #12
    69c8:	umull	r4, r8, r5, r4
    69cc:	mov.w	r8, r8, lsr #2
    69d0:	add.w	r8, r8, #1
    69d4:	uxtb.w	r8, r8
    69d8:	b.n	6940 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    69da:	ldr	r1, [sp, #12]
    69dc:	subs	r1, #1
    69de:	uxtb	r1, r1
    69e0:	cmp	r2, r1
    69e2:	str	r1, [sp, #12]
    69e4:	bne.n	69ee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    69e6:	ldrb	r2, [r3, #13]
    69e8:	ldr	r1, [sp, #24]
    69ea:	cmp	r1, r2
    69ec:	beq.n	6a26 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    69ee:	mov.w	r9, #0
    69f2:	b.n	6962 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    69f4:	cmp	r4, #0
    69f6:	it	eq
    69f8:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    69fa:	cmp	r4, r8
        freeFound++;
    69fc:	itt	cc
    69fe:	addcc	r4, #1
    6a00:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6a02:	cmp	r2, #0
    6a04:	beq.n	6a98 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6a06:	cmp	r2, #229	; 0xe5
    6a08:	bne.n	6988 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6a0a:	mov.w	r9, #0
    6a0e:	b.n	6962 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    6a10:	cmp.w	r9, #0
    6a14:	bne.n	69da <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    6a16:	lsls	r5, r2, #25
    6a18:	bpl.n	6962 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6a1a:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    6a1e:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6a20:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    6a24:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6a26:	ldr	r2, [sp, #12]
    6a28:	subs	r2, #1
    6a2a:	add.w	r5, r2, r2, lsl #1
    6a2e:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    6a32:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6a34:	mov	r2, r5
      if (k >= len) {
    6a36:	bls.n	69ee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6a38:	add.w	r1, r5, #13
    6a3c:	str.w	r9, [sp, #32]
    6a40:	mov	r9, r1
    6a42:	b.n	6a6c <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a44:	ldr.w	r0, [fp, #8]
    6a48:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6a4a:	cmp.w	ip, #25
    6a4e:	it	ls
    6a50:	addls	r1, #32
    6a52:	sub.w	r0, r2, #65	; 0x41
    6a56:	it	ls
    6a58:	uxtbls	r1, r1
    6a5a:	cmp	r0, #25
    6a5c:	itt	ls
    6a5e:	addls	r2, #32
    6a60:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a62:	cmp	r2, r1
    6a64:	bne.n	69ee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    6a66:	cmp	lr, r9
    6a68:	beq.n	6af0 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    6a6a:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    6a6c:	subs	r1, r2, r5
    6a6e:	uxtb	r1, r1
    6a70:	mov	r0, r3
    6a72:	bl	6370 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a76:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6a78:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6a7a:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a7e:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6a82:	beq.w	6c5a <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a86:	cmp	r0, #255	; 0xff
    6a88:	bls.n	6a44 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6a8a:	mov.w	r9, #0
    6a8e:	b.n	6962 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    6a90:	ldrb	r3, [r6, #1]
    6a92:	cmp	r3, #0
    6a94:	bne.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6a98:	ldr	r2, [sp, #28]
    6a9a:	mov	r3, r2
    6a9c:	lsls	r2, r3, #22
    6a9e:	bpl.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6aa2:	and.w	r3, r3, #3
    6aa6:	subs	r3, #1
    6aa8:	cmp	r3, #1
    6aaa:	bhi.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    6aae:	cmp	r4, #0
    6ab0:	it	eq
    6ab2:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6ab4:	cmp	r4, r8
    6ab6:	bcc.n	6ac0 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    6ab8:	b.n	6af6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6aba:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6abc:	cmp	r8, r4
    6abe:	bls.n	6af6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    6ac0:	movs	r1, #0
    6ac2:	mov	r0, r6
    6ac4:	bl	57d8 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6ac8:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    6aca:	cmp	r0, #0
    6acc:	bne.n	6aba <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    6ace:	ldrb	r3, [r6, #1]
    6ad0:	cbz	r3, 6adc <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    6ad2:	b.n	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6ad4:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    6ad6:	ldrb	r3, [r3, #4]
    6ad8:	cmp	r3, #1
    6ada:	bhi.n	6af6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6adc:	cmp	r8, r4
    6ade:	bls.n	6af6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6ae0:	mov	r0, r6
    6ae2:	bl	516c <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    6ae6:	adds	r4, #16
    6ae8:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6aea:	cmp	r0, #0
    6aec:	bne.n	6ad4 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    6aee:	b.n	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6af0:	ldr.w	r9, [sp, #32]
    6af4:	b.n	6962 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    6af6:	ldr	r3, [sp, #20]
    6af8:	cbz	r3, 6b08 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    6afa:	mov	r1, fp
    6afc:	mov	r0, r6
    6afe:	bl	6860 <FatFile::lfnUniqueSfn(fname_t*)>
    6b02:	cmp	r0, #0
    6b04:	beq.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    6b08:	lsls	r1, r7, #5
    6b0a:	mov	r0, r6
    6b0c:	bl	5a4c <FatFile::seekSet(unsigned long)>
    6b10:	cmp	r0, #0
    6b12:	beq.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    6b16:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    6b1a:	ands.w	r9, r8, #255	; 0xff
    6b1e:	beq.n	6bd4 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b20:	orr.w	r4, r9, #64	; 0x40
    6b24:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6b26:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    6b28:	movs	r7, #0
    6b2a:	movs	r1, #0
    6b2c:	mov	r0, r6
    6b2e:	bl	57d8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6b32:	cmp	r0, #0
    6b34:	beq.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6b38:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6b3a:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b3e:	cmp	r9, r5
    6b40:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6b44:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b48:	ite	ne
    6b4a:	movne	r1, r5
    6b4c:	moveq	r1, r4
    6b4e:	strb.w	r3, [r2, #36]	; 0x24
    6b52:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6b56:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    6b5a:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b5c:	strb	r1, [r0, #0]
    6b5e:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    6b62:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6b64:	ldrb.w	r8, [lr, #1]!
    6b68:	lsrs	r2, r3, #1
    6b6a:	orr.w	r3, r2, r3, lsl #7
    6b6e:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6b72:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6b74:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6b76:	bne.n	6b64 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6b78:	and.w	r1, r1, #31
    6b7c:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6b7e:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6b80:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6b84:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6b88:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6b8a:	add.w	r2, r1, r2, lsl #2
    6b8e:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    6b90:	movs	r3, #0
    6b92:	b.n	6bb4 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6b94:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6b96:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6b9a:	bls.n	6bc6 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6b9c:	cmp	r3, #10
    6b9e:	ite	ls
    6ba0:	strhls	r1, [r0, #0]
    6ba2:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6ba4:	adds	r3, #1
    6ba6:	uxtb	r3, r3
    6ba8:	cmp	r3, #13
    6baa:	add.w	r2, r2, #1
    6bae:	add.w	r0, r0, #2
    6bb2:	beq.n	6bcc <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6bb4:	cmp	sl, r2
    6bb6:	bhi.n	6b94 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    6bb8:	ite	ne
    6bba:	movne.w	r1, #4294967295
    6bbe:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6bc0:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6bc2:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6bc4:	bhi.n	6b9c <FatFile::open(FatFile*, fname_t*, int)+0x284>
    6bc6:	strh.w	r1, [r0, #-3]
    6bca:	b.n	6ba4 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6bcc:	subs	r5, #1
    6bce:	ands.w	r5, r5, #255	; 0xff
    6bd2:	bne.n	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    6bd4:	movs	r1, #0
    6bd6:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6bd8:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    6bda:	bl	57d8 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6bde:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    6be2:	mov	r4, r0
    6be4:	cmp	r0, #0
    6be6:	beq.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    6bea:	movs	r2, #32
    6bec:	movs	r1, #0
    6bee:	bl	beac <memset>
  memcpy(dir->name, fname->sfn, 11);
    6bf2:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    6bf4:	ldr	r2, [pc, #164]	; (6c9c <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    6bf6:	ldr.w	r1, [r3, #13]!
    6bfa:	ldr	r0, [r3, #4]
    6bfc:	str	r0, [r4, #4]
    6bfe:	str	r1, [r4, #0]
    6c00:	ldrh	r1, [r3, #8]
    6c02:	ldrb	r3, [r3, #10]
    6c04:	strb	r3, [r4, #10]
    6c06:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6c08:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    6c0c:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6c0e:	and.w	r3, r3, #24
    6c12:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    6c14:	cbz	r7, 6c3a <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    6c16:	add.w	r2, sp, #43	; 0x2b
    6c1a:	add.w	r1, sp, #46	; 0x2e
    6c1e:	add	r0, sp, #44	; 0x2c
    6c20:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    6c22:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    6c26:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    6c2a:	ldrb.w	r1, [sp, #43]	; 0x2b
    6c2e:	strb	r1, [r4, #13]
    6c30:	strh	r3, [r4, #16]
    6c32:	strh	r3, [r4, #18]
    6c34:	strh	r3, [r4, #24]
    6c36:	strh	r2, [r4, #14]
    6c38:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6c3a:	ldr	r2, [r6, #8]
    6c3c:	ldrb.w	r3, [r2, #36]	; 0x24
    6c40:	orr.w	r3, r3, #1
    6c44:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6c48:	str.w	r9, [sp]
    6c4c:	ldr	r3, [sp, #28]
    6c4e:	ldr	r0, [sp, #36]	; 0x24
    6c50:	mov	r2, r5
    6c52:	mov	r1, r6
    6c54:	bl	5ae0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6c58:	b.n	692c <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6c5a:	cmp	r0, #0
    6c5c:	ldr.w	r9, [sp, #32]
    6c60:	it	ne
    6c62:	movne.w	r9, #0
    6c66:	b.n	6962 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6c68:	ldr	r1, [sp, #12]
    6c6a:	cmp	r1, #1
    6c6c:	bne.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6c70:	subs	r4, r3, #1
    6c72:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6c74:	ldrb.w	r0, [r4, #1]!
    6c78:	lsrs	r1, r2, #1
    6c7a:	orr.w	r2, r1, r2, lsl #7
    6c7e:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6c82:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6c84:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6c86:	bne.n	6c74 <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6c88:	ldr	r3, [sp, #24]
    6c8a:	cmp	r3, r2
    6c8c:	bne.w	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6c90:	ldr	r3, [sp, #28]
    6c92:	lsls	r1, r3, #20
    6c94:	bpl.n	6c48 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    6c96:	b.n	692a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6c98:	.word	0x4ec4ec4f
    6c9c:	.word	0x20019cf4

00006ca0 <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    6ca0:	push	{r3, r4, r5, r6, r7, lr}
    6ca2:	mov	r6, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    6ca4:	movs	r1, #0
    6ca6:	bl	5200 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6caa:	cbz	r0, 6ce8 <FatFile::getSFN(char*) [clone .part.2]+0x48>
    6cac:	movs	r2, #0
    6cae:	mov	r1, r2
    6cb0:	subs	r4, r0, #1
    6cb2:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    6cb4:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    6cb8:	ldrb.w	r3, [r4, #1]!
    6cbc:	cmp	r3, #32
    6cbe:	beq.n	6cdc <FatFile::getSFN(char*) [clone .part.2]+0x3c>
      continue;
    }
    if (i == 8) {
    6cc0:	cmp	r2, #8
    6cc2:	beq.n	6cea <FatFile::getSFN(char*) [clone .part.2]+0x4a>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6cc4:	sub.w	r5, r3, #65	; 0x41
    6cc8:	cmp	r5, #25
    6cca:	bhi.n	6cd6 <FatFile::getSFN(char*) [clone .part.2]+0x36>
    6ccc:	ldrb	r5, [r0, #12]
    6cce:	tst	r7, r5
      c += 'a' - 'A';
    6cd0:	itt	ne
    6cd2:	addne	r3, #32
    6cd4:	uxtbne	r3, r3
    }
    name[j++] = c;
    6cd6:	strb	r3, [r6, r1]
    6cd8:	adds	r1, #1
    6cda:	uxtb	r1, r1
    6cdc:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    6cde:	cmp	r2, #11
    6ce0:	bne.n	6cb8 <FatFile::getSFN(char*) [clone .part.2]+0x18>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    6ce2:	movs	r3, #0
    6ce4:	strb	r3, [r6, r1]
  return true;
    6ce6:	movs	r0, #1

fail:
  return false;
}
    6ce8:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    6cea:	strb.w	lr, [r6, r1]
    6cee:	adds	r1, #1
    6cf0:	uxtb	r1, r1
    6cf2:	ldrb	r3, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    6cf4:	movs	r7, #16
    6cf6:	b.n	6cc4 <FatFile::getSFN(char*) [clone .part.2]+0x24>

00006cf8 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    6cf8:	ldrb	r3, [r0, #0]
    6cfa:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    6cfc:	cbz	r3, 6d14 <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6cfe:	tst.w	r3, #96	; 0x60
    6d02:	beq.n	6d10 <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    6d04:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    6d06:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    6d08:	strb	r1, [r2, #0]
    name[1] = '\0';
    6d0a:	strb	r3, [r2, #1]
    return true;
    6d0c:	movs	r0, #1
    6d0e:	bx	lr
    6d10:	b.w	6ca0 <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    6d14:	mov	r0, r3
}
    6d16:	bx	lr

00006d18 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6d18:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    6d1a:	movs	r5, #0
    6d1c:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    6d1e:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    6d20:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6d22:	mov	r6, r0
    6d24:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6d26:	cbz	r4, 6d4c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    6d28:	mov	r1, r0
    6d2a:	movs	r0, #36	; 0x24
    6d2c:	bl	6f84 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6d30:	strb	r5, [r0, #0]
    6d32:	strb	r5, [r0, #1]
    6d34:	strb	r5, [r0, #2]
    6d36:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    6d38:	ldr	r5, [r7, #56]	; 0x38
    6d3a:	mov	r4, r0
    6d3c:	ldmia	r5!, {r0, r1, r2, r3}
    6d3e:	stmia	r4!, {r0, r1, r2, r3}
    6d40:	ldmia	r5!, {r0, r1, r2, r3}
    6d42:	stmia	r4!, {r0, r1, r2, r3}
    6d44:	ldr	r3, [r5, #0]
    6d46:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    6d48:	mov	r0, r6
    6d4a:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    6d4c:	ldr	r3, [r1, #60]	; 0x3c
    6d4e:	cmp	r3, #0
    6d50:	beq.n	6d48 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    6d52:	mov	r1, r0
    6d54:	movs	r0, #56	; 0x38
    6d56:	bl	6f84 <operator new(unsigned int, unsigned long*)>
    6d5a:	strb.w	r4, [r0, #49]	; 0x31
    6d5e:	strb.w	r4, [r0, #50]	; 0x32
    6d62:	strb.w	r4, [r0, #51]	; 0x33
    6d66:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    6d68:	ldr	r3, [r7, #60]	; 0x3c
    6d6a:	mov	r2, r0
    6d6c:	add.w	r1, r3, #48	; 0x30
    6d70:	ldr	r5, [r3, #0]
    6d72:	ldr	r4, [r3, #4]
    6d74:	ldr	r0, [r3, #8]
    6d76:	ldr	r7, [r3, #12]
    6d78:	str	r7, [r2, #12]
    6d7a:	adds	r3, #16
    6d7c:	cmp	r3, r1
    6d7e:	str	r5, [r2, #0]
    6d80:	str	r4, [r2, #4]
    6d82:	str	r0, [r2, #8]
    6d84:	add.w	r2, r2, #16
    6d88:	bne.n	6d70 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    6d8a:	ldr	r3, [r3, #0]
    6d8c:	str	r3, [r2, #0]
    6d8e:	b.n	6d48 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00006d90 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6d90:	push	{r4, lr}
    6d92:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    6d94:	ldr	r0, [r0, #56]	; 0x38
    6d96:	cbz	r0, 6da4 <FsBaseFile::close()+0x14>
    6d98:	bl	52b4 <FatFile::close()>
    6d9c:	cbz	r0, 6da4 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    6d9e:	movs	r3, #0
    6da0:	str	r3, [r4, #56]	; 0x38
    return true;
    6da2:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    6da4:	ldr	r0, [r4, #60]	; 0x3c
    6da6:	cbz	r0, 6db4 <FsBaseFile::close()+0x24>
    6da8:	bl	3754 <ExFatFile::close()>
    6dac:	cbz	r0, 6db4 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    6dae:	movs	r3, #0
    6db0:	str	r3, [r4, #60]	; 0x3c
    6db2:	pop	{r4, pc}
    return true;
  }
  return false;
    6db4:	movs	r0, #0
}
    6db6:	pop	{r4, pc}

00006db8 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    6db8:	cbz	r1, 6e2e <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    6dba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dbe:	mov	r4, r1
    6dc0:	mov	r5, r0
    6dc2:	mov	r8, r3
    6dc4:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    6dc6:	bl	6d90 <FsBaseFile::close()>
  if (vol->m_fVol) {
    6dca:	ldr.w	r6, [r4, #1144]	; 0x478
    6dce:	cbz	r6, 6dfc <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    6dd0:	mov	r1, r5
    6dd2:	movs	r0, #36	; 0x24
    6dd4:	bl	6f84 <operator new(unsigned int, unsigned long*)>
    6dd8:	movs	r1, #0
    6dda:	strb	r1, [r0, #0]
    6ddc:	strb	r1, [r0, #1]
    6dde:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6de0:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    6de4:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6de6:	mov	r3, r8
    6de8:	mov	r2, r7
    6dea:	bl	55f8 <FatFile::open(FatVolume*, char const*, int)>
    6dee:	cbz	r0, 6df6 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    6df0:	movs	r0, #1
    6df2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    6df6:	str	r0, [r5, #56]	; 0x38
    return false;
    6df8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    6dfc:	ldr.w	r3, [r4, #1148]	; 0x47c
    6e00:	cbz	r3, 6e32 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    6e02:	mov	r1, r5
    6e04:	movs	r0, #56	; 0x38
    6e06:	bl	6f84 <operator new(unsigned int, unsigned long*)>
    6e0a:	strb.w	r6, [r0, #49]	; 0x31
    6e0e:	strb.w	r6, [r0, #50]	; 0x32
    6e12:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6e16:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    6e1a:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6e1c:	mov	r3, r8
    6e1e:	mov	r2, r7
    6e20:	bl	40a0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6e24:	cmp	r0, #0
    6e26:	bne.n	6df0 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    6e28:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    6e2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6e2e:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    6e30:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6e32:	movs	r0, #0
    6e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006e38 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    6e38:	push	{r3, r4, r5, r6, r7, lr}
    6e3a:	mov	r5, r1
    6e3c:	mov	r7, r2
    6e3e:	mov	r4, r0
  close();
    6e40:	bl	6d90 <FsBaseFile::close()>
  if (dir->m_fFile) {
    6e44:	ldr	r6, [r5, #56]	; 0x38
    6e46:	cbz	r6, 6e6c <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    6e48:	mov	r1, r4
    6e4a:	movs	r0, #36	; 0x24
    6e4c:	bl	6f84 <operator new(unsigned int, unsigned long*)>
    6e50:	movs	r2, #0
    6e52:	strb	r2, [r0, #0]
    6e54:	strb	r2, [r0, #1]
    6e56:	strb	r2, [r0, #2]
    6e58:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    6e5a:	mov	r2, r7
    6e5c:	ldr	r1, [r5, #56]	; 0x38
    6e5e:	bl	5bb8 <FatFile::openNext(FatFile*, int)>
    6e62:	cbz	r0, 6e68 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    6e64:	movs	r0, #1
    6e66:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    6e68:	str	r0, [r4, #56]	; 0x38
    6e6a:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    6e6c:	ldr	r0, [r5, #60]	; 0x3c
    6e6e:	cbz	r0, 6e94 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    6e70:	mov	r1, r4
    6e72:	movs	r0, #56	; 0x38
    6e74:	bl	6f84 <operator new(unsigned int, unsigned long*)>
    6e78:	strb.w	r6, [r0, #49]	; 0x31
    6e7c:	strb.w	r6, [r0, #50]	; 0x32
    6e80:	strb.w	r6, [r0, #51]	; 0x33
    6e84:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    6e86:	mov	r2, r7
    6e88:	ldr	r1, [r5, #60]	; 0x3c
    6e8a:	bl	40b0 <ExFatFile::openNext(ExFatFile*, int)>
    6e8e:	cmp	r0, #0
    6e90:	bne.n	6e64 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    6e92:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    6e94:	pop	{r3, r4, r5, r6, r7, pc}
    6e96:	nop

00006e98 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6e98:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6e9a:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6e9c:	mov	r5, r0
  m_blockDev = blockDev;
    6e9e:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    6ea2:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    6ea6:	mov	r1, r0
    6ea8:	mov.w	r0, #1144	; 0x478
    6eac:	bl	6f84 <operator new(unsigned int, unsigned long*)>
    6eb0:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    6eb2:	str	r6, [r0, #4]
    invalidate();
    6eb4:	bl	4110 <FsCache::invalidate()>
    6eb8:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    6ebc:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    6ec0:	bl	4110 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    6ec4:	strb.w	r6, [r4, #1084]	; 0x43c
    6ec8:	strb.w	r6, [r4, #1137]	; 0x471
    6ecc:	strb.w	r6, [r4, #1138]	; 0x472
    6ed0:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6ed4:	ldr.w	r1, [r5, #1152]	; 0x480
    6ed8:	str.w	r4, [r5, #1148]	; 0x47c
    6edc:	mov	r0, r4
    6ede:	movs	r2, #1
    6ee0:	bl	42a0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    6ee4:	cbnz	r0, 6f22 <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6ee6:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6ee8:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6eea:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    6eee:	mov.w	r0, #1120	; 0x460
    6ef2:	bl	6f84 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    6ef6:	strb	r6, [r0, #7]
    6ef8:	strb.w	r6, [r0, #1084]	; 0x43c
    6efc:	strb.w	r6, [r0, #1085]	; 0x43d
    6f00:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6f04:	movs	r2, #1
    6f06:	ldr.w	r1, [r5, #1152]	; 0x480
    6f0a:	str.w	r0, [r5, #1144]	; 0x478
    6f0e:	mov	r4, r0
    6f10:	bl	625c <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6f14:	cbnz	r0, 6f40 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    6f16:	ldr	r3, [pc, #64]	; (6f58 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    6f18:	movs	r0, #0
    6f1a:	str	r0, [r3, #0]
  m_fVol = nullptr;
    6f1c:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    6f20:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6f22:	add.w	r6, r4, #1088	; 0x440
    6f26:	mov	r0, r6
    6f28:	bl	3754 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    6f2c:	mov	r1, r4
    6f2e:	mov	r0, r6
    6f30:	bl	3810 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6f34:	cmp	r0, #0
    6f36:	beq.n	6ee6 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    6f38:	ldr	r3, [pc, #28]	; (6f58 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    6f3a:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6f3c:	str	r5, [r3, #0]
  return true;
    6f3e:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6f40:	addw	r6, r4, #1084	; 0x43c
    6f44:	mov	r0, r6
    6f46:	bl	52b4 <FatFile::close()>
    return m_vwd.openRoot(this);
    6f4a:	mov	r1, r4
    6f4c:	mov	r0, r6
    6f4e:	bl	5608 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6f52:	cmp	r0, #0
    6f54:	bne.n	6f38 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    6f56:	b.n	6f16 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    6f58:	.word	0x20019cf8

00006f5c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    6f5c:	push	{r3, r4, r5, r6, r7, lr}
    6f5e:	movs	r5, #0
    6f60:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6f64:	ldr	r6, [pc, #24]	; (6f80 <FsVolume::open(char const*, int)+0x24>)
    6f66:	str	r7, [r0, #8]
    6f68:	mov	r4, r0
    6f6a:	strb	r5, [r0, #4]
    6f6c:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    6f6e:	str	r5, [r0, #72]	; 0x48
    6f70:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6f72:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    6f76:	bl	6db8 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    6f7a:	mov	r0, r4
    6f7c:	pop	{r3, r4, r5, r6, r7, pc}
    6f7e:	nop
    6f80:	.word	0x00012b28

00006f84 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    6f84:	mov	r0, r1
    6f86:	bx	lr

00006f88 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6f88:	ldrb	r0, [r0, #19]
    6f8a:	bx	lr

00006f8c <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6f8c:	ldrb	r0, [r0, #21]
    6f8e:	bx	lr

00006f90 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    6f90:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6f92:	ldr	r4, [r0, #0]
    6f94:	ldr	r4, [r4, #12]
    6f96:	movs	r3, #1
    6f98:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    6f9a:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6f9e:	bx	ip

00006fa0 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6fa0:	ldrb	r0, [r0, #22]
    6fa2:	bx	lr

00006fa4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    6fa4:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    6fa6:	ldr	r4, [r0, #0]
    6fa8:	ldr	r4, [r4, #28]
    6faa:	movs	r3, #1
    6fac:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    6fae:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    6fb2:	bx	ip

00006fb4 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6fb4:	bx	lr
    6fb6:	nop

00006fb8 <SdSpiCard::~SdSpiCard()>:
    6fb8:	push	{r4, lr}
    6fba:	movs	r1, #24
    6fbc:	mov	r4, r0
    6fbe:	bl	a5dc <operator delete(void*, unsigned int)>
    6fc2:	mov	r0, r4
    6fc4:	pop	{r4, pc}
    6fc6:	nop

00006fc8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6fc8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fcc:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6fce:	ldrb	r1, [r0, #16]
    6fd0:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6fd2:	mov	r4, r0
    6fd4:	mov	r5, r2
    6fd6:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6fd8:	beq.n	6fea <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    6fda:	ldr	r3, [r4, #0]
    6fdc:	mov	r0, r4
    6fde:	ldr	r3, [r3, #20]
    6fe0:	blx	r3
    6fe2:	cbnz	r0, 701c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    6fe4:	movs	r0, #0
    6fe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6fea:	ldr	r3, [r0, #12]
    6fec:	cmp	r3, r6
    6fee:	bne.n	6fda <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6ff0:	movs	r6, #0
    6ff2:	cbz	r7, 700c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    6ff4:	ldr	r3, [r4, #0]
    6ff6:	mov	r1, r5
    6ff8:	ldr	r3, [r3, #68]	; 0x44
    6ffa:	mov	r0, r4
    6ffc:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6ffe:	adds	r6, #1
    7000:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    7004:	cmp	r0, #0
    7006:	beq.n	6fe4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7008:	cmp	r7, r6
    700a:	bne.n	6ff4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    700c:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    700e:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7010:	add	r7, r3
    7012:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    7014:	cbnz	r2, 7032 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    7016:	movs	r0, #1
    7018:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    701c:	ldr	r3, [r4, #0]
    701e:	mov	r1, r6
    7020:	ldr	r3, [r3, #72]	; 0x48
    7022:	mov	r0, r4
    7024:	blx	r3
    7026:	cmp	r0, #0
    7028:	beq.n	6fe4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    702a:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    702c:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    702e:	strb	r3, [r4, #16]
    7030:	b.n	6ff0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7032:	ldr	r3, [r4, #0]
    7034:	mov	r0, r4
    7036:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    7038:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    703c:	bx	r3
    703e:	nop

00007040 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    7040:	push	{r4, lr}
    7042:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    7044:	adds	r0, #4
    7046:	bl	85f0 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    704a:	ldrb	r0, [r4, #18]
    704c:	movs	r1, #0
    704e:	bl	8770 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    7052:	movs	r3, #1
    7054:	strb	r3, [r4, #20]
    7056:	pop	{r4, pc}

00007058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    7058:	push	{r3, r4, r5, lr}
    705a:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    705c:	movs	r1, #1
    705e:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7060:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7062:	bl	8770 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7066:	mov	r0, r5
    7068:	movs	r1, #255	; 0xff
    706a:	bl	8704 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    706e:	mov	r0, r5
    7070:	bl	8680 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7074:	movs	r3, #0
    7076:	strb	r3, [r4, #20]
    7078:	pop	{r3, r4, r5, pc}
    707a:	nop

0000707c <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    707c:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    707e:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7080:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    7082:	cbnz	r7, 7088 <SdSpiCard::isBusy()+0xc>
    7084:	bl	7040 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    7088:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    708a:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    708c:	mov	r0, r5
    708e:	bl	86c8 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    7092:	cmp	r0, #255	; 0xff
    7094:	add.w	r3, r4, #4294967295
    7098:	beq.n	70b6 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    709a:	ands.w	r4, r3, #255	; 0xff
    709e:	bne.n	708c <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    70a0:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    70a2:	cbnz	r7, 70a8 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70a4:	ldrb	r3, [r6, #20]
    70a6:	cbnz	r3, 70ac <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    70a8:	mov	r0, r4
    70aa:	pop	{r3, r4, r5, r6, r7, pc}
    70ac:	mov	r0, r6
    70ae:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    70b2:	mov	r0, r4
    70b4:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    70b6:	movs	r4, #0
    70b8:	b.n	70a2 <SdSpiCard::isBusy()+0x26>
    70ba:	nop

000070bc <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    70bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70c0:	ldr	r6, [pc, #116]	; (7138 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    70c2:	sub	sp, #12
    70c4:	ldr	r3, [r6, #0]
    70c6:	str	r3, [sp, #0]
	return ret;
    70c8:	ldr	r5, [sp, #0]
    70ca:	mov	r4, r0
    70cc:	mov	r8, r1
    70ce:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    70d0:	uxth	r5, r5
    70d2:	adds	r7, r0, #4
    70d4:	b.n	70e6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70d6:	ldr	r3, [r6, #0]
    70d8:	str	r3, [sp, #4]
	return ret;
    70da:	ldr	r3, [sp, #4]
    70dc:	uxth	r3, r3
    70de:	subs	r3, r3, r5
    70e0:	cmp.w	r3, #300	; 0x12c
    70e4:	bgt.n	710c <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    70e6:	mov	r0, r7
    70e8:	bl	86c8 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    70ec:	cmp	r0, #255	; 0xff
    70ee:	strb	r0, [r4, #21]
    70f0:	beq.n	70d6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    70f2:	cmp	r0, #254	; 0xfe
    70f4:	beq.n	7112 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    70f6:	movs	r3, #24
    70f8:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70fa:	ldrb	r0, [r4, #20]
    70fc:	cbz	r0, 7106 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    70fe:	mov	r0, r4
    7100:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    7104:	movs	r0, #0
}
    7106:	add	sp, #12
    7108:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    710c:	movs	r3, #29
    710e:	strb	r3, [r4, #19]
    7110:	b.n	70fa <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    7112:	mov	r2, r9
    7114:	mov	r1, r8
    7116:	mov	r0, r7
    7118:	bl	86e4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    711c:	strb	r0, [r4, #21]
    711e:	cbz	r0, 7126 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7120:	movs	r3, #36	; 0x24
    7122:	strb	r3, [r4, #19]
    7124:	b.n	70fa <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7126:	mov	r0, r7
    7128:	bl	86c8 <SdSpiArduinoDriver::receive()>
    712c:	mov	r0, r7
    712e:	bl	86c8 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    7132:	movs	r0, #1
    7134:	b.n	7106 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7136:	nop
    7138:	.word	0x20019d58

0000713c <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    713c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    713e:	ldr	r5, [pc, #52]	; (7174 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    7140:	sub	sp, #12
    7142:	ldr	r3, [r5, #0]
    7144:	str	r3, [sp, #0]
	return ret;
    7146:	ldr	r4, [sp, #0]
    7148:	mov	r7, r1
    714a:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    714c:	uxth	r4, r4
    714e:	b.n	715e <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7150:	ldr	r3, [r5, #0]
    7152:	str	r3, [sp, #4]
	return ret;
    7154:	ldr	r3, [sp, #4]
    7156:	uxth	r3, r3
    7158:	subs	r3, r3, r4
    715a:	cmp	r3, r7
    715c:	bgt.n	716e <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    715e:	mov	r0, r6
    7160:	bl	86c8 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7164:	cmp	r0, #255	; 0xff
    7166:	bne.n	7150 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    7168:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    716a:	add	sp, #12
    716c:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    716e:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    7170:	add	sp, #12
    7172:	pop	{r4, r5, r6, r7, pc}
    7174:	.word	0x20019d58

00007178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7178:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    717c:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    717e:	sub	sp, #8
    7180:	mov	r6, r0
    7182:	mov	r8, r1
    7184:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    7186:	cbnz	r3, 718c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    7188:	bl	7040 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    718c:	cmp.w	r8, #0
    7190:	bne.n	71e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7192:	adds	r4, r6, #4
    7194:	mov	r0, r4
    7196:	orr.w	r1, r8, #64	; 0x40
    719a:	bl	8704 <SdSpiArduinoDriver::send(unsigned char)>
    719e:	add	r7, sp, #4
    71a0:	add	r5, sp, #8
    71a2:	ldrb.w	r1, [r5, #-1]!
    71a6:	mov	r0, r4
    71a8:	bl	8704 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    71ac:	cmp	r5, r7
    71ae:	bne.n	71a2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    71b0:	cmp.w	r8, #0
    71b4:	ite	eq
    71b6:	moveq	r1, #149	; 0x95
    71b8:	movne	r1, #135	; 0x87
    71ba:	mov	r0, r4
    71bc:	bl	8704 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    71c0:	mov	r0, r4
    71c2:	bl	86c8 <SdSpiArduinoDriver::receive()>
    71c6:	movs	r5, #11
    71c8:	mov	r0, r4
    71ca:	bl	86c8 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    71ce:	lsls	r3, r0, #24
    71d0:	strb	r0, [r6, #21]
    71d2:	bmi.n	71da <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    71d4:	add	sp, #8
    71d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71da:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    71dc:	ands.w	r5, r3, #255	; 0xff
    71e0:	bne.n	71c8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    71e2:	add	sp, #8
    71e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    71e8:	mov.w	r1, #300	; 0x12c
    71ec:	mov	r0, r6
    71ee:	bl	713c <SdSpiCard::waitNotBusy(unsigned short)>
    71f2:	b.n	7192 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

000071f4 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    71f4:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    71f6:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    71f8:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    71fa:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    71fc:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    71fe:	blx	r3
  if (cardCommand(CMD58, 0)) {
    7200:	mov	r0, r5
    7202:	movs	r2, #0
    7204:	movs	r1, #58	; 0x3a
    7206:	bl	7178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    720a:	cbnz	r0, 7228 <SdSpiCard::readOCR(unsigned long*)+0x34>
    720c:	adds	r7, r5, #4
    720e:	adds	r4, r6, #4
    7210:	mov	r0, r7
    7212:	bl	86c8 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    7216:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    721a:	cmp	r6, r4
    721c:	bne.n	7210 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    721e:	ldrb	r4, [r5, #20]
    7220:	cbnz	r4, 723e <SdSpiCard::readOCR(unsigned long*)+0x4a>
    7222:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    7224:	mov	r0, r4
    7226:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7228:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    722a:	movs	r3, #18
    722c:	strb	r3, [r5, #19]
    722e:	cmp	r4, #0
    7230:	beq.n	7224 <SdSpiCard::readOCR(unsigned long*)+0x30>
    7232:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7234:	movs	r4, #0
    7236:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    723a:	mov	r0, r4
    723c:	pop	{r3, r4, r5, r6, r7, pc}
    723e:	mov	r0, r5
    7240:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7244:	mov	r0, r4
    7246:	pop	{r3, r4, r5, r6, r7, pc}

00007248 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7248:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    724a:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    724c:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    724e:	mov	r4, r0
    7250:	mov	r5, r1
    7252:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7254:	blx	r3
  if (cardCommand(cmd, 0)) {
    7256:	mov	r1, r5
    7258:	mov	r0, r4
    725a:	movs	r2, #0
    725c:	bl	7178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7260:	cbz	r0, 7274 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    7262:	movs	r3, #27
    7264:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7266:	ldrb	r0, [r4, #20]
    7268:	cbz	r0, 7272 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    726a:	mov	r0, r4
    726c:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7270:	movs	r0, #0
}
    7272:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7274:	mov	r1, r6
    7276:	movs	r2, #16
    7278:	mov	r0, r4
    727a:	bl	70bc <SdSpiCard::readData(unsigned char*, unsigned int)>
    727e:	cmp	r0, #0
    7280:	beq.n	7266 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7282:	ldrb	r5, [r4, #20]
    7284:	cmp	r5, #0
    7286:	beq.n	7272 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    7288:	mov	r0, r4
    728a:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    728e:	mov	r0, r5
    7290:	pop	{r4, r5, r6, pc}
    7292:	nop

00007294 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7294:	mov	r2, r1
    7296:	movs	r1, #9
    7298:	b.w	7248 <SdSpiCard::readRegister(unsigned char, void*)>

0000729c <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    729c:	mov	r2, r1
    729e:	movs	r1, #10
    72a0:	b.w	7248 <SdSpiCard::readRegister(unsigned char, void*)>

000072a4 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    72a4:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    72a6:	ldr	r3, [r0, #0]
    72a8:	ldr	r2, [pc, #140]	; (7338 <SdSpiCard::sectorCount()+0x94>)
    72aa:	ldr	r3, [r3, #52]	; 0x34
    72ac:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    72ae:	sub	sp, #20
    72b0:	bne.n	7312 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    72b2:	mov	r2, sp
    72b4:	movs	r1, #9
    72b6:	bl	7248 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    72ba:	cbz	r0, 72cc <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    72bc:	ldrb.w	r3, [sp]
    72c0:	ands.w	r3, r3, #192	; 0xc0
    72c4:	beq.n	72d0 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    72c6:	cmp	r3, #64	; 0x40
    72c8:	beq.n	7318 <SdSpiCard::sectorCount()+0x74>
    72ca:	movs	r0, #0
}
    72cc:	add	sp, #20
    72ce:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    72d0:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    72d4:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    72d8:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    72dc:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    72e0:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    72e4:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    72e8:	and.w	r4, r4, #3
    72ec:	lsls	r4, r4, #1
    72ee:	lsls	r2, r2, #2
    72f0:	and.w	r3, r3, #3
    72f4:	orr.w	r0, r4, r0, lsr #7
    72f8:	and.w	r1, r1, #15
    72fc:	orr.w	r3, r2, r3, lsl #10
    7300:	add	r0, r1
    7302:	orr.w	r3, r3, r5, lsr #6
    7306:	adds	r3, #1
    7308:	subs	r0, #7
    730a:	lsl.w	r0, r3, r0
    730e:	add	sp, #20
    7310:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7312:	mov	r1, sp
    7314:	blx	r3
    7316:	b.n	72ba <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7318:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    731c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7320:	ldrb.w	r0, [sp, #8]
    7324:	adds	r2, r3, #1
    7326:	and.w	r3, r1, #63	; 0x3f
    732a:	add.w	r3, r2, r3, lsl #16
    732e:	add.w	r0, r3, r0, lsl #8
    7332:	lsls	r0, r0, #10
}
    7334:	add	sp, #20
    7336:	pop	{r4, r5, pc}
    7338:	.word	0x00007295

0000733c <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    733c:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    733e:	ldr	r3, [r0, #0]
    7340:	ldr	r5, [pc, #68]	; (7388 <SdSpiCard::readStart(unsigned long)+0x4c>)
    7342:	ldr	r3, [r3, #64]	; 0x40
    7344:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    7346:	sub	sp, #12
    7348:	mov	r4, r0
    734a:	mov	r2, r1
    734c:	bne.n	737e <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    734e:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    7350:	cmp	r0, #3
    sector <<= 9;
    7352:	it	ne
    7354:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    7356:	movs	r1, #18
    7358:	mov	r0, r4
    735a:	bl	7178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    735e:	cbz	r0, 7378 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7360:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7362:	movs	r3, #12
    7364:	strb	r3, [r4, #19]
    7366:	cbnz	r0, 736c <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    7368:	add	sp, #12
    736a:	pop	{r4, r5, pc}
    736c:	mov	r0, r4
    736e:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7372:	movs	r0, #0
    7374:	add	sp, #12
    7376:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    7378:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    737a:	add	sp, #12
    737c:	pop	{r4, r5, pc}
    737e:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    7380:	blx	r3
    7382:	ldr	r2, [sp, #4]
    7384:	b.n	7350 <SdSpiCard::readStart(unsigned long)+0x14>
    7386:	nop
    7388:	.word	0x00006fa1

0000738c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    738c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7390:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7392:	ldrb	r1, [r0, #16]
    7394:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7396:	mov	r6, r0
    7398:	mov	r4, r2
    739a:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    739c:	beq.n	73ae <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    739e:	ldr	r3, [r6, #0]
    73a0:	mov	r0, r6
    73a2:	ldr	r3, [r3, #20]
    73a4:	blx	r3
    73a6:	cbnz	r0, 73e2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    73a8:	movs	r0, #0
    73aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    73ae:	ldr	r3, [r0, #12]
    73b0:	cmp	r3, r5
    73b2:	bne.n	739e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    73b4:	movs	r5, #0
    73b6:	cbz	r7, 73d2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    73b8:	mov	r1, r4
    73ba:	mov.w	r2, #512	; 0x200
    73be:	mov	r0, r6
    73c0:	bl	70bc <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    73c4:	adds	r5, #1
    73c6:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    73ca:	cmp	r0, #0
    73cc:	beq.n	73a8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    73ce:	cmp	r7, r5
    73d0:	bne.n	73b8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    73d2:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    73d4:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    73d6:	add	r7, r3
    73d8:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    73da:	cbnz	r2, 73f6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    73dc:	movs	r0, #1
    73de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    73e2:	mov	r1, r5
    73e4:	mov	r0, r6
    73e6:	bl	733c <SdSpiCard::readStart(unsigned long)>
    73ea:	cmp	r0, #0
    73ec:	beq.n	73a8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    73ee:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    73f0:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    73f2:	strb	r3, [r6, #16]
    73f4:	b.n	73b4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    73f6:	ldr	r3, [r6, #0]
    73f8:	mov	r0, r6
    73fa:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    73fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7400:	bx	r3
    7402:	nop

00007404 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7404:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    7406:	movs	r2, #0
    7408:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    740a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    740c:	bl	7178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7410:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    7412:	cbz	r0, 741e <SdSpiCard::readStop()+0x1a>
    7414:	movs	r3, #9
    7416:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7418:	cbnz	r4, 7430 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    741a:	mov	r0, r4
    741c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    741e:	cbnz	r4, 7426 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    7420:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    7422:	mov	r0, r4
    7424:	pop	{r3, r4, r5, pc}
    7426:	mov	r0, r5
    7428:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    742c:	mov	r0, r4
    742e:	pop	{r3, r4, r5, pc}
    7430:	mov	r0, r5
    7432:	movs	r4, #0
    7434:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7438:	mov	r0, r4
    743a:	pop	{r3, r4, r5, pc}

0000743c <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    743c:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    743e:	ldr	r3, [r0, #0]
    7440:	ldr	r5, [pc, #68]	; (7488 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    7442:	ldr	r3, [r3, #64]	; 0x40
    7444:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    7446:	sub	sp, #12
    7448:	mov	r4, r0
    744a:	mov	r2, r1
    744c:	bne.n	747e <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    744e:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7450:	cmp	r0, #3
    sector <<= 9;
    7452:	it	ne
    7454:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    7456:	movs	r1, #25
    7458:	mov	r0, r4
    745a:	bl	7178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    745e:	cbz	r0, 7478 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7460:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7462:	movs	r3, #14
    7464:	strb	r3, [r4, #19]
    7466:	cbnz	r0, 746c <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    7468:	add	sp, #12
    746a:	pop	{r4, r5, pc}
    746c:	mov	r0, r4
    746e:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7472:	movs	r0, #0
    7474:	add	sp, #12
    7476:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    7478:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    747a:	add	sp, #12
    747c:	pop	{r4, r5, pc}
    747e:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7480:	blx	r3
    7482:	ldr	r2, [sp, #4]
    7484:	b.n	7450 <SdSpiCard::writeStart(unsigned long)+0x14>
    7486:	nop
    7488:	.word	0x00006fa1

0000748c <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    748c:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    748e:	ldr	r3, [r0, #0]
    7490:	ldr	r7, [pc, #172]	; (7540 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    7492:	ldr	r3, [r3, #52]	; 0x34
    7494:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7496:	sub	sp, #20
    7498:	mov	r4, r0
    749a:	mov	r5, r1
    749c:	mov	r6, r2
    749e:	bne.n	74fc <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    74a0:	mov	r2, sp
    74a2:	movs	r1, #9
    74a4:	bl	7248 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    74a8:	cbz	r0, 74d0 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    74aa:	ldrb.w	r3, [sp, #10]
    74ae:	lsls	r2, r3, #25
    74b0:	bpl.n	74e0 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    74b2:	ldrb	r3, [r4, #22]
    74b4:	cmp	r3, #3
    firstSector <<= 9;
    74b6:	it	ne
    74b8:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    74ba:	mov	r2, r5
    74bc:	mov.w	r1, #32
    74c0:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    74c2:	it	ne
    74c4:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    74c6:	bl	7178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    74ca:	cbz	r0, 7502 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    74cc:	movs	r3, #37	; 0x25
    74ce:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    74d0:	ldrb	r0, [r4, #20]
    74d2:	cbz	r0, 74dc <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    74d4:	mov	r0, r4
    74d6:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    74da:	movs	r0, #0
}
    74dc:	add	sp, #20
    74de:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    74e0:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    74e4:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    74e8:	lsls	r3, r3, #1
    74ea:	adds	r2, r6, #1
    74ec:	orr.w	r3, r3, r1, lsr #7
    74f0:	orrs	r2, r5
    74f2:	tst	r3, r2
    74f4:	beq.n	74b2 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    74f6:	movs	r3, #38	; 0x26
    74f8:	strb	r3, [r4, #19]
    74fa:	b.n	74d0 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    74fc:	mov	r1, sp
    74fe:	blx	r3
    7500:	b.n	74a8 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    7502:	mov	r2, r6
    7504:	movs	r1, #33	; 0x21
    7506:	mov	r0, r4
    7508:	bl	7178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    750c:	cmp	r0, #0
    750e:	bne.n	74cc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    7510:	mov	r2, r0
    7512:	movs	r1, #38	; 0x26
    7514:	mov	r0, r4
    7516:	bl	7178 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    751a:	cmp	r0, #0
    751c:	bne.n	74cc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    751e:	movw	r1, #10000	; 0x2710
    7522:	mov	r0, r4
    7524:	bl	713c <SdSpiCard::waitNotBusy(unsigned short)>
    7528:	cbnz	r0, 7530 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    752a:	movs	r3, #39	; 0x27
    752c:	strb	r3, [r4, #19]
    752e:	b.n	74d0 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7530:	ldrb	r5, [r4, #20]
    7532:	cmp	r5, #0
    7534:	beq.n	74dc <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7536:	mov	r0, r4
    7538:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    753c:	mov	r0, r5
    753e:	b.n	74dc <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    7540:	.word	0x00007295

00007544 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    7544:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7546:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    754a:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    754c:	bl	713c <SdSpiCard::waitNotBusy(unsigned short)>
    7550:	mov	r6, r0
    7552:	cbnz	r0, 756c <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7554:	ldrb	r4, [r5, #20]
    7556:	movs	r3, #30
    7558:	strb	r3, [r5, #19]
    755a:	cbnz	r4, 7560 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    755c:	mov	r0, r4
    755e:	pop	{r4, r5, r6, pc}
    7560:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    7562:	mov	r4, r6
    7564:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    7568:	mov	r0, r4
    756a:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    756c:	movs	r1, #253	; 0xfd
    756e:	adds	r0, r5, #4
    7570:	bl	8704 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7574:	ldrb	r4, [r5, #20]
    7576:	cbnz	r4, 757e <SdSpiCard::writeStop()+0x3a>
    7578:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    757a:	mov	r0, r4
    757c:	pop	{r4, r5, r6, pc}
    757e:	mov	r0, r5
    7580:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7584:	b.n	755c <SdSpiCard::writeStop()+0x18>
    7586:	nop

00007588 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    7588:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    758a:	ldrb	r3, [r0, #16]
    758c:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    758e:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7590:	beq.n	759e <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7592:	cmp	r3, #2
    7594:	beq.n	75aa <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7596:	movs	r3, #0
    7598:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    759a:	movs	r0, #1
    759c:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    759e:	bl	7404 <SdSpiCard::readStop()>
    75a2:	cmp	r0, #0
    75a4:	bne.n	7596 <SdSpiCard::syncDevice()+0xe>
      return false;
    75a6:	movs	r0, #0
    75a8:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    75aa:	bl	7544 <SdSpiCard::writeStop()>
    75ae:	cmp	r0, #0
    75b0:	bne.n	7596 <SdSpiCard::syncDevice()+0xe>
    75b2:	b.n	75a6 <SdSpiCard::syncDevice()+0x1e>

000075b4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    75b4:	push	{r4, r5, r6, lr}
    75b6:	adds	r4, r0, #4
    75b8:	mov	r6, r2
    75ba:	mov	r5, r0
    75bc:	mov	r0, r4
    75be:	bl	8704 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    75c2:	mov.w	r2, #512	; 0x200
    75c6:	mov	r1, r6
    75c8:	mov	r0, r4
    75ca:	bl	871c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    75ce:	mov	r0, r4
    75d0:	movs	r1, #255	; 0xff
    75d2:	bl	8704 <SdSpiArduinoDriver::send(unsigned char)>
    75d6:	mov	r0, r4
    75d8:	movs	r1, #255	; 0xff
    75da:	bl	8704 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    75de:	mov	r0, r4
    75e0:	bl	86c8 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    75e4:	and.w	r3, r0, #31
    75e8:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    75ea:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    75ec:	beq.n	7602 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75ee:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    75f0:	movs	r3, #31
    75f2:	strb	r3, [r5, #19]
    75f4:	cbnz	r0, 75f8 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    75f6:	pop	{r4, r5, r6, pc}
    75f8:	mov	r0, r5
    75fa:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    75fe:	movs	r0, #0
    7600:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    7602:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7604:	pop	{r4, r5, r6, pc}
    7606:	nop

00007608 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7608:	push	{r3, r4, r5, lr}
    760a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    760c:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7610:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7612:	bl	713c <SdSpiCard::waitNotBusy(unsigned short)>
    7616:	cbnz	r0, 762a <SdSpiCard::writeData(unsigned char const*)+0x22>
    7618:	movs	r3, #35	; 0x23
    761a:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    761c:	ldrb	r0, [r4, #20]
    761e:	cbz	r0, 7628 <SdSpiCard::writeData(unsigned char const*)+0x20>
    7620:	mov	r0, r4
    7622:	bl	7058 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    7626:	movs	r0, #0
}
    7628:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    762a:	mov	r2, r5
    762c:	movs	r1, #252	; 0xfc
    762e:	mov	r0, r4
    7630:	bl	75b4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    7634:	cmp	r0, #0
    7636:	beq.n	761c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    7638:	pop	{r3, r4, r5, pc}
    763a:	nop

0000763c <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    763c:	push	{r4}
  SDHC_IRQSIGEN = 0;
    763e:	ldr	r4, [pc, #28]	; (765c <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    7640:	ldr	r2, [pc, #28]	; (7660 <sdIrs()+0x24>)
    7642:	ldr	r1, [pc, #32]	; (7664 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7644:	ldr	r0, [pc, #32]	; (7668 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    7646:	movs	r3, #0
    7648:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    764a:	ldr	r4, [r2, #0]
    764c:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    764e:	ldr	r1, [r1, #0]
    7650:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    7652:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7656:	strb	r3, [r0, #0]
}
    7658:	bx	lr
    765a:	nop
    765c:	.word	0x400b1038
    7660:	.word	0x400b1030
    7664:	.word	0x20019d20
    7668:	.word	0x20019d38

0000766c <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    766c:	ldr	r3, [pc, #12]	; (767c <isBusyCommandComplete()+0x10>)
    766e:	ldr	r0, [pc, #16]	; (7680 <isBusyCommandComplete()+0x14>)
    7670:	ldr	r3, [r3, #0]
    7672:	ands	r0, r3
}
    7674:	clz	r0, r0
    7678:	lsrs	r0, r0, #5
    767a:	bx	lr
    767c:	.word	0x400b1030
    7680:	.word	0x000f0001

00007684 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7684:	ldr	r3, [pc, #8]	; (7690 <isBusyCommandInhibit()+0xc>)
    7686:	ldr	r0, [r3, #0]
}
    7688:	and.w	r0, r0, #1
    768c:	bx	lr
    768e:	nop
    7690:	.word	0x400b1024

00007694 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7694:	ldr	r3, [pc, #4]	; (769c <isBusyDMA()+0x8>)
    7696:	ldrb	r0, [r3, #0]
}
    7698:	bx	lr
    769a:	nop
    769c:	.word	0x20019d38

000076a0 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    76a0:	ldr	r3, [pc, #12]	; (76b0 <isBusyFifoRead()+0x10>)
    76a2:	ldr	r0, [r3, #0]
    76a4:	eor.w	r0, r0, #2048	; 0x800
}
    76a8:	ubfx	r0, r0, #11, #1
    76ac:	bx	lr
    76ae:	nop
    76b0:	.word	0x400b1024

000076b4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    76b4:	ldr	r3, [pc, #12]	; (76c4 <isBusyFifoWrite()+0x10>)
    76b6:	ldr	r0, [r3, #0]
    76b8:	eor.w	r0, r0, #1024	; 0x400
}
    76bc:	ubfx	r0, r0, #10, #1
    76c0:	bx	lr
    76c2:	nop
    76c4:	.word	0x400b1024

000076c8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    76c8:	ldr	r3, [pc, #12]	; (76d8 <isBusyTransferComplete()+0x10>)
    76ca:	ldr	r0, [pc, #16]	; (76dc <isBusyTransferComplete()+0x14>)
    76cc:	ldr	r3, [r3, #0]
    76ce:	ands	r0, r3
}
    76d0:	clz	r0, r0
    76d4:	lsrs	r0, r0, #5
    76d6:	bx	lr
    76d8:	.word	0x400b1030
    76dc:	.word	0x117f0002

000076e0 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    76e0:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    76e4:	ldr	r3, [pc, #176]	; (7798 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    76e6:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    76ea:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    76ec:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    76ee:	bhi.n	7788 <setSdclk(unsigned long)+0xa8>
    76f0:	ldr	r5, [pc, #168]	; (779c <setSdclk(unsigned long)+0xbc>)
    76f2:	movs	r2, #8
    76f4:	movs	r1, #1
    sdclkfs <<= 1;
    76f6:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    76f8:	lsls	r3, r1, #4
    76fa:	udiv	r3, r5, r3
    76fe:	cmp	r0, r3
    7700:	ldr	r4, [pc, #152]	; (779c <setSdclk(unsigned long)+0xbc>)
    7702:	bcs.n	7780 <setSdclk(unsigned long)+0xa0>
    7704:	subs	r2, #1
    7706:	bne.n	76f6 <setSdclk(unsigned long)+0x16>
    7708:	udiv	r4, r4, r1
    770c:	lsrs	r3, r1, #1
    770e:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7710:	cmp	r0, r4
    7712:	bcs.n	7790 <setSdclk(unsigned long)+0xb0>
    7714:	ldr	r6, [pc, #132]	; (779c <setSdclk(unsigned long)+0xbc>)
    7716:	lsls	r3, r1, #1
    7718:	movs	r2, #1
    771a:	b.n	771e <setSdclk(unsigned long)+0x3e>
    771c:	mov	r3, r4
    771e:	udiv	r4, r6, r3
    7722:	cmp	r0, r4
    dvs++;
    7724:	add.w	r5, r2, #1
    7728:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    772c:	bcs.n	777c <setSdclk(unsigned long)+0x9c>
    772e:	cmp	r5, #16
    7730:	mov	r2, r5
    7732:	bne.n	771c <setSdclk(unsigned long)+0x3c>
    7734:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7736:	ldr	r6, [pc, #104]	; (77a0 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    7738:	ldr	r4, [pc, #104]	; (77a4 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    773a:	ldr	r0, [pc, #96]	; (779c <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    773c:	ldr	r1, [pc, #104]	; (77a8 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    773e:	mov.w	r5, #1000	; 0x3e8
    7742:	mul.w	r3, r5, r3
    7746:	udiv	r3, r0, r3
    774a:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    774c:	ldr	r3, [r4, #0]
    774e:	bic.w	r3, r3, #8
    7752:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    7754:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    7756:	bic.w	r3, r0, #1044480	; 0xff000
    775a:	bic.w	r3, r3, #4080	; 0xff0
    775e:	orr.w	r3, r3, #917504	; 0xe0000
    7762:	orrs	r3, r7
    7764:	orrs	r2, r3
    7766:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    7768:	ldr	r3, [r1, #0]
    776a:	lsls	r3, r3, #28
    776c:	bpl.n	7768 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    776e:	ldr	r2, [pc, #52]	; (77a4 <setSdclk(unsigned long)+0xc4>)
    7770:	ldr	r3, [r2, #0]
    7772:	orr.w	r3, r3, #8
    7776:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    7778:	pop	{r4, r5, r6, r7}
    777a:	bx	lr
    777c:	lsls	r2, r2, #4
    777e:	b.n	7736 <setSdclk(unsigned long)+0x56>
    7780:	udiv	r4, r4, r1
    7784:	lsls	r7, r1, #7
    7786:	b.n	7710 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7788:	ldr	r4, [pc, #16]	; (779c <setSdclk(unsigned long)+0xbc>)
    778a:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    778c:	movs	r1, #1
    778e:	b.n	7710 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7790:	mov	r3, r1
    7792:	movs	r2, #0
    7794:	b.n	7736 <setSdclk(unsigned long)+0x56>
    7796:	nop
    7798:	.word	0x005b8d7f
    779c:	.word	0x05b8d800
    77a0:	.word	0x20019d3c
    77a4:	.word	0x400b102c
    77a8:	.word	0x400b1024

000077ac <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    77ac:	ldr	r3, [pc, #4]	; (77b4 <SdioCard::errorCode() const+0x8>)
}
    77ae:	ldrb	r0, [r3, #0]
    77b0:	bx	lr
    77b2:	nop
    77b4:	.word	0x20013ad8

000077b8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    77b8:	ldr	r3, [pc, #4]	; (77c0 <SdioCard::errorData() const+0x8>)
    77ba:	ldr	r0, [r3, #0]
}
    77bc:	bx	lr
    77be:	nop
    77c0:	.word	0x20019d20

000077c4 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    77c4:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    77c6:	ldr	r4, [pc, #20]	; (77dc <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    77c8:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    77ca:	ldmia	r4!, {r0, r1, r2, r3}
    77cc:	str	r0, [r5, #0]
    77ce:	str	r1, [r5, #4]
    77d0:	str	r2, [r5, #8]
    77d2:	str	r3, [r5, #12]
  return true;
}
    77d4:	movs	r0, #1
    77d6:	pop	{r4, r5}
    77d8:	bx	lr
    77da:	nop
    77dc:	.word	0x20019d00

000077e0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    77e0:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    77e2:	ldr	r4, [pc, #20]	; (77f8 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    77e4:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    77e6:	ldmia	r4!, {r0, r1, r2, r3}
    77e8:	str	r0, [r5, #0]
    77ea:	str	r1, [r5, #4]
    77ec:	str	r2, [r5, #8]
    77ee:	str	r3, [r5, #12]
  return true;
}
    77f0:	movs	r0, #1
    77f2:	pop	{r4, r5}
    77f4:	bx	lr
    77f6:	nop
    77f8:	.word	0x20019d28

000077fc <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    77fc:	ldr	r3, [pc, #8]	; (7808 <SdioCard::readOCR(unsigned long*)+0xc>)
    77fe:	ldr	r3, [r3, #0]
    7800:	str	r3, [r1, #0]
  return true;
}
    7802:	movs	r0, #1
    7804:	bx	lr
    7806:	nop
    7808:	.word	0x20019d18

0000780c <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    780c:	bx	lr
    780e:	nop

00007810 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    7810:	push	{r3, r4, r5, r6, r7, lr}
    7812:	mov	r5, r0
  uint32_t m = micros();
    7814:	bl	8e24 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7818:	ldr	r7, [pc, #24]	; (7834 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    781a:	mov	r6, r0
    781c:	b.n	7828 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    781e:	bl	8e24 <micros>
    7822:	subs	r0, r0, r6
    7824:	cmp	r0, r7
    7826:	bhi.n	7830 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7828:	blx	r5
    782a:	mov	r4, r0
    782c:	cmp	r0, #0
    782e:	bne.n	781e <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    7830:	mov	r0, r4
    7832:	pop	{r3, r4, r5, r6, r7, pc}
    7834:	.word	0x000f4240

00007838 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7838:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    783c:	ldr.w	r8, [pc, #64]	; 7880 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7840:	ldr	r7, [pc, #56]	; (787c <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    7842:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7846:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    7848:	bl	8e24 <micros>
    784c:	mov	r6, r0
    784e:	b.n	785e <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7850:	bl	8e24 <micros>
    7854:	subs	r0, r0, r6
    7856:	cmp	r0, r7
    7858:	bhi.n	7870 <yieldTimeout(bool (*)())+0x38>
    785a:	bl	9e44 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    785e:	blx	r5
    7860:	mov	r4, r0
    7862:	cmp	r0, #0
    7864:	bne.n	7850 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    7866:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    786a:	mov	r0, r4
    786c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    7870:	movs	r3, #0
    7872:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    7876:	mov	r0, r4
    7878:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    787c:	.word	0x000f4240
    7880:	.word	0x20019d10

00007884 <SdioCard::~SdioCard()>:
    7884:	push	{r4, lr}
    7886:	movs	r1, #12
    7888:	mov	r4, r0
    788a:	bl	a5dc <operator delete(void*, unsigned int)>
    788e:	mov	r0, r4
    7890:	pop	{r4, pc}
    7892:	nop

00007894 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7894:	ldr	r3, [pc, #20]	; (78ac <SdioCard::type() const+0x18>)
    7896:	ldrb	r3, [r3, #0]
    7898:	cbz	r3, 78a8 <SdioCard::type() const+0x14>
    789a:	ldr	r3, [pc, #20]	; (78b0 <SdioCard::type() const+0x1c>)
    789c:	ldrb	r3, [r3, #0]
    789e:	cmp	r3, #0
    78a0:	ite	ne
    78a2:	movne	r0, #3
    78a4:	moveq	r0, #2
    78a6:	bx	lr
    78a8:	movs	r0, #1
}
    78aa:	bx	lr
    78ac:	.word	0x20019cfc
    78b0:	.word	0x20019d14

000078b4 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    78b4:	push	{r3, r4, r5, lr}
    78b6:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    78b8:	ldr	r0, [pc, #60]	; (78f8 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    78ba:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    78bc:	bl	7810 <waitTimeout(bool (*)())>
    78c0:	cbz	r0, 78c6 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    78c2:	movs	r0, #0
    78c4:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    78c6:	ldr	r2, [pc, #52]	; (78fc <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    78c8:	ldr	r3, [pc, #52]	; (7900 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    78ca:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    78cc:	ldr	r0, [pc, #52]	; (7904 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    78ce:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    78d0:	bl	7810 <waitTimeout(bool (*)())>
    78d4:	cmp	r0, #0
    78d6:	bne.n	78c2 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    78d8:	ldr	r2, [pc, #44]	; (7908 <cardCommand(unsigned long, unsigned long)+0x54>)
    78da:	ldr	r3, [pc, #48]	; (790c <cardCommand(unsigned long, unsigned long)+0x58>)
    78dc:	ldr	r1, [r2, #0]
    78de:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    78e0:	ldr	r1, [r3, #0]
    78e2:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    78e4:	ldr	r2, [r3, #0]
    78e6:	lsls	r2, r2, #31
    78e8:	bpl.n	78c2 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    78ea:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    78ec:	tst.w	r3, #983040	; 0xf0000
    78f0:	bne.n	78c2 <cardCommand(unsigned long, unsigned long)+0xe>
    78f2:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    78f4:	pop	{r3, r4, r5, pc}
    78f6:	nop
    78f8:	.word	0x00007685
    78fc:	.word	0x400b1008
    7900:	.word	0x400b100c
    7904:	.word	0x0000766d
    7908:	.word	0x400b1030
    790c:	.word	0x20019d20

00007910 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    7910:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7912:	ldr	r3, [pc, #16]	; (7924 <SdioCard::status()+0x14>)
    7914:	ldr	r0, [pc, #16]	; (7928 <SdioCard::status()+0x18>)
    7916:	ldr	r1, [r3, #0]
    7918:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    791c:	cbz	r0, 7922 <SdioCard::status()+0x12>
    791e:	ldr	r3, [pc, #12]	; (792c <SdioCard::status()+0x1c>)
    7920:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    7922:	pop	{r3, pc}
    7924:	.word	0x20019d1c
    7928:	.word	0x0d1a0000
    792c:	.word	0x400b1010

00007930 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7930:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7932:	ldr	r3, [pc, #84]	; (7988 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7934:	sub	sp, #20
    7936:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7938:	ldr	r1, [r3, #0]
    793a:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    793e:	cbz	r0, 7982 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    7940:	ldr	r2, [pc, #72]	; (798c <readReg16(unsigned long, void*)+0x5c>)
    7942:	ldr	r3, [pc, #76]	; (7990 <readReg16(unsigned long, void*)+0x60>)
    7944:	ldr	r2, [r2, #0]
    7946:	str	r2, [sp, #0]
    7948:	ldr	r1, [r3, #0]
    794a:	str	r1, [sp, #4]
    794c:	ldr	r1, [r3, #4]
    794e:	str	r1, [sp, #8]
    7950:	adds	r3, #8
    7952:	add.w	r4, r5, #15
    7956:	ldr	r3, [r3, #0]
    7958:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    795a:	movs	r3, #0
    795c:	b.n	7962 <readReg16(unsigned long, void*)+0x32>
    795e:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7962:	and.w	r1, r3, #3
    7966:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7968:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    796a:	lsrs	r2, r1
    796c:	add.w	lr, sp, #16
    7970:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7974:	cmp	r3, #15
    7976:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7978:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    797c:	bne.n	795e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    797e:	movs	r3, #0
    7980:	strb	r3, [r5, #15]
  return true;
}
    7982:	add	sp, #20
    7984:	pop	{r4, r5, pc}
    7986:	nop
    7988:	.word	0x20019d1c
    798c:	.word	0x400b1010
    7990:	.word	0x400b1014

00007994 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    7994:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    7996:	ldr	r3, [pc, #28]	; (79b4 <isBusyCMD13()+0x20>)
    7998:	ldr	r0, [pc, #28]	; (79b8 <isBusyCMD13()+0x24>)
    799a:	ldr	r1, [r3, #0]
    799c:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    79a0:	cbz	r0, 79b0 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    79a2:	ldr	r3, [pc, #24]	; (79bc <isBusyCMD13()+0x28>)
    79a4:	ldr	r0, [r3, #0]
    79a6:	eor.w	r0, r0, #256	; 0x100
    79aa:	ubfx	r0, r0, #8, #1
    79ae:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    79b0:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    79b2:	pop	{r3, pc}
    79b4:	.word	0x20019d1c
    79b8:	.word	0x0d1a0000
    79bc:	.word	0x400b1010

000079c0 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    79c0:	ldr	r3, [pc, #16]	; (79d4 <SdioCard::isBusy()+0x14>)
    79c2:	ldr	r3, [r3, #0]
    79c4:	cbz	r3, 79c8 <SdioCard::isBusy()+0x8>
    79c6:	bx	r3
    79c8:	ldr	r3, [pc, #12]	; (79d8 <SdioCard::isBusy()+0x18>)
    79ca:	ldrb	r0, [r3, #0]
    79cc:	cbnz	r0, 79d0 <SdioCard::isBusy()+0x10>
}
    79ce:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    79d0:	b.w	7994 <isBusyCMD13()>
    79d4:	.word	0x20019d10
    79d8:	.word	0x20019d24

000079dc <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    79dc:	ldr	r3, [pc, #20]	; (79f4 <waitDmaStatus() [clone .part.6]+0x18>)
    79de:	ldr	r0, [r3, #0]
    79e0:	ands.w	r0, r0, #2
    79e4:	beq.n	79f2 <waitDmaStatus() [clone .part.6]+0x16>
    79e6:	ldr	r3, [r3, #0]
    79e8:	ldr	r0, [pc, #12]	; (79f8 <waitDmaStatus() [clone .part.6]+0x1c>)
    79ea:	ands	r0, r3
    79ec:	clz	r0, r0
    79f0:	lsrs	r0, r0, #5
}
    79f2:	bx	lr
    79f4:	.word	0x20019d20
    79f8:	.word	0x117f0000

000079fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    79fc:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    79fe:	lsls	r4, r2, #30
    7a00:	bne.n	7a04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    7a02:	cbnz	r3, 7a16 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a04:	ldr	r1, [pc, #124]	; (7a84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7a06:	ldr	r3, [pc, #128]	; (7a88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a08:	movs	r0, #36	; 0x24
  m_errorLine = line;
    7a0a:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a0e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7a10:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7a12:	movs	r0, #0
    7a14:	pop	{r3, r4, r5, r6, r7, pc}
    7a16:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7a18:	ldr	r0, [pc, #112]	; (7a8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    7a1a:	mov	r4, r3
    7a1c:	mov	r7, r1
    7a1e:	mov	r5, r2
    7a20:	bl	7838 <yieldTimeout(bool (*)())>
    7a24:	cbnz	r0, 7a6e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7a26:	ldr	r1, [pc, #104]	; (7a90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7a28:	ldr	r2, [pc, #104]	; (7a94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7a2a:	ldr.w	lr, [pc, #128]	; 7aac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    7a2e:	mov.w	ip, #1
    7a32:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7a36:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7a38:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7a3a:	ldr	r4, [pc, #92]	; (7a98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7a3c:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7a3e:	ldr	r2, [pc, #92]	; (7a9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a40:	ldr	r1, [pc, #92]	; (7aa0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    7a42:	ldr	r0, [pc, #96]	; (7aa4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7a44:	orr.w	r3, r3, #512	; 0x200
    7a48:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7a4a:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a4c:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7a4e:	cbnz	r3, 7a7e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    7a50:	lsls	r1, r7, #9
    7a52:	mov	r0, r6
    7a54:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    7a58:	cmp	r0, #0
    7a5a:	beq.n	7a12 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7a5c:	ldr	r0, [pc, #72]	; (7aa8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    7a5e:	bl	7838 <yieldTimeout(bool (*)())>
    7a62:	cmp	r0, #0
    7a64:	bne.n	7a12 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7a66:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7a6a:	b.w	79dc <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a6e:	ldr	r1, [pc, #20]	; (7a84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7a70:	ldr	r3, [pc, #20]	; (7a88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a72:	movs	r0, #10
  m_errorLine = line;
    7a74:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a78:	strb	r0, [r1, #0]
  m_errorLine = line;
    7a7a:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7a7c:	b.n	7a12 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7a7e:	mov	r1, r7
    7a80:	b.n	7a52 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    7a82:	nop
    7a84:	.word	0x20013ad8
    7a88:	.word	0x20019d40
    7a8c:	.word	0x00007995
    7a90:	.word	0x20019d20
    7a94:	.word	0x400b1000
    7a98:	.word	0x400b1004
    7a9c:	.word	0x20019d14
    7aa0:	.word	0x400b1038
    7aa4:	.word	0x117f0002
    7aa8:	.word	0x00007695
    7aac:	.word	0x20019d38

00007ab0 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7ab0:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7ab2:	ldr	r1, [pc, #100]	; (7b18 <SdioCard::sectorCount()+0x68>)
    7ab4:	ldrb	r3, [r1, #0]
    7ab6:	ands.w	r3, r3, #192	; 0xc0
    7aba:	beq.n	7ae0 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7abc:	cmp	r3, #64	; 0x40
    7abe:	beq.n	7ac6 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7ac0:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    7ac2:	pop	{r4, r5, r6}
    7ac4:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7ac6:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7ac8:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7aca:	ldrb	r0, [r1, #8]
    7acc:	adds	r2, r3, #1
    7ace:	and.w	r3, r4, #63	; 0x3f
    7ad2:	add.w	r3, r2, r3, lsl #16
    7ad6:	add.w	r0, r3, r0, lsl #8
    7ada:	lsls	r0, r0, #10
    7adc:	pop	{r4, r5, r6}
    7ade:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7ae0:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7ae2:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7ae4:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7ae6:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7ae8:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7aea:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7aec:	and.w	r1, r5, #3
    7af0:	lsls	r1, r1, #1
    7af2:	and.w	r3, r3, #3
    7af6:	lsls	r2, r2, #2
    7af8:	orr.w	r0, r1, r0, lsr #7
    7afc:	orr.w	r3, r2, r3, lsl #10
    7b00:	and.w	r1, r4, #15
    7b04:	orr.w	r3, r3, r6, lsr #6
    7b08:	add	r0, r1
    7b0a:	subs	r0, #7
    7b0c:	adds	r3, #1
    7b0e:	lsl.w	r0, r3, r0
    7b12:	pop	{r4, r5, r6}
    7b14:	bx	lr
    7b16:	nop
    7b18:	.word	0x20019d28

00007b1c <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7b1c:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7b1e:	ldr	r6, [pc, #176]	; (7bd0 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    7b20:	ldrb	r3, [r6, #10]
    7b22:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7b26:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7b28:	cbnz	r0, 7b42 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7b2a:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    7b2e:	ldrb	r2, [r6, #11]
    7b30:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7b34:	lsls	r3, r3, #1
    7b36:	adds	r0, r5, #1
    7b38:	orr.w	r3, r3, r2, lsr #7
    7b3c:	orrs	r0, r1
    7b3e:	tst	r3, r0
    7b40:	bne.n	7b86 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    7b42:	ldr	r3, [pc, #144]	; (7bd4 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    7b44:	ldrb	r3, [r3, #0]
    7b46:	cbnz	r3, 7b4c <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    7b48:	lsls	r1, r1, #9
    lastSector <<= 9;
    7b4a:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    7b4c:	ldr	r0, [pc, #136]	; (7bd8 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    7b4e:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    7b52:	mov	r4, r0
    7b54:	cbnz	r0, 7b68 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b56:	ldr	r1, [pc, #132]	; (7bdc <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7b58:	ldr	r3, [pc, #132]	; (7be0 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b5a:	movs	r0, #15
  m_errorLine = line;
    7b5c:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b60:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b62:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7b64:	mov	r0, r4
    7b66:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    7b68:	mov	r1, r5
    7b6a:	ldr	r0, [pc, #120]	; (7be4 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    7b6c:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    7b70:	mov	r4, r0
    7b72:	cbnz	r0, 7b98 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b74:	ldr	r1, [pc, #100]	; (7bdc <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7b76:	ldr	r3, [pc, #104]	; (7be0 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b78:	movs	r0, #16
  m_errorLine = line;
    7b7a:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b7e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b80:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7b82:	mov	r0, r4
    7b84:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b86:	ldr	r1, [pc, #84]	; (7bdc <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7b88:	ldr	r3, [pc, #84]	; (7be0 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b8a:	movs	r0, #38	; 0x26
  m_errorLine = line;
    7b8c:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b90:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b92:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7b94:	mov	r0, r4
    7b96:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    7b98:	movs	r1, #0
    7b9a:	ldr	r0, [pc, #76]	; (7be8 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    7b9c:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    7ba0:	mov	r4, r0
    7ba2:	cbnz	r0, 7bb4 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ba4:	ldr	r1, [pc, #52]	; (7bdc <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7ba6:	ldr	r3, [pc, #56]	; (7be0 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ba8:	movs	r0, #17
  m_errorLine = line;
    7baa:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bae:	strb	r0, [r1, #0]
  m_errorLine = line;
    7bb0:	str	r2, [r3, #0]
    7bb2:	b.n	7b64 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    7bb4:	ldr	r0, [pc, #52]	; (7bec <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    7bb6:	bl	7810 <waitTimeout(bool (*)())>
    7bba:	cmp	r0, #0
    7bbc:	beq.n	7b64 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bbe:	ldr	r1, [pc, #28]	; (7bdc <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7bc0:	ldr	r3, [pc, #28]	; (7be0 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bc2:	movs	r0, #39	; 0x27
  m_errorLine = line;
    7bc4:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bc8:	strb	r0, [r1, #0]
  m_errorLine = line;
    7bca:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7bcc:	movs	r4, #0
    7bce:	b.n	7b64 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    7bd0:	.word	0x20019d28
    7bd4:	.word	0x20019d14
    7bd8:	.word	0x201a0000
    7bdc:	.word	0x20013ad8
    7be0:	.word	0x20019d40
    7be4:	.word	0x211a0000
    7be8:	.word	0x261b0000
    7bec:	.word	0x00007995

00007bf0 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    7bf0:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7bf2:	movs	r1, #0
    7bf4:	ldr	r0, [pc, #84]	; (7c4c <transferStop()+0x5c>)
    7bf6:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    7bfa:	mov	r4, r0
    7bfc:	cbnz	r0, 7c10 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bfe:	ldr	r1, [pc, #80]	; (7c50 <transferStop()+0x60>)
  m_errorLine = line;
    7c00:	ldr	r3, [pc, #80]	; (7c54 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c02:	movs	r0, #9
  m_errorLine = line;
    7c04:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c08:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c0a:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    7c0c:	mov	r0, r4
    7c0e:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7c10:	ldr	r0, [pc, #68]	; (7c58 <transferStop()+0x68>)
    7c12:	bl	7838 <yieldTimeout(bool (*)())>
    7c16:	cbnz	r0, 7c36 <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    7c18:	ldr	r0, [pc, #64]	; (7c5c <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7c1a:	ldr	r1, [pc, #68]	; (7c60 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7c1c:	ldr	r5, [pc, #68]	; (7c64 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    7c1e:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7c20:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7c22:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7c24:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7c28:	orr.w	r2, r2, #67108864	; 0x4000000
    7c2c:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    7c2e:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    7c30:	str	r3, [r1, #0]
  return true;
}
    7c32:	mov	r0, r4
    7c34:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c36:	ldr	r1, [pc, #24]	; (7c50 <transferStop()+0x60>)
  m_errorLine = line;
    7c38:	ldr	r3, [pc, #24]	; (7c54 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c3a:	movs	r0, #10
  m_errorLine = line;
    7c3c:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c40:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7c42:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c44:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    7c46:	mov	r0, r4
    7c48:	pop	{r4, r5, r6, pc}
    7c4a:	nop
    7c4c:	.word	0x0cdb0000
    7c50:	.word	0x20013ad8
    7c54:	.word	0x20019d40
    7c58:	.word	0x00007995
    7c5c:	.word	0x400b1034
    7c60:	.word	0x400b1028
    7c64:	.word	0x400b102c

00007c68 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    7c68:	b.w	7bf0 <transferStop()>

00007c6c <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7c6c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    7c6e:	ldr	r3, [pc, #160]	; (7d10 <SdioCard::writeData(unsigned char const*)+0xa4>)
    7c70:	ldr	r3, [r3, #0]
    7c72:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7c74:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    7c76:	bmi.n	7c8a <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7c78:	ldr	r3, [pc, #152]	; (7d14 <SdioCard::writeData(unsigned char const*)+0xa8>)
    7c7a:	ldr	r2, [r3, #0]
    7c7c:	bic.w	r2, r2, #65536	; 0x10000
    7c80:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7c82:	ldr	r2, [r3, #0]
    7c84:	orr.w	r2, r2, #131072	; 0x20000
    7c88:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7c8a:	ldr	r2, [pc, #136]	; (7d14 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    7c8c:	ldr	r0, [pc, #136]	; (7d18 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7c8e:	ldr	r3, [r2, #0]
    7c90:	orr.w	r3, r3, #65536	; 0x10000
    7c94:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    7c96:	bl	7810 <waitTimeout(bool (*)())>
    7c9a:	cmp	r0, #0
    7c9c:	bne.n	7cfc <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7c9e:	ldr	r4, [pc, #112]	; (7d10 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7ca0:	ldr	r0, [pc, #120]	; (7d1c <SdioCard::writeData(unsigned char const*)+0xb0>)
    7ca2:	subs	r3, r5, #4
    7ca4:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7ca8:	ldr	r2, [r4, #0]
    7caa:	lsls	r1, r2, #21
    7cac:	bpl.n	7ca8 <SdioCard::writeData(unsigned char const*)+0x3c>
    7cae:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7cb2:	ldr.w	r2, [r3, #4]!
    7cb6:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7cb8:	cmp	r1, r3
    7cba:	bne.n	7cb2 <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7cbc:	cmp	r5, r1
    7cbe:	mov	r3, r1
    7cc0:	bne.n	7ca8 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    7cc2:	ldr	r0, [pc, #92]	; (7d20 <SdioCard::writeData(unsigned char const*)+0xb4>)
    7cc4:	bl	7810 <waitTimeout(bool (*)())>
    7cc8:	cbnz	r0, 7cea <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    7cca:	ldr	r2, [pc, #88]	; (7d24 <SdioCard::writeData(unsigned char const*)+0xb8>)
    7ccc:	ldr	r3, [pc, #88]	; (7d28 <SdioCard::writeData(unsigned char const*)+0xbc>)
    7cce:	ldr	r1, [r2, #0]
    7cd0:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7cd2:	ldr	r1, [r3, #0]
    7cd4:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7cd6:	ldr	r2, [r3, #0]
    7cd8:	lsls	r2, r2, #30
    7cda:	bpl.n	7d0c <SdioCard::writeData(unsigned char const*)+0xa0>
    7cdc:	ldr	r3, [r3, #0]
    7cde:	ldr	r0, [pc, #76]	; (7d2c <SdioCard::writeData(unsigned char const*)+0xc0>)
    7ce0:	ands	r0, r3
    7ce2:	clz	r0, r0
    7ce6:	lsrs	r0, r0, #5
    7ce8:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cea:	ldr	r1, [pc, #68]	; (7d30 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    7cec:	ldr	r3, [pc, #68]	; (7d34 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cee:	movs	r0, #35	; 0x23
  m_errorLine = line;
    7cf0:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cf4:	strb	r0, [r1, #0]
  m_errorLine = line;
    7cf6:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    7cf8:	movs	r0, #0
    7cfa:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cfc:	ldr	r1, [pc, #48]	; (7d30 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    7cfe:	ldr	r3, [pc, #52]	; (7d34 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d00:	movs	r0, #32
  m_errorLine = line;
    7d02:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d06:	strb	r0, [r1, #0]
  m_errorLine = line;
    7d08:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    7d0a:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    7d0c:	pop	{r3, r4, r5, pc}
    7d0e:	nop
    7d10:	.word	0x400b1024
    7d14:	.word	0x400b1028
    7d18:	.word	0x000076b5
    7d1c:	.word	0x400b1020
    7d20:	.word	0x000076c9
    7d24:	.word	0x400b1030
    7d28:	.word	0x20019d20
    7d2c:	.word	0x117f0000
    7d30:	.word	0x20013ad8
    7d34:	.word	0x20019d40

00007d38 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7d38:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    7d3a:	ldr	r0, [pc, #80]	; (7d8c <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7d3c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    7d3e:	bl	7838 <yieldTimeout(bool (*)())>
    7d42:	cbnz	r0, 7d78 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d44:	ldr	r2, [pc, #72]	; (7d90 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7d46:	ldr	r1, [pc, #76]	; (7d94 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d48:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7d4a:	ldr	r0, [pc, #76]	; (7d98 <SdioCard::writeStart(unsigned long)+0x60>)
    7d4c:	ldr	r5, [pc, #76]	; (7d9c <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d4e:	bic.w	r3, r3, #65536	; 0x10000
    7d52:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7d54:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7d56:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7d58:	cbnz	r3, 7d74 <SdioCard::writeStart(unsigned long)+0x3c>
    7d5a:	lsls	r1, r4, #9
    7d5c:	ldr	r0, [pc, #64]	; (7da0 <SdioCard::writeStart(unsigned long)+0x68>)
    7d5e:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    7d62:	cbnz	r0, 7d72 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d64:	ldr	r1, [pc, #60]	; (7da4 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7d66:	ldr	r3, [pc, #64]	; (7da8 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d68:	movs	r4, #14
  m_errorLine = line;
    7d6a:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d6e:	strb	r4, [r1, #0]
  m_errorLine = line;
    7d70:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    7d72:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7d74:	mov	r1, r4
    7d76:	b.n	7d5c <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d78:	ldr	r1, [pc, #40]	; (7da4 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7d7a:	ldr	r3, [pc, #44]	; (7da8 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d7c:	movs	r0, #10
  m_errorLine = line;
    7d7e:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d82:	strb	r0, [r1, #0]
  m_errorLine = line;
    7d84:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7d86:	movs	r0, #0
    7d88:	pop	{r3, r4, r5, pc}
    7d8a:	nop
    7d8c:	.word	0x00007995
    7d90:	.word	0x400b1028
    7d94:	.word	0x20019d14
    7d98:	.word	0x400b1004
    7d9c:	.word	0xffff0200
    7da0:	.word	0x193a0022
    7da4:	.word	0x20013ad8
    7da8:	.word	0x20019d40

00007dac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7dac:	push	{r3, r4, r5, r6, r7, lr}
    7dae:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7db0:	ldrb	r0, [r0, #8]
    7db2:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7db4:	mov	r4, r1
    7db6:	mov	r5, r2
    7db8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7dba:	bmi.n	7de4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7dbc:	cbz	r3, 7de0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7dbe:	add	r7, r1
    7dc0:	b.n	7dc6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    7dc2:	cmp	r4, r7
    7dc4:	beq.n	7de0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    7dc6:	ldr	r3, [r6, #0]
    7dc8:	mov	r2, r5
    7dca:	mov	r1, r4
    7dcc:	ldr	r3, [r3, #8]
    7dce:	mov	r0, r6
    7dd0:	blx	r3
    7dd2:	adds	r4, #1
    7dd4:	add.w	r5, r5, #512	; 0x200
    7dd8:	cmp	r0, #0
    7dda:	bne.n	7dc2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    7ddc:	movs	r0, #0
    7dde:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7de0:	movs	r0, #1
    7de2:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    7de4:	lsls	r0, r2, #30
    7de6:	beq.n	7e0e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7de8:	cmp	r3, #0
    7dea:	beq.n	7de0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7dec:	add	r7, r1
    7dee:	b.n	7df4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    7df0:	cmp	r7, r4
    7df2:	beq.n	7de0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    7df4:	ldr	r3, [r6, #0]
    7df6:	mov	r2, r5
    7df8:	mov	r1, r4
    7dfa:	ldr	r3, [r3, #8]
    7dfc:	mov	r0, r6
    7dfe:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7e00:	adds	r4, #1
    7e02:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    7e06:	cmp	r0, #0
    7e08:	bne.n	7df0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    7e0a:	movs	r0, #0
    7e0c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    7e0e:	ldr	r0, [pc, #24]	; (7e28 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    7e10:	bl	79fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7e14:	cmp	r0, #0
    7e16:	bne.n	7de0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e18:	ldr	r1, [pc, #16]	; (7e2c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    7e1a:	ldr	r3, [pc, #20]	; (7e30 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e1c:	movs	r4, #12
  m_errorLine = line;
    7e1e:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e22:	strb	r4, [r1, #0]
  m_errorLine = line;
    7e24:	str	r2, [r3, #0]
    7e26:	pop	{r3, r4, r5, r6, r7, pc}
    7e28:	.word	0x123a0037
    7e2c:	.word	0x20013ad8
    7e30:	.word	0x20019d40

00007e34 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7e34:	push	{r3, r4, r5, r6, r7, lr}
    7e36:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7e38:	ldrb	r0, [r0, #8]
    7e3a:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7e3c:	mov	r4, r1
    7e3e:	mov	r5, r2
    7e40:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7e42:	bmi.n	7e6c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7e44:	cbz	r3, 7e68 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7e46:	add	r7, r1
    7e48:	b.n	7e4e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    7e4a:	cmp	r4, r7
    7e4c:	beq.n	7e68 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    7e4e:	ldr	r3, [r6, #0]
    7e50:	mov	r2, r5
    7e52:	mov	r1, r4
    7e54:	ldr	r3, [r3, #24]
    7e56:	mov	r0, r6
    7e58:	blx	r3
    7e5a:	adds	r4, #1
    7e5c:	add.w	r5, r5, #512	; 0x200
    7e60:	cmp	r0, #0
    7e62:	bne.n	7e4a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    7e64:	movs	r0, #0
    7e66:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7e68:	movs	r0, #1
    7e6a:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    7e6c:	lsls	r0, r2, #30
    7e6e:	beq.n	7e96 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7e70:	cmp	r3, #0
    7e72:	beq.n	7e68 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7e74:	add	r7, r1
    7e76:	b.n	7e7c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    7e78:	cmp	r7, r4
    7e7a:	beq.n	7e68 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    7e7c:	ldr	r3, [r6, #0]
    7e7e:	mov	r2, r5
    7e80:	mov	r1, r4
    7e82:	ldr	r3, [r3, #24]
    7e84:	mov	r0, r6
    7e86:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7e88:	adds	r4, #1
    7e8a:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    7e8e:	cmp	r0, #0
    7e90:	bne.n	7e78 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    7e92:	movs	r0, #0
    7e94:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    7e96:	ldr	r0, [pc, #24]	; (7eb0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    7e98:	bl	79fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7e9c:	cmp	r0, #0
    7e9e:	bne.n	7e68 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ea0:	ldr	r1, [pc, #16]	; (7eb4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    7ea2:	ldr	r3, [pc, #20]	; (7eb8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ea4:	movs	r4, #14
  m_errorLine = line;
    7ea6:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eaa:	strb	r4, [r1, #0]
  m_errorLine = line;
    7eac:	str	r2, [r3, #0]
    7eae:	pop	{r3, r4, r5, r6, r7, pc}
    7eb0:	.word	0x193a0027
    7eb4:	.word	0x20013ad8
    7eb8:	.word	0x20019d40

00007ebc <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7ebc:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7ebe:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7ec0:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7ec2:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7ec4:	sub.w	sp, sp, #512	; 0x200
    7ec8:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    7eca:	bpl.n	7f00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    7ecc:	lsls	r3, r5, #30
    7ece:	beq.n	7ede <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    7ed0:	mov	r1, r5
    7ed2:	mov	r0, sp
    7ed4:	mov.w	r2, #512	; 0x200
    7ed8:	bl	8774 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    7edc:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    7ede:	mov	r2, r5
    7ee0:	mov	r1, r6
    7ee2:	movs	r3, #1
    7ee4:	ldr	r0, [pc, #120]	; (7f60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    7ee6:	bl	79fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7eea:	cbnz	r0, 7efa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eec:	ldr	r1, [pc, #116]	; (7f64 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    7eee:	ldr	r3, [pc, #120]	; (7f68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ef0:	movs	r4, #13
  m_errorLine = line;
    7ef2:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ef6:	strb	r4, [r1, #0]
  m_errorLine = line;
    7ef8:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    7efa:	add.w	sp, sp, #512	; 0x200
    7efe:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7f00:	ldrb	r3, [r0, #9]
    7f02:	cmp	r3, #2
    7f04:	mov	r4, r0
    7f06:	beq.n	7f1a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    7f08:	ldr	r3, [r4, #0]
    7f0a:	mov	r0, r4
    7f0c:	ldr	r3, [r3, #20]
    7f0e:	blx	r3
    7f10:	cbnz	r0, 7f4a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    7f12:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    7f14:	add.w	sp, sp, #512	; 0x200
    7f18:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7f1a:	ldr	r3, [r0, #4]
    7f1c:	cmp	r1, r3
    7f1e:	bne.n	7f08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    7f20:	ldr	r3, [r4, #0]
    7f22:	mov	r1, r5
    7f24:	ldr	r3, [r3, #68]	; 0x44
    7f26:	mov	r0, r4
    7f28:	blx	r3
    7f2a:	cmp	r0, #0
    7f2c:	beq.n	7f12 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    7f2e:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7f30:	ldr	r2, [pc, #56]	; (7f6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    7f32:	adds	r3, #1
    7f34:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7f36:	ldr	r3, [r2, #0]
    7f38:	lsrs	r3, r3, #16
    7f3a:	lsls	r3, r3, #16
    7f3c:	cmp	r3, #0
    7f3e:	bne.n	7efa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    7f40:	ldr	r3, [r4, #0]
    7f42:	mov	r0, r4
    7f44:	ldr	r3, [r3, #20]
    7f46:	blx	r3
    7f48:	b.n	7efa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    7f4a:	ldr	r3, [r4, #0]
    7f4c:	mov	r1, r6
    7f4e:	ldr	r3, [r3, #72]	; 0x48
    7f50:	mov	r0, r4
    7f52:	blx	r3
    7f54:	cmp	r0, #0
    7f56:	beq.n	7f12 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    7f58:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    7f5a:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    7f5c:	strb	r3, [r4, #9]
    7f5e:	b.n	7f20 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    7f60:	.word	0x183a0001
    7f64:	.word	0x20013ad8
    7f68:	.word	0x20019d40
    7f6c:	.word	0x400b1004

00007f70 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    7f70:	ldrb	r3, [r0, #9]
    7f72:	cmp	r3, #1
    7f74:	beq.n	7f90 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7f76:	cmp	r3, #2
    7f78:	beq.n	7f7e <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    7f7a:	movs	r0, #1
    7f7c:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    7f7e:	movs	r1, #0
    if (!writeStop()) {
    7f80:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    7f82:	strb	r1, [r0, #9]
    if (!writeStop()) {
    7f84:	ldr	r3, [r3, #76]	; 0x4c
    7f86:	ldr	r2, [pc, #20]	; (7f9c <SdioCard::syncDevice()+0x2c>)
    7f88:	cmp	r3, r2
    7f8a:	bne.n	7f98 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    7f8c:	b.w	7bf0 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    7f90:	movs	r3, #0
    7f92:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    7f94:	b.w	7bf0 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    7f98:	bx	r3
    7f9a:	nop
    7f9c:	.word	0x00007c69

00007fa0 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7fa0:	push	{r3, r4, r5, r6, r7, lr}
    7fa2:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7fa4:	ldr	r0, [pc, #116]	; (801c <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7fa6:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7fa8:	bl	7810 <waitTimeout(bool (*)())>
    7fac:	cbz	r0, 7fc0 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fae:	ldr	r1, [pc, #112]	; (8020 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7fb0:	ldr	r3, [pc, #112]	; (8024 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fb2:	movs	r0, #10
  m_errorLine = line;
    7fb4:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fb8:	strb	r0, [r1, #0]
  m_errorLine = line;
    7fba:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7fbc:	movs	r0, #0
    7fbe:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7fc0:	ldr	r2, [pc, #100]	; (8028 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7fc2:	ldr.w	lr, [pc, #132]	; 8048 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7fc6:	ldr	r7, [pc, #100]	; (802c <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7fc8:	ldr	r6, [pc, #100]	; (8030 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7fca:	ldr	r3, [pc, #104]	; (8034 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7fcc:	mov.w	ip, #1
    7fd0:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7fd4:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7fd6:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7fd8:	ldr	r5, [pc, #92]	; (8038 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7fda:	ldr	r2, [pc, #96]	; (803c <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7fdc:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7fde:	ldr	r0, [pc, #96]	; (8040 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7fe0:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7fe2:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7fe4:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    7fe8:	cbnz	r0, 7ffa <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fea:	ldr	r1, [pc, #52]	; (8020 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7fec:	ldr	r3, [pc, #52]	; (8024 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fee:	movs	r4, #4
  m_errorLine = line;
    7ff0:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ff4:	strb	r4, [r1, #0]
  m_errorLine = line;
    7ff6:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    7ff8:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7ffa:	ldr	r0, [pc, #72]	; (8044 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    7ffc:	bl	7838 <yieldTimeout(bool (*)())>
    8000:	cbnz	r0, 800a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    8002:	bl	79dc <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    8006:	cbz	r0, 800a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    8008:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    800a:	ldr	r1, [pc, #20]	; (8020 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    800c:	ldr	r3, [pc, #20]	; (8024 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    800e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8010:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8014:	strb	r0, [r1, #0]
  m_errorLine = line;
    8016:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    8018:	movs	r0, #0
    801a:	pop	{r3, r4, r5, r6, r7, pc}
    801c:	.word	0x00007995
    8020:	.word	0x20013ad8
    8024:	.word	0x20019d40
    8028:	.word	0x20019d20
    802c:	.word	0x400b1000
    8030:	.word	0x400b1004
    8034:	.word	0x400b1038
    8038:	.word	0x00010040
    803c:	.word	0x117f0002
    8040:	.word	0x063a0011
    8044:	.word	0x00007695
    8048:	.word	0x20019d38

0000804c <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    804c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8050:	ldr	r5, [pc, #568]	; (828c <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8052:	ldr	r4, [pc, #572]	; (8290 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    8054:	ldr.w	r8, [pc, #684]	; 8304 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8058:	ldr	r7, [pc, #568]	; (8294 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    805a:	ldr	r6, [pc, #572]	; (8298 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    805c:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    805e:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8060:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8062:	strb	r3, [r0, #9]
  m_initDone = false;
    8064:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8068:	strb	r3, [r7, #0]
  m_version2 = false;
    806a:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    806c:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    806e:	ldr	r2, [pc, #556]	; (829c <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8070:	ldr	r0, [pc, #556]	; (82a0 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8072:	ldr	r1, [pc, #560]	; (82a4 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8074:	ldr.w	lr, [pc, #656]	; 8308 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8078:	orr.w	r3, r3, #201326592	; 0xc000000
    807c:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    807e:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8080:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8084:	orr.w	r3, r3, #131072	; 0x20000
    8088:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    808a:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    808c:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8090:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8094:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8098:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    809a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    809e:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    80a0:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    80a2:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    80a4:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    80a6:	ldr	r3, [r2, #0]
    80a8:	orr.w	r3, r3, #16777216	; 0x1000000
    80ac:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    80b0:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    80b2:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    80b4:	ldr	r3, [r2, #0]
    80b6:	ldr	r4, [pc, #496]	; (82a8 <SdioCard::begin(SdioConfig)+0x25c>)
    80b8:	lsls	r1, r3, #7
    80ba:	bmi.n	80b4 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    80bc:	mov.w	r0, #400	; 0x190
    80c0:	bl	76e0 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    80c4:	ldr.w	ip, [pc, #472]	; 82a0 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    80c8:	ldr.w	lr, [pc, #572]	; 8308 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    80cc:	ldr	r1, [pc, #468]	; (82a4 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    80ce:	ldr	r2, [pc, #476]	; (82ac <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    80d0:	ldr	r0, [pc, #476]	; (82b0 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    80d2:	movw	r3, #1091	; 0x443
    80d6:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    80da:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    80de:	mov.w	lr, #1088	; 0x440
    80e2:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    80e6:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    80e8:	add.w	r2, r2, #409600	; 0x64000
    80ec:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    80ee:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    80f0:	ldr	r0, [pc, #448]	; (82b4 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    80f2:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    80f4:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    80f6:	ldr	r1, [pc, #448]	; (82b8 <SdioCard::begin(SdioConfig)+0x26c>)
    80f8:	movs	r0, #81	; 0x51
    80fa:	bl	8db0 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    80fe:	ldr	r3, [pc, #444]	; (82bc <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8100:	ldr	r1, [pc, #444]	; (82c0 <SdioCard::begin(SdioConfig)+0x274>)
    8102:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8104:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8108:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    810a:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    810c:	ldr	r3, [r4, #0]
    810e:	orr.w	r3, r3, #134217728	; 0x8000000
    8112:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8114:	ldr	r1, [r4, #0]
    8116:	ands.w	r1, r1, #134217728	; 0x8000000
    811a:	bne.n	8114 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    811c:	mov	r0, r1
    811e:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    8122:	mov	r4, r0
    8124:	cmp	r0, #0
    8126:	beq.n	81c6 <SdioCard::begin(SdioConfig)+0x17a>
    8128:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    812a:	mov.w	r1, #426	; 0x1aa
    812e:	ldr	r0, [pc, #404]	; (82c4 <SdioCard::begin(SdioConfig)+0x278>)
    8130:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    8134:	cmp	r0, #0
    8136:	bne.n	81f4 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8138:	subs	r4, #1
    813a:	bne.n	812a <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    813c:	ldrb	r3, [r6, #0]
    813e:	ldr	r6, [pc, #392]	; (82c8 <SdioCard::begin(SdioConfig)+0x27c>)
    8140:	cmp	r3, #0
    8142:	it	eq
    8144:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    8148:	bl	8e24 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    814c:	ldr	r4, [pc, #380]	; (82cc <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    814e:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8150:	movs	r1, #0
    8152:	ldr	r0, [pc, #380]	; (82d0 <SdioCard::begin(SdioConfig)+0x284>)
    8154:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    8158:	cbnz	r0, 8170 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    815a:	ldr	r2, [pc, #376]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    815c:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8160:	movs	r3, #23
  m_errorLine = line;
    8162:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8164:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    8166:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8168:	mov	r0, r4
    816a:	add	sp, #68	; 0x44
    816c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8170:	mov	r1, r6
    8172:	ldr	r0, [pc, #356]	; (82d8 <SdioCard::begin(SdioConfig)+0x28c>)
    8174:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    8178:	cmp	r0, #0
    817a:	beq.n	815a <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    817c:	bl	8e24 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8180:	ldr	r3, [pc, #344]	; (82dc <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8182:	ldr	r2, [pc, #328]	; (82cc <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8184:	rsb	r0, r9, r0
    8188:	cmp	r0, r3
    818a:	bhi.n	815a <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    818c:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    818e:	cmp	r3, #0
    8190:	bge.n	8150 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    8192:	ldr	r3, [pc, #332]	; (82e0 <SdioCard::begin(SdioConfig)+0x294>)
    8194:	ldr	r1, [r2, #0]
    8196:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    8198:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    819a:	ldr	r0, [pc, #328]	; (82e4 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    819c:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    819e:	it	mi
    81a0:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    81a2:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    81a6:	it	mi
    81a8:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    81aa:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    81ae:	mov	r4, r0
    81b0:	cbnz	r0, 81da <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81b2:	ldr	r2, [pc, #288]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    81b4:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81b8:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    81ba:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81bc:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81be:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    81c0:	add	sp, #68	; 0x44
    81c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81c6:	ldr	r2, [pc, #268]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    81c8:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81cc:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    81ce:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81d0:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81d2:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    81d4:	add	sp, #68	; 0x44
    81d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    81da:	movs	r1, #0
    81dc:	ldr	r0, [pc, #264]	; (82e8 <SdioCard::begin(SdioConfig)+0x29c>)
    81de:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    81e2:	mov	r4, r0
    81e4:	cbnz	r0, 8216 <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81e6:	ldr	r2, [pc, #236]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    81e8:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81ec:	movs	r3, #3
  m_errorLine = line;
    81ee:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81f0:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    81f2:	b.n	8168 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    81f4:	ldr	r3, [pc, #212]	; (82cc <SdioCard::begin(SdioConfig)+0x280>)
    81f6:	ldr	r3, [r3, #0]
    81f8:	cmp.w	r3, #426	; 0x1aa
    81fc:	beq.n	820e <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81fe:	ldr	r2, [pc, #212]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    8200:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8204:	movs	r3, #6
  m_errorLine = line;
    8206:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8208:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    820a:	movs	r4, #0
    820c:	b.n	8168 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    820e:	movs	r3, #1
    8210:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8212:	ldr	r6, [pc, #180]	; (82c8 <SdioCard::begin(SdioConfig)+0x27c>)
    8214:	b.n	8148 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8216:	ldr	r3, [pc, #180]	; (82cc <SdioCard::begin(SdioConfig)+0x280>)
    8218:	ldr	r6, [pc, #208]	; (82ec <SdioCard::begin(SdioConfig)+0x2a0>)
    821a:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    821c:	ldr	r1, [pc, #208]	; (82f0 <SdioCard::begin(SdioConfig)+0x2a4>)
    821e:	ldr	r0, [pc, #212]	; (82f4 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8220:	lsrs	r3, r3, #16
    8222:	lsls	r3, r3, #16
    8224:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8226:	bl	7930 <readReg16(unsigned long, void*)>
    822a:	mov	r4, r0
    822c:	cbnz	r0, 823c <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    822e:	ldr	r2, [pc, #164]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    8230:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8234:	movs	r3, #7
  m_errorLine = line;
    8236:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8238:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    823a:	b.n	8168 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    823c:	ldr	r1, [pc, #184]	; (82f8 <SdioCard::begin(SdioConfig)+0x2ac>)
    823e:	ldr	r0, [pc, #188]	; (82fc <SdioCard::begin(SdioConfig)+0x2b0>)
    8240:	bl	7930 <readReg16(unsigned long, void*)>
    8244:	mov	r4, r0
    8246:	cbnz	r0, 8256 <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8248:	ldr	r2, [pc, #136]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    824a:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    824e:	movs	r3, #8
  m_errorLine = line;
    8250:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8252:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8254:	b.n	8168 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8256:	ldr	r1, [r6, #0]
    8258:	ldr	r0, [pc, #164]	; (8300 <SdioCard::begin(SdioConfig)+0x2b4>)
    825a:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    825e:	mov	r4, r0
    8260:	cbnz	r0, 8270 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8262:	ldr	r2, [pc, #112]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    8264:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8268:	movs	r3, #5
  m_errorLine = line;
    826a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    826c:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    826e:	b.n	8168 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8270:	ldr	r1, [r6, #0]
    8272:	ldr	r0, [pc, #92]	; (82d0 <SdioCard::begin(SdioConfig)+0x284>)
    8274:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    8278:	cmp	r0, #0
    827a:	bne.n	830c <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    827c:	ldr	r2, [pc, #84]	; (82d4 <SdioCard::begin(SdioConfig)+0x288>)
    827e:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8282:	movs	r3, #20
  m_errorLine = line;
    8284:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8286:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8288:	movs	r4, #0
    828a:	b.n	8168 <SdioCard::begin(SdioConfig)+0x11c>
    828c:	.word	0x20013ad8
    8290:	.word	0x4000d800
    8294:	.word	0x20019d14
    8298:	.word	0x20019cfc
    829c:	.word	0x40048030
    82a0:	.word	0x4004d000
    82a4:	.word	0x4004d008
    82a8:	.word	0x400b102c
    82ac:	.word	0x4004d00c
    82b0:	.word	0x4004d010
    82b4:	.word	0x117f000b
    82b8:	.word	0x0000763d
    82bc:	.word	0xe000e108
    82c0:	.word	0xe000e451
    82c4:	.word	0x081a0000
    82c8:	.word	0x40300000
    82cc:	.word	0x400b1010
    82d0:	.word	0x371a0000
    82d4:	.word	0x20019d40
    82d8:	.word	0x29020000
    82dc:	.word	0x000f4240
    82e0:	.word	0x20019d18
    82e4:	.word	0x02090000
    82e8:	.word	0x031a0000
    82ec:	.word	0x20019d1c
    82f0:	.word	0x20019d28
    82f4:	.word	0x09090000
    82f8:	.word	0x20019d00
    82fc:	.word	0x0a090000
    8300:	.word	0x071b0000
    8304:	.word	0x20019d24
    8308:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    830c:	movs	r1, #2
    830e:	ldr	r0, [pc, #168]	; (83b8 <SdioCard::begin(SdioConfig)+0x36c>)
    8310:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    8314:	mov	r4, r0
    8316:	cmp	r0, #0
    8318:	beq.n	827c <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    831a:	ldr	r3, [pc, #160]	; (83bc <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    831c:	ldr	r0, [pc, #160]	; (83c0 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    831e:	ldr	r2, [r3, #0]
    8320:	bic.w	r2, r2, #6
    8324:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8326:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8328:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    832c:	orr.w	r2, r2, #2
    8330:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8332:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8334:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8336:	mvn.w	r0, #4278190080	; 0xff000000
    833a:	bl	7fa0 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    833e:	cbz	r0, 8348 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8340:	ldrb.w	r3, [sp, #13]
    8344:	lsls	r3, r3, #30
    8346:	bmi.n	839a <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    8348:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    834c:	ldr.w	fp, [pc, #132]	; 83d4 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8350:	ldr.w	sl, [pc, #132]	; 83d8 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8354:	ldr.w	r9, [pc, #132]	; 83dc <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8358:	ldr	r7, [pc, #104]	; (83c4 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    835a:	ldr	r6, [pc, #108]	; (83c8 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    835c:	ldr	r5, [pc, #108]	; (83cc <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    835e:	movw	r3, #259	; 0x103
    8362:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8366:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    836a:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    836e:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8370:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8372:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    8374:	bl	76e0 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8378:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    837c:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8380:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8382:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8386:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    838a:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    838e:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8390:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8392:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8394:	strb.w	r2, [r8]
  return true;
    8398:	b.n	8168 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    839a:	mov	r1, sp
    839c:	ldr	r0, [pc, #48]	; (83d0 <SdioCard::begin(SdioConfig)+0x384>)
    839e:	bl	7fa0 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    83a2:	cmp	r0, #0
    83a4:	beq.n	8348 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    83a6:	ldrb.w	r3, [sp, #16]
    83aa:	and.w	r3, r3, #15
    83ae:	cmp	r3, #1
    83b0:	bne.n	8348 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    83b2:	movw	r0, #50000	; 0xc350
    83b6:	b.n	834c <SdioCard::begin(SdioConfig)+0x300>
    83b8:	.word	0x061a0000
    83bc:	.word	0x400b1028
    83c0:	.word	0x400b1044
    83c4:	.word	0x4004d00c
    83c8:	.word	0x4004d010
    83cc:	.word	0x4004d014
    83d0:	.word	0x80fffff1
    83d4:	.word	0x4004d000
    83d8:	.word	0x4004d004
    83dc:	.word	0x4004d008

000083e0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    83e0:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    83e2:	ldr	r3, [pc, #160]	; (8484 <SdioCard::readData(unsigned char*)+0xa4>)
    83e4:	ldr	r3, [r3, #0]
    83e6:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    83e8:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    83ea:	bmi.n	840a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    83ec:	ldr	r3, [pc, #152]	; (8488 <SdioCard::readData(unsigned char*)+0xa8>)
    83ee:	ldr	r2, [r3, #0]
    83f0:	bic.w	r2, r2, #65536	; 0x10000
    83f4:	str	r2, [r3, #0]
    noInterrupts();
    83f6:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    83f8:	ldr	r2, [r3, #0]
    83fa:	orr.w	r2, r2, #131072	; 0x20000
    83fe:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8400:	ldr	r2, [r3, #0]
    8402:	orr.w	r2, r2, #65536	; 0x10000
    8406:	str	r2, [r3, #0]
    interrupts();
    8408:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    840a:	ldr	r0, [pc, #128]	; (848c <SdioCard::readData(unsigned char*)+0xac>)
    840c:	bl	7810 <waitTimeout(bool (*)())>
    8410:	cmp	r0, #0
    8412:	bne.n	8472 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8414:	ldr	r4, [pc, #108]	; (8484 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8416:	ldr	r0, [pc, #120]	; (8490 <SdioCard::readData(unsigned char*)+0xb0>)
    8418:	subs	r3, r5, #4
    841a:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    841e:	ldr	r2, [r4, #0]
    8420:	lsls	r1, r2, #20
    8422:	bpl.n	841e <SdioCard::readData(unsigned char*)+0x3e>
    8424:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8428:	ldr	r2, [r0, #0]
    842a:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    842e:	cmp	r1, r3
    8430:	bne.n	8428 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8432:	cmp	r5, r1
    8434:	mov	r3, r1
    8436:	bne.n	841e <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    8438:	ldr	r0, [pc, #88]	; (8494 <SdioCard::readData(unsigned char*)+0xb4>)
    843a:	bl	7810 <waitTimeout(bool (*)())>
    843e:	cbnz	r0, 8460 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8440:	ldr	r2, [pc, #84]	; (8498 <SdioCard::readData(unsigned char*)+0xb8>)
    8442:	ldr	r3, [pc, #88]	; (849c <SdioCard::readData(unsigned char*)+0xbc>)
    8444:	ldr	r1, [r2, #0]
    8446:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8448:	ldr	r1, [r3, #0]
    844a:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    844c:	ldr	r2, [r3, #0]
    844e:	lsls	r2, r2, #30
    8450:	bpl.n	8482 <SdioCard::readData(unsigned char*)+0xa2>
    8452:	ldr	r3, [r3, #0]
    8454:	ldr	r0, [pc, #72]	; (84a0 <SdioCard::readData(unsigned char*)+0xc0>)
    8456:	ands	r0, r3
    8458:	clz	r0, r0
    845c:	lsrs	r0, r0, #5
    845e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8460:	ldr	r1, [pc, #64]	; (84a4 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8462:	ldr	r3, [pc, #68]	; (84a8 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8464:	movs	r0, #29
  m_errorLine = line;
    8466:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    846a:	strb	r0, [r1, #0]
  m_errorLine = line;
    846c:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    846e:	movs	r0, #0
    8470:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8472:	ldr	r1, [pc, #48]	; (84a4 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8474:	ldr	r3, [pc, #48]	; (84a8 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8476:	movs	r0, #26
  m_errorLine = line;
    8478:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    847c:	strb	r0, [r1, #0]
  m_errorLine = line;
    847e:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8480:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8482:	pop	{r3, r4, r5, pc}
    8484:	.word	0x400b1024
    8488:	.word	0x400b1028
    848c:	.word	0x000076a1
    8490:	.word	0x400b1020
    8494:	.word	0x000076c9
    8498:	.word	0x400b1030
    849c:	.word	0x20019d20
    84a0:	.word	0x117f0000
    84a4:	.word	0x20013ad8
    84a8:	.word	0x20019d40

000084ac <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    84ac:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    84ae:	ldr	r0, [pc, #80]	; (8500 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    84b0:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    84b2:	bl	7838 <yieldTimeout(bool (*)())>
    84b6:	cbnz	r0, 84ec <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    84b8:	ldr	r2, [pc, #72]	; (8504 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    84ba:	ldr	r1, [pc, #76]	; (8508 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    84bc:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    84be:	ldr	r0, [pc, #76]	; (850c <SdioCard::readStart(unsigned long)+0x60>)
    84c0:	ldr	r5, [pc, #76]	; (8510 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    84c2:	orr.w	r3, r3, #65536	; 0x10000
    84c6:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    84c8:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    84ca:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    84cc:	cbnz	r3, 84e8 <SdioCard::readStart(unsigned long)+0x3c>
    84ce:	lsls	r1, r4, #9
    84d0:	ldr	r0, [pc, #64]	; (8514 <SdioCard::readStart(unsigned long)+0x68>)
    84d2:	bl	78b4 <cardCommand(unsigned long, unsigned long)>
    84d6:	cbnz	r0, 84e6 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84d8:	ldr	r1, [pc, #60]	; (8518 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    84da:	ldr	r3, [pc, #64]	; (851c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84dc:	movs	r4, #12
  m_errorLine = line;
    84de:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84e2:	strb	r4, [r1, #0]
  m_errorLine = line;
    84e4:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    84e6:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    84e8:	mov	r1, r4
    84ea:	b.n	84d0 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84ec:	ldr	r1, [pc, #40]	; (8518 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    84ee:	ldr	r3, [pc, #44]	; (851c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84f0:	movs	r0, #10
  m_errorLine = line;
    84f2:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84f6:	strb	r0, [r1, #0]
  m_errorLine = line;
    84f8:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    84fa:	movs	r0, #0
    84fc:	pop	{r3, r4, r5, pc}
    84fe:	nop
    8500:	.word	0x00007995
    8504:	.word	0x400b1028
    8508:	.word	0x20019d14
    850c:	.word	0x400b1004
    8510:	.word	0xffff0200
    8514:	.word	0x123a0032
    8518:	.word	0x20013ad8
    851c:	.word	0x20019d40

00008520 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8520:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8522:	ldrb	r3, [r0, #8]
    8524:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8526:	sub.w	sp, sp, #512	; 0x200
    852a:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    852c:	bpl.n	8554 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    852e:	lsls	r3, r2, #30
    8530:	beq.n	8572 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8532:	mov	r2, sp
    8534:	movs	r3, #1
    8536:	ldr	r0, [pc, #168]	; (85e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    8538:	bl	79fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    853c:	cbz	r0, 857e <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    853e:	mov	r1, sp
    8540:	mov	r0, r5
    8542:	mov.w	r2, #512	; 0x200
    8546:	bl	8774 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    854a:	movs	r5, #1
}
    854c:	mov	r0, r5
    854e:	add.w	sp, sp, #512	; 0x200
    8552:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8554:	ldrb	r3, [r0, #9]
    8556:	cmp	r3, #1
    8558:	mov	r4, r0
    855a:	mov	r6, r1
    855c:	beq.n	8596 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    855e:	ldr	r3, [r4, #0]
    8560:	mov	r0, r4
    8562:	ldr	r3, [r3, #20]
    8564:	blx	r3
    8566:	cbnz	r0, 85bc <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    8568:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    856a:	mov	r0, r5
    856c:	add.w	sp, sp, #512	; 0x200
    8570:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8572:	movs	r3, #1
    8574:	ldr	r0, [pc, #104]	; (85e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    8576:	bl	79fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    857a:	cmp	r0, #0
    857c:	bne.n	854a <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    857e:	ldr	r1, [pc, #100]	; (85e4 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    8580:	ldr	r3, [pc, #100]	; (85e8 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8582:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    8584:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8586:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    858a:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    858c:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    858e:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8590:	add.w	sp, sp, #512	; 0x200
    8594:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8596:	ldr	r3, [r0, #4]
    8598:	cmp	r1, r3
    859a:	bne.n	855e <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    859c:	mov	r1, r5
    859e:	mov	r0, r4
    85a0:	bl	83e0 <SdioCard::readData(unsigned char*)>
    85a4:	mov	r5, r0
    85a6:	cmp	r0, #0
    85a8:	beq.n	8568 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    85aa:	ldr	r3, [pc, #64]	; (85ec <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    85ac:	ldr	r3, [r3, #0]
    85ae:	lsrs	r3, r3, #16
    85b0:	lsls	r3, r3, #16
    85b2:	cbz	r3, 85d0 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    85b4:	ldr	r3, [r4, #4]
    85b6:	adds	r3, #1
    85b8:	str	r3, [r4, #4]
    85ba:	b.n	856a <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    85bc:	mov	r1, r6
    85be:	mov	r0, r4
    85c0:	bl	84ac <SdioCard::readStart(unsigned long)>
    85c4:	cmp	r0, #0
    85c6:	beq.n	8568 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    85c8:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    85ca:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    85cc:	strb	r3, [r4, #9]
    85ce:	b.n	859c <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    85d0:	ldr	r3, [r4, #0]
    85d2:	mov	r0, r4
    85d4:	ldr	r3, [r3, #20]
    85d6:	blx	r3
    85d8:	cmp	r0, #0
    85da:	bne.n	85b4 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    85dc:	b.n	8568 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    85de:	nop
    85e0:	.word	0x113a0011
    85e4:	.word	0x20013ad8
    85e8:	.word	0x20019d40
    85ec:	.word	0x400b1004

000085f0 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    85f0:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    85f2:	ldr	r3, [r0, #0]
    85f4:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    85f6:	ldrb	r1, [r3, #11]
    85f8:	cbz	r1, 863a <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    85fa:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    85fc:	ldrb	r1, [r3, #11]
    85fe:	lsls	r0, r1, #31
    8600:	bpl.n	8610 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    8602:	ldr	r0, [pc, #100]	; (8668 <SdSpiArduinoDriver::activate()+0x78>)
    8604:	ldr	r1, [r3, #12]
    8606:	ldr	r4, [r0, #0]
    8608:	ands	r1, r4
    860a:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    860c:	str	r1, [r0, #0]
    860e:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8610:	lsls	r4, r1, #30
    8612:	bpl.n	8622 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8614:	ldr	r0, [pc, #84]	; (866c <SdSpiArduinoDriver::activate()+0x7c>)
    8616:	ldr	r1, [r3, #16]
    8618:	ldr	r4, [r0, #0]
    861a:	ands	r1, r4
    861c:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    861e:	str	r1, [r0, #0]
    8620:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    8622:	lsls	r0, r1, #29
    8624:	bpl.n	8634 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    8626:	ldr	r0, [pc, #72]	; (8670 <SdSpiArduinoDriver::activate()+0x80>)
    8628:	ldr	r1, [r3, #20]
    862a:	ldr	r4, [r0, #0]
    862c:	ands	r1, r4
    862e:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    8630:	str	r1, [r0, #0]
    8632:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8634:	lsls	r1, r1, #28
    8636:	bmi.n	8658 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    8638:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    863a:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    863c:	ldr	r1, [r3, #12]
    863e:	cmp	r1, r2
    8640:	beq.n	8652 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    8642:	ldr	r0, [pc, #48]	; (8674 <SdSpiArduinoDriver::activate()+0x84>)
    8644:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    8646:	ldr	r1, [pc, #48]	; (8678 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    8648:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    864a:	orr.w	r0, r2, #1073741824	; 0x40000000
    864e:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    8650:	str	r1, [r3, #0]
}
    8652:	ldr.w	r4, [sp], #4
    8656:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    8658:	ldr	r0, [pc, #32]	; (867c <SdSpiArduinoDriver::activate()+0x8c>)
    865a:	ldr	r1, [r3, #24]
    865c:	ldr	r4, [r0, #0]
    865e:	ands	r1, r4
    8660:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    8662:	str	r1, [r0, #0]
    8664:	b.n	8638 <SdSpiArduinoDriver::activate()+0x48>
    8666:	nop
    8668:	.word	0xe000e180
    866c:	.word	0xe000e184
    8670:	.word	0xe000e188
    8674:	.word	0x003f4001
    8678:	.word	0x803f0000
    867c:	.word	0xe000e18c

00008680 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    8680:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8682:	ldrb	r3, [r2, #11]
    8684:	cbz	r3, 86b4 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    8686:	lsls	r1, r3, #31
    8688:	bpl.n	8692 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    868a:	ldr	r3, [pc, #44]	; (86b8 <SdSpiArduinoDriver::deactivate()+0x38>)
    868c:	ldr	r1, [r2, #28]
    868e:	str	r1, [r3, #0]
    8690:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8692:	lsls	r0, r3, #30
    8694:	bpl.n	869e <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    8696:	ldr	r3, [pc, #36]	; (86bc <SdSpiArduinoDriver::deactivate()+0x3c>)
    8698:	ldr	r1, [r2, #32]
    869a:	str	r1, [r3, #0]
    869c:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    869e:	lsls	r1, r3, #29
    86a0:	bpl.n	86aa <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    86a2:	ldr	r3, [pc, #28]	; (86c0 <SdSpiArduinoDriver::deactivate()+0x40>)
    86a4:	ldr	r1, [r2, #36]	; 0x24
    86a6:	str	r1, [r3, #0]
    86a8:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    86aa:	lsls	r3, r3, #28
    86ac:	bpl.n	86b4 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    86ae:	ldr	r3, [pc, #20]	; (86c4 <SdSpiArduinoDriver::deactivate()+0x44>)
    86b0:	ldr	r2, [r2, #40]	; 0x28
    86b2:	str	r2, [r3, #0]
    86b4:	bx	lr
    86b6:	nop
    86b8:	.word	0xe000e100
    86bc:	.word	0xe000e104
    86c0:	.word	0xe000e108
    86c4:	.word	0xe000e10c

000086c8 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    86c8:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    86ca:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    86cc:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    86d0:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    86d2:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    86d4:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    86d6:	ldr	r3, [r2, #44]	; 0x2c
    86d8:	cmp	r3, #0
    86da:	bge.n	86d6 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    86dc:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    86de:	uxtb	r0, r0
    86e0:	bx	lr
    86e2:	nop

000086e4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    86e4:	push	{r4, r5, r6, lr}
    86e6:	mov	r5, r0
    86e8:	mov	r4, r1
    86ea:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    86ec:	mov	r0, r1
    86ee:	movs	r1, #255	; 0xff
    86f0:	bl	beac <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    86f4:	ldr	r0, [r5, #0]
    86f6:	mov	r3, r6
    86f8:	mov	r2, r4
    86fa:	mov	r1, r4
    86fc:	bl	2594 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8700:	movs	r0, #0
    8702:	pop	{r4, r5, r6, pc}

00008704 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    8704:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8706:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8708:	mov.w	r3, #2147483648	; 0x80000000
    870c:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    870e:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8710:	ldr	r3, [r2, #44]	; 0x2c
    8712:	cmp	r3, #0
    8714:	bge.n	8710 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    8716:	ldr	r3, [r2, #56]	; 0x38
    8718:	bx	lr
    871a:	nop

0000871c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    871c:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    871e:	subs	r5, r2, #1
    8720:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8724:	sub.w	sp, sp, #516	; 0x204
    8728:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    872a:	bcc.n	8752 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    872c:	cbz	r2, 874c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    872e:	ldr	r2, [r0, #0]
    8730:	ldr	r2, [r2, #0]
    8732:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8734:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    8738:	ldrb.w	r3, [r1], #1
    873c:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    873e:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8740:	ldr	r3, [r2, #44]	; 0x2c
    8742:	cmp	r3, #0
    8744:	bge.n	8740 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    8746:	cmp	r1, r0
		return port().POPR;
    8748:	ldr	r3, [r2, #56]	; 0x38
    874a:	bne.n	8738 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    874c:	add.w	sp, sp, #516	; 0x204
    8750:	pop	{r4, r5, pc}
    8752:	mov	r5, r0
    8754:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    8756:	mov	r0, sp
    8758:	bl	8774 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    875c:	mov	r3, r4
    875e:	mov	r2, sp
    8760:	mov	r1, sp
    8762:	ldr	r0, [r5, #0]
    8764:	bl	2594 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    8768:	add.w	sp, sp, #516	; 0x204
    876c:	pop	{r4, r5, pc}
    876e:	nop

00008770 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    8770:	b.w	8df0 <digitalWrite>

00008774 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8774:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8776:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    877a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    877e:	bne.n	885c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8780:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8782:	bcc.n	8808 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8784:	ldr.w	r3, [r1], #4
    8788:	str.w	r3, [r0], #4
    878c:	ldr.w	r3, [r1], #4
    8790:	str.w	r3, [r0], #4
    8794:	ldr.w	r3, [r1], #4
    8798:	str.w	r3, [r0], #4
    879c:	ldr.w	r3, [r1], #4
    87a0:	str.w	r3, [r0], #4
    87a4:	ldr.w	r3, [r1], #4
    87a8:	str.w	r3, [r0], #4
    87ac:	ldr.w	r3, [r1], #4
    87b0:	str.w	r3, [r0], #4
    87b4:	ldr.w	r3, [r1], #4
    87b8:	str.w	r3, [r0], #4
    87bc:	ldr.w	r3, [r1], #4
    87c0:	str.w	r3, [r0], #4
    87c4:	ldr.w	r3, [r1], #4
    87c8:	str.w	r3, [r0], #4
    87cc:	ldr.w	r3, [r1], #4
    87d0:	str.w	r3, [r0], #4
    87d4:	ldr.w	r3, [r1], #4
    87d8:	str.w	r3, [r0], #4
    87dc:	ldr.w	r3, [r1], #4
    87e0:	str.w	r3, [r0], #4
    87e4:	ldr.w	r3, [r1], #4
    87e8:	str.w	r3, [r0], #4
    87ec:	ldr.w	r3, [r1], #4
    87f0:	str.w	r3, [r0], #4
    87f4:	ldr.w	r3, [r1], #4
    87f8:	str.w	r3, [r0], #4
    87fc:	ldr.w	r3, [r1], #4
    8800:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8804:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8806:	bcs.n	8784 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8808:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    880a:	bcc.n	8830 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    880c:	ldr.w	r3, [r1], #4
    8810:	str.w	r3, [r0], #4
    8814:	ldr.w	r3, [r1], #4
    8818:	str.w	r3, [r0], #4
    881c:	ldr.w	r3, [r1], #4
    8820:	str.w	r3, [r0], #4
    8824:	ldr.w	r3, [r1], #4
    8828:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    882c:	subs	r2, #16
	bhs	.Lmid_block_loop
    882e:	bcs.n	880c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8830:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8832:	bcc.n	8840 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8834:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8838:	str.w	r3, [r0], #4
	subs	r2, #4
    883c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    883e:	bcs.n	8834 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8840:	adds	r2, #4
	beq	.Ldone
    8842:	beq.n	8856 <memcpy+0xe2>

	lsls	r2, r2, #31
    8844:	lsls	r2, r2, #31
	itt ne
    8846:	itt	ne
	ldrbne  r3, [r1], #1
    8848:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    884c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8850:	bcc.n	8856 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8852:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8854:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8856:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8858:	bx	lr
    885a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    885c:	cmp	r2, #8
	blo	.Lbyte_copy
    885e:	bcc.n	8888 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8860:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8862:	beq.n	8780 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8864:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8868:	beq.n	8780 <memcpy+0xc>

	rsb	r3, #4
    886a:	rsb	r3, r3, #4
	subs	r2, r3
    886e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    8870:	lsls	r3, r3, #31
	itt ne
    8872:	itt	ne
	ldrbne  r3, [r1], #1
    8874:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8878:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    887c:	bcc.n	8780 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    887e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8882:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8886:	b.n	8780 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8888:	subs	r2, #4
	blo	.Lcopy_less_than_4
    888a:	bcc.n	8840 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    888c:	subs	r2, #1
	ldrb    r3, [r1], #1
    888e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8892:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8896:	bcs.n	888c <memcpy+0x118>

	ldrb	r3, [r1]
    8898:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    889a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    889c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    889e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    88a0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    88a2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    88a4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    88a6:	bx	lr

000088a8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    88a8:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    88aa:	ldr	r5, [pc, #60]	; (88e8 <usb_serial_getchar+0x40>)
    88ac:	ldr	r0, [r5, #0]
    88ae:	cbz	r0, 88d0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    88b0:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    88b2:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    88b4:	adds	r1, r0, r3
    88b6:	adds	r3, #1
	if (i >= rx_packet->len) {
    88b8:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    88ba:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    88bc:	bcs.n	88c4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    88be:	strh	r3, [r0, #2]
	}
	return c;
    88c0:	mov	r0, r4
}
    88c2:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    88c4:	bl	90b0 <usb_free>
		rx_packet = NULL;
    88c8:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    88ca:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    88cc:	str	r3, [r5, #0]
    88ce:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    88d0:	ldr	r3, [pc, #24]	; (88ec <usb_serial_getchar+0x44>)
    88d2:	ldrb	r3, [r3, #0]
    88d4:	cbz	r3, 88e2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    88d6:	movs	r0, #3
    88d8:	bl	90fc <usb_rx>
    88dc:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    88de:	cmp	r0, #0
    88e0:	bne.n	88b0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    88e2:	mov.w	r0, #4294967295
    88e6:	pop	{r3, r4, r5, pc}
    88e8:	.word	0x20019d50
    88ec:	.word	0x20019e3c

000088f0 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    88f0:	push	{r4, lr}
	if (!rx_packet) {
    88f2:	ldr	r4, [pc, #36]	; (8918 <usb_serial_peekchar+0x28>)
    88f4:	ldr	r0, [r4, #0]
    88f6:	cbz	r0, 8900 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    88f8:	ldrh	r3, [r0, #2]
    88fa:	add	r0, r3
    88fc:	ldrb	r0, [r0, #8]
}
    88fe:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8900:	ldr	r3, [pc, #24]	; (891c <usb_serial_peekchar+0x2c>)
    8902:	ldrb	r3, [r3, #0]
    8904:	cbz	r3, 8912 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8906:	movs	r0, #3
    8908:	bl	90fc <usb_rx>
    890c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    890e:	cmp	r0, #0
    8910:	bne.n	88f8 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8912:	mov.w	r0, #4294967295
    8916:	pop	{r4, pc}
    8918:	.word	0x20019d50
    891c:	.word	0x20019e3c

00008920 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8920:	ldr	r3, [pc, #16]	; (8934 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    8922:	ldr	r2, [pc, #20]	; (8938 <usb_serial_available+0x18>)
    8924:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    8926:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8928:	cbz	r3, 8932 <usb_serial_available+0x12>
    892a:	ldrh	r2, [r3, #0]
    892c:	ldrh	r3, [r3, #2]
    892e:	subs	r3, r2, r3
    8930:	add	r0, r3
	return count;
}
    8932:	bx	lr
    8934:	.word	0x20019d50
    8938:	.word	0x20019f40

0000893c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    893c:	ldr	r3, [pc, #44]	; (896c <usb_serial_flush_input+0x30>)
    893e:	ldrb	r3, [r3, #0]
    8940:	cbz	r3, 896a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8942:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    8944:	ldr	r4, [pc, #40]	; (8970 <usb_serial_flush_input+0x34>)
    8946:	ldr	r0, [r4, #0]
    8948:	cbz	r0, 895e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    894a:	bl	90b0 <usb_free>
		rx_packet = NULL;
    894e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8950:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8952:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8954:	bl	90fc <usb_rx>
		if (!rx) break;
    8958:	cbz	r0, 8968 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    895a:	bl	90b0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    895e:	movs	r0, #3
    8960:	bl	90fc <usb_rx>
		if (!rx) break;
    8964:	cmp	r0, #0
    8966:	bne.n	895a <usb_serial_flush_input+0x1e>
    8968:	pop	{r4, pc}
    896a:	bx	lr
    896c:	.word	0x20019e3c
    8970:	.word	0x20019d50

00008974 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8974:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8978:	ldr.w	r9, [pc, #248]	; 8a74 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    897c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    897e:	movs	r2, #1
    8980:	strb.w	r2, [r9]
	while (size > 0) {
    8984:	str	r1, [sp, #4]
    8986:	cbz	r1, 89e4 <usb_serial_write+0x70>
    8988:	ldr.w	r8, [pc, #236]	; 8a78 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    898c:	ldr	r7, [pc, #216]	; (8a68 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    898e:	ldr	r6, [sp, #4]
    8990:	mov	fp, r0
		if (!tx_packet) {
    8992:	ldr.w	r0, [r8]
    8996:	cbz	r0, 8a06 <usb_serial_write+0x92>
    8998:	ldr	r5, [pc, #208]	; (8a6c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    899a:	ldrh	r4, [r0, #2]
    899c:	rsb	r1, r4, #64	; 0x40
    89a0:	cmp	r1, r6
    89a2:	it	cs
    89a4:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    89a6:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    89aa:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    89ac:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    89b0:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    89b2:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    89b4:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    89b8:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    89bc:	cbz	r1, 89d4 <usb_serial_write+0x60>
    89be:	subs	r4, #1
    89c0:	add	r2, r4
    89c2:	add	r1, fp
    89c4:	ldrb.w	r4, [fp], #1
    89c8:	strb.w	r4, [r2, #1]!
    89cc:	cmp	fp, r1
    89ce:	bne.n	89c4 <usb_serial_write+0x50>
    89d0:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    89d4:	cmp.w	lr, #63	; 0x3f
    89d8:	bhi.n	89f2 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    89da:	ldr	r2, [pc, #148]	; (8a70 <usb_serial_write+0xfc>)
    89dc:	movs	r1, #5
    89de:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    89e0:	cmp	r6, #0
    89e2:	bne.n	8992 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    89e4:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    89e6:	movs	r3, #0
    89e8:	strb.w	r3, [r9]
	return ret;
}
    89ec:	add	sp, #12
    89ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    89f2:	movs	r2, #64	; 0x40
    89f4:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    89f6:	mov	r1, r0
    89f8:	movs	r0, #4
    89fa:	bl	922c <usb_tx>
			tx_packet = NULL;
    89fe:	movs	r2, #0
    8a00:	str.w	r2, [r8]
    8a04:	b.n	89da <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8a06:	ldrb	r2, [r7, #0]
    8a08:	cbz	r2, 8a56 <usb_serial_write+0xe2>
    8a0a:	ldr	r5, [pc, #96]	; (8a6c <usb_serial_write+0xf8>)
    8a0c:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    8a10:	mov.w	sl, #1
    8a14:	b.n	8a26 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8a16:	subs	r4, #1
    8a18:	beq.n	8a48 <usb_serial_write+0xd4>
    8a1a:	ldrb	r2, [r5, #0]
    8a1c:	cbnz	r2, 8a48 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    8a1e:	bl	9e44 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8a22:	ldrb	r2, [r7, #0]
    8a24:	cbz	r2, 8a56 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    8a26:	movs	r0, #4
    8a28:	bl	9138 <usb_tx_packet_count>
    8a2c:	cmp	r0, #7
    8a2e:	bhi.n	8a16 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    8a30:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    8a34:	bl	9070 <usb_malloc>
    8a38:	str.w	r0, [r8]
					if (tx_packet) break;
    8a3c:	cmp	r0, #0
    8a3e:	bne.n	899a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    8a40:	ldr	r3, [pc, #48]	; (8a74 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8a42:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    8a44:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8a46:	bne.n	8a1a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    8a48:	movs	r3, #1
					return -1;
    8a4a:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    8a4e:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8a50:	add	sp, #12
    8a52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8a56:	movs	r3, #0
					return -1;
    8a58:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8a5c:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8a60:	add	sp, #12
    8a62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a66:	nop
    8a68:	.word	0x20019e3c
    8a6c:	.word	0x20019d4c
    8a70:	.word	0x20019d44
    8a74:	.word	0x20019d45
    8a78:	.word	0x20019d48

00008a7c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8a7c:	push	{lr}
    8a7e:	sub	sp, #12
    8a80:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    8a82:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8a84:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    8a88:	mov	r0, r3
    8a8a:	bl	8974 <usb_serial_write>
}
    8a8e:	add	sp, #12
    8a90:	ldr.w	pc, [sp], #4

00008a94 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    8a94:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    8a96:	ldr	r5, [pc, #56]	; (8ad0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8a98:	ldr	r4, [pc, #56]	; (8ad4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    8a9a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8a9c:	movs	r3, #1
    8a9e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    8aa0:	cbz	r0, 8aae <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8aa2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    8aa4:	movs	r3, #0
    8aa6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8aa8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    8aac:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8aae:	ldr	r3, [pc, #40]	; (8ad8 <usb_serial_write_buffer_free+0x44>)
    8ab0:	ldrb	r3, [r3, #0]
    8ab2:	cbnz	r3, 8aba <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    8ab4:	movs	r0, #0
    8ab6:	strb	r0, [r4, #0]
			return 0;
    8ab8:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8aba:	movs	r0, #4
    8abc:	bl	9138 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8ac0:	cmp	r0, #7
    8ac2:	bhi.n	8ab4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    8ac4:	bl	9070 <usb_malloc>
    8ac8:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8aca:	cmp	r0, #0
    8acc:	bne.n	8aa2 <usb_serial_write_buffer_free+0xe>
    8ace:	b.n	8ab4 <usb_serial_write_buffer_free+0x20>
    8ad0:	.word	0x20019d48
    8ad4:	.word	0x20019d45
    8ad8:	.word	0x20019e3c

00008adc <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    8adc:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    8ade:	ldr	r3, [pc, #68]	; (8b24 <usb_serial_flush_output+0x48>)
    8ae0:	ldrb	r3, [r3, #0]
    8ae2:	cbz	r3, 8b08 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    8ae4:	ldr	r6, [pc, #64]	; (8b28 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8ae6:	ldr	r5, [pc, #68]	; (8b2c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    8ae8:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8aea:	movs	r7, #1
    8aec:	strb	r7, [r5, #0]
	if (tx_packet) {
    8aee:	cbz	r4, 8b0a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    8af0:	ldr	r2, [pc, #60]	; (8b30 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    8af2:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    8af4:	movs	r7, #0
    8af6:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8af8:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    8afa:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8afc:	movs	r0, #4
    8afe:	bl	922c <usb_tx>
		tx_packet = NULL;
    8b02:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    8b04:	movs	r3, #0
    8b06:	strb	r3, [r5, #0]
    8b08:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8b0a:	bl	9070 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8b0e:	ldr	r3, [pc, #32]	; (8b30 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    8b10:	cbz	r0, 8b1e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    8b12:	mov	r1, r0
    8b14:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8b16:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8b18:	bl	922c <usb_tx>
    8b1c:	b.n	8b04 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8b1e:	strb	r7, [r3, #0]
    8b20:	b.n	8b04 <usb_serial_flush_output+0x28>
    8b22:	nop
    8b24:	.word	0x20019e3c
    8b28:	.word	0x20019d48
    8b2c:	.word	0x20019d45
    8b30:	.word	0x20019d44

00008b34 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    8b34:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    8b36:	ldr	r3, [pc, #56]	; (8b70 <usb_serial_flush_callback+0x3c>)
    8b38:	ldrb	r3, [r3, #0]
    8b3a:	cbnz	r3, 8b5a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    8b3c:	ldr	r4, [pc, #52]	; (8b74 <usb_serial_flush_callback+0x40>)
    8b3e:	ldr	r1, [r4, #0]
    8b40:	cbz	r1, 8b5c <usb_serial_flush_callback+0x28>
    8b42:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    8b46:	ldrh	r3, [r1, #2]
    8b48:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8b4a:	movs	r0, #4
    8b4c:	bl	922c <usb_tx>
		tx_packet = NULL;
    8b50:	str	r5, [r4, #0]
    8b52:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8b54:	ldr	r3, [pc, #32]	; (8b78 <usb_serial_flush_callback+0x44>)
    8b56:	movs	r2, #1
    8b58:	strb	r2, [r3, #0]
    8b5a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8b5c:	bl	9070 <usb_malloc>
		if (tx) {
    8b60:	cmp	r0, #0
    8b62:	beq.n	8b54 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    8b64:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    8b66:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    8b6a:	movs	r0, #4
    8b6c:	b.w	922c <usb_tx>
    8b70:	.word	0x20019d45
    8b74:	.word	0x20019d48
    8b78:	.word	0x20019d44

00008b7c <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    8b7c:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8b7e:	ldr	r0, [pc, #164]	; (8c24 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8b80:	ldr	r2, [pc, #164]	; (8c28 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    8b82:	ldr	r3, [pc, #168]	; (8c2c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8b84:	ldr	r5, [pc, #168]	; (8c30 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8b86:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8b88:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8b8a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8b8c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    8b8e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8b90:	ldr	r4, [pc, #160]	; (8c34 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    8b92:	cmp	r3, #8
    8b94:	beq.n	8bf8 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8b96:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8b98:	ldr	r0, [pc, #156]	; (8c38 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8b9a:	ldr	r1, [pc, #160]	; (8c3c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8b9c:	beq.n	8c0e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    8b9e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    8ba0:	ite	eq
    8ba2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8ba4:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8ba6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8ba8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8baa:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8bac:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8bae:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8bb0:	ldr	r3, [pc, #140]	; (8c40 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8bb2:	ldr	r1, [pc, #144]	; (8c44 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8bb4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8bb6:	ldr	r2, [pc, #144]	; (8c48 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8bb8:	cbz	r3, 8bea <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8bba:	movs	r3, #1
    8bbc:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8bbe:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8bc0:	ldr	r3, [pc, #136]	; (8c4c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8bc2:	ldr	r1, [pc, #140]	; (8c50 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8bc4:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8bc6:	ldr	r2, [pc, #140]	; (8c54 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    8bc8:	cmp	r3, #1
    8bca:	bls.n	8c1a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    8bcc:	cmp	r3, #4
    8bce:	bls.n	8bf0 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    8bd0:	cmp	r3, #8
    8bd2:	bls.n	8c12 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    8bd4:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8bd6:	ite	ls
    8bd8:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8bda:	movhi	r3, #135	; 0x87
    8bdc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8bde:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    8be0:	ldr	r3, [pc, #116]	; (8c58 <analog_init+0xdc>)
    8be2:	movs	r2, #1
    8be4:	strb	r2, [r3, #0]
}
    8be6:	pop	{r4, r5}
    8be8:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8bea:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8bec:	str	r3, [r2, #0]
    8bee:	b.n	8bc0 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8bf0:	movs	r3, #132	; 0x84
    8bf2:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8bf4:	str	r3, [r2, #0]
    8bf6:	b.n	8be0 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8bf8:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8bfc:	ldr	r1, [pc, #60]	; (8c3c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8bfe:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8c00:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c02:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8c04:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c06:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8c08:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c0a:	str	r3, [r1, #0]
    8c0c:	b.n	8bb0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8c0e:	movs	r2, #57	; 0x39
    8c10:	b.n	8c02 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8c12:	movs	r3, #133	; 0x85
    8c14:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8c16:	str	r3, [r2, #0]
    8c18:	b.n	8be0 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8c1a:	movs	r3, #128	; 0x80
    8c1c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8c1e:	str	r3, [r2, #0]
    8c20:	b.n	8be0 <analog_init+0x64>
    8c22:	nop
    8c24:	.word	0x40074000
    8c28:	.word	0x40074001
    8c2c:	.word	0x20013ad9
    8c30:	.word	0x4003b008
    8c34:	.word	0x4003b00c
    8c38:	.word	0x400bb008
    8c3c:	.word	0x400bb00c
    8c40:	.word	0x20019d56
    8c44:	.word	0x4003b020
    8c48:	.word	0x400bb020
    8c4c:	.word	0x20013ada
    8c50:	.word	0x4003b024
    8c54:	.word	0x400bb024
    8c58:	.word	0x20019d55

00008c5c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    8c5c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    8c5e:	ldr	r4, [pc, #64]	; (8ca0 <fault_isr+0x44>)
    8c60:	b.n	8c74 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    8c62:	ldr	r3, [r4, #0]
    8c64:	lsls	r1, r3, #21
    8c66:	bmi.n	8c84 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8c68:	ldr	r3, [r4, #0]
    8c6a:	lsls	r2, r3, #20
    8c6c:	bmi.n	8c8e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    8c6e:	ldr	r3, [r4, #0]
    8c70:	lsls	r3, r3, #19
    8c72:	bmi.n	8c98 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    8c74:	ldr	r3, [r4, #0]
    8c76:	lsls	r0, r3, #13
    8c78:	bpl.n	8c62 <fault_isr+0x6>
    8c7a:	bl	92b0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    8c7e:	ldr	r3, [r4, #0]
    8c80:	lsls	r1, r3, #21
    8c82:	bpl.n	8c68 <fault_isr+0xc>
    8c84:	bl	8ca4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8c88:	ldr	r3, [r4, #0]
    8c8a:	lsls	r2, r3, #20
    8c8c:	bpl.n	8c6e <fault_isr+0x12>
    8c8e:	bl	8ca4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    8c92:	ldr	r3, [r4, #0]
    8c94:	lsls	r3, r3, #19
    8c96:	bpl.n	8c74 <fault_isr+0x18>
    8c98:	bl	8ca4 <unused_isr>
    8c9c:	b.n	8c74 <fault_isr+0x18>
    8c9e:	nop
    8ca0:	.word	0x40048034

00008ca4 <unused_isr>:
	}
}

void unused_isr(void)
{
    8ca4:	push	{r3, lr}
	fault_isr();
    8ca6:	bl	8c5c <fault_isr>
    8caa:	nop

00008cac <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    8cac:	ldr	r3, [pc, #4]	; (8cb4 <startup_early_hook+0x8>)
    8cae:	movs	r2, #16
    8cb0:	strh	r2, [r3, #0]
    8cb2:	bx	lr
    8cb4:	.word	0x40052000

00008cb8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    8cb8:	bx	lr
    8cba:	nop

00008cbc <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    8cbc:	ldr	r1, [pc, #36]	; (8ce4 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    8cbe:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    8cc0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    8cc2:	cbz	r0, 8cd2 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    8cc4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    8cc6:	add	r0, r3
    8cc8:	sub.w	r2, r2, #8192	; 0x2000
    8ccc:	cmp	r0, r2
    8cce:	bcs.n	8cd6 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    8cd0:	str	r0, [r1, #0]
	}
	return prev;
    8cd2:	mov	r0, r3
}
    8cd4:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    8cd6:	bl	b670 <__errno>
    8cda:	movs	r3, #12
    8cdc:	str	r3, [r0, #0]
			return (void *)-1;
    8cde:	mov.w	r0, #4294967295
    8ce2:	pop	{r3, pc}
    8ce4:	.word	0x20013adc

00008ce8 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    8ce8:	b.n	8ce8 <__cxa_pure_virtual>
    8cea:	nop

00008cec <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    8cec:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    8cee:	ldr	r3, [pc, #68]	; (8d34 <digitalWrite.part.1+0x48>)
    8cf0:	ldr.w	r2, [r3, r0, lsl #3]
    8cf4:	ldrb.w	r4, [r2, #640]	; 0x280
    8cf8:	cbz	r4, 8d08 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    8cfa:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    8cfc:	cbz	r1, 8d1e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    8cfe:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8d02:	ldr.w	r4, [sp], #4
    8d06:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    8d08:	add.w	r3, r3, r0, lsl #3
    8d0c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8d0e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    8d10:	cbnz	r1, 8d28 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    8d12:	bic.w	r2, r2, #2
    8d16:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8d18:	ldr.w	r4, [sp], #4
    8d1c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    8d1e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8d22:	ldr.w	r4, [sp], #4
    8d26:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8d28:	orr.w	r2, r2, #3
    8d2c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8d2e:	ldr.w	r4, [sp], #4
    8d32:	bx	lr
    8d34:	.word	0x00013250

00008d38 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    8d38:	ldr	r2, [pc, #112]	; (8dac <pinMode.part.2+0x74>)
    8d3a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8d3e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    8d40:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8d42:	beq.n	8d68 <pinMode.part.2+0x30>
    8d44:	cmp	r1, #4
    8d46:	beq.n	8d80 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    8d48:	ldr.w	r0, [r2, r0, lsl #3]
    8d4c:	movs	r2, #0
    8d4e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    8d52:	cbz	r1, 8d60 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    8d54:	cmp	r1, #2
    8d56:	beq.n	8d9a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    8d58:	cmp	r1, #3
    8d5a:	beq.n	8da2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    8d5c:	str	r2, [r3, #0]
    8d5e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    8d60:	mov.w	r2, #256	; 0x100
    8d64:	str	r2, [r3, #0]
    8d66:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8d68:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8d6c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8d70:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8d74:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    8d76:	ldr	r2, [r3, #0]
    8d78:	bic.w	r2, r2, #32
    8d7c:	str	r2, [r3, #0]
    8d7e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8d80:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8d84:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8d88:	movs	r0, #1
    8d8a:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8d8e:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    8d90:	ldr	r2, [r3, #0]
    8d92:	orr.w	r2, r2, #32
    8d96:	str	r2, [r3, #0]
    8d98:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    8d9a:	movw	r2, #259	; 0x103
    8d9e:	str	r2, [r3, #0]
    8da0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    8da2:	mov.w	r2, #258	; 0x102
    8da6:	str	r2, [r3, #0]
    8da8:	bx	lr
    8daa:	nop
    8dac:	.word	0x00013250

00008db0 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    8db0:	adds	r0, #16
    8db2:	ldr	r3, [pc, #8]	; (8dbc <attachInterruptVector+0xc>)
    8db4:	str.w	r1, [r3, r0, lsl #2]
    8db8:	bx	lr
    8dba:	nop
    8dbc:	.word	0x20013400

00008dc0 <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    8dc0:	ldr	r3, [pc, #4]	; (8dc8 <rtc_get+0x8>)
    8dc2:	ldr	r0, [r3, #0]
}
    8dc4:	bx	lr
    8dc6:	nop
    8dc8:	.word	0x4003d000

00008dcc <rtc_set>:

void rtc_set(unsigned long t)
{
    8dcc:	push	{r4, r5}
	RTC_SR = 0;
    8dce:	ldr	r3, [pc, #20]	; (8de4 <rtc_set+0x18>)
	RTC_TPR = 0;
    8dd0:	ldr	r5, [pc, #20]	; (8de8 <rtc_set+0x1c>)
	RTC_TSR = t;
    8dd2:	ldr	r4, [pc, #24]	; (8dec <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8dd4:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    8dd6:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8dd8:	str	r2, [r3, #0]
	RTC_TPR = 0;
    8dda:	str	r2, [r5, #0]
	RTC_TSR = t;
    8ddc:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    8dde:	str	r1, [r3, #0]
}
    8de0:	pop	{r4, r5}
    8de2:	bx	lr
    8de4:	.word	0x4003d014
    8de8:	.word	0x4003d004
    8dec:	.word	0x4003d000

00008df0 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    8df0:	cmp	r0, #63	; 0x3f
    8df2:	bhi.n	8df8 <digitalWrite+0x8>
    8df4:	b.w	8cec <digitalWrite.part.1>
    8df8:	bx	lr
    8dfa:	nop

00008dfc <digitalRead>:
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    8dfc:	cmp	r0, #63	; 0x3f
    8dfe:	bhi.n	8e0e <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    8e00:	ldr	r3, [pc, #16]	; (8e14 <digitalRead+0x18>)
    8e02:	ldr.w	r3, [r3, r0, lsl #3]
    8e06:	ldrb.w	r0, [r3, #512]	; 0x200
    8e0a:	uxtb	r0, r0
    8e0c:	bx	lr
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    8e0e:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    8e10:	bx	lr
    8e12:	nop
    8e14:	.word	0x00013250

00008e18 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    8e18:	cmp	r0, #63	; 0x3f
    8e1a:	bhi.n	8e20 <pinMode+0x8>
    8e1c:	b.w	8d38 <pinMode.part.2>
    8e20:	bx	lr
    8e22:	nop

00008e24 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8e24:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    8e26:	ldr	r1, [pc, #48]	; (8e58 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8e28:	ldr	r3, [pc, #48]	; (8e5c <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8e2a:	ldr	r2, [pc, #52]	; (8e60 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8e2c:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    8e2e:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8e30:	ldr	r2, [r2, #0]
	__enable_irq();
    8e32:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8e34:	lsls	r2, r2, #5
    8e36:	bpl.n	8e3e <micros+0x1a>
    8e38:	cmp	r3, #50	; 0x32
    8e3a:	it	hi
    8e3c:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8e3e:	ldr	r1, [pc, #36]	; (8e64 <micros+0x40>)
    8e40:	rsb	r3, r3, #95744	; 0x17600
    8e44:	mov.w	r2, #1000	; 0x3e8
    8e48:	adds	r3, #255	; 0xff
    8e4a:	umull	r1, r3, r1, r3
    8e4e:	mul.w	r0, r2, r0
}
    8e52:	add.w	r0, r0, r3, lsr #6
    8e56:	bx	lr
    8e58:	.word	0x20019d58
    8e5c:	.word	0xe000e018
    8e60:	.word	0xe000ed04
    8e64:	.word	0xaaaaaaab

00008e68 <delay>:

void delay(uint32_t ms)
{
    8e68:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e6c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8e6e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    8e70:	ldr	r7, [pc, #128]	; (8ef4 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8e72:	ldr	r3, [pc, #132]	; (8ef8 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8e74:	ldr	r2, [pc, #132]	; (8efc <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8e76:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    8e78:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8e7a:	ldr	r2, [r2, #0]
	__enable_irq();
    8e7c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8e7e:	lsls	r2, r2, #5
    8e80:	bpl.n	8e88 <delay+0x20>
    8e82:	cmp	r3, #50	; 0x32
    8e84:	it	hi
    8e86:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    8e88:	cbz	r5, 8ef0 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8e8a:	rsb	r3, r3, #95744	; 0x17600
    8e8e:	ldr	r6, [pc, #112]	; (8f00 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8e90:	ldr.w	r9, [pc, #100]	; 8ef8 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8e94:	ldr.w	r8, [pc, #100]	; 8efc <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8e98:	adds	r3, #255	; 0xff
    8e9a:	mov.w	r2, #1000	; 0x3e8
    8e9e:	umull	r1, r3, r6, r3
    8ea2:	mul.w	r4, r2, r4
    8ea6:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8eaa:	cpsid	i
	current = SYST_CVR;
    8eac:	ldr.w	r1, [r9]
	count = systick_millis_count;
    8eb0:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8eb2:	ldr.w	lr, [r8]
	__enable_irq();
    8eb6:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8eb8:	rsb	r3, r1, #95744	; 0x17600
    8ebc:	adds	r3, #255	; 0xff
    8ebe:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8ec2:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8ec6:	rsb	r3, r4, r3, lsr #6
    8eca:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8ece:	beq.n	8ed6 <delay+0x6e>
    8ed0:	cmp	r1, #50	; 0x32
    8ed2:	it	hi
    8ed4:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8ed6:	mla	r3, r0, r2, r3
    8eda:	cmp.w	r3, #1000	; 0x3e8
    8ede:	bcc.n	8eea <delay+0x82>
				ms--;
				if (ms == 0) return;
    8ee0:	subs	r5, #1
    8ee2:	beq.n	8ef0 <delay+0x88>
				start += 1000;
    8ee4:	add.w	r4, r4, #1000	; 0x3e8
    8ee8:	b.n	8eaa <delay+0x42>
			}
			yield();
    8eea:	bl	9e44 <yield>
		}
    8eee:	b.n	8eaa <delay+0x42>
    8ef0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8ef4:	.word	0x20019d58
    8ef8:	.word	0xe000e018
    8efc:	.word	0xe000ed04
    8f00:	.word	0xaaaaaaab

00008f04 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    8f04:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8f06:	ldr	r3, [pc, #312]	; (9040 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8f08:	ldr	r0, [pc, #312]	; (9044 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    8f0a:	ldr.w	ip, [pc, #348]	; 9068 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    8f0e:	ldr	r4, [pc, #312]	; (9048 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    8f10:	ldr	r1, [pc, #312]	; (904c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8f12:	ldr.w	lr, [pc, #344]	; 906c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    8f16:	ldr	r6, [pc, #312]	; (9050 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    8f18:	ldr	r5, [pc, #312]	; (9054 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    8f1a:	ldr	r7, [pc, #316]	; (9058 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8f1c:	mov.w	r2, #134217728	; 0x8000000
    8f20:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    8f22:	mov.w	r2, #268435456	; 0x10000000
    8f26:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    8f28:	mov.w	r2, #536870912	; 0x20000000
    8f2c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    8f2e:	mov.w	r2, #1073741824	; 0x40000000
    8f32:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    8f34:	mov.w	r2, #2147483648	; 0x80000000
    8f38:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8f3a:	movs	r2, #0
    8f3c:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8f3e:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    8f40:	movw	r0, #49151	; 0xbfff
    8f44:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8f48:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    8f4c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    8f4e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    8f52:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    8f54:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    8f56:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8f58:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    8f5c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    8f5e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    8f62:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    8f64:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    8f68:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    8f6a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    8f6e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8f72:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    8f76:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    8f7a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    8f7e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    8f80:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    8f84:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8f86:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    8f88:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    8f8a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    8f8e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    8f90:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    8f92:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8f94:	ldr	r4, [pc, #196]	; (905c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    8f96:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    8f98:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8f9a:	movs	r1, #9
    8f9c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    8f9e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    8fa2:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    8fa6:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    8fa8:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    8faa:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    8fac:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    8fae:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    8fb0:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8fb2:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8fb6:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    8fba:	add.w	r7, r7, #520192	; 0x7f000
    8fbe:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8fc0:	addw	r4, r4, #2044	; 0x7fc
    8fc4:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    8fc6:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    8fc8:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    8fca:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8fcc:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    8fd0:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    8fd2:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    8fd6:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    8fda:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8fdc:	sub.w	r4, r4, #460800	; 0x70800
    8fe0:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    8fe4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    8fe6:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8fe8:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8fec:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8fee:	ldr	r0, [pc, #112]	; (9060 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8ff0:	orr.w	r1, r1, #512	; 0x200
    8ff4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8ff6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8ff8:	ldr	r4, [pc, #104]	; (9064 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    8ffa:	add.w	lr, lr, #65280	; 0xff00
    8ffe:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    9002:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    9006:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    900a:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    900e:	orr.w	r1, r1, #33554432	; 0x2000000
    9012:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    9014:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    9018:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    901c:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    901e:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9020:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    9022:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9024:	str	r2, [r4, #0]
#endif
	analog_init();
    9026:	bl	8b7c <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    902a:	movs	r0, #25
    902c:	bl	8e68 <delay>
	usb_init();
    9030:	bl	9d7c <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    9034:	movw	r0, #275	; 0x113
}
    9038:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    903c:	b.w	8e68 <delay>
    9040:	.word	0xe000e104
    9044:	.word	0x40038004
    9048:	.word	0x40038014
    904c:	.word	0x4003801c
    9050:	.word	0x40038024
    9054:	.word	0x4003802c
    9058:	.word	0x40038034
    905c:	.word	0x40038000
    9060:	.word	0x40048004
    9064:	.word	0x400c9000
    9068:	.word	0x40038008
    906c:	.word	0x4003800c

00009070 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9070:	cpsid	i
	avail = usb_buffer_available;
    9072:	ldr	r0, [pc, #52]	; (90a8 <usb_malloc+0x38>)
    9074:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    9076:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    907a:	cmp	r3, #11
    907c:	bgt.n	90a0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    907e:	mov.w	r1, #2147483648	; 0x80000000
    9082:	lsrs	r1, r3
    9084:	bic.w	r2, r2, r1
    9088:	str	r2, [r0, #0]
	__enable_irq();
    908a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    908c:	ldr	r0, [pc, #28]	; (90ac <usb_malloc+0x3c>)
    908e:	add.w	r3, r3, r3, lsl #3
    9092:	lsls	r3, r3, #3
    9094:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    9096:	movs	r1, #0
    9098:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    909a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    909c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    909e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    90a0:	cpsie	i
		return NULL;
    90a2:	movs	r0, #0
    90a4:	bx	lr
    90a6:	nop
    90a8:	.word	0x20013ae0
    90ac:	.word	0x200135d0

000090b0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    90b0:	ldr	r3, [pc, #52]	; (90e8 <usb_free+0x38>)
    90b2:	ldr	r2, [pc, #56]	; (90ec <usb_free+0x3c>)
    90b4:	subs	r3, r0, r3
    90b6:	umull	r2, r3, r2, r3
    90ba:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    90bc:	cmp	r3, #11
    90be:	bhi.n	90da <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    90c0:	ldr	r2, [pc, #44]	; (90f0 <usb_free+0x40>)
    90c2:	ldrb	r2, [r2, #0]
    90c4:	cbnz	r2, 90dc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    90c6:	cpsid	i
	usb_buffer_available |= mask;
    90c8:	ldr	r0, [pc, #40]	; (90f4 <usb_free+0x44>)
    90ca:	mov.w	r1, #2147483648	; 0x80000000
    90ce:	ldr	r2, [r0, #0]
    90d0:	lsr.w	r3, r1, r3
    90d4:	orrs	r2, r3
    90d6:	str	r2, [r0, #0]
	__enable_irq();
    90d8:	cpsie	i
    90da:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    90dc:	ldr	r2, [pc, #24]	; (90f8 <usb_free+0x48>)
    90de:	ldrb	r2, [r2, #0]
    90e0:	cmp	r2, #0
    90e2:	beq.n	90c6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    90e4:	b.w	9164 <usb_rx_memory>
    90e8:	.word	0x200135d0
    90ec:	.word	0x38e38e39
    90f0:	.word	0x20019e31
    90f4:	.word	0x20013ae0
    90f8:	.word	0x20019e3c

000090fc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    90fc:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    90fe:	cmp	r3, #3
    9100:	bhi.n	912c <usb_rx+0x30>
	__disable_irq();
    9102:	cpsid	i
	ret = rx_first[endpoint];
    9104:	ldr	r1, [pc, #40]	; (9130 <usb_rx+0x34>)
    9106:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    910a:	cbz	r0, 9128 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    910c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    910e:	ldr	r4, [pc, #36]	; (9134 <usb_rx+0x38>)
    9110:	ldrh	r5, [r0, #0]
    9112:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    9116:	ldr	r6, [r0, #4]
    9118:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    911c:	subs	r2, r2, r5
    911e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9122:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9124:	pop	{r4, r5, r6}
    9126:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9128:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    912a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    912c:	movs	r0, #0
    912e:	bx	lr
    9130:	.word	0x20019db4
    9134:	.word	0x20019f40

00009138 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9138:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    913a:	cmp	r0, #3
    913c:	bhi.n	9156 <usb_tx_packet_count+0x1e>
	__disable_irq();
    913e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9140:	ldr	r3, [pc, #28]	; (9160 <usb_tx_packet_count+0x28>)
    9142:	ldr.w	r3, [r3, r0, lsl #2]
    9146:	cbz	r3, 915a <usb_tx_packet_count+0x22>
    9148:	movs	r0, #0
    914a:	ldr	r3, [r3, #4]
    914c:	adds	r0, #1
    914e:	cmp	r3, #0
    9150:	bne.n	914a <usb_tx_packet_count+0x12>
	__enable_irq();
    9152:	cpsie	i
	return count;
    9154:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9156:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    9158:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    915a:	mov	r0, r3
    915c:	b.n	9152 <usb_tx_packet_count+0x1a>
    915e:	nop
    9160:	.word	0x20019e08

00009164 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    9164:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    9166:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9168:	ldr	r2, [pc, #172]	; (9218 <usb_rx_memory+0xb4>)
    916a:	ldrb	r3, [r2, #0]
    916c:	lsls	r5, r3, #28
    916e:	bpl.n	917e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9170:	ldr	r3, [pc, #168]	; (921c <usb_rx_memory+0xb8>)
    9172:	ldr	r1, [r3, #32]
    9174:	cmp	r1, #0
    9176:	beq.n	91e6 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9178:	ldr	r1, [r3, #40]	; 0x28
    917a:	cmp	r1, #0
    917c:	beq.n	9202 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    917e:	ldrb	r3, [r2, #1]
    9180:	lsls	r4, r3, #28
    9182:	bpl.n	9192 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9184:	ldr	r3, [pc, #148]	; (921c <usb_rx_memory+0xb8>)
    9186:	ldr	r1, [r3, #64]	; 0x40
    9188:	cmp	r1, #0
    918a:	beq.n	920a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    918c:	ldr	r1, [r3, #72]	; 0x48
    918e:	cmp	r1, #0
    9190:	beq.n	9206 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9192:	ldrb	r3, [r2, #2]
    9194:	lsls	r1, r3, #28
    9196:	bpl.n	91a4 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9198:	ldr	r3, [pc, #128]	; (921c <usb_rx_memory+0xb8>)
    919a:	ldr	r1, [r3, #96]	; 0x60
    919c:	cmp	r1, #0
    919e:	beq.n	920e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    91a0:	ldr	r1, [r3, #104]	; 0x68
    91a2:	cbz	r1, 91c8 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    91a4:	ldrb	r3, [r2, #3]
    91a6:	lsls	r3, r3, #28
    91a8:	bpl.n	91ba <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    91aa:	ldr	r3, [pc, #112]	; (921c <usb_rx_memory+0xb8>)
    91ac:	ldr.w	r2, [r3, #128]	; 0x80
    91b0:	cbz	r2, 9212 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    91b2:	ldr.w	r2, [r3, #136]	; 0x88
    91b6:	movs	r1, #17
    91b8:	cbz	r2, 91ca <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    91ba:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    91bc:	ldr	r3, [pc, #96]	; (9220 <usb_rx_memory+0xbc>)
    91be:	movs	r2, #0
    91c0:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    91c2:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    91c4:	b.w	90b0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    91c8:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    91ca:	ldr	r4, [pc, #84]	; (9220 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    91cc:	ldr	r5, [pc, #84]	; (9224 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    91ce:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    91d0:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    91d4:	add.w	r3, r3, r1, lsl #3
    91d8:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    91da:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    91dc:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    91de:	strb	r2, [r4, #0]
				__enable_irq();
    91e0:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    91e2:	pop	{r4, r5}
    91e4:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    91e6:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    91e8:	ldr	r4, [pc, #52]	; (9220 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    91ea:	ldr	r5, [pc, #60]	; (9228 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    91ec:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    91ee:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    91f2:	add.w	r3, r3, r2, lsl #3
    91f6:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    91f8:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    91fa:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    91fc:	strb	r2, [r4, #0]
				__enable_irq();
    91fe:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9200:	b.n	91e2 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9202:	movs	r1, #5
    9204:	b.n	91ca <usb_rx_memory+0x66>
    9206:	movs	r1, #9
    9208:	b.n	91ca <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    920a:	movs	r2, #8
    920c:	b.n	91e8 <usb_rx_memory+0x84>
    920e:	movs	r2, #12
    9210:	b.n	91e8 <usb_rx_memory+0x84>
    9212:	movs	r2, #16
    9214:	b.n	91e8 <usb_rx_memory+0x84>
    9216:	nop
    9218:	.word	0x0001347c
    921c:	.word	0x1fff0000
    9220:	.word	0x20019e31
    9224:	.word	0x004000c8
    9228:	.word	0x00400088

0000922c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    922c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    922e:	cmp	r3, #3
    9230:	bhi.n	926e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9232:	ldr	r2, [pc, #108]	; (92a0 <usb_tx+0x74>)
    9234:	lsls	r0, r0, #5
    9236:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    923a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    923c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    923e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    9240:	ldr	r4, [pc, #96]	; (92a4 <usb_tx+0x78>)
    9242:	ldrb	r2, [r4, r3]
    9244:	cmp	r2, #3
    9246:	bhi.n	9280 <usb_tx+0x54>
    9248:	tbb	[pc, r2]
    924c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    9250:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9252:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    9254:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9256:	tst.w	r0, #8
    925a:	ite	ne
    925c:	movne	r3, #200	; 0xc8
    925e:	moveq	r3, #136	; 0x88
    9260:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9264:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9266:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9268:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    926a:	cpsie	i
}
    926c:	pop	{r4, r5}
    926e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    9270:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    9272:	movs	r2, #2
		break;
    9274:	b.n	9252 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    9276:	movs	r2, #5
    9278:	b.n	9252 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    927a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    927c:	movs	r2, #4
		break;
    927e:	b.n	9252 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9280:	ldr	r2, [pc, #36]	; (92a8 <usb_tx+0x7c>)
    9282:	ldr.w	r0, [r2, r3, lsl #2]
    9286:	cbz	r0, 9298 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    9288:	ldr	r2, [pc, #32]	; (92ac <usb_tx+0x80>)
    928a:	ldr.w	r0, [r2, r3, lsl #2]
    928e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9290:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    9294:	cpsie	i
		return;
    9296:	b.n	926c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    9298:	str.w	r1, [r2, r3, lsl #2]
    929c:	ldr	r2, [pc, #12]	; (92ac <usb_tx+0x80>)
    929e:	b.n	9290 <usb_tx+0x64>
    92a0:	.word	0x1fff0000
    92a4:	.word	0x20019e40
    92a8:	.word	0x20019e08
    92ac:	.word	0x20019e18

000092b0 <usb_isr>:
}



void usb_isr(void)
{
    92b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    92b4:	ldr.w	fp, [pc, #792]	; 95d0 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    92b8:	ldr.w	sl, [pc, #792]	; 95d4 <usb_isr+0x324>
}



void usb_isr(void)
{
    92bc:	sub	sp, #28
    92be:	b.n	934a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    92c0:	ldr	r7, [pc, #696]	; (957c <usb_isr+0x2cc>)
    92c2:	mov.w	r8, r3, lsr #2
    92c6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    92ca:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    92cc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    92d0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    92d4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    92d6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    92da:	and.w	r4, r3, #255	; 0xff
    92de:	cmp	r3, #0
    92e0:	bne.w	94ec <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    92e4:	ldr.w	r3, [r7, r8, lsl #3]
    92e8:	lsrs	r3, r3, #16
    92ea:	uxth	r1, r3
    92ec:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    92f0:	cmp	r3, #0
    92f2:	beq.w	94da <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    92f6:	ldr	r3, [pc, #648]	; (9580 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    92f8:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    92fc:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    9300:	ldr.w	r2, [r3, r6, lsl #2]
    9304:	cmp	r2, #0
    9306:	beq.w	95e6 <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    930a:	ldr	r5, [pc, #632]	; (9584 <usb_isr+0x2d4>)
    930c:	ldr.w	r3, [r5, r6, lsl #2]
    9310:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    9312:	ldr	r4, [pc, #628]	; (9588 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    9314:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    9318:	ldrh.w	r3, [r4, r6, lsl #1]
    931c:	add	r1, r3
    931e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    9322:	bl	9070 <usb_malloc>
					if (packet) {
    9326:	cmp	r0, #0
    9328:	beq.w	95d8 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    932c:	ldr	r2, [pc, #604]	; (958c <usb_isr+0x2dc>)
    932e:	ldr	r3, [pc, #608]	; (9590 <usb_isr+0x2e0>)
    9330:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9334:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    9338:	it	ne
    933a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    933c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    9340:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    9344:	movs	r3, #8
    9346:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    934a:	ldrb.w	r4, [fp]
    934e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    9350:	lsls	r1, r4, #29
    9352:	bpl.n	938c <usb_isr+0xdc>
		if (usb_configuration) {
    9354:	ldr	r3, [pc, #572]	; (9594 <usb_isr+0x2e4>)
    9356:	ldrb	r3, [r3, #0]
    9358:	cbz	r3, 9386 <usb_isr+0xd6>
			t = usb_reboot_timer;
    935a:	ldr	r1, [pc, #572]	; (9598 <usb_isr+0x2e8>)
    935c:	ldrb	r2, [r1, #0]
			if (t) {
    935e:	and.w	r3, r2, #255	; 0xff
    9362:	cbz	r2, 9370 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    9364:	subs	r3, #1
    9366:	uxtb	r3, r3
    9368:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    936a:	cmp	r3, #0
    936c:	beq.w	9d4e <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    9370:	ldr	r1, [pc, #552]	; (959c <usb_isr+0x2ec>)
    9372:	ldrb	r2, [r1, #0]
			if (t) {
    9374:	and.w	r3, r2, #255	; 0xff
    9378:	cbz	r2, 9386 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    937a:	subs	r3, #1
    937c:	uxtb	r3, r3
    937e:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9380:	cmp	r3, #0
    9382:	beq.w	9574 <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    9386:	movs	r3, #4
    9388:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    938c:	and.w	r3, r4, #8
    9390:	and.w	r2, r3, #255	; 0xff
    9394:	cmp	r3, #0
    9396:	beq.w	9546 <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    939a:	ldrb.w	r3, [sl]
    939e:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    93a0:	lsrs	r6, r3, #4
    93a2:	bne.n	92c0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    93a4:	lsrs	r4, r3, #2
    93a6:	ldr.w	r9, [pc, #468]	; 957c <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    93aa:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    93ae:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    93b2:	ubfx	r2, r2, #2, #4
    93b6:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    93b8:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    93ba:	cmp	r2, #12
    93bc:	bhi.n	94bc <usb_isr+0x20c>
    93be:	tbb	[pc, r2]
    93c2:	.short	0x8181
    93c4:	.word	0x7d7d7d7d
    93c8:	.word	0x7d477d7d
    93cc:	.short	0x7d7d
    93ce:	.byte	0x07
    93cf:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    93d0:	ldr	r0, [r1, #0]
    93d2:	ldr	r5, [pc, #460]	; (95a0 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    93d4:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    93d6:	ldr	r7, [pc, #460]	; (95a4 <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    93d8:	ldr	r6, [pc, #460]	; (95a8 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    93da:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    93dc:	uxth	r1, r0
    93de:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    93e2:	ldr	r3, [pc, #424]	; (958c <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    93e4:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    93e6:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    93ea:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    93ec:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    93ee:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    93f2:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    93f4:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    93f8:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    93fc:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    9400:	ldr	r4, [pc, #376]	; (957c <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9402:	bhi.w	95ee <usb_isr+0x33e>
    9406:	cmp.w	r1, #1664	; 0x680
    940a:	bcs.w	9afe <usb_isr+0x84e>
    940e:	cmp.w	r1, #258	; 0x102
    9412:	beq.w	9ada <usb_isr+0x82a>
    9416:	bhi.w	9928 <usb_isr+0x678>
    941a:	cmp	r1, #128	; 0x80
    941c:	beq.w	99f8 <usb_isr+0x748>
    9420:	cmp	r1, #130	; 0x82
    9422:	bne.w	9a62 <usb_isr+0x7b2>
    9426:	ldrh	r1, [r5, #4]
    9428:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    942c:	cmp	r1, #4
    942e:	bhi.w	9a62 <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    9432:	ldr	r0, [pc, #376]	; (95ac <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    9434:	ldr	r4, [pc, #376]	; (95b0 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    9436:	lsls	r1, r1, #2
    9438:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    943a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    943c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    943e:	ldrb	r2, [r0, #0]
    9440:	lsls	r3, r2, #30
    9442:	bpl.w	9b38 <usb_isr+0x888>
    9446:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    944a:	mov.w	lr, #2
    944e:	b.n	9a02 <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    9450:	ldr	r7, [pc, #336]	; (95a4 <usb_isr+0x2f4>)
    9452:	ldr	r2, [r7, #0]
		if (data) {
    9454:	cbz	r2, 94a8 <usb_isr+0x1f8>
			size = ep0_tx_len;
    9456:	ldr	r3, [pc, #348]	; (95b4 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9458:	ldr	r6, [pc, #332]	; (95a8 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    945a:	ldr	r1, [pc, #348]	; (95b8 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    945c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    945e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9460:	ldrb	r5, [r1, #0]
    9462:	cmp	r0, #64	; 0x40
    9464:	mov	lr, r0
    9466:	orr.w	r8, r5, #2
    946a:	it	cs
    946c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9470:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    9472:	eor.w	r4, r4, #1
    9476:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9478:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    947c:	ite	eq
    947e:	moveq	r4, #136	; 0x88
    9480:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9482:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9486:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9488:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    948c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9490:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9492:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9494:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    9498:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    949a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    949c:	cbnz	r0, 94a6 <usb_isr+0x1f6>
    949e:	cmp.w	lr, #64	; 0x40
    94a2:	it	ne
    94a4:	movne	r2, #0
    94a6:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    94a8:	ldr	r3, [pc, #244]	; (95a0 <usb_isr+0x2f0>)
    94aa:	ldrh	r2, [r3, #0]
    94ac:	cmp.w	r2, #1280	; 0x500
    94b0:	bne.n	94bc <usb_isr+0x20c>
			setup.bRequest = 0;
    94b2:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    94b4:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    94b6:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    94b8:	ldr	r3, [pc, #256]	; (95bc <usb_isr+0x30c>)
    94ba:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    94bc:	ldr	r2, [pc, #256]	; (95c0 <usb_isr+0x310>)
    94be:	movs	r3, #1
    94c0:	strb	r3, [r2, #0]
    94c2:	b.n	9344 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    94c4:	ldr	r2, [pc, #216]	; (95a0 <usb_isr+0x2f0>)
    94c6:	ldrh	r5, [r2, #0]
    94c8:	movw	r0, #8225	; 0x2021
    94cc:	cmp	r5, r0
    94ce:	beq.w	98d0 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    94d2:	ldr	r2, [pc, #184]	; (958c <usb_isr+0x2dc>)
    94d4:	str.w	r2, [r9, r4, lsl #3]
    94d8:	b.n	94bc <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    94da:	ldr	r2, [pc, #176]	; (958c <usb_isr+0x2dc>)
    94dc:	ldr	r3, [pc, #176]	; (9590 <usb_isr+0x2e0>)
    94de:	tst.w	r9, #8
    94e2:	it	ne
    94e4:	movne	r3, r2
    94e6:	str.w	r3, [r7, r8, lsl #3]
    94ea:	b.n	9344 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    94ec:	bl	90b0 <usb_free>
				packet = tx_first[endpoint];
    94f0:	ldr	r2, [pc, #208]	; (95c4 <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    94f2:	ldr	r1, [pc, #212]	; (95c8 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    94f4:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    94f8:	cmp	r3, #0
    94fa:	beq.w	986a <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    94fe:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9500:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9502:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    9506:	add.w	r2, r3, #8
    950a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    950e:	cmp	r4, #3
    9510:	bhi.n	951e <usb_isr+0x26e>
    9512:	tbb	[pc, r4]
    9516:	.short	0x0f12
    9518:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    951a:	movs	r2, #4
    951c:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    951e:	ldrh	r2, [r3, #0]
    9520:	tst.w	r9, #8
    9524:	ite	eq
    9526:	moveq	r3, #136	; 0x88
    9528:	movne	r3, #200	; 0xc8
    952a:	orr.w	r3, r3, r2, lsl #16
    952e:	str.w	r3, [r7, r8, lsl #3]
    9532:	b.n	9344 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    9534:	movs	r2, #2
    9536:	strb	r2, [r1, r6]
						break;
    9538:	b.n	951e <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    953a:	movs	r2, #3
    953c:	strb	r2, [r1, r6]
						break;
    953e:	b.n	951e <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    9540:	movs	r2, #5
    9542:	strb	r2, [r1, r6]
						break;
    9544:	b.n	951e <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    9546:	lsls	r0, r4, #31
    9548:	bmi.w	9980 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    954c:	lsls	r1, r4, #24
    954e:	bmi.w	99e4 <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9552:	lsls	r2, r4, #30
    9554:	bpl.n	9564 <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    9556:	ldr	r2, [pc, #116]	; (95cc <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9558:	ldr	r1, [pc, #116]	; (95d0 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    955a:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    955c:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    955e:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    9560:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9562:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    9564:	lsls	r3, r4, #27
    9566:	bpl.n	956e <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    9568:	ldr	r3, [pc, #100]	; (95d0 <usb_isr+0x320>)
    956a:	movs	r2, #16
    956c:	strb	r2, [r3, #0]
	}

}
    956e:	add	sp, #28
    9570:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    9574:	bl	8b34 <usb_serial_flush_callback>
    9578:	b.n	9386 <usb_isr+0xd6>
    957a:	nop
    957c:	.word	0x1fff0000
    9580:	.word	0x20019db4
    9584:	.word	0x20019d60
    9588:	.word	0x20019f40
    958c:	.word	0x004000c8
    9590:	.word	0x00400088
    9594:	.word	0x20019e3c
    9598:	.word	0x20019dc5
    959c:	.word	0x20019d44
    95a0:	.word	0x20019e28
    95a4:	.word	0x20019d5c
    95a8:	.word	0x20019dc4
    95ac:	.word	0x400720c0
    95b0:	.word	0x20019e34
    95b4:	.word	0x20019d70
    95b8:	.word	0x20019e30
    95bc:	.word	0x40072098
    95c0:	.word	0x40072094
    95c4:	.word	0x20019e08
    95c8:	.word	0x20019e40
    95cc:	.word	0x40072088
    95d0:	.word	0x40072080
    95d4:	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    95d8:	ldr	r2, [pc, #684]	; (9888 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    95da:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    95de:	ldrb	r3, [r2, #0]
    95e0:	adds	r3, #1
    95e2:	strb	r3, [r2, #0]
    95e4:	b.n	9344 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    95e6:	str.w	r0, [r3, r6, lsl #2]
    95ea:	ldr	r5, [pc, #672]	; (988c <usb_isr+0x5dc>)
    95ec:	b.n	9312 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    95ee:	movw	r0, #8225	; 0x2021
    95f2:	cmp	r1, r0
    95f4:	beq.w	9862 <usb_isr+0x5b2>
    95f8:	bhi.w	995a <usb_isr+0x6aa>
    95fc:	cmp.w	r1, #2176	; 0x880
    9600:	beq.w	9a3a <usb_isr+0x78a>
    9604:	cmp.w	r1, #2304	; 0x900
    9608:	bne.w	9a62 <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    960c:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    960e:	ldr	r1, [pc, #640]	; (9890 <usb_isr+0x5e0>)
    9610:	ldrb	r0, [r5, #2]
    9612:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9614:	lsls	r2, r2, #24
    9616:	bmi.w	9ca4 <usb_isr+0x9f4>
    961a:	ldr.w	r2, [r9, #40]	; 0x28
    961e:	ldr	r1, [pc, #628]	; (9894 <usb_isr+0x5e4>)
    9620:	lsls	r3, r2, #24
    9622:	bmi.w	9c9a <usb_isr+0x9ea>
    9626:	ldr.w	r2, [r9, #48]	; 0x30
    962a:	ldr	r1, [pc, #616]	; (9894 <usb_isr+0x5e4>)
    962c:	lsls	r5, r2, #24
    962e:	bmi.w	9c90 <usb_isr+0x9e0>
    9632:	ldr.w	r2, [r9, #56]	; 0x38
    9636:	ldr	r1, [pc, #604]	; (9894 <usb_isr+0x5e4>)
    9638:	lsls	r4, r2, #24
    963a:	bmi.w	9c86 <usb_isr+0x9d6>
    963e:	ldr.w	r2, [r9, #64]	; 0x40
    9642:	ldr	r1, [pc, #592]	; (9894 <usb_isr+0x5e4>)
    9644:	lsls	r0, r2, #24
    9646:	bmi.w	9c7c <usb_isr+0x9cc>
    964a:	ldr.w	r2, [r9, #72]	; 0x48
    964e:	ldr	r1, [pc, #580]	; (9894 <usb_isr+0x5e4>)
    9650:	lsls	r2, r2, #24
    9652:	bmi.w	9c72 <usb_isr+0x9c2>
    9656:	ldr.w	r2, [r9, #80]	; 0x50
    965a:	ldr	r1, [pc, #568]	; (9894 <usb_isr+0x5e4>)
    965c:	lsls	r3, r2, #24
    965e:	bmi.w	9c68 <usb_isr+0x9b8>
    9662:	ldr.w	r2, [r9, #88]	; 0x58
    9666:	ldr	r1, [pc, #556]	; (9894 <usb_isr+0x5e4>)
    9668:	lsls	r5, r2, #24
    966a:	bmi.w	9c5e <usb_isr+0x9ae>
    966e:	ldr.w	r2, [r9, #96]	; 0x60
    9672:	ldr	r1, [pc, #544]	; (9894 <usb_isr+0x5e4>)
    9674:	lsls	r4, r2, #24
    9676:	bmi.w	9ccc <usb_isr+0xa1c>
    967a:	ldr.w	r2, [r9, #104]	; 0x68
    967e:	ldr	r1, [pc, #532]	; (9894 <usb_isr+0x5e4>)
    9680:	lsls	r0, r2, #24
    9682:	bmi.w	9cc2 <usb_isr+0xa12>
    9686:	ldr.w	r2, [r9, #112]	; 0x70
    968a:	ldr	r1, [pc, #520]	; (9894 <usb_isr+0x5e4>)
    968c:	lsls	r2, r2, #24
    968e:	bmi.w	9cb8 <usb_isr+0xa08>
    9692:	ldr.w	r2, [r9, #120]	; 0x78
    9696:	ldr	r1, [pc, #508]	; (9894 <usb_isr+0x5e4>)
    9698:	lsls	r3, r2, #24
    969a:	bmi.w	9cae <usb_isr+0x9fe>
    969e:	ldr.w	r2, [r9, #128]	; 0x80
    96a2:	ldr	r1, [pc, #496]	; (9894 <usb_isr+0x5e4>)
    96a4:	lsls	r5, r2, #24
    96a6:	bmi.w	9ce2 <usb_isr+0xa32>
    96aa:	ldr.w	r2, [r9, #136]	; 0x88
    96ae:	ldr	r1, [pc, #484]	; (9894 <usb_isr+0x5e4>)
    96b0:	lsls	r4, r2, #24
    96b2:	bmi.w	9cd6 <usb_isr+0xa26>
    96b6:	ldr.w	r2, [r9, #144]	; 0x90
    96ba:	ldr	r1, [pc, #472]	; (9894 <usb_isr+0x5e4>)
    96bc:	lsls	r0, r2, #24
    96be:	bmi.w	9c52 <usb_isr+0x9a2>
    96c2:	ldr.w	r2, [r9, #152]	; 0x98
    96c6:	ldr	r1, [pc, #460]	; (9894 <usb_isr+0x5e4>)
    96c8:	lsls	r2, r2, #24
    96ca:	bmi.w	9c46 <usb_isr+0x996>
    96ce:	ldr	r0, [pc, #456]	; (9898 <usb_isr+0x5e8>)
    96d0:	ldr	r2, [pc, #456]	; (989c <usb_isr+0x5ec>)
    96d2:	ldr	r1, [pc, #460]	; (98a0 <usb_isr+0x5f0>)
    96d4:	str	r0, [sp, #4]
    96d6:	ldr	r0, [pc, #460]	; (98a4 <usb_isr+0x5f4>)
    96d8:	ldr	r5, [pc, #432]	; (988c <usb_isr+0x5dc>)
    96da:	ldr	r4, [pc, #460]	; (98a8 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    96dc:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    96de:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    96e0:	str	r6, [sp, #20]
    96e2:	str	r5, [sp, #8]
    96e4:	mov	r8, r0
    96e6:	mov	r7, r2
    96e8:	mov	r6, r1
    96ea:	mov	r5, r3
    96ec:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    96ee:	ldr	r0, [r7, #0]
			while (p) {
    96f0:	cbz	r0, 96fe <usb_isr+0x44e>
				n = p->next;
    96f2:	ldr	r4, [r0, #4]
				usb_free(p);
    96f4:	bl	90b0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    96f8:	mov	r0, r4
    96fa:	cmp	r4, #0
    96fc:	bne.n	96f2 <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    96fe:	movs	r3, #0
    9700:	str	r3, [r7, #0]
			rx_last[i] = NULL;
    9702:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9704:	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9706:	mov	r2, r3
    9708:	movs	r3, #0
    970a:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    970e:	cbz	r0, 971c <usb_isr+0x46c>
				n = p->next;
    9710:	ldr	r4, [r0, #4]
				usb_free(p);
    9712:	bl	90b0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9716:	mov	r0, r4
    9718:	cmp	r4, #0
    971a:	bne.n	9710 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    971c:	movs	r2, #0
    971e:	str	r2, [r6, #0]
			tx_last[i] = NULL;
    9720:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9722:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9726:	mov	r1, r2
    9728:	movs	r2, #0
    972a:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    972e:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9730:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9732:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9734:	mov.w	r1, #0
    9738:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    973c:	cmp	r3, #3
    973e:	bhi.n	9754 <usb_isr+0x4a4>
    9740:	tbh	[pc, r3, lsl #1]
    9744:	.word	0x0004014b
    9748:	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    974c:	mov.w	r3, #1
    9750:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    9754:	adds	r5, #1
    9756:	cmp	r5, #4
    9758:	add.w	r7, r7, #4
    975c:	add.w	r6, r6, #4
    9760:	add.w	r8, r8, #1
    9764:	bne.n	96ee <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9766:	ldr	r4, [pc, #324]	; (98ac <usb_isr+0x5fc>)
			*reg = epconf;
    9768:	ldr	r3, [pc, #324]	; (98b0 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    976a:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    976c:	ldr	r5, [pc, #280]	; (9888 <usb_isr+0x5d8>)
    976e:	ldr	r7, [sp, #16]
    9770:	ldr	r6, [sp, #20]
    9772:	movs	r1, #0
    9774:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9776:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9778:	lsls	r3, r2, #28
    977a:	bmi.w	9c1c <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    977e:	ldrb	r2, [r4, #1]
			*reg = epconf;
    9780:	ldr	r1, [pc, #304]	; (98b4 <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9782:	ldr.w	r8, [pc, #272]	; 9894 <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9786:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9788:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    978a:	mov.w	r1, #0
    978e:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    9792:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9796:	bmi.w	9bf0 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    979a:	ldr	r1, [pc, #284]	; (98b8 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    979c:	ldrb	r2, [r4, #2]
			*reg = epconf;
    979e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    97a0:	movs	r1, #0
    97a2:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    97a6:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    97aa:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    97ac:	ldr.w	r8, [pc, #228]	; 9894 <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    97b0:	bmi.w	9b6c <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    97b4:	ldrb	r2, [r4, #3]
			*reg = epconf;
    97b6:	ldr	r1, [pc, #260]	; (98bc <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    97b8:	ldr	r4, [pc, #216]	; (9894 <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    97ba:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    97bc:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    97be:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    97c0:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    97c4:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    97c8:	bmi.w	9b3e <usb_isr+0x88e>
    97cc:	ldrb	r3, [r6, #0]
    97ce:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    97d0:	movs	r1, #0
    97d2:	eor.w	r2, r3, #1
    97d6:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    97da:	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    97de:	movs	r0, #0
    97e0:	str	r0, [sp, #8]
    97e2:	mov	r8, r0
    97e4:	mov	ip, r0
    97e6:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    97e8:	ldr	r1, [pc, #212]	; (98c0 <usb_isr+0x610>)
    97ea:	ldrb	r5, [r1, #0]
    97ec:	orr.w	lr, r5, #2
    97f0:	add.w	r3, r9, lr, lsl #3
    97f4:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    97f6:	ldr	r3, [sp, #4]
    97f8:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    97fa:	ldr	r3, [sp, #12]
    97fc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    97fe:	ite	eq
    9800:	moveq	r4, #136	; 0x88
    9802:	movne	r4, #200	; 0xc8
    9804:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9808:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    980c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9810:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9812:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9814:	ldr.w	lr, [pc, #124]	; 9894 <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    9818:	ldr	r3, [pc, #168]	; (98c4 <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    981a:	ldr.w	r8, [pc, #164]	; 98c0 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    981e:	cmp	r0, #0
    9820:	bne.w	9a70 <usb_isr+0x7c0>
    9824:	cmp.w	ip, #64	; 0x40
    9828:	bne.n	9862 <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    982a:	orr.w	ip, r4, #2
    982e:	add.w	r3, r9, ip, lsl #3
    9832:	ldr	r4, [sp, #8]
    9834:	ldr.w	lr, [pc, #92]	; 9894 <usb_isr+0x5e4>
    9838:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    983a:	cmp	r2, #0
    983c:	bne.w	9a9c <usb_isr+0x7ec>
    9840:	lsls	r2, r0, #16
    9842:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9846:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    984a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    984e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9850:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9852:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9854:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9856:	cmp	r0, #64	; 0x40
    9858:	bne.n	9862 <usb_isr+0x5b2>
    985a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    985c:	ldr	r2, [pc, #104]	; (98c8 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    985e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    9860:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9862:	ldr	r2, [pc, #104]	; (98cc <usb_isr+0x61c>)
    9864:	movs	r3, #1
    9866:	strb	r3, [r2, #0]
    9868:	b.n	94bc <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    986a:	ldrb	r3, [r1, r6]
    986c:	cmp	r3, #3
    986e:	bhi.w	9acc <usb_isr+0x81c>
    9872:	add	r2, pc, #4	; (adr r2, 9878 <usb_isr+0x5c8>)
    9874:	ldr.w	pc, [r2, r3, lsl #2]
    9878:	.word	0x00009345
    987c:	.word	0x00009345
    9880:	.word	0x000099cf
    9884:	.word	0x000099d5
    9888:	.word	0x20019e31
    988c:	.word	0x20019d60
    9890:	.word	0x20019e3c
    9894:	.word	0x1fff0000
    9898:	.word	0x20019e18
    989c:	.word	0x20019db4
    98a0:	.word	0x20019e08
    98a4:	.word	0x20019e40
    98a8:	.word	0x20019f40
    98ac:	.word	0x0001347c
    98b0:	.word	0x400720c4
    98b4:	.word	0x400720c8
    98b8:	.word	0x400720cc
    98bc:	.word	0x400720d0
    98c0:	.word	0x20019e30
    98c4:	.word	0x20019dc4
    98c8:	.word	0x20019d70
    98cc:	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    98d0:	ldrh	r2, [r2, #4]
    98d2:	cbnz	r2, 98fa <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    98d4:	ldr	r2, [pc, #708]	; (9b9c <usb_isr+0x8ec>)
    98d6:	ldrb	r5, [r1, #0]
    98d8:	ldrb	r0, [r1, #1]
    98da:	strb	r5, [r2, #0]
    98dc:	strb	r0, [r2, #1]
    98de:	ldrb	r5, [r1, #2]
    98e0:	ldrb	r0, [r1, #3]
    98e2:	strb	r5, [r2, #2]
    98e4:	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    98e6:	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    98e8:	ldrb	r5, [r1, #4]
    98ea:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    98ec:	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    98ee:	ldrb	r5, [r1, #5]
    98f0:	ldrb	r1, [r1, #6]
    98f2:	strb	r5, [r2, #5]
    98f4:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    98f6:	beq.w	9a44 <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    98fa:	ldr	r1, [pc, #676]	; (9ba0 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    98fc:	ldr	r6, [pc, #676]	; (9ba4 <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    98fe:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9900:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9902:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9906:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9908:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    990c:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    990e:	ite	eq
    9910:	moveq	r1, #136	; 0x88
    9912:	movne	r1, #200	; 0xc8
    9914:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9918:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    991c:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9920:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9922:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9924:	str	r1, [r2, #4]
    9926:	b.n	94d2 <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9928:	movw	r2, #770	; 0x302
    992c:	cmp	r1, r2
    992e:	bne.w	9a4c <usb_isr+0x79c>
    9932:	ldrh	r1, [r5, #4]
    9934:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9938:	cmp	r1, #4
    993a:	bhi.w	9a62 <usb_isr+0x7b2>
    993e:	ldrh	r2, [r5, #2]
    9940:	cmp	r2, #0
    9942:	bne.w	9a62 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    9946:	ldr	r0, [pc, #608]	; (9ba8 <usb_isr+0x8f8>)
    9948:	str.w	lr, [sp, #4]
    994c:	lsls	r1, r1, #2
    994e:	add	r0, r1
    9950:	ldrb	r1, [r0, #0]
    9952:	orr.w	r1, r1, #2
    9956:	strb	r1, [r0, #0]
    9958:	b.n	97de <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    995a:	movw	r0, #8737	; 0x2221
    995e:	cmp	r1, r0
    9960:	bne.n	9a5a <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    9962:	ldrh	r1, [r5, #4]
    9964:	cmp	r1, #0
    9966:	bne.w	9b32 <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    996a:	ldr	r3, [pc, #576]	; (9bac <usb_isr+0x8fc>)
    996c:	ldr	r2, [pc, #576]	; (9bb0 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    996e:	ldr	r0, [pc, #580]	; (9bb4 <usb_isr+0x904>)
    9970:	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9972:	ldr	r5, [r3, #0]
    9974:	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9976:	str.w	lr, [sp, #4]
    997a:	mov	r2, r1
    997c:	strb	r4, [r0, #0]
    997e:	b.n	97de <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9980:	ldr	r3, [pc, #564]	; (9bb8 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9982:	ldr	r0, [pc, #568]	; (9bbc <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    9984:	ldr	r1, [pc, #536]	; (9ba0 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    9986:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9988:	mov.w	lr, #2
    998c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9990:	ldr	r7, [pc, #532]	; (9ba8 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    9992:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9994:	ldr	r1, [pc, #552]	; (9bc0 <usb_isr+0x910>)
    9996:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9998:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    999a:	ldr	r6, [pc, #552]	; (9bc4 <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    999c:	ldr	r5, [pc, #552]	; (9bc8 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    999e:	ldr	r4, [pc, #556]	; (9bcc <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    99a0:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    99a2:	movs	r1, #13
    99a4:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    99a6:	movs	r1, #255	; 0xff
    99a8:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    99aa:	ldr.w	lr, [pc, #576]	; 9bec <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    99ae:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    99b0:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    99b2:	ldr	r5, [pc, #540]	; (9bd0 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    99b4:	ldr	r2, [pc, #540]	; (9bd4 <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    99b6:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    99ba:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    99bc:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    99be:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    99c2:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    99c4:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    99c6:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    99c8:	add	sp, #28
    99ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    99ce:	movs	r3, #0
    99d0:	strb	r3, [r1, r6]
						break;
    99d2:	b.n	9344 <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    99d4:	movs	r3, #1
    99d6:	strb	r3, [r1, r6]
						break;
    99d8:	b.n	9344 <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    99da:	mov.w	r3, #0
    99de:	strb.w	r3, [r8]
    99e2:	b.n	9754 <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    99e4:	ldr	r1, [pc, #448]	; (9ba8 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    99e6:	ldr	r3, [pc, #480]	; (9bc8 <usb_isr+0x918>)
    99e8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    99ea:	movs	r0, #13
    99ec:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    99ee:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    99f0:	lsls	r2, r4, #30
    99f2:	bpl.w	9564 <usb_isr+0x2b4>
    99f6:	b.n	9556 <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    99f8:	ldr	r4, [pc, #476]	; (9bd8 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    99fa:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    99fe:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    9a00:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9a02:	ldrh	r2, [r5, #6]
    9a04:	cmp	r2, lr
    9a06:	bcs.w	9d50 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a0a:	ldr	r1, [pc, #404]	; (9ba0 <usb_isr+0x8f0>)
    9a0c:	ldrb	r5, [r1, #0]
    9a0e:	cmp	r2, #64	; 0x40
    9a10:	mov	ip, r2
    9a12:	orr.w	lr, r5, #2
    9a16:	it	cs
    9a18:	movcs.w	ip, #64	; 0x40
    9a1c:	add.w	r3, r4, ip
    9a20:	add.w	r0, r9, lr, lsl #3
    9a24:	str	r3, [sp, #8]
    9a26:	movs	r3, #1
    9a28:	str	r4, [r0, #4]
    9a2a:	mov.w	r8, ip, lsl #16
    9a2e:	rsb	r0, ip, r2
    9a32:	str	r3, [sp, #4]
    9a34:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a36:	movs	r4, #200	; 0xc8
    9a38:	b.n	9804 <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9a3a:	ldr	r2, [pc, #416]	; (9bdc <usb_isr+0x92c>)
    9a3c:	ldr	r4, [pc, #408]	; (9bd8 <usb_isr+0x928>)
    9a3e:	ldrb	r2, [r2, #0]
    9a40:	strb	r2, [r4, #0]
    9a42:	b.n	9a02 <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9a44:	ldr	r2, [pc, #408]	; (9be0 <usb_isr+0x930>)
    9a46:	movs	r1, #15
    9a48:	strb	r1, [r2, #0]
    9a4a:	b.n	98fa <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9a4c:	cmp.w	r1, #1280	; 0x500
    9a50:	bne.n	9a62 <usb_isr+0x7b2>
    9a52:	movs	r3, #1
    9a54:	movs	r2, #0
    9a56:	str	r3, [sp, #4]
    9a58:	b.n	97de <usb_isr+0x52e>
    9a5a:	movw	r2, #8993	; 0x2321
    9a5e:	cmp	r1, r2
    9a60:	beq.n	9a52 <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9a62:	ldr	r2, [pc, #324]	; (9ba8 <usb_isr+0x8f8>)
    9a64:	movs	r3, #15
    9a66:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9a68:	ldr	r2, [pc, #336]	; (9bbc <usb_isr+0x90c>)
    9a6a:	movs	r3, #1
    9a6c:	strb	r3, [r2, #0]
    9a6e:	b.n	94bc <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    9a70:	cmp	r0, #64	; 0x40
    9a72:	bls.w	982a <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a76:	orr.w	r4, r4, #2
    9a7a:	add.w	r1, lr, r4, lsl #3
    9a7e:	ldr	r6, [sp, #8]
    9a80:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a82:	cbz	r2, 9ab4 <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    9a84:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a88:	ldr	r2, [pc, #344]	; (9be4 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    9a8a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9a8c:	mov	r3, r6
    9a8e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9a90:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9a94:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a96:	str.w	r2, [lr, r4, lsl #3]
    9a9a:	b.n	985c <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    9a9c:	ldrb.w	r3, [sp, #4]
    9aa0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9aa2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9aa4:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9aa6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9aa8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9aac:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9aae:	str.w	r2, [lr, ip, lsl #3]
    9ab2:	b.n	9856 <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    9ab4:	ldrb.w	r1, [sp, #4]
    9ab8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9aba:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9abc:	ldr	r2, [pc, #256]	; (9bc0 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9abe:	strb.w	r5, [r8]
    9ac2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9ac4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ac6:	str.w	r2, [lr, r4, lsl #3]
    9aca:	b.n	985c <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    9acc:	tst.w	r9, #8
    9ad0:	ite	eq
    9ad2:	moveq	r3, #2
    9ad4:	movne	r3, #3
    9ad6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    9ad8:	b.n	9344 <usb_isr+0x94>
    9ada:	ldrh	r1, [r5, #4]
    9adc:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9ae0:	cmp	r1, #4
    9ae2:	bhi.n	9a62 <usb_isr+0x7b2>
    9ae4:	ldrh	r2, [r5, #2]
    9ae6:	cmp	r2, #0
    9ae8:	bne.n	9a62 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    9aea:	ldr	r0, [pc, #188]	; (9ba8 <usb_isr+0x8f8>)
    9aec:	str.w	lr, [sp, #4]
    9af0:	lsls	r1, r1, #2
    9af2:	add	r0, r1
    9af4:	ldrb	r1, [r0, #0]
    9af6:	bic.w	r1, r1, #2
    9afa:	strb	r1, [r0, #0]
    9afc:	b.n	97de <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    9afe:	ldr	r2, [pc, #232]	; (9be8 <usb_isr+0x938>)
    9b00:	ldr	r4, [r2, #4]
    9b02:	cmp	r4, #0
    9b04:	beq.n	9a62 <usb_isr+0x7b2>
    9b06:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9b08:	ldrh.w	lr, [r5, #4]
    9b0c:	b.n	9b16 <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    9b0e:	adds	r2, #12
			if (list->addr == NULL) break;
    9b10:	ldr	r4, [r2, #4]
    9b12:	cmp	r4, #0
    9b14:	beq.n	9a62 <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9b16:	ldrh	r3, [r2, #0]
    9b18:	cmp	r3, r0
    9b1a:	bne.n	9b0e <usb_isr+0x85e>
    9b1c:	ldrh	r3, [r2, #2]
    9b1e:	cmp	r3, lr
    9b20:	bne.n	9b0e <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    9b22:	lsrs	r0, r0, #8
    9b24:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    9b26:	ite	eq
    9b28:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    9b2c:	ldrhne.w	lr, [r2, #8]
    9b30:	b.n	9a02 <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    9b32:	str.w	lr, [sp, #4]
    9b36:	b.n	97de <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    9b38:	mov.w	lr, #2
    9b3c:	b.n	9a02 <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9b3e:	bl	9070 <usb_malloc>
				if (p) {
    9b42:	cmp	r0, #0
    9b44:	beq.w	9d2a <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9b48:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9b4a:	ldr	r2, [pc, #116]	; (9bc0 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9b4c:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9b50:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9b54:	bl	9070 <usb_malloc>
				if (p) {
    9b58:	cmp	r0, #0
    9b5a:	beq.w	9d1e <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    9b5e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9b60:	ldr	r2, [pc, #128]	; (9be4 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9b62:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9b66:	str.w	r2, [r9, #136]	; 0x88
    9b6a:	b.n	97cc <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9b6c:	bl	9070 <usb_malloc>
				if (p) {
    9b70:	cmp	r0, #0
    9b72:	beq.w	9d42 <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    9b76:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9b78:	ldr	r2, [pc, #68]	; (9bc0 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9b7a:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9b7e:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9b82:	bl	9070 <usb_malloc>
				if (p) {
    9b86:	cmp	r0, #0
    9b88:	beq.w	9d36 <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    9b8c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9b8e:	ldr	r2, [pc, #84]	; (9be4 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9b90:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9b94:	str.w	r2, [r9, #104]	; 0x68
    9b98:	b.n	97b4 <usb_isr+0x504>
    9b9a:	nop
    9b9c:	.word	0x20019f34
    9ba0:	.word	0x20019e30
    9ba4:	.word	0x20019dc4
    9ba8:	.word	0x400720c0
    9bac:	.word	0x20019d58
    9bb0:	.word	0x20019f3c
    9bb4:	.word	0x20019d54
    9bb8:	.word	0x1fff0000
    9bbc:	.word	0x40072094
    9bc0:	.word	0x00400088
    9bc4:	.word	0x40072088
    9bc8:	.word	0x40072080
    9bcc:	.word	0x40072098
    9bd0:	.word	0x20019d74
    9bd4:	.word	0x20019dc8
    9bd8:	.word	0x20019e34
    9bdc:	.word	0x20019e3c
    9be0:	.word	0x20019dc5
    9be4:	.word	0x004000c8
    9be8:	.word	0x00013480
    9bec:	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9bf0:	bl	9070 <usb_malloc>
				if (p) {
    9bf4:	cmp	r0, #0
    9bf6:	beq.w	9d12 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    9bfa:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9bfc:	ldr	r2, [pc, #372]	; (9d74 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9bfe:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c02:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9c06:	bl	9070 <usb_malloc>
				if (p) {
    9c0a:	cmp	r0, #0
    9c0c:	beq.n	9d06 <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    9c0e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c10:	ldr	r2, [pc, #356]	; (9d78 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9c12:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c16:	str.w	r2, [r9, #72]	; 0x48
    9c1a:	b.n	979a <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9c1c:	bl	9070 <usb_malloc>
				if (p) {
    9c20:	cmp	r0, #0
    9c22:	beq.n	9cfa <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9c24:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c26:	ldr	r2, [pc, #332]	; (9d74 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9c28:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c2c:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9c30:	bl	9070 <usb_malloc>
				if (p) {
    9c34:	cmp	r0, #0
    9c36:	beq.n	9cee <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    9c38:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c3a:	ldr	r2, [pc, #316]	; (9d78 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9c3c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c40:	str.w	r2, [r9, #40]	; 0x28
    9c44:	b.n	977e <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    9c46:	ldr.w	r0, [r1, #156]	; 0x9c
    9c4a:	subs	r0, #8
    9c4c:	bl	90b0 <usb_free>
    9c50:	b.n	96ce <usb_isr+0x41e>
    9c52:	ldr.w	r0, [r1, #148]	; 0x94
    9c56:	subs	r0, #8
    9c58:	bl	90b0 <usb_free>
    9c5c:	b.n	96c2 <usb_isr+0x412>
    9c5e:	ldr	r0, [r1, #92]	; 0x5c
    9c60:	subs	r0, #8
    9c62:	bl	90b0 <usb_free>
    9c66:	b.n	966e <usb_isr+0x3be>
    9c68:	ldr	r0, [r1, #84]	; 0x54
    9c6a:	subs	r0, #8
    9c6c:	bl	90b0 <usb_free>
    9c70:	b.n	9662 <usb_isr+0x3b2>
    9c72:	ldr	r0, [r1, #76]	; 0x4c
    9c74:	subs	r0, #8
    9c76:	bl	90b0 <usb_free>
    9c7a:	b.n	9656 <usb_isr+0x3a6>
    9c7c:	ldr	r0, [r1, #68]	; 0x44
    9c7e:	subs	r0, #8
    9c80:	bl	90b0 <usb_free>
    9c84:	b.n	964a <usb_isr+0x39a>
    9c86:	ldr	r0, [r1, #60]	; 0x3c
    9c88:	subs	r0, #8
    9c8a:	bl	90b0 <usb_free>
    9c8e:	b.n	963e <usb_isr+0x38e>
    9c90:	ldr	r0, [r1, #52]	; 0x34
    9c92:	subs	r0, #8
    9c94:	bl	90b0 <usb_free>
    9c98:	b.n	9632 <usb_isr+0x382>
    9c9a:	ldr	r0, [r1, #44]	; 0x2c
    9c9c:	subs	r0, #8
    9c9e:	bl	90b0 <usb_free>
    9ca2:	b.n	9626 <usb_isr+0x376>
    9ca4:	ldr	r0, [r4, #36]	; 0x24
    9ca6:	subs	r0, #8
    9ca8:	bl	90b0 <usb_free>
    9cac:	b.n	961a <usb_isr+0x36a>
    9cae:	ldr	r0, [r1, #124]	; 0x7c
    9cb0:	subs	r0, #8
    9cb2:	bl	90b0 <usb_free>
    9cb6:	b.n	969e <usb_isr+0x3ee>
    9cb8:	ldr	r0, [r1, #116]	; 0x74
    9cba:	subs	r0, #8
    9cbc:	bl	90b0 <usb_free>
    9cc0:	b.n	9692 <usb_isr+0x3e2>
    9cc2:	ldr	r0, [r1, #108]	; 0x6c
    9cc4:	subs	r0, #8
    9cc6:	bl	90b0 <usb_free>
    9cca:	b.n	9686 <usb_isr+0x3d6>
    9ccc:	ldr	r0, [r1, #100]	; 0x64
    9cce:	subs	r0, #8
    9cd0:	bl	90b0 <usb_free>
    9cd4:	b.n	967a <usb_isr+0x3ca>
    9cd6:	ldr.w	r0, [r1, #140]	; 0x8c
    9cda:	subs	r0, #8
    9cdc:	bl	90b0 <usb_free>
    9ce0:	b.n	96b6 <usb_isr+0x406>
    9ce2:	ldr.w	r0, [r1, #132]	; 0x84
    9ce6:	subs	r0, #8
    9ce8:	bl	90b0 <usb_free>
    9cec:	b.n	96aa <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9cee:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9cf0:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    9cf4:	adds	r2, #1
    9cf6:	strb	r2, [r5, #0]
    9cf8:	b.n	977e <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9cfa:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9cfc:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    9d00:	adds	r2, #1
    9d02:	strb	r2, [r5, #0]
    9d04:	b.n	9c30 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9d06:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9d08:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    9d0c:	adds	r2, #1
    9d0e:	strb	r2, [r5, #0]
    9d10:	b.n	979a <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9d12:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9d14:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    9d18:	adds	r2, #1
    9d1a:	strb	r2, [r5, #0]
    9d1c:	b.n	9c06 <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9d1e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9d20:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    9d24:	adds	r2, #1
    9d26:	strb	r2, [r5, #0]
    9d28:	b.n	97cc <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9d2a:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9d2c:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    9d30:	adds	r2, #1
    9d32:	strb	r2, [r5, #0]
    9d34:	b.n	9b54 <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9d36:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9d38:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    9d3c:	adds	r2, #1
    9d3e:	strb	r2, [r5, #0]
    9d40:	b.n	97b4 <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9d42:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9d44:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    9d48:	adds	r2, #1
    9d4a:	strb	r2, [r5, #0]
    9d4c:	b.n	9b82 <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    9d4e:	bkpt	0x0000
    9d50:	cmp.w	lr, #64	; 0x40
    9d54:	mov	ip, lr
    9d56:	it	cs
    9d58:	movcs.w	ip, #64	; 0x40
    9d5c:	add.w	r3, r4, ip
    9d60:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9d62:	movs	r3, #1
    9d64:	rsb	r0, ip, lr
    9d68:	mov.w	r8, ip, lsl #16
    9d6c:	movs	r2, #0
    9d6e:	str	r3, [sp, #4]
    9d70:	b.n	97e8 <usb_isr+0x538>
    9d72:	nop
    9d74:	.word	0x00400088
    9d78:	.word	0x004000c8

00009d7c <usb_init>:
}



void usb_init(void)
{
    9d7c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d80:	ldr	r4, [pc, #144]	; (9e14 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    9d82:	bl	a5e0 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    9d86:	movs	r2, #0
    9d88:	add.w	r0, r4, #160	; 0xa0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    9d8c:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    9d8e:	str	r2, [r3, #0]
		table[i].addr = 0;
    9d90:	str	r2, [r3, #4]
    9d92:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    9d94:	cmp	r3, r0
		table[i].desc = 0;
    9d96:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    9d9a:	bne.n	9d8e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9d9c:	ldr	r0, [pc, #120]	; (9e18 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    9d9e:	ldr	r2, [pc, #124]	; (9e1c <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9da0:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9da2:	ldr.w	lr, [pc, #144]	; 9e34 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9da6:	ldr	r7, [pc, #120]	; (9e20 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9da8:	ldr	r5, [pc, #120]	; (9e24 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    9daa:	ldr	r6, [pc, #124]	; (9e28 <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9dac:	ldr.w	r8, [pc, #136]	; 9e38 <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    9db0:	ldr.w	ip, [pc, #136]	; 9e3c <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    9db4:	ldr.w	r9, [pc, #136]	; 9e40 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9db8:	orr.w	r3, r3, #262144	; 0x40000
    9dbc:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    9dbe:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9dc0:	ldr	r0, [pc, #104]	; (9e2c <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    9dc2:	orr.w	r3, r3, #50331648	; 0x3000000
    9dc6:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9dc8:	ubfx	r3, r4, #8, #8
    9dcc:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9dd0:	ubfx	r3, r4, #16, #8
    9dd4:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9dd6:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9dd8:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9dda:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9dde:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9de0:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9de4:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9de8:	ldr	r5, [pc, #68]	; (9e30 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    9dea:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    9dee:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    9df0:	movs	r3, #1
    9df2:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9df6:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    9df8:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9dfc:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9e00:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    9e02:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9e06:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9e08:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9e0a:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    9e0c:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9e10:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9e14:	.word	0x1fff0000
    9e18:	.word	0x40048034
    9e1c:	.word	0x4000d800
    9e20:	.word	0x400720b0
    9e24:	.word	0x400720b4
    9e28:	.word	0x40072010
    9e2c:	.word	0xe000e104
    9e30:	.word	0xe000e435
    9e34:	.word	0x4007209c
    9e38:	.word	0x40072080
    9e3c:	.word	0x40072088
    9e40:	.word	0x40072094

00009e44 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9e44:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    9e48:	ldr	r6, [pc, #196]	; (9f10 <yield+0xcc>)
    9e4a:	ldrb	r3, [r6, #0]
    9e4c:	cbz	r3, 9e74 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    9e4e:	ldr	r7, [pc, #196]	; (9f14 <yield+0xd0>)
    9e50:	ldrb	r2, [r7, #0]
    9e52:	cbnz	r2, 9e74 <yield+0x30>
	running = 1;
    9e54:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9e56:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9e58:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9e5a:	bmi.n	9eca <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    9e5c:	lsls	r2, r3, #30
    9e5e:	bmi.n	9e94 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    9e60:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9e62:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    9e64:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9e66:	bpl.n	9e74 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    9e68:	ldr	r3, [pc, #172]	; (9f18 <yield+0xd4>)
    9e6a:	ldr	r2, [r3, #0]
    9e6c:	cbz	r2, 9e74 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9e6e:	mrs	r2, IPSR
		if (ipsr != 0) return;
    9e72:	cbz	r2, 9e78 <yield+0x34>
    9e74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9e78:	mrs	r1, PRIMASK
		__disable_irq();
    9e7c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9e7e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9e80:	cbz	r0, 9e8a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9e82:	ldr	r4, [pc, #152]	; (9f1c <yield+0xd8>)
    9e84:	ldrb	r2, [r4, #0]
    9e86:	cmp	r2, #0
    9e88:	beq.n	9ee8 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9e8a:	cmp	r1, #0
    9e8c:	bne.n	9e74 <yield+0x30>
    9e8e:	cpsie	i
    9e90:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9e94:	ldr.w	r8, [pc, #144]	; 9f28 <yield+0xe4>
    9e98:	ldrb.w	r2, [r8]
    9e9c:	cmp	r2, #0
    9e9e:	beq.n	9e60 <yield+0x1c>
    9ea0:	ldr.w	r9, [pc, #136]	; 9f2c <yield+0xe8>
    9ea4:	movs	r4, #0
    9ea6:	b.n	9eb4 <yield+0x70>
    9ea8:	adds	r4, #1
    9eaa:	ldrb.w	r3, [r8]
    9eae:	uxtb	r4, r4
    9eb0:	cmp	r3, r4
    9eb2:	bls.n	9eda <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    9eb4:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    9eb8:	ldr	r3, [r5, #0]
    9eba:	mov	r0, r5
    9ebc:	ldr	r3, [r3, #16]
    9ebe:	blx	r3
    9ec0:	cmp	r0, #0
    9ec2:	beq.n	9ea8 <yield+0x64>
    9ec4:	ldr	r3, [r5, #16]
    9ec6:	blx	r3
    9ec8:	b.n	9ea8 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9eca:	bl	8920 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    9ece:	cbnz	r0, 9f04 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    9ed0:	ldr	r3, [pc, #76]	; (9f20 <yield+0xdc>)
    9ed2:	ldrb	r3, [r3, #0]
    9ed4:	cbnz	r3, 9ede <yield+0x9a>
    9ed6:	ldrb	r3, [r6, #0]
    9ed8:	b.n	9e5c <yield+0x18>
    9eda:	ldrb	r3, [r6, #0]
    9edc:	b.n	9e60 <yield+0x1c>
    9ede:	ldrb	r3, [r6, #0]
    9ee0:	and.w	r3, r3, #254	; 0xfe
    9ee4:	strb	r3, [r6, #0]
    9ee6:	b.n	9e5c <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    9ee8:	ldr	r5, [r0, #20]
    9eea:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9eec:	movs	r3, #1
    9eee:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    9ef0:	cbz	r5, 9f0a <yield+0xc6>
			firstYield->_prev = nullptr;
    9ef2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9ef4:	cbnz	r1, 9ef8 <yield+0xb4>
    9ef6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9ef8:	movs	r5, #0
    9efa:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9efc:	ldr	r3, [r0, #8]
    9efe:	blx	r3
		runningFromYield = false;
    9f00:	strb	r5, [r4, #0]
    9f02:	b.n	9e74 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    9f04:	bl	a5d4 <serialEvent()>
    9f08:	b.n	9ed0 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    9f0a:	ldr	r3, [pc, #24]	; (9f24 <yield+0xe0>)
    9f0c:	str	r5, [r3, #0]
    9f0e:	b.n	9ef4 <yield+0xb0>
    9f10:	.word	0x20013ae4
    9f14:	.word	0x20019e44
    9f18:	.word	0x20019e54
    9f1c:	.word	0x20019e58
    9f20:	.word	0x20013af8
    9f24:	.word	0x20019e50
    9f28:	.word	0x20019efc
    9f2c:	.word	0x20019ee4

00009f30 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    9f30:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    9f32:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    9f34:	cbnz	r1, 9f5e <DMAChannel::begin(bool)+0x2e>
    9f36:	ldr	r2, [r0, #0]
    9f38:	cbz	r2, 9f5e <DMAChannel::begin(bool)+0x2e>
    9f3a:	ldrb	r3, [r0, #4]
    9f3c:	cmp	r3, #15
    9f3e:	bhi.n	9f5e <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    9f40:	ldr	r4, [pc, #160]	; (9fe4 <DMAChannel::begin(bool)+0xb4>)
    9f42:	ldrh	r1, [r4, #0]
    9f44:	asr.w	r5, r1, r3
    9f48:	lsls	r5, r5, #31
    9f4a:	bpl.n	9f62 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    9f4c:	add.w	r3, r3, #33554432	; 0x2000000
    9f50:	add.w	r3, r3, #1152	; 0x480
    9f54:	cmp.w	r2, r3, lsl #5
    9f58:	bne.n	9f62 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    9f5a:	cpsie	i
		return;
    9f5c:	pop	{r4, r5, r6, r7, pc}
    9f5e:	ldr	r4, [pc, #132]	; (9fe4 <DMAChannel::begin(bool)+0xb4>)
    9f60:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    9f62:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    9f64:	asr.w	r2, r1, r3
    9f68:	ands.w	r2, r2, #1
    9f6c:	beq.n	9f7e <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    9f6e:	adds	r3, #1
    9f70:	cmp	r3, #16
    9f72:	bne.n	9f64 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    9f74:	cpsie	i
			TCD = (TCD_t *)0;
    9f76:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    9f78:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    9f7a:	str	r2, [r0, #0]
    9f7c:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    9f7e:	movs	r5, #1
    9f80:	lsls	r5, r3
    9f82:	orrs	r1, r5
    9f84:	strh	r1, [r4, #0]
			__enable_irq();
    9f86:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9f88:	ldr	r6, [pc, #92]	; (9fe8 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9f8a:	ldr	r5, [pc, #96]	; (9fec <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9f8c:	ldr	r7, [pc, #96]	; (9ff0 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    9f8e:	ldr.w	lr, [pc, #104]	; 9ff8 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    9f92:	uxtb	r1, r3
    9f94:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9f96:	ldr	r4, [r6, #0]
    9f98:	orr.w	r4, r4, #2
    9f9c:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9f9e:	ldr	r4, [r5, #0]
    9fa0:	orr.w	r4, r4, #2
    9fa4:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9fa6:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9faa:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    9fae:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9fb2:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9fb6:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9fb8:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9fbc:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    9fbe:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    9fc0:	ldr	r4, [pc, #48]	; (9ff4 <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    9fc2:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9fc6:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9fc8:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    9fca:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    9fcc:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9fce:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    9fd0:	str	r2, [r3, #0]
	*p++ = 0;
    9fd2:	str	r2, [r3, #4]
	*p++ = 0;
    9fd4:	str	r2, [r3, #8]
	*p++ = 0;
    9fd6:	str	r2, [r3, #12]
	*p++ = 0;
    9fd8:	str	r2, [r3, #16]
	*p++ = 0;
    9fda:	str	r2, [r3, #20]
	*p++ = 0;
    9fdc:	str	r2, [r3, #24]
	*p++ = 0;
    9fde:	str	r2, [r3, #28]
    9fe0:	pop	{r4, r5, r6, r7, pc}
    9fe2:	nop
    9fe4:	.word	0x20019e46
    9fe8:	.word	0x40048040
    9fec:	.word	0x4004803c
    9ff0:	.word	0x40008000
    9ff4:	.word	0x4000801f
    9ff8:	.word	0x4000801a

00009ffc <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    9ffc:	ldrb	r3, [r0, #4]
    9ffe:	cmp	r3, #15
    a000:	bhi.n	a028 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    a002:	ldr	r2, [pc, #40]	; (a02c <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    a004:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    a006:	strb	r3, [r2, #0]
	__disable_irq();
    a008:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    a00a:	ldr	r1, [pc, #36]	; (a030 <DMAChannel::release()+0x34>)
    a00c:	ldrb	r4, [r0, #4]
    a00e:	ldrh	r2, [r1, #0]
    a010:	movs	r3, #1
    a012:	lsls	r3, r4
    a014:	bic.w	r3, r2, r3
    a018:	strh	r3, [r1, #0]
	__enable_irq();
    a01a:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    a01c:	movs	r2, #16
	TCD = (TCD_t *)0;
    a01e:	movs	r3, #0
}
    a020:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    a024:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    a026:	str	r3, [r0, #0]
}
    a028:	bx	lr
    a02a:	nop
    a02c:	.word	0x4000801a
    a030:	.word	0x20019e46

0000a034 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a034:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a036:	mrs	r2, PRIMASK
		__disable_irq();
    a03a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a03c:	ldr	r4, [pc, #48]	; (a070 <EventResponder::runFromInterrupt()+0x3c>)
    a03e:	ldr	r0, [r4, #0]
		if (first) {
    a040:	cbz	r0, a064 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a042:	ldr	r6, [pc, #48]	; (a074 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a044:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a046:	ldr	r3, [r0, #20]
    a048:	str	r3, [r4, #0]
			if (firstInterrupt) {
    a04a:	cbz	r3, a06a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a04c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a04e:	cbnz	r2, a052 <EventResponder::runFromInterrupt()+0x1e>
    a050:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a052:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a054:	ldr	r3, [r0, #8]
    a056:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a058:	mrs	r2, PRIMASK
		__disable_irq();
    a05c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a05e:	ldr	r0, [r4, #0]
		if (first) {
    a060:	cmp	r0, #0
    a062:	bne.n	a046 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a064:	cbnz	r2, a068 <EventResponder::runFromInterrupt()+0x34>
    a066:	cpsie	i
    a068:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a06a:	str	r3, [r6, #0]
    a06c:	b.n	a04e <EventResponder::runFromInterrupt()+0x1a>
    a06e:	nop
    a070:	.word	0x20019e48
    a074:	.word	0x20019e4c

0000a078 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a078:	b.w	a034 <EventResponder::runFromInterrupt()>

0000a07c <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    a07c:	ldr	r2, [pc, #8]	; (a088 <systick_isr+0xc>)
    a07e:	ldr	r3, [r2, #0]
    a080:	adds	r3, #1
    a082:	str	r3, [r2, #0]
    a084:	bx	lr
    a086:	nop
    a088:	.word	0x20019d58

0000a08c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a08c:	b.w	893c <usb_serial_flush_input>

0000a090 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a090:	b.w	88f0 <usb_serial_peekchar>

0000a094 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a094:	b.w	88a8 <usb_serial_getchar>

0000a098 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a098:	b.w	8920 <usb_serial_available>

0000a09c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a09c:	b.w	8adc <usb_serial_flush_output>

0000a0a0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a0a0:	b.w	8a94 <usb_serial_write_buffer_free>

0000a0a4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a0a4:	mov	r0, r1
    a0a6:	mov	r1, r2
    a0a8:	b.w	8974 <usb_serial_write>

0000a0ac <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a0ac:	mov	r0, r1
    a0ae:	b.w	8a7c <usb_serial_putchar>
    a0b2:	nop

0000a0b4 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    a0b4:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    a0b6:	mov	r6, r1
    a0b8:	cbz	r1, a0d8 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    a0ba:	cbz	r2, a0dc <Print::write(unsigned char const*, unsigned int)+0x28>
    a0bc:	mov	r7, r0
    a0be:	mov	r4, r2
    a0c0:	movs	r5, #0
    a0c2:	ldr	r3, [r7, #0]
    a0c4:	ldrb.w	r1, [r6], #1
    a0c8:	ldr	r3, [r3, #0]
    a0ca:	mov	r0, r7
    a0cc:	blx	r3
    a0ce:	subs	r4, #1
    a0d0:	add	r5, r0
    a0d2:	bne.n	a0c2 <Print::write(unsigned char const*, unsigned int)+0xe>
    a0d4:	mov	r0, r5
    a0d6:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    a0d8:	mov	r0, r1
    a0da:	pop	{r3, r4, r5, r6, r7, pc}
    a0dc:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    a0de:	pop	{r3, r4, r5, r6, r7, pc}

0000a0e0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a0e0:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    a0e2:	ldr	r2, [pc, #24]	; (a0fc <Print::println()+0x1c>)
	return write(buf, 2);
    a0e4:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a0e6:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    a0e8:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a0ea:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a0ec:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a0ee:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a0f2:	movs	r2, #2
    a0f4:	blx	r3
}
    a0f6:	add	sp, #12
    a0f8:	ldr.w	pc, [sp], #4
    a0fc:	.word	0x00013478

0000a100 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a100:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    a102:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a104:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a106:	ldr	r3, [r3, #4]
    a108:	blx	r3
	return len;
}
    a10a:	mov	r0, r4
    a10c:	pop	{r4, pc}
    a10e:	nop

0000a110 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a110:	push	{r1, r2, r3}
    a112:	push	{lr}
    a114:	sub	sp, #8
    a116:	add	r2, sp, #12
    a118:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    a11c:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a11e:	bl	fd88 <vdprintf>
#endif
}
    a122:	add	sp, #8
    a124:	ldr.w	lr, [sp], #4
    a128:	add	sp, #12
    a12a:	bx	lr

0000a12c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a12c:	push	{r4, r5, r6, r7, lr}
    a12e:	mov	r7, r0
    a130:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a132:	cmp	r2, #0
    a134:	beq.n	a19e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a136:	cmp	r2, #1
    a138:	it	eq
    a13a:	moveq	r2, #10
	}


	if (n == 0) {
    a13c:	cbz	r1, a194 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a13e:	movs	r4, #33	; 0x21
    a140:	b.n	a144 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a142:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a144:	udiv	r5, r1, r2
    a148:	mls	r1, r2, r5, r1
    a14c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a14e:	cmp	r1, #9
    a150:	add.w	r1, r0, #48	; 0x30
    a154:	it	ls
    a156:	uxtbls	r0, r1
    a158:	add	r1, sp, #40	; 0x28
    a15a:	it	hi
    a15c:	addhi	r0, #55	; 0x37
    a15e:	add	r1, r4
    a160:	it	hi
    a162:	uxtbhi	r0, r0
    a164:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    a168:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    a16a:	mov	r1, r5
    a16c:	cmp	r5, #0
    a16e:	bne.n	a142 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a170:	cbz	r3, a180 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a172:	subs	r4, #1
    a174:	uxtb	r4, r4
		buf[i] = '-';
    a176:	add	r3, sp, #40	; 0x28
    a178:	add	r3, r4
    a17a:	movs	r2, #45	; 0x2d
    a17c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a180:	ldr	r3, [r7, #0]
    a182:	add	r2, sp, #4
    a184:	adds	r1, r2, r4
    a186:	ldr	r3, [r3, #4]
    a188:	mov	r0, r7
    a18a:	rsb	r2, r4, #34	; 0x22
    a18e:	blx	r3
}
    a190:	add	sp, #44	; 0x2c
    a192:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a194:	movs	r2, #48	; 0x30
    a196:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a19a:	movs	r4, #33	; 0x21
    a19c:	b.n	a170 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a19e:	ldr	r3, [r0, #0]
    a1a0:	uxtb	r1, r1
    a1a2:	ldr	r3, [r3, #0]
    a1a4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a1a6:	add	sp, #44	; 0x2c
    a1a8:	pop	{r4, r5, r6, r7, pc}
    a1aa:	nop

0000a1ac <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a1ac:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a1ae:	bl	1ac4 <setup>
	while (1) {
		loop();
    a1b2:	bl	1e34 <loop>
		yield();
    a1b6:	bl	9e44 <yield>
    a1ba:	b.n	a1b2 <main+0x6>

0000a1bc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    a1bc:	cmp.w	r1, #896	; 0x380
    a1c0:	push	{r4, r5, r6, r7}
    a1c2:	it	cs
    a1c4:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    a1c8:	cpsid	i
	memory_pool = data;
    a1ca:	ldr	r2, [pc, #76]	; (a218 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    a1cc:	ldr	r4, [pc, #76]	; (a21c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)
    a1ce:	ldr	r3, [pc, #80]	; (a220 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    a1d0:	str	r0, [r2, #0]
	memory_pool_first_mask = 0;
    a1d2:	movs	r2, #0
    a1d4:	strh	r2, [r4, #0]
    a1d6:	add.w	r4, r3, #112	; 0x70
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    a1da:	str.w	r2, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
    a1de:	cmp	r3, r4
    a1e0:	bne.n	a1da <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x1e>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a1e2:	cbz	r1, a212 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
    a1e4:	ldr	r6, [pc, #60]	; (a224 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
    a1e6:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a1e8:	movs	r7, #1
    a1ea:	lsrs	r5, r3, #5
    a1ec:	and.w	r4, r3, #31
    a1f0:	ldr.w	r2, [r6, r5, lsl #2]
    a1f4:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a1f8:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a1fa:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a1fc:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a1fe:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a202:	bne.n	a1ea <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    a204:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    a206:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    a208:	adds	r3, #1
    a20a:	cmp	r3, r1
    a20c:	add.w	r0, r0, #260	; 0x104
    a210:	bne.n	a206 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4a>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    a212:	cpsie	i

}
    a214:	pop	{r4, r5, r6, r7}
    a216:	bx	lr
    a218:	.word	0x20019e64
    a21c:	.word	0x20019ede
    a220:	.word	0x20019e68
    a224:	.word	0x20019e6c

0000a228 <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    a228:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    a22a:	cpsid	i
	index = memory_pool_first_mask;
    a22c:	ldr	r7, [pc, #140]	; (a2bc <AudioStream::allocate()+0x94>)
	p += index;
    a22e:	ldr	r6, [pc, #144]	; (a2c0 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    a230:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    a232:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    a236:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    a23a:	cmp	r0, r3
    a23c:	bcs.n	a264 <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a23e:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    a242:	cbnz	r1, a26c <AudioStream::allocate()+0x44>
    a244:	adds	r2, r0, #4
    a246:	add.w	r5, r6, #115	; 0x73
    a24a:	adds	r3, r4, #1
    a24c:	subs	r5, r5, r2
    a24e:	add.w	r5, r3, r5, lsr #2
    a252:	b.n	a25c <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a254:	ldr.w	r1, [r2], #4
		if (avail) break;
    a258:	cbnz	r1, a26c <AudioStream::allocate()+0x44>
    a25a:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a25c:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    a25e:	mov	r4, r3
		p++;
    a260:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a262:	bne.n	a254 <AudioStream::allocate()+0x2c>
			__enable_irq();
    a264:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    a266:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a268:	pop	{r4, r5, r6, r7}
    a26a:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    a26c:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    a270:	mov.w	r2, #2147483648	; 0x80000000
    a274:	lsrs	r2, r3
    a276:	bic.w	r1, r1, r2
	*p = avail;
    a27a:	str	r1, [r0, #0]
	if (!avail) index++;
    a27c:	cbnz	r1, a280 <AudioStream::allocate()+0x58>
    a27e:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    a280:	ldr	r1, [pc, #64]	; (a2c4 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    a282:	strh	r4, [r7, #0]
	used = memory_used + 1;
    a284:	ldrh	r2, [r1, #0]
    a286:	adds	r2, #1
	memory_used = used;
    a288:	uxth	r4, r2
    a28a:	strh	r4, [r1, #0]
	__enable_irq();
    a28c:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a28e:	subs	r0, r0, r6
    a290:	asrs	r0, r0, #2
    a292:	rsb	r0, r3, r0, lsl #5
    a296:	add.w	r0, r0, r0, lsl #6
    a29a:	lsls	r3, r0, #2
    a29c:	ldr	r0, [pc, #40]	; (a2c8 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a29e:	ldr	r1, [pc, #44]	; (a2cc <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a2a0:	ldr	r0, [r0, #0]
    a2a2:	add.w	r3, r3, #8032	; 0x1f60
    a2a6:	adds	r3, #28
	block->ref_count = 1;
    a2a8:	movs	r5, #1
    a2aa:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    a2ac:	ldrh	r5, [r1, #0]
    a2ae:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a2b0:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a2b2:	it	hi
    a2b4:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a2b6:	pop	{r4, r5, r6, r7}
    a2b8:	bx	lr
    a2ba:	nop
    a2bc:	.word	0x20019ede
    a2c0:	.word	0x20019e6c
    a2c4:	.word	0x20019ee0
    a2c8:	.word	0x20019e64
    a2cc:	.word	0x20019e60

0000a2d0 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    a2d0:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    a2d2:	cpsid	i
	if (block->ref_count > 1) {
    a2d4:	ldrb	r3, [r0, #0]
    a2d6:	cmp	r3, #1
    a2d8:	bls.n	a2e2 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    a2da:	subs	r3, #1
    a2dc:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    a2de:	cpsie	i
    a2e0:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    a2e2:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    a2e4:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2e6:	ldr	r4, [pc, #48]	; (a318 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a2e8:	ldr	r5, [pc, #48]	; (a31c <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2ea:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a2ee:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a2f0:	mvns	r2, r2
    a2f2:	mov.w	r0, #2147483648	; 0x80000000
    a2f6:	and.w	r2, r2, #31
    a2fa:	lsr.w	r2, r0, r2
    a2fe:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    a300:	ldr	r2, [pc, #28]	; (a320 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a302:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a306:	cmp	r3, r6
    a308:	it	cc
    a30a:	strhcc	r3, [r5, #0]
		memory_used--;
    a30c:	ldrh	r3, [r2, #0]
    a30e:	subs	r3, #1
    a310:	strh	r3, [r2, #0]
	}
	__enable_irq();
    a312:	cpsie	i
}
    a314:	pop	{r4, r5, r6}
    a316:	bx	lr
    a318:	.word	0x20019e6c
    a31c:	.word	0x20019ede
    a320:	.word	0x20019ee0

0000a324 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a324:	ldr	r3, [r0, #12]
    a326:	cbz	r3, a356 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    a328:	push	{r4, r5}
    a32a:	b.n	a330 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a32c:	ldr	r3, [r3, #12]
    a32e:	cbz	r3, a354 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    a330:	ldrb	r0, [r3, #8]
    a332:	cmp	r0, r2
    a334:	bne.n	a32c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    a336:	ldr	r0, [r3, #4]
    a338:	ldrb	r4, [r3, #9]
    a33a:	ldr	r0, [r0, #16]
    a33c:	ldr.w	r5, [r0, r4, lsl #2]
    a340:	cmp	r5, #0
    a342:	bne.n	a32c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    a344:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    a348:	ldrb	r0, [r1, #0]
    a34a:	adds	r0, #1
    a34c:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a34e:	ldr	r3, [r3, #12]
    a350:	cmp	r3, #0
    a352:	bne.n	a330 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    a354:	pop	{r4, r5}
    a356:	bx	lr

0000a358 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a358:	ldrb	r3, [r0, #9]
    a35a:	cmp	r3, r1
    a35c:	bls.n	a36c <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    a35e:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    a360:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    a362:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    a366:	str.w	r2, [r3, r1, lsl #2]
	return in;
    a36a:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a36c:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    a36e:	bx	lr

0000a370 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    a370:	ldrb	r3, [r0, #16]
    a372:	cbnz	r3, a3be <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    a374:	ldr	r3, [r0, #4]
    a376:	ldrb	r2, [r0, #9]
    a378:	ldrb	r3, [r3, #9]
    a37a:	cmp	r2, r3
    a37c:	bhi.n	a3be <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    a37e:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    a380:	cpsid	i
	p = src.destination_list;
    a382:	ldr	r4, [r0, #0]
    a384:	ldr	r3, [r4, #12]
	if (p == NULL) {
    a386:	cbz	r3, a3d4 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a388:	ldr	r2, [r3, #12]
    a38a:	cbz	r2, a39a <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    a38c:	ldr	r1, [r3, #0]
    a38e:	cmp	r4, r1
    a390:	beq.n	a3c0 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    a392:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a394:	ldr	r2, [r3, #12]
    a396:	cmp	r2, #0
    a398:	bne.n	a38c <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    a39a:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    a39c:	movs	r3, #0
    a39e:	str	r3, [r0, #12]
	src.numConnections++;
    a3a0:	ldrb	r3, [r4, #10]
    a3a2:	adds	r3, #1
    a3a4:	strb	r3, [r4, #10]
	src.active = true;
    a3a6:	ldr	r2, [r0, #0]

	dst.numConnections++;
    a3a8:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    a3aa:	movs	r3, #1
    a3ac:	strb	r3, [r2, #8]

	dst.numConnections++;
    a3ae:	ldrb	r2, [r1, #10]
    a3b0:	add	r2, r3
    a3b2:	strb	r2, [r1, #10]
	dst.active = true;
    a3b4:	ldr	r2, [r0, #4]
    a3b6:	strb	r3, [r2, #8]

	isConnected = true;
    a3b8:	strb	r3, [r0, #16]

	__enable_irq();
    a3ba:	cpsie	i
}
    a3bc:	pop	{r4, r5}
    a3be:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    a3c0:	ldr	r5, [r3, #4]
    a3c2:	ldr	r1, [r0, #4]
    a3c4:	cmp	r5, r1
    a3c6:	bne.n	a392 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    a3c8:	ldrh	r1, [r3, #8]
    a3ca:	ldrh	r3, [r0, #8]
    a3cc:	cmp	r1, r3
    a3ce:	beq.n	a3ba <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    a3d0:	mov	r3, r2
    a3d2:	b.n	a394 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    a3d4:	str	r0, [r4, #12]
    a3d6:	b.n	a39c <AudioConnection::connect()+0x2c>

0000a3d8 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    a3d8:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    a3da:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    a3dc:	cmp	r3, #0
    a3de:	beq.n	a446 <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    a3e0:	ldr	r3, [r0, #4]
    a3e2:	ldrb	r2, [r0, #9]
    a3e4:	ldrb	r3, [r3, #9]
    a3e6:	cmp	r2, r3
    a3e8:	bhi.n	a446 <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    a3ea:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    a3ec:	ldr	r2, [r0, #0]
    a3ee:	ldr	r3, [r2, #12]
	if (p == NULL) {
    a3f0:	cbz	r3, a444 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    a3f2:	cmp	r0, r3
    a3f4:	bne.n	a3fc <AudioConnection::disconnect()+0x24>
    a3f6:	b.n	a44c <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    a3f8:	cmp	r0, r3
    a3fa:	beq.n	a402 <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    a3fc:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    a3fe:	cmp	r3, #0
    a400:	bne.n	a3f8 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    a402:	ldr	r3, [r0, #4]
    a404:	ldrb	r1, [r0, #9]
    a406:	ldr	r3, [r3, #16]
    a408:	mov	r4, r0
    a40a:	ldr.w	r0, [r3, r1, lsl #2]
    a40e:	cbz	r0, a424 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    a410:	bl	a2d0 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    a414:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    a416:	ldr	r3, [r4, #4]
    a418:	ldrb	r2, [r4, #9]
    a41a:	ldr	r3, [r3, #16]
    a41c:	movs	r1, #0
    a41e:	str.w	r1, [r3, r2, lsl #2]
    a422:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    a424:	ldrb	r3, [r2, #10]
    a426:	subs	r3, #1
    a428:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    a42a:	ldr	r3, [r4, #0]
    a42c:	ldrb	r2, [r3, #10]
    a42e:	cbnz	r2, a432 <AudioConnection::disconnect()+0x5a>
		src.active = false;
    a430:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    a432:	ldr	r2, [r4, #4]
    a434:	ldrb	r3, [r2, #10]
    a436:	subs	r3, #1
    a438:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    a43a:	ldr	r3, [r4, #4]
    a43c:	ldrb	r2, [r3, #10]
    a43e:	cbz	r2, a448 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    a440:	movs	r3, #0
    a442:	strb	r3, [r4, #16]

	__enable_irq();
    a444:	cpsie	i
    a446:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    a448:	strb	r2, [r3, #8]
    a44a:	b.n	a440 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    a44c:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    a44e:	str	r3, [r2, #12]
    a450:	b.n	a402 <AudioConnection::disconnect()+0x2a>
    a452:	nop

0000a454 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a454:	ldr	r3, [pc, #32]	; (a478 <AudioStream::update_setup()+0x24>)
    a456:	ldrb	r2, [r3, #0]
    a458:	cbnz	r2, a472 <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a45a:	ldr	r0, [pc, #32]	; (a47c <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a45c:	ldr	r1, [pc, #32]	; (a480 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    a45e:	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a460:	movs	r4, #208	; 0xd0
    a462:	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a464:	movs	r2, #1
	update_scheduled = true;
	return true;
    a466:	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a468:	str	r2, [r1, #0]
	update_scheduled = true;
    a46a:	strb	r2, [r3, #0]
	return true;
}
    a46c:	ldr.w	r4, [sp], #4
    a470:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a472:	movs	r0, #0
    a474:	bx	lr
    a476:	nop
    a478:	.word	0x20019e68
    a47c:	.word	0xe000e440
    a480:	.word	0xe000e108

0000a484 <software_isr>:
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a484:	ldr	r1, [pc, #104]	; (a4f0 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a486:	ldr	r2, [pc, #108]	; (a4f4 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a488:	ldr	r0, [pc, #108]	; (a4f8 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    a48a:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a48c:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a48e:	ldr	r5, [pc, #108]	; (a4fc <software_isr+0x78>)
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a490:	ldr	r4, [r0, #0]
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a492:	orr.w	r3, r3, #16777216	; 0x1000000
    a496:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a498:	ldr	r3, [r2, #0]
    a49a:	orr.w	r3, r3, #1
    a49e:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a4a0:	ldr	r6, [r5, #0]
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a4a2:	cbnz	r4, a4aa <software_isr+0x26>
    a4a4:	b.n	a4d2 <software_isr+0x4e>
    a4a6:	ldr	r4, [r4, #20]
    a4a8:	cbz	r4, a4d2 <software_isr+0x4e>
		if (p->active) {
    a4aa:	ldrb	r3, [r4, #8]
    a4ac:	cmp	r3, #0
    a4ae:	beq.n	a4a6 <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    a4b0:	ldr	r3, [r4, #0]
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    a4b2:	ldr	r7, [r5, #0]
			p->update();
    a4b4:	ldr	r3, [r3, #0]
    a4b6:	mov	r0, r4
    a4b8:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a4ba:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a4bc:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a4be:	subs	r3, r3, r7
    a4c0:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    a4c2:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a4c4:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    a4c6:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a4c8:	it	hi
    a4ca:	strhhi	r2, [r4, #6]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a4cc:	ldr	r4, [r4, #20]
    a4ce:	cmp	r4, #0
    a4d0:	bne.n	a4aa <software_isr+0x26>
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    a4d2:	ldr	r3, [pc, #40]	; (a4fc <software_isr+0x78>)
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a4d4:	ldr	r2, [pc, #40]	; (a500 <software_isr+0x7c>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    a4d6:	ldr	r3, [r3, #0]
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a4d8:	ldrh	r0, [r2, #0]
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    a4da:	ldr	r4, [pc, #40]	; (a504 <software_isr+0x80>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    a4dc:	subs	r3, r3, r6
    a4de:	lsrs	r3, r3, #4
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    a4e0:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a4e2:	cmp	r3, r0
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    a4e4:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a4e6:	bls.n	a4ec <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    a4e8:	strh	r1, [r2, #0]
    a4ea:	pop	{r3, r4, r5, r6, r7, pc}
    a4ec:	pop	{r3, r4, r5, r6, r7, pc}
    a4ee:	nop
    a4f0:	.word	0xe000edfc
    a4f4:	.word	0xe0001000
    a4f8:	.word	0x20019e5c
    a4fc:	.word	0xe0001004
    a500:	.word	0x20019edc
    a504:	.word	0x20019ee2

0000a508 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a508:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a50a:	ldr	r5, [pc, #56]	; (a544 <Stream::timedPeek()+0x3c>)
    a50c:	sub	sp, #8
    a50e:	ldr	r3, [r5, #0]
    a510:	str	r3, [sp, #0]
	return ret;
    a512:	ldr	r6, [sp, #0]
    a514:	mov	r4, r0
    a516:	b.n	a52a <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a518:	bl	9e44 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a51c:	ldr	r3, [r5, #0]
    a51e:	str	r3, [sp, #4]
	return ret;
    a520:	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a522:	ldr	r2, [r4, #8]
    a524:	subs	r3, r3, r6
    a526:	cmp	r3, r2
    a528:	bcs.n	a53a <Stream::timedPeek()+0x32>
    c = peek();
    a52a:	ldr	r3, [r4, #0]
    a52c:	mov	r0, r4
    a52e:	ldr	r3, [r3, #24]
    a530:	blx	r3
    if (c >= 0) return c;
    a532:	cmp	r0, #0
    a534:	blt.n	a518 <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a536:	add	sp, #8
    a538:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a53a:	mov.w	r0, #4294967295
}
    a53e:	add	sp, #8
    a540:	pop	{r4, r5, r6, pc}
    a542:	nop
    a544:	.word	0x20019d58

0000a548 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a548:	push	{r4, lr}
    a54a:	mov	r4, r0
    a54c:	b.n	a55c <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a54e:	cmp	r3, #45	; 0x2d
    a550:	beq.n	a56c <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a552:	cmp	r2, #9
    a554:	bls.n	a56c <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a556:	ldr	r3, [r4, #0]
    a558:	ldr	r3, [r3, #20]
    a55a:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a55c:	mov	r0, r4
    a55e:	bl	a508 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a562:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a564:	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    a568:	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a56a:	bge.n	a54e <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a56c:	mov	r0, r3
    a56e:	pop	{r4, pc}

0000a570 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a570:	push	{r3, r4, r5, r6, r7, lr}
    a572:	mov	r5, r1
    a574:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a576:	bl	a548 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a57a:	cmp	r0, #0
    a57c:	blt.n	a5c6 <Stream::parseInt(char)+0x56>
    a57e:	movs	r6, #0
    a580:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a582:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a584:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a588:	beq.n	a59e <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    a58a:	cmp	r0, #45	; 0x2d
    a58c:	beq.n	a5be <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    a58e:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a592:	cmp	r2, #9
      value = value * 10 + c - '0';
    a594:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a598:	bhi.n	a59e <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    a59a:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    a59e:	ldr	r3, [r4, #0]
    a5a0:	mov	r0, r4
    a5a2:	ldr	r3, [r3, #20]
    a5a4:	blx	r3
    c = timedPeek();
    a5a6:	mov	r0, r4
    a5a8:	bl	a508 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    a5ac:	sub.w	r3, r0, #48	; 0x30
    a5b0:	cmp	r3, #9
    a5b2:	bls.n	a582 <Stream::parseInt(char)+0x12>
    a5b4:	cmp	r0, r5
    a5b6:	beq.n	a582 <Stream::parseInt(char)+0x12>

  if(isNegative)
    a5b8:	cbz	r7, a5c2 <Stream::parseInt(char)+0x52>
    value = -value;
    a5ba:	negs	r0, r6
    a5bc:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    a5be:	movs	r7, #1
    a5c0:	b.n	a59e <Stream::parseInt(char)+0x2e>
    a5c2:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a5c4:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a5c6:	movs	r0, #0
    a5c8:	pop	{r3, r4, r5, r6, r7, pc}
    a5ca:	nop

0000a5cc <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a5cc:	movs	r1, #1
    a5ce:	b.w	a570 <Stream::parseInt(char)>
    a5d2:	nop

0000a5d4 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    a5d4:	bx	lr
    a5d6:	nop

0000a5d8 <operator new(unsigned int)>:
    a5d8:	b.w	b71c <malloc>

0000a5dc <operator delete(void*, unsigned int)>:
    a5dc:	b.w	b72c <free>

0000a5e0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    a5e0:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a5e2:	ldr	r2, [pc, #96]	; (a644 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a5e4:	ldr	r3, [pc, #96]	; (a648 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a5e6:	ldr	r1, [pc, #100]	; (a64c <usb_init_serialnumber+0x6c>)
    a5e8:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a5ea:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a5ec:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a5ee:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a5f0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a5f2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a5f4:	ldrb	r3, [r2, #0]
    a5f6:	lsls	r3, r3, #24
    a5f8:	bpl.n	a5f4 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a5fa:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a5fc:	ldr	r3, [pc, #80]	; (a650 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a5fe:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a600:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    a602:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a604:	ldr	r3, [pc, #76]	; (a654 <usb_init_serialnumber+0x74>)
    a606:	ldr	r4, [pc, #80]	; (a658 <usb_init_serialnumber+0x78>)
    a608:	cmp	r0, r3
    a60a:	it	ls
    a60c:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    a610:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a612:	it	ls
    a614:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    a616:	movs	r2, #10
    a618:	bl	a65c <ultoa>
    a61c:	add	r1, sp, #4
    a61e:	mov	r0, r4
	for (i=0; i<10; i++) {
    a620:	movs	r3, #0
		char c = buf[i];
    a622:	ldrb.w	r2, [r1], #1
    a626:	adds	r3, #1
		if (!c) break;
    a628:	cbz	r2, a63a <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a62a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a62c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a630:	bne.n	a622 <usb_init_serialnumber+0x42>
    a632:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a634:	strb	r3, [r4, #0]
}
    a636:	add	sp, #16
    a638:	pop	{r4, pc}
    a63a:	lsls	r3, r3, #1
    a63c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a63e:	strb	r3, [r4, #0]
}
    a640:	add	sp, #16
    a642:	pop	{r4, pc}
    a644:	.word	0x40020004
    a648:	.word	0x40020000
    a64c:	.word	0x41070000
    a650:	.word	0x4002000c
    a654:	.word	0x0098967f
    a658:	.word	0x20013b88

0000a65c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a65c:	push	{r4, r5, r6, r7}
    a65e:	subs	r5, r1, #1
    a660:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    a662:	movs	r4, #0
    a664:	b.n	a668 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a666:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a668:	udiv	r3, r0, r2
    a66c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a670:	cmp	r0, #9
    a672:	add.w	r7, r0, #48	; 0x30
    a676:	itet	hi
    a678:	addhi	r0, #55	; 0x37
    a67a:	uxtbls	r0, r7
    a67c:	uxtbhi	r0, r0
    a67e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    a682:	mov	r0, r3
    a684:	cmp	r3, #0
    a686:	bne.n	a666 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a688:	adds	r2, r1, r4
    a68a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a68c:	cbz	r4, a6a2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    a68e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    a690:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    a694:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a696:	adds	r3, #1
    a698:	subs	r0, r4, r3
    a69a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a69c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a6a0:	blt.n	a68e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a6a2:	mov	r0, r1
    a6a4:	pop	{r4, r5, r6, r7}
    a6a6:	bx	lr

0000a6a8 <nanf>:
    a6a8:	vldr	s0, [pc, #4]	; a6b0 <nanf+0x8>
    a6ac:	bx	lr
    a6ae:	nop
    a6b0:	.word	0x7fc00000

0000a6b4 <__aeabi_atexit>:
    a6b4:	mov	r3, r1
    a6b6:	mov	r1, r0
    a6b8:	mov	r0, r3
    a6ba:	b.w	b664 <__cxa_atexit>
    a6be:	nop

0000a6c0 <__aeabi_drsub>:
    a6c0:	eor.w	r1, r1, #2147483648	; 0x80000000
    a6c4:	b.n	a6cc <__adddf3>
    a6c6:	nop

0000a6c8 <__aeabi_dsub>:
    a6c8:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a6cc <__adddf3>:
    a6cc:	push	{r4, r5, lr}
    a6ce:	mov.w	r4, r1, lsl #1
    a6d2:	mov.w	r5, r3, lsl #1
    a6d6:	teq	r4, r5
    a6da:	it	eq
    a6dc:	teqeq	r0, r2
    a6e0:	itttt	ne
    a6e2:	orrsne.w	ip, r4, r0
    a6e6:	orrsne.w	ip, r5, r2
    a6ea:	mvnsne.w	ip, r4, asr #21
    a6ee:	mvnsne.w	ip, r5, asr #21
    a6f2:	beq.w	a8ba <__adddf3+0x1ee>
    a6f6:	mov.w	r4, r4, lsr #21
    a6fa:	rsbs	r5, r4, r5, lsr #21
    a6fe:	it	lt
    a700:	neglt	r5, r5
    a702:	ble.n	a71e <__adddf3+0x52>
    a704:	add	r4, r5
    a706:	eor.w	r2, r0, r2
    a70a:	eor.w	r3, r1, r3
    a70e:	eor.w	r0, r2, r0
    a712:	eor.w	r1, r3, r1
    a716:	eor.w	r2, r0, r2
    a71a:	eor.w	r3, r1, r3
    a71e:	cmp	r5, #54	; 0x36
    a720:	it	hi
    a722:	pophi	{r4, r5, pc}
    a724:	tst.w	r1, #2147483648	; 0x80000000
    a728:	mov.w	r1, r1, lsl #12
    a72c:	mov.w	ip, #1048576	; 0x100000
    a730:	orr.w	r1, ip, r1, lsr #12
    a734:	beq.n	a73c <__adddf3+0x70>
    a736:	negs	r0, r0
    a738:	sbc.w	r1, r1, r1, lsl #1
    a73c:	tst.w	r3, #2147483648	; 0x80000000
    a740:	mov.w	r3, r3, lsl #12
    a744:	orr.w	r3, ip, r3, lsr #12
    a748:	beq.n	a750 <__adddf3+0x84>
    a74a:	negs	r2, r2
    a74c:	sbc.w	r3, r3, r3, lsl #1
    a750:	teq	r4, r5
    a754:	beq.w	a8a6 <__adddf3+0x1da>
    a758:	sub.w	r4, r4, #1
    a75c:	rsbs	lr, r5, #32
    a760:	blt.n	a77e <__adddf3+0xb2>
    a762:	lsl.w	ip, r2, lr
    a766:	lsr.w	r2, r2, r5
    a76a:	adds	r0, r0, r2
    a76c:	adc.w	r1, r1, #0
    a770:	lsl.w	r2, r3, lr
    a774:	adds	r0, r0, r2
    a776:	asr.w	r3, r3, r5
    a77a:	adcs	r1, r3
    a77c:	b.n	a79c <__adddf3+0xd0>
    a77e:	sub.w	r5, r5, #32
    a782:	add.w	lr, lr, #32
    a786:	cmp	r2, #1
    a788:	lsl.w	ip, r3, lr
    a78c:	it	cs
    a78e:	orrcs.w	ip, ip, #2
    a792:	asr.w	r3, r3, r5
    a796:	adds	r0, r0, r3
    a798:	adcs.w	r1, r1, r3, asr #31
    a79c:	and.w	r5, r1, #2147483648	; 0x80000000
    a7a0:	bpl.n	a7b2 <__adddf3+0xe6>
    a7a2:	mov.w	lr, #0
    a7a6:	rsbs	ip, ip, #0
    a7aa:	sbcs.w	r0, lr, r0
    a7ae:	sbc.w	r1, lr, r1
    a7b2:	cmp.w	r1, #1048576	; 0x100000
    a7b6:	bcc.n	a7f0 <__adddf3+0x124>
    a7b8:	cmp.w	r1, #2097152	; 0x200000
    a7bc:	bcc.n	a7d8 <__adddf3+0x10c>
    a7be:	lsrs	r1, r1, #1
    a7c0:	movs.w	r0, r0, rrx
    a7c4:	mov.w	ip, ip, rrx
    a7c8:	add.w	r4, r4, #1
    a7cc:	mov.w	r2, r4, lsl #21
    a7d0:	cmn.w	r2, #4194304	; 0x400000
    a7d4:	bcs.w	a90c <__adddf3+0x240>
    a7d8:	cmp.w	ip, #2147483648	; 0x80000000
    a7dc:	it	eq
    a7de:	movseq.w	ip, r0, lsr #1
    a7e2:	adcs.w	r0, r0, #0
    a7e6:	adc.w	r1, r1, r4, lsl #20
    a7ea:	orr.w	r1, r1, r5
    a7ee:	pop	{r4, r5, pc}
    a7f0:	movs.w	ip, ip, lsl #1
    a7f4:	adcs	r0, r0
    a7f6:	adc.w	r1, r1, r1
    a7fa:	tst.w	r1, #1048576	; 0x100000
    a7fe:	sub.w	r4, r4, #1
    a802:	bne.n	a7d8 <__adddf3+0x10c>
    a804:	teq	r1, #0
    a808:	itt	eq
    a80a:	moveq	r1, r0
    a80c:	moveq	r0, #0
    a80e:	clz	r3, r1
    a812:	it	eq
    a814:	addeq	r3, #32
    a816:	sub.w	r3, r3, #11
    a81a:	subs.w	r2, r3, #32
    a81e:	bge.n	a83a <__adddf3+0x16e>
    a820:	adds	r2, #12
    a822:	ble.n	a836 <__adddf3+0x16a>
    a824:	add.w	ip, r2, #20
    a828:	rsb	r2, r2, #12
    a82c:	lsl.w	r0, r1, ip
    a830:	lsr.w	r1, r1, r2
    a834:	b.n	a850 <__adddf3+0x184>
    a836:	add.w	r2, r2, #20
    a83a:	it	le
    a83c:	rsble	ip, r2, #32
    a840:	lsl.w	r1, r1, r2
    a844:	lsr.w	ip, r0, ip
    a848:	itt	le
    a84a:	orrle.w	r1, r1, ip
    a84e:	lslle	r0, r2
    a850:	subs	r4, r4, r3
    a852:	ittt	ge
    a854:	addge.w	r1, r1, r4, lsl #20
    a858:	orrge	r1, r5
    a85a:	popge	{r4, r5, pc}
    a85c:	mvn.w	r4, r4
    a860:	subs	r4, #31
    a862:	bge.n	a89e <__adddf3+0x1d2>
    a864:	adds	r4, #12
    a866:	bgt.n	a886 <__adddf3+0x1ba>
    a868:	add.w	r4, r4, #20
    a86c:	rsb	r2, r4, #32
    a870:	lsr.w	r0, r0, r4
    a874:	lsl.w	r3, r1, r2
    a878:	orr.w	r0, r0, r3
    a87c:	lsr.w	r3, r1, r4
    a880:	orr.w	r1, r5, r3
    a884:	pop	{r4, r5, pc}
    a886:	rsb	r4, r4, #12
    a88a:	rsb	r2, r4, #32
    a88e:	lsr.w	r0, r0, r2
    a892:	lsl.w	r3, r1, r4
    a896:	orr.w	r0, r0, r3
    a89a:	mov	r1, r5
    a89c:	pop	{r4, r5, pc}
    a89e:	lsr.w	r0, r1, r4
    a8a2:	mov	r1, r5
    a8a4:	pop	{r4, r5, pc}
    a8a6:	teq	r4, #0
    a8aa:	eor.w	r3, r3, #1048576	; 0x100000
    a8ae:	itte	eq
    a8b0:	eoreq.w	r1, r1, #1048576	; 0x100000
    a8b4:	addeq	r4, #1
    a8b6:	subne	r5, #1
    a8b8:	b.n	a758 <__adddf3+0x8c>
    a8ba:	mvns.w	ip, r4, asr #21
    a8be:	it	ne
    a8c0:	mvnsne.w	ip, r5, asr #21
    a8c4:	beq.n	a91a <__adddf3+0x24e>
    a8c6:	teq	r4, r5
    a8ca:	it	eq
    a8cc:	teqeq	r0, r2
    a8d0:	beq.n	a8de <__adddf3+0x212>
    a8d2:	orrs.w	ip, r4, r0
    a8d6:	itt	eq
    a8d8:	moveq	r1, r3
    a8da:	moveq	r0, r2
    a8dc:	pop	{r4, r5, pc}
    a8de:	teq	r1, r3
    a8e2:	ittt	ne
    a8e4:	movne	r1, #0
    a8e6:	movne	r0, #0
    a8e8:	popne	{r4, r5, pc}
    a8ea:	movs.w	ip, r4, lsr #21
    a8ee:	bne.n	a8fc <__adddf3+0x230>
    a8f0:	lsls	r0, r0, #1
    a8f2:	adcs	r1, r1
    a8f4:	it	cs
    a8f6:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    a8fa:	pop	{r4, r5, pc}
    a8fc:	adds.w	r4, r4, #4194304	; 0x400000
    a900:	itt	cc
    a902:	addcc.w	r1, r1, #1048576	; 0x100000
    a906:	popcc	{r4, r5, pc}
    a908:	and.w	r5, r1, #2147483648	; 0x80000000
    a90c:	orr.w	r1, r5, #2130706432	; 0x7f000000
    a910:	orr.w	r1, r1, #15728640	; 0xf00000
    a914:	mov.w	r0, #0
    a918:	pop	{r4, r5, pc}
    a91a:	mvns.w	ip, r4, asr #21
    a91e:	itte	ne
    a920:	movne	r1, r3
    a922:	movne	r0, r2
    a924:	mvnseq.w	ip, r5, asr #21
    a928:	itt	ne
    a92a:	movne	r3, r1
    a92c:	movne	r2, r0
    a92e:	orrs.w	r4, r0, r1, lsl #12
    a932:	itte	eq
    a934:	orrseq.w	r5, r2, r3, lsl #12
    a938:	teqeq	r1, r3
    a93c:	orrne.w	r1, r1, #524288	; 0x80000
    a940:	pop	{r4, r5, pc}
    a942:	nop

0000a944 <__aeabi_ui2d>:
    a944:	teq	r0, #0
    a948:	itt	eq
    a94a:	moveq	r1, #0
    a94c:	bxeq	lr
    a94e:	push	{r4, r5, lr}
    a950:	mov.w	r4, #1024	; 0x400
    a954:	add.w	r4, r4, #50	; 0x32
    a958:	mov.w	r5, #0
    a95c:	mov.w	r1, #0
    a960:	b.n	a804 <__adddf3+0x138>
    a962:	nop

0000a964 <__aeabi_i2d>:
    a964:	teq	r0, #0
    a968:	itt	eq
    a96a:	moveq	r1, #0
    a96c:	bxeq	lr
    a96e:	push	{r4, r5, lr}
    a970:	mov.w	r4, #1024	; 0x400
    a974:	add.w	r4, r4, #50	; 0x32
    a978:	ands.w	r5, r0, #2147483648	; 0x80000000
    a97c:	it	mi
    a97e:	negmi	r0, r0
    a980:	mov.w	r1, #0
    a984:	b.n	a804 <__adddf3+0x138>
    a986:	nop

0000a988 <__aeabi_f2d>:
    a988:	lsls	r2, r0, #1
    a98a:	mov.w	r1, r2, asr #3
    a98e:	mov.w	r1, r1, rrx
    a992:	mov.w	r0, r2, lsl #28
    a996:	itttt	ne
    a998:	andsne.w	r3, r2, #4278190080	; 0xff000000
    a99c:	teqne	r3, #4278190080	; 0xff000000
    a9a0:	eorne.w	r1, r1, #939524096	; 0x38000000
    a9a4:	bxne	lr
    a9a6:	teq	r2, #0
    a9aa:	ite	ne
    a9ac:	teqne	r3, #4278190080	; 0xff000000
    a9b0:	bxeq	lr
    a9b2:	push	{r4, r5, lr}
    a9b4:	mov.w	r4, #896	; 0x380
    a9b8:	and.w	r5, r1, #2147483648	; 0x80000000
    a9bc:	bic.w	r1, r1, #2147483648	; 0x80000000
    a9c0:	b.n	a804 <__adddf3+0x138>
    a9c2:	nop

0000a9c4 <__aeabi_ul2d>:
    a9c4:	orrs.w	r2, r0, r1
    a9c8:	it	eq
    a9ca:	bxeq	lr
    a9cc:	push	{r4, r5, lr}
    a9ce:	mov.w	r5, #0
    a9d2:	b.n	a9ea <__aeabi_l2d+0x16>

0000a9d4 <__aeabi_l2d>:
    a9d4:	orrs.w	r2, r0, r1
    a9d8:	it	eq
    a9da:	bxeq	lr
    a9dc:	push	{r4, r5, lr}
    a9de:	ands.w	r5, r1, #2147483648	; 0x80000000
    a9e2:	bpl.n	a9ea <__aeabi_l2d+0x16>
    a9e4:	negs	r0, r0
    a9e6:	sbc.w	r1, r1, r1, lsl #1
    a9ea:	mov.w	r4, #1024	; 0x400
    a9ee:	add.w	r4, r4, #50	; 0x32
    a9f2:	movs.w	ip, r1, lsr #22
    a9f6:	beq.w	a7b2 <__adddf3+0xe6>
    a9fa:	mov.w	r2, #3
    a9fe:	movs.w	ip, ip, lsr #3
    aa02:	it	ne
    aa04:	addne	r2, #3
    aa06:	movs.w	ip, ip, lsr #3
    aa0a:	it	ne
    aa0c:	addne	r2, #3
    aa0e:	add.w	r2, r2, ip, lsr #3
    aa12:	rsb	r3, r2, #32
    aa16:	lsl.w	ip, r0, r3
    aa1a:	lsr.w	r0, r0, r2
    aa1e:	lsl.w	lr, r1, r3
    aa22:	orr.w	r0, r0, lr
    aa26:	lsr.w	r1, r1, r2
    aa2a:	add	r4, r2
    aa2c:	b.n	a7b2 <__adddf3+0xe6>
    aa2e:	nop

0000aa30 <__aeabi_dmul>:
    aa30:	push	{r4, r5, r6, lr}
    aa32:	mov.w	ip, #255	; 0xff
    aa36:	orr.w	ip, ip, #1792	; 0x700
    aa3a:	ands.w	r4, ip, r1, lsr #20
    aa3e:	ittte	ne
    aa40:	andsne.w	r5, ip, r3, lsr #20
    aa44:	teqne	r4, ip
    aa48:	teqne	r5, ip
    aa4c:	bleq	ac0c <__aeabi_dmul+0x1dc>
    aa50:	add	r4, r5
    aa52:	eor.w	r6, r1, r3
    aa56:	bic.w	r1, r1, ip, lsl #21
    aa5a:	bic.w	r3, r3, ip, lsl #21
    aa5e:	orrs.w	r5, r0, r1, lsl #12
    aa62:	it	ne
    aa64:	orrsne.w	r5, r2, r3, lsl #12
    aa68:	orr.w	r1, r1, #1048576	; 0x100000
    aa6c:	orr.w	r3, r3, #1048576	; 0x100000
    aa70:	beq.n	aae4 <__aeabi_dmul+0xb4>
    aa72:	umull	ip, lr, r0, r2
    aa76:	mov.w	r5, #0
    aa7a:	umlal	lr, r5, r1, r2
    aa7e:	and.w	r2, r6, #2147483648	; 0x80000000
    aa82:	umlal	lr, r5, r0, r3
    aa86:	mov.w	r6, #0
    aa8a:	umlal	r5, r6, r1, r3
    aa8e:	teq	ip, #0
    aa92:	it	ne
    aa94:	orrne.w	lr, lr, #1
    aa98:	sub.w	r4, r4, #255	; 0xff
    aa9c:	cmp.w	r6, #512	; 0x200
    aaa0:	sbc.w	r4, r4, #768	; 0x300
    aaa4:	bcs.n	aab0 <__aeabi_dmul+0x80>
    aaa6:	movs.w	lr, lr, lsl #1
    aaaa:	adcs	r5, r5
    aaac:	adc.w	r6, r6, r6
    aab0:	orr.w	r1, r2, r6, lsl #11
    aab4:	orr.w	r1, r1, r5, lsr #21
    aab8:	mov.w	r0, r5, lsl #11
    aabc:	orr.w	r0, r0, lr, lsr #21
    aac0:	mov.w	lr, lr, lsl #11
    aac4:	subs.w	ip, r4, #253	; 0xfd
    aac8:	it	hi
    aaca:	cmphi.w	ip, #1792	; 0x700
    aace:	bhi.n	ab0e <__aeabi_dmul+0xde>
    aad0:	cmp.w	lr, #2147483648	; 0x80000000
    aad4:	it	eq
    aad6:	movseq.w	lr, r0, lsr #1
    aada:	adcs.w	r0, r0, #0
    aade:	adc.w	r1, r1, r4, lsl #20
    aae2:	pop	{r4, r5, r6, pc}
    aae4:	and.w	r6, r6, #2147483648	; 0x80000000
    aae8:	orr.w	r1, r6, r1
    aaec:	orr.w	r0, r0, r2
    aaf0:	eor.w	r1, r1, r3
    aaf4:	subs.w	r4, r4, ip, lsr #1
    aaf8:	ittt	gt
    aafa:	rsbsgt	r5, r4, ip
    aafe:	orrgt.w	r1, r1, r4, lsl #20
    ab02:	popgt	{r4, r5, r6, pc}
    ab04:	orr.w	r1, r1, #1048576	; 0x100000
    ab08:	mov.w	lr, #0
    ab0c:	subs	r4, #1
    ab0e:	bgt.w	ac68 <__aeabi_dmul+0x238>
    ab12:	cmn.w	r4, #54	; 0x36
    ab16:	ittt	le
    ab18:	movle	r0, #0
    ab1a:	andle.w	r1, r1, #2147483648	; 0x80000000
    ab1e:	pople	{r4, r5, r6, pc}
    ab20:	rsb	r4, r4, #0
    ab24:	subs	r4, #32
    ab26:	bge.n	ab94 <__aeabi_dmul+0x164>
    ab28:	adds	r4, #12
    ab2a:	bgt.n	ab64 <__aeabi_dmul+0x134>
    ab2c:	add.w	r4, r4, #20
    ab30:	rsb	r5, r4, #32
    ab34:	lsl.w	r3, r0, r5
    ab38:	lsr.w	r0, r0, r4
    ab3c:	lsl.w	r2, r1, r5
    ab40:	orr.w	r0, r0, r2
    ab44:	and.w	r2, r1, #2147483648	; 0x80000000
    ab48:	bic.w	r1, r1, #2147483648	; 0x80000000
    ab4c:	adds.w	r0, r0, r3, lsr #31
    ab50:	lsr.w	r6, r1, r4
    ab54:	adc.w	r1, r2, r6
    ab58:	orrs.w	lr, lr, r3, lsl #1
    ab5c:	it	eq
    ab5e:	biceq.w	r0, r0, r3, lsr #31
    ab62:	pop	{r4, r5, r6, pc}
    ab64:	rsb	r4, r4, #12
    ab68:	rsb	r5, r4, #32
    ab6c:	lsl.w	r3, r0, r4
    ab70:	lsr.w	r0, r0, r5
    ab74:	lsl.w	r2, r1, r4
    ab78:	orr.w	r0, r0, r2
    ab7c:	and.w	r1, r1, #2147483648	; 0x80000000
    ab80:	adds.w	r0, r0, r3, lsr #31
    ab84:	adc.w	r1, r1, #0
    ab88:	orrs.w	lr, lr, r3, lsl #1
    ab8c:	it	eq
    ab8e:	biceq.w	r0, r0, r3, lsr #31
    ab92:	pop	{r4, r5, r6, pc}
    ab94:	rsb	r5, r4, #32
    ab98:	lsl.w	r2, r0, r5
    ab9c:	orr.w	lr, lr, r2
    aba0:	lsr.w	r3, r0, r4
    aba4:	lsl.w	r2, r1, r5
    aba8:	orr.w	r3, r3, r2
    abac:	lsr.w	r0, r1, r4
    abb0:	and.w	r1, r1, #2147483648	; 0x80000000
    abb4:	lsr.w	r2, r1, r4
    abb8:	bic.w	r0, r0, r2
    abbc:	add.w	r0, r0, r3, lsr #31
    abc0:	orrs.w	lr, lr, r3, lsl #1
    abc4:	it	eq
    abc6:	biceq.w	r0, r0, r3, lsr #31
    abca:	pop	{r4, r5, r6, pc}
    abcc:	teq	r4, #0
    abd0:	bne.n	abf2 <__aeabi_dmul+0x1c2>
    abd2:	and.w	r6, r1, #2147483648	; 0x80000000
    abd6:	lsls	r0, r0, #1
    abd8:	adc.w	r1, r1, r1
    abdc:	tst.w	r1, #1048576	; 0x100000
    abe0:	it	eq
    abe2:	subeq	r4, #1
    abe4:	beq.n	abd6 <__aeabi_dmul+0x1a6>
    abe6:	orr.w	r1, r1, r6
    abea:	teq	r5, #0
    abee:	it	ne
    abf0:	bxne	lr
    abf2:	and.w	r6, r3, #2147483648	; 0x80000000
    abf6:	lsls	r2, r2, #1
    abf8:	adc.w	r3, r3, r3
    abfc:	tst.w	r3, #1048576	; 0x100000
    ac00:	it	eq
    ac02:	subeq	r5, #1
    ac04:	beq.n	abf6 <__aeabi_dmul+0x1c6>
    ac06:	orr.w	r3, r3, r6
    ac0a:	bx	lr
    ac0c:	teq	r4, ip
    ac10:	and.w	r5, ip, r3, lsr #20
    ac14:	it	ne
    ac16:	teqne	r5, ip
    ac1a:	beq.n	ac36 <__aeabi_dmul+0x206>
    ac1c:	orrs.w	r6, r0, r1, lsl #1
    ac20:	it	ne
    ac22:	orrsne.w	r6, r2, r3, lsl #1
    ac26:	bne.n	abcc <__aeabi_dmul+0x19c>
    ac28:	eor.w	r1, r1, r3
    ac2c:	and.w	r1, r1, #2147483648	; 0x80000000
    ac30:	mov.w	r0, #0
    ac34:	pop	{r4, r5, r6, pc}
    ac36:	orrs.w	r6, r0, r1, lsl #1
    ac3a:	itte	eq
    ac3c:	moveq	r0, r2
    ac3e:	moveq	r1, r3
    ac40:	orrsne.w	r6, r2, r3, lsl #1
    ac44:	beq.n	ac7a <__aeabi_dmul+0x24a>
    ac46:	teq	r4, ip
    ac4a:	bne.n	ac52 <__aeabi_dmul+0x222>
    ac4c:	orrs.w	r6, r0, r1, lsl #12
    ac50:	bne.n	ac7a <__aeabi_dmul+0x24a>
    ac52:	teq	r5, ip
    ac56:	bne.n	ac64 <__aeabi_dmul+0x234>
    ac58:	orrs.w	r6, r2, r3, lsl #12
    ac5c:	itt	ne
    ac5e:	movne	r0, r2
    ac60:	movne	r1, r3
    ac62:	bne.n	ac7a <__aeabi_dmul+0x24a>
    ac64:	eor.w	r1, r1, r3
    ac68:	and.w	r1, r1, #2147483648	; 0x80000000
    ac6c:	orr.w	r1, r1, #2130706432	; 0x7f000000
    ac70:	orr.w	r1, r1, #15728640	; 0xf00000
    ac74:	mov.w	r0, #0
    ac78:	pop	{r4, r5, r6, pc}
    ac7a:	orr.w	r1, r1, #2130706432	; 0x7f000000
    ac7e:	orr.w	r1, r1, #16252928	; 0xf80000
    ac82:	pop	{r4, r5, r6, pc}

0000ac84 <__aeabi_ddiv>:
    ac84:	push	{r4, r5, r6, lr}
    ac86:	mov.w	ip, #255	; 0xff
    ac8a:	orr.w	ip, ip, #1792	; 0x700
    ac8e:	ands.w	r4, ip, r1, lsr #20
    ac92:	ittte	ne
    ac94:	andsne.w	r5, ip, r3, lsr #20
    ac98:	teqne	r4, ip
    ac9c:	teqne	r5, ip
    aca0:	bleq	adf2 <__aeabi_ddiv+0x16e>
    aca4:	sub.w	r4, r4, r5
    aca8:	eor.w	lr, r1, r3
    acac:	orrs.w	r5, r2, r3, lsl #12
    acb0:	mov.w	r1, r1, lsl #12
    acb4:	beq.w	adc8 <__aeabi_ddiv+0x144>
    acb8:	mov.w	r3, r3, lsl #12
    acbc:	mov.w	r5, #268435456	; 0x10000000
    acc0:	orr.w	r3, r5, r3, lsr #4
    acc4:	orr.w	r3, r3, r2, lsr #24
    acc8:	mov.w	r2, r2, lsl #8
    accc:	orr.w	r5, r5, r1, lsr #4
    acd0:	orr.w	r5, r5, r0, lsr #24
    acd4:	mov.w	r6, r0, lsl #8
    acd8:	and.w	r1, lr, #2147483648	; 0x80000000
    acdc:	cmp	r5, r3
    acde:	it	eq
    ace0:	cmpeq	r6, r2
    ace2:	adc.w	r4, r4, #253	; 0xfd
    ace6:	add.w	r4, r4, #768	; 0x300
    acea:	bcs.n	acf2 <__aeabi_ddiv+0x6e>
    acec:	lsrs	r3, r3, #1
    acee:	mov.w	r2, r2, rrx
    acf2:	subs	r6, r6, r2
    acf4:	sbc.w	r5, r5, r3
    acf8:	lsrs	r3, r3, #1
    acfa:	mov.w	r2, r2, rrx
    acfe:	mov.w	r0, #1048576	; 0x100000
    ad02:	mov.w	ip, #524288	; 0x80000
    ad06:	subs.w	lr, r6, r2
    ad0a:	sbcs.w	lr, r5, r3
    ad0e:	ittt	cs
    ad10:	subcs	r6, r6, r2
    ad12:	movcs	r5, lr
    ad14:	orrcs.w	r0, r0, ip
    ad18:	lsrs	r3, r3, #1
    ad1a:	mov.w	r2, r2, rrx
    ad1e:	subs.w	lr, r6, r2
    ad22:	sbcs.w	lr, r5, r3
    ad26:	ittt	cs
    ad28:	subcs	r6, r6, r2
    ad2a:	movcs	r5, lr
    ad2c:	orrcs.w	r0, r0, ip, lsr #1
    ad30:	lsrs	r3, r3, #1
    ad32:	mov.w	r2, r2, rrx
    ad36:	subs.w	lr, r6, r2
    ad3a:	sbcs.w	lr, r5, r3
    ad3e:	ittt	cs
    ad40:	subcs	r6, r6, r2
    ad42:	movcs	r5, lr
    ad44:	orrcs.w	r0, r0, ip, lsr #2
    ad48:	lsrs	r3, r3, #1
    ad4a:	mov.w	r2, r2, rrx
    ad4e:	subs.w	lr, r6, r2
    ad52:	sbcs.w	lr, r5, r3
    ad56:	ittt	cs
    ad58:	subcs	r6, r6, r2
    ad5a:	movcs	r5, lr
    ad5c:	orrcs.w	r0, r0, ip, lsr #3
    ad60:	orrs.w	lr, r5, r6
    ad64:	beq.n	ad98 <__aeabi_ddiv+0x114>
    ad66:	mov.w	r5, r5, lsl #4
    ad6a:	orr.w	r5, r5, r6, lsr #28
    ad6e:	mov.w	r6, r6, lsl #4
    ad72:	mov.w	r3, r3, lsl #3
    ad76:	orr.w	r3, r3, r2, lsr #29
    ad7a:	mov.w	r2, r2, lsl #3
    ad7e:	movs.w	ip, ip, lsr #4
    ad82:	bne.n	ad06 <__aeabi_ddiv+0x82>
    ad84:	tst.w	r1, #1048576	; 0x100000
    ad88:	bne.n	ada2 <__aeabi_ddiv+0x11e>
    ad8a:	orr.w	r1, r1, r0
    ad8e:	mov.w	r0, #0
    ad92:	mov.w	ip, #2147483648	; 0x80000000
    ad96:	b.n	ad06 <__aeabi_ddiv+0x82>
    ad98:	tst.w	r1, #1048576	; 0x100000
    ad9c:	itt	eq
    ad9e:	orreq	r1, r0
    ada0:	moveq	r0, #0
    ada2:	subs.w	ip, r4, #253	; 0xfd
    ada6:	it	hi
    ada8:	cmphi.w	ip, #1792	; 0x700
    adac:	bhi.w	ab0e <__aeabi_dmul+0xde>
    adb0:	subs.w	ip, r5, r3
    adb4:	itt	eq
    adb6:	subseq.w	ip, r6, r2
    adba:	movseq.w	ip, r0, lsr #1
    adbe:	adcs.w	r0, r0, #0
    adc2:	adc.w	r1, r1, r4, lsl #20
    adc6:	pop	{r4, r5, r6, pc}
    adc8:	and.w	lr, lr, #2147483648	; 0x80000000
    adcc:	orr.w	r1, lr, r1, lsr #12
    add0:	adds.w	r4, r4, ip, lsr #1
    add4:	ittt	gt
    add6:	rsbsgt	r5, r4, ip
    adda:	orrgt.w	r1, r1, r4, lsl #20
    adde:	popgt	{r4, r5, r6, pc}
    ade0:	orr.w	r1, r1, #1048576	; 0x100000
    ade4:	mov.w	lr, #0
    ade8:	subs	r4, #1
    adea:	b.n	ab0e <__aeabi_dmul+0xde>
    adec:	orr.w	lr, r5, r6
    adf0:	b.n	ab0e <__aeabi_dmul+0xde>
    adf2:	and.w	r5, ip, r3, lsr #20
    adf6:	teq	r4, ip
    adfa:	it	eq
    adfc:	teqeq	r5, ip
    ae00:	beq.w	ac7a <__aeabi_dmul+0x24a>
    ae04:	teq	r4, ip
    ae08:	bne.n	ae20 <__aeabi_ddiv+0x19c>
    ae0a:	orrs.w	r4, r0, r1, lsl #12
    ae0e:	bne.w	ac7a <__aeabi_dmul+0x24a>
    ae12:	teq	r5, ip
    ae16:	bne.w	ac64 <__aeabi_dmul+0x234>
    ae1a:	mov	r0, r2
    ae1c:	mov	r1, r3
    ae1e:	b.n	ac7a <__aeabi_dmul+0x24a>
    ae20:	teq	r5, ip
    ae24:	bne.n	ae34 <__aeabi_ddiv+0x1b0>
    ae26:	orrs.w	r5, r2, r3, lsl #12
    ae2a:	beq.w	ac28 <__aeabi_dmul+0x1f8>
    ae2e:	mov	r0, r2
    ae30:	mov	r1, r3
    ae32:	b.n	ac7a <__aeabi_dmul+0x24a>
    ae34:	orrs.w	r6, r0, r1, lsl #1
    ae38:	it	ne
    ae3a:	orrsne.w	r6, r2, r3, lsl #1
    ae3e:	bne.w	abcc <__aeabi_dmul+0x19c>
    ae42:	orrs.w	r4, r0, r1, lsl #1
    ae46:	bne.w	ac64 <__aeabi_dmul+0x234>
    ae4a:	orrs.w	r5, r2, r3, lsl #1
    ae4e:	bne.w	ac28 <__aeabi_dmul+0x1f8>
    ae52:	b.n	ac7a <__aeabi_dmul+0x24a>

0000ae54 <__gedf2>:
    ae54:	mov.w	ip, #4294967295
    ae58:	b.n	ae68 <__cmpdf2+0x4>
    ae5a:	nop

0000ae5c <__ledf2>:
    ae5c:	mov.w	ip, #1
    ae60:	b.n	ae68 <__cmpdf2+0x4>
    ae62:	nop

0000ae64 <__cmpdf2>:
    ae64:	mov.w	ip, #1
    ae68:	str.w	ip, [sp, #-4]!
    ae6c:	mov.w	ip, r1, lsl #1
    ae70:	mvns.w	ip, ip, asr #21
    ae74:	mov.w	ip, r3, lsl #1
    ae78:	it	ne
    ae7a:	mvnsne.w	ip, ip, asr #21
    ae7e:	beq.n	aeb8 <__cmpdf2+0x54>
    ae80:	add	sp, #4
    ae82:	orrs.w	ip, r0, r1, lsl #1
    ae86:	ite	eq
    ae88:	orrseq.w	ip, r2, r3, lsl #1
    ae8c:	teqne	r1, r3
    ae90:	ittt	eq
    ae92:	teqeq	r0, r2
    ae96:	moveq	r0, #0
    ae98:	bxeq	lr
    ae9a:	cmn.w	r0, #0
    ae9e:	teq	r1, r3
    aea2:	it	pl
    aea4:	cmppl	r1, r3
    aea6:	it	eq
    aea8:	cmpeq	r0, r2
    aeaa:	ite	cs
    aeac:	asrcs	r0, r3, #31
    aeae:	mvncc.w	r0, r3, asr #31
    aeb2:	orr.w	r0, r0, #1
    aeb6:	bx	lr
    aeb8:	mov.w	ip, r1, lsl #1
    aebc:	mvns.w	ip, ip, asr #21
    aec0:	bne.n	aec8 <__cmpdf2+0x64>
    aec2:	orrs.w	ip, r0, r1, lsl #12
    aec6:	bne.n	aed8 <__cmpdf2+0x74>
    aec8:	mov.w	ip, r3, lsl #1
    aecc:	mvns.w	ip, ip, asr #21
    aed0:	bne.n	ae80 <__cmpdf2+0x1c>
    aed2:	orrs.w	ip, r2, r3, lsl #12
    aed6:	beq.n	ae80 <__cmpdf2+0x1c>
    aed8:	ldr.w	r0, [sp], #4
    aedc:	bx	lr
    aede:	nop

0000aee0 <__aeabi_cdrcmple>:
    aee0:	mov	ip, r0
    aee2:	mov	r0, r2
    aee4:	mov	r2, ip
    aee6:	mov	ip, r1
    aee8:	mov	r1, r3
    aeea:	mov	r3, ip
    aeec:	b.n	aef0 <__aeabi_cdcmpeq>
    aeee:	nop

0000aef0 <__aeabi_cdcmpeq>:
    aef0:	push	{r0, lr}
    aef2:	bl	ae64 <__cmpdf2>
    aef6:	cmp	r0, #0
    aef8:	it	mi
    aefa:	cmnmi.w	r0, #0
    aefe:	pop	{r0, pc}

0000af00 <__aeabi_dcmpeq>:
    af00:	str.w	lr, [sp, #-8]!
    af04:	bl	aef0 <__aeabi_cdcmpeq>
    af08:	ite	eq
    af0a:	moveq	r0, #1
    af0c:	movne	r0, #0
    af0e:	ldr.w	pc, [sp], #8
    af12:	nop

0000af14 <__aeabi_dcmplt>:
    af14:	str.w	lr, [sp, #-8]!
    af18:	bl	aef0 <__aeabi_cdcmpeq>
    af1c:	ite	cc
    af1e:	movcc	r0, #1
    af20:	movcs	r0, #0
    af22:	ldr.w	pc, [sp], #8
    af26:	nop

0000af28 <__aeabi_dcmple>:
    af28:	str.w	lr, [sp, #-8]!
    af2c:	bl	aef0 <__aeabi_cdcmpeq>
    af30:	ite	ls
    af32:	movls	r0, #1
    af34:	movhi	r0, #0
    af36:	ldr.w	pc, [sp], #8
    af3a:	nop

0000af3c <__aeabi_dcmpge>:
    af3c:	str.w	lr, [sp, #-8]!
    af40:	bl	aee0 <__aeabi_cdrcmple>
    af44:	ite	ls
    af46:	movls	r0, #1
    af48:	movhi	r0, #0
    af4a:	ldr.w	pc, [sp], #8
    af4e:	nop

0000af50 <__aeabi_dcmpgt>:
    af50:	str.w	lr, [sp, #-8]!
    af54:	bl	aee0 <__aeabi_cdrcmple>
    af58:	ite	cc
    af5a:	movcc	r0, #1
    af5c:	movcs	r0, #0
    af5e:	ldr.w	pc, [sp], #8
    af62:	nop

0000af64 <__aeabi_dcmpun>:
    af64:	mov.w	ip, r1, lsl #1
    af68:	mvns.w	ip, ip, asr #21
    af6c:	bne.n	af74 <__aeabi_dcmpun+0x10>
    af6e:	orrs.w	ip, r0, r1, lsl #12
    af72:	bne.n	af8a <__aeabi_dcmpun+0x26>
    af74:	mov.w	ip, r3, lsl #1
    af78:	mvns.w	ip, ip, asr #21
    af7c:	bne.n	af84 <__aeabi_dcmpun+0x20>
    af7e:	orrs.w	ip, r2, r3, lsl #12
    af82:	bne.n	af8a <__aeabi_dcmpun+0x26>
    af84:	mov.w	r0, #0
    af88:	bx	lr
    af8a:	mov.w	r0, #1
    af8e:	bx	lr

0000af90 <__aeabi_d2iz>:
    af90:	mov.w	r2, r1, lsl #1
    af94:	adds.w	r2, r2, #2097152	; 0x200000
    af98:	bcs.n	afc6 <__aeabi_d2iz+0x36>
    af9a:	bpl.n	afc0 <__aeabi_d2iz+0x30>
    af9c:	mvn.w	r3, #992	; 0x3e0
    afa0:	subs.w	r2, r3, r2, asr #21
    afa4:	bls.n	afcc <__aeabi_d2iz+0x3c>
    afa6:	mov.w	r3, r1, lsl #11
    afaa:	orr.w	r3, r3, #2147483648	; 0x80000000
    afae:	orr.w	r3, r3, r0, lsr #21
    afb2:	tst.w	r1, #2147483648	; 0x80000000
    afb6:	lsr.w	r0, r3, r2
    afba:	it	ne
    afbc:	negne	r0, r0
    afbe:	bx	lr
    afc0:	mov.w	r0, #0
    afc4:	bx	lr
    afc6:	orrs.w	r0, r0, r1, lsl #12
    afca:	bne.n	afd8 <__aeabi_d2iz+0x48>
    afcc:	ands.w	r0, r1, #2147483648	; 0x80000000
    afd0:	it	eq
    afd2:	mvneq.w	r0, #2147483648	; 0x80000000
    afd6:	bx	lr
    afd8:	mov.w	r0, #0
    afdc:	bx	lr
    afde:	nop

0000afe0 <__aeabi_d2uiz>:
    afe0:	lsls	r2, r1, #1
    afe2:	bcs.n	b008 <__aeabi_d2uiz+0x28>
    afe4:	adds.w	r2, r2, #2097152	; 0x200000
    afe8:	bcs.n	b00e <__aeabi_d2uiz+0x2e>
    afea:	bpl.n	b008 <__aeabi_d2uiz+0x28>
    afec:	mvn.w	r3, #992	; 0x3e0
    aff0:	subs.w	r2, r3, r2, asr #21
    aff4:	bmi.n	b014 <__aeabi_d2uiz+0x34>
    aff6:	mov.w	r3, r1, lsl #11
    affa:	orr.w	r3, r3, #2147483648	; 0x80000000
    affe:	orr.w	r3, r3, r0, lsr #21
    b002:	lsr.w	r0, r3, r2
    b006:	bx	lr
    b008:	mov.w	r0, #0
    b00c:	bx	lr
    b00e:	orrs.w	r0, r0, r1, lsl #12
    b012:	bne.n	b01a <__aeabi_d2uiz+0x3a>
    b014:	mov.w	r0, #4294967295
    b018:	bx	lr
    b01a:	mov.w	r0, #0
    b01e:	bx	lr

0000b020 <__aeabi_d2f>:
    b020:	mov.w	r2, r1, lsl #1
    b024:	subs.w	r3, r2, #1879048192	; 0x70000000
    b028:	itt	cs
    b02a:	subscs.w	ip, r3, #2097152	; 0x200000
    b02e:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    b032:	bls.n	b050 <__aeabi_d2f+0x30>
    b034:	and.w	ip, r1, #2147483648	; 0x80000000
    b038:	mov.w	r2, r0, lsl #3
    b03c:	orr.w	r0, ip, r0, lsr #29
    b040:	cmp.w	r2, #2147483648	; 0x80000000
    b044:	adc.w	r0, r0, r3, lsl #2
    b048:	it	eq
    b04a:	biceq.w	r0, r0, #1
    b04e:	bx	lr
    b050:	tst.w	r1, #1073741824	; 0x40000000
    b054:	bne.n	b09a <__aeabi_d2f+0x7a>
    b056:	adds.w	r2, r3, #48234496	; 0x2e00000
    b05a:	itt	lt
    b05c:	andlt.w	r0, r1, #2147483648	; 0x80000000
    b060:	bxlt	lr
    b062:	orr.w	r1, r1, #1048576	; 0x100000
    b066:	mov.w	r2, r2, lsr #21
    b06a:	rsb	r2, r2, #24
    b06e:	rsb	ip, r2, #32
    b072:	lsls.w	r3, r0, ip
    b076:	lsr.w	r0, r0, r2
    b07a:	it	ne
    b07c:	orrne.w	r0, r0, #1
    b080:	mov.w	r3, r1, lsl #11
    b084:	mov.w	r3, r3, lsr #11
    b088:	lsl.w	ip, r3, ip
    b08c:	orr.w	r0, r0, ip
    b090:	lsr.w	r3, r3, r2
    b094:	mov.w	r3, r3, lsl #1
    b098:	b.n	b034 <__aeabi_d2f+0x14>
    b09a:	mvns.w	r3, r2, asr #21
    b09e:	bne.n	b0b0 <__aeabi_d2f+0x90>
    b0a0:	orrs.w	r3, r0, r1, lsl #12
    b0a4:	ittt	ne
    b0a6:	movne.w	r0, #2130706432	; 0x7f000000
    b0aa:	orrne.w	r0, r0, #12582912	; 0xc00000
    b0ae:	bxne	lr
    b0b0:	and.w	r0, r1, #2147483648	; 0x80000000
    b0b4:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b0b8:	orr.w	r0, r0, #8388608	; 0x800000
    b0bc:	bx	lr
    b0be:	nop

0000b0c0 <__aeabi_frsub>:
    b0c0:	eor.w	r0, r0, #2147483648	; 0x80000000
    b0c4:	b.n	b0cc <__addsf3>
    b0c6:	nop

0000b0c8 <__aeabi_fsub>:
    b0c8:	eor.w	r1, r1, #2147483648	; 0x80000000

0000b0cc <__addsf3>:
    b0cc:	lsls	r2, r0, #1
    b0ce:	itttt	ne
    b0d0:	movsne.w	r3, r1, lsl #1
    b0d4:	teqne	r2, r3
    b0d8:	mvnsne.w	ip, r2, asr #24
    b0dc:	mvnsne.w	ip, r3, asr #24
    b0e0:	beq.n	b1b8 <__addsf3+0xec>
    b0e2:	mov.w	r2, r2, lsr #24
    b0e6:	rsbs	r3, r2, r3, lsr #24
    b0ea:	itttt	gt
    b0ec:	addgt	r2, r2, r3
    b0ee:	eorgt	r1, r0
    b0f0:	eorgt	r0, r1
    b0f2:	eorgt	r1, r0
    b0f4:	it	lt
    b0f6:	neglt	r3, r3
    b0f8:	cmp	r3, #25
    b0fa:	it	hi
    b0fc:	bxhi	lr
    b0fe:	tst.w	r0, #2147483648	; 0x80000000
    b102:	orr.w	r0, r0, #8388608	; 0x800000
    b106:	bic.w	r0, r0, #4278190080	; 0xff000000
    b10a:	it	ne
    b10c:	negne	r0, r0
    b10e:	tst.w	r1, #2147483648	; 0x80000000
    b112:	orr.w	r1, r1, #8388608	; 0x800000
    b116:	bic.w	r1, r1, #4278190080	; 0xff000000
    b11a:	it	ne
    b11c:	negne	r1, r1
    b11e:	teq	r2, r3
    b122:	beq.n	b1a4 <__addsf3+0xd8>
    b124:	sub.w	r2, r2, #1
    b128:	asr.w	ip, r1, r3
    b12c:	adds.w	r0, r0, ip
    b130:	rsb	r3, r3, #32
    b134:	lsl.w	r1, r1, r3
    b138:	and.w	r3, r0, #2147483648	; 0x80000000
    b13c:	bpl.n	b144 <__addsf3+0x78>
    b13e:	negs	r1, r1
    b140:	sbc.w	r0, r0, r0, lsl #1
    b144:	cmp.w	r0, #8388608	; 0x800000
    b148:	bcc.n	b172 <__addsf3+0xa6>
    b14a:	cmp.w	r0, #16777216	; 0x1000000
    b14e:	bcc.n	b15e <__addsf3+0x92>
    b150:	lsrs	r0, r0, #1
    b152:	mov.w	r1, r1, rrx
    b156:	add.w	r2, r2, #1
    b15a:	cmp	r2, #254	; 0xfe
    b15c:	bcs.n	b202 <__addsf3+0x136>
    b15e:	cmp.w	r1, #2147483648	; 0x80000000
    b162:	adc.w	r0, r0, r2, lsl #23
    b166:	it	eq
    b168:	biceq.w	r0, r0, #1
    b16c:	orr.w	r0, r0, r3
    b170:	bx	lr
    b172:	lsls	r1, r1, #1
    b174:	adc.w	r0, r0, r0
    b178:	tst.w	r0, #8388608	; 0x800000
    b17c:	sub.w	r2, r2, #1
    b180:	bne.n	b15e <__addsf3+0x92>
    b182:	clz	ip, r0
    b186:	sub.w	ip, ip, #8
    b18a:	subs.w	r2, r2, ip
    b18e:	lsl.w	r0, r0, ip
    b192:	itet	ge
    b194:	addge.w	r0, r0, r2, lsl #23
    b198:	neglt	r2, r2
    b19a:	orrge	r0, r3
    b19c:	itt	lt
    b19e:	lsrlt	r0, r2
    b1a0:	orrlt	r0, r3
    b1a2:	bx	lr
    b1a4:	teq	r2, #0
    b1a8:	eor.w	r1, r1, #8388608	; 0x800000
    b1ac:	itte	eq
    b1ae:	eoreq.w	r0, r0, #8388608	; 0x800000
    b1b2:	addeq	r2, #1
    b1b4:	subne	r3, #1
    b1b6:	b.n	b124 <__addsf3+0x58>
    b1b8:	mov.w	r3, r1, lsl #1
    b1bc:	mvns.w	ip, r2, asr #24
    b1c0:	it	ne
    b1c2:	mvnsne.w	ip, r3, asr #24
    b1c6:	beq.n	b20c <__addsf3+0x140>
    b1c8:	teq	r2, r3
    b1cc:	beq.n	b1d8 <__addsf3+0x10c>
    b1ce:	teq	r2, #0
    b1d2:	it	eq
    b1d4:	moveq	r0, r1
    b1d6:	bx	lr
    b1d8:	teq	r0, r1
    b1dc:	itt	ne
    b1de:	movne	r0, #0
    b1e0:	bxne	lr
    b1e2:	tst.w	r2, #4278190080	; 0xff000000
    b1e6:	bne.n	b1f2 <__addsf3+0x126>
    b1e8:	lsls	r0, r0, #1
    b1ea:	it	cs
    b1ec:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    b1f0:	bx	lr
    b1f2:	adds.w	r2, r2, #33554432	; 0x2000000
    b1f6:	itt	cc
    b1f8:	addcc.w	r0, r0, #8388608	; 0x800000
    b1fc:	bxcc	lr
    b1fe:	and.w	r3, r0, #2147483648	; 0x80000000
    b202:	orr.w	r0, r3, #2130706432	; 0x7f000000
    b206:	orr.w	r0, r0, #8388608	; 0x800000
    b20a:	bx	lr
    b20c:	mvns.w	r2, r2, asr #24
    b210:	itet	ne
    b212:	movne	r0, r1
    b214:	mvnseq.w	r3, r3, asr #24
    b218:	movne	r1, r0
    b21a:	lsls	r2, r0, #9
    b21c:	itte	eq
    b21e:	movseq.w	r3, r1, lsl #9
    b222:	teqeq	r0, r1
    b226:	orrne.w	r0, r0, #4194304	; 0x400000
    b22a:	bx	lr

0000b22c <__aeabi_ui2f>:
    b22c:	mov.w	r3, #0
    b230:	b.n	b23c <__aeabi_i2f+0x8>
    b232:	nop

0000b234 <__aeabi_i2f>:
    b234:	ands.w	r3, r0, #2147483648	; 0x80000000
    b238:	it	mi
    b23a:	negmi	r0, r0
    b23c:	movs.w	ip, r0
    b240:	it	eq
    b242:	bxeq	lr
    b244:	orr.w	r3, r3, #1258291200	; 0x4b000000
    b248:	mov	r1, r0
    b24a:	mov.w	r0, #0
    b24e:	b.n	b28a <__aeabi_l2f+0x2a>

0000b250 <__aeabi_ul2f>:
    b250:	orrs.w	r2, r0, r1
    b254:	it	eq
    b256:	bxeq	lr
    b258:	mov.w	r3, #0
    b25c:	b.n	b274 <__aeabi_l2f+0x14>
    b25e:	nop

0000b260 <__aeabi_l2f>:
    b260:	orrs.w	r2, r0, r1
    b264:	it	eq
    b266:	bxeq	lr
    b268:	ands.w	r3, r1, #2147483648	; 0x80000000
    b26c:	bpl.n	b274 <__aeabi_l2f+0x14>
    b26e:	negs	r0, r0
    b270:	sbc.w	r1, r1, r1, lsl #1
    b274:	movs.w	ip, r1
    b278:	ittt	eq
    b27a:	moveq	ip, r0
    b27c:	moveq	r1, r0
    b27e:	moveq	r0, #0
    b280:	orr.w	r3, r3, #1526726656	; 0x5b000000
    b284:	it	eq
    b286:	subeq.w	r3, r3, #268435456	; 0x10000000
    b28a:	sub.w	r3, r3, #8388608	; 0x800000
    b28e:	clz	r2, ip
    b292:	subs	r2, #8
    b294:	sub.w	r3, r3, r2, lsl #23
    b298:	blt.n	b2bc <__aeabi_l2f+0x5c>
    b29a:	lsl.w	ip, r1, r2
    b29e:	add	r3, ip
    b2a0:	lsl.w	ip, r0, r2
    b2a4:	rsb	r2, r2, #32
    b2a8:	cmp.w	ip, #2147483648	; 0x80000000
    b2ac:	lsr.w	r2, r0, r2
    b2b0:	adc.w	r0, r3, r2
    b2b4:	it	eq
    b2b6:	biceq.w	r0, r0, #1
    b2ba:	bx	lr
    b2bc:	add.w	r2, r2, #32
    b2c0:	lsl.w	ip, r1, r2
    b2c4:	rsb	r2, r2, #32
    b2c8:	orrs.w	r0, r0, ip, lsl #1
    b2cc:	lsr.w	r2, r1, r2
    b2d0:	adc.w	r0, r3, r2
    b2d4:	it	eq
    b2d6:	biceq.w	r0, r0, ip, lsr #31
    b2da:	bx	lr

0000b2dc <__aeabi_uldivmod>:
    b2dc:	cbnz	r3, b2f4 <__aeabi_uldivmod+0x18>
    b2de:	cbnz	r2, b2f4 <__aeabi_uldivmod+0x18>
    b2e0:	cmp	r1, #0
    b2e2:	it	eq
    b2e4:	cmpeq	r0, #0
    b2e6:	itt	ne
    b2e8:	movne.w	r1, #4294967295
    b2ec:	movne.w	r0, #4294967295
    b2f0:	b.w	b660 <__aeabi_idiv0>
    b2f4:	sub.w	ip, sp, #8
    b2f8:	strd	ip, lr, [sp, #-16]!
    b2fc:	bl	b37c <__udivmoddi4>
    b300:	ldr.w	lr, [sp, #4]
    b304:	ldrd	r2, r3, [sp, #8]
    b308:	add	sp, #16
    b30a:	bx	lr

0000b30c <__aeabi_f2lz>:
    b30c:	vmov	s15, r0
    b310:	vcmpe.f32	s15, #0.0
    b314:	vmrs	APSR_nzcv, fpscr
    b318:	bmi.n	b31e <__aeabi_f2lz+0x12>
    b31a:	b.w	b330 <__aeabi_f2ulz>
    b31e:	push	{r3, lr}
    b320:	eor.w	r0, r0, #2147483648	; 0x80000000
    b324:	bl	b330 <__aeabi_f2ulz>
    b328:	negs	r0, r0
    b32a:	sbc.w	r1, r1, r1, lsl #1
    b32e:	pop	{r3, pc}

0000b330 <__aeabi_f2ulz>:
    b330:	push	{r4, r6, r7, lr}
    b332:	bl	a988 <__aeabi_f2d>
    b336:	movs	r2, #0
    b338:	ldr	r3, [pc, #56]	; (b374 <__aeabi_f2ulz+0x44>)
    b33a:	mov	r6, r0
    b33c:	mov	r7, r1
    b33e:	bl	aa30 <__aeabi_dmul>
    b342:	bl	afe0 <__aeabi_d2uiz>
    b346:	mov	r4, r0
    b348:	bl	a944 <__aeabi_ui2d>
    b34c:	movs	r2, #0
    b34e:	ldr	r3, [pc, #40]	; (b378 <__aeabi_f2ulz+0x48>)
    b350:	bl	aa30 <__aeabi_dmul>
    b354:	mov	r2, r0
    b356:	mov	r3, r1
    b358:	mov	r0, r6
    b35a:	mov	r1, r7
    b35c:	bl	a6c8 <__aeabi_dsub>
    b360:	bl	afe0 <__aeabi_d2uiz>
    b364:	mov	r3, r4
    b366:	movs	r2, #0
    b368:	orr.w	r2, r2, r0
    b36c:	mov	r0, r2
    b36e:	mov	r1, r3
    b370:	pop	{r4, r6, r7, pc}
    b372:	nop
    b374:	.word	0x3df00000
    b378:	.word	0x41f00000

0000b37c <__udivmoddi4>:
    b37c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b380:	mov	ip, r1
    b382:	mov	r6, r1
    b384:	mov	r4, r0
    b386:	ldr	r5, [sp, #32]
    b388:	cmp	r3, #0
    b38a:	bne.n	b42e <__udivmoddi4+0xb2>
    b38c:	cmp	r2, r1
    b38e:	mov	r7, r2
    b390:	bls.n	b46c <__udivmoddi4+0xf0>
    b392:	clz	lr, r2
    b396:	cmp.w	lr, #0
    b39a:	beq.n	b3b4 <__udivmoddi4+0x38>
    b39c:	rsb	r4, lr, #32
    b3a0:	lsr.w	r4, r0, r4
    b3a4:	lsl.w	r6, r1, lr
    b3a8:	orr.w	ip, r4, r6
    b3ac:	lsl.w	r7, r2, lr
    b3b0:	lsl.w	r4, r0, lr
    b3b4:	mov.w	r9, r7, lsr #16
    b3b8:	lsrs	r2, r4, #16
    b3ba:	udiv	r0, ip, r9
    b3be:	uxth.w	r8, r7
    b3c2:	mls	r6, r9, r0, ip
    b3c6:	orr.w	r6, r2, r6, lsl #16
    b3ca:	mul.w	r3, r0, r8
    b3ce:	cmp	r3, r6
    b3d0:	bls.n	b3e6 <__udivmoddi4+0x6a>
    b3d2:	adds	r6, r6, r7
    b3d4:	add.w	r2, r0, #4294967295
    b3d8:	bcs.w	b620 <__udivmoddi4+0x2a4>
    b3dc:	cmp	r3, r6
    b3de:	bls.w	b620 <__udivmoddi4+0x2a4>
    b3e2:	subs	r0, #2
    b3e4:	add	r6, r7
    b3e6:	subs	r6, r6, r3
    b3e8:	uxth	r2, r4
    b3ea:	udiv	r3, r6, r9
    b3ee:	mls	r6, r9, r3, r6
    b3f2:	orr.w	r4, r2, r6, lsl #16
    b3f6:	mul.w	r8, r3, r8
    b3fa:	cmp	r8, r4
    b3fc:	bls.n	b412 <__udivmoddi4+0x96>
    b3fe:	adds	r4, r4, r7
    b400:	add.w	r2, r3, #4294967295
    b404:	bcs.w	b61c <__udivmoddi4+0x2a0>
    b408:	cmp	r8, r4
    b40a:	bls.w	b61c <__udivmoddi4+0x2a0>
    b40e:	subs	r3, #2
    b410:	add	r4, r7
    b412:	rsb	r4, r8, r4
    b416:	orr.w	r0, r3, r0, lsl #16
    b41a:	movs	r1, #0
    b41c:	cmp	r5, #0
    b41e:	beq.n	b4e6 <__udivmoddi4+0x16a>
    b420:	lsr.w	r4, r4, lr
    b424:	movs	r3, #0
    b426:	str	r4, [r5, #0]
    b428:	str	r3, [r5, #4]
    b42a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b42e:	cmp	r3, r1
    b430:	bls.n	b442 <__udivmoddi4+0xc6>
    b432:	cmp	r5, #0
    b434:	beq.n	b4e2 <__udivmoddi4+0x166>
    b436:	movs	r1, #0
    b438:	stmia.w	r5, {r0, r6}
    b43c:	mov	r0, r1
    b43e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b442:	clz	r1, r3
    b446:	cmp	r1, #0
    b448:	bne.w	b56c <__udivmoddi4+0x1f0>
    b44c:	cmp	r3, r6
    b44e:	bcc.n	b456 <__udivmoddi4+0xda>
    b450:	cmp	r2, r0
    b452:	bhi.w	b646 <__udivmoddi4+0x2ca>
    b456:	subs	r4, r0, r2
    b458:	sbc.w	r6, r6, r3
    b45c:	movs	r0, #1
    b45e:	mov	ip, r6
    b460:	cmp	r5, #0
    b462:	beq.n	b4e6 <__udivmoddi4+0x16a>
    b464:	stmia.w	r5, {r4, ip}
    b468:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b46c:	cbnz	r2, b474 <__udivmoddi4+0xf8>
    b46e:	movs	r7, #1
    b470:	udiv	r7, r7, r2
    b474:	clz	lr, r7
    b478:	cmp.w	lr, #0
    b47c:	bne.n	b4ea <__udivmoddi4+0x16e>
    b47e:	subs	r3, r6, r7
    b480:	mov.w	r8, r7, lsr #16
    b484:	uxth.w	ip, r7
    b488:	movs	r1, #1
    b48a:	udiv	r0, r3, r8
    b48e:	lsrs	r2, r4, #16
    b490:	mls	r6, r8, r0, r3
    b494:	orr.w	r6, r2, r6, lsl #16
    b498:	mul.w	r3, ip, r0
    b49c:	cmp	r3, r6
    b49e:	bls.n	b4b0 <__udivmoddi4+0x134>
    b4a0:	adds	r6, r6, r7
    b4a2:	add.w	r2, r0, #4294967295
    b4a6:	bcs.n	b4ae <__udivmoddi4+0x132>
    b4a8:	cmp	r3, r6
    b4aa:	bhi.w	b64a <__udivmoddi4+0x2ce>
    b4ae:	mov	r0, r2
    b4b0:	subs	r6, r6, r3
    b4b2:	uxth	r2, r4
    b4b4:	udiv	r3, r6, r8
    b4b8:	mls	r6, r8, r3, r6
    b4bc:	orr.w	r4, r2, r6, lsl #16
    b4c0:	mul.w	ip, ip, r3
    b4c4:	cmp	ip, r4
    b4c6:	bls.n	b4d8 <__udivmoddi4+0x15c>
    b4c8:	adds	r4, r4, r7
    b4ca:	add.w	r2, r3, #4294967295
    b4ce:	bcs.n	b4d6 <__udivmoddi4+0x15a>
    b4d0:	cmp	ip, r4
    b4d2:	bhi.w	b640 <__udivmoddi4+0x2c4>
    b4d6:	mov	r3, r2
    b4d8:	rsb	r4, ip, r4
    b4dc:	orr.w	r0, r3, r0, lsl #16
    b4e0:	b.n	b41c <__udivmoddi4+0xa0>
    b4e2:	mov	r1, r5
    b4e4:	mov	r0, r5
    b4e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4ea:	rsb	r1, lr, #32
    b4ee:	lsl.w	r3, r6, lr
    b4f2:	lsl.w	r7, r7, lr
    b4f6:	lsr.w	r9, r0, r1
    b4fa:	mov.w	r8, r7, lsr #16
    b4fe:	lsrs	r6, r1
    b500:	orr.w	r9, r9, r3
    b504:	udiv	sl, r6, r8
    b508:	mov.w	r4, r9, lsr #16
    b50c:	mls	r6, r8, sl, r6
    b510:	uxth.w	ip, r7
    b514:	orr.w	r3, r4, r6, lsl #16
    b518:	mul.w	r2, sl, ip
    b51c:	cmp	r2, r3
    b51e:	lsl.w	r4, r0, lr
    b522:	bls.n	b53a <__udivmoddi4+0x1be>
    b524:	adds	r3, r3, r7
    b526:	add.w	r1, sl, #4294967295
    b52a:	bcs.w	b63c <__udivmoddi4+0x2c0>
    b52e:	cmp	r2, r3
    b530:	bls.w	b63c <__udivmoddi4+0x2c0>
    b534:	sub.w	sl, sl, #2
    b538:	add	r3, r7
    b53a:	subs	r3, r3, r2
    b53c:	uxth.w	r9, r9
    b540:	udiv	r1, r3, r8
    b544:	mls	r3, r8, r1, r3
    b548:	orr.w	r3, r9, r3, lsl #16
    b54c:	mul.w	r6, r1, ip
    b550:	cmp	r6, r3
    b552:	bls.n	b564 <__udivmoddi4+0x1e8>
    b554:	adds	r3, r3, r7
    b556:	add.w	r2, r1, #4294967295
    b55a:	bcs.n	b634 <__udivmoddi4+0x2b8>
    b55c:	cmp	r6, r3
    b55e:	bls.n	b634 <__udivmoddi4+0x2b8>
    b560:	subs	r1, #2
    b562:	add	r3, r7
    b564:	subs	r3, r3, r6
    b566:	orr.w	r1, r1, sl, lsl #16
    b56a:	b.n	b48a <__udivmoddi4+0x10e>
    b56c:	rsb	lr, r1, #32
    b570:	lsr.w	r4, r2, lr
    b574:	lsls	r3, r1
    b576:	orrs	r3, r4
    b578:	lsr.w	r7, r0, lr
    b57c:	lsl.w	r4, r6, r1
    b580:	mov.w	ip, r3, lsr #16
    b584:	lsr.w	r6, r6, lr
    b588:	orrs	r4, r7
    b58a:	udiv	r9, r6, ip
    b58e:	lsrs	r7, r4, #16
    b590:	mls	r6, ip, r9, r6
    b594:	uxth.w	r8, r3
    b598:	orr.w	r6, r7, r6, lsl #16
    b59c:	mul.w	r7, r9, r8
    b5a0:	cmp	r7, r6
    b5a2:	lsl.w	r2, r2, r1
    b5a6:	lsl.w	sl, r0, r1
    b5aa:	bls.n	b5be <__udivmoddi4+0x242>
    b5ac:	adds	r6, r6, r3
    b5ae:	add.w	r0, r9, #4294967295
    b5b2:	bcs.n	b638 <__udivmoddi4+0x2bc>
    b5b4:	cmp	r7, r6
    b5b6:	bls.n	b638 <__udivmoddi4+0x2bc>
    b5b8:	sub.w	r9, r9, #2
    b5bc:	add	r6, r3
    b5be:	subs	r6, r6, r7
    b5c0:	uxth	r0, r4
    b5c2:	udiv	r4, r6, ip
    b5c6:	mls	r6, ip, r4, r6
    b5ca:	orr.w	r7, r0, r6, lsl #16
    b5ce:	mul.w	r8, r4, r8
    b5d2:	cmp	r8, r7
    b5d4:	bls.n	b5e6 <__udivmoddi4+0x26a>
    b5d6:	adds	r7, r7, r3
    b5d8:	add.w	r0, r4, #4294967295
    b5dc:	bcs.n	b630 <__udivmoddi4+0x2b4>
    b5de:	cmp	r8, r7
    b5e0:	bls.n	b630 <__udivmoddi4+0x2b4>
    b5e2:	subs	r4, #2
    b5e4:	add	r7, r3
    b5e6:	orr.w	r0, r4, r9, lsl #16
    b5ea:	rsb	r7, r8, r7
    b5ee:	umull	r8, r9, r0, r2
    b5f2:	cmp	r7, r9
    b5f4:	mov	r4, r8
    b5f6:	mov	r6, r9
    b5f8:	bcc.n	b624 <__udivmoddi4+0x2a8>
    b5fa:	beq.n	b650 <__udivmoddi4+0x2d4>
    b5fc:	cbz	r5, b658 <__udivmoddi4+0x2dc>
    b5fe:	subs.w	r3, sl, r4
    b602:	sbc.w	r7, r7, r6
    b606:	lsl.w	lr, r7, lr
    b60a:	lsrs	r3, r1
    b60c:	lsrs	r7, r1
    b60e:	orr.w	r3, lr, r3
    b612:	stmia.w	r5, {r3, r7}
    b616:	movs	r1, #0
    b618:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b61c:	mov	r3, r2
    b61e:	b.n	b412 <__udivmoddi4+0x96>
    b620:	mov	r0, r2
    b622:	b.n	b3e6 <__udivmoddi4+0x6a>
    b624:	subs.w	r4, r8, r2
    b628:	sbc.w	r6, r9, r3
    b62c:	subs	r0, #1
    b62e:	b.n	b5fc <__udivmoddi4+0x280>
    b630:	mov	r4, r0
    b632:	b.n	b5e6 <__udivmoddi4+0x26a>
    b634:	mov	r1, r2
    b636:	b.n	b564 <__udivmoddi4+0x1e8>
    b638:	mov	r9, r0
    b63a:	b.n	b5be <__udivmoddi4+0x242>
    b63c:	mov	sl, r1
    b63e:	b.n	b53a <__udivmoddi4+0x1be>
    b640:	subs	r3, #2
    b642:	add	r4, r7
    b644:	b.n	b4d8 <__udivmoddi4+0x15c>
    b646:	mov	r0, r1
    b648:	b.n	b460 <__udivmoddi4+0xe4>
    b64a:	subs	r0, #2
    b64c:	add	r6, r7
    b64e:	b.n	b4b0 <__udivmoddi4+0x134>
    b650:	cmp	sl, r8
    b652:	bcc.n	b624 <__udivmoddi4+0x2a8>
    b654:	mov	r6, r7
    b656:	b.n	b5fc <__udivmoddi4+0x280>
    b658:	mov	r1, r5
    b65a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b65e:	nop

0000b660 <__aeabi_idiv0>:
    b660:	bx	lr
    b662:	nop

0000b664 <__cxa_atexit>:
    b664:	mov	r3, r2
    b666:	mov	r2, r1
    b668:	mov	r1, r0
    b66a:	movs	r0, #2
    b66c:	b.w	fde8 <__register_exitproc>

0000b670 <__errno>:
    b670:	ldr	r3, [pc, #4]	; (b678 <__errno+0x8>)
    b672:	ldr	r0, [r3, #0]
    b674:	bx	lr
    b676:	nop
    b678:	.word	0x20013fc8

0000b67c <__libc_init_array>:
    b67c:	push	{r4, r5, r6, lr}
    b67e:	ldr	r6, [pc, #60]	; (b6bc <__libc_init_array+0x40>)
    b680:	ldr	r5, [pc, #60]	; (b6c0 <__libc_init_array+0x44>)
    b682:	subs	r6, r6, r5
    b684:	asrs	r6, r6, #2
    b686:	it	ne
    b688:	movne	r4, #0
    b68a:	beq.n	b698 <__libc_init_array+0x1c>
    b68c:	adds	r4, #1
    b68e:	ldr.w	r3, [r5], #4
    b692:	blx	r3
    b694:	cmp	r6, r4
    b696:	bne.n	b68c <__libc_init_array+0x10>
    b698:	ldr	r6, [pc, #40]	; (b6c4 <__libc_init_array+0x48>)
    b69a:	ldr	r5, [pc, #44]	; (b6c8 <__libc_init_array+0x4c>)
    b69c:	subs	r6, r6, r5
    b69e:	bl	138ec <_init>
    b6a2:	asrs	r6, r6, #2
    b6a4:	it	ne
    b6a6:	movne	r4, #0
    b6a8:	beq.n	b6b8 <__libc_init_array+0x3c>
    b6aa:	adds	r4, #1
    b6ac:	ldr.w	r3, [r5], #4
    b6b0:	blx	r3
    b6b2:	cmp	r6, r4
    b6b4:	bne.n	b6aa <__libc_init_array+0x2e>
    b6b6:	pop	{r4, r5, r6, pc}
    b6b8:	pop	{r4, r5, r6, pc}
    b6ba:	nop
    b6bc:	.word	0x000138f8
    b6c0:	.word	0x000138f8
    b6c4:	.word	0x0001394c
    b6c8:	.word	0x000138f8

0000b6cc <__get_current_locale>:
    b6cc:	ldr	r2, [pc, #12]	; (b6dc <__get_current_locale+0x10>)
    b6ce:	ldr	r3, [pc, #16]	; (b6e0 <__get_current_locale+0x14>)
    b6d0:	ldr	r2, [r2, #0]
    b6d2:	ldr	r0, [r2, #52]	; 0x34
    b6d4:	cmp	r0, #0
    b6d6:	it	eq
    b6d8:	moveq	r0, r3
    b6da:	bx	lr
    b6dc:	.word	0x20013fc8
    b6e0:	.word	0x20013fcc

0000b6e4 <__locale_mb_cur_max>:
    b6e4:	ldr	r3, [pc, #16]	; (b6f8 <__locale_mb_cur_max+0x14>)
    b6e6:	ldr	r2, [pc, #20]	; (b6fc <__locale_mb_cur_max+0x18>)
    b6e8:	ldr	r3, [r3, #0]
    b6ea:	ldr	r3, [r3, #52]	; 0x34
    b6ec:	cmp	r3, #0
    b6ee:	it	eq
    b6f0:	moveq	r3, r2
    b6f2:	ldrb.w	r0, [r3, #296]	; 0x128
    b6f6:	bx	lr
    b6f8:	.word	0x20013fc8
    b6fc:	.word	0x20013fcc

0000b700 <__locale_ctype_ptr_l>:
    b700:	ldr.w	r0, [r0, #236]	; 0xec
    b704:	bx	lr
    b706:	nop

0000b708 <__locale_ctype_ptr>:
    b708:	push	{r3, lr}
    b70a:	ldr	r3, [pc, #12]	; (b718 <__locale_ctype_ptr+0x10>)
    b70c:	ldr	r0, [r3, #0]
    b70e:	bl	b6cc <__get_current_locale>
    b712:	ldr.w	r0, [r0, #236]	; 0xec
    b716:	pop	{r3, pc}
    b718:	.word	0x20013fc8

0000b71c <malloc>:
    b71c:	ldr	r3, [pc, #8]	; (b728 <malloc+0xc>)
    b71e:	mov	r1, r0
    b720:	ldr	r0, [r3, #0]
    b722:	b.w	b73c <_malloc_r>
    b726:	nop
    b728:	.word	0x20013fc8

0000b72c <free>:
    b72c:	ldr	r3, [pc, #8]	; (b738 <free+0xc>)
    b72e:	mov	r1, r0
    b730:	ldr	r0, [r3, #0]
    b732:	b.w	10ed0 <_free_r>
    b736:	nop
    b738:	.word	0x20013fc8

0000b73c <_malloc_r>:
    b73c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b740:	add.w	r5, r1, #11
    b744:	cmp	r5, #22
    b746:	sub	sp, #12
    b748:	mov	r6, r0
    b74a:	bls.w	b88c <_malloc_r+0x150>
    b74e:	bics.w	r5, r5, #7
    b752:	bmi.w	b8d4 <_malloc_r+0x198>
    b756:	cmp	r1, r5
    b758:	bhi.w	b8d4 <_malloc_r+0x198>
    b75c:	bl	bf48 <__malloc_lock>
    b760:	cmp.w	r5, #504	; 0x1f8
    b764:	bcc.w	bca0 <_malloc_r+0x564>
    b768:	lsrs	r3, r5, #9
    b76a:	beq.w	b8e2 <_malloc_r+0x1a6>
    b76e:	cmp	r3, #4
    b770:	bhi.w	ba7a <_malloc_r+0x33e>
    b774:	lsrs	r0, r5, #6
    b776:	add.w	lr, r0, #57	; 0x39
    b77a:	mov.w	r3, lr, lsl #1
    b77e:	adds	r0, #56	; 0x38
    b780:	ldr	r7, [pc, #784]	; (ba94 <_malloc_r+0x358>)
    b782:	add.w	r3, r7, r3, lsl #2
    b786:	sub.w	r1, r3, #8
    b78a:	ldr	r4, [r3, #4]
    b78c:	cmp	r1, r4
    b78e:	bne.n	b7a0 <_malloc_r+0x64>
    b790:	b.n	b8ec <_malloc_r+0x1b0>
    b792:	cmp	r2, #0
    b794:	bge.w	b8f0 <_malloc_r+0x1b4>
    b798:	ldr	r4, [r4, #12]
    b79a:	cmp	r1, r4
    b79c:	beq.w	b8ec <_malloc_r+0x1b0>
    b7a0:	ldr	r3, [r4, #4]
    b7a2:	bic.w	r3, r3, #3
    b7a6:	subs	r2, r3, r5
    b7a8:	cmp	r2, #15
    b7aa:	ble.n	b792 <_malloc_r+0x56>
    b7ac:	ldr	r1, [pc, #740]	; (ba94 <_malloc_r+0x358>)
    b7ae:	ldr	r4, [r7, #16]
    b7b0:	add.w	lr, r1, #8
    b7b4:	cmp	r4, lr
    b7b6:	beq.w	bb20 <_malloc_r+0x3e4>
    b7ba:	ldr	r3, [r4, #4]
    b7bc:	bic.w	r3, r3, #3
    b7c0:	subs	r2, r3, r5
    b7c2:	cmp	r2, #15
    b7c4:	bgt.w	bafa <_malloc_r+0x3be>
    b7c8:	cmp	r2, #0
    b7ca:	str.w	lr, [r1, #20]
    b7ce:	str.w	lr, [r1, #16]
    b7d2:	bge.w	b912 <_malloc_r+0x1d6>
    b7d6:	cmp.w	r3, #512	; 0x200
    b7da:	bcs.w	baac <_malloc_r+0x370>
    b7de:	lsrs	r3, r3, #3
    b7e0:	add.w	ip, r3, #1
    b7e4:	movs	r2, #1
    b7e6:	asrs	r3, r3, #2
    b7e8:	lsl.w	r3, r2, r3
    b7ec:	ldr	r2, [r1, #4]
    b7ee:	ldr.w	r8, [r1, ip, lsl #3]
    b7f2:	str.w	r8, [r4, #8]
    b7f6:	add.w	r9, r1, ip, lsl #3
    b7fa:	orrs	r2, r3
    b7fc:	sub.w	r3, r9, #8
    b800:	str	r3, [r4, #12]
    b802:	str	r2, [r1, #4]
    b804:	str.w	r4, [r1, ip, lsl #3]
    b808:	str.w	r4, [r8, #12]
    b80c:	asrs	r3, r0, #2
    b80e:	movs	r4, #1
    b810:	lsls	r4, r3
    b812:	cmp	r4, r2
    b814:	bhi.w	b92c <_malloc_r+0x1f0>
    b818:	tst	r4, r2
    b81a:	bne.n	b82a <_malloc_r+0xee>
    b81c:	bic.w	r0, r0, #3
    b820:	lsls	r4, r4, #1
    b822:	tst	r4, r2
    b824:	add.w	r0, r0, #4
    b828:	beq.n	b820 <_malloc_r+0xe4>
    b82a:	add.w	r9, r7, r0, lsl #3
    b82e:	mov	ip, r9
    b830:	mov	r8, r0
    b832:	ldr.w	r1, [ip, #12]
    b836:	cmp	ip, r1
    b838:	bne.n	b84a <_malloc_r+0x10e>
    b83a:	b.n	bb24 <_malloc_r+0x3e8>
    b83c:	cmp	r2, #0
    b83e:	bge.w	bb44 <_malloc_r+0x408>
    b842:	ldr	r1, [r1, #12]
    b844:	cmp	ip, r1
    b846:	beq.w	bb24 <_malloc_r+0x3e8>
    b84a:	ldr	r3, [r1, #4]
    b84c:	bic.w	r3, r3, #3
    b850:	subs	r2, r3, r5
    b852:	cmp	r2, #15
    b854:	ble.n	b83c <_malloc_r+0x100>
    b856:	mov	r4, r1
    b858:	ldr.w	ip, [r1, #12]
    b85c:	ldr.w	r8, [r4, #8]!
    b860:	adds	r3, r1, r5
    b862:	orr.w	r5, r5, #1
    b866:	str	r5, [r1, #4]
    b868:	orr.w	r1, r2, #1
    b86c:	str.w	ip, [r8, #12]
    b870:	mov	r0, r6
    b872:	str.w	r8, [ip, #8]
    b876:	str	r3, [r7, #20]
    b878:	str	r3, [r7, #16]
    b87a:	str.w	lr, [r3, #12]
    b87e:	str.w	lr, [r3, #8]
    b882:	str	r1, [r3, #4]
    b884:	str	r2, [r3, r2]
    b886:	bl	bf4c <__malloc_unlock>
    b88a:	b.n	b8cc <_malloc_r+0x190>
    b88c:	cmp	r1, #16
    b88e:	bhi.n	b8d4 <_malloc_r+0x198>
    b890:	bl	bf48 <__malloc_lock>
    b894:	movs	r5, #16
    b896:	movs	r3, #6
    b898:	movs	r0, #2
    b89a:	ldr	r7, [pc, #504]	; (ba94 <_malloc_r+0x358>)
    b89c:	add.w	r3, r7, r3, lsl #2
    b8a0:	sub.w	r2, r3, #8
    b8a4:	ldr	r4, [r3, #4]
    b8a6:	cmp	r4, r2
    b8a8:	beq.w	bb36 <_malloc_r+0x3fa>
    b8ac:	ldr	r3, [r4, #4]
    b8ae:	ldr	r1, [r4, #12]
    b8b0:	ldr	r5, [r4, #8]
    b8b2:	bic.w	r3, r3, #3
    b8b6:	add	r3, r4
    b8b8:	mov	r0, r6
    b8ba:	ldr	r2, [r3, #4]
    b8bc:	str	r1, [r5, #12]
    b8be:	orr.w	r2, r2, #1
    b8c2:	str	r5, [r1, #8]
    b8c4:	str	r2, [r3, #4]
    b8c6:	bl	bf4c <__malloc_unlock>
    b8ca:	adds	r4, #8
    b8cc:	mov	r0, r4
    b8ce:	add	sp, #12
    b8d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8d4:	movs	r4, #0
    b8d6:	movs	r3, #12
    b8d8:	mov	r0, r4
    b8da:	str	r3, [r6, #0]
    b8dc:	add	sp, #12
    b8de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8e2:	movs	r3, #128	; 0x80
    b8e4:	mov.w	lr, #64	; 0x40
    b8e8:	movs	r0, #63	; 0x3f
    b8ea:	b.n	b780 <_malloc_r+0x44>
    b8ec:	mov	r0, lr
    b8ee:	b.n	b7ac <_malloc_r+0x70>
    b8f0:	add	r3, r4
    b8f2:	ldr	r1, [r4, #12]
    b8f4:	ldr	r2, [r3, #4]
    b8f6:	ldr	r5, [r4, #8]
    b8f8:	orr.w	r2, r2, #1
    b8fc:	str	r1, [r5, #12]
    b8fe:	mov	r0, r6
    b900:	str	r5, [r1, #8]
    b902:	str	r2, [r3, #4]
    b904:	bl	bf4c <__malloc_unlock>
    b908:	adds	r4, #8
    b90a:	mov	r0, r4
    b90c:	add	sp, #12
    b90e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b912:	add	r3, r4
    b914:	mov	r0, r6
    b916:	ldr	r2, [r3, #4]
    b918:	orr.w	r2, r2, #1
    b91c:	str	r2, [r3, #4]
    b91e:	bl	bf4c <__malloc_unlock>
    b922:	adds	r4, #8
    b924:	mov	r0, r4
    b926:	add	sp, #12
    b928:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b92c:	ldr	r4, [r7, #8]
    b92e:	ldr	r3, [r4, #4]
    b930:	bic.w	r8, r3, #3
    b934:	cmp	r8, r5
    b936:	bcc.n	b942 <_malloc_r+0x206>
    b938:	rsb	r3, r5, r8
    b93c:	cmp	r3, #15
    b93e:	bgt.w	ba5a <_malloc_r+0x31e>
    b942:	ldr	r3, [pc, #340]	; (ba98 <_malloc_r+0x35c>)
    b944:	ldr.w	r9, [pc, #352]	; baa8 <_malloc_r+0x36c>
    b948:	ldr	r2, [r3, #0]
    b94a:	ldr.w	r3, [r9]
    b94e:	adds	r3, #1
    b950:	add	r2, r5
    b952:	add.w	sl, r4, r8
    b956:	beq.w	bc1a <_malloc_r+0x4de>
    b95a:	add.w	r2, r2, #4096	; 0x1000
    b95e:	adds	r2, #15
    b960:	bic.w	r2, r2, #4080	; 0xff0
    b964:	bic.w	r2, r2, #15
    b968:	mov	r1, r2
    b96a:	mov	r0, r6
    b96c:	str	r2, [sp, #4]
    b96e:	bl	c330 <_sbrk_r>
    b972:	cmp.w	r0, #4294967295
    b976:	mov	fp, r0
    b978:	ldr	r2, [sp, #4]
    b97a:	beq.w	bc2e <_malloc_r+0x4f2>
    b97e:	cmp	sl, r0
    b980:	bhi.w	bb7c <_malloc_r+0x440>
    b984:	ldr	r3, [pc, #276]	; (ba9c <_malloc_r+0x360>)
    b986:	ldr	r1, [r3, #0]
    b988:	cmp	sl, fp
    b98a:	add	r1, r2
    b98c:	str	r1, [r3, #0]
    b98e:	beq.w	bc38 <_malloc_r+0x4fc>
    b992:	ldr.w	r0, [r9]
    b996:	ldr.w	lr, [pc, #272]	; baa8 <_malloc_r+0x36c>
    b99a:	adds	r0, #1
    b99c:	ittet	ne
    b99e:	rsbne	sl, sl, fp
    b9a2:	addne	r1, sl
    b9a4:	streq.w	fp, [lr]
    b9a8:	strne	r1, [r3, #0]
    b9aa:	ands.w	r1, fp, #7
    b9ae:	beq.w	bbe0 <_malloc_r+0x4a4>
    b9b2:	rsb	r0, r1, #8
    b9b6:	rsb	r1, r1, #4096	; 0x1000
    b9ba:	add	fp, r0
    b9bc:	adds	r1, #8
    b9be:	add	r2, fp
    b9c0:	ubfx	r2, r2, #0, #12
    b9c4:	rsb	r9, r2, r1
    b9c8:	mov	r1, r9
    b9ca:	mov	r0, r6
    b9cc:	str	r3, [sp, #4]
    b9ce:	bl	c330 <_sbrk_r>
    b9d2:	adds	r3, r0, #1
    b9d4:	ldr	r3, [sp, #4]
    b9d6:	beq.w	bc58 <_malloc_r+0x51c>
    b9da:	rsb	r2, fp, r0
    b9de:	add	r2, r9
    b9e0:	orr.w	r2, r2, #1
    b9e4:	ldr	r1, [r3, #0]
    b9e6:	str.w	fp, [r7, #8]
    b9ea:	add	r1, r9
    b9ec:	cmp	r4, r7
    b9ee:	str.w	r2, [fp, #4]
    b9f2:	str	r1, [r3, #0]
    b9f4:	ldr.w	r9, [pc, #164]	; ba9c <_malloc_r+0x360>
    b9f8:	beq.n	ba28 <_malloc_r+0x2ec>
    b9fa:	cmp.w	r8, #15
    b9fe:	bls.w	bbfc <_malloc_r+0x4c0>
    ba02:	ldr	r2, [r4, #4]
    ba04:	sub.w	r3, r8, #12
    ba08:	bic.w	r3, r3, #7
    ba0c:	adds	r0, r4, r3
    ba0e:	and.w	r2, r2, #1
    ba12:	mov.w	lr, #5
    ba16:	orrs	r2, r3
    ba18:	cmp	r3, #15
    ba1a:	str	r2, [r4, #4]
    ba1c:	str.w	lr, [r0, #4]
    ba20:	str.w	lr, [r0, #8]
    ba24:	bhi.w	bc60 <_malloc_r+0x524>
    ba28:	ldr	r3, [pc, #116]	; (baa0 <_malloc_r+0x364>)
    ba2a:	ldr	r4, [r7, #8]
    ba2c:	ldr	r2, [r3, #0]
    ba2e:	cmp	r1, r2
    ba30:	it	hi
    ba32:	strhi	r1, [r3, #0]
    ba34:	ldr	r3, [pc, #108]	; (baa4 <_malloc_r+0x368>)
    ba36:	ldr	r2, [r3, #0]
    ba38:	cmp	r1, r2
    ba3a:	ldr	r2, [r4, #4]
    ba3c:	it	hi
    ba3e:	strhi	r1, [r3, #0]
    ba40:	bic.w	r2, r2, #3
    ba44:	cmp	r5, r2
    ba46:	sub.w	r3, r2, r5
    ba4a:	bhi.n	ba50 <_malloc_r+0x314>
    ba4c:	cmp	r3, #15
    ba4e:	bgt.n	ba5a <_malloc_r+0x31e>
    ba50:	mov	r0, r6
    ba52:	bl	bf4c <__malloc_unlock>
    ba56:	movs	r4, #0
    ba58:	b.n	b8cc <_malloc_r+0x190>
    ba5a:	adds	r2, r4, r5
    ba5c:	orr.w	r3, r3, #1
    ba60:	orr.w	r5, r5, #1
    ba64:	str	r5, [r4, #4]
    ba66:	mov	r0, r6
    ba68:	str	r2, [r7, #8]
    ba6a:	str	r3, [r2, #4]
    ba6c:	bl	bf4c <__malloc_unlock>
    ba70:	adds	r4, #8
    ba72:	mov	r0, r4
    ba74:	add	sp, #12
    ba76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba7a:	cmp	r3, #20
    ba7c:	bls.n	bb62 <_malloc_r+0x426>
    ba7e:	cmp	r3, #84	; 0x54
    ba80:	bhi.w	bbcc <_malloc_r+0x490>
    ba84:	lsrs	r0, r5, #12
    ba86:	add.w	lr, r0, #111	; 0x6f
    ba8a:	mov.w	r3, lr, lsl #1
    ba8e:	adds	r0, #110	; 0x6e
    ba90:	b.n	b780 <_malloc_r+0x44>
    ba92:	nop
    ba94:	.word	0x20014138
    ba98:	.word	0x20019f08
    ba9c:	.word	0x20019f0c
    baa0:	.word	0x20019f04
    baa4:	.word	0x20019f00
    baa8:	.word	0x20014544
    baac:	lsrs	r2, r3, #9
    baae:	cmp	r2, #4
    bab0:	bls.n	bb70 <_malloc_r+0x434>
    bab2:	cmp	r2, #20
    bab4:	bhi.w	bc1e <_malloc_r+0x4e2>
    bab8:	add.w	r1, r2, #92	; 0x5c
    babc:	lsls	r1, r1, #1
    babe:	adds	r2, #91	; 0x5b
    bac0:	add.w	ip, r7, r1, lsl #2
    bac4:	ldr.w	r1, [r7, r1, lsl #2]
    bac8:	ldr.w	r8, [pc, #476]	; bca8 <_malloc_r+0x56c>
    bacc:	sub.w	ip, ip, #8
    bad0:	cmp	ip, r1
    bad2:	beq.w	bbe6 <_malloc_r+0x4aa>
    bad6:	ldr	r2, [r1, #4]
    bad8:	bic.w	r2, r2, #3
    badc:	cmp	r3, r2
    bade:	bcs.n	bae6 <_malloc_r+0x3aa>
    bae0:	ldr	r1, [r1, #8]
    bae2:	cmp	ip, r1
    bae4:	bne.n	bad6 <_malloc_r+0x39a>
    bae6:	ldr.w	ip, [r1, #12]
    baea:	ldr	r2, [r7, #4]
    baec:	str.w	ip, [r4, #12]
    baf0:	str	r1, [r4, #8]
    baf2:	str.w	r4, [ip, #8]
    baf6:	str	r4, [r1, #12]
    baf8:	b.n	b80c <_malloc_r+0xd0>
    bafa:	adds	r3, r4, r5
    bafc:	orr.w	r7, r2, #1
    bb00:	orr.w	r5, r5, #1
    bb04:	str	r5, [r4, #4]
    bb06:	mov	r0, r6
    bb08:	str	r3, [r1, #20]
    bb0a:	str	r3, [r1, #16]
    bb0c:	str.w	lr, [r3, #12]
    bb10:	str.w	lr, [r3, #8]
    bb14:	str	r7, [r3, #4]
    bb16:	str	r2, [r3, r2]
    bb18:	adds	r4, #8
    bb1a:	bl	bf4c <__malloc_unlock>
    bb1e:	b.n	b8cc <_malloc_r+0x190>
    bb20:	ldr	r2, [r1, #4]
    bb22:	b.n	b80c <_malloc_r+0xd0>
    bb24:	add.w	r8, r8, #1
    bb28:	tst.w	r8, #3
    bb2c:	add.w	ip, ip, #8
    bb30:	bne.w	b832 <_malloc_r+0xf6>
    bb34:	b.n	bb98 <_malloc_r+0x45c>
    bb36:	ldr	r4, [r3, #12]
    bb38:	cmp	r3, r4
    bb3a:	it	eq
    bb3c:	addeq	r0, #2
    bb3e:	beq.w	b7ac <_malloc_r+0x70>
    bb42:	b.n	b8ac <_malloc_r+0x170>
    bb44:	add	r3, r1
    bb46:	mov	r4, r1
    bb48:	ldr	r2, [r3, #4]
    bb4a:	ldr	r1, [r1, #12]
    bb4c:	ldr.w	r5, [r4, #8]!
    bb50:	orr.w	r2, r2, #1
    bb54:	str	r2, [r3, #4]
    bb56:	mov	r0, r6
    bb58:	str	r1, [r5, #12]
    bb5a:	str	r5, [r1, #8]
    bb5c:	bl	bf4c <__malloc_unlock>
    bb60:	b.n	b8cc <_malloc_r+0x190>
    bb62:	add.w	lr, r3, #92	; 0x5c
    bb66:	add.w	r0, r3, #91	; 0x5b
    bb6a:	mov.w	r3, lr, lsl #1
    bb6e:	b.n	b780 <_malloc_r+0x44>
    bb70:	lsrs	r2, r3, #6
    bb72:	add.w	r1, r2, #57	; 0x39
    bb76:	lsls	r1, r1, #1
    bb78:	adds	r2, #56	; 0x38
    bb7a:	b.n	bac0 <_malloc_r+0x384>
    bb7c:	cmp	r4, r7
    bb7e:	ldr	r3, [pc, #296]	; (bca8 <_malloc_r+0x56c>)
    bb80:	beq.w	b984 <_malloc_r+0x248>
    bb84:	ldr	r4, [r3, #8]
    bb86:	ldr	r2, [r4, #4]
    bb88:	bic.w	r2, r2, #3
    bb8c:	b.n	ba44 <_malloc_r+0x308>
    bb8e:	ldr.w	r3, [r9], #-8
    bb92:	cmp	r9, r3
    bb94:	bne.w	bc9c <_malloc_r+0x560>
    bb98:	tst.w	r0, #3
    bb9c:	add.w	r0, r0, #4294967295
    bba0:	bne.n	bb8e <_malloc_r+0x452>
    bba2:	ldr	r3, [r7, #4]
    bba4:	bic.w	r3, r3, r4
    bba8:	str	r3, [r7, #4]
    bbaa:	lsls	r4, r4, #1
    bbac:	cmp	r4, r3
    bbae:	bhi.w	b92c <_malloc_r+0x1f0>
    bbb2:	cmp	r4, #0
    bbb4:	beq.w	b92c <_malloc_r+0x1f0>
    bbb8:	tst	r4, r3
    bbba:	mov	r0, r8
    bbbc:	bne.w	b82a <_malloc_r+0xee>
    bbc0:	lsls	r4, r4, #1
    bbc2:	tst	r4, r3
    bbc4:	add.w	r0, r0, #4
    bbc8:	beq.n	bbc0 <_malloc_r+0x484>
    bbca:	b.n	b82a <_malloc_r+0xee>
    bbcc:	cmp.w	r3, #340	; 0x154
    bbd0:	bhi.n	bc04 <_malloc_r+0x4c8>
    bbd2:	lsrs	r0, r5, #15
    bbd4:	add.w	lr, r0, #120	; 0x78
    bbd8:	mov.w	r3, lr, lsl #1
    bbdc:	adds	r0, #119	; 0x77
    bbde:	b.n	b780 <_malloc_r+0x44>
    bbe0:	mov.w	r1, #4096	; 0x1000
    bbe4:	b.n	b9be <_malloc_r+0x282>
    bbe6:	movs	r1, #1
    bbe8:	ldr.w	r3, [r8, #4]
    bbec:	asrs	r2, r2, #2
    bbee:	lsl.w	r2, r1, r2
    bbf2:	orrs	r2, r3
    bbf4:	str.w	r2, [r8, #4]
    bbf8:	mov	r1, ip
    bbfa:	b.n	baec <_malloc_r+0x3b0>
    bbfc:	movs	r3, #1
    bbfe:	str.w	r3, [fp, #4]
    bc02:	b.n	ba50 <_malloc_r+0x314>
    bc04:	movw	r2, #1364	; 0x554
    bc08:	cmp	r3, r2
    bc0a:	bhi.n	bc4e <_malloc_r+0x512>
    bc0c:	lsrs	r0, r5, #18
    bc0e:	add.w	lr, r0, #125	; 0x7d
    bc12:	mov.w	r3, lr, lsl #1
    bc16:	adds	r0, #124	; 0x7c
    bc18:	b.n	b780 <_malloc_r+0x44>
    bc1a:	adds	r2, #16
    bc1c:	b.n	b968 <_malloc_r+0x22c>
    bc1e:	cmp	r2, #84	; 0x54
    bc20:	bhi.n	bc70 <_malloc_r+0x534>
    bc22:	lsrs	r2, r3, #12
    bc24:	add.w	r1, r2, #111	; 0x6f
    bc28:	lsls	r1, r1, #1
    bc2a:	adds	r2, #110	; 0x6e
    bc2c:	b.n	bac0 <_malloc_r+0x384>
    bc2e:	ldr	r4, [r7, #8]
    bc30:	ldr	r2, [r4, #4]
    bc32:	bic.w	r2, r2, #3
    bc36:	b.n	ba44 <_malloc_r+0x308>
    bc38:	ubfx	r0, sl, #0, #12
    bc3c:	cmp	r0, #0
    bc3e:	bne.w	b992 <_malloc_r+0x256>
    bc42:	add	r2, r8
    bc44:	ldr	r3, [r7, #8]
    bc46:	orr.w	r2, r2, #1
    bc4a:	str	r2, [r3, #4]
    bc4c:	b.n	ba28 <_malloc_r+0x2ec>
    bc4e:	movs	r3, #254	; 0xfe
    bc50:	mov.w	lr, #127	; 0x7f
    bc54:	movs	r0, #126	; 0x7e
    bc56:	b.n	b780 <_malloc_r+0x44>
    bc58:	movs	r2, #1
    bc5a:	mov.w	r9, #0
    bc5e:	b.n	b9e4 <_malloc_r+0x2a8>
    bc60:	add.w	r1, r4, #8
    bc64:	mov	r0, r6
    bc66:	bl	10ed0 <_free_r>
    bc6a:	ldr.w	r1, [r9]
    bc6e:	b.n	ba28 <_malloc_r+0x2ec>
    bc70:	cmp.w	r2, #340	; 0x154
    bc74:	bhi.n	bc82 <_malloc_r+0x546>
    bc76:	lsrs	r2, r3, #15
    bc78:	add.w	r1, r2, #120	; 0x78
    bc7c:	lsls	r1, r1, #1
    bc7e:	adds	r2, #119	; 0x77
    bc80:	b.n	bac0 <_malloc_r+0x384>
    bc82:	movw	r1, #1364	; 0x554
    bc86:	cmp	r2, r1
    bc88:	bhi.n	bc96 <_malloc_r+0x55a>
    bc8a:	lsrs	r2, r3, #18
    bc8c:	add.w	r1, r2, #125	; 0x7d
    bc90:	lsls	r1, r1, #1
    bc92:	adds	r2, #124	; 0x7c
    bc94:	b.n	bac0 <_malloc_r+0x384>
    bc96:	movs	r1, #254	; 0xfe
    bc98:	movs	r2, #126	; 0x7e
    bc9a:	b.n	bac0 <_malloc_r+0x384>
    bc9c:	ldr	r3, [r7, #4]
    bc9e:	b.n	bbaa <_malloc_r+0x46e>
    bca0:	lsrs	r0, r5, #3
    bca2:	adds	r3, r0, #1
    bca4:	lsls	r3, r3, #1
    bca6:	b.n	b89a <_malloc_r+0x15e>
    bca8:	.word	0x20014138

0000bcac <__ascii_mbtowc>:
    bcac:	sub	sp, #8
    bcae:	cbz	r1, bcc4 <__ascii_mbtowc+0x18>
    bcb0:	cbz	r2, bcca <__ascii_mbtowc+0x1e>
    bcb2:	cbz	r3, bcd0 <__ascii_mbtowc+0x24>
    bcb4:	ldrb	r3, [r2, #0]
    bcb6:	str	r3, [r1, #0]
    bcb8:	ldrb	r2, [r2, #0]
    bcba:	adds	r0, r2, #0
    bcbc:	it	ne
    bcbe:	movne	r0, #1
    bcc0:	add	sp, #8
    bcc2:	bx	lr
    bcc4:	add	r1, sp, #4
    bcc6:	cmp	r2, #0
    bcc8:	bne.n	bcb2 <__ascii_mbtowc+0x6>
    bcca:	mov	r0, r2
    bccc:	add	sp, #8
    bcce:	bx	lr
    bcd0:	mvn.w	r0, #1
    bcd4:	b.n	bcc0 <__ascii_mbtowc+0x14>
    bcd6:	nop
    bcd8:			; <UNDEFINED> instruction: 0xffffffff
    bcdc:			; <UNDEFINED> instruction: 0xffffffff

0000bce0 <memchr>:
    bce0:	and.w	r1, r1, #255	; 0xff
    bce4:	cmp	r2, #16
    bce6:	blt.n	bd40 <memchr+0x60>
    bce8:	tst.w	r0, #7
    bcec:	beq.n	bd00 <memchr+0x20>
    bcee:	ldrb.w	r3, [r0], #1
    bcf2:	subs	r2, #1
    bcf4:	cmp	r3, r1
    bcf6:	beq.n	bd54 <memchr+0x74>
    bcf8:	tst.w	r0, #7
    bcfc:	cbz	r2, bd50 <memchr+0x70>
    bcfe:	bne.n	bcee <memchr+0xe>
    bd00:	push	{r4, r5, r6, r7}
    bd02:	orr.w	r1, r1, r1, lsl #8
    bd06:	orr.w	r1, r1, r1, lsl #16
    bd0a:	bic.w	r4, r2, #7
    bd0e:	mvns.w	r7, #0
    bd12:	movs	r3, #0
    bd14:	ldrd	r5, r6, [r0], #8
    bd18:	subs	r4, #8
    bd1a:	eor.w	r5, r5, r1
    bd1e:	eor.w	r6, r6, r1
    bd22:	uadd8	r5, r5, r7
    bd26:	sel	r5, r3, r7
    bd2a:	uadd8	r6, r6, r7
    bd2e:	sel	r6, r5, r7
    bd32:	cbnz	r6, bd58 <memchr+0x78>
    bd34:	bne.n	bd14 <memchr+0x34>
    bd36:	pop	{r4, r5, r6, r7}
    bd38:	and.w	r1, r1, #255	; 0xff
    bd3c:	and.w	r2, r2, #7
    bd40:	cbz	r2, bd50 <memchr+0x70>
    bd42:	ldrb.w	r3, [r0], #1
    bd46:	subs	r2, #1
    bd48:	eor.w	r3, r3, r1
    bd4c:	cbz	r3, bd54 <memchr+0x74>
    bd4e:	bne.n	bd42 <memchr+0x62>
    bd50:	movs	r0, #0
    bd52:	bx	lr
    bd54:	subs	r0, #1
    bd56:	bx	lr
    bd58:	cmp	r5, #0
    bd5a:	itte	eq
    bd5c:	moveq	r5, r6
    bd5e:	subeq	r0, #3
    bd60:	subne	r0, #7
    bd62:	tst.w	r5, #1
    bd66:	bne.n	bd78 <memchr+0x98>
    bd68:	adds	r0, #1
    bd6a:	tst.w	r5, #256	; 0x100
    bd6e:	ittt	eq
    bd70:	addeq	r0, #1
    bd72:	tsteq.w	r5, #98304	; 0x18000
    bd76:	addeq	r0, #1
    bd78:	pop	{r4, r5, r6, r7}
    bd7a:	subs	r0, #1
    bd7c:	bx	lr
    bd7e:	nop

0000bd80 <memcmp>:
    bd80:	cmp	r2, #3
    bd82:	push	{r4, r5, r6}
    bd84:	bls.n	bdd4 <memcmp+0x54>
    bd86:	orr.w	r3, r0, r1
    bd8a:	lsls	r3, r3, #30
    bd8c:	beq.n	bdb2 <memcmp+0x32>
    bd8e:	ldrb	r4, [r0, #0]
    bd90:	ldrb	r5, [r1, #0]
    bd92:	cmp	r4, r5
    bd94:	bne.n	bddc <memcmp+0x5c>
    bd96:	add	r2, r0
    bd98:	adds	r3, r0, #1
    bd9a:	b.n	bda8 <memcmp+0x28>
    bd9c:	ldrb.w	r4, [r3], #1
    bda0:	ldrb.w	r5, [r1, #1]!
    bda4:	cmp	r4, r5
    bda6:	bne.n	bddc <memcmp+0x5c>
    bda8:	cmp	r3, r2
    bdaa:	bne.n	bd9c <memcmp+0x1c>
    bdac:	movs	r0, #0
    bdae:	pop	{r4, r5, r6}
    bdb0:	bx	lr
    bdb2:	mov	r4, r1
    bdb4:	mov	r3, r0
    bdb6:	ldr	r6, [r3, #0]
    bdb8:	ldr	r5, [r4, #0]
    bdba:	cmp	r6, r5
    bdbc:	mov	r0, r3
    bdbe:	mov	r1, r4
    bdc0:	add.w	r3, r3, #4
    bdc4:	add.w	r4, r4, #4
    bdc8:	bne.n	bd8e <memcmp+0xe>
    bdca:	subs	r2, #4
    bdcc:	cmp	r2, #3
    bdce:	mov	r0, r3
    bdd0:	mov	r1, r4
    bdd2:	bhi.n	bdb6 <memcmp+0x36>
    bdd4:	cmp	r2, #0
    bdd6:	bne.n	bd8e <memcmp+0xe>
    bdd8:	mov	r0, r2
    bdda:	b.n	bdae <memcmp+0x2e>
    bddc:	subs	r0, r4, r5
    bdde:	pop	{r4, r5, r6}
    bde0:	bx	lr
    bde2:	nop

0000bde4 <memmove>:
    bde4:	cmp	r0, r1
    bde6:	push	{r4, r5, r6, r7, lr}
    bde8:	bls.n	be06 <memmove+0x22>
    bdea:	adds	r3, r1, r2
    bdec:	cmp	r0, r3
    bdee:	bcs.n	be06 <memmove+0x22>
    bdf0:	adds	r1, r0, r2
    bdf2:	cmp	r2, #0
    bdf4:	beq.n	be9a <memmove+0xb6>
    bdf6:	subs	r2, r3, r2
    bdf8:	ldrb.w	r4, [r3, #-1]!
    bdfc:	strb.w	r4, [r1, #-1]!
    be00:	cmp	r3, r2
    be02:	bne.n	bdf8 <memmove+0x14>
    be04:	pop	{r4, r5, r6, r7, pc}
    be06:	cmp	r2, #15
    be08:	bls.n	be9c <memmove+0xb8>
    be0a:	orr.w	r3, r1, r0
    be0e:	lsls	r3, r3, #30
    be10:	bne.n	bea0 <memmove+0xbc>
    be12:	add.w	r4, r0, #16
    be16:	add.w	r3, r1, #16
    be1a:	mov	r5, r2
    be1c:	ldr.w	r6, [r3, #-16]
    be20:	str.w	r6, [r4, #-16]
    be24:	ldr.w	r6, [r3, #-12]
    be28:	str.w	r6, [r4, #-12]
    be2c:	ldr.w	r6, [r3, #-8]
    be30:	str.w	r6, [r4, #-8]
    be34:	subs	r5, #16
    be36:	ldr.w	r6, [r3, #-4]
    be3a:	str.w	r6, [r4, #-4]
    be3e:	cmp	r5, #15
    be40:	add.w	r3, r3, #16
    be44:	add.w	r4, r4, #16
    be48:	bhi.n	be1c <memmove+0x38>
    be4a:	sub.w	r3, r2, #16
    be4e:	bic.w	r3, r3, #15
    be52:	and.w	lr, r2, #15
    be56:	adds	r3, #16
    be58:	cmp.w	lr, #3
    be5c:	add	r1, r3
    be5e:	add	r3, r0
    be60:	bls.n	bea6 <memmove+0xc2>
    be62:	subs	r6, r3, #4
    be64:	mov	r5, r1
    be66:	mov	r4, lr
    be68:	subs	r4, #4
    be6a:	ldr.w	r7, [r5], #4
    be6e:	str.w	r7, [r6, #4]!
    be72:	cmp	r4, #3
    be74:	bhi.n	be68 <memmove+0x84>
    be76:	sub.w	r4, lr, #4
    be7a:	bic.w	r4, r4, #3
    be7e:	adds	r4, #4
    be80:	add	r3, r4
    be82:	add	r1, r4
    be84:	and.w	r2, r2, #3
    be88:	cbz	r2, bea4 <memmove+0xc0>
    be8a:	subs	r3, #1
    be8c:	add	r2, r1
    be8e:	ldrb.w	r4, [r1], #1
    be92:	strb.w	r4, [r3, #1]!
    be96:	cmp	r2, r1
    be98:	bne.n	be8e <memmove+0xaa>
    be9a:	pop	{r4, r5, r6, r7, pc}
    be9c:	mov	r3, r0
    be9e:	b.n	be88 <memmove+0xa4>
    bea0:	mov	r3, r0
    bea2:	b.n	be8a <memmove+0xa6>
    bea4:	pop	{r4, r5, r6, r7, pc}
    bea6:	mov	r2, lr
    bea8:	b.n	be88 <memmove+0xa4>
    beaa:	nop

0000beac <memset>:
    beac:	push	{r4, r5, r6}
    beae:	lsls	r4, r0, #30
    beb0:	beq.n	bf40 <memset+0x94>
    beb2:	subs	r4, r2, #1
    beb4:	cmp	r2, #0
    beb6:	beq.n	bf3c <memset+0x90>
    beb8:	uxtb	r5, r1
    beba:	mov	r3, r0
    bebc:	b.n	bec4 <memset+0x18>
    bebe:	subs	r2, r4, #1
    bec0:	cbz	r4, bf3c <memset+0x90>
    bec2:	mov	r4, r2
    bec4:	strb.w	r5, [r3], #1
    bec8:	lsls	r2, r3, #30
    beca:	bne.n	bebe <memset+0x12>
    becc:	cmp	r4, #3
    bece:	bls.n	bf2e <memset+0x82>
    bed0:	uxtb	r5, r1
    bed2:	orr.w	r5, r5, r5, lsl #8
    bed6:	cmp	r4, #15
    bed8:	orr.w	r5, r5, r5, lsl #16
    bedc:	bls.n	bf12 <memset+0x66>
    bede:	add.w	r2, r3, #16
    bee2:	mov	r6, r4
    bee4:	subs	r6, #16
    bee6:	cmp	r6, #15
    bee8:	str.w	r5, [r2, #-16]
    beec:	str.w	r5, [r2, #-12]
    bef0:	str.w	r5, [r2, #-8]
    bef4:	str.w	r5, [r2, #-4]
    bef8:	add.w	r2, r2, #16
    befc:	bhi.n	bee4 <memset+0x38>
    befe:	sub.w	r2, r4, #16
    bf02:	bic.w	r2, r2, #15
    bf06:	and.w	r4, r4, #15
    bf0a:	adds	r2, #16
    bf0c:	cmp	r4, #3
    bf0e:	add	r3, r2
    bf10:	bls.n	bf2e <memset+0x82>
    bf12:	mov	r6, r3
    bf14:	mov	r2, r4
    bf16:	subs	r2, #4
    bf18:	cmp	r2, #3
    bf1a:	str.w	r5, [r6], #4
    bf1e:	bhi.n	bf16 <memset+0x6a>
    bf20:	subs	r2, r4, #4
    bf22:	bic.w	r2, r2, #3
    bf26:	adds	r2, #4
    bf28:	add	r3, r2
    bf2a:	and.w	r4, r4, #3
    bf2e:	cbz	r4, bf3c <memset+0x90>
    bf30:	uxtb	r1, r1
    bf32:	add	r4, r3
    bf34:	strb.w	r1, [r3], #1
    bf38:	cmp	r3, r4
    bf3a:	bne.n	bf34 <memset+0x88>
    bf3c:	pop	{r4, r5, r6}
    bf3e:	bx	lr
    bf40:	mov	r4, r2
    bf42:	mov	r3, r0
    bf44:	b.n	becc <memset+0x20>
    bf46:	nop

0000bf48 <__malloc_lock>:
    bf48:	bx	lr
    bf4a:	nop

0000bf4c <__malloc_unlock>:
    bf4c:	bx	lr
    bf4e:	nop

0000bf50 <_realloc_r>:
    bf50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf54:	mov	r7, r2
    bf56:	sub	sp, #12
    bf58:	cmp	r1, #0
    bf5a:	beq.w	c0e0 <_realloc_r+0x190>
    bf5e:	mov	r6, r1
    bf60:	mov	r9, r0
    bf62:	add.w	r5, r7, #11
    bf66:	bl	bf48 <__malloc_lock>
    bf6a:	ldr.w	lr, [r6, #-4]
    bf6e:	cmp	r5, #22
    bf70:	bic.w	r4, lr, #3
    bf74:	sub.w	r8, r6, #8
    bf78:	bhi.n	bffc <_realloc_r+0xac>
    bf7a:	movs	r2, #16
    bf7c:	mov	r5, r2
    bf7e:	cmp	r7, r5
    bf80:	bhi.n	c006 <_realloc_r+0xb6>
    bf82:	cmp	r4, r2
    bf84:	bge.n	c072 <_realloc_r+0x122>
    bf86:	ldr	r3, [pc, #804]	; (c2ac <_realloc_r+0x35c>)
    bf88:	ldr	r1, [r3, #8]
    bf8a:	add.w	r0, r8, r4
    bf8e:	cmp	r0, r1
    bf90:	ldr	r1, [r0, #4]
    bf92:	beq.w	c148 <_realloc_r+0x1f8>
    bf96:	bic.w	r3, r1, #1
    bf9a:	add	r3, r0
    bf9c:	ldr	r3, [r3, #4]
    bf9e:	lsls	r3, r3, #31
    bfa0:	bpl.n	c09e <_realloc_r+0x14e>
    bfa2:	tst.w	lr, #1
    bfa6:	beq.n	c014 <_realloc_r+0xc4>
    bfa8:	mov	r1, r7
    bfaa:	mov	r0, r9
    bfac:	bl	b73c <_malloc_r>
    bfb0:	mov	r7, r0
    bfb2:	cbz	r0, bfee <_realloc_r+0x9e>
    bfb4:	ldr.w	r3, [r6, #-4]
    bfb8:	bic.w	r3, r3, #1
    bfbc:	add	r3, r8
    bfbe:	sub.w	r2, r0, #8
    bfc2:	cmp	r2, r3
    bfc4:	beq.w	c250 <_realloc_r+0x300>
    bfc8:	subs	r2, r4, #4
    bfca:	cmp	r2, #36	; 0x24
    bfcc:	bhi.w	c232 <_realloc_r+0x2e2>
    bfd0:	cmp	r2, #19
    bfd2:	bhi.w	c1de <_realloc_r+0x28e>
    bfd6:	mov	r3, r0
    bfd8:	mov	r2, r6
    bfda:	ldr	r1, [r2, #0]
    bfdc:	str	r1, [r3, #0]
    bfde:	ldr	r1, [r2, #4]
    bfe0:	str	r1, [r3, #4]
    bfe2:	ldr	r2, [r2, #8]
    bfe4:	str	r2, [r3, #8]
    bfe6:	mov	r1, r6
    bfe8:	mov	r0, r9
    bfea:	bl	10ed0 <_free_r>
    bfee:	mov	r0, r9
    bff0:	bl	bf4c <__malloc_unlock>
    bff4:	mov	r0, r7
    bff6:	add	sp, #12
    bff8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bffc:	bic.w	r5, r5, #7
    c000:	cmp	r5, #0
    c002:	mov	r2, r5
    c004:	bge.n	bf7e <_realloc_r+0x2e>
    c006:	movs	r3, #12
    c008:	movs	r0, #0
    c00a:	str.w	r3, [r9]
    c00e:	add	sp, #12
    c010:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c014:	ldr.w	r3, [r6, #-8]
    c018:	rsb	sl, r3, r8
    c01c:	ldr.w	r3, [sl, #4]
    c020:	bic.w	ip, r3, #3
    c024:	add.w	r3, r4, ip
    c028:	cmp	r3, r2
    c02a:	blt.n	bfa8 <_realloc_r+0x58>
    c02c:	mov	r7, sl
    c02e:	ldr.w	r1, [sl, #12]
    c032:	ldr.w	r0, [r7, #8]!
    c036:	subs	r2, r4, #4
    c038:	cmp	r2, #36	; 0x24
    c03a:	str	r1, [r0, #12]
    c03c:	str	r0, [r1, #8]
    c03e:	bhi.w	c270 <_realloc_r+0x320>
    c042:	cmp	r2, #19
    c044:	bls.w	c26c <_realloc_r+0x31c>
    c048:	ldr	r1, [r6, #0]
    c04a:	str.w	r1, [sl, #8]
    c04e:	ldr	r1, [r6, #4]
    c050:	str.w	r1, [sl, #12]
    c054:	cmp	r2, #27
    c056:	bhi.w	c2b0 <_realloc_r+0x360>
    c05a:	adds	r6, #8
    c05c:	add.w	r2, sl, #16
    c060:	ldr	r1, [r6, #0]
    c062:	str	r1, [r2, #0]
    c064:	ldr	r1, [r6, #4]
    c066:	str	r1, [r2, #4]
    c068:	ldr	r1, [r6, #8]
    c06a:	str	r1, [r2, #8]
    c06c:	mov	r6, r7
    c06e:	mov	r4, r3
    c070:	mov	r8, sl
    c072:	subs	r3, r4, r5
    c074:	cmp	r3, #15
    c076:	bhi.n	c0b4 <_realloc_r+0x164>
    c078:	ldr.w	r3, [r8, #4]
    c07c:	and.w	r3, r3, #1
    c080:	orrs	r3, r4
    c082:	add	r4, r8
    c084:	str.w	r3, [r8, #4]
    c088:	ldr	r3, [r4, #4]
    c08a:	orr.w	r3, r3, #1
    c08e:	str	r3, [r4, #4]
    c090:	mov	r0, r9
    c092:	bl	bf4c <__malloc_unlock>
    c096:	mov	r0, r6
    c098:	add	sp, #12
    c09a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c09e:	bic.w	r1, r1, #3
    c0a2:	add	r1, r4
    c0a4:	cmp	r1, r2
    c0a6:	blt.n	c0ec <_realloc_r+0x19c>
    c0a8:	ldr	r3, [r0, #12]
    c0aa:	ldr	r2, [r0, #8]
    c0ac:	mov	r4, r1
    c0ae:	str	r3, [r2, #12]
    c0b0:	str	r2, [r3, #8]
    c0b2:	b.n	c072 <_realloc_r+0x122>
    c0b4:	ldr.w	r2, [r8, #4]
    c0b8:	add.w	r1, r8, r5
    c0bc:	and.w	r2, r2, #1
    c0c0:	orrs	r5, r2
    c0c2:	orr.w	r2, r3, #1
    c0c6:	add	r3, r1
    c0c8:	str.w	r5, [r8, #4]
    c0cc:	str	r2, [r1, #4]
    c0ce:	ldr	r2, [r3, #4]
    c0d0:	orr.w	r2, r2, #1
    c0d4:	adds	r1, #8
    c0d6:	str	r2, [r3, #4]
    c0d8:	mov	r0, r9
    c0da:	bl	10ed0 <_free_r>
    c0de:	b.n	c090 <_realloc_r+0x140>
    c0e0:	mov	r1, r2
    c0e2:	add	sp, #12
    c0e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0e8:	b.w	b73c <_malloc_r>
    c0ec:	tst.w	lr, #1
    c0f0:	bne.w	bfa8 <_realloc_r+0x58>
    c0f4:	ldr.w	r3, [r6, #-8]
    c0f8:	rsb	sl, r3, r8
    c0fc:	ldr.w	r3, [sl, #4]
    c100:	bic.w	ip, r3, #3
    c104:	add.w	lr, r1, ip
    c108:	cmp	lr, r2
    c10a:	blt.n	c024 <_realloc_r+0xd4>
    c10c:	ldr	r3, [r0, #12]
    c10e:	ldr	r2, [r0, #8]
    c110:	mov	r7, sl
    c112:	str	r3, [r2, #12]
    c114:	str	r2, [r3, #8]
    c116:	ldr.w	r1, [r7, #8]!
    c11a:	ldr.w	r3, [sl, #12]
    c11e:	str	r3, [r1, #12]
    c120:	subs	r2, r4, #4
    c122:	cmp	r2, #36	; 0x24
    c124:	str	r1, [r3, #8]
    c126:	bhi.w	c25c <_realloc_r+0x30c>
    c12a:	cmp	r2, #19
    c12c:	bls.n	c1f4 <_realloc_r+0x2a4>
    c12e:	ldr	r3, [r6, #0]
    c130:	str.w	r3, [sl, #8]
    c134:	ldr	r3, [r6, #4]
    c136:	str.w	r3, [sl, #12]
    c13a:	cmp	r2, #27
    c13c:	bhi.w	c280 <_realloc_r+0x330>
    c140:	adds	r6, #8
    c142:	add.w	r3, sl, #16
    c146:	b.n	c1f6 <_realloc_r+0x2a6>
    c148:	bic.w	fp, r1, #3
    c14c:	add	fp, r4
    c14e:	add.w	r0, r5, #16
    c152:	cmp	fp, r0
    c154:	bge.n	c20a <_realloc_r+0x2ba>
    c156:	tst.w	lr, #1
    c15a:	bne.w	bfa8 <_realloc_r+0x58>
    c15e:	ldr.w	r1, [r6, #-8]
    c162:	rsb	sl, r1, r8
    c166:	ldr.w	r1, [sl, #4]
    c16a:	bic.w	ip, r1, #3
    c16e:	add	fp, ip
    c170:	cmp	r0, fp
    c172:	bgt.w	c024 <_realloc_r+0xd4>
    c176:	mov	r7, sl
    c178:	ldr.w	r1, [sl, #12]
    c17c:	ldr.w	r0, [r7, #8]!
    c180:	subs	r2, r4, #4
    c182:	cmp	r2, #36	; 0x24
    c184:	str	r1, [r0, #12]
    c186:	str	r0, [r1, #8]
    c188:	bhi.w	c2f4 <_realloc_r+0x3a4>
    c18c:	cmp	r2, #19
    c18e:	bls.w	c2dc <_realloc_r+0x38c>
    c192:	ldr	r1, [r6, #0]
    c194:	str.w	r1, [sl, #8]
    c198:	ldr	r1, [r6, #4]
    c19a:	str.w	r1, [sl, #12]
    c19e:	cmp	r2, #27
    c1a0:	bhi.w	c302 <_realloc_r+0x3b2>
    c1a4:	adds	r6, #8
    c1a6:	add.w	r2, sl, #16
    c1aa:	ldr	r1, [r6, #0]
    c1ac:	str	r1, [r2, #0]
    c1ae:	ldr	r1, [r6, #4]
    c1b0:	str	r1, [r2, #4]
    c1b2:	ldr	r1, [r6, #8]
    c1b4:	str	r1, [r2, #8]
    c1b6:	add.w	r1, sl, r5
    c1ba:	rsb	r2, r5, fp
    c1be:	orr.w	r2, r2, #1
    c1c2:	str	r1, [r3, #8]
    c1c4:	str	r2, [r1, #4]
    c1c6:	ldr.w	r3, [sl, #4]
    c1ca:	and.w	r3, r3, #1
    c1ce:	orrs	r5, r3
    c1d0:	mov	r0, r9
    c1d2:	str.w	r5, [sl, #4]
    c1d6:	bl	bf4c <__malloc_unlock>
    c1da:	mov	r0, r7
    c1dc:	b.n	c098 <_realloc_r+0x148>
    c1de:	ldr	r3, [r6, #0]
    c1e0:	str	r3, [r0, #0]
    c1e2:	ldr	r3, [r6, #4]
    c1e4:	str	r3, [r0, #4]
    c1e6:	cmp	r2, #27
    c1e8:	bhi.n	c23a <_realloc_r+0x2ea>
    c1ea:	add.w	r3, r0, #8
    c1ee:	add.w	r2, r6, #8
    c1f2:	b.n	bfda <_realloc_r+0x8a>
    c1f4:	mov	r3, r7
    c1f6:	ldr	r2, [r6, #0]
    c1f8:	str	r2, [r3, #0]
    c1fa:	ldr	r2, [r6, #4]
    c1fc:	str	r2, [r3, #4]
    c1fe:	ldr	r2, [r6, #8]
    c200:	str	r2, [r3, #8]
    c202:	mov	r6, r7
    c204:	mov	r4, lr
    c206:	mov	r8, sl
    c208:	b.n	c072 <_realloc_r+0x122>
    c20a:	add.w	r1, r8, r5
    c20e:	rsb	fp, r5, fp
    c212:	orr.w	r2, fp, #1
    c216:	str	r1, [r3, #8]
    c218:	str	r2, [r1, #4]
    c21a:	ldr.w	r3, [r6, #-4]
    c21e:	and.w	r3, r3, #1
    c222:	orrs	r5, r3
    c224:	mov	r0, r9
    c226:	str.w	r5, [r6, #-4]
    c22a:	bl	bf4c <__malloc_unlock>
    c22e:	mov	r0, r6
    c230:	b.n	c098 <_realloc_r+0x148>
    c232:	mov	r1, r6
    c234:	bl	bde4 <memmove>
    c238:	b.n	bfe6 <_realloc_r+0x96>
    c23a:	ldr	r3, [r6, #8]
    c23c:	str	r3, [r0, #8]
    c23e:	ldr	r3, [r6, #12]
    c240:	str	r3, [r0, #12]
    c242:	cmp	r2, #36	; 0x24
    c244:	beq.n	c298 <_realloc_r+0x348>
    c246:	add.w	r3, r0, #16
    c24a:	add.w	r2, r6, #16
    c24e:	b.n	bfda <_realloc_r+0x8a>
    c250:	ldr.w	r3, [r0, #-4]
    c254:	bic.w	r3, r3, #3
    c258:	add	r4, r3
    c25a:	b.n	c072 <_realloc_r+0x122>
    c25c:	mov	r1, r6
    c25e:	mov	r0, r7
    c260:	mov	r4, lr
    c262:	mov	r8, sl
    c264:	bl	bde4 <memmove>
    c268:	mov	r6, r7
    c26a:	b.n	c072 <_realloc_r+0x122>
    c26c:	mov	r2, r7
    c26e:	b.n	c060 <_realloc_r+0x110>
    c270:	mov	r1, r6
    c272:	mov	r0, r7
    c274:	mov	r4, r3
    c276:	mov	r8, sl
    c278:	bl	bde4 <memmove>
    c27c:	mov	r6, r7
    c27e:	b.n	c072 <_realloc_r+0x122>
    c280:	ldr	r3, [r6, #8]
    c282:	str.w	r3, [sl, #16]
    c286:	ldr	r3, [r6, #12]
    c288:	str.w	r3, [sl, #20]
    c28c:	cmp	r2, #36	; 0x24
    c28e:	beq.n	c2c8 <_realloc_r+0x378>
    c290:	adds	r6, #16
    c292:	add.w	r3, sl, #24
    c296:	b.n	c1f6 <_realloc_r+0x2a6>
    c298:	ldr	r3, [r6, #16]
    c29a:	str	r3, [r0, #16]
    c29c:	ldr	r3, [r6, #20]
    c29e:	str	r3, [r0, #20]
    c2a0:	add.w	r2, r6, #24
    c2a4:	add.w	r3, r0, #24
    c2a8:	b.n	bfda <_realloc_r+0x8a>
    c2aa:	nop
    c2ac:	.word	0x20014138
    c2b0:	ldr	r1, [r6, #8]
    c2b2:	str.w	r1, [sl, #16]
    c2b6:	ldr	r1, [r6, #12]
    c2b8:	str.w	r1, [sl, #20]
    c2bc:	cmp	r2, #36	; 0x24
    c2be:	beq.n	c2e0 <_realloc_r+0x390>
    c2c0:	adds	r6, #16
    c2c2:	add.w	r2, sl, #24
    c2c6:	b.n	c060 <_realloc_r+0x110>
    c2c8:	ldr	r3, [r6, #16]
    c2ca:	str.w	r3, [sl, #24]
    c2ce:	ldr	r3, [r6, #20]
    c2d0:	str.w	r3, [sl, #28]
    c2d4:	adds	r6, #24
    c2d6:	add.w	r3, sl, #32
    c2da:	b.n	c1f6 <_realloc_r+0x2a6>
    c2dc:	mov	r2, r7
    c2de:	b.n	c1aa <_realloc_r+0x25a>
    c2e0:	ldr	r2, [r6, #16]
    c2e2:	str.w	r2, [sl, #24]
    c2e6:	ldr	r2, [r6, #20]
    c2e8:	str.w	r2, [sl, #28]
    c2ec:	adds	r6, #24
    c2ee:	add.w	r2, sl, #32
    c2f2:	b.n	c060 <_realloc_r+0x110>
    c2f4:	mov	r1, r6
    c2f6:	mov	r0, r7
    c2f8:	str	r3, [sp, #4]
    c2fa:	bl	bde4 <memmove>
    c2fe:	ldr	r3, [sp, #4]
    c300:	b.n	c1b6 <_realloc_r+0x266>
    c302:	ldr	r1, [r6, #8]
    c304:	str.w	r1, [sl, #16]
    c308:	ldr	r1, [r6, #12]
    c30a:	str.w	r1, [sl, #20]
    c30e:	cmp	r2, #36	; 0x24
    c310:	beq.n	c31a <_realloc_r+0x3ca>
    c312:	adds	r6, #16
    c314:	add.w	r2, sl, #24
    c318:	b.n	c1aa <_realloc_r+0x25a>
    c31a:	ldr	r2, [r6, #16]
    c31c:	str.w	r2, [sl, #24]
    c320:	ldr	r2, [r6, #20]
    c322:	str.w	r2, [sl, #28]
    c326:	adds	r6, #24
    c328:	add.w	r2, sl, #32
    c32c:	b.n	c1aa <_realloc_r+0x25a>
    c32e:	nop

0000c330 <_sbrk_r>:
    c330:	push	{r3, r4, r5, lr}
    c332:	ldr	r4, [pc, #28]	; (c350 <_sbrk_r+0x20>)
    c334:	movs	r3, #0
    c336:	mov	r5, r0
    c338:	mov	r0, r1
    c33a:	str	r3, [r4, #0]
    c33c:	bl	8cbc <_sbrk>
    c340:	adds	r3, r0, #1
    c342:	beq.n	c346 <_sbrk_r+0x16>
    c344:	pop	{r3, r4, r5, pc}
    c346:	ldr	r3, [r4, #0]
    c348:	cmp	r3, #0
    c34a:	beq.n	c344 <_sbrk_r+0x14>
    c34c:	str	r3, [r5, #0]
    c34e:	pop	{r3, r4, r5, pc}
    c350:	.word	0x20019f48

0000c354 <sprintf>:
    c354:	push	{r1, r2, r3}
    c356:	push	{r4, r5, r6, r7, lr}
    c358:	sub	sp, #112	; 0x70
    c35a:	add	r3, sp, #132	; 0x84
    c35c:	ldr	r1, [pc, #60]	; (c39c <sprintf+0x48>)
    c35e:	ldr.w	r2, [r3], #4
    c362:	str	r3, [sp, #4]
    c364:	mov	r5, r0
    c366:	mvn.w	r4, #2147483648	; 0x80000000
    c36a:	ldr	r0, [r1, #0]
    c36c:	str	r5, [sp, #8]
    c36e:	mov.w	r7, #520	; 0x208
    c372:	movw	r6, #65535	; 0xffff
    c376:	add	r1, sp, #8
    c378:	str	r5, [sp, #24]
    c37a:	strh.w	r7, [sp, #20]
    c37e:	str	r4, [sp, #16]
    c380:	str	r4, [sp, #28]
    c382:	strh.w	r6, [sp, #22]
    c386:	bl	d7d0 <_svfprintf_r>
    c38a:	ldr	r3, [sp, #8]
    c38c:	movs	r2, #0
    c38e:	strb	r2, [r3, #0]
    c390:	add	sp, #112	; 0x70
    c392:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c396:	add	sp, #12
    c398:	bx	lr
    c39a:	nop
    c39c:	.word	0x20013fc8

0000c3a0 <sscanf>:
    c3a0:	push	{r1, r2, r3}
    c3a2:	push	{r4, r5, r6, r7, lr}
    c3a4:	sub	sp, #112	; 0x70
    c3a6:	add	r4, sp, #132	; 0x84
    c3a8:	mov.w	r2, #516	; 0x204
    c3ac:	ldr.w	r6, [r4], #4
    c3b0:	strh.w	r2, [sp, #20]
    c3b4:	str	r0, [sp, #8]
    c3b6:	str	r0, [sp, #24]
    c3b8:	bl	c5c0 <strlen>
    c3bc:	ldr	r3, [pc, #48]	; (c3f0 <sscanf+0x50>)
    c3be:	str	r4, [sp, #4]
    c3c0:	mov	r5, r0
    c3c2:	mov	r2, r6
    c3c4:	ldr	r7, [pc, #44]	; (c3f4 <sscanf+0x54>)
    c3c6:	ldr	r0, [r3, #0]
    c3c8:	str	r5, [sp, #12]
    c3ca:	mov	r3, r4
    c3cc:	movw	r6, #65535	; 0xffff
    c3d0:	movs	r4, #0
    c3d2:	add	r1, sp, #8
    c3d4:	str	r5, [sp, #28]
    c3d6:	str	r7, [sp, #40]	; 0x28
    c3d8:	str	r4, [sp, #56]	; 0x38
    c3da:	str	r4, [sp, #76]	; 0x4c
    c3dc:	strh.w	r6, [sp, #22]
    c3e0:	bl	eeb4 <__ssvfscanf_r>
    c3e4:	add	sp, #112	; 0x70
    c3e6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c3ea:	add	sp, #12
    c3ec:	bx	lr
    c3ee:	nop
    c3f0:	.word	0x20013fc8
    c3f4:	.word	0x0000c3f9

0000c3f8 <__seofread>:
    c3f8:	movs	r0, #0
    c3fa:	bx	lr

0000c3fc <strchr>:
    c3fc:	push	{r4, r5, r6}
    c3fe:	ands.w	r4, r1, #255	; 0xff
    c402:	beq.n	c46e <strchr+0x72>
    c404:	lsls	r5, r0, #30
    c406:	beq.n	c428 <strchr+0x2c>
    c408:	ldrb	r3, [r0, #0]
    c40a:	cmp	r3, #0
    c40c:	beq.n	c4c4 <strchr+0xc8>
    c40e:	cmp	r4, r3
    c410:	beq.n	c46a <strchr+0x6e>
    c412:	adds	r3, r0, #1
    c414:	b.n	c422 <strchr+0x26>
    c416:	ldrb.w	r2, [r3], #1
    c41a:	cmp	r2, #0
    c41c:	beq.n	c4be <strchr+0xc2>
    c41e:	cmp	r4, r2
    c420:	beq.n	c46a <strchr+0x6e>
    c422:	lsls	r2, r3, #30
    c424:	mov	r0, r3
    c426:	bne.n	c416 <strchr+0x1a>
    c428:	lsls	r6, r1, #8
    c42a:	and.w	r6, r6, #65280	; 0xff00
    c42e:	orrs	r6, r4
    c430:	ldr	r3, [r0, #0]
    c432:	orr.w	r6, r6, r6, lsl #16
    c436:	b.n	c43c <strchr+0x40>
    c438:	ldr.w	r3, [r0, #4]!
    c43c:	eor.w	r5, r6, r3
    c440:	sub.w	r2, r5, #16843009	; 0x1010101
    c444:	sub.w	r1, r3, #16843009	; 0x1010101
    c448:	bic.w	r2, r2, r5
    c44c:	bic.w	r3, r1, r3
    c450:	orrs	r3, r2
    c452:	tst.w	r3, #2155905152	; 0x80808080
    c456:	beq.n	c438 <strchr+0x3c>
    c458:	ldrb	r3, [r0, #0]
    c45a:	cbnz	r3, c466 <strchr+0x6a>
    c45c:	b.n	c4c4 <strchr+0xc8>
    c45e:	ldrb.w	r3, [r0, #1]!
    c462:	cmp	r3, #0
    c464:	beq.n	c4c4 <strchr+0xc8>
    c466:	cmp	r4, r3
    c468:	bne.n	c45e <strchr+0x62>
    c46a:	pop	{r4, r5, r6}
    c46c:	bx	lr
    c46e:	lsls	r4, r0, #30
    c470:	beq.n	c48a <strchr+0x8e>
    c472:	ldrb	r3, [r0, #0]
    c474:	cmp	r3, #0
    c476:	beq.n	c46a <strchr+0x6e>
    c478:	adds	r3, r0, #1
    c47a:	b.n	c484 <strchr+0x88>
    c47c:	ldrb	r2, [r0, #0]
    c47e:	adds	r3, #1
    c480:	cmp	r2, #0
    c482:	beq.n	c46a <strchr+0x6e>
    c484:	lsls	r1, r3, #30
    c486:	mov	r0, r3
    c488:	bne.n	c47c <strchr+0x80>
    c48a:	ldr	r2, [r0, #0]
    c48c:	sub.w	r3, r2, #16843009	; 0x1010101
    c490:	bic.w	r3, r3, r2
    c494:	tst.w	r3, #2155905152	; 0x80808080
    c498:	bne.n	c4ac <strchr+0xb0>
    c49a:	ldr.w	r2, [r0, #4]!
    c49e:	sub.w	r3, r2, #16843009	; 0x1010101
    c4a2:	bic.w	r3, r3, r2
    c4a6:	tst.w	r3, #2155905152	; 0x80808080
    c4aa:	beq.n	c49a <strchr+0x9e>
    c4ac:	ldrb	r3, [r0, #0]
    c4ae:	cmp	r3, #0
    c4b0:	beq.n	c46a <strchr+0x6e>
    c4b2:	ldrb.w	r3, [r0, #1]!
    c4b6:	cmp	r3, #0
    c4b8:	bne.n	c4b2 <strchr+0xb6>
    c4ba:	pop	{r4, r5, r6}
    c4bc:	bx	lr
    c4be:	mov	r0, r2
    c4c0:	pop	{r4, r5, r6}
    c4c2:	bx	lr
    c4c4:	mov	r0, r3
    c4c6:	pop	{r4, r5, r6}
    c4c8:	bx	lr
    c4ca:	nop

0000c4cc <strcpy>:
    c4cc:	eor.w	r2, r0, r1
    c4d0:	mov	ip, r0
    c4d2:	tst.w	r2, #3
    c4d6:	bne.n	c578 <strcpy+0xac>
    c4d8:	tst.w	r1, #3
    c4dc:	bne.n	c544 <strcpy+0x78>
    c4de:	str.w	r4, [sp, #-4]!
    c4e2:	tst.w	r1, #4
    c4e6:	ldr.w	r3, [r1], #4
    c4ea:	beq.n	c504 <strcpy+0x38>
    c4ec:	sub.w	r2, r3, #16843009	; 0x1010101
    c4f0:	bics	r2, r3
    c4f2:	tst.w	r2, #2155905152	; 0x80808080
    c4f6:	itt	eq
    c4f8:	streq.w	r3, [ip], #4
    c4fc:	ldreq.w	r3, [r1], #4
    c500:	bne.n	c530 <strcpy+0x64>
    c502:	nop
    c504:	ldr.w	r4, [r1], #4
    c508:	sub.w	r2, r3, #16843009	; 0x1010101
    c50c:	bics	r2, r3
    c50e:	tst.w	r2, #2155905152	; 0x80808080
    c512:	sub.w	r2, r4, #16843009	; 0x1010101
    c516:	bne.n	c530 <strcpy+0x64>
    c518:	str.w	r3, [ip], #4
    c51c:	bics	r2, r4
    c51e:	tst.w	r2, #2155905152	; 0x80808080
    c522:	itt	eq
    c524:	ldreq.w	r3, [r1], #4
    c528:	streq.w	r4, [ip], #4
    c52c:	beq.n	c504 <strcpy+0x38>
    c52e:	mov	r3, r4
    c530:	strb.w	r3, [ip], #1
    c534:	tst.w	r3, #255	; 0xff
    c538:	mov.w	r3, r3, ror #8
    c53c:	bne.n	c530 <strcpy+0x64>
    c53e:	ldr.w	r4, [sp], #4
    c542:	bx	lr
    c544:	tst.w	r1, #1
    c548:	beq.n	c558 <strcpy+0x8c>
    c54a:	ldrb.w	r2, [r1], #1
    c54e:	strb.w	r2, [ip], #1
    c552:	cmp	r2, #0
    c554:	it	eq
    c556:	bxeq	lr
    c558:	tst.w	r1, #2
    c55c:	beq.n	c4de <strcpy+0x12>
    c55e:	ldrh.w	r2, [r1], #2
    c562:	tst.w	r2, #255	; 0xff
    c566:	itet	ne
    c568:	strhne.w	r2, [ip], #2
    c56c:	strbeq.w	r2, [ip]
    c570:	tstne.w	r2, #65280	; 0xff00
    c574:	bne.n	c4de <strcpy+0x12>
    c576:	bx	lr
    c578:	ldrb.w	r2, [r1], #1
    c57c:	strb.w	r2, [ip], #1
    c580:	cmp	r2, #0
    c582:	bne.n	c578 <strcpy+0xac>
    c584:	bx	lr
    c586:	nop
    c588:			; <UNDEFINED> instruction: 0xffffffff
    c58c:			; <UNDEFINED> instruction: 0xffffffff
    c590:			; <UNDEFINED> instruction: 0xffffffff
    c594:			; <UNDEFINED> instruction: 0xffffffff
    c598:			; <UNDEFINED> instruction: 0xffffffff
    c59c:			; <UNDEFINED> instruction: 0xffffffff
    c5a0:			; <UNDEFINED> instruction: 0xffffffff
    c5a4:			; <UNDEFINED> instruction: 0xffffffff
    c5a8:			; <UNDEFINED> instruction: 0xffffffff
    c5ac:			; <UNDEFINED> instruction: 0xffffffff
    c5b0:			; <UNDEFINED> instruction: 0xffffffff
    c5b4:			; <UNDEFINED> instruction: 0xffffffff
    c5b8:			; <UNDEFINED> instruction: 0xffffffff
    c5bc:			; <UNDEFINED> instruction: 0xffffffff

0000c5c0 <strlen>:
    c5c0:	pld	[r0]
    c5c4:	strd	r4, r5, [sp, #-8]!
    c5c8:	bic.w	r1, r0, #7
    c5cc:	mvn.w	ip, #0
    c5d0:	ands.w	r4, r0, #7
    c5d4:	pld	[r1, #32]
    c5d8:	bne.w	c66e <strlen+0xae>
    c5dc:	mov.w	r4, #0
    c5e0:	mvn.w	r0, #7
    c5e4:	ldrd	r2, r3, [r1]
    c5e8:	pld	[r1, #64]	; 0x40
    c5ec:	add.w	r0, r0, #8
    c5f0:	uadd8	r2, r2, ip
    c5f4:	sel	r2, r4, ip
    c5f8:	uadd8	r3, r3, ip
    c5fc:	sel	r3, r2, ip
    c600:	cbnz	r3, c656 <strlen+0x96>
    c602:	ldrd	r2, r3, [r1, #8]
    c606:	uadd8	r2, r2, ip
    c60a:	add.w	r0, r0, #8
    c60e:	sel	r2, r4, ip
    c612:	uadd8	r3, r3, ip
    c616:	sel	r3, r2, ip
    c61a:	cbnz	r3, c656 <strlen+0x96>
    c61c:	ldrd	r2, r3, [r1, #16]
    c620:	uadd8	r2, r2, ip
    c624:	add.w	r0, r0, #8
    c628:	sel	r2, r4, ip
    c62c:	uadd8	r3, r3, ip
    c630:	sel	r3, r2, ip
    c634:	cbnz	r3, c656 <strlen+0x96>
    c636:	ldrd	r2, r3, [r1, #24]
    c63a:	add.w	r1, r1, #32
    c63e:	uadd8	r2, r2, ip
    c642:	add.w	r0, r0, #8
    c646:	sel	r2, r4, ip
    c64a:	uadd8	r3, r3, ip
    c64e:	sel	r3, r2, ip
    c652:	cmp	r3, #0
    c654:	beq.n	c5e4 <strlen+0x24>
    c656:	cmp	r2, #0
    c658:	itt	eq
    c65a:	addeq	r0, #4
    c65c:	moveq	r2, r3
    c65e:	rev	r2, r2
    c660:	clz	r2, r2
    c664:	ldrd	r4, r5, [sp], #8
    c668:	add.w	r0, r0, r2, lsr #3
    c66c:	bx	lr
    c66e:	ldrd	r2, r3, [r1]
    c672:	and.w	r5, r4, #3
    c676:	rsb	r0, r4, #0
    c67a:	mov.w	r5, r5, lsl #3
    c67e:	tst.w	r4, #4
    c682:	pld	[r1, #64]	; 0x40
    c686:	lsl.w	r5, ip, r5
    c68a:	orn	r2, r2, r5
    c68e:	itt	ne
    c690:	ornne	r3, r3, r5
    c694:	movne	r2, ip
    c696:	mov.w	r4, #0
    c69a:	b.n	c5f0 <strlen+0x30>

0000c69c <strncmp>:
    c69c:	cmp	r2, #0
    c69e:	beq.n	c724 <strncmp+0x88>
    c6a0:	orr.w	r3, r0, r1
    c6a4:	ands.w	r3, r3, #3
    c6a8:	push	{r4, r5, r6, r7}
    c6aa:	bne.n	c6f8 <strncmp+0x5c>
    c6ac:	cmp	r2, #3
    c6ae:	bls.n	c6f8 <strncmp+0x5c>
    c6b0:	ldr	r4, [r0, #0]
    c6b2:	ldr	r5, [r1, #0]
    c6b4:	cmp	r4, r5
    c6b6:	bne.n	c6f8 <strncmp+0x5c>
    c6b8:	subs	r2, #4
    c6ba:	beq.n	c728 <strncmp+0x8c>
    c6bc:	sub.w	r5, r4, #16843009	; 0x1010101
    c6c0:	bic.w	r4, r5, r4
    c6c4:	tst.w	r4, #2155905152	; 0x80808080
    c6c8:	bne.n	c72e <strncmp+0x92>
    c6ca:	adds	r7, r0, #4
    c6cc:	adds	r5, r1, #4
    c6ce:	b.n	c6ec <strncmp+0x50>
    c6d0:	ldr.w	r3, [r7], #4
    c6d4:	ldr	r6, [r1, #0]
    c6d6:	sub.w	r4, r3, #16843009	; 0x1010101
    c6da:	cmp	r3, r6
    c6dc:	bic.w	r4, r4, r3
    c6e0:	bne.n	c6f8 <strncmp+0x5c>
    c6e2:	subs	r2, #4
    c6e4:	beq.n	c728 <strncmp+0x8c>
    c6e6:	tst.w	r4, #2155905152	; 0x80808080
    c6ea:	bne.n	c734 <strncmp+0x98>
    c6ec:	cmp	r2, #3
    c6ee:	mov	r1, r5
    c6f0:	mov	r0, r7
    c6f2:	add.w	r5, r5, #4
    c6f6:	bhi.n	c6d0 <strncmp+0x34>
    c6f8:	ldrb	r3, [r0, #0]
    c6fa:	ldrb	r4, [r1, #0]
    c6fc:	cmp	r4, r3
    c6fe:	add.w	r2, r2, #4294967295
    c702:	bne.n	c71e <strncmp+0x82>
    c704:	cbz	r2, c728 <strncmp+0x8c>
    c706:	cbnz	r4, c70e <strncmp+0x72>
    c708:	b.n	c738 <strncmp+0x9c>
    c70a:	cbz	r2, c728 <strncmp+0x8c>
    c70c:	cbz	r3, c72e <strncmp+0x92>
    c70e:	ldrb.w	r3, [r0, #1]!
    c712:	ldrb.w	r4, [r1, #1]!
    c716:	cmp	r3, r4
    c718:	add.w	r2, r2, #4294967295
    c71c:	beq.n	c70a <strncmp+0x6e>
    c71e:	subs	r0, r3, r4
    c720:	pop	{r4, r5, r6, r7}
    c722:	bx	lr
    c724:	mov	r0, r2
    c726:	bx	lr
    c728:	mov	r0, r2
    c72a:	pop	{r4, r5, r6, r7}
    c72c:	bx	lr
    c72e:	mov	r0, r3
    c730:	pop	{r4, r5, r6, r7}
    c732:	bx	lr
    c734:	movs	r0, #0
    c736:	b.n	c720 <strncmp+0x84>
    c738:	mov	r0, r4
    c73a:	b.n	c720 <strncmp+0x84>

0000c73c <sulp>:
    c73c:	push	{r4, r5, r6, lr}
    c73e:	mov	r4, r0
    c740:	mov	r5, r1
    c742:	vmov	d0, r4, r5
    c746:	mov	r6, r2
    c748:	bl	11ea0 <__ulp>
    c74c:	vmov	r0, r1, d0
    c750:	cbz	r6, c772 <sulp+0x36>
    c752:	ubfx	r3, r5, #20, #11
    c756:	rsb	r3, r3, #107	; 0x6b
    c75a:	cmp	r3, #0
    c75c:	ble.n	c772 <sulp+0x36>
    c75e:	lsls	r3, r3, #20
    c760:	add.w	r5, r3, #1069547520	; 0x3fc00000
    c764:	movs	r4, #0
    c766:	add.w	r5, r5, #3145728	; 0x300000
    c76a:	mov	r2, r4
    c76c:	mov	r3, r5
    c76e:	bl	aa30 <__aeabi_dmul>
    c772:	pop	{r4, r5, r6, pc}
    c774:			; <UNDEFINED> instruction: 0xffffffff

0000c778 <_strtod_l>:
    c778:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c77c:	mov	r5, r3
    c77e:	sub	sp, #132	; 0x84
    c780:	movs	r3, #0
    c782:	mov	fp, r0
    c784:	mov	r0, r5
    c786:	mov	r6, r1
    c788:	str	r2, [sp, #24]
    c78a:	str	r3, [sp, #112]	; 0x70
    c78c:	bl	11824 <__localeconv_l>
    c790:	movs	r4, #0
    c792:	movs	r3, #0
    c794:	mov	sl, r0
    c796:	ldr	r0, [r0, #0]
    c798:	strd	r3, r4, [sp, #16]
    c79c:	bl	c5c0 <strlen>
    c7a0:	str	r6, [sp, #108]	; 0x6c
    c7a2:	mov	r9, r0
    c7a4:	mov	r2, r6
    c7a6:	mov	r4, r2
    c7a8:	ldrb.w	r7, [r2], #1
    c7ac:	cmp	r7, #45	; 0x2d
    c7ae:	bhi.w	c910 <_strtod_l+0x198>
    c7b2:	tbb	[pc, r7]
    c7b6:	.short	0xad17
    c7b8:	.word	0xadadadad
    c7bc:	.word	0x81adadad
    c7c0:	.word	0x81818181
    c7c4:	.word	0xadadadad
    c7c8:	.word	0xadadadad
    c7cc:	.word	0xadadadad
    c7d0:	.word	0xadadadad
    c7d4:	.word	0xad81adad
    c7d8:	.word	0xadadadad
    c7dc:	.word	0xadadadad
    c7e0:	.word	0x7ead2bad
    c7e4:	ldr	r3, [sp, #24]
    c7e6:	mov.w	r8, #0
    c7ea:	mov.w	r9, #0
    c7ee:	cbz	r3, c802 <_strtod_l+0x8a>
    c7f0:	movs	r3, #0
    c7f2:	str	r3, [sp, #28]
    c7f4:	ldr	r3, [sp, #24]
    c7f6:	str	r6, [r3, #0]
    c7f8:	ldr	r3, [sp, #28]
    c7fa:	cbz	r3, c802 <_strtod_l+0x8a>
    c7fc:	add.w	r3, r9, #2147483648	; 0x80000000
    c800:	mov	r9, r3
    c802:	vmov	d0, r8, r9
    c806:	add	sp, #132	; 0x84
    c808:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c80c:	movs	r3, #0
    c80e:	str	r3, [sp, #28]
    c810:	adds	r2, r4, #1
    c812:	str	r2, [sp, #108]	; 0x6c
    c814:	ldrb	r7, [r4, #1]
    c816:	cmp	r7, #0
    c818:	beq.n	c7e4 <_strtod_l+0x6c>
    c81a:	cmp	r7, #48	; 0x30
    c81c:	mov	r4, r2
    c81e:	beq.n	c918 <_strtod_l+0x1a0>
    c820:	movs	r3, #0
    c822:	str	r4, [sp, #32]
    c824:	str	r3, [sp, #40]	; 0x28
    c826:	sub.w	r3, r7, #48	; 0x30
    c82a:	cmp	r3, #9
    c82c:	bhi.w	d03e <_strtod_l+0x8c6>
    c830:	mov.w	r8, #0
    c834:	mov	r0, r4
    c836:	mov	r5, r8
    c838:	mov	r4, r8
    c83a:	cmp	r4, #8
    c83c:	it	gt
    c83e:	addgt.w	r8, r8, r8, lsl #2
    c842:	add.w	r3, r5, r5, lsl #2
    c846:	add.w	r0, r0, #1
    c84a:	add.w	r3, r7, r3, lsl #1
    c84e:	str	r0, [sp, #108]	; 0x6c
    c850:	itt	gt
    c852:	addgt.w	r7, r7, r8, lsl #1
    c856:	subgt.w	r8, r7, #48	; 0x30
    c85a:	ldrb	r7, [r0, #0]
    c85c:	it	le
    c85e:	suble.w	r5, r3, #48	; 0x30
    c862:	sub.w	r3, r7, #48	; 0x30
    c866:	cmp	r3, #9
    c868:	add.w	r4, r4, #1
    c86c:	bls.n	c83a <_strtod_l+0xc2>
    c86e:	ldr.w	r1, [sl]
    c872:	mov	r2, r9
    c874:	bl	c69c <strncmp>
    c878:	cbz	r0, c8bc <_strtod_l+0x144>
    c87a:	movs	r0, #0
    c87c:	mov	r3, r7
    c87e:	mov	r9, r0
    c880:	mov	r7, r0
    c882:	mov	sl, r4
    c884:	cmp	r3, #101	; 0x65
    c886:	beq.w	c9ee <_strtod_l+0x276>
    c88a:	cmp	r3, #69	; 0x45
    c88c:	beq.w	c9ee <_strtod_l+0x276>
    c890:	movs	r2, #0
    c892:	cmp	r4, #0
    c894:	bne.n	c93c <_strtod_l+0x1c4>
    c896:	cbnz	r0, c8a0 <_strtod_l+0x128>
    c898:	ldr	r2, [sp, #40]	; 0x28
    c89a:	cmp	r2, #0
    c89c:	beq.w	ce42 <_strtod_l+0x6ca>
    c8a0:	mov.w	r8, #0
    c8a4:	mov.w	r9, #0
    c8a8:	ldr	r3, [sp, #24]
    c8aa:	cmp	r3, #0
    c8ac:	beq.n	c7f8 <_strtod_l+0x80>
    c8ae:	ldr	r6, [sp, #108]	; 0x6c
    c8b0:	b.n	c7f4 <_strtod_l+0x7c>
    c8b2:	movs	r3, #1
    c8b4:	str	r3, [sp, #28]
    c8b6:	b.n	c810 <_strtod_l+0x98>
    c8b8:	str	r2, [sp, #108]	; 0x6c
    c8ba:	b.n	c7a6 <_strtod_l+0x2e>
    c8bc:	ldr	r3, [sp, #108]	; 0x6c
    c8be:	add.w	r2, r3, r9
    c8c2:	str	r2, [sp, #108]	; 0x6c
    c8c4:	ldrb.w	r3, [r3, r9]
    c8c8:	mov	r7, r0
    c8ca:	mov	sl, r4
    c8cc:	sub.w	r2, r3, #48	; 0x30
    c8d0:	cmp	r2, #9
    c8d2:	bhi.w	cdc8 <_strtod_l+0x650>
    c8d6:	adds	r1, r0, #1
    c8d8:	mov	r3, r2
    c8da:	cmp	r2, #0
    c8dc:	beq.w	d61e <_strtod_l+0xea6>
    c8e0:	cmp	r1, #1
    c8e2:	add	r7, r1
    c8e4:	it	ne
    c8e6:	addne	r0, r0, r4
    c8e8:	bne.n	c8f6 <_strtod_l+0x17e>
    c8ea:	b.w	d616 <_strtod_l+0xe9e>
    c8ee:	lsls	r5, r1, #1
    c8f0:	cmp	r4, r0
    c8f2:	beq.w	d26c <_strtod_l+0xaf4>
    c8f6:	adds	r4, #1
    c8f8:	subs	r1, r4, #1
    c8fa:	cmp	r1, #8
    c8fc:	add.w	r1, r5, r5, lsl #2
    c900:	ble.n	c8ee <_strtod_l+0x176>
    c902:	cmp	r4, #16
    c904:	itt	le
    c906:	addle.w	r8, r8, r8, lsl #2
    c90a:	movle.w	r8, r8, lsl #1
    c90e:	b.n	c8f0 <_strtod_l+0x178>
    c910:	movs	r3, #0
    c912:	cmp	r7, #48	; 0x30
    c914:	str	r3, [sp, #28]
    c916:	bne.n	c820 <_strtod_l+0xa8>
    c918:	ldrb	r3, [r4, #1]
    c91a:	cmp	r3, #88	; 0x58
    c91c:	beq.w	d006 <_strtod_l+0x88e>
    c920:	cmp	r3, #120	; 0x78
    c922:	beq.w	d006 <_strtod_l+0x88e>
    c926:	adds	r4, #1
    c928:	str	r4, [sp, #108]	; 0x6c
    c92a:	ldrb	r7, [r4, #0]
    c92c:	cmp	r7, #48	; 0x30
    c92e:	beq.n	c926 <_strtod_l+0x1ae>
    c930:	cmp	r7, #0
    c932:	beq.n	c8a0 <_strtod_l+0x128>
    c934:	movs	r3, #1
    c936:	str	r4, [sp, #32]
    c938:	str	r3, [sp, #40]	; 0x28
    c93a:	b.n	c826 <_strtod_l+0xae>
    c93c:	cmp	r4, #16
    c93e:	sub.w	r3, r2, r7
    c942:	mov	r0, r5
    c944:	mov	r9, r4
    c946:	str	r3, [sp, #44]	; 0x2c
    c948:	it	ge
    c94a:	movge.w	r9, #16
    c94e:	bl	a944 <__aeabi_ui2d>
    c952:	cmp.w	sl, #0
    c956:	it	eq
    c958:	moveq	sl, r4
    c95a:	cmp.w	r9, #9
    c95e:	strd	r0, r1, [sp, #16]
    c962:	ble.n	c98c <_strtod_l+0x214>
    c964:	ldr	r3, [pc, #292]	; (ca8c <_strtod_l+0x314>)
    c966:	add.w	r3, r3, r9, lsl #3
    c96a:	ldrd	r2, r3, [r3, #-72]	; 0x48
    c96e:	bl	aa30 <__aeabi_dmul>
    c972:	mov	r6, r0
    c974:	mov	r0, r8
    c976:	mov	r7, r1
    c978:	bl	a944 <__aeabi_ui2d>
    c97c:	mov	r2, r0
    c97e:	mov	r3, r1
    c980:	mov	r0, r6
    c982:	mov	r1, r7
    c984:	bl	a6cc <__adddf3>
    c988:	strd	r0, r1, [sp, #16]
    c98c:	cmp	r4, #15
    c98e:	bgt.w	ca9c <_strtod_l+0x324>
    c992:	ldr	r3, [sp, #44]	; 0x2c
    c994:	cmp	r3, #0
    c996:	beq.n	c9e8 <_strtod_l+0x270>
    c998:	ble.w	d3d4 <_strtod_l+0xc5c>
    c99c:	ldr	r3, [sp, #44]	; 0x2c
    c99e:	cmp	r3, #22
    c9a0:	bgt.w	d2a0 <_strtod_l+0xb28>
    c9a4:	ldr	r7, [pc, #228]	; (ca8c <_strtod_l+0x314>)
    c9a6:	add.w	r7, r7, r3, lsl #3
    c9aa:	ldrd	r0, r1, [r7]
    c9ae:	ldrd	r2, r3, [sp, #16]
    c9b2:	bl	aa30 <__aeabi_dmul>
    c9b6:	mov	r8, r0
    c9b8:	mov	r9, r1
    c9ba:	b.n	c8a8 <_strtod_l+0x130>
    c9bc:	add	r0, sp, #108	; 0x6c
    c9be:	ldr	r1, [pc, #208]	; (ca90 <_strtod_l+0x318>)
    c9c0:	bl	11658 <__match>
    c9c4:	cmp	r0, #0
    c9c6:	beq.w	c7e4 <_strtod_l+0x6c>
    c9ca:	ldr	r3, [sp, #108]	; 0x6c
    c9cc:	ldr	r1, [pc, #196]	; (ca94 <_strtod_l+0x31c>)
    c9ce:	subs	r3, #1
    c9d0:	add	r0, sp, #108	; 0x6c
    c9d2:	str	r3, [sp, #108]	; 0x6c
    c9d4:	bl	11658 <__match>
    c9d8:	cbnz	r0, c9e0 <_strtod_l+0x268>
    c9da:	ldr	r3, [sp, #108]	; 0x6c
    c9dc:	adds	r3, #1
    c9de:	str	r3, [sp, #108]	; 0x6c
    c9e0:	ldr	r3, [pc, #180]	; (ca98 <_strtod_l+0x320>)
    c9e2:	str	r3, [sp, #20]
    c9e4:	movs	r3, #0
    c9e6:	str	r3, [sp, #16]
    c9e8:	ldrd	r8, r9, [sp, #16]
    c9ec:	b.n	c8a8 <_strtod_l+0x130>
    c9ee:	cmp	r4, #0
    c9f0:	beq.w	cd88 <_strtod_l+0x610>
    c9f4:	ldr	r6, [sp, #108]	; 0x6c
    c9f6:	adds	r3, r6, #1
    c9f8:	str	r3, [sp, #108]	; 0x6c
    c9fa:	ldrb	r3, [r6, #1]
    c9fc:	cmp	r3, #43	; 0x2b
    c9fe:	beq.w	cfbc <_strtod_l+0x844>
    ca02:	cmp	r3, #45	; 0x2d
    ca04:	beq.w	ce32 <_strtod_l+0x6ba>
    ca08:	mov.w	ip, #0
    ca0c:	sub.w	r2, r3, #48	; 0x30
    ca10:	cmp	r2, #9
    ca12:	bhi.w	cfb6 <_strtod_l+0x83e>
    ca16:	cmp	r3, #48	; 0x30
    ca18:	bne.n	ca26 <_strtod_l+0x2ae>
    ca1a:	ldr	r2, [sp, #108]	; 0x6c
    ca1c:	adds	r2, #1
    ca1e:	str	r2, [sp, #108]	; 0x6c
    ca20:	ldrb	r3, [r2, #0]
    ca22:	cmp	r3, #48	; 0x30
    ca24:	beq.n	ca1c <_strtod_l+0x2a4>
    ca26:	sub.w	r2, r3, #49	; 0x31
    ca2a:	cmp	r2, #8
    ca2c:	bhi.w	c890 <_strtod_l+0x118>
    ca30:	ldr	r2, [sp, #108]	; 0x6c
    ca32:	str	r2, [sp, #48]	; 0x30
    ca34:	adds	r1, r2, #1
    ca36:	subs	r3, #48	; 0x30
    ca38:	str	r1, [sp, #108]	; 0x6c
    ca3a:	str	r3, [sp, #44]	; 0x2c
    ca3c:	ldrb	r3, [r2, #1]
    ca3e:	sub.w	lr, r3, #48	; 0x30
    ca42:	cmp.w	lr, #9
    ca46:	bhi.n	ca68 <_strtod_l+0x2f0>
    ca48:	ldr	r2, [sp, #44]	; 0x2c
    ca4a:	adds	r1, #1
    ca4c:	str	r1, [sp, #108]	; 0x6c
    ca4e:	add.w	r2, r2, r2, lsl #2
    ca52:	add.w	r2, r3, r2, lsl #1
    ca56:	ldrb	r3, [r1, #0]
    ca58:	sub.w	lr, r3, #48	; 0x30
    ca5c:	cmp.w	lr, #9
    ca60:	sub.w	r2, r2, #48	; 0x30
    ca64:	bls.n	ca4a <_strtod_l+0x2d2>
    ca66:	str	r2, [sp, #44]	; 0x2c
    ca68:	ldr	r2, [sp, #48]	; 0x30
    ca6a:	subs	r1, r1, r2
    ca6c:	cmp	r1, #8
    ca6e:	bgt.w	d28e <_strtod_l+0xb16>
    ca72:	ldr	r2, [sp, #44]	; 0x2c
    ca74:	movw	r1, #19999	; 0x4e1f
    ca78:	cmp	r2, r1
    ca7a:	it	ge
    ca7c:	movge	r2, r1
    ca7e:	cmp.w	ip, #0
    ca82:	beq.w	c892 <_strtod_l+0x11a>
    ca86:	negs	r2, r2
    ca88:	b.n	c892 <_strtod_l+0x11a>
    ca8a:	nop
    ca8c:	.word	0x000137f0
    ca90:	.word	0x000134fc
    ca94:	.word	0x00013500
    ca98:	.word	0x7ff00000
    ca9c:	ldr	r3, [sp, #44]	; 0x2c
    ca9e:	rsb	r9, r9, r4
    caa2:	add	r9, r3
    caa4:	cmp.w	r9, #0
    caa8:	ble.w	d1ba <_strtod_l+0xa42>
    caac:	ands.w	r1, r9, #15
    cab0:	beq.n	cac8 <_strtod_l+0x350>
    cab2:	ldr	r3, [pc, #756]	; (cda8 <_strtod_l+0x630>)
    cab4:	add.w	r1, r3, r1, lsl #3
    cab8:	ldrd	r0, r1, [r1]
    cabc:	ldrd	r2, r3, [sp, #16]
    cac0:	bl	aa30 <__aeabi_dmul>
    cac4:	strd	r0, r1, [sp, #16]
    cac8:	bics.w	r6, r9, #15
    cacc:	bne.w	cef0 <_strtod_l+0x778>
    cad0:	movs	r3, #0
    cad2:	str	r3, [sp, #40]	; 0x28
    cad4:	str	r5, [sp, #0]
    cad6:	mov	r3, r4
    cad8:	mov	r2, sl
    cada:	ldr	r1, [sp, #32]
    cadc:	mov	r0, fp
    cade:	bl	11980 <__s2b>
    cae2:	str	r0, [sp, #72]	; 0x48
    cae4:	cmp	r0, #0
    cae6:	beq.w	d136 <_strtod_l+0x9be>
    caea:	ldr	r2, [sp, #44]	; 0x2c
    caec:	movs	r7, #0
    caee:	cmp	r2, #0
    caf0:	rsb	r3, r2, #0
    caf4:	it	ge
    caf6:	movge	r3, r7
    caf8:	str	r3, [sp, #48]	; 0x30
    cafa:	bic.w	r3, r2, r2, asr #31
    cafe:	str	r3, [sp, #44]	; 0x2c
    cb00:	mov	sl, r7
    cb02:	ldr	r4, [sp, #72]	; 0x48
    cb04:	mov	r0, fp
    cb06:	ldr	r1, [r4, #4]
    cb08:	bl	118a0 <_Balloc>
    cb0c:	mov	r6, r0
    cb0e:	cmp	r0, #0
    cb10:	beq.w	cfc8 <_strtod_l+0x850>
    cb14:	ldr	r2, [r4, #16]
    cb16:	vldr	d7, [sp, #16]
    cb1a:	adds	r2, #2
    cb1c:	lsls	r2, r2, #2
    cb1e:	add.w	r1, r4, #12
    cb22:	adds	r0, #12
    cb24:	vstr	d7, [sp, #32]
    cb28:	bl	8774 <memcpy>
    cb2c:	vldr	d0, [sp, #32]
    cb30:	add	r2, sp, #120	; 0x78
    cb32:	add	r1, sp, #116	; 0x74
    cb34:	mov	r0, fp
    cb36:	bl	11fc4 <__d2b>
    cb3a:	str	r0, [sp, #112]	; 0x70
    cb3c:	cmp	r0, #0
    cb3e:	beq.w	cfca <_strtod_l+0x852>
    cb42:	movs	r1, #1
    cb44:	mov	r0, fp
    cb46:	bl	11ab4 <__i2b>
    cb4a:	mov	sl, r0
    cb4c:	cmp	r0, #0
    cb4e:	beq.w	cfc8 <_strtod_l+0x850>
    cb52:	ldr	r2, [sp, #116]	; 0x74
    cb54:	cmp	r2, #0
    cb56:	blt.w	cdc0 <_strtod_l+0x648>
    cb5a:	ldr	r3, [sp, #48]	; 0x30
    cb5c:	ldr	r4, [sp, #44]	; 0x2c
    cb5e:	adds	r5, r3, r2
    cb60:	ldr	r0, [sp, #40]	; 0x28
    cb62:	ldr	r3, [sp, #120]	; 0x78
    cb64:	ldr	r1, [pc, #580]	; (cdac <_strtod_l+0x634>)
    cb66:	subs	r2, r2, r0
    cb68:	add	r2, r3
    cb6a:	subs	r2, #1
    cb6c:	cmp	r2, r1
    cb6e:	rsb	r3, r3, #54	; 0x36
    cb72:	bge.w	cd52 <_strtod_l+0x5da>
    cb76:	subs	r1, r1, r2
    cb78:	cmp	r1, #31
    cb7a:	sub.w	r3, r3, r1
    cb7e:	bgt.w	cdce <_strtod_l+0x656>
    cb82:	movs	r2, #1
    cb84:	lsls	r2, r1
    cb86:	str	r2, [sp, #56]	; 0x38
    cb88:	movs	r2, #0
    cb8a:	str	r2, [sp, #76]	; 0x4c
    cb8c:	add.w	r9, r5, r3
    cb90:	add	r4, r3
    cb92:	ldr	r3, [sp, #40]	; 0x28
    cb94:	cmp	r5, r9
    cb96:	mov	r2, r5
    cb98:	add	r4, r3
    cb9a:	it	ge
    cb9c:	movge	r2, r9
    cb9e:	cmp	r2, r4
    cba0:	it	ge
    cba2:	movge	r2, r4
    cba4:	cmp	r2, #0
    cba6:	ble.n	cbb0 <_strtod_l+0x438>
    cba8:	rsb	r9, r2, r9
    cbac:	subs	r4, r4, r2
    cbae:	subs	r5, r5, r2
    cbb0:	ldr	r3, [sp, #48]	; 0x30
    cbb2:	cbz	r3, cbe4 <_strtod_l+0x46c>
    cbb4:	mov	r1, sl
    cbb6:	mov	r2, r3
    cbb8:	mov	r0, fp
    cbba:	bl	11bf8 <__pow5mult>
    cbbe:	mov	sl, r0
    cbc0:	cmp	r0, #0
    cbc2:	beq.w	cfc8 <_strtod_l+0x850>
    cbc6:	mov	r1, r0
    cbc8:	ldr	r2, [sp, #112]	; 0x70
    cbca:	mov	r0, fp
    cbcc:	bl	11ac8 <__multiply>
    cbd0:	cmp	r0, #0
    cbd2:	beq.w	cfc8 <_strtod_l+0x850>
    cbd6:	str	r0, [sp, #52]	; 0x34
    cbd8:	ldr	r1, [sp, #112]	; 0x70
    cbda:	mov	r0, fp
    cbdc:	bl	118ec <_Bfree>
    cbe0:	ldr	r2, [sp, #52]	; 0x34
    cbe2:	str	r2, [sp, #112]	; 0x70
    cbe4:	cmp.w	r9, #0
    cbe8:	ble.n	cbfc <_strtod_l+0x484>
    cbea:	mov	r2, r9
    cbec:	ldr	r1, [sp, #112]	; 0x70
    cbee:	mov	r0, fp
    cbf0:	bl	11c98 <__lshift>
    cbf4:	str	r0, [sp, #112]	; 0x70
    cbf6:	cmp	r0, #0
    cbf8:	beq.w	cfca <_strtod_l+0x852>
    cbfc:	ldr	r3, [sp, #44]	; 0x2c
    cbfe:	cbz	r3, cc12 <_strtod_l+0x49a>
    cc00:	mov	r1, r6
    cc02:	ldr	r2, [sp, #44]	; 0x2c
    cc04:	mov	r0, fp
    cc06:	bl	11bf8 <__pow5mult>
    cc0a:	mov	r6, r0
    cc0c:	cmp	r0, #0
    cc0e:	beq.w	cfc8 <_strtod_l+0x850>
    cc12:	cmp	r4, #0
    cc14:	ble.n	cc28 <_strtod_l+0x4b0>
    cc16:	mov	r1, r6
    cc18:	mov	r2, r4
    cc1a:	mov	r0, fp
    cc1c:	bl	11c98 <__lshift>
    cc20:	mov	r6, r0
    cc22:	cmp	r0, #0
    cc24:	beq.w	cfc8 <_strtod_l+0x850>
    cc28:	cmp	r5, #0
    cc2a:	ble.n	cc3e <_strtod_l+0x4c6>
    cc2c:	mov	r1, sl
    cc2e:	mov	r2, r5
    cc30:	mov	r0, fp
    cc32:	bl	11c98 <__lshift>
    cc36:	mov	sl, r0
    cc38:	cmp	r0, #0
    cc3a:	beq.w	cfc8 <_strtod_l+0x850>
    cc3e:	mov	r2, r6
    cc40:	ldr	r1, [sp, #112]	; 0x70
    cc42:	mov	r0, fp
    cc44:	bl	11d8c <__mdiff>
    cc48:	mov	r7, r0
    cc4a:	cmp	r0, #0
    cc4c:	beq.w	cfc8 <_strtod_l+0x850>
    cc50:	movs	r3, #0
    cc52:	ldr	r2, [r0, #12]
    cc54:	str	r3, [r0, #12]
    cc56:	mov	r1, sl
    cc58:	str	r2, [sp, #52]	; 0x34
    cc5a:	bl	11d48 <__mcmp>
    cc5e:	cmp	r0, #0
    cc60:	blt.w	d47e <_strtod_l+0xd06>
    cc64:	beq.w	d3f8 <_strtod_l+0xc80>
    cc68:	mov	r1, sl
    cc6a:	mov	r0, r7
    cc6c:	bl	12080 <__ratio>
    cc70:	vmov	r4, r5, d0
    cc74:	movs	r2, #0
    cc76:	mov.w	r3, #1073741824	; 0x40000000
    cc7a:	vmov	r0, s0
    cc7e:	mov	r1, r5
    cc80:	bl	af28 <__aeabi_dcmple>
    cc84:	cmp	r0, #0
    cc86:	beq.n	cd5c <_strtod_l+0x5e4>
    cc88:	ldr	r3, [sp, #52]	; 0x34
    cc8a:	cmp	r3, #0
    cc8c:	beq.w	cdde <_strtod_l+0x666>
    cc90:	vldr	d7, [pc, #260]	; cd98 <_strtod_l+0x620>
    cc94:	ldr	r3, [sp, #20]
    cc96:	ldr	r5, [pc, #280]	; (cdb0 <_strtod_l+0x638>)
    cc98:	vstr	d7, [sp, #56]	; 0x38
    cc9c:	movs	r4, #0
    cc9e:	mov	r8, r3
    cca0:	ldr.w	r9, [pc, #276]	; cdb8 <_strtod_l+0x640>
    cca4:	ldr	r3, [pc, #268]	; (cdb4 <_strtod_l+0x63c>)
    cca6:	and.w	r9, r8, r9
    ccaa:	cmp	r9, r3
    ccac:	beq.w	d0dc <_strtod_l+0x964>
    ccb0:	ldr	r3, [sp, #40]	; 0x28
    ccb2:	cbz	r3, cd00 <_strtod_l+0x588>
    ccb4:	cmp.w	r9, #111149056	; 0x6a00000
    ccb8:	bhi.n	cd00 <_strtod_l+0x588>
    ccba:	add	r3, pc, #228	; (adr r3, cda0 <_strtod_l+0x628>)
    ccbc:	ldrd	r2, r3, [r3]
    ccc0:	ldrd	r0, r1, [sp, #56]	; 0x38
    ccc4:	bl	af28 <__aeabi_dcmple>
    ccc8:	cbz	r0, ccf8 <_strtod_l+0x580>
    ccca:	ldrd	r0, r1, [sp, #56]	; 0x38
    ccce:	bl	afe0 <__aeabi_d2uiz>
    ccd2:	cmp	r0, #0
    ccd4:	beq.w	d358 <_strtod_l+0xbe0>
    ccd8:	bl	a944 <__aeabi_ui2d>
    ccdc:	strd	r0, r1, [sp, #56]	; 0x38
    cce0:	ldr	r3, [sp, #52]	; 0x34
    cce2:	cmp	r3, #0
    cce4:	bne.w	d34e <_strtod_l+0xbd6>
    cce8:	ldrd	r1, r2, [sp, #56]	; 0x38
    ccec:	add.w	r3, r2, #2147483648	; 0x80000000
    ccf0:	str	r1, [sp, #80]	; 0x50
    ccf2:	str	r3, [sp, #84]	; 0x54
    ccf4:	ldrd	r4, r5, [sp, #80]	; 0x50
    ccf8:	add.w	r3, r5, #112197632	; 0x6b00000
    ccfc:	rsb	r5, r9, r3
    cd00:	vldr	d0, [sp, #32]
    cd04:	bl	11ea0 <__ulp>
    cd08:	mov	r0, r4
    cd0a:	vmov	r2, r3, d0
    cd0e:	mov	r1, r5
    cd10:	bl	aa30 <__aeabi_dmul>
    cd14:	ldrd	r2, r3, [sp, #32]
    cd18:	bl	a6cc <__adddf3>
    cd1c:	strd	r0, r1, [sp, #16]
    cd20:	mov	r4, r1
    cd22:	ldr	r3, [sp, #40]	; 0x28
    cd24:	cbnz	r3, cd30 <_strtod_l+0x5b8>
    cd26:	ldr	r3, [pc, #144]	; (cdb8 <_strtod_l+0x640>)
    cd28:	ands	r3, r4
    cd2a:	cmp	r9, r3
    cd2c:	beq.w	d14c <_strtod_l+0x9d4>
    cd30:	ldr	r1, [sp, #112]	; 0x70
    cd32:	mov	r0, fp
    cd34:	bl	118ec <_Bfree>
    cd38:	mov	r1, r6
    cd3a:	mov	r0, fp
    cd3c:	bl	118ec <_Bfree>
    cd40:	mov	r1, sl
    cd42:	mov	r0, fp
    cd44:	bl	118ec <_Bfree>
    cd48:	mov	r1, r7
    cd4a:	mov	r0, fp
    cd4c:	bl	118ec <_Bfree>
    cd50:	b.n	cb02 <_strtod_l+0x38a>
    cd52:	movs	r2, #0
    cd54:	str	r2, [sp, #76]	; 0x4c
    cd56:	movs	r2, #1
    cd58:	str	r2, [sp, #56]	; 0x38
    cd5a:	b.n	cb8c <_strtod_l+0x414>
    cd5c:	ldr	r3, [pc, #92]	; (cdbc <_strtod_l+0x644>)
    cd5e:	mov	r0, r4
    cd60:	mov	r1, r5
    cd62:	movs	r2, #0
    cd64:	bl	aa30 <__aeabi_dmul>
    cd68:	ldr	r3, [sp, #52]	; 0x34
    cd6a:	strd	r0, r1, [sp, #56]	; 0x38
    cd6e:	cmp	r3, #0
    cd70:	bne.n	ce28 <_strtod_l+0x6b0>
    cd72:	add.w	r3, r1, #2147483648	; 0x80000000
    cd76:	str	r0, [sp, #64]	; 0x40
    cd78:	str	r3, [sp, #68]	; 0x44
    cd7a:	ldr	r3, [sp, #20]
    cd7c:	ldrd	r4, r5, [sp, #64]	; 0x40
    cd80:	mov	r8, r3
    cd82:	b.n	cca0 <_strtod_l+0x528>
    cd84:	mov.w	r9, #1
    cd88:	cmp	r0, #0
    cd8a:	bne.n	ce3e <_strtod_l+0x6c6>
    cd8c:	ldr	r3, [sp, #40]	; 0x28
    cd8e:	cmp	r3, #0
    cd90:	beq.w	c7e4 <_strtod_l+0x6c>
    cd94:	mov	r4, r0
    cd96:	b.n	c9f4 <_strtod_l+0x27c>
    cd98:	.word	0x00000000
    cd9c:	.word	0x3ff00000
    cda0:	.word	0xffc00000
    cda4:	.word	0x41dfffff
    cda8:	.word	0x000137f0
    cdac:	.word	0xfffffc02
    cdb0:	.word	0x3ff00000
    cdb4:	.word	0x7fe00000
    cdb8:	.word	0x7ff00000
    cdbc:	.word	0x3fe00000
    cdc0:	ldr	r3, [sp, #44]	; 0x2c
    cdc2:	ldr	r5, [sp, #48]	; 0x30
    cdc4:	subs	r4, r3, r2
    cdc6:	b.n	cb60 <_strtod_l+0x3e8>
    cdc8:	mov.w	r9, #1
    cdcc:	b.n	c884 <_strtod_l+0x10c>
    cdce:	ldr	r1, [pc, #736]	; (d0b0 <_strtod_l+0x938>)
    cdd0:	subs	r1, r1, r2
    cdd2:	movs	r2, #1
    cdd4:	lsl.w	r1, r2, r1
    cdd8:	str	r1, [sp, #76]	; 0x4c
    cdda:	str	r2, [sp, #56]	; 0x38
    cddc:	b.n	cb8c <_strtod_l+0x414>
    cdde:	ldrd	r1, r2, [sp, #16]
    cde2:	cmp	r1, #0
    cde4:	bne.w	cf7a <_strtod_l+0x802>
    cde8:	ubfx	r3, r2, #0, #20
    cdec:	mov	r8, r2
    cdee:	cmp	r3, #0
    cdf0:	bne.w	cf86 <_strtod_l+0x80e>
    cdf4:	movs	r2, #0
    cdf6:	ldr	r3, [pc, #700]	; (d0b4 <_strtod_l+0x93c>)
    cdf8:	mov	r0, r4
    cdfa:	mov	r1, r5
    cdfc:	bl	af14 <__aeabi_dcmplt>
    ce00:	cmp	r0, #0
    ce02:	bne.w	d502 <_strtod_l+0xd8a>
    ce06:	movs	r2, #0
    ce08:	ldr	r3, [pc, #684]	; (d0b8 <_strtod_l+0x940>)
    ce0a:	mov	r0, r4
    ce0c:	mov	r1, r5
    ce0e:	bl	aa30 <__aeabi_dmul>
    ce12:	mov	r2, r1
    ce14:	mov	r1, r0
    ce16:	strd	r1, r2, [sp, #56]	; 0x38
    ce1a:	add.w	r3, r2, #2147483648	; 0x80000000
    ce1e:	str	r0, [sp, #96]	; 0x60
    ce20:	str	r3, [sp, #100]	; 0x64
    ce22:	ldrd	r4, r5, [sp, #96]	; 0x60
    ce26:	b.n	cca0 <_strtod_l+0x528>
    ce28:	vldr	d7, [sp, #56]	; 0x38
    ce2c:	vstr	d7, [sp, #64]	; 0x40
    ce30:	b.n	cd7a <_strtod_l+0x602>
    ce32:	mov.w	ip, #1
    ce36:	adds	r3, r6, #2
    ce38:	str	r3, [sp, #108]	; 0x6c
    ce3a:	ldrb	r3, [r6, #2]
    ce3c:	b.n	ca0c <_strtod_l+0x294>
    ce3e:	movs	r4, #0
    ce40:	b.n	c9f4 <_strtod_l+0x27c>
    ce42:	cmp.w	r9, #0
    ce46:	bne.w	c7e4 <_strtod_l+0x6c>
    ce4a:	subs	r3, #73	; 0x49
    ce4c:	cmp	r3, #37	; 0x25
    ce4e:	bhi.w	c7e4 <_strtod_l+0x6c>
    ce52:	add	r2, pc, #4	; (adr r2, ce58 <_strtod_l+0x6e0>)
    ce54:	ldr.w	pc, [r2, r3, lsl #2]
    ce58:	.word	0x0000c9bd
    ce5c:	.word	0x0000c7e5
    ce60:	.word	0x0000c7e5
    ce64:	.word	0x0000c7e5
    ce68:	.word	0x0000c7e5
    ce6c:	.word	0x0000cf95
    ce70:	.word	0x0000c7e5
    ce74:	.word	0x0000c7e5
    ce78:	.word	0x0000c7e5
    ce7c:	.word	0x0000c7e5
    ce80:	.word	0x0000c7e5
    ce84:	.word	0x0000c7e5
    ce88:	.word	0x0000c7e5
    ce8c:	.word	0x0000c7e5
    ce90:	.word	0x0000c7e5
    ce94:	.word	0x0000c7e5
    ce98:	.word	0x0000c7e5
    ce9c:	.word	0x0000c7e5
    cea0:	.word	0x0000c7e5
    cea4:	.word	0x0000c7e5
    cea8:	.word	0x0000c7e5
    ceac:	.word	0x0000c7e5
    ceb0:	.word	0x0000c7e5
    ceb4:	.word	0x0000c7e5
    ceb8:	.word	0x0000c7e5
    cebc:	.word	0x0000c7e5
    cec0:	.word	0x0000c7e5
    cec4:	.word	0x0000c7e5
    cec8:	.word	0x0000c7e5
    cecc:	.word	0x0000c7e5
    ced0:	.word	0x0000c7e5
    ced4:	.word	0x0000c7e5
    ced8:	.word	0x0000c9bd
    cedc:	.word	0x0000c7e5
    cee0:	.word	0x0000c7e5
    cee4:	.word	0x0000c7e5
    cee8:	.word	0x0000c7e5
    ceec:	.word	0x0000cf95
    cef0:	cmp.w	r6, #308	; 0x134
    cef4:	bgt.w	d136 <_strtod_l+0x9be>
    cef8:	asrs	r6, r6, #4
    cefa:	cmp	r6, #1
    cefc:	ldr.w	r9, [pc, #472]	; d0d8 <_strtod_l+0x960>
    cf00:	ble.w	d536 <_strtod_l+0xdbe>
    cf04:	ldrd	r0, r1, [sp, #16]
    cf08:	movs	r3, #0
    cf0a:	mov	r7, r9
    cf0c:	mov	r8, r3
    cf0e:	tst.w	r6, #1
    cf12:	add.w	r8, r8, #1
    cf16:	mov.w	r6, r6, asr #1
    cf1a:	beq.n	cf26 <_strtod_l+0x7ae>
    cf1c:	ldrd	r2, r3, [r7]
    cf20:	bl	aa30 <__aeabi_dmul>
    cf24:	movs	r3, #1
    cf26:	cmp	r6, #1
    cf28:	add.w	r7, r7, #8
    cf2c:	bne.n	cf0e <_strtod_l+0x796>
    cf2e:	cmp	r3, #0
    cf30:	bne.w	d5fa <_strtod_l+0xe82>
    cf34:	ldr	r3, [sp, #20]
    cf36:	sub.w	r3, r3, #55574528	; 0x3500000
    cf3a:	str	r3, [sp, #20]
    cf3c:	add.w	r8, r9, r8, lsl #3
    cf40:	ldrd	r2, r3, [sp, #16]
    cf44:	ldrd	r0, r1, [r8]
    cf48:	bl	aa30 <__aeabi_dmul>
    cf4c:	bic.w	r3, r1, #2147483648	; 0x80000000
    cf50:	lsrs	r3, r3, #20
    cf52:	ldr	r2, [pc, #360]	; (d0bc <_strtod_l+0x944>)
    cf54:	lsls	r3, r3, #20
    cf56:	cmp	r3, r2
    cf58:	strd	r0, r1, [sp, #16]
    cf5c:	bhi.w	d136 <_strtod_l+0x9be>
    cf60:	sub.w	r2, r2, #1048576	; 0x100000
    cf64:	cmp	r3, r2
    cf66:	bls.w	d4f8 <_strtod_l+0xd80>
    cf6a:	ldr	r3, [pc, #340]	; (d0c0 <_strtod_l+0x948>)
    cf6c:	str	r3, [sp, #20]
    cf6e:	movs	r3, #0
    cf70:	str	r3, [sp, #40]	; 0x28
    cf72:	mov.w	r3, #4294967295
    cf76:	str	r3, [sp, #16]
    cf78:	b.n	cad4 <_strtod_l+0x35c>
    cf7a:	ldrd	r1, r2, [sp, #16]
    cf7e:	cmp	r1, #1
    cf80:	beq.w	d362 <_strtod_l+0xbea>
    cf84:	mov	r8, r2
    cf86:	vldr	d7, [pc, #288]	; d0a8 <_strtod_l+0x930>
    cf8a:	movs	r4, #0
    cf8c:	ldr	r5, [pc, #308]	; (d0c4 <_strtod_l+0x94c>)
    cf8e:	vstr	d7, [sp, #56]	; 0x38
    cf92:	b.n	cca0 <_strtod_l+0x528>
    cf94:	add	r0, sp, #108	; 0x6c
    cf96:	ldr	r1, [pc, #304]	; (d0c8 <_strtod_l+0x950>)
    cf98:	bl	11658 <__match>
    cf9c:	cmp	r0, #0
    cf9e:	beq.w	c7e4 <_strtod_l+0x6c>
    cfa2:	ldr	r3, [sp, #108]	; 0x6c
    cfa4:	ldrb	r3, [r3, #0]
    cfa6:	cmp	r3, #40	; 0x28
    cfa8:	beq.w	d5b0 <_strtod_l+0xe38>
    cfac:	ldr	r3, [pc, #284]	; (d0cc <_strtod_l+0x954>)
    cfae:	str	r3, [sp, #20]
    cfb0:	movs	r3, #0
    cfb2:	str	r3, [sp, #16]
    cfb4:	b.n	c9e8 <_strtod_l+0x270>
    cfb6:	str	r6, [sp, #108]	; 0x6c
    cfb8:	movs	r2, #0
    cfba:	b.n	c892 <_strtod_l+0x11a>
    cfbc:	mov.w	ip, #0
    cfc0:	b.n	ce36 <_strtod_l+0x6be>
    cfc2:	adds	r3, #1
    cfc4:	bne.w	d596 <_strtod_l+0xe1e>
    cfc8:	ldr	r0, [sp, #112]	; 0x70
    cfca:	ldr	r3, [pc, #260]	; (d0d0 <_strtod_l+0x958>)
    cfcc:	str	r3, [sp, #20]
    cfce:	movs	r2, #0
    cfd0:	str	r2, [sp, #16]
    cfd2:	ldrd	r8, r9, [sp, #16]
    cfd6:	movs	r3, #34	; 0x22
    cfd8:	str.w	r3, [fp]
    cfdc:	mov	r1, r0
    cfde:	mov	r0, fp
    cfe0:	bl	118ec <_Bfree>
    cfe4:	mov	r1, r6
    cfe6:	mov	r0, fp
    cfe8:	bl	118ec <_Bfree>
    cfec:	mov	r1, sl
    cfee:	mov	r0, fp
    cff0:	bl	118ec <_Bfree>
    cff4:	ldr	r1, [sp, #72]	; 0x48
    cff6:	mov	r0, fp
    cff8:	bl	118ec <_Bfree>
    cffc:	mov	r1, r7
    cffe:	mov	r0, fp
    d000:	bl	118ec <_Bfree>
    d004:	b.n	c8a8 <_strtod_l+0x130>
    d006:	ldr	r2, [sp, #28]
    d008:	str	r5, [sp, #8]
    d00a:	add	r3, sp, #112	; 0x70
    d00c:	str	r2, [sp, #4]
    d00e:	str	r3, [sp, #0]
    d010:	ldr	r2, [pc, #192]	; (d0d4 <_strtod_l+0x95c>)
    d012:	add	r3, sp, #116	; 0x74
    d014:	add	r1, sp, #108	; 0x6c
    d016:	mov	r0, fp
    d018:	bl	11148 <__gethex>
    d01c:	ands.w	r6, r0, #7
    d020:	mov	r5, r0
    d022:	beq.w	c8a0 <_strtod_l+0x128>
    d026:	cmp	r6, #6
    d028:	bne.w	d2d8 <_strtod_l+0xb60>
    d02c:	adds	r4, #1
    d02e:	movs	r3, #0
    d030:	str	r4, [sp, #108]	; 0x6c
    d032:	mov.w	r8, #0
    d036:	mov.w	r9, #0
    d03a:	str	r3, [sp, #28]
    d03c:	b.n	c8a8 <_strtod_l+0x130>
    d03e:	ldr.w	r1, [sl]
    d042:	mov	r0, r4
    d044:	mov	r2, r9
    d046:	bl	c69c <strncmp>
    d04a:	cbz	r0, d060 <_strtod_l+0x8e8>
    d04c:	mov.w	sl, #0
    d050:	mov	r3, r7
    d052:	mov	r8, sl
    d054:	mov	r5, sl
    d056:	mov	r0, sl
    d058:	mov	r7, sl
    d05a:	mov	r4, sl
    d05c:	mov	r9, sl
    d05e:	b.n	c884 <_strtod_l+0x10c>
    d060:	ldr	r3, [sp, #108]	; 0x6c
    d062:	add.w	r2, r3, r9
    d066:	str	r2, [sp, #108]	; 0x6c
    d068:	ldrb.w	r3, [r3, r9]
    d06c:	cmp	r3, #48	; 0x30
    d06e:	bne.n	d07e <_strtod_l+0x906>
    d070:	adds	r2, #1
    d072:	str	r2, [sp, #108]	; 0x6c
    d074:	ldrb	r3, [r2, #0]
    d076:	cmp	r3, #48	; 0x30
    d078:	add.w	r0, r0, #1
    d07c:	beq.n	d070 <_strtod_l+0x8f8>
    d07e:	sub.w	r2, r3, #49	; 0x31
    d082:	cmp	r2, #8
    d084:	bls.w	d380 <_strtod_l+0xc08>
    d088:	mov.w	sl, #0
    d08c:	cmp	r3, #101	; 0x65
    d08e:	mov	r8, sl
    d090:	mov	r5, sl
    d092:	mov	r7, sl
    d094:	beq.w	cd84 <_strtod_l+0x60c>
    d098:	mov	r4, sl
    d09a:	mov.w	r9, #1
    d09e:	b.w	c88a <_strtod_l+0x112>
    d0a2:	nop
    d0a4:	nop.w
    d0a8:	.word	0x00000000
    d0ac:	.word	0x3ff00000
    d0b0:	.word	0xfffffbe2
    d0b4:	.word	0x3ff00000
    d0b8:	.word	0x3fe00000
    d0bc:	.word	0x7ca00000
    d0c0:	.word	0x7fefffff
    d0c4:	.word	0xbff00000
    d0c8:	.word	0x00013508
    d0cc:	.word	0xfff80000
    d0d0:	.word	0x7ff00000
    d0d4:	.word	0x000134e8
    d0d8:	.word	0x000138b8
    d0dc:	sub.w	r3, r8, #55574528	; 0x3500000
    d0e0:	str	r3, [sp, #20]
    d0e2:	vldr	d7, [sp, #16]
    d0e6:	vmov.f32	s0, s14
    d0ea:	vmov.f32	s1, s15
    d0ee:	bl	11ea0 <__ulp>
    d0f2:	mov	r0, r4
    d0f4:	vmov	r2, r3, d0
    d0f8:	mov	r1, r5
    d0fa:	bl	aa30 <__aeabi_dmul>
    d0fe:	ldrd	r2, r3, [sp, #16]
    d102:	bl	a6cc <__adddf3>
    d106:	bic.w	r3, r1, #2147483648	; 0x80000000
    d10a:	strd	r0, r1, [sp, #16]
    d10e:	lsrs	r3, r3, #20
    d110:	ldr	r2, [pc, #684]	; (d3c0 <_strtod_l+0xc48>)
    d112:	ldrd	r0, r1, [sp, #32]
    d116:	lsls	r3, r3, #20
    d118:	cmp	r3, r2
    d11a:	strd	r0, r1, [sp, #88]	; 0x58
    d11e:	bls.w	d296 <_strtod_l+0xb1e>
    d122:	ldr	r3, [pc, #672]	; (d3c4 <_strtod_l+0xc4c>)
    d124:	cmp	r1, r3
    d126:	beq.w	d4ee <_strtod_l+0xd76>
    d12a:	ldr	r3, [pc, #664]	; (d3c4 <_strtod_l+0xc4c>)
    d12c:	str	r3, [sp, #20]
    d12e:	mov.w	r3, #4294967295
    d132:	str	r3, [sp, #16]
    d134:	b.n	cd30 <_strtod_l+0x5b8>
    d136:	ldr	r3, [pc, #656]	; (d3c8 <_strtod_l+0xc50>)
    d138:	str	r3, [sp, #20]
    d13a:	movs	r2, #0
    d13c:	movs	r3, #34	; 0x22
    d13e:	str	r2, [sp, #16]
    d140:	ldrd	r8, r9, [sp, #16]
    d144:	str.w	r3, [fp]
    d148:	b.w	c8a8 <_strtod_l+0x130>
    d14c:	ldrd	r8, r9, [sp, #56]	; 0x38
    d150:	mov	r1, r9
    d152:	mov	r0, r8
    d154:	bl	af90 <__aeabi_d2iz>
    d158:	bl	a964 <__aeabi_i2d>
    d15c:	mov	r3, r1
    d15e:	mov	r2, r0
    d160:	mov	r1, r9
    d162:	mov	r0, r8
    d164:	bl	a6c8 <__aeabi_dsub>
    d168:	ldr	r3, [sp, #52]	; 0x34
    d16a:	mov	r8, r0
    d16c:	mov	r9, r1
    d16e:	cbnz	r3, d192 <_strtod_l+0xa1a>
    d170:	ldr	r3, [sp, #16]
    d172:	cbnz	r3, d192 <_strtod_l+0xa1a>
    d174:	ubfx	r4, r4, #0, #20
    d178:	cbnz	r4, d192 <_strtod_l+0xa1a>
    d17a:	add	r3, pc, #548	; (adr r3, d3a0 <_strtod_l+0xc28>)
    d17c:	ldrd	r2, r3, [r3]
    d180:	bl	af14 <__aeabi_dcmplt>
    d184:	cmp	r0, #0
    d186:	beq.w	cd30 <_strtod_l+0x5b8>
    d18a:	ldrd	r8, r9, [sp, #16]
    d18e:	ldr	r0, [sp, #112]	; 0x70
    d190:	b.n	cfdc <_strtod_l+0x864>
    d192:	add	r3, pc, #532	; (adr r3, d3a8 <_strtod_l+0xc30>)
    d194:	ldrd	r2, r3, [r3]
    d198:	mov	r0, r8
    d19a:	mov	r1, r9
    d19c:	bl	af14 <__aeabi_dcmplt>
    d1a0:	cmp	r0, #0
    d1a2:	bne.n	d18a <_strtod_l+0xa12>
    d1a4:	mov	r0, r8
    d1a6:	mov	r1, r9
    d1a8:	add	r3, pc, #516	; (adr r3, d3b0 <_strtod_l+0xc38>)
    d1aa:	ldrd	r2, r3, [r3]
    d1ae:	bl	af50 <__aeabi_dcmpgt>
    d1b2:	cmp	r0, #0
    d1b4:	beq.w	cd30 <_strtod_l+0x5b8>
    d1b8:	b.n	d18a <_strtod_l+0xa12>
    d1ba:	beq.w	cad0 <_strtod_l+0x358>
    d1be:	rsb	r6, r9, #0
    d1c2:	ands.w	r2, r6, #15
    d1c6:	beq.n	d1de <_strtod_l+0xa66>
    d1c8:	ldr	r3, [pc, #512]	; (d3cc <_strtod_l+0xc54>)
    d1ca:	add.w	r3, r3, r2, lsl #3
    d1ce:	ldrd	r0, r1, [sp, #16]
    d1d2:	ldrd	r2, r3, [r3]
    d1d6:	bl	ac84 <__aeabi_ddiv>
    d1da:	strd	r0, r1, [sp, #16]
    d1de:	asrs	r6, r6, #4
    d1e0:	beq.w	cad0 <_strtod_l+0x358>
    d1e4:	cmp	r6, #31
    d1e6:	bgt.n	d25a <_strtod_l+0xae2>
    d1e8:	ands.w	r3, r6, #16
    d1ec:	beq.w	d560 <_strtod_l+0xde8>
    d1f0:	movs	r3, #106	; 0x6a
    d1f2:	cmp	r6, #0
    d1f4:	str	r3, [sp, #40]	; 0x28
    d1f6:	ble.n	d220 <_strtod_l+0xaa8>
    d1f8:	ldrd	r0, r1, [sp, #16]
    d1fc:	ldr	r7, [pc, #464]	; (d3d0 <_strtod_l+0xc58>)
    d1fe:	movs	r3, #0
    d200:	lsls	r2, r6, #31
    d202:	bpl.n	d20e <_strtod_l+0xa96>
    d204:	ldrd	r2, r3, [r7]
    d208:	bl	aa30 <__aeabi_dmul>
    d20c:	movs	r3, #1
    d20e:	asrs	r6, r6, #1
    d210:	add.w	r7, r7, #8
    d214:	bne.n	d200 <_strtod_l+0xa88>
    d216:	cmp	r3, #0
    d218:	bne.w	d600 <_strtod_l+0xe88>
    d21c:	ldr	r3, [sp, #40]	; 0x28
    d21e:	cbz	r3, d248 <_strtod_l+0xad0>
    d220:	ldrd	r1, r2, [sp, #16]
    d224:	ubfx	r3, r2, #20, #11
    d228:	rsb	r3, r3, #107	; 0x6b
    d22c:	cmp	r3, #0
    d22e:	mov	r1, r2
    d230:	ble.n	d248 <_strtod_l+0xad0>
    d232:	cmp	r3, #31
    d234:	ble.w	d5ea <_strtod_l+0xe72>
    d238:	movs	r2, #0
    d23a:	cmp	r3, #52	; 0x34
    d23c:	str	r2, [sp, #16]
    d23e:	ble.w	d606 <_strtod_l+0xe8e>
    d242:	mov.w	r3, #57671680	; 0x3700000
    d246:	str	r3, [sp, #20]
    d248:	movs	r2, #0
    d24a:	movs	r3, #0
    d24c:	ldrd	r0, r1, [sp, #16]
    d250:	bl	af00 <__aeabi_dcmpeq>
    d254:	cmp	r0, #0
    d256:	beq.w	cad4 <_strtod_l+0x35c>
    d25a:	movs	r3, #34	; 0x22
    d25c:	str.w	r3, [fp]
    d260:	mov.w	r8, #0
    d264:	mov.w	r9, #0
    d268:	b.w	c8a8 <_strtod_l+0x130>
    d26c:	ldr	r1, [sp, #108]	; 0x6c
    d26e:	adds	r4, #1
    d270:	cmp	r0, #8
    d272:	ble.w	d392 <_strtod_l+0xc1a>
    d276:	cmp	r4, #16
    d278:	itt	le
    d27a:	addle.w	r8, r8, r8, lsl #2
    d27e:	addle.w	r8, r2, r8, lsl #1
    d282:	movs	r0, #0
    d284:	adds	r3, r1, #1
    d286:	str	r3, [sp, #108]	; 0x6c
    d288:	ldrb	r3, [r1, #1]
    d28a:	b.w	c8cc <_strtod_l+0x154>
    d28e:	movw	r2, #19999	; 0x4e1f
    d292:	b.w	ca7e <_strtod_l+0x306>
    d296:	ldr	r3, [sp, #20]
    d298:	add.w	r4, r3, #55574528	; 0x3500000
    d29c:	str	r4, [sp, #20]
    d29e:	b.n	cd22 <_strtod_l+0x5aa>
    d2a0:	ldr	r6, [sp, #44]	; 0x2c
    d2a2:	rsb	r3, r4, #37	; 0x25
    d2a6:	cmp	r6, r3
    d2a8:	bgt.w	ca9c <_strtod_l+0x324>
    d2ac:	ldr	r5, [pc, #284]	; (d3cc <_strtod_l+0xc54>)
    d2ae:	rsb	r4, r4, #15
    d2b2:	add.w	r1, r5, r4, lsl #3
    d2b6:	subs	r4, r6, r4
    d2b8:	ldrd	r2, r3, [sp, #16]
    d2bc:	ldrd	r0, r1, [r1]
    d2c0:	add.w	r5, r5, r4, lsl #3
    d2c4:	bl	aa30 <__aeabi_dmul>
    d2c8:	ldrd	r2, r3, [r5]
    d2cc:	bl	aa30 <__aeabi_dmul>
    d2d0:	mov	r8, r0
    d2d2:	mov	r9, r1
    d2d4:	b.w	c8a8 <_strtod_l+0x130>
    d2d8:	ldr	r2, [sp, #112]	; 0x70
    d2da:	cbz	r2, d2ec <_strtod_l+0xb74>
    d2dc:	movs	r1, #53	; 0x35
    d2de:	add	r0, sp, #120	; 0x78
    d2e0:	bl	120e0 <__copybits>
    d2e4:	mov	r0, fp
    d2e6:	ldr	r1, [sp, #112]	; 0x70
    d2e8:	bl	118ec <_Bfree>
    d2ec:	cmp	r6, #6
    d2ee:	bhi.n	d308 <_strtod_l+0xb90>
    d2f0:	tbb	[pc, r6]
    d2f4:	.word	0x1318211d
    d2f8:	.short	0x2104
    d2fa:	.byte	0x1d
    d2fb:	.byte	0x00
    d2fc:	mvn.w	r3, #2147483648	; 0x80000000
    d300:	str	r3, [sp, #20]
    d302:	mov.w	r3, #4294967295
    d306:	str	r3, [sp, #16]
    d308:	lsls	r1, r5, #28
    d30a:	bpl.w	c9e8 <_strtod_l+0x270>
    d30e:	ldr	r3, [sp, #20]
    d310:	orr.w	r3, r3, #2147483648	; 0x80000000
    d314:	str	r3, [sp, #20]
    d316:	b.w	c9e8 <_strtod_l+0x270>
    d31a:	ldr	r3, [pc, #172]	; (d3c8 <_strtod_l+0xc50>)
    d31c:	str	r3, [sp, #20]
    d31e:	movs	r3, #0
    d320:	str	r3, [sp, #16]
    d322:	b.n	d308 <_strtod_l+0xb90>
    d324:	ldr	r3, [sp, #120]	; 0x78
    d326:	str	r3, [sp, #16]
    d328:	ldr	r3, [sp, #124]	; 0x7c
    d32a:	str	r3, [sp, #20]
    d32c:	b.n	d308 <_strtod_l+0xb90>
    d32e:	movs	r3, #0
    d330:	str	r3, [sp, #20]
    d332:	str	r3, [sp, #16]
    d334:	b.n	d308 <_strtod_l+0xb90>
    d336:	ldr	r2, [sp, #116]	; 0x74
    d338:	ldr	r3, [sp, #124]	; 0x7c
    d33a:	ldr	r1, [sp, #120]	; 0x78
    d33c:	str	r1, [sp, #16]
    d33e:	addw	r2, r2, #1075	; 0x433
    d342:	bic.w	r3, r3, #1048576	; 0x100000
    d346:	orr.w	r3, r3, r2, lsl #20
    d34a:	str	r3, [sp, #20]
    d34c:	b.n	d308 <_strtod_l+0xb90>
    d34e:	vldr	d7, [sp, #56]	; 0x38
    d352:	vstr	d7, [sp, #80]	; 0x50
    d356:	b.n	ccf4 <_strtod_l+0x57c>
    d358:	vldr	d7, [pc, #92]	; d3b8 <_strtod_l+0xc40>
    d35c:	vstr	d7, [sp, #56]	; 0x38
    d360:	b.n	cce0 <_strtod_l+0x568>
    d362:	ldrd	r1, r2, [sp, #16]
    d366:	mov	r8, r2
    d368:	cmp	r2, #0
    d36a:	bne.w	cf86 <_strtod_l+0x80e>
    d36e:	movs	r3, #34	; 0x22
    d370:	str.w	r3, [fp]
    d374:	ldr	r0, [sp, #112]	; 0x70
    d376:	mov.w	r8, #0
    d37a:	mov.w	r9, #0
    d37e:	b.n	cfdc <_strtod_l+0x864>
    d380:	ldr	r2, [sp, #108]	; 0x6c
    d382:	str	r2, [sp, #32]
    d384:	movs	r5, #0
    d386:	subs	r3, #48	; 0x30
    d388:	adds	r7, r0, #1
    d38a:	mov	r1, r2
    d38c:	mov	sl, r5
    d38e:	mov	r8, r5
    d390:	movs	r4, #1
    d392:	add.w	r5, r5, r5, lsl #2
    d396:	add.w	r5, r3, r5, lsl #1
    d39a:	movs	r0, #0
    d39c:	b.n	d284 <_strtod_l+0xb0c>
    d39e:	nop
    d3a0:	.word	0x94a03595
    d3a4:	.word	0x3fcfffff
    d3a8:	.word	0x94a03595
    d3ac:	.word	0x3fdfffff
    d3b0:	.word	0x35afe535
    d3b4:	.word	0x3fe00000
    d3b8:	.word	0x00000000
    d3bc:	.word	0x3ff00000
    d3c0:	.word	0x7c9fffff
    d3c4:	.word	0x7fefffff
    d3c8:	.word	0x7ff00000
    d3cc:	.word	0x000137f0
    d3d0:	.word	0x00013520
    d3d4:	ldr	r1, [sp, #44]	; 0x2c
    d3d6:	cmn.w	r1, #22
    d3da:	blt.w	ca9c <_strtod_l+0x324>
    d3de:	ldr	r2, [pc, #600]	; (d638 <_strtod_l+0xec0>)
    d3e0:	sub.w	r2, r2, r1, lsl #3
    d3e4:	ldrd	r2, r3, [r2]
    d3e8:	ldrd	r0, r1, [sp, #16]
    d3ec:	bl	ac84 <__aeabi_ddiv>
    d3f0:	mov	r8, r0
    d3f2:	mov	r9, r1
    d3f4:	b.w	c8a8 <_strtod_l+0x130>
    d3f8:	ldr	r3, [sp, #52]	; 0x34
    d3fa:	ldrd	r8, r9, [sp, #32]
    d3fe:	cmp	r3, #0
    d400:	beq.w	d514 <_strtod_l+0xd9c>
    d404:	ldrd	r4, r5, [sp, #16]
    d408:	ldr	r3, [pc, #560]	; (d63c <_strtod_l+0xec4>)
    d40a:	ubfx	r1, r5, #0, #20
    d40e:	cmp	r1, r3
    d410:	mov	r2, r5
    d412:	beq.w	d56a <_strtod_l+0xdf2>
    d416:	ldr	r3, [sp, #76]	; 0x4c
    d418:	cmp	r3, #0
    d41a:	beq.w	d52c <_strtod_l+0xdb4>
    d41e:	ldr	r2, [sp, #20]
    d420:	tst	r3, r2
    d422:	beq.n	d446 <_strtod_l+0xcce>
    d424:	ldr	r3, [sp, #52]	; 0x34
    d426:	ldr	r2, [sp, #40]	; 0x28
    d428:	ldrd	r0, r1, [sp, #16]
    d42c:	cmp	r3, #0
    d42e:	beq.w	d53c <_strtod_l+0xdc4>
    d432:	bl	c73c <sulp>
    d436:	mov	r2, r0
    d438:	mov	r3, r1
    d43a:	mov	r0, r8
    d43c:	mov	r1, r9
    d43e:	bl	a6cc <__adddf3>
    d442:	mov	r8, r0
    d444:	mov	r9, r1
    d446:	ldr	r3, [sp, #40]	; 0x28
    d448:	cbz	r3, d47a <_strtod_l+0xd02>
    d44a:	ldr	r3, [pc, #500]	; (d640 <_strtod_l+0xec8>)
    d44c:	str	r3, [sp, #92]	; 0x5c
    d44e:	movs	r3, #0
    d450:	str	r3, [sp, #88]	; 0x58
    d452:	ldrd	r2, r3, [sp, #88]	; 0x58
    d456:	mov	r0, r8
    d458:	mov	r1, r9
    d45a:	bl	aa30 <__aeabi_dmul>
    d45e:	mov	r3, r0
    d460:	mov	r4, r1
    d462:	mov	r8, r0
    d464:	mov	r9, r1
    d466:	strd	r3, r4, [sp, #16]
    d46a:	cbnz	r1, d47a <_strtod_l+0xd02>
    d46c:	ldr	r3, [sp, #16]
    d46e:	cbnz	r3, d47a <_strtod_l+0xd02>
    d470:	movs	r3, #34	; 0x22
    d472:	ldr	r0, [sp, #112]	; 0x70
    d474:	str.w	r3, [fp]
    d478:	b.n	cfdc <_strtod_l+0x864>
    d47a:	ldr	r0, [sp, #112]	; 0x70
    d47c:	b.n	cfdc <_strtod_l+0x864>
    d47e:	ldr	r3, [sp, #52]	; 0x34
    d480:	ldrd	r8, r9, [sp, #32]
    d484:	cmp	r3, #0
    d486:	bne.n	d446 <_strtod_l+0xcce>
    d488:	ldrd	r1, r2, [sp, #16]
    d48c:	cmp	r1, #0
    d48e:	bne.n	d446 <_strtod_l+0xcce>
    d490:	ubfx	r3, r2, #0, #20
    d494:	mov	r4, r2
    d496:	cmp	r3, #0
    d498:	bne.n	d446 <_strtod_l+0xcce>
    d49a:	bic.w	r3, r2, #2147483648	; 0x80000000
    d49e:	lsrs	r3, r3, #20
    d4a0:	lsls	r3, r3, #20
    d4a2:	cmp.w	r3, #112197632	; 0x6b00000
    d4a6:	bls.n	d446 <_strtod_l+0xcce>
    d4a8:	ldr	r3, [r7, #20]
    d4aa:	cbnz	r3, d4b2 <_strtod_l+0xd3a>
    d4ac:	ldr	r3, [r7, #16]
    d4ae:	cmp	r3, #1
    d4b0:	ble.n	d446 <_strtod_l+0xcce>
    d4b2:	mov	r1, r7
    d4b4:	movs	r2, #1
    d4b6:	mov	r0, fp
    d4b8:	bl	11c98 <__lshift>
    d4bc:	mov	r1, sl
    d4be:	mov	r7, r0
    d4c0:	bl	11d48 <__mcmp>
    d4c4:	cmp	r0, #0
    d4c6:	ble.n	d446 <_strtod_l+0xcce>
    d4c8:	ldr	r3, [sp, #40]	; 0x28
    d4ca:	cmp	r3, #0
    d4cc:	bne.w	d5d4 <_strtod_l+0xe5c>
    d4d0:	ldr	r3, [pc, #368]	; (d644 <_strtod_l+0xecc>)
    d4d2:	ands	r3, r4
    d4d4:	sub.w	r3, r3, #1048576	; 0x100000
    d4d8:	mvn.w	r3, r3, lsr #20
    d4dc:	mvn.w	r3, r3, lsl #20
    d4e0:	str	r3, [sp, #20]
    d4e2:	mov.w	r3, #4294967295
    d4e6:	str	r3, [sp, #16]
    d4e8:	ldrd	r8, r9, [sp, #16]
    d4ec:	b.n	d446 <_strtod_l+0xcce>
    d4ee:	ldr	r3, [sp, #88]	; 0x58
    d4f0:	adds	r3, #1
    d4f2:	bne.w	d12a <_strtod_l+0x9b2>
    d4f6:	b.n	cfc8 <_strtod_l+0x850>
    d4f8:	add.w	r3, r1, #55574528	; 0x3500000
    d4fc:	str	r3, [sp, #20]
    d4fe:	b.w	cad0 <_strtod_l+0x358>
    d502:	vldr	d7, [pc, #292]	; d628 <_strtod_l+0xeb0>
    d506:	vstr	d7, [sp, #96]	; 0x60
    d50a:	vldr	d7, [pc, #292]	; d630 <_strtod_l+0xeb8>
    d50e:	vstr	d7, [sp, #56]	; 0x38
    d512:	b.n	ce22 <_strtod_l+0x6aa>
    d514:	ldrd	r1, r2, [sp, #16]
    d518:	ubfx	r3, r2, #0, #20
    d51c:	mov	r4, r2
    d51e:	cmp	r3, #0
    d520:	bne.w	d416 <_strtod_l+0xc9e>
    d524:	cmp	r1, #0
    d526:	bne.w	d416 <_strtod_l+0xc9e>
    d52a:	b.n	d4c8 <_strtod_l+0xd50>
    d52c:	ldr	r3, [sp, #56]	; 0x38
    d52e:	ldr	r2, [sp, #16]
    d530:	tst	r3, r2
    d532:	beq.n	d446 <_strtod_l+0xcce>
    d534:	b.n	d424 <_strtod_l+0xcac>
    d536:	mov.w	r8, #0
    d53a:	b.n	cf34 <_strtod_l+0x7bc>
    d53c:	bl	c73c <sulp>
    d540:	mov	r2, r0
    d542:	mov	r3, r1
    d544:	mov	r0, r8
    d546:	mov	r1, r9
    d548:	bl	a6c8 <__aeabi_dsub>
    d54c:	movs	r2, #0
    d54e:	movs	r3, #0
    d550:	mov	r8, r0
    d552:	mov	r9, r1
    d554:	bl	af00 <__aeabi_dcmpeq>
    d558:	cmp	r0, #0
    d55a:	bne.w	d36e <_strtod_l+0xbf6>
    d55e:	b.n	d446 <_strtod_l+0xcce>
    d560:	cmp	r6, #0
    d562:	str	r3, [sp, #40]	; 0x28
    d564:	bgt.w	d1f8 <_strtod_l+0xa80>
    d568:	b.n	d248 <_strtod_l+0xad0>
    d56a:	ldr	r3, [sp, #40]	; 0x28
    d56c:	ldr	r1, [sp, #16]
    d56e:	cbz	r3, d5aa <_strtod_l+0xe32>
    d570:	ldr	r3, [pc, #208]	; (d644 <_strtod_l+0xecc>)
    d572:	ands	r3, r5
    d574:	cmp.w	r3, #111149056	; 0x6a00000
    d578:	bhi.n	d5aa <_strtod_l+0xe32>
    d57a:	lsrs	r3, r3, #20
    d57c:	rsb	r3, r3, #107	; 0x6b
    d580:	mov.w	r0, #4294967295
    d584:	lsl.w	r3, r0, r3
    d588:	cmp	r3, r1
    d58a:	bne.w	d416 <_strtod_l+0xc9e>
    d58e:	ldr	r1, [pc, #184]	; (d648 <_strtod_l+0xed0>)
    d590:	cmp	r2, r1
    d592:	beq.w	cfc2 <_strtod_l+0x84a>
    d596:	ldr	r3, [pc, #172]	; (d644 <_strtod_l+0xecc>)
    d598:	ands	r3, r2
    d59a:	add.w	r3, r3, #1048576	; 0x100000
    d59e:	str	r3, [sp, #20]
    d5a0:	movs	r3, #0
    d5a2:	str	r3, [sp, #16]
    d5a4:	ldrd	r8, r9, [sp, #16]
    d5a8:	b.n	d446 <_strtod_l+0xcce>
    d5aa:	mov.w	r3, #4294967295
    d5ae:	b.n	d588 <_strtod_l+0xe10>
    d5b0:	add	r0, sp, #108	; 0x6c
    d5b2:	add	r2, sp, #120	; 0x78
    d5b4:	ldr	r1, [pc, #148]	; (d64c <_strtod_l+0xed4>)
    d5b6:	bl	11688 <__hexnan>
    d5ba:	cmp	r0, #5
    d5bc:	bne.w	cfac <_strtod_l+0x834>
    d5c0:	ldr	r3, [sp, #124]	; 0x7c
    d5c2:	orr.w	r3, r3, #2139095040	; 0x7f800000
    d5c6:	orr.w	r3, r3, #7340032	; 0x700000
    d5ca:	str	r3, [sp, #20]
    d5cc:	ldr	r3, [sp, #120]	; 0x78
    d5ce:	str	r3, [sp, #16]
    d5d0:	b.w	c9e8 <_strtod_l+0x270>
    d5d4:	ldr	r3, [pc, #108]	; (d644 <_strtod_l+0xecc>)
    d5d6:	ands	r3, r4
    d5d8:	cmp.w	r3, #112197632	; 0x6b00000
    d5dc:	bgt.w	d4d4 <_strtod_l+0xd5c>
    d5e0:	cmp.w	r3, #57671680	; 0x3700000
    d5e4:	bgt.w	d44a <_strtod_l+0xcd2>
    d5e8:	b.n	d36e <_strtod_l+0xbf6>
    d5ea:	mov.w	r2, #4294967295
    d5ee:	lsl.w	r3, r2, r3
    d5f2:	ldr	r2, [sp, #16]
    d5f4:	ands	r2, r3
    d5f6:	str	r2, [sp, #16]
    d5f8:	b.n	d248 <_strtod_l+0xad0>
    d5fa:	strd	r0, r1, [sp, #16]
    d5fe:	b.n	cf34 <_strtod_l+0x7bc>
    d600:	strd	r0, r1, [sp, #16]
    d604:	b.n	d21c <_strtod_l+0xaa4>
    d606:	subs	r3, #32
    d608:	mov.w	r2, #4294967295
    d60c:	lsl.w	r3, r2, r3
    d610:	ands	r3, r1
    d612:	str	r3, [sp, #20]
    d614:	b.n	d248 <_strtod_l+0xad0>
    d616:	mov	r0, r4
    d618:	ldr	r1, [sp, #108]	; 0x6c
    d61a:	adds	r4, #1
    d61c:	b.n	d270 <_strtod_l+0xaf8>
    d61e:	mov	r0, r1
    d620:	ldr	r1, [sp, #108]	; 0x6c
    d622:	b.n	d284 <_strtod_l+0xb0c>
    d624:	nop.w
    d628:	.word	0x00000000
    d62c:	.word	0xbfe00000
    d630:	.word	0x00000000
    d634:	.word	0x3fe00000
    d638:	.word	0x000137f0
    d63c:	.word	0x000fffff
    d640:	.word	0x39500000
    d644:	.word	0x7ff00000
    d648:	.word	0x7fefffff
    d64c:	.word	0x0001350c

0000d650 <_strtod_r>:
    d650:	ldr	r3, [pc, #20]	; (d668 <_strtod_r+0x18>)
    d652:	ldr	r3, [r3, #0]
    d654:	push	{r4}
    d656:	ldr	r3, [r3, #52]	; 0x34
    d658:	ldr	r4, [pc, #16]	; (d66c <_strtod_r+0x1c>)
    d65a:	cmp	r3, #0
    d65c:	it	eq
    d65e:	moveq	r3, r4
    d660:	ldr.w	r4, [sp], #4
    d664:	b.w	c778 <_strtod_l>
    d668:	.word	0x20013fc8
    d66c:	.word	0x20013fcc

0000d670 <_strtol_l.isra.0>:
    d670:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d674:	ldr.w	r9, [sp, #40]	; 0x28
    d678:	mov	r7, r1
    d67a:	mov	r8, r0
    d67c:	mov	r6, r2
    d67e:	mov	r5, r3
    d680:	mov	fp, r1
    d682:	b.n	d686 <_strtol_l.isra.0+0x16>
    d684:	mov	fp, r4
    d686:	mov	r4, fp
    d688:	mov	r0, r9
    d68a:	ldrb.w	sl, [r4], #1
    d68e:	bl	b700 <__locale_ctype_ptr_l>
    d692:	add	r0, sl
    d694:	ldrb	r1, [r0, #1]
    d696:	and.w	r1, r1, #8
    d69a:	and.w	ip, r1, #255	; 0xff
    d69e:	cmp	r1, #0
    d6a0:	bne.n	d684 <_strtol_l.isra.0+0x14>
    d6a2:	mov	r2, sl
    d6a4:	cmp	r2, #45	; 0x2d
    d6a6:	beq.n	d76c <_strtol_l.isra.0+0xfc>
    d6a8:	cmp	r2, #43	; 0x2b
    d6aa:	itt	eq
    d6ac:	ldrbeq.w	r2, [fp, #1]
    d6b0:	addeq.w	r4, fp, #2
    d6b4:	cmp	r5, #0
    d6b6:	beq.n	d740 <_strtol_l.isra.0+0xd0>
    d6b8:	cmp	r5, #16
    d6ba:	beq.n	d788 <_strtol_l.isra.0+0x118>
    d6bc:	mov	r9, r5
    d6be:	cmp.w	ip, #0
    d6c2:	ite	eq
    d6c4:	mvneq.w	sl, #2147483648	; 0x80000000
    d6c8:	movne.w	sl, #2147483648	; 0x80000000
    d6cc:	movs	r1, #0
    d6ce:	udiv	lr, sl, r9
    d6d2:	mov	r0, r1
    d6d4:	mls	sl, r9, lr, sl
    d6d8:	b.n	d6e6 <_strtol_l.isra.0+0x76>
    d6da:	beq.n	d730 <_strtol_l.isra.0+0xc0>
    d6dc:	mla	r0, r9, r0, r3
    d6e0:	movs	r1, #1
    d6e2:	ldrb.w	r2, [r4], #1
    d6e6:	sub.w	r3, r2, #48	; 0x30
    d6ea:	cmp	r3, #9
    d6ec:	bls.n	d6fa <_strtol_l.isra.0+0x8a>
    d6ee:	sub.w	r3, r2, #65	; 0x41
    d6f2:	cmp	r3, #25
    d6f4:	bhi.n	d70c <_strtol_l.isra.0+0x9c>
    d6f6:	sub.w	r3, r2, #55	; 0x37
    d6fa:	cmp	r5, r3
    d6fc:	ble.n	d71c <_strtol_l.isra.0+0xac>
    d6fe:	adds	r2, r1, #1
    d700:	beq.n	d6e2 <_strtol_l.isra.0+0x72>
    d702:	cmp	lr, r0
    d704:	bcs.n	d6da <_strtol_l.isra.0+0x6a>
    d706:	mov.w	r1, #4294967295
    d70a:	b.n	d6e2 <_strtol_l.isra.0+0x72>
    d70c:	sub.w	r3, r2, #97	; 0x61
    d710:	cmp	r3, #25
    d712:	bhi.n	d71c <_strtol_l.isra.0+0xac>
    d714:	sub.w	r3, r2, #87	; 0x57
    d718:	cmp	r5, r3
    d71a:	bgt.n	d6fe <_strtol_l.isra.0+0x8e>
    d71c:	adds	r3, r1, #1
    d71e:	beq.n	d74c <_strtol_l.isra.0+0xdc>
    d720:	cmp.w	ip, #0
    d724:	bne.n	d748 <_strtol_l.isra.0+0xd8>
    d726:	cbz	r6, d73c <_strtol_l.isra.0+0xcc>
    d728:	cbnz	r1, d764 <_strtol_l.isra.0+0xf4>
    d72a:	str	r7, [r6, #0]
    d72c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d730:	cmp	sl, r3
    d732:	bge.n	d6dc <_strtol_l.isra.0+0x6c>
    d734:	mov	r0, lr
    d736:	mov.w	r1, #4294967295
    d73a:	b.n	d6e2 <_strtol_l.isra.0+0x72>
    d73c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d740:	cmp	r2, #48	; 0x30
    d742:	beq.n	d77a <_strtol_l.isra.0+0x10a>
    d744:	movs	r5, #10
    d746:	b.n	d6bc <_strtol_l.isra.0+0x4c>
    d748:	negs	r0, r0
    d74a:	b.n	d726 <_strtol_l.isra.0+0xb6>
    d74c:	cmp.w	ip, #0
    d750:	mov.w	r3, #34	; 0x22
    d754:	ite	eq
    d756:	mvneq.w	r0, #2147483648	; 0x80000000
    d75a:	movne.w	r0, #2147483648	; 0x80000000
    d75e:	str.w	r3, [r8]
    d762:	cbz	r6, d7a2 <_strtol_l.isra.0+0x132>
    d764:	subs	r7, r4, #1
    d766:	str	r7, [r6, #0]
    d768:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d76c:	add.w	r4, fp, #2
    d770:	ldrb.w	r2, [fp, #1]
    d774:	mov.w	ip, #1
    d778:	b.n	d6b4 <_strtol_l.isra.0+0x44>
    d77a:	ldrb	r3, [r4, #0]
    d77c:	and.w	r3, r3, #223	; 0xdf
    d780:	cmp	r3, #88	; 0x58
    d782:	beq.n	d796 <_strtol_l.isra.0+0x126>
    d784:	movs	r5, #8
    d786:	b.n	d6bc <_strtol_l.isra.0+0x4c>
    d788:	cmp	r2, #48	; 0x30
    d78a:	bne.n	d6bc <_strtol_l.isra.0+0x4c>
    d78c:	ldrb	r3, [r4, #0]
    d78e:	and.w	r3, r3, #223	; 0xdf
    d792:	cmp	r3, #88	; 0x58
    d794:	bne.n	d6bc <_strtol_l.isra.0+0x4c>
    d796:	mov.w	r9, #16
    d79a:	ldrb	r2, [r4, #1]
    d79c:	mov	r5, r9
    d79e:	adds	r4, #2
    d7a0:	b.n	d6be <_strtol_l.isra.0+0x4e>
    d7a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7a6:	nop

0000d7a8 <_strtol_r>:
    d7a8:	push	{r4, r5, lr}
    d7aa:	ldr	r4, [pc, #24]	; (d7c4 <_strtol_r+0x1c>)
    d7ac:	ldr	r5, [pc, #24]	; (d7c8 <_strtol_r+0x20>)
    d7ae:	ldr	r4, [r4, #0]
    d7b0:	ldr	r4, [r4, #52]	; 0x34
    d7b2:	sub	sp, #12
    d7b4:	cmp	r4, #0
    d7b6:	it	eq
    d7b8:	moveq	r4, r5
    d7ba:	str	r4, [sp, #0]
    d7bc:	bl	d670 <_strtol_l.isra.0>
    d7c0:	add	sp, #12
    d7c2:	pop	{r4, r5, pc}
    d7c4:	.word	0x20013fc8
    d7c8:	.word	0x20013fcc
    d7cc:	.word	0xffffffff

0000d7d0 <_svfprintf_r>:
    d7d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7d4:	sub	sp, #260	; 0x104
    d7d6:	mov	r4, r1
    d7d8:	str	r1, [sp, #20]
    d7da:	mov	r5, r2
    d7dc:	str	r3, [sp, #40]	; 0x28
    d7de:	str	r0, [sp, #24]
    d7e0:	bl	11828 <_localeconv_r>
    d7e4:	ldr	r3, [r0, #0]
    d7e6:	str	r3, [sp, #76]	; 0x4c
    d7e8:	mov	r0, r3
    d7ea:	bl	c5c0 <strlen>
    d7ee:	ldrh	r3, [r4, #12]
    d7f0:	str	r0, [sp, #72]	; 0x48
    d7f2:	lsls	r6, r3, #24
    d7f4:	bpl.n	d7fe <_svfprintf_r+0x2e>
    d7f6:	ldr	r3, [r4, #16]
    d7f8:	cmp	r3, #0
    d7fa:	beq.w	ea60 <_svfprintf_r+0x1290>
    d7fe:	vldr	d7, [pc, #664]	; da98 <_svfprintf_r+0x2c8>
    d802:	movs	r3, #0
    d804:	vstr	d7, [sp, #64]	; 0x40
    d808:	str	r3, [sp, #56]	; 0x38
    d80a:	str	r3, [sp, #148]	; 0x94
    d80c:	str	r3, [sp, #144]	; 0x90
    d80e:	str	r3, [sp, #84]	; 0x54
    d810:	str	r3, [sp, #28]
    d812:	ldr.w	sl, [pc, #656]	; daa4 <_svfprintf_r+0x2d4>
    d816:	add	r3, sp, #192	; 0xc0
    d818:	str	r3, [sp, #140]	; 0x8c
    d81a:	mov	r9, r3
    d81c:	mov	r8, r5
    d81e:	ldrb.w	r3, [r8]
    d822:	mov	r4, r8
    d824:	cbz	r3, d862 <_svfprintf_r+0x92>
    d826:	cmp	r3, #37	; 0x25
    d828:	bne.n	d830 <_svfprintf_r+0x60>
    d82a:	b.n	d862 <_svfprintf_r+0x92>
    d82c:	cmp	r3, #37	; 0x25
    d82e:	beq.n	d838 <_svfprintf_r+0x68>
    d830:	ldrb.w	r3, [r4, #1]!
    d834:	cmp	r3, #0
    d836:	bne.n	d82c <_svfprintf_r+0x5c>
    d838:	rsb	r5, r8, r4
    d83c:	cbz	r5, d862 <_svfprintf_r+0x92>
    d83e:	ldr	r3, [sp, #144]	; 0x90
    d840:	ldr	r2, [sp, #148]	; 0x94
    d842:	str.w	r8, [r9]
    d846:	adds	r3, #1
    d848:	add	r2, r5
    d84a:	cmp	r3, #7
    d84c:	str.w	r5, [r9, #4]
    d850:	str	r2, [sp, #148]	; 0x94
    d852:	str	r3, [sp, #144]	; 0x90
    d854:	bgt.w	d9a4 <_svfprintf_r+0x1d4>
    d858:	add.w	r9, r9, #8
    d85c:	ldr	r3, [sp, #28]
    d85e:	add	r3, r5
    d860:	str	r3, [sp, #28]
    d862:	ldrb	r3, [r4, #0]
    d864:	cmp	r3, #0
    d866:	beq.w	d9b6 <_svfprintf_r+0x1e6>
    d86a:	movs	r3, #0
    d86c:	mov	r2, r3
    d86e:	strb.w	r3, [sp, #111]	; 0x6f
    d872:	mov	r1, r3
    d874:	str	r3, [sp, #32]
    d876:	str	r3, [sp, #12]
    d878:	mov.w	fp, #4294967295
    d87c:	ldrb	r3, [r4, #1]
    d87e:	add.w	r8, r4, #1
    d882:	mov	r5, fp
    d884:	add.w	r8, r8, #1
    d888:	sub.w	r0, r3, #32
    d88c:	cmp	r0, #88	; 0x58
    d88e:	bhi.w	e0fa <_svfprintf_r+0x92a>
    d892:	tbh	[pc, r0, lsl #1]
    d896:	.short	0x03a0
    d898:	.word	0x04320432
    d89c:	.word	0x043203a8
    d8a0:	.word	0x04320432
    d8a4:	.word	0x04320432
    d8a8:	.word	0x03af0432
    d8ac:	.word	0x043203bd
    d8b0:	.word	0x00e2005d
    d8b4:	.word	0x01090432
    d8b8:	.word	0x01100110
    d8bc:	.word	0x01100110
    d8c0:	.word	0x01100110
    d8c4:	.word	0x01100110
    d8c8:	.word	0x04320110
    d8cc:	.word	0x04320432
    d8d0:	.word	0x04320432
    d8d4:	.word	0x04320432
    d8d8:	.word	0x04320432
    d8dc:	.word	0x01200432
    d8e0:	.word	0x04320286
    d8e4:	.word	0x04320286
    d8e8:	.word	0x04320432
    d8ec:	.word	0x02d40432
    d8f0:	.word	0x04320432
    d8f4:	.word	0x043202e5
    d8f8:	.word	0x04320432
    d8fc:	.word	0x04320432
    d900:	.word	0x0432030f
    d904:	.word	0x033d0432
    d908:	.word	0x04320432
    d90c:	.word	0x04320432
    d910:	.word	0x04320432
    d914:	.word	0x04320432
    d918:	.word	0x04320432
    d91c:	.word	0x0391037e
    d920:	.word	0x02860286
    d924:	.word	0x03990286
    d928:	.word	0x04320391
    d92c:	.word	0x04070432
    d930:	.word	0x04120432
    d934:	.word	0x006400a3
    d938:	.word	0x043203c2
    d93c:	.word	0x043203c9
    d940:	.word	0x043203ea
    d944:	.word	0x03f20432
    d948:	ldr	r0, [sp, #32]
    d94a:	str	r3, [sp, #40]	; 0x28
    d94c:	negs	r0, r0
    d94e:	str	r0, [sp, #32]
    d950:	ldr	r3, [sp, #12]
    d952:	orr.w	r3, r3, #4
    d956:	str	r3, [sp, #12]
    d958:	ldrb.w	r3, [r8]
    d95c:	b.n	d884 <_svfprintf_r+0xb4>
    d95e:	ldr	r0, [sp, #40]	; 0x28
    d960:	mov	fp, r5
    d962:	movs	r1, #0
    d964:	ldr	r4, [r0, #0]
    d966:	strb.w	r1, [sp, #111]	; 0x6f
    d96a:	adds	r7, r0, #4
    d96c:	ldr	r0, [sp, #12]
    d96e:	movs	r3, #48	; 0x30
    d970:	movs	r2, #120	; 0x78
    d972:	cmp	fp, r1
    d974:	strb.w	r3, [sp, #112]	; 0x70
    d978:	mov.w	r5, #0
    d97c:	strb.w	r2, [sp, #113]	; 0x71
    d980:	orr.w	r3, r0, #2
    d984:	blt.w	e134 <_svfprintf_r+0x964>
    d988:	bic.w	r3, r0, #128	; 0x80
    d98c:	orr.w	r3, r3, #2
    d990:	str	r3, [sp, #12]
    d992:	orrs.w	r3, r4, r5
    d996:	str	r7, [sp, #40]	; 0x28
    d998:	beq.w	e0e0 <_svfprintf_r+0x910>
    d99c:	mov	r7, r1
    d99e:	str	r2, [sp, #52]	; 0x34
    d9a0:	ldr	r0, [pc, #252]	; (daa0 <_svfprintf_r+0x2d0>)
    d9a2:	b.n	df72 <_svfprintf_r+0x7a2>
    d9a4:	add	r2, sp, #140	; 0x8c
    d9a6:	ldr	r1, [sp, #20]
    d9a8:	ldr	r0, [sp, #24]
    d9aa:	bl	12768 <__ssprint_r>
    d9ae:	cbnz	r0, d9c4 <_svfprintf_r+0x1f4>
    d9b0:	add.w	r9, sp, #192	; 0xc0
    d9b4:	b.n	d85c <_svfprintf_r+0x8c>
    d9b6:	ldr	r3, [sp, #148]	; 0x94
    d9b8:	cbz	r3, d9c4 <_svfprintf_r+0x1f4>
    d9ba:	ldr	r0, [sp, #24]
    d9bc:	ldr	r1, [sp, #20]
    d9be:	add	r2, sp, #140	; 0x8c
    d9c0:	bl	12768 <__ssprint_r>
    d9c4:	ldr	r3, [sp, #20]
    d9c6:	ldrh	r3, [r3, #12]
    d9c8:	tst.w	r3, #64	; 0x40
    d9cc:	ldr	r3, [sp, #28]
    d9ce:	it	ne
    d9d0:	movne.w	r3, #4294967295
    d9d4:	mov	r0, r3
    d9d6:	add	sp, #260	; 0x104
    d9d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9dc:	str	r3, [sp, #52]	; 0x34
    d9de:	mov	fp, r5
    d9e0:	cmp	r2, #0
    d9e2:	bne.w	ee4c <_svfprintf_r+0x167c>
    d9e6:	ldr	r2, [sp, #12]
    d9e8:	ands.w	r3, r2, #32
    d9ec:	beq.w	de7c <_svfprintf_r+0x6ac>
    d9f0:	ldr	r7, [sp, #40]	; 0x28
    d9f2:	adds	r7, #7
    d9f4:	bic.w	r3, r7, #7
    d9f8:	movs	r7, #0
    d9fa:	add.w	r1, r3, #8
    d9fe:	cmp	fp, r7
    da00:	str	r1, [sp, #40]	; 0x28
    da02:	ldrd	r4, r5, [r3]
    da06:	strb.w	r7, [sp, #111]	; 0x6f
    da0a:	blt.w	e8d2 <_svfprintf_r+0x1102>
    da0e:	bic.w	r3, r2, #128	; 0x80
    da12:	str	r3, [sp, #12]
    da14:	orrs.w	r3, r4, r5
    da18:	beq.w	e124 <_svfprintf_r+0x954>
    da1c:	add	r6, sp, #192	; 0xc0
    da1e:	lsrs	r2, r4, #3
    da20:	orr.w	r2, r2, r5, lsl #29
    da24:	lsrs	r1, r5, #3
    da26:	and.w	r3, r4, #7
    da2a:	mov	r5, r1
    da2c:	mov	r4, r2
    da2e:	adds	r3, #48	; 0x30
    da30:	orrs.w	r2, r4, r5
    da34:	strb.w	r3, [r6, #-1]!
    da38:	bne.n	da1e <_svfprintf_r+0x24e>
    da3a:	ldr	r2, [sp, #12]
    da3c:	lsls	r1, r2, #31
    da3e:	bpl.w	db60 <_svfprintf_r+0x390>
    da42:	cmp	r3, #48	; 0x30
    da44:	beq.w	db60 <_svfprintf_r+0x390>
    da48:	movs	r2, #48	; 0x30
    da4a:	subs	r3, r6, #1
    da4c:	strb.w	r2, [r6, #-1]
    da50:	add	r2, sp, #192	; 0xc0
    da52:	subs	r2, r2, r3
    da54:	str	r2, [sp, #36]	; 0x24
    da56:	mov	r6, r3
    da58:	b.n	db66 <_svfprintf_r+0x396>
    da5a:	ldrb.w	r3, [r8]
    da5e:	cmp	r3, #42	; 0x2a
    da60:	add.w	r4, r8, #1
    da64:	beq.w	ee30 <_svfprintf_r+0x1660>
    da68:	sub.w	r0, r3, #48	; 0x30
    da6c:	cmp	r0, #9
    da6e:	it	ls
    da70:	movls	r5, #0
    da72:	bhi.w	ed82 <_svfprintf_r+0x15b2>
    da76:	ldrb.w	r3, [r4], #1
    da7a:	add.w	r5, r5, r5, lsl #2
    da7e:	add.w	r5, r0, r5, lsl #1
    da82:	sub.w	r0, r3, #48	; 0x30
    da86:	cmp	r0, #9
    da88:	bls.n	da76 <_svfprintf_r+0x2a6>
    da8a:	orr.w	r5, r5, r5, asr #31
    da8e:	mov	r8, r4
    da90:	b.n	d888 <_svfprintf_r+0xb8>
    da92:	nop
    da94:	nop.w
	...
    daa0:	.word	0x0001357c
    daa4:	.word	0x00013548
    daa8:	ldr	r3, [sp, #12]
    daaa:	orr.w	r3, r3, #128	; 0x80
    daae:	str	r3, [sp, #12]
    dab0:	ldrb.w	r3, [r8]
    dab4:	b.n	d884 <_svfprintf_r+0xb4>
    dab6:	sub.w	r0, r3, #48	; 0x30
    daba:	movs	r3, #0
    dabc:	mov	r4, r3
    dabe:	ldrb.w	r3, [r8], #1
    dac2:	add.w	r4, r4, r4, lsl #2
    dac6:	add.w	r4, r0, r4, lsl #1
    daca:	sub.w	r0, r3, #48	; 0x30
    dace:	cmp	r0, #9
    dad0:	bls.n	dabe <_svfprintf_r+0x2ee>
    dad2:	str	r4, [sp, #32]
    dad4:	b.n	d888 <_svfprintf_r+0xb8>
    dad6:	str	r3, [sp, #52]	; 0x34
    dad8:	mov	fp, r5
    dada:	cmp	r2, #0
    dadc:	bne.w	ee68 <_svfprintf_r+0x1698>
    dae0:	ldr	r3, [sp, #12]
    dae2:	orr.w	r3, r3, #16
    dae6:	str	r3, [sp, #12]
    dae8:	ldr	r3, [sp, #12]
    daea:	lsls	r4, r3, #26
    daec:	bpl.w	e55e <_svfprintf_r+0xd8e>
    daf0:	ldr	r7, [sp, #40]	; 0x28
    daf2:	adds	r7, #7
    daf4:	bic.w	r7, r7, #7
    daf8:	ldrd	r2, r3, [r7]
    dafc:	add.w	r1, r7, #8
    db00:	str	r1, [sp, #40]	; 0x28
    db02:	mov	r4, r2
    db04:	mov	r5, r3
    db06:	cmp	r2, #0
    db08:	sbcs.w	r3, r3, #0
    db0c:	blt.w	e5d4 <_svfprintf_r+0xe04>
    db10:	cmp.w	fp, #0
    db14:	ldrb.w	r7, [sp, #111]	; 0x6f
    db18:	blt.w	e59a <_svfprintf_r+0xdca>
    db1c:	ldr	r3, [sp, #12]
    db1e:	bic.w	r3, r3, #128	; 0x80
    db22:	str	r3, [sp, #12]
    db24:	orrs.w	r3, r4, r5
    db28:	beq.w	defc <_svfprintf_r+0x72c>
    db2c:	cmp	r5, #0
    db2e:	it	eq
    db30:	cmpeq	r4, #10
    db32:	bcc.w	df06 <_svfprintf_r+0x736>
    db36:	add	r6, sp, #192	; 0xc0
    db38:	mov	r0, r4
    db3a:	mov	r1, r5
    db3c:	movs	r2, #10
    db3e:	movs	r3, #0
    db40:	bl	b2dc <__aeabi_uldivmod>
    db44:	adds	r2, #48	; 0x30
    db46:	strb.w	r2, [r6, #-1]!
    db4a:	mov	r0, r4
    db4c:	mov	r1, r5
    db4e:	movs	r3, #0
    db50:	movs	r2, #10
    db52:	bl	b2dc <__aeabi_uldivmod>
    db56:	mov	r4, r0
    db58:	mov	r5, r1
    db5a:	orrs.w	r3, r4, r5
    db5e:	bne.n	db38 <_svfprintf_r+0x368>
    db60:	add	r3, sp, #192	; 0xc0
    db62:	subs	r3, r3, r6
    db64:	str	r3, [sp, #36]	; 0x24
    db66:	ldr	r3, [sp, #36]	; 0x24
    db68:	cmp	r3, fp
    db6a:	it	lt
    db6c:	movlt	r3, fp
    db6e:	str	r3, [sp, #16]
    db70:	movs	r3, #0
    db72:	str	r3, [sp, #60]	; 0x3c
    db74:	cbz	r7, db7c <_svfprintf_r+0x3ac>
    db76:	ldr	r3, [sp, #16]
    db78:	adds	r3, #1
    db7a:	str	r3, [sp, #16]
    db7c:	ldr	r3, [sp, #12]
    db7e:	ands.w	r3, r3, #2
    db82:	str	r3, [sp, #44]	; 0x2c
    db84:	beq.n	db8c <_svfprintf_r+0x3bc>
    db86:	ldr	r3, [sp, #16]
    db88:	adds	r3, #2
    db8a:	str	r3, [sp, #16]
    db8c:	ldr	r3, [sp, #12]
    db8e:	ands.w	r3, r3, #132	; 0x84
    db92:	str	r3, [sp, #48]	; 0x30
    db94:	bne.w	e14e <_svfprintf_r+0x97e>
    db98:	ldr	r3, [sp, #32]
    db9a:	ldr	r2, [sp, #16]
    db9c:	subs	r5, r3, r2
    db9e:	cmp	r5, #0
    dba0:	ble.w	e14e <_svfprintf_r+0x97e>
    dba4:	cmp	r5, #16
    dba6:	ldr	r1, [sp, #148]	; 0x94
    dba8:	ldr	r2, [sp, #144]	; 0x90
    dbaa:	ldr	r7, [pc, #672]	; (de4c <_svfprintf_r+0x67c>)
    dbac:	ble.n	dbfe <_svfprintf_r+0x42e>
    dbae:	str	r6, [sp, #80]	; 0x50
    dbb0:	mov	r0, r9
    dbb2:	movs	r4, #16
    dbb4:	mov	r9, r7
    dbb6:	ldr	r6, [sp, #20]
    dbb8:	mov	r7, r5
    dbba:	ldr	r5, [sp, #24]
    dbbc:	b.n	dbc8 <_svfprintf_r+0x3f8>
    dbbe:	subs	r7, #16
    dbc0:	cmp	r7, #16
    dbc2:	add.w	r0, r0, #8
    dbc6:	ble.n	dbf6 <_svfprintf_r+0x426>
    dbc8:	adds	r2, #1
    dbca:	ldr	r3, [pc, #640]	; (de4c <_svfprintf_r+0x67c>)
    dbcc:	str	r2, [sp, #144]	; 0x90
    dbce:	adds	r1, #16
    dbd0:	cmp	r2, #7
    dbd2:	str	r1, [sp, #148]	; 0x94
    dbd4:	stmia.w	r0, {r3, r4}
    dbd8:	ble.n	dbbe <_svfprintf_r+0x3ee>
    dbda:	add	r2, sp, #140	; 0x8c
    dbdc:	mov	r1, r6
    dbde:	mov	r0, r5
    dbe0:	bl	12768 <__ssprint_r>
    dbe4:	cmp	r0, #0
    dbe6:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    dbea:	subs	r7, #16
    dbec:	cmp	r7, #16
    dbee:	ldr	r1, [sp, #148]	; 0x94
    dbf0:	ldr	r2, [sp, #144]	; 0x90
    dbf2:	add	r0, sp, #192	; 0xc0
    dbf4:	bgt.n	dbc8 <_svfprintf_r+0x3f8>
    dbf6:	ldr	r6, [sp, #80]	; 0x50
    dbf8:	mov	r5, r7
    dbfa:	mov	r7, r9
    dbfc:	mov	r9, r0
    dbfe:	adds	r2, #1
    dc00:	adds	r4, r5, r1
    dc02:	cmp	r2, #7
    dc04:	str	r4, [sp, #148]	; 0x94
    dc06:	str	r2, [sp, #144]	; 0x90
    dc08:	str.w	r7, [r9]
    dc0c:	str.w	r5, [r9, #4]
    dc10:	bgt.w	e46e <_svfprintf_r+0xc9e>
    dc14:	ldrb.w	r7, [sp, #111]	; 0x6f
    dc18:	add.w	r9, r9, #8
    dc1c:	cbz	r7, dc3c <_svfprintf_r+0x46c>
    dc1e:	ldr	r3, [sp, #144]	; 0x90
    dc20:	adds	r3, #1
    dc22:	adds	r4, #1
    dc24:	add.w	r1, sp, #111	; 0x6f
    dc28:	movs	r2, #1
    dc2a:	cmp	r3, #7
    dc2c:	str	r4, [sp, #148]	; 0x94
    dc2e:	str	r3, [sp, #144]	; 0x90
    dc30:	stmia.w	r9, {r1, r2}
    dc34:	bgt.w	e382 <_svfprintf_r+0xbb2>
    dc38:	add.w	r9, r9, #8
    dc3c:	ldr	r3, [sp, #44]	; 0x2c
    dc3e:	cbz	r3, dc5c <_svfprintf_r+0x48c>
    dc40:	ldr	r3, [sp, #144]	; 0x90
    dc42:	adds	r3, #1
    dc44:	adds	r4, #2
    dc46:	add	r1, sp, #112	; 0x70
    dc48:	movs	r2, #2
    dc4a:	cmp	r3, #7
    dc4c:	str	r4, [sp, #148]	; 0x94
    dc4e:	str	r3, [sp, #144]	; 0x90
    dc50:	stmia.w	r9, {r1, r2}
    dc54:	bgt.w	e39a <_svfprintf_r+0xbca>
    dc58:	add.w	r9, r9, #8
    dc5c:	ldr	r3, [sp, #48]	; 0x30
    dc5e:	cmp	r3, #128	; 0x80
    dc60:	beq.w	e226 <_svfprintf_r+0xa56>
    dc64:	ldr	r3, [sp, #36]	; 0x24
    dc66:	rsb	r7, r3, fp
    dc6a:	cmp	r7, #0
    dc6c:	ble.n	dcd6 <_svfprintf_r+0x506>
    dc6e:	ldr	r2, [pc, #480]	; (de50 <_svfprintf_r+0x680>)
    dc70:	ldr	r3, [sp, #144]	; 0x90
    dc72:	str	r2, [sp, #44]	; 0x2c
    dc74:	cmp	r7, #16
    dc76:	ble.n	dcbe <_svfprintf_r+0x4ee>
    dc78:	mov	r2, r4
    dc7a:	mov.w	fp, #16
    dc7e:	ldr	r5, [sp, #24]
    dc80:	ldr	r4, [sp, #20]
    dc82:	b.n	dc8e <_svfprintf_r+0x4be>
    dc84:	subs	r7, #16
    dc86:	cmp	r7, #16
    dc88:	add.w	r9, r9, #8
    dc8c:	ble.n	dcbc <_svfprintf_r+0x4ec>
    dc8e:	adds	r3, #1
    dc90:	adds	r2, #16
    dc92:	cmp	r3, #7
    dc94:	str	r2, [sp, #148]	; 0x94
    dc96:	str	r3, [sp, #144]	; 0x90
    dc98:	stmia.w	r9, {sl, fp}
    dc9c:	ble.n	dc84 <_svfprintf_r+0x4b4>
    dc9e:	add	r2, sp, #140	; 0x8c
    dca0:	mov	r1, r4
    dca2:	mov	r0, r5
    dca4:	bl	12768 <__ssprint_r>
    dca8:	cmp	r0, #0
    dcaa:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    dcae:	subs	r7, #16
    dcb0:	cmp	r7, #16
    dcb2:	ldr	r2, [sp, #148]	; 0x94
    dcb4:	ldr	r3, [sp, #144]	; 0x90
    dcb6:	add.w	r9, sp, #192	; 0xc0
    dcba:	bgt.n	dc8e <_svfprintf_r+0x4be>
    dcbc:	mov	r4, r2
    dcbe:	adds	r3, #1
    dcc0:	ldr	r2, [sp, #44]	; 0x2c
    dcc2:	str	r3, [sp, #144]	; 0x90
    dcc4:	add	r4, r7
    dcc6:	cmp	r3, #7
    dcc8:	str	r4, [sp, #148]	; 0x94
    dcca:	stmia.w	r9, {r2, r7}
    dcce:	bgt.w	e36a <_svfprintf_r+0xb9a>
    dcd2:	add.w	r9, r9, #8
    dcd6:	ldr	r3, [sp, #12]
    dcd8:	lsls	r2, r3, #23
    dcda:	bmi.w	e152 <_svfprintf_r+0x982>
    dcde:	ldr	r3, [sp, #144]	; 0x90
    dce0:	ldr	r1, [sp, #36]	; 0x24
    dce2:	str.w	r6, [r9]
    dce6:	adds	r3, #1
    dce8:	add	r4, r1
    dcea:	cmp	r3, #7
    dcec:	str	r4, [sp, #148]	; 0x94
    dcee:	str.w	r1, [r9, #4]
    dcf2:	str	r3, [sp, #144]	; 0x90
    dcf4:	bgt.w	e33e <_svfprintf_r+0xb6e>
    dcf8:	add.w	r9, r9, #8
    dcfc:	ldr	r3, [sp, #12]
    dcfe:	lsls	r1, r3, #29
    dd00:	bpl.n	dd82 <_svfprintf_r+0x5b2>
    dd02:	ldr	r3, [sp, #32]
    dd04:	ldr	r2, [sp, #16]
    dd06:	subs	r5, r3, r2
    dd08:	cmp	r5, #0
    dd0a:	ble.n	dd82 <_svfprintf_r+0x5b2>
    dd0c:	cmp	r5, #16
    dd0e:	ldr	r3, [sp, #144]	; 0x90
    dd10:	ldr	r7, [pc, #312]	; (de4c <_svfprintf_r+0x67c>)
    dd12:	ble.n	dd5c <_svfprintf_r+0x58c>
    dd14:	mov	r2, r4
    dd16:	movs	r6, #16
    dd18:	ldr.w	fp, [sp, #24]
    dd1c:	ldr	r4, [sp, #20]
    dd1e:	b.n	dd2a <_svfprintf_r+0x55a>
    dd20:	subs	r5, #16
    dd22:	cmp	r5, #16
    dd24:	add.w	r9, r9, #8
    dd28:	ble.n	dd5a <_svfprintf_r+0x58a>
    dd2a:	adds	r3, #1
    dd2c:	ldr	r1, [pc, #284]	; (de4c <_svfprintf_r+0x67c>)
    dd2e:	str	r3, [sp, #144]	; 0x90
    dd30:	adds	r2, #16
    dd32:	cmp	r3, #7
    dd34:	str	r2, [sp, #148]	; 0x94
    dd36:	stmia.w	r9, {r1, r6}
    dd3a:	ble.n	dd20 <_svfprintf_r+0x550>
    dd3c:	add	r2, sp, #140	; 0x8c
    dd3e:	mov	r1, r4
    dd40:	mov	r0, fp
    dd42:	bl	12768 <__ssprint_r>
    dd46:	cmp	r0, #0
    dd48:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    dd4c:	subs	r5, #16
    dd4e:	cmp	r5, #16
    dd50:	ldr	r2, [sp, #148]	; 0x94
    dd52:	ldr	r3, [sp, #144]	; 0x90
    dd54:	add.w	r9, sp, #192	; 0xc0
    dd58:	bgt.n	dd2a <_svfprintf_r+0x55a>
    dd5a:	mov	r4, r2
    dd5c:	adds	r3, #1
    dd5e:	add	r4, r5
    dd60:	cmp	r3, #7
    dd62:	str	r4, [sp, #148]	; 0x94
    dd64:	str	r3, [sp, #144]	; 0x90
    dd66:	str.w	r7, [r9]
    dd6a:	str.w	r5, [r9, #4]
    dd6e:	ble.n	dd82 <_svfprintf_r+0x5b2>
    dd70:	add	r2, sp, #140	; 0x8c
    dd72:	ldr	r1, [sp, #20]
    dd74:	ldr	r0, [sp, #24]
    dd76:	bl	12768 <__ssprint_r>
    dd7a:	cmp	r0, #0
    dd7c:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    dd80:	ldr	r4, [sp, #148]	; 0x94
    dd82:	ldr	r3, [sp, #28]
    dd84:	ldr	r2, [sp, #32]
    dd86:	ldr	r1, [sp, #16]
    dd88:	cmp	r2, r1
    dd8a:	ite	ge
    dd8c:	addge	r3, r3, r2
    dd8e:	addlt	r3, r3, r1
    dd90:	str	r3, [sp, #28]
    dd92:	cmp	r4, #0
    dd94:	bne.w	e356 <_svfprintf_r+0xb86>
    dd98:	movs	r3, #0
    dd9a:	str	r3, [sp, #144]	; 0x90
    dd9c:	add.w	r9, sp, #192	; 0xc0
    dda0:	b.n	d81e <_svfprintf_r+0x4e>
    dda2:	str	r3, [sp, #52]	; 0x34
    dda4:	mov	fp, r5
    dda6:	cmp	r2, #0
    dda8:	bne.w	ee70 <_svfprintf_r+0x16a0>
    ddac:	ldr	r3, [sp, #12]
    ddae:	ldr	r7, [sp, #40]	; 0x28
    ddb0:	lsls	r2, r3, #28
    ddb2:	add.w	r7, r7, #7
    ddb6:	bpl.w	e8a2 <_svfprintf_r+0x10d2>
    ddba:	bic.w	r3, r7, #7
    ddbe:	vldr	d7, [r3]
    ddc2:	vstr	d7, [sp, #64]	; 0x40
    ddc6:	add.w	r2, r3, #8
    ddca:	str	r2, [sp, #40]	; 0x28
    ddcc:	ldrd	r1, r2, [sp, #64]	; 0x40
    ddd0:	bic.w	r3, r2, #2147483648	; 0x80000000
    ddd4:	str	r1, [sp, #88]	; 0x58
    ddd6:	str	r3, [sp, #92]	; 0x5c
    ddd8:	ldrd	r4, r5, [sp, #88]	; 0x58
    dddc:	mov.w	r2, #4294967295
    dde0:	mov	r0, r4
    dde2:	mov	r1, r5
    dde4:	ldr	r3, [pc, #108]	; (de54 <_svfprintf_r+0x684>)
    dde6:	bl	af64 <__aeabi_dcmpun>
    ddea:	cmp	r0, #0
    ddec:	bne.w	e7a4 <_svfprintf_r+0xfd4>
    ddf0:	mov.w	r2, #4294967295
    ddf4:	ldr	r3, [pc, #92]	; (de54 <_svfprintf_r+0x684>)
    ddf6:	mov	r0, r4
    ddf8:	mov	r1, r5
    ddfa:	bl	af28 <__aeabi_dcmple>
    ddfe:	cmp	r0, #0
    de00:	bne.w	e7a4 <_svfprintf_r+0xfd4>
    de04:	movs	r2, #0
    de06:	movs	r3, #0
    de08:	ldrd	r0, r1, [sp, #64]	; 0x40
    de0c:	bl	af14 <__aeabi_dcmplt>
    de10:	cmp	r0, #0
    de12:	bne.w	ecba <_svfprintf_r+0x14ea>
    de16:	ldrb.w	r7, [sp, #111]	; 0x6f
    de1a:	ldr	r6, [pc, #60]	; (de58 <_svfprintf_r+0x688>)
    de1c:	ldr	r3, [pc, #60]	; (de5c <_svfprintf_r+0x68c>)
    de1e:	ldr	r1, [sp, #12]
    de20:	bic.w	r1, r1, #128	; 0x80
    de24:	str	r1, [sp, #12]
    de26:	ldr	r1, [sp, #52]	; 0x34
    de28:	movs	r2, #3
    de2a:	mov.w	fp, #0
    de2e:	str	r2, [sp, #16]
    de30:	cmp	r1, #71	; 0x47
    de32:	it	le
    de34:	movle	r6, r3
    de36:	str	r2, [sp, #36]	; 0x24
    de38:	str.w	fp, [sp, #60]	; 0x3c
    de3c:	b.n	db74 <_svfprintf_r+0x3a4>
    de3e:	ldr	r3, [sp, #12]
    de40:	orr.w	r3, r3, #8
    de44:	str	r3, [sp, #12]
    de46:	ldrb.w	r3, [r8]
    de4a:	b.n	d884 <_svfprintf_r+0xb4>
    de4c:	.word	0x0001359c
    de50:	.word	0x00013548
    de54:	.word	0x7fefffff
    de58:	.word	0x0001355c
    de5c:	.word	0x00013558
    de60:	str	r3, [sp, #52]	; 0x34
    de62:	mov	fp, r5
    de64:	cmp	r2, #0
    de66:	bne.w	ee88 <_svfprintf_r+0x16b8>
    de6a:	ldr	r3, [sp, #12]
    de6c:	orr.w	r3, r3, #16
    de70:	str	r3, [sp, #12]
    de72:	ldr	r2, [sp, #12]
    de74:	ands.w	r3, r2, #32
    de78:	bne.w	d9f0 <_svfprintf_r+0x220>
    de7c:	ldr	r1, [sp, #12]
    de7e:	ands.w	r2, r1, #16
    de82:	beq.w	e73c <_svfprintf_r+0xf6c>
    de86:	ldr	r0, [sp, #40]	; 0x28
    de88:	strb.w	r3, [sp, #111]	; 0x6f
    de8c:	cmp.w	fp, #0
    de90:	ldr	r4, [r0, #0]
    de92:	add.w	r7, r0, #4
    de96:	mov.w	r5, #0
    de9a:	blt.w	e8d0 <_svfprintf_r+0x1100>
    de9e:	mov	r2, r1
    dea0:	bic.w	r2, r2, #128	; 0x80
    dea4:	str	r2, [sp, #12]
    dea6:	orrs.w	r2, r4, r5
    deaa:	str	r7, [sp, #40]	; 0x28
    deac:	beq.w	e124 <_svfprintf_r+0x954>
    deb0:	mov	r7, r3
    deb2:	b.n	da1c <_svfprintf_r+0x24c>
    deb4:	str	r3, [sp, #52]	; 0x34
    deb6:	mov	fp, r5
    deb8:	cmp	r2, #0
    deba:	bne.w	ee80 <_svfprintf_r+0x16b0>
    debe:	ldr	r3, [sp, #12]
    dec0:	orr.w	r3, r3, #16
    dec4:	str	r3, [sp, #12]
    dec6:	ldr	r2, [sp, #12]
    dec8:	ands.w	r3, r2, #32
    decc:	beq.w	e528 <_svfprintf_r+0xd58>
    ded0:	ldr	r7, [sp, #40]	; 0x28
    ded2:	adds	r7, #7
    ded4:	bic.w	r3, r7, #7
    ded8:	movs	r7, #0
    deda:	add.w	r1, r3, #8
    dede:	cmp	fp, r7
    dee0:	str	r1, [sp, #40]	; 0x28
    dee2:	ldrd	r4, r5, [r3]
    dee6:	strb.w	r7, [sp, #111]	; 0x6f
    deea:	blt.w	e59a <_svfprintf_r+0xdca>
    deee:	bic.w	r3, r2, #128	; 0x80
    def2:	str	r3, [sp, #12]
    def4:	orrs.w	r3, r4, r5
    def8:	bne.w	db2c <_svfprintf_r+0x35c>
    defc:	cmp.w	fp, #0
    df00:	beq.w	e0ee <_svfprintf_r+0x91e>
    df04:	movs	r4, #0
    df06:	add	r6, sp, #256	; 0x100
    df08:	adds	r4, #48	; 0x30
    df0a:	strb.w	r4, [r6, #-65]!
    df0e:	b.n	db60 <_svfprintf_r+0x390>
    df10:	str	r3, [sp, #52]	; 0x34
    df12:	mov	fp, r5
    df14:	cmp	r2, #0
    df16:	bne.w	ee78 <_svfprintf_r+0x16a8>
    df1a:	ldr	r3, [sp, #12]
    df1c:	ldr	r0, [pc, #700]	; (e1dc <_svfprintf_r+0xa0c>)
    df1e:	lsls	r5, r3, #26
    df20:	bpl.w	e08e <_svfprintf_r+0x8be>
    df24:	ldr	r7, [sp, #40]	; 0x28
    df26:	adds	r7, #7
    df28:	bic.w	r3, r7, #7
    df2c:	ldrd	r4, r5, [r3]
    df30:	add.w	r2, r3, #8
    df34:	str	r2, [sp, #40]	; 0x28
    df36:	ldr	r2, [sp, #12]
    df38:	ands.w	r7, r2, #1
    df3c:	beq.w	e3b2 <_svfprintf_r+0xbe2>
    df40:	orrs.w	r3, r4, r5
    df44:	beq.w	e94c <_svfprintf_r+0x117c>
    df48:	ldrb.w	r2, [sp, #52]	; 0x34
    df4c:	strb.w	r2, [sp, #113]	; 0x71
    df50:	movs	r7, #0
    df52:	ldr	r2, [sp, #12]
    df54:	strb.w	r7, [sp, #111]	; 0x6f
    df58:	movs	r3, #48	; 0x30
    df5a:	cmp	fp, r7
    df5c:	strb.w	r3, [sp, #112]	; 0x70
    df60:	orr.w	r3, r2, #2
    df64:	blt.w	ecc4 <_svfprintf_r+0x14f4>
    df68:	bic.w	r3, r2, #128	; 0x80
    df6c:	orr.w	r3, r3, #2
    df70:	str	r3, [sp, #12]
    df72:	add	r6, sp, #192	; 0xc0
    df74:	lsrs	r3, r4, #4
    df76:	and.w	r1, r4, #15
    df7a:	orr.w	r3, r3, r5, lsl #28
    df7e:	lsrs	r2, r5, #4
    df80:	mov	r4, r3
    df82:	mov	r5, r2
    df84:	ldrb	r3, [r0, r1]
    df86:	strb.w	r3, [r6, #-1]!
    df8a:	orrs.w	r3, r4, r5
    df8e:	bne.n	df74 <_svfprintf_r+0x7a4>
    df90:	b.n	db60 <_svfprintf_r+0x390>
    df92:	ldr	r1, [sp, #40]	; 0x28
    df94:	str	r3, [sp, #52]	; 0x34
    df96:	ldr	r2, [r1, #0]
    df98:	strb.w	r2, [sp, #152]	; 0x98
    df9c:	movs	r3, #0
    df9e:	mov	r2, r1
    dfa0:	mov	r7, r3
    dfa2:	strb.w	r3, [sp, #111]	; 0x6f
    dfa6:	adds	r2, #4
    dfa8:	movs	r3, #1
    dfaa:	str	r3, [sp, #16]
    dfac:	mov	fp, r7
    dfae:	str	r7, [sp, #60]	; 0x3c
    dfb0:	str	r2, [sp, #40]	; 0x28
    dfb2:	str	r3, [sp, #36]	; 0x24
    dfb4:	add	r6, sp, #152	; 0x98
    dfb6:	b.n	db7c <_svfprintf_r+0x3ac>
    dfb8:	str	r3, [sp, #52]	; 0x34
    dfba:	mov	fp, r5
    dfbc:	cmp	r2, #0
    dfbe:	beq.w	dae8 <_svfprintf_r+0x318>
    dfc2:	strb.w	r1, [sp, #111]	; 0x6f
    dfc6:	b.n	dae8 <_svfprintf_r+0x318>
    dfc8:	ldr	r3, [sp, #12]
    dfca:	orr.w	r3, r3, #64	; 0x40
    dfce:	str	r3, [sp, #12]
    dfd0:	ldrb.w	r3, [r8]
    dfd4:	b.n	d884 <_svfprintf_r+0xb4>
    dfd6:	ldrb.w	r3, [r8]
    dfda:	cmp	r1, #0
    dfdc:	bne.w	d884 <_svfprintf_r+0xb4>
    dfe0:	movs	r2, #1
    dfe2:	movs	r1, #32
    dfe4:	b.n	d884 <_svfprintf_r+0xb4>
    dfe6:	ldr	r3, [sp, #12]
    dfe8:	orr.w	r3, r3, #1
    dfec:	str	r3, [sp, #12]
    dfee:	ldrb.w	r3, [r8]
    dff2:	b.n	d884 <_svfprintf_r+0xb4>
    dff4:	ldr	r4, [sp, #40]	; 0x28
    dff6:	ldr	r3, [r4, #0]
    dff8:	str	r3, [sp, #32]
    dffa:	mov	r0, r3
    dffc:	cmp	r0, #0
    dffe:	mov	r3, r4
    e000:	add.w	r3, r3, #4
    e004:	blt.w	d948 <_svfprintf_r+0x178>
    e008:	str	r3, [sp, #40]	; 0x28
    e00a:	ldrb.w	r3, [r8]
    e00e:	b.n	d884 <_svfprintf_r+0xb4>
    e010:	ldrb.w	r3, [r8]
    e014:	movs	r2, #1
    e016:	movs	r1, #43	; 0x2b
    e018:	b.n	d884 <_svfprintf_r+0xb4>
    e01a:	ldr	r3, [sp, #12]
    e01c:	orr.w	r3, r3, #32
    e020:	str	r3, [sp, #12]
    e022:	ldrb.w	r3, [r8]
    e026:	b.n	d884 <_svfprintf_r+0xb4>
    e028:	ldr	r2, [sp, #40]	; 0x28
    e02a:	str	r3, [sp, #52]	; 0x34
    e02c:	ldr	r6, [r2, #0]
    e02e:	movs	r4, #0
    e030:	strb.w	r4, [sp, #111]	; 0x6f
    e034:	adds	r7, r2, #4
    e036:	cmp	r6, #0
    e038:	beq.w	ec74 <_svfprintf_r+0x14a4>
    e03c:	cmp	r5, #0
    e03e:	blt.w	eb04 <_svfprintf_r+0x1334>
    e042:	mov	r2, r5
    e044:	mov	r1, r4
    e046:	mov	r0, r6
    e048:	bl	bce0 <memchr>
    e04c:	cmp	r0, #0
    e04e:	beq.w	ed18 <_svfprintf_r+0x1548>
    e052:	subs	r3, r0, r6
    e054:	str	r3, [sp, #36]	; 0x24
    e056:	mov	fp, r4
    e058:	bic.w	r3, r3, r3, asr #31
    e05c:	str	r7, [sp, #40]	; 0x28
    e05e:	str	r3, [sp, #16]
    e060:	str.w	fp, [sp, #60]	; 0x3c
    e064:	ldrb.w	r7, [sp, #111]	; 0x6f
    e068:	b.n	db74 <_svfprintf_r+0x3a4>
    e06a:	str	r3, [sp, #52]	; 0x34
    e06c:	mov	fp, r5
    e06e:	cmp	r2, #0
    e070:	beq.w	dec6 <_svfprintf_r+0x6f6>
    e074:	strb.w	r1, [sp, #111]	; 0x6f
    e078:	b.n	dec6 <_svfprintf_r+0x6f6>
    e07a:	str	r3, [sp, #52]	; 0x34
    e07c:	mov	fp, r5
    e07e:	cmp	r2, #0
    e080:	bne.w	eea0 <_svfprintf_r+0x16d0>
    e084:	ldr	r3, [sp, #12]
    e086:	ldr	r0, [pc, #344]	; (e1e0 <_svfprintf_r+0xa10>)
    e088:	lsls	r5, r3, #26
    e08a:	bmi.w	df24 <_svfprintf_r+0x754>
    e08e:	ldr	r3, [sp, #12]
    e090:	lsls	r4, r3, #27
    e092:	bpl.w	e912 <_svfprintf_r+0x1142>
    e096:	ldr	r2, [sp, #40]	; 0x28
    e098:	mov	r3, r2
    e09a:	adds	r3, #4
    e09c:	ldr	r4, [r2, #0]
    e09e:	str	r3, [sp, #40]	; 0x28
    e0a0:	movs	r5, #0
    e0a2:	b.n	df36 <_svfprintf_r+0x766>
    e0a4:	ldrb.w	r3, [r8]
    e0a8:	cmp	r3, #108	; 0x6c
    e0aa:	beq.w	ea32 <_svfprintf_r+0x1262>
    e0ae:	ldr	r0, [sp, #12]
    e0b0:	orr.w	r0, r0, #16
    e0b4:	str	r0, [sp, #12]
    e0b6:	b.w	d884 <_svfprintf_r+0xb4>
    e0ba:	cmp	r2, #0
    e0bc:	bne.w	ee98 <_svfprintf_r+0x16c8>
    e0c0:	ldr	r3, [sp, #12]
    e0c2:	lsls	r3, r3, #26
    e0c4:	bpl.w	e776 <_svfprintf_r+0xfa6>
    e0c8:	ldr	r2, [sp, #40]	; 0x28
    e0ca:	ldr	r1, [sp, #28]
    e0cc:	ldr	r3, [r2, #0]
    e0ce:	asrs	r5, r1, #31
    e0d0:	mov	r0, r1
    e0d2:	adds	r2, #4
    e0d4:	mov	r1, r5
    e0d6:	str	r2, [sp, #40]	; 0x28
    e0d8:	strd	r0, r1, [r3]
    e0dc:	b.w	d81e <_svfprintf_r+0x4e>
    e0e0:	ldr	r0, [pc, #252]	; (e1e0 <_svfprintf_r+0xa10>)
    e0e2:	str	r2, [sp, #52]	; 0x34
    e0e4:	cmp.w	fp, #0
    e0e8:	bne.w	e3d4 <_svfprintf_r+0xc04>
    e0ec:	mov	r7, fp
    e0ee:	mov.w	fp, #0
    e0f2:	str.w	fp, [sp, #36]	; 0x24
    e0f6:	add	r6, sp, #192	; 0xc0
    e0f8:	b.n	db66 <_svfprintf_r+0x396>
    e0fa:	str	r3, [sp, #52]	; 0x34
    e0fc:	cmp	r2, #0
    e0fe:	bne.w	ee90 <_svfprintf_r+0x16c0>
    e102:	ldr	r2, [sp, #52]	; 0x34
    e104:	cmp	r2, #0
    e106:	beq.w	d9b6 <_svfprintf_r+0x1e6>
    e10a:	movs	r3, #0
    e10c:	movs	r1, #1
    e10e:	mov	r7, r3
    e110:	str	r1, [sp, #16]
    e112:	strb.w	r2, [sp, #152]	; 0x98
    e116:	strb.w	r3, [sp, #111]	; 0x6f
    e11a:	mov	fp, r3
    e11c:	str	r3, [sp, #60]	; 0x3c
    e11e:	str	r1, [sp, #36]	; 0x24
    e120:	add	r6, sp, #152	; 0x98
    e122:	b.n	db7c <_svfprintf_r+0x3ac>
    e124:	cmp.w	fp, #0
    e128:	beq.w	ed48 <_svfprintf_r+0x1578>
    e12c:	movs	r7, #0
    e12e:	movs	r4, #0
    e130:	movs	r5, #0
    e132:	b.n	da1c <_svfprintf_r+0x24c>
    e134:	ldr	r0, [pc, #168]	; (e1e0 <_svfprintf_r+0xa10>)
    e136:	str	r3, [sp, #12]
    e138:	str	r2, [sp, #52]	; 0x34
    e13a:	orrs.w	r3, r4, r5
    e13e:	str	r7, [sp, #40]	; 0x28
    e140:	mov.w	r7, #0
    e144:	bne.w	df72 <_svfprintf_r+0x7a2>
    e148:	movs	r4, #0
    e14a:	movs	r5, #0
    e14c:	b.n	df72 <_svfprintf_r+0x7a2>
    e14e:	ldr	r4, [sp, #148]	; 0x94
    e150:	b.n	dc1c <_svfprintf_r+0x44c>
    e152:	ldr	r3, [sp, #52]	; 0x34
    e154:	cmp	r3, #101	; 0x65
    e156:	ble.w	e2ae <_svfprintf_r+0xade>
    e15a:	movs	r2, #0
    e15c:	movs	r3, #0
    e15e:	ldrd	r0, r1, [sp, #64]	; 0x40
    e162:	bl	af00 <__aeabi_dcmpeq>
    e166:	cmp	r0, #0
    e168:	beq.w	e3d8 <_svfprintf_r+0xc08>
    e16c:	ldr	r3, [sp, #144]	; 0x90
    e16e:	ldr	r2, [pc, #116]	; (e1e4 <_svfprintf_r+0xa14>)
    e170:	str.w	r2, [r9]
    e174:	adds	r3, #1
    e176:	adds	r4, #1
    e178:	movs	r2, #1
    e17a:	cmp	r3, #7
    e17c:	str	r4, [sp, #148]	; 0x94
    e17e:	str	r3, [sp, #144]	; 0x90
    e180:	str.w	r2, [r9, #4]
    e184:	bgt.w	e964 <_svfprintf_r+0x1194>
    e188:	add.w	r9, r9, #8
    e18c:	ldr	r3, [sp, #116]	; 0x74
    e18e:	ldr	r2, [sp, #56]	; 0x38
    e190:	cmp	r3, r2
    e192:	blt.n	e19c <_svfprintf_r+0x9cc>
    e194:	ldr	r3, [sp, #12]
    e196:	lsls	r3, r3, #31
    e198:	bpl.w	dcfc <_svfprintf_r+0x52c>
    e19c:	ldr	r3, [sp, #144]	; 0x90
    e19e:	ldr	r1, [sp, #72]	; 0x48
    e1a0:	ldr	r2, [sp, #76]	; 0x4c
    e1a2:	str.w	r2, [r9]
    e1a6:	adds	r3, #1
    e1a8:	add	r4, r1
    e1aa:	cmp	r3, #7
    e1ac:	str	r4, [sp, #148]	; 0x94
    e1ae:	str.w	r1, [r9, #4]
    e1b2:	str	r3, [sp, #144]	; 0x90
    e1b4:	bgt.w	ea46 <_svfprintf_r+0x1276>
    e1b8:	add.w	r9, r9, #8
    e1bc:	ldr	r3, [sp, #56]	; 0x38
    e1be:	subs	r5, r3, #1
    e1c0:	cmp	r5, #0
    e1c2:	ble.w	dcfc <_svfprintf_r+0x52c>
    e1c6:	ldr	r2, [pc, #32]	; (e1e8 <_svfprintf_r+0xa18>)
    e1c8:	ldr	r3, [sp, #144]	; 0x90
    e1ca:	str	r2, [sp, #44]	; 0x2c
    e1cc:	cmp	r5, #16
    e1ce:	ble.w	e5a4 <_svfprintf_r+0xdd4>
    e1d2:	movs	r6, #16
    e1d4:	ldr	r7, [sp, #24]
    e1d6:	ldr.w	fp, [sp, #20]
    e1da:	b.n	e1f8 <_svfprintf_r+0xa28>
    e1dc:	.word	0x00013568
    e1e0:	.word	0x0001357c
    e1e4:	.word	0x00013598
    e1e8:	.word	0x00013548
    e1ec:	add.w	r9, r9, #8
    e1f0:	subs	r5, #16
    e1f2:	cmp	r5, #16
    e1f4:	ble.w	e5a4 <_svfprintf_r+0xdd4>
    e1f8:	adds	r3, #1
    e1fa:	adds	r4, #16
    e1fc:	cmp	r3, #7
    e1fe:	str	r4, [sp, #148]	; 0x94
    e200:	str	r3, [sp, #144]	; 0x90
    e202:	str.w	sl, [r9]
    e206:	str.w	r6, [r9, #4]
    e20a:	ble.n	e1ec <_svfprintf_r+0xa1c>
    e20c:	add	r2, sp, #140	; 0x8c
    e20e:	mov	r1, fp
    e210:	mov	r0, r7
    e212:	bl	12768 <__ssprint_r>
    e216:	cmp	r0, #0
    e218:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e21c:	ldr	r4, [sp, #148]	; 0x94
    e21e:	ldr	r3, [sp, #144]	; 0x90
    e220:	add.w	r9, sp, #192	; 0xc0
    e224:	b.n	e1f0 <_svfprintf_r+0xa20>
    e226:	ldr	r3, [sp, #32]
    e228:	ldr	r2, [sp, #16]
    e22a:	subs	r7, r3, r2
    e22c:	cmp	r7, #0
    e22e:	ble.w	dc64 <_svfprintf_r+0x494>
    e232:	ldr	r2, [pc, #752]	; (e524 <_svfprintf_r+0xd54>)
    e234:	ldr	r3, [sp, #144]	; 0x90
    e236:	str	r2, [sp, #44]	; 0x2c
    e238:	cmp	r7, #16
    e23a:	ble.n	e294 <_svfprintf_r+0xac4>
    e23c:	mov	r2, r9
    e23e:	mov	r1, r4
    e240:	mov	r9, r7
    e242:	movs	r5, #16
    e244:	mov	r7, r6
    e246:	ldr	r4, [sp, #24]
    e248:	ldr	r6, [sp, #20]
    e24a:	b.n	e25a <_svfprintf_r+0xa8a>
    e24c:	sub.w	r9, r9, #16
    e250:	cmp.w	r9, #16
    e254:	add.w	r2, r2, #8
    e258:	ble.n	e28c <_svfprintf_r+0xabc>
    e25a:	adds	r3, #1
    e25c:	adds	r1, #16
    e25e:	cmp	r3, #7
    e260:	str	r1, [sp, #148]	; 0x94
    e262:	str	r3, [sp, #144]	; 0x90
    e264:	str.w	sl, [r2]
    e268:	str	r5, [r2, #4]
    e26a:	ble.n	e24c <_svfprintf_r+0xa7c>
    e26c:	add	r2, sp, #140	; 0x8c
    e26e:	mov	r1, r6
    e270:	mov	r0, r4
    e272:	bl	12768 <__ssprint_r>
    e276:	cmp	r0, #0
    e278:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e27c:	sub.w	r9, r9, #16
    e280:	cmp.w	r9, #16
    e284:	ldr	r1, [sp, #148]	; 0x94
    e286:	ldr	r3, [sp, #144]	; 0x90
    e288:	add	r2, sp, #192	; 0xc0
    e28a:	bgt.n	e25a <_svfprintf_r+0xa8a>
    e28c:	mov	r6, r7
    e28e:	mov	r4, r1
    e290:	mov	r7, r9
    e292:	mov	r9, r2
    e294:	adds	r3, #1
    e296:	ldr	r2, [sp, #44]	; 0x2c
    e298:	str	r3, [sp, #144]	; 0x90
    e29a:	add	r4, r7
    e29c:	cmp	r3, #7
    e29e:	str	r4, [sp, #148]	; 0x94
    e2a0:	stmia.w	r9, {r2, r7}
    e2a4:	bgt.w	e722 <_svfprintf_r+0xf52>
    e2a8:	add.w	r9, r9, #8
    e2ac:	b.n	dc64 <_svfprintf_r+0x494>
    e2ae:	ldr	r3, [sp, #56]	; 0x38
    e2b0:	ldr	r5, [sp, #144]	; 0x90
    e2b2:	cmp	r3, #1
    e2b4:	ble.w	e6cc <_svfprintf_r+0xefc>
    e2b8:	adds	r5, #1
    e2ba:	adds	r4, #1
    e2bc:	movs	r3, #1
    e2be:	cmp	r5, #7
    e2c0:	str	r4, [sp, #148]	; 0x94
    e2c2:	str	r5, [sp, #144]	; 0x90
    e2c4:	str.w	r6, [r9]
    e2c8:	str.w	r3, [r9, #4]
    e2cc:	bgt.w	e6ee <_svfprintf_r+0xf1e>
    e2d0:	add.w	r9, r9, #8
    e2d4:	ldr	r2, [sp, #72]	; 0x48
    e2d6:	ldr	r3, [sp, #76]	; 0x4c
    e2d8:	str.w	r3, [r9]
    e2dc:	adds	r5, #1
    e2de:	add	r4, r2
    e2e0:	cmp	r5, #7
    e2e2:	str	r4, [sp, #148]	; 0x94
    e2e4:	str	r5, [sp, #144]	; 0x90
    e2e6:	str.w	r2, [r9, #4]
    e2ea:	bgt.w	e708 <_svfprintf_r+0xf38>
    e2ee:	add.w	r9, r9, #8
    e2f2:	movs	r3, #0
    e2f4:	movs	r2, #0
    e2f6:	ldrd	r0, r1, [sp, #64]	; 0x40
    e2fa:	bl	af00 <__aeabi_dcmpeq>
    e2fe:	ldr	r3, [sp, #56]	; 0x38
    e300:	cmp	r0, #0
    e302:	bne.w	e48c <_svfprintf_r+0xcbc>
    e306:	subs	r3, #1
    e308:	adds	r5, #1
    e30a:	adds	r6, #1
    e30c:	add	r4, r3
    e30e:	cmp	r5, #7
    e310:	str	r5, [sp, #144]	; 0x90
    e312:	str	r4, [sp, #148]	; 0x94
    e314:	str.w	r6, [r9]
    e318:	str.w	r3, [r9, #4]
    e31c:	bgt.w	e50a <_svfprintf_r+0xd3a>
    e320:	add.w	r9, r9, #8
    e324:	ldr	r2, [sp, #84]	; 0x54
    e326:	str.w	r2, [r9, #4]
    e32a:	adds	r5, #1
    e32c:	add	r4, r2
    e32e:	add	r3, sp, #124	; 0x7c
    e330:	cmp	r5, #7
    e332:	str	r4, [sp, #148]	; 0x94
    e334:	str	r5, [sp, #144]	; 0x90
    e336:	str.w	r3, [r9]
    e33a:	ble.w	dcf8 <_svfprintf_r+0x528>
    e33e:	add	r2, sp, #140	; 0x8c
    e340:	ldr	r1, [sp, #20]
    e342:	ldr	r0, [sp, #24]
    e344:	bl	12768 <__ssprint_r>
    e348:	cmp	r0, #0
    e34a:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e34e:	ldr	r4, [sp, #148]	; 0x94
    e350:	add.w	r9, sp, #192	; 0xc0
    e354:	b.n	dcfc <_svfprintf_r+0x52c>
    e356:	add	r2, sp, #140	; 0x8c
    e358:	ldr	r1, [sp, #20]
    e35a:	ldr	r0, [sp, #24]
    e35c:	bl	12768 <__ssprint_r>
    e360:	cmp	r0, #0
    e362:	beq.w	dd98 <_svfprintf_r+0x5c8>
    e366:	b.w	d9c4 <_svfprintf_r+0x1f4>
    e36a:	add	r2, sp, #140	; 0x8c
    e36c:	ldr	r1, [sp, #20]
    e36e:	ldr	r0, [sp, #24]
    e370:	bl	12768 <__ssprint_r>
    e374:	cmp	r0, #0
    e376:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e37a:	ldr	r4, [sp, #148]	; 0x94
    e37c:	add.w	r9, sp, #192	; 0xc0
    e380:	b.n	dcd6 <_svfprintf_r+0x506>
    e382:	add	r2, sp, #140	; 0x8c
    e384:	ldr	r1, [sp, #20]
    e386:	ldr	r0, [sp, #24]
    e388:	bl	12768 <__ssprint_r>
    e38c:	cmp	r0, #0
    e38e:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e392:	ldr	r4, [sp, #148]	; 0x94
    e394:	add.w	r9, sp, #192	; 0xc0
    e398:	b.n	dc3c <_svfprintf_r+0x46c>
    e39a:	add	r2, sp, #140	; 0x8c
    e39c:	ldr	r1, [sp, #20]
    e39e:	ldr	r0, [sp, #24]
    e3a0:	bl	12768 <__ssprint_r>
    e3a4:	cmp	r0, #0
    e3a6:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e3aa:	ldr	r4, [sp, #148]	; 0x94
    e3ac:	add.w	r9, sp, #192	; 0xc0
    e3b0:	b.n	dc5c <_svfprintf_r+0x48c>
    e3b2:	cmp.w	fp, #0
    e3b6:	strb.w	r7, [sp, #111]	; 0x6f
    e3ba:	blt.w	e97c <_svfprintf_r+0x11ac>
    e3be:	bic.w	r3, r2, #128	; 0x80
    e3c2:	str	r3, [sp, #12]
    e3c4:	orrs.w	r3, r4, r5
    e3c8:	bne.w	df72 <_svfprintf_r+0x7a2>
    e3cc:	cmp.w	fp, #0
    e3d0:	beq.w	e0ec <_svfprintf_r+0x91c>
    e3d4:	movs	r7, #0
    e3d6:	b.n	e148 <_svfprintf_r+0x978>
    e3d8:	ldr	r5, [sp, #116]	; 0x74
    e3da:	cmp	r5, #0
    e3dc:	ble.w	e982 <_svfprintf_r+0x11b2>
    e3e0:	ldr	r3, [sp, #60]	; 0x3c
    e3e2:	ldr	r2, [sp, #56]	; 0x38
    e3e4:	cmp	r3, r2
    e3e6:	it	ge
    e3e8:	movge	r3, r2
    e3ea:	cmp	r3, #0
    e3ec:	mov	r5, r3
    e3ee:	ble.n	e40c <_svfprintf_r+0xc3c>
    e3f0:	ldr	r3, [sp, #144]	; 0x90
    e3f2:	str.w	r6, [r9]
    e3f6:	adds	r3, #1
    e3f8:	add	r4, r5
    e3fa:	cmp	r3, #7
    e3fc:	str	r4, [sp, #148]	; 0x94
    e3fe:	str.w	r5, [r9, #4]
    e402:	str	r3, [sp, #144]	; 0x90
    e404:	bgt.w	eb5a <_svfprintf_r+0x138a>
    e408:	add.w	r9, r9, #8
    e40c:	ldr	r3, [sp, #60]	; 0x3c
    e40e:	cmp	r5, #0
    e410:	it	ge
    e412:	subge	r3, r3, r5
    e414:	cmp	r3, #0
    e416:	mov	r5, r3
    e418:	ble.w	e60c <_svfprintf_r+0xe3c>
    e41c:	ldr	r2, [pc, #260]	; (e524 <_svfprintf_r+0xd54>)
    e41e:	ldr	r3, [sp, #144]	; 0x90
    e420:	str	r2, [sp, #44]	; 0x2c
    e422:	cmp	r5, #16
    e424:	ble.w	e92e <_svfprintf_r+0x115e>
    e428:	mov	r2, r4
    e42a:	movs	r7, #16
    e42c:	ldr.w	fp, [sp, #24]
    e430:	ldr	r4, [sp, #20]
    e432:	b.n	e440 <_svfprintf_r+0xc70>
    e434:	add.w	r9, r9, #8
    e438:	subs	r5, #16
    e43a:	cmp	r5, #16
    e43c:	ble.w	e92c <_svfprintf_r+0x115c>
    e440:	adds	r3, #1
    e442:	adds	r2, #16
    e444:	cmp	r3, #7
    e446:	str	r2, [sp, #148]	; 0x94
    e448:	str	r3, [sp, #144]	; 0x90
    e44a:	str.w	sl, [r9]
    e44e:	str.w	r7, [r9, #4]
    e452:	ble.n	e434 <_svfprintf_r+0xc64>
    e454:	add	r2, sp, #140	; 0x8c
    e456:	mov	r1, r4
    e458:	mov	r0, fp
    e45a:	bl	12768 <__ssprint_r>
    e45e:	cmp	r0, #0
    e460:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e464:	ldr	r2, [sp, #148]	; 0x94
    e466:	ldr	r3, [sp, #144]	; 0x90
    e468:	add.w	r9, sp, #192	; 0xc0
    e46c:	b.n	e438 <_svfprintf_r+0xc68>
    e46e:	add	r2, sp, #140	; 0x8c
    e470:	ldr	r1, [sp, #20]
    e472:	ldr	r0, [sp, #24]
    e474:	bl	12768 <__ssprint_r>
    e478:	cmp	r0, #0
    e47a:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e47e:	ldrb.w	r7, [sp, #111]	; 0x6f
    e482:	ldr	r4, [sp, #148]	; 0x94
    e484:	add.w	r9, sp, #192	; 0xc0
    e488:	b.w	dc1c <_svfprintf_r+0x44c>
    e48c:	subs	r6, r3, #1
    e48e:	cmp	r6, #0
    e490:	ble.w	e324 <_svfprintf_r+0xb54>
    e494:	ldr	r3, [pc, #140]	; (e524 <_svfprintf_r+0xd54>)
    e496:	str	r3, [sp, #44]	; 0x2c
    e498:	cmp	r6, #16
    e49a:	ble.n	e4f6 <_svfprintf_r+0xd26>
    e49c:	str.w	r8, [sp, #36]	; 0x24
    e4a0:	movs	r7, #16
    e4a2:	mov	r8, r6
    e4a4:	ldr.w	fp, [sp, #24]
    e4a8:	ldr	r6, [sp, #20]
    e4aa:	b.n	e4ba <_svfprintf_r+0xcea>
    e4ac:	sub.w	r8, r8, #16
    e4b0:	cmp.w	r8, #16
    e4b4:	add.w	r9, r9, #8
    e4b8:	ble.n	e4f0 <_svfprintf_r+0xd20>
    e4ba:	adds	r5, #1
    e4bc:	adds	r4, #16
    e4be:	cmp	r5, #7
    e4c0:	str	r4, [sp, #148]	; 0x94
    e4c2:	str	r5, [sp, #144]	; 0x90
    e4c4:	str.w	sl, [r9]
    e4c8:	str.w	r7, [r9, #4]
    e4cc:	ble.n	e4ac <_svfprintf_r+0xcdc>
    e4ce:	add	r2, sp, #140	; 0x8c
    e4d0:	mov	r1, r6
    e4d2:	mov	r0, fp
    e4d4:	bl	12768 <__ssprint_r>
    e4d8:	cmp	r0, #0
    e4da:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e4de:	sub.w	r8, r8, #16
    e4e2:	cmp.w	r8, #16
    e4e6:	ldr	r4, [sp, #148]	; 0x94
    e4e8:	ldr	r5, [sp, #144]	; 0x90
    e4ea:	add.w	r9, sp, #192	; 0xc0
    e4ee:	bgt.n	e4ba <_svfprintf_r+0xcea>
    e4f0:	mov	r6, r8
    e4f2:	ldr.w	r8, [sp, #36]	; 0x24
    e4f6:	ldr	r3, [sp, #44]	; 0x2c
    e4f8:	adds	r5, #1
    e4fa:	add	r4, r6
    e4fc:	cmp	r5, #7
    e4fe:	str	r4, [sp, #148]	; 0x94
    e500:	str	r5, [sp, #144]	; 0x90
    e502:	stmia.w	r9, {r3, r6}
    e506:	ble.w	e320 <_svfprintf_r+0xb50>
    e50a:	add	r2, sp, #140	; 0x8c
    e50c:	ldr	r1, [sp, #20]
    e50e:	ldr	r0, [sp, #24]
    e510:	bl	12768 <__ssprint_r>
    e514:	cmp	r0, #0
    e516:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e51a:	ldr	r4, [sp, #148]	; 0x94
    e51c:	ldr	r5, [sp, #144]	; 0x90
    e51e:	add.w	r9, sp, #192	; 0xc0
    e522:	b.n	e324 <_svfprintf_r+0xb54>
    e524:	.word	0x00013548
    e528:	ldr	r1, [sp, #12]
    e52a:	ands.w	r2, r1, #16
    e52e:	beq.w	e8d8 <_svfprintf_r+0x1108>
    e532:	ldr	r0, [sp, #40]	; 0x28
    e534:	strb.w	r3, [sp, #111]	; 0x6f
    e538:	cmp.w	fp, #0
    e53c:	ldr	r4, [r0, #0]
    e53e:	add.w	r7, r0, #4
    e542:	mov.w	r5, #0
    e546:	blt.n	e596 <_svfprintf_r+0xdc6>
    e548:	mov	r2, r1
    e54a:	bic.w	r2, r2, #128	; 0x80
    e54e:	str	r2, [sp, #12]
    e550:	orrs.w	r2, r4, r5
    e554:	str	r7, [sp, #40]	; 0x28
    e556:	mov	r7, r3
    e558:	bne.w	db2c <_svfprintf_r+0x35c>
    e55c:	b.n	defc <_svfprintf_r+0x72c>
    e55e:	ldr	r3, [sp, #12]
    e560:	lsls	r0, r3, #27
    e562:	bmi.n	e5ba <_svfprintf_r+0xdea>
    e564:	ldr	r3, [sp, #12]
    e566:	lsls	r1, r3, #25
    e568:	bpl.n	e5ba <_svfprintf_r+0xdea>
    e56a:	ldr	r1, [sp, #40]	; 0x28
    e56c:	ldrsh.w	r4, [r1]
    e570:	adds	r1, #4
    e572:	asrs	r5, r4, #31
    e574:	mov	r2, r4
    e576:	mov	r3, r5
    e578:	str	r1, [sp, #40]	; 0x28
    e57a:	b.w	db06 <_svfprintf_r+0x336>
    e57e:	ldr	r1, [sp, #40]	; 0x28
    e580:	strb.w	r3, [sp, #111]	; 0x6f
    e584:	cmp.w	fp, #0
    e588:	ldr	r4, [r1, #0]
    e58a:	add.w	r7, r1, #4
    e58e:	mov.w	r5, #0
    e592:	bge.w	ea2e <_svfprintf_r+0x125e>
    e596:	str	r7, [sp, #40]	; 0x28
    e598:	mov	r7, r3
    e59a:	orrs.w	r3, r4, r5
    e59e:	bne.w	db2c <_svfprintf_r+0x35c>
    e5a2:	b.n	df06 <_svfprintf_r+0x736>
    e5a4:	adds	r3, #1
    e5a6:	ldr	r2, [sp, #44]	; 0x2c
    e5a8:	str	r3, [sp, #144]	; 0x90
    e5aa:	add	r4, r5
    e5ac:	cmp	r3, #7
    e5ae:	str	r4, [sp, #148]	; 0x94
    e5b0:	stmia.w	r9, {r2, r5}
    e5b4:	ble.w	dcf8 <_svfprintf_r+0x528>
    e5b8:	b.n	e33e <_svfprintf_r+0xb6e>
    e5ba:	ldr	r2, [sp, #40]	; 0x28
    e5bc:	ldr	r4, [r2, #0]
    e5be:	mov	r3, r2
    e5c0:	adds	r3, #4
    e5c2:	asrs	r5, r4, #31
    e5c4:	mov	r2, r4
    e5c6:	str	r3, [sp, #40]	; 0x28
    e5c8:	cmp	r2, #0
    e5ca:	mov	r3, r5
    e5cc:	sbcs.w	r3, r3, #0
    e5d0:	bge.w	db10 <_svfprintf_r+0x340>
    e5d4:	negs	r4, r4
    e5d6:	mov.w	r7, #45	; 0x2d
    e5da:	sbc.w	r5, r5, r5, lsl #1
    e5de:	cmp.w	fp, #0
    e5e2:	strb.w	r7, [sp, #111]	; 0x6f
    e5e6:	blt.w	db2c <_svfprintf_r+0x35c>
    e5ea:	ldr	r3, [sp, #12]
    e5ec:	bic.w	r3, r3, #128	; 0x80
    e5f0:	str	r3, [sp, #12]
    e5f2:	b.w	db2c <_svfprintf_r+0x35c>
    e5f6:	add	r2, sp, #140	; 0x8c
    e5f8:	ldr	r1, [sp, #20]
    e5fa:	ldr	r0, [sp, #24]
    e5fc:	bl	12768 <__ssprint_r>
    e600:	cmp	r0, #0
    e602:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e606:	ldr	r4, [sp, #148]	; 0x94
    e608:	add.w	r9, sp, #192	; 0xc0
    e60c:	ldr	r2, [sp, #60]	; 0x3c
    e60e:	ldr	r3, [sp, #116]	; 0x74
    e610:	add	r2, r6
    e612:	mov	r7, r2
    e614:	ldr	r2, [sp, #56]	; 0x38
    e616:	cmp	r3, r2
    e618:	blt.n	e6aa <_svfprintf_r+0xeda>
    e61a:	ldr	r2, [sp, #12]
    e61c:	lsls	r5, r2, #31
    e61e:	bmi.n	e6aa <_svfprintf_r+0xeda>
    e620:	ldr	r1, [sp, #56]	; 0x38
    e622:	add	r6, r1
    e624:	subs	r5, r6, r7
    e626:	subs	r3, r1, r3
    e628:	cmp	r5, r3
    e62a:	it	ge
    e62c:	movge	r5, r3
    e62e:	cmp	r5, #0
    e630:	mov	r6, r5
    e632:	ble.n	e650 <_svfprintf_r+0xe80>
    e634:	ldr	r2, [sp, #144]	; 0x90
    e636:	str.w	r7, [r9]
    e63a:	adds	r2, #1
    e63c:	add	r4, r5
    e63e:	cmp	r2, #7
    e640:	str	r4, [sp, #148]	; 0x94
    e642:	str.w	r5, [r9, #4]
    e646:	str	r2, [sp, #144]	; 0x90
    e648:	bgt.w	ec48 <_svfprintf_r+0x1478>
    e64c:	add.w	r9, r9, #8
    e650:	cmp	r6, #0
    e652:	ite	ge
    e654:	subge	r5, r3, r6
    e656:	movlt	r5, r3
    e658:	cmp	r5, #0
    e65a:	ble.w	dcfc <_svfprintf_r+0x52c>
    e65e:	ldr	r2, [pc, #744]	; (e948 <_svfprintf_r+0x1178>)
    e660:	ldr	r3, [sp, #144]	; 0x90
    e662:	str	r2, [sp, #44]	; 0x2c
    e664:	cmp	r5, #16
    e666:	ble.n	e5a4 <_svfprintf_r+0xdd4>
    e668:	movs	r6, #16
    e66a:	ldr	r7, [sp, #24]
    e66c:	ldr.w	fp, [sp, #20]
    e670:	b.n	e67c <_svfprintf_r+0xeac>
    e672:	add.w	r9, r9, #8
    e676:	subs	r5, #16
    e678:	cmp	r5, #16
    e67a:	ble.n	e5a4 <_svfprintf_r+0xdd4>
    e67c:	adds	r3, #1
    e67e:	adds	r4, #16
    e680:	cmp	r3, #7
    e682:	str	r4, [sp, #148]	; 0x94
    e684:	str	r3, [sp, #144]	; 0x90
    e686:	str.w	sl, [r9]
    e68a:	str.w	r6, [r9, #4]
    e68e:	ble.n	e672 <_svfprintf_r+0xea2>
    e690:	add	r2, sp, #140	; 0x8c
    e692:	mov	r1, fp
    e694:	mov	r0, r7
    e696:	bl	12768 <__ssprint_r>
    e69a:	cmp	r0, #0
    e69c:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e6a0:	ldr	r4, [sp, #148]	; 0x94
    e6a2:	ldr	r3, [sp, #144]	; 0x90
    e6a4:	add.w	r9, sp, #192	; 0xc0
    e6a8:	b.n	e676 <_svfprintf_r+0xea6>
    e6aa:	ldr	r2, [sp, #144]	; 0x90
    e6ac:	ldr	r0, [sp, #72]	; 0x48
    e6ae:	ldr	r1, [sp, #76]	; 0x4c
    e6b0:	str.w	r1, [r9]
    e6b4:	adds	r2, #1
    e6b6:	add	r4, r0
    e6b8:	cmp	r2, #7
    e6ba:	str	r4, [sp, #148]	; 0x94
    e6bc:	str.w	r0, [r9, #4]
    e6c0:	str	r2, [sp, #144]	; 0x90
    e6c2:	bgt.w	ec2e <_svfprintf_r+0x145e>
    e6c6:	add.w	r9, r9, #8
    e6ca:	b.n	e620 <_svfprintf_r+0xe50>
    e6cc:	ldr	r3, [sp, #12]
    e6ce:	lsls	r0, r3, #31
    e6d0:	bmi.w	e2b8 <_svfprintf_r+0xae8>
    e6d4:	adds	r5, #1
    e6d6:	adds	r4, #1
    e6d8:	movs	r3, #1
    e6da:	cmp	r5, #7
    e6dc:	str	r4, [sp, #148]	; 0x94
    e6de:	str	r5, [sp, #144]	; 0x90
    e6e0:	str.w	r6, [r9]
    e6e4:	str.w	r3, [r9, #4]
    e6e8:	ble.w	e320 <_svfprintf_r+0xb50>
    e6ec:	b.n	e50a <_svfprintf_r+0xd3a>
    e6ee:	add	r2, sp, #140	; 0x8c
    e6f0:	ldr	r1, [sp, #20]
    e6f2:	ldr	r0, [sp, #24]
    e6f4:	bl	12768 <__ssprint_r>
    e6f8:	cmp	r0, #0
    e6fa:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e6fe:	ldr	r4, [sp, #148]	; 0x94
    e700:	ldr	r5, [sp, #144]	; 0x90
    e702:	add.w	r9, sp, #192	; 0xc0
    e706:	b.n	e2d4 <_svfprintf_r+0xb04>
    e708:	add	r2, sp, #140	; 0x8c
    e70a:	ldr	r1, [sp, #20]
    e70c:	ldr	r0, [sp, #24]
    e70e:	bl	12768 <__ssprint_r>
    e712:	cmp	r0, #0
    e714:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e718:	ldr	r4, [sp, #148]	; 0x94
    e71a:	ldr	r5, [sp, #144]	; 0x90
    e71c:	add.w	r9, sp, #192	; 0xc0
    e720:	b.n	e2f2 <_svfprintf_r+0xb22>
    e722:	add	r2, sp, #140	; 0x8c
    e724:	ldr	r1, [sp, #20]
    e726:	ldr	r0, [sp, #24]
    e728:	bl	12768 <__ssprint_r>
    e72c:	cmp	r0, #0
    e72e:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e732:	ldr	r4, [sp, #148]	; 0x94
    e734:	add.w	r9, sp, #192	; 0xc0
    e738:	b.w	dc64 <_svfprintf_r+0x494>
    e73c:	ldr	r1, [sp, #12]
    e73e:	ands.w	r3, r1, #64	; 0x40
    e742:	beq.w	e8b8 <_svfprintf_r+0x10e8>
    e746:	ldr	r0, [sp, #40]	; 0x28
    e748:	strb.w	r2, [sp, #111]	; 0x6f
    e74c:	mov	r3, r0
    e74e:	cmp.w	fp, #0
    e752:	add.w	r3, r3, #4
    e756:	ldrh	r4, [r0, #0]
    e758:	mov.w	r5, #0
    e75c:	blt.w	eae0 <_svfprintf_r+0x1310>
    e760:	bic.w	r1, r1, #128	; 0x80
    e764:	str	r1, [sp, #12]
    e766:	orrs.w	r1, r4, r5
    e76a:	str	r3, [sp, #40]	; 0x28
    e76c:	beq.w	e124 <_svfprintf_r+0x954>
    e770:	mov	r7, r2
    e772:	b.w	da1c <_svfprintf_r+0x24c>
    e776:	ldr	r3, [sp, #12]
    e778:	lsls	r7, r3, #27
    e77a:	bmi.n	e794 <_svfprintf_r+0xfc4>
    e77c:	ldr	r3, [sp, #12]
    e77e:	lsls	r6, r3, #25
    e780:	bpl.n	e794 <_svfprintf_r+0xfc4>
    e782:	ldr	r2, [sp, #40]	; 0x28
    e784:	ldr	r3, [r2, #0]
    e786:	adds	r2, #4
    e788:	str	r2, [sp, #40]	; 0x28
    e78a:	ldrh.w	r2, [sp, #28]
    e78e:	strh	r2, [r3, #0]
    e790:	b.w	d81e <_svfprintf_r+0x4e>
    e794:	ldr	r2, [sp, #40]	; 0x28
    e796:	ldr	r3, [r2, #0]
    e798:	adds	r2, #4
    e79a:	str	r2, [sp, #40]	; 0x28
    e79c:	ldr	r2, [sp, #28]
    e79e:	str	r2, [r3, #0]
    e7a0:	b.w	d81e <_svfprintf_r+0x4e>
    e7a4:	ldrd	r0, r1, [sp, #64]	; 0x40
    e7a8:	mov	r2, r0
    e7aa:	mov	r3, r1
    e7ac:	bl	af64 <__aeabi_dcmpun>
    e7b0:	cmp	r0, #0
    e7b2:	bne.w	edb0 <_svfprintf_r+0x15e0>
    e7b6:	ldr	r3, [sp, #52]	; 0x34
    e7b8:	cmp.w	fp, #4294967295
    e7bc:	bic.w	r7, r3, #32
    e7c0:	beq.w	ec92 <_svfprintf_r+0x14c2>
    e7c4:	cmp	r7, #71	; 0x47
    e7c6:	beq.w	eace <_svfprintf_r+0x12fe>
    e7ca:	ldr	r3, [sp, #68]	; 0x44
    e7cc:	ldr	r2, [sp, #12]
    e7ce:	cmp	r3, #0
    e7d0:	orr.w	r2, r2, #256	; 0x100
    e7d4:	str	r2, [sp, #44]	; 0x2c
    e7d6:	blt.w	ecca <_svfprintf_r+0x14fa>
    e7da:	vldr	d7, [sp, #64]	; 0x40
    e7de:	vstr	d7, [sp, #96]	; 0x60
    e7e2:	movs	r3, #0
    e7e4:	str	r3, [sp, #16]
    e7e6:	ldr	r3, [sp, #52]	; 0x34
    e7e8:	cmp	r3, #102	; 0x66
    e7ea:	beq.w	ec98 <_svfprintf_r+0x14c8>
    e7ee:	cmp	r3, #70	; 0x46
    e7f0:	beq.w	ea7e <_svfprintf_r+0x12ae>
    e7f4:	cmp	r7, #69	; 0x45
    e7f6:	ite	eq
    e7f8:	addeq.w	r5, fp, #1
    e7fc:	movne	r5, fp
    e7fe:	add	r2, sp, #132	; 0x84
    e800:	add	r3, sp, #120	; 0x78
    e802:	str	r2, [sp, #4]
    e804:	str	r3, [sp, #0]
    e806:	mov	r2, r5
    e808:	add	r3, sp, #116	; 0x74
    e80a:	movs	r1, #2
    e80c:	vldr	d0, [sp, #96]	; 0x60
    e810:	ldr	r0, [sp, #24]
    e812:	bl	ffd8 <_dtoa_r>
    e816:	ldr	r3, [sp, #52]	; 0x34
    e818:	cmp	r3, #103	; 0x67
    e81a:	mov	r6, r0
    e81c:	bne.w	ecf6 <_svfprintf_r+0x1526>
    e820:	ldr	r3, [sp, #12]
    e822:	lsls	r2, r3, #31
    e824:	bpl.w	ed9a <_svfprintf_r+0x15ca>
    e828:	adds	r4, r6, r5
    e82a:	movs	r2, #0
    e82c:	movs	r3, #0
    e82e:	ldrd	r0, r1, [sp, #96]	; 0x60
    e832:	bl	af00 <__aeabi_dcmpeq>
    e836:	cmp	r0, #0
    e838:	bne.w	eb56 <_svfprintf_r+0x1386>
    e83c:	ldr	r3, [sp, #132]	; 0x84
    e83e:	cmp	r4, r3
    e840:	bls.n	e850 <_svfprintf_r+0x1080>
    e842:	movs	r1, #48	; 0x30
    e844:	adds	r2, r3, #1
    e846:	str	r2, [sp, #132]	; 0x84
    e848:	strb	r1, [r3, #0]
    e84a:	ldr	r3, [sp, #132]	; 0x84
    e84c:	cmp	r4, r3
    e84e:	bhi.n	e844 <_svfprintf_r+0x1074>
    e850:	subs	r3, r3, r6
    e852:	cmp	r7, #71	; 0x47
    e854:	str	r3, [sp, #56]	; 0x38
    e856:	beq.w	eb48 <_svfprintf_r+0x1378>
    e85a:	ldr	r3, [sp, #52]	; 0x34
    e85c:	cmp	r3, #101	; 0x65
    e85e:	ble.w	ed14 <_svfprintf_r+0x1544>
    e862:	ldr	r3, [sp, #52]	; 0x34
    e864:	cmp	r3, #102	; 0x66
    e866:	ldr	r3, [sp, #116]	; 0x74
    e868:	str	r3, [sp, #60]	; 0x3c
    e86a:	beq.w	ed2e <_svfprintf_r+0x155e>
    e86e:	ldr	r2, [sp, #60]	; 0x3c
    e870:	ldr	r1, [sp, #56]	; 0x38
    e872:	cmp	r2, r1
    e874:	blt.w	ecdc <_svfprintf_r+0x150c>
    e878:	ldr	r3, [sp, #12]
    e87a:	lsls	r1, r3, #31
    e87c:	bmi.w	ed9e <_svfprintf_r+0x15ce>
    e880:	bic.w	r3, r2, r2, asr #31
    e884:	str	r2, [sp, #36]	; 0x24
    e886:	movs	r2, #103	; 0x67
    e888:	str	r2, [sp, #52]	; 0x34
    e88a:	ldr	r2, [sp, #16]
    e88c:	cmp	r2, #0
    e88e:	bne.w	eaf0 <_svfprintf_r+0x1320>
    e892:	str	r3, [sp, #16]
    e894:	ldr	r3, [sp, #44]	; 0x2c
    e896:	str	r3, [sp, #12]
    e898:	mov	fp, r2
    e89a:	ldrb.w	r7, [sp, #111]	; 0x6f
    e89e:	b.w	db74 <_svfprintf_r+0x3a4>
    e8a2:	bic.w	r7, r7, #7
    e8a6:	vldr	d7, [r7]
    e8aa:	add.w	r3, r7, #8
    e8ae:	vstr	d7, [sp, #64]	; 0x40
    e8b2:	str	r3, [sp, #40]	; 0x28
    e8b4:	b.w	ddcc <_svfprintf_r+0x5fc>
    e8b8:	ldr	r1, [sp, #40]	; 0x28
    e8ba:	strb.w	r3, [sp, #111]	; 0x6f
    e8be:	cmp.w	fp, #0
    e8c2:	ldr	r4, [r1, #0]
    e8c4:	add.w	r7, r1, #4
    e8c8:	mov.w	r5, #0
    e8cc:	bge.w	ea28 <_svfprintf_r+0x1258>
    e8d0:	str	r7, [sp, #40]	; 0x28
    e8d2:	movs	r7, #0
    e8d4:	b.w	da1c <_svfprintf_r+0x24c>
    e8d8:	ldr	r1, [sp, #12]
    e8da:	ands.w	r3, r1, #64	; 0x40
    e8de:	beq.w	e57e <_svfprintf_r+0xdae>
    e8e2:	ldr	r0, [sp, #40]	; 0x28
    e8e4:	strb.w	r2, [sp, #111]	; 0x6f
    e8e8:	mov	r3, r0
    e8ea:	cmp.w	fp, #0
    e8ee:	add.w	r3, r3, #4
    e8f2:	ldrh	r4, [r0, #0]
    e8f4:	mov.w	r5, #0
    e8f8:	blt.w	eada <_svfprintf_r+0x130a>
    e8fc:	bic.w	r1, r1, #128	; 0x80
    e900:	str	r1, [sp, #12]
    e902:	orrs.w	r1, r4, r5
    e906:	str	r3, [sp, #40]	; 0x28
    e908:	mov	r7, r2
    e90a:	bne.w	db2c <_svfprintf_r+0x35c>
    e90e:	b.w	defc <_svfprintf_r+0x72c>
    e912:	ldr	r3, [sp, #12]
    e914:	ldr	r2, [sp, #40]	; 0x28
    e916:	tst.w	r3, #64	; 0x40
    e91a:	mov	r3, r2
    e91c:	beq.w	eae4 <_svfprintf_r+0x1314>
    e920:	adds	r3, #4
    e922:	ldrh	r4, [r2, #0]
    e924:	str	r3, [sp, #40]	; 0x28
    e926:	movs	r5, #0
    e928:	b.w	df36 <_svfprintf_r+0x766>
    e92c:	mov	r4, r2
    e92e:	adds	r3, #1
    e930:	ldr	r2, [sp, #44]	; 0x2c
    e932:	str	r3, [sp, #144]	; 0x90
    e934:	add	r4, r5
    e936:	cmp	r3, #7
    e938:	str	r4, [sp, #148]	; 0x94
    e93a:	stmia.w	r9, {r2, r5}
    e93e:	bgt.w	e5f6 <_svfprintf_r+0xe26>
    e942:	add.w	r9, r9, #8
    e946:	b.n	e60c <_svfprintf_r+0xe3c>
    e948:	.word	0x00013548
    e94c:	movs	r7, #0
    e94e:	cmp	fp, r7
    e950:	strb.w	r7, [sp, #111]	; 0x6f
    e954:	blt.w	e148 <_svfprintf_r+0x978>
    e958:	ldr	r3, [sp, #12]
    e95a:	bic.w	r3, r3, #128	; 0x80
    e95e:	str	r3, [sp, #12]
    e960:	b.w	e0e4 <_svfprintf_r+0x914>
    e964:	add	r2, sp, #140	; 0x8c
    e966:	ldr	r1, [sp, #20]
    e968:	ldr	r0, [sp, #24]
    e96a:	bl	12768 <__ssprint_r>
    e96e:	cmp	r0, #0
    e970:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    e974:	ldr	r4, [sp, #148]	; 0x94
    e976:	add.w	r9, sp, #192	; 0xc0
    e97a:	b.n	e18c <_svfprintf_r+0x9bc>
    e97c:	ldr	r7, [sp, #40]	; 0x28
    e97e:	b.w	e13a <_svfprintf_r+0x96a>
    e982:	ldr	r3, [sp, #144]	; 0x90
    e984:	ldr	r2, [pc, #736]	; (ec68 <_svfprintf_r+0x1498>)
    e986:	str.w	r2, [r9]
    e98a:	adds	r3, #1
    e98c:	adds	r4, #1
    e98e:	movs	r2, #1
    e990:	cmp	r3, #7
    e992:	str	r4, [sp, #148]	; 0x94
    e994:	str	r3, [sp, #144]	; 0x90
    e996:	str.w	r2, [r9, #4]
    e99a:	bgt.w	eab4 <_svfprintf_r+0x12e4>
    e99e:	add.w	r9, r9, #8
    e9a2:	cbnz	r5, e9b0 <_svfprintf_r+0x11e0>
    e9a4:	ldr	r3, [sp, #56]	; 0x38
    e9a6:	cbnz	r3, e9b0 <_svfprintf_r+0x11e0>
    e9a8:	ldr	r3, [sp, #12]
    e9aa:	lsls	r7, r3, #31
    e9ac:	bpl.w	dcfc <_svfprintf_r+0x52c>
    e9b0:	ldr	r3, [sp, #144]	; 0x90
    e9b2:	ldr	r1, [sp, #72]	; 0x48
    e9b4:	ldr	r2, [sp, #76]	; 0x4c
    e9b6:	str.w	r2, [r9]
    e9ba:	adds	r3, #1
    e9bc:	add	r4, r1
    e9be:	cmp	r3, #7
    e9c0:	str	r4, [sp, #148]	; 0x94
    e9c2:	str.w	r1, [r9, #4]
    e9c6:	str	r3, [sp, #144]	; 0x90
    e9c8:	bgt.w	ed66 <_svfprintf_r+0x1596>
    e9cc:	add.w	r9, r9, #8
    e9d0:	negs	r5, r5
    e9d2:	cmp	r5, #0
    e9d4:	ble.w	eb2c <_svfprintf_r+0x135c>
    e9d8:	ldr	r2, [pc, #656]	; (ec6c <_svfprintf_r+0x149c>)
    e9da:	str	r2, [sp, #44]	; 0x2c
    e9dc:	cmp	r5, #16
    e9de:	ble.w	eb74 <_svfprintf_r+0x13a4>
    e9e2:	mov	r2, r4
    e9e4:	movs	r7, #16
    e9e6:	ldr.w	fp, [sp, #24]
    e9ea:	ldr	r4, [sp, #20]
    e9ec:	b.n	e9fa <_svfprintf_r+0x122a>
    e9ee:	add.w	r9, r9, #8
    e9f2:	subs	r5, #16
    e9f4:	cmp	r5, #16
    e9f6:	ble.w	eb72 <_svfprintf_r+0x13a2>
    e9fa:	adds	r3, #1
    e9fc:	adds	r2, #16
    e9fe:	cmp	r3, #7
    ea00:	str	r2, [sp, #148]	; 0x94
    ea02:	str	r3, [sp, #144]	; 0x90
    ea04:	str.w	sl, [r9]
    ea08:	str.w	r7, [r9, #4]
    ea0c:	ble.n	e9ee <_svfprintf_r+0x121e>
    ea0e:	add	r2, sp, #140	; 0x8c
    ea10:	mov	r1, r4
    ea12:	mov	r0, fp
    ea14:	bl	12768 <__ssprint_r>
    ea18:	cmp	r0, #0
    ea1a:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    ea1e:	ldr	r2, [sp, #148]	; 0x94
    ea20:	ldr	r3, [sp, #144]	; 0x90
    ea22:	add.w	r9, sp, #192	; 0xc0
    ea26:	b.n	e9f2 <_svfprintf_r+0x1222>
    ea28:	ldr	r2, [sp, #12]
    ea2a:	b.w	dea0 <_svfprintf_r+0x6d0>
    ea2e:	ldr	r2, [sp, #12]
    ea30:	b.n	e54a <_svfprintf_r+0xd7a>
    ea32:	ldr	r3, [sp, #12]
    ea34:	orr.w	r3, r3, #32
    ea38:	str	r3, [sp, #12]
    ea3a:	add.w	r8, r8, #1
    ea3e:	ldrb.w	r3, [r8]
    ea42:	b.w	d884 <_svfprintf_r+0xb4>
    ea46:	add	r2, sp, #140	; 0x8c
    ea48:	ldr	r1, [sp, #20]
    ea4a:	ldr	r0, [sp, #24]
    ea4c:	bl	12768 <__ssprint_r>
    ea50:	cmp	r0, #0
    ea52:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    ea56:	ldr	r4, [sp, #148]	; 0x94
    ea58:	add.w	r9, sp, #192	; 0xc0
    ea5c:	b.w	e1bc <_svfprintf_r+0x9ec>
    ea60:	movs	r1, #64	; 0x40
    ea62:	ldr	r0, [sp, #24]
    ea64:	bl	b73c <_malloc_r>
    ea68:	ldr	r2, [sp, #20]
    ea6a:	str	r0, [r2, #0]
    ea6c:	str	r0, [r2, #16]
    ea6e:	cmp	r0, #0
    ea70:	beq.w	ee5a <_svfprintf_r+0x168a>
    ea74:	ldr	r2, [sp, #20]
    ea76:	movs	r3, #64	; 0x40
    ea78:	str	r3, [r2, #20]
    ea7a:	b.w	d7fe <_svfprintf_r+0x2e>
    ea7e:	add	r2, sp, #132	; 0x84
    ea80:	add	r3, sp, #120	; 0x78
    ea82:	str	r2, [sp, #4]
    ea84:	str	r3, [sp, #0]
    ea86:	mov	r2, fp
    ea88:	add	r3, sp, #116	; 0x74
    ea8a:	movs	r1, #3
    ea8c:	vldr	d0, [sp, #96]	; 0x60
    ea90:	ldr	r0, [sp, #24]
    ea92:	bl	ffd8 <_dtoa_r>
    ea96:	mov	r5, fp
    ea98:	mov	r6, r0
    ea9a:	ldr	r3, [sp, #52]	; 0x34
    ea9c:	cmp	r3, #70	; 0x46
    ea9e:	add.w	r4, r6, r5
    eaa2:	bne.w	e82a <_svfprintf_r+0x105a>
    eaa6:	ldrb	r3, [r6, #0]
    eaa8:	cmp	r3, #48	; 0x30
    eaaa:	beq.w	edbc <_svfprintf_r+0x15ec>
    eaae:	ldr	r5, [sp, #116]	; 0x74
    eab0:	add	r4, r5
    eab2:	b.n	e82a <_svfprintf_r+0x105a>
    eab4:	add	r2, sp, #140	; 0x8c
    eab6:	ldr	r1, [sp, #20]
    eab8:	ldr	r0, [sp, #24]
    eaba:	bl	12768 <__ssprint_r>
    eabe:	cmp	r0, #0
    eac0:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    eac4:	ldr	r5, [sp, #116]	; 0x74
    eac6:	ldr	r4, [sp, #148]	; 0x94
    eac8:	add.w	r9, sp, #192	; 0xc0
    eacc:	b.n	e9a2 <_svfprintf_r+0x11d2>
    eace:	cmp.w	fp, #0
    ead2:	it	eq
    ead4:	moveq.w	fp, #1
    ead8:	b.n	e7ca <_svfprintf_r+0xffa>
    eada:	str	r3, [sp, #40]	; 0x28
    eadc:	mov	r7, r2
    eade:	b.n	e59a <_svfprintf_r+0xdca>
    eae0:	str	r3, [sp, #40]	; 0x28
    eae2:	b.n	e8d2 <_svfprintf_r+0x1102>
    eae4:	adds	r3, #4
    eae6:	ldr	r4, [r2, #0]
    eae8:	str	r3, [sp, #40]	; 0x28
    eaea:	movs	r5, #0
    eaec:	b.w	df36 <_svfprintf_r+0x766>
    eaf0:	movs	r7, #45	; 0x2d
    eaf2:	str	r3, [sp, #16]
    eaf4:	ldr	r3, [sp, #44]	; 0x2c
    eaf6:	str	r3, [sp, #12]
    eaf8:	strb.w	r7, [sp, #111]	; 0x6f
    eafc:	mov.w	fp, #0
    eb00:	b.w	db76 <_svfprintf_r+0x3a6>
    eb04:	mov	r0, r6
    eb06:	bl	c5c0 <strlen>
    eb0a:	mov	fp, r4
    eb0c:	mov	r3, r0
    eb0e:	str	r0, [sp, #36]	; 0x24
    eb10:	b.w	e058 <_svfprintf_r+0x888>
    eb14:	add	r2, sp, #140	; 0x8c
    eb16:	ldr	r1, [sp, #20]
    eb18:	ldr	r0, [sp, #24]
    eb1a:	bl	12768 <__ssprint_r>
    eb1e:	cmp	r0, #0
    eb20:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    eb24:	ldr	r4, [sp, #148]	; 0x94
    eb26:	ldr	r3, [sp, #144]	; 0x90
    eb28:	add.w	r9, sp, #192	; 0xc0
    eb2c:	ldr	r1, [sp, #56]	; 0x38
    eb2e:	str.w	r6, [r9]
    eb32:	adds	r3, #1
    eb34:	add	r4, r1
    eb36:	cmp	r3, #7
    eb38:	str	r4, [sp, #148]	; 0x94
    eb3a:	str	r3, [sp, #144]	; 0x90
    eb3c:	str.w	r1, [r9, #4]
    eb40:	ble.w	dcf8 <_svfprintf_r+0x528>
    eb44:	b.w	e33e <_svfprintf_r+0xb6e>
    eb48:	ldr	r3, [sp, #116]	; 0x74
    eb4a:	adds	r5, r3, #3
    eb4c:	blt.n	eb8c <_svfprintf_r+0x13bc>
    eb4e:	cmp	fp, r3
    eb50:	blt.n	eb8c <_svfprintf_r+0x13bc>
    eb52:	str	r3, [sp, #60]	; 0x3c
    eb54:	b.n	e86e <_svfprintf_r+0x109e>
    eb56:	mov	r3, r4
    eb58:	b.n	e850 <_svfprintf_r+0x1080>
    eb5a:	add	r2, sp, #140	; 0x8c
    eb5c:	ldr	r1, [sp, #20]
    eb5e:	ldr	r0, [sp, #24]
    eb60:	bl	12768 <__ssprint_r>
    eb64:	cmp	r0, #0
    eb66:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    eb6a:	ldr	r4, [sp, #148]	; 0x94
    eb6c:	add.w	r9, sp, #192	; 0xc0
    eb70:	b.n	e40c <_svfprintf_r+0xc3c>
    eb72:	mov	r4, r2
    eb74:	adds	r3, #1
    eb76:	ldr	r2, [sp, #44]	; 0x2c
    eb78:	str	r3, [sp, #144]	; 0x90
    eb7a:	add	r4, r5
    eb7c:	cmp	r3, #7
    eb7e:	str	r4, [sp, #148]	; 0x94
    eb80:	stmia.w	r9, {r2, r5}
    eb84:	bgt.n	eb14 <_svfprintf_r+0x1344>
    eb86:	add.w	r9, r9, #8
    eb8a:	b.n	eb2c <_svfprintf_r+0x135c>
    eb8c:	ldr	r2, [sp, #52]	; 0x34
    eb8e:	subs	r2, #2
    eb90:	str	r2, [sp, #52]	; 0x34
    eb92:	subs	r3, #1
    eb94:	cmp	r3, #0
    eb96:	ldrb.w	r2, [sp, #52]	; 0x34
    eb9a:	str	r3, [sp, #116]	; 0x74
    eb9c:	it	lt
    eb9e:	neglt	r3, r3
    eba0:	strb.w	r2, [sp, #124]	; 0x7c
    eba4:	ite	lt
    eba6:	movlt	r2, #45	; 0x2d
    eba8:	movge	r2, #43	; 0x2b
    ebaa:	cmp	r3, #9
    ebac:	strb.w	r2, [sp, #125]	; 0x7d
    ebb0:	ble.w	ed8a <_svfprintf_r+0x15ba>
    ebb4:	add.w	r0, sp, #139	; 0x8b
    ebb8:	mov	r4, r0
    ebba:	ldr	r2, [pc, #180]	; (ec70 <_svfprintf_r+0x14a0>)
    ebbc:	smull	r2, r1, r2, r3
    ebc0:	asrs	r2, r3, #31
    ebc2:	rsb	r2, r2, r1, asr #2
    ebc6:	add.w	r1, r2, r2, lsl #2
    ebca:	sub.w	r3, r3, r1, lsl #1
    ebce:	add.w	r1, r3, #48	; 0x30
    ebd2:	cmp	r2, #9
    ebd4:	mov	r3, r2
    ebd6:	strb.w	r1, [r4, #-1]!
    ebda:	bgt.n	ebba <_svfprintf_r+0x13ea>
    ebdc:	mov	r1, r4
    ebde:	adds	r3, #48	; 0x30
    ebe0:	uxtb	r2, r3
    ebe2:	strb.w	r2, [r1, #-1]!
    ebe6:	cmp	r0, r1
    ebe8:	bls.w	ee54 <_svfprintf_r+0x1684>
    ebec:	add.w	r1, sp, #126	; 0x7e
    ebf0:	mov	r3, r4
    ebf2:	b.n	ebf8 <_svfprintf_r+0x1428>
    ebf4:	ldrb.w	r2, [r3], #1
    ebf8:	strb.w	r2, [r1], #1
    ebfc:	cmp	r0, r3
    ebfe:	bne.n	ebf4 <_svfprintf_r+0x1424>
    ec00:	adds	r3, r0, #1
    ec02:	subs	r3, r3, r4
    ec04:	add.w	r2, sp, #126	; 0x7e
    ec08:	add	r3, r2
    ec0a:	add	r2, sp, #124	; 0x7c
    ec0c:	subs	r3, r3, r2
    ec0e:	ldr	r2, [sp, #56]	; 0x38
    ec10:	str	r3, [sp, #84]	; 0x54
    ec12:	cmp	r2, #1
    ec14:	add	r3, r2
    ec16:	str	r3, [sp, #36]	; 0x24
    ec18:	ble.w	edea <_svfprintf_r+0x161a>
    ec1c:	ldr	r3, [sp, #36]	; 0x24
    ec1e:	ldr	r2, [sp, #72]	; 0x48
    ec20:	add	r3, r2
    ec22:	movs	r2, #0
    ec24:	str	r3, [sp, #36]	; 0x24
    ec26:	str	r2, [sp, #60]	; 0x3c
    ec28:	bic.w	r3, r3, r3, asr #31
    ec2c:	b.n	e88a <_svfprintf_r+0x10ba>
    ec2e:	add	r2, sp, #140	; 0x8c
    ec30:	ldr	r1, [sp, #20]
    ec32:	ldr	r0, [sp, #24]
    ec34:	bl	12768 <__ssprint_r>
    ec38:	cmp	r0, #0
    ec3a:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    ec3e:	ldr	r3, [sp, #116]	; 0x74
    ec40:	ldr	r4, [sp, #148]	; 0x94
    ec42:	add.w	r9, sp, #192	; 0xc0
    ec46:	b.n	e620 <_svfprintf_r+0xe50>
    ec48:	add	r2, sp, #140	; 0x8c
    ec4a:	ldr	r1, [sp, #20]
    ec4c:	ldr	r0, [sp, #24]
    ec4e:	bl	12768 <__ssprint_r>
    ec52:	cmp	r0, #0
    ec54:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    ec58:	ldr	r3, [sp, #116]	; 0x74
    ec5a:	ldr	r2, [sp, #56]	; 0x38
    ec5c:	ldr	r4, [sp, #148]	; 0x94
    ec5e:	subs	r3, r2, r3
    ec60:	add.w	r9, sp, #192	; 0xc0
    ec64:	b.n	e650 <_svfprintf_r+0xe80>
    ec66:	nop
    ec68:	.word	0x00013598
    ec6c:	.word	0x00013548
    ec70:	.word	0x66666667
    ec74:	cmp	r5, #6
    ec76:	mov	r3, r5
    ec78:	it	cs
    ec7a:	movcs	r3, #6
    ec7c:	str	r3, [sp, #36]	; 0x24
    ec7e:	bic.w	r3, r3, r3, asr #31
    ec82:	mov	fp, r6
    ec84:	str	r7, [sp, #40]	; 0x28
    ec86:	str	r6, [sp, #60]	; 0x3c
    ec88:	mov	r7, r6
    ec8a:	str	r3, [sp, #16]
    ec8c:	ldr	r6, [pc, #536]	; (eea8 <_svfprintf_r+0x16d8>)
    ec8e:	b.w	db74 <_svfprintf_r+0x3a4>
    ec92:	mov.w	fp, #6
    ec96:	b.n	e7ca <_svfprintf_r+0xffa>
    ec98:	add	r2, sp, #132	; 0x84
    ec9a:	add	r3, sp, #120	; 0x78
    ec9c:	str	r2, [sp, #4]
    ec9e:	str	r3, [sp, #0]
    eca0:	mov	r2, fp
    eca2:	add	r3, sp, #116	; 0x74
    eca4:	movs	r1, #3
    eca6:	vldr	d0, [sp, #96]	; 0x60
    ecaa:	ldr	r0, [sp, #24]
    ecac:	bl	ffd8 <_dtoa_r>
    ecb0:	mov	r5, fp
    ecb2:	mov	r6, r0
    ecb4:	add.w	r4, r0, fp
    ecb8:	b.n	eaa6 <_svfprintf_r+0x12d6>
    ecba:	movs	r7, #45	; 0x2d
    ecbc:	strb.w	r7, [sp, #111]	; 0x6f
    ecc0:	b.w	de1a <_svfprintf_r+0x64a>
    ecc4:	str	r3, [sp, #12]
    ecc6:	b.w	df72 <_svfprintf_r+0x7a2>
    ecca:	ldrd	r1, r2, [sp, #64]	; 0x40
    ecce:	add.w	r3, r2, #2147483648	; 0x80000000
    ecd2:	str	r3, [sp, #100]	; 0x64
    ecd4:	movs	r3, #45	; 0x2d
    ecd6:	str	r1, [sp, #96]	; 0x60
    ecd8:	str	r3, [sp, #16]
    ecda:	b.n	e7e6 <_svfprintf_r+0x1016>
    ecdc:	ldr	r2, [sp, #72]	; 0x48
    ecde:	ldr	r3, [sp, #56]	; 0x38
    ece0:	add	r3, r2
    ece2:	ldr	r2, [sp, #60]	; 0x3c
    ece4:	str	r3, [sp, #36]	; 0x24
    ece6:	cmp	r2, #0
    ece8:	ble.w	edfe <_svfprintf_r+0x162e>
    ecec:	movs	r2, #103	; 0x67
    ecee:	bic.w	r3, r3, r3, asr #31
    ecf2:	str	r2, [sp, #52]	; 0x34
    ecf4:	b.n	e88a <_svfprintf_r+0x10ba>
    ecf6:	ldr	r3, [sp, #52]	; 0x34
    ecf8:	cmp	r3, #71	; 0x47
    ecfa:	bne.w	e828 <_svfprintf_r+0x1058>
    ecfe:	ldr	r3, [sp, #12]
    ed00:	lsls	r3, r3, #31
    ed02:	bmi.w	ea9a <_svfprintf_r+0x12ca>
    ed06:	ldr	r3, [sp, #132]	; 0x84
    ed08:	cmp	r7, #71	; 0x47
    ed0a:	sub.w	r3, r3, r6
    ed0e:	str	r3, [sp, #56]	; 0x38
    ed10:	beq.w	eb48 <_svfprintf_r+0x1378>
    ed14:	ldr	r3, [sp, #116]	; 0x74
    ed16:	b.n	eb92 <_svfprintf_r+0x13c2>
    ed18:	bic.w	r3, r5, r5, asr #31
    ed1c:	str	r7, [sp, #40]	; 0x28
    ed1e:	str	r3, [sp, #16]
    ed20:	str	r5, [sp, #36]	; 0x24
    ed22:	mov	fp, r0
    ed24:	str	r0, [sp, #60]	; 0x3c
    ed26:	ldrb.w	r7, [sp, #111]	; 0x6f
    ed2a:	b.w	db74 <_svfprintf_r+0x3a4>
    ed2e:	cmp	r3, #0
    ed30:	ble.n	ee0e <_svfprintf_r+0x163e>
    ed32:	cmp.w	fp, #0
    ed36:	bne.n	edd8 <_svfprintf_r+0x1608>
    ed38:	ldr	r2, [sp, #12]
    ed3a:	lsls	r4, r2, #31
    ed3c:	bmi.n	edd8 <_svfprintf_r+0x1608>
    ed3e:	mov	r2, r3
    ed40:	str	r2, [sp, #36]	; 0x24
    ed42:	bic.w	r3, r3, r3, asr #31
    ed46:	b.n	e88a <_svfprintf_r+0x10ba>
    ed48:	ldr	r3, [sp, #12]
    ed4a:	lsls	r3, r3, #31
    ed4c:	mov	r7, fp
    ed4e:	bpl.n	ed5c <_svfprintf_r+0x158c>
    ed50:	add	r6, sp, #256	; 0x100
    ed52:	movs	r3, #48	; 0x30
    ed54:	strb.w	r3, [r6, #-65]!
    ed58:	b.w	db60 <_svfprintf_r+0x390>
    ed5c:	str.w	fp, [sp, #36]	; 0x24
    ed60:	add	r6, sp, #192	; 0xc0
    ed62:	b.w	db66 <_svfprintf_r+0x396>
    ed66:	add	r2, sp, #140	; 0x8c
    ed68:	ldr	r1, [sp, #20]
    ed6a:	ldr	r0, [sp, #24]
    ed6c:	bl	12768 <__ssprint_r>
    ed70:	cmp	r0, #0
    ed72:	bne.w	d9c4 <_svfprintf_r+0x1f4>
    ed76:	ldr	r5, [sp, #116]	; 0x74
    ed78:	ldr	r4, [sp, #148]	; 0x94
    ed7a:	ldr	r3, [sp, #144]	; 0x90
    ed7c:	add.w	r9, sp, #192	; 0xc0
    ed80:	b.n	e9d0 <_svfprintf_r+0x1200>
    ed82:	mov	r8, r4
    ed84:	movs	r5, #0
    ed86:	b.w	d888 <_svfprintf_r+0xb8>
    ed8a:	adds	r3, #48	; 0x30
    ed8c:	movs	r2, #48	; 0x30
    ed8e:	strb.w	r3, [sp, #127]	; 0x7f
    ed92:	strb.w	r2, [sp, #126]	; 0x7e
    ed96:	add	r3, sp, #128	; 0x80
    ed98:	b.n	ec0a <_svfprintf_r+0x143a>
    ed9a:	ldr	r3, [sp, #132]	; 0x84
    ed9c:	b.n	e850 <_svfprintf_r+0x1080>
    ed9e:	ldr	r2, [sp, #72]	; 0x48
    eda0:	ldr	r3, [sp, #60]	; 0x3c
    eda2:	add	r3, r2
    eda4:	movs	r2, #103	; 0x67
    eda6:	str	r3, [sp, #36]	; 0x24
    eda8:	str	r2, [sp, #52]	; 0x34
    edaa:	bic.w	r3, r3, r3, asr #31
    edae:	b.n	e88a <_svfprintf_r+0x10ba>
    edb0:	ldr	r6, [pc, #248]	; (eeac <_svfprintf_r+0x16dc>)
    edb2:	ldr	r3, [pc, #252]	; (eeb0 <_svfprintf_r+0x16e0>)
    edb4:	ldrb.w	r7, [sp, #111]	; 0x6f
    edb8:	b.w	de1e <_svfprintf_r+0x64e>
    edbc:	movs	r2, #0
    edbe:	movs	r3, #0
    edc0:	ldrd	r0, r1, [sp, #96]	; 0x60
    edc4:	bl	af00 <__aeabi_dcmpeq>
    edc8:	cmp	r0, #0
    edca:	bne.w	eaae <_svfprintf_r+0x12de>
    edce:	rsb	r5, r5, #1
    edd2:	str	r5, [sp, #116]	; 0x74
    edd4:	add	r4, r5
    edd6:	b.n	e82a <_svfprintf_r+0x105a>
    edd8:	ldr	r3, [sp, #60]	; 0x3c
    edda:	ldr	r2, [sp, #72]	; 0x48
    eddc:	adds	r5, r3, r2
    edde:	add.w	r3, r5, fp
    ede2:	str	r3, [sp, #36]	; 0x24
    ede4:	bic.w	r3, r3, r3, asr #31
    ede8:	b.n	e88a <_svfprintf_r+0x10ba>
    edea:	ldr	r3, [sp, #12]
    edec:	ands.w	r3, r3, #1
    edf0:	bne.w	ec1c <_svfprintf_r+0x144c>
    edf4:	str	r3, [sp, #60]	; 0x3c
    edf6:	ldr	r3, [sp, #36]	; 0x24
    edf8:	bic.w	r3, r3, r3, asr #31
    edfc:	b.n	e88a <_svfprintf_r+0x10ba>
    edfe:	ldr	r3, [sp, #60]	; 0x3c
    ee00:	ldr	r2, [sp, #36]	; 0x24
    ee02:	rsb	r3, r3, #1
    ee06:	add	r2, r3
    ee08:	mov	r3, r2
    ee0a:	str	r2, [sp, #36]	; 0x24
    ee0c:	b.n	ecec <_svfprintf_r+0x151c>
    ee0e:	cmp.w	fp, #0
    ee12:	bne.n	ee1a <_svfprintf_r+0x164a>
    ee14:	ldr	r3, [sp, #12]
    ee16:	lsls	r0, r3, #31
    ee18:	bpl.n	ee2a <_svfprintf_r+0x165a>
    ee1a:	ldr	r3, [sp, #72]	; 0x48
    ee1c:	adds	r5, r3, #1
    ee1e:	add.w	r3, r5, fp
    ee22:	str	r3, [sp, #36]	; 0x24
    ee24:	bic.w	r3, r3, r3, asr #31
    ee28:	b.n	e88a <_svfprintf_r+0x10ba>
    ee2a:	movs	r3, #1
    ee2c:	str	r3, [sp, #36]	; 0x24
    ee2e:	b.n	e88a <_svfprintf_r+0x10ba>
    ee30:	ldr	r0, [sp, #40]	; 0x28
    ee32:	ldrb.w	r3, [r8, #1]
    ee36:	ldr	r5, [r0, #0]
    ee38:	adds	r0, #4
    ee3a:	cmp	r5, #0
    ee3c:	str	r0, [sp, #40]	; 0x28
    ee3e:	mov	r8, r4
    ee40:	bge.w	d884 <_svfprintf_r+0xb4>
    ee44:	mov.w	r5, #4294967295
    ee48:	b.w	d884 <_svfprintf_r+0xb4>
    ee4c:	strb.w	r1, [sp, #111]	; 0x6f
    ee50:	b.w	d9e6 <_svfprintf_r+0x216>
    ee54:	add.w	r3, sp, #126	; 0x7e
    ee58:	b.n	ec0a <_svfprintf_r+0x143a>
    ee5a:	ldr	r2, [sp, #24]
    ee5c:	movs	r3, #12
    ee5e:	str	r3, [r2, #0]
    ee60:	mov.w	r0, #4294967295
    ee64:	b.w	d9d6 <_svfprintf_r+0x206>
    ee68:	strb.w	r1, [sp, #111]	; 0x6f
    ee6c:	b.w	dae0 <_svfprintf_r+0x310>
    ee70:	strb.w	r1, [sp, #111]	; 0x6f
    ee74:	b.w	ddac <_svfprintf_r+0x5dc>
    ee78:	strb.w	r1, [sp, #111]	; 0x6f
    ee7c:	b.w	df1a <_svfprintf_r+0x74a>
    ee80:	strb.w	r1, [sp, #111]	; 0x6f
    ee84:	b.w	debe <_svfprintf_r+0x6ee>
    ee88:	strb.w	r1, [sp, #111]	; 0x6f
    ee8c:	b.w	de6a <_svfprintf_r+0x69a>
    ee90:	strb.w	r1, [sp, #111]	; 0x6f
    ee94:	b.w	e102 <_svfprintf_r+0x932>
    ee98:	strb.w	r1, [sp, #111]	; 0x6f
    ee9c:	b.w	e0c0 <_svfprintf_r+0x8f0>
    eea0:	strb.w	r1, [sp, #111]	; 0x6f
    eea4:	b.w	e084 <_svfprintf_r+0x8b4>
    eea8:	.word	0x00013590
    eeac:	.word	0x00013564
    eeb0:	.word	0x00013560

0000eeb4 <__ssvfscanf_r>:
    eeb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eeb8:	mov	fp, r1
    eeba:	ldrsh.w	r1, [r1, #12]
    eebe:	sub.w	sp, sp, #692	; 0x2b4
    eec2:	mov	sl, r0
    eec4:	lsls	r0, r1, #18
    eec6:	mov	r4, r2
    eec8:	str	r3, [sp, #20]
    eeca:	bmi.n	eee0 <__ssvfscanf_r+0x2c>
    eecc:	ldr.w	r3, [fp, #100]	; 0x64
    eed0:	orr.w	r1, r1, #8192	; 0x2000
    eed4:	bic.w	r3, r3, #8192	; 0x2000
    eed8:	strh.w	r1, [fp, #12]
    eedc:	str.w	r3, [fp, #100]	; 0x64
    eee0:	mov	r6, r4
    eee2:	movs	r3, #0
    eee4:	str	r3, [sp, #28]
    eee6:	str	r3, [sp, #16]
    eee8:	mov	r7, r3
    eeea:	str	r3, [sp, #24]
    eeec:	ldrb.w	r3, [r6], #1
    eef0:	str	r3, [sp, #68]	; 0x44
    eef2:	cbz	r3, ef50 <__ssvfscanf_r+0x9c>
    eef4:	bl	b708 <__locale_ctype_ptr>
    eef8:	ldr	r2, [sp, #68]	; 0x44
    eefa:	add	r0, r2
    eefc:	ldrb	r3, [r0, #1]
    eefe:	and.w	r3, r3, #8
    ef02:	and.w	r5, r3, #255	; 0xff
    ef06:	cbz	r3, ef5a <__ssvfscanf_r+0xa6>
    ef08:	ldr.w	r3, [fp, #4]
    ef0c:	b.n	ef32 <__ssvfscanf_r+0x7e>
    ef0e:	bl	b708 <__locale_ctype_ptr>
    ef12:	ldr.w	r3, [fp]
    ef16:	ldrb	r2, [r3, #0]
    ef18:	add	r0, r2
    ef1a:	adds	r3, #1
    ef1c:	ldrb	r2, [r0, #1]
    ef1e:	lsls	r1, r2, #28
    ef20:	bpl.n	ef42 <__ssvfscanf_r+0x8e>
    ef22:	ldr.w	r2, [fp, #4]
    ef26:	str.w	r3, [fp]
    ef2a:	subs	r3, r2, #1
    ef2c:	adds	r7, #1
    ef2e:	str.w	r3, [fp, #4]
    ef32:	cmp	r3, #0
    ef34:	bgt.n	ef0e <__ssvfscanf_r+0x5a>
    ef36:	mov	r1, fp
    ef38:	mov	r0, sl
    ef3a:	bl	128ec <__ssrefill_r>
    ef3e:	cmp	r0, #0
    ef40:	beq.n	ef0e <__ssvfscanf_r+0x5a>
    ef42:	mov	r4, r6
    ef44:	mov	r6, r4
    ef46:	ldrb.w	r3, [r6], #1
    ef4a:	str	r3, [sp, #68]	; 0x44
    ef4c:	cmp	r3, #0
    ef4e:	bne.n	eef4 <__ssvfscanf_r+0x40>
    ef50:	ldr	r0, [sp, #24]
    ef52:	add.w	sp, sp, #692	; 0x2b4
    ef56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef5a:	cmp	r2, #37	; 0x25
    ef5c:	bne.w	f068 <__ssvfscanf_r+0x1b4>
    ef60:	ldrb.w	r8, [r4, #1]
    ef64:	mov	r4, r5
    ef66:	adds	r3, r6, #1
    ef68:	cmp.w	r8, #120	; 0x78
    ef6c:	bhi.w	f3f6 <__ssvfscanf_r+0x542>
    ef70:	tbh	[pc, r8, lsl #1]
    ef74:	.word	0x02410092
    ef78:	.word	0x02410241
    ef7c:	.word	0x02410241
    ef80:	.word	0x02410241
    ef84:	.word	0x02410241
    ef88:	.word	0x02410241
    ef8c:	.word	0x02410241
    ef90:	.word	0x02410241
    ef94:	.word	0x02410241
    ef98:	.word	0x02410241
    ef9c:	.word	0x02410241
    efa0:	.word	0x02410241
    efa4:	.word	0x02410241
    efa8:	.word	0x02410241
    efac:	.word	0x02410241
    efb0:	.word	0x02410241
    efb4:	.word	0x02410241
    efb8:	.word	0x02410241
    efbc:	.word	0x00790241
    efc0:	.word	0x02410241
    efc4:	.word	0x02410241
    efc8:	.word	0x024101d8
    efcc:	.word	0x02410241
    efd0:	.word	0x02410241
    efd4:	.word	0x01cf01cf
    efd8:	.word	0x01cf01cf
    efdc:	.word	0x01cf01cf
    efe0:	.word	0x01cf01cf
    efe4:	.word	0x01cf01cf
    efe8:	.word	0x02410241
    efec:	.word	0x02410241
    eff0:	.word	0x02410241
    eff4:	.word	0x02410241
    eff8:	.word	0x02410241
    effc:	.word	0x01b901c1
    f000:	.word	0x01b90241
    f004:	.word	0x02410241
    f008:	.word	0x02410241
    f00c:	.word	0x024101b3
    f010:	.word	0x01a30241
    f014:	.word	0x02410241
    f018:	.word	0x02410241
    f01c:	.word	0x02410241
    f020:	.word	0x02410241
    f024:	.word	0x02410193
    f028:	.word	0x01510241
    f02c:	.word	0x02410241
    f030:	.word	0x02410241
    f034:	.word	0x02410241
    f038:	.word	0x01220241
    f03c:	.word	0x01b90188
    f040:	.word	0x01b901b9
    f044:	.word	0x0098011c
    f048:	.word	0x02410241
    f04c:	.word	0x024100d5
    f050:	.word	0x0101010d
    f054:	.word	0x024100f3
    f058:	.word	0x00eb0241
    f05c:	.word	0x00df0241
    f060:	.word	0x02410241
    f064:	.short	0x0193
    f066:	mov	r6, r3
    f068:	ldr.w	r3, [fp, #4]
    f06c:	cmp	r3, #0
    f06e:	ble.w	f518 <__ssvfscanf_r+0x664>
    f072:	ldr.w	r3, [fp]
    f076:	ldrb.w	r2, [r6, #-1]
    f07a:	ldrb	r1, [r3, #0]
    f07c:	cmp	r1, r2
    f07e:	bne.w	ef50 <__ssvfscanf_r+0x9c>
    f082:	ldr.w	r2, [fp, #4]
    f086:	adds	r3, #1
    f088:	subs	r2, #1
    f08a:	str.w	r3, [fp]
    f08e:	adds	r7, #1
    f090:	str.w	r2, [fp, #4]
    f094:	mov	r4, r6
    f096:	b.n	ef44 <__ssvfscanf_r+0x90>
    f098:	mov.w	r0, #4294967295
    f09c:	add.w	sp, sp, #692	; 0x2b4
    f0a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0a4:	str	r3, [sp, #12]
    f0a6:	ldr.w	r3, [fp, #4]
    f0aa:	cmp	r3, #0
    f0ac:	ble.w	f576 <__ssvfscanf_r+0x6c2>
    f0b0:	ldr	r3, [pc, #736]	; (f394 <__ssvfscanf_r+0x4e0>)
    f0b2:	str	r3, [sp, #28]
    f0b4:	movs	r3, #0
    f0b6:	str	r3, [sp, #16]
    f0b8:	movs	r6, #3
    f0ba:	b.n	f0c0 <__ssvfscanf_r+0x20c>
    f0bc:	str.w	lr, [fp]
    f0c0:	bl	b708 <__locale_ctype_ptr>
    f0c4:	ldr.w	r2, [fp]
    f0c8:	ldrb	r1, [r2, #0]
    f0ca:	add	r0, r1
    f0cc:	add.w	lr, r2, #1
    f0d0:	ldrb	r3, [r0, #1]
    f0d2:	and.w	r3, r3, #8
    f0d6:	and.w	r8, r3, #255	; 0xff
    f0da:	cmp	r3, #0
    f0dc:	beq.w	f5de <__ssvfscanf_r+0x72a>
    f0e0:	ldr.w	r3, [fp, #4]
    f0e4:	subs	r3, #1
    f0e6:	cmp	r3, #0
    f0e8:	add.w	r7, r7, #1
    f0ec:	str.w	r3, [fp, #4]
    f0f0:	bgt.n	f0bc <__ssvfscanf_r+0x208>
    f0f2:	mov	r1, fp
    f0f4:	mov	r0, sl
    f0f6:	bl	128ec <__ssrefill_r>
    f0fa:	cmp	r0, #0
    f0fc:	beq.n	f0c0 <__ssvfscanf_r+0x20c>
    f0fe:	ldr	r2, [sp, #24]
    f100:	cmp	r2, #0
    f102:	beq.n	f098 <__ssvfscanf_r+0x1e4>
    f104:	ldrh.w	r3, [fp, #12]
    f108:	tst.w	r3, #64	; 0x40
    f10c:	mov	r3, r2
    f10e:	it	ne
    f110:	movne.w	r3, #4294967295
    f114:	mov	r0, r3
    f116:	add.w	sp, sp, #692	; 0x2b4
    f11a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f11e:	ldrb.w	r8, [r6, #1]
    f122:	cmp.w	r8, #108	; 0x6c
    f126:	beq.w	f52e <__ssvfscanf_r+0x67a>
    f12a:	orr.w	r5, r5, #1
    f12e:	mov	r6, r3
    f130:	b.n	ef66 <__ssvfscanf_r+0xb2>
    f132:	str	r3, [sp, #12]
    f134:	ldr.w	r3, [fp, #4]
    f138:	cmp	r3, #0
    f13a:	ble.w	f5ce <__ssvfscanf_r+0x71a>
    f13e:	ldr	r3, [pc, #600]	; (f398 <__ssvfscanf_r+0x4e4>)
    f140:	str	r3, [sp, #28]
    f142:	movs	r3, #10
    f144:	str	r3, [sp, #16]
    f146:	movs	r6, #3
    f148:	b.n	f0c0 <__ssvfscanf_r+0x20c>
    f14a:	str	r3, [sp, #12]
    f14c:	ldr.w	r3, [fp, #4]
    f150:	cmp	r3, #0
    f152:	ble.w	f5be <__ssvfscanf_r+0x70a>
    f156:	movs	r6, #2
    f158:	b.n	f0c0 <__ssvfscanf_r+0x20c>
    f15a:	str	r3, [sp, #12]
    f15c:	ldr.w	r3, [fp, #4]
    f160:	cmp	r3, #0
    f162:	orr.w	r5, r5, #544	; 0x220
    f166:	ble.w	f2aa <__ssvfscanf_r+0x3f6>
    f16a:	ldr	r3, [pc, #556]	; (f398 <__ssvfscanf_r+0x4e4>)
    f16c:	str	r3, [sp, #28]
    f16e:	movs	r3, #16
    f170:	str	r3, [sp, #16]
    f172:	movs	r6, #3
    f174:	b.n	f0c0 <__ssvfscanf_r+0x20c>
    f176:	str	r3, [sp, #12]
    f178:	ldr.w	r3, [fp, #4]
    f17c:	cmp	r3, #0
    f17e:	ble.w	f2ca <__ssvfscanf_r+0x416>
    f182:	ldr	r3, [pc, #532]	; (f398 <__ssvfscanf_r+0x4e4>)
    f184:	str	r3, [sp, #28]
    f186:	movs	r3, #8
    f188:	str	r3, [sp, #16]
    f18a:	movs	r6, #3
    f18c:	b.n	f0c0 <__ssvfscanf_r+0x20c>
    f18e:	lsls	r2, r5, #27
    f190:	mov	r6, r3
    f192:	str	r3, [sp, #12]
    f194:	bmi.w	f37c <__ssvfscanf_r+0x4c8>
    f198:	lsls	r3, r5, #29
    f19a:	bpl.w	f546 <__ssvfscanf_r+0x692>
    f19e:	ldr	r1, [sp, #20]
    f1a0:	ldr	r3, [r1, #0]
    f1a2:	strh	r7, [r3, #0]
    f1a4:	adds	r3, r1, #4
    f1a6:	str	r3, [sp, #20]
    f1a8:	mov	r4, r6
    f1aa:	b.n	ef44 <__ssvfscanf_r+0x90>
    f1ac:	ldrb.w	r8, [r6, #1]
    f1b0:	orr.w	r5, r5, #4
    f1b4:	mov	r6, r3
    f1b6:	b.n	ef66 <__ssvfscanf_r+0xb2>
    f1b8:	str	r3, [sp, #12]
    f1ba:	ldr.w	r3, [fp, #4]
    f1be:	cmp	r3, #0
    f1c0:	ble.w	f59e <__ssvfscanf_r+0x6ea>
    f1c4:	cmp	r4, #0
    f1c6:	it	eq
    f1c8:	moveq	r4, #1
    f1ca:	ands.w	r3, r5, #1
    f1ce:	bne.w	f416 <__ssvfscanf_r+0x562>
    f1d2:	lsls	r2, r5, #27
    f1d4:	bpl.w	f4ee <__ssvfscanf_r+0x63a>
    f1d8:	mov	r5, r3
    f1da:	b.n	f1f0 <__ssvfscanf_r+0x33c>
    f1dc:	add	r3, r2
    f1de:	str.w	r3, [fp]
    f1e2:	add	r5, r2
    f1e4:	subs	r4, r4, r2
    f1e6:	bl	128ec <__ssrefill_r>
    f1ea:	cmp	r0, #0
    f1ec:	bne.w	f4e6 <__ssvfscanf_r+0x632>
    f1f0:	ldr.w	r2, [fp, #4]
    f1f4:	ldr.w	r3, [fp]
    f1f8:	cmp	r2, r4
    f1fa:	mov	r1, fp
    f1fc:	mov	r0, sl
    f1fe:	blt.n	f1dc <__ssvfscanf_r+0x328>
    f200:	subs	r2, r2, r4
    f202:	add	r3, r4
    f204:	str.w	r2, [fp, #4]
    f208:	add	r5, r4
    f20a:	str.w	r3, [fp]
    f20e:	ldr	r6, [sp, #12]
    f210:	add	r7, r5
    f212:	mov	r4, r6
    f214:	b.n	ef44 <__ssvfscanf_r+0x90>
    f216:	add.w	r9, sp, #80	; 0x50
    f21a:	mov	r1, r3
    f21c:	mov	r0, r9
    f21e:	bl	12188 <__sccl>
    f222:	ldr.w	r3, [fp, #4]
    f226:	cmp	r3, #0
    f228:	mov	r6, r0
    f22a:	ble.w	f58e <__ssvfscanf_r+0x6da>
    f22e:	cmp	r4, #0
    f230:	ldr.w	r2, [fp]
    f234:	it	eq
    f236:	moveq.w	r4, #4294967295
    f23a:	lsls	r3, r5, #27
    f23c:	ldrb	r1, [r2, #0]
    f23e:	bpl.w	f382 <__ssvfscanf_r+0x4ce>
    f242:	mov	r8, r4
    f244:	movs	r5, #0
    f246:	b.n	f24a <__ssvfscanf_r+0x396>
    f248:	ldrb	r1, [r2, #0]
    f24a:	ldrb.w	r3, [r9, r1]
    f24e:	adds	r2, #1
    f250:	cmp	r3, #0
    f252:	beq.w	f4dc <__ssvfscanf_r+0x628>
    f256:	ldr.w	r3, [fp, #4]
    f25a:	str.w	r2, [fp]
    f25e:	adds	r5, #1
    f260:	subs	r3, #1
    f262:	cmp	r5, r4
    f264:	str.w	r3, [fp, #4]
    f268:	beq.w	f4d6 <__ssvfscanf_r+0x622>
    f26c:	cmp	r3, #0
    f26e:	bgt.n	f248 <__ssvfscanf_r+0x394>
    f270:	mov	r1, fp
    f272:	mov	r0, sl
    f274:	bl	128ec <__ssrefill_r>
    f278:	cmp	r0, #0
    f27a:	bne.w	f4d4 <__ssvfscanf_r+0x620>
    f27e:	ldr.w	r2, [fp]
    f282:	b.n	f248 <__ssvfscanf_r+0x394>
    f284:	str	r3, [sp, #12]
    f286:	ldr.w	r3, [fp, #4]
    f28a:	cmp	r3, #0
    f28c:	ble.n	f304 <__ssvfscanf_r+0x450>
    f28e:	ldr	r3, [pc, #260]	; (f394 <__ssvfscanf_r+0x4e0>)
    f290:	str	r3, [sp, #28]
    f292:	movs	r3, #10
    f294:	str	r3, [sp, #16]
    f296:	movs	r6, #3
    f298:	b.n	f0c0 <__ssvfscanf_r+0x20c>
    f29a:	str	r3, [sp, #12]
    f29c:	ldr.w	r3, [fp, #4]
    f2a0:	cmp	r3, #0
    f2a2:	orr.w	r5, r5, #512	; 0x200
    f2a6:	bgt.w	f16a <__ssvfscanf_r+0x2b6>
    f2aa:	mov	r1, fp
    f2ac:	mov	r0, sl
    f2ae:	bl	128ec <__ssrefill_r>
    f2b2:	cmp	r0, #0
    f2b4:	beq.w	f16a <__ssvfscanf_r+0x2b6>
    f2b8:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f2ba:	str	r3, [sp, #12]
    f2bc:	ldr.w	r3, [fp, #4]
    f2c0:	cmp	r3, #0
    f2c2:	orr.w	r5, r5, #1
    f2c6:	bgt.w	f182 <__ssvfscanf_r+0x2ce>
    f2ca:	mov	r1, fp
    f2cc:	mov	r0, sl
    f2ce:	bl	128ec <__ssrefill_r>
    f2d2:	cmp	r0, #0
    f2d4:	beq.w	f182 <__ssvfscanf_r+0x2ce>
    f2d8:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f2da:	ldrb.w	r8, [r6, #1]
    f2de:	orr.w	r5, r5, #2
    f2e2:	mov	r6, r3
    f2e4:	b.n	ef66 <__ssvfscanf_r+0xb2>
    f2e6:	str	r3, [sp, #12]
    f2e8:	ldr.w	r3, [fp, #4]
    f2ec:	cmp	r3, #0
    f2ee:	ble.w	f5ae <__ssvfscanf_r+0x6fa>
    f2f2:	movs	r6, #4
    f2f4:	b.n	f0c0 <__ssvfscanf_r+0x20c>
    f2f6:	str	r3, [sp, #12]
    f2f8:	ldr.w	r3, [fp, #4]
    f2fc:	cmp	r3, #0
    f2fe:	orr.w	r5, r5, #1
    f302:	bgt.n	f28e <__ssvfscanf_r+0x3da>
    f304:	mov	r1, fp
    f306:	mov	r0, sl
    f308:	bl	128ec <__ssrefill_r>
    f30c:	cmp	r0, #0
    f30e:	beq.n	f28e <__ssvfscanf_r+0x3da>
    f310:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f312:	add.w	r4, r4, r4, lsl #2
    f316:	add.w	r4, r8, r4, lsl #1
    f31a:	subs	r4, #48	; 0x30
    f31c:	ldrb.w	r8, [r6, #1]
    f320:	mov	r6, r3
    f322:	b.n	ef66 <__ssvfscanf_r+0xb2>
    f324:	ldrb.w	r8, [r6, #1]
    f328:	orr.w	r5, r5, #16
    f32c:	mov	r6, r3
    f32e:	b.n	ef66 <__ssvfscanf_r+0xb2>
    f330:	add	r3, sp, #72	; 0x48
    f332:	mov	r1, r8
    f334:	mov	r0, r3
    f336:	movs	r2, #8
    f338:	str	r3, [sp, #32]
    f33a:	bl	beac <memset>
    f33e:	ands.w	r9, r5, #16
    f342:	bne.w	fc08 <__ssvfscanf_r+0xd54>
    f346:	ldr	r2, [sp, #20]
    f348:	mov	r3, r2
    f34a:	adds	r3, #4
    f34c:	ldr.w	r8, [r2]
    f350:	str	r3, [sp, #20]
    f352:	movs	r6, #0
    f354:	bl	b708 <__locale_ctype_ptr>
    f358:	ldr.w	r3, [fp]
    f35c:	ldrb	r3, [r3, #0]
    f35e:	add	r0, r3
    f360:	ldrb	r3, [r0, #1]
    f362:	lsls	r0, r3, #28
    f364:	bmi.n	f36c <__ssvfscanf_r+0x4b8>
    f366:	cmp	r4, #0
    f368:	bne.w	fb6c <__ssvfscanf_r+0xcb8>
    f36c:	cmp.w	r9, #0
    f370:	bne.n	f37c <__ssvfscanf_r+0x4c8>
    f372:	str.w	r9, [r8]
    f376:	ldr	r3, [sp, #24]
    f378:	adds	r3, #1
    f37a:	str	r3, [sp, #24]
    f37c:	ldr	r6, [sp, #12]
    f37e:	mov	r4, r6
    f380:	b.n	ef44 <__ssvfscanf_r+0x90>
    f382:	ldr	r0, [sp, #20]
    f384:	ldr	r5, [r0, #0]
    f386:	mov	r3, r0
    f388:	adds	r3, #4
    f38a:	add.w	r8, r5, r4
    f38e:	str	r3, [sp, #12]
    f390:	mov	r4, r5
    f392:	b.n	f3a2 <__ssvfscanf_r+0x4ee>
    f394:	.word	0x0000d7a9
    f398:	.word	0x00012535
    f39c:	ldr.w	r2, [fp]
    f3a0:	ldrb	r1, [r2, #0]
    f3a2:	ldrb.w	r3, [r9, r1]
    f3a6:	adds	r0, r2, #1
    f3a8:	cbz	r3, f3dc <__ssvfscanf_r+0x528>
    f3aa:	ldr.w	r3, [fp, #4]
    f3ae:	str.w	r0, [fp]
    f3b2:	subs	r3, #1
    f3b4:	str.w	r3, [fp, #4]
    f3b8:	ldrb	r3, [r2, #0]
    f3ba:	strb.w	r3, [r4], #1
    f3be:	cmp	r8, r4
    f3c0:	beq.n	f3dc <__ssvfscanf_r+0x528>
    f3c2:	ldr.w	r3, [fp, #4]
    f3c6:	cmp	r3, #0
    f3c8:	bgt.n	f39c <__ssvfscanf_r+0x4e8>
    f3ca:	mov	r1, fp
    f3cc:	mov	r0, sl
    f3ce:	bl	128ec <__ssrefill_r>
    f3d2:	cmp	r0, #0
    f3d4:	beq.n	f39c <__ssvfscanf_r+0x4e8>
    f3d6:	cmp	r5, r4
    f3d8:	beq.w	f0fe <__ssvfscanf_r+0x24a>
    f3dc:	subs	r5, r4, r5
    f3de:	beq.w	ef50 <__ssvfscanf_r+0x9c>
    f3e2:	ldr	r2, [sp, #24]
    f3e4:	adds	r2, #1
    f3e6:	movs	r3, #0
    f3e8:	str	r2, [sp, #24]
    f3ea:	ldr	r2, [sp, #12]
    f3ec:	str	r2, [sp, #20]
    f3ee:	strb	r3, [r4, #0]
    f3f0:	add	r7, r5
    f3f2:	mov	r4, r6
    f3f4:	b.n	ef44 <__ssvfscanf_r+0x90>
    f3f6:	str	r3, [sp, #12]
    f3f8:	bl	b708 <__locale_ctype_ptr>
    f3fc:	add	r0, r8
    f3fe:	ldrb	r3, [r0, #1]
    f400:	and.w	r3, r3, #3
    f404:	cmp	r3, #1
    f406:	ldr.w	r3, [fp, #4]
    f40a:	beq.w	f53a <__ssvfscanf_r+0x686>
    f40e:	cmp	r3, #0
    f410:	bgt.w	f28e <__ssvfscanf_r+0x3da>
    f414:	b.n	f304 <__ssvfscanf_r+0x450>
    f416:	add	r3, sp, #72	; 0x48
    f418:	mov	r0, r3
    f41a:	movs	r2, #8
    f41c:	movs	r1, #0
    f41e:	str	r3, [sp, #32]
    f420:	bl	beac <memset>
    f424:	ands.w	r3, r5, #16
    f428:	str	r3, [sp, #40]	; 0x28
    f42a:	bne.n	f528 <__ssvfscanf_r+0x674>
    f42c:	ldr	r2, [sp, #20]
    f42e:	mov	r3, r2
    f430:	adds	r3, #4
    f432:	ldr.w	r9, [r2]
    f436:	str	r3, [sp, #20]
    f438:	movs	r5, #0
    f43a:	add.w	r8, sp, #336	; 0x150
    f43e:	bl	b6e4 <__locale_mb_cur_max>
    f442:	cmp	r0, r5
    f444:	beq.w	f0fe <__ssvfscanf_r+0x24a>
    f448:	ldmia.w	fp, {r2, r3}
    f44c:	ldrb.w	r0, [r2], #1
    f450:	str.w	r2, [fp]
    f454:	subs	r3, #1
    f456:	ldr	r2, [sp, #32]
    f458:	str	r2, [sp, #0]
    f45a:	adds	r6, r5, #1
    f45c:	str.w	r3, [fp, #4]
    f460:	mov	r1, r9
    f462:	strb.w	r0, [r8, r5]
    f466:	mov	r3, r6
    f468:	mov	r2, r8
    f46a:	mov	r0, sl
    f46c:	bl	11844 <_mbrtowc_r>
    f470:	adds	r1, r0, #1
    f472:	beq.w	f0fe <__ssvfscanf_r+0x24a>
    f476:	cbnz	r0, f4a2 <__ssvfscanf_r+0x5ee>
    f478:	ldr	r3, [sp, #40]	; 0x28
    f47a:	cbnz	r3, f4c2 <__ssvfscanf_r+0x60e>
    f47c:	str.w	r3, [r9]
    f480:	add	r7, r6
    f482:	subs	r4, #1
    f484:	add.w	r9, r9, #4
    f488:	ldr.w	r3, [fp, #4]
    f48c:	cmp	r3, #0
    f48e:	mov.w	r5, #0
    f492:	ble.n	f4b0 <__ssvfscanf_r+0x5fc>
    f494:	cmp	r4, #0
    f496:	bne.n	f43e <__ssvfscanf_r+0x58a>
    f498:	ldr	r3, [sp, #40]	; 0x28
    f49a:	cmp	r3, #0
    f49c:	beq.w	f376 <__ssvfscanf_r+0x4c2>
    f4a0:	b.n	f37c <__ssvfscanf_r+0x4c8>
    f4a2:	adds	r0, #2
    f4a4:	bne.n	f4c8 <__ssvfscanf_r+0x614>
    f4a6:	ldr.w	r3, [fp, #4]
    f4aa:	cmp	r3, #0
    f4ac:	mov	r5, r6
    f4ae:	bgt.n	f43e <__ssvfscanf_r+0x58a>
    f4b0:	mov	r1, fp
    f4b2:	mov	r0, sl
    f4b4:	bl	128ec <__ssrefill_r>
    f4b8:	cmp	r0, #0
    f4ba:	beq.n	f494 <__ssvfscanf_r+0x5e0>
    f4bc:	cmp	r5, #0
    f4be:	beq.n	f498 <__ssvfscanf_r+0x5e4>
    f4c0:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f4c2:	add	r7, r6
    f4c4:	subs	r4, #1
    f4c6:	b.n	f488 <__ssvfscanf_r+0x5d4>
    f4c8:	ldr	r3, [sp, #40]	; 0x28
    f4ca:	add	r7, r6
    f4cc:	subs	r4, #1
    f4ce:	cmp	r3, #0
    f4d0:	bne.n	f488 <__ssvfscanf_r+0x5d4>
    f4d2:	b.n	f484 <__ssvfscanf_r+0x5d0>
    f4d4:	mov	r8, r5
    f4d6:	mov	r5, r8
    f4d8:	add	r7, r5
    f4da:	b.n	f3f2 <__ssvfscanf_r+0x53e>
    f4dc:	cmp	r5, #0
    f4de:	beq.w	ef50 <__ssvfscanf_r+0x9c>
    f4e2:	add	r7, r5
    f4e4:	b.n	f3f2 <__ssvfscanf_r+0x53e>
    f4e6:	cmp	r5, #0
    f4e8:	bne.w	f20e <__ssvfscanf_r+0x35a>
    f4ec:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f4ee:	ldr	r5, [sp, #20]
    f4f0:	mov	r3, r4
    f4f2:	ldr	r1, [r5, #0]
    f4f4:	str.w	fp, [sp]
    f4f8:	movs	r2, #1
    f4fa:	mov	r0, sl
    f4fc:	bl	12928 <_sfread_r>
    f500:	adds	r6, r5, #4
    f502:	cmp	r0, #0
    f504:	beq.w	f0fe <__ssvfscanf_r+0x24a>
    f508:	ldr	r3, [sp, #24]
    f50a:	str	r6, [sp, #20]
    f50c:	ldr	r6, [sp, #12]
    f50e:	adds	r3, #1
    f510:	add	r7, r0
    f512:	str	r3, [sp, #24]
    f514:	mov	r4, r6
    f516:	b.n	ef44 <__ssvfscanf_r+0x90>
    f518:	mov	r1, fp
    f51a:	mov	r0, sl
    f51c:	bl	128ec <__ssrefill_r>
    f520:	cmp	r0, #0
    f522:	beq.w	f072 <__ssvfscanf_r+0x1be>
    f526:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f528:	mov.w	r9, #0
    f52c:	b.n	f438 <__ssvfscanf_r+0x584>
    f52e:	ldrb.w	r8, [r6, #2]
    f532:	orr.w	r5, r5, #2
    f536:	adds	r6, #2
    f538:	b.n	ef66 <__ssvfscanf_r+0xb2>
    f53a:	cmp	r3, #0
    f53c:	orr.w	r5, r5, #1
    f540:	bgt.w	f28e <__ssvfscanf_r+0x3da>
    f544:	b.n	f304 <__ssvfscanf_r+0x450>
    f546:	lsls	r4, r5, #31
    f548:	bmi.n	f564 <__ssvfscanf_r+0x6b0>
    f54a:	lsls	r0, r5, #30
    f54c:	bpl.n	f564 <__ssvfscanf_r+0x6b0>
    f54e:	ldr	r2, [sp, #20]
    f550:	ldr	r6, [sp, #12]
    f552:	ldr	r3, [r2, #0]
    f554:	mov	r0, r7
    f556:	asrs	r1, r7, #31
    f558:	adds	r2, #4
    f55a:	str	r2, [sp, #20]
    f55c:	strd	r0, r1, [r3]
    f560:	mov	r4, r6
    f562:	b.n	ef44 <__ssvfscanf_r+0x90>
    f564:	ldr	r2, [sp, #20]
    f566:	ldr	r6, [sp, #12]
    f568:	ldr	r3, [r2, #0]
    f56a:	str	r7, [r3, #0]
    f56c:	mov	r3, r2
    f56e:	adds	r3, #4
    f570:	str	r3, [sp, #20]
    f572:	mov	r4, r6
    f574:	b.n	ef44 <__ssvfscanf_r+0x90>
    f576:	mov	r1, fp
    f578:	mov	r0, sl
    f57a:	bl	128ec <__ssrefill_r>
    f57e:	cmp	r0, #0
    f580:	bne.w	f0fe <__ssvfscanf_r+0x24a>
    f584:	ldr	r3, [pc, #504]	; (f780 <__ssvfscanf_r+0x8cc>)
    f586:	str	r0, [sp, #16]
    f588:	str	r3, [sp, #28]
    f58a:	movs	r6, #3
    f58c:	b.n	f0c0 <__ssvfscanf_r+0x20c>
    f58e:	mov	r1, fp
    f590:	mov	r0, sl
    f592:	bl	128ec <__ssrefill_r>
    f596:	cmp	r0, #0
    f598:	beq.w	f22e <__ssvfscanf_r+0x37a>
    f59c:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f59e:	mov	r1, fp
    f5a0:	mov	r0, sl
    f5a2:	bl	128ec <__ssrefill_r>
    f5a6:	cmp	r0, #0
    f5a8:	beq.w	f1c4 <__ssvfscanf_r+0x310>
    f5ac:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f5ae:	mov	r1, fp
    f5b0:	mov	r0, sl
    f5b2:	bl	128ec <__ssrefill_r>
    f5b6:	cmp	r0, #0
    f5b8:	beq.w	f2f2 <__ssvfscanf_r+0x43e>
    f5bc:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f5be:	mov	r1, fp
    f5c0:	mov	r0, sl
    f5c2:	bl	128ec <__ssrefill_r>
    f5c6:	cmp	r0, #0
    f5c8:	beq.w	f156 <__ssvfscanf_r+0x2a2>
    f5cc:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f5ce:	mov	r1, fp
    f5d0:	mov	r0, sl
    f5d2:	bl	128ec <__ssrefill_r>
    f5d6:	cmp	r0, #0
    f5d8:	beq.w	f13e <__ssvfscanf_r+0x28a>
    f5dc:	b.n	f0fe <__ssvfscanf_r+0x24a>
    f5de:	cmp	r6, #3
    f5e0:	beq.w	f922 <__ssvfscanf_r+0xa6e>
    f5e4:	cmp	r6, #4
    f5e6:	bne.w	fa64 <__ssvfscanf_r+0xbb0>
    f5ea:	mov	r0, sl
    f5ec:	bl	11828 <_localeconv_r>
    f5f0:	subs	r3, r4, #1
    f5f2:	ldr	r2, [r0, #0]
    f5f4:	str	r2, [sp, #48]	; 0x30
    f5f6:	cmp.w	r3, #348	; 0x15c
    f5fa:	bls.w	facc <__ssvfscanf_r+0xc18>
    f5fe:	mvn.w	r1, #348	; 0x15c
    f602:	adds	r3, r4, r1
    f604:	str	r3, [sp, #56]	; 0x38
    f606:	movw	r4, #349	; 0x15d
    f60a:	add	r3, sp, #336	; 0x150
    f60c:	mov.w	r8, #0
    f610:	mov	r2, r3
    f612:	str	r3, [sp, #40]	; 0x28
    f614:	orr.w	r5, r5, #1920	; 0x780
    f618:	mov	r3, r8
    f61a:	str.w	r8, [sp, #60]	; 0x3c
    f61e:	str.w	r8, [sp, #52]	; 0x34
    f622:	mov	r6, r8
    f624:	str.w	r8, [sp, #44]	; 0x2c
    f628:	mov	r9, r2
    f62a:	ldr.w	r0, [fp]
    f62e:	ldrb	r1, [r0, #0]
    f630:	sub.w	lr, r1, #43	; 0x2b
    f634:	cmp.w	lr, #78	; 0x4e
    f638:	bhi.w	f8d2 <__ssvfscanf_r+0xa1e>
    f63c:	tbh	[pc, lr, lsl #1]
    f640:	.word	0x0149007a
    f644:	.word	0x0149007a
    f648:	.word	0x006e0149
    f64c:	.word	0x004f004f
    f650:	.word	0x004f004f
    f654:	.word	0x004f004f
    f658:	.word	0x004f004f
    f65c:	.word	0x0149004f
    f660:	.word	0x01490149
    f664:	.word	0x01490149
    f668:	.word	0x01490149
    f66c:	.word	0x01490144
    f670:	.word	0x01490149
    f674:	.word	0x0125012c
    f678:	.word	0x01490149
    f67c:	.word	0x014900a2
    f680:	.word	0x01490149
    f684:	.word	0x008b0149
    f688:	.word	0x01490149
    f68c:	.word	0x01490149
    f690:	.word	0x00850149
    f694:	.word	0x01490149
    f698:	.word	0x01490149
    f69c:	.word	0x0149007f
    f6a0:	.word	0x01490149
    f6a4:	.word	0x01490149
    f6a8:	.word	0x01490149
    f6ac:	.word	0x01490144
    f6b0:	.word	0x01490149
    f6b4:	.word	0x0125012c
    f6b8:	.word	0x01490149
    f6bc:	.word	0x014900a2
    f6c0:	.word	0x01490149
    f6c4:	.word	0x008b0149
    f6c8:	.word	0x01490149
    f6cc:	.word	0x01490149
    f6d0:	.word	0x00850149
    f6d4:	.word	0x01490149
    f6d8:	.word	0x01490149
    f6dc:	.short	0x007f
    f6de:	cmn.w	r3, r8
    f6e2:	bne.n	f712 <__ssvfscanf_r+0x85e>
    f6e4:	bic.w	r5, r5, #384	; 0x180
    f6e8:	strb.w	r1, [r9]
    f6ec:	add.w	r9, r9, #1
    f6f0:	ldr.w	r1, [fp, #4]
    f6f4:	subs	r1, #1
    f6f6:	cmp	r1, #0
    f6f8:	add.w	r4, r4, #4294967295
    f6fc:	add.w	r7, r7, #1
    f700:	str.w	r1, [fp, #4]
    f704:	ble.w	f8ec <__ssvfscanf_r+0xa38>
    f708:	adds	r0, #1
    f70a:	str.w	r0, [fp]
    f70e:	cmp	r4, #0
    f710:	bne.n	f62a <__ssvfscanf_r+0x776>
    f712:	cmp	r6, #0
    f714:	beq.n	f79c <__ssvfscanf_r+0x8e8>
    f716:	bic.w	r5, r5, #256	; 0x100
    f71a:	b.n	f79c <__ssvfscanf_r+0x8e8>
    f71c:	lsls	r2, r5, #23
    f71e:	bpl.n	f6de <__ssvfscanf_r+0x82a>
    f720:	ldr	r2, [sp, #56]	; 0x38
    f722:	bic.w	r5, r5, #128	; 0x80
    f726:	adds	r6, #1
    f728:	cmp	r2, #0
    f72a:	beq.n	f6f0 <__ssvfscanf_r+0x83c>
    f72c:	subs	r2, #1
    f72e:	str	r2, [sp, #56]	; 0x38
    f730:	adds	r4, #1
    f732:	b.n	f6f0 <__ssvfscanf_r+0x83c>
    f734:	lsls	r2, r5, #24
    f736:	bpl.n	f712 <__ssvfscanf_r+0x85e>
    f738:	bic.w	r5, r5, #128	; 0x80
    f73c:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f73e:	cmp.w	r8, #7
    f742:	bne.n	f712 <__ssvfscanf_r+0x85e>
    f744:	mov.w	r8, #8
    f748:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f74a:	cmp.w	r8, #6
    f74e:	bne.n	f712 <__ssvfscanf_r+0x85e>
    f750:	mov.w	r8, #7
    f754:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f756:	cmp	r3, #0
    f758:	bne.w	f918 <__ssvfscanf_r+0xa64>
    f75c:	cbnz	r6, f76a <__ssvfscanf_r+0x8b6>
    f75e:	and.w	lr, r5, #1792	; 0x700
    f762:	cmp.w	lr, #1792	; 0x700
    f766:	beq.w	fbf0 <__ssvfscanf_r+0xd3c>
    f76a:	cmp.w	r8, #1
    f76e:	beq.n	f776 <__ssvfscanf_r+0x8c2>
    f770:	cmp.w	r8, #4
    f774:	bne.n	f712 <__ssvfscanf_r+0x85e>
    f776:	add.w	r8, r8, #1
    f77a:	uxtb.w	r8, r8
    f77e:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f780:	.word	0x0000d7a9
    f784:	cmp.w	r8, #0
    f788:	bne.w	f906 <__ssvfscanf_r+0xa52>
    f78c:	cmp	r6, #0
    f78e:	bne.n	f716 <__ssvfscanf_r+0x862>
    f790:	and.w	lr, r5, #1792	; 0x700
    f794:	cmp.w	lr, #1792	; 0x700
    f798:	beq.w	fc10 <__ssvfscanf_r+0xd5c>
    f79c:	subs	r3, #1
    f79e:	cmp	r3, #1
    f7a0:	bls.w	fca6 <__ssvfscanf_r+0xdf2>
    f7a4:	add.w	r3, r8, #4294967295
    f7a8:	cmp	r3, #6
    f7aa:	bhi.n	f7da <__ssvfscanf_r+0x926>
    f7ac:	cmp.w	r8, #2
    f7b0:	bls.w	fcf4 <__ssvfscanf_r+0xe40>
    f7b4:	cmp.w	r8, #3
    f7b8:	beq.n	f7da <__ssvfscanf_r+0x926>
    f7ba:	sub.w	r4, r8, #4
    f7be:	uxtb	r4, r4
    f7c0:	mvn.w	r8, r4
    f7c4:	add	r8, r9
    f7c6:	ldrb.w	r1, [r9, #-1]!
    f7ca:	mov	r2, fp
    f7cc:	mov	r0, sl
    f7ce:	bl	12868 <_sungetc_r>
    f7d2:	cmp	r8, r9
    f7d4:	bne.n	f7c6 <__ssvfscanf_r+0x912>
    f7d6:	subs	r7, #1
    f7d8:	subs	r7, r7, r4
    f7da:	lsls	r1, r5, #23
    f7dc:	bpl.n	f818 <__ssvfscanf_r+0x964>
    f7de:	lsls	r2, r5, #21
    f7e0:	bmi.w	fcca <__ssvfscanf_r+0xe16>
    f7e4:	ldrb.w	r1, [r9, #-1]
    f7e8:	cmp	r1, #101	; 0x65
    f7ea:	add.w	r4, r9, #4294967295
    f7ee:	add.w	r8, r7, #4294967295
    f7f2:	beq.n	f80c <__ssvfscanf_r+0x958>
    f7f4:	cmp	r1, #69	; 0x45
    f7f6:	beq.n	f80c <__ssvfscanf_r+0x958>
    f7f8:	mov	r2, fp
    f7fa:	mov	r0, sl
    f7fc:	bl	12868 <_sungetc_r>
    f800:	ldrb.w	r1, [r9, #-2]
    f804:	sub.w	r8, r7, #2
    f808:	sub.w	r4, r9, #2
    f80c:	mov	r2, fp
    f80e:	mov	r0, sl
    f810:	bl	12868 <_sungetc_r>
    f814:	mov	r7, r8
    f816:	mov	r9, r4
    f818:	ands.w	r2, r5, #16
    f81c:	bne.w	f37c <__ssvfscanf_r+0x4c8>
    f820:	and.w	r3, r5, #1536	; 0x600
    f824:	cmp.w	r3, #1024	; 0x400
    f828:	strb.w	r2, [r9]
    f82c:	beq.w	fc1a <__ssvfscanf_r+0xd66>
    f830:	ldr	r3, [sp, #52]	; 0x34
    f832:	cmp	r3, #0
    f834:	bne.w	fc3c <__ssvfscanf_r+0xd88>
    f838:	ldr	r1, [sp, #40]	; 0x28
    f83a:	movs	r2, #0
    f83c:	mov	r0, sl
    f83e:	bl	d650 <_strtod_r>
    f842:	lsls	r3, r5, #31
    f844:	bmi.w	fad2 <__ssvfscanf_r+0xc1e>
    f848:	ands.w	r5, r5, #2
    f84c:	bne.w	fad2 <__ssvfscanf_r+0xc1e>
    f850:	vmov	r2, r3, d0
    f854:	vmov	r0, r1, d0
    f858:	vstr	d0, [sp, #32]
    f85c:	bl	af64 <__aeabi_dcmpun>
    f860:	ldr	r4, [sp, #20]
    f862:	vldr	d0, [sp, #32]
    f866:	adds	r6, r4, #4
    f868:	ldr	r4, [r4, #0]
    f86a:	cmp	r0, #0
    f86c:	bne.w	fd28 <__ssvfscanf_r+0xe74>
    f870:	vmov	r0, r1, d0
    f874:	bl	b020 <__aeabi_d2f>
    f878:	str	r6, [sp, #20]
    f87a:	str	r0, [r4, #0]
    f87c:	ldr	r3, [sp, #24]
    f87e:	ldr	r6, [sp, #12]
    f880:	adds	r3, #1
    f882:	str	r3, [sp, #24]
    f884:	mov	r4, r6
    f886:	b.w	ef44 <__ssvfscanf_r+0x90>
    f88a:	cmp.w	r8, #2
    f88e:	bne.w	f712 <__ssvfscanf_r+0x85e>
    f892:	mov.w	r8, #3
    f896:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f898:	and.w	lr, r5, #1280	; 0x500
    f89c:	cmp.w	lr, #1024	; 0x400
    f8a0:	beq.n	f8ae <__ssvfscanf_r+0x9fa>
    f8a2:	lsls	r2, r5, #21
    f8a4:	bpl.w	f712 <__ssvfscanf_r+0x85e>
    f8a8:	cmp	r6, #0
    f8aa:	beq.w	f79c <__ssvfscanf_r+0x8e8>
    f8ae:	lsls	r2, r5, #22
    f8b0:	bmi.n	f8bc <__ssvfscanf_r+0xa08>
    f8b2:	ldr	r2, [sp, #44]	; 0x2c
    f8b4:	str.w	r9, [sp, #60]	; 0x3c
    f8b8:	subs	r2, r6, r2
    f8ba:	str	r2, [sp, #52]	; 0x34
    f8bc:	bic.w	r5, r5, #1920	; 0x780
    f8c0:	orr.w	r5, r5, #384	; 0x180
    f8c4:	movs	r6, #0
    f8c6:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f8c8:	cmp	r3, #1
    f8ca:	bne.w	f712 <__ssvfscanf_r+0x85e>
    f8ce:	movs	r3, #2
    f8d0:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f8d2:	ldr	r2, [sp, #48]	; 0x30
    f8d4:	ldrb.w	lr, [r2]
    f8d8:	cmp	lr, r1
    f8da:	bne.w	f712 <__ssvfscanf_r+0x85e>
    f8de:	lsls	r2, r5, #22
    f8e0:	bpl.w	f712 <__ssvfscanf_r+0x85e>
    f8e4:	bic.w	r5, r5, #640	; 0x280
    f8e8:	str	r6, [sp, #44]	; 0x2c
    f8ea:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f8ec:	mov	r1, fp
    f8ee:	mov	r0, sl
    f8f0:	str	r3, [sp, #32]
    f8f2:	bl	128ec <__ssrefill_r>
    f8f6:	ldr	r3, [sp, #32]
    f8f8:	cmp	r0, #0
    f8fa:	bne.w	f712 <__ssvfscanf_r+0x85e>
    f8fe:	cmp	r4, #0
    f900:	bne.w	f62a <__ssvfscanf_r+0x776>
    f904:	b.n	f712 <__ssvfscanf_r+0x85e>
    f906:	cmp.w	r8, #3
    f90a:	beq.w	f776 <__ssvfscanf_r+0x8c2>
    f90e:	cmp.w	r8, #5
    f912:	beq.w	f776 <__ssvfscanf_r+0x8c2>
    f916:	b.n	f712 <__ssvfscanf_r+0x85e>
    f918:	cmp	r3, #2
    f91a:	bne.w	f76a <__ssvfscanf_r+0x8b6>
    f91e:	movs	r3, #3
    f920:	b.n	f6e8 <__ssvfscanf_r+0x834>
    f922:	subs	r3, r4, #1
    f924:	cmp.w	r3, #348	; 0x15c
    f928:	itte	hi
    f92a:	mvnhi.w	r0, #348	; 0x15c
    f92e:	addhi.w	r9, r4, r0
    f932:	movls	r9, r8
    f934:	add	r3, sp, #336	; 0x150
    f936:	mov	r0, r2
    f938:	mov	r2, r7
    f93a:	mov	r7, r9
    f93c:	ldr.w	r9, [sp, #16]
    f940:	str	r3, [sp, #40]	; 0x28
    f942:	it	hi
    f944:	movwhi	r4, #349	; 0x15d
    f948:	orr.w	r5, r5, #3456	; 0xd80
    f94c:	mov	r6, r3
    f94e:	mov.w	r8, #0
    f952:	sub.w	r3, r1, #43	; 0x2b
    f956:	cmp	r3, #77	; 0x4d
    f958:	bhi.n	f9fe <__ssvfscanf_r+0xb4a>
    f95a:	tbb	[pc, r3]
    f95e:	.short	0x507e
    f960:	.word	0x6f50507e
    f964:	.word	0x69696969
    f968:	.word	0x4a696969
    f96c:	.word	0x5050504a
    f970:	.word	0x50505050
    f974:	.word	0x44444444
    f978:	.word	0x50504444
    f97c:	.word	0x50505050
    f980:	.word	0x50505050
    f984:	.word	0x50505050
    f988:	.word	0x27505050
    f98c:	.word	0x50505050
    f990:	.word	0x50505050
    f994:	.word	0x44444444
    f998:	.word	0x50504444
    f99c:	.word	0x50505050
    f9a0:	.word	0x50505050
    f9a4:	.word	0x50505050
    f9a8:	.word	0x27505050
    f9ac:	and.w	r3, r5, #1536	; 0x600
    f9b0:	cmp.w	r3, #512	; 0x200
    f9b4:	bne.n	f9fe <__ssvfscanf_r+0xb4a>
    f9b6:	bic.w	r5, r5, #512	; 0x200
    f9ba:	orr.w	r5, r5, #1280	; 0x500
    f9be:	mov.w	r9, #16
    f9c2:	strb	r1, [r6, #0]
    f9c4:	adds	r6, #1
    f9c6:	ldr.w	r3, [fp, #4]
    f9ca:	subs	r3, #1
    f9cc:	cmp	r3, #0
    f9ce:	str.w	r3, [fp, #4]
    f9d2:	ble.n	faba <__ssvfscanf_r+0xc06>
    f9d4:	adds	r0, #1
    f9d6:	str.w	r0, [fp]
    f9da:	subs	r4, #1
    f9dc:	beq.n	f9fe <__ssvfscanf_r+0xb4a>
    f9de:	ldr.w	r0, [fp]
    f9e2:	ldrb	r1, [r0, #0]
    f9e4:	b.n	f952 <__ssvfscanf_r+0xa9e>
    f9e6:	cmp.w	r9, #10
    f9ea:	ble.n	f9fe <__ssvfscanf_r+0xb4a>
    f9ec:	bic.w	r5, r5, #2944	; 0xb80
    f9f0:	b.n	f9c2 <__ssvfscanf_r+0xb0e>
    f9f2:	ldr	r3, [pc, #756]	; (fce8 <__ssvfscanf_r+0xe34>)
    f9f4:	ldrsh.w	r9, [r3, r9, lsl #1]
    f9f8:	cmp.w	r9, #8
    f9fc:	bgt.n	f9ec <__ssvfscanf_r+0xb38>
    f9fe:	lsls	r1, r5, #23
    fa00:	mov	r7, r2
    fa02:	str.w	r9, [sp, #16]
    fa06:	bpl.n	fa18 <__ssvfscanf_r+0xb64>
    fa08:	ldr	r3, [sp, #40]	; 0x28
    fa0a:	cmp	r6, r3
    fa0c:	bhi.w	fbf8 <__ssvfscanf_r+0xd44>
    fa10:	ldr	r3, [sp, #40]	; 0x28
    fa12:	cmp	r6, r3
    fa14:	beq.w	ef50 <__ssvfscanf_r+0x9c>
    fa18:	ands.w	r4, r5, #16
    fa1c:	beq.w	fb44 <__ssvfscanf_r+0xc90>
    fa20:	ldr	r3, [sp, #40]	; 0x28
    fa22:	subs	r6, r6, r3
    fa24:	add	r6, r8
    fa26:	add	r7, r6
    fa28:	ldr	r6, [sp, #12]
    fa2a:	mov	r4, r6
    fa2c:	b.w	ef44 <__ssvfscanf_r+0x90>
    fa30:	ldr	r3, [pc, #692]	; (fce8 <__ssvfscanf_r+0xe34>)
    fa32:	bic.w	r5, r5, #2944	; 0xb80
    fa36:	ldrsh.w	r9, [r3, r9, lsl #1]
    fa3a:	b.n	f9c2 <__ssvfscanf_r+0xb0e>
    fa3c:	lsls	r3, r5, #20
    fa3e:	bpl.n	f9c2 <__ssvfscanf_r+0xb0e>
    fa40:	cmp.w	r9, #0
    fa44:	bne.n	fa4e <__ssvfscanf_r+0xb9a>
    fa46:	orr.w	r5, r5, #512	; 0x200
    fa4a:	mov.w	r9, #8
    fa4e:	lsls	r3, r5, #21
    fa50:	bpl.w	fbd4 <__ssvfscanf_r+0xd20>
    fa54:	bic.w	r5, r5, #1408	; 0x580
    fa58:	b.n	f9c2 <__ssvfscanf_r+0xb0e>
    fa5a:	lsls	r3, r5, #24
    fa5c:	bpl.n	f9fe <__ssvfscanf_r+0xb4a>
    fa5e:	bic.w	r5, r5, #128	; 0x80
    fa62:	b.n	f9c2 <__ssvfscanf_r+0xb0e>
    fa64:	cmp	r4, #0
    fa66:	it	eq
    fa68:	moveq.w	r4, #4294967295
    fa6c:	ands.w	r3, r5, #1
    fa70:	bne.w	f330 <__ssvfscanf_r+0x47c>
    fa74:	lsls	r1, r5, #27
    fa76:	bpl.n	fae0 <__ssvfscanf_r+0xc2c>
    fa78:	mov	r5, r3
    fa7a:	bl	b708 <__locale_ctype_ptr>
    fa7e:	ldr.w	r3, [fp]
    fa82:	ldrb	r2, [r3, #0]
    fa84:	add	r0, r2
    fa86:	adds	r3, #1
    fa88:	ldrb	r2, [r0, #1]
    fa8a:	lsls	r2, r2, #28
    fa8c:	bmi.w	f20e <__ssvfscanf_r+0x35a>
    fa90:	ldr.w	r2, [fp, #4]
    fa94:	str.w	r3, [fp]
    fa98:	adds	r5, #1
    fa9a:	subs	r3, r2, #1
    fa9c:	cmp	r4, r5
    fa9e:	str.w	r3, [fp, #4]
    faa2:	beq.w	f20e <__ssvfscanf_r+0x35a>
    faa6:	cmp	r3, #0
    faa8:	bgt.n	fa7a <__ssvfscanf_r+0xbc6>
    faaa:	mov	r1, fp
    faac:	mov	r0, sl
    faae:	bl	128ec <__ssrefill_r>
    fab2:	cmp	r0, #0
    fab4:	beq.n	fa7a <__ssvfscanf_r+0xbc6>
    fab6:	b.w	f20e <__ssvfscanf_r+0x35a>
    faba:	mov	r1, fp
    fabc:	mov	r0, sl
    fabe:	str	r2, [sp, #16]
    fac0:	bl	128ec <__ssrefill_r>
    fac4:	ldr	r2, [sp, #16]
    fac6:	cmp	r0, #0
    fac8:	beq.n	f9da <__ssvfscanf_r+0xb26>
    faca:	b.n	f9fe <__ssvfscanf_r+0xb4a>
    facc:	str.w	r8, [sp, #56]	; 0x38
    fad0:	b.n	f60a <__ssvfscanf_r+0x756>
    fad2:	ldr	r2, [sp, #20]
    fad4:	ldr	r3, [r2, #0]
    fad6:	adds	r2, #4
    fad8:	str	r2, [sp, #20]
    fada:	vstr	d0, [r3]
    fade:	b.n	f87c <__ssvfscanf_r+0x9c8>
    fae0:	ldr	r2, [sp, #20]
    fae2:	ldr	r5, [r2, #0]
    fae4:	adds	r6, r2, #4
    fae6:	add	r4, r5
    fae8:	mov	r8, r5
    faea:	bl	b708 <__locale_ctype_ptr>
    faee:	ldr.w	r2, [fp]
    faf2:	ldrb	r3, [r2, #0]
    faf4:	add	r0, r3
    faf6:	adds	r1, r2, #1
    faf8:	ldrb	r3, [r0, #1]
    fafa:	lsls	r3, r3, #28
    fafc:	bmi.n	fb2a <__ssvfscanf_r+0xc76>
    fafe:	ldr.w	r3, [fp, #4]
    fb02:	str.w	r1, [fp]
    fb06:	subs	r3, #1
    fb08:	str.w	r3, [fp, #4]
    fb0c:	ldrb	r3, [r2, #0]
    fb0e:	strb.w	r3, [r8], #1
    fb12:	cmp	r4, r8
    fb14:	beq.n	fb2c <__ssvfscanf_r+0xc78>
    fb16:	ldr.w	r3, [fp, #4]
    fb1a:	cmp	r3, #0
    fb1c:	bgt.n	faea <__ssvfscanf_r+0xc36>
    fb1e:	mov	r1, fp
    fb20:	mov	r0, sl
    fb22:	bl	128ec <__ssrefill_r>
    fb26:	cmp	r0, #0
    fb28:	beq.n	faea <__ssvfscanf_r+0xc36>
    fb2a:	mov	r4, r8
    fb2c:	ldr	r2, [sp, #24]
    fb2e:	str	r6, [sp, #20]
    fb30:	ldr	r6, [sp, #12]
    fb32:	subs	r5, r4, r5
    fb34:	movs	r3, #0
    fb36:	adds	r2, #1
    fb38:	strb	r3, [r4, #0]
    fb3a:	add	r7, r5
    fb3c:	str	r2, [sp, #24]
    fb3e:	mov	r4, r6
    fb40:	b.w	ef44 <__ssvfscanf_r+0x90>
    fb44:	mov	r2, r4
    fb46:	strb	r4, [r6, #0]
    fb48:	ldr	r3, [sp, #16]
    fb4a:	ldr	r1, [sp, #40]	; 0x28
    fb4c:	ldr	r4, [sp, #28]
    fb4e:	mov	r0, sl
    fb50:	blx	r4
    fb52:	lsls	r2, r5, #26
    fb54:	bmi.n	fbe4 <__ssvfscanf_r+0xd30>
    fb56:	lsls	r3, r5, #29
    fb58:	bpl.n	fc52 <__ssvfscanf_r+0xd9e>
    fb5a:	ldr	r2, [sp, #20]
    fb5c:	ldr	r3, [r2, #0]
    fb5e:	adds	r2, #4
    fb60:	str	r2, [sp, #20]
    fb62:	strh	r0, [r3, #0]
    fb64:	ldr	r3, [sp, #24]
    fb66:	adds	r3, #1
    fb68:	str	r3, [sp, #24]
    fb6a:	b.n	fa20 <__ssvfscanf_r+0xb6c>
    fb6c:	bl	b6e4 <__locale_mb_cur_max>
    fb70:	cmp	r6, r0
    fb72:	beq.w	f0fe <__ssvfscanf_r+0x24a>
    fb76:	ldmia.w	fp, {r2, r3}
    fb7a:	ldrb.w	r0, [r2], #1
    fb7e:	str.w	r2, [fp]
    fb82:	ldr	r2, [sp, #32]
    fb84:	str	r2, [sp, #0]
    fb86:	add	r2, sp, #336	; 0x150
    fb88:	adds	r5, r6, #1
    fb8a:	subs	r3, #1
    fb8c:	strb	r0, [r2, r6]
    fb8e:	str.w	r3, [fp, #4]
    fb92:	mov	r1, r8
    fb94:	mov	r3, r5
    fb96:	mov	r0, sl
    fb98:	bl	11844 <_mbrtowc_r>
    fb9c:	adds	r6, r0, #1
    fb9e:	beq.w	f0fe <__ssvfscanf_r+0x24a>
    fba2:	cmp	r0, #0
    fba4:	bne.n	fc7e <__ssvfscanf_r+0xdca>
    fba6:	str.w	r0, [r8]
    fbaa:	bl	11808 <iswspace>
    fbae:	cmp	r0, #0
    fbb0:	beq.w	fd12 <__ssvfscanf_r+0xe5e>
    fbb4:	cmp	r5, #0
    fbb6:	beq.w	f36c <__ssvfscanf_r+0x4b8>
    fbba:	add	r3, sp, #336	; 0x150
    fbbc:	adds	r4, r3, r5
    fbbe:	subs	r5, #1
    fbc0:	mov	r2, fp
    fbc2:	ldrb.w	r1, [r4, #-1]!
    fbc6:	mov	r0, sl
    fbc8:	bl	12868 <_sungetc_r>
    fbcc:	cmp	r5, #0
    fbce:	bne.n	fbbe <__ssvfscanf_r+0xd0a>
    fbd0:	b.w	f36c <__ssvfscanf_r+0x4b8>
    fbd4:	bic.w	r5, r5, #896	; 0x380
    fbd8:	cbz	r7, fbde <__ssvfscanf_r+0xd2a>
    fbda:	subs	r7, #1
    fbdc:	adds	r4, #1
    fbde:	add.w	r8, r8, #1
    fbe2:	b.n	f9c6 <__ssvfscanf_r+0xb12>
    fbe4:	ldr	r2, [sp, #20]
    fbe6:	ldr	r3, [r2, #0]
    fbe8:	adds	r2, #4
    fbea:	str	r2, [sp, #20]
    fbec:	str	r0, [r3, #0]
    fbee:	b.n	fb64 <__ssvfscanf_r+0xcb0>
    fbf0:	bic.w	r5, r5, #1920	; 0x780
    fbf4:	movs	r3, #1
    fbf6:	b.n	f6e8 <__ssvfscanf_r+0x834>
    fbf8:	ldrb.w	r1, [r6, #-1]
    fbfc:	mov	r2, fp
    fbfe:	mov	r0, sl
    fc00:	bl	12868 <_sungetc_r>
    fc04:	subs	r6, #1
    fc06:	b.n	fa10 <__ssvfscanf_r+0xb5c>
    fc08:	add.w	r8, sp, #68	; 0x44
    fc0c:	b.w	f352 <__ssvfscanf_r+0x49e>
    fc10:	bic.w	r5, r5, #1920	; 0x780
    fc14:	mov.w	r8, #1
    fc18:	b.n	f6e8 <__ssvfscanf_r+0x834>
    fc1a:	ldr	r3, [sp, #44]	; 0x2c
    fc1c:	subs	r6, r6, r3
    fc1e:	negs	r2, r6
    fc20:	cmp	r6, #0
    fc22:	beq.w	f838 <__ssvfscanf_r+0x984>
    fc26:	addw	r3, sp, #675	; 0x2a3
    fc2a:	cmp	r9, r3
    fc2c:	it	cs
    fc2e:	addwcs	r9, sp, #674	; 0x2a2
    fc32:	mov	r0, r9
    fc34:	ldr	r1, [pc, #180]	; (fcec <__ssvfscanf_r+0xe38>)
    fc36:	bl	c354 <sprintf>
    fc3a:	b.n	f838 <__ssvfscanf_r+0x984>
    fc3c:	ldr	r4, [sp, #60]	; 0x3c
    fc3e:	mov	r1, r4
    fc40:	movs	r3, #10
    fc42:	adds	r1, #1
    fc44:	mov	r0, sl
    fc46:	bl	d7a8 <_strtol_r>
    fc4a:	ldr	r3, [sp, #52]	; 0x34
    fc4c:	mov	r9, r4
    fc4e:	subs	r2, r0, r3
    fc50:	b.n	fc26 <__ssvfscanf_r+0xd72>
    fc52:	ands.w	r2, r5, #1
    fc56:	bne.n	fbe4 <__ssvfscanf_r+0xd30>
    fc58:	lsls	r4, r5, #30
    fc5a:	bpl.n	fbe4 <__ssvfscanf_r+0xd30>
    fc5c:	ldr	r3, [sp, #28]
    fc5e:	mov	r1, r3
    fc60:	ldr	r3, [pc, #140]	; (fcf0 <__ssvfscanf_r+0xe3c>)
    fc62:	cmp	r1, r3
    fc64:	mov	r0, sl
    fc66:	ldr	r3, [sp, #16]
    fc68:	ldr	r1, [sp, #40]	; 0x28
    fc6a:	beq.n	fd36 <__ssvfscanf_r+0xe82>
    fc6c:	bl	123a8 <_strtoll_r>
    fc70:	ldr	r2, [sp, #20]
    fc72:	ldr	r3, [r2, #0]
    fc74:	adds	r2, #4
    fc76:	str	r2, [sp, #20]
    fc78:	strd	r0, r1, [r3]
    fc7c:	b.n	fb64 <__ssvfscanf_r+0xcb0>
    fc7e:	adds	r0, #2
    fc80:	bne.n	fcc4 <__ssvfscanf_r+0xe10>
    fc82:	mov	r6, r5
    fc84:	ldr.w	r3, [fp, #4]
    fc88:	cmp	r3, #0
    fc8a:	bgt.w	f354 <__ssvfscanf_r+0x4a0>
    fc8e:	mov	r1, fp
    fc90:	mov	r0, sl
    fc92:	bl	128ec <__ssrefill_r>
    fc96:	cmp	r0, #0
    fc98:	beq.w	f354 <__ssvfscanf_r+0x4a0>
    fc9c:	cmp	r6, #0
    fc9e:	bne.w	f0fe <__ssvfscanf_r+0x24a>
    fca2:	b.w	f36c <__ssvfscanf_r+0x4b8>
    fca6:	ldr	r3, [sp, #40]	; 0x28
    fca8:	cmp	r9, r3
    fcaa:	bls.w	ef50 <__ssvfscanf_r+0x9c>
    fcae:	ldrb.w	r1, [r9, #-1]!
    fcb2:	mov	r2, fp
    fcb4:	mov	r0, sl
    fcb6:	bl	12868 <_sungetc_r>
    fcba:	ldr	r3, [sp, #40]	; 0x28
    fcbc:	cmp	r9, r3
    fcbe:	bne.n	fcae <__ssvfscanf_r+0xdfa>
    fcc0:	b.w	ef50 <__ssvfscanf_r+0x9c>
    fcc4:	ldr.w	r0, [r8]
    fcc8:	b.n	fbaa <__ssvfscanf_r+0xcf6>
    fcca:	ldr	r3, [sp, #40]	; 0x28
    fccc:	cmp	r9, r3
    fcce:	bls.w	ef50 <__ssvfscanf_r+0x9c>
    fcd2:	ldrb.w	r1, [r9, #-1]!
    fcd6:	mov	r2, fp
    fcd8:	mov	r0, sl
    fcda:	bl	12868 <_sungetc_r>
    fcde:	ldr	r3, [sp, #40]	; 0x28
    fce0:	cmp	r9, r3
    fce2:	bne.n	fcd2 <__ssvfscanf_r+0xe1e>
    fce4:	b.w	ef50 <__ssvfscanf_r+0x9c>
    fce8:	.word	0x000135ac
    fcec:	.word	0x000135d0
    fcf0:	.word	0x00012535
    fcf4:	ldr	r3, [sp, #40]	; 0x28
    fcf6:	cmp	r9, r3
    fcf8:	bls.w	ef50 <__ssvfscanf_r+0x9c>
    fcfc:	ldrb.w	r1, [r9, #-1]!
    fd00:	mov	r2, fp
    fd02:	mov	r0, sl
    fd04:	bl	12868 <_sungetc_r>
    fd08:	ldr	r3, [sp, #40]	; 0x28
    fd0a:	cmp	r9, r3
    fd0c:	bne.n	fcfc <__ssvfscanf_r+0xe48>
    fd0e:	b.w	ef50 <__ssvfscanf_r+0x9c>
    fd12:	add	r7, r5
    fd14:	subs	r4, #1
    fd16:	cmp.w	r9, #0
    fd1a:	bne.n	fd24 <__ssvfscanf_r+0xe70>
    fd1c:	add.w	r8, r8, #4
    fd20:	mov	r6, r9
    fd22:	b.n	fc84 <__ssvfscanf_r+0xdd0>
    fd24:	mov	r6, r0
    fd26:	b.n	fc84 <__ssvfscanf_r+0xdd0>
    fd28:	mov	r0, r5
    fd2a:	bl	a6a8 <nanf>
    fd2e:	str	r6, [sp, #20]
    fd30:	vstr	s0, [r4]
    fd34:	b.n	f87c <__ssvfscanf_r+0x9c8>
    fd36:	bl	12744 <_strtoull_r>
    fd3a:	b.n	fc70 <__ssvfscanf_r+0xdbc>

0000fd3c <_vdprintf_r>:
    fd3c:	push	{r4, r5, r6, r7, lr}
    fd3e:	sub.w	sp, sp, #532	; 0x214
    fd42:	add	r5, sp, #16
    fd44:	str	r3, [sp, #0]
    fd46:	mov	r7, r1
    fd48:	mov	r3, r2
    fd4a:	mov.w	r4, #512	; 0x200
    fd4e:	add	r2, sp, #12
    fd50:	mov	r1, r5
    fd52:	str	r4, [sp, #12]
    fd54:	mov	r6, r0
    fd56:	bl	12a24 <_vasnprintf_r>
    fd5a:	cbz	r0, fd80 <_vdprintf_r+0x44>
    fd5c:	mov	r4, r0
    fd5e:	mov	r2, r0
    fd60:	mov	r1, r7
    fd62:	ldr	r3, [sp, #12]
    fd64:	mov	r0, r6
    fd66:	bl	fdbc <_write_r>
    fd6a:	cmp	r4, r5
    fd6c:	str	r0, [sp, #12]
    fd6e:	beq.n	fd7a <_vdprintf_r+0x3e>
    fd70:	mov	r0, r6
    fd72:	mov	r1, r4
    fd74:	bl	10ed0 <_free_r>
    fd78:	ldr	r0, [sp, #12]
    fd7a:	add.w	sp, sp, #532	; 0x214
    fd7e:	pop	{r4, r5, r6, r7, pc}
    fd80:	mov.w	r0, #4294967295
    fd84:	b.n	fd7a <_vdprintf_r+0x3e>
    fd86:	nop

0000fd88 <vdprintf>:
    fd88:	push	{r4}
    fd8a:	ldr	r4, [pc, #16]	; (fd9c <vdprintf+0x14>)
    fd8c:	mov	r3, r2
    fd8e:	mov	r2, r1
    fd90:	mov	r1, r0
    fd92:	ldr	r0, [r4, #0]
    fd94:	ldr.w	r4, [sp], #4
    fd98:	b.w	fd3c <_vdprintf_r>
    fd9c:	.word	0x20013fc8

0000fda0 <__ascii_wctomb>:
    fda0:	cbz	r1, fdac <__ascii_wctomb+0xc>
    fda2:	cmp	r2, #255	; 0xff
    fda4:	bhi.n	fdb0 <__ascii_wctomb+0x10>
    fda6:	strb	r2, [r1, #0]
    fda8:	movs	r0, #1
    fdaa:	bx	lr
    fdac:	mov	r0, r1
    fdae:	bx	lr
    fdb0:	movs	r3, #138	; 0x8a
    fdb2:	str	r3, [r0, #0]
    fdb4:	mov.w	r0, #4294967295
    fdb8:	bx	lr
    fdba:	nop

0000fdbc <_write_r>:
    fdbc:	push	{r4, r5, r6, lr}
    fdbe:	mov	r5, r1
    fdc0:	ldr	r4, [pc, #32]	; (fde4 <_write_r+0x28>)
    fdc2:	mov	r1, r2
    fdc4:	mov	r6, r0
    fdc6:	mov	r2, r3
    fdc8:	mov	r0, r5
    fdca:	movs	r3, #0
    fdcc:	str	r3, [r4, #0]
    fdce:	bl	a100 <_write>
    fdd2:	adds	r3, r0, #1
    fdd4:	beq.n	fdd8 <_write_r+0x1c>
    fdd6:	pop	{r4, r5, r6, pc}
    fdd8:	ldr	r3, [r4, #0]
    fdda:	cmp	r3, #0
    fddc:	beq.n	fdd6 <_write_r+0x1a>
    fdde:	str	r3, [r6, #0]
    fde0:	pop	{r4, r5, r6, pc}
    fde2:	nop
    fde4:	.word	0x20019f48

0000fde8 <__register_exitproc>:
    fde8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fdec:	ldr	r4, [pc, #148]	; (fe84 <__register_exitproc+0x9c>)
    fdee:	ldr	r5, [r4, #0]
    fdf0:	ldr.w	r4, [r5, #328]	; 0x148
    fdf4:	mov	r6, r0
    fdf6:	mov	r8, r1
    fdf8:	mov	sl, r2
    fdfa:	mov	r9, r3
    fdfc:	cbz	r4, fe70 <__register_exitproc+0x88>
    fdfe:	ldr	r0, [r4, #4]
    fe00:	cmp	r0, #31
    fe02:	bgt.n	fe34 <__register_exitproc+0x4c>
    fe04:	adds	r3, r0, #1
    fe06:	cbz	r6, fe26 <__register_exitproc+0x3e>
    fe08:	add.w	r5, r4, r0, lsl #2
    fe0c:	movs	r2, #1
    fe0e:	str.w	sl, [r5, #136]	; 0x88
    fe12:	ldr.w	r1, [r4, #392]	; 0x188
    fe16:	lsls	r2, r0
    fe18:	orrs	r1, r2
    fe1a:	cmp	r6, #2
    fe1c:	str.w	r1, [r4, #392]	; 0x188
    fe20:	str.w	r9, [r5, #264]	; 0x108
    fe24:	beq.n	fe64 <__register_exitproc+0x7c>
    fe26:	adds	r0, #2
    fe28:	str	r3, [r4, #4]
    fe2a:	str.w	r8, [r4, r0, lsl #2]
    fe2e:	movs	r0, #0
    fe30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe34:	ldr	r3, [pc, #80]	; (fe88 <__register_exitproc+0xa0>)
    fe36:	cbz	r3, fe7a <__register_exitproc+0x92>
    fe38:	mov.w	r0, #400	; 0x190
    fe3c:	bl	b71c <malloc>
    fe40:	mov	r4, r0
    fe42:	cbz	r0, fe7a <__register_exitproc+0x92>
    fe44:	ldr.w	r3, [r5, #328]	; 0x148
    fe48:	movs	r7, #0
    fe4a:	stmia.w	r0, {r3, r7}
    fe4e:	str.w	r4, [r5, #328]	; 0x148
    fe52:	mov	r0, r7
    fe54:	movs	r3, #1
    fe56:	str.w	r7, [r4, #392]	; 0x188
    fe5a:	str.w	r7, [r4, #396]	; 0x18c
    fe5e:	cmp	r6, #0
    fe60:	beq.n	fe26 <__register_exitproc+0x3e>
    fe62:	b.n	fe08 <__register_exitproc+0x20>
    fe64:	ldr.w	r1, [r4, #396]	; 0x18c
    fe68:	orrs	r2, r1
    fe6a:	str.w	r2, [r4, #396]	; 0x18c
    fe6e:	b.n	fe26 <__register_exitproc+0x3e>
    fe70:	add.w	r4, r5, #332	; 0x14c
    fe74:	str.w	r4, [r5, #328]	; 0x148
    fe78:	b.n	fdfe <__register_exitproc+0x16>
    fe7a:	mov.w	r0, #4294967295
    fe7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe82:	nop
    fe84:	.word	0x000134d4
    fe88:	.word	0x0000b71d

0000fe8c <register_fini>:
    fe8c:	ldr	r3, [pc, #8]	; (fe98 <register_fini+0xc>)
    fe8e:	cbz	r3, fe96 <register_fini+0xa>
    fe90:	ldr	r0, [pc, #8]	; (fe9c <register_fini+0x10>)
    fe92:	b.w	fea0 <atexit>
    fe96:	bx	lr
    fe98:	.word	0x00000000
    fe9c:	.word	0x00010e0d

0000fea0 <atexit>:
    fea0:	movs	r3, #0
    fea2:	mov	r1, r0
    fea4:	mov	r2, r3
    fea6:	mov	r0, r3
    fea8:	b.w	fde8 <__register_exitproc>

0000feac <quorem>:
    feac:	ldr	r2, [r0, #16]
    feae:	ldr	r3, [r1, #16]
    feb0:	cmp	r3, r2
    feb2:	bgt.w	ffd0 <quorem+0x124>
    feb6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    feba:	add.w	r8, r3, #4294967295
    febe:	add.w	r7, r1, #20
    fec2:	add.w	fp, r0, #20
    fec6:	ldr.w	r2, [r7, r8, lsl #2]
    feca:	ldr.w	r3, [fp, r8, lsl #2]
    fece:	mov.w	r4, r8, lsl #2
    fed2:	sub	sp, #12
    fed4:	adds	r2, #1
    fed6:	udiv	r9, r3, r2
    feda:	add.w	r3, fp, r4
    fede:	str	r4, [sp, #0]
    fee0:	add.w	sl, r7, r4
    fee4:	str	r3, [sp, #4]
    fee6:	cmp.w	r9, #0
    feea:	beq.n	ff60 <quorem+0xb4>
    feec:	movs	r5, #0
    feee:	mov	ip, r7
    fef0:	mov	lr, fp
    fef2:	mov	r3, r5
    fef4:	ldr.w	r6, [ip], #4
    fef8:	ldr.w	r2, [lr]
    fefc:	uxth	r4, r6
    fefe:	mla	r5, r9, r4, r5
    ff02:	lsrs	r6, r6, #16
    ff04:	lsrs	r4, r5, #16
    ff06:	mla	r4, r9, r6, r4
    ff0a:	uxth	r5, r5
    ff0c:	subs	r3, r3, r5
    ff0e:	uxth	r6, r4
    ff10:	uxtah	r3, r3, r2
    ff14:	rsb	r6, r6, r2, lsr #16
    ff18:	add.w	r6, r6, r3, asr #16
    ff1c:	uxth	r3, r3
    ff1e:	orr.w	r3, r3, r6, lsl #16
    ff22:	cmp	sl, ip
    ff24:	str.w	r3, [lr], #4
    ff28:	mov.w	r5, r4, lsr #16
    ff2c:	mov.w	r3, r6, asr #16
    ff30:	bcs.n	fef4 <quorem+0x48>
    ff32:	ldr	r3, [sp, #0]
    ff34:	ldr.w	r3, [fp, r3]
    ff38:	cbnz	r3, ff60 <quorem+0xb4>
    ff3a:	ldr	r4, [sp, #4]
    ff3c:	subs	r3, r4, #4
    ff3e:	cmp	fp, r3
    ff40:	bcs.n	ff5c <quorem+0xb0>
    ff42:	ldr.w	r3, [r4, #-4]
    ff46:	cbnz	r3, ff5c <quorem+0xb0>
    ff48:	sub.w	r3, r4, #8
    ff4c:	b.n	ff54 <quorem+0xa8>
    ff4e:	ldr	r2, [r3, #0]
    ff50:	subs	r3, #4
    ff52:	cbnz	r2, ff5c <quorem+0xb0>
    ff54:	cmp	fp, r3
    ff56:	add.w	r8, r8, #4294967295
    ff5a:	bcc.n	ff4e <quorem+0xa2>
    ff5c:	str.w	r8, [r0, #16]
    ff60:	mov	r4, r0
    ff62:	bl	11d48 <__mcmp>
    ff66:	cmp	r0, #0
    ff68:	blt.n	ffc8 <quorem+0x11c>
    ff6a:	add.w	r9, r9, #1
    ff6e:	mov	r5, fp
    ff70:	movs	r3, #0
    ff72:	ldr.w	r1, [r7], #4
    ff76:	ldr	r0, [r5, #0]
    ff78:	uxth	r2, r1
    ff7a:	subs	r2, r3, r2
    ff7c:	lsrs	r1, r1, #16
    ff7e:	uxtah	r2, r2, r0
    ff82:	rsb	r3, r1, r0, lsr #16
    ff86:	add.w	r3, r3, r2, asr #16
    ff8a:	uxth	r1, r2
    ff8c:	orr.w	r1, r1, r3, lsl #16
    ff90:	cmp	sl, r7
    ff92:	str.w	r1, [r5], #4
    ff96:	mov.w	r3, r3, asr #16
    ff9a:	bcs.n	ff72 <quorem+0xc6>
    ff9c:	ldr.w	r2, [fp, r8, lsl #2]
    ffa0:	add.w	r3, fp, r8, lsl #2
    ffa4:	cbnz	r2, ffc8 <quorem+0x11c>
    ffa6:	subs	r2, r3, #4
    ffa8:	cmp	fp, r2
    ffaa:	bcs.n	ffc4 <quorem+0x118>
    ffac:	ldr.w	r2, [r3, #-4]
    ffb0:	cbnz	r2, ffc4 <quorem+0x118>
    ffb2:	subs	r3, #8
    ffb4:	b.n	ffbc <quorem+0x110>
    ffb6:	ldr	r2, [r3, #0]
    ffb8:	subs	r3, #4
    ffba:	cbnz	r2, ffc4 <quorem+0x118>
    ffbc:	cmp	fp, r3
    ffbe:	add.w	r8, r8, #4294967295
    ffc2:	bcc.n	ffb6 <quorem+0x10a>
    ffc4:	str.w	r8, [r4, #16]
    ffc8:	mov	r0, r9
    ffca:	add	sp, #12
    ffcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffd0:	movs	r0, #0
    ffd2:	bx	lr
    ffd4:			; <UNDEFINED> instruction: 0xffffffff

0000ffd8 <_dtoa_r>:
    ffd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffdc:	vmov	r6, r7, d0
    ffe0:	sub	sp, #108	; 0x6c
    ffe2:	ldr	r4, [r0, #64]	; 0x40
    ffe4:	ldr	r5, [sp, #144]	; 0x90
    ffe6:	str	r1, [sp, #0]
    ffe8:	mov	r9, r0
    ffea:	str	r2, [sp, #20]
    ffec:	str	r3, [sp, #12]
    ffee:	vmov	sl, s0
    fff2:	mov	fp, r7
    fff4:	cbz	r4, 1000c <_dtoa_r+0x34>
    fff6:	ldr	r2, [r0, #68]	; 0x44
    fff8:	str	r2, [r4, #4]
    fffa:	movs	r3, #1
    fffc:	lsls	r3, r2
    fffe:	str	r3, [r4, #8]
   10000:	mov	r1, r4
   10002:	bl	118ec <_Bfree>
   10006:	movs	r3, #0
   10008:	str.w	r3, [r9, #64]	; 0x40
   1000c:	cmp.w	fp, #0
   10010:	mov	r4, fp
   10012:	blt.n	1007e <_dtoa_r+0xa6>
   10014:	movs	r3, #0
   10016:	str	r3, [r5, #0]
   10018:	ldr	r3, [pc, #644]	; (102a0 <_dtoa_r+0x2c8>)
   1001a:	mov	r2, r3
   1001c:	ands	r3, r4
   1001e:	cmp	r3, r2
   10020:	beq.n	10050 <_dtoa_r+0x78>
   10022:	movs	r2, #0
   10024:	movs	r3, #0
   10026:	mov	r0, sl
   10028:	mov	r1, fp
   1002a:	bl	af00 <__aeabi_dcmpeq>
   1002e:	mov	r6, sl
   10030:	mov	r7, fp
   10032:	mov	r8, r0
   10034:	cbz	r0, 1008a <_dtoa_r+0xb2>
   10036:	ldr	r2, [sp, #12]
   10038:	movs	r3, #1
   1003a:	str	r3, [r2, #0]
   1003c:	ldr	r3, [sp, #148]	; 0x94
   1003e:	cmp	r3, #0
   10040:	beq.w	101c0 <_dtoa_r+0x1e8>
   10044:	ldr	r0, [pc, #604]	; (102a4 <_dtoa_r+0x2cc>)
   10046:	str	r0, [r3, #0]
   10048:	subs	r0, #1
   1004a:	add	sp, #108	; 0x6c
   1004c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10050:	ldr	r2, [sp, #12]
   10052:	movw	r3, #9999	; 0x270f
   10056:	str	r3, [r2, #0]
   10058:	cmp.w	sl, #0
   1005c:	beq.w	10194 <_dtoa_r+0x1bc>
   10060:	ldr	r0, [pc, #580]	; (102a8 <_dtoa_r+0x2d0>)
   10062:	ldr	r3, [sp, #148]	; 0x94
   10064:	cmp	r3, #0
   10066:	beq.n	1004a <_dtoa_r+0x72>
   10068:	ldrb	r3, [r0, #3]
   1006a:	cmp	r3, #0
   1006c:	beq.w	101c4 <_dtoa_r+0x1ec>
   10070:	add.w	r3, r0, #8
   10074:	ldr	r2, [sp, #148]	; 0x94
   10076:	str	r3, [r2, #0]
   10078:	add	sp, #108	; 0x6c
   1007a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1007e:	movs	r3, #1
   10080:	bic.w	r4, fp, #2147483648	; 0x80000000
   10084:	str	r3, [r5, #0]
   10086:	mov	fp, r4
   10088:	b.n	10018 <_dtoa_r+0x40>
   1008a:	add	r2, sp, #96	; 0x60
   1008c:	add	r1, sp, #100	; 0x64
   1008e:	vmov	d0, r6, r7
   10092:	mov	r0, r9
   10094:	bl	11fc4 <__d2b>
   10098:	lsrs	r5, r4, #20
   1009a:	str	r0, [sp, #40]	; 0x28
   1009c:	bne.w	101a6 <_dtoa_r+0x1ce>
   100a0:	ldr	r5, [sp, #96]	; 0x60
   100a2:	ldr	r6, [sp, #100]	; 0x64
   100a4:	add	r6, r5
   100a6:	addw	r3, r6, #1074	; 0x432
   100aa:	cmp	r3, #32
   100ac:	ble.w	105c0 <_dtoa_r+0x5e8>
   100b0:	rsb	r3, r3, #64	; 0x40
   100b4:	addw	r0, r6, #1042	; 0x412
   100b8:	lsls	r4, r3
   100ba:	lsr.w	r0, sl, r0
   100be:	orrs	r0, r4
   100c0:	bl	a944 <__aeabi_ui2d>
   100c4:	movs	r3, #1
   100c6:	subs	r4, r6, #1
   100c8:	sub.w	r1, r1, #32505856	; 0x1f00000
   100cc:	str	r3, [sp, #60]	; 0x3c
   100ce:	movs	r2, #0
   100d0:	ldr	r3, [pc, #472]	; (102ac <_dtoa_r+0x2d4>)
   100d2:	bl	a6c8 <__aeabi_dsub>
   100d6:	add	r3, pc, #432	; (adr r3, 10288 <_dtoa_r+0x2b0>)
   100d8:	ldrd	r2, r3, [r3]
   100dc:	bl	aa30 <__aeabi_dmul>
   100e0:	add	r3, pc, #428	; (adr r3, 10290 <_dtoa_r+0x2b8>)
   100e2:	ldrd	r2, r3, [r3]
   100e6:	bl	a6cc <__adddf3>
   100ea:	mov	r6, r0
   100ec:	mov	r0, r4
   100ee:	mov	r7, r1
   100f0:	bl	a964 <__aeabi_i2d>
   100f4:	add	r3, pc, #416	; (adr r3, 10298 <_dtoa_r+0x2c0>)
   100f6:	ldrd	r2, r3, [r3]
   100fa:	bl	aa30 <__aeabi_dmul>
   100fe:	mov	r2, r0
   10100:	mov	r3, r1
   10102:	mov	r0, r6
   10104:	mov	r1, r7
   10106:	bl	a6cc <__adddf3>
   1010a:	mov	r6, r0
   1010c:	mov	r7, r1
   1010e:	bl	af90 <__aeabi_d2iz>
   10112:	movs	r2, #0
   10114:	str	r0, [sp, #16]
   10116:	movs	r3, #0
   10118:	mov	r0, r6
   1011a:	mov	r1, r7
   1011c:	bl	af14 <__aeabi_dcmplt>
   10120:	cmp	r0, #0
   10122:	bne.w	10576 <_dtoa_r+0x59e>
   10126:	ldr	r6, [sp, #16]
   10128:	cmp	r6, #22
   1012a:	bhi.w	10570 <_dtoa_r+0x598>
   1012e:	ldr	r3, [pc, #384]	; (102b0 <_dtoa_r+0x2d8>)
   10130:	add.w	r3, r3, r6, lsl #3
   10134:	ldrd	r0, r1, [r3]
   10138:	mov	r2, sl
   1013a:	mov	r3, fp
   1013c:	bl	af50 <__aeabi_dcmpgt>
   10140:	cmp	r0, #0
   10142:	beq.w	105ca <_dtoa_r+0x5f2>
   10146:	subs	r3, r6, #1
   10148:	str	r3, [sp, #16]
   1014a:	movs	r3, #0
   1014c:	str	r3, [sp, #52]	; 0x34
   1014e:	subs	r5, r5, r4
   10150:	subs.w	r8, r5, #1
   10154:	bmi.w	105ac <_dtoa_r+0x5d4>
   10158:	movs	r3, #0
   1015a:	str	r3, [sp, #28]
   1015c:	ldr	r3, [sp, #16]
   1015e:	cmp	r3, #0
   10160:	blt.w	1059a <_dtoa_r+0x5c2>
   10164:	add	r8, r3
   10166:	str	r3, [sp, #48]	; 0x30
   10168:	movs	r3, #0
   1016a:	str	r3, [sp, #24]
   1016c:	ldr	r3, [sp, #0]
   1016e:	cmp	r3, #9
   10170:	bhi.n	101c8 <_dtoa_r+0x1f0>
   10172:	cmp	r3, #5
   10174:	ble.w	10e00 <_dtoa_r+0xe28>
   10178:	subs	r3, #4
   1017a:	str	r3, [sp, #0]
   1017c:	movs	r6, #0
   1017e:	ldr	r3, [sp, #0]
   10180:	subs	r3, #2
   10182:	cmp	r3, #3
   10184:	bhi.w	10dce <_dtoa_r+0xdf6>
   10188:	tbh	[pc, r3, lsl #1]
   1018c:	.word	0x0224032b
   10190:	.word	0x04500336
   10194:	ldr	r3, [pc, #272]	; (102a8 <_dtoa_r+0x2d0>)
   10196:	ldr	r2, [pc, #284]	; (102b4 <_dtoa_r+0x2dc>)
   10198:	ubfx	r0, r4, #0, #20
   1019c:	cmp	r0, #0
   1019e:	ite	ne
   101a0:	movne	r0, r3
   101a2:	moveq	r0, r2
   101a4:	b.n	10062 <_dtoa_r+0x8a>
   101a6:	ubfx	r3, fp, #0, #20
   101aa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   101ae:	subw	r4, r5, #1023	; 0x3ff
   101b2:	mov	r0, sl
   101b4:	str.w	r8, [sp, #60]	; 0x3c
   101b8:	orr.w	r1, r1, #3145728	; 0x300000
   101bc:	ldr	r5, [sp, #96]	; 0x60
   101be:	b.n	100ce <_dtoa_r+0xf6>
   101c0:	ldr	r0, [pc, #244]	; (102b8 <_dtoa_r+0x2e0>)
   101c2:	b.n	1004a <_dtoa_r+0x72>
   101c4:	adds	r3, r0, #3
   101c6:	b.n	10074 <_dtoa_r+0x9c>
   101c8:	movs	r1, #0
   101ca:	str.w	r1, [r9, #68]	; 0x44
   101ce:	mov	r0, r9
   101d0:	mov	r4, r1
   101d2:	str	r1, [sp, #0]
   101d4:	bl	118a0 <_Balloc>
   101d8:	mov.w	r3, #4294967295
   101dc:	str	r3, [sp, #32]
   101de:	str	r3, [sp, #56]	; 0x38
   101e0:	movs	r3, #1
   101e2:	str	r0, [sp, #36]	; 0x24
   101e4:	str.w	r0, [r9, #64]	; 0x40
   101e8:	str	r4, [sp, #20]
   101ea:	str	r3, [sp, #44]	; 0x2c
   101ec:	ldr	r3, [sp, #100]	; 0x64
   101ee:	cmp	r3, #0
   101f0:	blt.w	10394 <_dtoa_r+0x3bc>
   101f4:	ldr	r2, [sp, #16]
   101f6:	cmp	r2, #14
   101f8:	bgt.w	10394 <_dtoa_r+0x3bc>
   101fc:	ldr	r3, [pc, #176]	; (102b0 <_dtoa_r+0x2d8>)
   101fe:	add.w	r3, r3, r2, lsl #3
   10202:	vldr	d7, [r3]
   10206:	ldr	r3, [sp, #20]
   10208:	cmp	r3, #0
   1020a:	vstr	d7, [sp]
   1020e:	blt.w	1080e <_dtoa_r+0x836>
   10212:	mov	r6, sl
   10214:	mov	r7, fp
   10216:	ldrd	sl, fp, [sp]
   1021a:	mov	r0, r6
   1021c:	mov	r2, sl
   1021e:	mov	r3, fp
   10220:	mov	r1, r7
   10222:	bl	ac84 <__aeabi_ddiv>
   10226:	bl	af90 <__aeabi_d2iz>
   1022a:	mov	r4, r0
   1022c:	bl	a964 <__aeabi_i2d>
   10230:	mov	r2, sl
   10232:	mov	r3, fp
   10234:	bl	aa30 <__aeabi_dmul>
   10238:	mov	r3, r1
   1023a:	mov	r2, r0
   1023c:	mov	r1, r7
   1023e:	mov	r0, r6
   10240:	bl	a6c8 <__aeabi_dsub>
   10244:	ldr	r5, [sp, #36]	; 0x24
   10246:	add.w	r3, r4, #48	; 0x30
   1024a:	strb	r3, [r5, #0]
   1024c:	ldr	r3, [sp, #32]
   1024e:	cmp	r3, #1
   10250:	mov	r6, r0
   10252:	mov	r7, r1
   10254:	add.w	r5, r5, #1
   10258:	beq.n	1031e <_dtoa_r+0x346>
   1025a:	movs	r2, #0
   1025c:	ldr	r3, [pc, #92]	; (102bc <_dtoa_r+0x2e4>)
   1025e:	bl	aa30 <__aeabi_dmul>
   10262:	movs	r2, #0
   10264:	movs	r3, #0
   10266:	mov	r6, r0
   10268:	mov	r7, r1
   1026a:	bl	af00 <__aeabi_dcmpeq>
   1026e:	cmp	r0, #0
   10270:	bne.n	1036e <_dtoa_r+0x396>
   10272:	str.w	r9, [sp, #20]
   10276:	ldr.w	sl, [sp, #32]
   1027a:	ldr.w	fp, [sp, #36]	; 0x24
   1027e:	ldrd	r8, r9, [sp]
   10282:	b.n	102d6 <_dtoa_r+0x2fe>
   10284:	nop.w
   10288:	.word	0x636f4361
   1028c:	.word	0x3fd287a7
   10290:	.word	0x8b60c8b3
   10294:	.word	0x3fc68a28
   10298:	.word	0x509f79fb
   1029c:	.word	0x3fd34413
   102a0:	.word	0x7ff00000
   102a4:	.word	0x00013599
   102a8:	.word	0x000136e8
   102ac:	.word	0x3ff80000
   102b0:	.word	0x000137f0
   102b4:	.word	0x000136dc
   102b8:	.word	0x00013598
   102bc:	.word	0x40240000
   102c0:	bl	aa30 <__aeabi_dmul>
   102c4:	movs	r2, #0
   102c6:	movs	r3, #0
   102c8:	mov	r6, r0
   102ca:	mov	r7, r1
   102cc:	bl	af00 <__aeabi_dcmpeq>
   102d0:	cmp	r0, #0
   102d2:	bne.w	10a32 <_dtoa_r+0xa5a>
   102d6:	mov	r2, r8
   102d8:	mov	r3, r9
   102da:	mov	r0, r6
   102dc:	mov	r1, r7
   102de:	bl	ac84 <__aeabi_ddiv>
   102e2:	bl	af90 <__aeabi_d2iz>
   102e6:	mov	r4, r0
   102e8:	bl	a964 <__aeabi_i2d>
   102ec:	mov	r2, r8
   102ee:	mov	r3, r9
   102f0:	bl	aa30 <__aeabi_dmul>
   102f4:	mov	r2, r0
   102f6:	mov	r3, r1
   102f8:	mov	r0, r6
   102fa:	mov	r1, r7
   102fc:	bl	a6c8 <__aeabi_dsub>
   10300:	add.w	lr, r4, #48	; 0x30
   10304:	strb.w	lr, [r5], #1
   10308:	rsb	lr, fp, r5
   1030c:	cmp	lr, sl
   1030e:	mov	r6, r0
   10310:	mov	r7, r1
   10312:	mov.w	r2, #0
   10316:	ldr	r3, [pc, #696]	; (105d0 <_dtoa_r+0x5f8>)
   10318:	bne.n	102c0 <_dtoa_r+0x2e8>
   1031a:	ldr.w	r9, [sp, #20]
   1031e:	mov	r2, r6
   10320:	mov	r3, r7
   10322:	mov	r0, r6
   10324:	mov	r1, r7
   10326:	bl	a6cc <__adddf3>
   1032a:	mov	r6, r0
   1032c:	mov	r7, r1
   1032e:	mov	r2, r0
   10330:	mov	r3, r1
   10332:	ldrd	r0, r1, [sp]
   10336:	bl	af14 <__aeabi_dcmplt>
   1033a:	cbnz	r0, 1034e <_dtoa_r+0x376>
   1033c:	mov	r2, r6
   1033e:	mov	r3, r7
   10340:	ldrd	r0, r1, [sp]
   10344:	bl	af00 <__aeabi_dcmpeq>
   10348:	cbz	r0, 1036e <_dtoa_r+0x396>
   1034a:	lsls	r3, r4, #31
   1034c:	bpl.n	1036e <_dtoa_r+0x396>
   1034e:	ldrb.w	r4, [r5, #-1]
   10352:	ldr	r2, [sp, #36]	; 0x24
   10354:	subs	r3, r5, #1
   10356:	b.n	10362 <_dtoa_r+0x38a>
   10358:	cmp	r2, r3
   1035a:	beq.w	10b56 <_dtoa_r+0xb7e>
   1035e:	ldrb.w	r4, [r3, #-1]!
   10362:	cmp	r4, #57	; 0x39
   10364:	add.w	r5, r3, #1
   10368:	beq.n	10358 <_dtoa_r+0x380>
   1036a:	adds	r4, #1
   1036c:	strb	r4, [r3, #0]
   1036e:	ldr	r1, [sp, #40]	; 0x28
   10370:	mov	r0, r9
   10372:	bl	118ec <_Bfree>
   10376:	movs	r2, #0
   10378:	ldr	r3, [sp, #16]
   1037a:	strb	r2, [r5, #0]
   1037c:	ldr	r2, [sp, #12]
   1037e:	adds	r3, #1
   10380:	str	r3, [r2, #0]
   10382:	ldr	r3, [sp, #148]	; 0x94
   10384:	cmp	r3, #0
   10386:	beq.w	10ac0 <_dtoa_r+0xae8>
   1038a:	ldr	r0, [sp, #36]	; 0x24
   1038c:	str	r5, [r3, #0]
   1038e:	add	sp, #108	; 0x6c
   10390:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10394:	ldr	r2, [sp, #44]	; 0x2c
   10396:	cmp	r2, #0
   10398:	beq.w	105b8 <_dtoa_r+0x5e0>
   1039c:	ldr	r2, [sp, #0]
   1039e:	cmp	r2, #1
   103a0:	ble.w	10852 <_dtoa_r+0x87a>
   103a4:	ldr	r3, [sp, #32]
   103a6:	ldr	r2, [sp, #24]
   103a8:	subs	r7, r3, #1
   103aa:	cmp	r2, r7
   103ac:	blt.w	10ac6 <_dtoa_r+0xaee>
   103b0:	subs	r7, r2, r7
   103b2:	ldr	r3, [sp, #32]
   103b4:	cmp	r3, #0
   103b6:	blt.w	10cba <_dtoa_r+0xce2>
   103ba:	ldr	r5, [sp, #28]
   103bc:	ldr	r3, [sp, #32]
   103be:	ldr	r2, [sp, #28]
   103c0:	movs	r1, #1
   103c2:	add	r2, r3
   103c4:	mov	r0, r9
   103c6:	str	r2, [sp, #28]
   103c8:	add	r8, r3
   103ca:	bl	11ab4 <__i2b>
   103ce:	mov	r6, r0
   103d0:	cbz	r5, 103ec <_dtoa_r+0x414>
   103d2:	cmp.w	r8, #0
   103d6:	ble.n	103ec <_dtoa_r+0x414>
   103d8:	cmp	r5, r8
   103da:	ldr	r2, [sp, #28]
   103dc:	mov	r3, r5
   103de:	it	ge
   103e0:	movge	r3, r8
   103e2:	subs	r2, r2, r3
   103e4:	str	r2, [sp, #28]
   103e6:	subs	r5, r5, r3
   103e8:	rsb	r8, r3, r8
   103ec:	ldr	r3, [sp, #24]
   103ee:	cmp	r3, #0
   103f0:	ble.w	109de <_dtoa_r+0xa06>
   103f4:	ldr	r2, [sp, #44]	; 0x2c
   103f6:	cmp	r2, #0
   103f8:	beq.w	10800 <_dtoa_r+0x828>
   103fc:	cmp	r7, #0
   103fe:	beq.w	10800 <_dtoa_r+0x828>
   10402:	mov	r1, r6
   10404:	mov	r2, r7
   10406:	mov	r0, r9
   10408:	bl	11bf8 <__pow5mult>
   1040c:	ldr	r2, [sp, #40]	; 0x28
   1040e:	mov	r1, r0
   10410:	mov	r6, r0
   10412:	mov	r0, r9
   10414:	bl	11ac8 <__multiply>
   10418:	ldr	r1, [sp, #40]	; 0x28
   1041a:	mov	r4, r0
   1041c:	mov	r0, r9
   1041e:	bl	118ec <_Bfree>
   10422:	ldr	r3, [sp, #24]
   10424:	subs	r3, r3, r7
   10426:	str	r3, [sp, #24]
   10428:	bne.w	107fe <_dtoa_r+0x826>
   1042c:	movs	r1, #1
   1042e:	mov	r0, r9
   10430:	bl	11ab4 <__i2b>
   10434:	ldr	r3, [sp, #48]	; 0x30
   10436:	str	r0, [sp, #24]
   10438:	cmp	r3, #0
   1043a:	beq.w	10868 <_dtoa_r+0x890>
   1043e:	mov	r1, r0
   10440:	mov	r2, r3
   10442:	mov	r0, r9
   10444:	bl	11bf8 <__pow5mult>
   10448:	ldr	r3, [sp, #0]
   1044a:	str	r0, [sp, #24]
   1044c:	cmp	r3, #1
   1044e:	ble.w	10a38 <_dtoa_r+0xa60>
   10452:	movs	r7, #0
   10454:	ldr	r2, [sp, #24]
   10456:	ldr	r3, [r2, #16]
   10458:	add.w	r3, r2, r3, lsl #2
   1045c:	ldr	r0, [r3, #16]
   1045e:	bl	11a18 <__hi0bits>
   10462:	rsb	r0, r0, #32
   10466:	add	r0, r8
   10468:	ands.w	r0, r0, #31
   1046c:	beq.w	10864 <_dtoa_r+0x88c>
   10470:	rsb	r3, r0, #32
   10474:	cmp	r3, #4
   10476:	ble.w	10df4 <_dtoa_r+0xe1c>
   1047a:	rsb	r0, r0, #28
   1047e:	ldr	r3, [sp, #28]
   10480:	add	r3, r0
   10482:	str	r3, [sp, #28]
   10484:	add	r5, r0
   10486:	add	r8, r0
   10488:	ldr	r3, [sp, #28]
   1048a:	cmp	r3, #0
   1048c:	ble.n	1049a <_dtoa_r+0x4c2>
   1048e:	mov	r1, r4
   10490:	mov	r2, r3
   10492:	mov	r0, r9
   10494:	bl	11c98 <__lshift>
   10498:	mov	r4, r0
   1049a:	cmp.w	r8, #0
   1049e:	ble.n	104ac <_dtoa_r+0x4d4>
   104a0:	mov	r2, r8
   104a2:	ldr	r1, [sp, #24]
   104a4:	mov	r0, r9
   104a6:	bl	11c98 <__lshift>
   104aa:	str	r0, [sp, #24]
   104ac:	ldr	r3, [sp, #52]	; 0x34
   104ae:	cmp	r3, #0
   104b0:	bne.w	109a8 <_dtoa_r+0x9d0>
   104b4:	ldr	r3, [sp, #32]
   104b6:	cmp	r3, #0
   104b8:	ble.w	109e2 <_dtoa_r+0xa0a>
   104bc:	ldr	r3, [sp, #44]	; 0x2c
   104be:	cmp	r3, #0
   104c0:	bne.w	108ac <_dtoa_r+0x8d4>
   104c4:	ldr.w	fp, [sp, #36]	; 0x24
   104c8:	ldr	r7, [sp, #32]
   104ca:	ldr.w	r8, [sp, #24]
   104ce:	mov	r5, fp
   104d0:	b.n	104d8 <_dtoa_r+0x500>
   104d2:	bl	11900 <__multadd>
   104d6:	mov	r4, r0
   104d8:	mov	r1, r8
   104da:	mov	r0, r4
   104dc:	bl	feac <quorem>
   104e0:	add.w	sl, r0, #48	; 0x30
   104e4:	strb.w	sl, [r5], #1
   104e8:	rsb	r3, fp, r5
   104ec:	cmp	r3, r7
   104ee:	mov.w	r2, #10
   104f2:	mov.w	r3, #0
   104f6:	mov	r1, r4
   104f8:	mov	r0, r9
   104fa:	blt.n	104d2 <_dtoa_r+0x4fa>
   104fc:	ldr	r3, [sp, #36]	; 0x24
   104fe:	ldr	r2, [sp, #32]
   10500:	cmp	r2, #1
   10502:	ite	ge
   10504:	addge	r3, r3, r2
   10506:	addlt	r3, #1
   10508:	mov	r5, r3
   1050a:	mov.w	fp, #0
   1050e:	mov	r1, r4
   10510:	movs	r2, #1
   10512:	mov	r0, r9
   10514:	bl	11c98 <__lshift>
   10518:	ldr	r1, [sp, #24]
   1051a:	str	r0, [sp, #40]	; 0x28
   1051c:	bl	11d48 <__mcmp>
   10520:	cmp	r0, #0
   10522:	ble.w	10b30 <_dtoa_r+0xb58>
   10526:	ldrb.w	r2, [r5, #-1]
   1052a:	ldr	r1, [sp, #36]	; 0x24
   1052c:	subs	r3, r5, #1
   1052e:	b.n	1053a <_dtoa_r+0x562>
   10530:	cmp	r3, r1
   10532:	beq.w	10a1e <_dtoa_r+0xa46>
   10536:	ldrb.w	r2, [r3, #-1]!
   1053a:	cmp	r2, #57	; 0x39
   1053c:	add.w	r5, r3, #1
   10540:	beq.n	10530 <_dtoa_r+0x558>
   10542:	adds	r2, #1
   10544:	strb	r2, [r3, #0]
   10546:	ldr	r1, [sp, #24]
   10548:	mov	r0, r9
   1054a:	bl	118ec <_Bfree>
   1054e:	cmp	r6, #0
   10550:	beq.w	1036e <_dtoa_r+0x396>
   10554:	cmp.w	fp, #0
   10558:	beq.n	10566 <_dtoa_r+0x58e>
   1055a:	cmp	fp, r6
   1055c:	beq.n	10566 <_dtoa_r+0x58e>
   1055e:	mov	r1, fp
   10560:	mov	r0, r9
   10562:	bl	118ec <_Bfree>
   10566:	mov	r1, r6
   10568:	mov	r0, r9
   1056a:	bl	118ec <_Bfree>
   1056e:	b.n	1036e <_dtoa_r+0x396>
   10570:	movs	r3, #1
   10572:	str	r3, [sp, #52]	; 0x34
   10574:	b.n	1014e <_dtoa_r+0x176>
   10576:	ldr.w	r8, [sp, #16]
   1057a:	mov	r0, r8
   1057c:	bl	a964 <__aeabi_i2d>
   10580:	mov	r2, r0
   10582:	mov	r3, r1
   10584:	mov	r0, r6
   10586:	mov	r1, r7
   10588:	bl	af00 <__aeabi_dcmpeq>
   1058c:	cmp	r0, #0
   1058e:	bne.w	10126 <_dtoa_r+0x14e>
   10592:	add.w	r3, r8, #4294967295
   10596:	str	r3, [sp, #16]
   10598:	b.n	10126 <_dtoa_r+0x14e>
   1059a:	ldr	r2, [sp, #28]
   1059c:	ldr	r3, [sp, #16]
   1059e:	subs	r2, r2, r3
   105a0:	negs	r3, r3
   105a2:	str	r3, [sp, #24]
   105a4:	movs	r3, #0
   105a6:	str	r2, [sp, #28]
   105a8:	str	r3, [sp, #48]	; 0x30
   105aa:	b.n	1016c <_dtoa_r+0x194>
   105ac:	rsb	r3, r8, #0
   105b0:	str	r3, [sp, #28]
   105b2:	mov.w	r8, #0
   105b6:	b.n	1015c <_dtoa_r+0x184>
   105b8:	ldr	r7, [sp, #24]
   105ba:	ldr	r5, [sp, #28]
   105bc:	ldr	r6, [sp, #44]	; 0x2c
   105be:	b.n	103d0 <_dtoa_r+0x3f8>
   105c0:	rsb	r4, r3, #32
   105c4:	lsl.w	r0, sl, r4
   105c8:	b.n	100c0 <_dtoa_r+0xe8>
   105ca:	str	r0, [sp, #52]	; 0x34
   105cc:	b.n	1014e <_dtoa_r+0x176>
   105ce:	nop
   105d0:	.word	0x40240000
   105d4:	movs	r3, #0
   105d6:	str	r3, [sp, #44]	; 0x2c
   105d8:	ldr	r3, [sp, #16]
   105da:	ldr	r2, [sp, #20]
   105dc:	add	r3, r2
   105de:	str	r3, [sp, #56]	; 0x38
   105e0:	adds	r3, #1
   105e2:	cmp	r3, #0
   105e4:	str	r3, [sp, #32]
   105e6:	ble.w	10ae4 <_dtoa_r+0xb0c>
   105ea:	ldr	r4, [sp, #32]
   105ec:	mov	r5, r4
   105ee:	movs	r1, #0
   105f0:	cmp	r5, #23
   105f2:	str.w	r1, [r9, #68]	; 0x44
   105f6:	bls.n	10610 <_dtoa_r+0x638>
   105f8:	movs	r2, #1
   105fa:	movs	r3, #4
   105fc:	lsls	r3, r3, #1
   105fe:	add.w	r0, r3, #20
   10602:	cmp	r0, r5
   10604:	mov	r1, r2
   10606:	add.w	r2, r2, #1
   1060a:	bls.n	105fc <_dtoa_r+0x624>
   1060c:	str.w	r1, [r9, #68]	; 0x44
   10610:	mov	r0, r9
   10612:	bl	118a0 <_Balloc>
   10616:	cmp	r4, #14
   10618:	str	r0, [sp, #36]	; 0x24
   1061a:	str.w	r0, [r9, #64]	; 0x40
   1061e:	bhi.w	101ec <_dtoa_r+0x214>
   10622:	cmp	r6, #0
   10624:	beq.w	101ec <_dtoa_r+0x214>
   10628:	ldr	r1, [sp, #16]
   1062a:	cmp	r1, #0
   1062c:	strd	sl, fp, [sp, #64]	; 0x40
   10630:	ble.w	10b68 <_dtoa_r+0xb90>
   10634:	ldr	r3, [pc, #576]	; (10878 <_dtoa_r+0x8a0>)
   10636:	and.w	r2, r1, #15
   1063a:	asrs	r6, r1, #4
   1063c:	add.w	r3, r3, r2, lsl #3
   10640:	lsls	r0, r6, #27
   10642:	ldrd	r4, r5, [r3]
   10646:	bpl.w	10ad6 <_dtoa_r+0xafe>
   1064a:	ldr	r3, [pc, #560]	; (1087c <_dtoa_r+0x8a4>)
   1064c:	mov	r0, sl
   1064e:	mov	r1, fp
   10650:	ldrd	r2, r3, [r3, #32]
   10654:	bl	ac84 <__aeabi_ddiv>
   10658:	strd	r0, r1, [sp, #72]	; 0x48
   1065c:	and.w	r6, r6, #15
   10660:	mov.w	sl, #3
   10664:	cbz	r6, 10688 <_dtoa_r+0x6b0>
   10666:	ldr	r7, [pc, #532]	; (1087c <_dtoa_r+0x8a4>)
   10668:	lsls	r1, r6, #31
   1066a:	bpl.n	10680 <_dtoa_r+0x6a8>
   1066c:	mov	r0, r4
   1066e:	mov	r1, r5
   10670:	ldrd	r2, r3, [r7]
   10674:	bl	aa30 <__aeabi_dmul>
   10678:	add.w	sl, sl, #1
   1067c:	mov	r4, r0
   1067e:	mov	r5, r1
   10680:	asrs	r6, r6, #1
   10682:	add.w	r7, r7, #8
   10686:	bne.n	10668 <_dtoa_r+0x690>
   10688:	mov	r2, r4
   1068a:	mov	r3, r5
   1068c:	ldrd	r0, r1, [sp, #72]	; 0x48
   10690:	bl	ac84 <__aeabi_ddiv>
   10694:	mov	r6, r0
   10696:	mov	r7, r1
   10698:	ldr	r3, [sp, #52]	; 0x34
   1069a:	cbz	r3, 106ae <_dtoa_r+0x6d6>
   1069c:	movs	r2, #0
   1069e:	ldr	r3, [pc, #480]	; (10880 <_dtoa_r+0x8a8>)
   106a0:	mov	r0, r6
   106a2:	mov	r1, r7
   106a4:	bl	af14 <__aeabi_dcmplt>
   106a8:	cmp	r0, #0
   106aa:	bne.w	10ce2 <_dtoa_r+0xd0a>
   106ae:	mov	r0, sl
   106b0:	bl	a964 <__aeabi_i2d>
   106b4:	mov	r2, r6
   106b6:	mov	r3, r7
   106b8:	bl	aa30 <__aeabi_dmul>
   106bc:	ldr	r3, [pc, #452]	; (10884 <_dtoa_r+0x8ac>)
   106be:	movs	r2, #0
   106c0:	bl	a6cc <__adddf3>
   106c4:	ldr	r3, [sp, #32]
   106c6:	mov	r4, r0
   106c8:	sub.w	r5, r1, #54525952	; 0x3400000
   106cc:	cmp	r3, #0
   106ce:	beq.w	10a88 <_dtoa_r+0xab0>
   106d2:	ldr	r3, [sp, #16]
   106d4:	str	r3, [sp, #88]	; 0x58
   106d6:	ldr	r3, [sp, #32]
   106d8:	str	r3, [sp, #72]	; 0x48
   106da:	ldr	r3, [sp, #44]	; 0x2c
   106dc:	cmp	r3, #0
   106de:	beq.w	10c0a <_dtoa_r+0xc32>
   106e2:	ldr	r2, [sp, #72]	; 0x48
   106e4:	ldr	r3, [pc, #400]	; (10878 <_dtoa_r+0x8a0>)
   106e6:	ldr	r1, [pc, #416]	; (10888 <_dtoa_r+0x8b0>)
   106e8:	add.w	r3, r3, r2, lsl #3
   106ec:	ldrd	r2, r3, [r3, #-8]
   106f0:	movs	r0, #0
   106f2:	bl	ac84 <__aeabi_ddiv>
   106f6:	mov	r2, r4
   106f8:	mov	r3, r5
   106fa:	bl	a6c8 <__aeabi_dsub>
   106fe:	mov	sl, r0
   10700:	mov	fp, r1
   10702:	mov	r0, r6
   10704:	mov	r1, r7
   10706:	bl	af90 <__aeabi_d2iz>
   1070a:	mov	r4, r0
   1070c:	bl	a964 <__aeabi_i2d>
   10710:	mov	r2, r0
   10712:	mov	r3, r1
   10714:	mov	r0, r6
   10716:	mov	r1, r7
   10718:	bl	a6c8 <__aeabi_dsub>
   1071c:	adds	r4, #48	; 0x30
   1071e:	ldr	r5, [sp, #36]	; 0x24
   10720:	uxtb	r4, r4
   10722:	mov	r6, r0
   10724:	mov	r7, r1
   10726:	strb	r4, [r5, #0]
   10728:	mov	r2, r0
   1072a:	mov	r3, r1
   1072c:	mov	r0, sl
   1072e:	mov	r1, fp
   10730:	adds	r5, #1
   10732:	bl	af50 <__aeabi_dcmpgt>
   10736:	cmp	r0, #0
   10738:	bne.n	107dc <_dtoa_r+0x804>
   1073a:	mov	r2, r6
   1073c:	mov	r3, r7
   1073e:	movs	r0, #0
   10740:	ldr	r1, [pc, #316]	; (10880 <_dtoa_r+0x8a8>)
   10742:	bl	a6c8 <__aeabi_dsub>
   10746:	mov	r2, r0
   10748:	mov	r3, r1
   1074a:	mov	r0, sl
   1074c:	mov	r1, fp
   1074e:	bl	af50 <__aeabi_dcmpgt>
   10752:	cmp	r0, #0
   10754:	bne.w	10d68 <_dtoa_r+0xd90>
   10758:	ldr	r2, [sp, #72]	; 0x48
   1075a:	cmp	r2, #1
   1075c:	ble.w	10b4e <_dtoa_r+0xb76>
   10760:	ldr	r3, [sp, #72]	; 0x48
   10762:	ldr	r2, [sp, #36]	; 0x24
   10764:	str.w	r8, [sp, #72]	; 0x48
   10768:	add	r3, r2
   1076a:	mov	r8, r3
   1076c:	b.n	1078a <_dtoa_r+0x7b2>
   1076e:	movs	r0, #0
   10770:	ldr	r1, [pc, #268]	; (10880 <_dtoa_r+0x8a8>)
   10772:	bl	a6c8 <__aeabi_dsub>
   10776:	mov	r2, sl
   10778:	mov	r3, fp
   1077a:	bl	af14 <__aeabi_dcmplt>
   1077e:	cmp	r0, #0
   10780:	bne.w	10d68 <_dtoa_r+0xd90>
   10784:	cmp	r5, r8
   10786:	beq.w	10b4a <_dtoa_r+0xb72>
   1078a:	mov	r0, sl
   1078c:	mov	r1, fp
   1078e:	movs	r2, #0
   10790:	ldr	r3, [pc, #248]	; (1088c <_dtoa_r+0x8b4>)
   10792:	bl	aa30 <__aeabi_dmul>
   10796:	movs	r2, #0
   10798:	ldr	r3, [pc, #240]	; (1088c <_dtoa_r+0x8b4>)
   1079a:	mov	sl, r0
   1079c:	mov	fp, r1
   1079e:	mov	r0, r6
   107a0:	mov	r1, r7
   107a2:	bl	aa30 <__aeabi_dmul>
   107a6:	mov	r7, r1
   107a8:	mov	r6, r0
   107aa:	bl	af90 <__aeabi_d2iz>
   107ae:	mov	r4, r0
   107b0:	bl	a964 <__aeabi_i2d>
   107b4:	mov	r2, r0
   107b6:	mov	r3, r1
   107b8:	mov	r0, r6
   107ba:	mov	r1, r7
   107bc:	bl	a6c8 <__aeabi_dsub>
   107c0:	adds	r4, #48	; 0x30
   107c2:	uxtb	r4, r4
   107c4:	mov	r2, sl
   107c6:	mov	r3, fp
   107c8:	strb.w	r4, [r5], #1
   107cc:	mov	r6, r0
   107ce:	mov	r7, r1
   107d0:	bl	af14 <__aeabi_dcmplt>
   107d4:	mov	r2, r6
   107d6:	mov	r3, r7
   107d8:	cmp	r0, #0
   107da:	beq.n	1076e <_dtoa_r+0x796>
   107dc:	ldr	r3, [sp, #88]	; 0x58
   107de:	str	r3, [sp, #16]
   107e0:	b.n	1036e <_dtoa_r+0x396>
   107e2:	movs	r3, #0
   107e4:	str	r3, [sp, #44]	; 0x2c
   107e6:	ldr	r3, [sp, #20]
   107e8:	cmp	r3, #0
   107ea:	ble.w	10aee <_dtoa_r+0xb16>
   107ee:	mov	r5, r3
   107f0:	mov	r4, r3
   107f2:	str	r3, [sp, #56]	; 0x38
   107f4:	str	r3, [sp, #32]
   107f6:	b.n	105ee <_dtoa_r+0x616>
   107f8:	movs	r3, #1
   107fa:	str	r3, [sp, #44]	; 0x2c
   107fc:	b.n	107e6 <_dtoa_r+0x80e>
   107fe:	str	r4, [sp, #40]	; 0x28
   10800:	ldr	r2, [sp, #24]
   10802:	ldr	r1, [sp, #40]	; 0x28
   10804:	mov	r0, r9
   10806:	bl	11bf8 <__pow5mult>
   1080a:	mov	r4, r0
   1080c:	b.n	1042c <_dtoa_r+0x454>
   1080e:	ldr	r3, [sp, #32]
   10810:	cmp	r3, #0
   10812:	bgt.w	10212 <_dtoa_r+0x23a>
   10816:	bne.w	10ab8 <_dtoa_r+0xae0>
   1081a:	movs	r2, #0
   1081c:	ldr	r3, [pc, #112]	; (10890 <_dtoa_r+0x8b8>)
   1081e:	ldrd	r0, r1, [sp]
   10822:	bl	aa30 <__aeabi_dmul>
   10826:	mov	r3, fp
   10828:	mov	r2, sl
   1082a:	bl	af3c <__aeabi_dcmpge>
   1082e:	ldr	r3, [sp, #32]
   10830:	str	r3, [sp, #24]
   10832:	mov	r6, r3
   10834:	cmp	r0, #0
   10836:	beq.w	10a0e <_dtoa_r+0xa36>
   1083a:	ldr	r3, [sp, #20]
   1083c:	ldr	r5, [sp, #36]	; 0x24
   1083e:	mvns	r3, r3
   10840:	str	r3, [sp, #16]
   10842:	ldr	r1, [sp, #24]
   10844:	mov	r0, r9
   10846:	bl	118ec <_Bfree>
   1084a:	cmp	r6, #0
   1084c:	beq.w	1036e <_dtoa_r+0x396>
   10850:	b.n	10566 <_dtoa_r+0x58e>
   10852:	ldr	r2, [sp, #60]	; 0x3c
   10854:	cmp	r2, #0
   10856:	beq.w	10cca <_dtoa_r+0xcf2>
   1085a:	addw	r3, r3, #1075	; 0x433
   1085e:	ldr	r7, [sp, #24]
   10860:	ldr	r5, [sp, #28]
   10862:	b.n	103be <_dtoa_r+0x3e6>
   10864:	movs	r0, #28
   10866:	b.n	1047e <_dtoa_r+0x4a6>
   10868:	ldr	r3, [sp, #0]
   1086a:	cmp	r3, #1
   1086c:	ble.w	10d70 <_dtoa_r+0xd98>
   10870:	ldr	r7, [sp, #48]	; 0x30
   10872:	movs	r0, #1
   10874:	b.n	10466 <_dtoa_r+0x48e>
   10876:	nop
   10878:	.word	0x000137f0
   1087c:	.word	0x000138b8
   10880:	.word	0x3ff00000
   10884:	.word	0x401c0000
   10888:	.word	0x3fe00000
   1088c:	.word	0x40240000
   10890:	.word	0x40140000
   10894:	mov	r1, r6
   10896:	movs	r3, #0
   10898:	movs	r2, #10
   1089a:	mov	r0, r9
   1089c:	bl	11900 <__multadd>
   108a0:	ldr	r3, [sp, #56]	; 0x38
   108a2:	cmp	r3, #0
   108a4:	mov	r6, r0
   108a6:	ble.w	10dc4 <_dtoa_r+0xdec>
   108aa:	str	r3, [sp, #32]
   108ac:	cmp	r5, #0
   108ae:	ble.n	108bc <_dtoa_r+0x8e4>
   108b0:	mov	r1, r6
   108b2:	mov	r2, r5
   108b4:	mov	r0, r9
   108b6:	bl	11c98 <__lshift>
   108ba:	mov	r6, r0
   108bc:	cmp	r7, #0
   108be:	bne.w	10bba <_dtoa_r+0xbe2>
   108c2:	mov	r8, r6
   108c4:	ldr	r3, [sp, #32]
   108c6:	ldr	r2, [sp, #36]	; 0x24
   108c8:	subs	r3, #1
   108ca:	adds	r3, r2, r3
   108cc:	str	r3, [sp, #32]
   108ce:	and.w	r3, sl, #1
   108d2:	str	r3, [sp, #40]	; 0x28
   108d4:	mov	r7, r2
   108d6:	ldr.w	fp, [sp, #24]
   108da:	mov	r0, r4
   108dc:	mov	r1, fp
   108de:	bl	feac <quorem>
   108e2:	mov	r1, r6
   108e4:	mov	r5, r0
   108e6:	mov	r0, r4
   108e8:	bl	11d48 <__mcmp>
   108ec:	mov	r2, r8
   108ee:	mov	r1, fp
   108f0:	mov	sl, r0
   108f2:	mov	r0, r9
   108f4:	bl	11d8c <__mdiff>
   108f8:	ldr	r2, [r0, #12]
   108fa:	mov	fp, r0
   108fc:	add.w	r3, r5, #48	; 0x30
   10900:	cmp	r2, #0
   10902:	bne.n	10998 <_dtoa_r+0x9c0>
   10904:	mov	r1, r0
   10906:	mov	r0, r4
   10908:	str	r3, [sp, #28]
   1090a:	bl	11d48 <__mcmp>
   1090e:	mov	r1, fp
   10910:	str	r0, [sp, #20]
   10912:	mov	r0, r9
   10914:	bl	118ec <_Bfree>
   10918:	ldr	r2, [sp, #20]
   1091a:	ldr	r3, [sp, #28]
   1091c:	cbnz	r2, 1092a <_dtoa_r+0x952>
   1091e:	ldr	r1, [sp, #0]
   10920:	cbnz	r1, 1092a <_dtoa_r+0x952>
   10922:	ldr	r1, [sp, #40]	; 0x28
   10924:	cmp	r1, #0
   10926:	beq.w	10d94 <_dtoa_r+0xdbc>
   1092a:	cmp.w	sl, #0
   1092e:	blt.w	10af8 <_dtoa_r+0xb20>
   10932:	bne.n	10940 <_dtoa_r+0x968>
   10934:	ldr	r1, [sp, #0]
   10936:	cbnz	r1, 10940 <_dtoa_r+0x968>
   10938:	ldr	r1, [sp, #40]	; 0x28
   1093a:	cmp	r1, #0
   1093c:	beq.w	10af8 <_dtoa_r+0xb20>
   10940:	cmp	r2, #0
   10942:	bgt.w	10be2 <_dtoa_r+0xc0a>
   10946:	ldr	r2, [sp, #32]
   10948:	strb	r3, [r7, #0]
   1094a:	add.w	sl, r7, #1
   1094e:	cmp	r7, r2
   10950:	mov	r5, sl
   10952:	beq.w	10bfa <_dtoa_r+0xc22>
   10956:	mov	r1, r4
   10958:	movs	r3, #0
   1095a:	movs	r2, #10
   1095c:	mov	r0, r9
   1095e:	bl	11900 <__multadd>
   10962:	cmp	r6, r8
   10964:	mov	r4, r0
   10966:	mov	r1, r6
   10968:	mov.w	r3, #0
   1096c:	mov.w	r2, #10
   10970:	mov	r0, r9
   10972:	beq.n	1098c <_dtoa_r+0x9b4>
   10974:	bl	11900 <__multadd>
   10978:	mov	r1, r8
   1097a:	mov	r6, r0
   1097c:	movs	r3, #0
   1097e:	movs	r2, #10
   10980:	mov	r0, r9
   10982:	bl	11900 <__multadd>
   10986:	mov	r7, sl
   10988:	mov	r8, r0
   1098a:	b.n	108d6 <_dtoa_r+0x8fe>
   1098c:	bl	11900 <__multadd>
   10990:	mov	r7, sl
   10992:	mov	r6, r0
   10994:	mov	r8, r0
   10996:	b.n	108d6 <_dtoa_r+0x8fe>
   10998:	mov	r1, r0
   1099a:	mov	r0, r9
   1099c:	str	r3, [sp, #20]
   1099e:	bl	118ec <_Bfree>
   109a2:	movs	r2, #1
   109a4:	ldr	r3, [sp, #20]
   109a6:	b.n	1092a <_dtoa_r+0x952>
   109a8:	ldr	r1, [sp, #24]
   109aa:	mov	r0, r4
   109ac:	bl	11d48 <__mcmp>
   109b0:	cmp	r0, #0
   109b2:	bge.w	104b4 <_dtoa_r+0x4dc>
   109b6:	mov	r1, r4
   109b8:	ldr	r4, [sp, #16]
   109ba:	movs	r3, #0
   109bc:	subs	r4, #1
   109be:	movs	r2, #10
   109c0:	mov	r0, r9
   109c2:	str	r4, [sp, #16]
   109c4:	bl	11900 <__multadd>
   109c8:	ldr	r3, [sp, #44]	; 0x2c
   109ca:	mov	r4, r0
   109cc:	cmp	r3, #0
   109ce:	bne.w	10894 <_dtoa_r+0x8bc>
   109d2:	ldr	r3, [sp, #56]	; 0x38
   109d4:	cmp	r3, #0
   109d6:	ble.w	10db4 <_dtoa_r+0xddc>
   109da:	str	r3, [sp, #32]
   109dc:	b.n	104c4 <_dtoa_r+0x4ec>
   109de:	ldr	r4, [sp, #40]	; 0x28
   109e0:	b.n	1042c <_dtoa_r+0x454>
   109e2:	ldr	r3, [sp, #0]
   109e4:	cmp	r3, #2
   109e6:	ble.w	104bc <_dtoa_r+0x4e4>
   109ea:	ldr	r3, [sp, #32]
   109ec:	cmp	r3, #0
   109ee:	bne.w	10d2c <_dtoa_r+0xd54>
   109f2:	ldr	r1, [sp, #24]
   109f4:	movs	r2, #5
   109f6:	mov	r0, r9
   109f8:	bl	11900 <__multadd>
   109fc:	mov	r1, r0
   109fe:	str	r0, [sp, #24]
   10a00:	mov	r0, r4
   10a02:	bl	11d48 <__mcmp>
   10a06:	cmp	r0, #0
   10a08:	str	r4, [sp, #40]	; 0x28
   10a0a:	ble.w	1083a <_dtoa_r+0x862>
   10a0e:	ldr	r2, [sp, #16]
   10a10:	ldr	r1, [sp, #36]	; 0x24
   10a12:	movs	r3, #49	; 0x31
   10a14:	adds	r2, #1
   10a16:	str	r2, [sp, #16]
   10a18:	strb	r3, [r1, #0]
   10a1a:	adds	r5, r1, #1
   10a1c:	b.n	10842 <_dtoa_r+0x86a>
   10a1e:	ldr	r2, [sp, #16]
   10a20:	adds	r2, #1
   10a22:	str	r2, [sp, #16]
   10a24:	ldr	r2, [sp, #36]	; 0x24
   10a26:	movs	r3, #49	; 0x31
   10a28:	strb	r3, [r2, #0]
   10a2a:	b.n	10546 <_dtoa_r+0x56e>
   10a2c:	movs	r3, #1
   10a2e:	str	r3, [sp, #44]	; 0x2c
   10a30:	b.n	105d8 <_dtoa_r+0x600>
   10a32:	ldr.w	r9, [sp, #20]
   10a36:	b.n	1036e <_dtoa_r+0x396>
   10a38:	cmp.w	sl, #0
   10a3c:	bne.w	10452 <_dtoa_r+0x47a>
   10a40:	ubfx	r3, fp, #0, #20
   10a44:	cmp	r3, #0
   10a46:	bne.w	10cc6 <_dtoa_r+0xcee>
   10a4a:	bic.w	r7, fp, #2147483648	; 0x80000000
   10a4e:	lsrs	r7, r7, #20
   10a50:	lsls	r7, r7, #20
   10a52:	cbz	r7, 10a60 <_dtoa_r+0xa88>
   10a54:	ldr	r3, [sp, #28]
   10a56:	adds	r3, #1
   10a58:	str	r3, [sp, #28]
   10a5a:	add.w	r8, r8, #1
   10a5e:	movs	r7, #1
   10a60:	ldr	r3, [sp, #48]	; 0x30
   10a62:	movs	r0, #1
   10a64:	cmp	r3, #0
   10a66:	beq.w	10466 <_dtoa_r+0x48e>
   10a6a:	b.n	10454 <_dtoa_r+0x47c>
   10a6c:	mov	r0, sl
   10a6e:	bl	a964 <__aeabi_i2d>
   10a72:	mov	r2, r6
   10a74:	mov	r3, r7
   10a76:	bl	aa30 <__aeabi_dmul>
   10a7a:	movs	r2, #0
   10a7c:	ldr	r3, [pc, #764]	; (10d7c <_dtoa_r+0xda4>)
   10a7e:	bl	a6cc <__adddf3>
   10a82:	mov	r4, r0
   10a84:	sub.w	r5, r1, #54525952	; 0x3400000
   10a88:	mov	r0, r6
   10a8a:	mov	r1, r7
   10a8c:	movs	r2, #0
   10a8e:	ldr	r3, [pc, #752]	; (10d80 <_dtoa_r+0xda8>)
   10a90:	bl	a6c8 <__aeabi_dsub>
   10a94:	mov	r2, r4
   10a96:	mov	r3, r5
   10a98:	mov	r6, r0
   10a9a:	mov	r7, r1
   10a9c:	bl	af50 <__aeabi_dcmpgt>
   10aa0:	cmp	r0, #0
   10aa2:	bne.w	10c02 <_dtoa_r+0xc2a>
   10aa6:	mov	r2, r4
   10aa8:	add.w	r3, r5, #2147483648	; 0x80000000
   10aac:	mov	r0, r6
   10aae:	mov	r1, r7
   10ab0:	bl	af14 <__aeabi_dcmplt>
   10ab4:	cmp	r0, #0
   10ab6:	beq.n	10b4e <_dtoa_r+0xb76>
   10ab8:	movs	r3, #0
   10aba:	str	r3, [sp, #24]
   10abc:	mov	r6, r3
   10abe:	b.n	1083a <_dtoa_r+0x862>
   10ac0:	ldr	r0, [sp, #36]	; 0x24
   10ac2:	b.w	1004a <_dtoa_r+0x72>
   10ac6:	ldr	r3, [sp, #24]
   10ac8:	ldr	r2, [sp, #48]	; 0x30
   10aca:	str	r7, [sp, #24]
   10acc:	subs	r3, r7, r3
   10ace:	add	r2, r3
   10ad0:	str	r2, [sp, #48]	; 0x30
   10ad2:	movs	r7, #0
   10ad4:	b.n	103b2 <_dtoa_r+0x3da>
   10ad6:	vldr	d7, [sp, #64]	; 0x40
   10ada:	mov.w	sl, #2
   10ade:	vstr	d7, [sp, #72]	; 0x48
   10ae2:	b.n	10664 <_dtoa_r+0x68c>
   10ae4:	mov	r4, r3
   10ae6:	movs	r1, #0
   10ae8:	str.w	r1, [r9, #68]	; 0x44
   10aec:	b.n	10610 <_dtoa_r+0x638>
   10aee:	movs	r4, #1
   10af0:	str	r4, [sp, #56]	; 0x38
   10af2:	str	r4, [sp, #32]
   10af4:	str	r4, [sp, #20]
   10af6:	b.n	10ae6 <_dtoa_r+0xb0e>
   10af8:	cmp	r2, #0
   10afa:	mov	sl, r3
   10afc:	ble.n	10b22 <_dtoa_r+0xb4a>
   10afe:	mov	r1, r4
   10b00:	movs	r2, #1
   10b02:	mov	r0, r9
   10b04:	bl	11c98 <__lshift>
   10b08:	ldr	r1, [sp, #24]
   10b0a:	mov	r4, r0
   10b0c:	bl	11d48 <__mcmp>
   10b10:	cmp	r0, #0
   10b12:	ble.w	10da6 <_dtoa_r+0xdce>
   10b16:	cmp.w	sl, #57	; 0x39
   10b1a:	beq.w	10d30 <_dtoa_r+0xd58>
   10b1e:	add.w	sl, r5, #49	; 0x31
   10b22:	mov	fp, r6
   10b24:	strb.w	sl, [r7]
   10b28:	adds	r5, r7, #1
   10b2a:	mov	r6, r8
   10b2c:	str	r4, [sp, #40]	; 0x28
   10b2e:	b.n	10546 <_dtoa_r+0x56e>
   10b30:	bne.n	10b3c <_dtoa_r+0xb64>
   10b32:	tst.w	sl, #1
   10b36:	beq.n	10b3c <_dtoa_r+0xb64>
   10b38:	b.n	10526 <_dtoa_r+0x54e>
   10b3a:	mov	r5, r2
   10b3c:	ldrb.w	r3, [r5, #-1]
   10b40:	cmp	r3, #48	; 0x30
   10b42:	add.w	r2, r5, #4294967295
   10b46:	beq.n	10b3a <_dtoa_r+0xb62>
   10b48:	b.n	10546 <_dtoa_r+0x56e>
   10b4a:	ldr.w	r8, [sp, #72]	; 0x48
   10b4e:	ldrd	sl, fp, [sp, #64]	; 0x40
   10b52:	b.w	101ec <_dtoa_r+0x214>
   10b56:	ldr	r1, [sp, #36]	; 0x24
   10b58:	movs	r2, #48	; 0x30
   10b5a:	strb	r2, [r1, #0]
   10b5c:	ldr	r2, [sp, #16]
   10b5e:	ldrb.w	r4, [r5, #-1]
   10b62:	adds	r2, #1
   10b64:	str	r2, [sp, #16]
   10b66:	b.n	1036a <_dtoa_r+0x392>
   10b68:	ldr	r3, [sp, #16]
   10b6a:	negs	r4, r3
   10b6c:	cmp	r4, #0
   10b6e:	beq.w	10cd8 <_dtoa_r+0xd00>
   10b72:	ldr	r3, [pc, #528]	; (10d84 <_dtoa_r+0xdac>)
   10b74:	and.w	r2, r4, #15
   10b78:	add.w	r3, r3, r2, lsl #3
   10b7c:	ldrd	r2, r3, [r3]
   10b80:	ldrd	r0, r1, [sp, #64]	; 0x40
   10b84:	bl	aa30 <__aeabi_dmul>
   10b88:	asrs	r4, r4, #4
   10b8a:	mov	r6, r0
   10b8c:	mov	r7, r1
   10b8e:	beq.w	10dbe <_dtoa_r+0xde6>
   10b92:	ldr	r5, [pc, #500]	; (10d88 <_dtoa_r+0xdb0>)
   10b94:	mov.w	sl, #2
   10b98:	lsls	r2, r4, #31
   10b9a:	bpl.n	10bb0 <_dtoa_r+0xbd8>
   10b9c:	mov	r0, r6
   10b9e:	mov	r1, r7
   10ba0:	ldrd	r2, r3, [r5]
   10ba4:	bl	aa30 <__aeabi_dmul>
   10ba8:	add.w	sl, sl, #1
   10bac:	mov	r6, r0
   10bae:	mov	r7, r1
   10bb0:	asrs	r4, r4, #1
   10bb2:	add.w	r5, r5, #8
   10bb6:	bne.n	10b98 <_dtoa_r+0xbc0>
   10bb8:	b.n	10698 <_dtoa_r+0x6c0>
   10bba:	ldr	r1, [r6, #4]
   10bbc:	mov	r0, r9
   10bbe:	bl	118a0 <_Balloc>
   10bc2:	ldr	r3, [r6, #16]
   10bc4:	adds	r2, r3, #2
   10bc6:	mov	r5, r0
   10bc8:	lsls	r2, r2, #2
   10bca:	add.w	r1, r6, #12
   10bce:	adds	r0, #12
   10bd0:	bl	8774 <memcpy>
   10bd4:	mov	r1, r5
   10bd6:	movs	r2, #1
   10bd8:	mov	r0, r9
   10bda:	bl	11c98 <__lshift>
   10bde:	mov	r8, r0
   10be0:	b.n	108c4 <_dtoa_r+0x8ec>
   10be2:	cmp	r3, #57	; 0x39
   10be4:	beq.w	10d30 <_dtoa_r+0xd58>
   10be8:	add.w	sl, r3, #1
   10bec:	mov	fp, r6
   10bee:	strb.w	sl, [r7]
   10bf2:	adds	r5, r7, #1
   10bf4:	mov	r6, r8
   10bf6:	str	r4, [sp, #40]	; 0x28
   10bf8:	b.n	10546 <_dtoa_r+0x56e>
   10bfa:	mov	fp, r6
   10bfc:	mov	sl, r3
   10bfe:	mov	r6, r8
   10c00:	b.n	1050e <_dtoa_r+0x536>
   10c02:	movs	r3, #0
   10c04:	str	r3, [sp, #24]
   10c06:	mov	r6, r3
   10c08:	b.n	10a0e <_dtoa_r+0xa36>
   10c0a:	ldr	r3, [sp, #72]	; 0x48
   10c0c:	ldr	r1, [pc, #372]	; (10d84 <_dtoa_r+0xdac>)
   10c0e:	subs	r2, r3, #1
   10c10:	add.w	r1, r1, r2, lsl #3
   10c14:	mov	r3, r5
   10c16:	str	r2, [sp, #92]	; 0x5c
   10c18:	ldrd	r0, r1, [r1]
   10c1c:	mov	r2, r4
   10c1e:	bl	aa30 <__aeabi_dmul>
   10c22:	strd	r0, r1, [sp, #80]	; 0x50
   10c26:	mov	r1, r7
   10c28:	mov	r0, r6
   10c2a:	bl	af90 <__aeabi_d2iz>
   10c2e:	mov	r4, r0
   10c30:	bl	a964 <__aeabi_i2d>
   10c34:	mov	r3, r1
   10c36:	mov	r2, r0
   10c38:	mov	r1, r7
   10c3a:	mov	r0, r6
   10c3c:	bl	a6c8 <__aeabi_dsub>
   10c40:	ldr	r3, [sp, #72]	; 0x48
   10c42:	mov	r7, r1
   10c44:	ldr	r1, [sp, #36]	; 0x24
   10c46:	adds	r4, #48	; 0x30
   10c48:	cmp	r3, #1
   10c4a:	mov	r6, r0
   10c4c:	strb	r4, [r1, #0]
   10c4e:	add.w	r5, r1, #1
   10c52:	beq.n	10c96 <_dtoa_r+0xcbe>
   10c54:	ldr	r3, [sp, #72]	; 0x48
   10c56:	ldr	r2, [sp, #36]	; 0x24
   10c58:	add	r3, r2
   10c5a:	mov	sl, r3
   10c5c:	mov	fp, r5
   10c5e:	movs	r2, #0
   10c60:	ldr	r3, [pc, #296]	; (10d8c <_dtoa_r+0xdb4>)
   10c62:	mov	r0, r6
   10c64:	mov	r1, r7
   10c66:	bl	aa30 <__aeabi_dmul>
   10c6a:	mov	r7, r1
   10c6c:	mov	r6, r0
   10c6e:	bl	af90 <__aeabi_d2iz>
   10c72:	mov	r4, r0
   10c74:	bl	a964 <__aeabi_i2d>
   10c78:	adds	r4, #48	; 0x30
   10c7a:	mov	r2, r0
   10c7c:	mov	r3, r1
   10c7e:	mov	r0, r6
   10c80:	mov	r1, r7
   10c82:	bl	a6c8 <__aeabi_dsub>
   10c86:	strb.w	r4, [fp], #1
   10c8a:	cmp	sl, fp
   10c8c:	mov	r6, r0
   10c8e:	mov	r7, r1
   10c90:	bne.n	10c5e <_dtoa_r+0xc86>
   10c92:	ldr	r3, [sp, #92]	; 0x5c
   10c94:	add	r5, r3
   10c96:	movs	r2, #0
   10c98:	ldr	r3, [pc, #244]	; (10d90 <_dtoa_r+0xdb8>)
   10c9a:	ldrd	r0, r1, [sp, #80]	; 0x50
   10c9e:	bl	a6cc <__adddf3>
   10ca2:	mov	r2, r6
   10ca4:	mov	r3, r7
   10ca6:	bl	af14 <__aeabi_dcmplt>
   10caa:	cmp	r0, #0
   10cac:	beq.n	10d40 <_dtoa_r+0xd68>
   10cae:	ldr	r3, [sp, #88]	; 0x58
   10cb0:	str	r3, [sp, #16]
   10cb2:	ldrb.w	r4, [r5, #-1]
   10cb6:	b.w	10352 <_dtoa_r+0x37a>
   10cba:	ldr	r3, [sp, #28]
   10cbc:	ldr	r2, [sp, #32]
   10cbe:	subs	r5, r3, r2
   10cc0:	movs	r3, #0
   10cc2:	b.w	103be <_dtoa_r+0x3e6>
   10cc6:	movs	r7, #0
   10cc8:	b.n	10a60 <_dtoa_r+0xa88>
   10cca:	ldr	r3, [sp, #96]	; 0x60
   10ccc:	ldr	r7, [sp, #24]
   10cce:	ldr	r5, [sp, #28]
   10cd0:	rsb	r3, r3, #54	; 0x36
   10cd4:	b.w	103be <_dtoa_r+0x3e6>
   10cd8:	ldrd	r6, r7, [sp, #64]	; 0x40
   10cdc:	mov.w	sl, #2
   10ce0:	b.n	10698 <_dtoa_r+0x6c0>
   10ce2:	ldr	r3, [sp, #32]
   10ce4:	cmp	r3, #0
   10ce6:	beq.w	10a6c <_dtoa_r+0xa94>
   10cea:	ldr	r3, [sp, #56]	; 0x38
   10cec:	cmp	r3, #0
   10cee:	ble.w	10b4e <_dtoa_r+0xb76>
   10cf2:	movs	r2, #0
   10cf4:	ldr	r3, [pc, #148]	; (10d8c <_dtoa_r+0xdb4>)
   10cf6:	mov	r0, r6
   10cf8:	mov	r1, r7
   10cfa:	bl	aa30 <__aeabi_dmul>
   10cfe:	mov	r6, r0
   10d00:	mov	r7, r1
   10d02:	add.w	r0, sl, #1
   10d06:	bl	a964 <__aeabi_i2d>
   10d0a:	mov	r2, r6
   10d0c:	mov	r3, r7
   10d0e:	bl	aa30 <__aeabi_dmul>
   10d12:	movs	r2, #0
   10d14:	ldr	r3, [pc, #100]	; (10d7c <_dtoa_r+0xda4>)
   10d16:	bl	a6cc <__adddf3>
   10d1a:	ldr	r2, [sp, #16]
   10d1c:	ldr	r3, [sp, #56]	; 0x38
   10d1e:	str	r3, [sp, #72]	; 0x48
   10d20:	subs	r2, #1
   10d22:	mov	r4, r0
   10d24:	sub.w	r5, r1, #54525952	; 0x3400000
   10d28:	str	r2, [sp, #88]	; 0x58
   10d2a:	b.n	106da <_dtoa_r+0x702>
   10d2c:	str	r4, [sp, #40]	; 0x28
   10d2e:	b.n	1083a <_dtoa_r+0x862>
   10d30:	movs	r2, #57	; 0x39
   10d32:	mov	fp, r6
   10d34:	str	r4, [sp, #40]	; 0x28
   10d36:	mov	r6, r8
   10d38:	strb	r2, [r7, #0]
   10d3a:	adds	r5, r7, #1
   10d3c:	b.w	1052a <_dtoa_r+0x552>
   10d40:	ldrd	r2, r3, [sp, #80]	; 0x50
   10d44:	movs	r0, #0
   10d46:	ldr	r1, [pc, #72]	; (10d90 <_dtoa_r+0xdb8>)
   10d48:	bl	a6c8 <__aeabi_dsub>
   10d4c:	mov	r2, r6
   10d4e:	mov	r3, r7
   10d50:	bl	af50 <__aeabi_dcmpgt>
   10d54:	cbnz	r0, 10d5a <_dtoa_r+0xd82>
   10d56:	b.n	10b4e <_dtoa_r+0xb76>
   10d58:	mov	r5, r2
   10d5a:	ldrb.w	r3, [r5, #-1]
   10d5e:	cmp	r3, #48	; 0x30
   10d60:	add.w	r2, r5, #4294967295
   10d64:	beq.n	10d58 <_dtoa_r+0xd80>
   10d66:	b.n	107dc <_dtoa_r+0x804>
   10d68:	ldr	r3, [sp, #88]	; 0x58
   10d6a:	str	r3, [sp, #16]
   10d6c:	b.w	10352 <_dtoa_r+0x37a>
   10d70:	cmp.w	sl, #0
   10d74:	bne.w	10870 <_dtoa_r+0x898>
   10d78:	b.n	10a40 <_dtoa_r+0xa68>
   10d7a:	nop
   10d7c:	.word	0x401c0000
   10d80:	.word	0x40140000
   10d84:	.word	0x000137f0
   10d88:	.word	0x000138b8
   10d8c:	.word	0x40240000
   10d90:	.word	0x3fe00000
   10d94:	cmp	r3, #57	; 0x39
   10d96:	mov	fp, sl
   10d98:	mov	sl, r3
   10d9a:	beq.n	10d30 <_dtoa_r+0xd58>
   10d9c:	cmp.w	fp, #0
   10da0:	bgt.w	10b1e <_dtoa_r+0xb46>
   10da4:	b.n	10b22 <_dtoa_r+0xb4a>
   10da6:	bne.w	10b22 <_dtoa_r+0xb4a>
   10daa:	tst.w	sl, #1
   10dae:	beq.w	10b22 <_dtoa_r+0xb4a>
   10db2:	b.n	10b16 <_dtoa_r+0xb3e>
   10db4:	ldr	r3, [sp, #0]
   10db6:	cmp	r3, #2
   10db8:	bgt.n	10e06 <_dtoa_r+0xe2e>
   10dba:	ldr	r3, [sp, #56]	; 0x38
   10dbc:	b.n	109da <_dtoa_r+0xa02>
   10dbe:	mov.w	sl, #2
   10dc2:	b.n	10698 <_dtoa_r+0x6c0>
   10dc4:	ldr	r3, [sp, #0]
   10dc6:	cmp	r3, #2
   10dc8:	bgt.n	10e06 <_dtoa_r+0xe2e>
   10dca:	ldr	r3, [sp, #56]	; 0x38
   10dcc:	b.n	108aa <_dtoa_r+0x8d2>
   10dce:	movs	r4, #0
   10dd0:	str.w	r4, [r9, #68]	; 0x44
   10dd4:	mov	r1, r4
   10dd6:	mov	r0, r9
   10dd8:	bl	118a0 <_Balloc>
   10ddc:	mov.w	r3, #4294967295
   10de0:	str	r3, [sp, #32]
   10de2:	str	r3, [sp, #56]	; 0x38
   10de4:	movs	r3, #1
   10de6:	str	r0, [sp, #36]	; 0x24
   10de8:	str	r4, [sp, #20]
   10dea:	str.w	r0, [r9, #64]	; 0x40
   10dee:	str	r3, [sp, #44]	; 0x2c
   10df0:	b.w	101ec <_dtoa_r+0x214>
   10df4:	beq.w	10488 <_dtoa_r+0x4b0>
   10df8:	rsb	r0, r0, #60	; 0x3c
   10dfc:	b.w	1047e <_dtoa_r+0x4a6>
   10e00:	movs	r6, #1
   10e02:	b.w	1017e <_dtoa_r+0x1a6>
   10e06:	ldr	r3, [sp, #56]	; 0x38
   10e08:	str	r3, [sp, #32]
   10e0a:	b.n	109ea <_dtoa_r+0xa12>

00010e0c <__libc_fini_array>:
   10e0c:	push	{r3, r4, r5, lr}
   10e0e:	ldr	r5, [pc, #28]	; (10e2c <__libc_fini_array+0x20>)
   10e10:	ldr	r4, [pc, #28]	; (10e30 <__libc_fini_array+0x24>)
   10e12:	subs	r4, r5, r4
   10e14:	asrs	r4, r4, #2
   10e16:	beq.n	10e24 <__libc_fini_array+0x18>
   10e18:	subs	r4, #1
   10e1a:	ldr.w	r3, [r5, #-4]!
   10e1e:	blx	r3
   10e20:	cmp	r4, #0
   10e22:	bne.n	10e18 <__libc_fini_array+0xc>
   10e24:	ldmia.w	sp!, {r3, r4, r5, lr}
   10e28:	b.w	1394c <__init_array_end>
	...

00010e34 <_malloc_trim_r>:
   10e34:	push	{r3, r4, r5, r6, r7, lr}
   10e36:	ldr	r7, [pc, #140]	; (10ec4 <_malloc_trim_r+0x90>)
   10e38:	mov	r4, r1
   10e3a:	mov	r6, r0
   10e3c:	bl	bf48 <__malloc_lock>
   10e40:	ldr	r3, [r7, #8]
   10e42:	ldr	r5, [r3, #4]
   10e44:	bic.w	r5, r5, #3
   10e48:	subs	r1, r5, r4
   10e4a:	addw	r1, r1, #4079	; 0xfef
   10e4e:	bic.w	r1, r1, #4080	; 0xff0
   10e52:	bic.w	r1, r1, #15
   10e56:	sub.w	r4, r1, #4096	; 0x1000
   10e5a:	cmp.w	r4, #4096	; 0x1000
   10e5e:	blt.n	10e70 <_malloc_trim_r+0x3c>
   10e60:	movs	r1, #0
   10e62:	mov	r0, r6
   10e64:	bl	c330 <_sbrk_r>
   10e68:	ldr	r3, [r7, #8]
   10e6a:	add	r3, r5
   10e6c:	cmp	r0, r3
   10e6e:	beq.n	10e7a <_malloc_trim_r+0x46>
   10e70:	mov	r0, r6
   10e72:	bl	bf4c <__malloc_unlock>
   10e76:	movs	r0, #0
   10e78:	pop	{r3, r4, r5, r6, r7, pc}
   10e7a:	negs	r1, r4
   10e7c:	mov	r0, r6
   10e7e:	bl	c330 <_sbrk_r>
   10e82:	adds	r0, #1
   10e84:	beq.n	10ea2 <_malloc_trim_r+0x6e>
   10e86:	ldr	r3, [pc, #64]	; (10ec8 <_malloc_trim_r+0x94>)
   10e88:	ldr	r2, [r7, #8]
   10e8a:	ldr	r1, [r3, #0]
   10e8c:	subs	r5, r5, r4
   10e8e:	orr.w	r5, r5, #1
   10e92:	mov	r0, r6
   10e94:	subs	r1, r1, r4
   10e96:	str	r5, [r2, #4]
   10e98:	str	r1, [r3, #0]
   10e9a:	bl	bf4c <__malloc_unlock>
   10e9e:	movs	r0, #1
   10ea0:	pop	{r3, r4, r5, r6, r7, pc}
   10ea2:	movs	r1, #0
   10ea4:	mov	r0, r6
   10ea6:	bl	c330 <_sbrk_r>
   10eaa:	ldr	r2, [r7, #8]
   10eac:	subs	r3, r0, r2
   10eae:	cmp	r3, #15
   10eb0:	ble.n	10e70 <_malloc_trim_r+0x3c>
   10eb2:	ldr	r4, [pc, #24]	; (10ecc <_malloc_trim_r+0x98>)
   10eb4:	ldr	r1, [pc, #16]	; (10ec8 <_malloc_trim_r+0x94>)
   10eb6:	ldr	r4, [r4, #0]
   10eb8:	orr.w	r3, r3, #1
   10ebc:	subs	r0, r0, r4
   10ebe:	str	r3, [r2, #4]
   10ec0:	str	r0, [r1, #0]
   10ec2:	b.n	10e70 <_malloc_trim_r+0x3c>
   10ec4:	.word	0x20014138
   10ec8:	.word	0x20019f0c
   10ecc:	.word	0x20014544

00010ed0 <_free_r>:
   10ed0:	cmp	r1, #0
   10ed2:	beq.n	10f60 <_free_r+0x90>
   10ed4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ed8:	mov	r5, r1
   10eda:	mov	r8, r0
   10edc:	bl	bf48 <__malloc_lock>
   10ee0:	ldr.w	r7, [r5, #-4]
   10ee4:	ldr	r1, [pc, #424]	; (11090 <_free_r+0x1c0>)
   10ee6:	bic.w	r3, r7, #1
   10eea:	sub.w	r4, r5, #8
   10eee:	adds	r2, r4, r3
   10ef0:	ldr	r6, [r1, #8]
   10ef2:	ldr	r0, [r2, #4]
   10ef4:	cmp	r2, r6
   10ef6:	bic.w	r0, r0, #3
   10efa:	beq.n	10fc2 <_free_r+0xf2>
   10efc:	lsls	r6, r7, #31
   10efe:	str	r0, [r2, #4]
   10f00:	bmi.n	10f1a <_free_r+0x4a>
   10f02:	ldr.w	r7, [r5, #-8]
   10f06:	subs	r4, r4, r7
   10f08:	add.w	lr, r1, #8
   10f0c:	ldr	r5, [r4, #8]
   10f0e:	cmp	r5, lr
   10f10:	add	r3, r7
   10f12:	beq.n	10ff4 <_free_r+0x124>
   10f14:	ldr	r7, [r4, #12]
   10f16:	str	r7, [r5, #12]
   10f18:	str	r5, [r7, #8]
   10f1a:	adds	r5, r2, r0
   10f1c:	ldr	r5, [r5, #4]
   10f1e:	lsls	r5, r5, #31
   10f20:	bpl.n	10fa8 <_free_r+0xd8>
   10f22:	orr.w	r2, r3, #1
   10f26:	str	r2, [r4, #4]
   10f28:	str	r3, [r4, r3]
   10f2a:	cmp.w	r3, #512	; 0x200
   10f2e:	bcs.n	10f62 <_free_r+0x92>
   10f30:	lsrs	r3, r3, #3
   10f32:	adds	r2, r3, #1
   10f34:	ldr	r5, [r1, #4]
   10f36:	ldr.w	r7, [r1, r2, lsl #3]
   10f3a:	str	r7, [r4, #8]
   10f3c:	movs	r0, #1
   10f3e:	asrs	r3, r3, #2
   10f40:	lsl.w	r3, r0, r3
   10f44:	add.w	r0, r1, r2, lsl #3
   10f48:	orrs	r5, r3
   10f4a:	subs	r0, #8
   10f4c:	str	r0, [r4, #12]
   10f4e:	str	r5, [r1, #4]
   10f50:	str.w	r4, [r1, r2, lsl #3]
   10f54:	str	r4, [r7, #12]
   10f56:	mov	r0, r8
   10f58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10f5c:	b.w	bf4c <__malloc_unlock>
   10f60:	bx	lr
   10f62:	lsrs	r2, r3, #9
   10f64:	cmp	r2, #4
   10f66:	bhi.n	11010 <_free_r+0x140>
   10f68:	lsrs	r2, r3, #6
   10f6a:	add.w	r7, r2, #57	; 0x39
   10f6e:	lsls	r7, r7, #1
   10f70:	add.w	r5, r2, #56	; 0x38
   10f74:	add.w	r0, r1, r7, lsl #2
   10f78:	ldr.w	r2, [r1, r7, lsl #2]
   10f7c:	ldr	r1, [pc, #272]	; (11090 <_free_r+0x1c0>)
   10f7e:	subs	r0, #8
   10f80:	cmp	r0, r2
   10f82:	beq.n	11020 <_free_r+0x150>
   10f84:	ldr	r1, [r2, #4]
   10f86:	bic.w	r1, r1, #3
   10f8a:	cmp	r3, r1
   10f8c:	bcs.n	10f94 <_free_r+0xc4>
   10f8e:	ldr	r2, [r2, #8]
   10f90:	cmp	r0, r2
   10f92:	bne.n	10f84 <_free_r+0xb4>
   10f94:	ldr	r0, [r2, #12]
   10f96:	str	r0, [r4, #12]
   10f98:	str	r2, [r4, #8]
   10f9a:	str	r4, [r0, #8]
   10f9c:	str	r4, [r2, #12]
   10f9e:	mov	r0, r8
   10fa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10fa4:	b.w	bf4c <__malloc_unlock>
   10fa8:	ldr	r5, [r2, #8]
   10faa:	ldr	r7, [pc, #232]	; (11094 <_free_r+0x1c4>)
   10fac:	cmp	r5, r7
   10fae:	add	r3, r0
   10fb0:	beq.n	11032 <_free_r+0x162>
   10fb2:	ldr	r0, [r2, #12]
   10fb4:	str	r0, [r5, #12]
   10fb6:	orr.w	r2, r3, #1
   10fba:	str	r5, [r0, #8]
   10fbc:	str	r2, [r4, #4]
   10fbe:	str	r3, [r4, r3]
   10fc0:	b.n	10f2a <_free_r+0x5a>
   10fc2:	lsls	r7, r7, #31
   10fc4:	add	r3, r0
   10fc6:	bmi.n	10fd8 <_free_r+0x108>
   10fc8:	ldr.w	r2, [r5, #-8]
   10fcc:	subs	r4, r4, r2
   10fce:	add	r3, r2
   10fd0:	ldr	r0, [r4, #8]
   10fd2:	ldr	r2, [r4, #12]
   10fd4:	str	r2, [r0, #12]
   10fd6:	str	r0, [r2, #8]
   10fd8:	ldr	r2, [pc, #188]	; (11098 <_free_r+0x1c8>)
   10fda:	ldr	r2, [r2, #0]
   10fdc:	orr.w	r0, r3, #1
   10fe0:	cmp	r3, r2
   10fe2:	str	r0, [r4, #4]
   10fe4:	str	r4, [r1, #8]
   10fe6:	bcc.n	10f56 <_free_r+0x86>
   10fe8:	ldr	r3, [pc, #176]	; (1109c <_free_r+0x1cc>)
   10fea:	mov	r0, r8
   10fec:	ldr	r1, [r3, #0]
   10fee:	bl	10e34 <_malloc_trim_r>
   10ff2:	b.n	10f56 <_free_r+0x86>
   10ff4:	adds	r1, r2, r0
   10ff6:	ldr	r1, [r1, #4]
   10ff8:	lsls	r1, r1, #31
   10ffa:	bmi.n	11086 <_free_r+0x1b6>
   10ffc:	ldr	r1, [r2, #8]
   10ffe:	ldr	r2, [r2, #12]
   11000:	str	r2, [r1, #12]
   11002:	add	r3, r0
   11004:	orr.w	r0, r3, #1
   11008:	str	r1, [r2, #8]
   1100a:	str	r0, [r4, #4]
   1100c:	str	r3, [r4, r3]
   1100e:	b.n	10f56 <_free_r+0x86>
   11010:	cmp	r2, #20
   11012:	bhi.n	11044 <_free_r+0x174>
   11014:	add.w	r7, r2, #92	; 0x5c
   11018:	lsls	r7, r7, #1
   1101a:	add.w	r5, r2, #91	; 0x5b
   1101e:	b.n	10f74 <_free_r+0xa4>
   11020:	asrs	r2, r5, #2
   11022:	ldr	r3, [r1, #4]
   11024:	movs	r5, #1
   11026:	lsl.w	r2, r5, r2
   1102a:	orrs	r3, r2
   1102c:	str	r3, [r1, #4]
   1102e:	mov	r2, r0
   11030:	b.n	10f96 <_free_r+0xc6>
   11032:	orr.w	r2, r3, #1
   11036:	str	r4, [r1, #20]
   11038:	str	r4, [r1, #16]
   1103a:	str	r5, [r4, #12]
   1103c:	str	r5, [r4, #8]
   1103e:	str	r2, [r4, #4]
   11040:	str	r3, [r4, r3]
   11042:	b.n	10f56 <_free_r+0x86>
   11044:	cmp	r2, #84	; 0x54
   11046:	bhi.n	11056 <_free_r+0x186>
   11048:	lsrs	r2, r3, #12
   1104a:	add.w	r7, r2, #111	; 0x6f
   1104e:	lsls	r7, r7, #1
   11050:	add.w	r5, r2, #110	; 0x6e
   11054:	b.n	10f74 <_free_r+0xa4>
   11056:	cmp.w	r2, #340	; 0x154
   1105a:	bhi.n	1106a <_free_r+0x19a>
   1105c:	lsrs	r2, r3, #15
   1105e:	add.w	r7, r2, #120	; 0x78
   11062:	lsls	r7, r7, #1
   11064:	add.w	r5, r2, #119	; 0x77
   11068:	b.n	10f74 <_free_r+0xa4>
   1106a:	movw	r0, #1364	; 0x554
   1106e:	cmp	r2, r0
   11070:	bhi.n	11080 <_free_r+0x1b0>
   11072:	lsrs	r2, r3, #18
   11074:	add.w	r7, r2, #125	; 0x7d
   11078:	lsls	r7, r7, #1
   1107a:	add.w	r5, r2, #124	; 0x7c
   1107e:	b.n	10f74 <_free_r+0xa4>
   11080:	movs	r7, #254	; 0xfe
   11082:	movs	r5, #126	; 0x7e
   11084:	b.n	10f74 <_free_r+0xa4>
   11086:	orr.w	r2, r3, #1
   1108a:	str	r2, [r4, #4]
   1108c:	str	r3, [r4, r3]
   1108e:	b.n	10f56 <_free_r+0x86>
   11090:	.word	0x20014138
   11094:	.word	0x20014140
   11098:	.word	0x20014540
   1109c:	.word	0x20019f08

000110a0 <rshift>:
   110a0:	ldr	r2, [r0, #16]
   110a2:	asrs	r3, r1, #5
   110a4:	cmp	r3, r2
   110a6:	bge.n	11106 <rshift+0x66>
   110a8:	push	{r4, r5, r6, r7, lr}
   110aa:	ands.w	r1, r1, #31
   110ae:	add.w	r6, r0, #20
   110b2:	add.w	r2, r6, r2, lsl #2
   110b6:	add.w	lr, r6, r3, lsl #2
   110ba:	beq.n	11110 <rshift+0x70>
   110bc:	ldr.w	r3, [r6, r3, lsl #2]
   110c0:	add.w	r5, lr, #4
   110c4:	cmp	r2, r5
   110c6:	lsr.w	r4, r3, r1
   110ca:	rsb	ip, r1, #32
   110ce:	bls.n	11144 <rshift+0xa4>
   110d0:	add.w	r7, r0, #16
   110d4:	ldr	r3, [r5, #0]
   110d6:	lsl.w	r3, r3, ip
   110da:	orrs	r3, r4
   110dc:	str.w	r3, [r7, #4]!
   110e0:	ldr.w	r3, [r5], #4
   110e4:	cmp	r2, r5
   110e6:	lsr.w	r4, r3, r1
   110ea:	bhi.n	110d4 <rshift+0x34>
   110ec:	rsb	r2, lr, r2
   110f0:	subs	r2, #5
   110f2:	bic.w	r2, r2, #3
   110f6:	adds	r2, #4
   110f8:	add	r2, r6
   110fa:	str	r4, [r2, #0]
   110fc:	cbz	r4, 11100 <rshift+0x60>
   110fe:	adds	r2, #4
   11100:	subs	r3, r2, r6
   11102:	asrs	r3, r3, #2
   11104:	b.n	11134 <rshift+0x94>
   11106:	movs	r3, #0
   11108:	str	r3, [r0, #16]
   1110a:	movs	r3, #0
   1110c:	str	r3, [r0, #20]
   1110e:	bx	lr
   11110:	cmp	r2, lr
   11112:	bls.n	1113a <rshift+0x9a>
   11114:	add.w	r4, r0, #16
   11118:	mov	r1, lr
   1111a:	ldr.w	r5, [r1], #4
   1111e:	str.w	r5, [r4, #4]!
   11122:	cmp	r2, r1
   11124:	bhi.n	1111a <rshift+0x7a>
   11126:	mvn.w	r3, lr
   1112a:	add	r3, r2
   1112c:	bic.w	r3, r3, #3
   11130:	adds	r3, #4
   11132:	asrs	r3, r3, #2
   11134:	str	r3, [r0, #16]
   11136:	cbz	r3, 1113e <rshift+0x9e>
   11138:	pop	{r4, r5, r6, r7, pc}
   1113a:	movs	r3, #0
   1113c:	str	r3, [r0, #16]
   1113e:	movs	r3, #0
   11140:	str	r3, [r0, #20]
   11142:	pop	{r4, r5, r6, r7, pc}
   11144:	mov	r2, r6
   11146:	b.n	110fa <rshift+0x5a>

00011148 <__gethex>:
   11148:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1114c:	sub	sp, #44	; 0x2c
   1114e:	mov	r9, r1
   11150:	str	r0, [sp, #20]
   11152:	ldr	r0, [sp, #88]	; 0x58
   11154:	str	r2, [sp, #12]
   11156:	str	r3, [sp, #32]
   11158:	bl	11824 <__localeconv_l>
   1115c:	ldr	r3, [r0, #0]
   1115e:	str	r3, [sp, #8]
   11160:	mov	r0, r3
   11162:	mov	r4, r3
   11164:	bl	c5c0 <strlen>
   11168:	ldr.w	r3, [r9]
   1116c:	str	r0, [sp, #0]
   1116e:	ldrb	r2, [r3, #2]
   11170:	adds	r1, r4, r0
   11172:	cmp	r2, #48	; 0x30
   11174:	ldrb.w	fp, [r1, #-1]
   11178:	bne.w	114ce <__gethex+0x386>
   1117c:	adds	r3, #3
   1117e:	mov.w	r8, #0
   11182:	mov	r4, r3
   11184:	ldrb.w	r2, [r3], #1
   11188:	cmp	r2, #48	; 0x30
   1118a:	add.w	r8, r8, #1
   1118e:	beq.n	11182 <__gethex+0x3a>
   11190:	ldr	r6, [pc, #712]	; (1145c <__gethex+0x314>)
   11192:	ldrb	r3, [r6, r2]
   11194:	cmp	r3, #0
   11196:	beq.w	1137a <__gethex+0x232>
   1119a:	ldrb	r3, [r4, #0]
   1119c:	mov.w	sl, #0
   111a0:	ldrb	r3, [r6, r3]
   111a2:	mov	r5, sl
   111a4:	mov	r7, r4
   111a6:	cbz	r3, 111b2 <__gethex+0x6a>
   111a8:	ldrb.w	r3, [r7, #1]!
   111ac:	ldrb	r3, [r6, r3]
   111ae:	cmp	r3, #0
   111b0:	bne.n	111a8 <__gethex+0x60>
   111b2:	ldr	r2, [sp, #0]
   111b4:	ldr	r1, [sp, #8]
   111b6:	mov	r0, r7
   111b8:	bl	c69c <strncmp>
   111bc:	cmp	r0, #0
   111be:	beq.w	112e6 <__gethex+0x19e>
   111c2:	ldrb	r3, [r7, #0]
   111c4:	cmp	r5, #0
   111c6:	beq.w	114ac <__gethex+0x364>
   111ca:	subs	r5, r5, r7
   111cc:	lsls	r2, r5, #2
   111ce:	str	r2, [sp, #4]
   111d0:	cmp	r3, #80	; 0x50
   111d2:	beq.w	112f8 <__gethex+0x1b0>
   111d6:	cmp	r3, #112	; 0x70
   111d8:	beq.w	112f8 <__gethex+0x1b0>
   111dc:	mov	r5, r7
   111de:	str.w	r7, [r9]
   111e2:	cmp.w	sl, #0
   111e6:	bne.w	11358 <__gethex+0x210>
   111ea:	subs	r3, r5, r4
   111ec:	subs	r3, #1
   111ee:	cmp	r3, #7
   111f0:	mov	r1, sl
   111f2:	ble.n	111fe <__gethex+0xb6>
   111f4:	asrs	r3, r3, #1
   111f6:	cmp	r3, #7
   111f8:	add.w	r1, r1, #1
   111fc:	bgt.n	111f4 <__gethex+0xac>
   111fe:	ldr	r0, [sp, #20]
   11200:	bl	118a0 <_Balloc>
   11204:	mov	r3, r0
   11206:	adds	r3, #20
   11208:	cmp	r5, r4
   1120a:	str	r0, [sp, #16]
   1120c:	str	r3, [sp, #28]
   1120e:	bls.w	115b8 <__gethex+0x470>
   11212:	mov	r9, r3
   11214:	ldr	r3, [sp, #0]
   11216:	mov.w	r8, #0
   1121a:	rsb	r3, r3, #1
   1121e:	mov	r7, r8
   11220:	str	r3, [sp, #24]
   11222:	b.n	11244 <__gethex+0xfc>
   11224:	cmp	r7, #32
   11226:	beq.w	11368 <__gethex+0x220>
   1122a:	mov	r2, r7
   1122c:	adds	r7, #4
   1122e:	ldrb.w	r3, [r5, #-1]
   11232:	ldrb	r3, [r6, r3]
   11234:	mov	r5, sl
   11236:	and.w	r3, r3, #15
   1123a:	lsls	r3, r2
   1123c:	cmp	r5, r4
   1123e:	orr.w	r8, r8, r3
   11242:	bls.n	11270 <__gethex+0x128>
   11244:	ldrb.w	r3, [r5, #-1]
   11248:	cmp	r3, fp
   1124a:	add.w	sl, r5, #4294967295
   1124e:	bne.n	11224 <__gethex+0xdc>
   11250:	ldr	r3, [sp, #24]
   11252:	add	r3, sl
   11254:	cmp	r3, r4
   11256:	bcc.n	11224 <__gethex+0xdc>
   11258:	mov	r0, r3
   1125a:	ldr	r2, [sp, #0]
   1125c:	ldr	r1, [sp, #8]
   1125e:	str	r3, [sp, #36]	; 0x24
   11260:	bl	c69c <strncmp>
   11264:	ldr	r3, [sp, #36]	; 0x24
   11266:	cmp	r0, #0
   11268:	bne.n	11224 <__gethex+0xdc>
   1126a:	mov	r5, r3
   1126c:	cmp	r5, r4
   1126e:	bhi.n	11244 <__gethex+0xfc>
   11270:	str.w	r8, [r9], #4
   11274:	ldr	r3, [sp, #28]
   11276:	ldr	r2, [sp, #16]
   11278:	rsb	r9, r3, r9
   1127c:	mov.w	r3, r9, asr #2
   11280:	str	r3, [r2, #16]
   11282:	mov	r0, r8
   11284:	mov.w	r9, r3, lsl #5
   11288:	bl	11a18 <__hi0bits>
   1128c:	ldr	r3, [sp, #12]
   1128e:	ldr	r6, [r3, #0]
   11290:	rsb	r0, r0, r9
   11294:	cmp	r0, r6
   11296:	bgt.w	11460 <__gethex+0x318>
   1129a:	blt.w	114b0 <__gethex+0x368>
   1129e:	movs	r7, #0
   112a0:	ldr	r3, [sp, #12]
   112a2:	ldr	r2, [sp, #4]
   112a4:	ldr	r3, [r3, #8]
   112a6:	cmp	r2, r3
   112a8:	bgt.w	113da <__gethex+0x292>
   112ac:	ldr	r0, [sp, #12]
   112ae:	ldr	r1, [sp, #4]
   112b0:	ldr	r3, [r0, #4]
   112b2:	cmp	r1, r3
   112b4:	bge.w	11422 <__gethex+0x2da>
   112b8:	subs	r5, r3, r1
   112ba:	cmp	r6, r5
   112bc:	bgt.w	114de <__gethex+0x396>
   112c0:	ldr	r2, [r0, #12]
   112c2:	cmp	r2, #2
   112c4:	beq.w	115c6 <__gethex+0x47e>
   112c8:	cmp	r2, #3
   112ca:	beq.w	11586 <__gethex+0x43e>
   112ce:	cmp	r2, #1
   112d0:	beq.w	115ce <__gethex+0x486>
   112d4:	ldr	r0, [sp, #20]
   112d6:	ldr	r1, [sp, #16]
   112d8:	bl	118ec <_Bfree>
   112dc:	ldr	r2, [sp, #80]	; 0x50
   112de:	movs	r3, #0
   112e0:	str	r3, [r2, #0]
   112e2:	movs	r0, #80	; 0x50
   112e4:	b.n	11362 <__gethex+0x21a>
   112e6:	cmp	r5, #0
   112e8:	beq.w	1151e <__gethex+0x3d6>
   112ec:	ldrb	r3, [r7, #0]
   112ee:	b.n	111ca <__gethex+0x82>
   112f0:	movs	r3, #0
   112f2:	str	r3, [sp, #4]
   112f4:	mov.w	sl, #1
   112f8:	ldrb	r3, [r7, #1]
   112fa:	cmp	r3, #43	; 0x2b
   112fc:	beq.w	11458 <__gethex+0x310>
   11300:	cmp	r3, #45	; 0x2d
   11302:	beq.n	113f0 <__gethex+0x2a8>
   11304:	adds	r1, r7, #1
   11306:	movs	r5, #0
   11308:	ldrb	r3, [r6, r3]
   1130a:	ldr	r0, [pc, #336]	; (1145c <__gethex+0x314>)
   1130c:	subs	r2, r3, #1
   1130e:	cmp	r2, #24
   11310:	bhi.w	111dc <__gethex+0x94>
   11314:	ldrb	r2, [r1, #1]
   11316:	ldrb	r2, [r0, r2]
   11318:	subs	r0, r2, #1
   1131a:	cmp	r0, #24
   1131c:	sub.w	r3, r3, #16
   11320:	add.w	r1, r1, #1
   11324:	bhi.n	1133e <__gethex+0x1f6>
   11326:	ldrb.w	r0, [r1, #1]!
   1132a:	add.w	r3, r3, r3, lsl #2
   1132e:	add.w	r3, r2, r3, lsl #1
   11332:	ldrb	r2, [r6, r0]
   11334:	subs	r0, r2, #1
   11336:	cmp	r0, #24
   11338:	sub.w	r3, r3, #16
   1133c:	bls.n	11326 <__gethex+0x1de>
   1133e:	cbz	r5, 11342 <__gethex+0x1fa>
   11340:	negs	r3, r3
   11342:	ldr	r2, [sp, #4]
   11344:	mov	r5, r7
   11346:	add	r2, r3
   11348:	mov	r7, r1
   1134a:	str	r2, [sp, #4]
   1134c:	str.w	r7, [r9]
   11350:	cmp.w	sl, #0
   11354:	beq.w	111ea <__gethex+0xa2>
   11358:	cmp.w	r8, #0
   1135c:	ite	eq
   1135e:	moveq	r0, #6
   11360:	movne	r0, #0
   11362:	add	sp, #44	; 0x2c
   11364:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11368:	str.w	r8, [r9]
   1136c:	mov.w	r8, #0
   11370:	add.w	r9, r9, #4
   11374:	mov	r2, r8
   11376:	movs	r7, #4
   11378:	b.n	1122e <__gethex+0xe6>
   1137a:	ldr	r5, [sp, #0]
   1137c:	ldr	r1, [sp, #8]
   1137e:	mov	r2, r5
   11380:	mov	r0, r4
   11382:	bl	c69c <strncmp>
   11386:	cmp	r0, #0
   11388:	beq.n	113f8 <__gethex+0x2b0>
   1138a:	ldrb	r3, [r4, #0]
   1138c:	mov	r7, r4
   1138e:	cmp	r3, #80	; 0x50
   11390:	beq.n	112f0 <__gethex+0x1a8>
   11392:	cmp	r3, #112	; 0x70
   11394:	beq.n	112f0 <__gethex+0x1a8>
   11396:	str.w	r7, [r9]
   1139a:	b.n	11358 <__gethex+0x210>
   1139c:	ldr	r3, [sp, #16]
   1139e:	ldr	r3, [r3, #8]
   113a0:	cmp	r7, r3
   113a2:	bge.w	1160e <__gethex+0x4c6>
   113a6:	mov	r3, r7
   113a8:	ldr	r0, [sp, #16]
   113aa:	add.w	r2, r0, r3, lsl #2
   113ae:	movs	r1, #1
   113b0:	adds	r3, #1
   113b2:	cmp	r4, #2
   113b4:	str	r3, [r0, #16]
   113b6:	str	r1, [r2, #20]
   113b8:	beq.w	115ec <__gethex+0x4a4>
   113bc:	cmp	r7, r3
   113be:	bge.w	11578 <__gethex+0x430>
   113c2:	movs	r1, #1
   113c4:	ldr	r0, [sp, #16]
   113c6:	bl	110a0 <rshift>
   113ca:	ldr	r3, [sp, #12]
   113cc:	ldr	r2, [sp, #4]
   113ce:	ldr	r3, [r3, #8]
   113d0:	adds	r2, #1
   113d2:	cmp	r2, r3
   113d4:	str	r2, [sp, #4]
   113d6:	ble.w	1157e <__gethex+0x436>
   113da:	ldr	r0, [sp, #20]
   113dc:	ldr	r1, [sp, #16]
   113de:	bl	118ec <_Bfree>
   113e2:	ldr	r2, [sp, #80]	; 0x50
   113e4:	movs	r3, #0
   113e6:	movs	r0, #163	; 0xa3
   113e8:	str	r3, [r2, #0]
   113ea:	add	sp, #44	; 0x2c
   113ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113f0:	movs	r5, #1
   113f2:	ldrb	r3, [r7, #2]
   113f4:	adds	r1, r7, #2
   113f6:	b.n	11308 <__gethex+0x1c0>
   113f8:	ldrb	r2, [r4, r5]
   113fa:	ldrb	r3, [r6, r2]
   113fc:	adds	r7, r4, r5
   113fe:	cmp	r3, #0
   11400:	beq.n	114d6 <__gethex+0x38e>
   11402:	cmp	r2, #48	; 0x30
   11404:	mov	r4, r7
   11406:	bne.n	11412 <__gethex+0x2ca>
   11408:	ldrb.w	r3, [r4, #1]!
   1140c:	cmp	r3, #48	; 0x30
   1140e:	beq.n	11408 <__gethex+0x2c0>
   11410:	ldrb	r3, [r6, r3]
   11412:	clz	sl, r3
   11416:	mov	r5, r7
   11418:	mov.w	sl, sl, lsr #5
   1141c:	mov.w	r8, #1
   11420:	b.n	111a4 <__gethex+0x5c>
   11422:	movs	r4, #1
   11424:	cbz	r7, 11440 <__gethex+0x2f8>
   11426:	ldr	r3, [sp, #12]
   11428:	ldr	r3, [r3, #12]
   1142a:	cmp	r3, #2
   1142c:	beq.w	1153a <__gethex+0x3f2>
   11430:	cmp	r3, #3
   11432:	beq.w	11542 <__gethex+0x3fa>
   11436:	cmp	r3, #1
   11438:	beq.w	115a6 <__gethex+0x45e>
   1143c:	orr.w	r4, r4, #16
   11440:	ldr	r3, [sp, #80]	; 0x50
   11442:	mov	r2, r3
   11444:	ldr	r3, [sp, #16]
   11446:	str	r3, [r2, #0]
   11448:	ldr	r3, [sp, #32]
   1144a:	mov	r2, r3
   1144c:	ldr	r3, [sp, #4]
   1144e:	str	r3, [r2, #0]
   11450:	mov	r0, r4
   11452:	add	sp, #44	; 0x2c
   11454:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11458:	movs	r5, #0
   1145a:	b.n	113f2 <__gethex+0x2aa>
   1145c:	.word	0x000136ec
   11460:	subs	r4, r0, r6
   11462:	mov	r1, r4
   11464:	ldr	r0, [sp, #16]
   11466:	bl	12128 <__any_on>
   1146a:	cmp	r0, #0
   1146c:	beq.n	114da <__gethex+0x392>
   1146e:	subs	r2, r4, #1
   11470:	asrs	r1, r2, #5
   11472:	ldr	r0, [sp, #28]
   11474:	and.w	r3, r2, #31
   11478:	ldr.w	r1, [r0, r1, lsl #2]
   1147c:	movs	r7, #1
   1147e:	lsl.w	r3, r7, r3
   11482:	tst	r3, r1
   11484:	beq.n	1149c <__gethex+0x354>
   11486:	cmp	r2, r7
   11488:	ble.w	115c2 <__gethex+0x47a>
   1148c:	subs	r1, r4, #2
   1148e:	ldr	r0, [sp, #16]
   11490:	bl	12128 <__any_on>
   11494:	cmp	r0, #0
   11496:	beq.w	115c2 <__gethex+0x47a>
   1149a:	movs	r7, #3
   1149c:	ldr	r3, [sp, #4]
   1149e:	ldr	r0, [sp, #16]
   114a0:	add	r3, r4
   114a2:	mov	r1, r4
   114a4:	str	r3, [sp, #4]
   114a6:	bl	110a0 <rshift>
   114aa:	b.n	112a0 <__gethex+0x158>
   114ac:	str	r5, [sp, #4]
   114ae:	b.n	111d0 <__gethex+0x88>
   114b0:	subs	r4, r6, r0
   114b2:	ldr	r1, [sp, #16]
   114b4:	ldr	r0, [sp, #20]
   114b6:	mov	r2, r4
   114b8:	bl	11c98 <__lshift>
   114bc:	ldr	r3, [sp, #4]
   114be:	str	r0, [sp, #16]
   114c0:	subs	r3, r3, r4
   114c2:	str	r3, [sp, #4]
   114c4:	mov	r3, r0
   114c6:	adds	r3, #20
   114c8:	str	r3, [sp, #28]
   114ca:	movs	r7, #0
   114cc:	b.n	112a0 <__gethex+0x158>
   114ce:	adds	r4, r3, #2
   114d0:	mov.w	r8, #0
   114d4:	b.n	11190 <__gethex+0x48>
   114d6:	mov	r3, r2
   114d8:	b.n	1138e <__gethex+0x246>
   114da:	mov	r7, r0
   114dc:	b.n	1149c <__gethex+0x354>
   114de:	subs	r4, r5, #1
   114e0:	cmp	r7, #0
   114e2:	bne.n	11582 <__gethex+0x43a>
   114e4:	cbz	r4, 114f0 <__gethex+0x3a8>
   114e6:	mov	r1, r4
   114e8:	ldr	r0, [sp, #16]
   114ea:	bl	12128 <__any_on>
   114ee:	mov	r7, r0
   114f0:	asrs	r3, r4, #5
   114f2:	ldr	r2, [sp, #28]
   114f4:	ldr	r0, [sp, #16]
   114f6:	ldr.w	r2, [r2, r3, lsl #2]
   114fa:	and.w	r4, r4, #31
   114fe:	movs	r3, #1
   11500:	lsl.w	r4, r3, r4
   11504:	tst	r4, r2
   11506:	mov	r1, r5
   11508:	it	ne
   1150a:	orrne.w	r7, r7, #2
   1150e:	bl	110a0 <rshift>
   11512:	ldr	r3, [sp, #12]
   11514:	ldr	r3, [r3, #4]
   11516:	str	r3, [sp, #4]
   11518:	subs	r6, r6, r5
   1151a:	movs	r4, #2
   1151c:	b.n	11424 <__gethex+0x2dc>
   1151e:	ldr	r1, [sp, #0]
   11520:	ldrb	r3, [r7, r1]
   11522:	ldrb	r2, [r6, r3]
   11524:	adds	r5, r7, r1
   11526:	mov	r7, r5
   11528:	cmp	r2, #0
   1152a:	beq.w	111ca <__gethex+0x82>
   1152e:	ldrb.w	r3, [r7, #1]!
   11532:	ldrb	r2, [r6, r3]
   11534:	cmp	r2, #0
   11536:	bne.n	1152e <__gethex+0x3e6>
   11538:	b.n	111ca <__gethex+0x82>
   1153a:	ldr	r3, [sp, #84]	; 0x54
   1153c:	rsb	r3, r3, #1
   11540:	str	r3, [sp, #84]	; 0x54
   11542:	ldr	r3, [sp, #84]	; 0x54
   11544:	cmp	r3, #0
   11546:	beq.w	1143c <__gethex+0x2f4>
   1154a:	ldr	r3, [sp, #16]
   1154c:	ldr	r5, [sp, #28]
   1154e:	ldr	r7, [r3, #16]
   11550:	mov.w	r8, r7, lsl #2
   11554:	add.w	r0, r5, r8
   11558:	mov	r3, r5
   1155a:	movs	r1, #0
   1155c:	b.n	11568 <__gethex+0x420>
   1155e:	str.w	r1, [r3], #4
   11562:	cmp	r0, r3
   11564:	bls.w	1139c <__gethex+0x254>
   11568:	ldr	r2, [r3, #0]
   1156a:	cmp.w	r2, #4294967295
   1156e:	beq.n	1155e <__gethex+0x416>
   11570:	adds	r2, #1
   11572:	cmp	r4, #2
   11574:	str	r2, [r3, #0]
   11576:	beq.n	115ec <__gethex+0x4a4>
   11578:	ands.w	r6, r6, #31
   1157c:	bne.n	115fa <__gethex+0x4b2>
   1157e:	movs	r4, #33	; 0x21
   11580:	b.n	11440 <__gethex+0x2f8>
   11582:	movs	r7, #1
   11584:	b.n	114f0 <__gethex+0x3a8>
   11586:	ldr	r2, [sp, #84]	; 0x54
   11588:	cmp	r2, #0
   1158a:	beq.w	112d4 <__gethex+0x18c>
   1158e:	ldr	r1, [sp, #32]
   11590:	str	r3, [r1, #0]
   11592:	ldr	r3, [sp, #28]
   11594:	ldr	r1, [sp, #16]
   11596:	movs	r2, #1
   11598:	str	r2, [r1, #16]
   1159a:	str	r2, [r3, #0]
   1159c:	ldr	r3, [sp, #80]	; 0x50
   1159e:	mov	r2, r3
   115a0:	movs	r0, #98	; 0x62
   115a2:	str	r1, [r2, #0]
   115a4:	b.n	11362 <__gethex+0x21a>
   115a6:	lsls	r2, r7, #30
   115a8:	bpl.w	1143c <__gethex+0x2f4>
   115ac:	ldr	r3, [sp, #28]
   115ae:	ldr	r3, [r3, #0]
   115b0:	orrs	r3, r7
   115b2:	lsls	r3, r3, #31
   115b4:	bmi.n	1154a <__gethex+0x402>
   115b6:	b.n	1143c <__gethex+0x2f4>
   115b8:	ldr.w	r9, [sp, #28]
   115bc:	mov.w	r8, #0
   115c0:	b.n	11270 <__gethex+0x128>
   115c2:	movs	r7, #2
   115c4:	b.n	1149c <__gethex+0x354>
   115c6:	ldr	r2, [sp, #84]	; 0x54
   115c8:	cmp	r2, #0
   115ca:	beq.n	1158e <__gethex+0x446>
   115cc:	b.n	112d4 <__gethex+0x18c>
   115ce:	cmp	r6, r5
   115d0:	bne.w	112d4 <__gethex+0x18c>
   115d4:	cmp	r6, #1
   115d6:	ble.n	1158e <__gethex+0x446>
   115d8:	subs	r1, r6, #1
   115da:	ldr	r0, [sp, #16]
   115dc:	bl	12128 <__any_on>
   115e0:	cmp	r0, #0
   115e2:	beq.w	112d4 <__gethex+0x18c>
   115e6:	ldr	r3, [sp, #12]
   115e8:	ldr	r3, [r3, #4]
   115ea:	b.n	1158e <__gethex+0x446>
   115ec:	ldr	r3, [sp, #12]
   115ee:	ldr	r3, [r3, #0]
   115f0:	subs	r3, #1
   115f2:	cmp	r6, r3
   115f4:	beq.n	11640 <__gethex+0x4f8>
   115f6:	movs	r4, #34	; 0x22
   115f8:	b.n	11440 <__gethex+0x2f8>
   115fa:	add	r5, r8
   115fc:	rsb	r6, r6, #32
   11600:	ldr.w	r0, [r5, #-4]
   11604:	bl	11a18 <__hi0bits>
   11608:	cmp	r0, r6
   1160a:	bge.n	1157e <__gethex+0x436>
   1160c:	b.n	113c2 <__gethex+0x27a>
   1160e:	ldr	r3, [sp, #16]
   11610:	ldr.w	r9, [sp, #20]
   11614:	ldr	r1, [r3, #4]
   11616:	mov	r0, r9
   11618:	adds	r1, #1
   1161a:	bl	118a0 <_Balloc>
   1161e:	ldr	r1, [sp, #16]
   11620:	ldr	r3, [r1, #16]
   11622:	adds	r2, r3, #2
   11624:	mov	r5, r0
   11626:	lsls	r2, r2, #2
   11628:	adds	r1, #12
   1162a:	adds	r0, #12
   1162c:	bl	8774 <memcpy>
   11630:	ldr	r1, [sp, #16]
   11632:	mov	r0, r9
   11634:	bl	118ec <_Bfree>
   11638:	str	r5, [sp, #16]
   1163a:	ldr	r3, [r5, #16]
   1163c:	adds	r5, #20
   1163e:	b.n	113a8 <__gethex+0x260>
   11640:	asrs	r3, r6, #5
   11642:	and.w	r6, r6, #31
   11646:	ldr.w	r2, [r5, r3, lsl #2]
   1164a:	movs	r3, #1
   1164c:	lsls	r3, r6
   1164e:	tst	r3, r2
   11650:	ite	ne
   11652:	movne	r4, #33	; 0x21
   11654:	moveq	r4, #34	; 0x22
   11656:	b.n	11440 <__gethex+0x2f8>

00011658 <__match>:
   11658:	push	{r4, r5}
   1165a:	ldr	r4, [r0, #0]
   1165c:	b.n	11670 <__match+0x18>
   1165e:	ldrb.w	r3, [r4, #1]!
   11662:	sub.w	r5, r3, #65	; 0x41
   11666:	cmp	r5, #25
   11668:	it	ls
   1166a:	addls	r3, #32
   1166c:	cmp	r3, r2
   1166e:	bne.n	11682 <__match+0x2a>
   11670:	ldrb.w	r2, [r1], #1
   11674:	cmp	r2, #0
   11676:	bne.n	1165e <__match+0x6>
   11678:	adds	r4, #1
   1167a:	str	r4, [r0, #0]
   1167c:	movs	r0, #1
   1167e:	pop	{r4, r5}
   11680:	bx	lr
   11682:	movs	r0, #0
   11684:	pop	{r4, r5}
   11686:	bx	lr

00011688 <__hexnan>:
   11688:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1168c:	ldr	r3, [r1, #0]
   1168e:	ldr.w	r9, [pc, #372]	; 11804 <__hexnan+0x17c>
   11692:	sub	sp, #20
   11694:	asrs	r1, r3, #5
   11696:	add.w	r1, r2, r1, lsl #2
   1169a:	ands.w	r3, r3, #31
   1169e:	str	r1, [sp, #4]
   116a0:	itt	ne
   116a2:	addne	r1, #4
   116a4:	strne	r1, [sp, #4]
   116a6:	ldr	r4, [sp, #4]
   116a8:	str	r0, [sp, #8]
   116aa:	str	r3, [sp, #12]
   116ac:	movs	r3, #0
   116ae:	mov	r1, r3
   116b0:	str.w	r3, [r4, #-4]
   116b4:	mov	sl, r3
   116b6:	mov	lr, r3
   116b8:	ldr	r3, [sp, #8]
   116ba:	sub.w	ip, r4, #4
   116be:	ldr	r5, [r3, #0]
   116c0:	mov	r8, ip
   116c2:	mov	r0, ip
   116c4:	ldrb.w	r3, [r5, #1]!
   116c8:	cbz	r3, 11714 <__hexnan+0x8c>
   116ca:	ldrb.w	r4, [r9, r3]
   116ce:	cmp	r4, #0
   116d0:	bne.n	1175a <__hexnan+0xd2>
   116d2:	cmp	r3, #32
   116d4:	bhi.n	11792 <__hexnan+0x10a>
   116d6:	cmp	lr, sl
   116d8:	ble.n	116c4 <__hexnan+0x3c>
   116da:	cmp	r0, r8
   116dc:	bcs.n	11706 <__hexnan+0x7e>
   116de:	cmp	r1, #7
   116e0:	bgt.n	11706 <__hexnan+0x7e>
   116e2:	rsb	r1, r1, #8
   116e6:	lsls	r1, r1, #2
   116e8:	ldr	r6, [r0, #0]
   116ea:	rsb	fp, r1, #32
   116ee:	mov	r3, r0
   116f0:	ldr	r7, [r3, #4]
   116f2:	lsl.w	r4, r7, fp
   116f6:	orrs	r4, r6
   116f8:	lsr.w	r6, r7, r1
   116fc:	str	r4, [r3, #0]
   116fe:	str.w	r6, [r3, #4]!
   11702:	cmp	r8, r3
   11704:	bhi.n	116f0 <__hexnan+0x68>
   11706:	cmp	r0, r2
   11708:	bhi.n	11780 <__hexnan+0xf8>
   1170a:	ldrb.w	r3, [r5, #1]!
   1170e:	movs	r1, #8
   11710:	cmp	r3, #0
   11712:	bne.n	116ca <__hexnan+0x42>
   11714:	cmp.w	lr, #0
   11718:	beq.n	11796 <__hexnan+0x10e>
   1171a:	cmp	r0, r8
   1171c:	bcs.n	11722 <__hexnan+0x9a>
   1171e:	cmp	r1, #7
   11720:	ble.n	117dc <__hexnan+0x154>
   11722:	cmp	r0, r2
   11724:	bls.n	1179e <__hexnan+0x116>
   11726:	mov	r3, r2
   11728:	ldr.w	r1, [r0], #4
   1172c:	str.w	r1, [r3], #4
   11730:	cmp	ip, r0
   11732:	bcs.n	11728 <__hexnan+0xa0>
   11734:	movs	r1, #0
   11736:	str.w	r1, [r3], #4
   1173a:	cmp	ip, r3
   1173c:	bcs.n	11736 <__hexnan+0xae>
   1173e:	ldr	r3, [sp, #4]
   11740:	ldr.w	r3, [r3, #-4]
   11744:	cbnz	r3, 11752 <__hexnan+0xca>
   11746:	cmp	r2, ip
   11748:	beq.n	117c0 <__hexnan+0x138>
   1174a:	ldr.w	r3, [ip, #-4]!
   1174e:	cmp	r3, #0
   11750:	beq.n	11746 <__hexnan+0xbe>
   11752:	movs	r0, #5
   11754:	add	sp, #20
   11756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1175a:	adds	r1, #1
   1175c:	cmp	r1, #8
   1175e:	add.w	lr, lr, #1
   11762:	ble.n	11772 <__hexnan+0xea>
   11764:	cmp	r0, r2
   11766:	bls.n	116c4 <__hexnan+0x3c>
   11768:	movs	r3, #0
   1176a:	str.w	r3, [r0, #-4]
   1176e:	movs	r1, #1
   11770:	subs	r0, #4
   11772:	ldr	r3, [r0, #0]
   11774:	and.w	r4, r4, #15
   11778:	orr.w	r4, r4, r3, lsl #4
   1177c:	str	r4, [r0, #0]
   1177e:	b.n	116c4 <__hexnan+0x3c>
   11780:	movs	r3, #0
   11782:	sub.w	r8, r0, #4
   11786:	str.w	r3, [r0, #-4]
   1178a:	mov	sl, lr
   1178c:	mov	r0, r8
   1178e:	mov	r1, r3
   11790:	b.n	116c4 <__hexnan+0x3c>
   11792:	cmp	r3, #41	; 0x29
   11794:	beq.n	117ce <__hexnan+0x146>
   11796:	movs	r0, #4
   11798:	add	sp, #20
   1179a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1179e:	ldr	r3, [sp, #12]
   117a0:	cmp	r3, #0
   117a2:	beq.n	1173e <__hexnan+0xb6>
   117a4:	ldr	r4, [sp, #4]
   117a6:	ldr	r3, [sp, #12]
   117a8:	ldr.w	r1, [r4, #-4]
   117ac:	rsb	r3, r3, #32
   117b0:	mov.w	r0, #4294967295
   117b4:	lsr.w	r3, r0, r3
   117b8:	ands	r3, r1
   117ba:	str.w	r3, [r4, #-4]
   117be:	b.n	11744 <__hexnan+0xbc>
   117c0:	movs	r3, #1
   117c2:	movs	r0, #5
   117c4:	str.w	r3, [ip]
   117c8:	add	sp, #20
   117ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117ce:	ldr	r3, [sp, #8]
   117d0:	adds	r5, #1
   117d2:	str	r5, [r3, #0]
   117d4:	cmp.w	lr, #0
   117d8:	bne.n	1171a <__hexnan+0x92>
   117da:	b.n	11796 <__hexnan+0x10e>
   117dc:	rsb	r3, r1, #8
   117e0:	lsls	r3, r3, #2
   117e2:	ldr	r5, [r0, #0]
   117e4:	rsb	r7, r3, #32
   117e8:	mov	r1, r0
   117ea:	ldr	r6, [r1, #4]
   117ec:	lsl.w	r4, r6, r7
   117f0:	orrs	r4, r5
   117f2:	lsr.w	r5, r6, r3
   117f6:	str	r4, [r1, #0]
   117f8:	str.w	r5, [r1, #4]!
   117fc:	cmp	r8, r1
   117fe:	bhi.n	117ea <__hexnan+0x162>
   11800:	b.n	11722 <__hexnan+0x9a>
   11802:	nop
   11804:	.word	0x000136ec

00011808 <iswspace>:
   11808:	cmp	r0, #255	; 0xff
   1180a:	bls.n	11810 <iswspace+0x8>
   1180c:	movs	r0, #0
   1180e:	bx	lr
   11810:	push	{r4, lr}
   11812:	mov	r4, r0
   11814:	bl	b708 <__locale_ctype_ptr>
   11818:	add	r0, r4
   1181a:	ldrb	r0, [r0, #1]
   1181c:	and.w	r0, r0, #8
   11820:	uxtb	r0, r0
   11822:	pop	{r4, pc}

00011824 <__localeconv_l>:
   11824:	adds	r0, #240	; 0xf0
   11826:	bx	lr

00011828 <_localeconv_r>:
   11828:	ldr	r2, [pc, #16]	; (1183c <_localeconv_r+0x14>)
   1182a:	ldr	r3, [pc, #20]	; (11840 <_localeconv_r+0x18>)
   1182c:	ldr	r2, [r2, #0]
   1182e:	ldr	r0, [r2, #52]	; 0x34
   11830:	cmp	r0, #0
   11832:	it	eq
   11834:	moveq	r0, r3
   11836:	adds	r0, #240	; 0xf0
   11838:	bx	lr
   1183a:	nop
   1183c:	.word	0x20013fc8
   11840:	.word	0x20013fcc

00011844 <_mbrtowc_r>:
   11844:	push	{r4, r5, r6, r7, lr}
   11846:	sub	sp, #12
   11848:	mov	r7, r0
   1184a:	ldr	r5, [sp, #32]
   1184c:	cbz	r2, 11874 <_mbrtowc_r+0x30>
   1184e:	ldr	r4, [pc, #68]	; (11894 <_mbrtowc_r+0x50>)
   11850:	ldr	r6, [pc, #68]	; (11898 <_mbrtowc_r+0x54>)
   11852:	ldr	r4, [r4, #0]
   11854:	ldr	r4, [r4, #52]	; 0x34
   11856:	str	r5, [sp, #0]
   11858:	cmp	r4, #0
   1185a:	it	eq
   1185c:	moveq	r4, r6
   1185e:	ldr.w	r4, [r4, #228]	; 0xe4
   11862:	blx	r4
   11864:	adds	r3, r0, #1
   11866:	bne.n	11870 <_mbrtowc_r+0x2c>
   11868:	movs	r2, #0
   1186a:	movs	r3, #138	; 0x8a
   1186c:	str	r2, [r5, #0]
   1186e:	str	r3, [r7, #0]
   11870:	add	sp, #12
   11872:	pop	{r4, r5, r6, r7, pc}
   11874:	ldr	r3, [pc, #28]	; (11894 <_mbrtowc_r+0x50>)
   11876:	ldr	r1, [pc, #32]	; (11898 <_mbrtowc_r+0x54>)
   11878:	ldr	r3, [r3, #0]
   1187a:	ldr	r3, [r3, #52]	; 0x34
   1187c:	str	r5, [sp, #0]
   1187e:	cmp	r3, #0
   11880:	it	eq
   11882:	moveq	r3, r1
   11884:	mov	r4, r2
   11886:	mov	r1, r4
   11888:	ldr	r2, [pc, #16]	; (1189c <_mbrtowc_r+0x58>)
   1188a:	ldr.w	r4, [r3, #228]	; 0xe4
   1188e:	movs	r3, #1
   11890:	blx	r4
   11892:	b.n	11864 <_mbrtowc_r+0x20>
   11894:	.word	0x20013fc8
   11898:	.word	0x20013fcc
   1189c:	.word	0x00012bfc

000118a0 <_Balloc>:
   118a0:	ldr	r3, [r0, #76]	; 0x4c
   118a2:	push	{r4, r5, r6, lr}
   118a4:	mov	r5, r0
   118a6:	mov	r4, r1
   118a8:	cbz	r3, 118be <_Balloc+0x1e>
   118aa:	ldr.w	r0, [r3, r4, lsl #2]
   118ae:	cbz	r0, 118d2 <_Balloc+0x32>
   118b0:	ldr	r2, [r0, #0]
   118b2:	str.w	r2, [r3, r4, lsl #2]
   118b6:	movs	r3, #0
   118b8:	str	r3, [r0, #16]
   118ba:	str	r3, [r0, #12]
   118bc:	pop	{r4, r5, r6, pc}
   118be:	movs	r2, #33	; 0x21
   118c0:	movs	r1, #4
   118c2:	bl	12a84 <_calloc_r>
   118c6:	str	r0, [r5, #76]	; 0x4c
   118c8:	mov	r3, r0
   118ca:	cmp	r0, #0
   118cc:	bne.n	118aa <_Balloc+0xa>
   118ce:	movs	r0, #0
   118d0:	pop	{r4, r5, r6, pc}
   118d2:	movs	r1, #1
   118d4:	lsl.w	r6, r1, r4
   118d8:	adds	r2, r6, #5
   118da:	mov	r0, r5
   118dc:	lsls	r2, r2, #2
   118de:	bl	12a84 <_calloc_r>
   118e2:	cmp	r0, #0
   118e4:	beq.n	118ce <_Balloc+0x2e>
   118e6:	str	r4, [r0, #4]
   118e8:	str	r6, [r0, #8]
   118ea:	b.n	118b6 <_Balloc+0x16>

000118ec <_Bfree>:
   118ec:	cbz	r1, 118fc <_Bfree+0x10>
   118ee:	ldr	r3, [r0, #76]	; 0x4c
   118f0:	ldr	r2, [r1, #4]
   118f2:	ldr.w	r0, [r3, r2, lsl #2]
   118f6:	str	r0, [r1, #0]
   118f8:	str.w	r1, [r3, r2, lsl #2]
   118fc:	bx	lr
   118fe:	nop

00011900 <__multadd>:
   11900:	push	{r4, r5, r6, r7, lr}
   11902:	ldr	r4, [r1, #16]
   11904:	sub	sp, #12
   11906:	mov	r5, r1
   11908:	mov	r6, r0
   1190a:	add.w	lr, r1, #20
   1190e:	movs	r7, #0
   11910:	ldr.w	r0, [lr]
   11914:	uxth	r1, r0
   11916:	mla	r1, r2, r1, r3
   1191a:	lsrs	r3, r1, #16
   1191c:	lsrs	r0, r0, #16
   1191e:	mla	r3, r2, r0, r3
   11922:	uxth	r1, r1
   11924:	adds	r7, #1
   11926:	add.w	r1, r1, r3, lsl #16
   1192a:	cmp	r4, r7
   1192c:	str.w	r1, [lr], #4
   11930:	mov.w	r3, r3, lsr #16
   11934:	bgt.n	11910 <__multadd+0x10>
   11936:	cbz	r3, 11948 <__multadd+0x48>
   11938:	ldr	r2, [r5, #8]
   1193a:	cmp	r4, r2
   1193c:	bge.n	1194e <__multadd+0x4e>
   1193e:	add.w	r2, r5, r4, lsl #2
   11942:	adds	r4, #1
   11944:	str	r3, [r2, #20]
   11946:	str	r4, [r5, #16]
   11948:	mov	r0, r5
   1194a:	add	sp, #12
   1194c:	pop	{r4, r5, r6, r7, pc}
   1194e:	ldr	r1, [r5, #4]
   11950:	str	r3, [sp, #4]
   11952:	adds	r1, #1
   11954:	mov	r0, r6
   11956:	bl	118a0 <_Balloc>
   1195a:	ldr	r2, [r5, #16]
   1195c:	adds	r2, #2
   1195e:	add.w	r1, r5, #12
   11962:	mov	r7, r0
   11964:	lsls	r2, r2, #2
   11966:	adds	r0, #12
   11968:	bl	8774 <memcpy>
   1196c:	ldr	r2, [r6, #76]	; 0x4c
   1196e:	ldr	r1, [r5, #4]
   11970:	ldr	r3, [sp, #4]
   11972:	ldr.w	r0, [r2, r1, lsl #2]
   11976:	str	r0, [r5, #0]
   11978:	str.w	r5, [r2, r1, lsl #2]
   1197c:	mov	r5, r7
   1197e:	b.n	1193e <__multadd+0x3e>

00011980 <__s2b>:
   11980:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11984:	ldr	r4, [pc, #140]	; (11a14 <__s2b+0x94>)
   11986:	ldr	r5, [sp, #32]
   11988:	mov	r7, r3
   1198a:	adds	r3, #8
   1198c:	smull	r4, lr, r4, r3
   11990:	asrs	r3, r3, #31
   11992:	rsb	lr, r3, lr, asr #1
   11996:	cmp.w	lr, #1
   1199a:	mov	r6, r0
   1199c:	mov	r4, r1
   1199e:	mov	r8, r2
   119a0:	ble.n	11a0e <__s2b+0x8e>
   119a2:	movs	r3, #1
   119a4:	movs	r1, #0
   119a6:	lsls	r3, r3, #1
   119a8:	cmp	lr, r3
   119aa:	add.w	r1, r1, #1
   119ae:	bgt.n	119a6 <__s2b+0x26>
   119b0:	mov	r0, r6
   119b2:	bl	118a0 <_Balloc>
   119b6:	movs	r3, #1
   119b8:	cmp.w	r8, #9
   119bc:	str	r5, [r0, #20]
   119be:	str	r3, [r0, #16]
   119c0:	ble.n	11a06 <__s2b+0x86>
   119c2:	add.w	r9, r4, #9
   119c6:	mov	r5, r9
   119c8:	add	r4, r8
   119ca:	ldrb.w	r3, [r5], #1
   119ce:	mov	r1, r0
   119d0:	subs	r3, #48	; 0x30
   119d2:	movs	r2, #10
   119d4:	mov	r0, r6
   119d6:	bl	11900 <__multadd>
   119da:	cmp	r5, r4
   119dc:	bne.n	119ca <__s2b+0x4a>
   119de:	add.w	r4, r9, r8
   119e2:	subs	r4, #8
   119e4:	cmp	r7, r8
   119e6:	ble.n	11a02 <__s2b+0x82>
   119e8:	rsb	r7, r8, r7
   119ec:	add	r7, r4
   119ee:	ldrb.w	r3, [r4], #1
   119f2:	mov	r1, r0
   119f4:	subs	r3, #48	; 0x30
   119f6:	movs	r2, #10
   119f8:	mov	r0, r6
   119fa:	bl	11900 <__multadd>
   119fe:	cmp	r7, r4
   11a00:	bne.n	119ee <__s2b+0x6e>
   11a02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11a06:	adds	r4, #10
   11a08:	mov.w	r8, #9
   11a0c:	b.n	119e4 <__s2b+0x64>
   11a0e:	movs	r1, #0
   11a10:	b.n	119b0 <__s2b+0x30>
   11a12:	nop
   11a14:	.word	0x38e38e39

00011a18 <__hi0bits>:
   11a18:	lsrs	r3, r0, #16
   11a1a:	lsls	r3, r3, #16
   11a1c:	cbnz	r3, 11a4c <__hi0bits+0x34>
   11a1e:	lsls	r0, r0, #16
   11a20:	movs	r3, #16
   11a22:	tst.w	r0, #4278190080	; 0xff000000
   11a26:	itt	eq
   11a28:	lsleq	r0, r0, #8
   11a2a:	addeq	r3, #8
   11a2c:	tst.w	r0, #4026531840	; 0xf0000000
   11a30:	itt	eq
   11a32:	lsleq	r0, r0, #4
   11a34:	addeq	r3, #4
   11a36:	tst.w	r0, #3221225472	; 0xc0000000
   11a3a:	itt	eq
   11a3c:	lsleq	r0, r0, #2
   11a3e:	addeq	r3, #2
   11a40:	cmp	r0, #0
   11a42:	blt.n	11a54 <__hi0bits+0x3c>
   11a44:	lsls	r2, r0, #1
   11a46:	bmi.n	11a50 <__hi0bits+0x38>
   11a48:	movs	r0, #32
   11a4a:	bx	lr
   11a4c:	movs	r3, #0
   11a4e:	b.n	11a22 <__hi0bits+0xa>
   11a50:	adds	r0, r3, #1
   11a52:	bx	lr
   11a54:	mov	r0, r3
   11a56:	bx	lr

00011a58 <__lo0bits>:
   11a58:	ldr	r3, [r0, #0]
   11a5a:	ands.w	r2, r3, #7
   11a5e:	beq.n	11a70 <__lo0bits+0x18>
   11a60:	lsls	r1, r3, #31
   11a62:	bmi.n	11aa6 <__lo0bits+0x4e>
   11a64:	lsls	r2, r3, #30
   11a66:	bmi.n	11aaa <__lo0bits+0x52>
   11a68:	lsrs	r3, r3, #2
   11a6a:	str	r3, [r0, #0]
   11a6c:	movs	r0, #2
   11a6e:	bx	lr
   11a70:	uxth	r1, r3
   11a72:	cbnz	r1, 11a78 <__lo0bits+0x20>
   11a74:	lsrs	r3, r3, #16
   11a76:	movs	r2, #16
   11a78:	tst.w	r3, #255	; 0xff
   11a7c:	itt	eq
   11a7e:	lsreq	r3, r3, #8
   11a80:	addeq	r2, #8
   11a82:	lsls	r1, r3, #28
   11a84:	itt	eq
   11a86:	lsreq	r3, r3, #4
   11a88:	addeq	r2, #4
   11a8a:	lsls	r1, r3, #30
   11a8c:	itt	eq
   11a8e:	lsreq	r3, r3, #2
   11a90:	addeq	r2, #2
   11a92:	lsls	r1, r3, #31
   11a94:	bmi.n	11aa0 <__lo0bits+0x48>
   11a96:	lsrs	r3, r3, #1
   11a98:	bne.n	11a9e <__lo0bits+0x46>
   11a9a:	movs	r0, #32
   11a9c:	bx	lr
   11a9e:	adds	r2, #1
   11aa0:	str	r3, [r0, #0]
   11aa2:	mov	r0, r2
   11aa4:	bx	lr
   11aa6:	movs	r0, #0
   11aa8:	bx	lr
   11aaa:	lsrs	r3, r3, #1
   11aac:	str	r3, [r0, #0]
   11aae:	movs	r0, #1
   11ab0:	bx	lr
   11ab2:	nop

00011ab4 <__i2b>:
   11ab4:	push	{r4, lr}
   11ab6:	mov	r4, r1
   11ab8:	movs	r1, #1
   11aba:	bl	118a0 <_Balloc>
   11abe:	movs	r2, #1
   11ac0:	str	r4, [r0, #20]
   11ac2:	str	r2, [r0, #16]
   11ac4:	pop	{r4, pc}
   11ac6:	nop

00011ac8 <__multiply>:
   11ac8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11acc:	ldr	r5, [r1, #16]
   11ace:	ldr	r7, [r2, #16]
   11ad0:	cmp	r5, r7
   11ad2:	sub	sp, #12
   11ad4:	mov	r4, r1
   11ad6:	mov	r6, r2
   11ad8:	bge.n	11ae4 <__multiply+0x1c>
   11ada:	mov	r2, r5
   11adc:	mov	r4, r6
   11ade:	mov	r5, r7
   11ae0:	mov	r6, r1
   11ae2:	mov	r7, r2
   11ae4:	ldr	r3, [r4, #8]
   11ae6:	ldr	r1, [r4, #4]
   11ae8:	add.w	r8, r5, r7
   11aec:	cmp	r8, r3
   11aee:	it	gt
   11af0:	addgt	r1, #1
   11af2:	bl	118a0 <_Balloc>
   11af6:	add.w	ip, r0, #20
   11afa:	add.w	r9, ip, r8, lsl #2
   11afe:	cmp	ip, r9
   11b00:	str	r0, [sp, #0]
   11b02:	bcs.n	11b10 <__multiply+0x48>
   11b04:	mov	r3, ip
   11b06:	movs	r1, #0
   11b08:	str.w	r1, [r3], #4
   11b0c:	cmp	r9, r3
   11b0e:	bhi.n	11b08 <__multiply+0x40>
   11b10:	add.w	r2, r6, #20
   11b14:	add.w	sl, r2, r7, lsl #2
   11b18:	add.w	r3, r4, #20
   11b1c:	cmp	r2, sl
   11b1e:	add.w	lr, r3, r5, lsl #2
   11b22:	bcs.n	11bce <__multiply+0x106>
   11b24:	str.w	r9, [sp, #4]
   11b28:	mov	r9, r3
   11b2a:	ldr.w	r3, [r2], #4
   11b2e:	uxth.w	fp, r3
   11b32:	cmp.w	fp, #0
   11b36:	beq.n	11b7a <__multiply+0xb2>
   11b38:	movs	r0, #0
   11b3a:	mov	r7, r9
   11b3c:	mov	r6, ip
   11b3e:	mov	r5, r0
   11b40:	b.n	11b44 <__multiply+0x7c>
   11b42:	mov	r6, r3
   11b44:	ldr.w	r4, [r7], #4
   11b48:	ldr	r0, [r6, #0]
   11b4a:	uxth	r1, r4
   11b4c:	uxth	r3, r0
   11b4e:	mla	r1, fp, r1, r3
   11b52:	lsrs	r4, r4, #16
   11b54:	lsrs	r0, r0, #16
   11b56:	adds	r3, r1, r5
   11b58:	mla	r0, fp, r4, r0
   11b5c:	add.w	r0, r0, r3, lsr #16
   11b60:	uxth	r1, r3
   11b62:	mov	r3, r6
   11b64:	orr.w	r1, r1, r0, lsl #16
   11b68:	cmp	lr, r7
   11b6a:	mov.w	r5, r0, lsr #16
   11b6e:	str.w	r1, [r3], #4
   11b72:	bhi.n	11b42 <__multiply+0x7a>
   11b74:	str	r5, [r6, #4]
   11b76:	ldr.w	r3, [r2, #-4]
   11b7a:	movs.w	fp, r3, lsr #16
   11b7e:	beq.n	11bc2 <__multiply+0xfa>
   11b80:	ldr.w	r3, [ip]
   11b84:	mov	r7, ip
   11b86:	mov	r0, r3
   11b88:	mov	r5, r9
   11b8a:	movs	r1, #0
   11b8c:	b.n	11b90 <__multiply+0xc8>
   11b8e:	mov	r7, r6
   11b90:	ldrh	r4, [r5, #0]
   11b92:	lsrs	r0, r0, #16
   11b94:	mla	r0, fp, r4, r0
   11b98:	add	r1, r0
   11b9a:	uxth	r4, r3
   11b9c:	mov	r6, r7
   11b9e:	orr.w	r3, r4, r1, lsl #16
   11ba2:	str.w	r3, [r6], #4
   11ba6:	ldr	r0, [r7, #4]
   11ba8:	ldr.w	r4, [r5], #4
   11bac:	uxth	r3, r0
   11bae:	lsrs	r4, r4, #16
   11bb0:	mla	r4, fp, r4, r3
   11bb4:	add.w	r3, r4, r1, lsr #16
   11bb8:	cmp	lr, r5
   11bba:	mov.w	r1, r3, lsr #16
   11bbe:	bhi.n	11b8e <__multiply+0xc6>
   11bc0:	str	r3, [r7, #4]
   11bc2:	cmp	sl, r2
   11bc4:	add.w	ip, ip, #4
   11bc8:	bhi.n	11b2a <__multiply+0x62>
   11bca:	ldr.w	r9, [sp, #4]
   11bce:	cmp.w	r8, #0
   11bd2:	ble.n	11bec <__multiply+0x124>
   11bd4:	ldr.w	r3, [r9, #-4]
   11bd8:	sub.w	r9, r9, #4
   11bdc:	cbz	r3, 11be6 <__multiply+0x11e>
   11bde:	b.n	11bec <__multiply+0x124>
   11be0:	ldr.w	r3, [r9, #-4]!
   11be4:	cbnz	r3, 11bec <__multiply+0x124>
   11be6:	subs.w	r8, r8, #1
   11bea:	bne.n	11be0 <__multiply+0x118>
   11bec:	ldr	r0, [sp, #0]
   11bee:	str.w	r8, [r0, #16]
   11bf2:	add	sp, #12
   11bf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011bf8 <__pow5mult>:
   11bf8:	ands.w	r3, r2, #3
   11bfc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c00:	mov	r4, r2
   11c02:	mov	r7, r0
   11c04:	bne.n	11c64 <__pow5mult+0x6c>
   11c06:	mov	r6, r1
   11c08:	asrs	r4, r4, #2
   11c0a:	beq.n	11c46 <__pow5mult+0x4e>
   11c0c:	ldr	r5, [r7, #72]	; 0x48
   11c0e:	cbz	r5, 11c76 <__pow5mult+0x7e>
   11c10:	lsls	r3, r4, #31
   11c12:	mov.w	r8, #0
   11c16:	bmi.n	11c26 <__pow5mult+0x2e>
   11c18:	asrs	r4, r4, #1
   11c1a:	beq.n	11c46 <__pow5mult+0x4e>
   11c1c:	ldr	r0, [r5, #0]
   11c1e:	cbz	r0, 11c4c <__pow5mult+0x54>
   11c20:	mov	r5, r0
   11c22:	lsls	r3, r4, #31
   11c24:	bpl.n	11c18 <__pow5mult+0x20>
   11c26:	mov	r2, r5
   11c28:	mov	r1, r6
   11c2a:	mov	r0, r7
   11c2c:	bl	11ac8 <__multiply>
   11c30:	cbz	r6, 11c60 <__pow5mult+0x68>
   11c32:	ldr	r2, [r6, #4]
   11c34:	ldr	r3, [r7, #76]	; 0x4c
   11c36:	asrs	r4, r4, #1
   11c38:	ldr.w	r1, [r3, r2, lsl #2]
   11c3c:	str	r1, [r6, #0]
   11c3e:	str.w	r6, [r3, r2, lsl #2]
   11c42:	mov	r6, r0
   11c44:	bne.n	11c1c <__pow5mult+0x24>
   11c46:	mov	r0, r6
   11c48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c4c:	mov	r2, r5
   11c4e:	mov	r1, r5
   11c50:	mov	r0, r7
   11c52:	bl	11ac8 <__multiply>
   11c56:	str	r0, [r5, #0]
   11c58:	str.w	r8, [r0]
   11c5c:	mov	r5, r0
   11c5e:	b.n	11c22 <__pow5mult+0x2a>
   11c60:	mov	r6, r0
   11c62:	b.n	11c18 <__pow5mult+0x20>
   11c64:	subs	r2, r3, #1
   11c66:	ldr	r5, [pc, #44]	; (11c94 <__pow5mult+0x9c>)
   11c68:	movs	r3, #0
   11c6a:	ldr.w	r2, [r5, r2, lsl #2]
   11c6e:	bl	11900 <__multadd>
   11c72:	mov	r6, r0
   11c74:	b.n	11c08 <__pow5mult+0x10>
   11c76:	movs	r1, #1
   11c78:	mov	r0, r7
   11c7a:	bl	118a0 <_Balloc>
   11c7e:	movw	r1, #625	; 0x271
   11c82:	movs	r2, #1
   11c84:	movs	r3, #0
   11c86:	str	r1, [r0, #20]
   11c88:	str	r2, [r0, #16]
   11c8a:	mov	r5, r0
   11c8c:	str	r0, [r7, #72]	; 0x48
   11c8e:	str	r3, [r0, #0]
   11c90:	b.n	11c10 <__pow5mult+0x18>
   11c92:	nop
   11c94:	.word	0x000138e0

00011c98 <__lshift>:
   11c98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c9c:	mov	r9, r2
   11c9e:	ldr	r2, [r1, #16]
   11ca0:	ldr	r3, [r1, #8]
   11ca2:	mov.w	r4, r9, asr #5
   11ca6:	add.w	r8, r4, r2
   11caa:	add.w	r5, r8, #1
   11cae:	cmp	r5, r3
   11cb0:	mov	r6, r1
   11cb2:	mov	sl, r0
   11cb4:	ldr	r1, [r1, #4]
   11cb6:	ble.n	11cc2 <__lshift+0x2a>
   11cb8:	lsls	r3, r3, #1
   11cba:	cmp	r5, r3
   11cbc:	add.w	r1, r1, #1
   11cc0:	bgt.n	11cb8 <__lshift+0x20>
   11cc2:	mov	r0, sl
   11cc4:	bl	118a0 <_Balloc>
   11cc8:	cmp	r4, #0
   11cca:	add.w	r2, r0, #20
   11cce:	ble.n	11d42 <__lshift+0xaa>
   11cd0:	add.w	r3, r2, r4, lsl #2
   11cd4:	movs	r1, #0
   11cd6:	str.w	r1, [r2], #4
   11cda:	cmp	r3, r2
   11cdc:	bne.n	11cd6 <__lshift+0x3e>
   11cde:	ldr	r4, [r6, #16]
   11ce0:	add.w	r1, r6, #20
   11ce4:	ands.w	r9, r9, #31
   11ce8:	add.w	lr, r1, r4, lsl #2
   11cec:	beq.n	11d32 <__lshift+0x9a>
   11cee:	rsb	r2, r9, #32
   11cf2:	movs	r4, #0
   11cf4:	ldr	r7, [r1, #0]
   11cf6:	lsl.w	ip, r7, r9
   11cfa:	orr.w	r4, ip, r4
   11cfe:	mov	ip, r3
   11d00:	str.w	r4, [r3], #4
   11d04:	ldr.w	r4, [r1], #4
   11d08:	cmp	lr, r1
   11d0a:	lsr.w	r4, r4, r2
   11d0e:	bhi.n	11cf4 <__lshift+0x5c>
   11d10:	str.w	r4, [ip, #4]
   11d14:	cbz	r4, 11d1a <__lshift+0x82>
   11d16:	add.w	r5, r8, #2
   11d1a:	ldr.w	r3, [sl, #76]	; 0x4c
   11d1e:	ldr	r2, [r6, #4]
   11d20:	subs	r5, #1
   11d22:	ldr.w	r1, [r3, r2, lsl #2]
   11d26:	str	r5, [r0, #16]
   11d28:	str	r1, [r6, #0]
   11d2a:	str.w	r6, [r3, r2, lsl #2]
   11d2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11d32:	subs	r3, #4
   11d34:	ldr.w	r2, [r1], #4
   11d38:	str.w	r2, [r3, #4]!
   11d3c:	cmp	lr, r1
   11d3e:	bhi.n	11d34 <__lshift+0x9c>
   11d40:	b.n	11d1a <__lshift+0x82>
   11d42:	mov	r3, r2
   11d44:	b.n	11cde <__lshift+0x46>
   11d46:	nop

00011d48 <__mcmp>:
   11d48:	ldr	r2, [r0, #16]
   11d4a:	ldr	r3, [r1, #16]
   11d4c:	subs	r2, r2, r3
   11d4e:	bne.n	11d78 <__mcmp+0x30>
   11d50:	lsls	r3, r3, #2
   11d52:	adds	r0, #20
   11d54:	adds	r1, #20
   11d56:	add	r1, r3
   11d58:	push	{r4}
   11d5a:	add	r3, r0
   11d5c:	b.n	11d62 <__mcmp+0x1a>
   11d5e:	cmp	r0, r3
   11d60:	bcs.n	11d7c <__mcmp+0x34>
   11d62:	ldr.w	r4, [r3, #-4]!
   11d66:	ldr.w	r2, [r1, #-4]!
   11d6a:	cmp	r4, r2
   11d6c:	beq.n	11d5e <__mcmp+0x16>
   11d6e:	bcc.n	11d84 <__mcmp+0x3c>
   11d70:	movs	r0, #1
   11d72:	ldr.w	r4, [sp], #4
   11d76:	bx	lr
   11d78:	mov	r0, r2
   11d7a:	bx	lr
   11d7c:	movs	r0, #0
   11d7e:	ldr.w	r4, [sp], #4
   11d82:	bx	lr
   11d84:	mov.w	r0, #4294967295
   11d88:	b.n	11d72 <__mcmp+0x2a>
   11d8a:	nop

00011d8c <__mdiff>:
   11d8c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11d90:	ldr	r3, [r1, #16]
   11d92:	mov	r7, r1
   11d94:	ldr	r1, [r2, #16]
   11d96:	subs	r3, r3, r1
   11d98:	cmp	r3, #0
   11d9a:	mov	r8, r2
   11d9c:	bne.n	11dce <__mdiff+0x42>
   11d9e:	lsls	r1, r1, #2
   11da0:	add.w	r2, r7, #20
   11da4:	add.w	r5, r8, #20
   11da8:	adds	r3, r2, r1
   11daa:	add	r1, r5
   11dac:	b.n	11db2 <__mdiff+0x26>
   11dae:	cmp	r2, r3
   11db0:	bcs.n	11e70 <__mdiff+0xe4>
   11db2:	ldr.w	r6, [r3, #-4]!
   11db6:	ldr.w	r4, [r1, #-4]!
   11dba:	cmp	r6, r4
   11dbc:	beq.n	11dae <__mdiff+0x22>
   11dbe:	bcs.n	11e82 <__mdiff+0xf6>
   11dc0:	mov	r3, r7
   11dc2:	mov	r4, r2
   11dc4:	mov	r7, r8
   11dc6:	mov.w	r9, #1
   11dca:	mov	r8, r3
   11dcc:	b.n	11ddc <__mdiff+0x50>
   11dce:	blt.n	11e8c <__mdiff+0x100>
   11dd0:	add.w	r5, r7, #20
   11dd4:	add.w	r4, r2, #20
   11dd8:	mov.w	r9, #0
   11ddc:	ldr	r1, [r7, #4]
   11dde:	bl	118a0 <_Balloc>
   11de2:	ldr.w	r3, [r8, #16]
   11de6:	ldr	r6, [r7, #16]
   11de8:	str.w	r9, [r0, #12]
   11dec:	add.w	ip, r4, r3, lsl #2
   11df0:	mov	lr, r4
   11df2:	add.w	r7, r5, r6, lsl #2
   11df6:	add.w	r4, r0, #20
   11dfa:	movs	r3, #0
   11dfc:	ldr.w	r1, [lr], #4
   11e00:	ldr.w	r8, [r5], #4
   11e04:	uxth	r2, r1
   11e06:	uxtah	r3, r3, r8
   11e0a:	lsrs	r1, r1, #16
   11e0c:	subs	r2, r3, r2
   11e0e:	rsb	r3, r1, r8, lsr #16
   11e12:	add.w	r3, r3, r2, asr #16
   11e16:	uxth	r2, r2
   11e18:	orr.w	r2, r2, r3, lsl #16
   11e1c:	cmp	ip, lr
   11e1e:	str.w	r2, [r4], #4
   11e22:	mov.w	r3, r3, asr #16
   11e26:	bhi.n	11dfc <__mdiff+0x70>
   11e28:	cmp	r7, r5
   11e2a:	bls.n	11e5c <__mdiff+0xd0>
   11e2c:	mov	ip, r4
   11e2e:	mov	r1, r5
   11e30:	ldr.w	lr, [r1], #4
   11e34:	uxtah	r2, r3, lr
   11e38:	asrs	r3, r2, #16
   11e3a:	add.w	r3, r3, lr, lsr #16
   11e3e:	uxth	r2, r2
   11e40:	orr.w	r2, r2, r3, lsl #16
   11e44:	cmp	r7, r1
   11e46:	str.w	r2, [ip], #4
   11e4a:	mov.w	r3, r3, asr #16
   11e4e:	bhi.n	11e30 <__mdiff+0xa4>
   11e50:	mvns	r5, r5
   11e52:	add	r5, r7
   11e54:	bic.w	r5, r5, #3
   11e58:	adds	r5, #4
   11e5a:	add	r4, r5
   11e5c:	subs	r4, #4
   11e5e:	cbnz	r2, 11e6a <__mdiff+0xde>
   11e60:	ldr.w	r3, [r4, #-4]!
   11e64:	subs	r6, #1
   11e66:	cmp	r3, #0
   11e68:	beq.n	11e60 <__mdiff+0xd4>
   11e6a:	str	r6, [r0, #16]
   11e6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11e70:	movs	r1, #0
   11e72:	bl	118a0 <_Balloc>
   11e76:	movs	r2, #1
   11e78:	movs	r3, #0
   11e7a:	str	r2, [r0, #16]
   11e7c:	str	r3, [r0, #20]
   11e7e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11e82:	mov	r4, r5
   11e84:	mov.w	r9, #0
   11e88:	mov	r5, r2
   11e8a:	b.n	11ddc <__mdiff+0x50>
   11e8c:	mov	r3, r7
   11e8e:	add.w	r4, r7, #20
   11e92:	add.w	r5, r8, #20
   11e96:	mov	r7, r8
   11e98:	mov.w	r9, #1
   11e9c:	mov	r8, r3
   11e9e:	b.n	11ddc <__mdiff+0x50>

00011ea0 <__ulp>:
   11ea0:	ldr	r3, [pc, #76]	; (11ef0 <__ulp+0x50>)
   11ea2:	vmov	r2, s1
   11ea6:	ands	r2, r3
   11ea8:	sub.w	r3, r2, #54525952	; 0x3400000
   11eac:	cmp	r3, #0
   11eae:	ble.n	11eba <__ulp+0x1a>
   11eb0:	movs	r0, #0
   11eb2:	mov	r1, r3
   11eb4:	vmov	d0, r0, r1
   11eb8:	bx	lr
   11eba:	negs	r3, r3
   11ebc:	asrs	r3, r3, #20
   11ebe:	cmp	r3, #19
   11ec0:	ble.n	11ede <__ulp+0x3e>
   11ec2:	subs	r3, #20
   11ec4:	cmp	r3, #30
   11ec6:	ittte	le
   11ec8:	rsble	r3, r3, #31
   11ecc:	movle	r2, #1
   11ece:	lslle.w	r3, r2, r3
   11ed2:	movgt	r3, #1
   11ed4:	movs	r1, #0
   11ed6:	mov	r0, r3
   11ed8:	vmov	d0, r0, r1
   11edc:	bx	lr
   11ede:	mov.w	r2, #524288	; 0x80000
   11ee2:	movs	r0, #0
   11ee4:	asr.w	r1, r2, r3
   11ee8:	vmov	d0, r0, r1
   11eec:	bx	lr
   11eee:	nop
   11ef0:	.word	0x7ff00000

00011ef4 <__b2d>:
   11ef4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ef8:	ldr	r6, [r0, #16]
   11efa:	add.w	r8, r0, #20
   11efe:	add.w	r6, r8, r6, lsl #2
   11f02:	ldr.w	r7, [r6, #-4]
   11f06:	mov	r0, r7
   11f08:	bl	11a18 <__hi0bits>
   11f0c:	rsb	r3, r0, #32
   11f10:	cmp	r0, #10
   11f12:	str	r3, [r1, #0]
   11f14:	sub.w	r3, r6, #4
   11f18:	bgt.n	11f4c <__b2d+0x58>
   11f1a:	cmp	r8, r3
   11f1c:	rsb	r2, r0, #11
   11f20:	it	cc
   11f22:	ldrcc.w	r3, [r6, #-8]
   11f26:	lsr.w	r1, r7, r2
   11f2a:	add.w	r0, r0, #21
   11f2e:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   11f32:	ite	cc
   11f34:	lsrcc	r3, r2
   11f36:	movcs	r3, #0
   11f38:	lsl.w	r0, r7, r0
   11f3c:	orr.w	r5, r5, #3145728	; 0x300000
   11f40:	orr.w	r4, r0, r3
   11f44:	vmov	d0, r4, r5
   11f48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f4c:	cmp	r8, r3
   11f4e:	bcs.n	11f92 <__b2d+0x9e>
   11f50:	subs.w	r3, r0, #11
   11f54:	ldr.w	r2, [r6, #-8]
   11f58:	beq.n	11f98 <__b2d+0xa4>
   11f5a:	lsl.w	r0, r7, r3
   11f5e:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   11f62:	rsb	lr, r3, #32
   11f66:	sub.w	r1, r6, #8
   11f6a:	orr.w	r7, r7, #3145728	; 0x300000
   11f6e:	lsr.w	r0, r2, lr
   11f72:	cmp	r8, r1
   11f74:	orr.w	r5, r7, r0
   11f78:	bcs.n	11fbc <__b2d+0xc8>
   11f7a:	ldr.w	r1, [r6, #-12]
   11f7e:	lsl.w	r0, r2, r3
   11f82:	lsr.w	r3, r1, lr
   11f86:	orrs	r0, r3
   11f88:	mov	r4, r0
   11f8a:	vmov	d0, r4, r5
   11f8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f92:	subs	r0, #11
   11f94:	bne.n	11faa <__b2d+0xb6>
   11f96:	mov	r2, r0
   11f98:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   11f9c:	orr.w	r5, r5, #3145728	; 0x300000
   11fa0:	mov	r4, r2
   11fa2:	vmov	d0, r4, r5
   11fa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11faa:	lsl.w	r0, r7, r0
   11fae:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   11fb2:	movs	r0, #0
   11fb4:	orr.w	r5, r5, #3145728	; 0x300000
   11fb8:	mov	r4, r0
   11fba:	b.n	11f8a <__b2d+0x96>
   11fbc:	lsl.w	r0, r2, r3
   11fc0:	mov	r4, r0
   11fc2:	b.n	11f8a <__b2d+0x96>

00011fc4 <__d2b>:
   11fc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11fc8:	vmov	r6, r7, d0
   11fcc:	sub	sp, #12
   11fce:	mov	r8, r1
   11fd0:	movs	r1, #1
   11fd2:	mov	r4, r7
   11fd4:	ubfx	r5, r7, #20, #11
   11fd8:	mov	r7, r2
   11fda:	bl	118a0 <_Balloc>
   11fde:	ubfx	r4, r4, #0, #20
   11fe2:	mov	r9, r0
   11fe4:	cbz	r5, 11fea <__d2b+0x26>
   11fe6:	orr.w	r4, r4, #1048576	; 0x100000
   11fea:	str	r4, [sp, #4]
   11fec:	cbz	r6, 12036 <__d2b+0x72>
   11fee:	add	r0, sp, #8
   11ff0:	str.w	r6, [r0, #-8]!
   11ff4:	bl	11a58 <__lo0bits>
   11ff8:	cmp	r0, #0
   11ffa:	bne.n	12066 <__d2b+0xa2>
   11ffc:	ldmia.w	sp, {r2, r3}
   12000:	str.w	r2, [r9, #20]
   12004:	cmp	r3, #0
   12006:	ite	eq
   12008:	moveq	r1, #1
   1200a:	movne	r1, #2
   1200c:	str.w	r3, [r9, #24]
   12010:	str.w	r1, [r9, #16]
   12014:	cbnz	r5, 1204e <__d2b+0x8a>
   12016:	add.w	r3, r9, r1, lsl #2
   1201a:	subw	r0, r0, #1074	; 0x432
   1201e:	str.w	r0, [r8]
   12022:	ldr	r0, [r3, #16]
   12024:	bl	11a18 <__hi0bits>
   12028:	rsb	r0, r0, r1, lsl #5
   1202c:	str	r0, [r7, #0]
   1202e:	mov	r0, r9
   12030:	add	sp, #12
   12032:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12036:	add	r0, sp, #4
   12038:	bl	11a58 <__lo0bits>
   1203c:	ldr	r3, [sp, #4]
   1203e:	str.w	r3, [r9, #20]
   12042:	movs	r1, #1
   12044:	adds	r0, #32
   12046:	str.w	r1, [r9, #16]
   1204a:	cmp	r5, #0
   1204c:	beq.n	12016 <__d2b+0x52>
   1204e:	subw	r5, r5, #1075	; 0x433
   12052:	add	r5, r0
   12054:	rsb	r0, r0, #53	; 0x35
   12058:	str.w	r5, [r8]
   1205c:	str	r0, [r7, #0]
   1205e:	mov	r0, r9
   12060:	add	sp, #12
   12062:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12066:	ldmia.w	sp, {r2, r3}
   1206a:	rsb	r1, r0, #32
   1206e:	lsl.w	r1, r3, r1
   12072:	orrs	r2, r1
   12074:	lsrs	r3, r0
   12076:	str	r3, [sp, #4]
   12078:	str.w	r2, [r9, #20]
   1207c:	b.n	12004 <__d2b+0x40>
   1207e:	nop

00012080 <__ratio>:
   12080:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12084:	sub	sp, #12
   12086:	mov	r8, r1
   12088:	mov	r1, sp
   1208a:	mov	r9, r0
   1208c:	bl	11ef4 <__b2d>
   12090:	mov	r0, r8
   12092:	add	r1, sp, #4
   12094:	vmov	r4, r5, d0
   12098:	bl	11ef4 <__b2d>
   1209c:	ldmia.w	sp, {r1, r3}
   120a0:	ldr.w	r2, [r9, #16]
   120a4:	ldr.w	r0, [r8, #16]
   120a8:	subs	r1, r1, r3
   120aa:	subs	r0, r2, r0
   120ac:	add.w	r3, r1, r0, lsl #5
   120b0:	cmp	r3, #0
   120b2:	vmov	r6, r7, d0
   120b6:	ble.n	120d4 <__ratio+0x54>
   120b8:	add.w	r1, r5, r3, lsl #20
   120bc:	mov	r5, r1
   120be:	mov	r2, r6
   120c0:	mov	r3, r7
   120c2:	mov	r0, r4
   120c4:	mov	r1, r5
   120c6:	bl	ac84 <__aeabi_ddiv>
   120ca:	vmov	d0, r0, r1
   120ce:	add	sp, #12
   120d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   120d4:	sub.w	r9, r7, r3, lsl #20
   120d8:	vmov	r6, s0
   120dc:	mov	r7, r9
   120de:	b.n	120be <__ratio+0x3e>

000120e0 <__copybits>:
   120e0:	push	{r4, r5, r6}
   120e2:	ldr	r4, [r2, #16]
   120e4:	add.w	r3, r2, #20
   120e8:	subs	r1, #1
   120ea:	asrs	r6, r1, #5
   120ec:	add.w	r4, r3, r4, lsl #2
   120f0:	adds	r6, #1
   120f2:	cmp	r3, r4
   120f4:	add.w	r6, r0, r6, lsl #2
   120f8:	bcs.n	12114 <__copybits+0x34>
   120fa:	subs	r1, r0, #4
   120fc:	ldr.w	r5, [r3], #4
   12100:	str.w	r5, [r1, #4]!
   12104:	cmp	r4, r3
   12106:	bhi.n	120fc <__copybits+0x1c>
   12108:	subs	r3, r4, r2
   1210a:	subs	r3, #21
   1210c:	bic.w	r3, r3, #3
   12110:	adds	r3, #4
   12112:	add	r0, r3
   12114:	cmp	r6, r0
   12116:	bls.n	12122 <__copybits+0x42>
   12118:	movs	r3, #0
   1211a:	str.w	r3, [r0], #4
   1211e:	cmp	r6, r0
   12120:	bhi.n	1211a <__copybits+0x3a>
   12122:	pop	{r4, r5, r6}
   12124:	bx	lr
   12126:	nop

00012128 <__any_on>:
   12128:	ldr	r3, [r0, #16]
   1212a:	asrs	r2, r1, #5
   1212c:	cmp	r3, r2
   1212e:	push	{r4}
   12130:	add.w	r4, r0, #20
   12134:	bge.n	12158 <__any_on+0x30>
   12136:	add.w	r3, r4, r3, lsl #2
   1213a:	cmp	r4, r3
   1213c:	bcs.n	12182 <__any_on+0x5a>
   1213e:	ldr.w	r0, [r3, #-4]
   12142:	subs	r3, #4
   12144:	cbz	r0, 1214e <__any_on+0x26>
   12146:	b.n	12174 <__any_on+0x4c>
   12148:	ldr.w	r2, [r3, #-4]!
   1214c:	cbnz	r2, 12174 <__any_on+0x4c>
   1214e:	cmp	r4, r3
   12150:	bcc.n	12148 <__any_on+0x20>
   12152:	ldr.w	r4, [sp], #4
   12156:	bx	lr
   12158:	ble.n	1217c <__any_on+0x54>
   1215a:	ands.w	r1, r1, #31
   1215e:	beq.n	1217c <__any_on+0x54>
   12160:	ldr.w	r0, [r4, r2, lsl #2]
   12164:	lsr.w	r3, r0, r1
   12168:	lsl.w	r1, r3, r1
   1216c:	cmp	r0, r1
   1216e:	add.w	r3, r4, r2, lsl #2
   12172:	beq.n	1213a <__any_on+0x12>
   12174:	movs	r0, #1
   12176:	ldr.w	r4, [sp], #4
   1217a:	bx	lr
   1217c:	add.w	r3, r4, r2, lsl #2
   12180:	b.n	1213a <__any_on+0x12>
   12182:	movs	r0, #0
   12184:	b.n	12152 <__any_on+0x2a>
   12186:	nop

00012188 <__sccl>:
   12188:	push	{r4, r5, r6}
   1218a:	ldrb	r5, [r1, #0]
   1218c:	cmp	r5, #94	; 0x5e
   1218e:	beq.n	121f0 <__sccl+0x68>
   12190:	movs	r2, #0
   12192:	adds	r1, #1
   12194:	mov	r6, r2
   12196:	subs	r3, r0, #1
   12198:	add.w	r4, r0, #255	; 0xff
   1219c:	strb.w	r2, [r3, #1]!
   121a0:	cmp	r3, r4
   121a2:	bne.n	1219c <__sccl+0x14>
   121a4:	cbz	r5, 121c8 <__sccl+0x40>
   121a6:	eor.w	r2, r6, #1
   121aa:	strb	r2, [r0, r5]
   121ac:	adds	r4, r1, #1
   121ae:	ldrb.w	r3, [r4, #-1]
   121b2:	cmp	r3, #45	; 0x2d
   121b4:	beq.n	121d4 <__sccl+0x4c>
   121b6:	cmp	r3, #93	; 0x5d
   121b8:	beq.n	121ce <__sccl+0x46>
   121ba:	cbz	r3, 121c2 <__sccl+0x3a>
   121bc:	mov	r5, r3
   121be:	mov	r1, r4
   121c0:	b.n	121aa <__sccl+0x22>
   121c2:	mov	r0, r1
   121c4:	pop	{r4, r5, r6}
   121c6:	bx	lr
   121c8:	subs	r0, r1, #1
   121ca:	pop	{r4, r5, r6}
   121cc:	bx	lr
   121ce:	mov	r0, r4
   121d0:	pop	{r4, r5, r6}
   121d2:	bx	lr
   121d4:	ldrb	r6, [r1, #1]
   121d6:	cmp	r6, #93	; 0x5d
   121d8:	beq.n	121bc <__sccl+0x34>
   121da:	cmp	r5, r6
   121dc:	bgt.n	121bc <__sccl+0x34>
   121de:	adds	r1, #2
   121e0:	adds	r3, r0, r5
   121e2:	adds	r5, #1
   121e4:	cmp	r6, r5
   121e6:	strb.w	r2, [r3, #1]!
   121ea:	bgt.n	121e2 <__sccl+0x5a>
   121ec:	adds	r4, #2
   121ee:	b.n	121ae <__sccl+0x26>
   121f0:	movs	r2, #1
   121f2:	ldrb	r5, [r1, #1]
   121f4:	mov	r6, r2
   121f6:	adds	r1, #2
   121f8:	b.n	12196 <__sccl+0xe>
   121fa:	nop

000121fc <_strtoll_l.isra.0>:
   121fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12200:	sub	sp, #20
   12202:	mov	sl, r3
   12204:	str	r1, [sp, #8]
   12206:	str	r0, [sp, #12]
   12208:	str	r2, [sp, #4]
   1220a:	mov	r7, r1
   1220c:	ldr	r6, [sp, #56]	; 0x38
   1220e:	b.n	12212 <_strtoll_l.isra.0+0x16>
   12210:	mov	r7, r5
   12212:	mov	r5, r7
   12214:	mov	r0, r6
   12216:	ldrb.w	r4, [r5], #1
   1221a:	bl	b700 <__locale_ctype_ptr_l>
   1221e:	add	r0, r4
   12220:	ldrb	r3, [r0, #1]
   12222:	and.w	r3, r3, #8
   12226:	and.w	r2, r3, #255	; 0xff
   1222a:	cmp	r3, #0
   1222c:	bne.n	12210 <_strtoll_l.isra.0+0x14>
   1222e:	cmp	r4, #45	; 0x2d
   12230:	beq.w	1233a <_strtoll_l.isra.0+0x13e>
   12234:	cmp	r4, #43	; 0x2b
   12236:	it	eq
   12238:	ldrbeq	r4, [r7, #1]
   1223a:	str	r2, [sp, #0]
   1223c:	it	eq
   1223e:	addeq	r5, r7, #2
   12240:	cmp.w	sl, #0
   12244:	beq.n	12260 <_strtoll_l.isra.0+0x64>
   12246:	cmp.w	sl, #16
   1224a:	beq.w	12378 <_strtoll_l.isra.0+0x17c>
   1224e:	ldr	r3, [sp, #0]
   12250:	mov	r6, sl
   12252:	asrs	r7, r6, #31
   12254:	cbnz	r3, 12272 <_strtoll_l.isra.0+0x76>
   12256:	mov.w	r8, #4294967295
   1225a:	mvn.w	r9, #2147483648	; 0x80000000
   1225e:	b.n	1227a <_strtoll_l.isra.0+0x7e>
   12260:	cmp	r4, #48	; 0x30
   12262:	beq.n	12364 <_strtoll_l.isra.0+0x168>
   12264:	movs	r6, #10
   12266:	movs	r7, #0
   12268:	mov.w	sl, #10
   1226c:	ldr	r3, [sp, #0]
   1226e:	cmp	r3, #0
   12270:	beq.n	12256 <_strtoll_l.isra.0+0x5a>
   12272:	mov.w	r8, #0
   12276:	mov.w	r9, #2147483648	; 0x80000000
   1227a:	mov	r2, r6
   1227c:	mov	r3, r7
   1227e:	mov	r0, r8
   12280:	mov	r1, r9
   12282:	bl	b2dc <__aeabi_uldivmod>
   12286:	mov	r3, r7
   12288:	mov	fp, r2
   1228a:	mov	r0, r8
   1228c:	mov	r2, r6
   1228e:	mov	r1, r9
   12290:	bl	b2dc <__aeabi_uldivmod>
   12294:	mov.w	lr, #0
   12298:	movs	r2, #0
   1229a:	movs	r3, #0
   1229c:	b.n	122be <_strtoll_l.isra.0+0xc2>
   1229e:	beq.n	1232c <_strtoll_l.isra.0+0x130>
   122a0:	mul.w	r4, r2, r7
   122a4:	mla	r4, r6, r3, r4
   122a8:	umull	r2, r3, r2, r6
   122ac:	add	r3, r4
   122ae:	adds.w	r2, r2, ip
   122b2:	adc.w	r3, r3, ip, asr #31
   122b6:	mov.w	lr, #1
   122ba:	ldrb.w	r4, [r5], #1
   122be:	sub.w	ip, r4, #48	; 0x30
   122c2:	cmp.w	ip, #9
   122c6:	bls.n	122d6 <_strtoll_l.isra.0+0xda>
   122c8:	sub.w	ip, r4, #65	; 0x41
   122cc:	cmp.w	ip, #25
   122d0:	bhi.n	122ee <_strtoll_l.isra.0+0xf2>
   122d2:	sub.w	ip, r4, #55	; 0x37
   122d6:	cmp	sl, ip
   122d8:	ble.n	12300 <_strtoll_l.isra.0+0x104>
   122da:	cmp.w	lr, #4294967295
   122de:	beq.n	122ba <_strtoll_l.isra.0+0xbe>
   122e0:	cmp	r1, r3
   122e2:	it	eq
   122e4:	cmpeq	r0, r2
   122e6:	bcs.n	1229e <_strtoll_l.isra.0+0xa2>
   122e8:	mov.w	lr, #4294967295
   122ec:	b.n	122ba <_strtoll_l.isra.0+0xbe>
   122ee:	sub.w	ip, r4, #97	; 0x61
   122f2:	cmp.w	ip, #25
   122f6:	bhi.n	12300 <_strtoll_l.isra.0+0x104>
   122f8:	sub.w	ip, r4, #87	; 0x57
   122fc:	cmp	sl, ip
   122fe:	bgt.n	122da <_strtoll_l.isra.0+0xde>
   12300:	cmp.w	lr, #4294967295
   12304:	beq.n	12344 <_strtoll_l.isra.0+0x148>
   12306:	ldr	r1, [sp, #0]
   12308:	cbz	r1, 12310 <_strtoll_l.isra.0+0x114>
   1230a:	negs	r2, r2
   1230c:	sbc.w	r3, r3, r3, lsl #1
   12310:	ldr	r1, [sp, #4]
   12312:	cmp	r1, #0
   12314:	beq.n	1239c <_strtoll_l.isra.0+0x1a0>
   12316:	cmp.w	lr, #0
   1231a:	bne.n	1235c <_strtoll_l.isra.0+0x160>
   1231c:	ldr	r5, [sp, #8]
   1231e:	mov	r0, r2
   12320:	mov	r1, r3
   12322:	ldr	r3, [sp, #4]
   12324:	str	r5, [r3, #0]
   12326:	add	sp, #20
   12328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1232c:	cmp	fp, ip
   1232e:	bge.n	122a0 <_strtoll_l.isra.0+0xa4>
   12330:	mov	r2, r0
   12332:	mov	r3, r1
   12334:	mov.w	lr, #4294967295
   12338:	b.n	122ba <_strtoll_l.isra.0+0xbe>
   1233a:	movs	r3, #1
   1233c:	adds	r5, r7, #2
   1233e:	ldrb	r4, [r7, #1]
   12340:	str	r3, [sp, #0]
   12342:	b.n	12240 <_strtoll_l.isra.0+0x44>
   12344:	ldr	r3, [sp, #0]
   12346:	cbnz	r3, 12394 <_strtoll_l.isra.0+0x198>
   12348:	mov.w	r0, #4294967295
   1234c:	mvn.w	r1, #2147483648	; 0x80000000
   12350:	ldr	r2, [sp, #12]
   12352:	movs	r3, #34	; 0x22
   12354:	str	r3, [r2, #0]
   12356:	ldr	r3, [sp, #4]
   12358:	cbnz	r3, 12360 <_strtoll_l.isra.0+0x164>
   1235a:	b.n	12326 <_strtoll_l.isra.0+0x12a>
   1235c:	mov	r0, r2
   1235e:	mov	r1, r3
   12360:	subs	r5, #1
   12362:	b.n	12322 <_strtoll_l.isra.0+0x126>
   12364:	ldrb	r3, [r5, #0]
   12366:	and.w	r3, r3, #223	; 0xdf
   1236a:	cmp	r3, #88	; 0x58
   1236c:	beq.n	12386 <_strtoll_l.isra.0+0x18a>
   1236e:	movs	r6, #8
   12370:	movs	r7, #0
   12372:	mov.w	sl, #8
   12376:	b.n	1226c <_strtoll_l.isra.0+0x70>
   12378:	cmp	r4, #48	; 0x30
   1237a:	bne.n	123a2 <_strtoll_l.isra.0+0x1a6>
   1237c:	ldrb	r3, [r5, #0]
   1237e:	and.w	r3, r3, #223	; 0xdf
   12382:	cmp	r3, #88	; 0x58
   12384:	bne.n	123a2 <_strtoll_l.isra.0+0x1a6>
   12386:	ldrb	r4, [r5, #1]
   12388:	movs	r6, #16
   1238a:	movs	r7, #0
   1238c:	adds	r5, #2
   1238e:	mov.w	sl, #16
   12392:	b.n	1226c <_strtoll_l.isra.0+0x70>
   12394:	movs	r0, #0
   12396:	mov.w	r1, #2147483648	; 0x80000000
   1239a:	b.n	12350 <_strtoll_l.isra.0+0x154>
   1239c:	mov	r0, r2
   1239e:	mov	r1, r3
   123a0:	b.n	12326 <_strtoll_l.isra.0+0x12a>
   123a2:	movs	r6, #16
   123a4:	movs	r7, #0
   123a6:	b.n	1226c <_strtoll_l.isra.0+0x70>

000123a8 <_strtoll_r>:
   123a8:	push	{r4, r5, lr}
   123aa:	ldr	r4, [pc, #24]	; (123c4 <_strtoll_r+0x1c>)
   123ac:	ldr	r5, [pc, #24]	; (123c8 <_strtoll_r+0x20>)
   123ae:	ldr	r4, [r4, #0]
   123b0:	ldr	r4, [r4, #52]	; 0x34
   123b2:	sub	sp, #12
   123b4:	cmp	r4, #0
   123b6:	it	eq
   123b8:	moveq	r4, r5
   123ba:	str	r4, [sp, #0]
   123bc:	bl	121fc <_strtoll_l.isra.0>
   123c0:	add	sp, #12
   123c2:	pop	{r4, r5, pc}
   123c4:	.word	0x20013fc8
   123c8:	.word	0x20013fcc

000123cc <_strtoul_l.isra.0>:
   123cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d0:	ldr.w	r9, [sp, #40]	; 0x28
   123d4:	mov	r6, r1
   123d6:	mov	r7, r0
   123d8:	mov	r5, r2
   123da:	mov	r8, r3
   123dc:	mov	fp, r1
   123de:	b.n	123e2 <_strtoul_l.isra.0+0x16>
   123e0:	mov	fp, r4
   123e2:	mov	r4, fp
   123e4:	mov	r0, r9
   123e6:	ldrb.w	sl, [r4], #1
   123ea:	bl	b700 <__locale_ctype_ptr_l>
   123ee:	add	r0, sl
   123f0:	ldrb	r0, [r0, #1]
   123f2:	and.w	r0, r0, #8
   123f6:	and.w	ip, r0, #255	; 0xff
   123fa:	cmp	r0, #0
   123fc:	bne.n	123e0 <_strtoul_l.isra.0+0x14>
   123fe:	mov	r1, sl
   12400:	cmp	r1, #45	; 0x2d
   12402:	beq.n	124c8 <_strtoul_l.isra.0+0xfc>
   12404:	cmp	r1, #43	; 0x2b
   12406:	itt	eq
   12408:	ldrbeq.w	r1, [fp, #1]
   1240c:	addeq.w	r4, fp, #2
   12410:	cmp.w	r8, #0
   12414:	beq.n	12430 <_strtoul_l.isra.0+0x64>
   12416:	cmp.w	r8, #16
   1241a:	beq.n	124d6 <_strtoul_l.isra.0+0x10a>
   1241c:	mov.w	r3, #4294967295
   12420:	udiv	r3, r3, r8
   12424:	mul.w	sl, r8, r3
   12428:	mvn.w	sl, sl
   1242c:	mov	r9, r8
   1242e:	b.n	12440 <_strtoul_l.isra.0+0x74>
   12430:	cmp	r1, #48	; 0x30
   12432:	beq.n	124f8 <_strtoul_l.isra.0+0x12c>
   12434:	mov.w	r8, #10
   12438:	ldr	r3, [pc, #244]	; (12530 <_strtoul_l.isra.0+0x164>)
   1243a:	mov	r9, r8
   1243c:	mov.w	sl, #5
   12440:	mov.w	lr, #0
   12444:	mov	r0, lr
   12446:	b.n	12456 <_strtoul_l.isra.0+0x8a>
   12448:	beq.n	124aa <_strtoul_l.isra.0+0xde>
   1244a:	mla	r0, r9, r0, r2
   1244e:	mov.w	lr, #1
   12452:	ldrb.w	r1, [r4], #1
   12456:	sub.w	r2, r1, #48	; 0x30
   1245a:	cmp	r2, #9
   1245c:	bls.n	1246a <_strtoul_l.isra.0+0x9e>
   1245e:	sub.w	r2, r1, #65	; 0x41
   12462:	cmp	r2, #25
   12464:	bhi.n	1247e <_strtoul_l.isra.0+0xb2>
   12466:	sub.w	r2, r1, #55	; 0x37
   1246a:	cmp	r8, r2
   1246c:	ble.n	1248e <_strtoul_l.isra.0+0xc2>
   1246e:	cmp.w	lr, #4294967295
   12472:	beq.n	12452 <_strtoul_l.isra.0+0x86>
   12474:	cmp	r0, r3
   12476:	bls.n	12448 <_strtoul_l.isra.0+0x7c>
   12478:	mov.w	lr, #4294967295
   1247c:	b.n	12452 <_strtoul_l.isra.0+0x86>
   1247e:	sub.w	r2, r1, #97	; 0x61
   12482:	cmp	r2, #25
   12484:	bhi.n	1248e <_strtoul_l.isra.0+0xc2>
   12486:	sub.w	r2, r1, #87	; 0x57
   1248a:	cmp	r8, r2
   1248c:	bgt.n	1246e <_strtoul_l.isra.0+0xa2>
   1248e:	cmp.w	lr, #4294967295
   12492:	beq.n	124b8 <_strtoul_l.isra.0+0xec>
   12494:	cmp.w	ip, #0
   12498:	beq.n	1249c <_strtoul_l.isra.0+0xd0>
   1249a:	negs	r0, r0
   1249c:	cbz	r5, 124b4 <_strtoul_l.isra.0+0xe8>
   1249e:	cmp.w	lr, #0
   124a2:	bne.n	124c0 <_strtoul_l.isra.0+0xf4>
   124a4:	str	r6, [r5, #0]
   124a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124aa:	cmp	r2, sl
   124ac:	ble.n	1244a <_strtoul_l.isra.0+0x7e>
   124ae:	mov.w	lr, #4294967295
   124b2:	b.n	12452 <_strtoul_l.isra.0+0x86>
   124b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b8:	movs	r3, #34	; 0x22
   124ba:	str	r3, [r7, #0]
   124bc:	mov	r0, lr
   124be:	cbz	r5, 12512 <_strtoul_l.isra.0+0x146>
   124c0:	subs	r6, r4, #1
   124c2:	str	r6, [r5, #0]
   124c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124c8:	add.w	r4, fp, #2
   124cc:	ldrb.w	r1, [fp, #1]
   124d0:	mov.w	ip, #1
   124d4:	b.n	12410 <_strtoul_l.isra.0+0x44>
   124d6:	cmp	r1, #48	; 0x30
   124d8:	bne.n	12516 <_strtoul_l.isra.0+0x14a>
   124da:	ldrb	r3, [r4, #0]
   124dc:	and.w	r3, r3, #223	; 0xdf
   124e0:	cmp	r3, #88	; 0x58
   124e2:	bne.n	12522 <_strtoul_l.isra.0+0x156>
   124e4:	mov.w	r9, #16
   124e8:	ldrb	r1, [r4, #1]
   124ea:	mov	r8, r9
   124ec:	mov.w	sl, #15
   124f0:	adds	r4, #2
   124f2:	mvn.w	r3, #4026531840	; 0xf0000000
   124f6:	b.n	12440 <_strtoul_l.isra.0+0x74>
   124f8:	ldrb	r3, [r4, #0]
   124fa:	and.w	r3, r3, #223	; 0xdf
   124fe:	cmp	r3, #88	; 0x58
   12500:	beq.n	124e4 <_strtoul_l.isra.0+0x118>
   12502:	mov.w	r8, #8
   12506:	mov	r9, r8
   12508:	mov.w	sl, #7
   1250c:	mvn.w	r3, #3758096384	; 0xe0000000
   12510:	b.n	12440 <_strtoul_l.isra.0+0x74>
   12512:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12516:	mov.w	sl, #15
   1251a:	mvn.w	r3, #4026531840	; 0xf0000000
   1251e:	mov	r9, r8
   12520:	b.n	12440 <_strtoul_l.isra.0+0x74>
   12522:	mov	r9, r8
   12524:	mov.w	sl, #15
   12528:	mvn.w	r3, #4026531840	; 0xf0000000
   1252c:	b.n	12440 <_strtoul_l.isra.0+0x74>
   1252e:	nop
   12530:	.word	0x19999999

00012534 <_strtoul_r>:
   12534:	push	{r4, r5, lr}
   12536:	ldr	r4, [pc, #24]	; (12550 <_strtoul_r+0x1c>)
   12538:	ldr	r5, [pc, #24]	; (12554 <_strtoul_r+0x20>)
   1253a:	ldr	r4, [r4, #0]
   1253c:	ldr	r4, [r4, #52]	; 0x34
   1253e:	sub	sp, #12
   12540:	cmp	r4, #0
   12542:	it	eq
   12544:	moveq	r4, r5
   12546:	str	r4, [sp, #0]
   12548:	bl	123cc <_strtoul_l.isra.0>
   1254c:	add	sp, #12
   1254e:	pop	{r4, r5, pc}
   12550:	.word	0x20013fc8
   12554:	.word	0x20013fcc

00012558 <_strtoull_l.isra.0>:
   12558:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1255c:	sub	sp, #20
   1255e:	mov	fp, r1
   12560:	str	r0, [sp, #8]
   12562:	mov	r7, r2
   12564:	mov	r6, r3
   12566:	mov	r8, r1
   12568:	ldr	r4, [sp, #56]	; 0x38
   1256a:	b.n	1256e <_strtoull_l.isra.0+0x16>
   1256c:	mov	r8, r5
   1256e:	mov	r5, r8
   12570:	mov	r0, r4
   12572:	ldrb.w	r9, [r5], #1
   12576:	bl	b700 <__locale_ctype_ptr_l>
   1257a:	add	r0, r9
   1257c:	ldrb	r3, [r0, #1]
   1257e:	and.w	r3, r3, #8
   12582:	and.w	r2, r3, #255	; 0xff
   12586:	cmp	r3, #0
   12588:	bne.n	1256c <_strtoull_l.isra.0+0x14>
   1258a:	mov	r4, r9
   1258c:	cmp	r4, #45	; 0x2d
   1258e:	beq.w	126aa <_strtoull_l.isra.0+0x152>
   12592:	cmp	r4, #43	; 0x2b
   12594:	it	eq
   12596:	ldrbeq.w	r4, [r8, #1]
   1259a:	str	r2, [sp, #4]
   1259c:	it	eq
   1259e:	addeq.w	r5, r8, #2
   125a2:	cbz	r6, 125dc <_strtoull_l.isra.0+0x84>
   125a4:	cmp	r6, #16
   125a6:	beq.w	126b8 <_strtoull_l.isra.0+0x160>
   125aa:	mov.w	r9, r6, asr #31
   125ae:	mov	r2, r6
   125b0:	mov	r3, r9
   125b2:	mov.w	r0, #4294967295
   125b6:	mov.w	r1, #4294967295
   125ba:	bl	b2dc <__aeabi_uldivmod>
   125be:	mov	r2, r6
   125c0:	str	r0, [sp, #12]
   125c2:	mov	sl, r1
   125c4:	mov	r3, r9
   125c6:	mov.w	r0, #4294967295
   125ca:	mov.w	r1, #4294967295
   125ce:	bl	b2dc <__aeabi_uldivmod>
   125d2:	mov	r8, r6
   125d4:	mov	lr, r2
   125d6:	ldr	r2, [sp, #12]
   125d8:	mov	r3, sl
   125da:	b.n	125f6 <_strtoull_l.isra.0+0x9e>
   125dc:	cmp	r4, #48	; 0x30
   125de:	beq.w	126e4 <_strtoull_l.isra.0+0x18c>
   125e2:	ldr	r3, [pc, #348]	; (12740 <_strtoull_l.isra.0+0x1e8>)
   125e4:	mov.w	lr, #5
   125e8:	mov.w	r2, #2576980377	; 0x99999999
   125ec:	mov.w	r8, #10
   125f0:	mov.w	r9, #0
   125f4:	movs	r6, #10
   125f6:	mov.w	ip, #0
   125fa:	movs	r0, #0
   125fc:	movs	r1, #0
   125fe:	b.n	12626 <_strtoull_l.isra.0+0xce>
   12600:	cmp	r1, r3
   12602:	it	eq
   12604:	cmpeq	r0, r2
   12606:	beq.n	1268a <_strtoull_l.isra.0+0x132>
   12608:	mul.w	r4, r0, r9
   1260c:	mla	r4, r8, r1, r4
   12610:	umull	r0, r1, r0, r8
   12614:	add	r1, r4
   12616:	adds.w	r0, r0, sl
   1261a:	adc.w	r1, r1, sl, asr #31
   1261e:	mov.w	ip, #1
   12622:	ldrb.w	r4, [r5], #1
   12626:	sub.w	sl, r4, #48	; 0x30
   1262a:	cmp.w	sl, #9
   1262e:	bls.n	1263e <_strtoull_l.isra.0+0xe6>
   12630:	sub.w	sl, r4, #65	; 0x41
   12634:	cmp.w	sl, #25
   12638:	bhi.n	12656 <_strtoull_l.isra.0+0xfe>
   1263a:	sub.w	sl, r4, #55	; 0x37
   1263e:	cmp	r6, sl
   12640:	ble.n	12668 <_strtoull_l.isra.0+0x110>
   12642:	cmp.w	ip, #4294967295
   12646:	beq.n	12622 <_strtoull_l.isra.0+0xca>
   12648:	cmp	r3, r1
   1264a:	it	eq
   1264c:	cmpeq	r2, r0
   1264e:	bcs.n	12600 <_strtoull_l.isra.0+0xa8>
   12650:	mov.w	ip, #4294967295
   12654:	b.n	12622 <_strtoull_l.isra.0+0xca>
   12656:	sub.w	sl, r4, #97	; 0x61
   1265a:	cmp.w	sl, #25
   1265e:	bhi.n	12668 <_strtoull_l.isra.0+0x110>
   12660:	sub.w	sl, r4, #87	; 0x57
   12664:	cmp	r6, sl
   12666:	bgt.n	12642 <_strtoull_l.isra.0+0xea>
   12668:	cmp.w	ip, #4294967295
   1266c:	beq.n	12694 <_strtoull_l.isra.0+0x13c>
   1266e:	ldr	r3, [sp, #4]
   12670:	cbz	r3, 12678 <_strtoull_l.isra.0+0x120>
   12672:	negs	r0, r0
   12674:	sbc.w	r1, r1, r1, lsl #1
   12678:	cbz	r7, 12684 <_strtoull_l.isra.0+0x12c>
   1267a:	cmp.w	ip, #0
   1267e:	bne.n	126a6 <_strtoull_l.isra.0+0x14e>
   12680:	mov	r5, fp
   12682:	str	r5, [r7, #0]
   12684:	add	sp, #20
   12686:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1268a:	cmp	sl, lr
   1268c:	ble.n	12608 <_strtoull_l.isra.0+0xb0>
   1268e:	mov.w	ip, #4294967295
   12692:	b.n	12622 <_strtoull_l.isra.0+0xca>
   12694:	ldr	r2, [sp, #8]
   12696:	movs	r3, #34	; 0x22
   12698:	str	r3, [r2, #0]
   1269a:	mov.w	r0, #4294967295
   1269e:	mov.w	r1, #4294967295
   126a2:	cmp	r7, #0
   126a4:	beq.n	12684 <_strtoull_l.isra.0+0x12c>
   126a6:	subs	r5, #1
   126a8:	b.n	12682 <_strtoull_l.isra.0+0x12a>
   126aa:	movs	r3, #1
   126ac:	add.w	r5, r8, #2
   126b0:	ldrb.w	r4, [r8, #1]
   126b4:	str	r3, [sp, #4]
   126b6:	b.n	125a2 <_strtoull_l.isra.0+0x4a>
   126b8:	cmp	r4, #48	; 0x30
   126ba:	bne.n	12706 <_strtoull_l.isra.0+0x1ae>
   126bc:	ldrb	r3, [r5, #0]
   126be:	and.w	r3, r3, #223	; 0xdf
   126c2:	cmp	r3, #88	; 0x58
   126c4:	bne.n	1271c <_strtoull_l.isra.0+0x1c4>
   126c6:	mov.w	r3, #4294967295
   126ca:	ldrb	r4, [r5, #1]
   126cc:	str	r3, [sp, #12]
   126ce:	mov.w	lr, #15
   126d2:	adds	r5, #2
   126d4:	mvn.w	sl, #4026531840	; 0xf0000000
   126d8:	mov.w	r8, #16
   126dc:	mov.w	r9, #0
   126e0:	movs	r6, #16
   126e2:	b.n	125d6 <_strtoull_l.isra.0+0x7e>
   126e4:	ldrb	r3, [r5, #0]
   126e6:	and.w	r3, r3, #223	; 0xdf
   126ea:	cmp	r3, #88	; 0x58
   126ec:	beq.n	126c6 <_strtoull_l.isra.0+0x16e>
   126ee:	mov.w	lr, #7
   126f2:	mov.w	r2, #4294967295
   126f6:	mvn.w	r3, #3758096384	; 0xe0000000
   126fa:	mov.w	r8, #8
   126fe:	mov.w	r9, #0
   12702:	movs	r6, #8
   12704:	b.n	125f6 <_strtoull_l.isra.0+0x9e>
   12706:	mov.w	lr, #15
   1270a:	mov.w	r2, #4294967295
   1270e:	mvn.w	r3, #4026531840	; 0xf0000000
   12712:	mov.w	r8, #16
   12716:	mov.w	r9, #0
   1271a:	b.n	125f6 <_strtoull_l.isra.0+0x9e>
   1271c:	mov.w	r8, #16
   12720:	mov.w	r9, #0
   12724:	mov	r2, r8
   12726:	mov	r3, r9
   12728:	mov.w	r0, #4294967295
   1272c:	mov.w	r1, #4294967295
   12730:	bl	b2dc <__aeabi_uldivmod>
   12734:	mvn.w	r3, #4026531840	; 0xf0000000
   12738:	mov	lr, r2
   1273a:	mov.w	r2, #4294967295
   1273e:	b.n	125f6 <_strtoull_l.isra.0+0x9e>
   12740:	.word	0x19999999

00012744 <_strtoull_r>:
   12744:	push	{r4, r5, lr}
   12746:	ldr	r4, [pc, #24]	; (12760 <_strtoull_r+0x1c>)
   12748:	ldr	r5, [pc, #24]	; (12764 <_strtoull_r+0x20>)
   1274a:	ldr	r4, [r4, #0]
   1274c:	ldr	r4, [r4, #52]	; 0x34
   1274e:	sub	sp, #12
   12750:	cmp	r4, #0
   12752:	it	eq
   12754:	moveq	r4, r5
   12756:	str	r4, [sp, #0]
   12758:	bl	12558 <_strtoull_l.isra.0>
   1275c:	add	sp, #12
   1275e:	pop	{r4, r5, pc}
   12760:	.word	0x20013fc8
   12764:	.word	0x20013fcc

00012768 <__ssprint_r>:
   12768:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1276c:	ldr	r3, [r2, #8]
   1276e:	sub	sp, #12
   12770:	mov	r8, r2
   12772:	cmp	r3, #0
   12774:	beq.n	1285c <__ssprint_r+0xf4>
   12776:	mov	fp, r0
   12778:	mov.w	r9, #0
   1277c:	ldr	r6, [r2, #0]
   1277e:	ldr	r0, [r1, #0]
   12780:	ldr	r3, [r1, #8]
   12782:	mov	r5, r1
   12784:	mov	r4, r9
   12786:	cmp	r4, #0
   12788:	beq.n	12816 <__ssprint_r+0xae>
   1278a:	cmp	r4, r3
   1278c:	mov	r7, r3
   1278e:	mov	sl, r3
   12790:	bcc.n	12820 <__ssprint_r+0xb8>
   12792:	ldrh	r3, [r5, #12]
   12794:	tst.w	r3, #1152	; 0x480
   12798:	beq.n	127f6 <__ssprint_r+0x8e>
   1279a:	ldr	r7, [r5, #20]
   1279c:	ldr	r1, [r5, #16]
   1279e:	add.w	r7, r7, r7, lsl #1
   127a2:	rsb	sl, r1, r0
   127a6:	add.w	r7, r7, r7, lsr #31
   127aa:	adds	r0, r4, #1
   127ac:	asrs	r7, r7, #1
   127ae:	add	r0, sl
   127b0:	cmp	r0, r7
   127b2:	mov	r2, r7
   127b4:	itt	hi
   127b6:	movhi	r7, r0
   127b8:	movhi	r2, r7
   127ba:	lsls	r3, r3, #21
   127bc:	bpl.n	12826 <__ssprint_r+0xbe>
   127be:	mov	r1, r2
   127c0:	mov	r0, fp
   127c2:	bl	b73c <_malloc_r>
   127c6:	cmp	r0, #0
   127c8:	beq.n	1283a <__ssprint_r+0xd2>
   127ca:	mov	r2, sl
   127cc:	ldr	r1, [r5, #16]
   127ce:	str	r0, [sp, #4]
   127d0:	bl	8774 <memcpy>
   127d4:	ldrh	r2, [r5, #12]
   127d6:	ldr	r3, [sp, #4]
   127d8:	bic.w	r2, r2, #1152	; 0x480
   127dc:	orr.w	r2, r2, #128	; 0x80
   127e0:	strh	r2, [r5, #12]
   127e2:	rsb	r2, sl, r7
   127e6:	add.w	r0, r3, sl
   127ea:	str	r7, [r5, #20]
   127ec:	str	r3, [r5, #16]
   127ee:	str	r0, [r5, #0]
   127f0:	str	r2, [r5, #8]
   127f2:	mov	r7, r4
   127f4:	mov	sl, r4
   127f6:	mov	r2, sl
   127f8:	mov	r1, r9
   127fa:	bl	bde4 <memmove>
   127fe:	ldr.w	r2, [r8, #8]
   12802:	ldr	r3, [r5, #8]
   12804:	ldr	r0, [r5, #0]
   12806:	subs	r3, r3, r7
   12808:	add	r0, sl
   1280a:	subs	r4, r2, r4
   1280c:	str	r3, [r5, #8]
   1280e:	str	r0, [r5, #0]
   12810:	str.w	r4, [r8, #8]
   12814:	cbz	r4, 1285c <__ssprint_r+0xf4>
   12816:	ldr.w	r9, [r6]
   1281a:	ldr	r4, [r6, #4]
   1281c:	adds	r6, #8
   1281e:	b.n	12786 <__ssprint_r+0x1e>
   12820:	mov	r7, r4
   12822:	mov	sl, r4
   12824:	b.n	127f6 <__ssprint_r+0x8e>
   12826:	mov	r0, fp
   12828:	bl	bf50 <_realloc_r>
   1282c:	mov	r3, r0
   1282e:	cmp	r0, #0
   12830:	bne.n	127e2 <__ssprint_r+0x7a>
   12832:	ldr	r1, [r5, #16]
   12834:	mov	r0, fp
   12836:	bl	10ed0 <_free_r>
   1283a:	movs	r3, #12
   1283c:	str.w	r3, [fp]
   12840:	ldrh	r3, [r5, #12]
   12842:	movs	r2, #0
   12844:	orr.w	r3, r3, #64	; 0x40
   12848:	mov.w	r0, #4294967295
   1284c:	strh	r3, [r5, #12]
   1284e:	str.w	r2, [r8, #8]
   12852:	str.w	r2, [r8, #4]
   12856:	add	sp, #12
   12858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1285c:	movs	r0, #0
   1285e:	str.w	r0, [r8, #4]
   12862:	add	sp, #12
   12864:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012868 <_sungetc_r>:
   12868:	adds	r3, r1, #1
   1286a:	push	{r4, r5, r6, lr}
   1286c:	beq.n	128a6 <_sungetc_r+0x3e>
   1286e:	ldrh	r3, [r2, #12]
   12870:	ldr	r4, [r2, #48]	; 0x30
   12872:	bic.w	r3, r3, #32
   12876:	strh	r3, [r2, #12]
   12878:	uxtb	r5, r1
   1287a:	cbz	r4, 128ac <_sungetc_r+0x44>
   1287c:	mov	r4, r2
   1287e:	ldr	r2, [r2, #4]
   12880:	ldr	r3, [r4, #52]	; 0x34
   12882:	cmp	r2, r3
   12884:	mov	r6, r1
   12886:	bge.n	1289c <_sungetc_r+0x34>
   12888:	ldr	r3, [r4, #0]
   1288a:	subs	r2, r3, #1
   1288c:	str	r2, [r4, #0]
   1288e:	strb.w	r6, [r3, #-1]
   12892:	ldr	r3, [r4, #4]
   12894:	adds	r3, #1
   12896:	str	r3, [r4, #4]
   12898:	mov	r0, r5
   1289a:	pop	{r4, r5, r6, pc}
   1289c:	mov	r1, r4
   1289e:	bl	129ac <__submore>
   128a2:	cmp	r0, #0
   128a4:	beq.n	12888 <_sungetc_r+0x20>
   128a6:	mov.w	r5, #4294967295
   128aa:	b.n	12898 <_sungetc_r+0x30>
   128ac:	ldr	r0, [r2, #16]
   128ae:	ldr	r3, [r2, #0]
   128b0:	cbz	r0, 128be <_sungetc_r+0x56>
   128b2:	cmp	r0, r3
   128b4:	bcs.n	128be <_sungetc_r+0x56>
   128b6:	ldrb.w	r0, [r3, #-1]
   128ba:	cmp	r5, r0
   128bc:	beq.n	128de <_sungetc_r+0x76>
   128be:	str	r3, [r2, #56]	; 0x38
   128c0:	mov	r3, r2
   128c2:	ldr	r6, [r2, #4]
   128c4:	str	r6, [r2, #60]	; 0x3c
   128c6:	add.w	r4, r2, #64	; 0x40
   128ca:	movs	r0, #3
   128cc:	str	r0, [r2, #52]	; 0x34
   128ce:	str	r4, [r2, #48]	; 0x30
   128d0:	strb.w	r1, [r3, #66]!
   128d4:	movs	r1, #1
   128d6:	str	r3, [r2, #0]
   128d8:	str	r1, [r2, #4]
   128da:	mov	r0, r5
   128dc:	pop	{r4, r5, r6, pc}
   128de:	ldr	r1, [r2, #4]
   128e0:	subs	r3, #1
   128e2:	adds	r1, #1
   128e4:	str	r3, [r2, #0]
   128e6:	str	r1, [r2, #4]
   128e8:	b.n	12898 <_sungetc_r+0x30>
   128ea:	nop

000128ec <__ssrefill_r>:
   128ec:	push	{r4, lr}
   128ee:	mov	r4, r1
   128f0:	ldr	r1, [r1, #48]	; 0x30
   128f2:	cbz	r1, 12910 <__ssrefill_r+0x24>
   128f4:	add.w	r3, r4, #64	; 0x40
   128f8:	cmp	r1, r3
   128fa:	beq.n	12900 <__ssrefill_r+0x14>
   128fc:	bl	10ed0 <_free_r>
   12900:	ldr	r3, [r4, #60]	; 0x3c
   12902:	str	r3, [r4, #4]
   12904:	movs	r0, #0
   12906:	str	r0, [r4, #48]	; 0x30
   12908:	cbz	r3, 12910 <__ssrefill_r+0x24>
   1290a:	ldr	r3, [r4, #56]	; 0x38
   1290c:	str	r3, [r4, #0]
   1290e:	pop	{r4, pc}
   12910:	ldrh	r3, [r4, #12]
   12912:	ldr	r2, [r4, #16]
   12914:	str	r2, [r4, #0]
   12916:	orr.w	r3, r3, #32
   1291a:	movs	r2, #0
   1291c:	strh	r3, [r4, #12]
   1291e:	str	r2, [r4, #4]
   12920:	mov.w	r0, #4294967295
   12924:	pop	{r4, pc}
   12926:	nop

00012928 <_sfread_r>:
   12928:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	sub	sp, #12
   1292e:	mul.w	r9, r2, r3
   12932:	str	r2, [sp, #4]
   12934:	mov	sl, r3
   12936:	ldr	r4, [sp, #48]	; 0x30
   12938:	cmp.w	r9, #0
   1293c:	beq.n	12992 <_sfread_r+0x6a>
   1293e:	mov	r7, r0
   12940:	mov	r6, r1
   12942:	mov	r5, r9
   12944:	mov.w	r8, #0
   12948:	b.n	1296a <_sfread_r+0x42>
   1294a:	ldr	r1, [r4, #0]
   1294c:	bl	8774 <memcpy>
   12950:	ldr	r2, [r4, #0]
   12952:	str.w	r8, [r4, #4]
   12956:	add	r2, fp
   12958:	str	r2, [r4, #0]
   1295a:	mov	r1, r4
   1295c:	mov	r0, r7
   1295e:	add	r6, fp
   12960:	rsb	r5, fp, r5
   12964:	bl	128ec <__ssrefill_r>
   12968:	cbnz	r0, 1299a <_sfread_r+0x72>
   1296a:	ldr.w	fp, [r4, #4]
   1296e:	cmp	r5, fp
   12970:	mov	r0, r6
   12972:	mov	r2, fp
   12974:	bhi.n	1294a <_sfread_r+0x22>
   12976:	mov	r2, r5
   12978:	ldr	r1, [r4, #0]
   1297a:	bl	8774 <memcpy>
   1297e:	ldr	r2, [r4, #4]
   12980:	ldr	r3, [r4, #0]
   12982:	subs	r2, r2, r5
   12984:	add	r3, r5
   12986:	mov	r0, sl
   12988:	str	r2, [r4, #4]
   1298a:	str	r3, [r4, #0]
   1298c:	add	sp, #12
   1298e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12992:	mov	r0, r9
   12994:	add	sp, #12
   12996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1299a:	ldr	r3, [sp, #4]
   1299c:	rsb	r9, r5, r9
   129a0:	udiv	r0, r9, r3
   129a4:	add	sp, #12
   129a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129aa:	nop

000129ac <__submore>:
   129ac:	add.w	r3, r1, #64	; 0x40
   129b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129b4:	mov	r4, r1
   129b6:	ldr	r1, [r1, #48]	; 0x30
   129b8:	cmp	r1, r3
   129ba:	beq.n	129e6 <__submore+0x3a>
   129bc:	ldr	r6, [r4, #52]	; 0x34
   129be:	lsls	r7, r6, #1
   129c0:	mov	r2, r7
   129c2:	bl	bf50 <_realloc_r>
   129c6:	mov	r5, r0
   129c8:	cbz	r0, 12a1c <__submore+0x70>
   129ca:	add.w	r8, r0, r6
   129ce:	mov	r2, r6
   129d0:	mov	r0, r8
   129d2:	mov	r1, r5
   129d4:	bl	8774 <memcpy>
   129d8:	str.w	r8, [r4]
   129dc:	str	r5, [r4, #48]	; 0x30
   129de:	str	r7, [r4, #52]	; 0x34
   129e0:	movs	r0, #0
   129e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129e6:	mov.w	r1, #1024	; 0x400
   129ea:	bl	b73c <_malloc_r>
   129ee:	cbz	r0, 12a1c <__submore+0x70>
   129f0:	ldrb.w	r3, [r4, #66]	; 0x42
   129f4:	str	r0, [r4, #48]	; 0x30
   129f6:	mov.w	r2, #1024	; 0x400
   129fa:	str	r2, [r4, #52]	; 0x34
   129fc:	strb.w	r3, [r0, #1023]	; 0x3ff
   12a00:	ldrb.w	r3, [r4, #65]	; 0x41
   12a04:	strb.w	r3, [r0, #1022]	; 0x3fe
   12a08:	ldrb.w	r3, [r4, #64]	; 0x40
   12a0c:	strb.w	r3, [r0, #1021]	; 0x3fd
   12a10:	addw	r0, r0, #1021	; 0x3fd
   12a14:	str	r0, [r4, #0]
   12a16:	movs	r0, #0
   12a18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a1c:	mov.w	r0, #4294967295
   12a20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012a24 <_vasnprintf_r>:
   12a24:	push	{r4, r5, r6, lr}
   12a26:	mov	r5, r2
   12a28:	sub	sp, #104	; 0x68
   12a2a:	ldr	r4, [r2, #0]
   12a2c:	cbz	r1, 12a32 <_vasnprintf_r+0xe>
   12a2e:	cmp	r4, #0
   12a30:	bne.n	12a68 <_vasnprintf_r+0x44>
   12a32:	movs	r4, #0
   12a34:	mov.w	r2, #648	; 0x288
   12a38:	strh.w	r2, [sp, #12]
   12a3c:	str	r4, [sp, #0]
   12a3e:	str	r4, [sp, #16]
   12a40:	mov	r2, r3
   12a42:	movw	r6, #65535	; 0xffff
   12a46:	ldr	r3, [sp, #120]	; 0x78
   12a48:	str	r4, [sp, #8]
   12a4a:	mov	r1, sp
   12a4c:	str	r4, [sp, #20]
   12a4e:	strh.w	r6, [sp, #14]
   12a52:	bl	d7d0 <_svfprintf_r>
   12a56:	cmp	r0, #0
   12a58:	blt.n	12a7e <_vasnprintf_r+0x5a>
   12a5a:	ldr	r3, [sp, #0]
   12a5c:	str	r0, [r5, #0]
   12a5e:	movs	r2, #0
   12a60:	strb	r2, [r3, #0]
   12a62:	ldr	r0, [sp, #16]
   12a64:	add	sp, #104	; 0x68
   12a66:	pop	{r4, r5, r6, pc}
   12a68:	mov.w	r2, #1544	; 0x608
   12a6c:	str	r1, [sp, #0]
   12a6e:	str	r1, [sp, #16]
   12a70:	strh.w	r2, [sp, #12]
   12a74:	bge.n	12a40 <_vasnprintf_r+0x1c>
   12a76:	movs	r3, #139	; 0x8b
   12a78:	str	r3, [r0, #0]
   12a7a:	movs	r0, #0
   12a7c:	b.n	12a64 <_vasnprintf_r+0x40>
   12a7e:	movs	r0, #0
   12a80:	b.n	12a64 <_vasnprintf_r+0x40>
   12a82:	nop

00012a84 <_calloc_r>:
   12a84:	push	{r4, lr}
   12a86:	mul.w	r1, r2, r1
   12a8a:	bl	b73c <_malloc_r>
   12a8e:	mov	r4, r0
   12a90:	cbz	r0, 12aca <_calloc_r+0x46>
   12a92:	ldr.w	r2, [r0, #-4]
   12a96:	bic.w	r2, r2, #3
   12a9a:	subs	r2, #4
   12a9c:	cmp	r2, #36	; 0x24
   12a9e:	bhi.n	12ad2 <_calloc_r+0x4e>
   12aa0:	cmp	r2, #19
   12aa2:	bls.n	12ace <_calloc_r+0x4a>
   12aa4:	movs	r3, #0
   12aa6:	cmp	r2, #27
   12aa8:	str	r3, [r0, #0]
   12aaa:	str	r3, [r0, #4]
   12aac:	bls.n	12adc <_calloc_r+0x58>
   12aae:	cmp	r2, #36	; 0x24
   12ab0:	str	r3, [r0, #8]
   12ab2:	str	r3, [r0, #12]
   12ab4:	iteee	ne
   12ab6:	addne.w	r2, r0, #16
   12aba:	streq	r3, [r0, #16]
   12abc:	streq	r3, [r0, #20]
   12abe:	addeq.w	r2, r0, #24
   12ac2:	movs	r3, #0
   12ac4:	str	r3, [r2, #0]
   12ac6:	str	r3, [r2, #4]
   12ac8:	str	r3, [r2, #8]
   12aca:	mov	r0, r4
   12acc:	pop	{r4, pc}
   12ace:	mov	r2, r0
   12ad0:	b.n	12ac2 <_calloc_r+0x3e>
   12ad2:	movs	r1, #0
   12ad4:	bl	beac <memset>
   12ad8:	mov	r0, r4
   12ada:	pop	{r4, pc}
   12adc:	add.w	r2, r0, #8
   12ae0:	b.n	12ac2 <_calloc_r+0x3e>
   12ae2:	nop

00012ae4 <vtable for AudioStream>:
	...
   12aec:	....

00012af0 <vtable for mRecordQueue<250>>:
	...
   12af8:	....

00012afc <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   12b04:	9...%...m.......
   12b14:	i...........

00012b20 <vtable for FsFile>:
	...
   12b28:	9...%...m.......
   12b38:	i...........

00012b44 <vtable for I2S_32>:
	...
   12b4c:	=...%02d:%02d:%0
   12b5c:	2d..%04d/%02d/%0
   12b6c:	2d..%d %d %d %d 
   12b7c:	%d %d %d....%s_%
   12b8c:	04d_%02d_%02d_%0
   12b9c:	2d_%02d_%02d%s..
   12bac:	%04d_%02d_%02d_%
   12bbc:	02d_%02d_%02d...
   12bcc:	RIFF....WAVE....
   12bdc:	fmt ....data....
   12bec:	Config.txt..%s..
   12bfc:	....%10d....%d..
   12c0c:	Envi_%s.txt.%04d
   12c1c:	_%02d_%02d,.%02d
   12c2c:	_%02d_%02d,.%10.
   12c3c:	1f,.close acquis
   12c4c:	ition...Hibernat
   12c5c:	e now 1.Hibernat
   12c6c:	e now 3.?!xa....
   12c7c:	oar1234ndtchwsei
   12c8c:	kp..%02d....%c %
   12c9c:	5d on_time......
   12cac:	%c %5d acq_time.
   12cbc:	....%c %5d rep_r
   12ccc:	ate.....%c %5d f
   12cdc:	irst_hour...%c %
   12cec:	5d second_hour..
   12cfc:	....%c %5d third
   12d0c:	_hour...%c %5d l
   12d1c:	ast_hour....%c %
   12d2c:	s name......%c %
   12d3c:	s date......%c %
   12d4c:	s time......exte
   12d5c:	r 'a' to print t
   12d6c:	his.exter '?c' t
   12d7c:	o read value c=(
   12d8c:	o,a,r,1,2,3,4,n,
   12d9c:	d,t,c,h,w,s,m,i,
   12dac:	k,p)....  e.g.: 
   12dbc:	?1 will print fi
   12dcc:	rst hour....exte
   12ddc:	r '!cval' to rea
   12dec:	d value c=(0,a,r
   12dfc:	,1,2,3,4,n,d,t,c
   12e0c:	,h,w,s,m,i,k,p) 
   12e1c:	and val is new v
   12e2c:	alue....  e.g.: 
   12e3c:	!110 will set fi
   12e4c:	rst hour to 10..
   12e5c:	exter 'xval' to 
   12e6c:	exit menu (x is 
   12e7c:	delay in minutes
   12e8c:	, -1 means immed
   12e9c:	iate)...  e.g.: 
   12eac:	x10 will exit an
   12ebc:	d hibernate for 
   12ecc:	10 minutes..    
   12edc:	    x-1 with exi
   12eec:	t and start imme
   12efc:	diately.microSou
   12f0c:	ndRecorder..End 
   12f1c:	of Setup....SdEr
   12f2c:	ror: 0X.,0X.Chec
   12f3c:	k SD format.....
   12f4c:	error: .file.wri
   12f5c:	te data failed..
   12f6c:	file.open failed
   12f7c:	....file.preAllo
   12f8c:	cate failed.clos
   12f9c:	ed...loop: %5d %
   12fac:	4d; %5d %5d; %5d
   12fbc:	....

00012fc0 <monthDays>:
   12fc0:	............

00012fcc <vtable for Stream>:
	...
   12fd4:	........m...q...
   12fe4:	............

00012ff0 <vtable for File>:
	...
   12ff8:	q,......m...y+..
   13008:	]+..E,..i+...0..
   13018:	.0...,..E+..Q+..
   13028:	.+...+...+...+..
   13038:	.+...+...+...+..
   13048:	.,..9,..

00013050 <vtable for SDFile>:
	...
   13058:	q,......m...%...
   13068:	.-..E,.......0..
   13078:	E0...,..E/.../..
   13088:	...../..)/.../..
   13098:	.,...,..9...]/..
   130a8:	.,......  File  
   130b8:	  this=%x, f=%x.
   130c8:	....   SDFile th
   130d8:	is=%x, refcount=
   130e8:	%u..

000130ec <TwoWire::i2c0_hardware>:
   130ec:	4..@@.....".0...
   130fc:	....!./.........

0001310c <TwoWire::i2c1_hardware>:
   1310c:	4..@....&:......
   1311c:	..%;............

0001312c <TwoWire::i2c2_hardware>:
   1312c:	(..@@...........
   1313c:	............J...

0001314c <vtable for TwoWire>:
	...
   13154:	I2...2..m....2..
   13164:	.1...1...1..

00013170 <vtable for SDClass>:
	...
   13178:	)6...4...4..-4..
   13188:	.3...5..=5...5..
   13198:	EXFAT...

000131a0 <vtable for SdSpiCard>:
	...
   131a8:	.o...o...o...s..
   131b8:	.r...u...o...o..
   131c8:	.t...o...o..}p..
   131d8:	.r...r...q......
   131e8:	.o...v..=t..Eu..

000131f8 <vtable for SdioCard>:
	...
   13200:	.x...x..!....}..
   13210:	.z..q....~..5~..
   13220:	.{...w...w...y..
   13230:	.w...w...w...y..
   13240:	.x..m|..9}..i|..

00013250 <digital_pin_to_info_PGM>:
   13250:	@..C@..@D..CD..@
   13260:	...C...@0..C0..@
   13270:	4..C4..@...C...@
   13280:	...C...@...C...@
   13290:	...C...@...C...@
   132a0:	...C...@...C...@
   132b0:	...C...@...C...@
   132c0:	...C...@...C...@
   132d0:	...C...@...C...@
   132e0:	...C...@...C...@
   132f0:	...C...@...C...@
   13300:	...C...@...C...@
   13310:	h .Ch..@...C...@
   13320:	8..C8..@<..C<..@
   13330:	@..C@..@H..CH..@
   13340:	L..CL..@(..C(..@
   13350:	,..C,..@` .C`..@
   13360:	d .Cd..@ ..C ..@
   13370:	$..C$..@(..C(..@
   13380:	,..C,..@D..CD..@
   13390:	p..Cp..@t..Ct..@
   133a0:	h..Ch..@P..CP..@
   133b0:	X..CX..@\..C\..@
   133c0:	T..CT..@ ..C ..@
   133d0:	$..C$..@...C...@
   133e0:	...C...@8..C8..@
   133f0:	4..C4..@0..C0..@
   13400:	<..C<..@,..C,..@
   13410:	( .C(..@, .C,..@
   13420:	. .C...@. .C...@
   13430:	. .C...@. .C...@
   13440:	. .C...@. .C...@

00013450 <vtable for usb_serial_class>:
	...
   13458:	................
   13468:	................
   13478:	....

0001347c <usb_endpoint_config_table>:
   1347c:	....

00013480 <usb_descriptor_list>:
   13480:	.....:. ........
   13490:	(;. C........;. 
   134a0:	.........;. ....
   134b0:	....l;. ........
   134c0:	.;. ............
   134d0:	....

000134d4 <_global_impure_ptr>:
   134d4:	.;. C...POSIX...
   134e4:	....

000134e8 <fpi.6173>:
   134e8:	5...............
   134f8:	....nf..inity...
   13508:	an..

0001350c <fpinan.6209>:
   1350c:	4...............
   1351c:	....

00013520 <tinytens>:
   13520:	.......<3...#.I9
   13530:	=..D...2......[%
   13540:	Co.d(.h.

00013548 <zeroes.7258>:
   13548:	0000000000000000
   13558:	INF.inf.NAN.nan.
   13568:	0123456789ABCDEF
   13578:	....0123456789ab
   13588:	cdef....(null)..
   13598:	0...

0001359c <blanks.7257>:
   1359c:	                

000135ac <basefix.7328>:
   135ac:	................
   135bc:	................
   135cc:	....e%ld....

000135d8 <_ctype_>:
   135d8:	.         ((((( 
   135e8:	                
   135f8:	 ...............
   13608:	................
   13618:	..AAAAAA........
   13628:	................
   13638:	..BBBBBB........
   13648:	................
   13658:	 ...............
	...
   136d8:	....Infinity....
   136e8:	NaN.

000136ec <__hexdig>:
	...
   1371c:	................
   1372c:	................
	...
   1374c:	................
	...
   137ec:	....

000137f0 <__mprec_tens>:
   137f0:	.......?......$@
   13800:	......Y@.....@.@
   13810:	.......@.....j.@
   13820:	.......A......cA
   13830:	.......A....e..A
   13840:	... _..B....vH7B
   13850:	......mB..@..0.B
   13860:	.......B..4&.k.C
   13870:	...7y.AC....W4vC
   13880:	..Ngm..C.=.`.X.C
   13890:	@..x...DP.....KD
   138a0:	..M....D.J...-.D
   138b0:	...yCx.D

000138b8 <__mprec_bigtens>:
   138b8:	...7y.AC.n.....F
   138c8:	..?..O8M2.0.Hw.Z
   138d8:	<.s..O.u

000138e0 <p05.6087>:
   138e0:	........}...

000138ec <_init>:
   138ec:	push	{r3, r4, r5, r6, r7, lr}
   138ee:	nop
   138f0:	pop	{r3, r4, r5, r6, r7}
   138f2:	pop	{r3}
   138f4:	mov	lr, r3
   138f6:	bx	lr

000138f8 <__init_array_start>:
   138f8:	.word	0x0000fe8d

000138fc <__frame_dummy_init_array_entry>:
   138fc:	5....!..%*..=*..
   1390c:	U*..m*...*...*..
   1391c:	.*...*...*...+..
   1392c:	-+..51..M1..e1..
   1393c:	}1...1...1...6..

Disassembly of section .fini:

0001394c <_fini>:
   1394c:	push	{r3, r4, r5, r6, r7, lr}
   1394e:	nop
