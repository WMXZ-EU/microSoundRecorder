
.vsteensy/build/microSoundRecorder.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000142f8 l    d  .fini	00000000 .fini
000142fc l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
200173d0 l    d  .usbbuffers	00000000 .usbbuffers
20017730 l    d  .data	00000000 .data
20018380 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00008d34 l     F .text	0000000c startup_default_early_hook
00008d40 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
20018380 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
20018384 l       .bss	00000000 object.8610
000142a4 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 myAPP.cpp
00000520 l     F .text	0000001c llwuISR()
000007e8 l     F .text	00000034 getTime(char*) [clone .constprop.44]
0000081c l     F .text	00000034 getDate(char*) [clone .constprop.45]
000029e4 l     F .text	00000308 _GLOBAL__sub_I_acqParameters
20018aa8 l     O .bss	00000004 loop::t4
2001ccac l     O .bss	00000028 makeFilename(char*)::filename
2001cd6c l     O .bss	00000004 checkDutyCycle(ACQ_Parameters_s*, short)::t_start
2001cda8 l     O .bss	00000004 loop::t3
2001cdb4 l     O .bss	00000030 wavHeader(unsigned long)::wheader
20017760 l     O .data	00000002 mProcess::update()::isFirst
2001d020 l     O .bss	00000002 loop::state
2001d03c l     O .bss	00000002 checkDutyCycle(ACQ_Parameters_s*, short)::recording
1fff0200 l     O .dmabuffers	00000400 i2s_rx_buffer_32
1fff0600 l     O .dmabuffers	00026b88 setup::data
2001d0b0 l     O .bss	00000004 loop::loopCount
2001d9cc l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
00002d08 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
000031ec l     F .text	00000018 refreshCache(long) [clone .part.0]
2001d9d0 l     O .bss	00000004 cacheTime
2001d9d4 l     O .bss	00000007 tm
2001d9dc l     O .bss	00000004 sysTime
2001d9e0 l     O .bss	00000001 Status
2001d9e8 l     O .bss	00000004 prevMillis
200177cc l     O .data	00000004 syncInterval
00013a98 l     O .text	0000000c monthDays
2001d9ec l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
000034c4 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
000034dc l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
000034f4 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s.cpp
0000350c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00003524 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 input_adc.cpp
0000353c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 output_dac.cpp
00003554 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 output_tdm.cpp
0000356c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00003584 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
000035b4 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_dacs.cpp
000035cc l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000035e4 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
000035fc l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00003614 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
0000362c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
00003644 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_spdif.cpp
0000365c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
2001da80 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SD.cpp
00003874 l     F .text	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 SdVolume.cpp
00003974 l     F .text	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 NXP_SDHC.cpp
00003b58 l     F .text	00000094 SDHC_CMD_Do(unsigned long)
00003bec l     F .text	00000044 SDHC_CMD12_StopTransferWaitForBusy()
2001dce4 l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 SdFile.cpp
00003e04 l     F .text	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 Sd2Card.cpp
000045a8 l     F .text	00000010 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
2001dcf8 l     O .bss	00000004 settings
2001dcfc l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00004e6c l     F .text	0000001e FsCache::sync() [clone .part.2]
00004ef8 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00004f2c l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00005af8 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
00005c14 l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
000063d0 l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000067ec l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
000070c8 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
000070e0 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000076c4 l     F .text	00000030 sdIrs()
000076f4 l     F .text	00000018 isBusyCommandComplete()
0000770c l     F .text	00000010 isBusyCommandInhibit()
0000771c l     F .text	0000000c isBusyDMA()
00007728 l     F .text	00000014 isBusyFifoRead()
0000773c l     F .text	00000014 isBusyFifoWrite()
00007750 l     F .text	00000018 isBusyTransferComplete()
00007768 l     F .text	000000cc setSdclk(unsigned long)
00007898 l     F .text	00000028 waitTimeout(bool (*)())
000078c0 l     F .text	0000004c yieldTimeout(bool (*)())
0000793c l     F .text	0000005c cardCommand(unsigned long, unsigned long)
000079b8 l     F .text	00000064 readReg16(unsigned long, void*)
00007a1c l     F .text	0000002c isBusyCMD13()
00007a64 l     F .text	00000020 waitDmaStatus() [clone .part.6]
00007a84 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007c78 l     F .text	00000078 transferStop()
00008028 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
2001dd08 l     O .bss	00000001 m_version2
2001dd0c l     O .bss	00000010 m_cid
2001dd1c l     O .bss	00000004 m_busyFcn
2001dd20 l     O .bss	00000001 m_highCapacity
2001dd24 l     O .bss	00000004 m_ocr
2001dd28 l     O .bss	00000004 m_rca
2001dd2c l     O .bss	00000004 m_irqstat
20017918 l     O .data	00000001 m_errorCode
2001dd30 l     O .bss	00000001 m_initDone
2001dd34 l     O .bss	00000010 m_csd
2001dd44 l     O .bss	00000001 m_dmaBusy
2001dd48 l     O .bss	00000004 m_sdClkKhz
2001dd4c l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
2001dd51 l     O .bss	00000001 tx_noautoflush
2001dd54 l     O .bss	00000004 tx_packet
2001dd58 l     O .bss	00000001 transmit_previous_timeout
2001dd5c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
2001dd61 l     O .bss	00000001 calibrating
20017919 l     O .data	00000001 analog_config_bits
2001dd62 l     O .bss	00000001 analog_reference_internal
2001791a l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00008d74 l     F .text	0000004c digitalWrite.part.1
00008dc0 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
20017920 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
2001dd68 l     O .bss	00000004 ep0_tx_ptr
2001dd6c l     O .bss	00000010 rx_last
2001dd7c l     O .bss	00000002 ep0_tx_len
2001dd80 l     O .bss	00000040 ep0_rx0_buf
2001ddc0 l     O .bss	00000010 rx_first
2001ddd0 l     O .bss	00000001 ep0_tx_data_toggle
2001ddd4 l     O .bss	00000040 ep0_rx1_buf
2001de14 l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
2001de24 l     O .bss	00000010 tx_last
2001de34 l     O .bss	00000008 setup
2001de3c l     O .bss	00000001 ep0_tx_bdt_bank
2001de40 l     O .bss	00000008 reply_buffer
2001de4c l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
2001de70 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
2001defc l     O .bss	00000004 rts_pin
2001df00 l     O .bss	00000001 rx_buffer_head
2001df01 l     O .bss	00000001 rx_buffer_tail
2001df04 l     O .bss	00000028 tx_buffer
2001df2c l     O .bss	00000040 rx_buffer
2001df6c l     O .bss	00000001 transmitting
2001df6d l     O .bss	00000001 tx_buffer_tail
2001df70 l     O .bss	00000004 transmit_pin
2001df74 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
2001df78 l     O .bss	00000004 rts_pin
2001df7c l     O .bss	00000001 transmitting
2001df7d l     O .bss	00000001 rx_buffer_tail
2001df80 l     O .bss	00000028 tx_buffer
2001dfa8 l     O .bss	00000040 rx_buffer
2001dfe8 l     O .bss	00000001 rx_buffer_head
2001dfe9 l     O .bss	00000001 tx_buffer_tail
2001dfec l     O .bss	00000004 transmit_pin
2001dff0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
2001dff4 l     O .bss	00000004 rts_pin
2001dff8 l     O .bss	00000001 rx_buffer_head
2001dff9 l     O .bss	00000001 rx_buffer_tail
2001dffc l     O .bss	00000028 tx_buffer
2001e024 l     O .bss	00000040 rx_buffer
2001e064 l     O .bss	00000001 transmitting
2001e065 l     O .bss	00000001 tx_buffer_tail
2001e068 l     O .bss	00000004 transmit_pin
2001e06c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
2001e070 l     O .bss	00000004 rts_pin
2001e074 l     O .bss	00000001 rx_buffer_head
2001e075 l     O .bss	00000001 rx_buffer_tail
2001e078 l     O .bss	00000040 tx_buffer
2001e0b8 l     O .bss	00000040 rx_buffer
2001e0f8 l     O .bss	00000001 transmitting
2001e0f9 l     O .bss	00000001 tx_buffer_tail
2001e0fc l     O .bss	00000004 transmit_pin
2001e100 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
2001e104 l     O .bss	00000004 rts_pin
2001e108 l     O .bss	00000001 rx_buffer_head
2001e109 l     O .bss	00000001 rx_buffer_tail
2001e10c l     O .bss	00000028 tx_buffer
2001e134 l     O .bss	00000040 rx_buffer
2001e174 l     O .bss	00000001 transmitting
2001e175 l     O .bss	00000001 tx_buffer_tail
2001e178 l     O .bss	00000004 transmit_pin
2001e17c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
20017934 l     O .data	00000012 device_descriptor
20017960 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
2001e180 l     O .bss	00000004 rts_pin
2001e184 l     O .bss	00000001 rx_buffer_head
2001e185 l     O .bss	00000001 rx_buffer_tail
2001e188 l     O .bss	00000028 tx_buffer
2001e1b0 l     O .bss	00000040 rx_buffer
2001e1f0 l     O .bss	00000001 transmitting
2001e1f1 l     O .bss	00000001 tx_buffer_tail
2001e1f4 l     O .bss	00000004 transmit_pin
2001e1f8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000bfd0 l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000d03c l     F .text	00000038 sulp
00013e90 l     O .text	00000014 fpi.6173
00013eb4 l     O .text	00000014 fpinan.6209
00013ec8 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000df70 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00013ef0 l     O .text	00000010 zeroes.7258
00013f44 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
00013f54 l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001078c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000107ac l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
000119a0 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
00014288 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoll.c
00012afc l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
00012ccc l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00012e58 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
200179d8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
20018380 l       .bss	00000000 __bss_start__
2001e248 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00008d2c  w    F .text	00000006 adc0_isr
0000b7c8 g     F .text	0000002c .hidden __aeabi_dcmpun
000089a8 g     F .text	0000001c usb_serial_available
2001d0c8 g     O .bss	00000008 I2S_32::dma
00012a28 g     F .text	0000005e __any_on
0000b78c g     F .text	00000012 .hidden __aeabi_dcmple
0000aa20 g     F .text	00000020 serial4_available
0000cdcc g     F .text	000000ba strcpy
0000b6c8 g     F .text	0000007a .hidden __cmpdf2
2001de7c g     O .bss	00000004 AudioStream::memory_pool
00007e34 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000a1d4  w    F .text	000000c4 yield
000061e8 g     F .text	000001e8 FatFile::write(void const*, unsigned int)
0000b6c8 g     F .text	0000007a .hidden __eqdf2
0000703c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00003e70 g     F .text	0000002a SdFile::addCluster()
00004988 g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20017948 g     O .data	00000018 usb_string_manufacturer_name_default
0000ab18 g     F .text	00000020 serial_available
00006170 g     F .text	00000076 FatFile::truncate()
200178a8 g     O .data	0000006c Wire1
0000b238 g     F .text	0000005a .hidden __floatdidf
00008ce4  w    F .text	00000048 hard_fault_isr
00008d2c  w    F .text	00000006 dma_ch6_isr
2001de80 g     O .bss	00000001 AudioStream::update_scheduled
2001dd00 g     O .bss	00000004 FsDateTime::callback
20017764 g     O .data	00000028 acqParameters
0000a2f4 g     F .text	00000020 Print::println()
00003720 g     F .text	00000130 TwoWire::isr()
0000a8f4 g     F .text	00000020 serial2_available
2001def8 g     O .bss	00000002 AudioStream::memory_used
00008d2c  w    F .text	00000006 uart0_lon_isr
00004888 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
000091ec g     F .text	000000c8 usb_rx_memory
0000a298  w    F .text	00000002 serialEvent5()
00007010  w    F .text	00000004 SdSpiCard::errorCode() const
2001ccd4 g     O .bss	00000084 delay1
00008d2c  w    F .text	00000006 dma_ch8_isr
000018bc g     F .text	000008d8 doMenu()
0000ac44 g     F .text	00000020 serial6_available
0000c84c g     F .text	00000002 __malloc_unlock
00004108 g     F .text	00000068 Sd2Card::chipSelectHigh()
2001dd04 g     O .bss	00000004 FsVolume::m_cwv
00005d18 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
00008c04 g     F .text	000000e0 analog_init
000092b4 g     F .text	00000084 usb_tx
0000df50 g     F .text	00000020 _strtod_r
00008d2c  w    F .text	00000006 portcd_isr
0001063c g     F .text	0000004a _vdprintf_r
000040f0 g     F .text	00000018 SdFile::write(unsigned char)
00013228 g     F .text	00000082 _sfread_r
0000c6e4 g     F .text	000000c6 memmove
0000a12c g     F .text	00000098 MillisTimer::runFromTimer()
2001da48 g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000c00c g     F .text	00000014 __locale_ctype_ptr
000121a0 g     F .text	0000004c _Balloc
00008d2c  w    F .text	00000006 can1_rx_warn_isr
00014304 g       .ARM.exidx	00000000 __exidx_end
00008d2c  w    F .text	00000006 dma_error_isr
0000669c g     F .text	0000003c FatPartition::freeChain(unsigned long)
2001de68 g     O .bss	00000001 EventResponder::runningFromYield
00008750 g     F .text	0000001a SdSpiArduinoDriver::receive()
00007200 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
00003850 g     F .text	0000000c i2c0_isr
0000a2c8 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b6b8 g     F .text	0000008a .hidden __gtdf2
0000bf74 g     F .text	0000000c __errno
00008d2c  w    F .text	00000006 portd_isr
00008d2c  w    F .text	00000006 enet_error_isr
00013ae4 g     O .text	00000020 TwoWire::i2c2_hardware
000010cc g     F .text	00000078 makeFilename(char*)
2001de54 g     O .bss	00000004 EventResponder::firstInterrupt
2001d00c g     O .bss	00000014 patchCord2
00012124 g     F .text	00000004 __localeconv_l
00007040  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00008d2c  w    F .text	00000006 tpm1_isr
00005324 g     F .text	00000018 ExFatPartition::rootLength()
00000d2c  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00007014  w    F .text	00000004 SdSpiCard::errorData() const
0000a2b4  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013bf8 g     O .text	00000200 digital_pin_to_info_PGM
000065f4 g     F .text	000000a8 FatPartition::allocContiguous(unsigned long, unsigned long*)
2001e244 g     O .bss	00000004 errno
0000727c g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
0000876c g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006b18 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
0000526c g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000ccf8 g     F .text	00000004 __seofread
00014304 g       .ARM.exidx	00000000 _etext
00002f00 g     F .text	00000134 _spi_dma_rxISR0()
20018380 g       .bss	00000000 _sbss
00003f00 g     F .text	000001f0 SdFile::write(void const*, unsigned int)
00000954 g     F .text	00000368 mProcess::update()
0000b754 g     F .text	00000010 .hidden __aeabi_cdcmple
00007840 g     F .text	0000000c SdioCard::errorData() const
2001dae0 g     O .bss	00000200 SdVolume::cacheBuffer_
0000a7f4  w    F .text	00000002 serialEvent6()
0000b930 g     F .text	00000160 .hidden __aeabi_fadd
00007f44 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000b92c g     F .text	00000164 .hidden __subsf3
00008e84 g     F .text	0000001c digitalRead
00008d2c  w    F .text	00000006 porte_isr
00002568 g     F .text	0000047c loop
0000a578 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
00008d2c  w    F .text	00000006 portb_isr
00008d2c  w    F .text	00000006 spi1_isr
0000aa40 g     F .text	000000d8 uart3_status_isr
0000a3d8  w    F .text	00000002 serialEvent1()
000045f4 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00008d2c  w    F .text	00000006 mcm_isr
2001cde4 g     O .bss	00000014 patchCord3
00008468 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000a0c4 g     F .text	00000068 MillisTimer::addToActiveList()
0000a768 g     F .text	00000028 Stream::peekNextDigit()
2001d044 g     O .bss	0000006c process1
000007b0  w    F .text	0000001c c_uSD::~c_uSD()
00003a68 g     F .text	000000f0 SdVolume::allocContiguous(unsigned long, unsigned long*)
00007144 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
2001de58 g     O .bss	00000004 EventResponder::lastInterrupt
0000bc10 g     F .text	00000024 .hidden __aeabi_f2lz
0000a914 g     F .text	0000010c uart1_status_isr
00006ea0 g     F .text	00000028 FsBaseFile::close()
000087fc g     F .text	00000134 memcpy
00008d2c  w    F .text	00000006 randnum_isr
00011f88 g     F .text	00000180 __hexnan
0000b744 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000630  w    F .text	000000e8 mDelay<2, 12>::update()
000052a4 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
00005f8c g     F .text	0000002a FatFile::peek()
0000e0d0 g     F .text	000016e4 _svfprintf_r
2001dcf4 g     O .bss	00000004 SdFile::dateTime_
0000b1c8 g     F .text	00000022 .hidden __floatsidf
20017762 g     O .data	00000002 mustClose
2001dd64 g     O .bss	00000004 systick_millis_count
0000b6c0 g     F .text	00000082 .hidden __ltdf2
2001dad8 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
00008ce4  w    F .text	00000048 bus_fault_isr
00008d2c  w    F .text	00000006 watchdog_isr
0000bbe0 g     F .text	00000000 .hidden __aeabi_uldivmod
0000385c g     F .text	0000000c i2c1_isr
2001de48 g     O .bss	00000001 usb_configuration
00008d2c  w    F .text	00000006 dma_ch11_isr
00000518  w    F .text	00000006 SdCardInterface::status()
00007ff8 g     F .text	00000030 SdioCard::syncDevice()
00007cf4 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00003918 g     F .text	0000005c SdVolume::cacheRawBlock(unsigned long, unsigned char)
00000850  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00005fb8 g     F .text	00000040 FatFile::readDirCache(bool)
0000a3c0  w    F .text	00000002 serialEvent2()
00012980 g     F .text	00000060 __ratio
00003868 g     F .text	0000000c i2c2_isr
2001de84 g     O .bss	00000070 AudioStream::memory_pool_available_mask
2001da20 g     O .bss	00000008 AudioOutputAnalog::dma
20017948  w    O .data	00000018 usb_string_manufacturer_name
2001e23c g     O .bss	00000008 usb_rx_byte_count_data
00008d2c  w    F .text	00000006 pit1_isr
0000c020 g     F .text	00000010 malloc
2001cdb0 g     O .bss	00000004 maxNoise
00008d2c  w    F .text	00000006 dma_ch4_isr
00013ac4 g     O .text	00000020 TwoWire::i2c1_hardware
2001d0d0 g     O .bss	000008f0 queue
0000a6a4 g     F .text	00000084 software_isr
0001342c  w    O .text	00000024 vtable for FsFile
00012108 g     F .text	0000001c iswspace
00008d2c  w    F .text	00000006 dma_ch7_isr
00003680  w    F .text	0000001e TwoWire::read()
0000ba98 g     F .text	0000001c .hidden __aeabi_i2f
00002cec  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00014198 g     O .text	000000c8 __mprec_tens
00009e04 g     F .text	000000f4 usb_init
2001def6 g     O .bss	00000002 AudioStream::memory_pool_first_mask
00007028  w    F .text	00000004 SdSpiCard::type() const
0000b844 g     F .text	00000040 .hidden __fixunsdfsi
00008d2c  w    F .text	00000006 lptmr_isr
2001e204 g     O .bss	00000004 __malloc_top_pad
00008e54 g     F .text	00000024 rtc_set
000131ec g     F .text	0000003a __ssrefill_r
00007050 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000578c g     F .text	000000e2 ExFatFile::truncate()
20017730 g     O .data	00000000 .hidden __dso_handle
0000b1a8 g     F .text	0000001e .hidden __aeabi_ui2d
00000cbc  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
00012128 g     F .text	0000001c _localeconv_r
00013044 g     F .text	00000024 _strtoull_r
00008e38 g     F .text	00000010 attachInterruptVector
00008708 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
000123b4 g     F .text	00000012 __i2b
000133f0  w    O .text	0000000c vtable for mRecordQueue<275>
20017730 g       .data	00000000 _sdata
2001d9c4 g     O .bss	00000004 maxValue
00013aa4 g     O .text	00000020 TwoWire::i2c0_hardware
0000647c g     F .text	0000000e FatCache::sync()
0000bc80 g     F .text	000002e2 .hidden __udivmoddi4
0000af24 g     F .text	00000000 .hidden __aeabi_drsub
00005b2c g     F .text	00000034 FatFile::addCluster()
0000cc30 g     F .text	00000024 _sbrk_r
000072d0 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
0000791c g     F .text	00000020 SdioCard::type() const
000001d0 g     F .text	000001f0 ResetHandler
00008930 g     F .text	00000048 usb_serial_getchar
00008d2c  w    F .text	00000006 can1_bus_off_isr
00008d2c  w    F .text	00000006 ftm2_isr
2001e230 g     O .bss	00000008 usb_cdc_line_coding
00008e78 g     F .text	0000000a digitalWrite
2001de60 g     O .bss	00000004 EventResponder::lastYield
00008d2c  w    F .text	00000006 uart5_status_isr
0000ac64 g     F .text	000000e4 lpuart0_status_isr
000045cc g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00013e24 g     O .text	00000004 usb_endpoint_config_table
00008d2c  w    F .text	00000006 dma_ch9_isr
00000d10  w    F .text	0000001c Print::write(char const*)
000008d4  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00008d2c  w    F .text	00000006 pit2_isr
0000b778 g     F .text	00000012 .hidden __aeabi_dcmplt
0000ae10 g     F .text	00000020 serial3_available
2001e200 g     O .bss	00000004 __malloc_max_sbrked_mem
00004170 g     F .text	000000b4 Sd2Card::chipSelectLow()
00008ea0 g     F .text	0000000a pinMode
000075cc g     F .text	00000042 SdSpiCard::writeStop()
2001ce0c g     O .bss	00000200 tempBuffer
00009138 g     F .text	0000004c usb_free
00008d2c  w    F .text	00000006 i2c3_isr
0000b1ec g     F .text	0000003a .hidden __extendsfdf2
000133fc  w    O .text	0000000c vtable for mDelay<2, 12>
0000f7b4 g     F .text	00000e88 __ssvfscanf_r
0000b4e8 g     F .text	000001d0 .hidden __aeabi_ddiv
0000af30 g     F .text	00000276 .hidden __adddf3
2001dadc g     O .bss	00000004 SdVolume::sdCard_
200177d0 g     O .data	0000006c Wire2
00007690 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000127f4 g     F .text	000000d0 __b2d
00002434  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
000142fc g       .ARM.exidx	00000000 __exidx_start
0000b294 g     F .text	00000254 .hidden __aeabi_dmul
000007dc  w    F .text	0000000c DMAChannel::~DMAChannel()
000074c4 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
00008d2c  w    F .text	00000006 pit0_isr
2001de64 g     O .bss	00000004 EventResponder::firstYield
00003e9c g     F .text	00000064 SdFile::seekSet(unsigned long)
00013e7c g     O .text	00000004 _global_impure_ptr
00008d2c  w    F .text	00000006 can1_error_isr
0000451c g     F .text	0000008c Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
00000920  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
200188a8 g     O .bss	00000200 aux
0000c850 g     F .text	000003de _realloc_r
0000bf80 g     F .text	00000050 __libc_init_array
2001e248 g       .bss	00000000 __bss_end
00003674  w    F .text	0000000c TwoWire::available()
00008d2c  w    F .text	00000006 can0_wakeup_isr
00004e5c g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000784c g     F .text	0000001c SdioCard::readCID(CID*)
00014094 g     O .text	00000100 __hexdig
00005614 g     F .text	000000ea ExFatFile::addDirCluster()
00008d2c  w    F .text	00000006 flash_cmd_isr
0000763c g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00003d34 g     F .text	000000d0 SDHC_CardWriteBlock(void const*, unsigned long)
00014260 g     O .text	00000028 __mprec_bigtens
00012280 g     F .text	00000098 __s2b
0000a29c  w    F .text	00000004 usb_serial_class::clear()
0000b1a8 g     F .text	0000001e .hidden __floatunsidf
0000ae30 g     F .text	000000d8 uart2_status_isr
00008d44 g     F .text	0000002c _sbrk
00000474 g     F .text	000000a4 I2S_32::isr32()
00012648 g     F .text	00000042 __mcmp
2001de6c g     O .bss	00000004 MillisTimer::listWaiting
2001da28 g     O .bss	00000008 AudioOutputTDM::dma
2001791c g     O .data	00000004 __brkval
2001dd60 g     O .bss	00000001 usb_cdc_line_rtsdtr
00008bbc g     F .text	00000048 usb_serial_flush_callback
00014294 g     F .text	00000000 _init
00005bf4 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
00008d2c  w    F .text	00000006 svcall_isr
0000a3dc g     F .text	0000006c AudioStream::initialize_memory(audio_block_struct*, unsigned int)
00008d2c  w    F .text	00000006 dma_ch15_isr
0000b884 g     F .text	0000009e .hidden __aeabi_d2f
00003400 g     F .text	00000020 day()
0000b92c g     F .text	00000164 .hidden __aeabi_fsub
00013b04 g     O .text	00000024 vtable for TwoWire
00008d2c  w    F .text	00000006 uart1_error_isr
0001170c g     F .text	00000028 __libc_fini_array
0000d078 g     F .text	00000ed8 _strtod_l
00011f58 g     F .text	00000030 __match
00008d2c  w    F .text	00000006 usbhs_phy_isr
2001da30 g     O .bss	00000008 AudioInputAnalogStereo::dma0
2001d024 g     O .bss	00000018 acq
2001e248 g       .bss	00000000 _ebss
00007ebc g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005cc8 g     F .text	00000050 FatFile::preAllocate(unsigned long)
2001da58 g     O .bss	00000008 AudioOutputADAT::dma
000008c0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000641c g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
2001d9c8 g     O .bss	00000004 started
00012318 g     F .text	00000040 __hi0bits
000005e0  w    F .text	00000050 mRecordQueue<275>::update()
0000b7f4 g     F .text	0000004e .hidden __fixdfsi
00008d2c g     F .text	00000006 unused_isr
00008d2c  w    F .text	00000006 spi0_isr
0000bac4 g     F .text	0000007c .hidden __floatdisf
00008d2c  w    F .text	00000006 dma_ch3_isr
00013450 g     O .text	0000000c vtable for mProcess
000007dc  w    F .text	0000000c DMAChannel::~DMAChannel()
20018cac g     O .bss	00004000 diskBuffer
2001cd74 g     O .bss	00000020 text
00001468 g     F .text	00000114 c_uSD::loadConfig(unsigned long*, int, long*, int)
00003440 g     F .text	00000024 year()
0000a7f8 g     F .text	00000004 operator delete(void*, unsigned int)
00008d2c  w    F .text	00000006 flash_error_isr
0000af30 g     F .text	00000276 .hidden __aeabi_dadd
0000b6c0 g     F .text	00000082 .hidden __ledf2
00000e48 g     F .text	000000d4 I2S_32::begin()
0000a7fc g     F .text	00000020 serial5_available
00008d2c  w    F .text	00000006 uart5_error_isr
0000bc34 g     F .text	0000004c .hidden __aeabi_f2ulz
00008d2c  w    F .text	00000006 rtc_seconds_isr
00013a04 g     O .text	00000094 SPIClass::spi0_hardware
00008d2c  w    F .text	00000006 pdb_isr
000124f8 g     F .text	000000a0 __pow5mult
0000b228 g     F .text	0000006a .hidden __aeabi_ul2d
00008ce4  w    F .text	00000048 usage_fault_isr
00008d2c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00006570 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00008d2c  w    F .text	00000006 dma_ch14_isr
000007cc g     F .text	00000004 getTeensy3Time()
00000000  w      *UND*	00000000 __deregister_frame_info
2001e238 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a1c4 g     F .text	00000010 systick_isr
00008d2c  w    F .text	00000006 rtc_alarm_isr
00000f1c g     F .text	000000b4 I2S_dividers(unsigned long*, unsigned long, unsigned long)
00007414 g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
2001de74 g     O .bss	00000004 AudioStream::first_update
00008d2c  w    F .text	00000006 dma_ch2_isr
00001144 g     F .text	0000006c wavHeader(unsigned long)
20017924 g     O .data	00000010 Serial
2001de78 g     O .bss	00000002 AudioStream::memory_used_max
00008d2c  w    F .text	00000006 ftm1_isr
000007d0  w    F .text	0000000c AudioConnection::~AudioConnection()
0000a2bc  w    F .text	00000006 usb_serial_class::write(unsigned char)
00008d34  w    F .text	0000000c startup_early_hook
00008d2c  w    F .text	00000006 dma_ch13_isr
000053d0 g     F .text	0000008c ExFatFile::addCluster()
00008d2c  w    F .text	00000006 uart2_error_isr
00008978 g     F .text	00000030 usb_serial_peekchar
0000b7b4 g     F .text	00000012 .hidden __aeabi_dcmpgt
0000c5e0 g     F .text	00000000 memchr
00006508 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
200179c0 g     O .data	00000016 usb_string_serial_number_default
00008ce4 g     F .text	00000048 fault_isr
000117d0 g     F .text	000001d0 _free_r
00007cf0 g     F .text	00000004 SdioCard::readStop()
00004e98 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000bfe8 g     F .text	0000001c __locale_mb_cur_max
0000b7a0 g     F .text	00000012 .hidden __aeabi_dcmpge
00008d2c  w    F .text	00000006 usb_charge_isr
00003464 g     F .text	00000044 setTime(long)
0000a2ac  w    F .text	00000004 usb_serial_class::flush()
00013168 g     F .text	00000082 _sungetc_r
00008d2c  w    F .text	00000006 cmt_isr
0000af2c g     F .text	0000027a .hidden __aeabi_dsub
000066d8 g     F .text	00000114 FatPartition::init(BlockDeviceInterface*, unsigned char)
00008d2c  w    F .text	00000006 usbhs_isr
2001837c g     O .data	00000004 __malloc_sbrk_base
0000a2a4  w    F .text	00000004 usb_serial_class::read()
00008d2c  w    F .text	00000006 ftm3_isr
00012ca8 g     F .text	00000024 _strtoll_r
2001d9c0 g     O .bss	00000002 I2S_32::block_offset
00008d2c  w    F .text	00000006 tsi0_isr
2001839c g     O .bss	0000050c uSD
0000b228 g     F .text	0000006a .hidden __floatundidf
00008d70  w    F .text	00000002 __cxa_pure_virtual
00012598 g     F .text	000000ae __lshift
00008d2c  w    F .text	00000006 spi2_isr
00005378 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
2001da38 g     O .bss	00000008 AudioInputAnalogStereo::dma1
0000ba98 g     F .text	0000001c .hidden __floatsisf
00013068 g     F .text	00000100 __ssprint_r
0000a3c4  w    F .text	00000002 serialEvent4()
00013324 g     F .text	0000005e _vasnprintf_r
0000a2c4  w    F .text	00000002 serialEvent()
2001ddd1 g     O .bss	00000001 usb_reboot_timer
2001d9f0 g     O .bss	00000008 AudioOutputPWM::dma
000106e8 g     F .text	000000a4 __register_exitproc
00004d5c g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
000034a8 g     F .text	0000001c setSyncProvider(long (*)())
0000cf9c g     F .text	000000a0 strncmp
00001714 g     F .text	00000164 checkDutyCycle(ACQ_Parameters_s*, short)
00000cbc  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
000089c4 g     F .text	00000038 usb_serial_flush_input
0001345c g     O .text	0000000c vtable for I2S_32
000123c8 g     F .text	00000130 __multiply
00008b04 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
2001e208 g     O .bss	00000028 __malloc_current_mallinfo
000128c4 g     F .text	000000ba __d2b
00008d2c  w    F .text	00000006 can0_bus_off_isr
0000790c  w    F .text	0000000e SdioCard::~SdioCard()
00000d50 g     F .text	000000f8 I2S_32::config_i2s()
2001de3d g     O .bss	00000001 usb_rx_memory_needed
00007dc0 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00012e34 g     F .text	00000024 _strtoul_r
00009338 g     F .text	00000acc usb_isr
0000bf68 g     F .text	0000000c __cxa_atexit
000046b8 g     F .text	0000019e ExFatFile::read(void*, unsigned int)
0000a674 g     F .text	00000030 AudioStream::update_setup()
0000b1c8 g     F .text	00000022 .hidden __aeabi_i2d
0000bc10 g     F .text	00000024 .hidden __fixsfdi
00004f58 g     F .text	0000000e FsCache::sync()
0000a7ec g     F .text	00000006 Stream::parseInt()
2001778c g     O .data	00000040 SPI
0000c680 g     F .text	00000062 memcmp
2001cd70 g     O .bss	00000004 I2S_32::block_right
00013df8  w    O .text	00000028 vtable for usb_serial_class
0000878c g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
00008d2c  w    F .text	00000006 uart3_error_isr
0000bab4 g     F .text	0000008c .hidden __floatundisf
20017758 g     O .data	00000005 postfix
000087f8  w    F .text	00000004 sdCsWrite(unsigned char, bool)
0000a728 g     F .text	00000040 Stream::timedPeek()
0000cca0 g     F .text	00000058 sscanf
2001de5c g     O .bss	00000004 MillisTimer::listActive
0000bf64  w    F .text	00000002 .hidden __aeabi_ldiv0
2001da68 g     O .bss	00000008 AudioInputI2SHex::dma
00008d2c  w    F .text	00000006 porta_isr
0000b4e8 g     F .text	000001d0 .hidden __divdf3
0000157c g     F .text	00000198 setWakeupCallandSleep(unsigned long)
000129e0 g     F .text	00000046 __copybits
200173d0 g     O .usbbuffers	00000360 usb_buffer_memory
0000732c g     F .text	00000098 SdSpiCard::sectorCount()
2001cd94 g     O .bss	00000014 patchCord5
00008d2c  w    F .text	00000006 low_voltage_isr
20017f70 g     O .data	00000408 __malloc_av_
0000ba90 g     F .text	00000024 .hidden __aeabi_ui2f
00008d2c  w    F .text	00000006 can0_error_isr
00008f8c g     F .text	0000016c _init_Teensyduino_internal_
20017754 g     O .data	00000004 outptr
0000b294 g     F .text	00000254 .hidden __muldf3
00008b64 g     F .text	00000058 usb_serial_flush_output
00008d2c  w    F .text	00000006 dma_ch12_isr
2001d9f8 g     O .bss	00000008 AudioInputI2S::dma
0000c848 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00006814 g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
00008d2c  w    F .text	00000006 can1_wakeup_isr
20017200 g     O .dmabuffers	000001d0 _VectorsRam
000087a4 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00013384 g     F .text	0000005e _calloc_r
00008d2c  w    F .text	00000006 pit3_isr
2001d9e4 g     O .bss	00000004 getTimePtr
00008d2c  w    F .text	00000006 enet_rx_isr
000055b4 g     F .text	0000005e ExFatFile::sync()
00007a48 g     F .text	0000001c SdioCard::isBusy()
00008d2c  w    F .text	00000006 portc_isr
0000748c g     F .text	00000038 SdSpiCard::readStop()
00000fd0 g     F .text	000000fc I2S_modification(unsigned long, unsigned short, int)
2001da40 g     O .bss	00000008 AudioInputI2SQuad::dma
0000c7ac g     F .text	0000009a memset
0000a3c8 g     F .text	00000010 main
000039f8 g     F .text	00000070 SdVolume::fatGet(unsigned long, unsigned long*) const
2001da08 g     O .bss	00000008 AudioOutputI2S::dma
2001e1fc g     O .bss	00000004 __malloc_max_total_mem
00004f68 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000bac4 g     F .text	0000007c .hidden __aeabi_l2f
2001d040 g     O .bss	00000004 I2S_32::block_left
00003300 g     F .text	000000a0 now()
00005870 g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
00008ce4  w    F .text	00000048 memmanage_fault_isr
20017734 g     O .data	00000020 snipParameters
0000ad48 g     F .text	0000007c usb_init_serialnumber
00001878 g     F .text	00000042 setRTCTime(int, int, int, int, int, int)
0000e0a8 g     F .text	00000024 _strtol_r
0000b884 g     F .text	0000009e .hidden __truncdfsf2
000142f8 g       .text	00000000 __init_array_end
000108d8 g     F .text	00000e34 _dtoa_r
0000c040 g     F .text	00000570 _malloc_r
00008d2c  w    F .text	00000006 debugmonitor_isr
000106a0 g     F .text	0000001a __ascii_wctomb
0000b238 g     F .text	0000005a .hidden __aeabi_l2d
2001da10 g     O .bss	00000008 AudioInputI2SOct::dma
000132ac g     F .text	00000078 __submore
00009ffc g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00003034 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
5f72fff1 g       *ABS*	00000000 __rtc_localtime
00008eac g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
000011b0 g     F .text	00000070 c_uSD::init()
0000bab4 g     F .text	0000008c .hidden __aeabi_ul2f
00008d2c  w    F .text	00000006 cmp1_isr
0000bc34 g     F .text	0000004c .hidden __fixunssfdi
00008d2c  w    F .text	00000006 ftm0_isr
0000545c g     F .text	00000158 ExFatFile::syncDir()
00011734 g     F .text	0000009c _malloc_trim_r
200179bc g     O .data	00000004 string0
00003c30 g     F .text	00000104 SDHC_CardReadBlock(void*, unsigned long)
000089fc g     F .text	00000108 usb_serial_write
00008d40  w    F .text	00000002 startup_late_hook
0000a2a8  w    F .text	00000004 usb_serial_class::available()
00001220 g     F .text	00000120 c_uSD::close()
00006164 g     F .text	0000000c FatFile::sync()
200179a4  w    O .data	00000016 usb_string_product_name
00008ef0 g     F .text	0000009c delay
0000b6c8 g     F .text	0000007a .hidden __nedf2
00008d2c  w    F .text	00000006 tpm0_isr
2001de50 g     O .bss	00000002 dma_channel_allocated_mask
000142f8 g     F .fini	00000000 _fini
20017914 g     O .data	00000004 SdVolume::cacheBlockNumber_
000036f8 g     F .text	00000026 TwoWire::write(unsigned char)
2001da00 g     O .bss	00000008 AudioOutputPT8211::dma
00003420 g     F .text	00000020 month()
0000245c g     F .text	0000010c c_uSD::write(short*, long)
000073c4 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
0000a324 g     F .text	0000001c Print::printf(char const*, ...)
0000cc54 g     F .text	0000004c sprintf
00008d2c  w    F .text	00000006 i2s0_rx_isr
00008d2c  w    F .text	00000006 uart4_error_isr
00005ca8 g     F .text	0000001e FatFile::close()
0000648c g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
000107a0 g     F .text	0000000c atexit
00007894  w    F .text	00000002 SdioCard::~SdioCard()
000008a8  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000106bc g     F .text	0000002c _write_r
0000053c g     F .text	000000a4 I2S_32::update()
2001da84 g     O .bss	00000054 SD
00007ba4 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
2001cdac g     O .bss	00000001 I2S_32::update_responsibility
0000b924 g     F .text	0000016c .hidden __aeabi_frsub
0000a4f0 g     F .text	00000054 AudioStream::release(audio_block_struct*)
00008d2c  w    F .text	00000006 can0_message_isr
0000af0c g     F .text	0000000c nanf
20017e00 g     O .data	00000004 _impure_ptr
00008d2c  w    F .text	00000006 can1_message_isr
00004858 g     F .text	0000002e ExFatFile::peek()
00013408  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
2001da78 g     O .bss	00000008 AudioOutputSPDIF::dma
00012144 g     F .text	0000005c _mbrtowc_r
00008d2c  w    F .text	00000006 nmi_isr
2001783c g     O .data	0000006c Wire
00006a60 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
0000a544 g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00007834 g     F .text	0000000c SdioCard::errorCode() const
00005dd8 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
0000090c  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
000142a0 g       .text	00000000 __preinit_array_end
00000718 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000703c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
2001da60 g     O .bss	00000008 AudioInputTDM::dma
00008d2c  w    F .text	00000006 sdhc_isr
000033c0 g     F .text	00000020 minute()
0000501c g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00005700 g     F .text	0000008a ExFatFile::preAllocate(unsigned long long)
000051e0 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007514 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000c5b0 g     F .text	0000002a __ascii_mbtowc
00007104 g     F .text	0000003e SdSpiCard::isBusy()
000127a0 g     F .text	00000054 __ulp
00013b48 g     O .text	00000058 vtable for SdSpiCard
0000a448 g     F .text	000000a8 AudioStream::allocate()
20018aac g     O .bss	00000200 header
00007324  w    F .text	00000008 SdSpiCard::readCID(CID*)
000036a0  w    F .text	00000016 TwoWire::peek()
000036b8  w    F .text	00000002 TwoWire::flush()
00002194 g     F .text	00000208 setup
00013e28 g     O .text	00000054 usb_descriptor_list
00009184 g     F .text	0000003c usb_rx
00007998 g     F .text	00000020 SdioCard::status()
00004224 g     F .text	00000054 Sd2Card::waitNotBusy(unsigned int)
00008d2c  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000b844 g     F .text	00000040 .hidden __aeabi_d2uiz
00001340 g     F .text	00000128 c_uSD::storeConfig(unsigned long*, int, long*, int)
2001cd58 g     O .bss	00000014 patchCord1
00008d2c  w    F .text	00000006 uart0_error_isr
2001cdf8 g     O .bss	00000014 patchCord4
000090f8 g     F .text	00000040 usb_malloc
00005df4 g     F .text	00000198 FatFile::read(void*, unsigned int)
00008d2c  w    F .text	00000006 i2s0_isr
00005de8 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
0000700c g     F .text	00000004 operator new(unsigned int, unsigned long*)
0000731c  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
00009fc4 g     F .text	00000038 DMAChannel::release()
00008b1c g     F .text	00000048 usb_serial_write_buffer_free
000071c4 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
00008d2c  w    F .text	00000006 enet_timer_isr
0000a590 g     F .text	00000068 AudioConnection::connect()
0000b764 g     F .text	00000012 .hidden __aeabi_dcmpeq
00004330 g     F .text	00000060 Sd2Card::waitStartBlock()
00003204 g     F .text	000000fc makeTime(tmElements_t const&)
2001da70 g     O .bss	00000008 AudioInputPDM::dma
000036bc g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
0000a314  w    F .text	0000000e _write
20018380 g       .data	00000000 _edata
00005280 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
00007894  w    F .text	00000002 SdioCard::~SdioCard()
00008d2c  w    F .text	00000006 i2s0_tx_isr
00008d2c  w    F .text	00000006 adc1_isr
00007610 g     F .text	0000002c SdSpiCard::syncDevice()
00005b60 g     F .text	00000094 FatFile::addDirCluster()
0000a2b0  w    F .text	00000004 usb_serial_class::availableForWrite()
2001775e g     O .data	00000002 I2S_32::shift
00008d2c  w    F .text	00000006 cmp0_isr
0000adc4 g     F .text	0000004c ultoa
00013b28 g     O .text	00000018 vtable for SdFile
000033e0 g     F .text	00000020 second()
0000239c  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
00006ec8 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
0000a07c g     F .text	00000044 EventResponder::runFromInterrupt()
20018378 g     O .data	00000004 __malloc_trim_threshold
0000a2a0  w    F .text	00000004 usb_serial_class::peek()
0000a5f8 g     F .text	0000007a AudioConnection::disconnect()
00004450 g     F .text	000000cc Sd2Card::writeData(unsigned char, unsigned char const*)
0000ba90 g     F .text	00000024 .hidden __floatunsisf
0001268c g     F .text	00000114 __mdiff
00007884 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b7f4 g     F .text	0000004e .hidden __aeabi_d2iz
00005214 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
2001dd50 g     O .bss	00000001 usb_cdc_transmit_flush_timer
2001defa g     O .bss	00000002 AudioStream::cpu_cycles_total
00008d2c  w    F .text	00000006 pit_isr
000033a0 g     F .text	00000020 hour()
00004278 g     F .text	000000b8 Sd2Card::cardCommand(unsigned char, unsigned long)
00007cf0 g     F .text	00000004 SdioCard::writeStop()
00003898 g     F .text	00000080 SdVolume::cacheFlush()
0000702c  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012a88 g     F .text	00000072 __sccl
000045b8 g     F .text	00000014 ExFatFile::close()
00013f80 g     O .text	00000101 _ctype_
00008d2c  w    F .text	00000006 dac0_isr
00007018  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
000142a0 g       .text	00000000 __init_array_start
0000bf64  w    F .text	00000002 .hidden __aeabi_idiv0
00008d2c  w    F .text	00000006 can1_tx_warn_isr
0000b7c8 g     F .text	0000002c .hidden __unorddf2
00004390 g     F .text	000000c0 Sd2Card::SD_readBlock(unsigned long, unsigned char*)
0000ab38 g     F .text	0000010c uart0_status_isr
00008d2c  w    F .text	00000006 mcg_isr
0000a790 g     F .text	0000005a Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
00009ef8 g     F .text	000000cc DMAChannel::begin(bool)
0000cec0 g     F .text	000000dc strlen
0000c004 g     F .text	00000006 __locale_ctype_ptr_l
0000b754 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b6b8 g     F .text	0000008a .hidden __gedf2
00005ff8 g     F .text	00000094 FatFile::seekSet(unsigned long)
00011a48 g     F .text	00000510 __gethex
200179a4 g     O .data	00000016 usb_string_product_name_default
2001da50 g     O .bss	00000008 AudioOutputI2SQuad::dma
00010688 g     F .text	00000018 vdprintf
00008d2c  w    F .text	00000006 dma_ch1_isr
00007b38 g     F .text	0000006c SdioCard::sectorCount()
2001d0b4 g     O .bss	00000014 patchCord6
00006f48 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
000007b0  w    F .text	0000001c c_uSD::~c_uSD()
000091c0 g     F .text	0000002c usb_tx_packet_count
0000ccfc g     F .text	000000ce strchr
00013ba0 g     O .text	00000058 vtable for SdioCard
0000b1ec g     F .text	0000003a .hidden __aeabi_f2d
00008d2c  w    F .text	00000006 dma_ch5_isr
00008d2c  w    F .text	00000006 can0_rx_warn_isr
00008d2c  w    F .text	00000006 can0_tx_warn_isr
0000a81c g     F .text	000000d8 uart4_status_isr
00008534 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
2001da18 g     O .bss	00000008 AudioInputAnalog::dma
2001def4 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00008678 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000af2c g     F .text	0000027a .hidden __subdf3
000142a0 g       .text	00000000 __preinit_array_start
000133e4  w    O .text	0000000c vtable for AudioStream
000050fc g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00012358 g     F .text	0000005a __lo0bits
000051a4 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
0000608c g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000bb40 g     F .text	00000000 .hidden __aeabi_ldivmod
0000af08  w    F .text	00000002 serialEvent3()
0000af18 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00008e48 g     F .text	0000000c rtc_get
00008d2c  w    F .text	00000006 cmp2_isr
0000b930 g     F .text	00000160 .hidden __addsf3
0000a0c0 g     F .text	00000004 pendablesrvreq_isr
000007d0  w    F .text	0000000c AudioConnection::~AudioConnection()
0000046c  w    F .text	00000004 Print::availableForWrite()
20017e04 g     O .data	0000016c __global_locale
00008d2c  w    F .text	00000006 wakeup_isr
000080d4 g     F .text	00000394 SdioCard::begin(SdioConfig)
00004e8c g     F .text	0000000c FsCache::invalidate()
00008d2c  w    F .text	00000006 cmp3_isr
0000303c g     F .text	000001b0 breakTime(long, tmElements_t&)
0000a340 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00006498 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000c030 g     F .text	00000010 free
2001dce0 g     O .bss	00000001 SdVolume::cacheDirty_
00008d2c  w    F .text	00000006 tpm2_isr
00012200 g     F .text	00000080 __multadd
000121ec g     F .text	00000012 _Bfree
00008d2c  w    F .text	00000006 dma_ch0_isr
200179c0  w    O .data	00000016 usb_string_serial_number
00008d2c  w    F .text	00000006 enet_tx_isr
0000533c g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
000085a8 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00007868 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ....-.......
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	............-...
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	-...............
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	-...-...-...-...
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	-...-...-...-...
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	-...-...-...-...
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	-...-...-...-...
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	-...-...-...-...
      90:	-...-...-...-...
      a0:	Q8..]8..-...-...
      b0:	-...-...-...9...
      c0:	-.......-...1...
      d0:	-...A...-...-...
      e0:	-...-...-...-...
      f0:	-...-...-...-...
     100:	-...-...-...-...
     110:	-...9...-...-...
     120:	-...-...-...-...
     130:	-...-...-...-...
     140:	....-.......-...
     150:	-...-...-...-...
     160:	-...-...i8..-...
     170:	-...-...-...-...
     180:	-...-...-...-...
     190:	-...-...e...-...
     1a0:	-...-...-...-...
     1b0:	-...-...-...-...
     1c0:	-...-...-...-...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	8d34 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	8f8c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	8e54 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	8e54 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	bf80 <__libc_init_array>

	startup_late_hook();
     32c:	bl	8d40 <startup_late_hook>
	main();
     330:	bl	a3c8 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x20018380
     360:	.word	0x00014300
     364:	.word	0x20017730
     368:	.word	0x20018380
     36c:	.word	0x2001e248
     370:	.word	0x20017200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x5f72fff1
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x20018380
     42c:	.word	0x00000000
     430:	.word	0x000142fc

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x20018384
     460:	.word	0x000142fc
     464:	.word	0x20018380
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <I2S_32::isr32()>:
  uint32_t daddr, offset;
  const int32_t *src, *end;
  int16_t *dest_left, *dest_right;
  audio_block_t *left, *right;

  daddr = (uint32_t)(dma.TCD->DADDR);
     474:	ldr	r2, [pc, #124]	; (4f4 <I2S_32::isr32()+0x80>)

  dma.clearInterrupt();
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     476:	ldr	r3, [pc, #128]	; (4f8 <I2S_32::isr32()+0x84>)
  uint32_t daddr, offset;
  const int32_t *src, *end;
  int16_t *dest_left, *dest_right;
  audio_block_t *left, *right;

  daddr = (uint32_t)(dma.TCD->DADDR);
     478:	ldr	r1, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     47a:	ldr	r0, [pc, #128]	; (4fc <I2S_32::isr32()+0x88>)
     47c:	ldr	r1, [r1, #16]

  dma.attachInterrupt(isr32); 
}

void I2S_32::isr32(void)
{
     47e:	push	{r4, r5, r6}

  daddr = (uint32_t)(dma.TCD->DADDR);

  dma.clearInterrupt();
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     480:	cmp	r1, r3
     482:	ldrb	r2, [r2, #4]
     484:	strb	r2, [r0, #0]
     486:	bcs.n	49a <I2S_32::isr32()+0x26>
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
    if (I2S_32::update_responsibility) AudioStream::update_all();
     488:	ldr	r2, [pc, #116]	; (500 <I2S_32::isr32()+0x8c>)
     48a:	ldrb	r2, [r2, #0]
     48c:	cbz	r2, 4ec <I2S_32::isr32()+0x78>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     48e:	ldr	r2, [pc, #116]	; (504 <I2S_32::isr32()+0x90>)
     490:	movs	r1, #1
     492:	str	r1, [r2, #0]
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     494:	add.w	r6, r3, #512	; 0x200
     498:	b.n	4a0 <I2S_32::isr32()+0x2c>
    if (I2S_32::update_responsibility) AudioStream::update_all();
  } else {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
    src = (int32_t *)&i2s_rx_buffer_32[0];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
     49a:	mov	r6, r3
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
    if (I2S_32::update_responsibility) AudioStream::update_all();
  } else {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
    src = (int32_t *)&i2s_rx_buffer_32[0];
     49c:	sub.w	r3, r3, #512	; 0x200
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
  }
  
   // extract 16 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES" samples
  left = I2S_32::block_left;
     4a0:	ldr	r1, [pc, #100]	; (508 <I2S_32::isr32()+0x94>)
  right = I2S_32::block_right;
     4a2:	ldr	r2, [pc, #104]	; (50c <I2S_32::isr32()+0x98>)
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
  }
  
   // extract 16 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES" samples
  left = I2S_32::block_left;
     4a4:	ldr	r1, [r1, #0]
  right = I2S_32::block_right;
     4a6:	ldr	r0, [r2, #0]
  if (left != NULL && right != NULL) {
     4a8:	cbz	r1, 4e8 <I2S_32::isr32()+0x74>
     4aa:	cbz	r0, 4e8 <I2S_32::isr32()+0x74>
    offset = I2S_32::block_offset;
     4ac:	ldr	r5, [pc, #96]	; (510 <I2S_32::isr32()+0x9c>)
     4ae:	ldrh	r4, [r5, #0]
    if (offset <= AUDIO_BLOCK_SAMPLES/2) {
     4b0:	cmp	r4, #64	; 0x40
     4b2:	bhi.n	4e8 <I2S_32::isr32()+0x74>
      dest_left = &(left->data[offset]);
     4b4:	lsls	r2, r4, #1
     4b6:	add	r1, r2
      dest_right = &(right->data[offset]);
     4b8:	add	r0, r2
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
     4ba:	add.w	r2, r4, #64	; 0x40
     4be:	ldr	r4, [pc, #84]	; (514 <I2S_32::isr32()+0xa0>)
     4c0:	strh	r2, [r5, #0]
     4c2:	adds	r1, #2
     4c4:	adds	r0, #2
      do {
        *dest_left++ = (*src++)>>I2S_32::shift;
     4c6:	ldr.w	r2, [r3], #8
     4ca:	ldrsh.w	r5, [r4]
     4ce:	asrs	r2, r5
     4d0:	strh.w	r2, [r1, #2]!
        *dest_right++ = (*src++)>>I2S_32::shift;
     4d4:	ldr.w	r2, [r3, #-4]
     4d8:	ldrsh.w	r5, [r4]
      } while (src < end);
     4dc:	cmp	r6, r3
      dest_left = &(left->data[offset]);
      dest_right = &(right->data[offset]);
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
      do {
        *dest_left++ = (*src++)>>I2S_32::shift;
        *dest_right++ = (*src++)>>I2S_32::shift;
     4de:	asr.w	r2, r2, r5
     4e2:	strh.w	r2, [r0, #2]!
      } while (src < end);
     4e6:	bhi.n	4c6 <I2S_32::isr32()+0x52>
    }
  }
}
     4e8:	pop	{r4, r5, r6}
     4ea:	bx	lr
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     4ec:	add.w	r6, r3, #512	; 0x200
     4f0:	b.n	4a0 <I2S_32::isr32()+0x2c>
     4f2:	nop
     4f4:	.word	0x2001d0c8
     4f8:	.word	0x1fff0400
     4fc:	.word	0x4000801f
     500:	.word	0x2001cdac
     504:	.word	0xe000e208
     508:	.word	0x2001d040
     50c:	.word	0x2001cd70
     510:	.word	0x2001d9c0
     514:	.word	0x2001775e

00000518 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     518:	mov.w	r0, #4294967295
     51c:	bx	lr
     51e:	nop

00000520 <llwuISR()>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     520:	ldr	r2, [pc, #16]	; (534 <llwuISR()+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     522:	ldr	r1, [pc, #20]	; (538 <llwuISR()+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     524:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     526:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     528:	orr.w	r3, r3, #32
     52c:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     52e:	str	r0, [r1, #0]
     530:	bx	lr
     532:	nop
     534:	.word	0x4007c00d
     538:	.word	0x4003d01c

0000053c <I2S_32::update()>:
    }
  }
}

void I2S_32::update(void)
{
     53c:	push	{r3, r4, r5, r6, r7, lr}
     53e:	mov	r6, r0
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
     540:	bl	a448 <AudioStream::allocate()>
  if (new_left != NULL) {
     544:	mov	r4, r0
     546:	cbz	r0, 584 <I2S_32::update()+0x48>
    new_right = allocate();
     548:	bl	a448 <AudioStream::allocate()>
    if (new_right == NULL) {
     54c:	mov	r5, r0
     54e:	cmp	r0, #0
     550:	beq.n	5c8 <I2S_32::update()+0x8c>
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     552:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     554:	ldr	r3, [pc, #124]	; (5d4 <I2S_32::update()+0x98>)
     556:	ldrh	r2, [r3, #0]
     558:	cmp	r2, #127	; 0x7f
     55a:	bhi.n	590 <I2S_32::update()+0x54>
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
  } else if (new_left != NULL) {
     55c:	cmp	r4, #0
     55e:	beq.n	5c4 <I2S_32::update()+0x88>
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
     560:	ldr	r1, [pc, #116]	; (5d8 <I2S_32::update()+0x9c>)
     562:	ldr	r2, [r1, #0]
     564:	cbz	r2, 578 <I2S_32::update()+0x3c>
      block_right = new_right;
      block_offset = 0;
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
     566:	cpsie	i
      release(new_left);
     568:	mov	r0, r4
     56a:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
      release(new_right);
     56e:	mov	r0, r5
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     570:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
      release(new_left);
      release(new_right);
     574:	b.w	a4f0 <AudioStream::release(audio_block_struct*)>
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
      block_right = new_right;
     578:	ldr	r0, [pc, #96]	; (5dc <I2S_32::update()+0xa0>)
  } else if (new_left != NULL) {
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
     57a:	str	r4, [r1, #0]
      block_right = new_right;
      block_offset = 0;
     57c:	strh	r2, [r3, #0]
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
      // the DMA doesn't have any blocks to fill, so
      // give it the ones we just allocated
      block_left = new_left;
      block_right = new_right;
     57e:	str	r5, [r0, #0]
      block_offset = 0;
      __enable_irq();
     580:	cpsie	i
     582:	pop	{r3, r4, r5, r6, r7, pc}
  }
}

void I2S_32::update(void)
{
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     584:	mov	r5, r0
    if (new_right == NULL) {
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     586:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     588:	ldr	r3, [pc, #72]	; (5d4 <I2S_32::update()+0x98>)
     58a:	ldrh	r2, [r3, #0]
     58c:	cmp	r2, #127	; 0x7f
     58e:	bls.n	55c <I2S_32::update()+0x20>
      { block_left->data[64]=1<<10;
        block_right->data[32]=1<<9;
        count=0;
      }
#endif
    out_left = block_left;
     590:	ldr	r2, [pc, #68]	; (5d8 <I2S_32::update()+0x9c>)
    block_left = new_left;
    out_right = block_right;
     592:	ldr	r1, [pc, #72]	; (5dc <I2S_32::update()+0xa0>)
      { block_left->data[64]=1<<10;
        block_right->data[32]=1<<9;
        count=0;
      }
#endif
    out_left = block_left;
     594:	ldr	r7, [r2, #0]
    block_left = new_left;
     596:	str	r4, [r2, #0]
    out_right = block_right;
    block_right = new_right;
    block_offset = 0;
     598:	movs	r2, #0
        count=0;
      }
#endif
    out_left = block_left;
    block_left = new_left;
    out_right = block_right;
     59a:	ldr	r4, [r1, #0]
    block_right = new_right;
    block_offset = 0;
     59c:	strh	r2, [r3, #0]
      }
#endif
    out_left = block_left;
    block_left = new_left;
    out_right = block_right;
    block_right = new_right;
     59e:	str	r5, [r1, #0]
    block_offset = 0;
    __enable_irq();
     5a0:	cpsie	i
    
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
     5a2:	mov	r1, r7
     5a4:	mov	r0, r6
     5a6:	bl	a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     5aa:	mov	r0, r7
     5ac:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     5b0:	mov	r0, r6
     5b2:	mov	r1, r4
     5b4:	movs	r2, #1
     5b6:	bl	a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     5ba:	mov	r0, r4
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     5bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
     5c0:	b.w	a4f0 <AudioStream::release(audio_block_struct*)>
    }
  } else {
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
     5c4:	cpsie	i
     5c6:	pop	{r3, r4, r5, r6, r7, pc}
  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
  if (new_left != NULL) {
    new_right = allocate();
    if (new_right == NULL) {
      release(new_left);
     5c8:	mov	r0, r4
     5ca:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
      new_left = NULL;
     5ce:	mov	r4, r5
     5d0:	b.n	552 <I2S_32::update()+0x16>
     5d2:	nop
     5d4:	.word	0x2001d9c0
     5d8:	.word	0x2001d040
     5dc:	.word	0x2001cd70

000005e0 <mRecordQueue<275>::update()>:
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     5e0:	push	{r4, lr}
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     5e2:	movs	r1, #0
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     5e4:	mov	r4, r0
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     5e6:	bl	a578 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     5ea:	cbz	r0, 61a <mRecordQueue<275>::update()+0x3a>
	if (!enabled) {
     5ec:	ldrh.w	r3, [r4, #1140]	; 0x474
     5f0:	uxth	r3, r3
     5f2:	cbz	r3, 61c <mRecordQueue<275>::update()+0x3c>
		release(block);
		return;
	}
	h = head + 1;
     5f4:	ldrh.w	r3, [r4, #1136]	; 0x470
	if (h >= mq) h = 0;
	if (h == tail) {
     5f8:	ldrh.w	r2, [r4, #1138]	; 0x472
	if (!block) return;
	if (!enabled) {
		release(block);
		return;
	}
	h = head + 1;
     5fc:	adds	r3, #1
     5fe:	uxth	r3, r3
	if (h >= mq) h = 0;
     600:	cmp.w	r3, #274	; 0x112
     604:	it	hi
     606:	movhi	r3, #0
	if (h == tail) {
     608:	uxth	r2, r2
     60a:	cmp	r3, r2
     60c:	beq.n	624 <mRecordQueue<275>::update()+0x44>
		release(block); // drop incomming data
    dropCount++; // flag for main to know
	} else {
		queue[h] = block; // store incomming data
     60e:	add.w	r2, r3, #8
     612:	str.w	r0, [r4, r2, lsl #2]
		head = h;
     616:	strh.w	r3, [r4, #1136]	; 0x470
     61a:	pop	{r4, pc}
	}
}
     61c:	ldmia.w	sp!, {r4, lr}
	uint16_t h;

	block = receiveReadOnly();
	if (!block) return;
	if (!enabled) {
		release(block);
     620:	b.w	a4f0 <AudioStream::release(audio_block_struct*)>
		return;
	}
	h = head + 1;
	if (h >= mq) h = 0;
	if (h == tail) {
		release(block); // drop incomming data
     624:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
    dropCount++; // flag for main to know
     628:	ldr	r3, [r4, #24]
     62a:	adds	r3, #1
     62c:	str	r3, [r4, #24]
     62e:	pop	{r4, pc}

00000630 <mDelay<2, 12>::update()>:
template <int nch, int mq>
void mDelay<nch,mq>::update(void)
{
  audio_block_t *block;

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
     630:	ldrh.w	r3, [r0, #130]	; 0x82
     634:	uxth	r3, r3
  for(int ii=0; ii<nch; ii++) for (int jj=0; jj<mq; jj++) queue[ii][jj]=NULL;
  head=mq;
}

template <int nch, int mq>
void mDelay<nch,mq>::update(void)
     636:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     63a:	mov	r5, r0
{
  audio_block_t *block;

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
     63c:	cbz	r3, 648 <mDelay<2, 12>::update()+0x18>
     63e:	ldrh.w	r3, [r0, #130]	; 0x82
     642:	uxth	r3, r3
     644:	cmp	r3, #11
     646:	bls.n	670 <mDelay<2, 12>::update()+0x40>
  for(int ii=0; ii<nch; ii++) for (int jj=0; jj<mq; jj++) queue[ii][jj]=NULL;
  head=mq;
}

template <int nch, int mq>
void mDelay<nch,mq>::update(void)
     648:	movs	r4, #0

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
    {
      block = receiveReadOnly(ii);
     64a:	mov	r1, r4
     64c:	mov	r0, r5
     64e:	bl	a578 <AudioStream::receiveReadOnly(unsigned int)>
      if(block)
      {
        transmit(block,ii);
     652:	uxtb	r2, r4
  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
    {
      block = receiveReadOnly(ii);
      if(block)
     654:	mov	r6, r0
{
  audio_block_t *block;

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
     656:	adds	r4, #1
    {
      block = receiveReadOnly(ii);
      if(block)
      {
        transmit(block,ii);
     658:	mov	r1, r0
  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
    {
      block = receiveReadOnly(ii);
      if(block)
     65a:	cbz	r0, 668 <mDelay<2, 12>::update()+0x38>
      {
        transmit(block,ii);
     65c:	mov	r0, r5
     65e:	bl	a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>
        release(block);        
     662:	mov	r0, r6
     664:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
{
  audio_block_t *block;

  if((numDelay<=0) || (numDelay >= mq)) // bypass queue
  {
    for(int ii=0;ii<nch;ii++)
     668:	cmp	r4, #2
     66a:	bne.n	64a <mDelay<2, 12>::update()+0x1a>
     66c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    return;
  }
  //
  
  uint16_t h = (head + 1) % mq;
     670:	ldrh.w	r2, [r0, #128]	; 0x80
     674:	ldr	r4, [pc, #156]	; (714 <mDelay<2, 12>::update()+0xe4>)
     676:	uxth	r2, r2
     678:	adds	r2, #1
     67a:	smull	r3, r4, r4, r2
     67e:	asrs	r3, r2, #31
     680:	rsb	r4, r3, r4, asr #1
     684:	add.w	r4, r4, r4, lsl #1
     688:	sub.w	r4, r2, r4, lsl #2
  for(int ii=0;ii<nch;ii++)
     68c:	movs	r7, #0
     68e:	add.w	r6, r7, r7, lsl #1
     692:	add.w	r6, r4, r6, lsl #2
     696:	add.w	r6, r5, r6, lsl #2
  {
    if(queue[ii][h]) release(queue[ii][h]);
     69a:	ldr	r3, [r6, #32]
     69c:	cbz	r3, 6a4 <mDelay<2, 12>::update()+0x74>
     69e:	ldr	r0, [r6, #32]
     6a0:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
    block = receiveReadOnly(ii);
     6a4:	mov	r1, r7
     6a6:	mov	r0, r5
     6a8:	bl	a578 <AudioStream::receiveReadOnly(unsigned int)>
    return;
  }
  //
  
  uint16_t h = (head + 1) % mq;
  for(int ii=0;ii<nch;ii++)
     6ac:	adds	r7, #1
     6ae:	cmp	r7, #2
  {
    if(queue[ii][h]) release(queue[ii][h]);
    block = receiveReadOnly(ii);
    if(block)
    {
      queue[ii][h]=block;
     6b0:	str	r0, [r6, #32]
    return;
  }
  //
  
  uint16_t h = (head + 1) % mq;
  for(int ii=0;ii<nch;ii++)
     6b2:	bne.n	68e <mDelay<2, 12>::update()+0x5e>
    }
    return;
  }
  //
  
  uint16_t h = (head + 1) % mq;
     6b4:	uxth	r4, r4
      queue[ii][h]=block;
    }
    else
      queue[ii][h]=NULL;
  }
  head = h;
     6b6:	strh.w	r4, [r5, #128]	; 0x80

  uint16_t index = ((head  + mq) - numDelay) % mq;
     6ba:	ldrh.w	r3, [r5, #128]	; 0x80
     6be:	ldrh.w	r1, [r5, #130]	; 0x82
     6c2:	ldr	r6, [pc, #80]	; (714 <mDelay<2, 12>::update()+0xe4>)
     6c4:	uxth	r3, r3
     6c6:	add.w	r2, r3, #12
     6ca:	uxth	r3, r1
     6cc:	subs	r3, r2, r3
     6ce:	smull	r2, r6, r6, r3
     6d2:	asrs	r2, r3, #31
     6d4:	rsb	r6, r2, r6, asr #1
     6d8:	add.w	r6, r6, r6, lsl #1
     6dc:	sub.w	r3, r3, r6, lsl #2
  for(int ii=0;ii<nch;ii++)
     6e0:	movs	r7, #0
     6e2:	uxth	r6, r3
  {
    if(queue[ii][index])
    {
      transmit(queue[ii][index],ii);
      release(queue[ii][index]);
      queue[ii][index]=NULL;
     6e4:	mov	r8, r7
     6e6:	add.w	r4, r7, r7, lsl #1
     6ea:	add.w	r4, r6, r4, lsl #2
     6ee:	add.w	r4, r5, r4, lsl #2
  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
  {
    if(queue[ii][index])
    {
      transmit(queue[ii][index],ii);
     6f2:	uxtb	r2, r7
  head = h;

  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
  {
    if(queue[ii][index])
     6f4:	ldr	r3, [r4, #32]
      queue[ii][h]=NULL;
  }
  head = h;

  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
     6f6:	adds	r7, #1
  {
    if(queue[ii][index])
    {
      transmit(queue[ii][index],ii);
     6f8:	mov	r0, r5
  head = h;

  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
  {
    if(queue[ii][index])
     6fa:	cbz	r3, 70c <mDelay<2, 12>::update()+0xdc>
    {
      transmit(queue[ii][index],ii);
     6fc:	ldr	r1, [r4, #32]
     6fe:	bl	a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>
      release(queue[ii][index]);
     702:	ldr	r0, [r4, #32]
     704:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
      queue[ii][index]=NULL;
     708:	str.w	r8, [r4, #32]
      queue[ii][h]=NULL;
  }
  head = h;

  uint16_t index = ((head  + mq) - numDelay) % mq;
  for(int ii=0;ii<nch;ii++)
     70c:	cmp	r7, #2
     70e:	bne.n	6e6 <mDelay<2, 12>::update()+0xb6>
     710:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     714:	.word	0x2aaaaaab

00000718 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

#include <TimeLib.h>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     718:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     71c:	mov	r7, r1
     71e:	mov	r6, r2
     720:	mov	r8, r0
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     722:	bl	3440 <year()>
     726:	mov	r4, r0
     728:	bl	3420 <month()>
     72c:	mov	r5, r0
     72e:	bl	3400 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     732:	subw	r3, r4, #1980	; 0x7bc
     736:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     738:	cmp	r3, #127	; 0x7f
     73a:	bhi.n	742 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     73c:	uxtb	r2, r5
     73e:	cmp	r2, #12
     740:	bls.n	79a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     742:	movs	r3, #0
     744:	strh.w	r3, [r8]

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(hour(), minute(), second());
     748:	bl	33a0 <hour()>
     74c:	mov	r4, r0
     74e:	bl	33c0 <minute()>
     752:	mov	r5, r0
     754:	bl	33e0 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     758:	uxtb	r3, r4
     75a:	cmp	r3, #23
     75c:	bhi.n	764 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     75e:	uxtb	r3, r5
     760:	cmp	r3, #59	; 0x3b
     762:	bls.n	77c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     764:	movs	r3, #0
     766:	strh	r3, [r7, #0]

  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
     768:	bl	33e0 <second()>
     76c:	tst.w	r0, #1
     770:	ite	ne
     772:	movne	r3, #100	; 0x64
     774:	moveq	r3, #0
     776:	strb	r3, [r6, #0]
     778:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     77c:	uxtb	r3, r0
     77e:	cmp	r3, #59	; 0x3b
     780:	bhi.n	764 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     782:	lsls	r4, r4, #11
     784:	lsls	r3, r5, #5
     786:	and.w	r4, r4, #522240	; 0x7f800
     78a:	and.w	r3, r3, #8160	; 0x1fe0
     78e:	orrs	r3, r4
     790:	ubfx	r0, r0, #1, #7
     794:	orrs	r3, r0
     796:	uxth	r3, r3
     798:	b.n	766 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     79a:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     79c:	cmp	r0, #31
     79e:	bhi.n	742 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     7a0:	lsls	r5, r5, #5
     7a2:	and.w	r5, r5, #8160	; 0x1fe0
     7a6:	orrs	r0, r5
     7a8:	orr.w	r3, r0, r3, lsl #9
     7ac:	uxth	r3, r3
     7ae:	b.n	744 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

000007b0 <c_uSD::~c_uSD()>:
int16_t diskBuffer[BUFFERSIZE];
int16_t *outptr = diskBuffer;

char header[512];

class c_uSD
     7b0:	push	{r4, lr}
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     7b2:	ldr	r3, [pc, #20]	; (7c8 <c_uSD::~c_uSD()+0x18>)
     7b4:	str.w	r3, [r0, #1196]	; 0x4ac
     7b8:	mov	r4, r0
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     7ba:	addw	r0, r0, #1212	; 0x4bc
     7be:	bl	6ea0 <FsBaseFile::close()>
     7c2:	mov	r0, r4
     7c4:	pop	{r4, pc}
     7c6:	nop
     7c8:	.word	0x00013410

000007cc <getTeensy3Time()>:
#ifdef __cplusplus
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     7cc:	b.w	8e48 <rtc_get>

000007d0 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     7d0:	push	{r4, lr}
     7d2:	mov	r4, r0
		disconnect();
     7d4:	bl	a5f8 <AudioConnection::disconnect()>
	}
     7d8:	mov	r0, r4
     7da:	pop	{r4, pc}

000007dc <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     7dc:	push	{r4, lr}
     7de:	mov	r4, r0
		release();
     7e0:	bl	9fc4 <DMAChannel::release()>
	}
     7e4:	mov	r0, r4
     7e6:	pop	{r4, pc}

000007e8 <getTime(char*) [clone .constprop.44]>:
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
    return text;  
}

static char * getTime(char *text)
     7e8:	push	{r4, r5, r6, lr}
     7ea:	sub	sp, #8
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
     7ec:	bl	33a0 <hour()>
     7f0:	mov	r5, r0
     7f2:	bl	33c0 <minute()>
     7f6:	mov	r6, r0
     7f8:	bl	33e0 <second()>
     7fc:	ldr	r4, [pc, #20]	; (814 <getTime(char*) [clone .constprop.44]+0x2c>)
     7fe:	str	r0, [sp, #0]
     800:	mov	r3, r6
     802:	mov	r2, r5
     804:	mov	r0, r4
     806:	ldr	r1, [pc, #16]	; (818 <getTime(char*) [clone .constprop.44]+0x30>)
     808:	bl	cc54 <sprintf>
    return text;
}
     80c:	mov	r0, r4
     80e:	add	sp, #8
     810:	pop	{r4, r5, r6, pc}
     812:	nop
     814:	.word	0x2001cd74
     818:	.word	0x00013468

0000081c <getDate(char*) [clone .constprop.45]>:
*/


#include <TimeLib.h>

static char * getDate(char *text)
     81c:	push	{r4, r5, r6, lr}
     81e:	sub	sp, #8
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
     820:	bl	3440 <year()>
     824:	mov	r5, r0
     826:	bl	3420 <month()>
     82a:	mov	r6, r0
     82c:	bl	3400 <day()>
     830:	ldr	r4, [pc, #20]	; (848 <getDate(char*) [clone .constprop.45]+0x2c>)
     832:	str	r0, [sp, #0]
     834:	mov	r3, r6
     836:	mov	r2, r5
     838:	mov	r0, r4
     83a:	ldr	r1, [pc, #16]	; (84c <getDate(char*) [clone .constprop.45]+0x30>)
     83c:	bl	cc54 <sprintf>
    return text;  
}
     840:	mov	r0, r4
     842:	add	sp, #8
     844:	pop	{r4, r5, r6, pc}
     846:	nop
     848:	.word	0x2001cd74
     84c:	.word	0x00013478

00000850 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     850:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     852:	cbz	r2, 86e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     854:	ldrb	r3, [r2, #0]
     856:	and.w	r3, r3, #8
     85a:	and.w	r0, r3, #255	; 0xff
     85e:	cbz	r3, 8a2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     860:	ldr	r3, [r2, #28]
     862:	ldr	r0, [r2, #20]
     864:	subs	r0, r3, r0
     866:	it	mi
     868:	mvnmi.w	r0, #2147483648	; 0x80000000
     86c:	bx	lr
     86e:	ldr	r1, [r0, #76]	; 0x4c
     870:	cbz	r1, 8a4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     872:	ldrb.w	r3, [r1, #49]	; 0x31
     876:	and.w	r3, r3, #8
     87a:	and.w	r0, r3, #255	; 0xff
     87e:	cbz	r3, 8a2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     880:	ldrd	r2, r3, [r1, #16]
     884:	ldrd	r0, r1, [r1]
     888:	subs	r0, r2, r0
     88a:	push	{r4, r5}
     88c:	sbc.w	r1, r3, r1
     890:	movs	r5, #0
     892:	mvn.w	r4, #2147483648	; 0x80000000
     896:	cmp	r5, r1
     898:	it	eq
     89a:	cmpeq	r4, r0
     89c:	bcs.n	8a0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     89e:	mov	r0, r4
    return BaseFile::available();
  }
     8a0:	pop	{r4, r5}
     8a2:	bx	lr
     8a4:	mov	r0, r1
     8a6:	bx	lr

000008a8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     8a8:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     8aa:	cbz	r3, 8b2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     8ac:	mov	r0, r3
     8ae:	b.w	5f8c <FatFile::peek()>
     8b2:	ldr	r0, [r0, #76]	; 0x4c
     8b4:	cbz	r0, 8ba <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     8b6:	b.w	4858 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     8ba:	mov.w	r0, #4294967295
     8be:	bx	lr

000008c0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     8c0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     8c2:	cbz	r3, 8ca <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     8c4:	mov	r0, r3
     8c6:	b.w	6164 <FatFile::sync()>
     8ca:	ldr	r0, [r0, #76]	; 0x4c
     8cc:	cbz	r0, 8d2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     8ce:	b.w	55b4 <ExFatFile::sync()>
     8d2:	bx	lr

000008d4 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     8d4:	push	{lr}
     8d6:	ldr	r3, [r0, #72]	; 0x48
     8d8:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     8da:	cbz	r3, 8f6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     8dc:	mov	r0, r3
     8de:	movs	r2, #1
     8e0:	add.w	r1, sp, #7
     8e4:	bl	5df4 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     8e8:	cmp	r0, #1
     8ea:	bne.n	906 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     8ec:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     8f0:	add	sp, #12
     8f2:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     8f6:	ldr	r0, [r0, #76]	; 0x4c
     8f8:	cbz	r0, 906 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     8fa:	movs	r2, #1
     8fc:	add.w	r1, sp, #7
     900:	bl	46b8 <ExFatFile::read(void*, unsigned int)>
     904:	b.n	8e8 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     906:	mov.w	r0, #4294967295
     90a:	b.n	8f0 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000090c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     90c:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     90e:	cbz	r3, 916 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     910:	mov	r0, r3
     912:	b.w	61e8 <FatFile::write(void const*, unsigned int)>
     916:	ldr	r0, [r0, #76]	; 0x4c
     918:	cbz	r0, 91e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     91a:	b.w	5870 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     91e:	bx	lr

00000920 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     920:	push	{lr}
     922:	ldr	r3, [r0, #72]	; 0x48
     924:	sub	sp, #12
     926:	strb.w	r1, [sp, #7]
     92a:	cbz	r3, 93e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     92c:	mov	r0, r3
     92e:	movs	r2, #1
     930:	add.w	r1, sp, #7
     934:	bl	61e8 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     938:	add	sp, #12
     93a:	ldr.w	pc, [sp], #4
     93e:	ldr	r0, [r0, #76]	; 0x4c
     940:	cmp	r0, #0
     942:	beq.n	938 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     944:	movs	r2, #1
     946:	add.w	r1, sp, #7
     94a:	bl	5870 <ExFatFile::write(void const*, unsigned int)>
     94e:	add	sp, #12
     950:	ldr.w	pc, [sp], #4

00000954 <mProcess::update()>:
  for(int ii=0; ii< ndat; ii++){ avg+=aux[ii]; }
  return avg/ndat;
}

void mProcess::update(void)
{
     954:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  audio_block_t *inp1, *inp2, *tmp1, *tmp2;
  inp1=receiveReadOnly(0);
     958:	movs	r1, #0
  for(int ii=0; ii< ndat; ii++){ avg+=aux[ii]; }
  return avg/ndat;
}

void mProcess::update(void)
{
     95a:	sub	sp, #20
     95c:	mov	r4, r0
  audio_block_t *inp1, *inp2, *tmp1, *tmp2;
  inp1=receiveReadOnly(0);
     95e:	bl	a578 <AudioStream::receiveReadOnly(unsigned int)>
  inp2=receiveReadOnly(1);
     962:	movs	r1, #1
}

void mProcess::update(void)
{
  audio_block_t *inp1, *inp2, *tmp1, *tmp2;
  inp1=receiveReadOnly(0);
     964:	mov	r5, r0
  inp2=receiveReadOnly(1);
     966:	mov	r0, r4
     968:	bl	a578 <AudioStream::receiveReadOnly(unsigned int)>
     96c:	mov	r7, r0
  
  if(!inp1 && !inp2) return; // have no input data
     96e:	cmp	r5, #0
     970:	beq.w	c5e <mProcess::update()+0x30a>
  if(thresh<0) // don't run detector
     974:	ldr	r3, [r4, #68]	; 0x44
     976:	cmp	r3, #0
     978:	blt.w	c48 <mProcess::update()+0x2f4>
    if(inp1) release(inp1);
    if(inp2) release(inp2);
    return;
  }
  
  blockCount++;
     97c:	ldr	r3, [r4, #60]	; 0x3c
     97e:	adds	r3, #1
     980:	str	r3, [r4, #60]	; 0x3c
  
  if(inp1) tmp1=allocate(); else tmp1=0;
     982:	bl	a448 <AudioStream::allocate()>
     986:	str	r0, [sp, #4]
  if(inp2) tmp2=allocate(); else tmp2=0;
     988:	cmp	r7, #0
     98a:	beq.w	bde <mProcess::update()+0x28a>
     98e:	bl	a448 <AudioStream::allocate()>
     992:	mov	r6, r0
     994:	ldr	r3, [sp, #4]
     996:	add.w	r9, r6, #4
     99a:	add.w	r8, r3, #4
     99e:	mov	r0, r9
     9a0:	mov	r1, r8
     9a2:	adds	r3, r7, #4
     9a4:	adds	r2, r5, #4
     9a6:	add.w	ip, r7, #260	; 0x104

  // store data and release input buffers
  for(int ii=0; ii< AUDIO_BLOCK_SAMPLES; ii++)
  {
    if(inp1) tmp1->data[ii]=inp1->data[ii];
     9aa:	cbz	r5, 9b4 <mProcess::update()+0x60>
     9ac:	ldrsh.w	lr, [r2]
     9b0:	strh.w	lr, [r1]
     9b4:	adds	r2, #2
     9b6:	adds	r1, #2
    if(inp2) tmp2->data[ii]=inp2->data[ii];
     9b8:	cbz	r7, 9c2 <mProcess::update()+0x6e>
     9ba:	ldrsh.w	lr, [r3]
     9be:	strh.w	lr, [r0]
     9c2:	adds	r3, #2
  
  if(inp1) tmp1=allocate(); else tmp1=0;
  if(inp2) tmp2=allocate(); else tmp2=0;

  // store data and release input buffers
  for(int ii=0; ii< AUDIO_BLOCK_SAMPLES; ii++)
     9c4:	cmp	r3, ip
     9c6:	add.w	r0, r0, #2
     9ca:	bne.n	9aa <mProcess::update()+0x56>
  {
    if(inp1) tmp1->data[ii]=inp1->data[ii];
    if(inp2) tmp2->data[ii]=inp2->data[ii];
  }
  if(inp1) release(inp1);
     9cc:	cbz	r5, 9d4 <mProcess::update()+0x80>
     9ce:	mov	r0, r5
     9d0:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
  if(inp2) release(inp2);
     9d4:	cbz	r7, 9dc <mProcess::update()+0x88>
     9d6:	mov	r0, r7
     9d8:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
  // followed by threshold detector

  int16_t ndat = AUDIO_BLOCK_SAMPLES;
  //
  // first channel
  if(tmp1)
     9dc:	ldr	r3, [sp, #4]
     9de:	cmp	r3, #0
     9e0:	beq.w	c88 <mProcess::update()+0x334>
  watchdog=0;
}

inline void mDiff(int32_t *aux, int16_t *inp, int16_t ndat, int16_t old)
{
  aux[0]=(inp[0]-old);
     9e4:	ldr	r1, [pc, #692]	; (c9c <mProcess::update()+0x348>)
     9e6:	ldrsh.w	r3, [r3, #4]
     9ea:	str	r3, [r1, #0]
  int16_t ndat = AUDIO_BLOCK_SAMPLES;
  //
  // first channel
  if(tmp1)
  {
    mDiff(aux, tmp1->data, ndat, 0);//out1? out1->data[ndat-1]: tmp1->data[0]);
     9ec:	mov	r0, r8
     9ee:	add.w	lr, r1, #508	; 0x1fc
     9f2:	mov	r3, r0
}

inline void mDiff(int32_t *aux, int16_t *inp, int16_t ndat, int16_t old)
{
  aux[0]=(inp[0]-old);
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
     9f4:	ldrsh.w	r2, [r0, #2]
     9f8:	ldrsh.w	r3, [r3]
     9fc:	subs	r3, r2, r3
     9fe:	str.w	r3, [r1, #4]!
     a02:	cmp	lr, r1
     a04:	add.w	r0, r0, #2
     a08:	bne.n	9f2 <mProcess::update()+0x9e>
     a0a:	ldr	r1, [pc, #660]	; (ca0 <mProcess::update()+0x34c>)
     a0c:	movs	r0, #0
     a0e:	mov	r2, r1
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
  { aux[ii] *= aux[ii];
     a10:	ldr.w	r3, [r2, #4]!
     a14:	mul.w	r3, r3, r3
     a18:	cmp	r0, r3
     a1a:	it	lt
     a1c:	movlt	r0, r3
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
     a1e:	cmp	r2, lr
  { aux[ii] *= aux[ii];
     a20:	str	r3, [r2, #0]
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
     a22:	bne.n	a10 <mProcess::update()+0xbc>
  //
  // first channel
  if(tmp1)
  {
    mDiff(aux, tmp1->data, ndat, 0);//out1? out1->data[ndat-1]: tmp1->data[0]);
    max1Val = mSig(aux, ndat);
     a24:	str	r0, [r4, #44]	; 0x2c
  }
  return maxVal;
}

inline int32_t avg(int32_t *aux, int16_t ndat)
{ int64_t avg=0;
     a26:	movs	r2, #0
     a28:	movs	r3, #0
  for(int ii=0; ii< ndat; ii++){ avg+=aux[ii]; }
     a2a:	ldr.w	r0, [r1, #4]!
     a2e:	adds	r2, r2, r0
     a30:	adc.w	r3, r3, r0, asr #31
     a34:	cmp	r1, lr
     a36:	bne.n	a2a <mProcess::update()+0xd6>
  // first channel
  if(tmp1)
  {
    mDiff(aux, tmp1->data, ndat, 0);//out1? out1->data[ndat-1]: tmp1->data[0]);
    max1Val = mSig(aux, ndat);
    avg1Val = avg(aux, ndat);
     a38:	cmp	r2, #0
     a3a:	sbcs.w	r1, r3, #0
     a3e:	blt.w	c2c <mProcess::update()+0x2d8>
     a42:	lsrs	r2, r2, #7
     a44:	orr.w	r2, r2, r3, lsl #25
     a48:	str	r2, [r4, #52]	; 0x34
    max1Val = 0;
    avg1Val = 0;
  }
  
  // second channel
  if(tmp2)
     a4a:	cmp	r6, #0
     a4c:	beq.w	c94 <mProcess::update()+0x340>
  watchdog=0;
}

inline void mDiff(int32_t *aux, int16_t *inp, int16_t ndat, int16_t old)
{
  aux[0]=(inp[0]-old);
     a50:	ldr	r1, [pc, #584]	; (c9c <mProcess::update()+0x348>)
     a52:	ldrsh.w	r3, [r6, #4]
     a56:	str	r3, [r1, #0]
  }
  
  // second channel
  if(tmp2)
  {
    mDiff(aux, tmp2->data, ndat, 0);//out2? out2->data[ndat-1]: tmp2->data[0]);
     a58:	mov	r5, r9
     a5a:	add.w	r0, r1, #508	; 0x1fc
     a5e:	mov	r3, r5
}

inline void mDiff(int32_t *aux, int16_t *inp, int16_t ndat, int16_t old)
{
  aux[0]=(inp[0]-old);
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
     a60:	ldrsh.w	r2, [r5, #2]
     a64:	ldrsh.w	r3, [r3]
     a68:	subs	r3, r2, r3
     a6a:	str.w	r3, [r1, #4]!
     a6e:	cmp	r0, r1
     a70:	add.w	r5, r5, #2
     a74:	bne.n	a5e <mProcess::update()+0x10a>
     a76:	ldr	r1, [pc, #552]	; (ca0 <mProcess::update()+0x34c>)
     a78:	movs	r5, #0
     a7a:	mov	r2, r1
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
  { aux[ii] *= aux[ii];
     a7c:	ldr.w	r3, [r2, #4]!
     a80:	mul.w	r3, r3, r3
     a84:	cmp	r5, r3
     a86:	it	lt
     a88:	movlt	r5, r3
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
     a8a:	cmp	r2, r0
  { aux[ii] *= aux[ii];
     a8c:	str	r3, [r2, #0]
  for(int ii=1; ii< ndat; ii++) aux[ii]=(inp[ii] - inp[ii-1]);  
}

inline int32_t mSig(int32_t *aux, int16_t ndat)
{ int32_t maxVal=0;
  for(int ii=0; ii< ndat; ii++)
     a8e:	bne.n	a7c <mProcess::update()+0x128>
  
  // second channel
  if(tmp2)
  {
    mDiff(aux, tmp2->data, ndat, 0);//out2? out2->data[ndat-1]: tmp2->data[0]);
    max2Val = mSig(aux, ndat);
     a90:	str	r5, [r4, #48]	; 0x30
  }
  return maxVal;
}

inline int32_t avg(int32_t *aux, int16_t ndat)
{ int64_t avg=0;
     a92:	movs	r2, #0
     a94:	movs	r3, #0
  for(int ii=0; ii< ndat; ii++){ avg+=aux[ii]; }
     a96:	ldr.w	r7, [r1, #4]!
     a9a:	adds	r2, r2, r7
     a9c:	adc.w	r3, r3, r7, asr #31
     aa0:	cmp	r0, r1
     aa2:	bne.n	a96 <mProcess::update()+0x142>
  // second channel
  if(tmp2)
  {
    mDiff(aux, tmp2->data, ndat, 0);//out2? out2->data[ndat-1]: tmp2->data[0]);
    max2Val = mSig(aux, ndat);
    avg2Val = avg(aux, ndat);
     aa4:	cmp	r2, #0
     aa6:	sbcs.w	r1, r3, #0
     aaa:	blt.w	c24 <mProcess::update()+0x2d0>
     aae:	lsrs	r2, r2, #7
     ab0:	orr.w	r2, r2, r3, lsl #25
     ab4:	str	r2, [r4, #56]	; 0x38
//  static uint32_t watchdog=0;
  static int16_t isFirst = 1;
  int32_t det1 = (max1Val > thresh*nest1);
  int32_t det2 = (max2Val > thresh*nest2);

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) {sigCount=extr;}
     ab6:	ldr	r3, [r4, #32]
  //
  // 

//  static uint32_t watchdog=0;
  static int16_t isFirst = 1;
  int32_t det1 = (max1Val > thresh*nest1);
     ab8:	ldr	r1, [r4, #68]	; 0x44
     aba:	ldr	r2, [r4, #92]	; 0x5c
     abc:	ldr	r7, [r4, #44]	; 0x2c
  int32_t det2 = (max2Val > thresh*nest2);

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) {sigCount=extr;}
     abe:	cmp	r3, #0
  //
  // 

//  static uint32_t watchdog=0;
  static int16_t isFirst = 1;
  int32_t det1 = (max1Val > thresh*nest1);
     ac0:	mul.w	r2, r2, r1
  int32_t det2 = (max2Val > thresh*nest2);

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) {sigCount=extr;}
     ac4:	ble.w	c3c <mProcess::update()+0x2e8>
     ac8:	cmp	r7, r2
     aca:	ble.w	bd0 <mProcess::update()+0x27c>
     ace:	ldr	r3, [r4, #80]	; 0x50
     ad0:	str	r3, [r4, #32]
  
  if(sigCount>0) // we have detection or still data to be transmitted
     ad2:	cmp	r3, #0
     ad4:	ble.n	b02 <mProcess::update()+0x1ae>
  { detCount++;
    // mark first block of new set of transmission // could remove or use millis()
    if(isFirst) // flag new data block (corrupting the first two words with blockCount)
     ad6:	ldr	r2, [pc, #460]	; (ca4 <mProcess::update()+0x350>)
  int32_t det2 = (max2Val > thresh*nest2);

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) {sigCount=extr;}
  
  if(sigCount>0) // we have detection or still data to be transmitted
  { detCount++;
     ad8:	ldr	r3, [r4, #36]	; 0x24
    // mark first block of new set of transmission // could remove or use millis()
    if(isFirst) // flag new data block (corrupting the first two words with blockCount)
     ada:	ldrsh.w	r1, [r2]
  int32_t det2 = (max2Val > thresh*nest2);

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) {sigCount=extr;}
  
  if(sigCount>0) // we have detection or still data to be transmitted
  { detCount++;
     ade:	adds	r3, #1
     ae0:	str	r3, [r4, #36]	; 0x24
    // mark first block of new set of transmission // could remove or use millis()
    if(isFirst) // flag new data block (corrupting the first two words with blockCount)
     ae2:	cbz	r1, ae8 <mProcess::update()+0x194>
    { //if(out1) {out1->data[0]=-1; out1->data[1]=-1;}
      //if(out2) {*(uint32_t*)(out2->data) = blockCount;}
      isFirst=0;
     ae4:	movs	r3, #0
     ae6:	strh	r3, [r2, #0]
    }
    //
    if(out1) transmit(out1,0);
     ae8:	ldr	r1, [r4, #100]	; 0x64
     aea:	cbz	r1, af4 <mProcess::update()+0x1a0>
     aec:	movs	r2, #0
     aee:	mov	r0, r4
     af0:	bl	a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    if(out2) transmit(out2,1);
     af4:	ldr	r1, [r4, #104]	; 0x68
     af6:	cbz	r1, b00 <mProcess::update()+0x1ac>
     af8:	movs	r2, #1
     afa:	mov	r0, r4
     afc:	bl	a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>
     b00:	ldr	r3, [r4, #32]
  }
  //
  // is we wanted single event file signal main program to close immediately if queue is empty
  if((sigCount==0) && (mustClose==0)) { Serial.println("mustClose"); mustClose=1;}
     b02:	cmp	r3, #0
     b04:	bne.n	be2 <mProcess::update()+0x28e>
     b06:	ldr	r5, [pc, #416]	; (ca8 <mProcess::update()+0x354>)
     b08:	ldrsh.w	r2, [r5]
     b0c:	cmp	r2, #0
     b0e:	beq.w	c72 <mProcess::update()+0x31e>

  if(mustClose<=0)
     b12:	cmp	r2, #0
     b14:	ble.n	bec <mProcess::update()+0x298>
  // reduce sigCount to a minimal value providing the possibility of a guard window
  // between two detections
  // increment a watchdog counter that allows regular transmisson of noise
  // flag that next triggered transmission is first
  sigCount--;
  if(sigCount< -inhib) { sigCount = -inhib; watchdog++; isFirst=1;}
     b16:	ldr	r2, [r4, #84]	; 0x54
  
  // reduce sigCount to a minimal value providing the possibility of a guard window
  // between two detections
  // increment a watchdog counter that allows regular transmisson of noise
  // flag that next triggered transmission is first
  sigCount--;
     b18:	subs	r3, #1
  if(sigCount< -inhib) { sigCount = -inhib; watchdog++; isFirst=1;}
     b1a:	negs	r2, r2
     b1c:	cmp	r3, r2
  
  // reduce sigCount to a minimal value providing the possibility of a guard window
  // between two detections
  // increment a watchdog counter that allows regular transmisson of noise
  // flag that next triggered transmission is first
  sigCount--;
     b1e:	str	r3, [r4, #32]
  if(sigCount< -inhib) { sigCount = -inhib; watchdog++; isFirst=1;}
     b20:	bge.n	b32 <mProcess::update()+0x1de>
     b22:	ldr	r3, [r4, #64]	; 0x40
     b24:	ldr	r0, [pc, #380]	; (ca4 <mProcess::update()+0x350>)
     b26:	str	r2, [r4, #32]
     b28:	adds	r1, r3, #1
     b2a:	movs	r5, #1
     b2c:	mov	r3, r2
     b2e:	str	r1, [r4, #64]	; 0x40
     b30:	strh	r5, [r0, #0]

  // update background noise estimate
  uint32_t winx;
  // change averaging window according to detection status
  if(sigCount<0) winx=win0; else winx=win1;
     b32:	cmp	r3, #0
     b34:	ite	lt
     b36:	ldrlt	r5, [r4, #72]	; 0x48
     b38:	ldrge	r5, [r4, #76]	; 0x4c
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
     b3a:	ldr	r0, [r4, #92]	; 0x5c
     b3c:	ldr	r1, [r4, #52]	; 0x34
     b3e:	umull	r2, r3, r0, r5
     b42:	mov.w	r9, r0, asr #31
     b46:	subs	r0, r1, r0
     b48:	adds	r7, r2, r0
     b4a:	mla	r3, r5, r9, r3
     b4e:	adc.w	r8, r3, r0, asr #31
     b52:	mov	r2, r5
     b54:	mov	r0, r7
     b56:	movs	r3, #0
     b58:	mov	r1, r8
     b5a:	bl	bb40 <__aeabi_ldivmod>
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   
     b5e:	ldr	r2, [r4, #96]	; 0x60
     b60:	ldr	r3, [r4, #56]	; 0x38
  // update background noise estimate
  uint32_t winx;
  // change averaging window according to detection status
  if(sigCount<0) winx=win0; else winx=win1;
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
     b62:	str	r0, [r4, #92]	; 0x5c
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   
     b64:	subs	r3, r3, r2
  // update background noise estimate
  uint32_t winx;
  // change averaging window according to detection status
  if(sigCount<0) winx=win0; else winx=win1;
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
     b66:	mov	r7, r0
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   
     b68:	mov.w	fp, r2, asr #31
     b6c:	umull	r0, r1, r2, r5
     b70:	adds	r0, r0, r3
     b72:	mla	r1, r5, fp, r1
     b76:	adc.w	r1, r1, r3, asr #31
     b7a:	mov	r2, r5
     b7c:	movs	r3, #0
     b7e:	bl	bb40 <__aeabi_ldivmod>

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     b82:	ldr	r3, [pc, #296]	; (cac <mProcess::update()+0x358>)
  uint32_t winx;
  // change averaging window according to detection status
  if(sigCount<0) winx=win0; else winx=win1;
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   
     b84:	str	r0, [r4, #96]	; 0x60

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     b86:	ldr	r2, [r3, #0]
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
     b88:	cmp	r0, r7
     b8a:	it	lt
     b8c:	movlt	r0, r7
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     b8e:	cmp	r0, r2
    
  nest1=(((int64_t)nest1)*winx+(int64_t)(avg1Val-nest1))/winx;
  nest2=(((int64_t)nest2)*winx+(int64_t)(avg2Val-nest2))/winx;   

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
     b90:	str	r0, [sp, #12]
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
     b92:	ite	hi
     b94:	ldrhi	r1, [sp, #12]
     b96:	ldrls	r1, [r3, #0]
     b98:	str	r1, [r3, #0]
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
  maxValue=(tmp>maxValue)? tmp:maxValue;
     b9a:	ldr	r2, [pc, #276]	; (cb0 <mProcess::update()+0x35c>)

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
     b9c:	ldr	r3, [r4, #48]	; 0x30
     b9e:	ldr	r0, [r4, #44]	; 0x2c
  maxValue=(tmp>maxValue)? tmp:maxValue;
     ba0:	ldr	r1, [r2, #0]

  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
     ba2:	cmp	r3, r0
     ba4:	it	lt
     ba6:	movlt	r3, r0
     ba8:	str	r3, [sp, #12]
  maxValue=(tmp>maxValue)? tmp:maxValue;
     baa:	cmp	r3, r1

  // clean up audio_blocks
  if(out1) release(out1);
     bac:	ldr	r0, [r4, #100]	; 0x64
  // for debugging
  uint32_t tmp=(nest1>nest2)? nest1:nest2;
  maxNoise=(tmp>maxNoise)? tmp:maxNoise;
  
  tmp=(max1Val>max2Val)? max1Val:max2Val;
  maxValue=(tmp>maxValue)? tmp:maxValue;
     bae:	ite	hi
     bb0:	ldrhi	r3, [sp, #12]
     bb2:	ldrls	r3, [r2, #0]
     bb4:	str	r3, [r2, #0]

  // clean up audio_blocks
  if(out1) release(out1);
     bb6:	cbz	r0, bbc <mProcess::update()+0x268>
     bb8:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
  if(out2) release(out2);
     bbc:	ldr	r0, [r4, #104]	; 0x68
     bbe:	cbz	r0, bc4 <mProcess::update()+0x270>
     bc0:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
  out1=tmp1;
     bc4:	ldr	r3, [sp, #4]
     bc6:	str	r3, [r4, #100]	; 0x64
  out2=tmp2;
     bc8:	str	r6, [r4, #104]	; 0x68
}
     bca:	add	sp, #20
     bcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//  static uint32_t watchdog=0;
  static int16_t isFirst = 1;
  int32_t det1 = (max1Val > thresh*nest1);
  int32_t det2 = (max2Val > thresh*nest2);

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) {sigCount=extr;}
     bd0:	ldr	r2, [r4, #96]	; 0x60
     bd2:	mul.w	r2, r2, r1
     bd6:	cmp	r2, r5
     bd8:	bge.w	ad2 <mProcess::update()+0x17e>
     bdc:	b.n	ace <mProcess::update()+0x17a>
  }
  
  blockCount++;
  
  if(inp1) tmp1=allocate(); else tmp1=0;
  if(inp2) tmp2=allocate(); else tmp2=0;
     bde:	mov	r6, r7
     be0:	b.n	994 <mProcess::update()+0x40>
     be2:	ldr	r2, [pc, #196]	; (ca8 <mProcess::update()+0x354>)
     be4:	ldrsh.w	r2, [r2]
  }
  //
  // is we wanted single event file signal main program to close immediately if queue is empty
  if((sigCount==0) && (mustClose==0)) { Serial.println("mustClose"); mustClose=1;}

  if(mustClose<=0)
     be8:	cmp	r2, #0
     bea:	bgt.n	b16 <mProcess::update()+0x1c2>
  { // transmit anyway a single buffer every now and then 
    if((nrep>0) && (sigCount<0) && ((watchdog % nrep)==0))
     bec:	ldr	r2, [r4, #88]	; 0x58
     bee:	cmp	r2, #0
     bf0:	ble.n	b16 <mProcess::update()+0x1c2>
     bf2:	cmp	r3, #0
     bf4:	bge.n	b16 <mProcess::update()+0x1c2>
     bf6:	ldr	r0, [r4, #64]	; 0x40
     bf8:	udiv	r1, r0, r2
     bfc:	mls	r2, r2, r1, r0
     c00:	cmp	r2, #0
     c02:	bne.n	b16 <mProcess::update()+0x1c2>
    { noiseCount++;
     c04:	ldr	r3, [r4, #40]	; 0x28
      //if(out1) {out1->data[0]=-1; out1->data[1]=-1;}
      //if(out2) {*(uint32_t*)(out2->data) = blockCount;}
      //
      if(out1) transmit(out1,0);
     c06:	ldr	r1, [r4, #100]	; 0x64
  if((sigCount==0) && (mustClose==0)) { Serial.println("mustClose"); mustClose=1;}

  if(mustClose<=0)
  { // transmit anyway a single buffer every now and then 
    if((nrep>0) && (sigCount<0) && ((watchdog % nrep)==0))
    { noiseCount++;
     c08:	adds	r3, #1
     c0a:	str	r3, [r4, #40]	; 0x28
      //if(out1) {out1->data[0]=-1; out1->data[1]=-1;}
      //if(out2) {*(uint32_t*)(out2->data) = blockCount;}
      //
      if(out1) transmit(out1,0);
     c0c:	cbz	r1, c14 <mProcess::update()+0x2c0>
     c0e:	mov	r0, r4
     c10:	bl	a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>
      if(out2) transmit(out2,1);
     c14:	ldr	r1, [r4, #104]	; 0x68
     c16:	cbz	r1, c20 <mProcess::update()+0x2cc>
     c18:	movs	r2, #1
     c1a:	mov	r0, r4
     c1c:	bl	a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>
     c20:	ldr	r3, [r4, #32]
     c22:	b.n	b16 <mProcess::update()+0x1c2>
  // second channel
  if(tmp2)
  {
    mDiff(aux, tmp2->data, ndat, 0);//out2? out2->data[ndat-1]: tmp2->data[0]);
    max2Val = mSig(aux, ndat);
    avg2Val = avg(aux, ndat);
     c24:	adds	r2, #127	; 0x7f
     c26:	adc.w	r3, r3, #0
     c2a:	b.n	aae <mProcess::update()+0x15a>
  // first channel
  if(tmp1)
  {
    mDiff(aux, tmp1->data, ndat, 0);//out1? out1->data[ndat-1]: tmp1->data[0]);
    max1Val = mSig(aux, ndat);
    avg1Val = avg(aux, ndat);
     c2c:	adds	r2, #127	; 0x7f
     c2e:	adc.w	r3, r3, #0
     c32:	lsrs	r2, r2, #7
     c34:	orr.w	r2, r2, r3, lsl #25
     c38:	str	r2, [r4, #52]	; 0x34
     c3a:	b.n	a4a <mProcess::update()+0xf6>
//  static uint32_t watchdog=0;
  static int16_t isFirst = 1;
  int32_t det1 = (max1Val > thresh*nest1);
  int32_t det2 = (max2Val > thresh*nest2);

  if(((sigCount>0) || (sigCount<=-inhib)) && ( det1 || det2)) {sigCount=extr;}
     c3c:	ldr	r0, [r4, #84]	; 0x54
     c3e:	negs	r0, r0
     c40:	cmp	r3, r0
     c42:	bgt.w	b02 <mProcess::update()+0x1ae>
     c46:	b.n	ac8 <mProcess::update()+0x174>
  inp2=receiveReadOnly(1);
  
  if(!inp1 && !inp2) return; // have no input data
  if(thresh<0) // don't run detector
  {
    if(inp1) release(inp1);
     c48:	mov	r0, r5
     c4a:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
    if(inp2) release(inp2);
     c4e:	cmp	r7, #0
     c50:	beq.n	bca <mProcess::update()+0x276>
     c52:	mov	r0, r7
  // clean up audio_blocks
  if(out1) release(out1);
  if(out2) release(out2);
  out1=tmp1;
  out2=tmp2;
}
     c54:	add	sp, #20
     c56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  if(!inp1 && !inp2) return; // have no input data
  if(thresh<0) // don't run detector
  {
    if(inp1) release(inp1);
    if(inp2) release(inp2);
     c5a:	b.w	a4f0 <AudioStream::release(audio_block_struct*)>
{
  audio_block_t *inp1, *inp2, *tmp1, *tmp2;
  inp1=receiveReadOnly(0);
  inp2=receiveReadOnly(1);
  
  if(!inp1 && !inp2) return; // have no input data
     c5e:	cmp	r0, #0
     c60:	beq.n	bca <mProcess::update()+0x276>
  if(thresh<0) // don't run detector
     c62:	ldr	r3, [r4, #68]	; 0x44
     c64:	cmp	r3, #0
     c66:	blt.n	c52 <mProcess::update()+0x2fe>
    if(inp1) release(inp1);
    if(inp2) release(inp2);
    return;
  }
  
  blockCount++;
     c68:	ldr	r3, [r4, #60]	; 0x3c
  
  if(inp1) tmp1=allocate(); else tmp1=0;
     c6a:	str	r5, [sp, #4]
    if(inp1) release(inp1);
    if(inp2) release(inp2);
    return;
  }
  
  blockCount++;
     c6c:	adds	r3, #1
     c6e:	str	r3, [r4, #60]	; 0x3c
     c70:	b.n	98e <mProcess::update()+0x3a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c72:	movs	r1, #9
     c74:	ldr	r0, [pc, #60]	; (cb4 <mProcess::update()+0x360>)
     c76:	bl	89fc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     c7a:	ldr	r0, [pc, #60]	; (cb8 <mProcess::update()+0x364>)
     c7c:	bl	a2f4 <Print::println()>
    if(out1) transmit(out1,0);
    if(out2) transmit(out2,1);
  }
  //
  // is we wanted single event file signal main program to close immediately if queue is empty
  if((sigCount==0) && (mustClose==0)) { Serial.println("mustClose"); mustClose=1;}
     c80:	movs	r3, #1
     c82:	strh	r3, [r5, #0]
     c84:	ldr	r3, [r4, #32]
     c86:	b.n	b16 <mProcess::update()+0x1c2>
    max1Val = mSig(aux, ndat);
    avg1Val = avg(aux, ndat);
  }
  else
  {
    max1Val = 0;
     c88:	ldr	r3, [sp, #4]
     c8a:	str	r3, [r4, #44]	; 0x2c
    avg1Val = 0;
     c8c:	str	r3, [r4, #52]	; 0x34
  }
  
  // second channel
  if(tmp2)
     c8e:	cmp	r6, #0
     c90:	bne.w	a50 <mProcess::update()+0xfc>
    max2Val = mSig(aux, ndat);
    avg2Val = avg(aux, ndat);
  }
  else
  {
    max2Val = 0;
     c94:	str	r6, [r4, #48]	; 0x30
    avg2Val = 0;
     c96:	str	r6, [r4, #56]	; 0x38
     c98:	mov	r5, r6
     c9a:	b.n	ab6 <mProcess::update()+0x162>
     c9c:	.word	0x200188a8
     ca0:	.word	0x200188a4
     ca4:	.word	0x20017760
     ca8:	.word	0x20017762
     cac:	.word	0x2001cdb0
     cb0:	.word	0x2001d9c4
     cb4:	.word	0x00013488
     cb8:	.word	0x20017924

00000cbc <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     cbc:	movs	r3, #0
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
     cbe:	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
     cc0:	ldr	r4, [pc, #68]	; (d08 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
     cc2:	strb	r1, [r0, #9]
     cc4:	str	r2, [r0, #16]
     cc6:	str	r4, [r0, #0]
			active = false;
     cc8:	strb	r3, [r0, #8]
			destination_list = NULL;
     cca:	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
     ccc:	cbz	r1, ce0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				inputQueue[i] = NULL;
     cce:	mov	r1, r3
     cd0:	b.n	cd4 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
     cd2:	ldr	r2, [r0, #16]
     cd4:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     cd8:	ldrb	r2, [r0, #9]
     cda:	adds	r3, #1
     cdc:	cmp	r2, r3
     cde:	bgt.n	cd2 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     ce0:	ldr	r3, [pc, #40]	; (d0c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x50>)
     ce2:	ldr	r2, [r3, #0]
     ce4:	cbnz	r2, cea <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
     ce6:	b.n	d02 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x46>
     ce8:	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     cea:	ldr	r3, [r2, #20]
     cec:	cmp	r3, #0
     cee:	bne.n	ce8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
				p->next_update = this;
     cf0:	str	r0, [r2, #20]
			}
			next_update = NULL;
     cf2:	movs	r3, #0
     cf4:	str	r3, [r0, #20]
			cpu_cycles = 0;
     cf6:	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
     cf8:	strh	r3, [r0, #6]
			numConnections = 0;
     cfa:	strb	r3, [r0, #10]
		}
     cfc:	ldr.w	r4, [sp], #4
     d00:	bx	lr
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     d02:	str	r0, [r3, #0]
     d04:	b.n	cf2 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
     d06:	nop
     d08:	.word	0x000133ec
     d0c:	.word	0x2001de74

00000d10 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     d10:	push	{r4, r5, r6, lr}
     d12:	mov	r4, r0
     d14:	mov	r0, r1
     d16:	mov	r5, r1
     d18:	bl	cec0 <strlen>
     d1c:	ldr	r3, [r4, #0]
     d1e:	mov	r2, r0
     d20:	mov	r1, r5
     d22:	mov	r0, r4
     d24:	ldr	r3, [r3, #4]
     d26:	ldmia.w	sp!, {r4, r5, r6, lr}
     d2a:	bx	r3

00000d2c <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     d2c:	push	{r3, r4, r5, lr}
     d2e:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     d30:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     d32:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     d34:	bl	cec0 <strlen>
     d38:	ldr	r3, [r4, #0]
     d3a:	mov	r2, r0
     d3c:	mov	r1, r5
     d3e:	ldr	r3, [r3, #4]
     d40:	mov	r0, r4
     d42:	blx	r3
     d44:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     d46:	mov	r0, r4
     d48:	bl	a2f4 <Print::println()>
     d4c:	add	r0, r5
     d4e:	pop	{r3, r4, r5, pc}

00000d50 <I2S_32::config_i2s()>:
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     d50:	ldr	r3, [pc, #160]	; (df4 <I2S_32::config_i2s()+0xa4>)
  SIM_SCGC7 |= SIM_SCGC7_DMA;
     d52:	ldr	r1, [pc, #164]	; (df8 <I2S_32::config_i2s()+0xa8>)
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     d54:	ldr	r2, [r3, #0]
  SIM_SCGC7 |= SIM_SCGC7_DMA;
  SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

  // if either transmitter or receiver is enabled, do nothing
  if (I2S0_TCSR & I2S_TCSR_TE) return;
     d56:	ldr	r0, [pc, #164]	; (dfc <I2S_32::config_i2s()+0xac>)
#endif
#endif

void I2S_32::config_i2s(void)
{
  SIM_SCGC6 |= SIM_SCGC6_I2S;
     d58:	orr.w	r2, r2, #32768	; 0x8000
     d5c:	str	r2, [r3, #0]
  SIM_SCGC7 |= SIM_SCGC7_DMA;
     d5e:	ldr	r2, [r1, #0]
     d60:	orr.w	r2, r2, #2
     d64:	str	r2, [r1, #0]
  SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
     d66:	ldr	r2, [r3, #0]
     d68:	orr.w	r2, r2, #2
     d6c:	str	r2, [r3, #0]

  // if either transmitter or receiver is enabled, do nothing
  if (I2S0_TCSR & I2S_TCSR_TE) return;
     d6e:	ldr	r3, [r0, #0]
     d70:	cmp	r3, #0
     d72:	blt.n	df2 <I2S_32::config_i2s()+0xa2>
  if (I2S0_RCSR & I2S_RCSR_RE) return;
     d74:	ldr	r3, [pc, #136]	; (e00 <I2S_32::config_i2s()+0xb0>)
     d76:	ldr	r3, [r3, #0]
     d78:	cmp	r3, #0
     d7a:	blt.n	df2 <I2S_32::config_i2s()+0xa2>

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
     d7c:	ldr	r2, [pc, #132]	; (e04 <I2S_32::config_i2s()+0xb4>)
     d7e:	mov.w	r3, #1124073472	; 0x43000000
     d82:	str	r3, [r2, #0]
  while (I2S0_MCR & I2S_MCR_DUF) ;
     d84:	ldr	r3, [r2, #0]
     d86:	cmp	r3, #0
     d88:	blt.n	d84 <I2S_32::config_i2s()+0x34>
  #define MCLK_SRC  0  // system clock
#endif
#endif

void I2S_32::config_i2s(void)
{
     d8a:	push	{r4, r5, r6, r7, lr}
  if (I2S0_RCSR & I2S_RCSR_RE) return;

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
  while (I2S0_MCR & I2S_MCR_DUF) ;
  I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
     d8c:	ldr	r4, [pc, #120]	; (e08 <I2S_32::config_i2s()+0xb8>)

  // configure transmitter
  I2S0_TMR = 0;
     d8e:	ldr	r0, [pc, #124]	; (e0c <I2S_32::config_i2s()+0xbc>)
  I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     d90:	ldr.w	lr, [pc, #168]	; e3c <I2S_32::config_i2s()+0xec>
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
     d94:	ldr	r1, [pc, #120]	; (e10 <I2S_32::config_i2s()+0xc0>)
  I2S0_TCR3 = I2S_TCR3_TCE;
     d96:	ldr	r3, [pc, #124]	; (e14 <I2S_32::config_i2s()+0xc4>)
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
     d98:	ldr	r2, [pc, #124]	; (e18 <I2S_32::config_i2s()+0xc8>)
  I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
     d9a:	ldr	r7, [pc, #128]	; (e1c <I2S_32::config_i2s()+0xcc>)

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
     d9c:	ldr	r6, [pc, #128]	; (e20 <I2S_32::config_i2s()+0xd0>)
  I2S0_RCR1 = I2S_RCR1_RFW(1);
     d9e:	ldr	r5, [pc, #132]	; (e24 <I2S_32::config_i2s()+0xd4>)
  if (I2S0_RCSR & I2S_RCSR_RE) return;

  // enable MCLK output
  I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
  while (I2S0_MCR & I2S_MCR_DUF) ;
  I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
     da0:	movw	ip, #4112	; 0x1010
     da4:	str.w	ip, [r4]

  // configure transmitter
  I2S0_TMR = 0;
     da8:	movs	r4, #0
     daa:	str	r4, [r0, #0]
  I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
     dac:	movs	r0, #1
     dae:	str.w	r0, [lr]
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
     db2:	ldr.w	lr, [pc, #140]	; e40 <I2S_32::config_i2s()+0xf0>
     db6:	str.w	lr, [r1]
  I2S0_TCR3 = I2S_TCR3_TCE;
     dba:	mov.w	r1, #65536	; 0x10000
     dbe:	str	r1, [r3, #0]
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
     dc0:	ldr	r3, [pc, #100]	; (e28 <I2S_32::config_i2s()+0xd8>)
     dc2:	str	r3, [r2, #0]

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
     dc4:	ldr.w	lr, [pc, #124]	; e44 <I2S_32::config_i2s()+0xf4>
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(1);
  I2S0_TCR3 = I2S_TCR3_TCE;
  I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
  I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
     dc8:	ldr	r2, [pc, #96]	; (e2c <I2S_32::config_i2s()+0xdc>)
     dca:	str	r2, [r7, #0]

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
     dcc:	str	r4, [r6, #0]
  I2S0_RCR1 = I2S_RCR1_RFW(1);
     dce:	str	r0, [r5, #0]
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
     dd0:	add.w	r0, r0, #1191182336	; 0x47000000
     dd4:	str.w	r0, [lr]
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     dd8:	ldr	r4, [pc, #84]	; (e30 <I2S_32::config_i2s()+0xe0>)
  // configure receiver (sync'd to transmitter clocks)
  I2S0_RMR = 0;
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
     dda:	str	r1, [r7, #120]	; 0x78
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
  CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
     ddc:	ldr	r0, [pc, #84]	; (e34 <I2S_32::config_i2s()+0xe4>)
  CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     dde:	ldr	r1, [pc, #88]	; (e38 <I2S_32::config_i2s()+0xe8>)
  I2S0_RCR1 = I2S_RCR1_RFW(1);
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     de0:	str.w	r3, [r6, #-80]
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     de4:	mov.w	r3, #1536	; 0x600
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(1);
  I2S0_RCR3 = I2S_RCR3_RCE;
  I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
  I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
     de8:	str	r2, [r5, #16]

  // configure pin mux for 3 clock signals
  CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
     dea:	str	r3, [r4, #0]
  CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
     dec:	str	r3, [r0, #0]
  CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
     dee:	str	r3, [r1, #0]
     df0:	pop	{r4, r5, r6, r7, pc}
     df2:	bx	lr
     df4:	.word	0x4004803c
     df8:	.word	0x40048040
     dfc:	.word	0x4002f000
     e00:	.word	0x4002f080
     e04:	.word	0x4002f100
     e08:	.word	0x4002f104
     e0c:	.word	0x4002f060
     e10:	.word	0x4002f008
     e14:	.word	0x4002f00c
     e18:	.word	0x4002f010
     e1c:	.word	0x4002f014
     e20:	.word	0x4002f0e0
     e24:	.word	0x4002f084
     e28:	.word	0x00011f1b
     e2c:	.word	0x1f1f1f00
     e30:	.word	0x4004b008
     e34:	.word	0x4004b00c
     e38:	.word	0x4004b018
     e3c:	.word	0x4002f004
     e40:	.word	0x07000001
     e44:	.word	0x4002f088

00000e48 <I2S_32::begin()>:
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);

void I2S_32::begin(void)
{ 
     e48:	push	{r3, r4, r5, r6, r7, lr}

  dma.begin(true); // Allocate the DMA channel first
     e4a:	ldr	r4, [pc, #164]	; (ef0 <I2S_32::begin()+0xa8>)
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     e4c:	ldr	r6, [pc, #164]	; (ef4 <I2S_32::begin()+0xac>)
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);

void I2S_32::begin(void)
{ 
     e4e:	mov	r5, r0

  dma.begin(true); // Allocate the DMA channel first
     e50:	movs	r1, #1
     e52:	mov	r0, r4
     e54:	bl	9ef8 <DMAChannel::begin(bool)>

  config_i2s();
     e58:	mov	r0, r5
     e5a:	bl	d50 <I2S_32::config_i2s()>

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     e5e:	ldr	r3, [pc, #152]	; (ef8 <I2S_32::begin()+0xb0>)
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     e60:	ldr	r2, [pc, #152]	; (efc <I2S_32::begin()+0xb4>)
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
     e62:	ldr	r0, [pc, #156]	; (f00 <I2S_32::begin()+0xb8>)

  dma.begin(true); // Allocate the DMA channel first

  config_i2s();

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
     e64:	mov.w	r1, #1024	; 0x400
     e68:	str	r1, [r3, #0]
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     e6a:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     e6c:	movs	r1, #0

  config_i2s();

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
     e6e:	str	r2, [r3, #0]
  dma.TCD->SOFF = 0;
     e70:	strh	r1, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
     e72:	ldrb	r2, [r4, #4]
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
     e74:	str	r0, [r3, #16]
     e76:	add.w	r2, r2, #1073741824	; 0x40000000
     e7a:	add.w	r2, r2, #135168	; 0x21000

  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     e7e:	movw	r0, #514	; 0x202
     e82:	strh	r0, [r3, #6]
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     e84:	str	r6, [r3, #24]
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     e86:	mov.w	r5, #256	; 0x100
  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
     e8a:	movs	r0, #4
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     e8c:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
     e8e:	movs	r6, #140	; 0x8c
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     e90:	strh	r5, [r3, #22]
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
     e92:	str	r1, [r3, #12]
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     e94:	strh	r5, [r3, #30]
  CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
  
  dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0);
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
     e96:	str	r0, [r3, #8]
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     e98:	strh	r7, [r3, #28]
  dma.TCD->SOFF = 0;
  dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
  dma.TCD->NBYTES_MLNO = 4;
  dma.TCD->SLAST = 0;
  dma.TCD->DADDR = i2s_rx_buffer_32;
  dma.TCD->DOFF = 4;
     e9a:	strh	r0, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
     e9c:	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
     e9e:	strb	r6, [r2, #0]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
     ea0:	bl	a674 <AudioStream::update_setup()>
     ea4:	ldr	r1, [pc, #92]	; (f04 <I2S_32::begin()+0xbc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     ea6:	ldr	r3, [pc, #96]	; (f08 <I2S_32::begin()+0xc0>)
     ea8:	ldrb	r2, [r4, #4]
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     eaa:	ldr	r7, [pc, #96]	; (f0c <I2S_32::begin()+0xc4>)
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
     eac:	strb	r0, [r1, #0]
     eae:	strb	r2, [r3, #0]
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     eb0:	ldr	r1, [r7, #0]
     eb2:	ldrb	r2, [r4, #4]
  I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
     eb4:	ldr	r4, [pc, #88]	; (f10 <I2S_32::begin()+0xc8>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     eb6:	ldr	r5, [pc, #92]	; (f14 <I2S_32::begin()+0xcc>)
     eb8:	ldr	r6, [pc, #92]	; (f18 <I2S_32::begin()+0xd0>)

  dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
  update_responsibility = update_setup();
  dma.enable();

  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     eba:	orr.w	r1, r1, #2449473536	; 0x92000000
     ebe:	orr.w	r1, r1, #1
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     ec2:	asrs	r3, r2, #5
     ec4:	str	r1, [r7, #0]
     ec6:	lsls	r3, r3, #2
  I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
     ec8:	ldr	r0, [r4, #0]
     eca:	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     ece:	add.w	r7, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     ed2:	add.w	r3, r3, #57600	; 0xe100
     ed6:	and.w	r2, r2, #31
     eda:	movs	r1, #1
     edc:	orr.w	r0, r0, #2415919104	; 0x90000000
     ee0:	lsl.w	r2, r1, r2
     ee4:	str	r0, [r4, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     ee6:	str.w	r6, [r5, r7, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     eea:	str	r2, [r3, #0]
     eec:	pop	{r3, r4, r5, r6, r7, pc}
     eee:	nop
     ef0:	.word	0x2001d0c8
     ef4:	.word	0xfffffc00
     ef8:	.word	0x4004b014
     efc:	.word	0x4002f0a0
     f00:	.word	0x1fff0200
     f04:	.word	0x2001cdac
     f08:	.word	0x4000801b
     f0c:	.word	0x4002f080
     f10:	.word	0x4002f000
     f14:	.word	0x20017200
     f18:	.word	0x00000475

00000f1c <I2S_dividers(unsigned long*, unsigned long, unsigned long)>:

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     f1c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f20:	mov	r9, r0
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     f22:	ldr	r0, [r0, #8]

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     f24:	vpush	{d8-d9}
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     f28:	adds	r0, #1

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     f2a:	vmov	s17, r1
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     f2e:	movs	r1, #0

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     f30:	vmov	s16, r2
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     f34:	bl	bac4 <__aeabi_l2f>
     f38:	vldr	s15, [pc, #140]	; fc8 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xac>
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     f3c:	vldr	s18, [pc, #140]	; fcc <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xb0>
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     f40:	vmov	s14, r0
     f44:	vdiv.f32	s13, s15, s14
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
     f48:	movs	r0, #1
// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
     f4a:	mov	r8, r0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     f4c:	movs	r4, #1
     f4e:	movs	r5, #0
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     f50:	movw	r6, #257	; 0x101
     f54:	movs	r7, #0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     f56:	vcvt.f32.u32	s15, s17
     f5a:	vcvt.f32.u32	s16, s16
    float mn=1.0; 
     f5e:	vmov.f32	s14, #112	; 0x3f800000  1.0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     f62:	vmul.f32	s15, s16, s15
     f66:	vdiv.f32	s17, s13, s15
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
     f6a:	vmov	s15, r4
     f6e:	vcvt.f32.s32	s15, s15
     f72:	vmul.f32	s15, s15, s17
     f76:	vcvt.s32.f32	s16, s15
     f7a:	vcvt.f32.s32	s16, s16
     f7e:	vsub.f32	s16, s15, s16
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     f82:	vcmpe.f32	s16, s14
     f86:	vmrs	APSR_nzcv, fpscr
     f8a:	bpl.n	fa4 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     f8c:	vcmpe.f32	s15, s18
     f90:	vmrs	APSR_nzcv, fpscr
     f94:	bpl.n	fa4 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     f96:	vmov	r0, s15
     f9a:	bl	bc10 <__aeabi_f2lz>
     f9e:	mov	r8, r4
     fa0:	vmov.f32	s14, s16
     fa4:	adds	r4, #1
     fa6:	adc.w	r5, r5, #0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     faa:	cmp	r5, r7
     fac:	it	eq
     fae:	cmpeq	r4, r6
     fb0:	bne.n	f6a <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x4e>
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
    iscl[1] = (int) (i2-1);
    iscl[2] = (int) (i3-1);
}
     fb2:	vpop	{d8-d9}
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     fb6:	add.w	r3, r8, #4294967295
    iscl[1] = (int) (i2-1);
     fba:	subs	r0, #1
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     fbc:	str.w	r3, [r9]
    iscl[1] = (int) (i2-1);
     fc0:	str.w	r0, [r9, #4]
    iscl[2] = (int) (i3-1);
}
     fc4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     fc8:	.word	0x4c371b00
     fcc:	.word	0x45800000

00000fd0 <I2S_modification(unsigned long, unsigned short, int)>:
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     fd0:	push	{r4, r5, r6, r7, lr}

  if(nch==8)
     fd2:	cmp	r2, #8
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     fd4:	sub	sp, #44	; 0x2c

  if(nch==8)
    iscl[2]=0;
     fd6:	ite	eq
     fd8:	moveq	r3, #0
  else
    iscl[2]=1;
     fda:	movne	r3, #1
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     fdc:	mov	r6, r1
     fde:	mov	r4, r2
     fe0:	mov	r7, r0
  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     fe2:	mul.w	r2, r1, r2
     fe6:	mov	r1, r0
     fe8:	add	r0, sp, #28
{ uint32_t iscl[3];

  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
     fea:	str	r3, [sp, #36]	; 0x24
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     fec:	bl	f1c <I2S_dividers(unsigned long*, unsigned long, unsigned long)>
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     ff0:	vldr	s15, [sp, #28]
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     ff4:	ldr	r2, [sp, #32]
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     ff6:	vldr	s13, [pc, #180]	; 10ac <I2S_modification(unsigned long, unsigned short, int)+0xdc>
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     ffa:	ldr	r5, [sp, #36]	; 0x24
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     ffc:	ldr	r3, [sp, #28]
     ffe:	str	r6, [sp, #4]
    1000:	vcvt.f32.u32	s14, s15
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
    1004:	adds	r2, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
    1006:	vmov.f32	s15, #112	; 0x3f800000  1.0
    100a:	vadd.f32	s15, s14, s15
    100e:	vmov	s14, r2
    1012:	vmul.f32	s15, s15, s13
    1016:	vcvt.f32.u32	s14, s14
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
    101a:	adds	r5, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
    101c:	vdiv.f32	s13, s15, s14
    1020:	adds	r1, r3, #1
    1022:	str	r1, [sp, #8]
    1024:	mov	r3, r7
    1026:	str	r2, [sp, #12]
    1028:	str	r5, [sp, #16]
    102a:	ldr	r2, [pc, #132]	; (10b0 <I2S_modification(unsigned long, unsigned short, int)+0xe0>)
    102c:	ldr	r1, [pc, #132]	; (10b4 <I2S_modification(unsigned long, unsigned short, int)+0xe4>)
    102e:	ldr	r0, [pc, #136]	; (10b8 <I2S_modification(unsigned long, unsigned short, int)+0xe8>)
    1030:	vmov	s15, r5
    1034:	vmov.f32	s12, #96	; 0x3f000000  0.5
    1038:	vcvt.f32.u32	s14, s15
    103c:	vmul.f32	s13, s13, s12
    1040:	vmov	s15, r4
    1044:	vdiv.f32	s12, s13, s14
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
    1048:	ldr	r5, [pc, #112]	; (10bc <I2S_modification(unsigned long, unsigned short, int)+0xec>)

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
    104a:	ldr	r4, [pc, #116]	; (10c0 <I2S_modification(unsigned long, unsigned short, int)+0xf0>)
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
    104c:	vmov	s14, r6
    1050:	vcvt.f32.s32	s15, s15
    1054:	vcvt.f32.s32	s14, s14
    1058:	vmul.f32	s15, s15, s14
    105c:	vdiv.f32	s14, s12, s15
    1060:	vcvt.s32.f32	s14, s14
    1064:	vstr	s14, [sp]
    1068:	bl	a324 <Print::printf(char const*, ...)>
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    106c:	ldr	r1, [pc, #84]	; (10c4 <I2S_modification(unsigned long, unsigned short, int)+0xf4>)
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
    106e:	ldr	r0, [pc, #88]	; (10c8 <I2S_modification(unsigned long, unsigned short, int)+0xf8>)
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1070:	ldr	r3, [r1, #0]
    1072:	bic.w	r3, r3, #2415919104	; 0x90000000
    1076:	str	r3, [r1, #0]

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
    1078:	ldr	r2, [sp, #28]
    107a:	ldr	r3, [sp, #32]
    107c:	lsls	r2, r2, #12
    107e:	and.w	r2, r2, #1044480	; 0xff000
    1082:	ubfx	r3, r3, #0, #12
    1086:	orrs	r3, r2
    1088:	str	r3, [r5, #0]

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
    108a:	ldrb.w	r3, [sp, #36]	; 0x24
    108e:	orr.w	r3, r3, #117440512	; 0x7000000
    1092:	str	r3, [r4, #0]
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
    1094:	ldrb.w	r3, [sp, #36]	; 0x24
    1098:	orr.w	r3, r3, #1191182336	; 0x47000000
    109c:	str	r3, [r0, #0]
//  I2S0_RCR4 = I2S_RCR4_FRSZ(nch-1) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
//    | I2S_RCR4_FSE | I2S_RCR4_FSD;

  //restart I2S
  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    109e:	ldr	r3, [r1, #0]
    10a0:	orr.w	r3, r3, #2415919104	; 0x90000000
    10a4:	str	r3, [r1, #0]
}
    10a6:	add	sp, #44	; 0x2c
    10a8:	pop	{r4, r5, r6, r7, pc}
    10aa:	nop
    10ac:	.word	0x4cb71b00
    10b0:	.word	0x05b8d800
    10b4:	.word	0x00013494
    10b8:	.word	0x20017924
    10bc:	.word	0x4002f104
    10c0:	.word	0x4002f008
    10c4:	.word	0x4002f080
    10c8:	.word	0x4002f088

000010cc <makeFilename(char*)>:
  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
}

char *makeFilename(char * prefix)
{ static char filename[40];
    10cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10d0:	sub	sp, #24
    10d2:	mov	r5, r0

  sprintf(filename, "%s_%04d_%02d_%02d_%02d_%02d_%02d%s", prefix, 
    10d4:	bl	3440 <year()>
    10d8:	mov	r6, r0
    10da:	bl	3420 <month()>
    10de:	mov	sl, r0
    10e0:	bl	3400 <day()>
    10e4:	mov	r7, r0
    10e6:	bl	33a0 <hour()>
    10ea:	mov	r8, r0
    10ec:	bl	33c0 <minute()>
    10f0:	mov	r9, r0
    10f2:	bl	33e0 <second()>
                    year(), month(), day(), hour(), minute(), second(), postfix);
    10f6:	ldr	r4, [pc, #60]	; (1134 <makeFilename(char*)+0x68>)
    10f8:	ldr	r1, [pc, #60]	; (1138 <makeFilename(char*)+0x6c>)
    10fa:	str	r0, [sp, #16]
    10fc:	mov	r3, r6
    10fe:	mov	r2, r5
    1100:	str	r1, [sp, #20]
    1102:	str.w	sl, [sp]
    1106:	ldr	r1, [pc, #52]	; (113c <makeFilename(char*)+0x70>)
    1108:	str.w	r9, [sp, #12]
    110c:	str.w	r8, [sp, #8]
    1110:	str	r7, [sp, #4]
    1112:	mov	r0, r4
    1114:	bl	cc54 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1118:	mov	r0, r4
    111a:	bl	cec0 <strlen>
    111e:	mov	r1, r0
    1120:	mov	r0, r4
    1122:	bl	89fc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1126:	ldr	r0, [pc, #24]	; (1140 <makeFilename(char*)+0x74>)
    1128:	bl	a2f4 <Print::println()>
#if DO_DEBUG>0
  Serial.println(filename);
#endif
  return filename;  
}
    112c:	mov	r0, r4
    112e:	add	sp, #24
    1130:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1134:	.word	0x2001ccac
    1138:	.word	0x20017758
    113c:	.word	0x000134ac
    1140:	.word	0x20017924

00001144 <wavHeader(unsigned long)>:

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
    1144:	ldr	r3, [pc, #80]	; (1198 <wavHeader(unsigned long)+0x54>)
    1146:	ldr	r1, [pc, #84]	; (119c <wavHeader(unsigned long)+0x58>)
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
    1148:	ldr	r2, [pc, #84]	; (11a0 <wavHeader(unsigned long)+0x5c>)

	return header;
}

char * wavHeader(uint32_t fileSize)
{
    114a:	push	{r4, r5, r6, r7}
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
    114c:	str	r2, [r3, #28]

	return header;
}

char * wavHeader(uint32_t fileSize)
{
    114e:	mov	r2, r0

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
    1150:	ldmia	r1, {r0, r1}
  strcpy(wheader+8,"WAVE");
    1152:	ldr	r6, [pc, #80]	; (11a4 <wavHeader(unsigned long)+0x60>)

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
    1154:	str	r0, [r3, #0]
  strcpy(wheader+8,"WAVE");
    1156:	ldmia.w	r6, {r0, r1}
  strcpy(wheader+12,"fmt ");
    115a:	ldr	r5, [pc, #76]	; (11a8 <wavHeader(unsigned long)+0x64>)
  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
    115c:	str	r0, [r3, #8]
  strcpy(wheader+12,"fmt ");
    115e:	ldmia.w	r5, {r0, r1}
  strcpy(wheader+36,"data");
    1162:	ldr	r4, [pc, #72]	; (11ac <wavHeader(unsigned long)+0x68>)
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
    1164:	str	r0, [r3, #12]
  strcpy(wheader+36,"data");
    1166:	ldmia.w	r4, {r0, r1}
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
    116a:	subs	r2, #44	; 0x2c
    116c:	bic.w	r2, r2, #3
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
    1170:	add.w	r7, r2, #36	; 0x24
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
    1174:	movs	r6, #1
  *(int16_t*)(wheader+22)=nchan;// numChannels 
    1176:	movs	r5, #2
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
    1178:	movw	r4, #48000	; 0xbb80
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
    117c:	str	r0, [r3, #36]	; 0x24
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
    117e:	movs	r1, #4
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
    1180:	str	r2, [r3, #40]	; 0x28
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
    1182:	movs	r2, #16
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
    1184:	str	r7, [r3, #4]
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
    1186:	strh	r6, [r3, #20]
  *(int16_t*)(wheader+22)=nchan;// numChannels 
    1188:	strh	r5, [r3, #22]
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
    118a:	str	r4, [r3, #24]
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
    118c:	mov	r0, r3
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
    118e:	strh	r1, [r3, #32]
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
    1190:	str	r2, [r3, #16]
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
    1192:	strh	r2, [r3, #34]	; 0x22
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
    1194:	pop	{r4, r5, r6, r7}
    1196:	bx	lr
    1198:	.word	0x2001cdb4
    119c:	.word	0x000134f0
    11a0:	.word	0x00017700
    11a4:	.word	0x000134f8
    11a8:	.word	0x00013500
    11ac:	.word	0x00013508

000011b0 <c_uSD::init()>:
//____________________________ FS Interface implementation______________________
void c_uSD::init()
{
    11b0:	push	{r4, r5, r6, lr}
    11b2:	mov	r4, r0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    11b4:	add.w	r5, r0, #1160	; 0x488
    11b8:	mov	r0, r5
    11ba:	mov.w	r1, #0
    11be:	bl	80d4 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    11c2:	str.w	r5, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
    11c6:	cbz	r5, 11d2 <c_uSD::init()+0x22>
    11c8:	mov	r0, r5
    11ca:	bl	7834 <SdioCard::errorCode() const>
    11ce:	mov	r5, r0
    11d0:	cbz	r0, 11f2 <c_uSD::init()+0x42>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    11d2:	ldr	r6, [pc, #60]	; (1210 <c_uSD::init()+0x60>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    11d4:	ldr	r5, [pc, #60]	; (1214 <c_uSD::init()+0x64>)
  {
//    sd.errorHalt("sd.begin failed");
    while(1)
    {
      // blink code suggests insertion of an SD card
            pinMode(13,OUTPUT);
    11d6:	movs	r1, #1
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    11d8:	movs	r4, #32
    11da:	movs	r0, #13
    11dc:	bl	8ea0 <pinMode>
    11e0:	str	r4, [r6, #0]
            digitalWriteFast(13,HIGH);
            delay(200);
    11e2:	movs	r0, #200	; 0xc8
    11e4:	bl	8ef0 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    11e8:	str	r4, [r5, #0]
            digitalWriteFast(13,LOW);
            delay(200);
    11ea:	movs	r0, #200	; 0xc8
    11ec:	bl	8ef0 <delay>
    11f0:	b.n	11d6 <c_uSD::init()+0x26>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    11f2:	ldr.w	r1, [r4, #1156]	; 0x484
    11f6:	mov	r0, r4
    11f8:	bl	6f48 <FsVolume::begin(BlockDeviceInterface*)>
    11fc:	cmp	r0, #0
    11fe:	beq.n	11d2 <c_uSD::init()+0x22>
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
    1200:	ldr	r3, [pc, #20]	; (1218 <c_uSD::init()+0x68>)
    1202:	ldr	r2, [pc, #24]	; (121c <c_uSD::init()+0x6c>)
  //
  nbuf=0;
    1204:	strh.w	r5, [r4, #1278]	; 0x4fe
  state=0;
    1208:	strh.w	r5, [r4, #1276]	; 0x4fc
            delay(200);
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
    120c:	str	r2, [r3, #0]
  //
  nbuf=0;
  state=0;
}
    120e:	pop	{r4, r5, r6, pc}
    1210:	.word	0x400ff084
    1214:	.word	0x400ff088
    1218:	.word	0x2001dd00
    121c:	.word	0x00000719

00001220 <c_uSD::close()>:
    state=close();
  }
  return state;
}
int16_t c_uSD::close(void)
{   // close file
    1220:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1224:	mov	r5, r0
    1226:	ldr.w	r0, [r0, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    122a:	cmp	r0, #0
    122c:	beq.n	12c2 <c_uSD::close()+0xa2>
    122e:	bl	6170 <FatFile::truncate()>
    1232:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    1236:	cmp	r3, #0
    1238:	beq.n	12d4 <c_uSD::close()+0xb4>
    123a:	ldr.w	sl, [r3, #28]
    123e:	mov.w	r9, #0
    1242:	mov	r8, sl
    file.truncate();
    #ifdef GEN_WAV_FILE
       uint32_t fileSize = file.size();
       memcpy(header,wavHeader(fileSize),44);
    1244:	mov	r0, sl
    1246:	bl	1144 <wavHeader(unsigned long)>
    124a:	ldr	r7, [pc, #232]	; (1334 <c_uSD::close()+0x114>)
    124c:	mov	r4, r0
    124e:	add.w	lr, r0, #32
    1252:	ldr	r0, [r4, #0]
    1254:	ldr	r1, [r4, #4]
    1256:	ldr	r2, [r4, #8]
    1258:	ldr	r3, [r4, #12]
    125a:	mov	r6, r7
    125c:	stmia	r6!, {r0, r1, r2, r3}
    125e:	adds	r4, #16
    1260:	cmp	r4, lr
    1262:	mov	r7, r6
    1264:	bne.n	1252 <c_uSD::close()+0x32>
    1266:	ldr	r0, [r4, #0]
    1268:	ldr	r1, [r4, #4]
    126a:	ldr	r2, [r4, #8]
    126c:	stmia	r7!, {r0, r1, r2}
    126e:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    1272:	cmp	r0, #0
    1274:	beq.n	1308 <c_uSD::close()+0xe8>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1276:	movs	r1, #0
    1278:	bl	5ff8 <FatFile::seekSet(unsigned long)>
    127c:	ldr.w	r0, [r5, #1268]	; 0x4f4
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1280:	cbz	r0, 12e6 <c_uSD::close()+0xc6>
    1282:	mov.w	r2, #512	; 0x200
    1286:	ldr	r1, [pc, #172]	; (1334 <c_uSD::close()+0x114>)
    1288:	bl	61e8 <FatFile::write(void const*, unsigned int)>
    128c:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    1290:	cmp	r0, #0
    1292:	bne.n	1300 <c_uSD::close()+0xe0>
    1294:	ldr.w	r0, [r5, #1272]	; 0x4f8
    1298:	cbz	r0, 12a2 <c_uSD::close()+0x82>
    129a:	mov	r2, r8
    129c:	mov	r3, r9
    129e:	bl	4888 <ExFatFile::seekSet(unsigned long long)>
       file.seek(0);
       file.write(header,512);
       file.seek(fileSize);
    #endif
    file.close();
    12a2:	addw	r0, r5, #1212	; 0x4bc
    12a6:	bl	6ea0 <FsBaseFile::close()>
    12aa:	movs	r1, #11
    12ac:	ldr	r0, [pc, #136]	; (1338 <c_uSD::close()+0x118>)
    12ae:	bl	89fc <usb_serial_write>
    12b2:	ldr	r0, [pc, #136]	; (133c <c_uSD::close()+0x11c>)
    12b4:	bl	a2f4 <Print::println()>
#if DO_DEBUG>0
    Serial.println("file Closed");    
#endif
    state=0;  // flag to open new file
    12b8:	movs	r0, #0
    12ba:	strh.w	r0, [r5, #1276]	; 0x4fc
    return state;
}
    12be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    12c2:	ldr.w	r0, [r5, #1272]	; 0x4f8
    12c6:	cbz	r0, 131a <c_uSD::close()+0xfa>
    12c8:	bl	578c <ExFatFile::truncate()>
    12cc:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    12d0:	cmp	r3, #0
    12d2:	bne.n	123a <c_uSD::close()+0x1a>
    12d4:	ldr.w	r3, [r5, #1272]	; 0x4f8
    12d8:	cbz	r3, 1326 <c_uSD::close()+0x106>
    12da:	ldrd	r8, r9, [r3, #16]
    12de:	mov.w	r9, #0
    12e2:	mov	sl, r8
    12e4:	b.n	1244 <c_uSD::close()+0x24>
    12e6:	ldr.w	r0, [r5, #1272]	; 0x4f8
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    12ea:	cmp	r0, #0
    12ec:	beq.n	12a2 <c_uSD::close()+0x82>
    12ee:	mov.w	r2, #512	; 0x200
    12f2:	ldr	r1, [pc, #64]	; (1334 <c_uSD::close()+0x114>)
    12f4:	bl	5870 <ExFatFile::write(void const*, unsigned int)>
    12f8:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    12fc:	cmp	r0, #0
    12fe:	beq.n	1294 <c_uSD::close()+0x74>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1300:	mov	r1, sl
    1302:	bl	5ff8 <FatFile::seekSet(unsigned long)>
    1306:	b.n	12a2 <c_uSD::close()+0x82>
           m_xFile ? m_xFile->seekSet(pos) : false;
    1308:	ldr.w	r0, [r5, #1272]	; 0x4f8
    130c:	cmp	r0, #0
    130e:	beq.n	12a2 <c_uSD::close()+0x82>
    1310:	movs	r2, #0
    1312:	movs	r3, #0
    1314:	bl	4888 <ExFatFile::seekSet(unsigned long long)>
    1318:	b.n	127c <c_uSD::close()+0x5c>
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
    131a:	mov	sl, r0
    131c:	mov.w	r8, #0
    1320:	mov.w	r9, #0
    1324:	b.n	1244 <c_uSD::close()+0x24>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    1326:	mov	sl, r3
    1328:	mov.w	r8, #0
    132c:	mov.w	r9, #0
    1330:	b.n	1244 <c_uSD::close()+0x24>
    1332:	nop
    1334:	.word	0x20018aac
    1338:	.word	0x00013510
    133c:	.word	0x20017924

00001340 <c_uSD::storeConfig(unsigned long*, int, long*, int)>:

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
    1340:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1344:	ldr	r4, [pc, #272]	; (1458 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x118>)
    1346:	sub	sp, #44	; 0x2c
    1348:	ldr	r4, [r4, #0]
    134a:	ldr.w	r9, [sp, #80]	; 0x50
    134e:	str	r3, [sp, #4]
    1350:	mov	r5, r0
    1352:	mov	sl, r1
    1354:	mov	r8, r2
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
    1356:	addw	fp, r0, #1212	; 0x4bc
    135a:	cbz	r4, 136a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x2a>
    135c:	mov	r1, r4
    135e:	movw	r3, #1537	; 0x601
    1362:	ldr	r2, [pc, #248]	; (145c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x11c>)
    1364:	mov	r0, fp
    1366:	bl	6ec8 <FsBaseFile::open(FsVolume*, char const*, int)>
  for(int ii=0; ii<n1; ii++)
    136a:	cmp.w	r8, #0
    136e:	ble.n	1452 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x112>
    1370:	sub.w	r7, sl, #4
    1374:	movs	r6, #0
    1376:	add	r4, sp, #8
    1378:	b.n	1384 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    137a:	bl	61e8 <FatFile::write(void const*, unsigned int)>
    137e:	adds	r6, #1
    1380:	cmp	r8, r6
    1382:	beq.n	13be <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
    1384:	ldr.w	r2, [r7, #4]!
    1388:	ldr	r1, [pc, #212]	; (1460 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
    138a:	mov	r0, r4
    138c:	bl	cc54 <sprintf>
    1390:	mov	r0, r4
    1392:	bl	cec0 <strlen>
    1396:	ldr.w	r3, [r5, #1268]	; 0x4f4
    139a:	mov	lr, r0
    139c:	mov	r2, r0
    139e:	mov	r1, r4
    13a0:	mov	r0, r3
    13a2:	cmp	r3, #0
    13a4:	bne.n	137a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3a>
    13a6:	ldr.w	r3, [r5, #1272]	; 0x4f8
    13aa:	mov	r2, lr
    13ac:	mov	r1, r4
    13ae:	mov	r0, r3
    13b0:	cmp	r3, #0
    13b2:	beq.n	137e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3e>
}

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
    13b4:	adds	r6, #1
    13b6:	bl	5870 <ExFatFile::write(void const*, unsigned int)>
    13ba:	cmp	r8, r6
    13bc:	bne.n	1384 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
    13be:	cmp.w	r9, #0
    13c2:	ble.n	1410 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
    13c4:	ldr	r3, [sp, #4]
    13c6:	movs	r6, #0
    13c8:	subs	r7, r3, #4
    13ca:	b.n	13d6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
    13cc:	bl	61e8 <FatFile::write(void const*, unsigned int)>
    13d0:	adds	r6, #1
    13d2:	cmp	r9, r6
    13d4:	beq.n	1410 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
    13d6:	ldr.w	r2, [r7, #4]!
    13da:	ldr	r1, [pc, #132]	; (1460 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
    13dc:	mov	r0, r4
    13de:	bl	cc54 <sprintf>
    13e2:	mov	r0, r4
    13e4:	bl	cec0 <strlen>
    13e8:	ldr.w	r3, [r5, #1268]	; 0x4f4
    13ec:	mov	lr, r0
    13ee:	mov	r2, r0
    13f0:	mov	r1, r4
    13f2:	mov	r0, r3
    13f4:	cmp	r3, #0
    13f6:	bne.n	13cc <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x8c>
    13f8:	ldr.w	r3, [r5, #1272]	; 0x4f8
    13fc:	mov	r2, lr
    13fe:	mov	r1, r4
    1400:	mov	r0, r3
    1402:	cmp	r3, #0
    1404:	beq.n	13d0 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x90>
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
    1406:	adds	r6, #1
    1408:	bl	5870 <ExFatFile::write(void const*, unsigned int)>
    140c:	cmp	r9, r6
    140e:	bne.n	13d6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
    1410:	add.w	r2, sl, r8, lsl #2
    1414:	ldr	r1, [pc, #76]	; (1464 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x124>)
    1416:	mov	r0, r4
    1418:	bl	cc54 <sprintf>
    141c:	ldr.w	r0, [r5, #1268]	; 0x4f4
    1420:	cbz	r0, 1436 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xf6>
    1422:	mov	r1, r4
    1424:	movs	r2, #6
    1426:	bl	61e8 <FatFile::write(void const*, unsigned int)>
  file.write((uint8_t *)text,6);

  file.close();
    142a:	mov	r0, fp
    142c:	bl	6ea0 <FsBaseFile::close()>
  
}
    1430:	add	sp, #44	; 0x2c
    1432:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1436:	ldr.w	r0, [r5, #1272]	; 0x4f8
    143a:	cmp	r0, #0
    143c:	beq.n	142a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xea>
    143e:	mov	r1, r4
    1440:	movs	r2, #6
    1442:	bl	5870 <ExFatFile::write(void const*, unsigned int)>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
  file.write((uint8_t *)text,6);

  file.close();
    1446:	mov	r0, fp
    1448:	bl	6ea0 <FsBaseFile::close()>
  
}
    144c:	add	sp, #44	; 0x2c
    144e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1452:	add	r4, sp, #8
    1454:	b.n	13be <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
    1456:	nop
    1458:	.word	0x2001dd04
    145c:	.word	0x0001351c
    1460:	.word	0x00013530
    1464:	.word	0x00013528

00001468 <c_uSD::loadConfig(unsigned long*, int, long*, int)>:

void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
    1468:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    146c:	ldr	r4, [pc, #252]	; (156c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x104>)
    146e:	sub	sp, #44	; 0x2c
    1470:	ldr	r4, [r4, #0]
    1472:	ldr.w	r9, [sp, #80]	; 0x50
    1476:	cmp	r4, #0
    1478:	beq.n	14f6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
    147a:	addw	fp, r0, #1212	; 0x4bc
    147e:	str	r3, [sp, #4]
    1480:	mov	r8, r2
    1482:	mov	sl, r1
    1484:	mov	r5, r0
    1486:	mov	r1, r4
    1488:	mov	r0, fp
    148a:	movs	r3, #0
    148c:	ldr	r2, [pc, #224]	; (1570 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
    148e:	bl	6ec8 <FsBaseFile::open(FsVolume*, char const*, int)>
    1492:	cbz	r0, 14f6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  //
  for(int ii=0; ii<n1; ii++)
    1494:	cmp.w	r8, #0
    1498:	ldr.w	r3, [r5, #1268]	; 0x4f4
    149c:	ble.n	14fc <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x94>
    149e:	mov	r7, sl
    14a0:	movs	r6, #0
    14a2:	add	r4, sp, #8
    14a4:	b.n	14c6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x5e>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    14a6:	bl	5df4 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
    14aa:	cmp	r0, #0
    14ac:	ldr	r1, [pc, #196]	; (1574 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
    14ae:	ble.n	14b8 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x50>
    14b0:	mov	r2, r7
    14b2:	mov	r0, r4
    14b4:	bl	cca0 <sscanf>
    14b8:	ldr.w	r3, [r5, #1268]	; 0x4f4
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
    14bc:	adds	r6, #1
    14be:	cmp	r8, r6
    14c0:	add.w	r7, r7, #4
    14c4:	beq.n	14fe <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x96>
    14c6:	movs	r2, #12
    14c8:	mov	r1, r4
    14ca:	mov	r0, r3
    14cc:	cmp	r3, #0
    14ce:	bne.n	14a6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
    14d0:	ldr.w	r0, [r5, #1272]	; 0x4f8
    14d4:	cmp	r0, #0
    14d6:	beq.n	14bc <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x54>
    14d8:	movs	r2, #12
    14da:	mov	r1, r4
    14dc:	bl	46b8 <ExFatFile::read(void*, unsigned int)>
    14e0:	b.n	14aa <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x42>
    14e2:	cbz	r3, 1546 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xde>
    14e4:	mov	r0, r3
    14e6:	movs	r2, #6
    14e8:	mov	r1, r4
    14ea:	bl	5df4 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
    14ee:	cbnz	r0, 1558 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
  { text[5]=0;
    sscanf(text,"%s",(char *) &param1[n1]);
  }  
  file.close();
    14f0:	mov	r0, fp
    14f2:	bl	6ea0 <FsBaseFile::close()>
}
    14f6:	add	sp, #44	; 0x2c
    14f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14fc:	add	r4, sp, #8
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
    14fe:	cmp.w	r9, #0
    1502:	ble.n	14e2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
    1504:	ldr	r6, [sp, #4]
    1506:	movs	r7, #0
    1508:	b.n	152a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xc2>
    150a:	bl	5df4 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
    150e:	cmp	r0, #0
    1510:	ldr	r1, [pc, #96]	; (1574 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
    1512:	ble.n	151c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb4>
    1514:	mov	r2, r6
    1516:	mov	r0, r4
    1518:	bl	cca0 <sscanf>
    151c:	ldr.w	r3, [r5, #1268]	; 0x4f4
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
    1520:	adds	r7, #1
    1522:	cmp	r9, r7
    1524:	add.w	r6, r6, #4
    1528:	beq.n	14e2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
    152a:	movs	r2, #12
    152c:	mov	r1, r4
    152e:	mov	r0, r3
    1530:	cmp	r3, #0
    1532:	bne.n	150a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
    1534:	ldr.w	r0, [r5, #1272]	; 0x4f8
    1538:	cmp	r0, #0
    153a:	beq.n	1520 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb8>
    153c:	movs	r2, #12
    153e:	mov	r1, r4
    1540:	bl	46b8 <ExFatFile::read(void*, unsigned int)>
    1544:	b.n	150e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa6>
    1546:	ldr.w	r0, [r5, #1272]	; 0x4f8
    154a:	cbz	r0, 1558 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
    154c:	movs	r2, #6
    154e:	mov	r1, r4
    1550:	bl	46b8 <ExFatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
    1554:	cmp	r0, #0
    1556:	beq.n	14f0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
  { text[5]=0;
    1558:	movs	r3, #0
    sscanf(text,"%s",(char *) &param1[n1]);
    155a:	add.w	r2, sl, r8, lsl #2
    155e:	mov	r0, r4
    1560:	ldr	r1, [pc, #20]	; (1578 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x110>)
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
  { text[5]=0;
    1562:	strb.w	r3, [sp, #13]
    sscanf(text,"%s",(char *) &param1[n1]);
    1566:	bl	cca0 <sscanf>
    156a:	b.n	14f0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
    156c:	.word	0x2001dd04
    1570:	.word	0x0001351c
    1574:	.word	0x00013538
    1578:	.word	0x000134cc

0000157c <setWakeupCallandSleep(unsigned long)>:
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
    157c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
    1580:	ldr	r4, [pc, #308]	; (16b8 <setWakeupCallandSleep(unsigned long)+0x13c>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
    1582:	ldr	r2, [pc, #312]	; (16bc <setWakeupCallandSleep(unsigned long)+0x140>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
    1584:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
    1586:	ldr	r1, [pc, #312]	; (16c0 <setWakeupCallandSleep(unsigned long)+0x144>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    1588:	ldr.w	r8, [pc, #376]	; 1704 <setWakeupCallandSleep(unsigned long)+0x188>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    158c:	ldr	r6, [pc, #308]	; (16c4 <setWakeupCallandSleep(unsigned long)+0x148>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
    158e:	orr.w	r3, r3, #536870912	; 0x20000000
    1592:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
    1594:	ldr	r3, [r2, #0]
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
    1596:	ldr	r4, [pc, #304]	; (16c8 <setWakeupCallandSleep(unsigned long)+0x14c>)
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
    1598:	orr.w	r3, r3, #256	; 0x100
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
    159c:	mov	r7, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
    159e:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
    15a0:	movs	r0, #21
    15a2:	bl	8e38 <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
    15a6:	ldr	r3, [pc, #292]	; (16cc <setWakeupCallandSleep(unsigned long)+0x150>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
    15a8:	ldr.w	ip, [pc, #348]	; 1708 <setWakeupCallandSleep(unsigned long)+0x18c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
    15ac:	ldr	r1, [pc, #288]	; (16d0 <setWakeupCallandSleep(unsigned long)+0x154>)
  LLWU_PE3 = 0;
    15ae:	ldr	r0, [pc, #292]	; (16d4 <setWakeupCallandSleep(unsigned long)+0x158>)
  LLWU_PE4 = 0;
    15b0:	ldr	r2, [pc, #292]	; (16d8 <setWakeupCallandSleep(unsigned long)+0x15c>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
    15b2:	ldr.w	lr, [pc, #344]	; 170c <setWakeupCallandSleep(unsigned long)+0x190>
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
    15b6:	movs	r5, #32
    15b8:	strb	r5, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
    15ba:	mov.w	r3, #2097152	; 0x200000
    15be:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
    15c2:	str	r3, [r4, #0]
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
    15c4:	ldr	r3, [pc, #276]	; (16dc <setWakeupCallandSleep(unsigned long)+0x160>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
    15c6:	movs	r4, #0
    15c8:	strb.w	r4, [lr]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    15cc:	mvn.w	ip, #1020	; 0x3fc
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
    15d0:	strb	r4, [r1, #0]
  LLWU_PE3 = 0;
    15d2:	strb	r4, [r0, #0]
  LLWU_PE4 = 0;
    15d4:	strb	r4, [r2, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
    15d6:	strb	r4, [r3, #0]
  LLWU_PE6 = 0;
    15d8:	strb	r4, [r1, #4]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    15da:	sub.w	r1, r1, #216064	; 0x34c00
    15de:	add	r1, ip
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
  LLWU_PE7 = 0;
    15e0:	strb	r4, [r0, #4]
  LLWU_PE8 = 0;
    15e2:	strb	r4, [r2, #4]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
    15e4:	strb	r5, [r3, #4]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    15e6:	ldr	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
    15e8:	ldr	r2, [pc, #244]	; (16e0 <setWakeupCallandSleep(unsigned long)+0x164>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    15ea:	ldr.w	ip, [pc, #292]	; 1710 <setWakeupCallandSleep(unsigned long)+0x194>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    15ee:	orr.w	r3, r3, #67108864	; 0x4000000
    15f2:	str	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
    15f4:	ldr	r3, [r2, #0]
    15f6:	orr.w	r3, r3, #1073741824	; 0x40000000
    15fa:	str	r3, [r2, #0]
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
    15fc:	add.w	r1, r1, #12288	; 0x3000
    PORTB_PCR3 = PORT_PCR_MUX(0);
    1600:	add.w	r2, r2, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    1604:	sub.w	lr, lr, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
    1608:	sub.w	r0, r0, #207872	; 0x32c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    160c:	sub.w	lr, lr, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
    1610:	subw	r0, r0, #1014	; 0x3f6

    PORTB_PCR2 = PORT_PCR_MUX(0);
    1614:	adds	r1, #4
    PORTB_PCR3 = PORT_PCR_MUX(0);
    1616:	adds	r2, #12
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    1618:	ldr	r3, [pc, #200]	; (16e4 <setWakeupCallandSleep(unsigned long)+0x168>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    161a:	str.w	r4, [r8]
    PORTA_PCR1 = PORT_PCR_MUX(0);
    161e:	str.w	r4, [ip]
    PORTA_PCR2 = PORT_PCR_MUX(0);
    1622:	str.w	r4, [lr]
    PORTA_PCR3 = PORT_PCR_MUX(0);
    1626:	str	r4, [r0, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
    1628:	str	r4, [r1, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
    162a:	str	r4, [r2, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    162c:	ldr	r3, [r3, #0]
    162e:	sub.w	r1, r1, #53248	; 0xd000
   RTC_IER |= RTC_IER_TAIE_MASK;
    1632:	sub.w	r2, r2, #52992	; 0xcf00
    1636:	subs	r2, #240	; 0xf0
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    1638:	add	r3, r7
    163a:	str	r3, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
    163c:	ldr	r3, [r2, #0]
    163e:	orr.w	r3, r3, #4
    1642:	str	r3, [r2, #0]
void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
   rtcSetup();
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
    1644:	bl	a1d4 <yield>
    1648:	mov	r3, r4
    164a:	movs	r2, #10
    164c:	mov	r1, r7
    164e:	mov	r0, r6
    1650:	bl	a340 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1654:	mov	r0, r6
    1656:	bl	a2f4 <Print::println()>
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
    165a:	movs	r1, #1
    165c:	movs	r0, #13
    165e:	bl	8ea0 <pinMode>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1662:	ldr	r3, [pc, #132]	; (16e8 <setWakeupCallandSleep(unsigned long)+0x16c>)

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    1664:	ldr	r6, [pc, #132]	; (16ec <setWakeupCallandSleep(unsigned long)+0x170>)
    1666:	str	r5, [r3, #0]
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
    1668:	mov.w	r0, #1000	; 0x3e8
    166c:	bl	8ef0 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1670:	ldr	r3, [pc, #124]	; (16f0 <setWakeupCallandSleep(unsigned long)+0x174>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
    1672:	ldr	r7, [pc, #128]	; (16f4 <setWakeupCallandSleep(unsigned long)+0x178>)
    1674:	str	r5, [r3, #0]

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    1676:	ldrb	r2, [r6, #5]
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
    1678:	ldr	r5, [pc, #124]	; (16f8 <setWakeupCallandSleep(unsigned long)+0x17c>)
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
    167a:	ldr	r0, [pc, #128]	; (16fc <setWakeupCallandSleep(unsigned long)+0x180>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
    167c:	ldr	r1, [pc, #128]	; (1700 <setWakeupCallandSleep(unsigned long)+0x184>)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    167e:	sub.w	r3, r3, #528384	; 0x81000

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    1682:	and.w	r2, r2, #223	; 0xdf
    1686:	strb	r2, [r6, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    1688:	subs	r3, #135	; 0x87
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
    168a:	movs	r2, #2
    168c:	strb	r2, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    168e:	ldrb	r2, [r3, #0]
    1690:	and.w	r2, r2, #248	; 0xf8
    1694:	strb	r2, [r3, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
    1696:	ldrb	r2, [r3, #0]
    1698:	orr.w	r2, r2, #4
    169c:	strb	r2, [r3, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
    169e:	strb	r4, [r5, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
    16a0:	ldrb	r3, [r3, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
    16a2:	ldr	r3, [r0, #0]
    16a4:	bic.w	r3, r3, #2
    16a8:	str	r3, [r0, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
    16aa:	ldr	r3, [r1, #0]
    16ac:	orr.w	r3, r3, #4
    16b0:	str	r3, [r1, #0]
   
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
    16b2:	wfi
    16b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16b8:	.word	0x4004803c
    16bc:	.word	0x4003d010
    16c0:	.word	0x00000521
    16c4:	.word	0x20017924
    16c8:	.word	0xe000e100
    16cc:	.word	0xe000e415
    16d0:	.word	0x4007c001
    16d4:	.word	0x4007c002
    16d8:	.word	0x4007c003
    16dc:	.word	0x4007c004
    16e0:	.word	0x40047000
    16e4:	.word	0x4003d000
    16e8:	.word	0x400ff084
    16ec:	.word	0x40064000
    16f0:	.word	0x400ff088
    16f4:	.word	0x4007e000
    16f8:	.word	0x4007e002
    16fc:	.word	0xe000e010
    1700:	.word	0xe000ed10
    1704:	.word	0x40049000
    1708:	.word	0xe000e280
    170c:	.word	0x4007c000
    1710:	.word	0x40049004

00001714 <checkDutyCycle(ACQ_Parameters_s*, short)>:
  #define ShortSleepDuration 60   // i.e. wake up every 'ShortSleepDuration' seconds
#endif
//
// flag can be 0 file to be open // time to shutdown if required
int32_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
    1714:	push	{r3, r4, r5, r6, r7, lr}
    1716:	mov	r6, r0
    1718:	mov	r5, r1
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
    171a:	bl	3300 <now()>
    171e:	mov	r4, r0
  uint16_t to = hour();
    1720:	bl	33a0 <hour()>
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
    1724:	ldrh	r7, [r6, #12]
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
    1726:	ldrh.w	lr, [r6, #24]
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
    172a:	ldrh	r3, [r6, #16]
  uint16_t T3 = acqParameters->T3;
    172c:	ldrh	r1, [r6, #20]
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    172e:	cmp	r7, lr
int32_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
  uint16_t to = hour();
    1730:	uxth	r0, r0
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    1732:	bls.n	174e <checkDutyCycle(ACQ_Parameters_s*, short)+0x3a>
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
    1734:	cmp	r0, r1
    1736:	bcc.n	17ac <checkDutyCycle(ACQ_Parameters_s*, short)+0x98>
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
      
    if(flag>=0)
    1738:	cmp	r5, #0
    173a:	blt.n	174a <checkDutyCycle(ACQ_Parameters_s*, short)+0x36>
    { 
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
    173c:	beq.n	17c2 <checkDutyCycle(ACQ_Parameters_s*, short)+0xae>
    173e:	ldr	r5, [pc, #280]	; (1858 <checkDutyCycle(ACQ_Parameters_s*, short)+0x144>)
    1740:	ldrh	r2, [r6, #4]
    1742:	ldr	r3, [r5, #0]
    1744:	add	r3, r2
    1746:	cmp	r4, r3
    1748:	bcs.n	1840 <checkDutyCycle(ACQ_Parameters_s*, short)+0x12c>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    174a:	movs	r0, #0
    174c:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));
    174e:	cmp	r0, r7
    1750:	bcc.n	1756 <checkDutyCycle(ACQ_Parameters_s*, short)+0x42>
    1752:	cmp	r0, r3
    1754:	bcc.n	1738 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    1756:	cmp	r0, r1
    1758:	bcs.n	17dc <checkDutyCycle(ACQ_Parameters_s*, short)+0xc8>
    }
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    175a:	ldr	r2, [pc, #256]	; (185c <checkDutyCycle(ACQ_Parameters_s*, short)+0x148>)
    175c:	ldr	r5, [pc, #256]	; (1860 <checkDutyCycle(ACQ_Parameters_s*, short)+0x14c>)
    175e:	umull	r6, r2, r2, r4
    1762:	lsrs	r2, r2, #16
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    1764:	cmp	r0, r3
    }
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    1766:	mls	r2, r5, r2, r4
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    176a:	bcc.n	1770 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5c>
    176c:	cmp	r0, r1
    176e:	bcc.n	17fa <checkDutyCycle(ACQ_Parameters_s*, short)+0xe6>
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    1770:	movs	r4, #0
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    1772:	cmp	r0, lr
    1774:	bcc.n	177a <checkDutyCycle(ACQ_Parameters_s*, short)+0x66>
    1776:	cmp	r7, lr
    1778:	bcc.n	17ea <checkDutyCycle(ACQ_Parameters_s*, short)+0xd6>
    {  nsec = (T1+24) * 3600 - tto;
    }
    //
    if(to<T1)                                            //eg: to=2:  T1=4; T2=9; T3=16; T4=20
    177a:	cmp	r0, r7
    177c:	bcs.n	1788 <checkDutyCycle(ACQ_Parameters_s*, short)+0x74>
    { nsec = T1 * 3600 - tto;
    177e:	mov.w	r0, #3600	; 0xe10
    1782:	mul.w	r0, r0, r7
    1786:	subs	r4, r0, r2

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1788:	movs	r3, #0
    178a:	movs	r2, #10
    178c:	mov	r1, r4
    178e:	ldr	r0, [pc, #212]	; (1864 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    1790:	bl	a340 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1794:	ldr	r0, [pc, #204]	; (1864 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    1796:	bl	a2f4 <Print::println()>
    179a:	movs	r1, #15
    179c:	ldr	r0, [pc, #200]	; (1868 <checkDutyCycle(ACQ_Parameters_s*, short)+0x154>)
    179e:	bl	89fc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    17a2:	ldr	r0, [pc, #192]	; (1864 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    17a4:	bl	a2f4 <Print::println()>
    
#if DO_DEBUG>0
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
    17a8:	mov	r0, r4
    17aa:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
    17ac:	cmp	r0, lr
    17ae:	bcc.n	1738 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    17b0:	cmp	r0, r7
    17b2:	bcc.n	175a <checkDutyCycle(ACQ_Parameters_s*, short)+0x46>
    17b4:	cmp	r0, r3
    17b6:	ite	cs
    17b8:	movcs	r2, #0
    17ba:	movcc	r2, #1
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    17bc:	cmp	r2, #0
    17be:	beq.n	175a <checkDutyCycle(ACQ_Parameters_s*, short)+0x46>
    17c0:	b.n	1738 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
        return -1; // flag to close acquisition
      }
      
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
    17c2:	ldr	r3, [pc, #168]	; (186c <checkDutyCycle(ACQ_Parameters_s*, short)+0x158>)
    17c4:	ldrh	r2, [r3, #0]
    17c6:	cbz	r2, 180a <checkDutyCycle(ACQ_Parameters_s*, short)+0xf6>
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    17c8:	ldrh	r3, [r6, #0]
    17ca:	ldrh	r0, [r6, #8]
    17cc:	cmp	r3, r0
    17ce:	bcs.n	17d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0xc4>
  if (doRecording) // we can record
  {
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
    17d0:	ldr	r2, [r6, #28]
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    17d2:	add	r3, r2
    17d4:	cmp	r4, r3
    17d6:	bcs.n	1818 <checkDutyCycle(ACQ_Parameters_s*, short)+0x104>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    17d8:	mov	r0, r5
}
    17da:	pop	{r3, r4, r5, r6, r7, pc}
    17dc:	cmp	r0, lr
    17de:	ite	cs
    17e0:	movcs	r2, #0
    17e2:	movcc	r2, #1
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    17e4:	cmp	r2, #0
    17e6:	beq.n	175a <checkDutyCycle(ACQ_Parameters_s*, short)+0x46>
    17e8:	b.n	1738 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    {  nsec = (T1+24) * 3600 - tto;
    17ea:	add.w	r4, r7, #24
    17ee:	mov.w	r3, #3600	; 0xe10
    17f2:	mul.w	r1, r3, r4
    17f6:	subs	r4, r1, r2
    17f8:	b.n	177a <checkDutyCycle(ACQ_Parameters_s*, short)+0x66>
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
    17fa:	mov.w	r3, #3600	; 0xe10
    17fe:	mul.w	r3, r3, r1
    1802:	cmp	r2, r3
    1804:	bcs.n	1770 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5c>
      nsec = T3 * 3600 - tto;
    1806:	subs	r4, r3, r2
    1808:	b.n	1772 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5e>
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    180a:	ldr	r1, [pc, #76]	; (1858 <checkDutyCycle(ACQ_Parameters_s*, short)+0x144>)
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
    180c:	str	r4, [r6, #28]
            recording=1; 
    180e:	movs	r2, #1
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    1810:	mov	r0, r5
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    1812:	str	r4, [r1, #0]
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
    1814:	strh	r2, [r3, #0]
    1816:	pop	{r3, r4, r5, r6, r7, pc}
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
        { // need to stop
          nsec = (t_rec + t_rep - tt);
    1818:	add	r0, r2
    181a:	subs	r4, r0, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    181c:	mov	r3, r5
    181e:	movs	r2, #10
    1820:	mov	r1, r4
    1822:	ldr	r0, [pc, #64]	; (1864 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    1824:	bl	a340 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1828:	ldr	r0, [pc, #56]	; (1864 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    182a:	bl	a2f4 <Print::println()>
    182e:	movs	r1, #15
    1830:	ldr	r0, [pc, #60]	; (1870 <checkDutyCycle(ACQ_Parameters_s*, short)+0x15c>)
    1832:	bl	89fc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1836:	ldr	r0, [pc, #44]	; (1864 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    1838:	bl	a2f4 <Print::println()>
          #endif
#if DO_DEBUG>0
          Serial.println(nsec); 
          Serial.println("Hibernate now 1");
#endif
          return nsec; 
    183c:	mov	r0, r4
    183e:	pop	{r3, r4, r5, r6, r7, pc}
    1840:	movs	r1, #17
    1842:	ldr	r0, [pc, #48]	; (1874 <checkDutyCycle(ACQ_Parameters_s*, short)+0x160>)
    1844:	bl	89fc <usb_serial_write>
    1848:	ldr	r0, [pc, #24]	; (1864 <checkDutyCycle(ACQ_Parameters_s*, short)+0x150>)
    184a:	bl	a2f4 <Print::println()>
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
      { // need to close file
#if DO_DEBUG>0
        Serial.println("close acquisition");
#endif
        t_start = tt; // update start time for next file
    184e:	str	r4, [r5, #0]
        return -1; // flag to close acquisition
    1850:	mov.w	r0, #4294967295
    1854:	pop	{r3, r4, r5, r6, r7, pc}
    1856:	nop
    1858:	.word	0x2001cd6c
    185c:	.word	0xc22e4507
    1860:	.word	0x00015180
    1864:	.word	0x20017924
    1868:	.word	0x00013594
    186c:	.word	0x2001d03c
    1870:	.word	0x00013584
    1874:	.word	0x00013570

00001878 <setRTCTime(int, int, int, int, int, int)>:
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
    return text;
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
    1878:	push	{r4, r5, r6, lr}
    187a:	sub	sp, #8
    187c:	mov	r6, r0
    187e:	ldr	r4, [sp, #28]
    1880:	ldr	r5, [sp, #24]
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
    1882:	strb.w	r3, [sp, #4]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    1886:	add	r0, sp, #8
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
    1888:	cmp	r4, #99	; 0x63
      yr = yr - 1970;
    188a:	ite	gt
    188c:	subwgt	r4, r4, #1970	; 0x7b2
  else
      yr += 30;  
    1890:	addle	r4, #30
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    1892:	strb.w	r2, [r0, #-8]!
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
    1896:	strb.w	r1, [sp, #1]
      yr = yr - 1970;
  else
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
    189a:	strb.w	r4, [sp, #6]
  tm.Month = mnth;
    189e:	strb.w	r5, [sp, #5]
  tm.Day = dy;
  tm.Hour = hr;
    18a2:	strb.w	r6, [sp, #2]
  tm.Minute = min;
  tm.Second = sec;

  uint32_t tt = makeTime(tm);
    18a6:	bl	3204 <makeTime(tmElements_t const&)>
    18aa:	mov	r4, r0
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
	static void set(unsigned long t) __attribute__((always_inline)) { rtc_set(t); }
    18ac:	bl	8e54 <rtc_set>
  Teensy3Clock.set(tt); // for RTC
  setTime(tt); // local
    18b0:	mov	r0, r4
    18b2:	bl	3464 <setTime(long)>
}
    18b6:	add	sp, #8
    18b8:	pop	{r4, r5, r6, pc}
    18ba:	nop

000018bc <doMenu()>:
      }
    }  
}

int16_t doMenu(void)
{
    18bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    18c0:	ldr	r5, [pc, #724]	; (1b98 <doMenu()+0x2dc>)
      }
    }  
}

int16_t doMenu(void)
{
    18c2:	sub	sp, #12
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    18c4:	bl	89a8 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!Serial.available());
    18c8:	cmp	r0, #0
    18ca:	beq.n	18c4 <doMenu()+0x8>
        virtual int read() { return usb_serial_getchar(); }
    18cc:	bl	8930 <usb_serial_getchar>
    18d0:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    18d2:	mov	r1, r4
    18d4:	ldr	r0, [pc, #708]	; (1b9c <doMenu()+0x2e0>)
    18d6:	bl	ccfc <strchr>
    18da:	cmp	r0, #0
    18dc:	beq.n	18c4 <doMenu()+0x8>
    { switch (c)
    18de:	cmp	r4, #63	; 0x3f
    18e0:	beq.n	1902 <doMenu()+0x46>
    18e2:	ble.w	1a44 <doMenu()+0x188>
    18e6:	cmp	r4, #97	; 0x61
    18e8:	beq.w	1ba8 <doMenu()+0x2ec>
    18ec:	cmp	r4, #120	; 0x78
    18ee:	bne.n	18c4 <doMenu()+0x8>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = Serial.parseInt(); break;
    18f0:	ldr	r0, [pc, #684]	; (1ba0 <doMenu()+0x2e4>)
    18f2:	bl	a7ec <Stream::parseInt()>
    18f6:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    18f8:	cmp	r0, #0
    18fa:	beq.n	18c4 <doMenu()+0x8>
  return ret;
}
    18fc:	add	sp, #12
    18fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1902:	bl	89a8 <usb_serial_available>
  Serial.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!Serial.available());
    1906:	cmp	r0, #0
    1908:	beq.n	1902 <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    190a:	bl	8930 <usb_serial_getchar>
    190e:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    1910:	mov	r1, r4
    1912:	ldr	r0, [pc, #656]	; (1ba4 <doMenu()+0x2e8>)
    1914:	bl	ccfc <strchr>
    1918:	cmp	r0, #0
    191a:	beq.n	18c4 <doMenu()+0x8>
    { switch (c)
    191c:	subs	r4, #49	; 0x31
    191e:	cmp	r4, #70	; 0x46
    1920:	bhi.n	18c4 <doMenu()+0x8>
    1922:	add	r3, pc, #4	; (adr r3, 1928 <doMenu()+0x6c>)
    1924:	ldr.w	pc, [r3, r4, lsl #2]
    1928:	.word	0x00001d31
    192c:	.word	0x00001d3d
    1930:	.word	0x00001d49
    1934:	.word	0x00001d55
    1938:	.word	0x000018c5
    193c:	.word	0x000018c5
    1940:	.word	0x000018c5
    1944:	.word	0x000018c5
    1948:	.word	0x000018c5
    194c:	.word	0x000018c5
    1950:	.word	0x000018c5
    1954:	.word	0x000018c5
    1958:	.word	0x000018c5
    195c:	.word	0x000018c5
    1960:	.word	0x000018c5
    1964:	.word	0x000018c5
    1968:	.word	0x000018c5
    196c:	.word	0x000018c5
    1970:	.word	0x000018c5
    1974:	.word	0x000018c5
    1978:	.word	0x000018c5
    197c:	.word	0x000018c5
    1980:	.word	0x000018c5
    1984:	.word	0x000018c5
    1988:	.word	0x000018c5
    198c:	.word	0x000018c5
    1990:	.word	0x000018c5
    1994:	.word	0x000018c5
    1998:	.word	0x000018c5
    199c:	.word	0x000018c5
    19a0:	.word	0x000018c5
    19a4:	.word	0x000018c5
    19a8:	.word	0x000018c5
    19ac:	.word	0x000018c5
    19b0:	.word	0x000018c5
    19b4:	.word	0x000018c5
    19b8:	.word	0x000018c5
    19bc:	.word	0x000018c5
    19c0:	.word	0x000018c5
    19c4:	.word	0x000018c5
    19c8:	.word	0x000018c5
    19cc:	.word	0x000018c5
    19d0:	.word	0x000018c5
    19d4:	.word	0x000018c5
    19d8:	.word	0x000018c5
    19dc:	.word	0x000018c5
    19e0:	.word	0x000018c5
    19e4:	.word	0x000018c5
    19e8:	.word	0x00001d61
    19ec:	.word	0x000018c5
    19f0:	.word	0x00001d6d
    19f4:	.word	0x00001d7b
    19f8:	.word	0x00001d8b
    19fc:	.word	0x000018c5
    1a00:	.word	0x000018c5
    1a04:	.word	0x00001d99
    1a08:	.word	0x00001da7
    1a0c:	.word	0x000018c5
    1a10:	.word	0x00001db5
    1a14:	.word	0x000018c5
    1a18:	.word	0x000018c5
    1a1c:	.word	0x00001dc3
    1a20:	.word	0x00001dcf
    1a24:	.word	0x00001ddb
    1a28:	.word	0x000018c5
    1a2c:	.word	0x00001de9
    1a30:	.word	0x00001df5
    1a34:	.word	0x00001e03
    1a38:	.word	0x000018c5
    1a3c:	.word	0x000018c5
    1a40:	.word	0x00001e13
  {
    while(!Serial.available());
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    1a44:	cmp	r4, #33	; 0x21
    1a46:	bne.w	18c4 <doMenu()+0x8>
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    1a4a:	add.w	r6, r5, #12
    1a4e:	ldmia.w	r6, {r6, r7, r8}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1a52:	bl	89a8 <usb_serial_available>
    //int T4=acqParameters.T4; mot used
    //
    while(!Serial.available());
    1a56:	cmp	r0, #0
    1a58:	beq.n	1a52 <doMenu()+0x196>
        virtual int read() { return usb_serial_getchar(); }
    1a5a:	bl	8930 <usb_serial_getchar>
    1a5e:	uxtb	r4, r0
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    1a60:	mov	r1, r4
    1a62:	ldr	r0, [pc, #320]	; (1ba4 <doMenu()+0x2e8>)
    1a64:	bl	ccfc <strchr>
    1a68:	cmp	r0, #0
    1a6a:	beq.w	18c4 <doMenu()+0x8>
    { switch (c)
    1a6e:	subs	r4, #49	; 0x31
    1a70:	cmp	r4, #70	; 0x46
    1a72:	bhi.w	18c4 <doMenu()+0x8>
    1a76:	add	r3, pc, #4	; (adr r3, 1a7c <doMenu()+0x1c0>)
    1a78:	ldr.w	pc, [r3, r4, lsl #2]
    1a7c:	.word	0x00001e21
    1a80:	.word	0x00001e39
    1a84:	.word	0x00001ed9
    1a88:	.word	0x00001eef
    1a8c:	.word	0x000018c5
    1a90:	.word	0x000018c5
    1a94:	.word	0x000018c5
    1a98:	.word	0x000018c5
    1a9c:	.word	0x000018c5
    1aa0:	.word	0x000018c5
    1aa4:	.word	0x000018c5
    1aa8:	.word	0x000018c5
    1aac:	.word	0x000018c5
    1ab0:	.word	0x000018c5
    1ab4:	.word	0x000018c5
    1ab8:	.word	0x000018c5
    1abc:	.word	0x000018c5
    1ac0:	.word	0x000018c5
    1ac4:	.word	0x000018c5
    1ac8:	.word	0x000018c5
    1acc:	.word	0x000018c5
    1ad0:	.word	0x000018c5
    1ad4:	.word	0x000018c5
    1ad8:	.word	0x000018c5
    1adc:	.word	0x000018c5
    1ae0:	.word	0x000018c5
    1ae4:	.word	0x000018c5
    1ae8:	.word	0x000018c5
    1aec:	.word	0x000018c5
    1af0:	.word	0x000018c5
    1af4:	.word	0x000018c5
    1af8:	.word	0x000018c5
    1afc:	.word	0x000018c5
    1b00:	.word	0x000018c5
    1b04:	.word	0x000018c5
    1b08:	.word	0x000018c5
    1b0c:	.word	0x000018c5
    1b10:	.word	0x000018c5
    1b14:	.word	0x000018c5
    1b18:	.word	0x000018c5
    1b1c:	.word	0x000018c5
    1b20:	.word	0x000018c5
    1b24:	.word	0x000018c5
    1b28:	.word	0x000018c5
    1b2c:	.word	0x000018c5
    1b30:	.word	0x000018c5
    1b34:	.word	0x000018c5
    1b38:	.word	0x000018c5
    1b3c:	.word	0x00001f0d
    1b40:	.word	0x000018c5
    1b44:	.word	0x0000203f
    1b48:	.word	0x00002057
    1b4c:	.word	0x000020b1
    1b50:	.word	0x000018c5
    1b54:	.word	0x000018c5
    1b58:	.word	0x000020cd
    1b5c:	.word	0x00001f29
    1b60:	.word	0x000018c5
    1b64:	.word	0x00001f45
    1b68:	.word	0x000018c5
    1b6c:	.word	0x000018c5
    1b70:	.word	0x00001f61
    1b74:	.word	0x00001f79
    1b78:	.word	0x00001f95
    1b7c:	.word	0x000018c5
    1b80:	.word	0x00001fad
    1b84:	.word	0x00001fc9
    1b88:	.word	0x00001fe5
    1b8c:	.word	0x000018c5
    1b90:	.word	0x000018c5
    1b94:	.word	0x00001d15
    1b98:	.word	0x20017764
    1b9c:	.word	0x000135a4
    1ba0:	.word	0x20017924
    1ba4:	.word	0x000135ac
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1ba8:	ldr	r3, [r5, #0]
    1baa:	ldr	r1, [pc, #684]	; (1e58 <doMenu()+0x59c>)
    1bac:	ldr	r0, [pc, #684]	; (1e5c <doMenu()+0x5a0>)
  Serial.println();
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
  Serial.printf("%c %s time\n\r",         't',getTime(text));
  Serial.println();
  Serial.printf("%c %5d processing type\r\n",       'c',snipParameters.iproc);
    1bae:	ldr	r6, [pc, #688]	; (1e60 <doMenu()+0x5a4>)
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1bb0:	movs	r2, #111	; 0x6f
    1bb2:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d acq_time\n\r",    'a',acqParameters.ad);
    1bb6:	mov	r2, r4
    1bb8:	ldr	r3, [r5, #4]
    1bba:	ldr	r1, [pc, #680]	; (1e64 <doMenu()+0x5a8>)
    1bbc:	ldr	r0, [pc, #668]	; (1e5c <doMenu()+0x5a0>)
    1bbe:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d rep_rate\n\r",    'r',acqParameters.ar);
    1bc2:	ldr	r3, [r5, #8]
    1bc4:	ldr	r1, [pc, #672]	; (1e68 <doMenu()+0x5ac>)
    1bc6:	ldr	r0, [pc, #660]	; (1e5c <doMenu()+0x5a0>)
    1bc8:	movs	r2, #114	; 0x72
    1bca:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d first_hour\n\r",  '1',acqParameters.T1);
    1bce:	ldr	r3, [r5, #12]
    1bd0:	ldr	r1, [pc, #664]	; (1e6c <doMenu()+0x5b0>)
    1bd2:	ldr	r0, [pc, #648]	; (1e5c <doMenu()+0x5a0>)
    1bd4:	movs	r2, #49	; 0x31
    1bd6:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d second_hour\n\r", '2',acqParameters.T2);
    1bda:	ldr	r3, [r5, #16]
    1bdc:	ldr	r1, [pc, #656]	; (1e70 <doMenu()+0x5b4>)
    1bde:	ldr	r0, [pc, #636]	; (1e5c <doMenu()+0x5a0>)
    1be0:	movs	r2, #50	; 0x32
    1be2:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d third_hour\n\r",  '3',acqParameters.T3);
    1be6:	ldr	r3, [r5, #20]
    1be8:	ldr	r1, [pc, #648]	; (1e74 <doMenu()+0x5b8>)
    1bea:	ldr	r0, [pc, #624]	; (1e5c <doMenu()+0x5a0>)
    1bec:	movs	r2, #51	; 0x33
    1bee:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d last_hour\n\r",   '4',acqParameters.T4);
    1bf2:	ldr	r3, [r5, #24]
    1bf4:	ldr	r1, [pc, #640]	; (1e78 <doMenu()+0x5bc>)
    1bf6:	ldr	r0, [pc, #612]	; (1e5c <doMenu()+0x5a0>)
    1bf8:	movs	r2, #52	; 0x34
    1bfa:	bl	a324 <Print::printf(char const*, ...)>
  Serial.println();
    1bfe:	ldr	r0, [pc, #604]	; (1e5c <doMenu()+0x5a0>)
    1c00:	bl	a2f4 <Print::println()>
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
    1c04:	ldr	r3, [pc, #628]	; (1e7c <doMenu()+0x5c0>)
    1c06:	ldr	r1, [pc, #632]	; (1e80 <doMenu()+0x5c4>)
    1c08:	ldr	r0, [pc, #592]	; (1e5c <doMenu()+0x5a0>)
    1c0a:	movs	r2, #110	; 0x6e
    1c0c:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
    1c10:	bl	81c <getDate(char*) [clone .constprop.45]>
    1c14:	movs	r2, #100	; 0x64
    1c16:	mov	r3, r0
    1c18:	ldr	r1, [pc, #616]	; (1e84 <doMenu()+0x5c8>)
    1c1a:	ldr	r0, [pc, #576]	; (1e5c <doMenu()+0x5a0>)
    1c1c:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %s time\n\r",         't',getTime(text));
    1c20:	bl	7e8 <getTime(char*) [clone .constprop.44]>
    1c24:	movs	r2, #116	; 0x74
    1c26:	mov	r3, r0
    1c28:	ldr	r1, [pc, #604]	; (1e88 <doMenu()+0x5cc>)
    1c2a:	ldr	r0, [pc, #560]	; (1e5c <doMenu()+0x5a0>)
    1c2c:	bl	a324 <Print::printf(char const*, ...)>
  Serial.println();
    1c30:	ldr	r0, [pc, #552]	; (1e5c <doMenu()+0x5a0>)
    1c32:	bl	a2f4 <Print::println()>
  Serial.printf("%c %5d processing type\r\n",       'c',snipParameters.iproc);
    1c36:	ldr	r3, [r6, #0]
    1c38:	ldr	r1, [pc, #592]	; (1e8c <doMenu()+0x5d0>)
    1c3a:	ldr	r0, [pc, #544]	; (1e5c <doMenu()+0x5a0>)
    1c3c:	movs	r2, #99	; 0x63
    1c3e:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d threshold\r\n",             'h',snipParameters.thresh);
    1c42:	ldr	r3, [r6, #4]
    1c44:	ldr	r1, [pc, #584]	; (1e90 <doMenu()+0x5d4>)
    1c46:	ldr	r0, [pc, #532]	; (1e5c <doMenu()+0x5a0>)
    1c48:	movs	r2, #104	; 0x68
    1c4a:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d noise window\r\n",          'w',snipParameters.win0);
    1c4e:	ldr	r3, [r6, #8]
    1c50:	ldr	r1, [pc, #576]	; (1e94 <doMenu()+0x5d8>)
    1c52:	ldr	r0, [pc, #520]	; (1e5c <doMenu()+0x5a0>)
    1c54:	movs	r2, #119	; 0x77
    1c56:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d slow window\r\n",           's',snipParameters.win1);
    1c5a:	ldr	r3, [r6, #12]
    1c5c:	ldr	r1, [pc, #568]	; (1e98 <doMenu()+0x5dc>)
    1c5e:	ldr	r0, [pc, #508]	; (1e5c <doMenu()+0x5a0>)
    1c60:	movs	r2, #115	; 0x73
    1c62:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d extraction window\r\n",     'e',snipParameters.extr);
    1c66:	ldr	r3, [r6, #16]
    1c68:	ldr	r1, [pc, #560]	; (1e9c <doMenu()+0x5e0>)
    1c6a:	ldr	r0, [pc, #496]	; (1e5c <doMenu()+0x5a0>)
    1c6c:	movs	r2, #101	; 0x65
    1c6e:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d inhibit window\r\n",        'i',snipParameters.inhib);
    1c72:	ldr	r3, [r6, #20]
    1c74:	ldr	r1, [pc, #552]	; (1ea0 <doMenu()+0x5e4>)
    1c76:	ldr	r0, [pc, #484]	; (1e5c <doMenu()+0x5a0>)
    1c78:	movs	r2, #105	; 0x69
    1c7a:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d noise repetition rate\r\n", 'k',snipParameters.nrep);
    1c7e:	ldr	r3, [r6, #24]
    1c80:	ldr	r1, [pc, #544]	; (1ea4 <doMenu()+0x5e8>)
    1c82:	ldr	r0, [pc, #472]	; (1e5c <doMenu()+0x5a0>)
    1c84:	movs	r2, #107	; 0x6b
    1c86:	bl	a324 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d pre trigger delay\r\n",     'p',snipParameters.ndel);
    1c8a:	ldr	r3, [r6, #28]
    1c8c:	ldr	r1, [pc, #536]	; (1ea8 <doMenu()+0x5ec>)
    1c8e:	ldr	r0, [pc, #460]	; (1e5c <doMenu()+0x5a0>)
    1c90:	movs	r2, #112	; 0x70
    1c92:	bl	a324 <Print::printf(char const*, ...)>
  //
  Serial.println();
    1c96:	ldr	r0, [pc, #452]	; (1e5c <doMenu()+0x5a0>)
    1c98:	bl	a2f4 <Print::println()>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1c9c:	movs	r1, #23
    1c9e:	ldr	r0, [pc, #524]	; (1eac <doMenu()+0x5f0>)
    1ca0:	bl	89fc <usb_serial_write>
    1ca4:	ldr	r0, [pc, #436]	; (1e5c <doMenu()+0x5a0>)
    1ca6:	bl	a2f4 <Print::println()>
    1caa:	movs	r1, #64	; 0x40
    1cac:	ldr	r0, [pc, #512]	; (1eb0 <doMenu()+0x5f4>)
    1cae:	bl	89fc <usb_serial_write>
    1cb2:	ldr	r0, [pc, #424]	; (1e5c <doMenu()+0x5a0>)
    1cb4:	bl	a2f4 <Print::println()>
    1cb8:	movs	r1, #32
    1cba:	ldr	r0, [pc, #504]	; (1eb4 <doMenu()+0x5f8>)
    1cbc:	bl	89fc <usb_serial_write>
    1cc0:	ldr	r0, [pc, #408]	; (1e5c <doMenu()+0x5a0>)
    1cc2:	bl	a2f4 <Print::println()>
    1cc6:	movs	r1, #88	; 0x58
    1cc8:	ldr	r0, [pc, #492]	; (1eb8 <doMenu()+0x5fc>)
    1cca:	bl	89fc <usb_serial_write>
    1cce:	ldr	r0, [pc, #396]	; (1e5c <doMenu()+0x5a0>)
    1cd0:	bl	a2f4 <Print::println()>
    1cd4:	movs	r1, #38	; 0x26
    1cd6:	ldr	r0, [pc, #484]	; (1ebc <doMenu()+0x600>)
    1cd8:	bl	89fc <usb_serial_write>
    1cdc:	ldr	r0, [pc, #380]	; (1e5c <doMenu()+0x5a0>)
    1cde:	bl	a2f4 <Print::println()>
    1ce2:	movs	r1, #69	; 0x45
    1ce4:	ldr	r0, [pc, #472]	; (1ec0 <doMenu()+0x604>)
    1ce6:	bl	89fc <usb_serial_write>
    1cea:	ldr	r0, [pc, #368]	; (1e5c <doMenu()+0x5a0>)
    1cec:	bl	a2f4 <Print::println()>
    1cf0:	movs	r1, #50	; 0x32
    1cf2:	ldr	r0, [pc, #464]	; (1ec4 <doMenu()+0x608>)
    1cf4:	bl	89fc <usb_serial_write>
    1cf8:	ldr	r0, [pc, #352]	; (1e5c <doMenu()+0x5a0>)
    1cfa:	bl	a2f4 <Print::println()>
    1cfe:	movs	r1, #43	; 0x2b
    1d00:	ldr	r0, [pc, #452]	; (1ec8 <doMenu()+0x60c>)
    1d02:	bl	89fc <usb_serial_write>
    1d06:	ldr	r0, [pc, #340]	; (1e5c <doMenu()+0x5a0>)
    1d08:	bl	a2f4 <Print::println()>
  Serial.println("exter '!cval' to read value c=(0,a,r,1,2,3,4,n,d,t,c,h,w,s,m,i,k,p) and val is new value");
  Serial.println("  e.g.: !110 will set first hour to 10");
  Serial.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  Serial.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  Serial.println("        x-1 with exit and start immediately");
  Serial.println();
    1d0c:	ldr	r0, [pc, #332]	; (1e5c <doMenu()+0x5a0>)
    1d0e:	bl	a2f4 <Print::println()>
    1d12:	b.n	18c4 <doMenu()+0x8>
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1d14:	ldr	r0, [pc, #324]	; (1e5c <doMenu()+0x5a0>)
    1d16:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1d1a:	cmp	r0, #0
    1d1c:	blt.w	2162 <doMenu()+0x8a6>
    if(val>maxVal) val=maxVal;
    1d20:	cmp.w	r0, #131072	; 0x20000
    1d24:	it	ge
    1d26:	movge.w	r0, #131072	; 0x20000
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1d2a:	ldr	r3, [pc, #308]	; (1e60 <doMenu()+0x5a4>)
    1d2c:	str	r0, [r3, #8]
    1d2e:	b.n	18c4 <doMenu()+0x8>
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
    1d30:	ldr	r2, [r5, #12]
    1d32:	ldr	r1, [pc, #408]	; (1ecc <doMenu()+0x610>)
    1d34:	ldr	r0, [pc, #292]	; (1e5c <doMenu()+0x5a0>)
    1d36:	bl	a324 <Print::printf(char const*, ...)>
    1d3a:	b.n	18c4 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
    1d3c:	ldr	r2, [r5, #16]
    1d3e:	ldr	r1, [pc, #396]	; (1ecc <doMenu()+0x610>)
    1d40:	ldr	r0, [pc, #280]	; (1e5c <doMenu()+0x5a0>)
    1d42:	bl	a324 <Print::printf(char const*, ...)>
    1d46:	b.n	18c4 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
    1d48:	ldr	r2, [r5, #20]
    1d4a:	ldr	r1, [pc, #384]	; (1ecc <doMenu()+0x610>)
    1d4c:	ldr	r0, [pc, #268]	; (1e5c <doMenu()+0x5a0>)
    1d4e:	bl	a324 <Print::printf(char const*, ...)>
    1d52:	b.n	18c4 <doMenu()+0x8>
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
    1d54:	ldr	r2, [r5, #24]
    1d56:	ldr	r1, [pc, #372]	; (1ecc <doMenu()+0x610>)
    1d58:	ldr	r0, [pc, #256]	; (1e5c <doMenu()+0x5a0>)
    1d5a:	bl	a324 <Print::printf(char const*, ...)>
    1d5e:	b.n	18c4 <doMenu()+0x8>
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
    1d60:	ldr	r2, [r5, #4]
    1d62:	ldr	r1, [pc, #360]	; (1ecc <doMenu()+0x610>)
    1d64:	ldr	r0, [pc, #244]	; (1e5c <doMenu()+0x5a0>)
    1d66:	bl	a324 <Print::printf(char const*, ...)>
    1d6a:	b.n	18c4 <doMenu()+0x8>
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
    1d6c:	ldr	r3, [pc, #240]	; (1e60 <doMenu()+0x5a4>)
    1d6e:	ldr	r1, [pc, #352]	; (1ed0 <doMenu()+0x614>)
    1d70:	ldr	r2, [r3, #0]
    1d72:	ldr	r0, [pc, #232]	; (1e5c <doMenu()+0x5a0>)
    1d74:	bl	a324 <Print::printf(char const*, ...)>
    1d78:	b.n	18c4 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
    1d7a:	bl	81c <getDate(char*) [clone .constprop.45]>
    1d7e:	ldr	r1, [pc, #340]	; (1ed4 <doMenu()+0x618>)
    1d80:	mov	r2, r0
    1d82:	ldr	r0, [pc, #216]	; (1e5c <doMenu()+0x5a0>)
    1d84:	bl	a324 <Print::printf(char const*, ...)>
    1d88:	b.n	18c4 <doMenu()+0x8>
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
    1d8a:	ldr	r3, [pc, #212]	; (1e60 <doMenu()+0x5a4>)
    1d8c:	ldr	r1, [pc, #320]	; (1ed0 <doMenu()+0x614>)
    1d8e:	ldr	r2, [r3, #16]
    1d90:	ldr	r0, [pc, #200]	; (1e5c <doMenu()+0x5a0>)
    1d92:	bl	a324 <Print::printf(char const*, ...)>
    1d96:	b.n	18c4 <doMenu()+0x8>
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
    1d98:	ldr	r3, [pc, #196]	; (1e60 <doMenu()+0x5a4>)
    1d9a:	ldr	r1, [pc, #308]	; (1ed0 <doMenu()+0x614>)
    1d9c:	ldr	r2, [r3, #4]
    1d9e:	ldr	r0, [pc, #188]	; (1e5c <doMenu()+0x5a0>)
    1da0:	bl	a324 <Print::printf(char const*, ...)>
    1da4:	b.n	18c4 <doMenu()+0x8>
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
        case 'i': Serial.printf("%04d\r\n",snipParameters.inhib);break;
    1da6:	ldr	r3, [pc, #184]	; (1e60 <doMenu()+0x5a4>)
    1da8:	ldr	r1, [pc, #292]	; (1ed0 <doMenu()+0x614>)
    1daa:	ldr	r2, [r3, #20]
    1dac:	ldr	r0, [pc, #172]	; (1e5c <doMenu()+0x5a0>)
    1dae:	bl	a324 <Print::printf(char const*, ...)>
    1db2:	b.n	18c4 <doMenu()+0x8>
        case 'k': Serial.printf("%04d\r\n",snipParameters.nrep);break;
    1db4:	ldr	r3, [pc, #168]	; (1e60 <doMenu()+0x5a4>)
    1db6:	ldr	r1, [pc, #280]	; (1ed0 <doMenu()+0x614>)
    1db8:	ldr	r2, [r3, #24]
    1dba:	ldr	r0, [pc, #160]	; (1e5c <doMenu()+0x5a0>)
    1dbc:	bl	a324 <Print::printf(char const*, ...)>
    1dc0:	b.n	18c4 <doMenu()+0x8>
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
    1dc2:	ldr	r2, [pc, #184]	; (1e7c <doMenu()+0x5c0>)
    1dc4:	ldr	r1, [pc, #268]	; (1ed4 <doMenu()+0x618>)
    1dc6:	ldr	r0, [pc, #148]	; (1e5c <doMenu()+0x5a0>)
    1dc8:	bl	a324 <Print::printf(char const*, ...)>
    1dcc:	b.n	18c4 <doMenu()+0x8>
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
    1dce:	ldr	r2, [r5, #0]
    1dd0:	ldr	r1, [pc, #248]	; (1ecc <doMenu()+0x610>)
    1dd2:	ldr	r0, [pc, #136]	; (1e5c <doMenu()+0x5a0>)
    1dd4:	bl	a324 <Print::printf(char const*, ...)>
    1dd8:	b.n	18c4 <doMenu()+0x8>
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
        case 'i': Serial.printf("%04d\r\n",snipParameters.inhib);break;
        case 'k': Serial.printf("%04d\r\n",snipParameters.nrep);break;
        case 'p': Serial.printf("%04d\r\n",snipParameters.ndel);break;
    1dda:	ldr	r3, [pc, #132]	; (1e60 <doMenu()+0x5a4>)
    1ddc:	ldr	r1, [pc, #240]	; (1ed0 <doMenu()+0x614>)
    1dde:	ldr	r2, [r3, #28]
    1de0:	ldr	r0, [pc, #120]	; (1e5c <doMenu()+0x5a0>)
    1de2:	bl	a324 <Print::printf(char const*, ...)>
    1de6:	b.n	18c4 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
    1de8:	ldr	r2, [r5, #8]
    1dea:	ldr	r1, [pc, #224]	; (1ecc <doMenu()+0x610>)
    1dec:	ldr	r0, [pc, #108]	; (1e5c <doMenu()+0x5a0>)
    1dee:	bl	a324 <Print::printf(char const*, ...)>
    1df2:	b.n	18c4 <doMenu()+0x8>
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
    1df4:	ldr	r3, [pc, #104]	; (1e60 <doMenu()+0x5a4>)
    1df6:	ldr	r1, [pc, #216]	; (1ed0 <doMenu()+0x614>)
    1df8:	ldr	r2, [r3, #12]
    1dfa:	ldr	r0, [pc, #96]	; (1e5c <doMenu()+0x5a0>)
    1dfc:	bl	a324 <Print::printf(char const*, ...)>
    1e00:	b.n	18c4 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
    1e02:	bl	7e8 <getTime(char*) [clone .constprop.44]>
    1e06:	ldr	r1, [pc, #204]	; (1ed4 <doMenu()+0x618>)
    1e08:	mov	r2, r0
    1e0a:	ldr	r0, [pc, #80]	; (1e5c <doMenu()+0x5a0>)
    1e0c:	bl	a324 <Print::printf(char const*, ...)>
    1e10:	b.n	18c4 <doMenu()+0x8>
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
    1e12:	ldr	r3, [pc, #76]	; (1e60 <doMenu()+0x5a4>)
    1e14:	ldr	r1, [pc, #184]	; (1ed0 <doMenu()+0x614>)
    1e16:	ldr	r2, [r3, #8]
    1e18:	ldr	r0, [pc, #64]	; (1e5c <doMenu()+0x5a0>)
    1e1a:	bl	a324 <Print::printf(char const*, ...)>
    1e1e:	b.n	18c4 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    1e20:	ldr	r0, [pc, #56]	; (1e5c <doMenu()+0x5a0>)
    1e22:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1e26:	cmp	r0, #0
    1e28:	blt.w	215e <doMenu()+0x8a2>
    1e2c:	cmp	r0, #24
    1e2e:	mov	r3, r0
    1e30:	it	ge
    1e32:	movge	r3, #24
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    1e34:	str	r3, [r5, #12]
    1e36:	b.n	18c4 <doMenu()+0x8>
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    1e38:	ldr	r0, [pc, #32]	; (1e5c <doMenu()+0x5a0>)
    1e3a:	bl	a7ec <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    1e3e:	cmp	r6, #23
    1e40:	bgt.w	20f8 <doMenu()+0x83c>
  {
    if(val<minVal) val=minVal;
    1e44:	cmp	r6, r0
    1e46:	bgt.n	1e54 <doMenu()+0x598>
    if(val>maxVal) val=maxVal;
    1e48:	cmp	r0, #24
    1e4a:	it	gt
    1e4c:	movgt	r0, #24
    1e4e:	bgt.w	20fe <doMenu()+0x842>
    1e52:	mov	r6, r0
    1e54:	mov	r0, r6
    1e56:	b.n	20fe <doMenu()+0x842>
    1e58:	.word	0x000135d0
    1e5c:	.word	0x20017924
    1e60:	.word	0x20017734
    1e64:	.word	0x000135e4
    1e68:	.word	0x000135f8
    1e6c:	.word	0x0001360c
    1e70:	.word	0x00013620
    1e74:	.word	0x00013638
    1e78:	.word	0x0001364c
    1e7c:	.word	0x20017784
    1e80:	.word	0x00013660
    1e84:	.word	0x00013670
    1e88:	.word	0x00013680
    1e8c:	.word	0x00013690
    1e90:	.word	0x000136ac
    1e94:	.word	0x000136c0
    1e98:	.word	0x000136d8
    1e9c:	.word	0x000136f0
    1ea0:	.word	0x0001370c
    1ea4:	.word	0x00013724
    1ea8:	.word	0x00013744
    1eac:	.word	0x00013760
    1eb0:	.word	0x00013778
    1eb4:	.word	0x000137bc
    1eb8:	.word	0x000137e0
    1ebc:	.word	0x0001383c
    1ec0:	.word	0x00013864
    1ec4:	.word	0x000138ac
    1ec8:	.word	0x000138e0
    1ecc:	.word	0x000135c0
    1ed0:	.word	0x000135c8
    1ed4:	.word	0x00013528
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    1ed8:	ldr	r0, [pc, #684]	; (2188 <doMenu()+0x8cc>)
    1eda:	bl	a7ec <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    1ede:	cmp	r7, #23
    1ee0:	bgt.w	20ee <doMenu()+0x832>
  {
    if(val<minVal) val=minVal;
    1ee4:	cmp	r7, r0
    1ee6:	ble.w	212c <doMenu()+0x870>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    1eea:	str	r7, [r5, #20]
    1eec:	b.n	18c4 <doMenu()+0x8>
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1eee:	ldr	r0, [pc, #664]	; (2188 <doMenu()+0x8cc>)
    1ef0:	bl	a7ec <Stream::parseInt()>
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1ef4:	cmp	r6, r8
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    1ef6:	mov	r4, r8
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1ef8:	ble.w	2104 <doMenu()+0x848>
  {
    if(val<minVal) val=minVal;
    1efc:	cmp	r8, r0
    1efe:	bgt.n	1f08 <doMenu()+0x64c>
    if(val>maxVal) val=maxVal;
    1f00:	cmp	r6, r0
    1f02:	blt.w	2126 <doMenu()+0x86a>
    1f06:	mov	r4, r0
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    1f08:	mov	r6, r4
    1f0a:	b.n	2126 <doMenu()+0x86a>
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1f0c:	ldr	r0, [pc, #632]	; (2188 <doMenu()+0x8cc>)
    1f0e:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1f12:	cmp	r0, #0
    1f14:	blt.w	2140 <doMenu()+0x884>
    1f18:	cmp.w	r0, #131072	; 0x20000
    1f1c:	mov	r3, r0
    1f1e:	it	ge
    1f20:	movge.w	r3, #131072	; 0x20000
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1f24:	str	r3, [r5, #4]
    1f26:	b.n	18c4 <doMenu()+0x8>
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1f28:	ldr	r0, [pc, #604]	; (2188 <doMenu()+0x8cc>)
    1f2a:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1f2e:	cmp	r0, #0
    1f30:	blt.w	2182 <doMenu()+0x8c6>
    if(val>maxVal) val=maxVal;
    1f34:	cmp.w	r0, #131072	; 0x20000
    1f38:	it	ge
    1f3a:	movge.w	r0, #131072	; 0x20000
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1f3e:	ldr	r3, [pc, #588]	; (218c <doMenu()+0x8d0>)
    1f40:	str	r0, [r3, #20]
    1f42:	b.n	18c4 <doMenu()+0x8>
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1f44:	ldr	r0, [pc, #576]	; (2188 <doMenu()+0x8cc>)
    1f46:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1f4a:	cmp	r0, #0
    1f4c:	blt.w	217e <doMenu()+0x8c2>
    if(val>maxVal) val=maxVal;
    1f50:	cmp.w	r0, #131072	; 0x20000
    1f54:	it	ge
    1f56:	movge.w	r0, #131072	; 0x20000
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1f5a:	ldr	r3, [pc, #560]	; (218c <doMenu()+0x8d0>)
    1f5c:	str	r0, [r3, #24]
    1f5e:	b.n	18c4 <doMenu()+0x8>
    1f60:	ldr	r4, [pc, #556]	; (2190 <doMenu()+0x8d4>)
    1f62:	adds	r6, r4, #4
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1f64:	bl	8930 <usb_serial_getchar>
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
    1f68:	strb.w	r0, [r4, #1]!
    1f6c:	cmp	r4, r6
    1f6e:	bne.n	1f64 <doMenu()+0x6a8>
                  acqParameters.name[4]=0; break;
    1f70:	movs	r3, #0
    1f72:	strb.w	r3, [r5, #36]	; 0x24
    1f76:	b.n	18c4 <doMenu()+0x8>
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1f78:	ldr	r0, [pc, #524]	; (2188 <doMenu()+0x8cc>)
    1f7a:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1f7e:	cmp	r0, #0
    1f80:	blt.w	217a <doMenu()+0x8be>
    1f84:	cmp.w	r0, #131072	; 0x20000
    1f88:	mov	r3, r0
    1f8a:	it	ge
    1f8c:	movge.w	r3, #131072	; 0x20000
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1f90:	str	r3, [r5, #0]
    1f92:	b.n	18c4 <doMenu()+0x8>
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'p': snipParameters.ndel   = boundaryCheck(Serial.parseInt(),0,MDEL); break;
    1f94:	ldr	r0, [pc, #496]	; (2188 <doMenu()+0x8cc>)
    1f96:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1f9a:	cmp	r0, #0
    1f9c:	blt.w	2176 <doMenu()+0x8ba>
    if(val>maxVal) val=maxVal;
    1fa0:	cmp	r0, #10
    1fa2:	it	ge
    1fa4:	movge	r0, #10
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'p': snipParameters.ndel   = boundaryCheck(Serial.parseInt(),0,MDEL); break;
    1fa6:	ldr	r3, [pc, #484]	; (218c <doMenu()+0x8d0>)
    1fa8:	str	r0, [r3, #28]
    1faa:	b.n	18c4 <doMenu()+0x8>
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1fac:	ldr	r0, [pc, #472]	; (2188 <doMenu()+0x8cc>)
    1fae:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1fb2:	cmp	r0, #0
    1fb4:	blt.w	2172 <doMenu()+0x8b6>
    1fb8:	cmp.w	r0, #131072	; 0x20000
    1fbc:	mov	r3, r0
    1fbe:	it	ge
    1fc0:	movge.w	r3, #131072	; 0x20000
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1fc4:	str	r3, [r5, #8]
    1fc6:	b.n	18c4 <doMenu()+0x8>
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1fc8:	ldr	r0, [pc, #444]	; (2188 <doMenu()+0x8cc>)
    1fca:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1fce:	cmp	r0, #0
    1fd0:	blt.w	216e <doMenu()+0x8b2>
    if(val>maxVal) val=maxVal;
    1fd4:	cmp.w	r0, #131072	; 0x20000
    1fd8:	it	ge
    1fda:	movge.w	r0, #131072	; 0x20000
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1fde:	ldr	r3, [pc, #428]	; (218c <doMenu()+0x8d0>)
    1fe0:	str	r0, [r3, #12]
    1fe2:	b.n	18c4 <doMenu()+0x8>
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
    1fe4:	ldr	r0, [pc, #416]	; (2188 <doMenu()+0x8cc>)
    1fe6:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1fea:	subs	r4, r0, #0
    1fec:	blt.w	216a <doMenu()+0x8ae>
    if(val>maxVal) val=maxVal;
    1ff0:	cmp	r4, #23
    1ff2:	it	ge
    1ff4:	movge	r4, #23
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
    1ff6:	ldr	r0, [pc, #400]	; (2188 <doMenu()+0x8cc>)
    1ff8:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1ffc:	subs	r6, r0, #0
    1ffe:	blt.w	2166 <doMenu()+0x8aa>
    if(val>maxVal) val=maxVal;
    2002:	cmp	r6, #59	; 0x3b
    2004:	it	ge
    2006:	movge	r6, #59	; 0x3b
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
    2008:	ldr	r0, [pc, #380]	; (2188 <doMenu()+0x8cc>)
    200a:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    200e:	subs	r7, r0, #0
    2010:	blt.w	2152 <doMenu()+0x896>
    if(val>maxVal) val=maxVal;
    2014:	cmp	r7, #59	; 0x3b
    2016:	it	ge
    2018:	movge	r7, #59	; 0x3b
    setRTCTime(hour(),minute(),second(),day, month, year);
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    setRTCTime(hour,minutes,seconds,day(),month(),year());
    201a:	bl	3400 <day()>
    201e:	mov	r8, r0
    2020:	bl	3420 <month()>
    2024:	mov	r9, r0
    2026:	bl	3440 <year()>
    202a:	str.w	r9, [sp]
    202e:	str	r0, [sp, #4]
    2030:	mov	r3, r8
    2032:	mov	r2, r7
    2034:	mov	r1, r6
    2036:	mov	r0, r4
    2038:	bl	1878 <setRTCTime(int, int, int, int, int, int)>
    203c:	b.n	18c4 <doMenu()+0x8>
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
    203e:	ldr	r0, [pc, #328]	; (2188 <doMenu()+0x8cc>)
    2040:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    2044:	cmp	r0, #0
    2046:	blt.w	214e <doMenu()+0x892>
    if(val>maxVal) val=maxVal;
    204a:	cmp	r0, #1
    204c:	it	ge
    204e:	movge	r0, #1
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
    2050:	ldr	r3, [pc, #312]	; (218c <doMenu()+0x8d0>)
    2052:	str	r0, [r3, #0]
    2054:	b.n	18c4 <doMenu()+0x8>
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    2056:	ldr	r0, [pc, #304]	; (2188 <doMenu()+0x8cc>)
    2058:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    205c:	cmp.w	r0, #2000	; 0x7d0
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    2060:	mov	r4, r0
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    2062:	blt.n	20e8 <doMenu()+0x82c>
    if(val>maxVal) val=maxVal;
    2064:	movw	r3, #3000	; 0xbb8
    2068:	cmp	r0, r3
    206a:	it	ge
    206c:	movge	r4, r3
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
    206e:	ldr	r0, [pc, #280]	; (2188 <doMenu()+0x8cc>)
    2070:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    2074:	subs	r7, r0, #0
    2076:	ble.n	215a <doMenu()+0x89e>
    if(val>maxVal) val=maxVal;
    2078:	cmp	r7, #12
    207a:	it	ge
    207c:	movge	r7, #12
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
    207e:	ldr	r0, [pc, #264]	; (2188 <doMenu()+0x8cc>)
    2080:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    2084:	subs	r6, r0, #0
    2086:	ble.n	2156 <doMenu()+0x89a>
    if(val>maxVal) val=maxVal;
    2088:	cmp	r6, #31
    208a:	it	ge
    208c:	movge	r6, #31
  setTime(tt); // local
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    setRTCTime(hour(),minute(),second(),day, month, year);
    208e:	bl	33a0 <hour()>
    2092:	mov	r8, r0
    2094:	bl	33c0 <minute()>
    2098:	mov	r9, r0
    209a:	bl	33e0 <second()>
    209e:	mov	r1, r9
    20a0:	mov	r2, r0
    20a2:	str	r4, [sp, #4]
    20a4:	mov	r0, r8
    20a6:	str	r7, [sp, #0]
    20a8:	mov	r3, r6
    20aa:	bl	1878 <setRTCTime(int, int, int, int, int, int)>
    20ae:	b.n	18c4 <doMenu()+0x8>
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    20b0:	ldr	r0, [pc, #212]	; (2188 <doMenu()+0x8cc>)
    20b2:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    20b6:	cmp	r0, #0
    20b8:	blt.n	214a <doMenu()+0x88e>
    if(val>maxVal) val=maxVal;
    20ba:	cmp.w	r0, #131072	; 0x20000
    20be:	it	ge
    20c0:	movge.w	r0, #131072	; 0x20000
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    20c4:	ldr	r3, [pc, #196]	; (218c <doMenu()+0x8d0>)
    20c6:	str	r0, [r3, #16]
    20c8:	b.w	18c4 <doMenu()+0x8>
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
    20cc:	ldr	r0, [pc, #184]	; (2188 <doMenu()+0x8cc>)
    20ce:	bl	a7ec <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    20d2:	adds	r3, r0, #1
    20d4:	blt.n	2144 <doMenu()+0x888>
    if(val>maxVal) val=maxVal;
    20d6:	cmp.w	r0, #131072	; 0x20000
    20da:	it	ge
    20dc:	movge.w	r0, #131072	; 0x20000
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
    20e0:	ldr	r3, [pc, #168]	; (218c <doMenu()+0x8d0>)
    20e2:	str	r0, [r3, #4]
    20e4:	b.w	18c4 <doMenu()+0x8>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    20e8:	mov.w	r4, #2000	; 0x7d0
    20ec:	b.n	206e <doMenu()+0x7b2>
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if((val>maxVal) && (val<minVal)) val=maxVal;
    20ee:	cmp	r0, #24
    20f0:	it	ge
    20f2:	movge	r0, #24
    20f4:	mov	r7, r0
    20f6:	b.n	1eea <doMenu()+0x62e>
    20f8:	cmp	r0, #24
    20fa:	it	ge
    20fc:	movge	r0, #24
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    20fe:	str	r0, [r5, #16]
    2100:	b.w	18c4 <doMenu()+0x8>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    2104:	cmp	r0, #0
    2106:	blt.n	2138 <doMenu()+0x87c>
    if(val>modVal) val=modVal;
    2108:	cmp	r0, #24
    210a:	it	ge
    210c:	movge	r0, #24
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    210e:	cmp	r6, r0
    2110:	bge.n	213c <doMenu()+0x880>
    2112:	cmp	r8, r0
    2114:	ble.n	213c <doMenu()+0x880>
    { if(val>(minVal+maxVal)/2) val = minVal; else val=maxVal;
    2116:	add.w	r3, r6, r8
    211a:	add.w	r3, r3, r3, lsr #31
    211e:	cmp.w	r0, r3, asr #1
    2122:	it	gt
    2124:	movgt	r6, r8
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    2126:	str	r6, [r5, #24]
    2128:	b.w	18c4 <doMenu()+0x8>
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
    212c:	cmp	r0, #24
    212e:	it	gt
    2130:	movgt	r7, #24
    2132:	bgt.w	1eea <doMenu()+0x62e>
    2136:	b.n	20f4 <doMenu()+0x838>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    2138:	movs	r0, #0
    213a:	b.n	210e <doMenu()+0x852>
    if(val>modVal) val=modVal;
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    213c:	mov	r6, r0
    213e:	b.n	2126 <doMenu()+0x86a>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    2140:	movs	r3, #0
    2142:	b.n	1f24 <doMenu()+0x668>
    2144:	mov.w	r0, #4294967295
    2148:	b.n	20e0 <doMenu()+0x824>
    214a:	movs	r0, #0
    214c:	b.n	20c4 <doMenu()+0x808>
    214e:	movs	r0, #0
    2150:	b.n	2050 <doMenu()+0x794>
    2152:	movs	r7, #0
    2154:	b.n	201a <doMenu()+0x75e>
    2156:	movs	r6, #1
    2158:	b.n	208e <doMenu()+0x7d2>
    215a:	movs	r7, #1
    215c:	b.n	207e <doMenu()+0x7c2>
    215e:	movs	r3, #0
    2160:	b.n	1e34 <doMenu()+0x578>
    2162:	movs	r0, #0
    2164:	b.n	1d2a <doMenu()+0x46e>
    2166:	movs	r6, #0
    2168:	b.n	2008 <doMenu()+0x74c>
    216a:	movs	r4, #0
    216c:	b.n	1ff6 <doMenu()+0x73a>
    216e:	movs	r0, #0
    2170:	b.n	1fde <doMenu()+0x722>
    2172:	movs	r3, #0
    2174:	b.n	1fc4 <doMenu()+0x708>
    2176:	movs	r0, #0
    2178:	b.n	1fa6 <doMenu()+0x6ea>
    217a:	movs	r3, #0
    217c:	b.n	1f90 <doMenu()+0x6d4>
    217e:	movs	r0, #0
    2180:	b.n	1f5a <doMenu()+0x69e>
    2182:	movs	r0, #0
    2184:	b.n	1f3e <doMenu()+0x682>
    2186:	nop
    2188:	.word	0x20017924
    218c:	.word	0x20017734
    2190:	.word	0x20017783

00002194 <setup>:
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
int started=0;
extern "C" void setup() {
    2194:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // put your setup code here, to run once:
  int32_t nsec;
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    2198:	movs	r0, #3
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
int started=0;
extern "C" void setup() {
    219a:	sub	sp, #12
  // put your setup code here, to run once:
  int32_t nsec;
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    219c:	movs	r1, #2
    219e:	bl	8ea0 <pinMode>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);
    21a2:	ldr	r0, [pc, #412]	; (2340 <setup+0x1ac>)
    21a4:	ldr	r4, [pc, #412]	; (2344 <setup+0x1b0>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    21a6:	ldr	r5, [pc, #416]	; (2348 <setup+0x1b4>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    21a8:	ldr	r7, [pc, #416]	; (234c <setup+0x1b8>)
    21aa:	ldr	r6, [pc, #420]	; (2350 <setup+0x1bc>)
    21ac:	bl	34a8 <setSyncProvider(long (*)())>
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    21b0:	ldrb	r3, [r4, #0]

#if DO_DEBUG>0

   while(!Serial && !digitalRead(3));
    21b2:	movs	r0, #3
    21b4:	cmp	r3, #0
    21b6:	beq.w	2334 <setup+0x1a0>
    21ba:	ldrb	r3, [r5, #0]
    21bc:	lsls	r2, r3, #31
    21be:	bpl.w	2334 <setup+0x1a0>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    21c2:	ldr	r3, [r7, #0]
    21c4:	ldr	r2, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    21c6:	subs	r3, r3, r2
    21c8:	cmp	r3, #14
    21ca:	bls.w	2334 <setup+0x1a0>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    21ce:	movs	r1, #18
    21d0:	ldr	r0, [pc, #384]	; (2354 <setup+0x1c0>)

  //
  uSD.init();

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    21d2:	ldr	r5, [pc, #388]	; (2358 <setup+0x1c4>)
    21d4:	bl	89fc <usb_serial_write>
    21d8:	ldr	r0, [pc, #384]	; (235c <setup+0x1c8>)
    21da:	bl	a2f4 <Print::println()>
  // for 16bit resolution
  temperature = -0.0293 * analogRead(70) + 440.5;
*/

#define MAUDIO (MAX_Q+MDEL+50)
	AudioMemory (MAUDIO); // 600 blocks use about 200 kB (requires Teensy 3.6)
    21de:	movw	r1, #610	; 0x262
    21e2:	ldr	r0, [pc, #380]	; (2360 <setup+0x1cc>)
    21e4:	bl	a3dc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
}

void I2S_stop(void)
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    21e8:	ldr	r2, [pc, #376]	; (2364 <setup+0x1d0>)
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    21ea:	ldr	r0, [pc, #380]	; (2368 <setup+0x1d4>)
    21ec:	ldr	r3, [r2, #0]
    21ee:	bic.w	r3, r3, #2415919104	; 0x90000000
    21f2:	str	r3, [r2, #0]

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    21f4:	movs	r4, #8
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    21f6:	bl	11b0 <c_uSD::init()>

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    21fa:	mov	r3, r5
    21fc:	str	r4, [sp, #0]
    21fe:	mov	r2, r4
    2200:	ldr	r1, [pc, #360]	; (236c <setup+0x1d8>)
    2202:	ldr	r0, [pc, #356]	; (2368 <setup+0x1d4>)
    2204:	bl	1468 <c_uSD::loadConfig(unsigned long*, int, long*, int)>
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
    2208:	ldr	r3, [pc, #356]	; (2370 <setup+0x1dc>)
    220a:	ldr	r3, [r3, #0]
    220c:	lsls	r3, r3, #19
    220e:	bmi.n	2222 <setup+0x8e>
#endif

  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    2210:	bl	18bc <doMenu()>
    if(ret<0) ;  // should shutdown now (not implemented) // keep compiler happy
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    2214:	str	r4, [sp, #0]
    2216:	mov	r2, r4
    2218:	mov	r3, r5
    221a:	ldr	r1, [pc, #336]	; (236c <setup+0x1d8>)
    221c:	ldr	r0, [pc, #328]	; (2368 <setup+0x1d4>)
    221e:	bl	1340 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
  }
  //
  // check if it is our time to record
  nsec=checkDutyCycle(&acqParameters, -1);
    2222:	mov.w	r1, #4294967295
    2226:	ldr	r0, [pc, #324]	; (236c <setup+0x1d8>)
    2228:	bl	1714 <checkDutyCycle(ACQ_Parameters_s*, short)>
  if(nsec>0) 
    222c:	cmp	r0, #0
    222e:	ble.n	223e <setup+0xaa>
    iscl[2] = (int) (i3-1);
}

void I2S_stopClock(void)
{
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
    2230:	ldr	r2, [pc, #320]	; (2374 <setup+0x1e0>)
    2232:	ldr	r3, [r2, #0]
    2234:	bic.w	r3, r3, #32768	; 0x8000
    2238:	str	r3, [r2, #0]
  { 
    #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
      I2S_stopClock();
    #endif
    setWakeupCallandSleep(nsec); // will not return if we should not continue with acquisition 
    223a:	bl	157c <setWakeupCallandSleep(unsigned long)>
  
  #elif (ACQ == _I2S_QUAD)
    I2S_modification(F_SAMP,16,4); // I2S_Quad not modified for 32 bit (therefore 16 bit)
  
  #elif((ACQ == _I2S_32) || (ACQ == _I2S_32_MONO))
    I2S_modification(F_SAMP,32,2);
    223e:	movw	r0, #48000	; 0xbb80
    2242:	movs	r2, #2
    2244:	movs	r1, #32
    2246:	bl	fd0 <I2S_modification(unsigned long, unsigned short, int)>
    int16_t nbits=NSHIFT; 
    acq.digitalShift(nbits); 
  #endif

  //are we using the eventTrigger?
  if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    224a:	ldr	r4, [r5, #4]
public:

	I2S_32(void) : AudioStream(0, NULL) {begin();}
  void begin(void);
  virtual void update(void);
  void digitalShift(int16_t val){I2S_32::shift=val;}
    224c:	ldr	r3, [pc, #296]	; (2378 <setup+0x1e4>)
    224e:	ldr	r1, [pc, #300]	; (237c <setup+0x1e8>)
    2250:	ldr	r6, [pc, #300]	; (2380 <setup+0x1ec>)
    2252:	movs	r2, #12
    2254:	cmp	r4, #0
    2256:	strh	r2, [r3, #0]
{
public:

  mDelay(int del) : AudioStream(nch, inputQueueArray), head(mq), numDelay(del){ reset(); }
  void reset(void);
  void setDelay(int16_t ndel) {numDelay=ndel;}
    2258:	ldr	r3, [pc, #296]	; (2384 <setup+0x1f0>)
    225a:	ittee	ge
    225c:	movge	r0, #0
    225e:	movge	r2, #10
    2260:	movwlt	r0, #65535	; 0xffff
    2264:	movlt	r2, #0
    2266:	strh	r0, [r1, #0]
    2268:	strh.w	r2, [r3, #130]	; 0x82
  state=0;
}

void c_uSD::setPrefix(char *prefix)
{
  strcpy(name,prefix);
    226c:	ldr	r1, [pc, #280]	; (2388 <setup+0x1f4>)
    226e:	ldr	r0, [pc, #284]	; (238c <setup+0x1f8>)
    2270:	bl	cdcc <strcpy>
  audio_block_t *out1, *out2;
};
 
void mProcess::begin(SNIP_Parameters_s *param)
{
  sigCount=-1;
    2274:	ldr	r3, [pc, #280]	; (2390 <setup+0x1fc>)
  noiseCount=0;
  
  blockCount=0;
  
  thresh=param->thresh;
  win0=param->win0;
    2276:	ldr	r1, [r5, #8]
  win1=param->win1;
    2278:	ldr	r0, [r5, #12]
  detCount=0;
  noiseCount=0;
  
  blockCount=0;
  
  thresh=param->thresh;
    227a:	str	r4, [r3, #68]	; 0x44
};
 
void mProcess::begin(SNIP_Parameters_s *param)
{
  sigCount=-1;
  detCount=0;
    227c:	movs	r2, #0
  audio_block_t *out1, *out2;
};
 
void mProcess::begin(SNIP_Parameters_s *param)
{
  sigCount=-1;
    227e:	mov.w	r4, #4294967295
  detCount=0;
    2282:	str	r2, [r3, #36]	; 0x24
  // lets start
  #if MDEL>=0
    process1.begin(&snipParameters); 
  #endif

  for(int ii=0; ii<NCH; ii++) queue[ii].begin();
    2284:	mov	r8, r2
{
	uint16_t t;

	if (userblock) {
		release(userblock);
		userblock = NULL;
    2286:	mov	fp, r2
  noiseCount=0;
    2288:	str	r2, [r3, #40]	; 0x28
  
  blockCount=0;
    228a:	str	r2, [r3, #60]	; 0x3c
  nrep=param->nrep;

  nest1=1<<10;
  nest2=1<<10;
  
  out1=NULL;
    228c:	str	r2, [r3, #100]	; 0x64
  out2=NULL;
    228e:	str	r2, [r3, #104]	; 0x68

  watchdog=0;
    2290:	str	r2, [r3, #64]	; 0x40
  audio_block_t *out1, *out2;
};
 
void mProcess::begin(SNIP_Parameters_s *param)
{
  sigCount=-1;
    2292:	str	r4, [r3, #32]
  blockCount=0;
  
  thresh=param->thresh;
  win0=param->win0;
  win1=param->win1;
  extr=param->extr;
    2294:	ldr	r2, [r5, #16]
  noiseCount=0;
  
  blockCount=0;
  
  thresh=param->thresh;
  win0=param->win0;
    2296:	str	r1, [r3, #72]	; 0x48
  win1=param->win1;
  extr=param->extr;
  inhib=param->inhib;
  nrep=param->nrep;
    2298:	ldr	r4, [r5, #24]
  
  thresh=param->thresh;
  win0=param->win0;
  win1=param->win1;
  extr=param->extr;
  inhib=param->inhib;
    229a:	ldr	r1, [r5, #20]
  
  blockCount=0;
  
  thresh=param->thresh;
  win0=param->win0;
  win1=param->win1;
    229c:	str	r0, [r3, #76]	; 0x4c
  extr=param->extr;
  inhib=param->inhib;
  nrep=param->nrep;

  nest1=1<<10;
    229e:	mov.w	r0, #1024	; 0x400
  blockCount=0;
  
  thresh=param->thresh;
  win0=param->win0;
  win1=param->win1;
  extr=param->extr;
    22a2:	str	r2, [r3, #80]	; 0x50
  inhib=param->inhib;
    22a4:	str	r1, [r3, #84]	; 0x54
  nrep=param->nrep;
    22a6:	str	r4, [r3, #88]	; 0x58

  nest1=1<<10;
    22a8:	str	r0, [r3, #92]	; 0x5c
  nest2=1<<10;
    22aa:	str	r0, [r3, #96]	; 0x60
    22ac:	mov	r9, r6
	}
	t = tail;
    22ae:	mov.w	sl, #1144	; 0x478
template <int mq>
void mRecordQueue<mq>::clear(void)
{
	uint16_t t;

	if (userblock) {
    22b2:	ldr.w	r0, [r9, #1132]	; 0x46c
    22b6:	cbz	r0, 22c0 <setup+0x12c>
		release(userblock);
    22b8:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    22bc:	str.w	fp, [r9, #1132]	; 0x46c
	}
	t = tail;
    22c0:	mla	r5, sl, r8, r6
    22c4:	ldrh.w	r4, [r5, #1138]	; 0x472
	while (t != head) {
    22c8:	ldrh.w	r3, [r5, #1136]	; 0x470

	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
    22cc:	uxth	r4, r4
	while (t != head) {
    22ce:	uxth	r3, r3
    22d0:	cmp	r4, r3
    22d2:	beq.n	2300 <setup+0x16c>
		if (++t >= mq) t = 0;
		release(queue[t]);
    22d4:	mov.w	r7, #286	; 0x11e
    22d8:	mul.w	r7, r7, r8
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
		if (++t >= mq) t = 0;
    22dc:	adds	r4, #1
    22de:	uxth	r4, r4
    22e0:	cmp.w	r4, #274	; 0x112
    22e4:	it	hi
    22e6:	movhi	r4, #0
    22e8:	mov	r3, r4
		release(queue[t]);
    22ea:	add	r3, r7
    22ec:	adds	r3, #8
    22ee:	ldr.w	r0, [r6, r3, lsl #2]
    22f2:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
    22f6:	ldrh.w	r3, [r5, #1136]	; 0x470
    22fa:	uxth	r3, r3
    22fc:	cmp	r3, r4
    22fe:	bne.n	22dc <setup+0x148>
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    2300:	movs	r2, #1
	t = tail;
	while (t != head) {
		if (++t >= mq) t = 0;
		release(queue[t]);
	}
	tail = t;
    2302:	mla	r3, sl, r8, r6
    2306:	add	r8, r2
    2308:	cmp.w	r8, #2
    230c:	strh.w	r4, [r3, #1138]	; 0x472
    2310:	add.w	r9, r9, #1144	; 0x478
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    2314:	strh.w	r2, [r3, #1140]	; 0x474
    2318:	bne.n	22b2 <setup+0x11e>
    231a:	movs	r1, #12
    231c:	ldr	r0, [pc, #116]	; (2394 <setup+0x200>)
    231e:	bl	89fc <usb_serial_write>
    2322:	ldr	r0, [pc, #56]	; (235c <setup+0x1c8>)
    2324:	bl	a2f4 <Print::println()>
  //
  Serial.println("End of Setup");
  started=0;
    2328:	ldr	r3, [pc, #108]	; (2398 <setup+0x204>)
    232a:	movs	r2, #0
    232c:	str	r2, [r3, #0]
}
    232e:	add	sp, #12
    2330:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);

#if DO_DEBUG>0

   while(!Serial && !digitalRead(3));
    2334:	bl	8e84 <digitalRead>
    2338:	cmp	r0, #0
    233a:	beq.w	21b0 <setup+0x1c>
    233e:	b.n	21ce <setup+0x3a>
    2340:	.word	0x000007cd
    2344:	.word	0x2001de48
    2348:	.word	0x2001dd60
    234c:	.word	0x2001dd64
    2350:	.word	0x2001e238
    2354:	.word	0x0001390c
    2358:	.word	0x20017734
    235c:	.word	0x20017924
    2360:	.word	0x1fff0600
    2364:	.word	0x4002f080
    2368:	.word	0x2001839c
    236c:	.word	0x20017764
    2370:	.word	0x400ff010
    2374:	.word	0x4004803c
    2378:	.word	0x2001775e
    237c:	.word	0x20017762
    2380:	.word	0x2001d0d0
    2384:	.word	0x2001ccd4
    2388:	.word	0x20017784
    238c:	.word	0x2001889e
    2390:	.word	0x2001d044
    2394:	.word	0x00013920
    2398:	.word	0x2001d9c8

0000239c <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    239c:	mov	r5, r0
    239e:	ldr.w	r0, [r0, #1156]	; 0x484
    23a2:	push	{r3, lr}
    23a4:	mov	r4, r1
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    23a6:	cbz	r0, 23d8 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    23a8:	ldr	r3, [r0, #0]
    23aa:	ldr	r3, [r3, #36]	; 0x24
    23ac:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    23ae:	cbnz	r0, 23d8 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    23b0:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    23b4:	cbz	r3, 23c0 <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    23b6:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    23b8:	cbz	r3, 23ce <SdBase<FsVolume>::errorHalt(Print*)+0x32>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    23ba:	bl	a1d4 <yield>
    23be:	b.n	23ba <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    23c0:	ldr.w	r3, [r5, #1148]	; 0x47c
    23c4:	cbz	r3, 23ce <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    23c6:	ldrb.w	r3, [r3, #1084]	; 0x43c
    23ca:	cmp	r3, #0
    23cc:	bne.n	23ba <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    23ce:	mov	r0, r4
    23d0:	ldr	r1, [pc, #84]	; (2428 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    23d2:	bl	d2c <Print::println(__FlashStringHelper const*)>
    23d6:	b.n	23ba <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    23d8:	ldr	r1, [pc, #80]	; (242c <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    23da:	mov	r0, r4
    23dc:	bl	d10 <Print::write(char const*)>
    23e0:	ldr.w	r0, [r5, #1156]	; 0x484
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    23e4:	cbz	r0, 2424 <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    23e6:	ldr	r3, [r0, #0]
    23e8:	ldr	r3, [r3, #36]	; 0x24
    23ea:	blx	r3
    23ec:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    23ee:	movs	r3, #0
    23f0:	movs	r2, #16
    23f2:	mov	r0, r4
    23f4:	bl	a340 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    23f8:	ldr	r1, [pc, #52]	; (2430 <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    23fa:	mov	r0, r4
    23fc:	bl	d10 <Print::write(char const*)>
    2400:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    2404:	cbz	r0, 2420 <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    2406:	ldr	r3, [r0, #0]
    2408:	ldr	r3, [r3, #40]	; 0x28
    240a:	blx	r3
    240c:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    240e:	movs	r3, #0
    2410:	movs	r2, #16
    2412:	mov	r0, r4
    2414:	bl	a340 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    2418:	mov	r0, r4
    241a:	bl	a2f4 <Print::println()>
    241e:	b.n	23ba <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    2420:	mov	r1, r0
    2422:	b.n	240e <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    2424:	movs	r1, #41	; 0x29
    2426:	b.n	23ee <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    2428:	.word	0x00013940
    242c:	.word	0x00013930
    2430:	.word	0x0001393c

00002434 <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    2434:	ldr	r4, [pc, #28]	; (2454 <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    2436:	push	{r3, lr}
    2438:	mov	r5, r0
    243a:	mov	r6, r1
    243c:	mov	r0, r4
    243e:	ldr	r1, [pc, #24]	; (2458 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    2440:	bl	d10 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    2444:	mov	r1, r6
    2446:	mov	r0, r4
    2448:	bl	d2c <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    244c:	mov	r1, r4
    244e:	mov	r0, r5
    2450:	bl	239c <SdBase<FsVolume>::errorHalt(Print*)>
    2454:	.word	0x20017924
    2458:	.word	0x00013954

0000245c <c_uSD::write(short*, long)>:
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    245c:	push	{r4, r5, r6, lr}
    245e:	mov	r4, r0
  if(state == 0)
    2460:	ldrsh.w	r0, [r0, #1276]	; 0x4fc
{
  strcpy(name,prefix);
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    2464:	mov	r6, r1
    2466:	mov	r5, r2
  if(state == 0)
    2468:	cbz	r0, 2478 <c_uSD::write(short*, long)+0x1c>
    #endif
    state=1; // flag that file is open
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
    246a:	subs	r3, r0, #1
    246c:	uxth	r3, r3
    246e:	cmp	r3, #1
    2470:	bls.n	24be <c_uSD::write(short*, long)+0x62>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
  }
  
  if(state == 3)
    2472:	cmp	r0, #3
    2474:	beq.n	2530 <c_uSD::write(short*, long)+0xd4>
  {
    state=close();
  }
  return state;
}
    2476:	pop	{r4, r5, r6, pc}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    2478:	addw	r0, r4, #1282	; 0x502
    247c:	bl	10cc <makeFilename(char*)>
    if(!filename) {state=-1; return state;} // flag to do not anything
    2480:	cmp	r0, #0
    2482:	beq.n	253c <c_uSD::write(short*, long)+0xe0>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    2484:	ldr	r3, [pc, #204]	; (2554 <c_uSD::write(short*, long)+0xf8>)
    2486:	ldr	r1, [r3, #0]
    2488:	cmp	r1, #0
    248a:	beq.n	250a <c_uSD::write(short*, long)+0xae>
    248c:	mov	r2, r0
    248e:	movw	r3, #1538	; 0x602
    2492:	addw	r0, r4, #1212	; 0x4bc
    2496:	bl	6ec8 <FsBaseFile::open(FsVolume*, char const*, int)>
    249a:	cbz	r0, 250a <c_uSD::write(short*, long)+0xae>
    249c:	ldr.w	r0, [r4, #1268]	; 0x4f4
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    24a0:	cbz	r0, 24ee <c_uSD::write(short*, long)+0x92>
   *
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
    24a2:	mov.w	r1, #41943040	; 0x2800000
    24a6:	bl	5cc8 <FatFile::preAllocate(unsigned long)>
    24aa:	cbz	r0, 2502 <c_uSD::write(short*, long)+0xa6>
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    #ifdef  GEN_WAV_FILE // keep first record
          memcpy(header,(const char *)data,512);
    24ac:	mov.w	r2, #512	; 0x200
    24b0:	mov	r1, r6
    24b2:	ldr	r0, [pc, #164]	; (2558 <c_uSD::write(short*, long)+0xfc>)
    24b4:	bl	87fc <memcpy>
    #endif
    state=1; // flag that file is open
    nbuf=0;
    24b8:	movs	r3, #0
    24ba:	strh.w	r3, [r4, #1278]	; 0x4fe
    24be:	ldr.w	r0, [r4, #1268]	; 0x4f4
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    24c2:	movs	r3, #2
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    24c4:	lsls	r5, r5, #1
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    24c6:	strh.w	r3, [r4, #1276]	; 0x4fc
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    24ca:	cbz	r0, 2512 <c_uSD::write(short*, long)+0xb6>
    24cc:	mov	r1, r6
    24ce:	mov	r2, r5
    24d0:	bl	61e8 <FatFile::write(void const*, unsigned int)>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    24d4:	cmp	r0, r5
    24d6:	bne.n	254a <c_uSD::write(short*, long)+0xee>
    nbuf++;
    24d8:	ldrh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    24dc:	ldrsh.w	r2, [r4, #1280]	; 0x500
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    24e0:	adds	r3, #1
    24e2:	strh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    24e6:	cbnz	r2, 2524 <c_uSD::write(short*, long)+0xc8>
    24e8:	ldrsh.w	r0, [r4, #1276]	; 0x4fc
    24ec:	b.n	2472 <c_uSD::write(short*, long)+0x16>
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    24ee:	ldr.w	r0, [r4, #1272]	; 0x4f8
    24f2:	cbz	r0, 2502 <c_uSD::write(short*, long)+0xa6>
    24f4:	mov.w	r2, #41943040	; 0x2800000
    24f8:	movs	r3, #0
    24fa:	bl	5700 <ExFatFile::preAllocate(unsigned long long)>
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    24fe:	cmp	r0, #0
    2500:	bne.n	24ac <c_uSD::write(short*, long)+0x50>
    2502:	mov	r0, r4
    2504:	ldr	r1, [pc, #84]	; (255c <c_uSD::write(short*, long)+0x100>)
    2506:	bl	2434 <SdBase<FsVolume>::errorHalt(char const*)>
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    250a:	mov	r0, r4
    250c:	ldr	r1, [pc, #80]	; (2560 <c_uSD::write(short*, long)+0x104>)
    250e:	bl	2434 <SdBase<FsVolume>::errorHalt(char const*)>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2512:	ldr.w	r0, [r4, #1272]	; 0x4f8
    2516:	cmp	r0, #0
    2518:	beq.n	24d4 <c_uSD::write(short*, long)+0x78>
    251a:	mov	r1, r6
    251c:	mov	r2, r5
    251e:	bl	5870 <ExFatFile::write(void const*, unsigned int)>
    2522:	b.n	24d4 <c_uSD::write(short*, long)+0x78>
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
    2524:	movs	r2, #0
    2526:	movs	r3, #3
    2528:	strh.w	r2, [r4, #1280]	; 0x500
    252c:	strh.w	r3, [r4, #1276]	; 0x4fc
  }
  
  if(state == 3)
  {
    state=close();
    2530:	mov	r0, r4
    2532:	bl	1220 <c_uSD::close()>
    2536:	strh.w	r0, [r4, #1276]	; 0x4fc
  }
  return state;
    253a:	pop	{r4, r5, r6, pc}
int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    253c:	movw	r3, #65535	; 0xffff
    2540:	strh.w	r3, [r4, #1276]	; 0x4fc
    2544:	mov.w	r0, #4294967295
    2548:	pop	{r4, r5, r6, pc}
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    254a:	mov	r0, r4
    254c:	ldr	r1, [pc, #20]	; (2564 <c_uSD::write(short*, long)+0x108>)
    254e:	bl	2434 <SdBase<FsVolume>::errorHalt(char const*)>
    2552:	nop
    2554:	.word	0x2001dd04
    2558:	.word	0x20018aac
    255c:	.word	0x00013988
    2560:	.word	0x00013974
    2564:	.word	0x0001395c

00002568 <loop>:
}

volatile uint32_t maxValue=0, maxNoise=0; // possibly be updated outside
int16_t tempBuffer[AUDIO_BLOCK_SAMPLES*NCH];

extern "C" void loop() {
    2568:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    256c:	ldr	r4, [pc, #740]	; (2854 <loop+0x2ec>)
    256e:	ldrh.w	r3, [r4, #1136]	; 0x470
  t = tail;
    2572:	ldrh.w	r1, [r4, #1138]	; 0x472
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    2576:	uxth	r3, r3
  t = tail;
    2578:	uxth	r1, r1
  if (h >= t) return h - t;
    257a:	cmp	r1, r3
  return mq + h - t;
    257c:	itte	hi
    257e:	addwhi	r2, r3, #275	; 0x113
    2582:	subhi	r3, r2, r1
{
  uint16_t h, t;

  h = head;
  t = tail;
  if (h >= t) return h - t;
    2584:	subls	r3, r3, r1
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    2586:	ldrh.w	r2, [r4, #2280]	; 0x8e8
  t = tail;
    258a:	ldrh.w	r1, [r4, #2282]	; 0x8ea
  if (h >= t) return h - t;
    258e:	uxth	r3, r3
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    2590:	uxth	r2, r2
  t = tail;
    2592:	uxth	r1, r1
  int32_t nsec;
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
    2594:	adds	r3, #0
    2596:	it	ne
    2598:	movne	r3, #1
  if (h >= t) return h - t;
    259a:	cmp	r1, r2
  return mq + h - t;
    259c:	it	hi
    259e:	addwhi	r2, r2, #275	; 0x113
    25a2:	subs	r2, r2, r1
    25a4:	uxth	r2, r2
}

volatile uint32_t maxValue=0, maxNoise=0; // possibly be updated outside
int16_t tempBuffer[AUDIO_BLOCK_SAMPLES*NCH];

extern "C" void loop() {
    25a6:	sub	sp, #44	; 0x2c
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    25a8:	cmp	r2, #0
    25aa:	beq.w	27c6 <loop+0x25e>

  if(have_data)
    25ae:	cmp	r3, #0
    25b0:	beq.w	27c6 <loop+0x25e>
  { // have data on queue
    started=1; // flag that we have now data
    nsec=checkDutyCycle(&acqParameters, state);
    25b4:	ldr	r5, [pc, #672]	; (2858 <loop+0x2f0>)
  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;

  if(have_data)
  { // have data on queue
    started=1; // flag that we have now data
    25b6:	ldr	r3, [pc, #676]	; (285c <loop+0x2f4>)
    nsec=checkDutyCycle(&acqParameters, state);
    25b8:	ldrsh.w	r1, [r5]
    25bc:	ldr	r0, [pc, #672]	; (2860 <loop+0x2f8>)
  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;

  if(have_data)
  { // have data on queue
    started=1; // flag that we have now data
    25be:	movs	r6, #1
    25c0:	str	r6, [r3, #0]
    nsec=checkDutyCycle(&acqParameters, state);
    25c2:	bl	1714 <checkDutyCycle(ACQ_Parameters_s*, short)>
    if(nsec<0) { uSD.setClosing();} // this will be last record in file
    25c6:	cmp	r0, #0
    25c8:	blt.w	296a <loop+0x402>
    if(nsec>0) 
    25cc:	beq.n	25dc <loop+0x74>
    25ce:	ldr	r2, [pc, #660]	; (2864 <loop+0x2fc>)
    25d0:	ldr	r3, [r2, #0]
    25d2:	bic.w	r3, r3, #32768	; 0x8000
    25d6:	str	r3, [r2, #0]
    { 
      #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // file closed sleep now
    25d8:	bl	157c <setWakeupCallandSleep(unsigned long)>
    }
    //
    if(state==0)
    25dc:	ldrsh.w	r0, [r5]
    { // generate header before file is opened
      #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
         uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
         //
         int ndat=outptr-diskBuffer;
    25e0:	ldr	r6, [pc, #644]	; (2868 <loop+0x300>)
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // file closed sleep now
    }
    //
    if(state==0)
    25e2:	cmp	r0, #0
    25e4:	beq.w	291e <loop+0x3b6>
    25e8:	ldr	r1, [pc, #616]	; (2854 <loop+0x2ec>)
}

volatile uint32_t maxValue=0, maxNoise=0; // possibly be updated outside
int16_t tempBuffer[AUDIO_BLOCK_SAMPLES*NCH];

extern "C" void loop() {
    25ea:	movs	r2, #0
    25ec:	add	r0, sp, #32
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    25ee:	mov.w	lr, #1144	; 0x478
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
	userblock = queue[t];
    25f2:	mov.w	ip, #286	; 0x11e
template <int mq>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
    25f6:	ldr.w	r3, [r1, #1132]	; 0x46c
    25fa:	cmp	r3, #0
    25fc:	beq.w	2972 <loop+0x40a>
    2600:	movs	r3, #0
      state=1;
    }
    
    // fetch data from queues
    int16_t * data[NCH];
    for(int ii=0; ii<NCH; ii++) data[ii] = (int16_t *)queue[ii].readBuffer();
    2602:	str.w	r3, [r0, r2, lsl #2]
    2606:	adds	r2, #1
    2608:	cmp	r2, #2
    260a:	add.w	r1, r1, #1144	; 0x478
    260e:	bne.n	25f6 <loop+0x8e>
    2610:	ldr	r3, [pc, #600]	; (286c <loop+0x304>)
    2612:	ldr	r1, [sp, #32]
    2614:	ldr	r2, [sp, #36]	; 0x24
    2616:	add.w	r7, r3, #512	; 0x200
    261a:	subs	r1, #2
    261c:	subs	r2, #2
    // multiplex data
    int16_t *tmp = tempBuffer;
    for(int ii=0;ii<AUDIO_BLOCK_SAMPLES;ii++) for(int jj=0; jj<NCH; jj++) *tmp++ = *data[jj]++;
    261e:	ldrsh.w	r0, [r1, #2]!
    2622:	strh.w	r0, [r3, #-4]
    2626:	ldrsh.w	r0, [r2, #2]!
    262a:	strh.w	r0, [r3, #-2]
    262e:	adds	r3, #4
    2630:	cmp	r7, r3
    2632:	bne.n	261e <loop+0xb6>
}

template <int mq>
void mRecordQueue<mq>::freeBuffer(void)
{
	if (userblock == NULL) return;
    2634:	ldr.w	r0, [r4, #1132]	; 0x46c
    2638:	ldr	r7, [pc, #536]	; (2854 <loop+0x2ec>)
    263a:	cbz	r0, 2646 <loop+0xde>
	release(userblock);
    263c:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    2640:	movs	r3, #0
    2642:	str.w	r3, [r7, #1132]	; 0x46c
}

template <int mq>
void mRecordQueue<mq>::freeBuffer(void)
{
	if (userblock == NULL) return;
    2646:	ldr.w	r0, [r4, #2276]	; 0x8e4
    264a:	ldr	r7, [pc, #520]	; (2854 <loop+0x2ec>)
    264c:	cbz	r0, 2658 <loop+0xf0>
	release(userblock);
    264e:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    2652:	movs	r3, #0
    2654:	str.w	r3, [r7, #2276]	; 0x8e4
    // release queues
    for(int ii=0; ii<NCH; ii++) queue[ii].freeBuffer();

    // copy data to disk buffer
    int16_t *ptr=(int16_t *) outptr;
    2658:	ldr	r7, [r6, #0]
    
    // number of data in tempBuffer
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    265a:	ldr	r3, [pc, #532]	; (2870 <loop+0x308>)
    265c:	subs	r3, r3, r7
    265e:	mov.w	r8, r3, asr #1

    tmp = tempBuffer;
    if (nout>ndat)
    2662:	cmp.w	r8, #256	; 0x100
    
    // number of data in tempBuffer
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    2666:	mov	r9, r7

    tmp = tempBuffer;
    if (nout>ndat)
    2668:	bgt.w	28c4 <loop+0x35c>
    266c:	ldr	r3, [pc, #516]	; (2874 <loop+0x30c>)
      ndat=0;
    }
    else
    { // fill up disk buffer
      int nbuf=nout;
      if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
    266e:	ldrsh.w	r3, [r3, #1280]	; 0x500
    2672:	cbz	r3, 267c <loop+0x114>
    2674:	add.w	r8, r8, r8, lsr #31
    2678:	bic.w	r8, r8, #1
      for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    267c:	cmp.w	r8, #0
    2680:	ble.w	29be <loop+0x456>
    2684:	ldr.w	lr, [pc, #564]	; 28bc <loop+0x354>
    2688:	mov	r3, r7
    268a:	mov.w	r7, r8, lsl #1
    268e:	adds	r0, r3, r7
    2690:	mov	r2, lr
    2692:	ldrsh.w	r1, [r2], #2
    2696:	strh.w	r1, [r3], #2
    269a:	cmp	r0, r3
    269c:	bne.n	2692 <loop+0x12a>
    269e:	add	r7, lr
    26a0:	mov	r9, r0
    }
    
    if(nout==0) //buffer is filled, so write to disk
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
    26a2:	bl	8eac <micros>
      state=uSD.write(diskBuffer,nbuf); // this is blocking
    26a6:	ldr.w	sl, [pc, #472]	; 2880 <loop+0x318>
    26aa:	rsb	r2, sl, r9
    26ae:	asrs	r2, r2, #1
    }
    
    if(nout==0) //buffer is filled, so write to disk
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
    26b0:	mov	fp, r0
      state=uSD.write(diskBuffer,nbuf); // this is blocking
    26b2:	mov	r1, sl
    26b4:	ldr	r0, [pc, #444]	; (2874 <loop+0x30c>)
    26b6:	bl	245c <c_uSD::write(short*, long)>
    26ba:	strh	r0, [r5, #0]
      t1=micros();
    26bc:	bl	8eac <micros>
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
    26c0:	ldr	r2, [pc, #436]	; (2878 <loop+0x310>)
    26c2:	ldr	r3, [r2, #0]
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
    26c4:	rsb	r0, fp, r0
      if(t2<t3) t3=t2; // accumulate some time statistics
    26c8:	cmp	r0, r3
      if(t2>t4) t4=t2;
    26ca:	ldr	r3, [pc, #432]	; (287c <loop+0x314>)
    
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
    26cc:	it	cc
    26ce:	strcc	r0, [r2, #0]
      if(t2>t4) t4=t2;
    26d0:	ldr	r2, [r3, #0]
    else
    { // fill up disk buffer
      int nbuf=nout;
      if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
      for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
      ndat-=nbuf;
    26d2:	rsb	r8, r8, #256	; 0x100
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
      if(t2>t4) t4=t2;
    26d6:	cmp	r0, r2
    26d8:	it	hi
    26da:	strhi	r0, [r3, #0]
    26dc:	ldr	r2, [pc, #416]	; (2880 <loop+0x318>)

      ptr=(int16_t *)diskBuffer;
    }

    if(ndat>0) // save residual data
    26de:	cmp.w	r8, #0
    26e2:	beq.w	28dc <loop+0x374>
    26e6:	movs	r3, #0
    {
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    26e8:	adds	r3, #1
    26ea:	ldrh.w	r1, [r7], #2
    26ee:	strh.w	r1, [r2], #2
    26f2:	cmp	r8, r3
    26f4:	bgt.n	26e8 <loop+0x180>
        }
      }
    } // copied now all data
    outptr=(int16_t *)ptr; // save actual write position
*/
    if(!state)
    26f6:	ldrsh.w	r3, [r5]
    {
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    }
    
    // all data are copied
    outptr=(int16_t *)ptr; // save actual write position
    26fa:	str	r2, [r6, #0]
        }
      }
    } // copied now all data
    outptr=(int16_t *)ptr; // save actual write position
*/
    if(!state)
    26fc:	cmp	r3, #0
    26fe:	beq.w	28e8 <loop+0x380>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2702:	ldr.w	r8, [pc, #444]	; 28c0 <loop+0x358>
#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
    2706:	ldr	r7, [pc, #380]	; (2884 <loop+0x31c>)
    2708:	ldr.w	r3, [r8]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    270c:	ldr	r5, [pc, #376]	; (2888 <loop+0x320>)
    270e:	str	r3, [sp, #28]
  if(millis()>t0+1000)
    2710:	ldr	r3, [r7, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    2712:	ldr	r2, [r5, #0]
	return ret;
    2714:	ldr	r1, [sp, #28]
  if(millis()>t0+1000)
    2716:	add.w	r3, r3, #1000	; 0x3e8

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    271a:	adds	r2, #1
  if(millis()>t0+1000)
    271c:	cmp	r3, r1

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    271e:	str	r2, [r5, #0]
  if(millis()>t0+1000)
    2720:	bcs.n	27be <loop+0x256>
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
    2722:	ldr	r6, [pc, #360]	; (288c <loop+0x324>)
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    2724:	ldr.w	sl, [pc, #340]	; 287c <loop+0x314>
    2728:	ldr	r3, [pc, #328]	; (2874 <loop+0x30c>)
    272a:	ldrh	r1, [r6, #0]
    272c:	ldr.w	r0, [sl]
    2730:	ldr.w	fp, [pc, #324]	; 2878 <loop+0x310>
    2734:	ldrh.w	r3, [r3, #1278]	; 0x4fe
    2738:	str	r0, [sp, #4]
    273a:	str	r1, [sp, #8]
    273c:	ldr.w	r1, [fp]
    2740:	str	r1, [sp, #0]
    2742:	ldr	r0, [pc, #332]	; (2890 <loop+0x328>)
    2744:	ldr	r1, [pc, #332]	; (2894 <loop+0x32c>)
    2746:	ldr.w	r9, [pc, #356]	; 28ac <loop+0x344>
    274a:	bl	a324 <Print::printf(char const*, ...)>
    AudioMemoryUsageMaxReset();
    274e:	ldr	r1, [pc, #328]	; (2898 <loop+0x330>)
    t3=1<<31;
    t4=0;
  
  #if MDEL>=0
     Serial.printf("%4d; %10d %10d %4d; %4d %4d %4d; ",
    2750:	ldr	r3, [pc, #328]	; (289c <loop+0x334>)
  loopCount++;
  if(millis()>t0+1000)
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    AudioMemoryUsageMaxReset();
    2752:	ldrh	r1, [r1, #0]
    2754:	strh	r1, [r6, #0]
    t3=1<<31;
    t4=0;
  
  #if MDEL>=0
     Serial.printf("%4d; %10d %10d %4d; %4d %4d %4d; ",
    2756:	ldr	r1, [pc, #328]	; (28a0 <loop+0x338>)
    2758:	ldr	r3, [r3, #0]
    275a:	ldr	r1, [r1, #0]
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(),process1.getDetCount(),process1.getNoiseCount());
    275c:	str	r1, [sp, #0]
    275e:	ldr.w	r1, [r9, #40]	; 0x28
    2762:	str	r1, [sp, #16]
    2764:	ldr.w	r1, [r9, #36]	; 0x24
    2768:	str	r1, [sp, #12]
    276a:	ldr.w	r1, [r9, #32]
    276e:	str	r1, [sp, #8]
  if(millis()>t0+1000)
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    2770:	mov.w	r1, #2147483648	; 0x80000000
    2774:	str.w	r1, [fp]
    t4=0;
  
  #if MDEL>=0
     Serial.printf("%4d; %10d %10d %4d; %4d %4d %4d; ",
    2778:	ldr	r0, [pc, #292]	; (28a0 <loop+0x338>)
    277a:	ldr	r1, [pc, #288]	; (289c <loop+0x334>)
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(),process1.getDetCount(),process1.getNoiseCount());
    277c:	ldr	r2, [r4, #24]
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    t4=0;
  
  #if MDEL>=0
     Serial.printf("%4d; %10d %10d %4d; %4d %4d %4d; ",
    277e:	ldr.w	ip, [r1]
    2782:	ldr.w	lr, [r0]
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(),process1.getDetCount(),process1.getNoiseCount());
    2786:	ldr	r1, [pc, #284]	; (28a4 <loop+0x33c>)
    2788:	udiv	r0, ip, lr
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    t4=0;
    278c:	movs	r6, #0
    278e:	str.w	r6, [sl]
  
  #if MDEL>=0
     Serial.printf("%4d; %10d %10d %4d; %4d %4d %4d; ",
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(),process1.getDetCount(),process1.getNoiseCount());
    2792:	str	r0, [sp, #4]
    2794:	ldr	r0, [pc, #248]	; (2890 <loop+0x328>)
    2796:	bl	a324 <Print::printf(char const*, ...)>

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    279a:	ldr	r0, [pc, #244]	; (2890 <loop+0x328>)
  virtual void update(void);
  void setThreshold(int32_t val) {thresh=val;}
  int32_t getSigCount(void) {return sigCount;}
  int32_t getDetCount(void) {return detCount;}
  int32_t getNoiseCount(void) {return noiseCount;}
  void resetDetCount(void) {detCount=0;}
    279c:	str.w	r6, [r9, #36]	; 0x24
  void resetNoiseCount(void) {noiseCount=0;}
    27a0:	str.w	r6, [r9, #40]	; 0x28
     Serial.printf("%4d; %10d %10d %4d; %4d %4d %4d; ",
            queue[0].dropCount, 
            maxValue, maxNoise, maxValue/maxNoise,
            process1.getSigCount(),process1.getDetCount(),process1.getNoiseCount());
            
      queue[0].dropCount=0;
    27a4:	str	r6, [r4, #24]

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    27a6:	bl	a2f4 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27aa:	ldr.w	r3, [r8]
    27ae:	str	r3, [sp, #32]
	return ret;
    27b0:	ldr	r3, [sp, #32]
    t0=millis();
    loopCount=0;
    maxValue=0;
    27b2:	ldr	r2, [pc, #232]	; (289c <loop+0x334>)
  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    t0=millis();
    27b4:	str	r3, [r7, #0]
    loopCount=0;
    maxValue=0;
    maxNoise=0;
    27b6:	ldr	r3, [pc, #232]	; (28a0 <loop+0x338>)
  #endif
  
    Serial.println();
    t0=millis();
    loopCount=0;
    maxValue=0;
    27b8:	str	r6, [r2, #0]
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    t0=millis();
    loopCount=0;
    27ba:	str	r6, [r5, #0]
    maxValue=0;
    maxNoise=0;
    27bc:	str	r6, [r3, #0]
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
    27be:	wfi
}
    27c0:	add	sp, #44	; 0x2c
    27c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif
      // store config again if you wanted time of latest file stored
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    }
  }
  else if(started)
    27c6:	ldr	r3, [pc, #148]	; (285c <loop+0x2f4>)
    27c8:	ldr	r3, [r3, #0]
    27ca:	cmp	r3, #0
    27cc:	beq.n	2702 <loop+0x19a>
  { // queue is empty that is we have no data
    // are we told to close or running out of time?
    // if delay is enabled must wait for delay to pass by
    if(
        #if MDEL >=0
          ((mustClose>0) && (process1.getSigCount()< -MDEL)) ||
    27ce:	ldr	r7, [pc, #216]	; (28a8 <loop+0x340>)
    27d0:	ldrsh.w	r3, [r7]
    27d4:	cmp	r3, #0
    27d6:	ble.w	2906 <loop+0x39e>
    27da:	ldr	r3, [pc, #208]	; (28ac <loop+0x344>)
    27dc:	ldr	r3, [r3, #32]
    27de:	adds	r3, #10
    27e0:	bge.n	2702 <loop+0x19a>
    27e2:	ldr	r5, [pc, #116]	; (2858 <loop+0x2f0>)
    27e4:	ldr	r0, [pc, #200]	; (28b0 <loop+0x348>)
        #endif
          ((mustClose==0) && ((checkDutyCycle(&acqParameters, state)<0))))
    { 
      Serial.println("QUEUE Empty");
      // write remaining data to disk and close file
      if(state>=0)
    27e6:	ldr.w	r8, [pc, #112]	; 2858 <loop+0x2f0>
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
    27ea:	ldr	r6, [pc, #124]	; (2868 <loop+0x300>)
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    27ec:	ldr.w	sl, [pc, #144]	; 2880 <loop+0x318>
    27f0:	movs	r1, #11
    27f2:	bl	89fc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    27f6:	ldr	r0, [pc, #152]	; (2890 <loop+0x328>)
    27f8:	bl	a2f4 <Print::println()>
        #endif
          ((mustClose==0) && ((checkDutyCycle(&acqParameters, state)<0))))
    { 
      Serial.println("QUEUE Empty");
      // write remaining data to disk and close file
      if(state>=0)
    27fc:	ldrsh.w	r3, [r5]
    2800:	cmp	r3, #0
    2802:	blt.n	2830 <loop+0x2c8>
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    2804:	ldr	r3, [r6, #0]
    2806:	ldr	r0, [pc, #108]	; (2874 <loop+0x30c>)
    2808:	rsb	r2, sl, r3
    280c:	asrs	r2, r2, #1
    280e:	mov	r1, sl
    2810:	bl	245c <c_uSD::write(short*, long)>
    2814:	strh.w	r0, [r8]
        state=uSD.close();
    2818:	ldr	r0, [pc, #88]	; (2874 <loop+0x30c>)
    281a:	bl	1220 <c_uSD::close()>
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    281e:	movs	r2, #8
      Serial.println("QUEUE Empty");
      // write remaining data to disk and close file
      if(state>=0)
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        state=uSD.close();
    2820:	strh.w	r0, [r8]
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    2824:	ldr	r3, [pc, #140]	; (28b4 <loop+0x34c>)
    2826:	str	r2, [sp, #0]
    2828:	ldr	r1, [pc, #52]	; (2860 <loop+0x2f8>)
    282a:	ldr	r0, [pc, #72]	; (2874 <loop+0x30c>)
    282c:	bl	1340 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
      }
      outptr = diskBuffer;

      // reset mustClose flag
      if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    2830:	ldr	r3, [pc, #128]	; (28b4 <loop+0x34c>)
    2832:	ldr	r0, [pc, #132]	; (28b8 <loop+0x350>)
    2834:	ldr	r3, [r3, #4]
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        state=uSD.close();
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
      }
      outptr = diskBuffer;
    2836:	str.w	sl, [r6]

      // reset mustClose flag
      if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    283a:	cmp	r3, #0
    283c:	ite	ge
    283e:	movge	r3, #0
    2840:	movwlt	r3, #65535	; 0xffff
    2844:	movs	r1, #11
    2846:	strh	r3, [r7, #0]
    2848:	bl	89fc <usb_serial_write>
    284c:	ldr	r0, [pc, #64]	; (2890 <loop+0x328>)
    284e:	bl	a2f4 <Print::println()>
    2852:	b.n	2702 <loop+0x19a>
    2854:	.word	0x2001d0d0
    2858:	.word	0x2001d020
    285c:	.word	0x2001d9c8
    2860:	.word	0x20017764
    2864:	.word	0x4004803c
    2868:	.word	0x20017754
    286c:	.word	0x2001ce10
    2870:	.word	0x2001ccac
    2874:	.word	0x2001839c
    2878:	.word	0x2001cda8
    287c:	.word	0x20018aa8
    2880:	.word	0x20018cac
    2884:	.word	0x2001d9cc
    2888:	.word	0x2001d0b0
    288c:	.word	0x2001de78
    2890:	.word	0x20017924
    2894:	.word	0x000139b4
    2898:	.word	0x2001def8
    289c:	.word	0x2001d9c4
    28a0:	.word	0x2001cdb0
    28a4:	.word	0x000139d4
    28a8:	.word	0x20017762
    28ac:	.word	0x2001d044
    28b0:	.word	0x000139f8
    28b4:	.word	0x20017734
    28b8:	.word	0x000139a8
    28bc:	.word	0x2001ce0c
    28c0:	.word	0x2001dd64
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;

    tmp = tempBuffer;
    if (nout>ndat)
    28c4:	ldr	r3, [pc, #252]	; (29c4 <loop+0x45c>)
    28c6:	subs	r2, r7, #2
    28c8:	add.w	r0, r3, #512	; 0x200
    { // sufficient space for all data
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    28cc:	ldrsh.w	r1, [r3], #2
    28d0:	strh.w	r1, [r2, #2]!
    28d4:	cmp	r3, r0
    28d6:	bne.n	28cc <loop+0x364>
    28d8:	add.w	r2, r7, #512	; 0x200
        }
      }
    } // copied now all data
    outptr=(int16_t *)ptr; // save actual write position
*/
    if(!state)
    28dc:	ldrsh.w	r3, [r5]
    {
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    }
    
    // all data are copied
    outptr=(int16_t *)ptr; // save actual write position
    28e0:	str	r2, [r6, #0]
        }
      }
    } // copied now all data
    outptr=(int16_t *)ptr; // save actual write position
*/
    if(!state)
    28e2:	cmp	r3, #0
    28e4:	bne.w	2702 <loop+0x19a>
    28e8:	movs	r1, #6
    28ea:	ldr	r0, [pc, #220]	; (29c8 <loop+0x460>)
    28ec:	bl	89fc <usb_serial_write>
    28f0:	ldr	r0, [pc, #216]	; (29cc <loop+0x464>)
    28f2:	bl	a2f4 <Print::println()>
    { 
#if DO_DEBUG>0
      Serial.println("closed");
#endif
      // store config again if you wanted time of latest file stored
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    28f6:	movs	r2, #8
    28f8:	str	r2, [sp, #0]
    28fa:	ldr	r3, [pc, #212]	; (29d0 <loop+0x468>)
    28fc:	ldr	r1, [pc, #212]	; (29d4 <loop+0x46c>)
    28fe:	ldr	r0, [pc, #216]	; (29d8 <loop+0x470>)
    2900:	bl	1340 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
    2904:	b.n	2702 <loop+0x19a>
  { // queue is empty that is we have no data
    // are we told to close or running out of time?
    // if delay is enabled must wait for delay to pass by
    if(
        #if MDEL >=0
          ((mustClose>0) && (process1.getSigCount()< -MDEL)) ||
    2906:	bne.w	2702 <loop+0x19a>
        #endif
          ((mustClose==0) && ((checkDutyCycle(&acqParameters, state)<0))))
    290a:	ldr	r5, [pc, #208]	; (29dc <loop+0x474>)
    290c:	ldr	r0, [pc, #196]	; (29d4 <loop+0x46c>)
    290e:	ldrsh.w	r1, [r5]
    2912:	bl	1714 <checkDutyCycle(ACQ_Parameters_s*, short)>
    2916:	cmp	r0, #0
    2918:	bge.w	2702 <loop+0x19a>
    291c:	b.n	27e4 <loop+0x27c>
    }
    //
    if(state==0)
    { // generate header before file is opened
      #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
         uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
    291e:	bl	1144 <wavHeader(unsigned long)>
         //
         int ndat=outptr-diskBuffer;
    2922:	ldr.w	lr, [r6]
    2926:	ldr	r2, [pc, #184]	; (29e0 <loop+0x478>)
    2928:	rsb	r7, r2, lr
    292c:	asrs	r7, r7, #1
         if(ndat>0)
    292e:	cmp	r7, #0
    2930:	ble.n	294c <loop+0x3e4>
    2932:	add.w	r7, r7, #2147483648	; 0x80000000
    2936:	subs	r7, #1
    2938:	add.w	r7, r2, r7, lsl #1
    293c:	subs	r3, r2, #2
    293e:	adds	r2, #42	; 0x2a
         { // shift exisiting data after header, which is always at beginnig of file
          for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
    2940:	ldrsh.w	r1, [r3, #2]!
    2944:	strh.w	r1, [r2, #2]!
    2948:	cmp	r3, r7
    294a:	bne.n	2940 <loop+0x3d8>
    294c:	ldr	r2, [pc, #144]	; (29e0 <loop+0x478>)
    294e:	subs	r3, r0, #4
    2950:	adds	r0, #40	; 0x28
         }
         // copy header to disk buffer
         uint32_t *ptr=(uint32_t *) diskBuffer;
         for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
    2952:	ldr.w	r1, [r3, #4]!
    2956:	str.w	r1, [r2], #4
    295a:	cmp	r3, r0
    295c:	bne.n	2952 <loop+0x3ea>
         outptr+=22; //(44 bytes)
    295e:	add.w	r3, lr, #44	; 0x2c
         uint32_t *ptr=(uint32_t *) diskBuffer;
         // copy to disk buffer
         for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
         outptr+=256; //(512 bytes)
      #endif
      state=1;
    2962:	movs	r2, #1
          for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
         }
         // copy header to disk buffer
         uint32_t *ptr=(uint32_t *) diskBuffer;
         for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
         outptr+=22; //(44 bytes)
    2964:	str	r3, [r6, #0]
         uint32_t *ptr=(uint32_t *) diskBuffer;
         // copy to disk buffer
         for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
         outptr+=256; //(512 bytes)
      #endif
      state=1;
    2966:	strh	r2, [r5, #0]
    2968:	b.n	25e8 <loop+0x80>
  public:
    c_uSD(): state(-1), closing(0) {;}
    void init();
    int16_t write(int16_t * data, int32_t ndat);
    uint16_t getNbuf(void) {return nbuf;}
    void setClosing(void) {closing=1;}
    296a:	ldr	r3, [pc, #108]	; (29d8 <loop+0x470>)
    296c:	strh.w	r6, [r3, #1280]	; 0x500
    2970:	b.n	25dc <loop+0x74>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2972:	mla	r8, lr, r2, r4
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
    2976:	mov	r7, r3
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2978:	ldrh.w	r9, [r8, #1138]	; 0x472
	if (t == head) return NULL;
    297c:	ldrh.w	sl, [r8, #1136]	; 0x470
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2980:	uxth.w	r9, r9
	if (t == head) return NULL;
    2984:	uxth.w	sl, sl
	if (++t >= mq) t = 0;
    2988:	add.w	r8, r9, #1
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    298c:	cmp	r9, sl
	if (++t >= mq) t = 0;
    298e:	uxth.w	r8, r8
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    2992:	beq.w	2602 <loop+0x9a>
	if (++t >= mq) t = 0;
    2996:	cmp.w	r8, #274	; 0x112
    299a:	it	ls
    299c:	movls	r7, r8
	userblock = queue[t];
    299e:	mla	r3, ip, r2, r7
    29a2:	add.w	r3, r3, #8
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
    29a6:	it	hi
    29a8:	movhi	r8, r7
	userblock = queue[t];
    29aa:	ldr.w	r3, [r4, r3, lsl #2]
    29ae:	str.w	r3, [r1, #1132]	; 0x46c
	tail = t;
    29b2:	mla	r7, lr, r2, r4
	return (void *) userblock->data;
    29b6:	adds	r3, #4
	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
	if (++t >= mq) t = 0;
	userblock = queue[t];
	tail = t;
    29b8:	strh.w	r8, [r7, #1138]	; 0x472
    29bc:	b.n	2602 <loop+0x9a>
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;

    tmp = tempBuffer;
    29be:	ldr	r7, [pc, #4]	; (29c4 <loop+0x45c>)
    29c0:	b.n	26a2 <loop+0x13a>
    29c2:	nop
    29c4:	.word	0x2001ce0c
    29c8:	.word	0x000139a0
    29cc:	.word	0x20017924
    29d0:	.word	0x20017734
    29d4:	.word	0x20017764
    29d8:	.word	0x2001839c
    29dc:	.word	0x2001d020
    29e0:	.word	0x20018cac

000029e4 <_GLOBAL__sub_I_acqParameters>:
    maxNoise=0;
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    29e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    29e8:	ldr	r4, [pc, #660]	; (2c80 <_GLOBAL__sub_I_acqParameters+0x29c>)

audio_block_t * I2S_32:: block_left = NULL;
audio_block_t * I2S_32:: block_right = NULL;
uint16_t I2S_32:: block_offset = 0;
bool I2S_32::update_responsibility = false;
DMAChannel I2S_32::dma(false);
    29ea:	ldr	r2, [pc, #664]	; (2c84 <_GLOBAL__sub_I_acqParameters+0x2a0>)
    29ec:	ldr	r1, [pc, #664]	; (2c88 <_GLOBAL__sub_I_acqParameters+0x2a4>)
    29ee:	ldr	r0, [pc, #668]	; (2c8c <_GLOBAL__sub_I_acqParameters+0x2a8>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    29f0:	ldr	r5, [pc, #668]	; (2c90 <_GLOBAL__sub_I_acqParameters+0x2ac>)
    29f2:	ldr	r7, [pc, #672]	; (2c94 <_GLOBAL__sub_I_acqParameters+0x2b0>)
    29f4:	bl	af18 <__aeabi_atexit>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    29f8:	ldr	r2, [r4, #0]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    29fa:	str	r7, [r5, #0]
    29fc:	movs	r3, #0
    29fe:	strb	r3, [r5, #9]
    2a00:	str	r3, [r5, #16]
			active = false;
    2a02:	strb	r3, [r5, #8]
			destination_list = NULL;
    2a04:	str	r3, [r5, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2a06:	cbnz	r2, 2a0c <_GLOBAL__sub_I_acqParameters+0x28>
    2a08:	b.n	2c78 <_GLOBAL__sub_I_acqParameters+0x294>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    2a0a:	mov	r2, r3
    2a0c:	ldr	r3, [r2, #20]
    2a0e:	cmp	r3, #0
    2a10:	bne.n	2a0a <_GLOBAL__sub_I_acqParameters+0x26>
				p->next_update = this;
    2a12:	str	r5, [r2, #20]
			}
			next_update = NULL;
    2a14:	mov.w	r8, #0
template <int mq>
class mRecordQueue : public AudioStream
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
    2a18:	ldr	r6, [pc, #636]	; (2c98 <_GLOBAL__sub_I_acqParameters+0x2b4>)

class I2S_32 : public AudioStream
{
public:

	I2S_32(void) : AudioStream(0, NULL) {begin();}
    2a1a:	ldr	r3, [pc, #640]	; (2c9c <_GLOBAL__sub_I_acqParameters+0x2b8>)
    2a1c:	ldr	r0, [pc, #624]	; (2c90 <_GLOBAL__sub_I_acqParameters+0x2ac>)
    2a1e:	str.w	r8, [r5, #20]
			cpu_cycles = 0;
    2a22:	strh.w	r8, [r5, #4]
			cpu_cycles_max = 0;
    2a26:	strh.w	r8, [r5, #6]
			numConnections = 0;
    2a2a:	strb.w	r8, [r5, #10]
    2a2e:	str	r3, [r5, #0]
    2a30:	ldr.w	r9, [pc, #660]	; 2cc8 <_GLOBAL__sub_I_acqParameters+0x2e4>
    2a34:	bl	e48 <I2S_32::begin()>
    2a38:	add.w	r2, r6, #28
    2a3c:	movs	r1, #1
    2a3e:	mov	r0, r6
    2a40:	bl	cbc <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    2a44:	strh.w	r8, [r6, #1136]	; 0x470
    2a48:	addw	r2, r6, #1172	; 0x494
    2a4c:	movs	r1, #1
    2a4e:	strh.w	r8, [r6, #1138]	; 0x472
    2a52:	add.w	r0, r6, #1144	; 0x478
    2a56:	str.w	r8, [r6, #1132]	; 0x46c
    2a5a:	strh.w	r8, [r6, #1140]	; 0x474
    2a5e:	str.w	r9, [r6]
    2a62:	bl	cbc <AudioStream::AudioStream(unsigned char, audio_block_struct**)>

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2a66:	ldr	r3, [pc, #568]	; (2ca0 <_GLOBAL__sub_I_acqParameters+0x2bc>)
    2a68:	strh.w	r8, [r6, #2280]	; 0x8e8
    2a6c:	mov.w	lr, #2
    2a70:	add.w	r1, r3, #24
    2a74:	strh.w	r8, [r6, #2282]	; 0x8ea
    2a78:	strb.w	lr, [r3, #9]
			active = false;
			destination_list = NULL;
    2a7c:	mov	r2, r8
    2a7e:	str.w	r9, [r6, #1144]	; 0x478
    2a82:	str.w	r8, [r6, #2276]	; 0x8e4
    2a86:	strh.w	r8, [r6, #2284]	; 0x8ec
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    2a8a:	mov	r0, r8

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2a8c:	str	r7, [r3, #0]
			active = false;
    2a8e:	strb.w	r8, [r3, #8]
			destination_list = NULL;
    2a92:	str.w	r8, [r3, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2a96:	str	r1, [r3, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    2a98:	mov	lr, r3
    2a9a:	b.n	2aa0 <_GLOBAL__sub_I_acqParameters+0xbc>
    2a9c:	ldr.w	r1, [lr, #16]
				inputQueue[i] = NULL;
    2aa0:	str.w	r0, [r1, r2, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    2aa4:	ldrb	r1, [r3, #9]
    2aa6:	ldr	r7, [pc, #504]	; (2ca0 <_GLOBAL__sub_I_acqParameters+0x2bc>)
    2aa8:	adds	r2, #1
    2aaa:	cmp	r1, r2
    2aac:	bgt.n	2a9c <_GLOBAL__sub_I_acqParameters+0xb8>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2aae:	ldr	r1, [r4, #0]
    2ab0:	ldr	r2, [pc, #460]	; (2c80 <_GLOBAL__sub_I_acqParameters+0x29c>)
    2ab2:	cbnz	r1, 2ab8 <_GLOBAL__sub_I_acqParameters+0xd4>
    2ab4:	b.n	2c7c <_GLOBAL__sub_I_acqParameters+0x298>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    2ab6:	mov	r1, r2
    2ab8:	ldr	r2, [r1, #20]
    2aba:	cmp	r2, #0
    2abc:	bne.n	2ab6 <_GLOBAL__sub_I_acqParameters+0xd2>
				p->next_update = this;
    2abe:	str	r3, [r1, #20]
			}
			next_update = NULL;
    2ac0:	movs	r1, #0
template <int nch, int mq>
class mDelay : public AudioStream
{
public:

  mDelay(int del) : AudioStream(nch, inputQueueArray), head(mq), numDelay(del){ reset(); }
    2ac2:	mov.w	lr, #12
    2ac6:	ldr	r7, [pc, #476]	; (2ca4 <_GLOBAL__sub_I_acqParameters+0x2c0>)
    2ac8:	strh.w	lr, [r3, #128]	; 0x80
    2acc:	movs	r4, #2
    2ace:	mov	r2, r1
    2ad0:	str	r1, [r3, #20]
			cpu_cycles = 0;
    2ad2:	strh	r1, [r3, #4]
			cpu_cycles_max = 0;
    2ad4:	strh	r1, [r3, #6]
			numConnections = 0;
    2ad6:	strb	r1, [r3, #10]
};

template <int nch, int mq>
void mDelay<nch,mq>::reset(void)
{
  for(int ii=0; ii<nch; ii++) for (int jj=0; jj<mq; jj++) queue[ii][jj]=NULL;
    2ad8:	mov	r0, r1
template <int nch, int mq>
class mDelay : public AudioStream
{
public:

  mDelay(int del) : AudioStream(nch, inputQueueArray), head(mq), numDelay(del){ reset(); }
    2ada:	str	r7, [r3, #0]
    2adc:	strh.w	r4, [r3, #130]	; 0x82
};

template <int nch, int mq>
void mDelay<nch,mq>::reset(void)
{
  for(int ii=0; ii<nch; ii++) for (int jj=0; jj<mq; jj++) queue[ii][jj]=NULL;
    2ae0:	add.w	r1, r2, #8
    2ae4:	adds	r2, #1
    2ae6:	cmp	r2, #12
    2ae8:	str.w	r0, [r3, r1, lsl #2]
    2aec:	bne.n	2ae0 <_GLOBAL__sub_I_acqParameters+0xfc>
    2aee:	movs	r2, #0
    2af0:	mov	r0, r2
    2af2:	add.w	r1, r2, #20
    2af6:	adds	r2, #1
    2af8:	cmp	r2, #12
    2afa:	str.w	r0, [r3, r1, lsl #2]
    2afe:	ldr	r7, [pc, #416]	; (2ca0 <_GLOBAL__sub_I_acqParameters+0x2bc>)
    2b00:	mov.w	r4, #0
    2b04:	bne.n	2af2 <_GLOBAL__sub_I_acqParameters+0x10e>

class mProcess: public AudioStream
{
public:

  mProcess(SNIP_Parameters_s *param) : AudioStream(2, inputQueueArray) {}
    2b06:	ldr.w	fp, [pc, #452]	; 2ccc <_GLOBAL__sub_I_acqParameters+0x2e8>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2b0a:	ldr.w	r8, [pc, #452]	; 2cd0 <_GLOBAL__sub_I_acqParameters+0x2ec>
  head=mq;
    2b0e:	strh.w	r2, [r7, #128]	; 0x80
    2b12:	movs	r1, #2
    2b14:	add.w	r2, fp, #24
    2b18:	mov	r0, fp
    2b1a:	bl	cbc <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    2b1e:	ldr.w	r9, [pc, #436]	; 2cd4 <_GLOBAL__sub_I_acqParameters+0x2f0>
    2b22:	ldr	r3, [pc, #388]	; (2ca8 <_GLOBAL__sub_I_acqParameters+0x2c4>)
    2b24:	str.w	r3, [fp]
		{ isConnected = false;
		  connect(); }
    2b28:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2b2a:	stmia.w	r8, {r5, fp}
    2b2e:	strb.w	r4, [r8, #8]
    2b32:	strb.w	r4, [r8, #9]
    2b36:	str.w	r4, [r8, #12]
		{ isConnected = false;
    2b3a:	strb.w	r4, [r8, #16]
		  connect(); }
    2b3e:	bl	a590 <AudioConnection::connect()>
  #endif 

  #include "mProcess.h"
  mProcess process1(&snipParameters);

  AudioConnection     patchCord1(acq,0, process1,0);
    2b42:	ldr	r2, [pc, #320]	; (2c84 <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2b44:	ldr	r1, [pc, #356]	; (2cac <_GLOBAL__sub_I_acqParameters+0x2c8>)
    2b46:	mov	r0, r8
    2b48:	bl	af18 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2b4c:	ldr.w	r8, [pc, #392]	; 2cd8 <_GLOBAL__sub_I_acqParameters+0x2f4>
    2b50:	str.w	r4, [r9, #12]
    2b54:	mov.w	sl, #1
		{ isConnected = false;
		  connect(); }
    2b58:	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2b5a:	stmia.w	r9, {r5, fp}
		{ isConnected = false;
    2b5e:	strb.w	r4, [r9, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2b62:	strb.w	sl, [r9, #8]
    2b66:	strb.w	sl, [r9, #9]
		{ isConnected = false;
		  connect(); }
    2b6a:	bl	a590 <AudioConnection::connect()>
  AudioConnection     patchCord2(acq,1, process1,1);
    2b6e:	ldr	r2, [pc, #276]	; (2c84 <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2b70:	ldr	r1, [pc, #312]	; (2cac <_GLOBAL__sub_I_acqParameters+0x2c8>)
    2b72:	mov	r0, r9
    2b74:	bl	af18 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2b78:	ldr.w	r9, [pc, #352]	; 2cdc <_GLOBAL__sub_I_acqParameters+0x2f8>
    2b7c:	strb.w	r4, [r8, #8]
		{ isConnected = false;
		  connect(); }
    2b80:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2b82:	stmia.w	r8, {r5, r7}
    2b86:	strb.w	r4, [r8, #9]
    2b8a:	str.w	r4, [r8, #12]
		{ isConnected = false;
    2b8e:	strb.w	r4, [r8, #16]
		  connect(); }
    2b92:	bl	a590 <AudioConnection::connect()>
  #if MDEL <0
    AudioConnection     patchCord3(acq,0, queue[0],0);
    AudioConnection     patchCord4(acq,1, queue[1],0);
    
  #else
    AudioConnection     patchCord3(acq,0, delay1,0);
    2b96:	ldr	r2, [pc, #236]	; (2c84 <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2b98:	ldr	r1, [pc, #272]	; (2cac <_GLOBAL__sub_I_acqParameters+0x2c8>)
    2b9a:	mov	r0, r8
    2b9c:	bl	af18 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2ba0:	ldr.w	r8, [pc, #316]	; 2ce0 <_GLOBAL__sub_I_acqParameters+0x2fc>
    2ba4:	str.w	r4, [r9, #12]
		{ isConnected = false;
		  connect(); }
    2ba8:	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2baa:	stmia.w	r9, {r5, r7}
		{ isConnected = false;
    2bae:	strb.w	r4, [r9, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2bb2:	strb.w	sl, [r9, #8]
    2bb6:	strb.w	sl, [r9, #9]
		{ isConnected = false;
		  connect(); }
    2bba:	bl	a590 <AudioConnection::connect()>
    AudioConnection     patchCord4(acq,1, delay1,1);
    2bbe:	ldr	r2, [pc, #196]	; (2c84 <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2bc0:	ldr	r1, [pc, #232]	; (2cac <_GLOBAL__sub_I_acqParameters+0x2c8>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2bc2:	ldr	r5, [pc, #236]	; (2cb0 <_GLOBAL__sub_I_acqParameters+0x2cc>)
    2bc4:	mov	r0, r9
    2bc6:	bl	af18 <__aeabi_atexit>
		{ isConnected = false;
		  connect(); }
    2bca:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2bcc:	str.w	r7, [r8]
    2bd0:	str.w	r6, [r8, #4]
    2bd4:	strb.w	r4, [r8, #8]
    2bd8:	strb.w	r4, [r8, #9]
    2bdc:	str.w	r4, [r8, #12]
		{ isConnected = false;
    2be0:	strb.w	r4, [r8, #16]
		  connect(); }
    2be4:	bl	a590 <AudioConnection::connect()>
    AudioConnection     patchCord5(delay1,0, queue[0],0);
    2be8:	ldr	r2, [pc, #152]	; (2c84 <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2bea:	ldr	r1, [pc, #192]	; (2cac <_GLOBAL__sub_I_acqParameters+0x2c8>)
    2bec:	mov	r0, r8
    2bee:	bl	af18 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2bf2:	ldr	r3, [pc, #192]	; (2cb4 <_GLOBAL__sub_I_acqParameters+0x2d0>)
    2bf4:	str	r3, [r5, #4]
		{ isConnected = false;
		  connect(); }
    2bf6:	mov	r0, r5
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2bf8:	strb.w	sl, [r5, #8]
    2bfc:	str	r7, [r5, #0]
    2bfe:	strb	r4, [r5, #9]
    2c00:	str	r4, [r5, #12]
		{ isConnected = false;
    2c02:	strb	r4, [r5, #16]
		  connect(); }
    2c04:	bl	a590 <AudioConnection::connect()>
    AudioConnection     patchCord6(delay1,1, queue[1],0);
    2c08:	mov	r0, r5
    2c0a:	ldr	r2, [pc, #120]	; (2c84 <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2c0c:	ldr	r1, [pc, #156]	; (2cac <_GLOBAL__sub_I_acqParameters+0x2c8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2c0e:	ldr	r5, [pc, #168]	; (2cb8 <_GLOBAL__sub_I_acqParameters+0x2d4>)
    2c10:	bl	af18 <__aeabi_atexit>
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    2c14:	ldr	r3, [pc, #164]	; (2cbc <_GLOBAL__sub_I_acqParameters+0x2d8>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    2c16:	ldr	r0, [pc, #168]	; (2cc0 <_GLOBAL__sub_I_acqParameters+0x2dc>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2c18:	ldr.w	lr, [pc, #200]	; 2ce4 <_GLOBAL__sub_I_acqParameters+0x300>
    2c1c:	str.w	r4, [r3, #1144]	; 0x478
    2c20:	movs	r7, #40	; 0x28
    2c22:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    2c26:	strb.w	r4, [r3, #1168]	; 0x490
    2c2a:	strb.w	r4, [r3, #1194]	; 0x4aa
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2c2e:	strb.w	r4, [r3, #1200]	; 0x4b0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2c32:	strb.w	r4, [r3, #1208]	; 0x4b8
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    2c36:	str.w	r4, [r3, #1268]	; 0x4f4
    2c3a:	str.w	r4, [r3, #1272]	; 0x4f8
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    2c3e:	strh.w	r4, [r3, #1280]	; 0x500
    2c42:	mov.w	r6, #1000	; 0x3e8
    2c46:	movw	r4, #65535	; 0xffff
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2c4a:	ldr.w	ip, [pc, #156]	; 2ce8 <_GLOBAL__sub_I_acqParameters+0x304>
    2c4e:	strb.w	r7, [r3, #1191]	; 0x4a7
    2c52:	str.w	r0, [r3, #1172]	; 0x494
    2c56:	str.w	ip, [r3, #1160]	; 0x488
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2c5a:	mov	r0, r3
    2c5c:	str.w	lr, [r3, #1180]	; 0x49c
    2c60:	str.w	r6, [r3, #1204]	; 0x4b4
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2c64:	str.w	r5, [r3, #1196]	; 0x4ac
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    2c68:	strh.w	r4, [r3, #1276]	; 0x4fc
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2c6c:	ldr	r2, [pc, #20]	; (2c84 <_GLOBAL__sub_I_acqParameters+0x2a0>)
    2c6e:	ldr	r1, [pc, #84]	; (2cc4 <_GLOBAL__sub_I_acqParameters+0x2e0>)
    maxNoise=0;
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    2c70:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c74:	b.w	af18 <__aeabi_atexit>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    2c78:	str	r5, [r4, #0]
    2c7a:	b.n	2a14 <_GLOBAL__sub_I_acqParameters+0x30>
    2c7c:	str	r7, [r2, #0]
    2c7e:	b.n	2ac0 <_GLOBAL__sub_I_acqParameters+0xdc>
    2c80:	.word	0x2001de74
    2c84:	.word	0x20017730
    2c88:	.word	0x000007dd
    2c8c:	.word	0x2001d0c8
    2c90:	.word	0x2001d024
    2c94:	.word	0x000133ec
    2c98:	.word	0x2001d0d0
    2c9c:	.word	0x00013464
    2ca0:	.word	0x2001ccd4
    2ca4:	.word	0x00013404
    2ca8:	.word	0x00013458
    2cac:	.word	0x000007d1
    2cb0:	.word	0x2001d0b4
    2cb4:	.word	0x2001d548
    2cb8:	.word	0x00013434
    2cbc:	.word	0x2001839c
    2cc0:	.word	0x00013b50
    2cc4:	.word	0x000007b1
    2cc8:	.word	0x000133f8
    2ccc:	.word	0x2001d044
    2cd0:	.word	0x2001cd58
    2cd4:	.word	0x2001d00c
    2cd8:	.word	0x2001cde4
    2cdc:	.word	0x2001cdf8
    2ce0:	.word	0x2001cd94
    2ce4:	.word	0x38011001
    2ce8:	.word	0x00013ba8

00002cec <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    2cec:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2cee:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2cf0:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2cf2:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2cf4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2cf6:	beq.n	2d00 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2cf8:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2cfc:	b.w	9ffc <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2d00:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2d02:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2d06:	bx	r3

00002d08 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2d08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d0c:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2d0e:	ldr	r5, [r4, #12]
    2d10:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2d14:	ldr	r5, [pc, #484]	; (2efc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    2d16:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2d18:	bne.n	2dc0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2d1a:	lsls	r7, r3, #31
    2d1c:	bpl.w	2e86 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    2d20:	cmp	r1, #0
    2d22:	beq.w	2eec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2d26:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2d28:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2d2a:	it	ne
    2d2c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2d30:	str	r5, [r4, #52]	; 0x34
    2d32:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2d34:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2d38:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2d3c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2d40:	cmp.w	ip, #0
    2d44:	beq.w	2e98 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    2d48:	cbz	r1, 2d54 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    2d4a:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    2d4c:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    2d50:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2d54:	ldr	r5, [r0, #4]
    2d56:	ldrb	r6, [r5, #8]
			if (count == 2)
    2d58:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2d5c:	add.w	r6, r6, #4294967295
    2d60:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2d64:	ite	eq
    2d66:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2d6a:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2d6e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2d70:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2d72:	sub.w	ip, ip, #2
    2d76:	b.n	2d8a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2d78:	cbz	r2, 2d7e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    2d7a:	strb	r4, [r2, #0]
    2d7c:	adds	r2, #1
						} 
						count_read--;
    2d7e:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2d80:	and.w	r5, r5, #61440	; 0xf000
    2d84:	cmp	r5, r6
    2d86:	bls.n	2db6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    2d88:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2d8a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2d8c:	tst.w	r5, #240	; 0xf0
    2d90:	beq.n	2d80 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2d92:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2d94:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    2d98:	mov	r7, r2
    2d9a:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2d9e:	bne.n	2d78 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2da0:	cbz	r2, 2daa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    2da2:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    2da6:	strb	r4, [r2, #1]
    2da8:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2daa:	and.w	r5, r5, #61440	; 0xf000
    2dae:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    2db0:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2db4:	bhi.n	2d88 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    2db6:	cmp.w	ip, #0
    2dba:	beq.n	2e98 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2dbc:	ldr	r4, [r0, #0]
    2dbe:	b.n	2d48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2dc0:	lsls	r5, r3, #31
    2dc2:	bpl.n	2e5e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    2dc4:	cmp	r1, #0
    2dc6:	beq.w	2edc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2dca:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2dcc:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2dce:	it	ne
    2dd0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2dd4:	str	r5, [r4, #52]	; 0x34
    2dd6:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2dd8:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    2ddc:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2de0:	cmp.w	lr, #0
    2de4:	beq.n	2e6a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    2de6:	cbz	r1, 2df4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    2de8:	ldrb.w	ip, [r1, #1]
    2dec:	ldrb	r5, [r1, #0]
    2dee:	adds	r1, #2
    2df0:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2df4:	ldr	r5, [r0, #4]
    2df6:	ldrb	r6, [r5, #8]
			if (count == 2)
    2df8:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2dfc:	add.w	r6, r6, #4294967295
    2e00:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2e04:	ite	eq
    2e06:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2e0a:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2e0e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2e10:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2e12:	sub.w	lr, lr, #2
    2e16:	b.n	2e2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2e18:	cbz	r2, 2e1e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    2e1a:	strb	r4, [r2, #0]
    2e1c:	adds	r2, #1
						} 
						count_read--;
    2e1e:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2e20:	and.w	r5, r5, #61440	; 0xf000
    2e24:	cmp	r5, r6
    2e26:	bls.n	2e54 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    2e28:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    2e2a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2e2c:	tst.w	r5, #240	; 0xf0
    2e30:	beq.n	2e20 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2e32:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    2e36:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2e38:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2e3a:	bne.n	2e18 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2e3c:	cbz	r2, 2e48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    2e3e:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    2e42:	asrs	r4, r4, #8
    2e44:	strb	r4, [r2, #1]
    2e46:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2e48:	and.w	r5, r5, #61440	; 0xf000
    2e4c:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    2e4e:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2e52:	bhi.n	2e28 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    2e54:	cmp.w	lr, #0
    2e58:	beq.n	2e6a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    2e5a:	ldr	r4, [r0, #0]
    2e5c:	b.n	2de6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2e5e:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2e60:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2e64:	cmp.w	lr, #0
    2e68:	bne.n	2de6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2e6a:	cbz	r3, 2eb4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2e6c:	ldr	r4, [r0, #0]
			sr = port().SR;
    2e6e:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2e70:	tst.w	r1, #240	; 0xf0
    2e74:	beq.n	2e6e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2e76:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2e78:	lsls	r4, r3, #31
    2e7a:	bpl.n	2eb8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    2e7c:	cbz	r2, 2e82 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    2e7e:	strb	r1, [r2, #0]
    2e80:	adds	r2, #1
					count_read--;
    2e82:	subs	r3, #1
    2e84:	b.n	2e6a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2e86:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2e8a:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2e8c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2e90:	cmp.w	ip, #0
    2e94:	bne.w	2d48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2e98:	cbz	r3, 2eb4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    2e9a:	ldr	r4, [r0, #0]
			sr = port().SR;
    2e9c:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2e9e:	tst.w	r1, #240	; 0xf0
    2ea2:	beq.n	2e9c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    2ea4:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2ea6:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2ea8:	bpl.n	2eca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    2eaa:	cbz	r2, 2eb0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    2eac:	strb	r1, [r2, #0]
    2eae:	adds	r2, #1
					count_read--;
    2eb0:	subs	r3, #1
    2eb2:	b.n	2e98 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2eb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2eb8:	cbz	r2, 2ec6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    2eba:	mov	r4, r2
						*p_read++ = w >> 8;
    2ebc:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    2ebe:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    2ec2:	strb	r5, [r2, #1]
    2ec4:	mov	r2, r4
					}
					count_read -= 2;
    2ec6:	subs	r3, #2
    2ec8:	b.n	2e6a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2eca:	cbz	r2, 2ed8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    2ecc:	mov	r4, r2
    2ece:	asrs	r5, r1, #8
    2ed0:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    2ed4:	strb	r1, [r2, #1]
    2ed6:	mov	r2, r4
					}
					count_read -= 2;
    2ed8:	subs	r3, #2
    2eda:	b.n	2e98 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2edc:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2ee0:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2ee2:	it	ne
    2ee4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2ee8:	str	r5, [r4, #52]	; 0x34
    2eea:	b.n	2dd8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2eec:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2ef0:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2ef2:	it	ne
    2ef4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2ef8:	str	r5, [r4, #52]	; 0x34
    2efa:	b.n	2d34 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    2efc:	.word	0x801f0400

00002f00 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2f00:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2f02:	ldr	r3, [pc, #280]	; (301c <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2f04:	ldr	r2, [pc, #280]	; (3020 <_spi_dma_rxISR0()+0x120>)
    2f06:	ldr	r0, [r3, #56]	; 0x38
    2f08:	ldr	r4, [r3, #52]	; 0x34
    2f0a:	ldrb	r1, [r0, #4]
    2f0c:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2f0e:	ldr	r1, [pc, #276]	; (3024 <_spi_dma_rxISR0()+0x124>)
    2f10:	ldrb	r2, [r4, #4]
    2f12:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    2f14:	ldr	r2, [r3, #48]	; 0x30
    2f16:	ldrb	r0, [r0, #4]
    2f18:	strb	r0, [r1, #0]
    2f1a:	cmp	r2, #0
    2f1c:	beq.n	2fac <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    2f1e:	ldr	r1, [r3, #4]
    2f20:	ldr	r1, [r1, #12]
    2f22:	cmp	r2, r1
    2f24:	bhi.n	2fa4 <_spi_dma_rxISR0()+0xa4>
    2f26:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2f28:	ldrh	r4, [r1, #30]
    2f2a:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    2f2c:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2f30:	bmi.n	2ffe <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    2f32:	ubfx	r0, r0, #0, #15
    2f36:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2f38:	ldrh	r0, [r1, #30]
    2f3a:	uxth	r0, r0
    2f3c:	strh	r0, [r1, #22]
    2f3e:	ldr	r1, [r3, #56]	; 0x38
    2f40:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2f42:	ldrh	r0, [r1, #30]
    2f44:	lsls	r0, r0, #16
    2f46:	bmi.n	2fee <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    2f48:	ubfx	r0, r2, #0, #15
    2f4c:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2f4e:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    2f50:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2f52:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2f54:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2f58:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2f5a:	it	ne
    2f5c:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    2f5e:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    2f60:	ldr	r1, [r3, #52]	; 0x34
    2f62:	ldr	r0, [pc, #184]	; (301c <_spi_dma_rxISR0()+0x11c>)
    2f64:	ldr	r1, [r1, #0]
    2f66:	ldr	r5, [r1, #0]
    2f68:	add.w	r4, r0, #44	; 0x2c
    2f6c:	cmp	r5, r4
    2f6e:	beq.n	2fde <_spi_dma_rxISR0()+0xde>
    2f70:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2f72:	ldr	r4, [r0, #12]
    2f74:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2f78:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2f7a:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2f7c:	itete	ne
    2f7e:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    2f80:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2f82:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2f84:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2f86:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2f8a:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2f8c:	str	r4, [r0, #52]	; 0x34
    2f8e:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2f90:	ldr	r3, [pc, #148]	; (3028 <_spi_dma_rxISR0()+0x128>)
    2f92:	ldrb	r1, [r1, #4]
    2f94:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    2f96:	ldr	r1, [pc, #132]	; (301c <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    2f98:	cbz	r2, 2fa0 <_spi_dma_rxISR0()+0xa0>
    2f9a:	ldr	r2, [r1, #52]	; 0x34
    2f9c:	ldrb	r2, [r2, #4]
    2f9e:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2fa0:	pop	{r4, r5, r6, r7}
    2fa2:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    2fa4:	subs	r2, r2, r1
    2fa6:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2fa8:	movs	r2, #1
    2faa:	b.n	2f60 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2fac:	ldr	r0, [r3, #60]	; 0x3c
    2fae:	ldr	r1, [r3, #0]
    2fb0:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    2fb2:	ldr	r4, [pc, #120]	; (302c <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    2fb4:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    2fb6:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2fb8:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2fba:	ldr	r5, [r5, #0]
    2fbc:	ldr	r6, [pc, #112]	; (3030 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2fbe:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2fc2:	movs	r7, #3
    2fc4:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2fc6:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2fc8:	strb.w	r7, [r3, #45]	; 0x2d
    2fcc:	bne.n	300e <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2fce:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2fd0:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2fd2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2fd4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2fd6:	beq.n	3016 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2fd8:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2fda:	b.w	9ffc <EventResponder::triggerEventNotImmediate()>
    2fde:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2fe0:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2fe4:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2fe6:	orr.w	r0, r0, #2147483648	; 0x80000000
    2fea:	str	r0, [r1, #52]	; 0x34
    2fec:	b.n	2f8e <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2fee:	ldrh	r4, [r1, #30]
    2ff0:	ubfx	r0, r2, #0, #9
    2ff4:	and.w	r4, r4, #65024	; 0xfe00
    2ff8:	orrs	r0, r4
    2ffa:	strh	r0, [r1, #30]
    2ffc:	b.n	2f4e <_spi_dma_rxISR0()+0x4e>
    2ffe:	ldrh	r4, [r1, #30]
    3000:	ubfx	r0, r0, #0, #9
    3004:	and.w	r4, r4, #65024	; 0xfe00
    3008:	orrs	r0, r4
    300a:	strh	r0, [r1, #30]
    300c:	b.n	2f38 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    300e:	mov	r3, r5
    3010:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3012:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3014:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3016:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3018:	pop	{r4, r5, r6, r7}
    301a:	bx	r3
    301c:	.word	0x2001778c
    3020:	.word	0x4000801f
    3024:	.word	0x4000801c
    3028:	.word	0x4000801b
    302c:	.word	0xff0f0000
    3030:	.word	0x00002ced

00003034 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    3034:	cbz	r3, 303a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3036:	b.w	2d08 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    303a:	bx	lr

0000303c <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    303c:	ldr	r2, [pc, #400]	; (31d0 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    303e:	ldr	r3, [pc, #404]	; (31d4 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    3040:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3044:	ldr	r6, [pc, #400]	; (31d8 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3046:	ldr.w	sl, [pc, #416]	; 31e8 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    304a:	ldr	r4, [pc, #400]	; (31dc <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    304c:	ldr.w	r9, [pc, #400]	; 31e0 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    3050:	umull	r5, r2, r2, r0
    3054:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3058:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    305c:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3060:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3064:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3068:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    306a:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    306c:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3070:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3074:	rsb	r6, fp, r7
    3078:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    307c:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    307e:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3080:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3082:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    3086:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    308a:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    308e:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3092:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3094:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3098:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    309c:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    30a0:	adds	r6, #1
    30a2:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    30a4:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    30a6:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    30a8:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    30aa:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    30ac:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    30ae:	movw	fp, #365	; 0x16d
    30b2:	mov.w	r8, #100	; 0x64
    30b6:	mov.w	sl, #400	; 0x190
    30ba:	b.n	30da <breakTime(long, tmElements_t&)+0x9e>
    30bc:	rsb	r5, r6, r5, asr #7
    30c0:	mls	r5, sl, r5, r3
    30c4:	cbnz	r0, 3124 <breakTime(long, tmElements_t&)+0xe8>
    30c6:	cmp	r5, #0
    30c8:	ite	ne
    30ca:	movne	r0, fp
    30cc:	moveq.w	r0, #366	; 0x16e
    30d0:	add	r2, r0
    30d2:	cmp	ip, r2
    30d4:	add.w	r4, r4, #1
    30d8:	bcc.n	3102 <breakTime(long, tmElements_t&)+0xc6>
    30da:	uxtb	r7, r4
    30dc:	addw	r3, r7, #1970	; 0x7b2
    30e0:	smull	r0, r5, r9, r3
    30e4:	asrs	r6, r3, #31
    30e6:	rsb	r0, r6, r5, asr #5
    30ea:	ands.w	lr, r3, #3
    30ee:	mls	r0, r8, r0, r3
    30f2:	beq.n	30bc <breakTime(long, tmElements_t&)+0x80>
    30f4:	movw	r0, #365	; 0x16d
    30f8:	add	r2, r0
    30fa:	cmp	ip, r2
    30fc:	add.w	r4, r4, #1
    3100:	bcs.n	30da <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    3102:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3104:	cmp.w	lr, #0
    3108:	bne.n	312a <breakTime(long, tmElements_t&)+0xee>
    310a:	ldr	r0, [pc, #212]	; (31e0 <breakTime(long, tmElements_t&)+0x1a4>)
    310c:	asrs	r6, r3, #31
    310e:	smull	r4, r0, r0, r3
    3112:	rsb	r4, r6, r0, asr #5
    3116:	movs	r5, #100	; 0x64
    3118:	mls	r4, r5, r4, r3
    311c:	cbz	r4, 318e <breakTime(long, tmElements_t&)+0x152>
    311e:	mov.w	r4, #366	; 0x16e
    3122:	b.n	3130 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3124:	mov.w	r0, #366	; 0x16e
    3128:	b.n	30d0 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    312a:	movw	r4, #365	; 0x16d
    312e:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3130:	ldr	r0, [pc, #172]	; (31e0 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    3132:	ldr	r5, [pc, #176]	; (31e4 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3134:	smull	r7, r0, r0, r3
    3138:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    313c:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    313e:	rsb	r6, r6, r0, asr #7
    3142:	movs	r4, #100	; 0x64
    3144:	mov.w	r0, #400	; 0x190
    3148:	mls	r6, r0, r6, r3
    314c:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    3150:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3154:	movs	r0, #1
    3156:	movs	r3, #0
    3158:	b.n	3160 <breakTime(long, tmElements_t&)+0x124>
    315a:	adds	r0, #1
    315c:	uxtb	r0, r0
    315e:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    3160:	cmp	r3, #1
    3162:	uxtb	r7, r3
    3164:	beq.n	31a8 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    3166:	ldrb	r4, [r3, r5]
    3168:	cmp	r4, r2
    316a:	bhi.n	3180 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    316c:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    316e:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    3172:	bne.n	315a <breakTime(long, tmElements_t&)+0x11e>
    3174:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    3176:	adds	r2, #1
    3178:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    317a:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    317c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3180:	adds	r7, #1
    3182:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    3184:	adds	r2, #1
    3186:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    3188:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    318a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    318e:	mov.w	r4, #400	; 0x190
    3192:	rsb	r0, r6, r0, asr #7
    3196:	mls	r0, r4, r0, r3
    319a:	cmp	r0, #0
    319c:	movw	r4, #365	; 0x16d
    31a0:	it	eq
    31a2:	moveq.w	r4, #366	; 0x16e
    31a6:	b.n	3130 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    31a8:	cmp.w	lr, #0
    31ac:	bne.n	31c4 <breakTime(long, tmElements_t&)+0x188>
    31ae:	cmp.w	r8, #0
    31b2:	bne.n	31cc <breakTime(long, tmElements_t&)+0x190>
    31b4:	cmp	r6, #0
    31b6:	ite	ne
    31b8:	movne	r4, #28
    31ba:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    31bc:	cmp	r2, r4
    31be:	bcc.n	31c8 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    31c0:	subs	r2, r2, r4
    31c2:	b.n	315a <breakTime(long, tmElements_t&)+0x11e>
    31c4:	movs	r4, #28
    31c6:	b.n	31bc <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    31c8:	movs	r7, #2
    31ca:	b.n	3176 <breakTime(long, tmElements_t&)+0x13a>
    31cc:	movs	r4, #29
    31ce:	b.n	31bc <breakTime(long, tmElements_t&)+0x180>
    31d0:	.word	0xc22e4507
    31d4:	.word	0x88888889
    31d8:	.word	0x91a2b3c5
    31dc:	.word	0xaaaaaaab
    31e0:	.word	0x51eb851f
    31e4:	.word	0x00013a98
    31e8:	.word	0x24924925

000031ec <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    31ec:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    31ee:	ldr	r1, [pc, #12]	; (31fc <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    31f0:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    31f2:	bl	303c <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    31f6:	ldr	r3, [pc, #8]	; (3200 <refreshCache(long) [clone .part.0]+0x14>)
    31f8:	str	r4, [r3, #0]
    31fa:	pop	{r4, pc}
    31fc:	.word	0x2001d9d4
    3200:	.word	0x2001d9d0

00003204 <makeTime(tmElements_t const&)>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(const tmElements_t &tm){   
    3204:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    3208:	ldr	r1, [pc, #228]	; (32f0 <makeTime(tmElements_t const&)+0xec>)
    320a:	ldrb	r6, [r0, #6]
    320c:	mul.w	r1, r1, r6
  for (i = 0; i < tm.Year; i++) {
    3210:	cbz	r6, 3254 <makeTime(tmElements_t const&)+0x50>
    3212:	addw	ip, r6, #1970	; 0x7b2
    3216:	movw	r3, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    321a:	ldr.w	lr, [pc, #216]	; 32f4 <makeTime(tmElements_t const&)+0xf0>
    321e:	movs	r7, #100	; 0x64
    3220:	mov.w	r8, #400	; 0x190
    3224:	b.n	3242 <makeTime(tmElements_t const&)+0x3e>
    3226:	tst.w	r3, #3
    322a:	bne.n	3240 <makeTime(tmElements_t const&)+0x3c>
    322c:	rsb	r2, r2, r5, asr #7
    3230:	mls	r2, r8, r2, r3
    3234:	cbnz	r4, 3238 <makeTime(tmElements_t const&)+0x34>
    3236:	cbnz	r2, 3240 <makeTime(tmElements_t const&)+0x3c>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    3238:	add.w	r1, r1, #86016	; 0x15000
    323c:	add.w	r1, r1, #384	; 0x180
    3240:	adds	r3, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    3242:	smull	r2, r5, lr, r3
    3246:	asrs	r2, r3, #31
    3248:	rsb	r4, r2, r5, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    324c:	cmp	r3, ip
    if (LEAP_YEAR(i)) {
    324e:	mls	r4, r7, r4, r3
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    3252:	bne.n	3226 <makeTime(tmElements_t const&)+0x22>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    3254:	ldrb	r7, [r0, #5]
    3256:	cmp	r7, #1
    3258:	ble.n	32ba <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    325a:	ldr	r4, [pc, #152]	; (32f4 <makeTime(tmElements_t const&)+0xf0>)
    325c:	ldr	r2, [pc, #152]	; (32f8 <makeTime(tmElements_t const&)+0xf4>)
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    325e:	ldr.w	lr, [pc, #156]	; 32fc <makeTime(tmElements_t const&)+0xf8>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    3262:	addw	r3, r6, #1970	; 0x7b2
    3266:	smull	r4, r6, r4, r3
    326a:	asrs	r4, r3, #31
    326c:	rsb	ip, r4, r6, asr #5
    3270:	movs	r5, #100	; 0x64
    3272:	rsb	r6, r4, r6, asr #7
    3276:	mov.w	r4, #400	; 0x190
    327a:	mls	ip, r5, ip, r3
    327e:	mls	r6, r4, r6, r3
    3282:	and.w	r5, r3, #3
    3286:	movs	r3, #1
    3288:	b.n	329a <makeTime(tmElements_t const&)+0x96>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    328a:	ldrb	r4, [r2, #0]
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    328c:	adds	r3, #1
    328e:	cmp	r3, r7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    3290:	mla	r1, lr, r4, r1
    3294:	add.w	r2, r2, #1
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    3298:	beq.n	32ba <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    329a:	cmp	r3, #2
    329c:	bne.n	328a <makeTime(tmElements_t const&)+0x86>
    329e:	cmp	r5, #0
    32a0:	bne.n	328a <makeTime(tmElements_t const&)+0x86>
    32a2:	cmp.w	ip, #0
    32a6:	beq.n	32e0 <makeTime(tmElements_t const&)+0xdc>
      seconds += SECS_PER_DAY * 29;
    32a8:	add.w	r1, r1, #2490368	; 0x260000
    32ac:	add.w	r1, r1, #15232	; 0x3b80
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    32b0:	adds	r3, #1
    32b2:	cmp	r3, r7
    32b4:	add.w	r2, r2, #1
    32b8:	bne.n	329a <makeTime(tmElements_t const&)+0x96>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
    32ba:	ldrb	r3, [r0, #1]
    32bc:	ldrb	r5, [r0, #2]
    32be:	ldrb	r4, [r0, #0]
    32c0:	ldrb	r2, [r0, #4]
    32c2:	ldr	r0, [pc, #56]	; (32fc <makeTime(tmElements_t const&)+0xf8>)
    32c4:	rsb	r3, r3, r3, lsl #4
    32c8:	mov.w	r6, #3600	; 0xe10
    32cc:	lsls	r3, r3, #2
    32ce:	mla	r3, r6, r5, r3
    32d2:	add	r3, r4
    32d4:	subs	r2, #1
    32d6:	mla	r0, r0, r2, r3
}
    32da:	add	r0, r1
    32dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    32e0:	cmp	r6, #0
    32e2:	bne.n	328a <makeTime(tmElements_t const&)+0x86>
      seconds += SECS_PER_DAY * 29;
    32e4:	add.w	r1, r1, #2490368	; 0x260000
    32e8:	add.w	r1, r1, #15232	; 0x3b80
    32ec:	b.n	32b0 <makeTime(tmElements_t const&)+0xac>
    32ee:	nop
    32f0:	.word	0x01e13380
    32f4:	.word	0x51eb851f
    32f8:	.word	0x00013a98
    32fc:	.word	0x00015180

00003300 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    3300:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3302:	ldr	r4, [pc, #128]	; (3384 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3304:	ldr	r6, [pc, #128]	; (3388 <now()+0x88>)
    3306:	ldr	r3, [r4, #0]
    3308:	ldr	r2, [r6, #0]
    330a:	ldr	r5, [pc, #128]	; (338c <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    330c:	sub	sp, #12
    330e:	ldr	r0, [r5, #0]
    3310:	str	r3, [sp, #0]
	return ret;
    3312:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3314:	subs	r3, r3, r2
    3316:	cmp.w	r3, #1000	; 0x3e8
    331a:	bcc.n	333c <now()+0x3c>
    331c:	adds	r0, #1
    331e:	b.n	3322 <now()+0x22>
    3320:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3322:	ldr	r3, [r4, #0]
    3324:	str	r3, [sp, #0]
	return ret;
    3326:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    3328:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    332c:	subs	r3, r3, r2
    332e:	cmp.w	r3, #1000	; 0x3e8
    3332:	add.w	r1, r0, #1
    3336:	bcs.n	3320 <now()+0x20>
    3338:	str	r0, [r5, #0]
    333a:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    333c:	ldr	r7, [pc, #80]	; (3390 <now()+0x90>)
    333e:	ldr	r3, [r7, #0]
    3340:	cmp	r0, r3
    3342:	bcc.n	3364 <now()+0x64>
    if (getTimePtr != 0) {
    3344:	ldr	r3, [pc, #76]	; (3394 <now()+0x94>)
    3346:	ldr	r3, [r3, #0]
    3348:	cbz	r3, 3364 <now()+0x64>
      time_t t = getTimePtr();
    334a:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    334c:	ldr	r3, [pc, #72]	; (3398 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    334e:	cbnz	r0, 3368 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3350:	ldr	r1, [pc, #72]	; (339c <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3352:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3354:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3356:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3358:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    335a:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    335c:	it	ne
    335e:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3360:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3362:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    3364:	add	sp, #12
    3366:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3368:	ldr	r2, [r4, #0]
    336a:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    336c:	ldr	r3, [r3, #0]
  Status = timeSet;
    336e:	ldr	r2, [pc, #44]	; (339c <now()+0x9c>)
	return ret;
    3370:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    3372:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    3374:	add	r3, r0
  Status = timeSet;
    3376:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    3378:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    337a:	str	r3, [r7, #0]
  Status = timeSet;
    337c:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    337e:	add	sp, #12
    3380:	pop	{r4, r5, r6, r7, pc}
    3382:	nop
    3384:	.word	0x2001dd64
    3388:	.word	0x2001d9e8
    338c:	.word	0x2001d9dc
    3390:	.word	0x2001d9ec
    3394:	.word	0x2001d9e4
    3398:	.word	0x200177cc
    339c:	.word	0x2001d9e0

000033a0 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    33a0:	push	{r3, lr}
  return hour(now()); 
    33a2:	bl	3300 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    33a6:	ldr	r3, [pc, #16]	; (33b8 <hour()+0x18>)
    33a8:	ldr	r3, [r3, #0]
    33aa:	cmp	r0, r3
    33ac:	beq.n	33b2 <hour()+0x12>
    33ae:	bl	31ec <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    33b2:	ldr	r3, [pc, #8]	; (33bc <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    33b4:	ldrb	r0, [r3, #2]
    33b6:	pop	{r3, pc}
    33b8:	.word	0x2001d9d0
    33bc:	.word	0x2001d9d4

000033c0 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    33c0:	push	{r3, lr}
  return minute(now()); 
    33c2:	bl	3300 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    33c6:	ldr	r3, [pc, #16]	; (33d8 <minute()+0x18>)
    33c8:	ldr	r3, [r3, #0]
    33ca:	cmp	r0, r3
    33cc:	beq.n	33d2 <minute()+0x12>
    33ce:	bl	31ec <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    33d2:	ldr	r3, [pc, #8]	; (33dc <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    33d4:	ldrb	r0, [r3, #1]
    33d6:	pop	{r3, pc}
    33d8:	.word	0x2001d9d0
    33dc:	.word	0x2001d9d4

000033e0 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    33e0:	push	{r3, lr}
  return second(now()); 
    33e2:	bl	3300 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    33e6:	ldr	r3, [pc, #16]	; (33f8 <second()+0x18>)
    33e8:	ldr	r3, [r3, #0]
    33ea:	cmp	r0, r3
    33ec:	beq.n	33f2 <second()+0x12>
    33ee:	bl	31ec <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    33f2:	ldr	r3, [pc, #8]	; (33fc <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    33f4:	ldrb	r0, [r3, #0]
    33f6:	pop	{r3, pc}
    33f8:	.word	0x2001d9d0
    33fc:	.word	0x2001d9d4

00003400 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    3400:	push	{r3, lr}
  return(day(now())); 
    3402:	bl	3300 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3406:	ldr	r3, [pc, #16]	; (3418 <day()+0x18>)
    3408:	ldr	r3, [r3, #0]
    340a:	cmp	r0, r3
    340c:	beq.n	3412 <day()+0x12>
    340e:	bl	31ec <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    3412:	ldr	r3, [pc, #8]	; (341c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    3414:	ldrb	r0, [r3, #4]
    3416:	pop	{r3, pc}
    3418:	.word	0x2001d9d0
    341c:	.word	0x2001d9d4

00003420 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    3420:	push	{r3, lr}
  return month(now()); 
    3422:	bl	3300 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3426:	ldr	r3, [pc, #16]	; (3438 <month()+0x18>)
    3428:	ldr	r3, [r3, #0]
    342a:	cmp	r0, r3
    342c:	beq.n	3432 <month()+0x12>
    342e:	bl	31ec <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    3432:	ldr	r3, [pc, #8]	; (343c <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    3434:	ldrb	r0, [r3, #5]
    3436:	pop	{r3, pc}
    3438:	.word	0x2001d9d0
    343c:	.word	0x2001d9d4

00003440 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    3440:	push	{r3, lr}
  return year(now()); 
    3442:	bl	3300 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3446:	ldr	r3, [pc, #20]	; (345c <year()+0x1c>)
    3448:	ldr	r3, [r3, #0]
    344a:	cmp	r0, r3
    344c:	beq.n	3452 <year()+0x12>
    344e:	bl	31ec <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    3452:	ldr	r3, [pc, #12]	; (3460 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    3454:	ldrb	r0, [r3, #6]
}
    3456:	addw	r0, r0, #1970	; 0x7b2
    345a:	pop	{r3, pc}
    345c:	.word	0x2001d9d0
    3460:	.word	0x2001d9d4

00003464 <setTime(long)>:
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    3464:	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3466:	ldr	r3, [pc, #40]	; (3490 <setTime(long)+0x2c>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    3468:	ldr	r2, [pc, #40]	; (3494 <setTime(long)+0x30>)
    346a:	ldr	r3, [r3, #0]
    346c:	ldr	r2, [r2, #0]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    346e:	ldr	r6, [pc, #40]	; (3498 <setTime(long)+0x34>)
  nextSyncTime = (uint32_t)t + syncInterval;
    3470:	ldr	r5, [pc, #40]	; (349c <setTime(long)+0x38>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    3472:	ldr	r1, [pc, #44]	; (34a0 <setTime(long)+0x3c>)
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    3474:	str	r0, [r6, #0]
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    3476:	sub	sp, #12
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    3478:	add	r0, r2
    347a:	str	r3, [sp, #4]
	return ret;
    347c:	ldr	r4, [sp, #4]
  Status = timeSet;
    347e:	ldr	r3, [pc, #36]	; (34a4 <setTime(long)+0x40>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    3480:	str	r0, [r5, #0]
  Status = timeSet;
    3482:	movs	r2, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    3484:	str	r4, [r1, #0]
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    3486:	strb	r2, [r3, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 
    3488:	add	sp, #12
    348a:	pop	{r4, r5, r6}
    348c:	bx	lr
    348e:	nop
    3490:	.word	0x2001dd64
    3494:	.word	0x200177cc
    3498:	.word	0x2001d9dc
    349c:	.word	0x2001d9ec
    34a0:	.word	0x2001d9e8
    34a4:	.word	0x2001d9e0

000034a8 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    34a8:	ldr	r1, [pc, #12]	; (34b8 <setSyncProvider(long (*)())+0x10>)
    34aa:	ldr	r2, [pc, #16]	; (34bc <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    34ac:	ldr	r3, [pc, #16]	; (34c0 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    34ae:	ldr	r1, [r1, #0]
    34b0:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    34b2:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    34b4:	b.w	3300 <now()>
    34b8:	.word	0x2001d9dc
    34bc:	.word	0x2001d9ec
    34c0:	.word	0x2001d9e4

000034c4 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    34c4:	ldr	r2, [pc, #8]	; (34d0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    34c6:	ldr	r1, [pc, #12]	; (34d4 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    34c8:	ldr	r0, [pc, #12]	; (34d8 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    34ca:	b.w	af18 <__aeabi_atexit>
    34ce:	nop
    34d0:	.word	0x20017730
    34d4:	.word	0x000007dd
    34d8:	.word	0x2001d9f0

000034dc <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    34dc:	ldr	r2, [pc, #8]	; (34e8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    34de:	ldr	r1, [pc, #12]	; (34ec <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    34e0:	ldr	r0, [pc, #12]	; (34f0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    34e2:	b.w	af18 <__aeabi_atexit>
    34e6:	nop
    34e8:	.word	0x20017730
    34ec:	.word	0x000007dd
    34f0:	.word	0x2001d9f8

000034f4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    34f4:	ldr	r2, [pc, #8]	; (3500 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    34f6:	ldr	r1, [pc, #12]	; (3504 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    34f8:	ldr	r0, [pc, #12]	; (3508 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    34fa:	b.w	af18 <__aeabi_atexit>
    34fe:	nop
    3500:	.word	0x20017730
    3504:	.word	0x000007dd
    3508:	.word	0x2001da00

0000350c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    350c:	ldr	r2, [pc, #8]	; (3518 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    350e:	ldr	r1, [pc, #12]	; (351c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    3510:	ldr	r0, [pc, #12]	; (3520 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    3512:	b.w	af18 <__aeabi_atexit>
    3516:	nop
    3518:	.word	0x20017730
    351c:	.word	0x000007dd
    3520:	.word	0x2001da08

00003524 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    3524:	ldr	r2, [pc, #8]	; (3530 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    3526:	ldr	r1, [pc, #12]	; (3534 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    3528:	ldr	r0, [pc, #12]	; (3538 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    352a:	b.w	af18 <__aeabi_atexit>
    352e:	nop
    3530:	.word	0x20017730
    3534:	.word	0x000007dd
    3538:	.word	0x2001da10

0000353c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    353c:	ldr	r2, [pc, #8]	; (3548 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    353e:	ldr	r1, [pc, #12]	; (354c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    3540:	ldr	r0, [pc, #12]	; (3550 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    3542:	b.w	af18 <__aeabi_atexit>
    3546:	nop
    3548:	.word	0x20017730
    354c:	.word	0x000007dd
    3550:	.word	0x2001da18

00003554 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    3554:	ldr	r2, [pc, #8]	; (3560 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    3556:	ldr	r1, [pc, #12]	; (3564 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    3558:	ldr	r0, [pc, #12]	; (3568 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    355a:	b.w	af18 <__aeabi_atexit>
    355e:	nop
    3560:	.word	0x20017730
    3564:	.word	0x000007dd
    3568:	.word	0x2001da20

0000356c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    356c:	ldr	r2, [pc, #8]	; (3578 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    356e:	ldr	r1, [pc, #12]	; (357c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    3570:	ldr	r0, [pc, #12]	; (3580 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    3572:	b.w	af18 <__aeabi_atexit>
    3576:	nop
    3578:	.word	0x20017730
    357c:	.word	0x000007dd
    3580:	.word	0x2001da28

00003584 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    3584:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    3586:	ldr	r5, [pc, #28]	; (35a4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    3588:	ldr	r4, [pc, #28]	; (35a8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    358a:	ldr	r0, [pc, #32]	; (35ac <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    358c:	mov	r2, r5
    358e:	mov	r1, r4
    3590:	bl	af18 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    3594:	mov	r2, r5
    3596:	mov	r1, r4
    3598:	ldr	r0, [pc, #20]	; (35b0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    359a:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    359e:	b.w	af18 <__aeabi_atexit>
    35a2:	nop
    35a4:	.word	0x20017730
    35a8:	.word	0x000007dd
    35ac:	.word	0x2001da30
    35b0:	.word	0x2001da38

000035b4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    35b4:	ldr	r2, [pc, #8]	; (35c0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    35b6:	ldr	r1, [pc, #12]	; (35c4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    35b8:	ldr	r0, [pc, #12]	; (35c8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    35ba:	b.w	af18 <__aeabi_atexit>
    35be:	nop
    35c0:	.word	0x20017730
    35c4:	.word	0x000007dd
    35c8:	.word	0x2001da40

000035cc <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    35cc:	ldr	r2, [pc, #8]	; (35d8 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    35ce:	ldr	r1, [pc, #12]	; (35dc <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    35d0:	ldr	r0, [pc, #12]	; (35e0 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    35d2:	b.w	af18 <__aeabi_atexit>
    35d6:	nop
    35d8:	.word	0x20017730
    35dc:	.word	0x000007dd
    35e0:	.word	0x2001da48

000035e4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    35e4:	ldr	r2, [pc, #8]	; (35f0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    35e6:	ldr	r1, [pc, #12]	; (35f4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    35e8:	ldr	r0, [pc, #12]	; (35f8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    35ea:	b.w	af18 <__aeabi_atexit>
    35ee:	nop
    35f0:	.word	0x20017730
    35f4:	.word	0x000007dd
    35f8:	.word	0x2001da50

000035fc <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    35fc:	ldr	r2, [pc, #8]	; (3608 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    35fe:	ldr	r1, [pc, #12]	; (360c <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    3600:	ldr	r0, [pc, #12]	; (3610 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    3602:	b.w	af18 <__aeabi_atexit>
    3606:	nop
    3608:	.word	0x20017730
    360c:	.word	0x000007dd
    3610:	.word	0x2001da58

00003614 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    3614:	ldr	r2, [pc, #8]	; (3620 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    3616:	ldr	r1, [pc, #12]	; (3624 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    3618:	ldr	r0, [pc, #12]	; (3628 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    361a:	b.w	af18 <__aeabi_atexit>
    361e:	nop
    3620:	.word	0x20017730
    3624:	.word	0x000007dd
    3628:	.word	0x2001da60

0000362c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    362c:	ldr	r2, [pc, #8]	; (3638 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    362e:	ldr	r1, [pc, #12]	; (363c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    3630:	ldr	r0, [pc, #12]	; (3640 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    3632:	b.w	af18 <__aeabi_atexit>
    3636:	nop
    3638:	.word	0x20017730
    363c:	.word	0x000007dd
    3640:	.word	0x2001da68

00003644 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    3644:	ldr	r2, [pc, #8]	; (3650 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    3646:	ldr	r1, [pc, #12]	; (3654 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    3648:	ldr	r0, [pc, #12]	; (3658 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    364a:	b.w	af18 <__aeabi_atexit>
    364e:	nop
    3650:	.word	0x20017730
    3654:	.word	0x000007dd
    3658:	.word	0x2001da70

0000365c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    365c:	ldr	r2, [pc, #8]	; (3668 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    365e:	ldr	r1, [pc, #12]	; (366c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    3660:	ldr	r0, [pc, #12]	; (3670 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    3662:	b.w	af18 <__aeabi_atexit>
    3666:	nop
    3668:	.word	0x20017730
    366c:	.word	0x000007dd
    3670:	.word	0x2001da78

00003674 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    3674:	ldrb.w	r2, [r0, #57]	; 0x39
    3678:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    367c:	subs	r0, r2, r0
    367e:	bx	lr

00003680 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3680:	ldrb.w	r3, [r0, #56]	; 0x38
    3684:	ldrb.w	r2, [r0, #57]	; 0x39
    3688:	cmp	r2, r3
    368a:	bls.n	3698 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    368c:	adds	r2, r3, #1
    368e:	add	r3, r0
    3690:	strb.w	r2, [r0, #56]	; 0x38
    3694:	ldrb	r0, [r3, #24]
    3696:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3698:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    369c:	bx	lr
    369e:	nop

000036a0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    36a0:	ldrb.w	r3, [r0, #56]	; 0x38
    36a4:	ldrb.w	r2, [r0, #57]	; 0x39
    36a8:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    36aa:	itte	hi
    36ac:	addhi	r3, r3, r0
    36ae:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    36b0:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    36b4:	bx	lr
    36b6:	nop

000036b8 <TwoWire::flush()>:
	virtual void flush(void) {
    36b8:	bx	lr
    36ba:	nop

000036bc <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    36bc:	push	{r3, r4, r5, lr}
    36be:	mov	r5, r0
	if (transmitting || slave_mode) {
    36c0:	ldrh.w	r0, [r0, #94]	; 0x5e
    36c4:	cbz	r0, 36ec <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    36c6:	ldrb.w	r3, [r5, #93]	; 0x5d
    36ca:	mov	r4, r2
    36cc:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    36d0:	cmp	r4, r2
    36d2:	bhi.n	36ee <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    36d4:	add.w	r0, r5, #59	; 0x3b
    36d8:	add	r0, r3
    36da:	mov	r2, r4
    36dc:	bl	87fc <memcpy>
		txBufferLength += quantity;
    36e0:	ldrb.w	r3, [r5, #93]	; 0x5d
    36e4:	add	r3, r4
    36e6:	strb.w	r3, [r5, #93]	; 0x5d
    36ea:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    36ec:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    36ee:	movs	r0, #1
    36f0:	mov	r4, r2
    36f2:	strb	r0, [r5, #4]
    36f4:	b.n	36d4 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    36f6:	nop

000036f8 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    36f8:	ldrh.w	r3, [r0, #94]	; 0x5e
    36fc:	cbz	r3, 371a <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    36fe:	ldrb.w	r3, [r0, #93]	; 0x5d
    3702:	cmp	r3, #32
    3704:	bhi.n	3716 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    3706:	adds	r2, r0, r3
    3708:	adds	r3, #1
    370a:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    370e:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    3710:	strb.w	r1, [r2, #59]	; 0x3b
    3714:	bx	lr
    3716:	movs	r3, #1
    3718:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    371a:	movs	r0, #0
    371c:	bx	lr
    371e:	nop

00003720 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    3720:	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    3722:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    3724:	ldrb	r4, [r2, #3]
    3726:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    3728:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    372a:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    372c:	bpl.n	3778 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    372e:	movs	r3, #16
    3730:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    3732:	lsls	r3, r4, #25
    3734:	bpl.n	3776 <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    3736:	and.w	r4, r4, #4
    373a:	and.w	r3, r4, #255	; 0xff
    373e:	cmp	r4, #0
    3740:	beq.n	37f8 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3742:	ldr	r1, [pc, #264]	; (384c <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    3744:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3746:	movs	r3, #0
    3748:	strb	r3, [r1, #0]
			txBufferLength = 0;
    374a:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    374e:	cmp	r2, #0
    3750:	beq.n	3820 <TwoWire::isr()+0x100>
				user_onRequest();
    3752:	blx	r2
			}
			if (txBufferLength == 0) {
    3754:	ldrb.w	r3, [r5, #93]	; 0x5d
    3758:	cmp	r3, #0
    375a:	beq.n	3820 <TwoWire::isr()+0x100>
    375c:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    375e:	movs	r2, #208	; 0xd0
    3760:	strb	r2, [r3, #2]
    3762:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    3764:	ldrb.w	r2, [r5, #59]	; 0x3b
    3768:	strb	r2, [r3, #4]
    376a:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    376c:	movs	r2, #1
    376e:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3772:	movs	r2, #2
    3774:	strb	r2, [r3, #3]
    3776:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    3778:	and.w	r3, r4, #64	; 0x40
    377c:	and.w	r0, r3, #255	; 0xff
    3780:	cmp	r3, #0
    3782:	bne.n	3736 <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    3784:	ldrb	r3, [r2, #6]
    3786:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    3788:	and.w	r1, r3, #96	; 0x60
    378c:	cmp	r1, #96	; 0x60
    378e:	beq.n	382e <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    3790:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    3792:	and.w	r3, r3, #16
    3796:	and.w	r1, r3, #255	; 0xff
    379a:	cbz	r3, 37ca <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    379c:	ands.w	r4, r4, #1
    37a0:	bne.n	3812 <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    37a2:	ldrb.w	r3, [r5, #92]	; 0x5c
    37a6:	ldrb.w	r1, [r5, #93]	; 0x5d
    37aa:	cmp	r1, r3
    37ac:	bls.n	3846 <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    37ae:	adds	r1, r3, #1
    37b0:	add	r3, r5
    37b2:	strb.w	r1, [r5, #92]	; 0x5c
    37b6:	ldrb.w	r3, [r3, #59]	; 0x3b
    37ba:	strb	r3, [r2, #4]
    37bc:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    37be:	movs	r2, #208	; 0xd0
    37c0:	strb	r2, [r3, #2]
    37c2:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    37c4:	movs	r2, #2
    37c6:	strb	r2, [r3, #3]
    37c8:	b.n	3776 <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    37ca:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    37ce:	ldrb	r3, [r2, #6]
    37d0:	orr.w	r3, r3, #32
    37d4:	strb	r3, [r2, #6]
    37d6:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    37d8:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    37dc:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    37de:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    37e0:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    37e2:	bhi.n	3772 <TwoWire::isr()+0x52>
    37e4:	ldr	r0, [pc, #100]	; (384c <TwoWire::isr()+0x12c>)
    37e6:	ldrb	r0, [r0, #0]
    37e8:	cmp	r0, #0
    37ea:	beq.n	3772 <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    37ec:	adds	r0, r5, r1
    37ee:	adds	r1, #1
    37f0:	strb.w	r1, [r5, #57]	; 0x39
    37f4:	strb	r2, [r0, #24]
    37f6:	b.n	3772 <TwoWire::isr()+0x52>
    37f8:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    37fa:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    37fe:	movs	r3, #192	; 0xc0
    3800:	strb	r3, [r2, #2]
    3802:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3804:	ldr	r2, [pc, #68]	; (384c <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    3806:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3808:	movs	r1, #1
    380a:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    380c:	movs	r2, #2
    380e:	strb	r2, [r3, #3]
    3810:	b.n	3776 <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    3812:	movs	r3, #192	; 0xc0
    3814:	strb	r3, [r2, #2]
    3816:	ldr	r3, [r5, #16]
			data = port().D;
    3818:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    381a:	movs	r2, #2
    381c:	strb	r2, [r3, #3]
    381e:	b.n	3776 <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3820:	movs	r2, #1
				txBuffer[0] = 0;
    3822:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3824:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    3828:	strb.w	r3, [r5, #59]	; 0x3b
    382c:	b.n	375c <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    382e:	and.w	r3, r3, #223	; 0xdf
    3832:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    3834:	ldr	r3, [r5, #104]	; 0x68
    3836:	cbz	r3, 3842 <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    3838:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    383c:	ldrb.w	r0, [r5, #57]	; 0x39
    3840:	blx	r3
    3842:	ldr	r2, [r5, #16]
    3844:	b.n	3790 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    3846:	strb	r4, [r2, #4]
    3848:	b.n	37bc <TwoWire::isr()+0x9c>
    384a:	nop
    384c:	.word	0x2001da80

00003850 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    3850:	ldr	r0, [pc, #4]	; (3858 <i2c0_isr+0x8>)
    3852:	b.w	3720 <TwoWire::isr()>
    3856:	nop
    3858:	.word	0x2001783c

0000385c <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    385c:	ldr	r0, [pc, #4]	; (3864 <i2c1_isr+0x8>)
    385e:	b.w	3720 <TwoWire::isr()>
    3862:	nop
    3864:	.word	0x200178a8

00003868 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    3868:	ldr	r0, [pc, #4]	; (3870 <i2c2_isr+0x8>)
    386a:	b.w	3720 <TwoWire::isr()>
    386e:	nop
    3870:	.word	0x200177d0

00003874 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    3874:	ldr	r3, [pc, #24]	; (3890 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    3876:	ldr	r2, [pc, #28]	; (3894 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    3878:	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    387a:	movs	r1, #2
    387c:	movs	r2, #0
    387e:	str	r1, [r3, #4]
    3880:	strb	r2, [r3, #2]
    3882:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    3886:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    388a:	strb.w	r2, [r3, #50]	; 0x32
    388e:	bx	lr
    3890:	.word	0x2001da84
    3894:	.word	0x00013b30

00003898 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    3898:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    389a:	ldr	r4, [pc, #104]	; (3904 <SdVolume::cacheFlush()+0x6c>)
    389c:	ldrb	r3, [r4, #0]
    389e:	cbnz	r3, 38a4 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    38a0:	movs	r0, #1
}
    38a2:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    38a4:	ldr	r5, [pc, #96]	; (3908 <SdVolume::cacheFlush()+0x70>)
    38a6:	ldr	r3, [pc, #100]	; (390c <SdVolume::cacheFlush()+0x74>)
    38a8:	ldr	r0, [r5, #0]
    38aa:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    38ac:	ldrb	r3, [r0, #0]
    38ae:	cmp	r3, #254	; 0xfe
    38b0:	beq.n	38e2 <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    38b2:	ldr	r2, [pc, #92]	; (3910 <SdVolume::cacheFlush()+0x78>)
    38b4:	bl	451c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    38b8:	cbz	r0, 38de <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    38ba:	ldr	r6, [pc, #88]	; (3914 <SdVolume::cacheFlush()+0x7c>)
    38bc:	ldr	r1, [r6, #0]
    38be:	cbnz	r1, 38c8 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    38c0:	movs	r3, #0
    38c2:	strb	r3, [r4, #0]
  }
  return true;
    38c4:	movs	r0, #1
    38c6:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    38c8:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    38ca:	ldrb	r3, [r0, #0]
    38cc:	cmp	r3, #254	; 0xfe
    38ce:	beq.n	38f0 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    38d0:	ldr	r2, [pc, #60]	; (3910 <SdVolume::cacheFlush()+0x78>)
    38d2:	bl	451c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    38d6:	cbz	r0, 38de <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    38d8:	movs	r3, #0
    38da:	str	r3, [r6, #0]
    38dc:	b.n	38c0 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    38de:	movs	r0, #0
    38e0:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    38e2:	ldr	r0, [pc, #44]	; (3910 <SdVolume::cacheFlush()+0x78>)
    38e4:	bl	3d34 <SDHC_CardWriteBlock(void const*, unsigned long)>
    38e8:	clz	r0, r0
    38ec:	lsrs	r0, r0, #5
    38ee:	b.n	38b8 <SdVolume::cacheFlush()+0x20>
    38f0:	ldr	r0, [pc, #28]	; (3910 <SdVolume::cacheFlush()+0x78>)
    38f2:	bl	3d34 <SDHC_CardWriteBlock(void const*, unsigned long)>
    38f6:	clz	r0, r0
    38fa:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    38fc:	cmp	r0, #0
    38fe:	bne.n	38d8 <SdVolume::cacheFlush()+0x40>
    3900:	b.n	38de <SdVolume::cacheFlush()+0x46>
    3902:	nop
    3904:	.word	0x2001dce0
    3908:	.word	0x2001dadc
    390c:	.word	0x20017914
    3910:	.word	0x2001dae0
    3914:	.word	0x2001dad8

00003918 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3918:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    391a:	ldr	r5, [pc, #72]	; (3964 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    391c:	ldr	r3, [r5, #0]
    391e:	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3920:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    3922:	beq.n	3948 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    3924:	mov	r4, r0
    if (!cacheFlush()) return false;
    3926:	bl	3898 <SdVolume::cacheFlush()>
    392a:	cbnz	r0, 3930 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    392c:	movs	r0, #0
    392e:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    3930:	ldr	r3, [pc, #52]	; (3968 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    3932:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3934:	ldrb	r3, [r0, #0]
    3936:	cmp	r3, #254	; 0xfe
    3938:	beq.n	3954 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    393a:	ldr	r2, [pc, #48]	; (396c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    393c:	mov	r1, r4
    393e:	bl	4390 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    3942:	cmp	r0, #0
    3944:	beq.n	392c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    3946:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    3948:	ldr	r3, [pc, #36]	; (3970 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
    394a:	ldrb	r1, [r3, #0]
    394c:	orrs	r1, r6
    394e:	strb	r1, [r3, #0]
  return true;
    3950:	movs	r0, #1
}
    3952:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    3954:	mov	r1, r4
    3956:	ldr	r0, [pc, #20]	; (396c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    3958:	bl	3c30 <SDHC_CardReadBlock(void*, unsigned long)>
    395c:	clz	r0, r0
    3960:	lsrs	r0, r0, #5
    3962:	b.n	3942 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    3964:	.word	0x20017914
    3968:	.word	0x2001dadc
    396c:	.word	0x2001dae0
    3970:	.word	0x2001dce0

00003974 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3974:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3976:	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    397a:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    397c:	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    397e:	ldr	r3, [pc, #104]	; (39e8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3980:	mov	r5, r0
    3982:	mov	r6, r1
    3984:	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    3986:	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3988:	beq.n	39b8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    398a:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    398e:	cmp	r4, r3
    3990:	bne.n	39c0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    3992:	and.w	r6, r6, #127	; 0x7f
    3996:	ldr	r2, [pc, #84]	; (39ec <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    3998:	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    399c:	ldr	r1, [pc, #80]	; (39f0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    399e:	ldrb	r0, [r5, #24]
    39a0:	ldrb	r2, [r1, #0]
    39a2:	cmp	r0, #1
    39a4:	orr.w	r2, r2, #1
    39a8:	strb	r2, [r1, #0]
    39aa:	bls.n	39de <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    39ac:	ldr	r1, [r5, #8]
    39ae:	ldr	r2, [pc, #68]	; (39f4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    39b0:	add	r3, r1
    39b2:	str	r3, [r2, #0]
  return true;
    39b4:	movs	r0, #1
    39b6:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    39b8:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    39bc:	cmp	r4, r3
    39be:	beq.n	39d2 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    39c0:	movs	r1, #0
    39c2:	mov	r0, r4
    39c4:	bl	3918 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    39c8:	cbz	r0, 39e0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    39ca:	ldrb.w	r3, [r5, #32]
    39ce:	cmp	r3, #16
    39d0:	bne.n	39e2 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    39d2:	uxtb	r6, r6
    39d4:	ldr	r2, [pc, #20]	; (39ec <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    39d6:	mov	r3, r4
    39d8:	strh.w	r7, [r2, r6, lsl #1]
    39dc:	b.n	399c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    39de:	movs	r0, #1
}
    39e0:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    39e2:	mov	r3, r4
    39e4:	b.n	3992 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    39e6:	nop
    39e8:	.word	0x20017914
    39ec:	.word	0x2001dae0
    39f0:	.word	0x2001dce0
    39f4:	.word	0x2001dad8

000039f8 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    39f8:	ldr	r3, [r0, #12]
    39fa:	adds	r3, #1
    39fc:	cmp	r3, r1
    39fe:	bcc.n	3a32 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    3a00:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3a02:	ldrb.w	r3, [r0, #32]
    3a06:	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    3a08:	ldr	r3, [pc, #84]	; (3a60 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    3a0a:	mov	r4, r0
    3a0c:	mov	r6, r2
    3a0e:	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    3a10:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    3a12:	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3a14:	beq.n	3a36 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    3a16:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    3a1a:	cmp	r0, r3
    3a1c:	bne.n	3a3e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    3a1e:	and.w	r1, r5, #127	; 0x7f
    3a22:	ldr	r3, [pc, #64]	; (3a64 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    3a24:	ldr.w	r3, [r3, r1, lsl #2]
    3a28:	bic.w	r3, r3, #4026531840	; 0xf0000000
    3a2c:	str	r3, [r6, #0]
    3a2e:	movs	r0, #1
  }
  return true;
}
    3a30:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    3a32:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    3a34:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3a36:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    3a3a:	cmp	r0, r3
    3a3c:	beq.n	3a4e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    3a3e:	movs	r1, #0
    3a40:	bl	3918 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3a44:	cbz	r0, 3a5c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    3a46:	ldrb.w	r3, [r4, #32]
    3a4a:	cmp	r3, #16
    3a4c:	bne.n	3a1e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    3a4e:	uxtb	r1, r5
    3a50:	ldr	r3, [pc, #16]	; (3a64 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    3a52:	ldrh.w	r3, [r3, r1, lsl #1]
    3a56:	str	r3, [r6, #0]
    3a58:	movs	r0, #1
    3a5a:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    3a5c:	movs	r0, #0
    3a5e:	pop	{r4, r5, r6, pc}
    3a60:	.word	0x20017914
    3a64:	.word	0x2001dae0

00003a68 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3a68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3a6c:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3a6e:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3a70:	cbz	r7, 3ace <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    3a72:	adds	r7, #1

    // don't save new start location
    setStart = false;
    3a74:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    3a78:	ldr	r3, [r0, #12]
    3a7a:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3a7e:	cbz	r3, 3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3a80:	mov	fp, r1
    3a82:	mov	r6, r0
    3a84:	mov	r9, r2
    3a86:	mov	r4, r7
    3a88:	movs	r5, #0
    3a8a:	b.n	3a98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    3a8c:	mov	r4, r3
    3a8e:	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3a90:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3a92:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3a94:	cmp	r3, r5
    3a96:	bls.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    3a98:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    3a9a:	it	cc
    3a9c:	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3a9e:	mov	r1, r4
    3aa0:	add	r2, sp, #4
    3aa2:	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    3aa4:	it	cc
    3aa6:	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3aa8:	bl	39f8 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3aac:	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    3aae:	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3ab0:	cbz	r0, 3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    3ab2:	ldr	r2, [sp, #4]
    3ab4:	cmp	r2, #0
    3ab6:	bne.n	3a8c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    3ab8:	cmp	fp, r1
    3aba:	beq.n	3ade <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    3abc:	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3abe:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3ac0:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3ac2:	cmp	r3, r5
    3ac4:	bhi.n	3a98 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    3ac6:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    3ac8:	add	sp, #12
    3aca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    3ace:	sub.w	sl, r1, #1
    3ad2:	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    3ad6:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    3ad8:	mov.w	sl, sl, lsr #5
    3adc:	b.n	3a78 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3ade:	cmp	r4, #1
    3ae0:	bls.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3ae2:	ldr	r3, [r6, #12]
    3ae4:	adds	r3, #1
    3ae6:	cmp	r4, r3
    3ae8:	bhi.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3aea:	mvn.w	r2, #4026531840	; 0xf0000000
    3aee:	mov	r1, r4
    3af0:	mov	r0, r6
    3af2:	bl	3974 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    3af6:	cmp	r0, #0
    3af8:	beq.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    3afa:	cmp	r7, r4
    3afc:	bcs.n	3b28 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3afe:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3b00:	cmp	r4, #1
    3b02:	bls.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3b04:	ldr	r3, [r6, #12]
    3b06:	adds	r3, #1
    3b08:	cmp	r4, r3
    3b0a:	bhi.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3b0c:	adds	r2, r4, #1
    3b0e:	mov	r1, r4
    3b10:	mov	r0, r6
    3b12:	bl	3974 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3b16:	cmp	r0, #0
    3b18:	beq.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3b1a:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3b1c:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3b20:	beq.n	3b28 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3b22:	cmp	r4, #1
    3b24:	bne.n	3b04 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    3b26:	b.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    3b28:	ldr.w	r1, [r9]
    3b2c:	cbz	r1, 3b46 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3b2e:	cmp	r1, #1
    3b30:	bls.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3b32:	ldr	r3, [r6, #12]
    3b34:	adds	r3, #1
    3b36:	cmp	r1, r3
    3b38:	bhi.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3b3a:	mov	r2, r7
    3b3c:	mov	r0, r6
    3b3e:	bl	3974 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    3b42:	cmp	r0, #0
    3b44:	beq.n	3ac6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3b46:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    3b4a:	cmp.w	sl, #0
    3b4e:	beq.n	3b54 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    3b50:	adds	r7, #1
    3b52:	str	r7, [r6, #0]

  return true;
    3b54:	movs	r0, #1
    3b56:	b.n	3ac8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

00003b58 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3b58:	ldr	r1, [pc, #128]	; (3bdc <SDHC_CMD_Do(unsigned long)+0x84>)

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    3b5a:	ldr	r2, [pc, #132]	; (3be0 <SDHC_CMD_Do(unsigned long)+0x88>)

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3b5c:	ldr	r3, [r1, #0]
    3b5e:	orr.w	r3, r3, #128	; 0x80
    3b62:	str	r3, [r1, #0]

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    3b64:	mov	r1, r2
    3b66:	ldr	r3, [r2, #0]
    3b68:	lsls	r3, r3, #31
    3b6a:	bmi.n	3b66 <SDHC_CMD_Do(unsigned long)+0xe>
    3b6c:	ldr	r3, [r1, #0]
    3b6e:	lsls	r3, r3, #30
    3b70:	bmi.n	3b66 <SDHC_CMD_Do(unsigned long)+0xe>
  SDHC_XFERTYP = xfertyp;
    3b72:	ldr	r3, [pc, #112]	; (3be4 <SDHC_CMD_Do(unsigned long)+0x8c>)
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    3b74:	push	{r4, r5}

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    3b76:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    3b7a:	ldr	r5, [pc, #96]	; (3bdc <SDHC_CMD_Do(unsigned long)+0x84>)
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;
    3b7c:	str	r0, [r3, #0]
    3b7e:	b.n	3b82 <SDHC_CMD_Do(unsigned long)+0x2a>
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    3b80:	cbz	r2, 3bac <SDHC_CMD_Do(unsigned long)+0x54>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    3b82:	ldr	r1, [r5, #0]
    3b84:	ldr	r3, [pc, #96]	; (3be8 <SDHC_CMD_Do(unsigned long)+0x90>)
    3b86:	ldr	r4, [pc, #84]	; (3bdc <SDHC_CMD_Do(unsigned long)+0x84>)
    3b88:	ands	r3, r1
    timeout--;
    3b8a:	subs	r2, #1
  } while (!result && (timeout));
    3b8c:	cmp	r3, #0
    3b8e:	beq.n	3b80 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    3b90:	cbz	r2, 3bac <SDHC_CMD_Do(unsigned long)+0x54>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    3b92:	cmp	r3, #1
    3b94:	bne.n	3bac <SDHC_CMD_Do(unsigned long)+0x54>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    3b96:	ldr	r3, [r4, #0]
    3b98:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3b9c:	ldr	r3, [r4, #0]
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    3b9e:	beq.n	3bc0 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3ba0:	orr.w	r3, r3, #65537	; 0x10001
    3ba4:	str	r3, [r4, #0]
      return SDHC_RESULT_NOT_READY;
    3ba6:	movs	r0, #3
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    3ba8:	pop	{r4, r5}
    3baa:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    3bac:	ldr	r2, [pc, #44]	; (3bdc <SDHC_CMD_Do(unsigned long)+0x84>)
    3bae:	ldr	r3, [r2, #0]
    3bb0:	orr.w	r3, r3, #983040	; 0xf0000
    3bb4:	orr.w	r3, r3, #1
    3bb8:	str	r3, [r2, #0]
      return SDHC_RESULT_ERROR;
    3bba:	movs	r0, #1
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    3bbc:	pop	{r4, r5}
    3bbe:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    3bc0:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3bc4:	ldr	r3, [r4, #0]
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    3bc6:	beq.n	3bd2 <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3bc8:	orr.w	r3, r3, #65537	; 0x10001
    3bcc:	str	r3, [r4, #0]
      return SDHC_RESULT_NO_RESPONSE;
    3bce:	movs	r0, #5
    3bd0:	b.n	3bbc <SDHC_CMD_Do(unsigned long)+0x64>
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    3bd2:	orr.w	r3, r3, #1
    3bd6:	str	r3, [r4, #0]
    3bd8:	b.n	3bbc <SDHC_CMD_Do(unsigned long)+0x64>
    3bda:	nop
    3bdc:	.word	0x400b1030
    3be0:	.word	0x400b1024
    3be4:	.word	0x400b100c
    3be8:	.word	0x000e0001

00003bec <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    3bec:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    3bee:	ldr	r5, [pc, #52]	; (3c24 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3bf0:	ldr	r0, [pc, #52]	; (3c28 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3bf2:	ldr	r6, [pc, #56]	; (3c2c <SDHC_CMD12_StopTransferWaitForBusy()+0x40>)
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    3bf4:	movs	r3, #0
    3bf6:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3bf8:	bl	3b58 <SDHC_CMD_Do(unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    3bfc:	movw	r4, #999	; 0x3e7

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3c00:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3c02:	ldr	r2, [r6, #0]
    3c04:	lsls	r2, r2, #29
    3c06:	bpl.n	3c0c <SDHC_CMD12_StopTransferWaitForBusy()+0x20>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3c08:	ldr	r0, [pc, #28]	; (3c28 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3c0a:	cbz	r3, 3c10 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
    3c0c:	mov	r0, r3
    3c0e:	pop	{r4, r5, r6, pc}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    3c10:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3c12:	bl	3b58 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3c16:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3c18:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3c1a:	bne.n	3c02 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3c1c:	cmp	r0, #0
    3c1e:	it	eq
    3c20:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    3c22:	pop	{r4, r5, r6, pc}
    3c24:	.word	0x400b1008
    3c28:	.word	0x0cdb0000
    3c2c:	.word	0x400b1024

00003c30 <SDHC_CardReadBlock(void*, unsigned long)>:
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    3c30:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    3c32:	ldr	r3, [pc, #224]	; (3d14 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    3c34:	ldrb	r2, [r3, #0]
    3c36:	cbz	r2, 3c3c <SDHC_CardReadBlock(void*, unsigned long)+0xc>
     return SDHC_RESULT_NOT_READY;
    3c38:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);

  return result;
}
    3c3a:	pop	{r3, r4, r5, r6, r7, pc}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    3c3c:	ldrb	r3, [r3, #1]
    3c3e:	mov	r6, r0
    3c40:	cbnz	r3, 3c44 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    3c42:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    3c44:	ldr	r5, [pc, #208]	; (3d18 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3c46:	ldr	r4, [pc, #212]	; (3d1c <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3c48:	ldr	r3, [pc, #212]	; (3d20 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3c4a:	ldr	r0, [pc, #216]	; (3d24 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    3c4c:	movw	r7, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3c50:	mov.w	r2, #66048	; 0x10200

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    3c54:	str	r7, [r5, #0]
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3c56:	str	r1, [r4, #0]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3c58:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3c5a:	bl	3b58 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    3c5e:	cmp	r0, #0
    3c60:	bne.n	3c3a <SDHC_CardReadBlock(void*, unsigned long)+0xa>
    3c62:	ldr	r3, [pc, #196]	; (3d28 <SDHC_CardReadBlock(void*, unsigned long)+0xf8>)
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
		*pData++ = SDHC_DATPORT;
    3c64:	ldr	r1, [pc, #196]	; (3d2c <SDHC_CardReadBlock(void*, unsigned long)+0xfc>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    3c66:	ldr	r3, [r3, #0]
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    3c68:	adds	r4, #28
    3c6a:	add.w	r2, r6, #64	; 0x40
    3c6e:	add.w	r0, r6, #576	; 0x240
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    3c72:	ldr	r3, [r5, #0]
    3c74:	ldr	r7, [pc, #160]	; (3d18 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    3c76:	orr.w	r6, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3c7a:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    3c7e:	str	r6, [r5, #0]
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3c80:	bne.n	3d00 <SDHC_CardReadBlock(void*, unsigned long)+0xd0>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    3c82:	ldr	r3, [r4, #0]
    3c84:	lsls	r6, r3, #20
    3c86:	bpl.n	3c82 <SDHC_CardReadBlock(void*, unsigned long)+0x52>
		*pData++ = SDHC_DATPORT;
    3c88:	ldr	r3, [r1, #0]
    3c8a:	str.w	r3, [r2, #-64]
		*pData++ = SDHC_DATPORT;
    3c8e:	ldr	r3, [r1, #0]
    3c90:	str.w	r3, [r2, #-60]
		*pData++ = SDHC_DATPORT;
    3c94:	ldr	r3, [r1, #0]
    3c96:	str.w	r3, [r2, #-56]
		*pData++ = SDHC_DATPORT;
    3c9a:	ldr	r3, [r1, #0]
    3c9c:	str.w	r3, [r2, #-52]
		*pData++ = SDHC_DATPORT;
    3ca0:	ldr	r3, [r1, #0]
    3ca2:	str.w	r3, [r2, #-48]
		*pData++ = SDHC_DATPORT;
    3ca6:	ldr	r3, [r1, #0]
    3ca8:	str.w	r3, [r2, #-44]
		*pData++ = SDHC_DATPORT;
    3cac:	ldr	r3, [r1, #0]
    3cae:	str.w	r3, [r2, #-40]
		*pData++ = SDHC_DATPORT;
    3cb2:	ldr	r3, [r1, #0]
    3cb4:	str.w	r3, [r2, #-36]
		*pData++ = SDHC_DATPORT;
    3cb8:	ldr	r3, [r1, #0]
    3cba:	str.w	r3, [r2, #-32]
		*pData++ = SDHC_DATPORT;
    3cbe:	ldr	r3, [r1, #0]
    3cc0:	str.w	r3, [r2, #-28]
		*pData++ = SDHC_DATPORT;
    3cc4:	ldr	r3, [r1, #0]
    3cc6:	str.w	r3, [r2, #-24]
		*pData++ = SDHC_DATPORT;
    3cca:	ldr	r3, [r1, #0]
    3ccc:	str.w	r3, [r2, #-20]
		*pData++ = SDHC_DATPORT;
    3cd0:	ldr	r3, [r1, #0]
    3cd2:	str.w	r3, [r2, #-16]
		*pData++ = SDHC_DATPORT;
    3cd6:	ldr	r3, [r1, #0]
    3cd8:	str.w	r3, [r2, #-12]
		*pData++ = SDHC_DATPORT;
    3cdc:	ldr	r3, [r1, #0]
    3cde:	str.w	r3, [r2, #-8]
		*pData++ = SDHC_DATPORT;
    3ce2:	ldr	r3, [r1, #0]
    3ce4:	str.w	r3, [r2, #-4]
    3ce8:	adds	r2, #64	; 0x40
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    3cea:	cmp	r2, r0
    3cec:	bne.n	3c72 <SDHC_CardReadBlock(void*, unsigned long)+0x42>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    3cee:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    3cf0:	ldr	r1, [pc, #36]	; (3d18 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    3cf2:	ldr	r3, [r1, #0]
    3cf4:	ldr	r2, [pc, #32]	; (3d18 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    3cf6:	lsls	r3, r3, #30
    3cf8:	bpl.n	3cf2 <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    3cfa:	ldr	r3, [pc, #52]	; (3d30 <SDHC_CardReadBlock(void*, unsigned long)+0x100>)
    3cfc:	str	r3, [r2, #0]

  return result;
    3cfe:	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    3d00:	orr.w	r3, r3, #7340032	; 0x700000
    3d04:	orr.w	r3, r3, #32
    3d08:	str	r3, [r7, #0]
			SDHC_CMD12_StopTransferWaitForBusy();
    3d0a:	bl	3bec <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    3d0e:	movs	r0, #1
    3d10:	b.n	3cf0 <SDHC_CardReadBlock(void*, unsigned long)+0xc0>
    3d12:	nop
    3d14:	.word	0x2001dce4
    3d18:	.word	0x400b1030
    3d1c:	.word	0x400b1008
    3d20:	.word	0x400b1004
    3d24:	.word	0x113a0010
    3d28:	.word	0x400b1010
    3d2c:	.word	0x400b1020
    3d30:	.word	0x01000022

00003d34 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    3d34:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    3d36:	ldr	r3, [pc, #172]	; (3de4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    3d38:	ldrb	r2, [r3, #0]
    3d3a:	cbz	r2, 3d40 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    3d3c:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    3d3e:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    3d40:	ldrb	r3, [r3, #1]
    3d42:	mov	r4, r0
    3d44:	cbnz	r3, 3d48 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    3d46:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    3d48:	ldr	r5, [pc, #156]	; (3de8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3d4a:	ldr	r0, [pc, #160]	; (3dec <SDHC_CardWriteBlock(void const*, unsigned long)+0xb8>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    3d4c:	ldr	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3d4e:	ldr	r3, [pc, #160]	; (3df0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xbc>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    3d50:	str	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3d52:	mov.w	r2, #66048	; 0x10200
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3d56:	str	r1, [r0, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3d58:	ldr	r0, [pc, #152]	; (3df4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc0>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3d5a:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3d5c:	bl	3b58 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    3d60:	cmp	r0, #0
    3d62:	bne.n	3d3e <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
    3d64:	ldr	r3, [pc, #144]	; (3df8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc4>)
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    3d66:	ldr	r6, [pc, #148]	; (3dfc <SDHC_CardWriteBlock(void const*, unsigned long)+0xc8>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    3d68:	ldr	r3, [r3, #0]
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    3d6a:	mov	r1, r5
    3d6c:	add.w	r7, r4, #512	; 0x200
    3d70:	ldr	r3, [r1, #0]
    3d72:	ldr	r2, [pc, #116]	; (3de8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    3d74:	lsls	r0, r3, #27
    3d76:	bpl.n	3d70 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3d78:	ldr	r3, [r5, #0]
    3d7a:	tst.w	r3, #7340032	; 0x700000
    3d7e:	bne.n	3db6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    3d80:	add.w	r2, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    3d84:	ldr.w	r3, [r4], #4
    3d88:	str	r3, [r6, #0]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    3d8a:	cmp	r2, r4
    3d8c:	bne.n	3d84 <SDHC_CardWriteBlock(void const*, unsigned long)+0x50>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    3d8e:	ldr	r3, [r1, #0]
    3d90:	ldr.w	lr, [pc, #84]	; 3de8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>
    3d94:	orr.w	r3, r3, #16
    3d98:	str	r3, [r1, #0]

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3d9a:	ldr	r3, [r1, #0]
    3d9c:	ands.w	r0, r3, #7340032	; 0x700000
    3da0:	bne.n	3dca <SDHC_CardWriteBlock(void const*, unsigned long)+0x96>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    3da2:	cmp	r7, r2
    3da4:	bne.n	3d70 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    3da6:	ldr	r1, [pc, #64]	; (3de8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    3da8:	ldr	r3, [r1, #0]
    3daa:	ldr	r2, [pc, #60]	; (3de8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    3dac:	lsls	r3, r3, #30
    3dae:	bpl.n	3da8 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    3db0:	ldr	r3, [pc, #76]	; (3e00 <SDHC_CardWriteBlock(void const*, unsigned long)+0xcc>)
    3db2:	str	r3, [r2, #0]

  return result;
    3db4:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    3db6:	ldr	r3, [r2, #0]
    3db8:	orr.w	r3, r3, #7340032	; 0x700000
    3dbc:	orr.w	r3, r3, #16
    3dc0:	str	r3, [r2, #0]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    3dc2:	bl	3bec <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    3dc6:	movs	r0, #1
    3dc8:	b.n	3da6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    3dca:	ldr.w	r3, [lr]
    3dce:	orr.w	r3, r3, #7340032	; 0x700000
    3dd2:	orr.w	r3, r3, #16
    3dd6:	str.w	r3, [lr]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    3dda:	bl	3bec <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    3dde:	movs	r0, #1
    3de0:	b.n	3da6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    3de2:	nop
    3de4:	.word	0x2001dce4
    3de8:	.word	0x400b1030
    3dec:	.word	0x400b1008
    3df0:	.word	0x400b1004
    3df4:	.word	0x183a0000
    3df8:	.word	0x400b1010
    3dfc:	.word	0x400b1020
    3e00:	.word	0x01000012

00003e04 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    3e04:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    3e06:	ldrsb.w	r3, [r0, #5]
    3e0a:	cmp	r3, #0
    3e0c:	blt.n	3e16 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    3e0e:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    3e12:	b.w	3898 <SdVolume::cacheFlush()>
    3e16:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    3e18:	movs	r1, #1
    3e1a:	ldr	r0, [r0, #16]
    3e1c:	bl	3918 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3e20:	cbz	r0, 3e62 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    3e22:	ldrb	r5, [r4, #20]
    3e24:	ldr	r3, [pc, #64]	; (3e68 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    3e26:	adds.w	r5, r3, r5, lsl #5
    3e2a:	beq.n	3e62 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    3e2c:	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    3e2e:	ldr	r2, [pc, #60]	; (3e6c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    3e30:	cmp	r3, #1
    3e32:	itt	ls
    3e34:	ldrls	r3, [r4, #24]
    3e36:	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    3e38:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    3e3a:	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    3e3c:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    3e3e:	lsrs	r3, r3, #16
    3e40:	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    3e42:	cbz	r2, 3e52 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    3e44:	add.w	r1, r5, #22
    3e48:	add.w	r0, r5, #24
    3e4c:	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    3e4e:	ldrh	r3, [r5, #24]
    3e50:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    3e52:	ldrb	r3, [r4, #5]
    3e54:	and.w	r3, r3, #127	; 0x7f
    3e58:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    3e5a:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    3e5e:	b.w	3898 <SdVolume::cacheFlush()>
}
    3e62:	movs	r0, #0
    3e64:	pop	{r3, r4, r5, pc}
    3e66:	nop
    3e68:	.word	0x2001dae0
    3e6c:	.word	0x2001dcf4

00003e70 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    3e70:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3e72:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    3e76:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3e78:	movs	r1, #1
    3e7a:	ldr	r0, [r0, #32]
    3e7c:	bl	3a68 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    3e80:	cbz	r0, 3e98 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    3e82:	ldr	r3, [r4, #28]
    3e84:	cbnz	r3, 3e96 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    3e86:	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    3e88:	ldr	r2, [r4, #8]
    3e8a:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    3e8c:	orn	r3, r3, #127	; 0x7f
    3e90:	strb	r3, [r4, #5]
    3e92:	movs	r0, #1
    3e94:	pop	{r4, pc}
  }
  return true;
    3e96:	movs	r0, #1
}
    3e98:	pop	{r4, pc}
    3e9a:	nop

00003e9c <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    3e9c:	push	{r3, r4, r5, r6, r7, lr}
    3e9e:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    3ea0:	cbz	r3, 3ea8 <SdFile::seekSet(unsigned long)+0xc>
    3ea2:	ldr	r2, [r0, #24]
    3ea4:	cmp	r2, r1
    3ea6:	bcs.n	3eac <SdFile::seekSet(unsigned long)+0x10>
    3ea8:	movs	r0, #0
    3eaa:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    3eac:	cmp	r3, #2
    3eae:	mov	r7, r1
    3eb0:	mov	r5, r0
    3eb2:	beq.n	3eea <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    3eb4:	cbz	r7, 3ef8 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    3eb6:	ldr	r3, [r5, #32]
    3eb8:	ldr	r1, [r5, #12]
    3eba:	ldrb	r4, [r3, #16]
    3ebc:	subs	r2, r1, #1
    3ebe:	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    3ec2:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    3ec4:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    3ec6:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    3ec8:	cmp	r2, r4
    3eca:	bls.n	3ef0 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    3ecc:	ldr	r3, [r5, #28]
    3ece:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    3ed0:	add.w	r6, r5, #8
    3ed4:	b.n	3ee4 <SdFile::seekSet(unsigned long)+0x48>
    3ed6:	ldr	r1, [r5, #8]
    3ed8:	ldr	r0, [r5, #32]
    3eda:	bl	39f8 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3ede:	subs	r4, #1
    3ee0:	cmp	r0, #0
    3ee2:	beq.n	3ea8 <SdFile::seekSet(unsigned long)+0xc>
    3ee4:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3ee6:	cmp	r4, #0
    3ee8:	bne.n	3ed6 <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    3eea:	str	r7, [r5, #12]
    return true;
    3eec:	movs	r0, #1
    3eee:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    3ef0:	cmp	r1, #0
    3ef2:	beq.n	3ecc <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3ef4:	subs	r4, r4, r2
    3ef6:	b.n	3ed0 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    3ef8:	str	r7, [r5, #8]
    curPosition_ = 0;
    3efa:	str	r7, [r5, #12]
    return true;
    3efc:	movs	r0, #1
    3efe:	pop	{r3, r4, r5, r6, r7, pc}

00003f00 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3f00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f04:	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3f06:	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3f08:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3f0a:	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3f0c:	mov	r7, r0
    3f0e:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3f10:	beq.n	3f1e <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    3f12:	movs	r3, #1
    3f14:	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3f16:	movs	r0, #0
}
    3f18:	add	sp, #20
    3f1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3f1e:	ldrb	r2, [r0, #5]
    3f20:	lsls	r1, r2, #30
    3f22:	bpl.n	3f12 <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3f24:	lsls	r3, r2, #29
    3f26:	bpl.n	3f3a <SdFile::write(void const*, unsigned int)+0x3a>
    3f28:	ldr	r4, [r7, #12]
    3f2a:	ldr	r1, [r7, #24]
    3f2c:	cmp	r4, r1
    3f2e:	beq.w	409a <SdFile::write(void const*, unsigned int)+0x19a>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    3f32:	bl	3e9c <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    3f36:	cmp	r0, #0
    3f38:	beq.n	3f12 <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    3f3a:	ldr	r3, [sp, #4]
    3f3c:	ldr	r4, [r7, #12]
    3f3e:	cmp	r3, #0
    3f40:	beq.n	3fd8 <SdFile::write(void const*, unsigned int)+0xd8>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3f42:	ldr.w	r9, [pc, #420]	; 40e8 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    3f46:	ldr.w	sl, [pc, #420]	; 40ec <SdFile::write(void const*, unsigned int)+0x1ec>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3f4a:	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3f4e:	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3f50:	ldrb	r6, [r0, #4]
    3f52:	subs	r6, #1
    3f54:	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    3f58:	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3f5c:	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    3f60:	bne.n	3fea <SdFile::write(void const*, unsigned int)+0xea>
    3f62:	cmp	r4, #0
    3f64:	bne.n	3fea <SdFile::write(void const*, unsigned int)+0xea>
      // start of new cluster
      if (curCluster_ == 0) {
    3f66:	ldr	r1, [r7, #8]
    3f68:	cmp	r1, #0
    3f6a:	bne.n	4054 <SdFile::write(void const*, unsigned int)+0x154>
        if (firstCluster_ == 0) {
    3f6c:	ldr	r2, [r7, #28]
    3f6e:	cmp	r2, #0
    3f70:	beq.w	407a <SdFile::write(void const*, unsigned int)+0x17a>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    3f74:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3f76:	rsb	r5, r4, #512	; 0x200
    3f7a:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3f7c:	cmp	r5, r8
    3f7e:	bls.n	3ff6 <SdFile::write(void const*, unsigned int)+0xf6>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3f80:	ldrb	r5, [r0, #16]
    3f82:	ldr	r1, [r0, #20]
    3f84:	subs	r2, #2
    3f86:	lsls	r2, r5
    3f88:	add	r6, r1
    3f8a:	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3f8c:	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3f90:	cbnz	r4, 3f9a <SdFile::write(void const*, unsigned int)+0x9a>
    3f92:	ldr	r0, [r7, #12]
    3f94:	ldr	r2, [r7, #24]
    3f96:	cmp	r0, r2
    3f98:	bcs.n	403a <SdFile::write(void const*, unsigned int)+0x13a>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3f9a:	mov	r0, r6
    3f9c:	movs	r1, #1
    3f9e:	bl	3918 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3fa2:	cmp	r0, #0
    3fa4:	beq.n	3f12 <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3fa6:	add	r4, r9
      uint8_t* end = dst + n;
    3fa8:	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    3fac:	cmp	r4, lr
    3fae:	beq.n	3fcc <SdFile::write(void const*, unsigned int)+0xcc>
    3fb0:	add.w	r1, fp, #4294967295
    3fb4:	subs	r2, r4, #1
    3fb6:	add.w	r6, lr, #4294967295
    3fba:	ldrb.w	r0, [r1, #1]!
    3fbe:	strb.w	r0, [r2, #1]!
    3fc2:	cmp	r6, r2
    3fc4:	bne.n	3fba <SdFile::write(void const*, unsigned int)+0xba>
    3fc6:	rsb	r4, r4, lr
    3fca:	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    3fcc:	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3fce:	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    3fd2:	add	r4, r5
    3fd4:	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3fd6:	bne.n	3f4e <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3fd8:	ldr	r3, [r7, #24]
    3fda:	cmp	r3, r4
    3fdc:	bcs.n	40a4 <SdFile::write(void const*, unsigned int)+0x1a4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    3fde:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3fe0:	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    3fe2:	orr.w	r2, r2, #128	; 0x80
    3fe6:	strb	r2, [r7, #5]
    3fe8:	b.n	40b6 <SdFile::write(void const*, unsigned int)+0x1b6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3fea:	rsb	r5, r4, #512	; 0x200
    3fee:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3ff0:	cmp	r5, r8
    3ff2:	ldr	r2, [r7, #8]
    3ff4:	bhi.n	3f80 <SdFile::write(void const*, unsigned int)+0x80>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3ff6:	ldrb	r1, [r0, #16]
    3ff8:	ldr	r0, [r0, #20]
    3ffa:	subs	r2, #2
    3ffc:	lsls	r2, r1
    3ffe:	add	r6, r0
    if (n == 512) {
    4000:	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    4004:	add	r6, r2
    if (n == 512) {
    4006:	bne.n	3f90 <SdFile::write(void const*, unsigned int)+0x90>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    4008:	ldr.w	r2, [sl]
    400c:	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    400e:	itt	eq
    4010:	moveq.w	r2, #4294967295
    4014:	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    4018:	ldr	r2, [pc, #188]	; (40d8 <SdFile::write(void const*, unsigned int)+0x1d8>)
    401a:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    401c:	ldrb	r2, [r0, #0]
    401e:	cmp	r2, #254	; 0xfe
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    4020:	mov	r1, r6
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    4022:	beq.n	408c <SdFile::write(void const*, unsigned int)+0x18c>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    4024:	mov	r2, fp
    4026:	bl	451c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    402a:	cmp	r0, #0
    402c:	beq.w	3f12 <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    4030:	add.w	fp, fp, #512	; 0x200
    4034:	mov.w	r5, #512	; 0x200
    4038:	b.n	3fcc <SdFile::write(void const*, unsigned int)+0xcc>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    403a:	bl	3898 <SdVolume::cacheFlush()>
    403e:	cmp	r0, #0
    4040:	beq.w	3f12 <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    4044:	ldr	r1, [pc, #148]	; (40dc <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    4046:	str.w	r6, [sl]
    404a:	ldrb	r2, [r1, #0]
    404c:	orr.w	r2, r2, #1
    4050:	strb	r2, [r1, #0]
    4052:	b.n	3fa6 <SdFile::write(void const*, unsigned int)+0xa6>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    4054:	add	r2, sp, #12
    4056:	bl	39f8 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    405a:	cmp	r0, #0
    405c:	beq.w	3f18 <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    4060:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    4062:	ldr	r3, [pc, #124]	; (40e0 <SdFile::write(void const*, unsigned int)+0x1e0>)
    4064:	ldrb.w	r5, [r0, #32]
    4068:	ldr	r2, [sp, #12]
    406a:	movw	r1, #65528	; 0xfff8
    406e:	cmp	r5, #16
    4070:	it	ne
    4072:	movne	r1, r3
    4074:	cmp	r2, r1
    4076:	bcc.w	3f74 <SdFile::write(void const*, unsigned int)+0x74>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    407a:	mov	r0, r7
    407c:	bl	3e70 <SdFile::addCluster()>
    4080:	cmp	r0, #0
    4082:	beq.w	3f12 <SdFile::write(void const*, unsigned int)+0x12>
    4086:	ldr	r0, [r7, #32]
    4088:	ldr	r2, [r7, #8]
    408a:	b.n	3f76 <SdFile::write(void const*, unsigned int)+0x76>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    408c:	mov	r0, fp
    408e:	bl	3d34 <SDHC_CardWriteBlock(void const*, unsigned long)>
    4092:	clz	r0, r0
    4096:	lsrs	r0, r0, #5
    4098:	b.n	402a <SdFile::write(void const*, unsigned int)+0x12a>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    409a:	ldr	r3, [sp, #4]
    409c:	cmp	r3, #0
    409e:	bne.w	3f42 <SdFile::write(void const*, unsigned int)+0x42>
    40a2:	b.n	40b6 <SdFile::write(void const*, unsigned int)+0x1b6>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    40a4:	ldr	r3, [pc, #60]	; (40e4 <SdFile::write(void const*, unsigned int)+0x1e4>)
    40a6:	ldrb	r2, [r7, #5]
    40a8:	ldr	r3, [r3, #0]
    40aa:	cbz	r3, 40b6 <SdFile::write(void const*, unsigned int)+0x1b6>
    40ac:	ldr	r3, [sp, #4]
    40ae:	cbz	r3, 40b6 <SdFile::write(void const*, unsigned int)+0x1b6>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    40b0:	orr.w	r2, r2, #128	; 0x80
    40b4:	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    40b6:	lsls	r2, r2, #28
    40b8:	bpl.n	40ce <SdFile::write(void const*, unsigned int)+0x1ce>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    40ba:	ldrb	r3, [r7, #6]
    40bc:	cmp	r3, #0
    40be:	beq.w	3f12 <SdFile::write(void const*, unsigned int)+0x12>
    40c2:	mov	r0, r7
    40c4:	bl	3e04 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    40c8:	cmp	r0, #0
    40ca:	beq.w	3f12 <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    40ce:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    40d0:	add	sp, #20
    40d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40d6:	nop
    40d8:	.word	0x2001dadc
    40dc:	.word	0x2001dce0
    40e0:	.word	0x0ffffff8
    40e4:	.word	0x2001dcf4
    40e8:	.word	0x2001dae0
    40ec:	.word	0x20017914

000040f0 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    40f0:	push	{lr}
    40f2:	sub	sp, #12
    40f4:	add	r3, sp, #8
  return write(&b, 1);
    40f6:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    40f8:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    40fc:	mov	r1, r3
    40fe:	bl	3f00 <SdFile::write(void const*, unsigned int)>
}
    4102:	add	sp, #12
    4104:	ldr.w	pc, [sp], #4

00004108 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    4108:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    410a:	movs	r1, #1
    410c:	ldrb	r0, [r0, #0]
    410e:	bl	8e78 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    4112:	ldr	r2, [pc, #68]	; (4158 <Sd2Card::chipSelectHigh()+0x50>)
    4114:	ldrb	r3, [r2, #0]
    4116:	cbz	r3, 414a <Sd2Card::chipSelectHigh()+0x42>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    4118:	ldr	r1, [pc, #64]	; (415c <Sd2Card::chipSelectHigh()+0x54>)
    411a:	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    411c:	movs	r4, #0
    411e:	mov	r0, r3
    4120:	strb	r4, [r2, #0]
    4122:	cbz	r3, 414a <Sd2Card::chipSelectHigh()+0x42>
			if (interruptMasksUsed & 0x01) {
    4124:	lsls	r2, r3, #31
    4126:	bpl.n	4130 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    4128:	ldr	r2, [pc, #52]	; (4160 <Sd2Card::chipSelectHigh()+0x58>)
    412a:	ldr	r0, [r1, #28]
    412c:	str	r0, [r2, #0]
    412e:	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    4130:	lsls	r4, r3, #30
    4132:	bpl.n	413c <Sd2Card::chipSelectHigh()+0x34>
				NVIC_ISER1 = interruptSave[1];
    4134:	ldr	r3, [pc, #44]	; (4164 <Sd2Card::chipSelectHigh()+0x5c>)
    4136:	ldr	r2, [r1, #32]
    4138:	ldrb	r0, [r1, #11]
    413a:	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    413c:	lsls	r2, r0, #29
    413e:	bmi.n	414c <Sd2Card::chipSelectHigh()+0x44>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    4140:	lsls	r3, r0, #28
    4142:	bpl.n	414a <Sd2Card::chipSelectHigh()+0x42>
				NVIC_ISER3 = interruptSave[3];
    4144:	ldr	r3, [pc, #32]	; (4168 <Sd2Card::chipSelectHigh()+0x60>)
    4146:	ldr	r2, [r1, #40]	; 0x28
    4148:	str	r2, [r3, #0]
    414a:	pop	{r4, pc}
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    414c:	ldr	r3, [pc, #28]	; (416c <Sd2Card::chipSelectHigh()+0x64>)
    414e:	ldr	r2, [r1, #36]	; 0x24
    4150:	ldrb	r0, [r1, #11]
    4152:	str	r2, [r3, #0]
    4154:	b.n	4140 <Sd2Card::chipSelectHigh()+0x38>
    4156:	nop
    4158:	.word	0x2001dcfc
    415c:	.word	0x2001778c
    4160:	.word	0xe000e100
    4164:	.word	0xe000e104
    4168:	.word	0xe000e10c
    416c:	.word	0xe000e108

00004170 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    4170:	ldr	r3, [pc, #140]	; (4200 <Sd2Card::chipSelectLow()+0x90>)
    4172:	ldrb	r2, [r3, #0]
    4174:	cbz	r2, 417e <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    4176:	ldrb	r0, [r0, #0]
    4178:	movs	r1, #0
    417a:	b.w	8e78 <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    417e:	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    4180:	ldr	r2, [pc, #128]	; (4204 <Sd2Card::chipSelectLow()+0x94>)
    4182:	ldr	r1, [pc, #132]	; (4208 <Sd2Card::chipSelectLow()+0x98>)
    4184:	ldrb	r4, [r2, #11]
    4186:	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    4188:	movs	r5, #1
    418a:	strb	r5, [r3, #0]
    418c:	cmp	r4, #0
    418e:	beq.n	41de <Sd2Card::chipSelectLow()+0x6e>
			__disable_irq();
    4190:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    4192:	ldrb	r4, [r2, #11]
    4194:	lsls	r6, r4, #31
    4196:	mov	r3, r4
    4198:	bpl.n	41a8 <Sd2Card::chipSelectLow()+0x38>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    419a:	ldr	r5, [pc, #112]	; (420c <Sd2Card::chipSelectLow()+0x9c>)
    419c:	ldr	r3, [r2, #12]
    419e:	ldr	r6, [r5, #0]
    41a0:	ands	r3, r6
    41a2:	str	r3, [r2, #28]
				NVIC_ICER0 = interruptSave[0];
    41a4:	str	r3, [r5, #0]
    41a6:	mov	r3, r4
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    41a8:	lsls	r5, r4, #30
    41aa:	bpl.n	41ba <Sd2Card::chipSelectLow()+0x4a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    41ac:	ldr	r5, [pc, #96]	; (4210 <Sd2Card::chipSelectLow()+0xa0>)
    41ae:	ldr	r4, [r2, #16]
    41b0:	ldr	r6, [r5, #0]
    41b2:	ldrb	r3, [r2, #11]
    41b4:	ands	r4, r6
    41b6:	str	r4, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
    41b8:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    41ba:	lsls	r4, r3, #29
    41bc:	bpl.n	41cc <Sd2Card::chipSelectLow()+0x5c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    41be:	ldr	r5, [pc, #84]	; (4214 <Sd2Card::chipSelectLow()+0xa4>)
    41c0:	ldr	r4, [r2, #20]
    41c2:	ldr	r6, [r5, #0]
    41c4:	ldrb	r3, [r2, #11]
    41c6:	ands	r4, r6
    41c8:	str	r4, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    41ca:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    41cc:	lsls	r3, r3, #28
    41ce:	bpl.n	41dc <Sd2Card::chipSelectLow()+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    41d0:	ldr	r4, [pc, #68]	; (4218 <Sd2Card::chipSelectLow()+0xa8>)
    41d2:	ldr	r3, [r2, #24]
    41d4:	ldr	r5, [r4, #0]
    41d6:	ands	r3, r5
    41d8:	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    41da:	str	r3, [r4, #0]
			}
			#endif
			__enable_irq();
    41dc:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    41de:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    41e0:	ldr	r2, [r3, #12]
    41e2:	cmp	r2, r1
    41e4:	beq.n	41f6 <Sd2Card::chipSelectLow()+0x86>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    41e6:	ldr	r4, [pc, #52]	; (421c <Sd2Card::chipSelectLow()+0xac>)
    41e8:	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    41ea:	ldr	r2, [pc, #52]	; (4220 <Sd2Card::chipSelectLow()+0xb0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    41ec:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    41ee:	orr.w	r4, r1, #1073741824	; 0x40000000
    41f2:	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    41f4:	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    41f6:	ldrb	r0, [r0, #0]
    41f8:	movs	r1, #0
}
    41fa:	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    41fc:	b.w	8e78 <digitalWrite>
    4200:	.word	0x2001dcfc
    4204:	.word	0x2001778c
    4208:	.word	0x2001dcf8
    420c:	.word	0xe000e180
    4210:	.word	0xe000e184
    4214:	.word	0xe000e188
    4218:	.word	0xe000e18c
    421c:	.word	0x003f4001
    4220:	.word	0x803f0000

00004224 <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    4224:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4226:	ldr	r0, [pc, #72]	; (4270 <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4228:	ldr	r2, [pc, #72]	; (4274 <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    422a:	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    422c:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    422e:	mov	r6, r2
    4230:	str	r3, [sp, #0]
	return ret;
    4232:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    4234:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    4238:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    423a:	ldr	r3, [r2, #0]
    423c:	orr.w	r3, r3, #1024	; 0x400
    4240:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    4242:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    4244:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    4246:	ldr	r3, [r2, #44]	; 0x2c
    4248:	cmp	r3, #0
    424a:	bge.n	4246 <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    424c:	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    424e:	uxtb	r3, r3
    4250:	cmp	r3, #255	; 0xff
    4252:	beq.n	4268 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4254:	ldr	r3, [r0, #0]
    4256:	str	r3, [sp, #4]
	return ret;
    4258:	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    425a:	subs	r3, r3, r7
    425c:	cmp	r3, r1
    425e:	bcc.n	423a <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    4260:	movs	r0, #0
}
    4262:	add	sp, #8
    4264:	pop	{r4, r5, r6, r7}
    4266:	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    4268:	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    426a:	add	sp, #8
    426c:	pop	{r4, r5, r6, r7}
    426e:	bx	lr
    4270:	.word	0x2001dd64
    4274:	.word	0x4002c000

00004278 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    4278:	push	{r3, r4, r5, r6, r7, lr}
    427a:	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    427c:	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    4280:	mov	r6, r2
    4282:	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    4284:	bl	4224 <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4288:	ldr	r3, [pc, #160]	; (432c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    428a:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    428c:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4290:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    4294:	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4298:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    429a:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    429c:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    429e:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    42a0:	ldr	r3, [r2, #44]	; 0x2c
    42a2:	cmp	r3, #0
    42a4:	bge.n	42a0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    42a6:	ldr	r1, [pc, #132]	; (432c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    42a8:	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    42aa:	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    42ae:	ldr	r2, [r1, #0]
    42b0:	lsr.w	r3, r6, r0
    42b4:	orr.w	r2, r2, #1024	; 0x400
    42b8:	uxtb	r3, r3
    42ba:	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    42bc:	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    42be:	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    42c0:	ldr	r3, [r1, #44]	; 0x2c
    42c2:	cmp	r3, #0
    42c4:	bge.n	42c0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    42c6:	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    42c8:	cmn.w	r0, #8
    42cc:	bne.n	42ae <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    42ce:	cbz	r5, 4326 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    42d0:	cmp	r5, #8
    42d2:	ite	eq
    42d4:	moveq	r1, #135	; 0x87
    42d6:	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    42d8:	ldr	r3, [pc, #80]	; (432c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    42da:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    42dc:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    42e0:	orr.w	r2, r2, #1024	; 0x400
    42e4:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    42e6:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    42e8:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    42ea:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    42ec:	ldr	r3, [r2, #44]	; 0x2c
    42ee:	cmp	r3, #0
    42f0:	bge.n	42ec <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    42f2:	ldr	r2, [pc, #56]	; (432c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    42f4:	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    42f6:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    42f8:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    42fc:	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    42fe:	ldr	r3, [r2, #0]
    4300:	orr.w	r3, r3, #1024	; 0x400
    4304:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    4306:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    4308:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    430a:	ldr	r3, [r2, #44]	; 0x2c
    430c:	cmp	r3, #0
    430e:	bge.n	430a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    4310:	ldr	r3, [r6, #56]	; 0x38
    4312:	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    4314:	lsls	r3, r3, #24
    4316:	strb	r0, [r4, #1]
    4318:	bmi.n	431c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    431a:	pop	{r3, r4, r5, r6, r7, pc}
    431c:	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    431e:	cmp.w	r7, #256	; 0x100
    4322:	bne.n	42fe <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    4324:	pop	{r3, r4, r5, r6, r7, pc}
    4326:	movs	r1, #149	; 0x95
    4328:	b.n	42d8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    432a:	nop
    432c:	.word	0x4002c000

00004330 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    4330:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4332:	ldr	r1, [pc, #84]	; (4388 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4334:	ldr	r2, [pc, #84]	; (438c <Sd2Card::waitStartBlock()+0x5c>)
    4336:	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    4338:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    433a:	mov	r6, r2
    433c:	str	r3, [sp, #0]
	return ret;
    433e:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    4340:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    4344:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4346:	ldr	r3, [r2, #0]
    4348:	orr.w	r3, r3, #1024	; 0x400
    434c:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    434e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    4350:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    4352:	ldr	r3, [r2, #44]	; 0x2c
    4354:	cmp	r3, #0
    4356:	bge.n	4352 <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    4358:	ldr	r3, [r6, #56]	; 0x38
    435a:	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    435c:	cmp	r3, #255	; 0xff
    435e:	strb	r3, [r0, #1]
    4360:	bne.n	4378 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4362:	ldr	r3, [r1, #0]
    4364:	str	r3, [sp, #4]
	return ret;
    4366:	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    4368:	subs	r3, r3, r7
    436a:	cmp.w	r3, #300	; 0x12c
    436e:	bls.n	4346 <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    4370:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    4372:	add	sp, #8
    4374:	pop	{r4, r5, r6, r7}
    4376:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    4378:	sub.w	r0, r3, #254	; 0xfe
    437c:	clz	r0, r0
    4380:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    4382:	add	sp, #8
    4384:	pop	{r4, r5, r6, r7}
    4386:	bx	lr
    4388:	.word	0x2001dd64
    438c:	.word	0x4002c000

00004390 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    4390:	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    4392:	ldrb	r3, [r0, #2]
    4394:	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    4396:	mov	r6, r1
    4398:	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    439a:	it	ne
    439c:	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    439e:	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    43a0:	bl	4170 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    43a4:	mov	r2, r6
    43a6:	movs	r1, #17
    43a8:	mov	r0, r4
    43aa:	bl	4278 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    43ae:	cbnz	r0, 43b8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    43b0:	mov	r0, r4
    43b2:	bl	4330 <Sd2Card::waitStartBlock()>
    43b6:	cbnz	r0, 43c2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    43b8:	mov	r0, r4
    43ba:	bl	4108 <Sd2Card::chipSelectHigh()>
  return false;
    43be:	movs	r0, #0
}
    43c0:	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    43c2:	ldr	r3, [pc, #128]	; (4444 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    43c4:	ldr	r1, [pc, #128]	; (4448 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    43c6:	ldr	r2, [pc, #132]	; (444c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    43c8:	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    43ca:	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    43cc:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    43ce:	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    43d0:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    43d2:	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    43d4:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    43d6:	add.w	r0, r5, #506	; 0x1fa
    43da:	adds	r1, r5, #2
    43dc:	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    43e0:	ldr	r3, [r2, #44]	; 0x2c
    43e2:	tst.w	r3, #240	; 0xf0
    43e6:	beq.n	43e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    43e8:	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    43ec:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    43ee:	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    43f2:	asrs	r3, r3, #8
    43f4:	strb.w	r3, [r1, #-2]
    43f8:	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    43fa:	cmp	r7, r1
    43fc:	bne.n	43e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    43fe:	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    4402:	cmp	r0, r5
    4404:	bcs.n	4422 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    4406:	ldr	r2, [pc, #60]	; (4444 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    4408:	mov	r6, r2
    440a:	ldr	r3, [r2, #44]	; 0x2c
    440c:	tst.w	r3, #240	; 0xf0
    4410:	beq.n	440a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    4412:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    4414:	asrs	r1, r3, #8
    4416:	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    441a:	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    441c:	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    4420:	bcc.n	440a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    4422:	ldr	r3, [pc, #32]	; (4444 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    4424:	ldr	r1, [pc, #36]	; (444c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    4426:	ldr	r2, [pc, #32]	; (4448 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    4428:	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    442a:	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    442c:	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    442e:	ldr	r3, [r1, #44]	; 0x2c
    4430:	ldr	r2, [pc, #16]	; (4444 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    4432:	tst.w	r3, #240	; 0xf0
    4436:	beq.n	442e <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    4438:	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    443a:	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    443c:	bl	4108 <Sd2Card::chipSelectHigh()>
  return true;
    4440:	movs	r0, #1
    4442:	pop	{r3, r4, r5, r6, r7, pc}
    4444:	.word	0x4002c000
    4448:	.word	0x9000ffff
    444c:	.word	0x801f0400

00004450 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    4450:	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    4452:	ldr	r6, [pc, #196]	; (4518 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    4454:	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    4456:	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    445a:	orr.w	r3, r3, #1024	; 0x400
    445e:	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    4460:	mov	r5, r7
    4462:	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    4464:	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    4466:	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    4468:	mov	r3, r6
    446a:	adds	r1, r2, #1
    446c:	addw	r7, r2, #513	; 0x201
    4470:	ldr	r2, [r4, #44]	; 0x2c
    4472:	cmp	r2, #0
    4474:	bge.n	4470 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    4476:	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    4478:	ldrb.w	r6, [r1, #-1]
    447c:	orr.w	r2, r2, #1024	; 0x400
    4480:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    4482:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    4484:	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    4486:	ldr	r2, [r4, #44]	; 0x2c
    4488:	cmp	r2, #0
    448a:	bge.n	4486 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    448c:	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    448e:	ldrb.w	r6, [r1], #2
    4492:	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    4496:	cmp	r7, r1
    4498:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    449a:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    449c:	str	r6, [r3, #52]	; 0x34
    449e:	bne.n	4470 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    44a0:	ldr	r1, [pc, #116]	; (4518 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    44a2:	ldr	r2, [r1, #44]	; 0x2c
    44a4:	ldr	r3, [pc, #112]	; (4518 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    44a6:	cmp	r2, #0
    44a8:	bge.n	44a2 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44aa:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    44ac:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44b0:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    44b4:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44b6:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    44b8:	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    44ba:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    44bc:	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    44be:	ldr	r3, [r1, #44]	; 0x2c
    44c0:	ldr	r2, [pc, #84]	; (4518 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    44c2:	cmp	r3, #0
    44c4:	bge.n	44be <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44c6:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    44c8:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44cc:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    44d0:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44d2:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    44d4:	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    44d6:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    44d8:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    44da:	ldr	r3, [r1, #44]	; 0x2c
    44dc:	ldr	r2, [pc, #56]	; (4518 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    44de:	cmp	r3, #0
    44e0:	bge.n	44da <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44e2:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    44e4:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44e8:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    44ec:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    44ee:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    44f0:	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    44f2:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    44f4:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    44f6:	ldr	r3, [r1, #44]	; 0x2c
    44f8:	ldr	r2, [pc, #28]	; (4518 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    44fa:	cmp	r3, #0
    44fc:	bge.n	44f6 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    44fe:	ldr	r3, [r2, #56]	; 0x38
    4500:	uxtb	r3, r3
    4502:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    4506:	strb	r3, [r0, #1]
    4508:	sub.w	r0, r2, #5
    450c:	clz	r0, r0
    4510:	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    4512:	pop	{r4, r5, r6, r7}
    4514:	bx	lr
    4516:	nop
    4518:	.word	0x4002c000

0000451c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    451c:	push	{r4, r5, r6, lr}
    451e:	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    4520:	cbz	r1, 4540 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    4522:	ldrb	r3, [r0, #2]
    4524:	cmp	r3, #3
    4526:	mov	r5, r1
    4528:	it	ne
    452a:	lslne	r5, r1, #9
    452c:	mov	r6, r2
  chipSelectLow();
    452e:	bl	4170 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    4532:	mov	r2, r5
    4534:	movs	r1, #24
    4536:	mov	r0, r4
    4538:	bl	4278 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    453c:	mov	r5, r0
    453e:	cbz	r0, 454a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    4540:	mov	r0, r4
    4542:	bl	4108 <Sd2Card::chipSelectHigh()>
  return false;
    4546:	movs	r0, #0
}
    4548:	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    454a:	mov	r2, r6
    454c:	movs	r1, #254	; 0xfe
    454e:	mov	r0, r4
    4550:	bl	4450 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    4554:	cmp	r0, #0
    4556:	beq.n	4540 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    4558:	mov.w	r1, #600	; 0x258
    455c:	mov	r0, r4
    455e:	bl	4224 <Sd2Card::waitNotBusy(unsigned int)>
    4562:	cmp	r0, #0
    4564:	beq.n	4540 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    4566:	mov	r2, r5
    4568:	movs	r1, #13
    456a:	mov	r0, r4
    456c:	bl	4278 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    4570:	cmp	r0, #0
    4572:	bne.n	4540 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4574:	ldr	r3, [pc, #44]	; (45a4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    4576:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    4578:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    457c:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    4580:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    4582:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    4584:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    4586:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    4588:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    458a:	ldr	r3, [r1, #44]	; 0x2c
    458c:	ldr	r2, [pc, #20]	; (45a4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    458e:	cmp	r3, #0
    4590:	bge.n	458a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    4592:	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    4594:	tst.w	r3, #255	; 0xff
    4598:	bne.n	4540 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    459a:	mov	r0, r4
    459c:	bl	4108 <Sd2Card::chipSelectHigh()>
  return true;
    45a0:	movs	r0, #1
    45a2:	pop	{r4, r5, r6, pc}
    45a4:	.word	0x4002c000

000045a8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    45a8:	ldr	r3, [pc, #4]	; (45b0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    45aa:	ldr	r2, [pc, #8]	; (45b4 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    45ac:	str	r2, [r3, #0]
    45ae:	bx	lr
    45b0:	.word	0x2001dcf8
    45b4:	.word	0x38011001

000045b8 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    45b8:	push	{r4, lr}
    45ba:	mov	r4, r0
  bool rtn = sync();
    45bc:	bl	55b4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    45c0:	movs	r3, #0
    45c2:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    45c6:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    45ca:	pop	{r4, pc}

000045cc <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    45cc:	ldrb.w	r2, [r0, #49]	; 0x31
    45d0:	cbz	r2, 45d6 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    45d2:	movs	r0, #0
    45d4:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    45d6:	push	{r3, r4, r5, lr}
    45d8:	mov	r4, r0
    45da:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    45dc:	mov	r1, r2
    45de:	movs	r2, #56	; 0x38
    45e0:	bl	c7ac <memset>
  m_attributes = FILE_ATTR_ROOT;
    45e4:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    45e6:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    45e8:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    45ec:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    45f0:	str	r5, [r4, #32]
    45f2:	pop	{r3, r4, r5, pc}

000045f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    45f4:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    45f6:	ldrb	r0, [r1, #0]
    45f8:	cmp	r0, #32
    45fa:	bne.n	4604 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    45fc:	ldrb.w	r0, [r1, #1]!
    4600:	cmp	r0, #32
    4602:	beq.n	45fc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    4604:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    4606:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    4608:	cmp	r0, #0
    460a:	beq.n	46b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    460c:	cmp	r0, #47	; 0x2f
    460e:	beq.n	4668 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    4610:	cmp	r0, #92	; 0x5c
    4612:	beq.n	4656 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    4614:	sub.w	r4, r0, #34	; 0x22
    4618:	uxtb	r4, r4
    461a:	cmp	r4, #29
    461c:	bls.n	465a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    461e:	ldr.w	lr, [pc, #148]	; 46b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    4622:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4624:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    4626:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    4628:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    462c:	mov	r7, r6
    462e:	beq.n	4656 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    4630:	cmp	r5, #94	; 0x5e
    4632:	bhi.n	4656 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    4634:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    4638:	sub.w	r5, r0, #34	; 0x22
    463c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    463e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    4640:	cbz	r0, 46a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    4642:	cmp	r0, #47	; 0x2f
    4644:	beq.n	466a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    4646:	cmp	r0, #92	; 0x5c
    4648:	lsr.w	r7, lr, r5
    464c:	beq.n	4656 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    464e:	cmp	r5, #29
    4650:	bhi.n	4626 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    4652:	lsls	r5, r7, #31
    4654:	bpl.n	4626 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    4656:	movs	r0, #0
    4658:	pop	{r4, r5, r6, r7, pc}
    465a:	ldr	r5, [pc, #88]	; (46b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    465c:	lsr.w	r4, r5, r4
    4660:	lsls	r6, r4, #31
    4662:	bpl.n	461e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    4664:	movs	r0, #0
    4666:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4668:	movs	r4, #0
    466a:	adds	r7, r1, r4
    466c:	mov	r6, r7
    466e:	mov	r5, r4
    4670:	movs	r0, #47	; 0x2f
    4672:	b.n	467a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    4674:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    4678:	adds	r5, #1
    467a:	cmp	r0, #32
    467c:	beq.n	4674 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    467e:	cmp	r0, #47	; 0x2f
    4680:	beq.n	4674 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    4682:	add	r1, r5
    4684:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    4686:	cbz	r4, 469a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    4688:	mov	r1, r7
    c = path[len - 1];
    468a:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    468e:	cmp	r3, #46	; 0x2e
    4690:	beq.n	4696 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    4692:	cmp	r3, #32
    4694:	bne.n	46a8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    4696:	subs	r4, #1
    4698:	bne.n	468a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    469a:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    469c:	str	r0, [r2, #0]
  return true;
    469e:	movs	r0, #1
    46a0:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    46a2:	str	r7, [r3, #0]
    46a4:	adds	r7, r1, r4
    46a6:	b.n	4688 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    46a8:	cmp	r4, #255	; 0xff
    46aa:	ble.n	469a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    46ac:	movs	r0, #0
    46ae:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    46b0:	str	r1, [r3, #0]
    46b2:	b.n	469c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    46b4:	.word	0x35000101

000046b8 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    46b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46bc:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    46c0:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    46c2:	sub	sp, #12
    46c4:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    46c6:	bpl.w	4822 <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    46ca:	lsls	r0, r3, #25
    46cc:	mov	r5, r1
    46ce:	mov	r6, r2
    46d0:	bpl.w	4838 <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    46d4:	ldrd	r0, r1, [r4]
    46d8:	ldrd	r2, r3, [r4, #16]
    46dc:	adds.w	r8, r0, r6
    46e0:	adc.w	r9, r1, #0
    46e4:	cmp	r3, r9
    46e6:	it	eq
    46e8:	cmpeq	r2, r8
    46ea:	bcc.w	4844 <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    46ee:	cmp	r6, #0
    46f0:	beq.w	4848 <ExFatFile::read(void*, unsigned int)+0x190>
    46f4:	mov	r9, r4
    46f6:	ldrd	r2, r3, [r9], #24
    46fa:	mov	r8, r6
    46fc:	b.n	479e <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    46fe:	orrs	r3, r2
    4700:	bne.n	47da <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4702:	ldrb.w	r3, [r4, #49]	; 0x31
    4706:	lsls	r2, r3, #25
    4708:	ite	mi
    470a:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    470e:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    4710:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4712:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4716:	ldr.w	r2, [r0, #1060]	; 0x424
    471a:	subs	r1, #2
    471c:	lsrs	r7, r7, #9
    471e:	lsl.w	lr, r1, ip
    4722:	adds	r1, r7, r2
    4724:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    4726:	cmp.w	sl, #0
    472a:	bne.n	47b2 <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    472c:	cmp.w	r8, #512	; 0x200
    4730:	bcc.n	47b2 <ExFatFile::read(void*, unsigned int)+0xfa>
    4732:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    4736:	cmp	r1, r2
    4738:	beq.n	47b2 <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    473a:	cmp.w	r8, #1024	; 0x400
    473e:	bcc.n	47e8 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4740:	movs	r3, #1
    4742:	lsl.w	ip, r3, ip
    4746:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    474a:	mov.w	r3, r8, lsr #9
    474e:	cmp	r7, r3
    4750:	it	cs
    4752:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    4754:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    4756:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    475a:	bhi.n	4774 <ExFatFile::read(void*, unsigned int)+0xbc>
    475c:	adds	r3, r7, r1
    475e:	cmp	r3, r2
    4760:	bls.n	4774 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    4762:	add.w	r0, r0, #524	; 0x20c
    4766:	str	r1, [sp, #4]
    4768:	bl	4f58 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    476c:	cmp	r0, #0
    476e:	beq.n	4822 <ExFatFile::read(void*, unsigned int)+0x16a>
    4770:	ldr	r0, [r4, #32]
    4772:	ldr	r1, [sp, #4]
    4774:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    4778:	ldr	r2, [r0, #0]
    477a:	mov	r3, r7
    477c:	ldr	r7, [r2, #12]
    477e:	mov	r2, r5
    4780:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    4782:	cmp	r0, #0
    4784:	beq.n	4822 <ExFatFile::read(void*, unsigned int)+0x16a>
    4786:	mov	r0, fp
    4788:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    478a:	ldrd	r2, r3, [r4]
    478e:	adds	r2, r2, r0
    4790:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4792:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    4796:	add	r5, fp
    m_curPosition += n;
    4798:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    479c:	beq.n	4848 <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    479e:	ldr	r0, [r4, #32]
    47a0:	ldr.w	r7, [r0, #1072]	; 0x430
    47a4:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    47a6:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    47aa:	cmp	r7, #0
    47ac:	beq.n	46fe <ExFatFile::read(void*, unsigned int)+0x46>
    47ae:	ldr	r1, [r4, #24]
    47b0:	b.n	4712 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    47b2:	add.w	r0, r0, #524	; 0x20c
    47b6:	movs	r2, #0
    47b8:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    47bc:	cbz	r0, 4822 <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    47be:	rsb	fp, sl, #512	; 0x200
    47c2:	cmp	fp, r8
    47c4:	it	cs
    47c6:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    47c8:	add.w	r1, r0, sl
    47cc:	mov	r2, fp
    47ce:	mov	r0, r5
    47d0:	bl	87fc <memcpy>
    47d4:	mov	r0, fp
    47d6:	movs	r1, #0
    47d8:	b.n	478a <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    47da:	ldrb.w	r3, [r4, #51]	; 0x33
    47de:	lsls	r3, r3, #25
    47e0:	bpl.n	4802 <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    47e2:	ldr	r1, [r4, #24]
    47e4:	adds	r1, #1
    47e6:	b.n	4710 <ExFatFile::read(void*, unsigned int)+0x58>
    47e8:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    47ec:	ldr	r3, [r0, #0]
    47ee:	mov	r2, r5
    47f0:	ldr	r3, [r3, #8]
    47f2:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    47f4:	cbz	r0, 4822 <ExFatFile::read(void*, unsigned int)+0x16a>
    47f6:	mov.w	r0, #512	; 0x200
    47fa:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    47fc:	mov.w	fp, #512	; 0x200
    4800:	b.n	478a <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4802:	mov	r2, r9
    4804:	ldr	r1, [r4, #24]
    4806:	bl	526c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    480a:	sxtb	r0, r0
        if (fg < 0) {
    480c:	cmp	r0, #0
    480e:	blt.n	4822 <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    4810:	beq.n	4818 <ExFatFile::read(void*, unsigned int)+0x160>
    4812:	ldr	r0, [r4, #32]
    4814:	ldr	r1, [r4, #24]
    4816:	b.n	4712 <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    4818:	ldrb.w	r3, [r4, #49]	; 0x31
    481c:	tst.w	r3, #80	; 0x50
    4820:	bne.n	484c <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    4822:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    4826:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    482a:	orr.w	r3, r3, #2
    482e:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    4832:	add	sp, #12
    4834:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4838:	ldrb.w	r3, [r4, #49]	; 0x31
    483c:	lsls	r1, r3, #28
    483e:	bmi.w	46d4 <ExFatFile::read(void*, unsigned int)+0x1c>
    4842:	b.n	46ee <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    4844:	subs	r6, r2, r0
    4846:	b.n	46ee <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4848:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    484c:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    4850:	add	sp, #12
    4852:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4856:	nop

00004858 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    4858:	push	{r4, r5, r6, r7, lr}
    485a:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    485c:	movs	r2, #1
    485e:	add.w	r1, sp, #7
    4862:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    4864:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    4868:	ldr	r5, [r0, #24]
    486a:	bl	46b8 <ExFatFile::read(void*, unsigned int)>
    486e:	cmp	r0, #1
    4870:	it	eq
    4872:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    4876:	str	r5, [r4, #24]
    4878:	it	ne
    487a:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    487e:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    4882:	add	sp, #12
    4884:	pop	{r4, r5, r6, r7, pc}
    4886:	nop

00004888 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4888:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    488c:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4890:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4892:	sub	sp, #12
    4894:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    4896:	cmp.w	lr, #0
    489a:	beq.n	48d4 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    489c:	ldrd	r0, r1, [r0]
    48a0:	cmp	r1, r3
    48a2:	it	eq
    48a4:	cmpeq	r0, r2
    48a6:	mov	r6, r2
    48a8:	mov	r7, r3
    48aa:	beq.n	4924 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    48ac:	orrs.w	r3, r6, r7
    48b0:	bne.n	48c2 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    48b2:	movs	r3, #0
    48b4:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    48b6:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    48b8:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    48bc:	add	sp, #12
    48be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    48c2:	tst.w	lr, #8
    48c6:	beq.n	48de <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    48c8:	ldrd	r2, r3, [r4, #16]
    48cc:	cmp	r3, r7
    48ce:	it	eq
    48d0:	cmpeq	r2, r6
    48d2:	bcs.n	48de <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    48d4:	str	r5, [r4, #24]
  return false;
    48d6:	movs	r0, #0
}
    48d8:	add	sp, #12
    48da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    48de:	ldr	r3, [r4, #32]
    48e0:	str	r3, [sp, #4]
    48e2:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    48e6:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    48ea:	add.w	ip, ip, #9
    48ee:	uxtb.w	ip, ip
    48f2:	adds.w	r2, r6, #4294967295
    48f6:	adc.w	r3, r7, #4294967295
    48fa:	rsb	r8, ip, #32
    48fe:	lsl.w	fp, r3, r8
    4902:	lsr.w	r2, r2, ip
    4906:	orr.w	r2, r2, fp
    490a:	sub.w	fp, ip, #32
    490e:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    4912:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4916:	orr.w	r2, r2, r3
  if (isContiguous()) {
    491a:	beq.n	4928 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    491c:	ldr	r3, [r4, #28]
    491e:	add	r2, r3
    4920:	str	r2, [r4, #24]
    goto done;
    4922:	b.n	48b6 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    4924:	movs	r0, #1
    4926:	b.n	48d8 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4928:	adds.w	r9, r0, #4294967295
    492c:	adc.w	sl, r1, #4294967295
    4930:	lsr.w	ip, r9, ip
    4934:	lsl.w	r8, sl, r8
    4938:	orr.w	ip, ip, r8
    493c:	lsr.w	fp, sl, fp
    4940:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    4944:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4946:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    4948:	bcs.n	497a <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    494a:	tst.w	lr, #64	; 0x40
    494e:	itet	ne
    4950:	ldrne	r3, [sp, #4]
    4952:	ldreq	r3, [r4, #28]
    4954:	ldrne.w	r3, [r3, #1068]	; 0x42c
    4958:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    495a:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    495c:	add.w	r9, r4, #24
    4960:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    4962:	cmp.w	r8, #0
    4966:	beq.n	48b6 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4968:	ldr	r1, [r4, #24]
    496a:	ldr	r0, [r4, #32]
    496c:	bl	526c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4970:	add.w	r8, r8, #4294967295
    4974:	cmp	r0, #0
    4976:	bne.n	4960 <ExFatFile::seekSet(unsigned long long)+0xd8>
    4978:	b.n	48d4 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    497a:	orrs.w	r3, r0, r1
    497e:	beq.n	494a <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    4980:	rsb	r2, ip, r2
    4984:	b.n	495a <ExFatFile::seekSet(unsigned long long)+0xd2>
    4986:	nop

00004988 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4988:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    498c:	mov	r6, r1
    498e:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4990:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4994:	str	r2, [sp, #0]
    4996:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4998:	cbnz	r1, 49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    499a:	mov	sl, r3
    499c:	ldrb.w	r3, [r6, #49]	; 0x31
    49a0:	tst.w	r3, #80	; 0x50
    49a4:	bne.n	49b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    49a6:	movs	r0, #0
    49a8:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    49ac:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    49b0:	add	sp, #76	; 0x4c
    49b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    49b6:	ldr	r3, [sp, #112]	; 0x70
    49b8:	and.w	r3, r3, #3
    49bc:	cmp	r3, #1
    49be:	beq.n	49ce <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    49c0:	cmp	r3, #2
    49c2:	beq.w	4bd8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    49c6:	cmp	r3, #0
    49c8:	bne.n	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    49ca:	movs	r3, #1
    49cc:	b.n	49d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    49ce:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    49d0:	ldr	r2, [sp, #112]	; 0x70
    49d2:	and.w	r2, r2, #8
    49d6:	orrs	r3, r2
    49d8:	str	r3, [sp, #4]
  if (name) {
    49da:	ldr	r3, [sp, #0]
    49dc:	cmp	r3, #0
    49de:	beq.w	4bdc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    49e2:	mov	r0, r3
    49e4:	movs	r2, #0
    49e6:	mov	r1, sl
    49e8:	bl	533c <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    49ec:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    49f0:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    49f2:	cbz	r3, 4a08 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    49f4:	ldrd	r2, r3, [r6]
    49f8:	orrs	r3, r2
    49fa:	beq.n	4a08 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    49fc:	movs	r2, #0
    49fe:	movs	r3, #0
    4a00:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    4a04:	movs	r1, #0
    4a06:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4a08:	ldr	r2, [pc, #736]	; (4cec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    4a0a:	add.w	r3, sl, #14
    4a0e:	smull	r1, r2, r2, r3
    4a12:	add	r2, r3
    4a14:	asrs	r3, r3, #31
    4a16:	rsb	r3, r3, r2, asr #3
    4a1a:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    4a1c:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4a20:	str	r3, [sp, #12]
    4a22:	adds	r3, #2
    4a24:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    4a28:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    4a2a:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4a2c:	movs	r2, #32
    4a2e:	add	r1, sp, #40	; 0x28
    4a30:	mov	r0, r6
    4a32:	bl	46b8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4a36:	cmp	r0, #0
    4a38:	beq.n	4ab6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    4a3a:	cmp	r0, #32
    4a3c:	bne.n	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    4a3e:	ldrb.w	r3, [sp, #40]	; 0x28
    4a42:	lsls	r2, r3, #24
    4a44:	bmi.n	4b14 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    4a46:	cmp	r4, #0
    4a48:	bne.n	4b0e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    4a4a:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    4a4c:	ldr	r1, [r6, #24]
    4a4e:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4a50:	subs	r2, #32
    4a52:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    4a54:	adds	r4, #1
    4a56:	uxtb	r4, r4
      }
      if (!buf[0]) {
    4a58:	cbz	r3, 4ab6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    4a5a:	cmp	r3, #192	; 0xc0
    4a5c:	beq.w	4b86 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    4a60:	cmp	r3, #193	; 0xc1
    4a62:	beq.n	4b2a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    4a64:	cmp	r3, #133	; 0x85
    4a66:	bne.n	4a2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    4a68:	movs	r2, #56	; 0x38
    4a6a:	movs	r1, #0
    4a6c:	mov	r0, r5
    4a6e:	bl	c7ac <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4a72:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    4a76:	ldrb.w	r2, [sp, #41]	; 0x29
    4a7a:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    4a7e:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4a80:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    4a84:	it	pl
    4a86:	orrpl.w	r2, r2, #8
    4a8a:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4a8e:	ldr	r3, [r6, #0]
    4a90:	ldr	r1, [r6, #32]
    4a92:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    4a94:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    4a96:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    4a98:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4a9a:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    4a9c:	ldrb.w	r3, [r6, #51]	; 0x33
    4aa0:	ubfx	r3, r3, #6, #1
    4aa4:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4aa8:	movs	r2, #32
    4aaa:	add	r1, sp, #40	; 0x28
    4aac:	mov	r0, r6
    4aae:	bl	46b8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4ab2:	cmp	r0, #0
    4ab4:	bne.n	4a3a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    4ab6:	ldr	r3, [sp, #112]	; 0x70
    4ab8:	lsls	r1, r3, #22
    4aba:	bpl.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4abe:	ldr	r3, [sp, #4]
    4ac0:	lsls	r2, r3, #30
    4ac2:	bpl.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4ac6:	ldr	r3, [sp, #0]
    4ac8:	cmp	r3, #0
    4aca:	beq.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4ace:	cmp	r4, fp
    4ad0:	bcc.n	4aec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    4ad2:	b.n	4be2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    4ad4:	cmp	r0, #32
    4ad6:	bne.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    4ada:	cbnz	r4, 4ae6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    4adc:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    4ade:	ldr	r1, [r6, #24]
    4ae0:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    4ae2:	subs	r2, #32
    4ae4:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    4ae6:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4ae8:	cmp	fp, r4
    4aea:	bls.n	4be2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    4aec:	movs	r2, #32
    4aee:	add	r1, sp, #40	; 0x28
    4af0:	mov	r0, r6
    4af2:	bl	46b8 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    4af6:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    4af8:	cmp	r0, #0
    4afa:	bne.n	4ad4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    4afc:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    4afe:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    4b00:	bl	5614 <ExFatFile::addDirCluster()>
    4b04:	cmp	r0, #0
    4b06:	beq.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    4b0a:	str	r7, [r6, #24]
      continue;
    4b0c:	b.n	4ae8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    4b0e:	cmp	r4, fp
    4b10:	bcs.n	4a58 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    4b12:	b.n	4a54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    4b14:	cmp.w	r9, #0
    4b18:	bne.n	4a5a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    4b1a:	cmp	r4, fp
    4b1c:	it	cc
    4b1e:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    4b20:	cmp	r3, #133	; 0x85
    4b22:	bne.n	4a2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    4b24:	mov.w	r9, #1
    4b28:	b.n	4a68 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    4b2a:	rsb	r8, r7, sl
    4b2e:	uxtb.w	r8, r8
    4b32:	cmp.w	r8, #15
    4b36:	it	cs
    4b38:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    4b3c:	mov	r3, r8
    4b3e:	mov	r2, r7
    4b40:	ldr	r1, [sp, #0]
    4b42:	add	r0, sp, #40	; 0x28
    4b44:	bl	5378 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    4b48:	cmp	r0, #0
    4b4a:	beq.n	4bc6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    4b4c:	add	r7, r8
    4b4e:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4b50:	cmp	sl, r7
    4b52:	bne.w	4a2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    4b56:	ldr	r3, [sp, #112]	; 0x70
    4b58:	lsls	r3, r3, #20
    4b5a:	bmi.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4b5e:	ldr	r3, [sp, #112]	; 0x70
    4b60:	tst.w	r3, #17408	; 0x4400
    4b64:	bne.w	4ca8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    4b68:	ldrb.w	r3, [r5, #51]	; 0x33
    4b6c:	lsls	r7, r3, #30
    4b6e:	bmi.w	4ca8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4b72:	ldr	r3, [sp, #112]	; 0x70
    4b74:	lsls	r3, r3, #21
    4b76:	bmi.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4b7a:	ldr	r3, [sp, #112]	; 0x70
    4b7c:	lsls	r0, r3, #17
    4b7e:	bmi.w	4cf0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    4b82:	movs	r0, #1
    4b84:	b.n	49b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4b86:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4b8a:	ldr	r2, [sp, #4]
    4b8c:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4b90:	lsls	r1, r3, #30
    4b92:	bpl.n	4b9c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    4b94:	orr.w	r3, r2, #64	; 0x40
    4b98:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4b9c:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4ba0:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4ba4:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    4ba8:	ldr	r3, [sp, #60]	; 0x3c
    4baa:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    4bac:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4bae:	strd	r0, r1, [r5, #8]
        if (!name) {
    4bb2:	cmp	r3, #0
    4bb4:	beq.n	4b56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4bb6:	ldrb.w	r3, [sp, #43]	; 0x2b
    4bba:	cmp	r3, sl
    4bbc:	beq.n	4bca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    4bbe:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4bc2:	mov	r7, r9
    4bc4:	b.n	4a2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    4bc6:	mov	r9, r0
    4bc8:	b.n	4a2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4bca:	ldrh.w	r3, [sp, #44]	; 0x2c
    4bce:	ldr	r2, [sp, #8]
    4bd0:	cmp	r3, r2
    4bd2:	bne.n	4bbe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4bd4:	movs	r7, #0
    4bd6:	b.n	4a2c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4bd8:	movs	r3, #3
    4bda:	b.n	49d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    4bdc:	ldr	r3, [sp, #0]
    4bde:	str	r3, [sp, #8]
    4be0:	b.n	4a08 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4be2:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    4be6:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4be8:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    4bec:	movs	r1, #0
    4bee:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4bf0:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4bf4:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    4bf8:	bl	c7ac <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4bfc:	ldr	r4, [sp, #12]
    4bfe:	ldr	r3, [r6, #32]
    4c00:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4c04:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4c08:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    4c0c:	movs	r4, #8
    4c0e:	strb.w	r4, [r5, #49]	; 0x31
    4c12:	add.w	r7, sl, #30
  m_dirPos = freePos;
    4c16:	add.w	r4, r5, #36	; 0x24
    4c1a:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4c1e:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4c20:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4c24:	stmia.w	r4, {r0, r1, r2}
    4c28:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    4c2a:	movs	r6, #0
    4c2c:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    4c2e:	movs	r2, #1
    4c30:	mov	r1, r8
    4c32:	bl	51e0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4c36:	mov	r4, r0
    4c38:	cmp	r0, #0
    4c3a:	beq.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4c3e:	ldrsb.w	r3, [r0]
    4c42:	cmp	r3, #0
    4c44:	blt.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4c48:	movs	r2, #32
    4c4a:	movs	r1, #0
    4c4c:	bl	c7ac <memset>
    if (i == 0) {
    4c50:	cmp	r6, #0
    4c52:	beq.n	4d22 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    4c54:	cmp	r6, #1
    4c56:	beq.n	4d02 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    4c58:	rsb	r3, r6, r6, lsl #4
    4c5c:	cmp	r7, #15
    4c5e:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4c62:	mov.w	r2, #193	; 0xc1
    4c66:	mov	r1, r7
    4c68:	it	cs
    4c6a:	movcs	r1, #15
    4c6c:	uxtb	r3, r3
    4c6e:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4c70:	cbz	r1, 4c88 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4c72:	adds	r4, #2
    4c74:	sxth	r1, r1
    4c76:	add.w	r1, r4, r1, lsl #1
    4c7a:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    4c7c:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4c80:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4c84:	cmp	r1, r4
    4c86:	bne.n	4c7c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4c88:	adds	r6, #1
    4c8a:	uxtb	r6, r6
    4c8c:	cmp	fp, r6
    4c8e:	bls.n	4ce4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4c90:	movs	r2, #32
    4c92:	mov	r1, r8
    4c94:	ldr	r0, [r5, #32]
    4c96:	bl	5214 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4c9a:	cmp	r0, #1
    4c9c:	bne.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4ca0:	subs	r7, #15
    4ca2:	uxtb	r7, r7
    4ca4:	ldr	r0, [r5, #32]
    4ca6:	b.n	4c2e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    4ca8:	ldrb.w	r3, [r5, #49]	; 0x31
    4cac:	tst.w	r3, #17
    4cb0:	bne.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4cb4:	ldr	r3, [sp, #112]	; 0x70
    4cb6:	lsls	r6, r3, #21
    4cb8:	bpl.w	4b7a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    4cbc:	ldrb.w	r3, [r5, #51]	; 0x33
    4cc0:	lsls	r4, r3, #30
    4cc2:	bpl.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    4cc6:	movs	r2, #0
    4cc8:	movs	r3, #0
    4cca:	mov	r0, r5
    4ccc:	bl	4888 <ExFatFile::seekSet(unsigned long long)>
    4cd0:	cmp	r0, #0
    4cd2:	beq.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4cd6:	mov	r0, r5
    4cd8:	bl	578c <ExFatFile::truncate()>
    4cdc:	cmp	r0, #0
    4cde:	beq.w	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4ce2:	b.n	4b82 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    4ce4:	mov	r0, r5
    4ce6:	bl	55b4 <ExFatFile::sync()>
    4cea:	b.n	49b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    4cec:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4cf0:	ldrd	r2, r3, [r5, #16]
    4cf4:	mov	r0, r5
    4cf6:	bl	4888 <ExFatFile::seekSet(unsigned long long)>
    4cfa:	cmp	r0, #0
    4cfc:	bne.w	4b82 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    4d00:	b.n	49a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4d02:	movs	r3, #192	; 0xc0
    4d04:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4d06:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4d08:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4d0a:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4d0e:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4d10:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    4d14:	ldrb.w	r3, [sp, #12]
    4d18:	strb	r3, [r4, #3]
    4d1a:	ldrh.w	r3, [sp, #8]
    4d1e:	strh	r3, [r4, #4]
    4d20:	b.n	4c88 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    4d22:	movs	r3, #133	; 0x85
    4d24:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    4d26:	ldr	r3, [pc, #48]	; (4d58 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4d28:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    4d2c:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    4d30:	ldr	r3, [r3, #0]
    4d32:	cmp	r3, #0
    4d34:	beq.n	4c88 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    4d36:	add.w	r2, sp, #23
    4d3a:	add.w	r1, sp, #26
    4d3e:	add	r0, sp, #24
    4d40:	blx	r3
        dirFile->createTimeMs = ms10;
    4d42:	ldrb.w	r1, [sp, #23]
    4d46:	ldrh.w	r2, [sp, #26]
    4d4a:	ldrh.w	r3, [sp, #24]
    4d4e:	strb	r1, [r4, #20]
    4d50:	strh	r2, [r4, #8]
    4d52:	strh	r3, [r4, #10]
    4d54:	b.n	4c88 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4d56:	nop
    4d58:	.word	0x2001dd00

00004d5c <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4d5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d60:	mov	r6, r0
    4d62:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4d64:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4d68:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    4d6a:	movs	r0, #0
    4d6c:	strb.w	r0, [sp, #73]	; 0x49
    4d70:	strb.w	r0, [sp, #74]	; 0x4a
    4d74:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4d78:	cbnz	r4, 4d88 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    4d7a:	mov	r9, r3
    4d7c:	ldrb.w	r3, [r1, #49]	; 0x31
    4d80:	tst.w	r3, #80	; 0x50
    4d84:	mov	r5, r1
    4d86:	bne.n	4d90 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    4d88:	movs	r0, #0
}
    4d8a:	add	sp, #84	; 0x54
    4d8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4d90:	ldrb	r3, [r2, #0]
    4d92:	cmp	r3, #47	; 0x2f
    4d94:	mov	r4, r2
    4d96:	beq.n	4dfe <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4d98:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4d9c:	mov	r1, r4
    4d9e:	add	r3, sp, #12
    4da0:	add	r2, sp, #16
    4da2:	mov	r0, r6
    4da4:	bl	45f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4da8:	cmp	r0, #0
    4daa:	beq.n	4d88 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    4dac:	ldr	r3, [sp, #12]
    4dae:	ldrb	r3, [r3, #0]
    4db0:	cmp	r3, #0
    4db2:	beq.n	4e28 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    4db4:	ldrb.w	r3, [sp, #16]
    4db8:	ldr	r2, [sp, #20]
    4dba:	str.w	r8, [sp]
    4dbe:	mov	r1, r5
    4dc0:	mov	r0, r6
    4dc2:	bl	4988 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4dc6:	cmp	r0, #0
    4dc8:	beq.n	4d88 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    4dca:	mov	r4, r6
    4dcc:	add	r7, sp, #24
    4dce:	add.w	lr, r6, #48	; 0x30
    4dd2:	ldr	r0, [r4, #0]
    4dd4:	ldr	r1, [r4, #4]
    4dd6:	ldr	r2, [r4, #8]
    4dd8:	ldr	r3, [r4, #12]
    4dda:	mov	r5, r7
    4ddc:	stmia	r5!, {r0, r1, r2, r3}
    4dde:	adds	r4, #16
    4de0:	cmp	r4, lr
    4de2:	mov	r7, r5
    4de4:	bne.n	4dd2 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    4de6:	ldr	r0, [r4, #0]
    4de8:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    4dea:	mov	r0, r6
    4dec:	bl	55b4 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    4df0:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    4df2:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    4df6:	strb.w	r8, [r6, #51]	; 0x33
    4dfa:	ldr	r4, [sp, #12]
    4dfc:	b.n	4d9c <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4dfe:	adds	r4, #1
    4e00:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4e02:	ldrb	r1, [r4, #0]
    4e04:	cmp	r1, #47	; 0x2f
    4e06:	beq.n	4dfe <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    4e08:	cbz	r1, 4e40 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4e0a:	movs	r2, #56	; 0x38
    4e0c:	add	r0, sp, #24
    4e0e:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4e10:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4e12:	bl	c7ac <memset>
  m_attributes = FILE_ATTR_ROOT;
    4e16:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4e18:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    4e1a:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4e1c:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4e1e:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4e22:	strb.w	r3, [sp, #75]	; 0x4b
    4e26:	b.n	4d98 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    4e28:	ldrb.w	r3, [sp, #16]
    4e2c:	ldr	r2, [sp, #20]
    4e2e:	str.w	r9, [sp]
    4e32:	mov	r1, r5
    4e34:	mov	r0, r6
    4e36:	bl	4988 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    4e3a:	add	sp, #84	; 0x54
    4e3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4e40:	movs	r2, #56	; 0x38
    4e42:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4e44:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4e46:	bl	c7ac <memset>
  m_attributes = FILE_ATTR_ROOT;
    4e4a:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4e4c:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4e4e:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4e50:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4e54:	strb.w	r0, [r6, #51]	; 0x33
    4e58:	b.n	4d8a <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    4e5a:	nop

00004e5c <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4e5c:	cbz	r1, 4e66 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4e5e:	add.w	r1, r1, #1088	; 0x440
    4e62:	b.w	4d5c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4e66:	mov	r0, r1
    4e68:	bx	lr
    4e6a:	nop

00004e6c <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4e6c:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4e6e:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4e72:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4e74:	ldr	r0, [r0, #4]
    4e76:	ldr	r1, [r4, #8]
    4e78:	ldr	r3, [r0, #0]
    4e7a:	ldr	r3, [r3, #24]
    4e7c:	blx	r3
    4e7e:	cbz	r0, 4e88 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4e80:	ldrb	r3, [r4, #0]
    4e82:	bic.w	r3, r3, #1
    4e86:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    4e88:	pop	{r4, pc}
    4e8a:	nop

00004e8c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4e8c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    4e8e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4e92:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    4e94:	str	r3, [r0, #8]
    4e96:	bx	lr

00004e98 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4e98:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    4e9a:	ldr	r5, [r0, #4]
    4e9c:	cbz	r5, 4ede <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4e9e:	ldr	r3, [r0, #8]
    4ea0:	cmp	r3, r1
    4ea2:	mov	r4, r0
    4ea4:	mov	r7, r2
    4ea6:	mov	r6, r1
    4ea8:	beq.n	4ec8 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4eaa:	ldrb	r3, [r0, #0]
    4eac:	lsls	r2, r3, #31
    4eae:	bmi.n	4ed6 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4eb0:	lsls	r3, r7, #30
    4eb2:	bpl.n	4ee2 <FsCache::get(unsigned long, unsigned char)+0x4a>
    4eb4:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4eb8:	and.w	r2, r7, #1
    4ebc:	movs	r3, #0
    4ebe:	orrs	r3, r2
    4ec0:	strb	r3, [r4, #0]
    4ec2:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4ec4:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4ec6:	pop	{r3, r4, r5, r6, r7, pc}
    4ec8:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4ecc:	and.w	r2, r7, #1
    4ed0:	orrs	r3, r2
    4ed2:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4ed4:	pop	{r3, r4, r5, r6, r7, pc}
    4ed6:	bl	4e6c <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    4eda:	cmp	r0, #0
    4edc:	bne.n	4eb0 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4ede:	movs	r0, #0
    4ee0:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4ee2:	ldr	r0, [r4, #4]
    4ee4:	ldr	r3, [r0, #0]
    4ee6:	add.w	r5, r4, #12
    4eea:	ldr	r3, [r3, #8]
    4eec:	mov	r2, r5
    4eee:	mov	r1, r6
    4ef0:	blx	r3
    4ef2:	cmp	r0, #0
    4ef4:	bne.n	4eb8 <FsCache::get(unsigned long, unsigned char)+0x20>
    4ef6:	b.n	4ede <FsCache::get(unsigned long, unsigned char)+0x46>

00004ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4ef8:	push	{r3, r4, r5, lr}
    4efa:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4efc:	ldr.w	r1, [r0, #1052]	; 0x41c
    4f00:	mov	r5, r2
    4f02:	add.w	r1, r1, r4, lsr #7
    4f06:	add.w	r0, r0, #524	; 0x20c
    4f0a:	movs	r2, #0
    4f0c:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4f10:	cbz	r0, 4f24 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4f12:	lsls	r4, r4, #2
    4f14:	ubfx	r4, r4, #0, #9
    4f18:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4f1a:	adds	r2, r3, #1
    4f1c:	beq.n	4f28 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    4f1e:	str	r3, [r5, #0]
  return 1;
    4f20:	movs	r0, #1
    4f22:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    4f24:	movs	r0, #255	; 0xff
    4f26:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4f28:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    4f2a:	pop	{r3, r4, r5, pc}

00004f2c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4f2c:	push	{r3, r4, r5, lr}
    4f2e:	mov	r4, r1
    4f30:	ldr.w	r1, [r0, #1052]	; 0x41c
    4f34:	mov	r5, r2
    4f36:	add.w	r1, r1, r4, lsr #7
    4f3a:	add.w	r0, r0, #524	; 0x20c
    4f3e:	movs	r2, #1
    4f40:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4f44:	mov	r3, r0
    4f46:	cbz	r0, 4f54 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4f48:	lsls	r4, r4, #2
    4f4a:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    4f4e:	movs	r0, #1
    4f50:	str	r5, [r3, r4]
    4f52:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    4f54:	pop	{r3, r4, r5, pc}
    4f56:	nop

00004f58 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4f58:	ldrb	r3, [r0, #0]
    4f5a:	lsls	r3, r3, #31
    4f5c:	bmi.n	4f62 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    4f5e:	movs	r0, #1
    4f60:	bx	lr
    4f62:	b.w	4e6c <FsCache::sync() [clone .part.2]>
    4f66:	nop

00004f68 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4f68:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f6c:	mov	r8, r0
    4f6e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4f70:	mov	fp, r1
    4f72:	cmp	r1, #0
    4f74:	beq.n	5000 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    4f76:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4f78:	ldr.w	r3, [r8, #1064]	; 0x428
    4f7c:	cmp	r7, r3
    4f7e:	bcs.n	4ff8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4f80:	and.w	r5, r7, #7
    4f84:	movs	r3, #1
    4f86:	lsl.w	r5, r3, r5
    4f8a:	uxtb	r5, r5
    4f8c:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4f90:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4f92:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4f94:	ldr.w	r1, [r8, #1060]	; 0x424
    4f98:	movs	r2, #0
    4f9a:	add.w	r1, r1, r4, lsr #12
    4f9e:	mov	r0, r8
    4fa0:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4fa4:	cbz	r0, 4fd8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    4fa6:	ldrb.w	r1, [r0, sl]
    4faa:	b.n	4fc2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4fac:	cmp	r2, r9
    4fae:	beq.n	5006 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4fb0:	cmp	r7, r4
    4fb2:	beq.n	4fd6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4fb4:	ldr.w	r2, [r8, #1064]	; 0x428
    4fb8:	cmp	r4, r2
    4fba:	bcs.n	4fec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4fbc:	ands.w	r5, r3, #255	; 0xff
    4fc0:	beq.n	4fdc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4fc2:	adds	r4, #1
        if (!(mask & cache[i])) {
    4fc4:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4fc6:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4fca:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4fce:	beq.n	4fac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4fd0:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4fd2:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4fd4:	bne.n	4fb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    4fd6:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4fd8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4fdc:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4fe0:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4fe4:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4fe8:	bne.n	4fa6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    4fea:	b.n	4ff0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4fec:	movs	r6, #0
    4fee:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4ff0:	mov.w	sl, #0
    4ff4:	movs	r5, #1
    4ff6:	b.n	4f94 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    4ff8:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    4ffa:	mov	sl, r7
    4ffc:	movs	r5, #1
    4ffe:	b.n	4f90 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5000:	ldr.w	r7, [r0, #1048]	; 0x418
    5004:	b.n	4f78 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    5006:	cmp.w	fp, #0
    500a:	bne.n	5016 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    500c:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    5010:	it	eq
    5012:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    5016:	adds	r0, r6, #2
    5018:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000501c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    501c:	push	{r3, r4, r5, r6, r7, lr}
    501e:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    5020:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    5022:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5026:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    502a:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    502e:	str	r1, [r0, #4]
    5030:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    5034:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5036:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    5038:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    503c:	strb	r3, [r4, #0]
    503e:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    5042:	str	r6, [r4, #8]
    5044:	str.w	r6, [r4, #532]	; 0x214
    5048:	mov	r2, r3
    504a:	mov	r1, r3
    504c:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    5050:	cmp	r5, #4
    5052:	bhi.n	506e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    5054:	mov	r6, r0
    5056:	cbz	r0, 506e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    5058:	cbnz	r5, 5072 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    505a:	movs	r2, #5
    505c:	ldr	r1, [pc, #152]	; (50f8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    505e:	adds	r0, r6, #3
    5060:	bl	cf9c <strncmp>
    5064:	cbnz	r0, 506e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    5066:	ldrb.w	r3, [r6, #108]	; 0x6c
    506a:	cmp	r3, #9
    506c:	beq.n	50a2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    506e:	movs	r0, #0
    5070:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    5072:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    5074:	add.w	r3, r0, r3, lsl #4
    5078:	ldrb.w	r2, [r3, #446]	; 0x1be
    507c:	ands.w	r2, r2, #127	; 0x7f
    5080:	bne.n	506e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    5082:	ldrb.w	r3, [r3, #450]	; 0x1c2
    5086:	cmp	r3, #0
    5088:	beq.n	506e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    508a:	add.w	r5, r0, r5, lsl #4
    508e:	mov	r0, r7
    5090:	ldr.w	r5, [r5, #438]	; 0x1b6
    5094:	mov	r1, r5
    5096:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    509a:	mov	r6, r0
    509c:	cmp	r0, #0
    509e:	bne.n	505a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    50a0:	b.n	506e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    50a2:	ldr	r3, [r6, #80]	; 0x50
    50a4:	add	r3, r5
    50a6:	str.w	r3, [r4, #1052]	; 0x41c
    50aa:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    50ac:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    50b0:	ldr	r3, [r6, #88]	; 0x58
    50b2:	add	r5, r3
    50b4:	str.w	r5, [r4, #1060]	; 0x424
    50b8:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    50ba:	str.w	r3, [r4, #1064]	; 0x428
    50be:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    50c0:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    50c4:	ldrb.w	r3, [r6, #109]	; 0x6d
    50c8:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    50cc:	movs	r5, #1
    50ce:	adds	r3, #9
    50d0:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    50d4:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    50d6:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    50da:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    50dc:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    50e0:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    50e4:	mov	r0, r4
    50e6:	mov	r2, r5
    50e8:	bl	4f68 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    50ec:	movs	r3, #64	; 0x40
    50ee:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    50f2:	mov	r0, r5

 fail:
  return false;
}
    50f4:	pop	{r3, r4, r5, r6, r7, pc}
    50f6:	nop
    50f8:	.word	0x00013b40

000050fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    50fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    5100:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    5102:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    5104:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    5108:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    510a:	adds	r2, r1, r2
    510c:	cmp	r2, r0
    510e:	bhi.n	5182 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    5110:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5112:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    5116:	cmp.w	sl, #0
    511a:	bne.n	5188 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    511c:	cmp	r1, r3
      m_bitmapStart = start;
    511e:	it	cc
    5120:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    5124:	and.w	r4, r1, #7
    5128:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    512a:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    512e:	lsl.w	r4, r2, r4
    5132:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    5134:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    5138:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    513c:	movs	r2, #1
    513e:	mov	r1, r9
    5140:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    5142:	add	r9, r2
    5144:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    5148:	cbz	r0, 5182 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    514a:	adds	r7, r0, r6
    514c:	add.w	r0, r0, #512	; 0x200
    5150:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    5154:	tst	r2, r4
    5156:	ite	ne
    5158:	movne	r6, #1
    515a:	moveq	r6, #0
    515c:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    515e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    5162:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    5166:	beq.n	5182 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    5168:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    516a:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    516e:	beq.n	519c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    5170:	ands.w	r4, r4, #255	; 0xff
    5174:	bne.n	5154 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    5176:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    5178:	mov	r6, r4
    517a:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    517e:	bne.n	5150 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    5180:	b.n	513c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    5182:	movs	r0, #0
    5184:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5188:	cmp	r1, r3
    518a:	bhi.n	5124 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    518c:	cmp	r2, r3
    518e:	bls.n	5124 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    5190:	cmp	r2, r0
    5192:	it	cs
    5194:	movcs	r2, #0
    5196:	str.w	r2, [r8, #1048]	; 0x418
    519a:	b.n	5124 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    519c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    519e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51a2:	nop

000051a4 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    51a4:	push	{r4, r5, r6, lr}
    51a6:	sub	sp, #8
    51a8:	add	r6, sp, #8
    51aa:	mov	r5, r0
    51ac:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    51b0:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    51b2:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    51b6:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    51b8:	adds	r3, #1
    51ba:	cmp	r1, r3
    51bc:	bls.n	51c4 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    51be:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    51c0:	add	sp, #8
    51c2:	pop	{r4, r5, r6, pc}
    51c4:	mov	r2, r6
    51c6:	mov	r0, r5
    51c8:	bl	4ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    51cc:	sxtb	r0, r0
    if (status < 0) return 0;
    51ce:	cmp	r0, #0
    51d0:	blt.n	51be <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    51d2:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    51d6:	bne.n	51b2 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    51d8:	mov	r0, r4
  } while (status);
  return n;
}
    51da:	add	sp, #8
    51dc:	pop	{r4, r5, r6, pc}
    51de:	nop

000051e0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    51e0:	push	{r3, r4, r5, r6, r7, lr}
    51e2:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    51e4:	ldmia.w	r6, {r3, r5}
    51e8:	ldr.w	r1, [r0, #1072]	; 0x430
    51ec:	ldr.w	r4, [r0, #1060]	; 0x424
    51f0:	ldrb.w	r7, [r0, #1085]	; 0x43d
    51f4:	ands	r1, r5
    51f6:	subs	r3, #2
    51f8:	add.w	r1, r4, r1, lsr #9
    51fc:	lsls	r3, r7
    51fe:	add	r1, r3
    5200:	add.w	r0, r0, #524	; 0x20c
    5204:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    5208:	cbz	r0, 5212 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    520a:	ldr	r3, [r6, #4]
    520c:	ubfx	r3, r3, #0, #9
    5210:	add	r0, r3
}
    5212:	pop	{r3, r4, r5, r6, r7, pc}

00005214 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5214:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5216:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5218:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    521a:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    521c:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    5220:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    5222:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5226:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    5228:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    522a:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    522c:	uxtb	r3, r3
    522e:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5232:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    5234:	cbz	r4, 5246 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    5236:	ldrb	r3, [r5, #8]
    5238:	cbz	r3, 524a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    523a:	ldr	r3, [r5, #0]
    523c:	adds	r3, #1
    523e:	str	r3, [r5, #0]
    5240:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    5242:	cmp	r4, #0
    5244:	bne.n	5236 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    5246:	movs	r0, #1
    5248:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    524a:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    524e:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    5250:	adds	r3, #1
    5252:	cmp	r1, r3
    5254:	bls.n	525c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    5256:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    525a:	pop	{r4, r5, r6, pc}
    525c:	mov	r2, r5
    525e:	mov	r0, r6
    5260:	bl	4ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    5264:	sxtb	r0, r0
      if (status != 1) {
    5266:	cmp	r0, #1
    5268:	beq.n	5240 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    526a:	pop	{r4, r5, r6, pc}

0000526c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    526c:	ldr.w	r3, [r0, #1064]	; 0x428
    5270:	adds	r3, #1
    5272:	cmp	r3, r1
    5274:	bcs.n	527a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    5276:	movs	r0, #255	; 0xff
    5278:	bx	lr
    527a:	b.w	4ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    527e:	nop

00005280 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5280:	cmp	r1, #1
    5282:	bls.n	52a0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    5284:	ldr.w	r3, [r0, #1064]	; 0x428
    5288:	adds	r3, #1
    528a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    528c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    528e:	bls.n	5298 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    5290:	movs	r0, #0
    5292:	ldr.w	r4, [sp], #4
    5296:	bx	lr
    5298:	ldr.w	r4, [sp], #4
    529c:	b.w	4f2c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    52a0:	movs	r0, #0
    52a2:	bx	lr

000052a4 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    52a4:	push	{r4, r5, r6, r7, lr}
    52a6:	mov	r4, r1
    52a8:	sub	sp, #12
    52aa:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    52ac:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    52ae:	ldr.w	r3, [r5, #1064]	; 0x428
    52b2:	adds	r3, #1
    52b4:	cmp	r4, r3
    52b6:	bls.n	52be <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    52b8:	movs	r0, #0
}
    52ba:	add	sp, #12
    52bc:	pop	{r4, r5, r6, r7, pc}
    52be:	add	r2, sp, #4
    52c0:	mov	r1, r4
    52c2:	mov	r0, r5
    52c4:	bl	4ef8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    52c8:	sxtb	r7, r0
    if (status < 0) {
    52ca:	cmp	r7, #0
    52cc:	blt.n	52b8 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    52ce:	cmp	r4, #1
    52d0:	bls.n	52b8 <ExFatPartition::freeChain(unsigned long)+0x14>
    52d2:	ldr.w	r3, [r5, #1064]	; 0x428
    52d6:	adds	r3, #1
    52d8:	cmp	r4, r3
    52da:	bhi.n	52b8 <ExFatPartition::freeChain(unsigned long)+0x14>
    52dc:	movs	r2, #0
    52de:	mov	r1, r4
    52e0:	mov	r0, r5
    52e2:	bl	4f2c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    52e6:	cmp	r0, #0
    52e8:	beq.n	52b8 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    52ea:	ldr	r3, [sp, #4]
    52ec:	adds	r4, #1
    52ee:	cmp	r4, r3
    52f0:	bne.n	530a <ExFatPartition::freeChain(unsigned long)+0x66>
    52f2:	cmp	r7, #0
    52f4:	bne.n	52ae <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    52f6:	mov	r3, r7
    52f8:	subs	r2, r4, r6
    52fa:	mov	r1, r6
    52fc:	mov	r0, r5
    52fe:	bl	50fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5302:	cmp	r0, #0
    5304:	beq.n	52b8 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    5306:	add	sp, #12
    5308:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    530a:	subs	r2, r4, r6
    530c:	mov	r1, r6
    530e:	movs	r3, #0
    5310:	mov	r0, r5
    5312:	bl	50fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5316:	cmp	r0, #0
    5318:	beq.n	52b8 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    531a:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    531c:	cmp	r7, #0
    531e:	beq.n	52ba <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    5320:	mov	r6, r4
    5322:	b.n	52ae <ExFatPartition::freeChain(unsigned long)+0xa>

00005324 <ExFatPartition::rootLength()>:
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    5324:	push	{r4, lr}
    5326:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    5328:	ldr.w	r1, [r0, #1068]	; 0x42c
    532c:	bl	51a4 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    5330:	ldrb.w	r3, [r4, #1085]	; 0x43d
    5334:	adds	r3, #9
    5336:	uxtb	r3, r3
}
    5338:	lsls	r0, r3
    533a:	pop	{r4, pc}

0000533c <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    533c:	cbz	r1, 5372 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    533e:	push	{r4}
    5340:	add	r1, r0
    5342:	lsls	r3, r2, #15
    5344:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    5348:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    534c:	sub.w	r4, r2, #97	; 0x61
    5350:	cmp	r4, #25
      c -= 'a' - 'A';
    5352:	itt	ls
    5354:	subls	r2, #32
    5356:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    5358:	uxtah	r2, r2, r3
    535c:	uxth	r2, r2
    535e:	lsls	r3, r2, #15
    5360:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    5364:	cmp	r1, r0
    5366:	uxth	r2, r2
    5368:	bne.n	5342 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    536a:	mov	r0, r2
    536c:	ldr.w	r4, [sp], #4
    5370:	bx	lr
    5372:	mov	r0, r2
    5374:	bx	lr
    5376:	nop

00005378 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    5378:	cbz	r3, 53cc <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    537a:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    537c:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    537e:	cmp	r4, #126	; 0x7e
    5380:	bhi.n	53c0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    5382:	add	r3, r2
    5384:	adds	r5, r1, r3
    5386:	add	r2, r1
    5388:	adds	r0, #2
    538a:	ldrb.w	r3, [r2], #1
    538e:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    5390:	sub.w	r1, r3, #97	; 0x61
    5394:	cmp	r1, #25
    5396:	sub.w	r1, r4, #97	; 0x61
    539a:	ite	ls
    539c:	movls	r6, #32
    539e:	movhi	r6, #0
    53a0:	cmp	r1, #25
    53a2:	ite	ls
    53a4:	movls	r1, #32
    53a6:	movhi	r1, #0
    53a8:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    53aa:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    53ac:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    53ae:	uxtb	r4, r4
    53b0:	cmp	r4, r3
    53b2:	bne.n	53c0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    53b4:	cmp	r2, r5
    53b6:	beq.n	53c6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    53b8:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    53bc:	cmp	r4, #126	; 0x7e
    53be:	bls.n	538a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    53c0:	movs	r0, #0
    }
  }
  return true;
}
    53c2:	pop	{r4, r5, r6}
    53c4:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    53c6:	movs	r0, #1
}
    53c8:	pop	{r4, r5, r6}
    53ca:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    53cc:	movs	r0, #1
}
    53ce:	bx	lr

000053d0 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    53d0:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    53d2:	push	{r3, r4, r5, r6, r7, lr}
    53d4:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    53d6:	ldr	r0, [r0, #32]
    53d8:	cbz	r1, 53dc <ExFatFile::addCluster()+0xc>
    53da:	adds	r1, #1
    53dc:	movs	r2, #1
    53de:	bl	4f68 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    53e2:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    53e4:	mov	r6, r0
  if (find < 2) {
    53e6:	bls.n	5448 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    53e8:	movs	r3, #1
    53ea:	mov	r1, r0
    53ec:	mov	r2, r3
    53ee:	ldr	r0, [r4, #32]
    53f0:	bl	50fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    53f4:	mov	r7, r0
    53f6:	cbz	r0, 5448 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    53f8:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    53fa:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    53fe:	cbz	r0, 544e <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    5400:	lsls	r2, r3, #25
    5402:	bpl.n	542c <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    5404:	adds	r2, r0, #1
    5406:	cmp	r6, r2
    5408:	beq.n	5456 <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    540a:	bic.w	r2, r3, #64	; 0x40
    540e:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5412:	ldr	r3, [r4, #28]
    5414:	b.n	5422 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    5416:	ldr	r0, [r4, #32]
    5418:	bl	5280 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    541c:	cbz	r0, 5448 <ExFatFile::addCluster()+0x78>
    541e:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5420:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    5422:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5424:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    5426:	mov	r1, r3
    5428:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    542a:	bcc.n	5416 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    542c:	mov.w	r2, #4294967295
    5430:	mov	r1, r6
    5432:	ldr	r0, [r4, #32]
    5434:	bl	5280 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5438:	cbz	r0, 5448 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    543a:	ldr	r1, [r4, #24]
    543c:	cbz	r1, 5456 <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    543e:	mov	r2, r6
    5440:	ldr	r0, [r4, #32]
    5442:	bl	5280 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5446:	cbnz	r0, 5456 <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    5448:	movs	r7, #0
}
    544a:	mov	r0, r7
    544c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    544e:	orr.w	r3, r3, #64	; 0x40
    5452:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    5456:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    5458:	mov	r0, r7
    545a:	pop	{r3, r4, r5, r6, r7, pc}

0000545c <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    545c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5460:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5464:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5466:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    546a:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    546c:	add.w	r8, sp, #12
    5470:	stmia.w	r8, {r0, r1, r2}
    5474:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    5476:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    5478:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    547a:	movs	r2, #0
    547c:	mov	r1, r8
    547e:	ldr	r0, [r6, #32]
    5480:	bl	51e0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    5484:	uxtb.w	r9, r7
    if (!cache) {
    5488:	mov	r5, r0
    548a:	cbz	r0, 549a <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    548c:	ldrb	r2, [r0, #0]
    548e:	cmp	r2, #192	; 0xc0
    5490:	beq.n	5538 <ExFatFile::syncDir()+0xdc>
    5492:	cmp	r2, #193	; 0xc1
    5494:	beq.n	54ae <ExFatFile::syncDir()+0x52>
    5496:	cmp	r2, #133	; 0x85
    5498:	beq.n	54ee <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    549a:	ldrb.w	r3, [r6, #50]	; 0x32
    549e:	orr.w	r3, r3, #1
    54a2:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    54a6:	movs	r0, #0
}
    54a8:	add	sp, #28
    54aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54ae:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    54b0:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    54b2:	ldrb	r2, [r5, r1]
    54b4:	lsls	r3, r4, #15
    54b6:	orr.w	r4, r3, r4, lsr #1
    54ba:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    54be:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    54c0:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    54c2:	add.w	r1, r1, #1
    54c6:	beq.n	54e4 <ExFatFile::syncDir()+0x88>
    54c8:	cmp	r1, #31
    54ca:	bls.n	54b2 <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    54cc:	cmp	sl, r9
    54ce:	beq.n	5574 <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    54d0:	movs	r2, #32
    54d2:	mov	r1, r8
    54d4:	ldr	r0, [r6, #32]
    54d6:	bl	5214 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    54da:	cmp	r0, #1
    54dc:	add.w	r7, r7, #1
    54e0:	beq.n	547a <ExFatFile::syncDir()+0x1e>
    54e2:	b.n	549a <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    54e4:	cmp	r0, #133	; 0x85
    54e6:	ite	eq
    54e8:	moveq	r1, #4
    54ea:	movne	r1, #2
    54ec:	b.n	54b2 <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    54ee:	ldr	r3, [pc, #192]	; (55b0 <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    54f0:	ldrb.w	r1, [r6, #49]	; 0x31
    54f4:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    54f6:	ldrb.w	sl, [r0, #1]
    54fa:	and.w	r1, r1, #55	; 0x37
    54fe:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5500:	cmp	r3, #0
    5502:	beq.n	54ae <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    5504:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    5506:	ldrb.w	r2, [r1, #524]	; 0x20c
    550a:	orr.w	r2, r2, #1
    550e:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    5512:	add	r0, sp, #8
    5514:	add.w	r2, sp, #7
    5518:	add.w	r1, sp, #10
    551c:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    551e:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    5522:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    5526:	ldrb.w	r1, [sp, #7]
    552a:	strb	r1, [r5, #21]
    552c:	strh	r2, [r5, #12]
    552e:	strh	r2, [r5, #16]
    5530:	strh	r3, [r5, #14]
    5532:	strh	r3, [r5, #18]
    5534:	ldrb	r0, [r5, #0]
    5536:	b.n	54b0 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    5538:	ldrb.w	r3, [r6, #51]	; 0x33
    553c:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5540:	ldrb	r3, [r0, #1]
    5542:	ite	ne
    5544:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    5548:	biceq.w	r3, r3, #2
    554c:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    554e:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5552:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    5556:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    555a:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    555c:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    555e:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    5562:	ldr	r2, [r6, #32]
    5564:	ldrb.w	r3, [r2, #524]	; 0x20c
    5568:	orr.w	r3, r3, #1
    556c:	strb.w	r3, [r2, #524]	; 0x20c
    5570:	ldrb	r0, [r0, #0]
    5572:	b.n	54b0 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5574:	mov	r1, fp
    5576:	movs	r2, #1
    5578:	ldr	r0, [r6, #32]
    557a:	bl	51e0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    557e:	cmp	r0, #0
    5580:	beq.n	549a <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5582:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5584:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5586:	mov	r0, r5
    5588:	bl	4f58 <FsCache::sync()>
    558c:	cmp	r0, #0
    558e:	beq.n	549a <ExFatFile::syncDir()+0x3e>
    5590:	add.w	r0, r5, #524	; 0x20c
    5594:	bl	4f58 <FsCache::sync()>
    5598:	cmp	r0, #0
    559a:	beq.w	549a <ExFatFile::syncDir()+0x3e>
    559e:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    55a2:	ldr	r3, [r0, #0]
    55a4:	ldr	r3, [r3, #20]
    55a6:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    55a8:	cmp	r0, #0
    55aa:	beq.w	549a <ExFatFile::syncDir()+0x3e>
    55ae:	b.n	54a8 <ExFatFile::syncDir()+0x4c>
    55b0:	.word	0x2001dd00

000055b4 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    55b4:	ldrb.w	r2, [r0, #49]	; 0x31
    55b8:	cbz	r2, 55e0 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    55ba:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    55bc:	ldrb.w	r2, [r0, #51]	; 0x33
    55c0:	lsls	r1, r2, #24
    55c2:	bmi.n	55e4 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    55c4:	ldr	r5, [r0, #32]
    55c6:	mov	r4, r0
    55c8:	mov	r0, r5
    55ca:	bl	4f58 <FsCache::sync()>
    55ce:	cbnz	r0, 55f4 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    55d0:	ldrb.w	r3, [r4, #50]	; 0x32
    55d4:	orr.w	r3, r3, #1
    55d8:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    55dc:	movs	r0, #0
}
    55de:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    55e0:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    55e2:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    55e4:	and.w	r2, r2, #127	; 0x7f
    55e8:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    55ec:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    55f0:	b.w	545c <ExFatFile::syncDir()>
    55f4:	add.w	r0, r5, #524	; 0x20c
    55f8:	bl	4f58 <FsCache::sync()>
    55fc:	cmp	r0, #0
    55fe:	beq.n	55d0 <ExFatFile::sync()+0x1c>
    5600:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5604:	ldr	r3, [r0, #0]
    5606:	ldr	r3, [r3, #20]
    5608:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    560a:	cmp	r0, #0
    560c:	beq.n	55d0 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    560e:	movs	r0, #1
    5610:	pop	{r3, r4, r5, pc}
    5612:	nop

00005614 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    5614:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5618:	ldrb.w	r3, [r0, #49]	; 0x31
    561c:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    561e:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5620:	bmi.n	56ea <ExFatFile::addDirCluster()+0xd6>
    5622:	ldr	r0, [r0, #8]
    5624:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    5626:	ldr.w	r3, [r3, #1076]	; 0x434
    562a:	add	r0, r3
    562c:	cmp.w	r0, #67108864	; 0x4000000
    5630:	bcc.n	5638 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    5632:	movs	r0, #0
    5634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5638:	mov	r0, r4
    563a:	bl	53d0 <ExFatFile::addCluster()>
    563e:	cmp	r0, #0
    5640:	beq.n	5632 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    5642:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5644:	ldrb.w	r3, [r6, #524]	; 0x20c
    5648:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    564a:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    564e:	bmi.n	56f2 <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    5650:	mov	r0, r5
    return m_cacheBuffer;
    5652:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    5656:	bl	4e8c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    565a:	mov.w	r2, #512	; 0x200
    565e:	movs	r1, #0
    5660:	mov	r0, r6
    5662:	bl	c7ac <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    5666:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5668:	ldr	r3, [r4, #24]
    566a:	ldrb.w	r0, [r2, #1085]	; 0x43d
    566e:	ldr.w	r1, [r2, #1060]	; 0x424
    5672:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5676:	movs	r7, #1
    5678:	lsl.w	r8, r8, r0
    567c:	lsls.w	r3, r7, r0
    5680:	add	r8, r1
    5682:	it	ne
    5684:	movne	r5, #0
    5686:	beq.n	56ac <ExFatFile::addDirCluster()+0x98>
    5688:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    568c:	ldr	r3, [r0, #0]
    568e:	add.w	r1, r8, r5
    5692:	ldr	r3, [r3, #24]
    5694:	mov	r2, r6
    5696:	blx	r3
    5698:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    569a:	cmp	r0, #0
    569c:	beq.n	5632 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    569e:	ldr	r2, [r4, #32]
    56a0:	ldrb.w	r3, [r2, #1085]	; 0x43d
    56a4:	lsl.w	r3, r7, r3
    56a8:	cmp	r3, r5
    56aa:	bhi.n	5688 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    56ac:	ldrb.w	r3, [r4, #49]	; 0x31
    56b0:	lsls	r3, r3, #25
    56b2:	bmi.n	56e0 <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    56b4:	ldrb.w	r3, [r4, #51]	; 0x33
    56b8:	orn	r3, r3, #127	; 0x7f
    56bc:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    56c0:	ldr.w	r6, [r2, #1076]	; 0x434
    56c4:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    56c8:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    56cc:	adds	r2, r2, r6
    56ce:	mov.w	r7, #0
    56d2:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    56d4:	adds	r0, r0, r6
    56d6:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    56d8:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    56dc:	strd	r0, r1, [r4, #16]
  }
  return sync();
    56e0:	mov	r0, r4

 fail:
  return false;
}
    56e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    56e6:	b.w	55b4 <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    56ea:	ldr	r0, [r0, #32]
    56ec:	bl	5324 <ExFatPartition::rootLength()>
    56f0:	b.n	5624 <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    56f2:	mov	r0, r5
    56f4:	bl	4f58 <FsCache::sync()>
    56f8:	cmp	r0, #0
    56fa:	bne.n	5650 <ExFatFile::addDirCluster()+0x3c>
    56fc:	b.n	5632 <ExFatFile::addDirCluster()+0x1e>
    56fe:	nop

00005700 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5700:	orrs.w	r1, r2, r3
    5704:	beq.n	570e <ExFatFile::preAllocate(unsigned long long)+0xe>
    5706:	ldrb.w	r1, [r0, #51]	; 0x33
    570a:	lsls	r1, r1, #30
    570c:	bmi.n	5712 <ExFatFile::preAllocate(unsigned long long)+0x12>
  }
  return true;

 fail:
  return false;
}
    570e:	movs	r0, #0
    5710:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5712:	ldr	r1, [r0, #28]
    5714:	cmp	r1, #0
    5716:	bne.n	570e <ExFatFile::preAllocate(unsigned long long)+0xe>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    5718:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    571c:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    571e:	ldr	r0, [r0, #32]
    5720:	mov	r5, r3
    5722:	ldrb.w	r3, [r0, #1085]	; 0x43d
    5726:	adds	r3, #9
    5728:	adds.w	r8, r2, #4294967295
    572c:	uxtb	r3, r3
    572e:	adc.w	r9, r5, #4294967295
    5732:	rsb	r7, r3, #32
    5736:	lsl.w	r7, r9, r7
    573a:	mov	r4, r2
    573c:	lsr.w	r2, r8, r3
    5740:	subs	r3, #32
    5742:	orrs	r2, r7
    5744:	lsr.w	r3, r9, r3
    5748:	orrs	r2, r3
    574a:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    574c:	mov	r2, r7
    574e:	bl	4f68 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    5752:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    5754:	mov	r8, r0
  if (find < 2) {
    5756:	bls.n	5766 <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    5758:	mov	r1, r0
    575a:	mov	r2, r7
    575c:	movs	r3, #1
    575e:	ldr	r0, [r6, #32]
    5760:	bl	50fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5764:	cbnz	r0, 576c <ExFatFile::preAllocate(unsigned long long)+0x6c>
  }
  return true;

 fail:
  return false;
}
    5766:	movs	r0, #0
    5768:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    576c:	ldrb.w	r3, [r6, #51]	; 0x33
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    5770:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    5774:	orn	r3, r3, #63	; 0x3f
    5778:	strb.w	r3, [r6, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    577c:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    5780:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    5782:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    5786:	b.w	55b4 <ExFatFile::sync()>
    578a:	nop

0000578c <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    578c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5790:	lsls	r2, r3, #30
    5792:	bpl.n	57c6 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5794:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5796:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5798:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    579a:	cbz	r5, 57c0 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    579c:	and.w	r3, r3, #64	; 0x40
    57a0:	mov	r4, r0
    57a2:	and.w	r0, r3, #255	; 0xff
    57a6:	cbnz	r3, 57ca <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    57a8:	ldr	r1, [r4, #24]
    57aa:	cmp	r1, #0
    57ac:	bne.n	5832 <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    57ae:	str	r5, [sp, #4]
      m_firstCluster = 0;
    57b0:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    57b2:	mov	r1, r5
    57b4:	ldr	r0, [r4, #32]
    57b6:	bl	52a4 <ExFatPartition::freeChain(unsigned long)>
    57ba:	cbnz	r0, 580a <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    57bc:	movs	r0, #0
    57be:	b.n	57c2 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    57c0:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    57c2:	add	sp, #12
    57c4:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    57c6:	movs	r0, #0
}
    57c8:	bx	lr
    57ca:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    57cc:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    57ce:	ldrb.w	r3, [r0, #1085]	; 0x43d
    57d2:	ldrd	r6, r7, [r4, #8]
    57d6:	adds	r3, #9
    57d8:	uxtb	r3, r3
    57da:	adds.w	r6, r6, #4294967295
    57de:	rsb	lr, r3, #32
    57e2:	adc.w	r7, r7, #4294967295
    57e6:	lsr.w	r2, r6, r3
    57ea:	lsl.w	lr, r7, lr
    57ee:	subs	r3, #32
    57f0:	orr.w	r2, r2, lr
    57f4:	lsr.w	r3, r7, r3
    57f8:	orrs	r2, r3
    57fa:	adds	r2, #1
    if (m_curCluster) {
    57fc:	cbz	r1, 582c <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    57fe:	subs	r5, #1
    5800:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    5802:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5804:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    5806:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5808:	cbnz	r2, 584e <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    580a:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    580e:	ldrb.w	r3, [r4, #51]	; 0x33
    5812:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5816:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    581a:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    581e:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    5822:	mov	r0, r4
    5824:	bl	55b4 <ExFatFile::sync()>

 fail:
  return false;
}
    5828:	add	sp, #12
    582a:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    582c:	str	r5, [sp, #4]
      m_firstCluster = 0;
    582e:	str	r1, [r4, #28]
    5830:	b.n	5808 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    5832:	add	r2, sp, #8
    5834:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5838:	ldr	r0, [r4, #32]
    583a:	bl	526c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    583e:	sxtb	r0, r0
      if (fg < 0) {
    5840:	cmp	r0, #0
    5842:	blt.n	57bc <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    5844:	bne.n	585c <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    5846:	ldr	r5, [sp, #4]
    5848:	cmp	r5, #0
    584a:	beq.n	580a <ExFatFile::truncate()+0x7e>
    584c:	b.n	57b2 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    584e:	movs	r3, #0
    5850:	ldr	r1, [sp, #4]
    5852:	bl	50fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5856:	cmp	r0, #0
    5858:	bne.n	580a <ExFatFile::truncate()+0x7e>
    585a:	b.n	57bc <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    585c:	mov.w	r2, #4294967295
    5860:	ldr	r1, [r4, #24]
    5862:	ldr	r0, [r4, #32]
    5864:	bl	5280 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5868:	cmp	r0, #0
    586a:	bne.n	5846 <ExFatFile::truncate()+0xba>
    586c:	b.n	57bc <ExFatFile::truncate()+0x30>
    586e:	nop

00005870 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5870:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5874:	ldrb.w	r3, [r0, #51]	; 0x33
    5878:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    587a:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    587c:	mov	r6, r0
    587e:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5880:	bmi.n	5898 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5882:	ldrb.w	r3, [r6, #50]	; 0x32
    5886:	orr.w	r3, r3, #1
    588a:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    588e:	mov.w	r0, #4294967295
}
    5892:	add	sp, #20
    5894:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5898:	lsls	r2, r3, #28
    589a:	mov	sl, r1
    589c:	bmi.w	5ac4 <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    58a0:	ldr	r3, [sp, #4]
    58a2:	cmp	r3, #0
    58a4:	beq.w	5aec <ExFatFile::write(void const*, unsigned int)+0x27c>
    58a8:	mov	r1, r6
    58aa:	ldrd	r2, r3, [r1], #24
    58ae:	ldr.w	r8, [sp, #4]
    58b2:	str	r1, [sp, #12]
    58b4:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    58b6:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    58b8:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    58ba:	ldr.w	r4, [r0, #1072]	; 0x430
    58be:	mov	r3, fp
    58c0:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    58c2:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    58c6:	cbnz	r4, 591c <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    58c8:	cmp	r5, #0
    58ca:	beq.w	5a4a <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    58ce:	ldrb.w	r3, [r6, #51]	; 0x33
    58d2:	lsls	r3, r3, #25
    58d4:	bpl.w	5a92 <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    58d8:	ldrd	r2, r3, [r6, #8]
    58dc:	ldrb.w	r7, [r0, #1085]	; 0x43d
    58e0:	adds	r7, #9
    58e2:	uxtb	r7, r7
    58e4:	adds.w	r2, r2, #4294967295
    58e8:	adc.w	r3, r3, #4294967295
    58ec:	rsb	lr, r7, #32
    58f0:	lsl.w	lr, r3, lr
    58f4:	lsr.w	r1, r2, r7
    58f8:	subs	r7, #32
    58fa:	lsr.w	r7, r3, r7
    58fe:	orr.w	r1, r1, lr
    5902:	ldr	r3, [r6, #28]
    5904:	orrs	r1, r7
    5906:	add	r3, r1
    5908:	cmp	r5, r3
    590a:	bcc.w	5a78 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    590e:	mov	r0, r6
    5910:	bl	53d0 <ExFatFile::addCluster()>
    5914:	cmp	r0, #0
    5916:	beq.n	5882 <ExFatFile::write(void const*, unsigned int)+0x12>
    5918:	ldr	r0, [r6, #32]
    591a:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    591c:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5920:	ldrb.w	lr, [r0, #1085]	; 0x43d
    5924:	lsrs	r4, r4, #9
    5926:	subs	r5, #2
    5928:	adds	r1, r4, r7
    592a:	lsl.w	r5, r5, lr
    592e:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5930:	cmp.w	r9, #0
    5934:	bne.w	5a3c <ExFatFile::write(void const*, unsigned int)+0x1cc>
    5938:	cmp.w	r8, #512	; 0x200
    593c:	bcs.n	59ee <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    593e:	ldrd	r2, r3, [r6, #16]
    5942:	ldrd	r4, r5, [r6]
    5946:	cmp.w	r8, #512	; 0x200
    594a:	mov	r7, r8
    594c:	it	cs
    594e:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5952:	cmp	r5, r3
    5954:	it	eq
    5956:	cmpeq	r4, r2
    5958:	ite	cc
    595a:	movcc	r2, #1
    595c:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    595e:	add.w	r0, r0, #524	; 0x20c
    5962:	bl	4e98 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5966:	cmp	r0, #0
    5968:	beq.n	5882 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    596a:	add	r0, r9
    596c:	mov	r2, r7
    596e:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5970:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5972:	bl	87fc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5976:	cmp.w	r9, #512	; 0x200
    597a:	beq.w	5aa2 <ExFatFile::write(void const*, unsigned int)+0x232>
    597e:	mov	r0, r7
    5980:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5982:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5986:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    598a:	adds.w	fp, r2, r0
    598e:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5992:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5994:	mov	r2, fp
    5996:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5998:	it	eq
    599a:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    599c:	add	sl, r7
    toWrite -= n;
    599e:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    59a2:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    59a6:	bcs.n	59bc <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    59a8:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    59ac:	mov	r4, ip
    59ae:	mov	r3, fp
    59b0:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    59b4:	orn	r1, r1, #127	; 0x7f
    59b8:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    59bc:	cmp.w	r8, #0
    59c0:	bne.w	58b6 <ExFatFile::write(void const*, unsigned int)+0x46>
    59c4:	mov	r2, fp
    59c6:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    59c8:	ldrd	r0, r1, [r6, #8]
    59cc:	cmp	r1, r3
    59ce:	it	eq
    59d0:	cmpeq	r0, r2
    59d2:	bcc.n	5ad4 <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    59d4:	ldr	r3, [pc, #284]	; (5af4 <ExFatFile::write(void const*, unsigned int)+0x284>)
    59d6:	ldr	r3, [r3, #0]
    59d8:	cmp	r3, #0
    59da:	beq.w	5ae8 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    59de:	ldrb.w	r3, [r6, #51]	; 0x33
    59e2:	ldr	r0, [sp, #4]
    59e4:	orn	r3, r3, #127	; 0x7f
    59e8:	strb.w	r3, [r6, #51]	; 0x33
    59ec:	b.n	5892 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    59ee:	cmp.w	r8, #1024	; 0x400
    59f2:	bcc.n	5a52 <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    59f4:	movs	r3, #1
    59f6:	lsl.w	lr, r3, lr
    59fa:	rsb	lr, r4, lr
    59fe:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    5a02:	mov.w	r4, r8, lsr #9
    5a06:	cmp	r4, lr
    5a08:	it	cs
    5a0a:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5a0c:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    5a0e:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5a12:	bhi.n	5a28 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    5a14:	adds	r2, r4, r1
    5a16:	cmp	r2, r3
    5a18:	bls.n	5a28 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5a1a:	add.w	r0, r0, #524	; 0x20c
    5a1e:	str	r1, [sp, #8]
    5a20:	bl	4e8c <FsCache::invalidate()>
    5a24:	ldr	r0, [r6, #32]
    5a26:	ldr	r1, [sp, #8]
    5a28:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5a2c:	ldr	r5, [r0, #0]
    5a2e:	mov	r3, r4
    5a30:	mov	r2, sl
    5a32:	ldr	r4, [r5, #28]
    5a34:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    5a36:	cmp	r0, #0
    5a38:	bne.n	597e <ExFatFile::write(void const*, unsigned int)+0x10e>
    5a3a:	b.n	5882 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5a3c:	rsb	r7, r9, #512	; 0x200
    5a40:	cmp	r7, r8
    5a42:	it	cs
    5a44:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5a46:	movs	r2, #1
    5a48:	b.n	595e <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5a4a:	ldr	r5, [r6, #28]
    5a4c:	cbz	r5, 5a7e <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5a4e:	str	r5, [r6, #24]
    5a50:	b.n	591c <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    5a52:	ldr.w	r3, [r0, #532]	; 0x214
    5a56:	cmp	r1, r3
    5a58:	beq.n	5ab4 <ExFatFile::write(void const*, unsigned int)+0x244>
    5a5a:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5a5e:	ldr	r3, [r0, #0]
    5a60:	mov	r2, sl
    5a62:	ldr	r3, [r3, #24]
    5a64:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5a66:	cmp	r0, #0
    5a68:	beq.w	5882 <ExFatFile::write(void const*, unsigned int)+0x12>
    5a6c:	mov.w	r0, #512	; 0x200
    5a70:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5a72:	mov.w	r7, #512	; 0x200
    5a76:	b.n	5982 <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5a78:	adds	r5, #1
    5a7a:	str	r5, [r6, #24]
    5a7c:	b.n	591c <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5a7e:	mov	r0, r6
    5a80:	bl	53d0 <ExFatFile::addCluster()>
    5a84:	cmp	r0, #0
    5a86:	beq.w	5882 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5a8a:	ldr	r5, [r6, #24]
    5a8c:	str	r5, [r6, #28]
    5a8e:	ldr	r0, [r6, #32]
    5a90:	b.n	591c <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5a92:	mov	r1, r5
    5a94:	ldr	r2, [sp, #12]
    5a96:	bl	526c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    5a9a:	cmp	r0, #0
    5a9c:	bne.w	5918 <ExFatFile::write(void const*, unsigned int)+0xa8>
    5aa0:	b.n	590e <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    5aa2:	ldr	r0, [r6, #32]
    5aa4:	add.w	r0, r0, #524	; 0x20c
    5aa8:	bl	4f58 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    5aac:	cmp	r0, #0
    5aae:	bne.w	597e <ExFatFile::write(void const*, unsigned int)+0x10e>
    5ab2:	b.n	5882 <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5ab4:	add.w	r0, r0, #524	; 0x20c
    5ab8:	str	r1, [sp, #8]
    5aba:	bl	4e8c <FsCache::invalidate()>
    5abe:	ldr	r0, [r6, #32]
    5ac0:	ldr	r1, [sp, #8]
    5ac2:	b.n	5a5a <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5ac4:	ldrd	r2, r3, [r0, #16]
    5ac8:	bl	4888 <ExFatFile::seekSet(unsigned long long)>
    5acc:	cmp	r0, #0
    5ace:	beq.w	5882 <ExFatFile::write(void const*, unsigned int)+0x12>
    5ad2:	b.n	58a0 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5ad4:	ldrb.w	r1, [r6, #51]	; 0x33
    5ad8:	ldr	r0, [sp, #4]
    5ada:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5ade:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5ae2:	strb.w	r1, [r6, #51]	; 0x33
    5ae6:	b.n	5892 <ExFatFile::write(void const*, unsigned int)+0x22>
    5ae8:	ldr	r0, [sp, #4]
    5aea:	b.n	5892 <ExFatFile::write(void const*, unsigned int)+0x22>
    5aec:	ldrd	r2, r3, [r6]
    5af0:	b.n	59c8 <ExFatFile::write(void const*, unsigned int)+0x158>
    5af2:	nop
    5af4:	.word	0x2001dd00

00005af8 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5af8:	push	{r3, r4, r5, lr}
    5afa:	mov	r4, r0
    5afc:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5afe:	movs	r2, #36	; 0x24
    5b00:	movs	r1, #0
    5b02:	bl	c7ac <memset>

  m_vol = vol;
    5b06:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    5b08:	ldrb	r3, [r5, #7]
    5b0a:	cmp	r3, #16
    5b0c:	beq.n	5b20 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    5b0e:	cmp	r3, #32
    5b10:	bne.n	5b1c <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5b12:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b14:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5b16:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b18:	strb	r0, [r4, #2]
    5b1a:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    5b1c:	movs	r0, #0
}
    5b1e:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5b20:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b22:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5b24:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b26:	strb	r0, [r4, #2]
    5b28:	pop	{r3, r4, r5, pc}
    5b2a:	nop

00005b2c <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5b2c:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5b2e:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5b30:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5b34:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5b36:	mov	r1, r5
    5b38:	ldr	r0, [r0, #8]
    5b3a:	bl	6570 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5b3e:	cbz	r0, 5b56 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5b40:	cbz	r5, 5b58 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5b42:	ldr	r3, [r4, #16]
    5b44:	adds	r5, #1
    5b46:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5b48:	ldrb	r3, [r4, #2]
    5b4a:	it	ne
    5b4c:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b50:	orn	r3, r3, #127	; 0x7f
    5b54:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5b56:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5b58:	ldrb	r3, [r4, #2]
    5b5a:	orr.w	r3, r3, #64	; 0x40
    5b5e:	b.n	5b50 <FatFile::addCluster()+0x24>

00005b60 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5b60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5b64:	ldrb	r3, [r0, #0]
    5b66:	and.w	r3, r3, #32
    5b6a:	cbnz	r3, 5b78 <FatFile::addDirCluster()+0x18>
    5b6c:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5b70:	ldr	r1, [r0, #20]
    5b72:	ldr	r3, [pc, #124]	; (5bf0 <FatFile::addDirCluster()+0x90>)
    5b74:	cmp	r1, r3
    5b76:	bls.n	5b80 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5b78:	movs	r6, #0
}
    5b7a:	mov	r0, r6
    5b7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b80:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5b82:	bl	5b2c <FatFile::addCluster()>
    5b86:	mov	r6, r0
    5b88:	cmp	r0, #0
    5b8a:	beq.n	5b78 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5b8c:	ldr	r1, [r5, #16]
    5b8e:	ldr	r0, [r5, #8]
    5b90:	bl	648c <FatPartition::clusterStartSector(unsigned long) const>
    5b94:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5b96:	ldr	r0, [r5, #8]
    5b98:	mov	r1, r7
    5b9a:	adds	r0, #36	; 0x24
    5b9c:	movs	r2, #5
    5b9e:	bl	641c <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5ba2:	mov	r8, r0
    5ba4:	cmp	r0, #0
    5ba6:	beq.n	5b78 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5ba8:	mov.w	r2, #512	; 0x200
    5bac:	mov	r1, r4
    5bae:	bl	c7ac <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5bb2:	ldr	r3, [r5, #8]
    5bb4:	ldrb	r2, [r3, #4]
    5bb6:	cmp	r2, #1
    5bb8:	bls.n	5bdc <FatFile::addDirCluster()+0x7c>
    5bba:	movs	r4, #1
    5bbc:	b.n	5bc6 <FatFile::addDirCluster()+0x66>
    5bbe:	ldr	r3, [r5, #8]
    5bc0:	ldrb	r2, [r3, #4]
    5bc2:	cmp	r2, r4
    5bc4:	bls.n	5bdc <FatFile::addDirCluster()+0x7c>
    5bc6:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5bc8:	ldr	r3, [r0, #0]
    5bca:	adds	r1, r4, r7
    5bcc:	ldr	r3, [r3, #24]
    5bce:	mov	r2, r8
    5bd0:	blx	r3
    5bd2:	adds	r4, #1
    5bd4:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5bd6:	cmp	r0, #0
    5bd8:	bne.n	5bbe <FatFile::addDirCluster()+0x5e>
    5bda:	b.n	5b78 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5bdc:	ldrb	r3, [r3, #6]
    5bde:	ldr	r1, [r5, #20]
    5be0:	mov.w	r2, #512	; 0x200
    5be4:	lsl.w	r3, r2, r3
    5be8:	uxtah	r3, r1, r3
    5bec:	str	r3, [r5, #20]
    5bee:	b.n	5b7a <FatFile::addDirCluster()+0x1a>
    5bf0:	.word	0x001ffdff

00005bf4 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5bf4:	push	{r4, lr}
    5bf6:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5bf8:	ldr	r0, [r0, #8]
    5bfa:	mov	r2, r1
    5bfc:	adds	r0, #36	; 0x24
    5bfe:	ldr	r1, [r4, #24]
    5c00:	bl	641c <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5c04:	cbz	r0, 5c10 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5c06:	ldrh	r3, [r4, #4]
    5c08:	and.w	r3, r3, #15
    5c0c:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    5c10:	pop	{r4, pc}
    5c12:	nop

00005c14 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5c14:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5c16:	ldrsb.w	r3, [r0, #2]
    5c1a:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5c1c:	sub	sp, #8
    5c1e:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5c20:	blt.n	5c56 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5c22:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5c24:	add.w	r0, r5, #36	; 0x24
    5c28:	bl	647c <FatCache::sync()>
    5c2c:	cbnz	r0, 5c3c <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5c2e:	ldrb	r3, [r4, #1]
    5c30:	orr.w	r3, r3, #1
    5c34:	strb	r3, [r4, #1]
  return false;
    5c36:	movs	r0, #0
}
    5c38:	add	sp, #8
    5c3a:	pop	{r4, r5, r6, pc}
    5c3c:	add.w	r0, r5, #560	; 0x230
    5c40:	bl	647c <FatCache::sync()>
    5c44:	cmp	r0, #0
    5c46:	beq.n	5c2e <FatFile::sync() [clone .part.40]+0x1a>
    5c48:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5c4a:	ldr	r3, [r0, #0]
    5c4c:	ldr	r3, [r3, #20]
    5c4e:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5c50:	cmp	r0, #0
    5c52:	beq.n	5c2e <FatFile::sync() [clone .part.40]+0x1a>
    5c54:	b.n	5c38 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5c56:	movs	r1, #1
    5c58:	bl	5bf4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5c5c:	mov	r5, r0
    5c5e:	cmp	r0, #0
    5c60:	beq.n	5c2e <FatFile::sync() [clone .part.40]+0x1a>
    5c62:	ldrb	r3, [r0, #0]
    5c64:	cmp	r3, #229	; 0xe5
    5c66:	beq.n	5c2e <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5c68:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5c6a:	ldr	r2, [pc, #56]	; (5ca4 <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5c6c:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5c6e:	itt	mi
    5c70:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5c72:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5c74:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5c76:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5c78:	strh	r3, [r0, #26]
    5c7a:	lsrs	r3, r3, #16
    5c7c:	strh	r3, [r0, #20]
    5c7e:	cbz	r6, 5c9a <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5c80:	add.w	r2, sp, #3
    5c84:	add.w	r1, sp, #6
    5c88:	add	r0, sp, #4
    5c8a:	blx	r6
      setLe16(dir->modifyDate, date);
    5c8c:	ldrh.w	r3, [sp, #4]
    5c90:	ldrh.w	r2, [sp, #6]
    5c94:	strh	r3, [r5, #24]
    5c96:	strh	r3, [r5, #18]
    5c98:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5c9a:	ldrb	r3, [r4, #2]
    5c9c:	and.w	r3, r3, #127	; 0x7f
    5ca0:	strb	r3, [r4, #2]
    5ca2:	b.n	5c22 <FatFile::sync() [clone .part.40]+0xe>
    5ca4:	.word	0x2001dd00

00005ca8 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5ca8:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5caa:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5cac:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5cae:	cbnz	r3, 5cba <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5cb0:	movs	r3, #0
    5cb2:	strb	r3, [r4, #0]
  m_flags = 0;
    5cb4:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5cb6:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    5cb8:	pop	{r4, pc}
    5cba:	bl	5c14 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5cbe:	movs	r3, #0
    5cc0:	strb	r3, [r4, #0]
  m_flags = 0;
    5cc2:	strb	r3, [r4, #2]
  return rtn;
}
    5cc4:	pop	{r4, pc}
    5cc6:	nop

00005cc8 <FatFile::preAllocate(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5cc8:	cbnz	r1, 5cce <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5cca:	movs	r0, #0
}
    5ccc:	bx	lr
  close();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    5cce:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5cd0:	ldrb	r3, [r0, #2]
    5cd2:	lsls	r3, r3, #30
    5cd4:	bmi.n	5cda <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5cd6:	movs	r0, #0
    5cd8:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5cda:	ldr	r3, [r0, #32]
    5cdc:	cmp	r3, #0
    5cde:	bne.n	5cd6 <FatFile::preAllocate(unsigned long)+0xe>
    5ce0:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    5ce2:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    5ce4:	ldrb	r3, [r0, #6]
    5ce6:	adds	r3, #9
    5ce8:	mov	r5, r1
    5cea:	uxtb	r3, r3
    5cec:	subs	r1, #1
    5cee:	lsrs	r1, r3
    5cf0:	adds	r1, #1
    5cf2:	add.w	r2, r4, #32
    5cf6:	bl	65f4 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    5cfa:	cmp	r0, #0
    5cfc:	beq.n	5cd6 <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5cfe:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d00:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    5d02:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5d04:	orn	r3, r3, #31
    5d08:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d0a:	cbnz	r2, 5d0e <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    5d0c:	pop	{r3, r4, r5, pc}
    5d0e:	mov	r0, r4
    5d10:	ldmia.w	sp!, {r3, r4, r5, lr}
    5d14:	b.w	5c14 <FatFile::sync() [clone .part.40]>

00005d18 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5d18:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d1c:	mov	r6, r0
    5d1e:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5d20:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5d22:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5d24:	movs	r0, #0
    5d26:	strb.w	r0, [sp, #36]	; 0x24
    5d2a:	strb.w	r0, [sp, #37]	; 0x25
    5d2e:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5d32:	cbnz	r5, 5d40 <FatFile::open(FatFile*, char const*, int)+0x28>
    5d34:	mov	r8, r3
    5d36:	ldrb	r3, [r1, #0]
    5d38:	tst.w	r3, #112	; 0x70
    5d3c:	mov	r4, r1
    5d3e:	bne.n	5d48 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5d40:	movs	r0, #0
}
    5d42:	add	sp, #72	; 0x48
    5d44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5d48:	ldrb	r3, [r2, #0]
    5d4a:	cmp	r3, #47	; 0x2f
    5d4c:	mov	r0, r2
    5d4e:	beq.n	5d9c <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d50:	movs	r7, #0
    5d52:	b.n	5d5c <FatFile::open(FatFile*, char const*, int)+0x44>
    5d54:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5d56:	strb	r7, [r6, #0]
  m_flags = 0;
    5d58:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5d5a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5d5c:	add	r2, sp, #4
    5d5e:	add	r1, sp, #12
    5d60:	bl	6814 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d64:	add	r2, sp, #12
    5d66:	mov	r1, r4
    5d68:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5d6a:	cmp	r0, #0
    5d6c:	beq.n	5d40 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5d6e:	ldr	r5, [sp, #4]
    5d70:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d72:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5d74:	cbz	r5, 5dba <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d76:	bl	6b18 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5d7a:	mov	r5, r6
    5d7c:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d7e:	cmp	r0, #0
    5d80:	beq.n	5d40 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5d82:	ldmia	r5!, {r0, r1, r2, r3}
    5d84:	stmia	r4!, {r0, r1, r2, r3}
    5d86:	ldmia	r5!, {r0, r1, r2, r3}
    5d88:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d8a:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5d8c:	ldr	r2, [r5, #0]
    5d8e:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d90:	cmp	r3, #0
    5d92:	beq.n	5d54 <FatFile::open(FatFile*, char const*, int)+0x3c>
    5d94:	mov	r0, r6
    5d96:	bl	5c14 <FatFile::sync() [clone .part.40]>
    5d9a:	b.n	5d54 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5d9c:	adds	r0, #1
    5d9e:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5da0:	ldrb	r3, [r0, #0]
    5da2:	cmp	r3, #47	; 0x2f
    5da4:	beq.n	5d9c <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    5da6:	cbz	r3, 5dcc <FatFile::open(FatFile*, char const*, int)+0xb4>
    5da8:	ldr	r1, [r4, #8]
    5daa:	add	r0, sp, #36	; 0x24
    5dac:	bl	5af8 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5db0:	cmp	r0, #0
    5db2:	beq.n	5d40 <FatFile::open(FatFile*, char const*, int)+0x28>
    5db4:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5db6:	add	r4, sp, #36	; 0x24
    5db8:	b.n	5d50 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5dba:	mov	r3, r8
    5dbc:	add	r2, sp, #12
    5dbe:	mov	r1, r4
    5dc0:	mov	r0, r6
    5dc2:	bl	6b18 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    5dc6:	add	sp, #72	; 0x48
    5dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dcc:	ldr	r1, [r4, #8]
    5dce:	mov	r0, r6
    5dd0:	bl	5af8 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    5dd4:	b.n	5d42 <FatFile::open(FatFile*, char const*, int)+0x2a>
    5dd6:	nop

00005dd8 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5dd8:	cbz	r1, 5de2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    5dda:	addw	r1, r1, #1084	; 0x43c
    5dde:	b.w	5d18 <FatFile::open(FatFile*, char const*, int)>
}
    5de2:	mov	r0, r1
    5de4:	bx	lr
    5de6:	nop

00005de8 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    5de8:	ldrb	r3, [r0, #0]
    5dea:	cbz	r3, 5df0 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    5dec:	movs	r0, #0
    5dee:	bx	lr
    5df0:	b.w	5af8 <FatFile::openRoot(FatVolume*) [clone .part.36]>

00005df4 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5df4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5df8:	ldrb	r3, [r0, #2]
    5dfa:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5dfc:	sub	sp, #12
    5dfe:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5e00:	bpl.w	5f22 <FatFile::read(void*, unsigned int)+0x12e>
    5e04:	mov	r7, r1
    5e06:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5e08:	lsls	r6, r1, #28
    5e0a:	mov	r9, r2
    5e0c:	bmi.w	5f34 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5e10:	lsls	r4, r1, #26
    5e12:	bpl.n	5e26 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5e14:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5e16:	ldr	r3, [r0, #20]
    5e18:	ldrh	r2, [r2, #8]
    5e1a:	rsb	r3, r3, r2, lsl #5
    5e1e:	uxth	r3, r3
    5e20:	cmp	r9, r3
    5e22:	it	cs
    5e24:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5e26:	cmp.w	r9, #0
    5e2a:	beq.w	5f80 <FatFile::read(void*, unsigned int)+0x18c>
    5e2e:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5e30:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5e32:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5e34:	mov	r6, r9
    5e36:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e3a:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5e3e:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5e42:	bpl.n	5ec2 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5e44:	ldr	r1, [r2, #32]
    5e46:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5e4a:	cmp.w	fp, #0
    5e4e:	bne.n	5ef6 <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5e50:	cmp.w	r6, #512	; 0x200
    5e54:	bcc.n	5ef6 <FatFile::read(void*, unsigned int)+0x102>
    5e56:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    5e58:	cmp	r1, r3
    5e5a:	beq.n	5ef6 <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5e5c:	cmp.w	r6, #1024	; 0x400
    5e60:	bcc.n	5f46 <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5e62:	ldrb	r0, [r5, #0]
    5e64:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5e66:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5e6a:	bmi.n	5e78 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5e6c:	ldrb	r0, [r2, #4]
    5e6e:	rsb	r0, r8, r0
    5e72:	cmp	fp, r0
    5e74:	it	cs
    5e76:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5e78:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5e7a:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5e7e:	bhi.n	5e98 <FatFile::read(void*, unsigned int)+0xa4>
    5e80:	add	r3, fp
    5e82:	cmp	r1, r3
    5e84:	bcs.n	5e98 <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5e86:	add.w	r0, r2, #36	; 0x24
    5e8a:	str	r1, [sp, #4]
    5e8c:	bl	647c <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    5e90:	cmp	r0, #0
    5e92:	beq.n	5f22 <FatFile::read(void*, unsigned int)+0x12e>
    5e94:	ldr	r2, [r5, #8]
    5e96:	ldr	r1, [sp, #4]
    5e98:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5e9a:	ldr	r2, [r0, #0]
    5e9c:	mov	r3, fp
    5e9e:	ldr.w	fp, [r2, #12]
    5ea2:	mov	r2, r7
    5ea4:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5ea6:	cmp	r0, #0
    5ea8:	beq.n	5f22 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5eaa:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5eac:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5eae:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5eb0:	add	r7, r4
    m_curPosition += n;
    5eb2:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5eb4:	beq.n	5f80 <FatFile::read(void*, unsigned int)+0x18c>
    5eb6:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5eb8:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5eba:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5ebc:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5ec0:	bmi.n	5e44 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5ec2:	ldrb.w	r8, [r2, #5]
    5ec6:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5eca:	cmp.w	fp, #0
    5ece:	bne.n	5f42 <FatFile::read(void*, unsigned int)+0x14e>
    5ed0:	cmp.w	r8, #0
    5ed4:	bne.n	5f42 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    5ed6:	cmp	r3, #0
    5ed8:	bne.n	5f5a <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5eda:	lsls	r1, r1, #25
    5edc:	ite	mi
    5ede:	ldrmi	r1, [r2, #32]
    5ee0:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5ee2:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5ee4:	mov	r0, r2
    5ee6:	bl	648c <FatPartition::clusterStartSector(unsigned long) const>
    5eea:	ldr	r2, [r5, #8]
    5eec:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5ef0:	cmp.w	fp, #0
    5ef4:	beq.n	5e50 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5ef6:	add.w	r0, r2, #36	; 0x24
    5efa:	movs	r2, #0
    5efc:	bl	641c <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    5f00:	cbz	r0, 5f22 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5f02:	rsb	r4, fp, #512	; 0x200
    5f06:	cmp	r4, r6
    5f08:	it	cs
    5f0a:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5f0c:	add.w	r1, r0, fp
    5f10:	mov	r2, r4
    5f12:	mov	r0, r7
    5f14:	bl	87fc <memcpy>
    5f18:	b.n	5eaa <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5f1a:	ldrb	r3, [r5, #0]
    5f1c:	tst.w	r3, #112	; 0x70
    5f20:	bne.n	5f82 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5f22:	ldrb	r3, [r5, #1]
  return -1;
    5f24:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5f28:	orr.w	r3, r3, #2
    5f2c:	strb	r3, [r5, #1]
  return -1;
}
    5f2e:	add	sp, #12
    5f30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5f34:	ldr	r3, [r0, #28]
    5f36:	ldr	r2, [r0, #20]
    5f38:	subs	r3, r3, r2
    5f3a:	cmp	r9, r3
    5f3c:	it	cs
    5f3e:	movcs	r9, r3
    5f40:	b.n	5e26 <FatFile::read(void*, unsigned int)+0x32>
    5f42:	ldr	r1, [r5, #16]
    5f44:	b.n	5ee4 <FatFile::read(void*, unsigned int)+0xf0>
    5f46:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5f48:	ldr	r3, [r0, #0]
    5f4a:	mov	r2, r7
    5f4c:	ldr	r3, [r3, #8]
    5f4e:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    5f50:	cmp	r0, #0
    5f52:	beq.n	5f22 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5f54:	mov.w	r4, #512	; 0x200
    5f58:	b.n	5eaa <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5f5a:	lsls	r3, r1, #28
    5f5c:	bpl.n	5f6a <FatFile::read(void*, unsigned int)+0x176>
    5f5e:	ldrb	r3, [r5, #2]
    5f60:	lsls	r4, r3, #25
    5f62:	bpl.n	5f6a <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    5f64:	ldr	r1, [r5, #16]
    5f66:	adds	r1, #1
    5f68:	b.n	5ee2 <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5f6a:	mov	r0, r2
    5f6c:	ldr	r1, [r5, #16]
    5f6e:	mov	r2, sl
    5f70:	bl	6498 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5f74:	cmp	r0, #0
    5f76:	blt.n	5f22 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5f78:	beq.n	5f1a <FatFile::read(void*, unsigned int)+0x126>
    5f7a:	ldr	r2, [r5, #8]
    5f7c:	ldr	r1, [r5, #16]
    5f7e:	b.n	5ee4 <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5f80:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5f82:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5f86:	add	sp, #12
    5f88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005f8c <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5f8c:	push	{r4, r5, r6, lr}
    5f8e:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5f90:	movs	r2, #1
    5f92:	add.w	r1, sp, #7
    5f96:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5f98:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5f9a:	ldr	r5, [r0, #16]
    5f9c:	bl	5df4 <FatFile::read(void*, unsigned int)>
    5fa0:	cmp	r0, #1
    5fa2:	it	eq
    5fa4:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5fa8:	str	r6, [r4, #20]
    5faa:	it	ne
    5fac:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5fb0:	str	r5, [r4, #16]
  return c;
}
    5fb2:	add	sp, #8
    5fb4:	pop	{r4, r5, r6, pc}
    5fb6:	nop

00005fb8 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5fb8:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5fba:	ldr	r3, [r0, #20]
    5fbc:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5fc0:	sub	sp, #12
    5fc2:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5fc4:	cbz	r5, 5fc8 <FatFile::readDirCache(bool)+0x10>
    5fc6:	cbnz	r1, 5fec <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    5fc8:	movs	r2, #1
    5fca:	add.w	r1, sp, #7
    5fce:	mov	r0, r4
    5fd0:	bl	5df4 <FatFile::read(void*, unsigned int)>
    5fd4:	sxtb	r0, r0
    if  (n != 1) {
    5fd6:	cmp	r0, #1
    5fd8:	bne.n	5ff2 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    5fda:	ldr	r3, [r4, #20]
    5fdc:	adds	r3, #31
    5fde:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5fe0:	ldr	r0, [r4, #8]
    5fe2:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5fe4:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    5fe8:	add	sp, #12
    5fea:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    5fec:	adds	r3, #32
    5fee:	str	r3, [r0, #20]
    5ff0:	b.n	5fe0 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    5ff2:	movs	r0, #0
}
    5ff4:	add	sp, #12
    5ff6:	pop	{r4, r5, pc}

00005ff8 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5ff8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ffc:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5ffe:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6000:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    6002:	cbz	r3, 6032 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6004:	ldr	r2, [r0, #20]
    6006:	cmp	r2, r1
    6008:	mov	r6, r1
    600a:	beq.n	6082 <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    600c:	cbnz	r1, 6020 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    600e:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6010:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    6012:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6014:	bic.w	r3, r3, #32
    6018:	strb	r3, [r4, #2]
  return true;
    601a:	movs	r0, #1
    601c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    6020:	lsls	r0, r3, #28
    6022:	bmi.n	603a <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    6024:	lsls	r1, r3, #26
    6026:	bpl.n	6040 <FatFile::seekSet(unsigned long)+0x48>
    6028:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    602a:	ldrh	r3, [r3, #8]
    602c:	cmp.w	r6, r3, lsl #5
    6030:	bls.n	6010 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    6032:	str	r7, [r4, #16]
  return false;
    6034:	movs	r0, #0
    6036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    603a:	ldr	r1, [r4, #28]
    603c:	cmp	r6, r1
    603e:	bhi.n	6032 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6040:	ldr.w	lr, [r4, #8]
    6044:	ldrb.w	r5, [lr, #6]
    6048:	adds	r5, #9
    604a:	uxtb	r1, r5
    604c:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    604e:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6050:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6052:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    6054:	cmp	r0, r5
    6056:	bhi.n	605a <FatFile::seekSet(unsigned long)+0x62>
    6058:	cbnz	r2, 6088 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    605a:	lsls	r3, r3, #25
    605c:	ite	mi
    605e:	ldrmi.w	r3, [lr, #32]
    6062:	ldrpl	r3, [r4, #32]
    6064:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6066:	add.w	r8, r4, #16
    606a:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    606c:	cmp	r5, #0
    606e:	beq.n	6010 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6070:	ldr	r1, [r4, #16]
    6072:	ldr	r0, [r4, #8]
    6074:	bl	6498 <FatPartition::fatGet(unsigned long, unsigned long*)>
    6078:	cmp	r0, #0
    607a:	add.w	r5, r5, #4294967295
    607e:	bgt.n	606a <FatFile::seekSet(unsigned long)+0x72>
    6080:	b.n	6032 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    6082:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    6084:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    6088:	subs	r5, r5, r0
    608a:	b.n	6066 <FatFile::seekSet(unsigned long)+0x6e>

0000608c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    608c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6090:	mov	r5, r1
    6092:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6094:	movs	r1, #0
    6096:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6098:	mov	r4, r0
    609a:	mov	r7, r3
    609c:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    60a0:	bl	c7ac <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    60a4:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    60a6:	ldr	r3, [r5, #32]
    60a8:	str	r3, [r4, #12]
    60aa:	add.w	r2, r0, #48	; 0x30
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    60ae:	and.w	r3, r8, #15
    60b2:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    60b6:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    60b8:	strh.w	r8, [r4, #4]
    60bc:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    60be:	lsls	r5, r1, #28
    60c0:	bmi.n	60e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    60c2:	and.w	r1, r1, #23
    60c6:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    60c8:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    60ca:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    60cc:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    60d0:	it	eq
    60d2:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    60d6:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    60da:	it	eq
    60dc:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    60de:	cmp	r3, #1
    60e0:	beq.n	60f2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    60e2:	cmp	r3, #2
    60e4:	beq.n	613a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    60e6:	cbz	r3, 6130 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    60e8:	movs	r0, #0
    60ea:	strb	r0, [r4, #0]
  m_flags = 0;
    60ec:	strb	r0, [r4, #2]
  return false;
    60ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    60f2:	movs	r3, #2
    60f4:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    60f6:	ldrb	r1, [r4, #0]
    60f8:	tst.w	r1, #17
    60fc:	bne.n	60e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    60fe:	sxtb	r1, r3
    6100:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6104:	and.w	r3, r7, #8
    6108:	orrs	r3, r1
    610a:	uxtb	r3, r3
    610c:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    610e:	ldrh.w	lr, [r2, #20]
    6112:	ldrh	r1, [r2, #26]
    6114:	ldr	r6, [r0, #44]	; 0x2c
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    6116:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    6118:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    611c:	cbz	r5, 6140 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    611e:	cbnz	r1, 6156 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6120:	orn	r3, r3, #127	; 0x7f
    6124:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6126:	lsls	r3, r7, #17
    6128:	bmi.n	6148 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    612a:	movs	r0, #1
    612c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    6130:	ands.w	r5, r7, #1024	; 0x400
    6134:	bne.n	60e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    6136:	movs	r1, #1
    6138:	b.n	6104 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    613a:	movs	r3, #3
    613c:	strb	r3, [r4, #2]
      break;
    613e:	b.n	60f6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    6140:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6142:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    6144:	str	r3, [r4, #28]
    6146:	b.n	6126 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6148:	ldr	r1, [r4, #28]
    614a:	mov	r0, r4
    614c:	bl	5ff8 <FatFile::seekSet(unsigned long)>
    6150:	cmp	r0, #0
    6152:	bne.n	612a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    6154:	b.n	60e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6156:	bl	669c <FatPartition::freeChain(unsigned long)>
    615a:	cmp	r0, #0
    615c:	beq.n	60e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    615e:	ldrb	r3, [r4, #2]
    6160:	b.n	6120 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    6162:	nop

00006164 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6164:	ldrb	r3, [r0, #0]
    6166:	cbz	r3, 616c <FatFile::sync()+0x8>
    6168:	b.w	5c14 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    616c:	movs	r0, #1
    616e:	bx	lr

00006170 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6170:	ldrb	r3, [r0, #2]
    6172:	lsls	r3, r3, #30
    6174:	bpl.n	61ac <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    6176:	ldr	r3, [r0, #32]
    6178:	cbz	r3, 61a8 <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    617a:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    617c:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    617e:	sub	sp, #8
    6180:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    6182:	cbnz	r1, 61c2 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    6184:	str	r3, [sp, #4]
    m_firstCluster = 0;
    6186:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    6188:	mov	r1, r3
    618a:	ldr	r0, [r4, #8]
    618c:	bl	669c <FatPartition::freeChain(unsigned long)>
    6190:	cbz	r0, 61be <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6192:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6194:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    6196:	ldr	r1, [r4, #20]
    6198:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    619a:	orn	r3, r3, #127	; 0x7f
    619e:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    61a0:	cbnz	r2, 61de <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    61a2:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    61a4:	add	sp, #8
    61a6:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    61a8:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    61aa:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    61ac:	movs	r0, #0
}
    61ae:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    61b0:	mvn.w	r2, #4026531840	; 0xf0000000
    61b4:	ldr	r1, [r4, #16]
    61b6:	ldr	r0, [r4, #8]
    61b8:	bl	6508 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    61bc:	cbnz	r0, 61d6 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    61be:	movs	r0, #0
    61c0:	b.n	61a4 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    61c2:	add	r2, sp, #8
    61c4:	movs	r3, #0
    61c6:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    61ca:	ldr	r0, [r0, #8]
    61cc:	bl	6498 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    61d0:	cmp	r0, #0
    61d2:	blt.n	61be <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    61d4:	bne.n	61b0 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    61d6:	ldr	r3, [sp, #4]
    61d8:	cmp	r3, #0
    61da:	beq.n	6192 <FatFile::truncate()+0x22>
    61dc:	b.n	6188 <FatFile::truncate()+0x18>
    61de:	mov	r0, r4
    61e0:	bl	5c14 <FatFile::sync() [clone .part.40]>
    61e4:	b.n	61a4 <FatFile::truncate()+0x34>
    61e6:	nop

000061e8 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    61e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    61ec:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    61ee:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    61f0:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    61f2:	bmi.n	6204 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    61f4:	ldrb	r3, [r4, #1]
    61f6:	orr.w	r3, r3, #1
    61fa:	strb	r3, [r4, #1]
  return -1;
    61fc:	mov.w	r0, #4294967295
    6200:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6204:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6206:	lsls	r2, r3, #28
    6208:	mov	r8, r1
    620a:	bmi.w	638c <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    620e:	ldr	r2, [r4, #20]
    6210:	mvns	r3, r2
    6212:	cmp	r9, r3
    6214:	bhi.n	61f4 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6216:	cmp.w	r9, #0
    621a:	beq.w	639a <FatFile::write(void const*, unsigned int)+0x1b2>
    621e:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6220:	mov.w	sl, #0
    6224:	b.n	6288 <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6226:	cmp	r1, #0
    6228:	beq.n	631e <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    622a:	ldrb	r3, [r4, #2]
    622c:	lsls	r3, r3, #25
    622e:	bpl.n	632c <FatFile::write(void const*, unsigned int)+0x144>
    6230:	ldr	r3, [r4, #28]
    6232:	cmp	r3, r2
    6234:	bls.n	632c <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    6236:	adds	r1, #1
    6238:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    623a:	bl	648c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    623e:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6242:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6244:	bcs.n	62c2 <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6246:	ldr	r2, [r4, #20]
    6248:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    624a:	ldr	r0, [r4, #8]
    624c:	cmp.w	r6, #512	; 0x200
    6250:	mov	r5, r6
    6252:	it	cs
    6254:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6258:	cmp	r2, r3
    625a:	bcc.n	634e <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    625c:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    625e:	adds	r0, #36	; 0x24
    6260:	bl	641c <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    6264:	cmp	r0, #0
    6266:	beq.n	61f4 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6268:	add	r0, r7
    626a:	mov	r2, r5
    626c:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    626e:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6270:	bl	87fc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6274:	cmp.w	r7, #512	; 0x200
    6278:	beq.n	636a <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    627a:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    627c:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    627e:	add	r2, r5
    src += n;
    6280:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6282:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6284:	beq.w	639a <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6288:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    628a:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    628c:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    628e:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6292:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6296:	bne.n	62b2 <FatFile::write(void const*, unsigned int)+0xca>
    6298:	cmp	r7, #0
    629a:	beq.n	6226 <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    629c:	bl	648c <FatPartition::clusterStartSector(unsigned long) const>
    62a0:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    62a2:	rsb	r5, r7, #512	; 0x200
    62a6:	cmp	r5, r6
    62a8:	it	cs
    62aa:	movcs	r5, r6
    62ac:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    62ae:	movs	r2, #1
    62b0:	b.n	625e <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    62b2:	bl	648c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    62b6:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    62b8:	cmp	r7, #0
    62ba:	bne.n	62a2 <FatFile::write(void const*, unsigned int)+0xba>
    62bc:	cmp.w	r6, #512	; 0x200
    62c0:	bcc.n	6246 <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    62c2:	cmp.w	r6, #1024	; 0x400
    62c6:	ldr	r2, [r4, #8]
    62c8:	bcc.n	6302 <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    62ca:	ldrb	r3, [r2, #4]
    62cc:	ldr	r7, [r2, #44]	; 0x2c
    62ce:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    62d0:	lsrs	r0, r6, #9
    62d2:	cmp	r3, r0
    62d4:	it	cs
    62d6:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    62d8:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    62da:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    62de:	bcc.n	62f2 <FatFile::write(void const*, unsigned int)+0x10a>
    62e0:	add	r7, r3
    62e2:	cmp	r7, r1
    62e4:	bls.n	62f2 <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    62e6:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    62ea:	mov.w	r0, #4294967295
    62ee:	str	r0, [r2, #44]	; 0x2c
    62f0:	ldr	r2, [r4, #8]
    62f2:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    62f4:	ldr	r2, [r0, #0]
    62f6:	ldr	r7, [r2, #28]
    62f8:	mov	r2, r8
    62fa:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    62fc:	cmp	r0, #0
    62fe:	bne.n	627a <FatFile::write(void const*, unsigned int)+0x92>
    6300:	b.n	61f4 <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    6302:	ldr	r3, [r2, #44]	; 0x2c
    6304:	cmp	r3, r1
    6306:	beq.n	635c <FatFile::write(void const*, unsigned int)+0x174>
    6308:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    630a:	ldr	r3, [r0, #0]
    630c:	mov	r2, r8
    630e:	ldr	r3, [r3, #24]
    6310:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    6312:	cmp	r0, #0
    6314:	beq.w	61f4 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    6318:	mov.w	r5, #512	; 0x200
    631c:	b.n	627a <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    631e:	ldr	r1, [r4, #32]
    6320:	cbz	r1, 6378 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    6322:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6324:	bl	648c <FatPartition::clusterStartSector(unsigned long) const>
    6328:	mov	r1, r0
    632a:	b.n	62bc <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    632c:	add.w	r2, r4, #16
    6330:	bl	6498 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6334:	cmp	r0, #0
    6336:	blt.w	61f4 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    633a:	bne.n	6348 <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    633c:	mov	r0, r4
    633e:	bl	5b2c <FatFile::addCluster()>
    6342:	cmp	r0, #0
    6344:	beq.w	61f4 <FatFile::write(void const*, unsigned int)+0xc>
    6348:	ldr	r0, [r4, #8]
    634a:	ldr	r1, [r4, #16]
    634c:	b.n	6324 <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    634e:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    6350:	tst.w	r3, #32
    6354:	ite	eq
    6356:	moveq	r2, #1
    6358:	movne	r2, #5
    635a:	b.n	625e <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    635c:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    6360:	mov.w	r3, #4294967295
    6364:	str	r3, [r2, #44]	; 0x2c
    6366:	ldr	r2, [r4, #8]
    6368:	b.n	6308 <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    636a:	ldr	r0, [r4, #8]
    636c:	adds	r0, #36	; 0x24
    636e:	bl	647c <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    6372:	cmp	r0, #0
    6374:	bne.n	627a <FatFile::write(void const*, unsigned int)+0x92>
    6376:	b.n	61f4 <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    6378:	mov	r0, r4
    637a:	bl	5b2c <FatFile::addCluster()>
    637e:	cmp	r0, #0
    6380:	beq.w	61f4 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    6384:	ldr	r1, [r4, #16]
    6386:	str	r1, [r4, #32]
    6388:	ldr	r0, [r4, #8]
    638a:	b.n	6324 <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    638c:	ldr	r1, [r0, #28]
    638e:	bl	5ff8 <FatFile::seekSet(unsigned long)>
    6392:	cmp	r0, #0
    6394:	beq.w	61f4 <FatFile::write(void const*, unsigned int)+0xc>
    6398:	b.n	620e <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    639a:	ldr	r3, [r4, #28]
    639c:	cmp	r3, r2
    639e:	bcc.n	63b4 <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    63a0:	ldr	r3, [pc, #40]	; (63cc <FatFile::write(void const*, unsigned int)+0x1e4>)
    63a2:	ldr	r3, [r3, #0]
    63a4:	cbz	r3, 63c4 <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    63a6:	ldrb	r3, [r4, #2]
    63a8:	orn	r3, r3, #127	; 0x7f
    63ac:	strb	r3, [r4, #2]
    63ae:	mov	r0, r9
    63b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    63b4:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    63b6:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    63b8:	orn	r3, r3, #127	; 0x7f
    63bc:	strb	r3, [r4, #2]
    63be:	mov	r0, r9
    63c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63c4:	mov	r0, r9
    63c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63ca:	nop
    63cc:	.word	0x2001dd00

000063d0 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    63d0:	push	{r3, r4, r5, r6, r7, lr}
    63d2:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    63d4:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    63d6:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    63da:	mov	r4, r0
    63dc:	ldr	r0, [r3, #0]
    63de:	ldr	r3, [r0, #0]
    63e0:	mov	r2, r6
    63e2:	ldr	r3, [r3, #24]
    63e4:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    63e6:	cbz	r0, 63fa <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    63e8:	ldrb	r3, [r4, #0]
    63ea:	lsls	r2, r3, #30
    63ec:	mov	r5, r0
    63ee:	bmi.n	6400 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    63f0:	bic.w	r3, r3, #1
    63f4:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    63f6:	mov	r0, r5
    63f8:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    63fa:	movs	r5, #0
}
    63fc:	mov	r0, r5
    63fe:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6400:	ldr	r3, [r4, #4]
    6402:	ldr	r1, [r4, #8]
    6404:	ldr	r0, [r3, #0]
    6406:	ldr	r7, [r3, #16]
    6408:	ldr	r3, [r0, #0]
    640a:	mov	r2, r6
    640c:	add	r1, r7
    640e:	ldr	r3, [r3, #24]
    6410:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6412:	cmp	r0, #0
    6414:	beq.n	63fa <FatCache::sync() [clone .part.8]+0x2a>
    6416:	ldrb	r3, [r4, #0]
    6418:	b.n	63f0 <FatCache::sync() [clone .part.8]+0x20>
    641a:	nop

0000641c <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    641c:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    641e:	ldr	r3, [r0, #8]
    6420:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    6422:	mov	r6, r0
    6424:	mov	r4, r2
  if (m_lbn != sector) {
    6426:	beq.n	6448 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6428:	ldrb	r3, [r0, #0]
    642a:	lsls	r2, r3, #31
    642c:	mov	r7, r1
    642e:	bmi.n	6456 <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    6430:	lsls	r3, r4, #29
    6432:	bpl.n	6462 <FatCache::read(unsigned long, unsigned char)+0x46>
    6434:	add.w	r5, r6, #12
    6438:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    643a:	and.w	r4, r4, #3
    643e:	orrs	r4, r3
    6440:	strb	r4, [r6, #0]
    6442:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6444:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    6446:	pop	{r3, r4, r5, r6, r7, pc}
    6448:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    644c:	and.w	r4, r4, #3
    6450:	orrs	r4, r3
    6452:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6454:	pop	{r3, r4, r5, r6, r7, pc}
    6456:	bl	63d0 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    645a:	cmp	r0, #0
    645c:	bne.n	6430 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    645e:	movs	r0, #0
    6460:	pop	{r3, r4, r5, r6, r7, pc}
    6462:	ldr	r3, [r6, #4]
    6464:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6466:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6468:	add.w	r5, r6, #12
    646c:	ldr	r3, [r3, #8]
    646e:	mov	r2, r5
    6470:	mov	r1, r7
    6472:	blx	r3
    6474:	cmp	r0, #0
    6476:	bne.n	6438 <FatCache::read(unsigned long, unsigned char)+0x1c>
    6478:	b.n	645e <FatCache::read(unsigned long, unsigned char)+0x42>
    647a:	nop

0000647c <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    647c:	ldrb	r3, [r0, #0]
    647e:	lsls	r3, r3, #31
    6480:	bmi.n	6486 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    6482:	movs	r0, #1
    6484:	bx	lr
    6486:	b.w	63d0 <FatCache::sync() [clone .part.8]>
    648a:	nop

0000648c <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    648c:	ldrb	r3, [r0, #6]
    648e:	ldr	r0, [r0, #20]
    6490:	subs	r1, #2
    6492:	lsls	r1, r3
}
    6494:	add	r0, r1
    6496:	bx	lr

00006498 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6498:	cmp	r1, #1
    649a:	bls.n	6500 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    649c:	ldr	r3, [r0, #28]
    649e:	cmp	r1, r3
    64a0:	bhi.n	6500 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    64a2:	push	{r4, r5, r6, lr}
    64a4:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    64a6:	cmp	r3, #32
    64a8:	mov	r6, r2
    64aa:	mov	r5, r0
    64ac:	mov	r4, r1
    64ae:	beq.n	64e2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    64b0:	cmp	r3, #16
    64b2:	bne.n	64dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    64b4:	ldr	r3, [r0, #24]
    64b6:	ubfx	r1, r1, #8, #8
    64ba:	add	r1, r3
    64bc:	movs	r2, #2
    64be:	add.w	r0, r0, #560	; 0x230
    64c2:	bl	641c <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    64c6:	cbz	r0, 64dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    64c8:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    64ca:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    64ce:	ldr	r2, [r5, #28]
    64d0:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    64d2:	itte	ls
    64d4:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    64d6:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    64d8:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    64da:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    64dc:	mov.w	r0, #4294967295
    64e0:	pop	{r4, r5, r6, pc}
    64e2:	ldr	r1, [r0, #24]
    64e4:	movs	r2, #2
    64e6:	add.w	r1, r1, r4, lsr #7
    64ea:	add.w	r0, r0, #560	; 0x230
    64ee:	bl	641c <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    64f2:	cmp	r0, #0
    64f4:	beq.n	64dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    64f6:	and.w	r1, r4, #127	; 0x7f
    64fa:	ldr.w	r3, [r0, r1, lsl #2]
    64fe:	b.n	64ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6500:	mov.w	r0, #4294967295
}
    6504:	bx	lr
    6506:	nop

00006508 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6508:	cmp	r1, #1
    650a:	bls.n	6548 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    650c:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    650e:	ldr	r3, [r0, #28]
    6510:	cmp	r1, r3
    6512:	bhi.n	6522 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    6514:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6516:	cmp	r3, #32
    6518:	mov	r5, r2
    651a:	mov	r4, r1
    651c:	beq.n	654c <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    651e:	cmp	r3, #16
    6520:	beq.n	6526 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6522:	movs	r0, #0
    6524:	pop	{r3, r4, r5, pc}
    6526:	ldr	r3, [r0, #24]
    6528:	ubfx	r1, r1, #8, #8
    652c:	add	r1, r3
    652e:	add.w	r0, r0, #560	; 0x230
    6532:	movs	r2, #3
    6534:	bl	641c <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6538:	mov	r3, r0
    653a:	cmp	r0, #0
    653c:	beq.n	6522 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    653e:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    6540:	movs	r0, #1
    6542:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    6546:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6548:	movs	r0, #0
}
    654a:	bx	lr
    654c:	ldr	r1, [r0, #24]
    654e:	movs	r2, #3
    6550:	add.w	r0, r0, #560	; 0x230
    6554:	add.w	r1, r1, r4, lsr #7
    6558:	bl	641c <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    655c:	mov	r3, r0
    655e:	cmp	r0, #0
    6560:	beq.n	6522 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6562:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    6566:	movs	r0, #1
    6568:	str.w	r5, [r3, r1, lsl #2]
    656c:	pop	{r3, r4, r5, pc}
    656e:	nop

00006570 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6570:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6574:	ldr	r4, [r0, #12]
    6576:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6578:	sub	sp, #8
    657a:	mov	r5, r0
    657c:	mov	r7, r1
    657e:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6580:	itte	cc
    6582:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6584:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    6586:	movcs	r6, #1
    6588:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    658a:	adds	r4, #1
    if (find > m_lastCluster) {
    658c:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    658e:	add	r2, sp, #4
    6590:	mov	r0, r5
    6592:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6594:	bls.n	65aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    6596:	cbnz	r6, 65e8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6598:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    659a:	adds	r4, #1
    if (find > m_lastCluster) {
    659c:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    659e:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    65a2:	add	r2, sp, #4
    65a4:	mov	r0, r5
    65a6:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    65a8:	bhi.n	6596 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    65aa:	cmp	r7, r4
    65ac:	beq.n	65e8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    65ae:	bl	6498 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    65b2:	cmp	r0, #0
    65b4:	blt.n	65e8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    65b6:	beq.n	6588 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    65b8:	ldr	r3, [sp, #4]
    65ba:	cmp	r3, #0
    65bc:	bne.n	6588 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    65be:	cbz	r6, 65c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    65c0:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    65c2:	mvn.w	r2, #4026531840	; 0xf0000000
    65c6:	mov	r1, r4
    65c8:	mov	r0, r5
    65ca:	bl	6508 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    65ce:	mov	r6, r0
    65d0:	cbz	r0, 65e8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    65d2:	cbnz	r7, 65da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    65d4:	str.w	r4, [r8]
  return true;
    65d8:	b.n	65ea <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    65da:	mov	r1, r7
    65dc:	mov	r0, r5
    65de:	mov	r2, r4
    65e0:	bl	6508 <FatPartition::fatPut(unsigned long, unsigned long)>
    65e4:	cmp	r0, #0
    65e6:	bne.n	65d4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    65e8:	movs	r6, #0
}
    65ea:	mov	r0, r6
    65ec:	add	sp, #8
    65ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65f2:	nop

000065f4 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    65f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    65f8:	ldr	r4, [r0, #12]

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    65fa:	ldr	r3, [r0, #28]
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    65fc:	adds	r7, r4, #1

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    65fe:	cmp	r7, r3
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    6600:	sub	sp, #8
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6602:	bhi.n	6652 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    6604:	mov	sl, r2
    6606:	mov	r9, r1
    6608:	mov	r6, r0
    660a:	adds	r4, #2
    660c:	mov.w	r8, #1
    6610:	b.n	6626 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    6612:	subs	r2, r4, r7
    6614:	mov	r3, r4
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    6616:	cbz	r0, 663c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x48>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    6618:	cmp	r2, r9
    661a:	beq.n	665c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x68>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    661c:	ldr	r2, [r6, #28]
    661e:	cmp	r3, r2
    6620:	add.w	r4, r4, #1
    6624:	bhi.n	6652 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    6626:	subs	r5, r4, #1
      // Can't find space.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    6628:	mov	r1, r5
    662a:	add	r2, sp, #4
    662c:	mov	r0, r6
    662e:	bl	6498 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6632:	cmp	r0, #0
    6634:	blt.n	6652 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    6636:	ldr	r3, [sp, #4]
    6638:	cmp	r3, #0
    663a:	beq.n	6612 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    663c:	ldr	r2, [r6, #28]
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    663e:	mov	r3, r4
      goto fail;
    }
    if (f || fg == 0) {
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    6640:	cmp	r7, r5
    6642:	it	ne
    6644:	movne.w	r8, #0
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6648:	cmp	r3, r2
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    664a:	mov	r7, r4
    664c:	add.w	r4, r4, #1
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6650:	bls.n	6626 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

fail:
  return false;
    6652:	movs	r4, #0
}
    6654:	mov	r0, r4
    6656:	add	sp, #8
    6658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      break;
    }
    endCluster++;
  }
  // Remember possible next free cluster.
  if (setStart) {
    665c:	cmp.w	r8, #0
    6660:	beq.n	6664 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x70>
    m_allocSearchStart = endCluster;
    6662:	str	r5, [r6, #12]
    6664:	mvn.w	r2, #4026531840	; 0xf0000000
    6668:	mov	r1, r5
    666a:	mov	r0, r6
    666c:	bl	6508 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    6670:	mov	r4, r0
    6672:	cmp	r0, #0
    6674:	beq.n	6652 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    6676:	cmp	r7, r5
    6678:	bcc.n	6680 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8c>
    667a:	b.n	6696 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    667c:	cmp	r5, r7
    667e:	bls.n	6696 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    if (!fatPut(endCluster - 1, endCluster)) {
    6680:	add.w	r8, r5, #4294967295
    6684:	mov	r2, r5
    6686:	mov	r1, r8
    6688:	mov	r0, r6
    668a:	bl	6508 <FatPartition::fatPut(unsigned long, unsigned long)>
    668e:	mov	r5, r8
    6690:	cmp	r0, #0
    6692:	bne.n	667c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x88>
    6694:	b.n	6652 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    6696:	str.w	r7, [sl]
  return true;
    669a:	b.n	6654 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x60>

0000669c <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    669c:	push	{r4, r5, r6, lr}
    669e:	mov	r5, r0
    66a0:	sub	sp, #8
    66a2:	mov	r4, r1
    66a4:	b.n	66bc <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    66a6:	bl	6508 <FatPartition::fatPut(unsigned long, unsigned long)>
    66aa:	cbz	r0, 66d2 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    66ac:	ldr	r3, [r5, #12]
    66ae:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    66b0:	itt	cc
    66b2:	addcc.w	r4, r4, #4294967295
    66b6:	strcc	r4, [r5, #12]
    }
    cluster = next;
    66b8:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    66ba:	cbz	r6, 66d4 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    66bc:	add	r2, sp, #4
    66be:	mov	r1, r4
    66c0:	mov	r0, r5
    66c2:	bl	6498 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    66c6:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    66c8:	mov	r1, r4
    66ca:	mov.w	r2, #0
    66ce:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    66d0:	bge.n	66a6 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    66d2:	movs	r0, #0
}
    66d4:	add	sp, #8
    66d6:	pop	{r4, r5, r6, pc}

000066d8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    66d8:	push	{r3, r4, r5, r6, r7, lr}
    66da:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    66dc:	movs	r3, #0
  m_allocSearchStart = 1;
    66de:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    66e0:	mov.w	r0, #4294967295
    66e4:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    66e6:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    66e8:	str	r4, [r4, #40]	; 0x28
    66ea:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    66ee:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    66f0:	strb.w	r3, [r4, #36]	; 0x24
    66f4:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    66f8:	str	r0, [r4, #44]	; 0x2c
    66fa:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    66fe:	mov	r5, r2
    6700:	cbz	r2, 673a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    6702:	cmp	r2, #4
    6704:	bls.n	670a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6706:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6708:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    670a:	add.w	r6, r4, #36	; 0x24
    670e:	mov	r2, r3
    6710:	mov	r1, r3
    6712:	mov	r0, r6
    6714:	bl	641c <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    6718:	add.w	r5, r5, #268435456	; 0x10000000
    671c:	subs	r5, #1
    671e:	lsls	r5, r5, #4
    6720:	add.w	r3, r0, #446	; 0x1be
    6724:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6726:	cmp	r0, #0
    6728:	beq.n	6706 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    672a:	ldrb	r1, [r2, #4]
    672c:	cmp	r1, #0
    672e:	beq.n	6706 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6730:	ldrb	r3, [r3, r5]
    6732:	lsls	r3, r3, #25
    6734:	bne.n	6706 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6736:	ldr	r5, [r2, #8]
    6738:	b.n	673e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    673a:	add.w	r6, r4, #36	; 0x24
    673e:	mov	r0, r6
    6740:	movs	r2, #0
    6742:	mov	r1, r5
    6744:	bl	641c <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6748:	cmp	r0, #0
    674a:	beq.n	6706 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    674c:	ldrb	r3, [r0, #16]
    674e:	cmp	r3, #2
    6750:	bne.n	6706 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6752:	ldrh.w	r3, [r0, #11]
    6756:	cmp.w	r3, #512	; 0x200
    675a:	bne.n	6706 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    675c:	ldrb	r6, [r0, #13]
    675e:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6760:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6762:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6764:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6766:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6768:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    676a:	beq.n	678c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    676c:	movs	r2, #1
    676e:	mov	r1, r2
    6770:	b.n	6774 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    6772:	mov	r2, r3
    6774:	lsls	r1, r1, #1
    6776:	uxtb	r1, r1
    6778:	adds	r3, r2, #1
    677a:	cmp	r6, r1
    677c:	uxtb	r3, r3
    677e:	beq.n	678a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    6780:	cmp	r3, #9
    6782:	bne.n	6772 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    6784:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6786:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6788:	pop	{r3, r4, r5, r6, r7, pc}
    678a:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    678c:	ldrh	r1, [r0, #22]
    678e:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6790:	cbnz	r1, 6796 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    6792:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6794:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6796:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6798:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    679c:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    679e:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    67a0:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    67a2:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    67a6:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    67aa:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    67ae:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    67b0:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    67b4:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    67b6:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    67b8:	cbnz	r1, 67bc <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    67ba:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    67bc:	subs	r5, r5, r3
    67be:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    67c0:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    67c4:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    67c8:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    67ca:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    67cc:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    67ce:	bls.n	67e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    67d0:	movw	r3, #65524	; 0xfff4
    67d4:	cmp	r2, r3
    67d6:	ittet	hi
    67d8:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    67da:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    67dc:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    67de:	movhi	r3, #32
    67e0:	strb	r3, [r4, #7]
  }
  return true;
    67e2:	movs	r0, #1
    67e4:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    67e6:	movs	r3, #12
    67e8:	strb	r3, [r4, #7]
    67ea:	b.n	6706 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>

000067ec <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    67ec:	cmp	r1, #4
    67ee:	bls.n	680a <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    67f0:	cmp	r1, #10
    67f2:	bls.n	6802 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    67f4:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    67f6:	itte	ls
    67f8:	addls.w	r1, r0, r1, lsl #1
    67fc:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    67fe:	movhi	r0, #0
}
    6800:	bx	lr
    6802:	add.w	r1, r0, r1, lsl #1
    6806:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    6808:	bx	lr
    680a:	add.w	r1, r0, r1, lsl #1
    680e:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    6812:	bx	lr

00006814 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    6814:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    6818:	ldrb	r3, [r0, #0]
    681a:	cmp	r3, #32
    681c:	bne.n	6826 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    681e:	ldrb.w	r3, [r0, #1]!
    6822:	cmp	r3, #32
    6824:	beq.n	681e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    6826:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    6828:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    682a:	cmp	r3, #0
    682c:	beq.w	6a3e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    6830:	cmp	r3, #47	; 0x2f
    6832:	beq.n	6894 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6834:	cmp	r3, #92	; 0x5c
    6836:	beq.n	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6838:	sub.w	r4, r3, #34	; 0x22
    683c:	uxtb	r4, r4
    683e:	cmp	r4, #29
    6840:	bls.n	6884 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    6842:	ldr.w	lr, [pc, #536]	; 6a5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    6846:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6848:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    684a:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    684c:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6850:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6852:	beq.n	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6854:	cmp	r5, #94	; 0x5e
    6856:	bhi.n	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6858:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    685c:	sub.w	r5, r3, #34	; 0x22
    6860:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6862:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    6864:	cmp	r3, #0
    6866:	beq.w	6a10 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    686a:	cmp	r3, #47	; 0x2f
    686c:	beq.n	6896 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    686e:	cmp	r3, #92	; 0x5c
    6870:	lsr.w	r7, lr, r5
    6874:	beq.n	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6876:	cmp	r5, #29
    6878:	bhi.n	684a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    687a:	lsls	r7, r7, #31
    687c:	bpl.n	684a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    687e:	movs	r0, #0
    6880:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6884:	ldr	r5, [pc, #468]	; (6a5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    6886:	lsr.w	r4, r5, r4
    688a:	lsls	r4, r4, #31
    688c:	bpl.n	6842 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    688e:	movs	r0, #0
    6890:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6894:	movs	r4, #0
    6896:	adds	r7, r0, r4
    6898:	mov	r6, r7
    689a:	mov	r5, r4
    689c:	movs	r3, #47	; 0x2f
    689e:	b.n	68a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    68a0:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    68a4:	adds	r5, #1
    68a6:	cmp	r3, #32
    68a8:	beq.n	68a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    68aa:	cmp	r3, #47	; 0x2f
    68ac:	beq.n	68a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    68ae:	add	r5, r0
    68b0:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    68b2:	cbz	r4, 68c8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    68b4:	mov	r2, r7
    c = path[len - 1];
    68b6:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    68ba:	cmp	r3, #46	; 0x2e
    68bc:	beq.n	68c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    68be:	cmp	r3, #32
    68c0:	bne.w	6a16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    68c4:	subs	r4, #1
    68c6:	bne.n	68b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    68c8:	mov.w	r5, #4294967295
    68cc:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    68ce:	str	r3, [r1, #4]
    68d0:	add.w	r6, r1, #23
    68d4:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    68d8:	movs	r2, #32
    68da:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    68de:	cmp	r3, r6
    68e0:	bne.n	68da <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    68e2:	subs	r6, r0, #1
    68e4:	movs	r2, #0
    68e6:	b.n	68ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    68e8:	adds	r2, #1
    68ea:	ldrb.w	r3, [r6, #1]!
    68ee:	cmp	r3, #46	; 0x2e
    68f0:	beq.n	68e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    68f2:	cmp	r3, #32
    68f4:	beq.n	68e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    68f6:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    68fa:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    68fc:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6900:	beq.n	691c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    6902:	ldrb	r7, [r0, r5]
    6904:	cmp	r7, #46	; 0x2e
    6906:	add.w	r6, r0, r5
    690a:	bne.n	6916 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    690c:	b.n	691c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    690e:	ldrb.w	r7, [r6, #-1]!
    6912:	cmp	r7, #46	; 0x2e
    6914:	beq.n	691c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    6916:	adds.w	r5, r5, #4294967295
    691a:	bcs.n	690e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    691c:	cmp	r2, r4
    691e:	mov.w	r9, #0
    6922:	bge.w	6a48 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    6926:	mov	r6, r9
    6928:	mov	sl, r9
    692a:	movs	r7, #7
    692c:	mov.w	r8, #8
    6930:	b.n	697e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6932:	cmp	r3, #46	; 0x2e
    6934:	beq.n	69c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    6936:	cmp	r3, #34	; 0x22
    6938:	beq.n	6952 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    693a:	cmp	r3, #124	; 0x7c
    693c:	beq.n	6952 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    693e:	sub.w	lr, r3, #42	; 0x2a
    6942:	cmp.w	lr, #5
    6946:	bls.n	69da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6948:	sub.w	lr, r3, #58	; 0x3a
    694c:	cmp.w	lr, #5
    6950:	bhi.n	6a04 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6952:	cmp	r5, r2
    6954:	beq.n	69ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6956:	cmp	r7, r6
    6958:	bcc.n	69ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    695a:	mov.w	ip, #0
      c = '_';
    695e:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6960:	add.w	lr, r6, #1
    6964:	add.w	fp, r1, r6
    6968:	uxtb.w	r6, lr
      if (i < 7) {
    696c:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    696e:	strb.w	r3, [fp, #13]
      if (i < 7) {
    6972:	bhi.n	6976 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    6974:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6976:	adds	r2, #1
    6978:	cmp	r2, r4
    697a:	bge.n	698c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    697c:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    697e:	cmp	r3, #32
    6980:	bne.n	6932 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6982:	adds	r2, #1
    6984:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    6986:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    698a:	blt.n	697c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    698c:	ldrb	r3, [r1, #13]
    698e:	cmp	r3, #32
    6990:	beq.w	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    6994:	cmp.w	ip, #0
    6998:	beq.n	6a2a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    699a:	tst.w	sl, r9
    699e:	it	ne
    69a0:	movne.w	r9, #2
    69a4:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    69a8:	movs	r0, #1
    69aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    69ae:	cmp	r7, #10
    69b0:	beq.n	6a22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    69b2:	cmp	r5, r2
    69b4:	blt.n	6a22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    69b6:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    69b8:	movs	r7, #10
      i = 8;    // Place for extension.
    69ba:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    69bc:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    69c0:	mov.w	ip, #0
    69c4:	b.n	6976 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    69c6:	cmp	r5, r2
    69c8:	bne.n	6982 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    69ca:	cmp	r7, #10
    69cc:	beq.n	6a22 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    69ce:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    69d0:	movs	r7, #10
      i = 8;    // Place for extension.
    69d2:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    69d4:	mov.w	r8, #16
    69d8:	b.n	6976 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    69da:	cmp	r3, #45	; 0x2d
    69dc:	bne.n	6952 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    69de:	sub.w	lr, r3, #33	; 0x21
    69e2:	cmp.w	lr, #93	; 0x5d
    69e6:	bhi.n	6952 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    69e8:	cmp	r5, r2
    69ea:	beq.n	69ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    69ec:	cmp	r7, r6
    69ee:	bcc.n	69ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    69f0:	sub.w	lr, r3, #97	; 0x61
    69f4:	cmp.w	lr, #25
    69f8:	bhi.n	6a4c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    69fa:	subs	r3, #32
    69fc:	uxtb	r3, r3
        lc |= bit;
    69fe:	orr.w	r9, r8, r9
    6a02:	b.n	6960 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    6a04:	sub.w	lr, r3, #91	; 0x5b
    6a08:	cmp.w	lr, #2
    6a0c:	bls.n	6952 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6a0e:	b.n	69de <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6a10:	str	r7, [r2, #0]
    6a12:	adds	r7, r0, r4
    6a14:	b.n	68b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    6a16:	cmp	r4, #255	; 0xff
    6a18:	bgt.w	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6a1c:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    6a1e:	mov	r3, r4
    6a20:	b.n	68ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6a22:	ldrb	r3, [r1, #13]
    6a24:	cmp	r3, #32
    6a26:	beq.w	687e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6a2a:	ldrb	r3, [r1, #12]
    6a2c:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6a2e:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    6a30:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    6a32:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6a34:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    6a36:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    6a38:	strb	r2, [r3, #14]
    6a3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6a3e:	str	r0, [r2, #0]
    6a40:	mov	r4, r3
    6a42:	mov.w	r5, #4294967295
    6a46:	b.n	68ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6a48:	mov	sl, r9
    6a4a:	b.n	698c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    6a4c:	sub.w	lr, r3, #65	; 0x41
    6a50:	cmp.w	lr, #25
        uc |= bit;
    6a54:	it	ls
    6a56:	orrls.w	sl, r8, sl
    6a5a:	b.n	6960 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    6a5c:	.word	0x35000101

00006a60 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6a60:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6a64:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6a66:	mov	r6, r1
    6a68:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6a6a:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6a6e:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6a72:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    6a76:	ldr	r0, [r6, #4]
    6a78:	ldr	r1, [r6, #8]
    6a7a:	add.w	r3, r8, r0
    6a7e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6a80:	cbz	r0, 6a94 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    6a82:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6a84:	ldrb.w	r2, [r1], #1
    6a88:	add.w	r3, r3, r3, lsl #5
    6a8c:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6a8e:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6a90:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6a92:	bne.n	6a84 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    6a94:	cmp	r7, #3
    6a96:	it	cs
    6a98:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6a9a:	adds	r2, r7, #4
    6a9c:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    6a9e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6aa2:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6aa4:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6aa6:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6aa8:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6aaa:	ite	ls
    6aac:	addls	r1, #48	; 0x30
    6aae:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6ab0:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    6ab2:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6ab6:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6ab8:	bcc.n	6a9e <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6aba:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6abc:	movs	r1, #0
    6abe:	strb.w	r9, [r3, #13]
    6ac2:	mov	r0, r4
    6ac4:	bl	5ff8 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    6ac8:	movs	r1, #1
    6aca:	mov	r0, r4
    6acc:	bl	5fb8 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6ad0:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    6ad2:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6ad4:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    6ad6:	cbz	r0, 6b04 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6ad8:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6adc:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6ade:	cmp.w	lr, #0
    6ae2:	beq.n	6b10 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6ae4:	ldrb	r3, [r3, #11]
    6ae6:	lsls	r3, r3, #28
    6ae8:	bmi.n	6ac8 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    6aea:	bl	c680 <memcmp>
    6aee:	cmp	r0, #0
    6af0:	bne.n	6ac8 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    6af2:	add.w	r8, r8, #1
    6af6:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    6afa:	cmp.w	r8, #100	; 0x64
    6afe:	bne.n	6a76 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    6b00:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    6b04:	ldrb	r0, [r4, #1]
    6b06:	clz	r0, r0
    6b0a:	lsrs	r0, r0, #5
    6b0c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    6b10:	movs	r0, #1
    6b12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b16:	nop

00006b18 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6b18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6b1c:	ldrb	r4, [r1, #0]
    6b1e:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6b22:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6b24:	beq.n	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6b26:	ldrb	r4, [r0, #0]
    6b28:	cbz	r4, 6b32 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    6b2a:	movs	r0, #0
}
    6b2c:	add	sp, #52	; 0x34
    6b2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6b32:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    6b34:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6b38:	lsls	r4, r4, #30
    6b3a:	bne.n	6bc2 <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    6b3c:	mov.w	r8, #1
    6b40:	mov	r6, r1
    6b42:	mov	fp, r2
    6b44:	str	r0, [sp, #36]	; 0x24
    6b46:	movs	r1, #0
    6b48:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    6b4a:	mov	r7, r1
    6b4c:	str	r3, [sp, #28]
    6b4e:	bl	5ff8 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6b52:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    6b56:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6b58:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    6b5a:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6b5c:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    6b5e:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6b60:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    6b62:	movs	r1, #1
    6b64:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6b66:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    6b68:	bl	5fb8 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6b6c:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    6b70:	mov	r3, r0
    6b72:	cmp	r0, #0
    6b74:	beq.w	6c90 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6b78:	ldrb	r2, [r0, #0]
    6b7a:	cmp	r2, #229	; 0xe5
    6b7c:	beq.n	6bf4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    6b7e:	cmp	r2, #0
    6b80:	beq.n	6bf4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    6b82:	cmp	r4, r8
    6b84:	it	cc
    6b86:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6b88:	cmp	r2, #46	; 0x2e
    6b8a:	beq.n	6bee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6b8c:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6b8e:	cmp	r1, #15
    6b90:	beq.n	6c10 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    6b92:	and.w	r1, r1, #8
    6b96:	and.w	r2, r1, #255	; 0xff
    6b9a:	cbnz	r1, 6bee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    6b9c:	cmp.w	r9, #0
    6ba0:	bne.w	6e68 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6ba4:	mov	r0, r3
    6ba6:	movs	r2, #11
    6ba8:	ldr	r1, [sp, #16]
    6baa:	bl	c680 <memcmp>
    6bae:	cmp	r0, #0
    6bb0:	bne.n	6b62 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    6bb2:	ldrb.w	r3, [fp]
    6bb6:	lsls	r0, r3, #31
    6bb8:	bpl.w	6e90 <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    6bbc:	movs	r3, #1
    6bbe:	str	r3, [sp, #20]
    6bc0:	b.n	6b62 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6bc2:	ldr	r5, [pc, #724]	; (6e98 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    6bc4:	add.w	r4, sl, #12
    6bc8:	umull	r4, r8, r5, r4
    6bcc:	mov.w	r8, r8, lsr #2
    6bd0:	add.w	r8, r8, #1
    6bd4:	uxtb.w	r8, r8
    6bd8:	b.n	6b40 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    6bda:	ldr	r1, [sp, #12]
    6bdc:	subs	r1, #1
    6bde:	uxtb	r1, r1
    6be0:	cmp	r2, r1
    6be2:	str	r1, [sp, #12]
    6be4:	bne.n	6bee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6be6:	ldrb	r2, [r3, #13]
    6be8:	ldr	r1, [sp, #24]
    6bea:	cmp	r1, r2
    6bec:	beq.n	6c26 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6bee:	mov.w	r9, #0
    6bf2:	b.n	6b62 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6bf4:	cmp	r4, #0
    6bf6:	it	eq
    6bf8:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    6bfa:	cmp	r4, r8
        freeFound++;
    6bfc:	itt	cc
    6bfe:	addcc	r4, #1
    6c00:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6c02:	cmp	r2, #0
    6c04:	beq.n	6c98 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6c06:	cmp	r2, #229	; 0xe5
    6c08:	bne.n	6b88 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6c0a:	mov.w	r9, #0
    6c0e:	b.n	6b62 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    6c10:	cmp.w	r9, #0
    6c14:	bne.n	6bda <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    6c16:	lsls	r5, r2, #25
    6c18:	bpl.n	6b62 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6c1a:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    6c1e:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6c20:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    6c24:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6c26:	ldr	r2, [sp, #12]
    6c28:	subs	r2, #1
    6c2a:	add.w	r5, r2, r2, lsl #1
    6c2e:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    6c32:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6c34:	mov	r2, r5
      if (k >= len) {
    6c36:	bls.n	6bee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6c38:	add.w	r1, r5, #13
    6c3c:	str.w	r9, [sp, #32]
    6c40:	mov	r9, r1
    6c42:	b.n	6c6c <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6c44:	ldr.w	r0, [fp, #8]
    6c48:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6c4a:	cmp.w	ip, #25
    6c4e:	it	ls
    6c50:	addls	r1, #32
    6c52:	sub.w	r0, r2, #65	; 0x41
    6c56:	it	ls
    6c58:	uxtbls	r1, r1
    6c5a:	cmp	r0, #25
    6c5c:	itt	ls
    6c5e:	addls	r2, #32
    6c60:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6c62:	cmp	r2, r1
    6c64:	bne.n	6bee <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    6c66:	cmp	lr, r9
    6c68:	beq.n	6cf0 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    6c6a:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    6c6c:	subs	r1, r2, r5
    6c6e:	uxtb	r1, r1
    6c70:	mov	r0, r3
    6c72:	bl	67ec <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6c76:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6c78:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6c7a:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6c7e:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6c82:	beq.w	6e5a <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6c86:	cmp	r0, #255	; 0xff
    6c88:	bls.n	6c44 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6c8a:	mov.w	r9, #0
    6c8e:	b.n	6b62 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    6c90:	ldrb	r3, [r6, #1]
    6c92:	cmp	r3, #0
    6c94:	bne.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6c98:	ldr	r2, [sp, #28]
    6c9a:	mov	r3, r2
    6c9c:	lsls	r2, r3, #22
    6c9e:	bpl.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6ca2:	and.w	r3, r3, #3
    6ca6:	subs	r3, #1
    6ca8:	cmp	r3, #1
    6caa:	bhi.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    6cae:	cmp	r4, #0
    6cb0:	it	eq
    6cb2:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6cb4:	cmp	r4, r8
    6cb6:	bcc.n	6cc0 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    6cb8:	b.n	6cf6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6cba:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6cbc:	cmp	r8, r4
    6cbe:	bls.n	6cf6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    6cc0:	movs	r1, #0
    6cc2:	mov	r0, r6
    6cc4:	bl	5fb8 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6cc8:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    6cca:	cmp	r0, #0
    6ccc:	bne.n	6cba <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    6cce:	ldrb	r3, [r6, #1]
    6cd0:	cbz	r3, 6cdc <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    6cd2:	b.n	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6cd4:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    6cd6:	ldrb	r3, [r3, #4]
    6cd8:	cmp	r3, #1
    6cda:	bhi.n	6cf6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6cdc:	cmp	r8, r4
    6cde:	bls.n	6cf6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6ce0:	mov	r0, r6
    6ce2:	bl	5b60 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    6ce6:	adds	r4, #16
    6ce8:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6cea:	cmp	r0, #0
    6cec:	bne.n	6cd4 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    6cee:	b.n	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6cf0:	ldr.w	r9, [sp, #32]
    6cf4:	b.n	6b62 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    6cf6:	ldr	r3, [sp, #20]
    6cf8:	cbz	r3, 6d08 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    6cfa:	mov	r1, fp
    6cfc:	mov	r0, r6
    6cfe:	bl	6a60 <FatFile::lfnUniqueSfn(fname_t*)>
    6d02:	cmp	r0, #0
    6d04:	beq.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    6d08:	lsls	r1, r7, #5
    6d0a:	mov	r0, r6
    6d0c:	bl	5ff8 <FatFile::seekSet(unsigned long)>
    6d10:	cmp	r0, #0
    6d12:	beq.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    6d16:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    6d1a:	ands.w	r9, r8, #255	; 0xff
    6d1e:	beq.n	6dd4 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6d20:	orr.w	r4, r9, #64	; 0x40
    6d24:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6d26:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    6d28:	movs	r7, #0
    6d2a:	movs	r1, #0
    6d2c:	mov	r0, r6
    6d2e:	bl	5fb8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6d32:	cmp	r0, #0
    6d34:	beq.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6d38:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6d3a:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6d3e:	cmp	r9, r5
    6d40:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6d44:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6d48:	ite	ne
    6d4a:	movne	r1, r5
    6d4c:	moveq	r1, r4
    6d4e:	strb.w	r3, [r2, #36]	; 0x24
    6d52:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6d56:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    6d5a:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6d5c:	strb	r1, [r0, #0]
    6d5e:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    6d62:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6d64:	ldrb.w	r8, [lr, #1]!
    6d68:	lsrs	r2, r3, #1
    6d6a:	orr.w	r3, r2, r3, lsl #7
    6d6e:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6d72:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6d74:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6d76:	bne.n	6d64 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6d78:	and.w	r1, r1, #31
    6d7c:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6d7e:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6d80:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6d84:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6d88:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6d8a:	add.w	r2, r1, r2, lsl #2
    6d8e:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    6d90:	movs	r3, #0
    6d92:	b.n	6db4 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6d94:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6d96:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6d9a:	bls.n	6dc6 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6d9c:	cmp	r3, #10
    6d9e:	ite	ls
    6da0:	strhls	r1, [r0, #0]
    6da2:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6da4:	adds	r3, #1
    6da6:	uxtb	r3, r3
    6da8:	cmp	r3, #13
    6daa:	add.w	r2, r2, #1
    6dae:	add.w	r0, r0, #2
    6db2:	beq.n	6dcc <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6db4:	cmp	sl, r2
    6db6:	bhi.n	6d94 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    6db8:	ite	ne
    6dba:	movne.w	r1, #4294967295
    6dbe:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6dc0:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6dc2:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6dc4:	bhi.n	6d9c <FatFile::open(FatFile*, fname_t*, int)+0x284>
    6dc6:	strh.w	r1, [r0, #-3]
    6dca:	b.n	6da4 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6dcc:	subs	r5, #1
    6dce:	ands.w	r5, r5, #255	; 0xff
    6dd2:	bne.n	6d2a <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    6dd4:	movs	r1, #0
    6dd6:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6dd8:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    6dda:	bl	5fb8 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6dde:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    6de2:	mov	r4, r0
    6de4:	cmp	r0, #0
    6de6:	beq.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    6dea:	movs	r2, #32
    6dec:	movs	r1, #0
    6dee:	bl	c7ac <memset>
  memcpy(dir->name, fname->sfn, 11);
    6df2:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    6df4:	ldr	r2, [pc, #164]	; (6e9c <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    6df6:	ldr.w	r1, [r3, #13]!
    6dfa:	ldr	r0, [r3, #4]
    6dfc:	str	r0, [r4, #4]
    6dfe:	str	r1, [r4, #0]
    6e00:	ldrh	r1, [r3, #8]
    6e02:	ldrb	r3, [r3, #10]
    6e04:	strb	r3, [r4, #10]
    6e06:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6e08:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    6e0c:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6e0e:	and.w	r3, r3, #24
    6e12:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    6e14:	cbz	r7, 6e3a <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    6e16:	add.w	r2, sp, #43	; 0x2b
    6e1a:	add.w	r1, sp, #46	; 0x2e
    6e1e:	add	r0, sp, #44	; 0x2c
    6e20:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    6e22:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    6e26:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    6e2a:	ldrb.w	r1, [sp, #43]	; 0x2b
    6e2e:	strb	r1, [r4, #13]
    6e30:	strh	r3, [r4, #16]
    6e32:	strh	r3, [r4, #18]
    6e34:	strh	r3, [r4, #24]
    6e36:	strh	r2, [r4, #14]
    6e38:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6e3a:	ldr	r2, [r6, #8]
    6e3c:	ldrb.w	r3, [r2, #36]	; 0x24
    6e40:	orr.w	r3, r3, #1
    6e44:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6e48:	str.w	r9, [sp]
    6e4c:	ldr	r3, [sp, #28]
    6e4e:	ldr	r0, [sp, #36]	; 0x24
    6e50:	mov	r2, r5
    6e52:	mov	r1, r6
    6e54:	bl	608c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6e58:	b.n	6b2c <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6e5a:	cmp	r0, #0
    6e5c:	ldr.w	r9, [sp, #32]
    6e60:	it	ne
    6e62:	movne.w	r9, #0
    6e66:	b.n	6b62 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6e68:	ldr	r1, [sp, #12]
    6e6a:	cmp	r1, #1
    6e6c:	bne.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6e70:	subs	r4, r3, #1
    6e72:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6e74:	ldrb.w	r0, [r4, #1]!
    6e78:	lsrs	r1, r2, #1
    6e7a:	orr.w	r2, r1, r2, lsl #7
    6e7e:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6e82:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6e84:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6e86:	bne.n	6e74 <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6e88:	ldr	r3, [sp, #24]
    6e8a:	cmp	r3, r2
    6e8c:	bne.w	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6e90:	ldr	r3, [sp, #28]
    6e92:	lsls	r1, r3, #20
    6e94:	bpl.n	6e48 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    6e96:	b.n	6b2a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6e98:	.word	0x4ec4ec4f
    6e9c:	.word	0x2001dd00

00006ea0 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6ea0:	push	{r4, lr}
    6ea2:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    6ea4:	ldr	r0, [r0, #56]	; 0x38
    6ea6:	cbz	r0, 6eb4 <FsBaseFile::close()+0x14>
    6ea8:	bl	5ca8 <FatFile::close()>
    6eac:	cbz	r0, 6eb4 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    6eae:	movs	r3, #0
    6eb0:	str	r3, [r4, #56]	; 0x38
    return true;
    6eb2:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    6eb4:	ldr	r0, [r4, #60]	; 0x3c
    6eb6:	cbz	r0, 6ec4 <FsBaseFile::close()+0x24>
    6eb8:	bl	45b8 <ExFatFile::close()>
    6ebc:	cbz	r0, 6ec4 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    6ebe:	movs	r3, #0
    6ec0:	str	r3, [r4, #60]	; 0x3c
    6ec2:	pop	{r4, pc}
    return true;
  }
  return false;
    6ec4:	movs	r0, #0
}
    6ec6:	pop	{r4, pc}

00006ec8 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    6ec8:	cbz	r1, 6f3e <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    6eca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ece:	mov	r4, r1
    6ed0:	mov	r5, r0
    6ed2:	mov	r8, r3
    6ed4:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    6ed6:	bl	6ea0 <FsBaseFile::close()>
  if (vol->m_fVol) {
    6eda:	ldr.w	r6, [r4, #1144]	; 0x478
    6ede:	cbz	r6, 6f0c <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    6ee0:	mov	r1, r5
    6ee2:	movs	r0, #36	; 0x24
    6ee4:	bl	700c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6ee8:	movs	r1, #0
    6eea:	strb	r1, [r0, #0]
    6eec:	strb	r1, [r0, #1]
    6eee:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6ef0:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    6ef4:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6ef6:	mov	r3, r8
    6ef8:	mov	r2, r7
    6efa:	bl	5dd8 <FatFile::open(FatVolume*, char const*, int)>
    6efe:	cbz	r0, 6f06 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    6f00:	movs	r0, #1
    6f02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    6f06:	str	r0, [r5, #56]	; 0x38
    return false;
    6f08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    6f0c:	ldr.w	r3, [r4, #1148]	; 0x47c
    6f10:	cbz	r3, 6f42 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    6f12:	mov	r1, r5
    6f14:	movs	r0, #56	; 0x38
    6f16:	bl	700c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6f1a:	strb.w	r6, [r0, #49]	; 0x31
    6f1e:	strb.w	r6, [r0, #50]	; 0x32
    6f22:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6f26:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    6f2a:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6f2c:	mov	r3, r8
    6f2e:	mov	r2, r7
    6f30:	bl	4e5c <ExFatFile::open(ExFatVolume*, char const*, int)>
    6f34:	cmp	r0, #0
    6f36:	bne.n	6f00 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    6f38:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    6f3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6f3e:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    6f40:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6f42:	movs	r0, #0
    6f44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006f48 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6f48:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6f4a:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6f4c:	mov	r5, r0
  m_blockDev = blockDev;
    6f4e:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    6f52:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    6f56:	mov	r1, r0
    6f58:	mov.w	r0, #1144	; 0x478
    6f5c:	bl	700c <operator new(unsigned int, unsigned long*)>
    6f60:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    6f62:	str	r6, [r0, #4]
    invalidate();
    6f64:	bl	4e8c <FsCache::invalidate()>
    6f68:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    6f6c:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    6f70:	bl	4e8c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    6f74:	strb.w	r6, [r4, #1084]	; 0x43c
    6f78:	strb.w	r6, [r4, #1137]	; 0x471
    6f7c:	strb.w	r6, [r4, #1138]	; 0x472
    6f80:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6f84:	ldr.w	r1, [r5, #1152]	; 0x480
    6f88:	str.w	r4, [r5, #1148]	; 0x47c
    6f8c:	mov	r0, r4
    6f8e:	movs	r2, #1
    6f90:	bl	501c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    6f94:	cbnz	r0, 6fd2 <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6f96:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6f98:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6f9a:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    6f9e:	mov.w	r0, #1120	; 0x460
    6fa2:	bl	700c <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    6fa6:	strb	r6, [r0, #7]
    6fa8:	strb.w	r6, [r0, #1084]	; 0x43c
    6fac:	strb.w	r6, [r0, #1085]	; 0x43d
    6fb0:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6fb4:	movs	r2, #1
    6fb6:	ldr.w	r1, [r5, #1152]	; 0x480
    6fba:	str.w	r0, [r5, #1144]	; 0x478
    6fbe:	mov	r4, r0
    6fc0:	bl	66d8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6fc4:	cbnz	r0, 6ff0 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    6fc6:	ldr	r3, [pc, #64]	; (7008 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    6fc8:	movs	r0, #0
    6fca:	str	r0, [r3, #0]
  m_fVol = nullptr;
    6fcc:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    6fd0:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6fd2:	add.w	r6, r4, #1088	; 0x440
    6fd6:	mov	r0, r6
    6fd8:	bl	45b8 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    6fdc:	mov	r1, r4
    6fde:	mov	r0, r6
    6fe0:	bl	45cc <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6fe4:	cmp	r0, #0
    6fe6:	beq.n	6f96 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    6fe8:	ldr	r3, [pc, #28]	; (7008 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    6fea:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6fec:	str	r5, [r3, #0]
  return true;
    6fee:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6ff0:	addw	r6, r4, #1084	; 0x43c
    6ff4:	mov	r0, r6
    6ff6:	bl	5ca8 <FatFile::close()>
    return m_vwd.openRoot(this);
    6ffa:	mov	r1, r4
    6ffc:	mov	r0, r6
    6ffe:	bl	5de8 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    7002:	cmp	r0, #0
    7004:	bne.n	6fe8 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    7006:	b.n	6fc6 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    7008:	.word	0x2001dd04

0000700c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    700c:	mov	r0, r1
    700e:	bx	lr

00007010 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    7010:	ldrb	r0, [r0, #19]
    7012:	bx	lr

00007014 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    7014:	ldrb	r0, [r0, #21]
    7016:	bx	lr

00007018 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    7018:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    701a:	ldr	r4, [r0, #0]
    701c:	ldr	r4, [r4, #12]
    701e:	movs	r3, #1
    7020:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    7022:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7026:	bx	ip

00007028 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    7028:	ldrb	r0, [r0, #22]
    702a:	bx	lr

0000702c <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    702c:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    702e:	ldr	r4, [r0, #0]
    7030:	ldr	r4, [r4, #28]
    7032:	movs	r3, #1
    7034:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    7036:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    703a:	bx	ip

0000703c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    703c:	bx	lr
    703e:	nop

00007040 <SdSpiCard::~SdSpiCard()>:
    7040:	push	{r4, lr}
    7042:	movs	r1, #24
    7044:	mov	r4, r0
    7046:	bl	a7f8 <operator delete(void*, unsigned int)>
    704a:	mov	r0, r4
    704c:	pop	{r4, pc}
    704e:	nop

00007050 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7050:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7054:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7056:	ldrb	r1, [r0, #16]
    7058:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    705a:	mov	r4, r0
    705c:	mov	r5, r2
    705e:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7060:	beq.n	7072 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    7062:	ldr	r3, [r4, #0]
    7064:	mov	r0, r4
    7066:	ldr	r3, [r3, #20]
    7068:	blx	r3
    706a:	cbnz	r0, 70a4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    706c:	movs	r0, #0
    706e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7072:	ldr	r3, [r0, #12]
    7074:	cmp	r3, r6
    7076:	bne.n	7062 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7078:	movs	r6, #0
    707a:	cbz	r7, 7094 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    707c:	ldr	r3, [r4, #0]
    707e:	mov	r1, r5
    7080:	ldr	r3, [r3, #68]	; 0x44
    7082:	mov	r0, r4
    7084:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7086:	adds	r6, #1
    7088:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    708c:	cmp	r0, #0
    708e:	beq.n	706c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7090:	cmp	r7, r6
    7092:	bne.n	707c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7094:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    7096:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7098:	add	r7, r3
    709a:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    709c:	cbnz	r2, 70ba <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    709e:	movs	r0, #1
    70a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    70a4:	ldr	r3, [r4, #0]
    70a6:	mov	r1, r6
    70a8:	ldr	r3, [r3, #72]	; 0x48
    70aa:	mov	r0, r4
    70ac:	blx	r3
    70ae:	cmp	r0, #0
    70b0:	beq.n	706c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    70b2:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    70b4:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    70b6:	strb	r3, [r4, #16]
    70b8:	b.n	7078 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    70ba:	ldr	r3, [r4, #0]
    70bc:	mov	r0, r4
    70be:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    70c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    70c4:	bx	r3
    70c6:	nop

000070c8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    70c8:	push	{r4, lr}
    70ca:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    70cc:	adds	r0, #4
    70ce:	bl	8678 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    70d2:	ldrb	r0, [r4, #18]
    70d4:	movs	r1, #0
    70d6:	bl	87f8 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    70da:	movs	r3, #1
    70dc:	strb	r3, [r4, #20]
    70de:	pop	{r4, pc}

000070e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    70e0:	push	{r3, r4, r5, lr}
    70e2:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    70e4:	movs	r1, #1
    70e6:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    70e8:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    70ea:	bl	87f8 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    70ee:	mov	r0, r5
    70f0:	movs	r1, #255	; 0xff
    70f2:	bl	878c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    70f6:	mov	r0, r5
    70f8:	bl	8708 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    70fc:	movs	r3, #0
    70fe:	strb	r3, [r4, #20]
    7100:	pop	{r3, r4, r5, pc}
    7102:	nop

00007104 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7104:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    7106:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7108:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    710a:	cbnz	r7, 7110 <SdSpiCard::isBusy()+0xc>
    710c:	bl	70c8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    7110:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7112:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7114:	mov	r0, r5
    7116:	bl	8750 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    711a:	cmp	r0, #255	; 0xff
    711c:	add.w	r3, r4, #4294967295
    7120:	beq.n	713e <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    7122:	ands.w	r4, r3, #255	; 0xff
    7126:	bne.n	7114 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    7128:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    712a:	cbnz	r7, 7130 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    712c:	ldrb	r3, [r6, #20]
    712e:	cbnz	r3, 7134 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    7130:	mov	r0, r4
    7132:	pop	{r3, r4, r5, r6, r7, pc}
    7134:	mov	r0, r6
    7136:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    713a:	mov	r0, r4
    713c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    713e:	movs	r4, #0
    7140:	b.n	712a <SdSpiCard::isBusy()+0x26>
    7142:	nop

00007144 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    7144:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7148:	ldr	r6, [pc, #116]	; (71c0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    714a:	sub	sp, #12
    714c:	ldr	r3, [r6, #0]
    714e:	str	r3, [sp, #0]
	return ret;
    7150:	ldr	r5, [sp, #0]
    7152:	mov	r4, r0
    7154:	mov	r8, r1
    7156:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7158:	uxth	r5, r5
    715a:	adds	r7, r0, #4
    715c:	b.n	716e <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    715e:	ldr	r3, [r6, #0]
    7160:	str	r3, [sp, #4]
	return ret;
    7162:	ldr	r3, [sp, #4]
    7164:	uxth	r3, r3
    7166:	subs	r3, r3, r5
    7168:	cmp.w	r3, #300	; 0x12c
    716c:	bgt.n	7194 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    716e:	mov	r0, r7
    7170:	bl	8750 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7174:	cmp	r0, #255	; 0xff
    7176:	strb	r0, [r4, #21]
    7178:	beq.n	715e <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    717a:	cmp	r0, #254	; 0xfe
    717c:	beq.n	719a <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    717e:	movs	r3, #24
    7180:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7182:	ldrb	r0, [r4, #20]
    7184:	cbz	r0, 718e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7186:	mov	r0, r4
    7188:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    718c:	movs	r0, #0
}
    718e:	add	sp, #12
    7190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7194:	movs	r3, #29
    7196:	strb	r3, [r4, #19]
    7198:	b.n	7182 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    719a:	mov	r2, r9
    719c:	mov	r1, r8
    719e:	mov	r0, r7
    71a0:	bl	876c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    71a4:	strb	r0, [r4, #21]
    71a6:	cbz	r0, 71ae <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    71a8:	movs	r3, #36	; 0x24
    71aa:	strb	r3, [r4, #19]
    71ac:	b.n	7182 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    71ae:	mov	r0, r7
    71b0:	bl	8750 <SdSpiArduinoDriver::receive()>
    71b4:	mov	r0, r7
    71b6:	bl	8750 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    71ba:	movs	r0, #1
    71bc:	b.n	718e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    71be:	nop
    71c0:	.word	0x2001dd64

000071c4 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    71c4:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71c6:	ldr	r5, [pc, #52]	; (71fc <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    71c8:	sub	sp, #12
    71ca:	ldr	r3, [r5, #0]
    71cc:	str	r3, [sp, #0]
	return ret;
    71ce:	ldr	r4, [sp, #0]
    71d0:	mov	r7, r1
    71d2:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    71d4:	uxth	r4, r4
    71d6:	b.n	71e6 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71d8:	ldr	r3, [r5, #0]
    71da:	str	r3, [sp, #4]
	return ret;
    71dc:	ldr	r3, [sp, #4]
    71de:	uxth	r3, r3
    71e0:	subs	r3, r3, r4
    71e2:	cmp	r3, r7
    71e4:	bgt.n	71f6 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    71e6:	mov	r0, r6
    71e8:	bl	8750 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    71ec:	cmp	r0, #255	; 0xff
    71ee:	bne.n	71d8 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    71f0:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    71f2:	add	sp, #12
    71f4:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    71f6:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    71f8:	add	sp, #12
    71fa:	pop	{r4, r5, r6, r7, pc}
    71fc:	.word	0x2001dd64

00007200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7200:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    7204:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7206:	sub	sp, #8
    7208:	mov	r6, r0
    720a:	mov	r8, r1
    720c:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    720e:	cbnz	r3, 7214 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    7210:	bl	70c8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    7214:	cmp.w	r8, #0
    7218:	bne.n	7270 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    721a:	adds	r4, r6, #4
    721c:	mov	r0, r4
    721e:	orr.w	r1, r8, #64	; 0x40
    7222:	bl	878c <SdSpiArduinoDriver::send(unsigned char)>
    7226:	add	r7, sp, #4
    7228:	add	r5, sp, #8
    722a:	ldrb.w	r1, [r5, #-1]!
    722e:	mov	r0, r4
    7230:	bl	878c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    7234:	cmp	r5, r7
    7236:	bne.n	722a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7238:	cmp.w	r8, #0
    723c:	ite	eq
    723e:	moveq	r1, #149	; 0x95
    7240:	movne	r1, #135	; 0x87
    7242:	mov	r0, r4
    7244:	bl	878c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7248:	mov	r0, r4
    724a:	bl	8750 <SdSpiArduinoDriver::receive()>
    724e:	movs	r5, #11
    7250:	mov	r0, r4
    7252:	bl	8750 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7256:	lsls	r3, r0, #24
    7258:	strb	r0, [r6, #21]
    725a:	bmi.n	7262 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    725c:	add	sp, #8
    725e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7262:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7264:	ands.w	r5, r3, #255	; 0xff
    7268:	bne.n	7250 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    726a:	add	sp, #8
    726c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    7270:	mov.w	r1, #300	; 0x12c
    7274:	mov	r0, r6
    7276:	bl	71c4 <SdSpiCard::waitNotBusy(unsigned short)>
    727a:	b.n	721a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

0000727c <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    727c:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    727e:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7280:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    7282:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7284:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    7286:	blx	r3
  if (cardCommand(CMD58, 0)) {
    7288:	mov	r0, r5
    728a:	movs	r2, #0
    728c:	movs	r1, #58	; 0x3a
    728e:	bl	7200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7292:	cbnz	r0, 72b0 <SdSpiCard::readOCR(unsigned long*)+0x34>
    7294:	adds	r7, r5, #4
    7296:	adds	r4, r6, #4
    7298:	mov	r0, r7
    729a:	bl	8750 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    729e:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    72a2:	cmp	r6, r4
    72a4:	bne.n	7298 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    72a6:	ldrb	r4, [r5, #20]
    72a8:	cbnz	r4, 72c6 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    72aa:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    72ac:	mov	r0, r4
    72ae:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    72b0:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    72b2:	movs	r3, #18
    72b4:	strb	r3, [r5, #19]
    72b6:	cmp	r4, #0
    72b8:	beq.n	72ac <SdSpiCard::readOCR(unsigned long*)+0x30>
    72ba:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    72bc:	movs	r4, #0
    72be:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    72c2:	mov	r0, r4
    72c4:	pop	{r3, r4, r5, r6, r7, pc}
    72c6:	mov	r0, r5
    72c8:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    72cc:	mov	r0, r4
    72ce:	pop	{r3, r4, r5, r6, r7, pc}

000072d0 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    72d0:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    72d2:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    72d4:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    72d6:	mov	r4, r0
    72d8:	mov	r5, r1
    72da:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    72dc:	blx	r3
  if (cardCommand(cmd, 0)) {
    72de:	mov	r1, r5
    72e0:	mov	r0, r4
    72e2:	movs	r2, #0
    72e4:	bl	7200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    72e8:	cbz	r0, 72fc <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    72ea:	movs	r3, #27
    72ec:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    72ee:	ldrb	r0, [r4, #20]
    72f0:	cbz	r0, 72fa <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    72f2:	mov	r0, r4
    72f4:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    72f8:	movs	r0, #0
}
    72fa:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    72fc:	mov	r1, r6
    72fe:	movs	r2, #16
    7300:	mov	r0, r4
    7302:	bl	7144 <SdSpiCard::readData(unsigned char*, unsigned int)>
    7306:	cmp	r0, #0
    7308:	beq.n	72ee <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    730a:	ldrb	r5, [r4, #20]
    730c:	cmp	r5, #0
    730e:	beq.n	72fa <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    7310:	mov	r0, r4
    7312:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7316:	mov	r0, r5
    7318:	pop	{r4, r5, r6, pc}
    731a:	nop

0000731c <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    731c:	mov	r2, r1
    731e:	movs	r1, #9
    7320:	b.w	72d0 <SdSpiCard::readRegister(unsigned char, void*)>

00007324 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    7324:	mov	r2, r1
    7326:	movs	r1, #10
    7328:	b.w	72d0 <SdSpiCard::readRegister(unsigned char, void*)>

0000732c <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    732c:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    732e:	ldr	r3, [r0, #0]
    7330:	ldr	r2, [pc, #140]	; (73c0 <SdSpiCard::sectorCount()+0x94>)
    7332:	ldr	r3, [r3, #52]	; 0x34
    7334:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7336:	sub	sp, #20
    7338:	bne.n	739a <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    733a:	mov	r2, sp
    733c:	movs	r1, #9
    733e:	bl	72d0 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7342:	cbz	r0, 7354 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7344:	ldrb.w	r3, [sp]
    7348:	ands.w	r3, r3, #192	; 0xc0
    734c:	beq.n	7358 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    734e:	cmp	r3, #64	; 0x40
    7350:	beq.n	73a0 <SdSpiCard::sectorCount()+0x74>
    7352:	movs	r0, #0
}
    7354:	add	sp, #20
    7356:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7358:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    735c:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7360:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7364:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7368:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    736c:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7370:	and.w	r4, r4, #3
    7374:	lsls	r4, r4, #1
    7376:	lsls	r2, r2, #2
    7378:	and.w	r3, r3, #3
    737c:	orr.w	r0, r4, r0, lsr #7
    7380:	and.w	r1, r1, #15
    7384:	orr.w	r3, r2, r3, lsl #10
    7388:	add	r0, r1
    738a:	orr.w	r3, r3, r5, lsr #6
    738e:	adds	r3, #1
    7390:	subs	r0, #7
    7392:	lsl.w	r0, r3, r0
    7396:	add	sp, #20
    7398:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    739a:	mov	r1, sp
    739c:	blx	r3
    739e:	b.n	7342 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    73a0:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    73a4:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    73a8:	ldrb.w	r0, [sp, #8]
    73ac:	adds	r2, r3, #1
    73ae:	and.w	r3, r1, #63	; 0x3f
    73b2:	add.w	r3, r2, r3, lsl #16
    73b6:	add.w	r0, r3, r0, lsl #8
    73ba:	lsls	r0, r0, #10
}
    73bc:	add	sp, #20
    73be:	pop	{r4, r5, pc}
    73c0:	.word	0x0000731d

000073c4 <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    73c4:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    73c6:	ldr	r3, [r0, #0]
    73c8:	ldr	r5, [pc, #68]	; (7410 <SdSpiCard::readStart(unsigned long)+0x4c>)
    73ca:	ldr	r3, [r3, #64]	; 0x40
    73cc:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    73ce:	sub	sp, #12
    73d0:	mov	r4, r0
    73d2:	mov	r2, r1
    73d4:	bne.n	7406 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    73d6:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    73d8:	cmp	r0, #3
    sector <<= 9;
    73da:	it	ne
    73dc:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    73de:	movs	r1, #18
    73e0:	mov	r0, r4
    73e2:	bl	7200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    73e6:	cbz	r0, 7400 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    73e8:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73ea:	movs	r3, #12
    73ec:	strb	r3, [r4, #19]
    73ee:	cbnz	r0, 73f4 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    73f0:	add	sp, #12
    73f2:	pop	{r4, r5, pc}
    73f4:	mov	r0, r4
    73f6:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    73fa:	movs	r0, #0
    73fc:	add	sp, #12
    73fe:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    7400:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7402:	add	sp, #12
    7404:	pop	{r4, r5, pc}
    7406:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    7408:	blx	r3
    740a:	ldr	r2, [sp, #4]
    740c:	b.n	73d8 <SdSpiCard::readStart(unsigned long)+0x14>
    740e:	nop
    7410:	.word	0x00007029

00007414 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    7414:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7418:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    741a:	ldrb	r1, [r0, #16]
    741c:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    741e:	mov	r6, r0
    7420:	mov	r4, r2
    7422:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7424:	beq.n	7436 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    7426:	ldr	r3, [r6, #0]
    7428:	mov	r0, r6
    742a:	ldr	r3, [r3, #20]
    742c:	blx	r3
    742e:	cbnz	r0, 746a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    7430:	movs	r0, #0
    7432:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7436:	ldr	r3, [r0, #12]
    7438:	cmp	r3, r5
    743a:	bne.n	7426 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    743c:	movs	r5, #0
    743e:	cbz	r7, 745a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    7440:	mov	r1, r4
    7442:	mov.w	r2, #512	; 0x200
    7446:	mov	r0, r6
    7448:	bl	7144 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    744c:	adds	r5, #1
    744e:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    7452:	cmp	r0, #0
    7454:	beq.n	7430 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7456:	cmp	r7, r5
    7458:	bne.n	7440 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    745a:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    745c:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    745e:	add	r7, r3
    7460:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    7462:	cbnz	r2, 747e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    7464:	movs	r0, #1
    7466:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    746a:	mov	r1, r5
    746c:	mov	r0, r6
    746e:	bl	73c4 <SdSpiCard::readStart(unsigned long)>
    7472:	cmp	r0, #0
    7474:	beq.n	7430 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    7476:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7478:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    747a:	strb	r3, [r6, #16]
    747c:	b.n	743c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    747e:	ldr	r3, [r6, #0]
    7480:	mov	r0, r6
    7482:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    7484:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7488:	bx	r3
    748a:	nop

0000748c <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    748c:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    748e:	movs	r2, #0
    7490:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7492:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    7494:	bl	7200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7498:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    749a:	cbz	r0, 74a6 <SdSpiCard::readStop()+0x1a>
    749c:	movs	r3, #9
    749e:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    74a0:	cbnz	r4, 74b8 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    74a2:	mov	r0, r4
    74a4:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    74a6:	cbnz	r4, 74ae <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    74a8:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    74aa:	mov	r0, r4
    74ac:	pop	{r3, r4, r5, pc}
    74ae:	mov	r0, r5
    74b0:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    74b4:	mov	r0, r4
    74b6:	pop	{r3, r4, r5, pc}
    74b8:	mov	r0, r5
    74ba:	movs	r4, #0
    74bc:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    74c0:	mov	r0, r4
    74c2:	pop	{r3, r4, r5, pc}

000074c4 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    74c4:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    74c6:	ldr	r3, [r0, #0]
    74c8:	ldr	r5, [pc, #68]	; (7510 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    74ca:	ldr	r3, [r3, #64]	; 0x40
    74cc:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    74ce:	sub	sp, #12
    74d0:	mov	r4, r0
    74d2:	mov	r2, r1
    74d4:	bne.n	7506 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    74d6:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    74d8:	cmp	r0, #3
    sector <<= 9;
    74da:	it	ne
    74dc:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    74de:	movs	r1, #25
    74e0:	mov	r0, r4
    74e2:	bl	7200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    74e6:	cbz	r0, 7500 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    74e8:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    74ea:	movs	r3, #14
    74ec:	strb	r3, [r4, #19]
    74ee:	cbnz	r0, 74f4 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    74f0:	add	sp, #12
    74f2:	pop	{r4, r5, pc}
    74f4:	mov	r0, r4
    74f6:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    74fa:	movs	r0, #0
    74fc:	add	sp, #12
    74fe:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    7500:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7502:	add	sp, #12
    7504:	pop	{r4, r5, pc}
    7506:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    7508:	blx	r3
    750a:	ldr	r2, [sp, #4]
    750c:	b.n	74d8 <SdSpiCard::writeStart(unsigned long)+0x14>
    750e:	nop
    7510:	.word	0x00007029

00007514 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7514:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    7516:	ldr	r3, [r0, #0]
    7518:	ldr	r7, [pc, #172]	; (75c8 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    751a:	ldr	r3, [r3, #52]	; 0x34
    751c:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    751e:	sub	sp, #20
    7520:	mov	r4, r0
    7522:	mov	r5, r1
    7524:	mov	r6, r2
    7526:	bne.n	7584 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7528:	mov	r2, sp
    752a:	movs	r1, #9
    752c:	bl	72d0 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    7530:	cbz	r0, 7558 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    7532:	ldrb.w	r3, [sp, #10]
    7536:	lsls	r2, r3, #25
    7538:	bpl.n	7568 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    753a:	ldrb	r3, [r4, #22]
    753c:	cmp	r3, #3
    firstSector <<= 9;
    753e:	it	ne
    7540:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7542:	mov	r2, r5
    7544:	mov.w	r1, #32
    7548:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    754a:	it	ne
    754c:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    754e:	bl	7200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7552:	cbz	r0, 758a <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7554:	movs	r3, #37	; 0x25
    7556:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7558:	ldrb	r0, [r4, #20]
    755a:	cbz	r0, 7564 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    755c:	mov	r0, r4
    755e:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7562:	movs	r0, #0
}
    7564:	add	sp, #20
    7566:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7568:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    756c:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7570:	lsls	r3, r3, #1
    7572:	adds	r2, r6, #1
    7574:	orr.w	r3, r3, r1, lsr #7
    7578:	orrs	r2, r5
    757a:	tst	r3, r2
    757c:	beq.n	753a <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    757e:	movs	r3, #38	; 0x26
    7580:	strb	r3, [r4, #19]
    7582:	b.n	7558 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    7584:	mov	r1, sp
    7586:	blx	r3
    7588:	b.n	7530 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    758a:	mov	r2, r6
    758c:	movs	r1, #33	; 0x21
    758e:	mov	r0, r4
    7590:	bl	7200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7594:	cmp	r0, #0
    7596:	bne.n	7554 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    7598:	mov	r2, r0
    759a:	movs	r1, #38	; 0x26
    759c:	mov	r0, r4
    759e:	bl	7200 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    75a2:	cmp	r0, #0
    75a4:	bne.n	7554 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    75a6:	movw	r1, #10000	; 0x2710
    75aa:	mov	r0, r4
    75ac:	bl	71c4 <SdSpiCard::waitNotBusy(unsigned short)>
    75b0:	cbnz	r0, 75b8 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    75b2:	movs	r3, #39	; 0x27
    75b4:	strb	r3, [r4, #19]
    75b6:	b.n	7558 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75b8:	ldrb	r5, [r4, #20]
    75ba:	cmp	r5, #0
    75bc:	beq.n	7564 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    75be:	mov	r0, r4
    75c0:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    75c4:	mov	r0, r5
    75c6:	b.n	7564 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    75c8:	.word	0x0000731d

000075cc <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    75cc:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    75ce:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    75d2:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    75d4:	bl	71c4 <SdSpiCard::waitNotBusy(unsigned short)>
    75d8:	mov	r6, r0
    75da:	cbnz	r0, 75f4 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75dc:	ldrb	r4, [r5, #20]
    75de:	movs	r3, #30
    75e0:	strb	r3, [r5, #19]
    75e2:	cbnz	r4, 75e8 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    75e4:	mov	r0, r4
    75e6:	pop	{r4, r5, r6, pc}
    75e8:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    75ea:	mov	r4, r6
    75ec:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    75f0:	mov	r0, r4
    75f2:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    75f4:	movs	r1, #253	; 0xfd
    75f6:	adds	r0, r5, #4
    75f8:	bl	878c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75fc:	ldrb	r4, [r5, #20]
    75fe:	cbnz	r4, 7606 <SdSpiCard::writeStop()+0x3a>
    7600:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7602:	mov	r0, r4
    7604:	pop	{r4, r5, r6, pc}
    7606:	mov	r0, r5
    7608:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    760c:	b.n	75e4 <SdSpiCard::writeStop()+0x18>
    760e:	nop

00007610 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    7610:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7612:	ldrb	r3, [r0, #16]
    7614:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    7616:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7618:	beq.n	7626 <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    761a:	cmp	r3, #2
    761c:	beq.n	7632 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    761e:	movs	r3, #0
    7620:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    7622:	movs	r0, #1
    7624:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    7626:	bl	748c <SdSpiCard::readStop()>
    762a:	cmp	r0, #0
    762c:	bne.n	761e <SdSpiCard::syncDevice()+0xe>
      return false;
    762e:	movs	r0, #0
    7630:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    7632:	bl	75cc <SdSpiCard::writeStop()>
    7636:	cmp	r0, #0
    7638:	bne.n	761e <SdSpiCard::syncDevice()+0xe>
    763a:	b.n	762e <SdSpiCard::syncDevice()+0x1e>

0000763c <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    763c:	push	{r4, r5, r6, lr}
    763e:	adds	r4, r0, #4
    7640:	mov	r6, r2
    7642:	mov	r5, r0
    7644:	mov	r0, r4
    7646:	bl	878c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    764a:	mov.w	r2, #512	; 0x200
    764e:	mov	r1, r6
    7650:	mov	r0, r4
    7652:	bl	87a4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7656:	mov	r0, r4
    7658:	movs	r1, #255	; 0xff
    765a:	bl	878c <SdSpiArduinoDriver::send(unsigned char)>
    765e:	mov	r0, r4
    7660:	movs	r1, #255	; 0xff
    7662:	bl	878c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7666:	mov	r0, r4
    7668:	bl	8750 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    766c:	and.w	r3, r0, #31
    7670:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    7672:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7674:	beq.n	768a <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7676:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7678:	movs	r3, #31
    767a:	strb	r3, [r5, #19]
    767c:	cbnz	r0, 7680 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    767e:	pop	{r4, r5, r6, pc}
    7680:	mov	r0, r5
    7682:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    7686:	movs	r0, #0
    7688:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    768a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    768c:	pop	{r4, r5, r6, pc}
    768e:	nop

00007690 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7690:	push	{r3, r4, r5, lr}
    7692:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7694:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7698:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    769a:	bl	71c4 <SdSpiCard::waitNotBusy(unsigned short)>
    769e:	cbnz	r0, 76b2 <SdSpiCard::writeData(unsigned char const*)+0x22>
    76a0:	movs	r3, #35	; 0x23
    76a2:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76a4:	ldrb	r0, [r4, #20]
    76a6:	cbz	r0, 76b0 <SdSpiCard::writeData(unsigned char const*)+0x20>
    76a8:	mov	r0, r4
    76aa:	bl	70e0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    76ae:	movs	r0, #0
}
    76b0:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    76b2:	mov	r2, r5
    76b4:	movs	r1, #252	; 0xfc
    76b6:	mov	r0, r4
    76b8:	bl	763c <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    76bc:	cmp	r0, #0
    76be:	beq.n	76a4 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    76c0:	pop	{r3, r4, r5, pc}
    76c2:	nop

000076c4 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    76c4:	push	{r4}
  SDHC_IRQSIGEN = 0;
    76c6:	ldr	r4, [pc, #28]	; (76e4 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    76c8:	ldr	r2, [pc, #28]	; (76e8 <sdIrs()+0x24>)
    76ca:	ldr	r1, [pc, #32]	; (76ec <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    76cc:	ldr	r0, [pc, #32]	; (76f0 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    76ce:	movs	r3, #0
    76d0:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    76d2:	ldr	r4, [r2, #0]
    76d4:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    76d6:	ldr	r1, [r1, #0]
    76d8:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    76da:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    76de:	strb	r3, [r0, #0]
}
    76e0:	bx	lr
    76e2:	nop
    76e4:	.word	0x400b1038
    76e8:	.word	0x400b1030
    76ec:	.word	0x2001dd2c
    76f0:	.word	0x2001dd44

000076f4 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    76f4:	ldr	r3, [pc, #12]	; (7704 <isBusyCommandComplete()+0x10>)
    76f6:	ldr	r0, [pc, #16]	; (7708 <isBusyCommandComplete()+0x14>)
    76f8:	ldr	r3, [r3, #0]
    76fa:	ands	r0, r3
}
    76fc:	clz	r0, r0
    7700:	lsrs	r0, r0, #5
    7702:	bx	lr
    7704:	.word	0x400b1030
    7708:	.word	0x000f0001

0000770c <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    770c:	ldr	r3, [pc, #8]	; (7718 <isBusyCommandInhibit()+0xc>)
    770e:	ldr	r0, [r3, #0]
}
    7710:	and.w	r0, r0, #1
    7714:	bx	lr
    7716:	nop
    7718:	.word	0x400b1024

0000771c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    771c:	ldr	r3, [pc, #4]	; (7724 <isBusyDMA()+0x8>)
    771e:	ldrb	r0, [r3, #0]
}
    7720:	bx	lr
    7722:	nop
    7724:	.word	0x2001dd44

00007728 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    7728:	ldr	r3, [pc, #12]	; (7738 <isBusyFifoRead()+0x10>)
    772a:	ldr	r0, [r3, #0]
    772c:	eor.w	r0, r0, #2048	; 0x800
}
    7730:	ubfx	r0, r0, #11, #1
    7734:	bx	lr
    7736:	nop
    7738:	.word	0x400b1024

0000773c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    773c:	ldr	r3, [pc, #12]	; (774c <isBusyFifoWrite()+0x10>)
    773e:	ldr	r0, [r3, #0]
    7740:	eor.w	r0, r0, #1024	; 0x400
}
    7744:	ubfx	r0, r0, #10, #1
    7748:	bx	lr
    774a:	nop
    774c:	.word	0x400b1024

00007750 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    7750:	ldr	r3, [pc, #12]	; (7760 <isBusyTransferComplete()+0x10>)
    7752:	ldr	r0, [pc, #16]	; (7764 <isBusyTransferComplete()+0x14>)
    7754:	ldr	r3, [r3, #0]
    7756:	ands	r0, r3
}
    7758:	clz	r0, r0
    775c:	lsrs	r0, r0, #5
    775e:	bx	lr
    7760:	.word	0x400b1030
    7764:	.word	0x117f0002

00007768 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7768:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    776c:	ldr	r3, [pc, #176]	; (7820 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    776e:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7772:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    7774:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7776:	bhi.n	7810 <setSdclk(unsigned long)+0xa8>
    7778:	ldr	r5, [pc, #168]	; (7824 <setSdclk(unsigned long)+0xbc>)
    777a:	movs	r2, #8
    777c:	movs	r1, #1
    sdclkfs <<= 1;
    777e:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7780:	lsls	r3, r1, #4
    7782:	udiv	r3, r5, r3
    7786:	cmp	r0, r3
    7788:	ldr	r4, [pc, #152]	; (7824 <setSdclk(unsigned long)+0xbc>)
    778a:	bcs.n	7808 <setSdclk(unsigned long)+0xa0>
    778c:	subs	r2, #1
    778e:	bne.n	777e <setSdclk(unsigned long)+0x16>
    7790:	udiv	r4, r4, r1
    7794:	lsrs	r3, r1, #1
    7796:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7798:	cmp	r0, r4
    779a:	bcs.n	7818 <setSdclk(unsigned long)+0xb0>
    779c:	ldr	r6, [pc, #132]	; (7824 <setSdclk(unsigned long)+0xbc>)
    779e:	lsls	r3, r1, #1
    77a0:	movs	r2, #1
    77a2:	b.n	77a6 <setSdclk(unsigned long)+0x3e>
    77a4:	mov	r3, r4
    77a6:	udiv	r4, r6, r3
    77aa:	cmp	r0, r4
    dvs++;
    77ac:	add.w	r5, r2, #1
    77b0:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    77b4:	bcs.n	7804 <setSdclk(unsigned long)+0x9c>
    77b6:	cmp	r5, #16
    77b8:	mov	r2, r5
    77ba:	bne.n	77a4 <setSdclk(unsigned long)+0x3c>
    77bc:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    77be:	ldr	r6, [pc, #104]	; (7828 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    77c0:	ldr	r4, [pc, #104]	; (782c <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    77c2:	ldr	r0, [pc, #96]	; (7824 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    77c4:	ldr	r1, [pc, #104]	; (7830 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    77c6:	mov.w	r5, #1000	; 0x3e8
    77ca:	mul.w	r3, r5, r3
    77ce:	udiv	r3, r0, r3
    77d2:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    77d4:	ldr	r3, [r4, #0]
    77d6:	bic.w	r3, r3, #8
    77da:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    77dc:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    77de:	bic.w	r3, r0, #1044480	; 0xff000
    77e2:	bic.w	r3, r3, #4080	; 0xff0
    77e6:	orr.w	r3, r3, #917504	; 0xe0000
    77ea:	orrs	r3, r7
    77ec:	orrs	r2, r3
    77ee:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    77f0:	ldr	r3, [r1, #0]
    77f2:	lsls	r3, r3, #28
    77f4:	bpl.n	77f0 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    77f6:	ldr	r2, [pc, #52]	; (782c <setSdclk(unsigned long)+0xc4>)
    77f8:	ldr	r3, [r2, #0]
    77fa:	orr.w	r3, r3, #8
    77fe:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    7800:	pop	{r4, r5, r6, r7}
    7802:	bx	lr
    7804:	lsls	r2, r2, #4
    7806:	b.n	77be <setSdclk(unsigned long)+0x56>
    7808:	udiv	r4, r4, r1
    780c:	lsls	r7, r1, #7
    780e:	b.n	7798 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7810:	ldr	r4, [pc, #16]	; (7824 <setSdclk(unsigned long)+0xbc>)
    7812:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    7814:	movs	r1, #1
    7816:	b.n	7798 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7818:	mov	r3, r1
    781a:	movs	r2, #0
    781c:	b.n	77be <setSdclk(unsigned long)+0x56>
    781e:	nop
    7820:	.word	0x005b8d7f
    7824:	.word	0x05b8d800
    7828:	.word	0x2001dd48
    782c:	.word	0x400b102c
    7830:	.word	0x400b1024

00007834 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    7834:	ldr	r3, [pc, #4]	; (783c <SdioCard::errorCode() const+0x8>)
}
    7836:	ldrb	r0, [r3, #0]
    7838:	bx	lr
    783a:	nop
    783c:	.word	0x20017918

00007840 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    7840:	ldr	r3, [pc, #4]	; (7848 <SdioCard::errorData() const+0x8>)
    7842:	ldr	r0, [r3, #0]
}
    7844:	bx	lr
    7846:	nop
    7848:	.word	0x2001dd2c

0000784c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    784c:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    784e:	ldr	r4, [pc, #20]	; (7864 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7850:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    7852:	ldmia	r4!, {r0, r1, r2, r3}
    7854:	str	r0, [r5, #0]
    7856:	str	r1, [r5, #4]
    7858:	str	r2, [r5, #8]
    785a:	str	r3, [r5, #12]
  return true;
}
    785c:	movs	r0, #1
    785e:	pop	{r4, r5}
    7860:	bx	lr
    7862:	nop
    7864:	.word	0x2001dd0c

00007868 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7868:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    786a:	ldr	r4, [pc, #20]	; (7880 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    786c:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    786e:	ldmia	r4!, {r0, r1, r2, r3}
    7870:	str	r0, [r5, #0]
    7872:	str	r1, [r5, #4]
    7874:	str	r2, [r5, #8]
    7876:	str	r3, [r5, #12]
  return true;
}
    7878:	movs	r0, #1
    787a:	pop	{r4, r5}
    787c:	bx	lr
    787e:	nop
    7880:	.word	0x2001dd34

00007884 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7884:	ldr	r3, [pc, #8]	; (7890 <SdioCard::readOCR(unsigned long*)+0xc>)
    7886:	ldr	r3, [r3, #0]
    7888:	str	r3, [r1, #0]
  return true;
}
    788a:	movs	r0, #1
    788c:	bx	lr
    788e:	nop
    7890:	.word	0x2001dd24

00007894 <SdioCard::~SdioCard()>:
    7894:	bx	lr
    7896:	nop

00007898 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    7898:	push	{r3, r4, r5, r6, r7, lr}
    789a:	mov	r5, r0
  uint32_t m = micros();
    789c:	bl	8eac <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    78a0:	ldr	r7, [pc, #24]	; (78bc <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    78a2:	mov	r6, r0
    78a4:	b.n	78b0 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    78a6:	bl	8eac <micros>
    78aa:	subs	r0, r0, r6
    78ac:	cmp	r0, r7
    78ae:	bhi.n	78b8 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    78b0:	blx	r5
    78b2:	mov	r4, r0
    78b4:	cmp	r0, #0
    78b6:	bne.n	78a6 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    78b8:	mov	r0, r4
    78ba:	pop	{r3, r4, r5, r6, r7, pc}
    78bc:	.word	0x000f4240

000078c0 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    78c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    78c4:	ldr.w	r8, [pc, #64]	; 7908 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    78c8:	ldr	r7, [pc, #56]	; (7904 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    78ca:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    78ce:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    78d0:	bl	8eac <micros>
    78d4:	mov	r6, r0
    78d6:	b.n	78e6 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    78d8:	bl	8eac <micros>
    78dc:	subs	r0, r0, r6
    78de:	cmp	r0, r7
    78e0:	bhi.n	78f8 <yieldTimeout(bool (*)())+0x38>
    78e2:	bl	a1d4 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    78e6:	blx	r5
    78e8:	mov	r4, r0
    78ea:	cmp	r0, #0
    78ec:	bne.n	78d8 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    78ee:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    78f2:	mov	r0, r4
    78f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    78f8:	movs	r3, #0
    78fa:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    78fe:	mov	r0, r4
    7900:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7904:	.word	0x000f4240
    7908:	.word	0x2001dd1c

0000790c <SdioCard::~SdioCard()>:
    790c:	push	{r4, lr}
    790e:	movs	r1, #12
    7910:	mov	r4, r0
    7912:	bl	a7f8 <operator delete(void*, unsigned int)>
    7916:	mov	r0, r4
    7918:	pop	{r4, pc}
    791a:	nop

0000791c <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    791c:	ldr	r3, [pc, #20]	; (7934 <SdioCard::type() const+0x18>)
    791e:	ldrb	r3, [r3, #0]
    7920:	cbz	r3, 7930 <SdioCard::type() const+0x14>
    7922:	ldr	r3, [pc, #20]	; (7938 <SdioCard::type() const+0x1c>)
    7924:	ldrb	r3, [r3, #0]
    7926:	cmp	r3, #0
    7928:	ite	ne
    792a:	movne	r0, #3
    792c:	moveq	r0, #2
    792e:	bx	lr
    7930:	movs	r0, #1
}
    7932:	bx	lr
    7934:	.word	0x2001dd08
    7938:	.word	0x2001dd20

0000793c <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    793c:	push	{r3, r4, r5, lr}
    793e:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7940:	ldr	r0, [pc, #60]	; (7980 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7942:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7944:	bl	7898 <waitTimeout(bool (*)())>
    7948:	cbz	r0, 794e <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    794a:	movs	r0, #0
    794c:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    794e:	ldr	r2, [pc, #52]	; (7984 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    7950:	ldr	r3, [pc, #52]	; (7988 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7952:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    7954:	ldr	r0, [pc, #52]	; (798c <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    7956:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    7958:	bl	7898 <waitTimeout(bool (*)())>
    795c:	cmp	r0, #0
    795e:	bne.n	794a <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7960:	ldr	r2, [pc, #44]	; (7990 <cardCommand(unsigned long, unsigned long)+0x54>)
    7962:	ldr	r3, [pc, #48]	; (7994 <cardCommand(unsigned long, unsigned long)+0x58>)
    7964:	ldr	r1, [r2, #0]
    7966:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7968:	ldr	r1, [r3, #0]
    796a:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    796c:	ldr	r2, [r3, #0]
    796e:	lsls	r2, r2, #31
    7970:	bpl.n	794a <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    7972:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7974:	tst.w	r3, #983040	; 0xf0000
    7978:	bne.n	794a <cardCommand(unsigned long, unsigned long)+0xe>
    797a:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    797c:	pop	{r3, r4, r5, pc}
    797e:	nop
    7980:	.word	0x0000770d
    7984:	.word	0x400b1008
    7988:	.word	0x400b100c
    798c:	.word	0x000076f5
    7990:	.word	0x400b1030
    7994:	.word	0x2001dd2c

00007998 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    7998:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    799a:	ldr	r3, [pc, #16]	; (79ac <SdioCard::status()+0x14>)
    799c:	ldr	r0, [pc, #16]	; (79b0 <SdioCard::status()+0x18>)
    799e:	ldr	r1, [r3, #0]
    79a0:	bl	793c <cardCommand(unsigned long, unsigned long)>
    79a4:	cbz	r0, 79aa <SdioCard::status()+0x12>
    79a6:	ldr	r3, [pc, #12]	; (79b4 <SdioCard::status()+0x1c>)
    79a8:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    79aa:	pop	{r3, pc}
    79ac:	.word	0x2001dd28
    79b0:	.word	0x0d1a0000
    79b4:	.word	0x400b1010

000079b8 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    79b8:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    79ba:	ldr	r3, [pc, #84]	; (7a10 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    79bc:	sub	sp, #20
    79be:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    79c0:	ldr	r1, [r3, #0]
    79c2:	bl	793c <cardCommand(unsigned long, unsigned long)>
    79c6:	cbz	r0, 7a0a <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    79c8:	ldr	r2, [pc, #72]	; (7a14 <readReg16(unsigned long, void*)+0x5c>)
    79ca:	ldr	r3, [pc, #76]	; (7a18 <readReg16(unsigned long, void*)+0x60>)
    79cc:	ldr	r2, [r2, #0]
    79ce:	str	r2, [sp, #0]
    79d0:	ldr	r1, [r3, #0]
    79d2:	str	r1, [sp, #4]
    79d4:	ldr	r1, [r3, #4]
    79d6:	str	r1, [sp, #8]
    79d8:	adds	r3, #8
    79da:	add.w	r4, r5, #15
    79de:	ldr	r3, [r3, #0]
    79e0:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    79e2:	movs	r3, #0
    79e4:	b.n	79ea <readReg16(unsigned long, void*)+0x32>
    79e6:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    79ea:	and.w	r1, r3, #3
    79ee:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    79f0:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    79f2:	lsrs	r2, r1
    79f4:	add.w	lr, sp, #16
    79f8:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    79fc:	cmp	r3, #15
    79fe:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7a00:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7a04:	bne.n	79e6 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    7a06:	movs	r3, #0
    7a08:	strb	r3, [r5, #15]
  return true;
}
    7a0a:	add	sp, #20
    7a0c:	pop	{r4, r5, pc}
    7a0e:	nop
    7a10:	.word	0x2001dd28
    7a14:	.word	0x400b1010
    7a18:	.word	0x400b1014

00007a1c <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    7a1c:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    7a1e:	ldr	r3, [pc, #28]	; (7a3c <isBusyCMD13()+0x20>)
    7a20:	ldr	r0, [pc, #28]	; (7a40 <isBusyCMD13()+0x24>)
    7a22:	ldr	r1, [r3, #0]
    7a24:	bl	793c <cardCommand(unsigned long, unsigned long)>
    7a28:	cbz	r0, 7a38 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    7a2a:	ldr	r3, [pc, #24]	; (7a44 <isBusyCMD13()+0x28>)
    7a2c:	ldr	r0, [r3, #0]
    7a2e:	eor.w	r0, r0, #256	; 0x100
    7a32:	ubfx	r0, r0, #8, #1
    7a36:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    7a38:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    7a3a:	pop	{r3, pc}
    7a3c:	.word	0x2001dd28
    7a40:	.word	0x0d1a0000
    7a44:	.word	0x400b1010

00007a48 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7a48:	ldr	r3, [pc, #16]	; (7a5c <SdioCard::isBusy()+0x14>)
    7a4a:	ldr	r3, [r3, #0]
    7a4c:	cbz	r3, 7a50 <SdioCard::isBusy()+0x8>
    7a4e:	bx	r3
    7a50:	ldr	r3, [pc, #12]	; (7a60 <SdioCard::isBusy()+0x18>)
    7a52:	ldrb	r0, [r3, #0]
    7a54:	cbnz	r0, 7a58 <SdioCard::isBusy()+0x10>
}
    7a56:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7a58:	b.w	7a1c <isBusyCMD13()>
    7a5c:	.word	0x2001dd1c
    7a60:	.word	0x2001dd30

00007a64 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7a64:	ldr	r3, [pc, #20]	; (7a7c <waitDmaStatus() [clone .part.6]+0x18>)
    7a66:	ldr	r0, [r3, #0]
    7a68:	ands.w	r0, r0, #2
    7a6c:	beq.n	7a7a <waitDmaStatus() [clone .part.6]+0x16>
    7a6e:	ldr	r3, [r3, #0]
    7a70:	ldr	r0, [pc, #12]	; (7a80 <waitDmaStatus() [clone .part.6]+0x1c>)
    7a72:	ands	r0, r3
    7a74:	clz	r0, r0
    7a78:	lsrs	r0, r0, #5
}
    7a7a:	bx	lr
    7a7c:	.word	0x2001dd2c
    7a80:	.word	0x117f0000

00007a84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    7a84:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    7a86:	lsls	r4, r2, #30
    7a88:	bne.n	7a8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    7a8a:	cbnz	r3, 7a9e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a8c:	ldr	r1, [pc, #124]	; (7b0c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7a8e:	ldr	r3, [pc, #128]	; (7b10 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a90:	movs	r0, #36	; 0x24
  m_errorLine = line;
    7a92:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a96:	strb	r0, [r1, #0]
  m_errorLine = line;
    7a98:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7a9a:	movs	r0, #0
    7a9c:	pop	{r3, r4, r5, r6, r7, pc}
    7a9e:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7aa0:	ldr	r0, [pc, #112]	; (7b14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    7aa2:	mov	r4, r3
    7aa4:	mov	r7, r1
    7aa6:	mov	r5, r2
    7aa8:	bl	78c0 <yieldTimeout(bool (*)())>
    7aac:	cbnz	r0, 7af6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7aae:	ldr	r1, [pc, #104]	; (7b18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7ab0:	ldr	r2, [pc, #104]	; (7b1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7ab2:	ldr.w	lr, [pc, #128]	; 7b34 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    7ab6:	mov.w	ip, #1
    7aba:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7abe:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7ac0:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7ac2:	ldr	r4, [pc, #92]	; (7b20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7ac4:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7ac6:	ldr	r2, [pc, #92]	; (7b24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7ac8:	ldr	r1, [pc, #92]	; (7b28 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    7aca:	ldr	r0, [pc, #96]	; (7b2c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7acc:	orr.w	r3, r3, #512	; 0x200
    7ad0:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7ad2:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7ad4:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7ad6:	cbnz	r3, 7b06 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    7ad8:	lsls	r1, r7, #9
    7ada:	mov	r0, r6
    7adc:	bl	793c <cardCommand(unsigned long, unsigned long)>
    7ae0:	cmp	r0, #0
    7ae2:	beq.n	7a9a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7ae4:	ldr	r0, [pc, #72]	; (7b30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    7ae6:	bl	78c0 <yieldTimeout(bool (*)())>
    7aea:	cmp	r0, #0
    7aec:	bne.n	7a9a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7aee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7af2:	b.w	7a64 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7af6:	ldr	r1, [pc, #20]	; (7b0c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7af8:	ldr	r3, [pc, #20]	; (7b10 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7afa:	movs	r0, #10
  m_errorLine = line;
    7afc:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b00:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b02:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7b04:	b.n	7a9a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7b06:	mov	r1, r7
    7b08:	b.n	7ada <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    7b0a:	nop
    7b0c:	.word	0x20017918
    7b10:	.word	0x2001dd4c
    7b14:	.word	0x00007a1d
    7b18:	.word	0x2001dd2c
    7b1c:	.word	0x400b1000
    7b20:	.word	0x400b1004
    7b24:	.word	0x2001dd20
    7b28:	.word	0x400b1038
    7b2c:	.word	0x117f0002
    7b30:	.word	0x0000771d
    7b34:	.word	0x2001dd44

00007b38 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7b38:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7b3a:	ldr	r1, [pc, #100]	; (7ba0 <SdioCard::sectorCount()+0x68>)
    7b3c:	ldrb	r3, [r1, #0]
    7b3e:	ands.w	r3, r3, #192	; 0xc0
    7b42:	beq.n	7b68 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7b44:	cmp	r3, #64	; 0x40
    7b46:	beq.n	7b4e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7b48:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    7b4a:	pop	{r4, r5, r6}
    7b4c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7b4e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7b50:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7b52:	ldrb	r0, [r1, #8]
    7b54:	adds	r2, r3, #1
    7b56:	and.w	r3, r4, #63	; 0x3f
    7b5a:	add.w	r3, r2, r3, lsl #16
    7b5e:	add.w	r0, r3, r0, lsl #8
    7b62:	lsls	r0, r0, #10
    7b64:	pop	{r4, r5, r6}
    7b66:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7b68:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7b6a:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7b6c:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7b6e:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7b70:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7b72:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7b74:	and.w	r1, r5, #3
    7b78:	lsls	r1, r1, #1
    7b7a:	and.w	r3, r3, #3
    7b7e:	lsls	r2, r2, #2
    7b80:	orr.w	r0, r1, r0, lsr #7
    7b84:	orr.w	r3, r2, r3, lsl #10
    7b88:	and.w	r1, r4, #15
    7b8c:	orr.w	r3, r3, r6, lsr #6
    7b90:	add	r0, r1
    7b92:	subs	r0, #7
    7b94:	adds	r3, #1
    7b96:	lsl.w	r0, r3, r0
    7b9a:	pop	{r4, r5, r6}
    7b9c:	bx	lr
    7b9e:	nop
    7ba0:	.word	0x2001dd34

00007ba4 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7ba4:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7ba6:	ldr	r6, [pc, #176]	; (7c58 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    7ba8:	ldrb	r3, [r6, #10]
    7baa:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7bae:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7bb0:	cbnz	r0, 7bca <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7bb2:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    7bb6:	ldrb	r2, [r6, #11]
    7bb8:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7bbc:	lsls	r3, r3, #1
    7bbe:	adds	r0, r5, #1
    7bc0:	orr.w	r3, r3, r2, lsr #7
    7bc4:	orrs	r0, r1
    7bc6:	tst	r3, r0
    7bc8:	bne.n	7c0e <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    7bca:	ldr	r3, [pc, #144]	; (7c5c <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    7bcc:	ldrb	r3, [r3, #0]
    7bce:	cbnz	r3, 7bd4 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    7bd0:	lsls	r1, r1, #9
    lastSector <<= 9;
    7bd2:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    7bd4:	ldr	r0, [pc, #136]	; (7c60 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    7bd6:	bl	793c <cardCommand(unsigned long, unsigned long)>
    7bda:	mov	r4, r0
    7bdc:	cbnz	r0, 7bf0 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bde:	ldr	r1, [pc, #132]	; (7c64 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7be0:	ldr	r3, [pc, #132]	; (7c68 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7be2:	movs	r0, #15
  m_errorLine = line;
    7be4:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7be8:	strb	r0, [r1, #0]
  m_errorLine = line;
    7bea:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7bec:	mov	r0, r4
    7bee:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    7bf0:	mov	r1, r5
    7bf2:	ldr	r0, [pc, #120]	; (7c6c <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    7bf4:	bl	793c <cardCommand(unsigned long, unsigned long)>
    7bf8:	mov	r4, r0
    7bfa:	cbnz	r0, 7c20 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bfc:	ldr	r1, [pc, #100]	; (7c64 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7bfe:	ldr	r3, [pc, #104]	; (7c68 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c00:	movs	r0, #16
  m_errorLine = line;
    7c02:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c06:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c08:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7c0a:	mov	r0, r4
    7c0c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c0e:	ldr	r1, [pc, #84]	; (7c64 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7c10:	ldr	r3, [pc, #84]	; (7c68 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c12:	movs	r0, #38	; 0x26
  m_errorLine = line;
    7c14:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c18:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c1a:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7c1c:	mov	r0, r4
    7c1e:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    7c20:	movs	r1, #0
    7c22:	ldr	r0, [pc, #76]	; (7c70 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    7c24:	bl	793c <cardCommand(unsigned long, unsigned long)>
    7c28:	mov	r4, r0
    7c2a:	cbnz	r0, 7c3c <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c2c:	ldr	r1, [pc, #52]	; (7c64 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7c2e:	ldr	r3, [pc, #56]	; (7c68 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c30:	movs	r0, #17
  m_errorLine = line;
    7c32:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c36:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c38:	str	r2, [r3, #0]
    7c3a:	b.n	7bec <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    7c3c:	ldr	r0, [pc, #52]	; (7c74 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    7c3e:	bl	7898 <waitTimeout(bool (*)())>
    7c42:	cmp	r0, #0
    7c44:	beq.n	7bec <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c46:	ldr	r1, [pc, #28]	; (7c64 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7c48:	ldr	r3, [pc, #28]	; (7c68 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c4a:	movs	r0, #39	; 0x27
  m_errorLine = line;
    7c4c:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c50:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c52:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7c54:	movs	r4, #0
    7c56:	b.n	7bec <SdioCard::erase(unsigned long, unsigned long)+0x48>
    7c58:	.word	0x2001dd34
    7c5c:	.word	0x2001dd20
    7c60:	.word	0x201a0000
    7c64:	.word	0x20017918
    7c68:	.word	0x2001dd4c
    7c6c:	.word	0x211a0000
    7c70:	.word	0x261b0000
    7c74:	.word	0x00007a1d

00007c78 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    7c78:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7c7a:	movs	r1, #0
    7c7c:	ldr	r0, [pc, #84]	; (7cd4 <transferStop()+0x5c>)
    7c7e:	bl	793c <cardCommand(unsigned long, unsigned long)>
    7c82:	mov	r4, r0
    7c84:	cbnz	r0, 7c98 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c86:	ldr	r1, [pc, #80]	; (7cd8 <transferStop()+0x60>)
  m_errorLine = line;
    7c88:	ldr	r3, [pc, #80]	; (7cdc <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c8a:	movs	r0, #9
  m_errorLine = line;
    7c8c:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c90:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c92:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    7c94:	mov	r0, r4
    7c96:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7c98:	ldr	r0, [pc, #68]	; (7ce0 <transferStop()+0x68>)
    7c9a:	bl	78c0 <yieldTimeout(bool (*)())>
    7c9e:	cbnz	r0, 7cbe <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    7ca0:	ldr	r0, [pc, #64]	; (7ce4 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7ca2:	ldr	r1, [pc, #68]	; (7ce8 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7ca4:	ldr	r5, [pc, #68]	; (7cec <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    7ca6:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7ca8:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7caa:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7cac:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7cb0:	orr.w	r2, r2, #67108864	; 0x4000000
    7cb4:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    7cb6:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    7cb8:	str	r3, [r1, #0]
  return true;
}
    7cba:	mov	r0, r4
    7cbc:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cbe:	ldr	r1, [pc, #24]	; (7cd8 <transferStop()+0x60>)
  m_errorLine = line;
    7cc0:	ldr	r3, [pc, #24]	; (7cdc <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cc2:	movs	r0, #10
  m_errorLine = line;
    7cc4:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cc8:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7cca:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7ccc:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    7cce:	mov	r0, r4
    7cd0:	pop	{r4, r5, r6, pc}
    7cd2:	nop
    7cd4:	.word	0x0cdb0000
    7cd8:	.word	0x20017918
    7cdc:	.word	0x2001dd4c
    7ce0:	.word	0x00007a1d
    7ce4:	.word	0x400b1034
    7ce8:	.word	0x400b1028
    7cec:	.word	0x400b102c

00007cf0 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    7cf0:	b.w	7c78 <transferStop()>

00007cf4 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7cf4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    7cf6:	ldr	r3, [pc, #160]	; (7d98 <SdioCard::writeData(unsigned char const*)+0xa4>)
    7cf8:	ldr	r3, [r3, #0]
    7cfa:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7cfc:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    7cfe:	bmi.n	7d12 <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d00:	ldr	r3, [pc, #152]	; (7d9c <SdioCard::writeData(unsigned char const*)+0xa8>)
    7d02:	ldr	r2, [r3, #0]
    7d04:	bic.w	r2, r2, #65536	; 0x10000
    7d08:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7d0a:	ldr	r2, [r3, #0]
    7d0c:	orr.w	r2, r2, #131072	; 0x20000
    7d10:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7d12:	ldr	r2, [pc, #136]	; (7d9c <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    7d14:	ldr	r0, [pc, #136]	; (7da0 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7d16:	ldr	r3, [r2, #0]
    7d18:	orr.w	r3, r3, #65536	; 0x10000
    7d1c:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    7d1e:	bl	7898 <waitTimeout(bool (*)())>
    7d22:	cmp	r0, #0
    7d24:	bne.n	7d84 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7d26:	ldr	r4, [pc, #112]	; (7d98 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7d28:	ldr	r0, [pc, #120]	; (7da4 <SdioCard::writeData(unsigned char const*)+0xb0>)
    7d2a:	subs	r3, r5, #4
    7d2c:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7d30:	ldr	r2, [r4, #0]
    7d32:	lsls	r1, r2, #21
    7d34:	bpl.n	7d30 <SdioCard::writeData(unsigned char const*)+0x3c>
    7d36:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7d3a:	ldr.w	r2, [r3, #4]!
    7d3e:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7d40:	cmp	r1, r3
    7d42:	bne.n	7d3a <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7d44:	cmp	r5, r1
    7d46:	mov	r3, r1
    7d48:	bne.n	7d30 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    7d4a:	ldr	r0, [pc, #92]	; (7da8 <SdioCard::writeData(unsigned char const*)+0xb4>)
    7d4c:	bl	7898 <waitTimeout(bool (*)())>
    7d50:	cbnz	r0, 7d72 <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    7d52:	ldr	r2, [pc, #88]	; (7dac <SdioCard::writeData(unsigned char const*)+0xb8>)
    7d54:	ldr	r3, [pc, #88]	; (7db0 <SdioCard::writeData(unsigned char const*)+0xbc>)
    7d56:	ldr	r1, [r2, #0]
    7d58:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7d5a:	ldr	r1, [r3, #0]
    7d5c:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7d5e:	ldr	r2, [r3, #0]
    7d60:	lsls	r2, r2, #30
    7d62:	bpl.n	7d94 <SdioCard::writeData(unsigned char const*)+0xa0>
    7d64:	ldr	r3, [r3, #0]
    7d66:	ldr	r0, [pc, #76]	; (7db4 <SdioCard::writeData(unsigned char const*)+0xc0>)
    7d68:	ands	r0, r3
    7d6a:	clz	r0, r0
    7d6e:	lsrs	r0, r0, #5
    7d70:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d72:	ldr	r1, [pc, #68]	; (7db8 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    7d74:	ldr	r3, [pc, #68]	; (7dbc <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d76:	movs	r0, #35	; 0x23
  m_errorLine = line;
    7d78:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d7c:	strb	r0, [r1, #0]
  m_errorLine = line;
    7d7e:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    7d80:	movs	r0, #0
    7d82:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d84:	ldr	r1, [pc, #48]	; (7db8 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    7d86:	ldr	r3, [pc, #52]	; (7dbc <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d88:	movs	r0, #32
  m_errorLine = line;
    7d8a:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d8e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7d90:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    7d92:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    7d94:	pop	{r3, r4, r5, pc}
    7d96:	nop
    7d98:	.word	0x400b1024
    7d9c:	.word	0x400b1028
    7da0:	.word	0x0000773d
    7da4:	.word	0x400b1020
    7da8:	.word	0x00007751
    7dac:	.word	0x400b1030
    7db0:	.word	0x2001dd2c
    7db4:	.word	0x117f0000
    7db8:	.word	0x20017918
    7dbc:	.word	0x2001dd4c

00007dc0 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7dc0:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    7dc2:	ldr	r0, [pc, #80]	; (7e14 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7dc4:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    7dc6:	bl	78c0 <yieldTimeout(bool (*)())>
    7dca:	cbnz	r0, 7e00 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7dcc:	ldr	r2, [pc, #72]	; (7e18 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7dce:	ldr	r1, [pc, #76]	; (7e1c <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7dd0:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7dd2:	ldr	r0, [pc, #76]	; (7e20 <SdioCard::writeStart(unsigned long)+0x60>)
    7dd4:	ldr	r5, [pc, #76]	; (7e24 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7dd6:	bic.w	r3, r3, #65536	; 0x10000
    7dda:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7ddc:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7dde:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7de0:	cbnz	r3, 7dfc <SdioCard::writeStart(unsigned long)+0x3c>
    7de2:	lsls	r1, r4, #9
    7de4:	ldr	r0, [pc, #64]	; (7e28 <SdioCard::writeStart(unsigned long)+0x68>)
    7de6:	bl	793c <cardCommand(unsigned long, unsigned long)>
    7dea:	cbnz	r0, 7dfa <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7dec:	ldr	r1, [pc, #60]	; (7e2c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7dee:	ldr	r3, [pc, #64]	; (7e30 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7df0:	movs	r4, #14
  m_errorLine = line;
    7df2:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7df6:	strb	r4, [r1, #0]
  m_errorLine = line;
    7df8:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    7dfa:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7dfc:	mov	r1, r4
    7dfe:	b.n	7de4 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e00:	ldr	r1, [pc, #40]	; (7e2c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7e02:	ldr	r3, [pc, #44]	; (7e30 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e04:	movs	r0, #10
  m_errorLine = line;
    7e06:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e0a:	strb	r0, [r1, #0]
  m_errorLine = line;
    7e0c:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7e0e:	movs	r0, #0
    7e10:	pop	{r3, r4, r5, pc}
    7e12:	nop
    7e14:	.word	0x00007a1d
    7e18:	.word	0x400b1028
    7e1c:	.word	0x2001dd20
    7e20:	.word	0x400b1004
    7e24:	.word	0xffff0200
    7e28:	.word	0x193a0022
    7e2c:	.word	0x20017918
    7e30:	.word	0x2001dd4c

00007e34 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7e34:	push	{r3, r4, r5, r6, r7, lr}
    7e36:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7e38:	ldrb	r0, [r0, #8]
    7e3a:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7e3c:	mov	r4, r1
    7e3e:	mov	r5, r2
    7e40:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7e42:	bmi.n	7e6c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7e44:	cbz	r3, 7e68 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7e46:	add	r7, r1
    7e48:	b.n	7e4e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    7e4a:	cmp	r4, r7
    7e4c:	beq.n	7e68 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    7e4e:	ldr	r3, [r6, #0]
    7e50:	mov	r2, r5
    7e52:	mov	r1, r4
    7e54:	ldr	r3, [r3, #8]
    7e56:	mov	r0, r6
    7e58:	blx	r3
    7e5a:	adds	r4, #1
    7e5c:	add.w	r5, r5, #512	; 0x200
    7e60:	cmp	r0, #0
    7e62:	bne.n	7e4a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    7e64:	movs	r0, #0
    7e66:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7e68:	movs	r0, #1
    7e6a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    7e6c:	lsls	r0, r2, #30
    7e6e:	beq.n	7e96 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7e70:	cmp	r3, #0
    7e72:	beq.n	7e68 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7e74:	add	r7, r1
    7e76:	b.n	7e7c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    7e78:	cmp	r7, r4
    7e7a:	beq.n	7e68 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    7e7c:	ldr	r3, [r6, #0]
    7e7e:	mov	r2, r5
    7e80:	mov	r1, r4
    7e82:	ldr	r3, [r3, #8]
    7e84:	mov	r0, r6
    7e86:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7e88:	adds	r4, #1
    7e8a:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    7e8e:	cmp	r0, #0
    7e90:	bne.n	7e78 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    7e92:	movs	r0, #0
    7e94:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    7e96:	ldr	r0, [pc, #24]	; (7eb0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    7e98:	bl	7a84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7e9c:	cmp	r0, #0
    7e9e:	bne.n	7e68 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ea0:	ldr	r1, [pc, #16]	; (7eb4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    7ea2:	ldr	r3, [pc, #20]	; (7eb8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ea4:	movs	r4, #12
  m_errorLine = line;
    7ea6:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eaa:	strb	r4, [r1, #0]
  m_errorLine = line;
    7eac:	str	r2, [r3, #0]
    7eae:	pop	{r3, r4, r5, r6, r7, pc}
    7eb0:	.word	0x123a0037
    7eb4:	.word	0x20017918
    7eb8:	.word	0x2001dd4c

00007ebc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7ebc:	push	{r3, r4, r5, r6, r7, lr}
    7ebe:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7ec0:	ldrb	r0, [r0, #8]
    7ec2:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7ec4:	mov	r4, r1
    7ec6:	mov	r5, r2
    7ec8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7eca:	bmi.n	7ef4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7ecc:	cbz	r3, 7ef0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7ece:	add	r7, r1
    7ed0:	b.n	7ed6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    7ed2:	cmp	r4, r7
    7ed4:	beq.n	7ef0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    7ed6:	ldr	r3, [r6, #0]
    7ed8:	mov	r2, r5
    7eda:	mov	r1, r4
    7edc:	ldr	r3, [r3, #24]
    7ede:	mov	r0, r6
    7ee0:	blx	r3
    7ee2:	adds	r4, #1
    7ee4:	add.w	r5, r5, #512	; 0x200
    7ee8:	cmp	r0, #0
    7eea:	bne.n	7ed2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    7eec:	movs	r0, #0
    7eee:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7ef0:	movs	r0, #1
    7ef2:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    7ef4:	lsls	r0, r2, #30
    7ef6:	beq.n	7f1e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7ef8:	cmp	r3, #0
    7efa:	beq.n	7ef0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7efc:	add	r7, r1
    7efe:	b.n	7f04 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    7f00:	cmp	r7, r4
    7f02:	beq.n	7ef0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    7f04:	ldr	r3, [r6, #0]
    7f06:	mov	r2, r5
    7f08:	mov	r1, r4
    7f0a:	ldr	r3, [r3, #24]
    7f0c:	mov	r0, r6
    7f0e:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7f10:	adds	r4, #1
    7f12:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    7f16:	cmp	r0, #0
    7f18:	bne.n	7f00 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    7f1a:	movs	r0, #0
    7f1c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    7f1e:	ldr	r0, [pc, #24]	; (7f38 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    7f20:	bl	7a84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7f24:	cmp	r0, #0
    7f26:	bne.n	7ef0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f28:	ldr	r1, [pc, #16]	; (7f3c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    7f2a:	ldr	r3, [pc, #20]	; (7f40 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f2c:	movs	r4, #14
  m_errorLine = line;
    7f2e:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f32:	strb	r4, [r1, #0]
  m_errorLine = line;
    7f34:	str	r2, [r3, #0]
    7f36:	pop	{r3, r4, r5, r6, r7, pc}
    7f38:	.word	0x193a0027
    7f3c:	.word	0x20017918
    7f40:	.word	0x2001dd4c

00007f44 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7f44:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7f46:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7f48:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7f4a:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7f4c:	sub.w	sp, sp, #512	; 0x200
    7f50:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    7f52:	bpl.n	7f88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    7f54:	lsls	r3, r5, #30
    7f56:	beq.n	7f66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    7f58:	mov	r1, r5
    7f5a:	mov	r0, sp
    7f5c:	mov.w	r2, #512	; 0x200
    7f60:	bl	87fc <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    7f64:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    7f66:	mov	r2, r5
    7f68:	mov	r1, r6
    7f6a:	movs	r3, #1
    7f6c:	ldr	r0, [pc, #120]	; (7fe8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    7f6e:	bl	7a84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7f72:	cbnz	r0, 7f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f74:	ldr	r1, [pc, #116]	; (7fec <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    7f76:	ldr	r3, [pc, #120]	; (7ff0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f78:	movs	r4, #13
  m_errorLine = line;
    7f7a:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f7e:	strb	r4, [r1, #0]
  m_errorLine = line;
    7f80:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    7f82:	add.w	sp, sp, #512	; 0x200
    7f86:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7f88:	ldrb	r3, [r0, #9]
    7f8a:	cmp	r3, #2
    7f8c:	mov	r4, r0
    7f8e:	beq.n	7fa2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    7f90:	ldr	r3, [r4, #0]
    7f92:	mov	r0, r4
    7f94:	ldr	r3, [r3, #20]
    7f96:	blx	r3
    7f98:	cbnz	r0, 7fd2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    7f9a:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    7f9c:	add.w	sp, sp, #512	; 0x200
    7fa0:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7fa2:	ldr	r3, [r0, #4]
    7fa4:	cmp	r1, r3
    7fa6:	bne.n	7f90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    7fa8:	ldr	r3, [r4, #0]
    7faa:	mov	r1, r5
    7fac:	ldr	r3, [r3, #68]	; 0x44
    7fae:	mov	r0, r4
    7fb0:	blx	r3
    7fb2:	cmp	r0, #0
    7fb4:	beq.n	7f9a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    7fb6:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7fb8:	ldr	r2, [pc, #56]	; (7ff4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    7fba:	adds	r3, #1
    7fbc:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7fbe:	ldr	r3, [r2, #0]
    7fc0:	lsrs	r3, r3, #16
    7fc2:	lsls	r3, r3, #16
    7fc4:	cmp	r3, #0
    7fc6:	bne.n	7f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    7fc8:	ldr	r3, [r4, #0]
    7fca:	mov	r0, r4
    7fcc:	ldr	r3, [r3, #20]
    7fce:	blx	r3
    7fd0:	b.n	7f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    7fd2:	ldr	r3, [r4, #0]
    7fd4:	mov	r1, r6
    7fd6:	ldr	r3, [r3, #72]	; 0x48
    7fd8:	mov	r0, r4
    7fda:	blx	r3
    7fdc:	cmp	r0, #0
    7fde:	beq.n	7f9a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    7fe0:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    7fe2:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    7fe4:	strb	r3, [r4, #9]
    7fe6:	b.n	7fa8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    7fe8:	.word	0x183a0001
    7fec:	.word	0x20017918
    7ff0:	.word	0x2001dd4c
    7ff4:	.word	0x400b1004

00007ff8 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    7ff8:	ldrb	r3, [r0, #9]
    7ffa:	cmp	r3, #1
    7ffc:	beq.n	8018 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7ffe:	cmp	r3, #2
    8000:	beq.n	8006 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    8002:	movs	r0, #1
    8004:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8006:	movs	r1, #0
    if (!writeStop()) {
    8008:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    800a:	strb	r1, [r0, #9]
    if (!writeStop()) {
    800c:	ldr	r3, [r3, #76]	; 0x4c
    800e:	ldr	r2, [pc, #20]	; (8024 <SdioCard::syncDevice()+0x2c>)
    8010:	cmp	r3, r2
    8012:	bne.n	8020 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8014:	b.w	7c78 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    8018:	movs	r3, #0
    801a:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    801c:	b.w	7c78 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    8020:	bx	r3
    8022:	nop
    8024:	.word	0x00007cf1

00008028 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8028:	push	{r3, r4, r5, r6, r7, lr}
    802a:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    802c:	ldr	r0, [pc, #116]	; (80a4 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    802e:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8030:	bl	7898 <waitTimeout(bool (*)())>
    8034:	cbz	r0, 8048 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8036:	ldr	r1, [pc, #112]	; (80a8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8038:	ldr	r3, [pc, #112]	; (80ac <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    803a:	movs	r0, #10
  m_errorLine = line;
    803c:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8040:	strb	r0, [r1, #0]
  m_errorLine = line;
    8042:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8044:	movs	r0, #0
    8046:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8048:	ldr	r2, [pc, #100]	; (80b0 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    804a:	ldr.w	lr, [pc, #132]	; 80d0 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    804e:	ldr	r7, [pc, #100]	; (80b4 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8050:	ldr	r6, [pc, #100]	; (80b8 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8052:	ldr	r3, [pc, #104]	; (80bc <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8054:	mov.w	ip, #1
    8058:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    805c:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    805e:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8060:	ldr	r5, [pc, #92]	; (80c0 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8062:	ldr	r2, [pc, #96]	; (80c4 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8064:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8066:	ldr	r0, [pc, #96]	; (80c8 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8068:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    806a:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    806c:	bl	793c <cardCommand(unsigned long, unsigned long)>
    8070:	cbnz	r0, 8082 <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8072:	ldr	r1, [pc, #52]	; (80a8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8074:	ldr	r3, [pc, #52]	; (80ac <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8076:	movs	r4, #4
  m_errorLine = line;
    8078:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    807c:	strb	r4, [r1, #0]
  m_errorLine = line;
    807e:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    8080:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8082:	ldr	r0, [pc, #72]	; (80cc <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    8084:	bl	78c0 <yieldTimeout(bool (*)())>
    8088:	cbnz	r0, 8092 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    808a:	bl	7a64 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    808e:	cbz	r0, 8092 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    8090:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8092:	ldr	r1, [pc, #20]	; (80a8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8094:	ldr	r3, [pc, #20]	; (80ac <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8096:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8098:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    809c:	strb	r0, [r1, #0]
  m_errorLine = line;
    809e:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    80a0:	movs	r0, #0
    80a2:	pop	{r3, r4, r5, r6, r7, pc}
    80a4:	.word	0x00007a1d
    80a8:	.word	0x20017918
    80ac:	.word	0x2001dd4c
    80b0:	.word	0x2001dd2c
    80b4:	.word	0x400b1000
    80b8:	.word	0x400b1004
    80bc:	.word	0x400b1038
    80c0:	.word	0x00010040
    80c4:	.word	0x117f0002
    80c8:	.word	0x063a0011
    80cc:	.word	0x0000771d
    80d0:	.word	0x2001dd44

000080d4 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    80d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    80d8:	ldr	r5, [pc, #568]	; (8314 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    80da:	ldr	r4, [pc, #572]	; (8318 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    80dc:	ldr.w	r8, [pc, #684]	; 838c <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    80e0:	ldr	r7, [pc, #568]	; (831c <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    80e2:	ldr	r6, [pc, #572]	; (8320 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    80e4:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    80e6:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    80e8:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    80ea:	strb	r3, [r0, #9]
  m_initDone = false;
    80ec:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    80f0:	strb	r3, [r7, #0]
  m_version2 = false;
    80f2:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    80f4:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    80f6:	ldr	r2, [pc, #556]	; (8324 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    80f8:	ldr	r0, [pc, #556]	; (8328 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    80fa:	ldr	r1, [pc, #560]	; (832c <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    80fc:	ldr.w	lr, [pc, #656]	; 8390 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8100:	orr.w	r3, r3, #201326592	; 0xc000000
    8104:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8106:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8108:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    810c:	orr.w	r3, r3, #131072	; 0x20000
    8110:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8112:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8114:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8118:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    811c:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8120:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8122:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8126:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8128:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    812a:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    812c:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    812e:	ldr	r3, [r2, #0]
    8130:	orr.w	r3, r3, #16777216	; 0x1000000
    8134:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8138:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    813a:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    813c:	ldr	r3, [r2, #0]
    813e:	ldr	r4, [pc, #496]	; (8330 <SdioCard::begin(SdioConfig)+0x25c>)
    8140:	lsls	r1, r3, #7
    8142:	bmi.n	813c <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8144:	mov.w	r0, #400	; 0x190
    8148:	bl	7768 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    814c:	ldr.w	ip, [pc, #472]	; 8328 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8150:	ldr.w	lr, [pc, #572]	; 8390 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8154:	ldr	r1, [pc, #468]	; (832c <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8156:	ldr	r2, [pc, #476]	; (8334 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8158:	ldr	r0, [pc, #476]	; (8338 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    815a:	movw	r3, #1091	; 0x443
    815e:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8162:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8166:	mov.w	lr, #1088	; 0x440
    816a:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    816e:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8170:	add.w	r2, r2, #409600	; 0x64000
    8174:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8176:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8178:	ldr	r0, [pc, #448]	; (833c <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    817a:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    817c:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    817e:	ldr	r1, [pc, #448]	; (8340 <SdioCard::begin(SdioConfig)+0x26c>)
    8180:	movs	r0, #81	; 0x51
    8182:	bl	8e38 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8186:	ldr	r3, [pc, #444]	; (8344 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8188:	ldr	r1, [pc, #444]	; (8348 <SdioCard::begin(SdioConfig)+0x274>)
    818a:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    818c:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8190:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8192:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8194:	ldr	r3, [r4, #0]
    8196:	orr.w	r3, r3, #134217728	; 0x8000000
    819a:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    819c:	ldr	r1, [r4, #0]
    819e:	ands.w	r1, r1, #134217728	; 0x8000000
    81a2:	bne.n	819c <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    81a4:	mov	r0, r1
    81a6:	bl	793c <cardCommand(unsigned long, unsigned long)>
    81aa:	mov	r4, r0
    81ac:	cmp	r0, #0
    81ae:	beq.n	824e <SdioCard::begin(SdioConfig)+0x17a>
    81b0:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    81b2:	mov.w	r1, #426	; 0x1aa
    81b6:	ldr	r0, [pc, #404]	; (834c <SdioCard::begin(SdioConfig)+0x278>)
    81b8:	bl	793c <cardCommand(unsigned long, unsigned long)>
    81bc:	cmp	r0, #0
    81be:	bne.n	827c <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    81c0:	subs	r4, #1
    81c2:	bne.n	81b2 <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    81c4:	ldrb	r3, [r6, #0]
    81c6:	ldr	r6, [pc, #392]	; (8350 <SdioCard::begin(SdioConfig)+0x27c>)
    81c8:	cmp	r3, #0
    81ca:	it	eq
    81cc:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    81d0:	bl	8eac <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    81d4:	ldr	r4, [pc, #380]	; (8354 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    81d6:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    81d8:	movs	r1, #0
    81da:	ldr	r0, [pc, #380]	; (8358 <SdioCard::begin(SdioConfig)+0x284>)
    81dc:	bl	793c <cardCommand(unsigned long, unsigned long)>
    81e0:	cbnz	r0, 81f8 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    81e2:	ldr	r2, [pc, #376]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    81e4:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81e8:	movs	r3, #23
  m_errorLine = line;
    81ea:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    81ec:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    81ee:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    81f0:	mov	r0, r4
    81f2:	add	sp, #68	; 0x44
    81f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    81f8:	mov	r1, r6
    81fa:	ldr	r0, [pc, #356]	; (8360 <SdioCard::begin(SdioConfig)+0x28c>)
    81fc:	bl	793c <cardCommand(unsigned long, unsigned long)>
    8200:	cmp	r0, #0
    8202:	beq.n	81e2 <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8204:	bl	8eac <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8208:	ldr	r3, [pc, #344]	; (8364 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    820a:	ldr	r2, [pc, #328]	; (8354 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    820c:	rsb	r0, r9, r0
    8210:	cmp	r0, r3
    8212:	bhi.n	81e2 <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8214:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    8216:	cmp	r3, #0
    8218:	bge.n	81d8 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    821a:	ldr	r3, [pc, #332]	; (8368 <SdioCard::begin(SdioConfig)+0x294>)
    821c:	ldr	r1, [r2, #0]
    821e:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    8220:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8222:	ldr	r0, [pc, #328]	; (836c <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    8224:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    8226:	it	mi
    8228:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    822a:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    822e:	it	mi
    8230:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8232:	bl	793c <cardCommand(unsigned long, unsigned long)>
    8236:	mov	r4, r0
    8238:	cbnz	r0, 8262 <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    823a:	ldr	r2, [pc, #288]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    823c:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8240:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8242:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8244:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8246:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8248:	add	sp, #68	; 0x44
    824a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    824e:	ldr	r2, [pc, #268]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    8250:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8254:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8256:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8258:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    825a:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    825c:	add	sp, #68	; 0x44
    825e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8262:	movs	r1, #0
    8264:	ldr	r0, [pc, #264]	; (8370 <SdioCard::begin(SdioConfig)+0x29c>)
    8266:	bl	793c <cardCommand(unsigned long, unsigned long)>
    826a:	mov	r4, r0
    826c:	cbnz	r0, 829e <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    826e:	ldr	r2, [pc, #236]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    8270:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8274:	movs	r3, #3
  m_errorLine = line;
    8276:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8278:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    827a:	b.n	81f0 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    827c:	ldr	r3, [pc, #212]	; (8354 <SdioCard::begin(SdioConfig)+0x280>)
    827e:	ldr	r3, [r3, #0]
    8280:	cmp.w	r3, #426	; 0x1aa
    8284:	beq.n	8296 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8286:	ldr	r2, [pc, #212]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    8288:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    828c:	movs	r3, #6
  m_errorLine = line;
    828e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8290:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    8292:	movs	r4, #0
    8294:	b.n	81f0 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    8296:	movs	r3, #1
    8298:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    829a:	ldr	r6, [pc, #180]	; (8350 <SdioCard::begin(SdioConfig)+0x27c>)
    829c:	b.n	81d0 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    829e:	ldr	r3, [pc, #180]	; (8354 <SdioCard::begin(SdioConfig)+0x280>)
    82a0:	ldr	r6, [pc, #208]	; (8374 <SdioCard::begin(SdioConfig)+0x2a0>)
    82a2:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    82a4:	ldr	r1, [pc, #208]	; (8378 <SdioCard::begin(SdioConfig)+0x2a4>)
    82a6:	ldr	r0, [pc, #212]	; (837c <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    82a8:	lsrs	r3, r3, #16
    82aa:	lsls	r3, r3, #16
    82ac:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    82ae:	bl	79b8 <readReg16(unsigned long, void*)>
    82b2:	mov	r4, r0
    82b4:	cbnz	r0, 82c4 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82b6:	ldr	r2, [pc, #164]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    82b8:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82bc:	movs	r3, #7
  m_errorLine = line;
    82be:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82c0:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    82c2:	b.n	81f0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    82c4:	ldr	r1, [pc, #184]	; (8380 <SdioCard::begin(SdioConfig)+0x2ac>)
    82c6:	ldr	r0, [pc, #188]	; (8384 <SdioCard::begin(SdioConfig)+0x2b0>)
    82c8:	bl	79b8 <readReg16(unsigned long, void*)>
    82cc:	mov	r4, r0
    82ce:	cbnz	r0, 82de <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82d0:	ldr	r2, [pc, #136]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    82d2:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82d6:	movs	r3, #8
  m_errorLine = line;
    82d8:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82da:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    82dc:	b.n	81f0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    82de:	ldr	r1, [r6, #0]
    82e0:	ldr	r0, [pc, #164]	; (8388 <SdioCard::begin(SdioConfig)+0x2b4>)
    82e2:	bl	793c <cardCommand(unsigned long, unsigned long)>
    82e6:	mov	r4, r0
    82e8:	cbnz	r0, 82f8 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82ea:	ldr	r2, [pc, #112]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    82ec:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82f0:	movs	r3, #5
  m_errorLine = line;
    82f2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82f4:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    82f6:	b.n	81f0 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    82f8:	ldr	r1, [r6, #0]
    82fa:	ldr	r0, [pc, #92]	; (8358 <SdioCard::begin(SdioConfig)+0x284>)
    82fc:	bl	793c <cardCommand(unsigned long, unsigned long)>
    8300:	cmp	r0, #0
    8302:	bne.n	8394 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8304:	ldr	r2, [pc, #84]	; (835c <SdioCard::begin(SdioConfig)+0x288>)
    8306:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    830a:	movs	r3, #20
  m_errorLine = line;
    830c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    830e:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8310:	movs	r4, #0
    8312:	b.n	81f0 <SdioCard::begin(SdioConfig)+0x11c>
    8314:	.word	0x20017918
    8318:	.word	0x4000d800
    831c:	.word	0x2001dd20
    8320:	.word	0x2001dd08
    8324:	.word	0x40048030
    8328:	.word	0x4004d000
    832c:	.word	0x4004d008
    8330:	.word	0x400b102c
    8334:	.word	0x4004d00c
    8338:	.word	0x4004d010
    833c:	.word	0x117f000b
    8340:	.word	0x000076c5
    8344:	.word	0xe000e108
    8348:	.word	0xe000e451
    834c:	.word	0x081a0000
    8350:	.word	0x40300000
    8354:	.word	0x400b1010
    8358:	.word	0x371a0000
    835c:	.word	0x2001dd4c
    8360:	.word	0x29020000
    8364:	.word	0x000f4240
    8368:	.word	0x2001dd24
    836c:	.word	0x02090000
    8370:	.word	0x031a0000
    8374:	.word	0x2001dd28
    8378:	.word	0x2001dd34
    837c:	.word	0x09090000
    8380:	.word	0x2001dd0c
    8384:	.word	0x0a090000
    8388:	.word	0x071b0000
    838c:	.word	0x2001dd30
    8390:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8394:	movs	r1, #2
    8396:	ldr	r0, [pc, #168]	; (8440 <SdioCard::begin(SdioConfig)+0x36c>)
    8398:	bl	793c <cardCommand(unsigned long, unsigned long)>
    839c:	mov	r4, r0
    839e:	cmp	r0, #0
    83a0:	beq.n	8304 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    83a2:	ldr	r3, [pc, #160]	; (8444 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    83a4:	ldr	r0, [pc, #160]	; (8448 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    83a6:	ldr	r2, [r3, #0]
    83a8:	bic.w	r2, r2, #6
    83ac:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    83ae:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    83b0:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    83b4:	orr.w	r2, r2, #2
    83b8:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    83ba:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    83bc:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    83be:	mvn.w	r0, #4278190080	; 0xff000000
    83c2:	bl	8028 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    83c6:	cbz	r0, 83d0 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    83c8:	ldrb.w	r3, [sp, #13]
    83cc:	lsls	r3, r3, #30
    83ce:	bmi.n	8422 <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    83d0:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    83d4:	ldr.w	fp, [pc, #132]	; 845c <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    83d8:	ldr.w	sl, [pc, #132]	; 8460 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    83dc:	ldr.w	r9, [pc, #132]	; 8464 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    83e0:	ldr	r7, [pc, #104]	; (844c <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    83e2:	ldr	r6, [pc, #108]	; (8450 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    83e4:	ldr	r5, [pc, #108]	; (8454 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    83e6:	movw	r3, #259	; 0x103
    83ea:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    83ee:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    83f2:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    83f6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    83f8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    83fa:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    83fc:	bl	7768 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8400:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8404:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8408:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    840a:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    840e:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8412:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8416:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8418:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    841a:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    841c:	strb.w	r2, [r8]
  return true;
    8420:	b.n	81f0 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    8422:	mov	r1, sp
    8424:	ldr	r0, [pc, #48]	; (8458 <SdioCard::begin(SdioConfig)+0x384>)
    8426:	bl	8028 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    842a:	cmp	r0, #0
    842c:	beq.n	83d0 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    842e:	ldrb.w	r3, [sp, #16]
    8432:	and.w	r3, r3, #15
    8436:	cmp	r3, #1
    8438:	bne.n	83d0 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    843a:	movw	r0, #50000	; 0xc350
    843e:	b.n	83d4 <SdioCard::begin(SdioConfig)+0x300>
    8440:	.word	0x061a0000
    8444:	.word	0x400b1028
    8448:	.word	0x400b1044
    844c:	.word	0x4004d00c
    8450:	.word	0x4004d010
    8454:	.word	0x4004d014
    8458:	.word	0x80fffff1
    845c:	.word	0x4004d000
    8460:	.word	0x4004d004
    8464:	.word	0x4004d008

00008468 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8468:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    846a:	ldr	r3, [pc, #160]	; (850c <SdioCard::readData(unsigned char*)+0xa4>)
    846c:	ldr	r3, [r3, #0]
    846e:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    8470:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8472:	bmi.n	8492 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8474:	ldr	r3, [pc, #152]	; (8510 <SdioCard::readData(unsigned char*)+0xa8>)
    8476:	ldr	r2, [r3, #0]
    8478:	bic.w	r2, r2, #65536	; 0x10000
    847c:	str	r2, [r3, #0]
    noInterrupts();
    847e:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8480:	ldr	r2, [r3, #0]
    8482:	orr.w	r2, r2, #131072	; 0x20000
    8486:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8488:	ldr	r2, [r3, #0]
    848a:	orr.w	r2, r2, #65536	; 0x10000
    848e:	str	r2, [r3, #0]
    interrupts();
    8490:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    8492:	ldr	r0, [pc, #128]	; (8514 <SdioCard::readData(unsigned char*)+0xac>)
    8494:	bl	7898 <waitTimeout(bool (*)())>
    8498:	cmp	r0, #0
    849a:	bne.n	84fa <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    849c:	ldr	r4, [pc, #108]	; (850c <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    849e:	ldr	r0, [pc, #120]	; (8518 <SdioCard::readData(unsigned char*)+0xb0>)
    84a0:	subs	r3, r5, #4
    84a2:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    84a6:	ldr	r2, [r4, #0]
    84a8:	lsls	r1, r2, #20
    84aa:	bpl.n	84a6 <SdioCard::readData(unsigned char*)+0x3e>
    84ac:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    84b0:	ldr	r2, [r0, #0]
    84b2:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    84b6:	cmp	r1, r3
    84b8:	bne.n	84b0 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    84ba:	cmp	r5, r1
    84bc:	mov	r3, r1
    84be:	bne.n	84a6 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    84c0:	ldr	r0, [pc, #88]	; (851c <SdioCard::readData(unsigned char*)+0xb4>)
    84c2:	bl	7898 <waitTimeout(bool (*)())>
    84c6:	cbnz	r0, 84e8 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    84c8:	ldr	r2, [pc, #84]	; (8520 <SdioCard::readData(unsigned char*)+0xb8>)
    84ca:	ldr	r3, [pc, #88]	; (8524 <SdioCard::readData(unsigned char*)+0xbc>)
    84cc:	ldr	r1, [r2, #0]
    84ce:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    84d0:	ldr	r1, [r3, #0]
    84d2:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    84d4:	ldr	r2, [r3, #0]
    84d6:	lsls	r2, r2, #30
    84d8:	bpl.n	850a <SdioCard::readData(unsigned char*)+0xa2>
    84da:	ldr	r3, [r3, #0]
    84dc:	ldr	r0, [pc, #72]	; (8528 <SdioCard::readData(unsigned char*)+0xc0>)
    84de:	ands	r0, r3
    84e0:	clz	r0, r0
    84e4:	lsrs	r0, r0, #5
    84e6:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84e8:	ldr	r1, [pc, #64]	; (852c <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    84ea:	ldr	r3, [pc, #68]	; (8530 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84ec:	movs	r0, #29
  m_errorLine = line;
    84ee:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84f2:	strb	r0, [r1, #0]
  m_errorLine = line;
    84f4:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    84f6:	movs	r0, #0
    84f8:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84fa:	ldr	r1, [pc, #48]	; (852c <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    84fc:	ldr	r3, [pc, #48]	; (8530 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    84fe:	movs	r0, #26
  m_errorLine = line;
    8500:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8504:	strb	r0, [r1, #0]
  m_errorLine = line;
    8506:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8508:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    850a:	pop	{r3, r4, r5, pc}
    850c:	.word	0x400b1024
    8510:	.word	0x400b1028
    8514:	.word	0x00007729
    8518:	.word	0x400b1020
    851c:	.word	0x00007751
    8520:	.word	0x400b1030
    8524:	.word	0x2001dd2c
    8528:	.word	0x117f0000
    852c:	.word	0x20017918
    8530:	.word	0x2001dd4c

00008534 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    8534:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    8536:	ldr	r0, [pc, #80]	; (8588 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    8538:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    853a:	bl	78c0 <yieldTimeout(bool (*)())>
    853e:	cbnz	r0, 8574 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8540:	ldr	r2, [pc, #72]	; (858c <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8542:	ldr	r1, [pc, #76]	; (8590 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8544:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8546:	ldr	r0, [pc, #76]	; (8594 <SdioCard::readStart(unsigned long)+0x60>)
    8548:	ldr	r5, [pc, #76]	; (8598 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    854a:	orr.w	r3, r3, #65536	; 0x10000
    854e:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8550:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8552:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8554:	cbnz	r3, 8570 <SdioCard::readStart(unsigned long)+0x3c>
    8556:	lsls	r1, r4, #9
    8558:	ldr	r0, [pc, #64]	; (859c <SdioCard::readStart(unsigned long)+0x68>)
    855a:	bl	793c <cardCommand(unsigned long, unsigned long)>
    855e:	cbnz	r0, 856e <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8560:	ldr	r1, [pc, #60]	; (85a0 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8562:	ldr	r3, [pc, #64]	; (85a4 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8564:	movs	r4, #12
  m_errorLine = line;
    8566:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    856a:	strb	r4, [r1, #0]
  m_errorLine = line;
    856c:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    856e:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8570:	mov	r1, r4
    8572:	b.n	8558 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8574:	ldr	r1, [pc, #40]	; (85a0 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8576:	ldr	r3, [pc, #44]	; (85a4 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8578:	movs	r0, #10
  m_errorLine = line;
    857a:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    857e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8580:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8582:	movs	r0, #0
    8584:	pop	{r3, r4, r5, pc}
    8586:	nop
    8588:	.word	0x00007a1d
    858c:	.word	0x400b1028
    8590:	.word	0x2001dd20
    8594:	.word	0x400b1004
    8598:	.word	0xffff0200
    859c:	.word	0x123a0032
    85a0:	.word	0x20017918
    85a4:	.word	0x2001dd4c

000085a8 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    85a8:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    85aa:	ldrb	r3, [r0, #8]
    85ac:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    85ae:	sub.w	sp, sp, #512	; 0x200
    85b2:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    85b4:	bpl.n	85dc <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    85b6:	lsls	r3, r2, #30
    85b8:	beq.n	85fa <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    85ba:	mov	r2, sp
    85bc:	movs	r3, #1
    85be:	ldr	r0, [pc, #168]	; (8668 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    85c0:	bl	7a84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    85c4:	cbz	r0, 8606 <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    85c6:	mov	r1, sp
    85c8:	mov	r0, r5
    85ca:	mov.w	r2, #512	; 0x200
    85ce:	bl	87fc <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    85d2:	movs	r5, #1
}
    85d4:	mov	r0, r5
    85d6:	add.w	sp, sp, #512	; 0x200
    85da:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    85dc:	ldrb	r3, [r0, #9]
    85de:	cmp	r3, #1
    85e0:	mov	r4, r0
    85e2:	mov	r6, r1
    85e4:	beq.n	861e <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    85e6:	ldr	r3, [r4, #0]
    85e8:	mov	r0, r4
    85ea:	ldr	r3, [r3, #20]
    85ec:	blx	r3
    85ee:	cbnz	r0, 8644 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    85f0:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    85f2:	mov	r0, r5
    85f4:	add.w	sp, sp, #512	; 0x200
    85f8:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    85fa:	movs	r3, #1
    85fc:	ldr	r0, [pc, #104]	; (8668 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    85fe:	bl	7a84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8602:	cmp	r0, #0
    8604:	bne.n	85d2 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8606:	ldr	r1, [pc, #100]	; (866c <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    8608:	ldr	r3, [pc, #100]	; (8670 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    860a:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    860c:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    860e:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8612:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8614:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8616:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8618:	add.w	sp, sp, #512	; 0x200
    861c:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    861e:	ldr	r3, [r0, #4]
    8620:	cmp	r1, r3
    8622:	bne.n	85e6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    8624:	mov	r1, r5
    8626:	mov	r0, r4
    8628:	bl	8468 <SdioCard::readData(unsigned char*)>
    862c:	mov	r5, r0
    862e:	cmp	r0, #0
    8630:	beq.n	85f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8632:	ldr	r3, [pc, #64]	; (8674 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    8634:	ldr	r3, [r3, #0]
    8636:	lsrs	r3, r3, #16
    8638:	lsls	r3, r3, #16
    863a:	cbz	r3, 8658 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    863c:	ldr	r3, [r4, #4]
    863e:	adds	r3, #1
    8640:	str	r3, [r4, #4]
    8642:	b.n	85f2 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    8644:	mov	r1, r6
    8646:	mov	r0, r4
    8648:	bl	8534 <SdioCard::readStart(unsigned long)>
    864c:	cmp	r0, #0
    864e:	beq.n	85f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    8650:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    8652:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    8654:	strb	r3, [r4, #9]
    8656:	b.n	8624 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    8658:	ldr	r3, [r4, #0]
    865a:	mov	r0, r4
    865c:	ldr	r3, [r3, #20]
    865e:	blx	r3
    8660:	cmp	r0, #0
    8662:	bne.n	863c <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    8664:	b.n	85f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    8666:	nop
    8668:	.word	0x113a0011
    866c:	.word	0x20017918
    8670:	.word	0x2001dd4c
    8674:	.word	0x400b1004

00008678 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    8678:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    867a:	ldr	r3, [r0, #0]
    867c:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    867e:	ldrb	r1, [r3, #11]
    8680:	cbz	r1, 86c2 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    8682:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8684:	ldrb	r1, [r3, #11]
    8686:	lsls	r0, r1, #31
    8688:	bpl.n	8698 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    868a:	ldr	r0, [pc, #100]	; (86f0 <SdSpiArduinoDriver::activate()+0x78>)
    868c:	ldr	r1, [r3, #12]
    868e:	ldr	r4, [r0, #0]
    8690:	ands	r1, r4
    8692:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    8694:	str	r1, [r0, #0]
    8696:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8698:	lsls	r4, r1, #30
    869a:	bpl.n	86aa <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    869c:	ldr	r0, [pc, #84]	; (86f4 <SdSpiArduinoDriver::activate()+0x7c>)
    869e:	ldr	r1, [r3, #16]
    86a0:	ldr	r4, [r0, #0]
    86a2:	ands	r1, r4
    86a4:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    86a6:	str	r1, [r0, #0]
    86a8:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    86aa:	lsls	r0, r1, #29
    86ac:	bpl.n	86bc <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    86ae:	ldr	r0, [pc, #72]	; (86f8 <SdSpiArduinoDriver::activate()+0x80>)
    86b0:	ldr	r1, [r3, #20]
    86b2:	ldr	r4, [r0, #0]
    86b4:	ands	r1, r4
    86b6:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    86b8:	str	r1, [r0, #0]
    86ba:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    86bc:	lsls	r1, r1, #28
    86be:	bmi.n	86e0 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    86c0:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    86c2:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    86c4:	ldr	r1, [r3, #12]
    86c6:	cmp	r1, r2
    86c8:	beq.n	86da <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    86ca:	ldr	r0, [pc, #48]	; (86fc <SdSpiArduinoDriver::activate()+0x84>)
    86cc:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    86ce:	ldr	r1, [pc, #48]	; (8700 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    86d0:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    86d2:	orr.w	r0, r2, #1073741824	; 0x40000000
    86d6:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    86d8:	str	r1, [r3, #0]
}
    86da:	ldr.w	r4, [sp], #4
    86de:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    86e0:	ldr	r0, [pc, #32]	; (8704 <SdSpiArduinoDriver::activate()+0x8c>)
    86e2:	ldr	r1, [r3, #24]
    86e4:	ldr	r4, [r0, #0]
    86e6:	ands	r1, r4
    86e8:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    86ea:	str	r1, [r0, #0]
    86ec:	b.n	86c0 <SdSpiArduinoDriver::activate()+0x48>
    86ee:	nop
    86f0:	.word	0xe000e180
    86f4:	.word	0xe000e184
    86f8:	.word	0xe000e188
    86fc:	.word	0x003f4001
    8700:	.word	0x803f0000
    8704:	.word	0xe000e18c

00008708 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    8708:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    870a:	ldrb	r3, [r2, #11]
    870c:	cbz	r3, 873c <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    870e:	lsls	r1, r3, #31
    8710:	bpl.n	871a <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    8712:	ldr	r3, [pc, #44]	; (8740 <SdSpiArduinoDriver::deactivate()+0x38>)
    8714:	ldr	r1, [r2, #28]
    8716:	str	r1, [r3, #0]
    8718:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    871a:	lsls	r0, r3, #30
    871c:	bpl.n	8726 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    871e:	ldr	r3, [pc, #36]	; (8744 <SdSpiArduinoDriver::deactivate()+0x3c>)
    8720:	ldr	r1, [r2, #32]
    8722:	str	r1, [r3, #0]
    8724:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    8726:	lsls	r1, r3, #29
    8728:	bpl.n	8732 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    872a:	ldr	r3, [pc, #28]	; (8748 <SdSpiArduinoDriver::deactivate()+0x40>)
    872c:	ldr	r1, [r2, #36]	; 0x24
    872e:	str	r1, [r3, #0]
    8730:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8732:	lsls	r3, r3, #28
    8734:	bpl.n	873c <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    8736:	ldr	r3, [pc, #20]	; (874c <SdSpiArduinoDriver::deactivate()+0x44>)
    8738:	ldr	r2, [r2, #40]	; 0x28
    873a:	str	r2, [r3, #0]
    873c:	bx	lr
    873e:	nop
    8740:	.word	0xe000e100
    8744:	.word	0xe000e104
    8748:	.word	0xe000e108
    874c:	.word	0xe000e10c

00008750 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    8750:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8752:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8754:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    8758:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    875a:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    875c:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    875e:	ldr	r3, [r2, #44]	; 0x2c
    8760:	cmp	r3, #0
    8762:	bge.n	875e <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    8764:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    8766:	uxtb	r0, r0
    8768:	bx	lr
    876a:	nop

0000876c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    876c:	push	{r4, r5, r6, lr}
    876e:	mov	r5, r0
    8770:	mov	r4, r1
    8772:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    8774:	mov	r0, r1
    8776:	movs	r1, #255	; 0xff
    8778:	bl	c7ac <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    877c:	ldr	r0, [r5, #0]
    877e:	mov	r3, r6
    8780:	mov	r2, r4
    8782:	mov	r1, r4
    8784:	bl	3034 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8788:	movs	r0, #0
    878a:	pop	{r4, r5, r6, pc}

0000878c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    878c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    878e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8790:	mov.w	r3, #2147483648	; 0x80000000
    8794:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8796:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8798:	ldr	r3, [r2, #44]	; 0x2c
    879a:	cmp	r3, #0
    879c:	bge.n	8798 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    879e:	ldr	r3, [r2, #56]	; 0x38
    87a0:	bx	lr
    87a2:	nop

000087a4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    87a4:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    87a6:	subs	r5, r2, #1
    87a8:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    87ac:	sub.w	sp, sp, #516	; 0x204
    87b0:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    87b2:	bcc.n	87da <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    87b4:	cbz	r2, 87d4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    87b6:	ldr	r2, [r0, #0]
    87b8:	ldr	r2, [r2, #0]
    87ba:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    87bc:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    87c0:	ldrb.w	r3, [r1], #1
    87c4:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    87c6:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    87c8:	ldr	r3, [r2, #44]	; 0x2c
    87ca:	cmp	r3, #0
    87cc:	bge.n	87c8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    87ce:	cmp	r1, r0
		return port().POPR;
    87d0:	ldr	r3, [r2, #56]	; 0x38
    87d2:	bne.n	87c0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    87d4:	add.w	sp, sp, #516	; 0x204
    87d8:	pop	{r4, r5, pc}
    87da:	mov	r5, r0
    87dc:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    87de:	mov	r0, sp
    87e0:	bl	87fc <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    87e4:	mov	r3, r4
    87e6:	mov	r2, sp
    87e8:	mov	r1, sp
    87ea:	ldr	r0, [r5, #0]
    87ec:	bl	3034 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    87f0:	add.w	sp, sp, #516	; 0x204
    87f4:	pop	{r4, r5, pc}
    87f6:	nop

000087f8 <sdCsWrite(unsigned char, bool)>:
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
__attribute__((weak))
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    87f8:	b.w	8e78 <digitalWrite>

000087fc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    87fc:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    87fe:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8802:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8806:	bne.n	88e4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8808:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    880a:	bcc.n	8890 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    880c:	ldr.w	r3, [r1], #4
    8810:	str.w	r3, [r0], #4
    8814:	ldr.w	r3, [r1], #4
    8818:	str.w	r3, [r0], #4
    881c:	ldr.w	r3, [r1], #4
    8820:	str.w	r3, [r0], #4
    8824:	ldr.w	r3, [r1], #4
    8828:	str.w	r3, [r0], #4
    882c:	ldr.w	r3, [r1], #4
    8830:	str.w	r3, [r0], #4
    8834:	ldr.w	r3, [r1], #4
    8838:	str.w	r3, [r0], #4
    883c:	ldr.w	r3, [r1], #4
    8840:	str.w	r3, [r0], #4
    8844:	ldr.w	r3, [r1], #4
    8848:	str.w	r3, [r0], #4
    884c:	ldr.w	r3, [r1], #4
    8850:	str.w	r3, [r0], #4
    8854:	ldr.w	r3, [r1], #4
    8858:	str.w	r3, [r0], #4
    885c:	ldr.w	r3, [r1], #4
    8860:	str.w	r3, [r0], #4
    8864:	ldr.w	r3, [r1], #4
    8868:	str.w	r3, [r0], #4
    886c:	ldr.w	r3, [r1], #4
    8870:	str.w	r3, [r0], #4
    8874:	ldr.w	r3, [r1], #4
    8878:	str.w	r3, [r0], #4
    887c:	ldr.w	r3, [r1], #4
    8880:	str.w	r3, [r0], #4
    8884:	ldr.w	r3, [r1], #4
    8888:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    888c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    888e:	bcs.n	880c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8890:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8892:	bcc.n	88b8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8894:	ldr.w	r3, [r1], #4
    8898:	str.w	r3, [r0], #4
    889c:	ldr.w	r3, [r1], #4
    88a0:	str.w	r3, [r0], #4
    88a4:	ldr.w	r3, [r1], #4
    88a8:	str.w	r3, [r0], #4
    88ac:	ldr.w	r3, [r1], #4
    88b0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    88b4:	subs	r2, #16
	bhs	.Lmid_block_loop
    88b6:	bcs.n	8894 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    88b8:	adds	r2, #12
	blo	.Lcopy_less_than_4
    88ba:	bcc.n	88c8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    88bc:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    88c0:	str.w	r3, [r0], #4
	subs	r2, #4
    88c4:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    88c6:	bcs.n	88bc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    88c8:	adds	r2, #4
	beq	.Ldone
    88ca:	beq.n	88de <memcpy+0xe2>

	lsls	r2, r2, #31
    88cc:	lsls	r2, r2, #31
	itt ne
    88ce:	itt	ne
	ldrbne  r3, [r1], #1
    88d0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    88d4:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    88d8:	bcc.n	88de <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    88da:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    88dc:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    88de:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    88e0:	bx	lr
    88e2:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    88e4:	cmp	r2, #8
	blo	.Lbyte_copy
    88e6:	bcc.n	8910 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    88e8:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    88ea:	beq.n	8808 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    88ec:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    88f0:	beq.n	8808 <memcpy+0xc>

	rsb	r3, #4
    88f2:	rsb	r3, r3, #4
	subs	r2, r3
    88f6:	subs	r2, r2, r3

	lsls    r3, r3, #31
    88f8:	lsls	r3, r3, #31
	itt ne
    88fa:	itt	ne
	ldrbne  r3, [r1], #1
    88fc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8900:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8904:	bcc.n	8808 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8906:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    890a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    890e:	b.n	8808 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8910:	subs	r2, #4
	blo	.Lcopy_less_than_4
    8912:	bcc.n	88c8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8914:	subs	r2, #1
	ldrb    r3, [r1], #1
    8916:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    891a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    891e:	bcs.n	8914 <memcpy+0x118>

	ldrb	r3, [r1]
    8920:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8922:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8924:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8926:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8928:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    892a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    892c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    892e:	bx	lr

00008930 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8930:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    8932:	ldr	r5, [pc, #60]	; (8970 <usb_serial_getchar+0x40>)
    8934:	ldr	r0, [r5, #0]
    8936:	cbz	r0, 8958 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    8938:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    893a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    893c:	adds	r1, r0, r3
    893e:	adds	r3, #1
	if (i >= rx_packet->len) {
    8940:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8942:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    8944:	bcs.n	894c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    8946:	strh	r3, [r0, #2]
	}
	return c;
    8948:	mov	r0, r4
}
    894a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    894c:	bl	9138 <usb_free>
		rx_packet = NULL;
    8950:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    8952:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8954:	str	r3, [r5, #0]
    8956:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8958:	ldr	r3, [pc, #24]	; (8974 <usb_serial_getchar+0x44>)
    895a:	ldrb	r3, [r3, #0]
    895c:	cbz	r3, 896a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    895e:	movs	r0, #3
    8960:	bl	9184 <usb_rx>
    8964:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    8966:	cmp	r0, #0
    8968:	bne.n	8938 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    896a:	mov.w	r0, #4294967295
    896e:	pop	{r3, r4, r5, pc}
    8970:	.word	0x2001dd5c
    8974:	.word	0x2001de48

00008978 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    8978:	push	{r4, lr}
	if (!rx_packet) {
    897a:	ldr	r4, [pc, #36]	; (89a0 <usb_serial_peekchar+0x28>)
    897c:	ldr	r0, [r4, #0]
    897e:	cbz	r0, 8988 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    8980:	ldrh	r3, [r0, #2]
    8982:	add	r0, r3
    8984:	ldrb	r0, [r0, #8]
}
    8986:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8988:	ldr	r3, [pc, #24]	; (89a4 <usb_serial_peekchar+0x2c>)
    898a:	ldrb	r3, [r3, #0]
    898c:	cbz	r3, 899a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    898e:	movs	r0, #3
    8990:	bl	9184 <usb_rx>
    8994:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    8996:	cmp	r0, #0
    8998:	bne.n	8980 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    899a:	mov.w	r0, #4294967295
    899e:	pop	{r4, pc}
    89a0:	.word	0x2001dd5c
    89a4:	.word	0x2001de48

000089a8 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    89a8:	ldr	r3, [pc, #16]	; (89bc <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    89aa:	ldr	r2, [pc, #20]	; (89c0 <usb_serial_available+0x18>)
    89ac:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    89ae:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    89b0:	cbz	r3, 89ba <usb_serial_available+0x12>
    89b2:	ldrh	r2, [r3, #0]
    89b4:	ldrh	r3, [r3, #2]
    89b6:	subs	r3, r2, r3
    89b8:	add	r0, r3
	return count;
}
    89ba:	bx	lr
    89bc:	.word	0x2001dd5c
    89c0:	.word	0x2001e23c

000089c4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    89c4:	ldr	r3, [pc, #44]	; (89f4 <usb_serial_flush_input+0x30>)
    89c6:	ldrb	r3, [r3, #0]
    89c8:	cbz	r3, 89f2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    89ca:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    89cc:	ldr	r4, [pc, #40]	; (89f8 <usb_serial_flush_input+0x34>)
    89ce:	ldr	r0, [r4, #0]
    89d0:	cbz	r0, 89e6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    89d2:	bl	9138 <usb_free>
		rx_packet = NULL;
    89d6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    89d8:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    89da:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    89dc:	bl	9184 <usb_rx>
		if (!rx) break;
    89e0:	cbz	r0, 89f0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    89e2:	bl	9138 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    89e6:	movs	r0, #3
    89e8:	bl	9184 <usb_rx>
		if (!rx) break;
    89ec:	cmp	r0, #0
    89ee:	bne.n	89e2 <usb_serial_flush_input+0x1e>
    89f0:	pop	{r4, pc}
    89f2:	bx	lr
    89f4:	.word	0x2001de48
    89f8:	.word	0x2001dd5c

000089fc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    89fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8a00:	ldr.w	r9, [pc, #248]	; 8afc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8a04:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8a06:	movs	r2, #1
    8a08:	strb.w	r2, [r9]
	while (size > 0) {
    8a0c:	str	r1, [sp, #4]
    8a0e:	cbz	r1, 8a6c <usb_serial_write+0x70>
    8a10:	ldr.w	r8, [pc, #236]	; 8b00 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8a14:	ldr	r7, [pc, #216]	; (8af0 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8a16:	ldr	r6, [sp, #4]
    8a18:	mov	fp, r0
		if (!tx_packet) {
    8a1a:	ldr.w	r0, [r8]
    8a1e:	cbz	r0, 8a8e <usb_serial_write+0x92>
    8a20:	ldr	r5, [pc, #208]	; (8af4 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    8a22:	ldrh	r4, [r0, #2]
    8a24:	rsb	r1, r4, #64	; 0x40
    8a28:	cmp	r1, r6
    8a2a:	it	cs
    8a2c:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8a2e:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8a32:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8a34:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8a38:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    8a3a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8a3c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    8a40:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    8a44:	cbz	r1, 8a5c <usb_serial_write+0x60>
    8a46:	subs	r4, #1
    8a48:	add	r2, r4
    8a4a:	add	r1, fp
    8a4c:	ldrb.w	r4, [fp], #1
    8a50:	strb.w	r4, [r2, #1]!
    8a54:	cmp	fp, r1
    8a56:	bne.n	8a4c <usb_serial_write+0x50>
    8a58:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    8a5c:	cmp.w	lr, #63	; 0x3f
    8a60:	bhi.n	8a7a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    8a62:	ldr	r2, [pc, #148]	; (8af8 <usb_serial_write+0xfc>)
    8a64:	movs	r1, #5
    8a66:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8a68:	cmp	r6, #0
    8a6a:	bne.n	8a1a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    8a6c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    8a6e:	movs	r3, #0
    8a70:	strb.w	r3, [r9]
	return ret;
}
    8a74:	add	sp, #12
    8a76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    8a7a:	movs	r2, #64	; 0x40
    8a7c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8a7e:	mov	r1, r0
    8a80:	movs	r0, #4
    8a82:	bl	92b4 <usb_tx>
			tx_packet = NULL;
    8a86:	movs	r2, #0
    8a88:	str.w	r2, [r8]
    8a8c:	b.n	8a62 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8a8e:	ldrb	r2, [r7, #0]
    8a90:	cbz	r2, 8ade <usb_serial_write+0xe2>
    8a92:	ldr	r5, [pc, #96]	; (8af4 <usb_serial_write+0xf8>)
    8a94:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    8a98:	mov.w	sl, #1
    8a9c:	b.n	8aae <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8a9e:	subs	r4, #1
    8aa0:	beq.n	8ad0 <usb_serial_write+0xd4>
    8aa2:	ldrb	r2, [r5, #0]
    8aa4:	cbnz	r2, 8ad0 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    8aa6:	bl	a1d4 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8aaa:	ldrb	r2, [r7, #0]
    8aac:	cbz	r2, 8ade <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    8aae:	movs	r0, #4
    8ab0:	bl	91c0 <usb_tx_packet_count>
    8ab4:	cmp	r0, #7
    8ab6:	bhi.n	8a9e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    8ab8:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    8abc:	bl	90f8 <usb_malloc>
    8ac0:	str.w	r0, [r8]
					if (tx_packet) break;
    8ac4:	cmp	r0, #0
    8ac6:	bne.n	8a22 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    8ac8:	ldr	r3, [pc, #48]	; (8afc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8aca:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    8acc:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8ace:	bne.n	8aa2 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    8ad0:	movs	r3, #1
					return -1;
    8ad2:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    8ad6:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8ad8:	add	sp, #12
    8ada:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8ade:	movs	r3, #0
					return -1;
    8ae0:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8ae4:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8ae8:	add	sp, #12
    8aea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8aee:	nop
    8af0:	.word	0x2001de48
    8af4:	.word	0x2001dd58
    8af8:	.word	0x2001dd50
    8afc:	.word	0x2001dd51
    8b00:	.word	0x2001dd54

00008b04 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8b04:	push	{lr}
    8b06:	sub	sp, #12
    8b08:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    8b0a:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8b0c:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    8b10:	mov	r0, r3
    8b12:	bl	89fc <usb_serial_write>
}
    8b16:	add	sp, #12
    8b18:	ldr.w	pc, [sp], #4

00008b1c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    8b1c:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    8b1e:	ldr	r5, [pc, #56]	; (8b58 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8b20:	ldr	r4, [pc, #56]	; (8b5c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    8b22:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8b24:	movs	r3, #1
    8b26:	strb	r3, [r4, #0]
	if (!tx_packet) {
    8b28:	cbz	r0, 8b36 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8b2a:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    8b2c:	movs	r3, #0
    8b2e:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8b30:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    8b34:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8b36:	ldr	r3, [pc, #40]	; (8b60 <usb_serial_write_buffer_free+0x44>)
    8b38:	ldrb	r3, [r3, #0]
    8b3a:	cbnz	r3, 8b42 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    8b3c:	movs	r0, #0
    8b3e:	strb	r0, [r4, #0]
			return 0;
    8b40:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8b42:	movs	r0, #4
    8b44:	bl	91c0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8b48:	cmp	r0, #7
    8b4a:	bhi.n	8b3c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    8b4c:	bl	90f8 <usb_malloc>
    8b50:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8b52:	cmp	r0, #0
    8b54:	bne.n	8b2a <usb_serial_write_buffer_free+0xe>
    8b56:	b.n	8b3c <usb_serial_write_buffer_free+0x20>
    8b58:	.word	0x2001dd54
    8b5c:	.word	0x2001dd51
    8b60:	.word	0x2001de48

00008b64 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    8b64:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    8b66:	ldr	r3, [pc, #68]	; (8bac <usb_serial_flush_output+0x48>)
    8b68:	ldrb	r3, [r3, #0]
    8b6a:	cbz	r3, 8b90 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    8b6c:	ldr	r6, [pc, #64]	; (8bb0 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8b6e:	ldr	r5, [pc, #68]	; (8bb4 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    8b70:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8b72:	movs	r7, #1
    8b74:	strb	r7, [r5, #0]
	if (tx_packet) {
    8b76:	cbz	r4, 8b92 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    8b78:	ldr	r2, [pc, #60]	; (8bb8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    8b7a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    8b7c:	movs	r7, #0
    8b7e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8b80:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    8b82:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8b84:	movs	r0, #4
    8b86:	bl	92b4 <usb_tx>
		tx_packet = NULL;
    8b8a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    8b8c:	movs	r3, #0
    8b8e:	strb	r3, [r5, #0]
    8b90:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8b92:	bl	90f8 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8b96:	ldr	r3, [pc, #32]	; (8bb8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    8b98:	cbz	r0, 8ba6 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    8b9a:	mov	r1, r0
    8b9c:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8b9e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8ba0:	bl	92b4 <usb_tx>
    8ba4:	b.n	8b8c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8ba6:	strb	r7, [r3, #0]
    8ba8:	b.n	8b8c <usb_serial_flush_output+0x28>
    8baa:	nop
    8bac:	.word	0x2001de48
    8bb0:	.word	0x2001dd54
    8bb4:	.word	0x2001dd51
    8bb8:	.word	0x2001dd50

00008bbc <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    8bbc:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    8bbe:	ldr	r3, [pc, #56]	; (8bf8 <usb_serial_flush_callback+0x3c>)
    8bc0:	ldrb	r3, [r3, #0]
    8bc2:	cbnz	r3, 8be2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    8bc4:	ldr	r4, [pc, #52]	; (8bfc <usb_serial_flush_callback+0x40>)
    8bc6:	ldr	r1, [r4, #0]
    8bc8:	cbz	r1, 8be4 <usb_serial_flush_callback+0x28>
    8bca:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    8bce:	ldrh	r3, [r1, #2]
    8bd0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8bd2:	movs	r0, #4
    8bd4:	bl	92b4 <usb_tx>
		tx_packet = NULL;
    8bd8:	str	r5, [r4, #0]
    8bda:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8bdc:	ldr	r3, [pc, #32]	; (8c00 <usb_serial_flush_callback+0x44>)
    8bde:	movs	r2, #1
    8be0:	strb	r2, [r3, #0]
    8be2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8be4:	bl	90f8 <usb_malloc>
		if (tx) {
    8be8:	cmp	r0, #0
    8bea:	beq.n	8bdc <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    8bec:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    8bee:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    8bf2:	movs	r0, #4
    8bf4:	b.w	92b4 <usb_tx>
    8bf8:	.word	0x2001dd51
    8bfc:	.word	0x2001dd54
    8c00:	.word	0x2001dd50

00008c04 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    8c04:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8c06:	ldr	r0, [pc, #164]	; (8cac <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8c08:	ldr	r2, [pc, #164]	; (8cb0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    8c0a:	ldr	r3, [pc, #168]	; (8cb4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8c0c:	ldr	r5, [pc, #168]	; (8cb8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8c0e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8c10:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8c12:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8c14:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    8c16:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c18:	ldr	r4, [pc, #160]	; (8cbc <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    8c1a:	cmp	r3, #8
    8c1c:	beq.n	8c80 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8c1e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8c20:	ldr	r0, [pc, #156]	; (8cc0 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c22:	ldr	r1, [pc, #160]	; (8cc4 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8c24:	beq.n	8c96 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    8c26:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    8c28:	ite	eq
    8c2a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8c2c:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8c2e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8c30:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8c32:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8c34:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8c36:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8c38:	ldr	r3, [pc, #140]	; (8cc8 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8c3a:	ldr	r1, [pc, #144]	; (8ccc <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8c3c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8c3e:	ldr	r2, [pc, #144]	; (8cd0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8c40:	cbz	r3, 8c72 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8c42:	movs	r3, #1
    8c44:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8c46:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8c48:	ldr	r3, [pc, #136]	; (8cd4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8c4a:	ldr	r1, [pc, #140]	; (8cd8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8c4c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8c4e:	ldr	r2, [pc, #140]	; (8cdc <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    8c50:	cmp	r3, #1
    8c52:	bls.n	8ca2 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    8c54:	cmp	r3, #4
    8c56:	bls.n	8c78 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    8c58:	cmp	r3, #8
    8c5a:	bls.n	8c9a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    8c5c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8c5e:	ite	ls
    8c60:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8c62:	movhi	r3, #135	; 0x87
    8c64:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8c66:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    8c68:	ldr	r3, [pc, #116]	; (8ce0 <analog_init+0xdc>)
    8c6a:	movs	r2, #1
    8c6c:	strb	r2, [r3, #0]
}
    8c6e:	pop	{r4, r5}
    8c70:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8c72:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8c74:	str	r3, [r2, #0]
    8c76:	b.n	8c48 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8c78:	movs	r3, #132	; 0x84
    8c7a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8c7c:	str	r3, [r2, #0]
    8c7e:	b.n	8c68 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8c80:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c84:	ldr	r1, [pc, #60]	; (8cc4 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8c86:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8c88:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c8a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8c8c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c8e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8c90:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8c92:	str	r3, [r1, #0]
    8c94:	b.n	8c38 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8c96:	movs	r2, #57	; 0x39
    8c98:	b.n	8c8a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8c9a:	movs	r3, #133	; 0x85
    8c9c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8c9e:	str	r3, [r2, #0]
    8ca0:	b.n	8c68 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8ca2:	movs	r3, #128	; 0x80
    8ca4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8ca6:	str	r3, [r2, #0]
    8ca8:	b.n	8c68 <analog_init+0x64>
    8caa:	nop
    8cac:	.word	0x40074000
    8cb0:	.word	0x40074001
    8cb4:	.word	0x20017919
    8cb8:	.word	0x4003b008
    8cbc:	.word	0x4003b00c
    8cc0:	.word	0x400bb008
    8cc4:	.word	0x400bb00c
    8cc8:	.word	0x2001dd62
    8ccc:	.word	0x4003b020
    8cd0:	.word	0x400bb020
    8cd4:	.word	0x2001791a
    8cd8:	.word	0x4003b024
    8cdc:	.word	0x400bb024
    8ce0:	.word	0x2001dd61

00008ce4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    8ce4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    8ce6:	ldr	r4, [pc, #64]	; (8d28 <fault_isr+0x44>)
    8ce8:	b.n	8cfc <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    8cea:	ldr	r3, [r4, #0]
    8cec:	lsls	r1, r3, #21
    8cee:	bmi.n	8d0c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8cf0:	ldr	r3, [r4, #0]
    8cf2:	lsls	r2, r3, #20
    8cf4:	bmi.n	8d16 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    8cf6:	ldr	r3, [r4, #0]
    8cf8:	lsls	r3, r3, #19
    8cfa:	bmi.n	8d20 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    8cfc:	ldr	r3, [r4, #0]
    8cfe:	lsls	r0, r3, #13
    8d00:	bpl.n	8cea <fault_isr+0x6>
    8d02:	bl	9338 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    8d06:	ldr	r3, [r4, #0]
    8d08:	lsls	r1, r3, #21
    8d0a:	bpl.n	8cf0 <fault_isr+0xc>
    8d0c:	bl	ab38 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8d10:	ldr	r3, [r4, #0]
    8d12:	lsls	r2, r3, #20
    8d14:	bpl.n	8cf6 <fault_isr+0x12>
    8d16:	bl	a914 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    8d1a:	ldr	r3, [r4, #0]
    8d1c:	lsls	r3, r3, #19
    8d1e:	bpl.n	8cfc <fault_isr+0x18>
    8d20:	bl	ae30 <uart2_status_isr>
    8d24:	b.n	8cfc <fault_isr+0x18>
    8d26:	nop
    8d28:	.word	0x40048034

00008d2c <unused_isr>:
	}
}

void unused_isr(void)
{
    8d2c:	push	{r3, lr}
	fault_isr();
    8d2e:	bl	8ce4 <fault_isr>
    8d32:	nop

00008d34 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    8d34:	ldr	r3, [pc, #4]	; (8d3c <startup_early_hook+0x8>)
    8d36:	movs	r2, #16
    8d38:	strh	r2, [r3, #0]
    8d3a:	bx	lr
    8d3c:	.word	0x40052000

00008d40 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    8d40:	bx	lr
    8d42:	nop

00008d44 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    8d44:	ldr	r1, [pc, #36]	; (8d6c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    8d46:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    8d48:	ldr	r3, [r1, #0]
	if (incr != 0) {
    8d4a:	cbz	r0, 8d5a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    8d4c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    8d4e:	add	r0, r3
    8d50:	sub.w	r2, r2, #8192	; 0x2000
    8d54:	cmp	r0, r2
    8d56:	bcs.n	8d5e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    8d58:	str	r0, [r1, #0]
	}
	return prev;
    8d5a:	mov	r0, r3
}
    8d5c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    8d5e:	bl	bf74 <__errno>
    8d62:	movs	r3, #12
    8d64:	str	r3, [r0, #0]
			return (void *)-1;
    8d66:	mov.w	r0, #4294967295
    8d6a:	pop	{r3, pc}
    8d6c:	.word	0x2001791c

00008d70 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    8d70:	b.n	8d70 <__cxa_pure_virtual>
    8d72:	nop

00008d74 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    8d74:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    8d76:	ldr	r3, [pc, #68]	; (8dbc <digitalWrite.part.1+0x48>)
    8d78:	ldr.w	r2, [r3, r0, lsl #3]
    8d7c:	ldrb.w	r4, [r2, #640]	; 0x280
    8d80:	cbz	r4, 8d90 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    8d82:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    8d84:	cbz	r1, 8da6 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    8d86:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8d8a:	ldr.w	r4, [sp], #4
    8d8e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    8d90:	add.w	r3, r3, r0, lsl #3
    8d94:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8d96:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    8d98:	cbnz	r1, 8db0 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    8d9a:	bic.w	r2, r2, #2
    8d9e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8da0:	ldr.w	r4, [sp], #4
    8da4:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    8da6:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8daa:	ldr.w	r4, [sp], #4
    8dae:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8db0:	orr.w	r2, r2, #3
    8db4:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8db6:	ldr.w	r4, [sp], #4
    8dba:	bx	lr
    8dbc:	.word	0x00013bf8

00008dc0 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    8dc0:	ldr	r2, [pc, #112]	; (8e34 <pinMode.part.2+0x74>)
    8dc2:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8dc6:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    8dc8:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8dca:	beq.n	8df0 <pinMode.part.2+0x30>
    8dcc:	cmp	r1, #4
    8dce:	beq.n	8e08 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    8dd0:	ldr.w	r0, [r2, r0, lsl #3]
    8dd4:	movs	r2, #0
    8dd6:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    8dda:	cbz	r1, 8de8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    8ddc:	cmp	r1, #2
    8dde:	beq.n	8e22 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    8de0:	cmp	r1, #3
    8de2:	beq.n	8e2a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    8de4:	str	r2, [r3, #0]
    8de6:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    8de8:	mov.w	r2, #256	; 0x100
    8dec:	str	r2, [r3, #0]
    8dee:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8df0:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8df4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8df8:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8dfc:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    8dfe:	ldr	r2, [r3, #0]
    8e00:	bic.w	r2, r2, #32
    8e04:	str	r2, [r3, #0]
    8e06:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8e08:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8e0c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8e10:	movs	r0, #1
    8e12:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8e16:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    8e18:	ldr	r2, [r3, #0]
    8e1a:	orr.w	r2, r2, #32
    8e1e:	str	r2, [r3, #0]
    8e20:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    8e22:	movw	r2, #259	; 0x103
    8e26:	str	r2, [r3, #0]
    8e28:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    8e2a:	mov.w	r2, #258	; 0x102
    8e2e:	str	r2, [r3, #0]
    8e30:	bx	lr
    8e32:	nop
    8e34:	.word	0x00013bf8

00008e38 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    8e38:	adds	r0, #16
    8e3a:	ldr	r3, [pc, #8]	; (8e44 <attachInterruptVector+0xc>)
    8e3c:	str.w	r1, [r3, r0, lsl #2]
    8e40:	bx	lr
    8e42:	nop
    8e44:	.word	0x20017200

00008e48 <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    8e48:	ldr	r3, [pc, #4]	; (8e50 <rtc_get+0x8>)
    8e4a:	ldr	r0, [r3, #0]
}
    8e4c:	bx	lr
    8e4e:	nop
    8e50:	.word	0x4003d000

00008e54 <rtc_set>:

void rtc_set(unsigned long t)
{
    8e54:	push	{r4, r5}
	RTC_SR = 0;
    8e56:	ldr	r3, [pc, #20]	; (8e6c <rtc_set+0x18>)
	RTC_TPR = 0;
    8e58:	ldr	r5, [pc, #20]	; (8e70 <rtc_set+0x1c>)
	RTC_TSR = t;
    8e5a:	ldr	r4, [pc, #24]	; (8e74 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8e5c:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    8e5e:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8e60:	str	r2, [r3, #0]
	RTC_TPR = 0;
    8e62:	str	r2, [r5, #0]
	RTC_TSR = t;
    8e64:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    8e66:	str	r1, [r3, #0]
}
    8e68:	pop	{r4, r5}
    8e6a:	bx	lr
    8e6c:	.word	0x4003d014
    8e70:	.word	0x4003d004
    8e74:	.word	0x4003d000

00008e78 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    8e78:	cmp	r0, #63	; 0x3f
    8e7a:	bhi.n	8e80 <digitalWrite+0x8>
    8e7c:	b.w	8d74 <digitalWrite.part.1>
    8e80:	bx	lr
    8e82:	nop

00008e84 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    8e84:	cmp	r0, #63	; 0x3f
    8e86:	bhi.n	8e96 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    8e88:	ldr	r3, [pc, #16]	; (8e9c <digitalRead+0x18>)
    8e8a:	ldr.w	r3, [r3, r0, lsl #3]
    8e8e:	ldrb.w	r0, [r3, #512]	; 0x200
    8e92:	uxtb	r0, r0
    8e94:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    8e96:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    8e98:	bx	lr
    8e9a:	nop
    8e9c:	.word	0x00013bf8

00008ea0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    8ea0:	cmp	r0, #63	; 0x3f
    8ea2:	bhi.n	8ea8 <pinMode+0x8>
    8ea4:	b.w	8dc0 <pinMode.part.2>
    8ea8:	bx	lr
    8eaa:	nop

00008eac <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8eac:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    8eae:	ldr	r1, [pc, #48]	; (8ee0 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8eb0:	ldr	r3, [pc, #48]	; (8ee4 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8eb2:	ldr	r2, [pc, #52]	; (8ee8 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8eb4:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    8eb6:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8eb8:	ldr	r2, [r2, #0]
	__enable_irq();
    8eba:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8ebc:	lsls	r2, r2, #5
    8ebe:	bpl.n	8ec6 <micros+0x1a>
    8ec0:	cmp	r3, #50	; 0x32
    8ec2:	it	hi
    8ec4:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8ec6:	ldr	r1, [pc, #36]	; (8eec <micros+0x40>)
    8ec8:	rsb	r3, r3, #95744	; 0x17600
    8ecc:	mov.w	r2, #1000	; 0x3e8
    8ed0:	adds	r3, #255	; 0xff
    8ed2:	umull	r1, r3, r1, r3
    8ed6:	mul.w	r0, r2, r0
}
    8eda:	add.w	r0, r0, r3, lsr #6
    8ede:	bx	lr
    8ee0:	.word	0x2001dd64
    8ee4:	.word	0xe000e018
    8ee8:	.word	0xe000ed04
    8eec:	.word	0xaaaaaaab

00008ef0 <delay>:

void delay(uint32_t ms)
{
    8ef0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ef4:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8ef6:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    8ef8:	ldr	r7, [pc, #128]	; (8f7c <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8efa:	ldr	r3, [pc, #132]	; (8f80 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8efc:	ldr	r2, [pc, #132]	; (8f84 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8efe:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    8f00:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8f02:	ldr	r2, [r2, #0]
	__enable_irq();
    8f04:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8f06:	lsls	r2, r2, #5
    8f08:	bpl.n	8f10 <delay+0x20>
    8f0a:	cmp	r3, #50	; 0x32
    8f0c:	it	hi
    8f0e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    8f10:	cbz	r5, 8f78 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8f12:	rsb	r3, r3, #95744	; 0x17600
    8f16:	ldr	r6, [pc, #112]	; (8f88 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8f18:	ldr.w	r9, [pc, #100]	; 8f80 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8f1c:	ldr.w	r8, [pc, #100]	; 8f84 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8f20:	adds	r3, #255	; 0xff
    8f22:	mov.w	r2, #1000	; 0x3e8
    8f26:	umull	r1, r3, r6, r3
    8f2a:	mul.w	r4, r2, r4
    8f2e:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8f32:	cpsid	i
	current = SYST_CVR;
    8f34:	ldr.w	r1, [r9]
	count = systick_millis_count;
    8f38:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8f3a:	ldr.w	lr, [r8]
	__enable_irq();
    8f3e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8f40:	rsb	r3, r1, #95744	; 0x17600
    8f44:	adds	r3, #255	; 0xff
    8f46:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8f4a:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8f4e:	rsb	r3, r4, r3, lsr #6
    8f52:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8f56:	beq.n	8f5e <delay+0x6e>
    8f58:	cmp	r1, #50	; 0x32
    8f5a:	it	hi
    8f5c:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8f5e:	mla	r3, r0, r2, r3
    8f62:	cmp.w	r3, #1000	; 0x3e8
    8f66:	bcc.n	8f72 <delay+0x82>
				ms--;
				if (ms == 0) return;
    8f68:	subs	r5, #1
    8f6a:	beq.n	8f78 <delay+0x88>
				start += 1000;
    8f6c:	add.w	r4, r4, #1000	; 0x3e8
    8f70:	b.n	8f32 <delay+0x42>
			}
			yield();
    8f72:	bl	a1d4 <yield>
		}
    8f76:	b.n	8f32 <delay+0x42>
    8f78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8f7c:	.word	0x2001dd64
    8f80:	.word	0xe000e018
    8f84:	.word	0xe000ed04
    8f88:	.word	0xaaaaaaab

00008f8c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    8f8c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8f8e:	ldr	r3, [pc, #312]	; (90c8 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8f90:	ldr	r0, [pc, #312]	; (90cc <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    8f92:	ldr.w	ip, [pc, #348]	; 90f0 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    8f96:	ldr	r4, [pc, #312]	; (90d0 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    8f98:	ldr	r1, [pc, #312]	; (90d4 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8f9a:	ldr.w	lr, [pc, #344]	; 90f4 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    8f9e:	ldr	r6, [pc, #312]	; (90d8 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    8fa0:	ldr	r5, [pc, #312]	; (90dc <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    8fa2:	ldr	r7, [pc, #316]	; (90e0 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8fa4:	mov.w	r2, #134217728	; 0x8000000
    8fa8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    8faa:	mov.w	r2, #268435456	; 0x10000000
    8fae:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    8fb0:	mov.w	r2, #536870912	; 0x20000000
    8fb4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    8fb6:	mov.w	r2, #1073741824	; 0x40000000
    8fba:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    8fbc:	mov.w	r2, #2147483648	; 0x80000000
    8fc0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8fc2:	movs	r2, #0
    8fc4:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8fc6:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    8fc8:	movw	r0, #49151	; 0xbfff
    8fcc:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8fd0:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    8fd4:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    8fd6:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    8fda:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    8fdc:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    8fde:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8fe0:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    8fe4:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    8fe6:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    8fea:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    8fec:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    8ff0:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    8ff2:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    8ff6:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8ffa:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    8ffe:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9002:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    9006:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9008:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    900c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    900e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9010:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    9012:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9016:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9018:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    901a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    901c:	ldr	r4, [pc, #196]	; (90e4 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    901e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    9020:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9022:	movs	r1, #9
    9024:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9026:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    902a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    902e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    9030:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9032:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9034:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9036:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    9038:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    903a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    903e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    9042:	add.w	r7, r7, #520192	; 0x7f000
    9046:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9048:	addw	r4, r4, #2044	; 0x7fc
    904c:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    904e:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    9050:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    9052:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9054:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9058:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    905a:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    905e:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    9062:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9064:	sub.w	r4, r4, #460800	; 0x70800
    9068:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    906c:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    906e:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9070:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9074:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9076:	ldr	r0, [pc, #112]	; (90e8 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9078:	orr.w	r1, r1, #512	; 0x200
    907c:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    907e:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9080:	ldr	r4, [pc, #104]	; (90ec <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    9082:	add.w	lr, lr, #65280	; 0xff00
    9086:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    908a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    908e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9092:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9096:	orr.w	r1, r1, #33554432	; 0x2000000
    909a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    909c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    90a0:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    90a4:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    90a6:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    90a8:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    90aa:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    90ac:	str	r2, [r4, #0]
#endif
	analog_init();
    90ae:	bl	8c04 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    90b2:	movs	r0, #25
    90b4:	bl	8ef0 <delay>
	usb_init();
    90b8:	bl	9e04 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    90bc:	movw	r0, #275	; 0x113
}
    90c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    90c4:	b.w	8ef0 <delay>
    90c8:	.word	0xe000e104
    90cc:	.word	0x40038004
    90d0:	.word	0x40038014
    90d4:	.word	0x4003801c
    90d8:	.word	0x40038024
    90dc:	.word	0x4003802c
    90e0:	.word	0x40038034
    90e4:	.word	0x40038000
    90e8:	.word	0x40048004
    90ec:	.word	0x400c9000
    90f0:	.word	0x40038008
    90f4:	.word	0x4003800c

000090f8 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    90f8:	cpsid	i
	avail = usb_buffer_available;
    90fa:	ldr	r0, [pc, #52]	; (9130 <usb_malloc+0x38>)
    90fc:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    90fe:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    9102:	cmp	r3, #11
    9104:	bgt.n	9128 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9106:	mov.w	r1, #2147483648	; 0x80000000
    910a:	lsrs	r1, r3
    910c:	bic.w	r2, r2, r1
    9110:	str	r2, [r0, #0]
	__enable_irq();
    9112:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9114:	ldr	r0, [pc, #28]	; (9134 <usb_malloc+0x3c>)
    9116:	add.w	r3, r3, r3, lsl #3
    911a:	lsls	r3, r3, #3
    911c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    911e:	movs	r1, #0
    9120:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    9122:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9124:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9126:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9128:	cpsie	i
		return NULL;
    912a:	movs	r0, #0
    912c:	bx	lr
    912e:	nop
    9130:	.word	0x20017920
    9134:	.word	0x200173d0

00009138 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9138:	ldr	r3, [pc, #52]	; (9170 <usb_free+0x38>)
    913a:	ldr	r2, [pc, #56]	; (9174 <usb_free+0x3c>)
    913c:	subs	r3, r0, r3
    913e:	umull	r2, r3, r2, r3
    9142:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9144:	cmp	r3, #11
    9146:	bhi.n	9162 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9148:	ldr	r2, [pc, #44]	; (9178 <usb_free+0x40>)
    914a:	ldrb	r2, [r2, #0]
    914c:	cbnz	r2, 9164 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    914e:	cpsid	i
	usb_buffer_available |= mask;
    9150:	ldr	r0, [pc, #40]	; (917c <usb_free+0x44>)
    9152:	mov.w	r1, #2147483648	; 0x80000000
    9156:	ldr	r2, [r0, #0]
    9158:	lsr.w	r3, r1, r3
    915c:	orrs	r2, r3
    915e:	str	r2, [r0, #0]
	__enable_irq();
    9160:	cpsie	i
    9162:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9164:	ldr	r2, [pc, #24]	; (9180 <usb_free+0x48>)
    9166:	ldrb	r2, [r2, #0]
    9168:	cmp	r2, #0
    916a:	beq.n	914e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    916c:	b.w	91ec <usb_rx_memory>
    9170:	.word	0x200173d0
    9174:	.word	0x38e38e39
    9178:	.word	0x2001de3d
    917c:	.word	0x20017920
    9180:	.word	0x2001de48

00009184 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9184:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9186:	cmp	r3, #3
    9188:	bhi.n	91b4 <usb_rx+0x30>
	__disable_irq();
    918a:	cpsid	i
	ret = rx_first[endpoint];
    918c:	ldr	r1, [pc, #40]	; (91b8 <usb_rx+0x34>)
    918e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9192:	cbz	r0, 91b0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9194:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9196:	ldr	r4, [pc, #36]	; (91bc <usb_rx+0x38>)
    9198:	ldrh	r5, [r0, #0]
    919a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    919e:	ldr	r6, [r0, #4]
    91a0:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    91a4:	subs	r2, r2, r5
    91a6:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    91aa:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    91ac:	pop	{r4, r5, r6}
    91ae:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    91b0:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    91b2:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    91b4:	movs	r0, #0
    91b6:	bx	lr
    91b8:	.word	0x2001ddc0
    91bc:	.word	0x2001e23c

000091c0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    91c0:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    91c2:	cmp	r0, #3
    91c4:	bhi.n	91de <usb_tx_packet_count+0x1e>
	__disable_irq();
    91c6:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    91c8:	ldr	r3, [pc, #28]	; (91e8 <usb_tx_packet_count+0x28>)
    91ca:	ldr.w	r3, [r3, r0, lsl #2]
    91ce:	cbz	r3, 91e2 <usb_tx_packet_count+0x22>
    91d0:	movs	r0, #0
    91d2:	ldr	r3, [r3, #4]
    91d4:	adds	r0, #1
    91d6:	cmp	r3, #0
    91d8:	bne.n	91d2 <usb_tx_packet_count+0x12>
	__enable_irq();
    91da:	cpsie	i
	return count;
    91dc:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    91de:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    91e0:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    91e2:	mov	r0, r3
    91e4:	b.n	91da <usb_tx_packet_count+0x1a>
    91e6:	nop
    91e8:	.word	0x2001de14

000091ec <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    91ec:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    91ee:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    91f0:	ldr	r2, [pc, #172]	; (92a0 <usb_rx_memory+0xb4>)
    91f2:	ldrb	r3, [r2, #0]
    91f4:	lsls	r5, r3, #28
    91f6:	bpl.n	9206 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    91f8:	ldr	r3, [pc, #168]	; (92a4 <usb_rx_memory+0xb8>)
    91fa:	ldr	r1, [r3, #32]
    91fc:	cmp	r1, #0
    91fe:	beq.n	926e <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9200:	ldr	r1, [r3, #40]	; 0x28
    9202:	cmp	r1, #0
    9204:	beq.n	928a <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9206:	ldrb	r3, [r2, #1]
    9208:	lsls	r4, r3, #28
    920a:	bpl.n	921a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    920c:	ldr	r3, [pc, #148]	; (92a4 <usb_rx_memory+0xb8>)
    920e:	ldr	r1, [r3, #64]	; 0x40
    9210:	cmp	r1, #0
    9212:	beq.n	9292 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9214:	ldr	r1, [r3, #72]	; 0x48
    9216:	cmp	r1, #0
    9218:	beq.n	928e <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    921a:	ldrb	r3, [r2, #2]
    921c:	lsls	r1, r3, #28
    921e:	bpl.n	922c <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9220:	ldr	r3, [pc, #128]	; (92a4 <usb_rx_memory+0xb8>)
    9222:	ldr	r1, [r3, #96]	; 0x60
    9224:	cmp	r1, #0
    9226:	beq.n	9296 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9228:	ldr	r1, [r3, #104]	; 0x68
    922a:	cbz	r1, 9250 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    922c:	ldrb	r3, [r2, #3]
    922e:	lsls	r3, r3, #28
    9230:	bpl.n	9242 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9232:	ldr	r3, [pc, #112]	; (92a4 <usb_rx_memory+0xb8>)
    9234:	ldr.w	r2, [r3, #128]	; 0x80
    9238:	cbz	r2, 929a <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    923a:	ldr.w	r2, [r3, #136]	; 0x88
    923e:	movs	r1, #17
    9240:	cbz	r2, 9252 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9242:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9244:	ldr	r3, [pc, #96]	; (92a8 <usb_rx_memory+0xbc>)
    9246:	movs	r2, #0
    9248:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    924a:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    924c:	b.w	9138 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9250:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9252:	ldr	r4, [pc, #84]	; (92a8 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9254:	ldr	r5, [pc, #84]	; (92ac <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    9256:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9258:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    925c:	add.w	r3, r3, r1, lsl #3
    9260:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9262:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9264:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9266:	strb	r2, [r4, #0]
				__enable_irq();
    9268:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    926a:	pop	{r4, r5}
    926c:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    926e:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9270:	ldr	r4, [pc, #52]	; (92a8 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9272:	ldr	r5, [pc, #60]	; (92b0 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    9274:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9276:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    927a:	add.w	r3, r3, r2, lsl #3
    927e:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9280:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9282:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9284:	strb	r2, [r4, #0]
				__enable_irq();
    9286:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9288:	b.n	926a <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    928a:	movs	r1, #5
    928c:	b.n	9252 <usb_rx_memory+0x66>
    928e:	movs	r1, #9
    9290:	b.n	9252 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9292:	movs	r2, #8
    9294:	b.n	9270 <usb_rx_memory+0x84>
    9296:	movs	r2, #12
    9298:	b.n	9270 <usb_rx_memory+0x84>
    929a:	movs	r2, #16
    929c:	b.n	9270 <usb_rx_memory+0x84>
    929e:	nop
    92a0:	.word	0x00013e24
    92a4:	.word	0x1fff0000
    92a8:	.word	0x2001de3d
    92ac:	.word	0x004000c8
    92b0:	.word	0x00400088

000092b4 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    92b4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    92b6:	cmp	r3, #3
    92b8:	bhi.n	92f6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    92ba:	ldr	r2, [pc, #108]	; (9328 <usb_tx+0x74>)
    92bc:	lsls	r0, r0, #5
    92be:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    92c2:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    92c4:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    92c6:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    92c8:	ldr	r4, [pc, #96]	; (932c <usb_tx+0x78>)
    92ca:	ldrb	r2, [r4, r3]
    92cc:	cmp	r2, #3
    92ce:	bhi.n	9308 <usb_tx+0x54>
    92d0:	tbb	[pc, r2]
    92d4:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    92d8:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    92da:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    92dc:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    92de:	tst.w	r0, #8
    92e2:	ite	ne
    92e4:	movne	r3, #200	; 0xc8
    92e6:	moveq	r3, #136	; 0x88
    92e8:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    92ec:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    92ee:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    92f0:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    92f2:	cpsie	i
}
    92f4:	pop	{r4, r5}
    92f6:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    92f8:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    92fa:	movs	r2, #2
		break;
    92fc:	b.n	92da <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    92fe:	movs	r2, #5
    9300:	b.n	92da <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    9302:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    9304:	movs	r2, #4
		break;
    9306:	b.n	92da <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9308:	ldr	r2, [pc, #36]	; (9330 <usb_tx+0x7c>)
    930a:	ldr.w	r0, [r2, r3, lsl #2]
    930e:	cbz	r0, 9320 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    9310:	ldr	r2, [pc, #32]	; (9334 <usb_tx+0x80>)
    9312:	ldr.w	r0, [r2, r3, lsl #2]
    9316:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9318:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    931c:	cpsie	i
		return;
    931e:	b.n	92f4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    9320:	str.w	r1, [r2, r3, lsl #2]
    9324:	ldr	r2, [pc, #12]	; (9334 <usb_tx+0x80>)
    9326:	b.n	9318 <usb_tx+0x64>
    9328:	.word	0x1fff0000
    932c:	.word	0x2001de4c
    9330:	.word	0x2001de14
    9334:	.word	0x2001de24

00009338 <usb_isr>:
}



void usb_isr(void)
{
    9338:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    933c:	ldr.w	fp, [pc, #792]	; 9658 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    9340:	ldr.w	sl, [pc, #792]	; 965c <usb_isr+0x324>
}



void usb_isr(void)
{
    9344:	sub	sp, #28
    9346:	b.n	93d2 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9348:	ldr	r7, [pc, #696]	; (9604 <usb_isr+0x2cc>)
    934a:	mov.w	r8, r3, lsr #2
    934e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9352:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9354:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9358:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    935c:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    935e:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9362:	and.w	r4, r3, #255	; 0xff
    9366:	cmp	r3, #0
    9368:	bne.w	9574 <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    936c:	ldr.w	r3, [r7, r8, lsl #3]
    9370:	lsrs	r3, r3, #16
    9372:	uxth	r1, r3
    9374:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    9378:	cmp	r3, #0
    937a:	beq.w	9562 <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    937e:	ldr	r3, [pc, #648]	; (9608 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    9380:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    9384:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    9388:	ldr.w	r2, [r3, r6, lsl #2]
    938c:	cmp	r2, #0
    938e:	beq.w	966e <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    9392:	ldr	r5, [pc, #632]	; (960c <usb_isr+0x2d4>)
    9394:	ldr.w	r3, [r5, r6, lsl #2]
    9398:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    939a:	ldr	r4, [pc, #628]	; (9610 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    939c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    93a0:	ldrh.w	r3, [r4, r6, lsl #1]
    93a4:	add	r1, r3
    93a6:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    93aa:	bl	90f8 <usb_malloc>
					if (packet) {
    93ae:	cmp	r0, #0
    93b0:	beq.w	9660 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    93b4:	ldr	r2, [pc, #604]	; (9614 <usb_isr+0x2dc>)
    93b6:	ldr	r3, [pc, #608]	; (9618 <usb_isr+0x2e0>)
    93b8:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    93bc:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    93c0:	it	ne
    93c2:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    93c4:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    93c8:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    93cc:	movs	r3, #8
    93ce:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    93d2:	ldrb.w	r4, [fp]
    93d6:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    93d8:	lsls	r1, r4, #29
    93da:	bpl.n	9414 <usb_isr+0xdc>
		if (usb_configuration) {
    93dc:	ldr	r3, [pc, #572]	; (961c <usb_isr+0x2e4>)
    93de:	ldrb	r3, [r3, #0]
    93e0:	cbz	r3, 940e <usb_isr+0xd6>
			t = usb_reboot_timer;
    93e2:	ldr	r1, [pc, #572]	; (9620 <usb_isr+0x2e8>)
    93e4:	ldrb	r2, [r1, #0]
			if (t) {
    93e6:	and.w	r3, r2, #255	; 0xff
    93ea:	cbz	r2, 93f8 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    93ec:	subs	r3, #1
    93ee:	uxtb	r3, r3
    93f0:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    93f2:	cmp	r3, #0
    93f4:	beq.w	9dd6 <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    93f8:	ldr	r1, [pc, #552]	; (9624 <usb_isr+0x2ec>)
    93fa:	ldrb	r2, [r1, #0]
			if (t) {
    93fc:	and.w	r3, r2, #255	; 0xff
    9400:	cbz	r2, 940e <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    9402:	subs	r3, #1
    9404:	uxtb	r3, r3
    9406:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9408:	cmp	r3, #0
    940a:	beq.w	95fc <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    940e:	movs	r3, #4
    9410:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    9414:	and.w	r3, r4, #8
    9418:	and.w	r2, r3, #255	; 0xff
    941c:	cmp	r3, #0
    941e:	beq.w	95ce <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    9422:	ldrb.w	r3, [sl]
    9426:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    9428:	lsrs	r6, r3, #4
    942a:	bne.n	9348 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    942c:	lsrs	r4, r3, #2
    942e:	ldr.w	r9, [pc, #468]	; 9604 <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9432:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9436:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    943a:	ubfx	r2, r2, #2, #4
    943e:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    9440:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9442:	cmp	r2, #12
    9444:	bhi.n	9544 <usb_isr+0x20c>
    9446:	tbb	[pc, r2]
    944a:	.short	0x8181
    944c:	.word	0x7d7d7d7d
    9450:	.word	0x7d477d7d
    9454:	.short	0x7d7d
    9456:	.byte	0x07
    9457:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9458:	ldr	r0, [r1, #0]
    945a:	ldr	r5, [pc, #460]	; (9628 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    945c:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    945e:	ldr	r7, [pc, #460]	; (962c <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9460:	ldr	r6, [pc, #460]	; (9630 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9462:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9464:	uxth	r1, r0
    9466:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    946a:	ldr	r3, [pc, #424]	; (9614 <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    946c:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    946e:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9472:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9474:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9476:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    947a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    947c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    9480:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9484:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    9488:	ldr	r4, [pc, #376]	; (9604 <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    948a:	bhi.w	9676 <usb_isr+0x33e>
    948e:	cmp.w	r1, #1664	; 0x680
    9492:	bcs.w	9b86 <usb_isr+0x84e>
    9496:	cmp.w	r1, #258	; 0x102
    949a:	beq.w	9b62 <usb_isr+0x82a>
    949e:	bhi.w	99b0 <usb_isr+0x678>
    94a2:	cmp	r1, #128	; 0x80
    94a4:	beq.w	9a80 <usb_isr+0x748>
    94a8:	cmp	r1, #130	; 0x82
    94aa:	bne.w	9aea <usb_isr+0x7b2>
    94ae:	ldrh	r1, [r5, #4]
    94b0:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    94b4:	cmp	r1, #4
    94b6:	bhi.w	9aea <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    94ba:	ldr	r0, [pc, #376]	; (9634 <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    94bc:	ldr	r4, [pc, #376]	; (9638 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    94be:	lsls	r1, r1, #2
    94c0:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    94c2:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    94c4:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    94c6:	ldrb	r2, [r0, #0]
    94c8:	lsls	r3, r2, #30
    94ca:	bpl.w	9bc0 <usb_isr+0x888>
    94ce:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    94d2:	mov.w	lr, #2
    94d6:	b.n	9a8a <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    94d8:	ldr	r7, [pc, #336]	; (962c <usb_isr+0x2f4>)
    94da:	ldr	r2, [r7, #0]
		if (data) {
    94dc:	cbz	r2, 9530 <usb_isr+0x1f8>
			size = ep0_tx_len;
    94de:	ldr	r3, [pc, #348]	; (963c <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94e0:	ldr	r6, [pc, #332]	; (9630 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    94e2:	ldr	r1, [pc, #348]	; (9640 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    94e4:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94e6:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    94e8:	ldrb	r5, [r1, #0]
    94ea:	cmp	r0, #64	; 0x40
    94ec:	mov	lr, r0
    94ee:	orr.w	r8, r5, #2
    94f2:	it	cs
    94f4:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94f8:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    94fa:	eor.w	r4, r4, #1
    94fe:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9500:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9504:	ite	eq
    9506:	moveq	r4, #136	; 0x88
    9508:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    950a:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    950e:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9510:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9514:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9518:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    951a:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    951c:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    9520:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9522:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9524:	cbnz	r0, 952e <usb_isr+0x1f6>
    9526:	cmp.w	lr, #64	; 0x40
    952a:	it	ne
    952c:	movne	r2, #0
    952e:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    9530:	ldr	r3, [pc, #244]	; (9628 <usb_isr+0x2f0>)
    9532:	ldrh	r2, [r3, #0]
    9534:	cmp.w	r2, #1280	; 0x500
    9538:	bne.n	9544 <usb_isr+0x20c>
			setup.bRequest = 0;
    953a:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    953c:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    953e:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9540:	ldr	r3, [pc, #256]	; (9644 <usb_isr+0x30c>)
    9542:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9544:	ldr	r2, [pc, #256]	; (9648 <usb_isr+0x310>)
    9546:	movs	r3, #1
    9548:	strb	r3, [r2, #0]
    954a:	b.n	93cc <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    954c:	ldr	r2, [pc, #216]	; (9628 <usb_isr+0x2f0>)
    954e:	ldrh	r5, [r2, #0]
    9550:	movw	r0, #8225	; 0x2021
    9554:	cmp	r5, r0
    9556:	beq.w	9958 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    955a:	ldr	r2, [pc, #184]	; (9614 <usb_isr+0x2dc>)
    955c:	str.w	r2, [r9, r4, lsl #3]
    9560:	b.n	9544 <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9562:	ldr	r2, [pc, #176]	; (9614 <usb_isr+0x2dc>)
    9564:	ldr	r3, [pc, #176]	; (9618 <usb_isr+0x2e0>)
    9566:	tst.w	r9, #8
    956a:	it	ne
    956c:	movne	r3, r2
    956e:	str.w	r3, [r7, r8, lsl #3]
    9572:	b.n	93cc <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    9574:	bl	9138 <usb_free>
				packet = tx_first[endpoint];
    9578:	ldr	r2, [pc, #208]	; (964c <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    957a:	ldr	r1, [pc, #212]	; (9650 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    957c:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    9580:	cmp	r3, #0
    9582:	beq.w	98f2 <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9586:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9588:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    958a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    958e:	add.w	r2, r3, #8
    9592:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    9596:	cmp	r4, #3
    9598:	bhi.n	95a6 <usb_isr+0x26e>
    959a:	tbb	[pc, r4]
    959e:	.short	0x0f12
    95a0:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    95a2:	movs	r2, #4
    95a4:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    95a6:	ldrh	r2, [r3, #0]
    95a8:	tst.w	r9, #8
    95ac:	ite	eq
    95ae:	moveq	r3, #136	; 0x88
    95b0:	movne	r3, #200	; 0xc8
    95b2:	orr.w	r3, r3, r2, lsl #16
    95b6:	str.w	r3, [r7, r8, lsl #3]
    95ba:	b.n	93cc <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    95bc:	movs	r2, #2
    95be:	strb	r2, [r1, r6]
						break;
    95c0:	b.n	95a6 <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    95c2:	movs	r2, #3
    95c4:	strb	r2, [r1, r6]
						break;
    95c6:	b.n	95a6 <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    95c8:	movs	r2, #5
    95ca:	strb	r2, [r1, r6]
						break;
    95cc:	b.n	95a6 <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    95ce:	lsls	r0, r4, #31
    95d0:	bmi.w	9a08 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    95d4:	lsls	r1, r4, #24
    95d6:	bmi.w	9a6c <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    95da:	lsls	r2, r4, #30
    95dc:	bpl.n	95ec <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    95de:	ldr	r2, [pc, #116]	; (9654 <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    95e0:	ldr	r1, [pc, #116]	; (9658 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    95e2:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    95e4:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    95e6:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    95e8:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    95ea:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    95ec:	lsls	r3, r4, #27
    95ee:	bpl.n	95f6 <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    95f0:	ldr	r3, [pc, #100]	; (9658 <usb_isr+0x320>)
    95f2:	movs	r2, #16
    95f4:	strb	r2, [r3, #0]
	}

}
    95f6:	add	sp, #28
    95f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    95fc:	bl	8bbc <usb_serial_flush_callback>
    9600:	b.n	940e <usb_isr+0xd6>
    9602:	nop
    9604:	.word	0x1fff0000
    9608:	.word	0x2001ddc0
    960c:	.word	0x2001dd6c
    9610:	.word	0x2001e23c
    9614:	.word	0x004000c8
    9618:	.word	0x00400088
    961c:	.word	0x2001de48
    9620:	.word	0x2001ddd1
    9624:	.word	0x2001dd50
    9628:	.word	0x2001de34
    962c:	.word	0x2001dd68
    9630:	.word	0x2001ddd0
    9634:	.word	0x400720c0
    9638:	.word	0x2001de40
    963c:	.word	0x2001dd7c
    9640:	.word	0x2001de3c
    9644:	.word	0x40072098
    9648:	.word	0x40072094
    964c:	.word	0x2001de14
    9650:	.word	0x2001de4c
    9654:	.word	0x40072088
    9658:	.word	0x40072080
    965c:	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9660:	ldr	r2, [pc, #684]	; (9910 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    9662:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    9666:	ldrb	r3, [r2, #0]
    9668:	adds	r3, #1
    966a:	strb	r3, [r2, #0]
    966c:	b.n	93cc <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    966e:	str.w	r0, [r3, r6, lsl #2]
    9672:	ldr	r5, [pc, #672]	; (9914 <usb_isr+0x5dc>)
    9674:	b.n	939a <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9676:	movw	r0, #8225	; 0x2021
    967a:	cmp	r1, r0
    967c:	beq.w	98ea <usb_isr+0x5b2>
    9680:	bhi.w	99e2 <usb_isr+0x6aa>
    9684:	cmp.w	r1, #2176	; 0x880
    9688:	beq.w	9ac2 <usb_isr+0x78a>
    968c:	cmp.w	r1, #2304	; 0x900
    9690:	bne.w	9aea <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9694:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    9696:	ldr	r1, [pc, #640]	; (9918 <usb_isr+0x5e0>)
    9698:	ldrb	r0, [r5, #2]
    969a:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    969c:	lsls	r2, r2, #24
    969e:	bmi.w	9d2c <usb_isr+0x9f4>
    96a2:	ldr.w	r2, [r9, #40]	; 0x28
    96a6:	ldr	r1, [pc, #628]	; (991c <usb_isr+0x5e4>)
    96a8:	lsls	r3, r2, #24
    96aa:	bmi.w	9d22 <usb_isr+0x9ea>
    96ae:	ldr.w	r2, [r9, #48]	; 0x30
    96b2:	ldr	r1, [pc, #616]	; (991c <usb_isr+0x5e4>)
    96b4:	lsls	r5, r2, #24
    96b6:	bmi.w	9d18 <usb_isr+0x9e0>
    96ba:	ldr.w	r2, [r9, #56]	; 0x38
    96be:	ldr	r1, [pc, #604]	; (991c <usb_isr+0x5e4>)
    96c0:	lsls	r4, r2, #24
    96c2:	bmi.w	9d0e <usb_isr+0x9d6>
    96c6:	ldr.w	r2, [r9, #64]	; 0x40
    96ca:	ldr	r1, [pc, #592]	; (991c <usb_isr+0x5e4>)
    96cc:	lsls	r0, r2, #24
    96ce:	bmi.w	9d04 <usb_isr+0x9cc>
    96d2:	ldr.w	r2, [r9, #72]	; 0x48
    96d6:	ldr	r1, [pc, #580]	; (991c <usb_isr+0x5e4>)
    96d8:	lsls	r2, r2, #24
    96da:	bmi.w	9cfa <usb_isr+0x9c2>
    96de:	ldr.w	r2, [r9, #80]	; 0x50
    96e2:	ldr	r1, [pc, #568]	; (991c <usb_isr+0x5e4>)
    96e4:	lsls	r3, r2, #24
    96e6:	bmi.w	9cf0 <usb_isr+0x9b8>
    96ea:	ldr.w	r2, [r9, #88]	; 0x58
    96ee:	ldr	r1, [pc, #556]	; (991c <usb_isr+0x5e4>)
    96f0:	lsls	r5, r2, #24
    96f2:	bmi.w	9ce6 <usb_isr+0x9ae>
    96f6:	ldr.w	r2, [r9, #96]	; 0x60
    96fa:	ldr	r1, [pc, #544]	; (991c <usb_isr+0x5e4>)
    96fc:	lsls	r4, r2, #24
    96fe:	bmi.w	9d54 <usb_isr+0xa1c>
    9702:	ldr.w	r2, [r9, #104]	; 0x68
    9706:	ldr	r1, [pc, #532]	; (991c <usb_isr+0x5e4>)
    9708:	lsls	r0, r2, #24
    970a:	bmi.w	9d4a <usb_isr+0xa12>
    970e:	ldr.w	r2, [r9, #112]	; 0x70
    9712:	ldr	r1, [pc, #520]	; (991c <usb_isr+0x5e4>)
    9714:	lsls	r2, r2, #24
    9716:	bmi.w	9d40 <usb_isr+0xa08>
    971a:	ldr.w	r2, [r9, #120]	; 0x78
    971e:	ldr	r1, [pc, #508]	; (991c <usb_isr+0x5e4>)
    9720:	lsls	r3, r2, #24
    9722:	bmi.w	9d36 <usb_isr+0x9fe>
    9726:	ldr.w	r2, [r9, #128]	; 0x80
    972a:	ldr	r1, [pc, #496]	; (991c <usb_isr+0x5e4>)
    972c:	lsls	r5, r2, #24
    972e:	bmi.w	9d6a <usb_isr+0xa32>
    9732:	ldr.w	r2, [r9, #136]	; 0x88
    9736:	ldr	r1, [pc, #484]	; (991c <usb_isr+0x5e4>)
    9738:	lsls	r4, r2, #24
    973a:	bmi.w	9d5e <usb_isr+0xa26>
    973e:	ldr.w	r2, [r9, #144]	; 0x90
    9742:	ldr	r1, [pc, #472]	; (991c <usb_isr+0x5e4>)
    9744:	lsls	r0, r2, #24
    9746:	bmi.w	9cda <usb_isr+0x9a2>
    974a:	ldr.w	r2, [r9, #152]	; 0x98
    974e:	ldr	r1, [pc, #460]	; (991c <usb_isr+0x5e4>)
    9750:	lsls	r2, r2, #24
    9752:	bmi.w	9cce <usb_isr+0x996>
    9756:	ldr	r0, [pc, #456]	; (9920 <usb_isr+0x5e8>)
    9758:	ldr	r2, [pc, #456]	; (9924 <usb_isr+0x5ec>)
    975a:	ldr	r1, [pc, #460]	; (9928 <usb_isr+0x5f0>)
    975c:	str	r0, [sp, #4]
    975e:	ldr	r0, [pc, #460]	; (992c <usb_isr+0x5f4>)
    9760:	ldr	r5, [pc, #432]	; (9914 <usb_isr+0x5dc>)
    9762:	ldr	r4, [pc, #460]	; (9930 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9764:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    9766:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9768:	str	r6, [sp, #20]
    976a:	str	r5, [sp, #8]
    976c:	mov	r8, r0
    976e:	mov	r7, r2
    9770:	mov	r6, r1
    9772:	mov	r5, r3
    9774:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    9776:	ldr	r0, [r7, #0]
			while (p) {
    9778:	cbz	r0, 9786 <usb_isr+0x44e>
				n = p->next;
    977a:	ldr	r4, [r0, #4]
				usb_free(p);
    977c:	bl	9138 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9780:	mov	r0, r4
    9782:	cmp	r4, #0
    9784:	bne.n	977a <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    9786:	movs	r3, #0
    9788:	str	r3, [r7, #0]
			rx_last[i] = NULL;
    978a:	ldr	r3, [sp, #8]
			p = tx_first[i];
    978c:	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    978e:	mov	r2, r3
    9790:	movs	r3, #0
    9792:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    9796:	cbz	r0, 97a4 <usb_isr+0x46c>
				n = p->next;
    9798:	ldr	r4, [r0, #4]
				usb_free(p);
    979a:	bl	9138 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    979e:	mov	r0, r4
    97a0:	cmp	r4, #0
    97a2:	bne.n	9798 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    97a4:	movs	r2, #0
    97a6:	str	r2, [r6, #0]
			tx_last[i] = NULL;
    97a8:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    97aa:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    97ae:	mov	r1, r2
    97b0:	movs	r2, #0
    97b2:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    97b6:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    97b8:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    97ba:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    97bc:	mov.w	r1, #0
    97c0:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    97c4:	cmp	r3, #3
    97c6:	bhi.n	97dc <usb_isr+0x4a4>
    97c8:	tbh	[pc, r3, lsl #1]
    97cc:	.word	0x0004014b
    97d0:	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    97d4:	mov.w	r3, #1
    97d8:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    97dc:	adds	r5, #1
    97de:	cmp	r5, #4
    97e0:	add.w	r7, r7, #4
    97e4:	add.w	r6, r6, #4
    97e8:	add.w	r8, r8, #1
    97ec:	bne.n	9776 <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    97ee:	ldr	r4, [pc, #324]	; (9934 <usb_isr+0x5fc>)
			*reg = epconf;
    97f0:	ldr	r3, [pc, #324]	; (9938 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    97f2:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    97f4:	ldr	r5, [pc, #280]	; (9910 <usb_isr+0x5d8>)
    97f6:	ldr	r7, [sp, #16]
    97f8:	ldr	r6, [sp, #20]
    97fa:	movs	r1, #0
    97fc:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    97fe:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9800:	lsls	r3, r2, #28
    9802:	bmi.w	9ca4 <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9806:	ldrb	r2, [r4, #1]
			*reg = epconf;
    9808:	ldr	r1, [pc, #304]	; (993c <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    980a:	ldr.w	r8, [pc, #272]	; 991c <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    980e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9810:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9812:	mov.w	r1, #0
    9816:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    981a:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    981e:	bmi.w	9c78 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9822:	ldr	r1, [pc, #284]	; (9940 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9824:	ldrb	r2, [r4, #2]
			*reg = epconf;
    9826:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9828:	movs	r1, #0
    982a:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    982e:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9832:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9834:	ldr.w	r8, [pc, #228]	; 991c <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9838:	bmi.w	9bf4 <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    983c:	ldrb	r2, [r4, #3]
			*reg = epconf;
    983e:	ldr	r1, [pc, #260]	; (9944 <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9840:	ldr	r4, [pc, #216]	; (991c <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9842:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9844:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9846:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9848:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    984c:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9850:	bmi.w	9bc6 <usb_isr+0x88e>
    9854:	ldrb	r3, [r6, #0]
    9856:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9858:	movs	r1, #0
    985a:	eor.w	r2, r3, #1
    985e:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    9862:	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9866:	movs	r0, #0
    9868:	str	r0, [sp, #8]
    986a:	mov	r8, r0
    986c:	mov	ip, r0
    986e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9870:	ldr	r1, [pc, #212]	; (9948 <usb_isr+0x610>)
    9872:	ldrb	r5, [r1, #0]
    9874:	orr.w	lr, r5, #2
    9878:	add.w	r3, r9, lr, lsl #3
    987c:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    987e:	ldr	r3, [sp, #4]
    9880:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9882:	ldr	r3, [sp, #12]
    9884:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9886:	ite	eq
    9888:	moveq	r4, #136	; 0x88
    988a:	movne	r4, #200	; 0xc8
    988c:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9890:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9894:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9898:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    989a:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    989c:	ldr.w	lr, [pc, #124]	; 991c <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    98a0:	ldr	r3, [pc, #168]	; (994c <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    98a2:	ldr.w	r8, [pc, #164]	; 9948 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    98a6:	cmp	r0, #0
    98a8:	bne.w	9af8 <usb_isr+0x7c0>
    98ac:	cmp.w	ip, #64	; 0x40
    98b0:	bne.n	98ea <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    98b2:	orr.w	ip, r4, #2
    98b6:	add.w	r3, r9, ip, lsl #3
    98ba:	ldr	r4, [sp, #8]
    98bc:	ldr.w	lr, [pc, #92]	; 991c <usb_isr+0x5e4>
    98c0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    98c2:	cmp	r2, #0
    98c4:	bne.w	9b24 <usb_isr+0x7ec>
    98c8:	lsls	r2, r0, #16
    98ca:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    98ce:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    98d2:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    98d6:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    98d8:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    98da:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    98dc:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    98de:	cmp	r0, #64	; 0x40
    98e0:	bne.n	98ea <usb_isr+0x5b2>
    98e2:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    98e4:	ldr	r2, [pc, #104]	; (9950 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    98e6:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    98e8:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    98ea:	ldr	r2, [pc, #104]	; (9954 <usb_isr+0x61c>)
    98ec:	movs	r3, #1
    98ee:	strb	r3, [r2, #0]
    98f0:	b.n	9544 <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    98f2:	ldrb	r3, [r1, r6]
    98f4:	cmp	r3, #3
    98f6:	bhi.w	9b54 <usb_isr+0x81c>
    98fa:	add	r2, pc, #4	; (adr r2, 9900 <usb_isr+0x5c8>)
    98fc:	ldr.w	pc, [r2, r3, lsl #2]
    9900:	.word	0x000093cd
    9904:	.word	0x000093cd
    9908:	.word	0x00009a57
    990c:	.word	0x00009a5d
    9910:	.word	0x2001de3d
    9914:	.word	0x2001dd6c
    9918:	.word	0x2001de48
    991c:	.word	0x1fff0000
    9920:	.word	0x2001de24
    9924:	.word	0x2001ddc0
    9928:	.word	0x2001de14
    992c:	.word	0x2001de4c
    9930:	.word	0x2001e23c
    9934:	.word	0x00013e24
    9938:	.word	0x400720c4
    993c:	.word	0x400720c8
    9940:	.word	0x400720cc
    9944:	.word	0x400720d0
    9948:	.word	0x2001de3c
    994c:	.word	0x2001ddd0
    9950:	.word	0x2001dd7c
    9954:	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    9958:	ldrh	r2, [r2, #4]
    995a:	cbnz	r2, 9982 <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    995c:	ldr	r2, [pc, #708]	; (9c24 <usb_isr+0x8ec>)
    995e:	ldrb	r5, [r1, #0]
    9960:	ldrb	r0, [r1, #1]
    9962:	strb	r5, [r2, #0]
    9964:	strb	r0, [r2, #1]
    9966:	ldrb	r5, [r1, #2]
    9968:	ldrb	r0, [r1, #3]
    996a:	strb	r5, [r2, #2]
    996c:	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    996e:	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9970:	ldrb	r5, [r1, #4]
    9972:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9974:	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9976:	ldrb	r5, [r1, #5]
    9978:	ldrb	r1, [r1, #6]
    997a:	strb	r5, [r2, #5]
    997c:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    997e:	beq.w	9acc <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9982:	ldr	r1, [pc, #676]	; (9c28 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9984:	ldr	r6, [pc, #676]	; (9c2c <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9986:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9988:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    998a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    998e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9990:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9994:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9996:	ite	eq
    9998:	moveq	r1, #136	; 0x88
    999a:	movne	r1, #200	; 0xc8
    999c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99a0:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    99a4:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99a8:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    99aa:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99ac:	str	r1, [r2, #4]
    99ae:	b.n	955a <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    99b0:	movw	r2, #770	; 0x302
    99b4:	cmp	r1, r2
    99b6:	bne.w	9ad4 <usb_isr+0x79c>
    99ba:	ldrh	r1, [r5, #4]
    99bc:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    99c0:	cmp	r1, #4
    99c2:	bhi.w	9aea <usb_isr+0x7b2>
    99c6:	ldrh	r2, [r5, #2]
    99c8:	cmp	r2, #0
    99ca:	bne.w	9aea <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    99ce:	ldr	r0, [pc, #608]	; (9c30 <usb_isr+0x8f8>)
    99d0:	str.w	lr, [sp, #4]
    99d4:	lsls	r1, r1, #2
    99d6:	add	r0, r1
    99d8:	ldrb	r1, [r0, #0]
    99da:	orr.w	r1, r1, #2
    99de:	strb	r1, [r0, #0]
    99e0:	b.n	9866 <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    99e2:	movw	r0, #8737	; 0x2221
    99e6:	cmp	r1, r0
    99e8:	bne.n	9ae2 <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    99ea:	ldrh	r1, [r5, #4]
    99ec:	cmp	r1, #0
    99ee:	bne.w	9bba <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    99f2:	ldr	r3, [pc, #576]	; (9c34 <usb_isr+0x8fc>)
    99f4:	ldr	r2, [pc, #576]	; (9c38 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    99f6:	ldr	r0, [pc, #580]	; (9c3c <usb_isr+0x904>)
    99f8:	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    99fa:	ldr	r5, [r3, #0]
    99fc:	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    99fe:	str.w	lr, [sp, #4]
    9a02:	mov	r2, r1
    9a04:	strb	r4, [r0, #0]
    9a06:	b.n	9866 <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9a08:	ldr	r3, [pc, #564]	; (9c40 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9a0a:	ldr	r0, [pc, #568]	; (9c44 <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    9a0c:	ldr	r1, [pc, #536]	; (9c28 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    9a0e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9a10:	mov.w	lr, #2
    9a14:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9a18:	ldr	r7, [pc, #532]	; (9c30 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    9a1a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9a1c:	ldr	r1, [pc, #552]	; (9c48 <usb_isr+0x910>)
    9a1e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9a20:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9a22:	ldr	r6, [pc, #552]	; (9c4c <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    9a24:	ldr	r5, [pc, #552]	; (9c50 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9a26:	ldr	r4, [pc, #556]	; (9c54 <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    9a28:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9a2a:	movs	r1, #13
    9a2c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9a2e:	movs	r1, #255	; 0xff
    9a30:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9a32:	ldr.w	lr, [pc, #576]	; 9c74 <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    9a36:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9a38:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9a3a:	ldr	r5, [pc, #540]	; (9c58 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9a3c:	ldr	r2, [pc, #540]	; (9c5c <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9a3e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9a42:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9a44:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9a46:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9a4a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9a4c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9a4e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    9a50:	add	sp, #28
    9a52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9a56:	movs	r3, #0
    9a58:	strb	r3, [r1, r6]
						break;
    9a5a:	b.n	93cc <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9a5c:	movs	r3, #1
    9a5e:	strb	r3, [r1, r6]
						break;
    9a60:	b.n	93cc <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9a62:	mov.w	r3, #0
    9a66:	strb.w	r3, [r8]
    9a6a:	b.n	97dc <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9a6c:	ldr	r1, [pc, #448]	; (9c30 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9a6e:	ldr	r3, [pc, #480]	; (9c50 <usb_isr+0x918>)
    9a70:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9a72:	movs	r0, #13
    9a74:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    9a76:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9a78:	lsls	r2, r4, #30
    9a7a:	bpl.w	95ec <usb_isr+0x2b4>
    9a7e:	b.n	95de <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9a80:	ldr	r4, [pc, #476]	; (9c60 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    9a82:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9a86:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    9a88:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9a8a:	ldrh	r2, [r5, #6]
    9a8c:	cmp	r2, lr
    9a8e:	bcs.w	9dd8 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a92:	ldr	r1, [pc, #404]	; (9c28 <usb_isr+0x8f0>)
    9a94:	ldrb	r5, [r1, #0]
    9a96:	cmp	r2, #64	; 0x40
    9a98:	mov	ip, r2
    9a9a:	orr.w	lr, r5, #2
    9a9e:	it	cs
    9aa0:	movcs.w	ip, #64	; 0x40
    9aa4:	add.w	r3, r4, ip
    9aa8:	add.w	r0, r9, lr, lsl #3
    9aac:	str	r3, [sp, #8]
    9aae:	movs	r3, #1
    9ab0:	str	r4, [r0, #4]
    9ab2:	mov.w	r8, ip, lsl #16
    9ab6:	rsb	r0, ip, r2
    9aba:	str	r3, [sp, #4]
    9abc:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9abe:	movs	r4, #200	; 0xc8
    9ac0:	b.n	988c <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9ac2:	ldr	r2, [pc, #416]	; (9c64 <usb_isr+0x92c>)
    9ac4:	ldr	r4, [pc, #408]	; (9c60 <usb_isr+0x928>)
    9ac6:	ldrb	r2, [r2, #0]
    9ac8:	strb	r2, [r4, #0]
    9aca:	b.n	9a8a <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9acc:	ldr	r2, [pc, #408]	; (9c68 <usb_isr+0x930>)
    9ace:	movs	r1, #15
    9ad0:	strb	r1, [r2, #0]
    9ad2:	b.n	9982 <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9ad4:	cmp.w	r1, #1280	; 0x500
    9ad8:	bne.n	9aea <usb_isr+0x7b2>
    9ada:	movs	r3, #1
    9adc:	movs	r2, #0
    9ade:	str	r3, [sp, #4]
    9ae0:	b.n	9866 <usb_isr+0x52e>
    9ae2:	movw	r2, #8993	; 0x2321
    9ae6:	cmp	r1, r2
    9ae8:	beq.n	9ada <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9aea:	ldr	r2, [pc, #324]	; (9c30 <usb_isr+0x8f8>)
    9aec:	movs	r3, #15
    9aee:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9af0:	ldr	r2, [pc, #336]	; (9c44 <usb_isr+0x90c>)
    9af2:	movs	r3, #1
    9af4:	strb	r3, [r2, #0]
    9af6:	b.n	9544 <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    9af8:	cmp	r0, #64	; 0x40
    9afa:	bls.w	98b2 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9afe:	orr.w	r4, r4, #2
    9b02:	add.w	r1, lr, r4, lsl #3
    9b06:	ldr	r6, [sp, #8]
    9b08:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9b0a:	cbz	r2, 9b3c <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    9b0c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9b10:	ldr	r2, [pc, #344]	; (9c6c <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    9b12:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9b14:	mov	r3, r6
    9b16:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9b18:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9b1c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9b1e:	str.w	r2, [lr, r4, lsl #3]
    9b22:	b.n	98e4 <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    9b24:	ldrb.w	r3, [sp, #4]
    9b28:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9b2a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9b2c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9b2e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9b30:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9b34:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9b36:	str.w	r2, [lr, ip, lsl #3]
    9b3a:	b.n	98de <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    9b3c:	ldrb.w	r1, [sp, #4]
    9b40:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9b42:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9b44:	ldr	r2, [pc, #256]	; (9c48 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9b46:	strb.w	r5, [r8]
    9b4a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9b4c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9b4e:	str.w	r2, [lr, r4, lsl #3]
    9b52:	b.n	98e4 <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    9b54:	tst.w	r9, #8
    9b58:	ite	eq
    9b5a:	moveq	r3, #2
    9b5c:	movne	r3, #3
    9b5e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    9b60:	b.n	93cc <usb_isr+0x94>
    9b62:	ldrh	r1, [r5, #4]
    9b64:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9b68:	cmp	r1, #4
    9b6a:	bhi.n	9aea <usb_isr+0x7b2>
    9b6c:	ldrh	r2, [r5, #2]
    9b6e:	cmp	r2, #0
    9b70:	bne.n	9aea <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    9b72:	ldr	r0, [pc, #188]	; (9c30 <usb_isr+0x8f8>)
    9b74:	str.w	lr, [sp, #4]
    9b78:	lsls	r1, r1, #2
    9b7a:	add	r0, r1
    9b7c:	ldrb	r1, [r0, #0]
    9b7e:	bic.w	r1, r1, #2
    9b82:	strb	r1, [r0, #0]
    9b84:	b.n	9866 <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    9b86:	ldr	r2, [pc, #232]	; (9c70 <usb_isr+0x938>)
    9b88:	ldr	r4, [r2, #4]
    9b8a:	cmp	r4, #0
    9b8c:	beq.n	9aea <usb_isr+0x7b2>
    9b8e:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9b90:	ldrh.w	lr, [r5, #4]
    9b94:	b.n	9b9e <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    9b96:	adds	r2, #12
			if (list->addr == NULL) break;
    9b98:	ldr	r4, [r2, #4]
    9b9a:	cmp	r4, #0
    9b9c:	beq.n	9aea <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9b9e:	ldrh	r3, [r2, #0]
    9ba0:	cmp	r3, r0
    9ba2:	bne.n	9b96 <usb_isr+0x85e>
    9ba4:	ldrh	r3, [r2, #2]
    9ba6:	cmp	r3, lr
    9ba8:	bne.n	9b96 <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    9baa:	lsrs	r0, r0, #8
    9bac:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    9bae:	ite	eq
    9bb0:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    9bb4:	ldrhne.w	lr, [r2, #8]
    9bb8:	b.n	9a8a <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    9bba:	str.w	lr, [sp, #4]
    9bbe:	b.n	9866 <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    9bc0:	mov.w	lr, #2
    9bc4:	b.n	9a8a <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9bc6:	bl	90f8 <usb_malloc>
				if (p) {
    9bca:	cmp	r0, #0
    9bcc:	beq.w	9db2 <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9bd0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9bd2:	ldr	r2, [pc, #116]	; (9c48 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9bd4:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9bd8:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9bdc:	bl	90f8 <usb_malloc>
				if (p) {
    9be0:	cmp	r0, #0
    9be2:	beq.w	9da6 <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    9be6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9be8:	ldr	r2, [pc, #128]	; (9c6c <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9bea:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9bee:	str.w	r2, [r9, #136]	; 0x88
    9bf2:	b.n	9854 <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9bf4:	bl	90f8 <usb_malloc>
				if (p) {
    9bf8:	cmp	r0, #0
    9bfa:	beq.w	9dca <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    9bfe:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c00:	ldr	r2, [pc, #68]	; (9c48 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9c02:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c06:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9c0a:	bl	90f8 <usb_malloc>
				if (p) {
    9c0e:	cmp	r0, #0
    9c10:	beq.w	9dbe <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    9c14:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c16:	ldr	r2, [pc, #84]	; (9c6c <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9c18:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c1c:	str.w	r2, [r9, #104]	; 0x68
    9c20:	b.n	983c <usb_isr+0x504>
    9c22:	nop
    9c24:	.word	0x2001e230
    9c28:	.word	0x2001de3c
    9c2c:	.word	0x2001ddd0
    9c30:	.word	0x400720c0
    9c34:	.word	0x2001dd64
    9c38:	.word	0x2001e238
    9c3c:	.word	0x2001dd60
    9c40:	.word	0x1fff0000
    9c44:	.word	0x40072094
    9c48:	.word	0x00400088
    9c4c:	.word	0x40072088
    9c50:	.word	0x40072080
    9c54:	.word	0x40072098
    9c58:	.word	0x2001dd80
    9c5c:	.word	0x2001ddd4
    9c60:	.word	0x2001de40
    9c64:	.word	0x2001de48
    9c68:	.word	0x2001ddd1
    9c6c:	.word	0x004000c8
    9c70:	.word	0x00013e28
    9c74:	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9c78:	bl	90f8 <usb_malloc>
				if (p) {
    9c7c:	cmp	r0, #0
    9c7e:	beq.w	9d9a <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    9c82:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c84:	ldr	r2, [pc, #372]	; (9dfc <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9c86:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9c8a:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9c8e:	bl	90f8 <usb_malloc>
				if (p) {
    9c92:	cmp	r0, #0
    9c94:	beq.n	9d8e <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    9c96:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c98:	ldr	r2, [pc, #356]	; (9e00 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9c9a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9c9e:	str.w	r2, [r9, #72]	; 0x48
    9ca2:	b.n	9822 <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9ca4:	bl	90f8 <usb_malloc>
				if (p) {
    9ca8:	cmp	r0, #0
    9caa:	beq.n	9d82 <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9cac:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9cae:	ldr	r2, [pc, #332]	; (9dfc <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9cb0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9cb4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9cb8:	bl	90f8 <usb_malloc>
				if (p) {
    9cbc:	cmp	r0, #0
    9cbe:	beq.n	9d76 <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    9cc0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9cc2:	ldr	r2, [pc, #316]	; (9e00 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9cc4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9cc8:	str.w	r2, [r9, #40]	; 0x28
    9ccc:	b.n	9806 <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    9cce:	ldr.w	r0, [r1, #156]	; 0x9c
    9cd2:	subs	r0, #8
    9cd4:	bl	9138 <usb_free>
    9cd8:	b.n	9756 <usb_isr+0x41e>
    9cda:	ldr.w	r0, [r1, #148]	; 0x94
    9cde:	subs	r0, #8
    9ce0:	bl	9138 <usb_free>
    9ce4:	b.n	974a <usb_isr+0x412>
    9ce6:	ldr	r0, [r1, #92]	; 0x5c
    9ce8:	subs	r0, #8
    9cea:	bl	9138 <usb_free>
    9cee:	b.n	96f6 <usb_isr+0x3be>
    9cf0:	ldr	r0, [r1, #84]	; 0x54
    9cf2:	subs	r0, #8
    9cf4:	bl	9138 <usb_free>
    9cf8:	b.n	96ea <usb_isr+0x3b2>
    9cfa:	ldr	r0, [r1, #76]	; 0x4c
    9cfc:	subs	r0, #8
    9cfe:	bl	9138 <usb_free>
    9d02:	b.n	96de <usb_isr+0x3a6>
    9d04:	ldr	r0, [r1, #68]	; 0x44
    9d06:	subs	r0, #8
    9d08:	bl	9138 <usb_free>
    9d0c:	b.n	96d2 <usb_isr+0x39a>
    9d0e:	ldr	r0, [r1, #60]	; 0x3c
    9d10:	subs	r0, #8
    9d12:	bl	9138 <usb_free>
    9d16:	b.n	96c6 <usb_isr+0x38e>
    9d18:	ldr	r0, [r1, #52]	; 0x34
    9d1a:	subs	r0, #8
    9d1c:	bl	9138 <usb_free>
    9d20:	b.n	96ba <usb_isr+0x382>
    9d22:	ldr	r0, [r1, #44]	; 0x2c
    9d24:	subs	r0, #8
    9d26:	bl	9138 <usb_free>
    9d2a:	b.n	96ae <usb_isr+0x376>
    9d2c:	ldr	r0, [r4, #36]	; 0x24
    9d2e:	subs	r0, #8
    9d30:	bl	9138 <usb_free>
    9d34:	b.n	96a2 <usb_isr+0x36a>
    9d36:	ldr	r0, [r1, #124]	; 0x7c
    9d38:	subs	r0, #8
    9d3a:	bl	9138 <usb_free>
    9d3e:	b.n	9726 <usb_isr+0x3ee>
    9d40:	ldr	r0, [r1, #116]	; 0x74
    9d42:	subs	r0, #8
    9d44:	bl	9138 <usb_free>
    9d48:	b.n	971a <usb_isr+0x3e2>
    9d4a:	ldr	r0, [r1, #108]	; 0x6c
    9d4c:	subs	r0, #8
    9d4e:	bl	9138 <usb_free>
    9d52:	b.n	970e <usb_isr+0x3d6>
    9d54:	ldr	r0, [r1, #100]	; 0x64
    9d56:	subs	r0, #8
    9d58:	bl	9138 <usb_free>
    9d5c:	b.n	9702 <usb_isr+0x3ca>
    9d5e:	ldr.w	r0, [r1, #140]	; 0x8c
    9d62:	subs	r0, #8
    9d64:	bl	9138 <usb_free>
    9d68:	b.n	973e <usb_isr+0x406>
    9d6a:	ldr.w	r0, [r1, #132]	; 0x84
    9d6e:	subs	r0, #8
    9d70:	bl	9138 <usb_free>
    9d74:	b.n	9732 <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9d76:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9d78:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    9d7c:	adds	r2, #1
    9d7e:	strb	r2, [r5, #0]
    9d80:	b.n	9806 <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9d82:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9d84:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    9d88:	adds	r2, #1
    9d8a:	strb	r2, [r5, #0]
    9d8c:	b.n	9cb8 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9d8e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9d90:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    9d94:	adds	r2, #1
    9d96:	strb	r2, [r5, #0]
    9d98:	b.n	9822 <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9d9a:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9d9c:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    9da0:	adds	r2, #1
    9da2:	strb	r2, [r5, #0]
    9da4:	b.n	9c8e <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9da6:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9da8:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    9dac:	adds	r2, #1
    9dae:	strb	r2, [r5, #0]
    9db0:	b.n	9854 <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9db2:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9db4:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    9db8:	adds	r2, #1
    9dba:	strb	r2, [r5, #0]
    9dbc:	b.n	9bdc <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9dbe:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9dc0:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    9dc4:	adds	r2, #1
    9dc6:	strb	r2, [r5, #0]
    9dc8:	b.n	983c <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9dca:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9dcc:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    9dd0:	adds	r2, #1
    9dd2:	strb	r2, [r5, #0]
    9dd4:	b.n	9c0a <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    9dd6:	bkpt	0x0000
    9dd8:	cmp.w	lr, #64	; 0x40
    9ddc:	mov	ip, lr
    9dde:	it	cs
    9de0:	movcs.w	ip, #64	; 0x40
    9de4:	add.w	r3, r4, ip
    9de8:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9dea:	movs	r3, #1
    9dec:	rsb	r0, ip, lr
    9df0:	mov.w	r8, ip, lsl #16
    9df4:	movs	r2, #0
    9df6:	str	r3, [sp, #4]
    9df8:	b.n	9870 <usb_isr+0x538>
    9dfa:	nop
    9dfc:	.word	0x00400088
    9e00:	.word	0x004000c8

00009e04 <usb_init>:
}



void usb_init(void)
{
    9e04:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    9e08:	bl	ad48 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9e0c:	ldr	r4, [pc, #188]	; (9ecc <usb_init+0xc8>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e0e:	ldr	r3, [pc, #192]	; (9ed0 <usb_init+0xcc>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    9e10:	ldr	r0, [pc, #192]	; (9ed4 <usb_init+0xd0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9e12:	ldr.w	r8, [pc, #216]	; 9eec <usb_init+0xe8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9e16:	ldr	r7, [pc, #192]	; (9ed8 <usb_init+0xd4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9e18:	ldr	r5, [pc, #192]	; (9edc <usb_init+0xd8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    9e1a:	ldr	r6, [pc, #196]	; (9ee0 <usb_init+0xdc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9e1c:	ldr.w	ip, [pc, #208]	; 9ef0 <usb_init+0xec>
	USB0_ERRSTAT = 0xFF;
    9e20:	ldr.w	lr, [pc, #208]	; 9ef4 <usb_init+0xf0>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e24:	movs	r2, #0
    9e26:	str	r2, [r3, #0]
		table[i].addr = 0;
    9e28:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e2a:	str	r2, [r3, #8]
		table[i].addr = 0;
    9e2c:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e2e:	str	r2, [r3, #16]
		table[i].addr = 0;
    9e30:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e32:	str	r2, [r3, #24]
		table[i].addr = 0;
    9e34:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e36:	str	r2, [r3, #32]
		table[i].addr = 0;
    9e38:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e3a:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    9e3c:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e3e:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    9e40:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e42:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    9e44:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e46:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    9e48:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e4a:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    9e4c:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e4e:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    9e50:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e52:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    9e54:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e56:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    9e58:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e5a:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    9e5c:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e5e:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    9e60:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e62:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    9e64:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9e66:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9e6a:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    9e6c:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9e70:	orr.w	r1, r1, #262144	; 0x40000
    9e74:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    9e76:	ldr	r1, [r0, #0]
    9e78:	orr.w	r1, r1, #50331648	; 0x3000000
    9e7c:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9e7e:	ubfx	r1, r3, #8, #8
    9e82:	strb.w	r1, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    9e86:	add.w	r4, r4, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9e8a:	ubfx	r1, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9e8e:	lsrs	r3, r3, #24
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9e90:	strb	r1, [r7, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    9e92:	adds	r4, #204	; 0xcc
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9e94:	strb	r3, [r5, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9e96:	add.w	r0, r0, #2684354560	; 0xa0000000
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9e9a:	movs	r3, #255	; 0xff
    9e9c:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9ea0:	ldr	r5, [pc, #64]	; (9ee4 <usb_init+0xe0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    9ea2:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9ea6:	addw	r0, r0, #2308	; 0x904
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    9eaa:	strb	r3, [r6, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9eac:	ldr	r1, [pc, #56]	; (9ee8 <usb_init+0xe4>)
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    9eae:	movs	r3, #1
    9eb0:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9eb4:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    9eb6:	strb	r2, [r4, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9eb8:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9ebc:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    9ebe:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9ec2:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9ec4:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9ec6:	strb	r2, [r1, #0]
    9ec8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ecc:	.word	0x40048034
    9ed0:	.word	0x1fff0000
    9ed4:	.word	0x4000d800
    9ed8:	.word	0x400720b0
    9edc:	.word	0x400720b4
    9ee0:	.word	0x40072010
    9ee4:	.word	0xe000e435
    9ee8:	.word	0x40072108
    9eec:	.word	0x4007209c
    9ef0:	.word	0x40072080
    9ef4:	.word	0x40072088

00009ef8 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    9ef8:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    9efa:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    9efc:	cbnz	r1, 9f26 <DMAChannel::begin(bool)+0x2e>
    9efe:	ldr	r2, [r0, #0]
    9f00:	cbz	r2, 9f26 <DMAChannel::begin(bool)+0x2e>
    9f02:	ldrb	r3, [r0, #4]
    9f04:	cmp	r3, #15
    9f06:	bhi.n	9f26 <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    9f08:	ldr	r4, [pc, #160]	; (9fac <DMAChannel::begin(bool)+0xb4>)
    9f0a:	ldrh	r1, [r4, #0]
    9f0c:	asr.w	r5, r1, r3
    9f10:	lsls	r5, r5, #31
    9f12:	bpl.n	9f2a <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    9f14:	add.w	r3, r3, #33554432	; 0x2000000
    9f18:	add.w	r3, r3, #1152	; 0x480
    9f1c:	cmp.w	r2, r3, lsl #5
    9f20:	bne.n	9f2a <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    9f22:	cpsie	i
		return;
    9f24:	pop	{r4, r5, r6, r7, pc}
    9f26:	ldr	r4, [pc, #132]	; (9fac <DMAChannel::begin(bool)+0xb4>)
    9f28:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    9f2a:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    9f2c:	asr.w	r2, r1, r3
    9f30:	ands.w	r2, r2, #1
    9f34:	beq.n	9f46 <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    9f36:	adds	r3, #1
    9f38:	cmp	r3, #16
    9f3a:	bne.n	9f2c <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    9f3c:	cpsie	i
			TCD = (TCD_t *)0;
    9f3e:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    9f40:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    9f42:	str	r2, [r0, #0]
    9f44:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    9f46:	movs	r5, #1
    9f48:	lsls	r5, r3
    9f4a:	orrs	r1, r5
    9f4c:	strh	r1, [r4, #0]
			__enable_irq();
    9f4e:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9f50:	ldr	r6, [pc, #92]	; (9fb0 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9f52:	ldr	r5, [pc, #96]	; (9fb4 <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9f54:	ldr	r7, [pc, #96]	; (9fb8 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    9f56:	ldr.w	lr, [pc, #104]	; 9fc0 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    9f5a:	uxtb	r1, r3
    9f5c:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9f5e:	ldr	r4, [r6, #0]
    9f60:	orr.w	r4, r4, #2
    9f64:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9f66:	ldr	r4, [r5, #0]
    9f68:	orr.w	r4, r4, #2
    9f6c:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9f6e:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9f72:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    9f76:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9f7a:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9f7e:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9f80:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9f84:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    9f86:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    9f88:	ldr	r4, [pc, #48]	; (9fbc <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    9f8a:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9f8e:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9f90:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    9f92:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    9f94:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9f96:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    9f98:	str	r2, [r3, #0]
	*p++ = 0;
    9f9a:	str	r2, [r3, #4]
	*p++ = 0;
    9f9c:	str	r2, [r3, #8]
	*p++ = 0;
    9f9e:	str	r2, [r3, #12]
	*p++ = 0;
    9fa0:	str	r2, [r3, #16]
	*p++ = 0;
    9fa2:	str	r2, [r3, #20]
	*p++ = 0;
    9fa4:	str	r2, [r3, #24]
	*p++ = 0;
    9fa6:	str	r2, [r3, #28]
    9fa8:	pop	{r4, r5, r6, r7, pc}
    9faa:	nop
    9fac:	.word	0x2001de50
    9fb0:	.word	0x40048040
    9fb4:	.word	0x4004803c
    9fb8:	.word	0x40008000
    9fbc:	.word	0x4000801f
    9fc0:	.word	0x4000801a

00009fc4 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    9fc4:	ldrb	r3, [r0, #4]
    9fc6:	cmp	r3, #15
    9fc8:	bhi.n	9ff0 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    9fca:	ldr	r2, [pc, #40]	; (9ff4 <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    9fcc:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    9fce:	strb	r3, [r2, #0]
	__disable_irq();
    9fd0:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    9fd2:	ldr	r1, [pc, #36]	; (9ff8 <DMAChannel::release()+0x34>)
    9fd4:	ldrb	r4, [r0, #4]
    9fd6:	ldrh	r2, [r1, #0]
    9fd8:	movs	r3, #1
    9fda:	lsls	r3, r4
    9fdc:	bic.w	r3, r2, r3
    9fe0:	strh	r3, [r1, #0]
	__enable_irq();
    9fe2:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    9fe4:	movs	r2, #16
	TCD = (TCD_t *)0;
    9fe6:	movs	r3, #0
}
    9fe8:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    9fec:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    9fee:	str	r3, [r0, #0]
}
    9ff0:	bx	lr
    9ff2:	nop
    9ff4:	.word	0x4000801a
    9ff8:	.word	0x2001de50

00009ffc <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    9ffc:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9ffe:	mrs	r2, PRIMASK
		__disable_irq();
    a002:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    a004:	ldrb	r3, [r0, #29]
    a006:	cbnz	r3, a016 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    a008:	ldrb	r1, [r0, #28]
    a00a:	cmp	r1, #1
    a00c:	beq.n	a020 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    a00e:	cmp	r1, #3
    a010:	beq.n	a034 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    a012:	movs	r3, #1
    a014:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a016:	cbnz	r2, a01a <EventResponder::triggerEventNotImmediate()+0x1e>
    a018:	cpsie	i
	}
	enableInterrupts(irq);
}
    a01a:	ldr.w	r4, [sp], #4
    a01e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    a020:	ldr	r4, [pc, #68]	; (a068 <EventResponder::triggerEventNotImmediate()+0x6c>)
    a022:	ldr	r1, [r4, #0]
    a024:	cbz	r1, a050 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    a026:	ldr	r1, [pc, #68]	; (a06c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    a028:	str	r3, [r0, #20]
				_prev = lastYield;
    a02a:	ldr	r3, [r1, #0]
    a02c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    a02e:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    a030:	str	r0, [r3, #20]
    a032:	b.n	a012 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    a034:	ldr	r4, [pc, #56]	; (a070 <EventResponder::triggerEventNotImmediate()+0x74>)
    a036:	ldr	r1, [r4, #0]
    a038:	cbz	r1, a05c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    a03a:	ldr	r1, [pc, #56]	; (a074 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    a03c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    a03e:	ldr	r3, [r1, #0]
    a040:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    a042:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    a044:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    a046:	ldr	r3, [pc, #48]	; (a078 <EventResponder::triggerEventNotImmediate()+0x7c>)
    a048:	mov.w	r1, #268435456	; 0x10000000
    a04c:	str	r1, [r3, #0]
    a04e:	b.n	a012 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    a050:	ldr	r3, [pc, #24]	; (a06c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    a052:	str	r1, [r0, #20]
				_prev = nullptr;
    a054:	str	r1, [r0, #24]
				firstYield = this;
    a056:	str	r0, [r4, #0]
				lastYield = this;
    a058:	str	r0, [r3, #0]
    a05a:	b.n	a012 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    a05c:	ldr	r3, [pc, #20]	; (a074 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    a05e:	str	r1, [r0, #20]
				_prev = nullptr;
    a060:	str	r1, [r0, #24]
				firstInterrupt = this;
    a062:	str	r0, [r4, #0]
				lastInterrupt = this;
    a064:	str	r0, [r3, #0]
    a066:	b.n	a046 <EventResponder::triggerEventNotImmediate()+0x4a>
    a068:	.word	0x2001de64
    a06c:	.word	0x2001de60
    a070:	.word	0x2001de54
    a074:	.word	0x2001de58
    a078:	.word	0xe000ed04

0000a07c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a07c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a07e:	mrs	r2, PRIMASK
		__disable_irq();
    a082:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a084:	ldr	r4, [pc, #48]	; (a0b8 <EventResponder::runFromInterrupt()+0x3c>)
    a086:	ldr	r0, [r4, #0]
		if (first) {
    a088:	cbz	r0, a0ac <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a08a:	ldr	r6, [pc, #48]	; (a0bc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a08c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a08e:	ldr	r3, [r0, #20]
    a090:	str	r3, [r4, #0]
			if (firstInterrupt) {
    a092:	cbz	r3, a0b2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a094:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a096:	cbnz	r2, a09a <EventResponder::runFromInterrupt()+0x1e>
    a098:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a09a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a09c:	ldr	r3, [r0, #8]
    a09e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a0a0:	mrs	r2, PRIMASK
		__disable_irq();
    a0a4:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a0a6:	ldr	r0, [r4, #0]
		if (first) {
    a0a8:	cmp	r0, #0
    a0aa:	bne.n	a08e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a0ac:	cbnz	r2, a0b0 <EventResponder::runFromInterrupt()+0x34>
    a0ae:	cpsie	i
    a0b0:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a0b2:	str	r3, [r6, #0]
    a0b4:	b.n	a096 <EventResponder::runFromInterrupt()+0x1a>
    a0b6:	nop
    a0b8:	.word	0x2001de54
    a0bc:	.word	0x2001de58

0000a0c0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a0c0:	b.w	a07c <EventResponder::runFromInterrupt()>

0000a0c4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    a0c4:	ldr	r2, [pc, #96]	; (a128 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    a0c6:	push	{r4, r5}
	if (listActive == nullptr) {
    a0c8:	ldr	r4, [r2, #0]
    a0ca:	cmp	r4, #0
    a0cc:	beq.n	a11e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    a0ce:	ldr	r3, [r0, #0]
    a0d0:	ldr	r1, [r4, #0]
    a0d2:	cmp	r3, r1
    a0d4:	bcs.n	a0f4 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    a0d6:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    a0d8:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    a0da:	str	r4, [r0, #8]
		_prev = nullptr;
    a0dc:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    a0de:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    a0e0:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    a0e2:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    a0e4:	movs	r3, #2
    a0e6:	strb	r3, [r0, #20]
}
    a0e8:	pop	{r4, r5}
    a0ea:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    a0ec:	ldr	r1, [r2, #0]
    a0ee:	cmp	r3, r1
    a0f0:	mov	r4, r2
    a0f2:	bcc.n	a106 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    a0f4:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    a0f6:	subs	r3, r3, r1
    a0f8:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    a0fa:	cmp	r2, #0
    a0fc:	bne.n	a0ec <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    a0fe:	str	r2, [r0, #8]
		_prev = timer;
    a100:	str	r4, [r0, #12]
		timer->_next = this;
    a102:	str	r0, [r4, #8]
    a104:	b.n	a0e4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    a106:	ldr	r2, [r2, #12]
    a108:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    a10a:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    a10c:	str	r0, [r4, #12]
				_prev->_next = this;
    a10e:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    a110:	subs	r3, r1, r3
				_state = TimerActive;
    a112:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    a114:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    a116:	str	r3, [r4, #0]
				_state = TimerActive;
    a118:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    a11a:	pop	{r4, r5}
    a11c:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    a11e:	str	r4, [r0, #8]
		_prev = nullptr;
    a120:	str	r4, [r0, #12]
		listActive = this;
    a122:	str	r0, [r2, #0]
    a124:	b.n	a0e4 <MillisTimer::addToActiveList()+0x20>
    a126:	nop
    a128:	.word	0x2001de5c

0000a12c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    a12c:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    a12e:	ldr	r6, [pc, #136]	; (a1b8 <MillisTimer::runFromTimer()+0x8c>)
    a130:	ldr	r4, [r6, #0]
	while (timer) {
    a132:	cbz	r4, a180 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    a134:	ldr	r3, [r4, #0]
    a136:	cmp	r3, #0
    a138:	bne.n	a1b0 <MillisTimer::runFromTimer()+0x84>
    a13a:	ldr	r7, [pc, #128]	; (a1bc <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    a13c:	mov	r5, r3
    a13e:	b.n	a14a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    a140:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    a142:	cbz	r4, a180 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    a144:	ldr	r3, [r4, #0]
    a146:	cmp	r3, #0
    a148:	bne.n	a1b0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    a14a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    a14c:	cbz	r3, a150 <MillisTimer::runFromTimer()+0x24>
    a14e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    a150:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    a152:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a154:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    a156:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a158:	ldr	r3, [r3, #0]
    a15a:	cmp	r3, r7
    a15c:	bne.n	a1a2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    a15e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    a160:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    a162:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    a164:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    a166:	beq.n	a1aa <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    a168:	bl	9ffc <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    a16c:	ldr	r3, [r4, #4]
    a16e:	cmp	r3, #0
    a170:	beq.n	a140 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    a172:	str	r3, [r4, #0]
				timer->addToActiveList();
    a174:	mov	r0, r4
    a176:	bl	a0c4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    a17a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    a17c:	cmp	r4, #0
    a17e:	bne.n	a144 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a180:	mrs	r3, PRIMASK
		__disable_irq();
    a184:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    a186:	ldr	r2, [pc, #56]	; (a1c0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    a188:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    a18a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    a18c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    a18e:	cbnz	r3, a192 <MillisTimer::runFromTimer()+0x66>
    a190:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    a192:	cbz	r0, a1a0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    a194:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    a196:	bl	a0c4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    a19a:	mov	r0, r4
    a19c:	cmp	r0, #0
    a19e:	bne.n	a194 <MillisTimer::runFromTimer()+0x68>
    a1a0:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a1a2:	mov	r2, r4
    a1a4:	movs	r1, #0
    a1a6:	blx	r3
    a1a8:	b.n	a16c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a1aa:	ldr	r3, [r0, #8]
    a1ac:	blx	r3
    a1ae:	b.n	a16c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    a1b0:	subs	r3, #1
    a1b2:	str	r3, [r4, #0]
			break;
    a1b4:	b.n	a180 <MillisTimer::runFromTimer()+0x54>
    a1b6:	nop
    a1b8:	.word	0x2001de5c
    a1bc:	.word	0x00002ced
    a1c0:	.word	0x2001de6c

0000a1c4 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    a1c4:	ldr	r2, [pc, #8]	; (a1d0 <systick_isr+0xc>)
    a1c6:	ldr	r3, [r2, #0]
    a1c8:	adds	r3, #1
    a1ca:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    a1cc:	b.w	a12c <MillisTimer::runFromTimer()>
    a1d0:	.word	0x2001dd64

0000a1d4 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a1d4:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    a1d6:	ldr	r4, [pc, #176]	; (a288 <yield+0xb4>)
    a1d8:	ldrb	r3, [r4, #0]
    a1da:	cbz	r3, a1de <yield+0xa>
    a1dc:	pop	{r3, r4, r5, pc}
	running = 1;
    a1de:	movs	r3, #1
    a1e0:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a1e2:	bl	89a8 <usb_serial_available>
	if (Serial.available()) serialEvent();
    a1e6:	cmp	r0, #0
    a1e8:	bne.n	a270 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    a1ea:	bl	ab18 <serial_available>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    a1ee:	cmp	r0, #0
    a1f0:	bne.n	a26a <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    a1f2:	bl	a8f4 <serial2_available>
	if (Serial2.available()) serialEvent2();
    a1f6:	cmp	r0, #0
    a1f8:	bne.n	a264 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    a1fa:	bl	ae10 <serial3_available>
	if (Serial3.available()) serialEvent3();
    a1fe:	cbnz	r0, a25e <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    a200:	bl	aa20 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    a204:	cbnz	r0, a258 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    a206:	bl	a7fc <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    a20a:	cbnz	r0, a252 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    a20c:	bl	ac44 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    a210:	cbnz	r0, a24c <yield+0x78>
#endif
	running = 0;
    a212:	movs	r3, #0
    a214:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a216:	mrs	r3, IPSR
		if (ipsr != 0) return;
    a21a:	cmp	r3, #0
    a21c:	bne.n	a1dc <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a21e:	mrs	r1, PRIMASK
		__disable_irq();
    a222:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a224:	ldr	r3, [pc, #100]	; (a28c <yield+0xb8>)
    a226:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a228:	cbz	r0, a276 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a22a:	ldr	r4, [pc, #100]	; (a290 <yield+0xbc>)
    a22c:	ldrb	r2, [r4, #0]
    a22e:	cbnz	r2, a276 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    a230:	ldr	r5, [r0, #20]
    a232:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a234:	movs	r3, #1
    a236:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    a238:	cbz	r5, a27e <yield+0xaa>
			firstYield->_prev = nullptr;
    a23a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a23c:	cbnz	r1, a240 <yield+0x6c>
    a23e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a240:	movs	r5, #0
    a242:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a244:	ldr	r3, [r0, #8]
    a246:	blx	r3
		runningFromYield = false;
    a248:	strb	r5, [r4, #0]
    a24a:	b.n	a1dc <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    a24c:	bl	a7f4 <serialEvent6()>
    a250:	b.n	a212 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    a252:	bl	a298 <serialEvent5()>
    a256:	b.n	a20c <yield+0x38>
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    a258:	bl	a3c4 <serialEvent4()>
    a25c:	b.n	a206 <yield+0x32>
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    a25e:	bl	af08 <serialEvent3()>
    a262:	b.n	a200 <yield+0x2c>
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    a264:	bl	a3c0 <serialEvent2()>
    a268:	b.n	a1fa <yield+0x26>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    a26a:	bl	a3d8 <serialEvent1()>
    a26e:	b.n	a1f2 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    a270:	bl	a2c4 <serialEvent()>
    a274:	b.n	a1ea <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a276:	cmp	r1, #0
    a278:	bne.n	a1dc <yield+0x8>
    a27a:	cpsie	i
    a27c:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a27e:	ldr	r3, [pc, #20]	; (a294 <yield+0xc0>)
    a280:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a282:	cmp	r1, #0
    a284:	bne.n	a240 <yield+0x6c>
    a286:	b.n	a23e <yield+0x6a>
    a288:	.word	0x2001de70
    a28c:	.word	0x2001de64
    a290:	.word	0x2001de68
    a294:	.word	0x2001de60

0000a298 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    a298:	bx	lr
    a29a:	nop

0000a29c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a29c:	b.w	89c4 <usb_serial_flush_input>

0000a2a0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a2a0:	b.w	8978 <usb_serial_peekchar>

0000a2a4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a2a4:	b.w	8930 <usb_serial_getchar>

0000a2a8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a2a8:	b.w	89a8 <usb_serial_available>

0000a2ac <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a2ac:	b.w	8b64 <usb_serial_flush_output>

0000a2b0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a2b0:	b.w	8b1c <usb_serial_write_buffer_free>

0000a2b4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a2b4:	mov	r0, r1
    a2b6:	mov	r1, r2
    a2b8:	b.w	89fc <usb_serial_write>

0000a2bc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a2bc:	mov	r0, r1
    a2be:	b.w	8b04 <usb_serial_putchar>
    a2c2:	nop

0000a2c4 <serialEvent()>:
    a2c4:	bx	lr
    a2c6:	nop

0000a2c8 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    a2c8:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    a2ca:	mov	r6, r1
    a2cc:	cbz	r1, a2ec <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    a2ce:	cbz	r2, a2f0 <Print::write(unsigned char const*, unsigned int)+0x28>
    a2d0:	mov	r7, r0
    a2d2:	mov	r4, r2
    a2d4:	movs	r5, #0
    a2d6:	ldr	r3, [r7, #0]
    a2d8:	ldrb.w	r1, [r6], #1
    a2dc:	ldr	r3, [r3, #0]
    a2de:	mov	r0, r7
    a2e0:	blx	r3
    a2e2:	subs	r4, #1
    a2e4:	add	r5, r0
    a2e6:	bne.n	a2d6 <Print::write(unsigned char const*, unsigned int)+0xe>
    a2e8:	mov	r0, r5
    a2ea:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    a2ec:	mov	r0, r1
    a2ee:	pop	{r3, r4, r5, r6, r7, pc}
    a2f0:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    a2f2:	pop	{r3, r4, r5, r6, r7, pc}

0000a2f4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a2f4:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    a2f6:	ldr	r2, [pc, #24]	; (a310 <Print::println()+0x1c>)
	return write(buf, 2);
    a2f8:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a2fa:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    a2fc:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a2fe:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a300:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a302:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a306:	movs	r2, #2
    a308:	blx	r3
}
    a30a:	add	sp, #12
    a30c:	ldr.w	pc, [sp], #4
    a310:	.word	0x00013e20

0000a314 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a314:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    a316:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a318:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a31a:	ldr	r3, [r3, #4]
    a31c:	blx	r3
	return len;
}
    a31e:	mov	r0, r4
    a320:	pop	{r4, pc}
    a322:	nop

0000a324 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a324:	push	{r1, r2, r3}
    a326:	push	{lr}
    a328:	sub	sp, #8
    a32a:	add	r2, sp, #12
    a32c:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    a330:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a332:	bl	10688 <vdprintf>
#endif
}
    a336:	add	sp, #8
    a338:	ldr.w	lr, [sp], #4
    a33c:	add	sp, #12
    a33e:	bx	lr

0000a340 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a340:	push	{r4, r5, r6, r7, lr}
    a342:	mov	r7, r0
    a344:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a346:	cmp	r2, #0
    a348:	beq.n	a3b2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a34a:	cmp	r2, #1
    a34c:	it	eq
    a34e:	moveq	r2, #10
	}


	if (n == 0) {
    a350:	cbz	r1, a3a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a352:	movs	r4, #33	; 0x21
    a354:	b.n	a358 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a356:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a358:	udiv	r5, r1, r2
    a35c:	mls	r1, r2, r5, r1
    a360:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a362:	cmp	r1, #9
    a364:	add.w	r1, r0, #48	; 0x30
    a368:	it	ls
    a36a:	uxtbls	r0, r1
    a36c:	add	r1, sp, #40	; 0x28
    a36e:	it	hi
    a370:	addhi	r0, #55	; 0x37
    a372:	add	r1, r4
    a374:	it	hi
    a376:	uxtbhi	r0, r0
    a378:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    a37c:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    a37e:	mov	r1, r5
    a380:	cmp	r5, #0
    a382:	bne.n	a356 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a384:	cbz	r3, a394 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a386:	subs	r4, #1
    a388:	uxtb	r4, r4
		buf[i] = '-';
    a38a:	add	r3, sp, #40	; 0x28
    a38c:	add	r3, r4
    a38e:	movs	r2, #45	; 0x2d
    a390:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a394:	ldr	r3, [r7, #0]
    a396:	add	r2, sp, #4
    a398:	adds	r1, r2, r4
    a39a:	ldr	r3, [r3, #4]
    a39c:	mov	r0, r7
    a39e:	rsb	r2, r4, #34	; 0x22
    a3a2:	blx	r3
}
    a3a4:	add	sp, #44	; 0x2c
    a3a6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a3a8:	movs	r2, #48	; 0x30
    a3aa:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a3ae:	movs	r4, #33	; 0x21
    a3b0:	b.n	a384 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a3b2:	ldr	r3, [r0, #0]
    a3b4:	uxtb	r1, r1
    a3b6:	ldr	r3, [r3, #0]
    a3b8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a3ba:	add	sp, #44	; 0x2c
    a3bc:	pop	{r4, r5, r6, r7, pc}
    a3be:	nop

0000a3c0 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    a3c0:	bx	lr
    a3c2:	nop

0000a3c4 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    a3c4:	bx	lr
    a3c6:	nop

0000a3c8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a3c8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a3ca:	bl	2194 <setup>
	while (1) {
		loop();
    a3ce:	bl	2568 <loop>
		yield();
    a3d2:	bl	a1d4 <yield>
    a3d6:	b.n	a3ce <main+0x6>

0000a3d8 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    a3d8:	bx	lr
    a3da:	nop

0000a3dc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    a3dc:	cmp.w	r1, #896	; 0x380
    a3e0:	push	{r4, r5, r6, r7}
    a3e2:	it	cs
    a3e4:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    a3e8:	cpsid	i
	memory_pool = data;
    a3ea:	ldr	r2, [pc, #76]	; (a438 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    a3ec:	ldr	r4, [pc, #76]	; (a43c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)
    a3ee:	ldr	r3, [pc, #80]	; (a440 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    a3f0:	str	r0, [r2, #0]
	memory_pool_first_mask = 0;
    a3f2:	movs	r2, #0
    a3f4:	strh	r2, [r4, #0]
    a3f6:	add.w	r4, r3, #112	; 0x70
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    a3fa:	str.w	r2, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
    a3fe:	cmp	r3, r4
    a400:	bne.n	a3fa <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x1e>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a402:	cbz	r1, a432 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
    a404:	ldr	r6, [pc, #60]	; (a444 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
    a406:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a408:	movs	r7, #1
    a40a:	lsrs	r5, r3, #5
    a40c:	and.w	r4, r3, #31
    a410:	ldr.w	r2, [r6, r5, lsl #2]
    a414:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a418:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a41a:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a41c:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a41e:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a422:	bne.n	a40a <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    a424:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    a426:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    a428:	adds	r3, #1
    a42a:	cmp	r3, r1
    a42c:	add.w	r0, r0, #260	; 0x104
    a430:	bne.n	a426 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4a>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    a432:	cpsie	i

}
    a434:	pop	{r4, r5, r6, r7}
    a436:	bx	lr
    a438:	.word	0x2001de7c
    a43c:	.word	0x2001def6
    a440:	.word	0x2001de80
    a444:	.word	0x2001de84

0000a448 <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    a448:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    a44a:	cpsid	i
	index = memory_pool_first_mask;
    a44c:	ldr	r7, [pc, #140]	; (a4dc <AudioStream::allocate()+0x94>)
	p += index;
    a44e:	ldr	r6, [pc, #144]	; (a4e0 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    a450:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    a452:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    a456:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    a45a:	cmp	r0, r3
    a45c:	bcs.n	a484 <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a45e:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    a462:	cbnz	r1, a48c <AudioStream::allocate()+0x44>
    a464:	adds	r2, r0, #4
    a466:	add.w	r5, r6, #115	; 0x73
    a46a:	adds	r3, r4, #1
    a46c:	subs	r5, r5, r2
    a46e:	add.w	r5, r3, r5, lsr #2
    a472:	b.n	a47c <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a474:	ldr.w	r1, [r2], #4
		if (avail) break;
    a478:	cbnz	r1, a48c <AudioStream::allocate()+0x44>
    a47a:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a47c:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    a47e:	mov	r4, r3
		p++;
    a480:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a482:	bne.n	a474 <AudioStream::allocate()+0x2c>
			__enable_irq();
    a484:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    a486:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a488:	pop	{r4, r5, r6, r7}
    a48a:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    a48c:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    a490:	mov.w	r2, #2147483648	; 0x80000000
    a494:	lsrs	r2, r3
    a496:	bic.w	r1, r1, r2
	*p = avail;
    a49a:	str	r1, [r0, #0]
	if (!avail) index++;
    a49c:	cbnz	r1, a4a0 <AudioStream::allocate()+0x58>
    a49e:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    a4a0:	ldr	r1, [pc, #64]	; (a4e4 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    a4a2:	strh	r4, [r7, #0]
	used = memory_used + 1;
    a4a4:	ldrh	r2, [r1, #0]
    a4a6:	adds	r2, #1
	memory_used = used;
    a4a8:	uxth	r4, r2
    a4aa:	strh	r4, [r1, #0]
	__enable_irq();
    a4ac:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a4ae:	subs	r0, r0, r6
    a4b0:	asrs	r0, r0, #2
    a4b2:	rsb	r0, r3, r0, lsl #5
    a4b6:	add.w	r0, r0, r0, lsl #6
    a4ba:	lsls	r3, r0, #2
    a4bc:	ldr	r0, [pc, #40]	; (a4e8 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a4be:	ldr	r1, [pc, #44]	; (a4ec <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a4c0:	ldr	r0, [r0, #0]
    a4c2:	add.w	r3, r3, #8032	; 0x1f60
    a4c6:	adds	r3, #28
	block->ref_count = 1;
    a4c8:	movs	r5, #1
    a4ca:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    a4cc:	ldrh	r5, [r1, #0]
    a4ce:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a4d0:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a4d2:	it	hi
    a4d4:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a4d6:	pop	{r4, r5, r6, r7}
    a4d8:	bx	lr
    a4da:	nop
    a4dc:	.word	0x2001def6
    a4e0:	.word	0x2001de84
    a4e4:	.word	0x2001def8
    a4e8:	.word	0x2001de7c
    a4ec:	.word	0x2001de78

0000a4f0 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    a4f0:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    a4f2:	cpsid	i
	if (block->ref_count > 1) {
    a4f4:	ldrb	r3, [r0, #0]
    a4f6:	cmp	r3, #1
    a4f8:	bls.n	a502 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    a4fa:	subs	r3, #1
    a4fc:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    a4fe:	cpsie	i
    a500:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    a502:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    a504:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a506:	ldr	r4, [pc, #48]	; (a538 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a508:	ldr	r5, [pc, #48]	; (a53c <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a50a:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a50e:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a510:	mvns	r2, r2
    a512:	mov.w	r0, #2147483648	; 0x80000000
    a516:	and.w	r2, r2, #31
    a51a:	lsr.w	r2, r0, r2
    a51e:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    a520:	ldr	r2, [pc, #28]	; (a540 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a522:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a526:	cmp	r3, r6
    a528:	it	cc
    a52a:	strhcc	r3, [r5, #0]
		memory_used--;
    a52c:	ldrh	r3, [r2, #0]
    a52e:	subs	r3, #1
    a530:	strh	r3, [r2, #0]
	}
	__enable_irq();
    a532:	cpsie	i
}
    a534:	pop	{r4, r5, r6}
    a536:	bx	lr
    a538:	.word	0x2001de84
    a53c:	.word	0x2001def6
    a540:	.word	0x2001def8

0000a544 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a544:	ldr	r3, [r0, #12]
    a546:	cbz	r3, a576 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    a548:	push	{r4, r5}
    a54a:	b.n	a550 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a54c:	ldr	r3, [r3, #12]
    a54e:	cbz	r3, a574 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    a550:	ldrb	r0, [r3, #8]
    a552:	cmp	r0, r2
    a554:	bne.n	a54c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    a556:	ldr	r0, [r3, #4]
    a558:	ldrb	r4, [r3, #9]
    a55a:	ldr	r0, [r0, #16]
    a55c:	ldr.w	r5, [r0, r4, lsl #2]
    a560:	cmp	r5, #0
    a562:	bne.n	a54c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    a564:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    a568:	ldrb	r0, [r1, #0]
    a56a:	adds	r0, #1
    a56c:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a56e:	ldr	r3, [r3, #12]
    a570:	cmp	r3, #0
    a572:	bne.n	a550 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    a574:	pop	{r4, r5}
    a576:	bx	lr

0000a578 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a578:	ldrb	r3, [r0, #9]
    a57a:	cmp	r3, r1
    a57c:	bls.n	a58c <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    a57e:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    a580:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    a582:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    a586:	str.w	r2, [r3, r1, lsl #2]
	return in;
    a58a:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a58c:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    a58e:	bx	lr

0000a590 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    a590:	ldrb	r3, [r0, #16]
    a592:	cbnz	r3, a5de <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    a594:	ldr	r3, [r0, #4]
    a596:	ldrb	r2, [r0, #9]
    a598:	ldrb	r3, [r3, #9]
    a59a:	cmp	r2, r3
    a59c:	bhi.n	a5de <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    a59e:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    a5a0:	cpsid	i
	p = src.destination_list;
    a5a2:	ldr	r4, [r0, #0]
    a5a4:	ldr	r3, [r4, #12]
	if (p == NULL) {
    a5a6:	cbz	r3, a5f4 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a5a8:	ldr	r2, [r3, #12]
    a5aa:	cbz	r2, a5ba <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    a5ac:	ldr	r1, [r3, #0]
    a5ae:	cmp	r4, r1
    a5b0:	beq.n	a5e0 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    a5b2:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a5b4:	ldr	r2, [r3, #12]
    a5b6:	cmp	r2, #0
    a5b8:	bne.n	a5ac <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    a5ba:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    a5bc:	movs	r3, #0
    a5be:	str	r3, [r0, #12]
	src.numConnections++;
    a5c0:	ldrb	r3, [r4, #10]
    a5c2:	adds	r3, #1
    a5c4:	strb	r3, [r4, #10]
	src.active = true;
    a5c6:	ldr	r2, [r0, #0]

	dst.numConnections++;
    a5c8:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    a5ca:	movs	r3, #1
    a5cc:	strb	r3, [r2, #8]

	dst.numConnections++;
    a5ce:	ldrb	r2, [r1, #10]
    a5d0:	add	r2, r3
    a5d2:	strb	r2, [r1, #10]
	dst.active = true;
    a5d4:	ldr	r2, [r0, #4]
    a5d6:	strb	r3, [r2, #8]

	isConnected = true;
    a5d8:	strb	r3, [r0, #16]

	__enable_irq();
    a5da:	cpsie	i
}
    a5dc:	pop	{r4, r5}
    a5de:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    a5e0:	ldr	r5, [r3, #4]
    a5e2:	ldr	r1, [r0, #4]
    a5e4:	cmp	r5, r1
    a5e6:	bne.n	a5b2 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    a5e8:	ldrh	r1, [r3, #8]
    a5ea:	ldrh	r3, [r0, #8]
    a5ec:	cmp	r1, r3
    a5ee:	beq.n	a5da <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    a5f0:	mov	r3, r2
    a5f2:	b.n	a5b4 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    a5f4:	str	r0, [r4, #12]
    a5f6:	b.n	a5bc <AudioConnection::connect()+0x2c>

0000a5f8 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    a5f8:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    a5fa:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    a5fc:	cmp	r3, #0
    a5fe:	beq.n	a666 <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    a600:	ldr	r3, [r0, #4]
    a602:	ldrb	r2, [r0, #9]
    a604:	ldrb	r3, [r3, #9]
    a606:	cmp	r2, r3
    a608:	bhi.n	a666 <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    a60a:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    a60c:	ldr	r2, [r0, #0]
    a60e:	ldr	r3, [r2, #12]
	if (p == NULL) {
    a610:	cbz	r3, a664 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    a612:	cmp	r0, r3
    a614:	bne.n	a61c <AudioConnection::disconnect()+0x24>
    a616:	b.n	a66c <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    a618:	cmp	r0, r3
    a61a:	beq.n	a622 <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    a61c:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    a61e:	cmp	r3, #0
    a620:	bne.n	a618 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    a622:	ldr	r3, [r0, #4]
    a624:	ldrb	r1, [r0, #9]
    a626:	ldr	r3, [r3, #16]
    a628:	mov	r4, r0
    a62a:	ldr.w	r0, [r3, r1, lsl #2]
    a62e:	cbz	r0, a644 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    a630:	bl	a4f0 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    a634:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    a636:	ldr	r3, [r4, #4]
    a638:	ldrb	r2, [r4, #9]
    a63a:	ldr	r3, [r3, #16]
    a63c:	movs	r1, #0
    a63e:	str.w	r1, [r3, r2, lsl #2]
    a642:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    a644:	ldrb	r3, [r2, #10]
    a646:	subs	r3, #1
    a648:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    a64a:	ldr	r3, [r4, #0]
    a64c:	ldrb	r2, [r3, #10]
    a64e:	cbnz	r2, a652 <AudioConnection::disconnect()+0x5a>
		src.active = false;
    a650:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    a652:	ldr	r2, [r4, #4]
    a654:	ldrb	r3, [r2, #10]
    a656:	subs	r3, #1
    a658:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    a65a:	ldr	r3, [r4, #4]
    a65c:	ldrb	r2, [r3, #10]
    a65e:	cbz	r2, a668 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    a660:	movs	r3, #0
    a662:	strb	r3, [r4, #16]

	__enable_irq();
    a664:	cpsie	i
    a666:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    a668:	strb	r2, [r3, #8]
    a66a:	b.n	a660 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    a66c:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    a66e:	str	r3, [r2, #12]
    a670:	b.n	a622 <AudioConnection::disconnect()+0x2a>
    a672:	nop

0000a674 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a674:	ldr	r3, [pc, #32]	; (a698 <AudioStream::update_setup()+0x24>)
    a676:	ldrb	r2, [r3, #0]
    a678:	cbnz	r2, a692 <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a67a:	ldr	r0, [pc, #32]	; (a69c <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a67c:	ldr	r1, [pc, #32]	; (a6a0 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    a67e:	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a680:	movs	r4, #208	; 0xd0
    a682:	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a684:	movs	r2, #1
	update_scheduled = true;
	return true;
    a686:	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a688:	str	r2, [r1, #0]
	update_scheduled = true;
    a68a:	strb	r2, [r3, #0]
	return true;
}
    a68c:	ldr.w	r4, [sp], #4
    a690:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a692:	movs	r0, #0
    a694:	bx	lr
    a696:	nop
    a698:	.word	0x2001de80
    a69c:	.word	0xe000e440
    a6a0:	.word	0xe000e108

0000a6a4 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a6a4:	ldr	r1, [pc, #104]	; (a710 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a6a6:	ldr	r2, [pc, #108]	; (a714 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a6a8:	ldr	r0, [pc, #108]	; (a718 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    a6aa:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a6ac:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a6ae:	ldr	r5, [pc, #108]	; (a71c <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a6b0:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a6b2:	orr.w	r3, r3, #16777216	; 0x1000000
    a6b6:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a6b8:	ldr	r3, [r2, #0]
    a6ba:	orr.w	r3, r3, #1
    a6be:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a6c0:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a6c2:	cbnz	r4, a6ca <software_isr+0x26>
    a6c4:	b.n	a6f2 <software_isr+0x4e>
    a6c6:	ldr	r4, [r4, #20]
    a6c8:	cbz	r4, a6f2 <software_isr+0x4e>
		if (p->active) {
    a6ca:	ldrb	r3, [r4, #8]
    a6cc:	cmp	r3, #0
    a6ce:	beq.n	a6c6 <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    a6d0:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    a6d2:	ldr	r7, [r5, #0]
			p->update();
    a6d4:	ldr	r3, [r3, #0]
    a6d6:	mov	r0, r4
    a6d8:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a6da:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a6dc:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a6de:	subs	r3, r3, r7
    a6e0:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    a6e2:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a6e4:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    a6e6:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a6e8:	it	hi
    a6ea:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a6ec:	ldr	r4, [r4, #20]
    a6ee:	cmp	r4, #0
    a6f0:	bne.n	a6ca <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a6f2:	ldr	r3, [pc, #40]	; (a71c <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a6f4:	ldr	r2, [pc, #40]	; (a720 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a6f6:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a6f8:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    a6fa:	ldr	r4, [pc, #40]	; (a724 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a6fc:	subs	r3, r3, r6
    a6fe:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    a700:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a702:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    a704:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a706:	bls.n	a70c <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    a708:	strh	r1, [r2, #0]
    a70a:	pop	{r3, r4, r5, r6, r7, pc}
    a70c:	pop	{r3, r4, r5, r6, r7, pc}
    a70e:	nop
    a710:	.word	0xe000edfc
    a714:	.word	0xe0001000
    a718:	.word	0x2001de74
    a71c:	.word	0xe0001004
    a720:	.word	0x2001def4
    a724:	.word	0x2001defa

0000a728 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a728:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a72a:	ldr	r5, [pc, #56]	; (a764 <Stream::timedPeek()+0x3c>)
    a72c:	sub	sp, #8
    a72e:	ldr	r3, [r5, #0]
    a730:	str	r3, [sp, #0]
	return ret;
    a732:	ldr	r6, [sp, #0]
    a734:	mov	r4, r0
    a736:	b.n	a74a <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a738:	bl	a1d4 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a73c:	ldr	r3, [r5, #0]
    a73e:	str	r3, [sp, #4]
	return ret;
    a740:	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a742:	ldr	r2, [r4, #8]
    a744:	subs	r3, r3, r6
    a746:	cmp	r3, r2
    a748:	bcs.n	a75a <Stream::timedPeek()+0x32>
    c = peek();
    a74a:	ldr	r3, [r4, #0]
    a74c:	mov	r0, r4
    a74e:	ldr	r3, [r3, #24]
    a750:	blx	r3
    if (c >= 0) return c;
    a752:	cmp	r0, #0
    a754:	blt.n	a738 <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a756:	add	sp, #8
    a758:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a75a:	mov.w	r0, #4294967295
}
    a75e:	add	sp, #8
    a760:	pop	{r4, r5, r6, pc}
    a762:	nop
    a764:	.word	0x2001dd64

0000a768 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a768:	push	{r4, lr}
    a76a:	mov	r4, r0
    a76c:	b.n	a77c <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a76e:	cmp	r3, #45	; 0x2d
    a770:	beq.n	a78c <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a772:	cmp	r2, #9
    a774:	bls.n	a78c <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a776:	ldr	r3, [r4, #0]
    a778:	ldr	r3, [r3, #20]
    a77a:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a77c:	mov	r0, r4
    a77e:	bl	a728 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a782:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a784:	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    a788:	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a78a:	bge.n	a76e <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a78c:	mov	r0, r3
    a78e:	pop	{r4, pc}

0000a790 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a790:	push	{r3, r4, r5, r6, r7, lr}
    a792:	mov	r5, r1
    a794:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a796:	bl	a768 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a79a:	cmp	r0, #0
    a79c:	blt.n	a7e6 <Stream::parseInt(char)+0x56>
    a79e:	movs	r6, #0
    a7a0:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a7a2:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a7a4:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a7a8:	beq.n	a7be <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    a7aa:	cmp	r0, #45	; 0x2d
    a7ac:	beq.n	a7de <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    a7ae:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a7b2:	cmp	r2, #9
      value = value * 10 + c - '0';
    a7b4:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a7b8:	bhi.n	a7be <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    a7ba:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    a7be:	ldr	r3, [r4, #0]
    a7c0:	mov	r0, r4
    a7c2:	ldr	r3, [r3, #20]
    a7c4:	blx	r3
    c = timedPeek();
    a7c6:	mov	r0, r4
    a7c8:	bl	a728 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    a7cc:	sub.w	r3, r0, #48	; 0x30
    a7d0:	cmp	r3, #9
    a7d2:	bls.n	a7a2 <Stream::parseInt(char)+0x12>
    a7d4:	cmp	r0, r5
    a7d6:	beq.n	a7a2 <Stream::parseInt(char)+0x12>

  if(isNegative)
    a7d8:	cbz	r7, a7e2 <Stream::parseInt(char)+0x52>
    value = -value;
    a7da:	negs	r0, r6
    a7dc:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    a7de:	movs	r7, #1
    a7e0:	b.n	a7be <Stream::parseInt(char)+0x2e>
    a7e2:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a7e4:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a7e6:	movs	r0, #0
    a7e8:	pop	{r3, r4, r5, r6, r7, pc}
    a7ea:	nop

0000a7ec <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a7ec:	movs	r1, #1
    a7ee:	b.w	a790 <Stream::parseInt(char)>
    a7f2:	nop

0000a7f4 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    a7f4:	bx	lr
    a7f6:	nop

0000a7f8 <operator delete(void*, unsigned int)>:
    a7f8:	b.w	c030 <free>

0000a7fc <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a7fc:	ldr	r2, [pc, #20]	; (a814 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    a7fe:	ldr	r3, [pc, #24]	; (a818 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a800:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a802:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a804:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a806:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a808:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    a80a:	it	cc
    a80c:	addcc	r0, #64	; 0x40
    a80e:	subs	r0, r0, r3
}
    a810:	bx	lr
    a812:	nop
    a814:	.word	0x2001df00
    a818:	.word	0x2001df01

0000a81c <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    a81c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    a81e:	ldr	r3, [pc, #172]	; (a8cc <uart4_status_isr+0xb0>)
    a820:	ldrb	r2, [r3, #4]
    a822:	lsls	r4, r2, #26
    a824:	bpl.n	a866 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a826:	ldr	r0, [pc, #168]	; (a8d0 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a828:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a82a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a82c:	ldr	r1, [pc, #164]	; (a8d4 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a82e:	adds	r3, #1
    a830:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a832:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a834:	it	gt
    a836:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a838:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a83a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a83c:	beq.n	a846 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    a83e:	ldr	r4, [pc, #152]	; (a8d8 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    a840:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a842:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a844:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a846:	ldr	r2, [pc, #148]	; (a8dc <uart4_status_isr+0xc0>)
    a848:	ldr	r1, [r2, #0]
    a84a:	cbz	r1, a866 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a84c:	ldr	r2, [pc, #144]	; (a8e0 <uart4_status_isr+0xc4>)
    a84e:	ldrb	r2, [r2, #0]
    a850:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a852:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a854:	itet	cc
    a856:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a85a:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a85c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a85e:	cmp	r3, #39	; 0x27
    a860:	itt	gt
    a862:	movgt	r3, #1
    a864:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    a866:	ldr	r2, [pc, #100]	; (a8cc <uart4_status_isr+0xb0>)
    a868:	ldrb	r3, [r2, #3]
    a86a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a86c:	lsls	r0, r3, #24
    a86e:	bmi.n	a894 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    a870:	lsls	r2, r3, #25
    a872:	bpl.n	a890 <uart4_status_isr+0x74>
    a874:	ldr	r3, [pc, #84]	; (a8cc <uart4_status_isr+0xb0>)
    a876:	ldrb	r3, [r3, #4]
    a878:	lsls	r3, r3, #25
    a87a:	bpl.n	a890 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a87c:	ldr	r3, [pc, #100]	; (a8e4 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a87e:	ldr	r1, [pc, #104]	; (a8e8 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a880:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a882:	movs	r2, #0
    a884:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a886:	cbz	r3, a88a <uart4_status_isr+0x6e>
    a888:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    a88a:	ldr	r3, [pc, #64]	; (a8cc <uart4_status_isr+0xb0>)
    a88c:	movs	r2, #44	; 0x2c
    a88e:	strb	r2, [r3, #3]
	}
}
    a890:	pop	{r4, r5}
    a892:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a894:	ldrb	r1, [r2, #4]
    a896:	lsls	r1, r1, #24
    a898:	bpl.n	a870 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    a89a:	ldr	r1, [pc, #80]	; (a8ec <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a89c:	ldr	r0, [pc, #64]	; (a8e0 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a89e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a8a0:	ldrb	r1, [r0, #0]
    a8a2:	uxtb	r1, r1
		if (head == tail) {
    a8a4:	cmp	r4, r1
    a8a6:	beq.n	a8c4 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    a8a8:	adds	r2, r1, #1
    a8aa:	cmp	r2, #39	; 0x27
    a8ac:	itt	hi
    a8ae:	movhi	r1, #0
    a8b0:	movhi	r2, r1
			n = tx_buffer[tail];
    a8b2:	ldr	r5, [pc, #60]	; (a8f0 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a8b4:	ldr	r4, [pc, #20]	; (a8cc <uart4_status_isr+0xb0>)
    a8b6:	it	ls
    a8b8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a8ba:	ldrb	r2, [r5, r2]
    a8bc:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a8be:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a8c0:	strb	r1, [r0, #0]
    a8c2:	b.n	a870 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    a8c4:	movs	r1, #108	; 0x6c
    a8c6:	strb	r1, [r2, #3]
    a8c8:	b.n	a870 <uart4_status_isr+0x54>
    a8ca:	nop
    a8cc:	.word	0x400ea000
    a8d0:	.word	0x2001df00
    a8d4:	.word	0x2001df01
    a8d8:	.word	0x2001df2c
    a8dc:	.word	0x2001defc
    a8e0:	.word	0x2001df6d
    a8e4:	.word	0x2001df70
    a8e8:	.word	0x2001df6c
    a8ec:	.word	0x2001df74
    a8f0:	.word	0x2001df04

0000a8f4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a8f4:	ldr	r2, [pc, #20]	; (a90c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    a8f6:	ldr	r3, [pc, #24]	; (a910 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a8f8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a8fa:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a8fc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a8fe:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a900:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    a902:	it	cc
    a904:	addcc	r0, #64	; 0x40
    a906:	subs	r0, r0, r3
}
    a908:	bx	lr
    a90a:	nop
    a90c:	.word	0x2001dfe8
    a910:	.word	0x2001df7d

0000a914 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    a914:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a916:	ldr	r3, [pc, #224]	; (a9f8 <uart1_status_isr+0xe4>)
    a918:	ldrb	r2, [r3, #4]
    a91a:	tst.w	r2, #48	; 0x30
    a91e:	beq.n	a97a <uart1_status_isr+0x66>
		__disable_irq();
    a920:	cpsid	i
		avail = UART1_RCFIFO;
    a922:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a924:	and.w	r2, r1, #255	; 0xff
    a928:	cmp	r1, #0
    a92a:	beq.n	a9a8 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a92c:	cpsie	i
			head = rx_buffer_head;
    a92e:	ldr	r7, [pc, #204]	; (a9fc <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a930:	ldr	r1, [pc, #204]	; (aa00 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a932:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a934:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a936:	ldr	r6, [pc, #204]	; (aa04 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a938:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a93a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    a93c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    a93e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a940:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a942:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a944:	it	cs
    a946:	movcs	r3, #0
				if (newhead != tail) {
    a948:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a94a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a94e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a950:	itt	ne
    a952:	strbne	r1, [r6, r3]
    a954:	movne	r0, r3
				}
			} while (--avail > 0);
    a956:	ands.w	r2, r2, #255	; 0xff
    a95a:	bne.n	a93e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a95c:	ldr	r3, [pc, #168]	; (aa08 <uart1_status_isr+0xf4>)
    a95e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a960:	uxtb	r2, r0
    a962:	strb	r2, [r7, #0]
			if (rts_pin) {
    a964:	cbz	r3, a97a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a966:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a968:	itet	cc
    a96a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a96e:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a970:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a972:	cmp	r0, #39	; 0x27
    a974:	itt	gt
    a976:	movgt	r2, #1
    a978:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    a97a:	ldr	r1, [pc, #124]	; (a9f8 <uart1_status_isr+0xe4>)
    a97c:	ldrb	r2, [r1, #3]
    a97e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a980:	lsls	r5, r2, #24
    a982:	bmi.n	a9b2 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    a984:	lsls	r2, r2, #25
    a986:	bpl.n	a9a4 <uart1_status_isr+0x90>
    a988:	ldr	r3, [pc, #108]	; (a9f8 <uart1_status_isr+0xe4>)
    a98a:	ldrb	r3, [r3, #4]
    a98c:	lsls	r3, r3, #25
    a98e:	bpl.n	a9a4 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a990:	ldr	r3, [pc, #120]	; (aa0c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a992:	ldr	r1, [pc, #124]	; (aa10 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a994:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a996:	movs	r2, #0
    a998:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a99a:	cbz	r3, a99e <uart1_status_isr+0x8a>
    a99c:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    a99e:	ldr	r3, [pc, #88]	; (a9f8 <uart1_status_isr+0xe4>)
    a9a0:	movs	r2, #60	; 0x3c
    a9a2:	strb	r2, [r3, #3]
	}
}
    a9a4:	pop	{r4, r5, r6, r7}
    a9a6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a9a8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    a9aa:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a9ac:	strb	r2, [r3, #17]
			__enable_irq();
    a9ae:	cpsie	i
    a9b0:	b.n	a97a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a9b2:	ldrb	r3, [r1, #4]
    a9b4:	lsls	r4, r3, #24
    a9b6:	bpl.n	a984 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    a9b8:	ldr	r3, [pc, #88]	; (aa14 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    a9ba:	ldr	r6, [pc, #92]	; (aa18 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a9bc:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a9be:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a9c0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    a9c2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    a9c4:	cmp	r4, r3
    a9c6:	beq.n	a9e6 <uart1_status_isr+0xd2>
    a9c8:	ldr	r5, [pc, #80]	; (aa1c <uart1_status_isr+0x108>)
    a9ca:	b.n	a9d0 <uart1_status_isr+0xbc>
    a9cc:	cmp	r3, r4
    a9ce:	beq.n	a9e6 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    a9d0:	adds	r3, #1
    a9d2:	cmp	r3, #40	; 0x28
    a9d4:	it	cs
    a9d6:	movcs	r3, #0
			avail = UART1_S1;
    a9d8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a9da:	ldrb	r0, [r5, r3]
    a9dc:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    a9de:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    a9e0:	ldrb	r0, [r1, #20]
    a9e2:	cmp	r0, #7
    a9e4:	bls.n	a9cc <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    a9e6:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a9e8:	ldr	r1, [pc, #12]	; (a9f8 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    a9ea:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a9ec:	ldrb	r3, [r1, #4]
    a9ee:	lsls	r0, r3, #24
    a9f0:	itt	mi
    a9f2:	movmi	r3, #124	; 0x7c
    a9f4:	strbmi	r3, [r1, #3]
    a9f6:	b.n	a984 <uart1_status_isr+0x70>
    a9f8:	.word	0x4006b000
    a9fc:	.word	0x2001dfe8
    aa00:	.word	0x2001df7d
    aa04:	.word	0x2001dfa8
    aa08:	.word	0x2001df78
    aa0c:	.word	0x2001dfec
    aa10:	.word	0x2001df7c
    aa14:	.word	0x2001dff0
    aa18:	.word	0x2001dfe9
    aa1c:	.word	0x2001df80

0000aa20 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    aa20:	ldr	r2, [pc, #20]	; (aa38 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    aa22:	ldr	r3, [pc, #24]	; (aa3c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    aa24:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    aa26:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    aa28:	uxtb	r0, r0
	tail = rx_buffer_tail;
    aa2a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    aa2c:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    aa2e:	it	cc
    aa30:	addcc	r0, #64	; 0x40
    aa32:	subs	r0, r0, r3
}
    aa34:	bx	lr
    aa36:	nop
    aa38:	.word	0x2001dff8
    aa3c:	.word	0x2001dff9

0000aa40 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    aa40:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    aa42:	ldr	r3, [pc, #172]	; (aaf0 <uart3_status_isr+0xb0>)
    aa44:	ldrb	r2, [r3, #4]
    aa46:	lsls	r4, r2, #26
    aa48:	bpl.n	aa8a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    aa4a:	ldr	r0, [pc, #168]	; (aaf4 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    aa4c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    aa4e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    aa50:	ldr	r1, [pc, #164]	; (aaf8 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    aa52:	adds	r3, #1
    aa54:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    aa56:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    aa58:	it	gt
    aa5a:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    aa5c:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    aa5e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    aa60:	beq.n	aa6a <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    aa62:	ldr	r4, [pc, #152]	; (aafc <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    aa64:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    aa66:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    aa68:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    aa6a:	ldr	r2, [pc, #148]	; (ab00 <uart3_status_isr+0xc0>)
    aa6c:	ldr	r1, [r2, #0]
    aa6e:	cbz	r1, aa8a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    aa70:	ldr	r2, [pc, #144]	; (ab04 <uart3_status_isr+0xc4>)
    aa72:	ldrb	r2, [r2, #0]
    aa74:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    aa76:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    aa78:	itet	cc
    aa7a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    aa7e:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    aa80:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    aa82:	cmp	r3, #39	; 0x27
    aa84:	itt	gt
    aa86:	movgt	r3, #1
    aa88:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    aa8a:	ldr	r2, [pc, #100]	; (aaf0 <uart3_status_isr+0xb0>)
    aa8c:	ldrb	r3, [r2, #3]
    aa8e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    aa90:	lsls	r0, r3, #24
    aa92:	bmi.n	aab8 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    aa94:	lsls	r2, r3, #25
    aa96:	bpl.n	aab4 <uart3_status_isr+0x74>
    aa98:	ldr	r3, [pc, #84]	; (aaf0 <uart3_status_isr+0xb0>)
    aa9a:	ldrb	r3, [r3, #4]
    aa9c:	lsls	r3, r3, #25
    aa9e:	bpl.n	aab4 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    aaa0:	ldr	r3, [pc, #100]	; (ab08 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    aaa2:	ldr	r1, [pc, #104]	; (ab0c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    aaa4:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    aaa6:	movs	r2, #0
    aaa8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    aaaa:	cbz	r3, aaae <uart3_status_isr+0x6e>
    aaac:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    aaae:	ldr	r3, [pc, #64]	; (aaf0 <uart3_status_isr+0xb0>)
    aab0:	movs	r2, #44	; 0x2c
    aab2:	strb	r2, [r3, #3]
	}
}
    aab4:	pop	{r4, r5}
    aab6:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    aab8:	ldrb	r1, [r2, #4]
    aaba:	lsls	r1, r1, #24
    aabc:	bpl.n	aa94 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    aabe:	ldr	r1, [pc, #80]	; (ab10 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    aac0:	ldr	r0, [pc, #64]	; (ab04 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    aac2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    aac4:	ldrb	r1, [r0, #0]
    aac6:	uxtb	r1, r1
		if (head == tail) {
    aac8:	cmp	r4, r1
    aaca:	beq.n	aae8 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    aacc:	adds	r2, r1, #1
    aace:	cmp	r2, #39	; 0x27
    aad0:	itt	hi
    aad2:	movhi	r1, #0
    aad4:	movhi	r2, r1
			n = tx_buffer[tail];
    aad6:	ldr	r5, [pc, #60]	; (ab14 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    aad8:	ldr	r4, [pc, #20]	; (aaf0 <uart3_status_isr+0xb0>)
    aada:	it	ls
    aadc:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    aade:	ldrb	r2, [r5, r2]
    aae0:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    aae2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    aae4:	strb	r1, [r0, #0]
    aae6:	b.n	aa94 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    aae8:	movs	r1, #108	; 0x6c
    aaea:	strb	r1, [r2, #3]
    aaec:	b.n	aa94 <uart3_status_isr+0x54>
    aaee:	nop
    aaf0:	.word	0x4006d000
    aaf4:	.word	0x2001dff8
    aaf8:	.word	0x2001dff9
    aafc:	.word	0x2001e024
    ab00:	.word	0x2001dff4
    ab04:	.word	0x2001e065
    ab08:	.word	0x2001e068
    ab0c:	.word	0x2001e064
    ab10:	.word	0x2001e06c
    ab14:	.word	0x2001dffc

0000ab18 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ab18:	ldr	r2, [pc, #20]	; (ab30 <serial_available+0x18>)
	tail = rx_buffer_tail;
    ab1a:	ldr	r3, [pc, #24]	; (ab34 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ab1c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    ab1e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ab20:	uxtb	r0, r0
	tail = rx_buffer_tail;
    ab22:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    ab24:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    ab26:	it	cc
    ab28:	addcc	r0, #64	; 0x40
    ab2a:	subs	r0, r0, r3
}
    ab2c:	bx	lr
    ab2e:	nop
    ab30:	.word	0x2001e074
    ab34:	.word	0x2001e075

0000ab38 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    ab38:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    ab3a:	ldr	r3, [pc, #224]	; (ac1c <uart0_status_isr+0xe4>)
    ab3c:	ldrb	r2, [r3, #4]
    ab3e:	tst.w	r2, #48	; 0x30
    ab42:	beq.n	ab9e <uart0_status_isr+0x66>
		__disable_irq();
    ab44:	cpsid	i
		avail = UART0_RCFIFO;
    ab46:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    ab48:	and.w	r2, r1, #255	; 0xff
    ab4c:	cmp	r1, #0
    ab4e:	beq.n	abcc <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    ab50:	cpsie	i
			head = rx_buffer_head;
    ab52:	ldr	r7, [pc, #204]	; (ac20 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    ab54:	ldr	r1, [pc, #204]	; (ac24 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    ab56:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    ab58:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    ab5a:	ldr	r6, [pc, #204]	; (ac28 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    ab5c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    ab5e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    ab60:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    ab62:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    ab64:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    ab66:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    ab68:	it	cs
    ab6a:	movcs	r3, #0
				if (newhead != tail) {
    ab6c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    ab6e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    ab72:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    ab74:	itt	ne
    ab76:	strbne	r1, [r6, r3]
    ab78:	movne	r0, r3
				}
			} while (--avail > 0);
    ab7a:	ands.w	r2, r2, #255	; 0xff
    ab7e:	bne.n	ab62 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    ab80:	ldr	r3, [pc, #168]	; (ac2c <uart0_status_isr+0xf4>)
    ab82:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    ab84:	uxtb	r2, r0
    ab86:	strb	r2, [r7, #0]
			if (rts_pin) {
    ab88:	cbz	r3, ab9e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    ab8a:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    ab8c:	itet	cc
    ab8e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    ab92:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    ab94:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    ab96:	cmp	r0, #39	; 0x27
    ab98:	itt	gt
    ab9a:	movgt	r2, #1
    ab9c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    ab9e:	ldr	r1, [pc, #124]	; (ac1c <uart0_status_isr+0xe4>)
    aba0:	ldrb	r2, [r1, #3]
    aba2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    aba4:	lsls	r5, r2, #24
    aba6:	bmi.n	abd6 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    aba8:	lsls	r2, r2, #25
    abaa:	bpl.n	abc8 <uart0_status_isr+0x90>
    abac:	ldr	r3, [pc, #108]	; (ac1c <uart0_status_isr+0xe4>)
    abae:	ldrb	r3, [r3, #4]
    abb0:	lsls	r3, r3, #25
    abb2:	bpl.n	abc8 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    abb4:	ldr	r3, [pc, #120]	; (ac30 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    abb6:	ldr	r1, [pc, #124]	; (ac34 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    abb8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    abba:	movs	r2, #0
    abbc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    abbe:	cbz	r3, abc2 <uart0_status_isr+0x8a>
    abc0:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    abc2:	ldr	r3, [pc, #88]	; (ac1c <uart0_status_isr+0xe4>)
    abc4:	movs	r2, #60	; 0x3c
    abc6:	strb	r2, [r3, #3]
	}
}
    abc8:	pop	{r4, r5, r6, r7}
    abca:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    abcc:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    abce:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    abd0:	strb	r2, [r3, #17]
			__enable_irq();
    abd2:	cpsie	i
    abd4:	b.n	ab9e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    abd6:	ldrb	r3, [r1, #4]
    abd8:	lsls	r4, r3, #24
    abda:	bpl.n	aba8 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    abdc:	ldr	r3, [pc, #88]	; (ac38 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    abde:	ldr	r6, [pc, #92]	; (ac3c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    abe0:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    abe2:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    abe4:	uxtb	r4, r4
		tail = tx_buffer_tail;
    abe6:	uxtb	r3, r3
		do {
			if (tail == head) break;
    abe8:	cmp	r4, r3
    abea:	beq.n	ac0a <uart0_status_isr+0xd2>
    abec:	ldr	r5, [pc, #80]	; (ac40 <uart0_status_isr+0x108>)
    abee:	b.n	abf4 <uart0_status_isr+0xbc>
    abf0:	cmp	r3, r4
    abf2:	beq.n	ac0a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    abf4:	adds	r3, #1
    abf6:	cmp	r3, #64	; 0x40
    abf8:	it	cs
    abfa:	movcs	r3, #0
			avail = UART0_S1;
    abfc:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    abfe:	ldrb	r0, [r5, r3]
    ac00:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    ac02:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    ac04:	ldrb	r0, [r1, #20]
    ac06:	cmp	r0, #7
    ac08:	bls.n	abf0 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    ac0a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    ac0c:	ldr	r1, [pc, #12]	; (ac1c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    ac0e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    ac10:	ldrb	r3, [r1, #4]
    ac12:	lsls	r0, r3, #24
    ac14:	itt	mi
    ac16:	movmi	r3, #124	; 0x7c
    ac18:	strbmi	r3, [r1, #3]
    ac1a:	b.n	aba8 <uart0_status_isr+0x70>
    ac1c:	.word	0x4006a000
    ac20:	.word	0x2001e074
    ac24:	.word	0x2001e075
    ac28:	.word	0x2001e0b8
    ac2c:	.word	0x2001e070
    ac30:	.word	0x2001e0fc
    ac34:	.word	0x2001e0f8
    ac38:	.word	0x2001e100
    ac3c:	.word	0x2001e0f9
    ac40:	.word	0x2001e078

0000ac44 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac44:	ldr	r2, [pc, #20]	; (ac5c <serial6_available+0x18>)
	tail = rx_buffer_tail;
    ac46:	ldr	r3, [pc, #24]	; (ac60 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac48:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    ac4a:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac4c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    ac4e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    ac50:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    ac52:	it	cc
    ac54:	addcc	r0, #64	; 0x40
    ac56:	subs	r0, r0, r3
}
    ac58:	bx	lr
    ac5a:	nop
    ac5c:	.word	0x2001e108
    ac60:	.word	0x2001e109

0000ac64 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    ac64:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    ac66:	ldr	r3, [pc, #176]	; (ad18 <lpuart0_status_isr+0xb4>)
    ac68:	ldr	r2, [r3, #4]
    ac6a:	lsls	r4, r2, #10
    ac6c:	bpl.n	acae <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    ac6e:	ldr	r0, [pc, #172]	; (ad1c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    ac70:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    ac72:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ac74:	ldr	r1, [pc, #168]	; (ad20 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    ac76:	adds	r3, #1
    ac78:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ac7a:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    ac7c:	it	gt
    ac7e:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ac80:	cmp	r3, r1
    ac82:	beq.n	ac8e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    ac84:	ldr	r4, [pc, #156]	; (ad24 <lpuart0_status_isr+0xc0>)
    ac86:	uxtb	r2, r2
			rx_buffer_head = head;
    ac88:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    ac8a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    ac8c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    ac8e:	ldr	r2, [pc, #152]	; (ad28 <lpuart0_status_isr+0xc4>)
    ac90:	ldr	r1, [r2, #0]
    ac92:	cbz	r1, acae <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    ac94:	ldr	r2, [pc, #148]	; (ad2c <lpuart0_status_isr+0xc8>)
    ac96:	ldrb	r2, [r2, #0]
    ac98:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    ac9a:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    ac9c:	itet	cc
    ac9e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    aca2:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    aca4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    aca6:	cmp	r3, #39	; 0x27
    aca8:	itt	gt
    acaa:	movgt	r3, #1
    acac:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    acae:	ldr	r2, [pc, #104]	; (ad18 <lpuart0_status_isr+0xb4>)
    acb0:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    acb2:	lsls	r0, r3, #8
    acb4:	bpl.n	acbc <lpuart0_status_isr+0x58>
    acb6:	ldr	r2, [r2, #4]
    acb8:	lsls	r1, r2, #8
    acba:	bmi.n	ace0 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    acbc:	lsls	r2, r3, #9
    acbe:	bpl.n	acdc <lpuart0_status_isr+0x78>
    acc0:	ldr	r3, [pc, #84]	; (ad18 <lpuart0_status_isr+0xb4>)
    acc2:	ldr	r3, [r3, #4]
    acc4:	lsls	r3, r3, #9
    acc6:	bpl.n	acdc <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    acc8:	ldr	r3, [pc, #100]	; (ad30 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    acca:	ldr	r1, [pc, #104]	; (ad34 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    accc:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    acce:	movs	r2, #0
    acd0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    acd2:	cbz	r3, acd6 <lpuart0_status_isr+0x72>
    acd4:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    acd6:	ldr	r3, [pc, #96]	; (ad38 <lpuart0_status_isr+0xd4>)
    acd8:	movs	r2, #0
    acda:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    acdc:	pop	{r4, r5}
    acde:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    ace0:	ldr	r2, [pc, #88]	; (ad3c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    ace2:	ldr	r1, [pc, #72]	; (ad2c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    ace4:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    ace6:	ldrb	r2, [r1, #0]
    ace8:	uxtb	r2, r2
		if (head == tail) {
    acea:	cmp	r0, r2
    acec:	beq.n	ad0a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    acee:	adds	r2, #1
    acf0:	cmp	r2, #39	; 0x27
    acf2:	itt	hi
    acf4:	movhi	r0, #0
    acf6:	movhi	r2, r0
			n = tx_buffer[tail];
    acf8:	ldr	r5, [pc, #68]	; (ad40 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    acfa:	ldr	r4, [pc, #28]	; (ad18 <lpuart0_status_isr+0xb4>)
    acfc:	it	ls
    acfe:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    ad00:	ldrb	r2, [r5, r2]
    ad02:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    ad04:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    ad06:	strb	r0, [r1, #0]
    ad08:	b.n	acbc <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    ad0a:	ldr	r0, [pc, #56]	; (ad44 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    ad0c:	ldr	r2, [pc, #40]	; (ad38 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    ad0e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    ad10:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    ad12:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    ad14:	str	r1, [r2, #0]
    ad16:	b.n	acbc <lpuart0_status_isr+0x58>
    ad18:	.word	0x400c4000
    ad1c:	.word	0x2001e108
    ad20:	.word	0x2001e109
    ad24:	.word	0x2001e134
    ad28:	.word	0x2001e104
    ad2c:	.word	0x2001e175
    ad30:	.word	0x2001e178
    ad34:	.word	0x2001e174
    ad38:	.word	0x43880158
    ad3c:	.word	0x2001e17c
    ad40:	.word	0x2001e10c
    ad44:	.word	0x4388015c

0000ad48 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    ad48:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ad4a:	ldr	r2, [pc, #96]	; (adac <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ad4c:	ldr	r3, [pc, #96]	; (adb0 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ad4e:	ldr	r1, [pc, #100]	; (adb4 <usb_init_serialnumber+0x6c>)
    ad50:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ad52:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ad54:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ad56:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ad58:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ad5a:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ad5c:	ldrb	r3, [r2, #0]
    ad5e:	lsls	r3, r3, #24
    ad60:	bpl.n	ad5c <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ad62:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    ad64:	ldr	r3, [pc, #80]	; (adb8 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ad66:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    ad68:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    ad6a:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ad6c:	ldr	r3, [pc, #76]	; (adbc <usb_init_serialnumber+0x74>)
    ad6e:	ldr	r4, [pc, #80]	; (adc0 <usb_init_serialnumber+0x78>)
    ad70:	cmp	r0, r3
    ad72:	it	ls
    ad74:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    ad78:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ad7a:	it	ls
    ad7c:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    ad7e:	movs	r2, #10
    ad80:	bl	adc4 <ultoa>
    ad84:	add	r1, sp, #4
    ad86:	mov	r0, r4
	for (i=0; i<10; i++) {
    ad88:	movs	r3, #0
		char c = buf[i];
    ad8a:	ldrb.w	r2, [r1], #1
    ad8e:	adds	r3, #1
		if (!c) break;
    ad90:	cbz	r2, ada2 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    ad92:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    ad94:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    ad98:	bne.n	ad8a <usb_init_serialnumber+0x42>
    ad9a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ad9c:	strb	r3, [r4, #0]
}
    ad9e:	add	sp, #16
    ada0:	pop	{r4, pc}
    ada2:	lsls	r3, r3, #1
    ada4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ada6:	strb	r3, [r4, #0]
}
    ada8:	add	sp, #16
    adaa:	pop	{r4, pc}
    adac:	.word	0x40020004
    adb0:	.word	0x40020000
    adb4:	.word	0x41070000
    adb8:	.word	0x4002000c
    adbc:	.word	0x0098967f
    adc0:	.word	0x200179c0

0000adc4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    adc4:	push	{r4, r5, r6, r7}
    adc6:	subs	r5, r1, #1
    adc8:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    adca:	movs	r4, #0
    adcc:	b.n	add0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    adce:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    add0:	udiv	r3, r0, r2
    add4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    add8:	cmp	r0, #9
    adda:	add.w	r7, r0, #48	; 0x30
    adde:	itet	hi
    ade0:	addhi	r0, #55	; 0x37
    ade2:	uxtbls	r0, r7
    ade4:	uxtbhi	r0, r0
    ade6:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    adea:	mov	r0, r3
    adec:	cmp	r3, #0
    adee:	bne.n	adce <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    adf0:	adds	r2, r1, r4
    adf2:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    adf4:	cbz	r4, ae0a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    adf6:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    adf8:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    adfc:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    adfe:	adds	r3, #1
    ae00:	subs	r0, r4, r3
    ae02:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    ae04:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ae08:	blt.n	adf6 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    ae0a:	mov	r0, r1
    ae0c:	pop	{r4, r5, r6, r7}
    ae0e:	bx	lr

0000ae10 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ae10:	ldr	r2, [pc, #20]	; (ae28 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    ae12:	ldr	r3, [pc, #24]	; (ae2c <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ae14:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    ae16:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ae18:	uxtb	r0, r0
	tail = rx_buffer_tail;
    ae1a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    ae1c:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    ae1e:	it	cc
    ae20:	addcc	r0, #64	; 0x40
    ae22:	subs	r0, r0, r3
}
    ae24:	bx	lr
    ae26:	nop
    ae28:	.word	0x2001e184
    ae2c:	.word	0x2001e185

0000ae30 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    ae30:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    ae32:	ldr	r3, [pc, #172]	; (aee0 <uart2_status_isr+0xb0>)
    ae34:	ldrb	r2, [r3, #4]
    ae36:	lsls	r4, r2, #26
    ae38:	bpl.n	ae7a <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    ae3a:	ldr	r0, [pc, #168]	; (aee4 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    ae3c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    ae3e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ae40:	ldr	r1, [pc, #164]	; (aee8 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    ae42:	adds	r3, #1
    ae44:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ae46:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    ae48:	it	gt
    ae4a:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ae4c:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    ae4e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ae50:	beq.n	ae5a <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    ae52:	ldr	r4, [pc, #152]	; (aeec <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    ae54:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    ae56:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    ae58:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    ae5a:	ldr	r2, [pc, #148]	; (aef0 <uart2_status_isr+0xc0>)
    ae5c:	ldr	r1, [r2, #0]
    ae5e:	cbz	r1, ae7a <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    ae60:	ldr	r2, [pc, #144]	; (aef4 <uart2_status_isr+0xc4>)
    ae62:	ldrb	r2, [r2, #0]
    ae64:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    ae66:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    ae68:	itet	cc
    ae6a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    ae6e:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    ae70:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    ae72:	cmp	r3, #39	; 0x27
    ae74:	itt	gt
    ae76:	movgt	r3, #1
    ae78:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    ae7a:	ldr	r2, [pc, #100]	; (aee0 <uart2_status_isr+0xb0>)
    ae7c:	ldrb	r3, [r2, #3]
    ae7e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    ae80:	lsls	r0, r3, #24
    ae82:	bmi.n	aea8 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    ae84:	lsls	r2, r3, #25
    ae86:	bpl.n	aea4 <uart2_status_isr+0x74>
    ae88:	ldr	r3, [pc, #84]	; (aee0 <uart2_status_isr+0xb0>)
    ae8a:	ldrb	r3, [r3, #4]
    ae8c:	lsls	r3, r3, #25
    ae8e:	bpl.n	aea4 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    ae90:	ldr	r3, [pc, #100]	; (aef8 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    ae92:	ldr	r1, [pc, #104]	; (aefc <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    ae94:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    ae96:	movs	r2, #0
    ae98:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    ae9a:	cbz	r3, ae9e <uart2_status_isr+0x6e>
    ae9c:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    ae9e:	ldr	r3, [pc, #64]	; (aee0 <uart2_status_isr+0xb0>)
    aea0:	movs	r2, #44	; 0x2c
    aea2:	strb	r2, [r3, #3]
	}
}
    aea4:	pop	{r4, r5}
    aea6:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    aea8:	ldrb	r1, [r2, #4]
    aeaa:	lsls	r1, r1, #24
    aeac:	bpl.n	ae84 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    aeae:	ldr	r1, [pc, #80]	; (af00 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    aeb0:	ldr	r0, [pc, #64]	; (aef4 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    aeb2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    aeb4:	ldrb	r1, [r0, #0]
    aeb6:	uxtb	r1, r1
		if (head == tail) {
    aeb8:	cmp	r4, r1
    aeba:	beq.n	aed8 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    aebc:	adds	r2, r1, #1
    aebe:	cmp	r2, #39	; 0x27
    aec0:	itt	hi
    aec2:	movhi	r1, #0
    aec4:	movhi	r2, r1
			n = tx_buffer[tail];
    aec6:	ldr	r5, [pc, #60]	; (af04 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    aec8:	ldr	r4, [pc, #20]	; (aee0 <uart2_status_isr+0xb0>)
    aeca:	it	ls
    aecc:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    aece:	ldrb	r2, [r5, r2]
    aed0:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    aed2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    aed4:	strb	r1, [r0, #0]
    aed6:	b.n	ae84 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    aed8:	movs	r1, #108	; 0x6c
    aeda:	strb	r1, [r2, #3]
    aedc:	b.n	ae84 <uart2_status_isr+0x54>
    aede:	nop
    aee0:	.word	0x4006c000
    aee4:	.word	0x2001e184
    aee8:	.word	0x2001e185
    aeec:	.word	0x2001e1b0
    aef0:	.word	0x2001e180
    aef4:	.word	0x2001e1f1
    aef8:	.word	0x2001e1f4
    aefc:	.word	0x2001e1f0
    af00:	.word	0x2001e1f8
    af04:	.word	0x2001e188

0000af08 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    af08:	bx	lr
    af0a:	nop

0000af0c <nanf>:
    af0c:	vldr	s0, [pc, #4]	; af14 <nanf+0x8>
    af10:	bx	lr
    af12:	nop
    af14:	.word	0x7fc00000

0000af18 <__aeabi_atexit>:
    af18:	mov	r3, r1
    af1a:	mov	r1, r0
    af1c:	mov	r0, r3
    af1e:	b.w	bf68 <__cxa_atexit>
    af22:	nop

0000af24 <__aeabi_drsub>:
    af24:	eor.w	r1, r1, #2147483648	; 0x80000000
    af28:	b.n	af30 <__adddf3>
    af2a:	nop

0000af2c <__aeabi_dsub>:
    af2c:	eor.w	r3, r3, #2147483648	; 0x80000000

0000af30 <__adddf3>:
    af30:	push	{r4, r5, lr}
    af32:	mov.w	r4, r1, lsl #1
    af36:	mov.w	r5, r3, lsl #1
    af3a:	teq	r4, r5
    af3e:	it	eq
    af40:	teqeq	r0, r2
    af44:	itttt	ne
    af46:	orrsne.w	ip, r4, r0
    af4a:	orrsne.w	ip, r5, r2
    af4e:	mvnsne.w	ip, r4, asr #21
    af52:	mvnsne.w	ip, r5, asr #21
    af56:	beq.w	b11e <__adddf3+0x1ee>
    af5a:	mov.w	r4, r4, lsr #21
    af5e:	rsbs	r5, r4, r5, lsr #21
    af62:	it	lt
    af64:	neglt	r5, r5
    af66:	ble.n	af82 <__adddf3+0x52>
    af68:	add	r4, r5
    af6a:	eor.w	r2, r0, r2
    af6e:	eor.w	r3, r1, r3
    af72:	eor.w	r0, r2, r0
    af76:	eor.w	r1, r3, r1
    af7a:	eor.w	r2, r0, r2
    af7e:	eor.w	r3, r1, r3
    af82:	cmp	r5, #54	; 0x36
    af84:	it	hi
    af86:	pophi	{r4, r5, pc}
    af88:	tst.w	r1, #2147483648	; 0x80000000
    af8c:	mov.w	r1, r1, lsl #12
    af90:	mov.w	ip, #1048576	; 0x100000
    af94:	orr.w	r1, ip, r1, lsr #12
    af98:	beq.n	afa0 <__adddf3+0x70>
    af9a:	negs	r0, r0
    af9c:	sbc.w	r1, r1, r1, lsl #1
    afa0:	tst.w	r3, #2147483648	; 0x80000000
    afa4:	mov.w	r3, r3, lsl #12
    afa8:	orr.w	r3, ip, r3, lsr #12
    afac:	beq.n	afb4 <__adddf3+0x84>
    afae:	negs	r2, r2
    afb0:	sbc.w	r3, r3, r3, lsl #1
    afb4:	teq	r4, r5
    afb8:	beq.w	b10a <__adddf3+0x1da>
    afbc:	sub.w	r4, r4, #1
    afc0:	rsbs	lr, r5, #32
    afc4:	blt.n	afe2 <__adddf3+0xb2>
    afc6:	lsl.w	ip, r2, lr
    afca:	lsr.w	r2, r2, r5
    afce:	adds	r0, r0, r2
    afd0:	adc.w	r1, r1, #0
    afd4:	lsl.w	r2, r3, lr
    afd8:	adds	r0, r0, r2
    afda:	asr.w	r3, r3, r5
    afde:	adcs	r1, r3
    afe0:	b.n	b000 <__adddf3+0xd0>
    afe2:	sub.w	r5, r5, #32
    afe6:	add.w	lr, lr, #32
    afea:	cmp	r2, #1
    afec:	lsl.w	ip, r3, lr
    aff0:	it	cs
    aff2:	orrcs.w	ip, ip, #2
    aff6:	asr.w	r3, r3, r5
    affa:	adds	r0, r0, r3
    affc:	adcs.w	r1, r1, r3, asr #31
    b000:	and.w	r5, r1, #2147483648	; 0x80000000
    b004:	bpl.n	b016 <__adddf3+0xe6>
    b006:	mov.w	lr, #0
    b00a:	rsbs	ip, ip, #0
    b00e:	sbcs.w	r0, lr, r0
    b012:	sbc.w	r1, lr, r1
    b016:	cmp.w	r1, #1048576	; 0x100000
    b01a:	bcc.n	b054 <__adddf3+0x124>
    b01c:	cmp.w	r1, #2097152	; 0x200000
    b020:	bcc.n	b03c <__adddf3+0x10c>
    b022:	lsrs	r1, r1, #1
    b024:	movs.w	r0, r0, rrx
    b028:	mov.w	ip, ip, rrx
    b02c:	add.w	r4, r4, #1
    b030:	mov.w	r2, r4, lsl #21
    b034:	cmn.w	r2, #4194304	; 0x400000
    b038:	bcs.w	b170 <__adddf3+0x240>
    b03c:	cmp.w	ip, #2147483648	; 0x80000000
    b040:	it	eq
    b042:	movseq.w	ip, r0, lsr #1
    b046:	adcs.w	r0, r0, #0
    b04a:	adc.w	r1, r1, r4, lsl #20
    b04e:	orr.w	r1, r1, r5
    b052:	pop	{r4, r5, pc}
    b054:	movs.w	ip, ip, lsl #1
    b058:	adcs	r0, r0
    b05a:	adc.w	r1, r1, r1
    b05e:	tst.w	r1, #1048576	; 0x100000
    b062:	sub.w	r4, r4, #1
    b066:	bne.n	b03c <__adddf3+0x10c>
    b068:	teq	r1, #0
    b06c:	itt	eq
    b06e:	moveq	r1, r0
    b070:	moveq	r0, #0
    b072:	clz	r3, r1
    b076:	it	eq
    b078:	addeq	r3, #32
    b07a:	sub.w	r3, r3, #11
    b07e:	subs.w	r2, r3, #32
    b082:	bge.n	b09e <__adddf3+0x16e>
    b084:	adds	r2, #12
    b086:	ble.n	b09a <__adddf3+0x16a>
    b088:	add.w	ip, r2, #20
    b08c:	rsb	r2, r2, #12
    b090:	lsl.w	r0, r1, ip
    b094:	lsr.w	r1, r1, r2
    b098:	b.n	b0b4 <__adddf3+0x184>
    b09a:	add.w	r2, r2, #20
    b09e:	it	le
    b0a0:	rsble	ip, r2, #32
    b0a4:	lsl.w	r1, r1, r2
    b0a8:	lsr.w	ip, r0, ip
    b0ac:	itt	le
    b0ae:	orrle.w	r1, r1, ip
    b0b2:	lslle	r0, r2
    b0b4:	subs	r4, r4, r3
    b0b6:	ittt	ge
    b0b8:	addge.w	r1, r1, r4, lsl #20
    b0bc:	orrge	r1, r5
    b0be:	popge	{r4, r5, pc}
    b0c0:	mvn.w	r4, r4
    b0c4:	subs	r4, #31
    b0c6:	bge.n	b102 <__adddf3+0x1d2>
    b0c8:	adds	r4, #12
    b0ca:	bgt.n	b0ea <__adddf3+0x1ba>
    b0cc:	add.w	r4, r4, #20
    b0d0:	rsb	r2, r4, #32
    b0d4:	lsr.w	r0, r0, r4
    b0d8:	lsl.w	r3, r1, r2
    b0dc:	orr.w	r0, r0, r3
    b0e0:	lsr.w	r3, r1, r4
    b0e4:	orr.w	r1, r5, r3
    b0e8:	pop	{r4, r5, pc}
    b0ea:	rsb	r4, r4, #12
    b0ee:	rsb	r2, r4, #32
    b0f2:	lsr.w	r0, r0, r2
    b0f6:	lsl.w	r3, r1, r4
    b0fa:	orr.w	r0, r0, r3
    b0fe:	mov	r1, r5
    b100:	pop	{r4, r5, pc}
    b102:	lsr.w	r0, r1, r4
    b106:	mov	r1, r5
    b108:	pop	{r4, r5, pc}
    b10a:	teq	r4, #0
    b10e:	eor.w	r3, r3, #1048576	; 0x100000
    b112:	itte	eq
    b114:	eoreq.w	r1, r1, #1048576	; 0x100000
    b118:	addeq	r4, #1
    b11a:	subne	r5, #1
    b11c:	b.n	afbc <__adddf3+0x8c>
    b11e:	mvns.w	ip, r4, asr #21
    b122:	it	ne
    b124:	mvnsne.w	ip, r5, asr #21
    b128:	beq.n	b17e <__adddf3+0x24e>
    b12a:	teq	r4, r5
    b12e:	it	eq
    b130:	teqeq	r0, r2
    b134:	beq.n	b142 <__adddf3+0x212>
    b136:	orrs.w	ip, r4, r0
    b13a:	itt	eq
    b13c:	moveq	r1, r3
    b13e:	moveq	r0, r2
    b140:	pop	{r4, r5, pc}
    b142:	teq	r1, r3
    b146:	ittt	ne
    b148:	movne	r1, #0
    b14a:	movne	r0, #0
    b14c:	popne	{r4, r5, pc}
    b14e:	movs.w	ip, r4, lsr #21
    b152:	bne.n	b160 <__adddf3+0x230>
    b154:	lsls	r0, r0, #1
    b156:	adcs	r1, r1
    b158:	it	cs
    b15a:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b15e:	pop	{r4, r5, pc}
    b160:	adds.w	r4, r4, #4194304	; 0x400000
    b164:	itt	cc
    b166:	addcc.w	r1, r1, #1048576	; 0x100000
    b16a:	popcc	{r4, r5, pc}
    b16c:	and.w	r5, r1, #2147483648	; 0x80000000
    b170:	orr.w	r1, r5, #2130706432	; 0x7f000000
    b174:	orr.w	r1, r1, #15728640	; 0xf00000
    b178:	mov.w	r0, #0
    b17c:	pop	{r4, r5, pc}
    b17e:	mvns.w	ip, r4, asr #21
    b182:	itte	ne
    b184:	movne	r1, r3
    b186:	movne	r0, r2
    b188:	mvnseq.w	ip, r5, asr #21
    b18c:	itt	ne
    b18e:	movne	r3, r1
    b190:	movne	r2, r0
    b192:	orrs.w	r4, r0, r1, lsl #12
    b196:	itte	eq
    b198:	orrseq.w	r5, r2, r3, lsl #12
    b19c:	teqeq	r1, r3
    b1a0:	orrne.w	r1, r1, #524288	; 0x80000
    b1a4:	pop	{r4, r5, pc}
    b1a6:	nop

0000b1a8 <__aeabi_ui2d>:
    b1a8:	teq	r0, #0
    b1ac:	itt	eq
    b1ae:	moveq	r1, #0
    b1b0:	bxeq	lr
    b1b2:	push	{r4, r5, lr}
    b1b4:	mov.w	r4, #1024	; 0x400
    b1b8:	add.w	r4, r4, #50	; 0x32
    b1bc:	mov.w	r5, #0
    b1c0:	mov.w	r1, #0
    b1c4:	b.n	b068 <__adddf3+0x138>
    b1c6:	nop

0000b1c8 <__aeabi_i2d>:
    b1c8:	teq	r0, #0
    b1cc:	itt	eq
    b1ce:	moveq	r1, #0
    b1d0:	bxeq	lr
    b1d2:	push	{r4, r5, lr}
    b1d4:	mov.w	r4, #1024	; 0x400
    b1d8:	add.w	r4, r4, #50	; 0x32
    b1dc:	ands.w	r5, r0, #2147483648	; 0x80000000
    b1e0:	it	mi
    b1e2:	negmi	r0, r0
    b1e4:	mov.w	r1, #0
    b1e8:	b.n	b068 <__adddf3+0x138>
    b1ea:	nop

0000b1ec <__aeabi_f2d>:
    b1ec:	lsls	r2, r0, #1
    b1ee:	mov.w	r1, r2, asr #3
    b1f2:	mov.w	r1, r1, rrx
    b1f6:	mov.w	r0, r2, lsl #28
    b1fa:	itttt	ne
    b1fc:	andsne.w	r3, r2, #4278190080	; 0xff000000
    b200:	teqne	r3, #4278190080	; 0xff000000
    b204:	eorne.w	r1, r1, #939524096	; 0x38000000
    b208:	bxne	lr
    b20a:	teq	r2, #0
    b20e:	ite	ne
    b210:	teqne	r3, #4278190080	; 0xff000000
    b214:	bxeq	lr
    b216:	push	{r4, r5, lr}
    b218:	mov.w	r4, #896	; 0x380
    b21c:	and.w	r5, r1, #2147483648	; 0x80000000
    b220:	bic.w	r1, r1, #2147483648	; 0x80000000
    b224:	b.n	b068 <__adddf3+0x138>
    b226:	nop

0000b228 <__aeabi_ul2d>:
    b228:	orrs.w	r2, r0, r1
    b22c:	it	eq
    b22e:	bxeq	lr
    b230:	push	{r4, r5, lr}
    b232:	mov.w	r5, #0
    b236:	b.n	b24e <__aeabi_l2d+0x16>

0000b238 <__aeabi_l2d>:
    b238:	orrs.w	r2, r0, r1
    b23c:	it	eq
    b23e:	bxeq	lr
    b240:	push	{r4, r5, lr}
    b242:	ands.w	r5, r1, #2147483648	; 0x80000000
    b246:	bpl.n	b24e <__aeabi_l2d+0x16>
    b248:	negs	r0, r0
    b24a:	sbc.w	r1, r1, r1, lsl #1
    b24e:	mov.w	r4, #1024	; 0x400
    b252:	add.w	r4, r4, #50	; 0x32
    b256:	movs.w	ip, r1, lsr #22
    b25a:	beq.w	b016 <__adddf3+0xe6>
    b25e:	mov.w	r2, #3
    b262:	movs.w	ip, ip, lsr #3
    b266:	it	ne
    b268:	addne	r2, #3
    b26a:	movs.w	ip, ip, lsr #3
    b26e:	it	ne
    b270:	addne	r2, #3
    b272:	add.w	r2, r2, ip, lsr #3
    b276:	rsb	r3, r2, #32
    b27a:	lsl.w	ip, r0, r3
    b27e:	lsr.w	r0, r0, r2
    b282:	lsl.w	lr, r1, r3
    b286:	orr.w	r0, r0, lr
    b28a:	lsr.w	r1, r1, r2
    b28e:	add	r4, r2
    b290:	b.n	b016 <__adddf3+0xe6>
    b292:	nop

0000b294 <__aeabi_dmul>:
    b294:	push	{r4, r5, r6, lr}
    b296:	mov.w	ip, #255	; 0xff
    b29a:	orr.w	ip, ip, #1792	; 0x700
    b29e:	ands.w	r4, ip, r1, lsr #20
    b2a2:	ittte	ne
    b2a4:	andsne.w	r5, ip, r3, lsr #20
    b2a8:	teqne	r4, ip
    b2ac:	teqne	r5, ip
    b2b0:	bleq	b470 <__aeabi_dmul+0x1dc>
    b2b4:	add	r4, r5
    b2b6:	eor.w	r6, r1, r3
    b2ba:	bic.w	r1, r1, ip, lsl #21
    b2be:	bic.w	r3, r3, ip, lsl #21
    b2c2:	orrs.w	r5, r0, r1, lsl #12
    b2c6:	it	ne
    b2c8:	orrsne.w	r5, r2, r3, lsl #12
    b2cc:	orr.w	r1, r1, #1048576	; 0x100000
    b2d0:	orr.w	r3, r3, #1048576	; 0x100000
    b2d4:	beq.n	b348 <__aeabi_dmul+0xb4>
    b2d6:	umull	ip, lr, r0, r2
    b2da:	mov.w	r5, #0
    b2de:	umlal	lr, r5, r1, r2
    b2e2:	and.w	r2, r6, #2147483648	; 0x80000000
    b2e6:	umlal	lr, r5, r0, r3
    b2ea:	mov.w	r6, #0
    b2ee:	umlal	r5, r6, r1, r3
    b2f2:	teq	ip, #0
    b2f6:	it	ne
    b2f8:	orrne.w	lr, lr, #1
    b2fc:	sub.w	r4, r4, #255	; 0xff
    b300:	cmp.w	r6, #512	; 0x200
    b304:	sbc.w	r4, r4, #768	; 0x300
    b308:	bcs.n	b314 <__aeabi_dmul+0x80>
    b30a:	movs.w	lr, lr, lsl #1
    b30e:	adcs	r5, r5
    b310:	adc.w	r6, r6, r6
    b314:	orr.w	r1, r2, r6, lsl #11
    b318:	orr.w	r1, r1, r5, lsr #21
    b31c:	mov.w	r0, r5, lsl #11
    b320:	orr.w	r0, r0, lr, lsr #21
    b324:	mov.w	lr, lr, lsl #11
    b328:	subs.w	ip, r4, #253	; 0xfd
    b32c:	it	hi
    b32e:	cmphi.w	ip, #1792	; 0x700
    b332:	bhi.n	b372 <__aeabi_dmul+0xde>
    b334:	cmp.w	lr, #2147483648	; 0x80000000
    b338:	it	eq
    b33a:	movseq.w	lr, r0, lsr #1
    b33e:	adcs.w	r0, r0, #0
    b342:	adc.w	r1, r1, r4, lsl #20
    b346:	pop	{r4, r5, r6, pc}
    b348:	and.w	r6, r6, #2147483648	; 0x80000000
    b34c:	orr.w	r1, r6, r1
    b350:	orr.w	r0, r0, r2
    b354:	eor.w	r1, r1, r3
    b358:	subs.w	r4, r4, ip, lsr #1
    b35c:	ittt	gt
    b35e:	rsbsgt	r5, r4, ip
    b362:	orrgt.w	r1, r1, r4, lsl #20
    b366:	popgt	{r4, r5, r6, pc}
    b368:	orr.w	r1, r1, #1048576	; 0x100000
    b36c:	mov.w	lr, #0
    b370:	subs	r4, #1
    b372:	bgt.w	b4cc <__aeabi_dmul+0x238>
    b376:	cmn.w	r4, #54	; 0x36
    b37a:	ittt	le
    b37c:	movle	r0, #0
    b37e:	andle.w	r1, r1, #2147483648	; 0x80000000
    b382:	pople	{r4, r5, r6, pc}
    b384:	rsb	r4, r4, #0
    b388:	subs	r4, #32
    b38a:	bge.n	b3f8 <__aeabi_dmul+0x164>
    b38c:	adds	r4, #12
    b38e:	bgt.n	b3c8 <__aeabi_dmul+0x134>
    b390:	add.w	r4, r4, #20
    b394:	rsb	r5, r4, #32
    b398:	lsl.w	r3, r0, r5
    b39c:	lsr.w	r0, r0, r4
    b3a0:	lsl.w	r2, r1, r5
    b3a4:	orr.w	r0, r0, r2
    b3a8:	and.w	r2, r1, #2147483648	; 0x80000000
    b3ac:	bic.w	r1, r1, #2147483648	; 0x80000000
    b3b0:	adds.w	r0, r0, r3, lsr #31
    b3b4:	lsr.w	r6, r1, r4
    b3b8:	adc.w	r1, r2, r6
    b3bc:	orrs.w	lr, lr, r3, lsl #1
    b3c0:	it	eq
    b3c2:	biceq.w	r0, r0, r3, lsr #31
    b3c6:	pop	{r4, r5, r6, pc}
    b3c8:	rsb	r4, r4, #12
    b3cc:	rsb	r5, r4, #32
    b3d0:	lsl.w	r3, r0, r4
    b3d4:	lsr.w	r0, r0, r5
    b3d8:	lsl.w	r2, r1, r4
    b3dc:	orr.w	r0, r0, r2
    b3e0:	and.w	r1, r1, #2147483648	; 0x80000000
    b3e4:	adds.w	r0, r0, r3, lsr #31
    b3e8:	adc.w	r1, r1, #0
    b3ec:	orrs.w	lr, lr, r3, lsl #1
    b3f0:	it	eq
    b3f2:	biceq.w	r0, r0, r3, lsr #31
    b3f6:	pop	{r4, r5, r6, pc}
    b3f8:	rsb	r5, r4, #32
    b3fc:	lsl.w	r2, r0, r5
    b400:	orr.w	lr, lr, r2
    b404:	lsr.w	r3, r0, r4
    b408:	lsl.w	r2, r1, r5
    b40c:	orr.w	r3, r3, r2
    b410:	lsr.w	r0, r1, r4
    b414:	and.w	r1, r1, #2147483648	; 0x80000000
    b418:	lsr.w	r2, r1, r4
    b41c:	bic.w	r0, r0, r2
    b420:	add.w	r0, r0, r3, lsr #31
    b424:	orrs.w	lr, lr, r3, lsl #1
    b428:	it	eq
    b42a:	biceq.w	r0, r0, r3, lsr #31
    b42e:	pop	{r4, r5, r6, pc}
    b430:	teq	r4, #0
    b434:	bne.n	b456 <__aeabi_dmul+0x1c2>
    b436:	and.w	r6, r1, #2147483648	; 0x80000000
    b43a:	lsls	r0, r0, #1
    b43c:	adc.w	r1, r1, r1
    b440:	tst.w	r1, #1048576	; 0x100000
    b444:	it	eq
    b446:	subeq	r4, #1
    b448:	beq.n	b43a <__aeabi_dmul+0x1a6>
    b44a:	orr.w	r1, r1, r6
    b44e:	teq	r5, #0
    b452:	it	ne
    b454:	bxne	lr
    b456:	and.w	r6, r3, #2147483648	; 0x80000000
    b45a:	lsls	r2, r2, #1
    b45c:	adc.w	r3, r3, r3
    b460:	tst.w	r3, #1048576	; 0x100000
    b464:	it	eq
    b466:	subeq	r5, #1
    b468:	beq.n	b45a <__aeabi_dmul+0x1c6>
    b46a:	orr.w	r3, r3, r6
    b46e:	bx	lr
    b470:	teq	r4, ip
    b474:	and.w	r5, ip, r3, lsr #20
    b478:	it	ne
    b47a:	teqne	r5, ip
    b47e:	beq.n	b49a <__aeabi_dmul+0x206>
    b480:	orrs.w	r6, r0, r1, lsl #1
    b484:	it	ne
    b486:	orrsne.w	r6, r2, r3, lsl #1
    b48a:	bne.n	b430 <__aeabi_dmul+0x19c>
    b48c:	eor.w	r1, r1, r3
    b490:	and.w	r1, r1, #2147483648	; 0x80000000
    b494:	mov.w	r0, #0
    b498:	pop	{r4, r5, r6, pc}
    b49a:	orrs.w	r6, r0, r1, lsl #1
    b49e:	itte	eq
    b4a0:	moveq	r0, r2
    b4a2:	moveq	r1, r3
    b4a4:	orrsne.w	r6, r2, r3, lsl #1
    b4a8:	beq.n	b4de <__aeabi_dmul+0x24a>
    b4aa:	teq	r4, ip
    b4ae:	bne.n	b4b6 <__aeabi_dmul+0x222>
    b4b0:	orrs.w	r6, r0, r1, lsl #12
    b4b4:	bne.n	b4de <__aeabi_dmul+0x24a>
    b4b6:	teq	r5, ip
    b4ba:	bne.n	b4c8 <__aeabi_dmul+0x234>
    b4bc:	orrs.w	r6, r2, r3, lsl #12
    b4c0:	itt	ne
    b4c2:	movne	r0, r2
    b4c4:	movne	r1, r3
    b4c6:	bne.n	b4de <__aeabi_dmul+0x24a>
    b4c8:	eor.w	r1, r1, r3
    b4cc:	and.w	r1, r1, #2147483648	; 0x80000000
    b4d0:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b4d4:	orr.w	r1, r1, #15728640	; 0xf00000
    b4d8:	mov.w	r0, #0
    b4dc:	pop	{r4, r5, r6, pc}
    b4de:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b4e2:	orr.w	r1, r1, #16252928	; 0xf80000
    b4e6:	pop	{r4, r5, r6, pc}

0000b4e8 <__aeabi_ddiv>:
    b4e8:	push	{r4, r5, r6, lr}
    b4ea:	mov.w	ip, #255	; 0xff
    b4ee:	orr.w	ip, ip, #1792	; 0x700
    b4f2:	ands.w	r4, ip, r1, lsr #20
    b4f6:	ittte	ne
    b4f8:	andsne.w	r5, ip, r3, lsr #20
    b4fc:	teqne	r4, ip
    b500:	teqne	r5, ip
    b504:	bleq	b656 <__aeabi_ddiv+0x16e>
    b508:	sub.w	r4, r4, r5
    b50c:	eor.w	lr, r1, r3
    b510:	orrs.w	r5, r2, r3, lsl #12
    b514:	mov.w	r1, r1, lsl #12
    b518:	beq.w	b62c <__aeabi_ddiv+0x144>
    b51c:	mov.w	r3, r3, lsl #12
    b520:	mov.w	r5, #268435456	; 0x10000000
    b524:	orr.w	r3, r5, r3, lsr #4
    b528:	orr.w	r3, r3, r2, lsr #24
    b52c:	mov.w	r2, r2, lsl #8
    b530:	orr.w	r5, r5, r1, lsr #4
    b534:	orr.w	r5, r5, r0, lsr #24
    b538:	mov.w	r6, r0, lsl #8
    b53c:	and.w	r1, lr, #2147483648	; 0x80000000
    b540:	cmp	r5, r3
    b542:	it	eq
    b544:	cmpeq	r6, r2
    b546:	adc.w	r4, r4, #253	; 0xfd
    b54a:	add.w	r4, r4, #768	; 0x300
    b54e:	bcs.n	b556 <__aeabi_ddiv+0x6e>
    b550:	lsrs	r3, r3, #1
    b552:	mov.w	r2, r2, rrx
    b556:	subs	r6, r6, r2
    b558:	sbc.w	r5, r5, r3
    b55c:	lsrs	r3, r3, #1
    b55e:	mov.w	r2, r2, rrx
    b562:	mov.w	r0, #1048576	; 0x100000
    b566:	mov.w	ip, #524288	; 0x80000
    b56a:	subs.w	lr, r6, r2
    b56e:	sbcs.w	lr, r5, r3
    b572:	ittt	cs
    b574:	subcs	r6, r6, r2
    b576:	movcs	r5, lr
    b578:	orrcs.w	r0, r0, ip
    b57c:	lsrs	r3, r3, #1
    b57e:	mov.w	r2, r2, rrx
    b582:	subs.w	lr, r6, r2
    b586:	sbcs.w	lr, r5, r3
    b58a:	ittt	cs
    b58c:	subcs	r6, r6, r2
    b58e:	movcs	r5, lr
    b590:	orrcs.w	r0, r0, ip, lsr #1
    b594:	lsrs	r3, r3, #1
    b596:	mov.w	r2, r2, rrx
    b59a:	subs.w	lr, r6, r2
    b59e:	sbcs.w	lr, r5, r3
    b5a2:	ittt	cs
    b5a4:	subcs	r6, r6, r2
    b5a6:	movcs	r5, lr
    b5a8:	orrcs.w	r0, r0, ip, lsr #2
    b5ac:	lsrs	r3, r3, #1
    b5ae:	mov.w	r2, r2, rrx
    b5b2:	subs.w	lr, r6, r2
    b5b6:	sbcs.w	lr, r5, r3
    b5ba:	ittt	cs
    b5bc:	subcs	r6, r6, r2
    b5be:	movcs	r5, lr
    b5c0:	orrcs.w	r0, r0, ip, lsr #3
    b5c4:	orrs.w	lr, r5, r6
    b5c8:	beq.n	b5fc <__aeabi_ddiv+0x114>
    b5ca:	mov.w	r5, r5, lsl #4
    b5ce:	orr.w	r5, r5, r6, lsr #28
    b5d2:	mov.w	r6, r6, lsl #4
    b5d6:	mov.w	r3, r3, lsl #3
    b5da:	orr.w	r3, r3, r2, lsr #29
    b5de:	mov.w	r2, r2, lsl #3
    b5e2:	movs.w	ip, ip, lsr #4
    b5e6:	bne.n	b56a <__aeabi_ddiv+0x82>
    b5e8:	tst.w	r1, #1048576	; 0x100000
    b5ec:	bne.n	b606 <__aeabi_ddiv+0x11e>
    b5ee:	orr.w	r1, r1, r0
    b5f2:	mov.w	r0, #0
    b5f6:	mov.w	ip, #2147483648	; 0x80000000
    b5fa:	b.n	b56a <__aeabi_ddiv+0x82>
    b5fc:	tst.w	r1, #1048576	; 0x100000
    b600:	itt	eq
    b602:	orreq	r1, r0
    b604:	moveq	r0, #0
    b606:	subs.w	ip, r4, #253	; 0xfd
    b60a:	it	hi
    b60c:	cmphi.w	ip, #1792	; 0x700
    b610:	bhi.w	b372 <__aeabi_dmul+0xde>
    b614:	subs.w	ip, r5, r3
    b618:	itt	eq
    b61a:	subseq.w	ip, r6, r2
    b61e:	movseq.w	ip, r0, lsr #1
    b622:	adcs.w	r0, r0, #0
    b626:	adc.w	r1, r1, r4, lsl #20
    b62a:	pop	{r4, r5, r6, pc}
    b62c:	and.w	lr, lr, #2147483648	; 0x80000000
    b630:	orr.w	r1, lr, r1, lsr #12
    b634:	adds.w	r4, r4, ip, lsr #1
    b638:	ittt	gt
    b63a:	rsbsgt	r5, r4, ip
    b63e:	orrgt.w	r1, r1, r4, lsl #20
    b642:	popgt	{r4, r5, r6, pc}
    b644:	orr.w	r1, r1, #1048576	; 0x100000
    b648:	mov.w	lr, #0
    b64c:	subs	r4, #1
    b64e:	b.n	b372 <__aeabi_dmul+0xde>
    b650:	orr.w	lr, r5, r6
    b654:	b.n	b372 <__aeabi_dmul+0xde>
    b656:	and.w	r5, ip, r3, lsr #20
    b65a:	teq	r4, ip
    b65e:	it	eq
    b660:	teqeq	r5, ip
    b664:	beq.w	b4de <__aeabi_dmul+0x24a>
    b668:	teq	r4, ip
    b66c:	bne.n	b684 <__aeabi_ddiv+0x19c>
    b66e:	orrs.w	r4, r0, r1, lsl #12
    b672:	bne.w	b4de <__aeabi_dmul+0x24a>
    b676:	teq	r5, ip
    b67a:	bne.w	b4c8 <__aeabi_dmul+0x234>
    b67e:	mov	r0, r2
    b680:	mov	r1, r3
    b682:	b.n	b4de <__aeabi_dmul+0x24a>
    b684:	teq	r5, ip
    b688:	bne.n	b698 <__aeabi_ddiv+0x1b0>
    b68a:	orrs.w	r5, r2, r3, lsl #12
    b68e:	beq.w	b48c <__aeabi_dmul+0x1f8>
    b692:	mov	r0, r2
    b694:	mov	r1, r3
    b696:	b.n	b4de <__aeabi_dmul+0x24a>
    b698:	orrs.w	r6, r0, r1, lsl #1
    b69c:	it	ne
    b69e:	orrsne.w	r6, r2, r3, lsl #1
    b6a2:	bne.w	b430 <__aeabi_dmul+0x19c>
    b6a6:	orrs.w	r4, r0, r1, lsl #1
    b6aa:	bne.w	b4c8 <__aeabi_dmul+0x234>
    b6ae:	orrs.w	r5, r2, r3, lsl #1
    b6b2:	bne.w	b48c <__aeabi_dmul+0x1f8>
    b6b6:	b.n	b4de <__aeabi_dmul+0x24a>

0000b6b8 <__gedf2>:
    b6b8:	mov.w	ip, #4294967295
    b6bc:	b.n	b6cc <__cmpdf2+0x4>
    b6be:	nop

0000b6c0 <__ledf2>:
    b6c0:	mov.w	ip, #1
    b6c4:	b.n	b6cc <__cmpdf2+0x4>
    b6c6:	nop

0000b6c8 <__cmpdf2>:
    b6c8:	mov.w	ip, #1
    b6cc:	str.w	ip, [sp, #-4]!
    b6d0:	mov.w	ip, r1, lsl #1
    b6d4:	mvns.w	ip, ip, asr #21
    b6d8:	mov.w	ip, r3, lsl #1
    b6dc:	it	ne
    b6de:	mvnsne.w	ip, ip, asr #21
    b6e2:	beq.n	b71c <__cmpdf2+0x54>
    b6e4:	add	sp, #4
    b6e6:	orrs.w	ip, r0, r1, lsl #1
    b6ea:	ite	eq
    b6ec:	orrseq.w	ip, r2, r3, lsl #1
    b6f0:	teqne	r1, r3
    b6f4:	ittt	eq
    b6f6:	teqeq	r0, r2
    b6fa:	moveq	r0, #0
    b6fc:	bxeq	lr
    b6fe:	cmn.w	r0, #0
    b702:	teq	r1, r3
    b706:	it	pl
    b708:	cmppl	r1, r3
    b70a:	it	eq
    b70c:	cmpeq	r0, r2
    b70e:	ite	cs
    b710:	asrcs	r0, r3, #31
    b712:	mvncc.w	r0, r3, asr #31
    b716:	orr.w	r0, r0, #1
    b71a:	bx	lr
    b71c:	mov.w	ip, r1, lsl #1
    b720:	mvns.w	ip, ip, asr #21
    b724:	bne.n	b72c <__cmpdf2+0x64>
    b726:	orrs.w	ip, r0, r1, lsl #12
    b72a:	bne.n	b73c <__cmpdf2+0x74>
    b72c:	mov.w	ip, r3, lsl #1
    b730:	mvns.w	ip, ip, asr #21
    b734:	bne.n	b6e4 <__cmpdf2+0x1c>
    b736:	orrs.w	ip, r2, r3, lsl #12
    b73a:	beq.n	b6e4 <__cmpdf2+0x1c>
    b73c:	ldr.w	r0, [sp], #4
    b740:	bx	lr
    b742:	nop

0000b744 <__aeabi_cdrcmple>:
    b744:	mov	ip, r0
    b746:	mov	r0, r2
    b748:	mov	r2, ip
    b74a:	mov	ip, r1
    b74c:	mov	r1, r3
    b74e:	mov	r3, ip
    b750:	b.n	b754 <__aeabi_cdcmpeq>
    b752:	nop

0000b754 <__aeabi_cdcmpeq>:
    b754:	push	{r0, lr}
    b756:	bl	b6c8 <__cmpdf2>
    b75a:	cmp	r0, #0
    b75c:	it	mi
    b75e:	cmnmi.w	r0, #0
    b762:	pop	{r0, pc}

0000b764 <__aeabi_dcmpeq>:
    b764:	str.w	lr, [sp, #-8]!
    b768:	bl	b754 <__aeabi_cdcmpeq>
    b76c:	ite	eq
    b76e:	moveq	r0, #1
    b770:	movne	r0, #0
    b772:	ldr.w	pc, [sp], #8
    b776:	nop

0000b778 <__aeabi_dcmplt>:
    b778:	str.w	lr, [sp, #-8]!
    b77c:	bl	b754 <__aeabi_cdcmpeq>
    b780:	ite	cc
    b782:	movcc	r0, #1
    b784:	movcs	r0, #0
    b786:	ldr.w	pc, [sp], #8
    b78a:	nop

0000b78c <__aeabi_dcmple>:
    b78c:	str.w	lr, [sp, #-8]!
    b790:	bl	b754 <__aeabi_cdcmpeq>
    b794:	ite	ls
    b796:	movls	r0, #1
    b798:	movhi	r0, #0
    b79a:	ldr.w	pc, [sp], #8
    b79e:	nop

0000b7a0 <__aeabi_dcmpge>:
    b7a0:	str.w	lr, [sp, #-8]!
    b7a4:	bl	b744 <__aeabi_cdrcmple>
    b7a8:	ite	ls
    b7aa:	movls	r0, #1
    b7ac:	movhi	r0, #0
    b7ae:	ldr.w	pc, [sp], #8
    b7b2:	nop

0000b7b4 <__aeabi_dcmpgt>:
    b7b4:	str.w	lr, [sp, #-8]!
    b7b8:	bl	b744 <__aeabi_cdrcmple>
    b7bc:	ite	cc
    b7be:	movcc	r0, #1
    b7c0:	movcs	r0, #0
    b7c2:	ldr.w	pc, [sp], #8
    b7c6:	nop

0000b7c8 <__aeabi_dcmpun>:
    b7c8:	mov.w	ip, r1, lsl #1
    b7cc:	mvns.w	ip, ip, asr #21
    b7d0:	bne.n	b7d8 <__aeabi_dcmpun+0x10>
    b7d2:	orrs.w	ip, r0, r1, lsl #12
    b7d6:	bne.n	b7ee <__aeabi_dcmpun+0x26>
    b7d8:	mov.w	ip, r3, lsl #1
    b7dc:	mvns.w	ip, ip, asr #21
    b7e0:	bne.n	b7e8 <__aeabi_dcmpun+0x20>
    b7e2:	orrs.w	ip, r2, r3, lsl #12
    b7e6:	bne.n	b7ee <__aeabi_dcmpun+0x26>
    b7e8:	mov.w	r0, #0
    b7ec:	bx	lr
    b7ee:	mov.w	r0, #1
    b7f2:	bx	lr

0000b7f4 <__aeabi_d2iz>:
    b7f4:	mov.w	r2, r1, lsl #1
    b7f8:	adds.w	r2, r2, #2097152	; 0x200000
    b7fc:	bcs.n	b82a <__aeabi_d2iz+0x36>
    b7fe:	bpl.n	b824 <__aeabi_d2iz+0x30>
    b800:	mvn.w	r3, #992	; 0x3e0
    b804:	subs.w	r2, r3, r2, asr #21
    b808:	bls.n	b830 <__aeabi_d2iz+0x3c>
    b80a:	mov.w	r3, r1, lsl #11
    b80e:	orr.w	r3, r3, #2147483648	; 0x80000000
    b812:	orr.w	r3, r3, r0, lsr #21
    b816:	tst.w	r1, #2147483648	; 0x80000000
    b81a:	lsr.w	r0, r3, r2
    b81e:	it	ne
    b820:	negne	r0, r0
    b822:	bx	lr
    b824:	mov.w	r0, #0
    b828:	bx	lr
    b82a:	orrs.w	r0, r0, r1, lsl #12
    b82e:	bne.n	b83c <__aeabi_d2iz+0x48>
    b830:	ands.w	r0, r1, #2147483648	; 0x80000000
    b834:	it	eq
    b836:	mvneq.w	r0, #2147483648	; 0x80000000
    b83a:	bx	lr
    b83c:	mov.w	r0, #0
    b840:	bx	lr
    b842:	nop

0000b844 <__aeabi_d2uiz>:
    b844:	lsls	r2, r1, #1
    b846:	bcs.n	b86c <__aeabi_d2uiz+0x28>
    b848:	adds.w	r2, r2, #2097152	; 0x200000
    b84c:	bcs.n	b872 <__aeabi_d2uiz+0x2e>
    b84e:	bpl.n	b86c <__aeabi_d2uiz+0x28>
    b850:	mvn.w	r3, #992	; 0x3e0
    b854:	subs.w	r2, r3, r2, asr #21
    b858:	bmi.n	b878 <__aeabi_d2uiz+0x34>
    b85a:	mov.w	r3, r1, lsl #11
    b85e:	orr.w	r3, r3, #2147483648	; 0x80000000
    b862:	orr.w	r3, r3, r0, lsr #21
    b866:	lsr.w	r0, r3, r2
    b86a:	bx	lr
    b86c:	mov.w	r0, #0
    b870:	bx	lr
    b872:	orrs.w	r0, r0, r1, lsl #12
    b876:	bne.n	b87e <__aeabi_d2uiz+0x3a>
    b878:	mov.w	r0, #4294967295
    b87c:	bx	lr
    b87e:	mov.w	r0, #0
    b882:	bx	lr

0000b884 <__aeabi_d2f>:
    b884:	mov.w	r2, r1, lsl #1
    b888:	subs.w	r3, r2, #1879048192	; 0x70000000
    b88c:	itt	cs
    b88e:	subscs.w	ip, r3, #2097152	; 0x200000
    b892:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    b896:	bls.n	b8b4 <__aeabi_d2f+0x30>
    b898:	and.w	ip, r1, #2147483648	; 0x80000000
    b89c:	mov.w	r2, r0, lsl #3
    b8a0:	orr.w	r0, ip, r0, lsr #29
    b8a4:	cmp.w	r2, #2147483648	; 0x80000000
    b8a8:	adc.w	r0, r0, r3, lsl #2
    b8ac:	it	eq
    b8ae:	biceq.w	r0, r0, #1
    b8b2:	bx	lr
    b8b4:	tst.w	r1, #1073741824	; 0x40000000
    b8b8:	bne.n	b8fe <__aeabi_d2f+0x7a>
    b8ba:	adds.w	r2, r3, #48234496	; 0x2e00000
    b8be:	itt	lt
    b8c0:	andlt.w	r0, r1, #2147483648	; 0x80000000
    b8c4:	bxlt	lr
    b8c6:	orr.w	r1, r1, #1048576	; 0x100000
    b8ca:	mov.w	r2, r2, lsr #21
    b8ce:	rsb	r2, r2, #24
    b8d2:	rsb	ip, r2, #32
    b8d6:	lsls.w	r3, r0, ip
    b8da:	lsr.w	r0, r0, r2
    b8de:	it	ne
    b8e0:	orrne.w	r0, r0, #1
    b8e4:	mov.w	r3, r1, lsl #11
    b8e8:	mov.w	r3, r3, lsr #11
    b8ec:	lsl.w	ip, r3, ip
    b8f0:	orr.w	r0, r0, ip
    b8f4:	lsr.w	r3, r3, r2
    b8f8:	mov.w	r3, r3, lsl #1
    b8fc:	b.n	b898 <__aeabi_d2f+0x14>
    b8fe:	mvns.w	r3, r2, asr #21
    b902:	bne.n	b914 <__aeabi_d2f+0x90>
    b904:	orrs.w	r3, r0, r1, lsl #12
    b908:	ittt	ne
    b90a:	movne.w	r0, #2130706432	; 0x7f000000
    b90e:	orrne.w	r0, r0, #12582912	; 0xc00000
    b912:	bxne	lr
    b914:	and.w	r0, r1, #2147483648	; 0x80000000
    b918:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b91c:	orr.w	r0, r0, #8388608	; 0x800000
    b920:	bx	lr
    b922:	nop

0000b924 <__aeabi_frsub>:
    b924:	eor.w	r0, r0, #2147483648	; 0x80000000
    b928:	b.n	b930 <__addsf3>
    b92a:	nop

0000b92c <__aeabi_fsub>:
    b92c:	eor.w	r1, r1, #2147483648	; 0x80000000

0000b930 <__addsf3>:
    b930:	lsls	r2, r0, #1
    b932:	itttt	ne
    b934:	movsne.w	r3, r1, lsl #1
    b938:	teqne	r2, r3
    b93c:	mvnsne.w	ip, r2, asr #24
    b940:	mvnsne.w	ip, r3, asr #24
    b944:	beq.n	ba1c <__addsf3+0xec>
    b946:	mov.w	r2, r2, lsr #24
    b94a:	rsbs	r3, r2, r3, lsr #24
    b94e:	itttt	gt
    b950:	addgt	r2, r2, r3
    b952:	eorgt	r1, r0
    b954:	eorgt	r0, r1
    b956:	eorgt	r1, r0
    b958:	it	lt
    b95a:	neglt	r3, r3
    b95c:	cmp	r3, #25
    b95e:	it	hi
    b960:	bxhi	lr
    b962:	tst.w	r0, #2147483648	; 0x80000000
    b966:	orr.w	r0, r0, #8388608	; 0x800000
    b96a:	bic.w	r0, r0, #4278190080	; 0xff000000
    b96e:	it	ne
    b970:	negne	r0, r0
    b972:	tst.w	r1, #2147483648	; 0x80000000
    b976:	orr.w	r1, r1, #8388608	; 0x800000
    b97a:	bic.w	r1, r1, #4278190080	; 0xff000000
    b97e:	it	ne
    b980:	negne	r1, r1
    b982:	teq	r2, r3
    b986:	beq.n	ba08 <__addsf3+0xd8>
    b988:	sub.w	r2, r2, #1
    b98c:	asr.w	ip, r1, r3
    b990:	adds.w	r0, r0, ip
    b994:	rsb	r3, r3, #32
    b998:	lsl.w	r1, r1, r3
    b99c:	and.w	r3, r0, #2147483648	; 0x80000000
    b9a0:	bpl.n	b9a8 <__addsf3+0x78>
    b9a2:	negs	r1, r1
    b9a4:	sbc.w	r0, r0, r0, lsl #1
    b9a8:	cmp.w	r0, #8388608	; 0x800000
    b9ac:	bcc.n	b9d6 <__addsf3+0xa6>
    b9ae:	cmp.w	r0, #16777216	; 0x1000000
    b9b2:	bcc.n	b9c2 <__addsf3+0x92>
    b9b4:	lsrs	r0, r0, #1
    b9b6:	mov.w	r1, r1, rrx
    b9ba:	add.w	r2, r2, #1
    b9be:	cmp	r2, #254	; 0xfe
    b9c0:	bcs.n	ba66 <__addsf3+0x136>
    b9c2:	cmp.w	r1, #2147483648	; 0x80000000
    b9c6:	adc.w	r0, r0, r2, lsl #23
    b9ca:	it	eq
    b9cc:	biceq.w	r0, r0, #1
    b9d0:	orr.w	r0, r0, r3
    b9d4:	bx	lr
    b9d6:	lsls	r1, r1, #1
    b9d8:	adc.w	r0, r0, r0
    b9dc:	tst.w	r0, #8388608	; 0x800000
    b9e0:	sub.w	r2, r2, #1
    b9e4:	bne.n	b9c2 <__addsf3+0x92>
    b9e6:	clz	ip, r0
    b9ea:	sub.w	ip, ip, #8
    b9ee:	subs.w	r2, r2, ip
    b9f2:	lsl.w	r0, r0, ip
    b9f6:	itet	ge
    b9f8:	addge.w	r0, r0, r2, lsl #23
    b9fc:	neglt	r2, r2
    b9fe:	orrge	r0, r3
    ba00:	itt	lt
    ba02:	lsrlt	r0, r2
    ba04:	orrlt	r0, r3
    ba06:	bx	lr
    ba08:	teq	r2, #0
    ba0c:	eor.w	r1, r1, #8388608	; 0x800000
    ba10:	itte	eq
    ba12:	eoreq.w	r0, r0, #8388608	; 0x800000
    ba16:	addeq	r2, #1
    ba18:	subne	r3, #1
    ba1a:	b.n	b988 <__addsf3+0x58>
    ba1c:	mov.w	r3, r1, lsl #1
    ba20:	mvns.w	ip, r2, asr #24
    ba24:	it	ne
    ba26:	mvnsne.w	ip, r3, asr #24
    ba2a:	beq.n	ba70 <__addsf3+0x140>
    ba2c:	teq	r2, r3
    ba30:	beq.n	ba3c <__addsf3+0x10c>
    ba32:	teq	r2, #0
    ba36:	it	eq
    ba38:	moveq	r0, r1
    ba3a:	bx	lr
    ba3c:	teq	r0, r1
    ba40:	itt	ne
    ba42:	movne	r0, #0
    ba44:	bxne	lr
    ba46:	tst.w	r2, #4278190080	; 0xff000000
    ba4a:	bne.n	ba56 <__addsf3+0x126>
    ba4c:	lsls	r0, r0, #1
    ba4e:	it	cs
    ba50:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    ba54:	bx	lr
    ba56:	adds.w	r2, r2, #33554432	; 0x2000000
    ba5a:	itt	cc
    ba5c:	addcc.w	r0, r0, #8388608	; 0x800000
    ba60:	bxcc	lr
    ba62:	and.w	r3, r0, #2147483648	; 0x80000000
    ba66:	orr.w	r0, r3, #2130706432	; 0x7f000000
    ba6a:	orr.w	r0, r0, #8388608	; 0x800000
    ba6e:	bx	lr
    ba70:	mvns.w	r2, r2, asr #24
    ba74:	itet	ne
    ba76:	movne	r0, r1
    ba78:	mvnseq.w	r3, r3, asr #24
    ba7c:	movne	r1, r0
    ba7e:	lsls	r2, r0, #9
    ba80:	itte	eq
    ba82:	movseq.w	r3, r1, lsl #9
    ba86:	teqeq	r0, r1
    ba8a:	orrne.w	r0, r0, #4194304	; 0x400000
    ba8e:	bx	lr

0000ba90 <__aeabi_ui2f>:
    ba90:	mov.w	r3, #0
    ba94:	b.n	baa0 <__aeabi_i2f+0x8>
    ba96:	nop

0000ba98 <__aeabi_i2f>:
    ba98:	ands.w	r3, r0, #2147483648	; 0x80000000
    ba9c:	it	mi
    ba9e:	negmi	r0, r0
    baa0:	movs.w	ip, r0
    baa4:	it	eq
    baa6:	bxeq	lr
    baa8:	orr.w	r3, r3, #1258291200	; 0x4b000000
    baac:	mov	r1, r0
    baae:	mov.w	r0, #0
    bab2:	b.n	baee <__aeabi_l2f+0x2a>

0000bab4 <__aeabi_ul2f>:
    bab4:	orrs.w	r2, r0, r1
    bab8:	it	eq
    baba:	bxeq	lr
    babc:	mov.w	r3, #0
    bac0:	b.n	bad8 <__aeabi_l2f+0x14>
    bac2:	nop

0000bac4 <__aeabi_l2f>:
    bac4:	orrs.w	r2, r0, r1
    bac8:	it	eq
    baca:	bxeq	lr
    bacc:	ands.w	r3, r1, #2147483648	; 0x80000000
    bad0:	bpl.n	bad8 <__aeabi_l2f+0x14>
    bad2:	negs	r0, r0
    bad4:	sbc.w	r1, r1, r1, lsl #1
    bad8:	movs.w	ip, r1
    badc:	ittt	eq
    bade:	moveq	ip, r0
    bae0:	moveq	r1, r0
    bae2:	moveq	r0, #0
    bae4:	orr.w	r3, r3, #1526726656	; 0x5b000000
    bae8:	it	eq
    baea:	subeq.w	r3, r3, #268435456	; 0x10000000
    baee:	sub.w	r3, r3, #8388608	; 0x800000
    baf2:	clz	r2, ip
    baf6:	subs	r2, #8
    baf8:	sub.w	r3, r3, r2, lsl #23
    bafc:	blt.n	bb20 <__aeabi_l2f+0x5c>
    bafe:	lsl.w	ip, r1, r2
    bb02:	add	r3, ip
    bb04:	lsl.w	ip, r0, r2
    bb08:	rsb	r2, r2, #32
    bb0c:	cmp.w	ip, #2147483648	; 0x80000000
    bb10:	lsr.w	r2, r0, r2
    bb14:	adc.w	r0, r3, r2
    bb18:	it	eq
    bb1a:	biceq.w	r0, r0, #1
    bb1e:	bx	lr
    bb20:	add.w	r2, r2, #32
    bb24:	lsl.w	ip, r1, r2
    bb28:	rsb	r2, r2, #32
    bb2c:	orrs.w	r0, r0, ip, lsl #1
    bb30:	lsr.w	r2, r1, r2
    bb34:	adc.w	r0, r3, r2
    bb38:	it	eq
    bb3a:	biceq.w	r0, r0, ip, lsr #31
    bb3e:	bx	lr

0000bb40 <__aeabi_ldivmod>:
    bb40:	cbnz	r3, bb62 <__aeabi_ldivmod+0x22>
    bb42:	cbnz	r2, bb62 <__aeabi_ldivmod+0x22>
    bb44:	cmp	r1, #0
    bb46:	ittt	lt
    bb48:	movlt	r0, #0
    bb4a:	movlt.w	r1, #2147483648	; 0x80000000
    bb4e:	blt.n	bb5e <__aeabi_ldivmod+0x1e>
    bb50:	it	eq
    bb52:	cmpeq	r0, #0
    bb54:	itt	ne
    bb56:	mvnne.w	r1, #2147483648	; 0x80000000
    bb5a:	movne.w	r0, #4294967295
    bb5e:	b.w	bf64 <__aeabi_idiv0>
    bb62:	sub.w	ip, sp, #8
    bb66:	strd	ip, lr, [sp, #-16]!
    bb6a:	cmp	r1, #0
    bb6c:	blt.n	bb82 <__aeabi_ldivmod+0x42>
    bb6e:	cmp	r3, #0
    bb70:	blt.n	bba8 <__aeabi_ldivmod+0x68>
    bb72:	bl	bc80 <__udivmoddi4>
    bb76:	ldr.w	lr, [sp, #4]
    bb7a:	ldrd	r2, r3, [sp, #8]
    bb7e:	add	sp, #16
    bb80:	bx	lr
    bb82:	negs	r0, r0
    bb84:	sbc.w	r1, r1, r1, lsl #1
    bb88:	cmp	r3, #0
    bb8a:	blt.n	bbc4 <__aeabi_ldivmod+0x84>
    bb8c:	bl	bc80 <__udivmoddi4>
    bb90:	ldr.w	lr, [sp, #4]
    bb94:	ldrd	r2, r3, [sp, #8]
    bb98:	add	sp, #16
    bb9a:	negs	r0, r0
    bb9c:	sbc.w	r1, r1, r1, lsl #1
    bba0:	negs	r2, r2
    bba2:	sbc.w	r3, r3, r3, lsl #1
    bba6:	bx	lr
    bba8:	negs	r2, r2
    bbaa:	sbc.w	r3, r3, r3, lsl #1
    bbae:	bl	bc80 <__udivmoddi4>
    bbb2:	ldr.w	lr, [sp, #4]
    bbb6:	ldrd	r2, r3, [sp, #8]
    bbba:	add	sp, #16
    bbbc:	negs	r0, r0
    bbbe:	sbc.w	r1, r1, r1, lsl #1
    bbc2:	bx	lr
    bbc4:	negs	r2, r2
    bbc6:	sbc.w	r3, r3, r3, lsl #1
    bbca:	bl	bc80 <__udivmoddi4>
    bbce:	ldr.w	lr, [sp, #4]
    bbd2:	ldrd	r2, r3, [sp, #8]
    bbd6:	add	sp, #16
    bbd8:	negs	r2, r2
    bbda:	sbc.w	r3, r3, r3, lsl #1
    bbde:	bx	lr

0000bbe0 <__aeabi_uldivmod>:
    bbe0:	cbnz	r3, bbf8 <__aeabi_uldivmod+0x18>
    bbe2:	cbnz	r2, bbf8 <__aeabi_uldivmod+0x18>
    bbe4:	cmp	r1, #0
    bbe6:	it	eq
    bbe8:	cmpeq	r0, #0
    bbea:	itt	ne
    bbec:	movne.w	r1, #4294967295
    bbf0:	movne.w	r0, #4294967295
    bbf4:	b.w	bf64 <__aeabi_idiv0>
    bbf8:	sub.w	ip, sp, #8
    bbfc:	strd	ip, lr, [sp, #-16]!
    bc00:	bl	bc80 <__udivmoddi4>
    bc04:	ldr.w	lr, [sp, #4]
    bc08:	ldrd	r2, r3, [sp, #8]
    bc0c:	add	sp, #16
    bc0e:	bx	lr

0000bc10 <__aeabi_f2lz>:
    bc10:	vmov	s15, r0
    bc14:	vcmpe.f32	s15, #0.0
    bc18:	vmrs	APSR_nzcv, fpscr
    bc1c:	bmi.n	bc22 <__aeabi_f2lz+0x12>
    bc1e:	b.w	bc34 <__aeabi_f2ulz>
    bc22:	push	{r3, lr}
    bc24:	eor.w	r0, r0, #2147483648	; 0x80000000
    bc28:	bl	bc34 <__aeabi_f2ulz>
    bc2c:	negs	r0, r0
    bc2e:	sbc.w	r1, r1, r1, lsl #1
    bc32:	pop	{r3, pc}

0000bc34 <__aeabi_f2ulz>:
    bc34:	push	{r4, r6, r7, lr}
    bc36:	bl	b1ec <__aeabi_f2d>
    bc3a:	movs	r2, #0
    bc3c:	ldr	r3, [pc, #56]	; (bc78 <__aeabi_f2ulz+0x44>)
    bc3e:	mov	r6, r0
    bc40:	mov	r7, r1
    bc42:	bl	b294 <__aeabi_dmul>
    bc46:	bl	b844 <__aeabi_d2uiz>
    bc4a:	mov	r4, r0
    bc4c:	bl	b1a8 <__aeabi_ui2d>
    bc50:	movs	r2, #0
    bc52:	ldr	r3, [pc, #40]	; (bc7c <__aeabi_f2ulz+0x48>)
    bc54:	bl	b294 <__aeabi_dmul>
    bc58:	mov	r2, r0
    bc5a:	mov	r3, r1
    bc5c:	mov	r0, r6
    bc5e:	mov	r1, r7
    bc60:	bl	af2c <__aeabi_dsub>
    bc64:	bl	b844 <__aeabi_d2uiz>
    bc68:	mov	r3, r4
    bc6a:	movs	r2, #0
    bc6c:	orr.w	r2, r2, r0
    bc70:	mov	r0, r2
    bc72:	mov	r1, r3
    bc74:	pop	{r4, r6, r7, pc}
    bc76:	nop
    bc78:	.word	0x3df00000
    bc7c:	.word	0x41f00000

0000bc80 <__udivmoddi4>:
    bc80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc84:	mov	ip, r1
    bc86:	mov	r6, r1
    bc88:	mov	r4, r0
    bc8a:	ldr	r5, [sp, #32]
    bc8c:	cmp	r3, #0
    bc8e:	bne.n	bd32 <__udivmoddi4+0xb2>
    bc90:	cmp	r2, r1
    bc92:	mov	r7, r2
    bc94:	bls.n	bd70 <__udivmoddi4+0xf0>
    bc96:	clz	lr, r2
    bc9a:	cmp.w	lr, #0
    bc9e:	beq.n	bcb8 <__udivmoddi4+0x38>
    bca0:	rsb	r4, lr, #32
    bca4:	lsr.w	r4, r0, r4
    bca8:	lsl.w	r6, r1, lr
    bcac:	orr.w	ip, r4, r6
    bcb0:	lsl.w	r7, r2, lr
    bcb4:	lsl.w	r4, r0, lr
    bcb8:	mov.w	r9, r7, lsr #16
    bcbc:	lsrs	r2, r4, #16
    bcbe:	udiv	r0, ip, r9
    bcc2:	uxth.w	r8, r7
    bcc6:	mls	r6, r9, r0, ip
    bcca:	orr.w	r6, r2, r6, lsl #16
    bcce:	mul.w	r3, r0, r8
    bcd2:	cmp	r3, r6
    bcd4:	bls.n	bcea <__udivmoddi4+0x6a>
    bcd6:	adds	r6, r6, r7
    bcd8:	add.w	r2, r0, #4294967295
    bcdc:	bcs.w	bf24 <__udivmoddi4+0x2a4>
    bce0:	cmp	r3, r6
    bce2:	bls.w	bf24 <__udivmoddi4+0x2a4>
    bce6:	subs	r0, #2
    bce8:	add	r6, r7
    bcea:	subs	r6, r6, r3
    bcec:	uxth	r2, r4
    bcee:	udiv	r3, r6, r9
    bcf2:	mls	r6, r9, r3, r6
    bcf6:	orr.w	r4, r2, r6, lsl #16
    bcfa:	mul.w	r8, r3, r8
    bcfe:	cmp	r8, r4
    bd00:	bls.n	bd16 <__udivmoddi4+0x96>
    bd02:	adds	r4, r4, r7
    bd04:	add.w	r2, r3, #4294967295
    bd08:	bcs.w	bf20 <__udivmoddi4+0x2a0>
    bd0c:	cmp	r8, r4
    bd0e:	bls.w	bf20 <__udivmoddi4+0x2a0>
    bd12:	subs	r3, #2
    bd14:	add	r4, r7
    bd16:	rsb	r4, r8, r4
    bd1a:	orr.w	r0, r3, r0, lsl #16
    bd1e:	movs	r1, #0
    bd20:	cmp	r5, #0
    bd22:	beq.n	bdea <__udivmoddi4+0x16a>
    bd24:	lsr.w	r4, r4, lr
    bd28:	movs	r3, #0
    bd2a:	str	r4, [r5, #0]
    bd2c:	str	r3, [r5, #4]
    bd2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd32:	cmp	r3, r1
    bd34:	bls.n	bd46 <__udivmoddi4+0xc6>
    bd36:	cmp	r5, #0
    bd38:	beq.n	bde6 <__udivmoddi4+0x166>
    bd3a:	movs	r1, #0
    bd3c:	stmia.w	r5, {r0, r6}
    bd40:	mov	r0, r1
    bd42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd46:	clz	r1, r3
    bd4a:	cmp	r1, #0
    bd4c:	bne.w	be70 <__udivmoddi4+0x1f0>
    bd50:	cmp	r3, r6
    bd52:	bcc.n	bd5a <__udivmoddi4+0xda>
    bd54:	cmp	r2, r0
    bd56:	bhi.w	bf4a <__udivmoddi4+0x2ca>
    bd5a:	subs	r4, r0, r2
    bd5c:	sbc.w	r6, r6, r3
    bd60:	movs	r0, #1
    bd62:	mov	ip, r6
    bd64:	cmp	r5, #0
    bd66:	beq.n	bdea <__udivmoddi4+0x16a>
    bd68:	stmia.w	r5, {r4, ip}
    bd6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd70:	cbnz	r2, bd78 <__udivmoddi4+0xf8>
    bd72:	movs	r7, #1
    bd74:	udiv	r7, r7, r2
    bd78:	clz	lr, r7
    bd7c:	cmp.w	lr, #0
    bd80:	bne.n	bdee <__udivmoddi4+0x16e>
    bd82:	subs	r3, r6, r7
    bd84:	mov.w	r8, r7, lsr #16
    bd88:	uxth.w	ip, r7
    bd8c:	movs	r1, #1
    bd8e:	udiv	r0, r3, r8
    bd92:	lsrs	r2, r4, #16
    bd94:	mls	r6, r8, r0, r3
    bd98:	orr.w	r6, r2, r6, lsl #16
    bd9c:	mul.w	r3, ip, r0
    bda0:	cmp	r3, r6
    bda2:	bls.n	bdb4 <__udivmoddi4+0x134>
    bda4:	adds	r6, r6, r7
    bda6:	add.w	r2, r0, #4294967295
    bdaa:	bcs.n	bdb2 <__udivmoddi4+0x132>
    bdac:	cmp	r3, r6
    bdae:	bhi.w	bf4e <__udivmoddi4+0x2ce>
    bdb2:	mov	r0, r2
    bdb4:	subs	r6, r6, r3
    bdb6:	uxth	r2, r4
    bdb8:	udiv	r3, r6, r8
    bdbc:	mls	r6, r8, r3, r6
    bdc0:	orr.w	r4, r2, r6, lsl #16
    bdc4:	mul.w	ip, ip, r3
    bdc8:	cmp	ip, r4
    bdca:	bls.n	bddc <__udivmoddi4+0x15c>
    bdcc:	adds	r4, r4, r7
    bdce:	add.w	r2, r3, #4294967295
    bdd2:	bcs.n	bdda <__udivmoddi4+0x15a>
    bdd4:	cmp	ip, r4
    bdd6:	bhi.w	bf44 <__udivmoddi4+0x2c4>
    bdda:	mov	r3, r2
    bddc:	rsb	r4, ip, r4
    bde0:	orr.w	r0, r3, r0, lsl #16
    bde4:	b.n	bd20 <__udivmoddi4+0xa0>
    bde6:	mov	r1, r5
    bde8:	mov	r0, r5
    bdea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdee:	rsb	r1, lr, #32
    bdf2:	lsl.w	r3, r6, lr
    bdf6:	lsl.w	r7, r7, lr
    bdfa:	lsr.w	r9, r0, r1
    bdfe:	mov.w	r8, r7, lsr #16
    be02:	lsrs	r6, r1
    be04:	orr.w	r9, r9, r3
    be08:	udiv	sl, r6, r8
    be0c:	mov.w	r4, r9, lsr #16
    be10:	mls	r6, r8, sl, r6
    be14:	uxth.w	ip, r7
    be18:	orr.w	r3, r4, r6, lsl #16
    be1c:	mul.w	r2, sl, ip
    be20:	cmp	r2, r3
    be22:	lsl.w	r4, r0, lr
    be26:	bls.n	be3e <__udivmoddi4+0x1be>
    be28:	adds	r3, r3, r7
    be2a:	add.w	r1, sl, #4294967295
    be2e:	bcs.w	bf40 <__udivmoddi4+0x2c0>
    be32:	cmp	r2, r3
    be34:	bls.w	bf40 <__udivmoddi4+0x2c0>
    be38:	sub.w	sl, sl, #2
    be3c:	add	r3, r7
    be3e:	subs	r3, r3, r2
    be40:	uxth.w	r9, r9
    be44:	udiv	r1, r3, r8
    be48:	mls	r3, r8, r1, r3
    be4c:	orr.w	r3, r9, r3, lsl #16
    be50:	mul.w	r6, r1, ip
    be54:	cmp	r6, r3
    be56:	bls.n	be68 <__udivmoddi4+0x1e8>
    be58:	adds	r3, r3, r7
    be5a:	add.w	r2, r1, #4294967295
    be5e:	bcs.n	bf38 <__udivmoddi4+0x2b8>
    be60:	cmp	r6, r3
    be62:	bls.n	bf38 <__udivmoddi4+0x2b8>
    be64:	subs	r1, #2
    be66:	add	r3, r7
    be68:	subs	r3, r3, r6
    be6a:	orr.w	r1, r1, sl, lsl #16
    be6e:	b.n	bd8e <__udivmoddi4+0x10e>
    be70:	rsb	lr, r1, #32
    be74:	lsr.w	r4, r2, lr
    be78:	lsls	r3, r1
    be7a:	orrs	r3, r4
    be7c:	lsr.w	r7, r0, lr
    be80:	lsl.w	r4, r6, r1
    be84:	mov.w	ip, r3, lsr #16
    be88:	lsr.w	r6, r6, lr
    be8c:	orrs	r4, r7
    be8e:	udiv	r9, r6, ip
    be92:	lsrs	r7, r4, #16
    be94:	mls	r6, ip, r9, r6
    be98:	uxth.w	r8, r3
    be9c:	orr.w	r6, r7, r6, lsl #16
    bea0:	mul.w	r7, r9, r8
    bea4:	cmp	r7, r6
    bea6:	lsl.w	r2, r2, r1
    beaa:	lsl.w	sl, r0, r1
    beae:	bls.n	bec2 <__udivmoddi4+0x242>
    beb0:	adds	r6, r6, r3
    beb2:	add.w	r0, r9, #4294967295
    beb6:	bcs.n	bf3c <__udivmoddi4+0x2bc>
    beb8:	cmp	r7, r6
    beba:	bls.n	bf3c <__udivmoddi4+0x2bc>
    bebc:	sub.w	r9, r9, #2
    bec0:	add	r6, r3
    bec2:	subs	r6, r6, r7
    bec4:	uxth	r0, r4
    bec6:	udiv	r4, r6, ip
    beca:	mls	r6, ip, r4, r6
    bece:	orr.w	r7, r0, r6, lsl #16
    bed2:	mul.w	r8, r4, r8
    bed6:	cmp	r8, r7
    bed8:	bls.n	beea <__udivmoddi4+0x26a>
    beda:	adds	r7, r7, r3
    bedc:	add.w	r0, r4, #4294967295
    bee0:	bcs.n	bf34 <__udivmoddi4+0x2b4>
    bee2:	cmp	r8, r7
    bee4:	bls.n	bf34 <__udivmoddi4+0x2b4>
    bee6:	subs	r4, #2
    bee8:	add	r7, r3
    beea:	orr.w	r0, r4, r9, lsl #16
    beee:	rsb	r7, r8, r7
    bef2:	umull	r8, r9, r0, r2
    bef6:	cmp	r7, r9
    bef8:	mov	r4, r8
    befa:	mov	r6, r9
    befc:	bcc.n	bf28 <__udivmoddi4+0x2a8>
    befe:	beq.n	bf54 <__udivmoddi4+0x2d4>
    bf00:	cbz	r5, bf5c <__udivmoddi4+0x2dc>
    bf02:	subs.w	r3, sl, r4
    bf06:	sbc.w	r7, r7, r6
    bf0a:	lsl.w	lr, r7, lr
    bf0e:	lsrs	r3, r1
    bf10:	lsrs	r7, r1
    bf12:	orr.w	r3, lr, r3
    bf16:	stmia.w	r5, {r3, r7}
    bf1a:	movs	r1, #0
    bf1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf20:	mov	r3, r2
    bf22:	b.n	bd16 <__udivmoddi4+0x96>
    bf24:	mov	r0, r2
    bf26:	b.n	bcea <__udivmoddi4+0x6a>
    bf28:	subs.w	r4, r8, r2
    bf2c:	sbc.w	r6, r9, r3
    bf30:	subs	r0, #1
    bf32:	b.n	bf00 <__udivmoddi4+0x280>
    bf34:	mov	r4, r0
    bf36:	b.n	beea <__udivmoddi4+0x26a>
    bf38:	mov	r1, r2
    bf3a:	b.n	be68 <__udivmoddi4+0x1e8>
    bf3c:	mov	r9, r0
    bf3e:	b.n	bec2 <__udivmoddi4+0x242>
    bf40:	mov	sl, r1
    bf42:	b.n	be3e <__udivmoddi4+0x1be>
    bf44:	subs	r3, #2
    bf46:	add	r4, r7
    bf48:	b.n	bddc <__udivmoddi4+0x15c>
    bf4a:	mov	r0, r1
    bf4c:	b.n	bd64 <__udivmoddi4+0xe4>
    bf4e:	subs	r0, #2
    bf50:	add	r6, r7
    bf52:	b.n	bdb4 <__udivmoddi4+0x134>
    bf54:	cmp	sl, r8
    bf56:	bcc.n	bf28 <__udivmoddi4+0x2a8>
    bf58:	mov	r6, r7
    bf5a:	b.n	bf00 <__udivmoddi4+0x280>
    bf5c:	mov	r1, r5
    bf5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf62:	nop

0000bf64 <__aeabi_idiv0>:
    bf64:	bx	lr
    bf66:	nop

0000bf68 <__cxa_atexit>:
    bf68:	mov	r3, r2
    bf6a:	mov	r2, r1
    bf6c:	mov	r1, r0
    bf6e:	movs	r0, #2
    bf70:	b.w	106e8 <__register_exitproc>

0000bf74 <__errno>:
    bf74:	ldr	r3, [pc, #4]	; (bf7c <__errno+0x8>)
    bf76:	ldr	r0, [r3, #0]
    bf78:	bx	lr
    bf7a:	nop
    bf7c:	.word	0x20017e00

0000bf80 <__libc_init_array>:
    bf80:	push	{r4, r5, r6, lr}
    bf82:	ldr	r6, [pc, #60]	; (bfc0 <__libc_init_array+0x40>)
    bf84:	ldr	r5, [pc, #60]	; (bfc4 <__libc_init_array+0x44>)
    bf86:	subs	r6, r6, r5
    bf88:	asrs	r6, r6, #2
    bf8a:	it	ne
    bf8c:	movne	r4, #0
    bf8e:	beq.n	bf9c <__libc_init_array+0x1c>
    bf90:	adds	r4, #1
    bf92:	ldr.w	r3, [r5], #4
    bf96:	blx	r3
    bf98:	cmp	r6, r4
    bf9a:	bne.n	bf90 <__libc_init_array+0x10>
    bf9c:	ldr	r6, [pc, #40]	; (bfc8 <__libc_init_array+0x48>)
    bf9e:	ldr	r5, [pc, #44]	; (bfcc <__libc_init_array+0x4c>)
    bfa0:	subs	r6, r6, r5
    bfa2:	bl	14294 <_init>
    bfa6:	asrs	r6, r6, #2
    bfa8:	it	ne
    bfaa:	movne	r4, #0
    bfac:	beq.n	bfbc <__libc_init_array+0x3c>
    bfae:	adds	r4, #1
    bfb0:	ldr.w	r3, [r5], #4
    bfb4:	blx	r3
    bfb6:	cmp	r6, r4
    bfb8:	bne.n	bfae <__libc_init_array+0x2e>
    bfba:	pop	{r4, r5, r6, pc}
    bfbc:	pop	{r4, r5, r6, pc}
    bfbe:	nop
    bfc0:	.word	0x000142a0
    bfc4:	.word	0x000142a0
    bfc8:	.word	0x000142f8
    bfcc:	.word	0x000142a0

0000bfd0 <__get_current_locale>:
    bfd0:	ldr	r2, [pc, #12]	; (bfe0 <__get_current_locale+0x10>)
    bfd2:	ldr	r3, [pc, #16]	; (bfe4 <__get_current_locale+0x14>)
    bfd4:	ldr	r2, [r2, #0]
    bfd6:	ldr	r0, [r2, #52]	; 0x34
    bfd8:	cmp	r0, #0
    bfda:	it	eq
    bfdc:	moveq	r0, r3
    bfde:	bx	lr
    bfe0:	.word	0x20017e00
    bfe4:	.word	0x20017e04

0000bfe8 <__locale_mb_cur_max>:
    bfe8:	ldr	r3, [pc, #16]	; (bffc <__locale_mb_cur_max+0x14>)
    bfea:	ldr	r2, [pc, #20]	; (c000 <__locale_mb_cur_max+0x18>)
    bfec:	ldr	r3, [r3, #0]
    bfee:	ldr	r3, [r3, #52]	; 0x34
    bff0:	cmp	r3, #0
    bff2:	it	eq
    bff4:	moveq	r3, r2
    bff6:	ldrb.w	r0, [r3, #296]	; 0x128
    bffa:	bx	lr
    bffc:	.word	0x20017e00
    c000:	.word	0x20017e04

0000c004 <__locale_ctype_ptr_l>:
    c004:	ldr.w	r0, [r0, #236]	; 0xec
    c008:	bx	lr
    c00a:	nop

0000c00c <__locale_ctype_ptr>:
    c00c:	push	{r3, lr}
    c00e:	ldr	r3, [pc, #12]	; (c01c <__locale_ctype_ptr+0x10>)
    c010:	ldr	r0, [r3, #0]
    c012:	bl	bfd0 <__get_current_locale>
    c016:	ldr.w	r0, [r0, #236]	; 0xec
    c01a:	pop	{r3, pc}
    c01c:	.word	0x20017e00

0000c020 <malloc>:
    c020:	ldr	r3, [pc, #8]	; (c02c <malloc+0xc>)
    c022:	mov	r1, r0
    c024:	ldr	r0, [r3, #0]
    c026:	b.w	c040 <_malloc_r>
    c02a:	nop
    c02c:	.word	0x20017e00

0000c030 <free>:
    c030:	ldr	r3, [pc, #8]	; (c03c <free+0xc>)
    c032:	mov	r1, r0
    c034:	ldr	r0, [r3, #0]
    c036:	b.w	117d0 <_free_r>
    c03a:	nop
    c03c:	.word	0x20017e00

0000c040 <_malloc_r>:
    c040:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c044:	add.w	r5, r1, #11
    c048:	cmp	r5, #22
    c04a:	sub	sp, #12
    c04c:	mov	r6, r0
    c04e:	bls.w	c190 <_malloc_r+0x150>
    c052:	bics.w	r5, r5, #7
    c056:	bmi.w	c1d8 <_malloc_r+0x198>
    c05a:	cmp	r1, r5
    c05c:	bhi.w	c1d8 <_malloc_r+0x198>
    c060:	bl	c848 <__malloc_lock>
    c064:	cmp.w	r5, #504	; 0x1f8
    c068:	bcc.w	c5a4 <_malloc_r+0x564>
    c06c:	lsrs	r3, r5, #9
    c06e:	beq.w	c1e6 <_malloc_r+0x1a6>
    c072:	cmp	r3, #4
    c074:	bhi.w	c37e <_malloc_r+0x33e>
    c078:	lsrs	r0, r5, #6
    c07a:	add.w	lr, r0, #57	; 0x39
    c07e:	mov.w	r3, lr, lsl #1
    c082:	adds	r0, #56	; 0x38
    c084:	ldr	r7, [pc, #784]	; (c398 <_malloc_r+0x358>)
    c086:	add.w	r3, r7, r3, lsl #2
    c08a:	sub.w	r1, r3, #8
    c08e:	ldr	r4, [r3, #4]
    c090:	cmp	r1, r4
    c092:	bne.n	c0a4 <_malloc_r+0x64>
    c094:	b.n	c1f0 <_malloc_r+0x1b0>
    c096:	cmp	r2, #0
    c098:	bge.w	c1f4 <_malloc_r+0x1b4>
    c09c:	ldr	r4, [r4, #12]
    c09e:	cmp	r1, r4
    c0a0:	beq.w	c1f0 <_malloc_r+0x1b0>
    c0a4:	ldr	r3, [r4, #4]
    c0a6:	bic.w	r3, r3, #3
    c0aa:	subs	r2, r3, r5
    c0ac:	cmp	r2, #15
    c0ae:	ble.n	c096 <_malloc_r+0x56>
    c0b0:	ldr	r1, [pc, #740]	; (c398 <_malloc_r+0x358>)
    c0b2:	ldr	r4, [r7, #16]
    c0b4:	add.w	lr, r1, #8
    c0b8:	cmp	r4, lr
    c0ba:	beq.w	c424 <_malloc_r+0x3e4>
    c0be:	ldr	r3, [r4, #4]
    c0c0:	bic.w	r3, r3, #3
    c0c4:	subs	r2, r3, r5
    c0c6:	cmp	r2, #15
    c0c8:	bgt.w	c3fe <_malloc_r+0x3be>
    c0cc:	cmp	r2, #0
    c0ce:	str.w	lr, [r1, #20]
    c0d2:	str.w	lr, [r1, #16]
    c0d6:	bge.w	c216 <_malloc_r+0x1d6>
    c0da:	cmp.w	r3, #512	; 0x200
    c0de:	bcs.w	c3b0 <_malloc_r+0x370>
    c0e2:	lsrs	r3, r3, #3
    c0e4:	add.w	ip, r3, #1
    c0e8:	movs	r2, #1
    c0ea:	asrs	r3, r3, #2
    c0ec:	lsl.w	r3, r2, r3
    c0f0:	ldr	r2, [r1, #4]
    c0f2:	ldr.w	r8, [r1, ip, lsl #3]
    c0f6:	str.w	r8, [r4, #8]
    c0fa:	add.w	r9, r1, ip, lsl #3
    c0fe:	orrs	r2, r3
    c100:	sub.w	r3, r9, #8
    c104:	str	r3, [r4, #12]
    c106:	str	r2, [r1, #4]
    c108:	str.w	r4, [r1, ip, lsl #3]
    c10c:	str.w	r4, [r8, #12]
    c110:	asrs	r3, r0, #2
    c112:	movs	r4, #1
    c114:	lsls	r4, r3
    c116:	cmp	r4, r2
    c118:	bhi.w	c230 <_malloc_r+0x1f0>
    c11c:	tst	r4, r2
    c11e:	bne.n	c12e <_malloc_r+0xee>
    c120:	bic.w	r0, r0, #3
    c124:	lsls	r4, r4, #1
    c126:	tst	r4, r2
    c128:	add.w	r0, r0, #4
    c12c:	beq.n	c124 <_malloc_r+0xe4>
    c12e:	add.w	r9, r7, r0, lsl #3
    c132:	mov	ip, r9
    c134:	mov	r8, r0
    c136:	ldr.w	r1, [ip, #12]
    c13a:	cmp	ip, r1
    c13c:	bne.n	c14e <_malloc_r+0x10e>
    c13e:	b.n	c428 <_malloc_r+0x3e8>
    c140:	cmp	r2, #0
    c142:	bge.w	c448 <_malloc_r+0x408>
    c146:	ldr	r1, [r1, #12]
    c148:	cmp	ip, r1
    c14a:	beq.w	c428 <_malloc_r+0x3e8>
    c14e:	ldr	r3, [r1, #4]
    c150:	bic.w	r3, r3, #3
    c154:	subs	r2, r3, r5
    c156:	cmp	r2, #15
    c158:	ble.n	c140 <_malloc_r+0x100>
    c15a:	mov	r4, r1
    c15c:	ldr.w	ip, [r1, #12]
    c160:	ldr.w	r8, [r4, #8]!
    c164:	adds	r3, r1, r5
    c166:	orr.w	r5, r5, #1
    c16a:	str	r5, [r1, #4]
    c16c:	orr.w	r1, r2, #1
    c170:	str.w	ip, [r8, #12]
    c174:	mov	r0, r6
    c176:	str.w	r8, [ip, #8]
    c17a:	str	r3, [r7, #20]
    c17c:	str	r3, [r7, #16]
    c17e:	str.w	lr, [r3, #12]
    c182:	str.w	lr, [r3, #8]
    c186:	str	r1, [r3, #4]
    c188:	str	r2, [r3, r2]
    c18a:	bl	c84c <__malloc_unlock>
    c18e:	b.n	c1d0 <_malloc_r+0x190>
    c190:	cmp	r1, #16
    c192:	bhi.n	c1d8 <_malloc_r+0x198>
    c194:	bl	c848 <__malloc_lock>
    c198:	movs	r5, #16
    c19a:	movs	r3, #6
    c19c:	movs	r0, #2
    c19e:	ldr	r7, [pc, #504]	; (c398 <_malloc_r+0x358>)
    c1a0:	add.w	r3, r7, r3, lsl #2
    c1a4:	sub.w	r2, r3, #8
    c1a8:	ldr	r4, [r3, #4]
    c1aa:	cmp	r4, r2
    c1ac:	beq.w	c43a <_malloc_r+0x3fa>
    c1b0:	ldr	r3, [r4, #4]
    c1b2:	ldr	r1, [r4, #12]
    c1b4:	ldr	r5, [r4, #8]
    c1b6:	bic.w	r3, r3, #3
    c1ba:	add	r3, r4
    c1bc:	mov	r0, r6
    c1be:	ldr	r2, [r3, #4]
    c1c0:	str	r1, [r5, #12]
    c1c2:	orr.w	r2, r2, #1
    c1c6:	str	r5, [r1, #8]
    c1c8:	str	r2, [r3, #4]
    c1ca:	bl	c84c <__malloc_unlock>
    c1ce:	adds	r4, #8
    c1d0:	mov	r0, r4
    c1d2:	add	sp, #12
    c1d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1d8:	movs	r4, #0
    c1da:	movs	r3, #12
    c1dc:	mov	r0, r4
    c1de:	str	r3, [r6, #0]
    c1e0:	add	sp, #12
    c1e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1e6:	movs	r3, #128	; 0x80
    c1e8:	mov.w	lr, #64	; 0x40
    c1ec:	movs	r0, #63	; 0x3f
    c1ee:	b.n	c084 <_malloc_r+0x44>
    c1f0:	mov	r0, lr
    c1f2:	b.n	c0b0 <_malloc_r+0x70>
    c1f4:	add	r3, r4
    c1f6:	ldr	r1, [r4, #12]
    c1f8:	ldr	r2, [r3, #4]
    c1fa:	ldr	r5, [r4, #8]
    c1fc:	orr.w	r2, r2, #1
    c200:	str	r1, [r5, #12]
    c202:	mov	r0, r6
    c204:	str	r5, [r1, #8]
    c206:	str	r2, [r3, #4]
    c208:	bl	c84c <__malloc_unlock>
    c20c:	adds	r4, #8
    c20e:	mov	r0, r4
    c210:	add	sp, #12
    c212:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c216:	add	r3, r4
    c218:	mov	r0, r6
    c21a:	ldr	r2, [r3, #4]
    c21c:	orr.w	r2, r2, #1
    c220:	str	r2, [r3, #4]
    c222:	bl	c84c <__malloc_unlock>
    c226:	adds	r4, #8
    c228:	mov	r0, r4
    c22a:	add	sp, #12
    c22c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c230:	ldr	r4, [r7, #8]
    c232:	ldr	r3, [r4, #4]
    c234:	bic.w	r8, r3, #3
    c238:	cmp	r8, r5
    c23a:	bcc.n	c246 <_malloc_r+0x206>
    c23c:	rsb	r3, r5, r8
    c240:	cmp	r3, #15
    c242:	bgt.w	c35e <_malloc_r+0x31e>
    c246:	ldr	r3, [pc, #340]	; (c39c <_malloc_r+0x35c>)
    c248:	ldr.w	r9, [pc, #352]	; c3ac <_malloc_r+0x36c>
    c24c:	ldr	r2, [r3, #0]
    c24e:	ldr.w	r3, [r9]
    c252:	adds	r3, #1
    c254:	add	r2, r5
    c256:	add.w	sl, r4, r8
    c25a:	beq.w	c51e <_malloc_r+0x4de>
    c25e:	add.w	r2, r2, #4096	; 0x1000
    c262:	adds	r2, #15
    c264:	bic.w	r2, r2, #4080	; 0xff0
    c268:	bic.w	r2, r2, #15
    c26c:	mov	r1, r2
    c26e:	mov	r0, r6
    c270:	str	r2, [sp, #4]
    c272:	bl	cc30 <_sbrk_r>
    c276:	cmp.w	r0, #4294967295
    c27a:	mov	fp, r0
    c27c:	ldr	r2, [sp, #4]
    c27e:	beq.w	c532 <_malloc_r+0x4f2>
    c282:	cmp	sl, r0
    c284:	bhi.w	c480 <_malloc_r+0x440>
    c288:	ldr	r3, [pc, #276]	; (c3a0 <_malloc_r+0x360>)
    c28a:	ldr	r1, [r3, #0]
    c28c:	cmp	sl, fp
    c28e:	add	r1, r2
    c290:	str	r1, [r3, #0]
    c292:	beq.w	c53c <_malloc_r+0x4fc>
    c296:	ldr.w	r0, [r9]
    c29a:	ldr.w	lr, [pc, #272]	; c3ac <_malloc_r+0x36c>
    c29e:	adds	r0, #1
    c2a0:	ittet	ne
    c2a2:	rsbne	sl, sl, fp
    c2a6:	addne	r1, sl
    c2a8:	streq.w	fp, [lr]
    c2ac:	strne	r1, [r3, #0]
    c2ae:	ands.w	r1, fp, #7
    c2b2:	beq.w	c4e4 <_malloc_r+0x4a4>
    c2b6:	rsb	r0, r1, #8
    c2ba:	rsb	r1, r1, #4096	; 0x1000
    c2be:	add	fp, r0
    c2c0:	adds	r1, #8
    c2c2:	add	r2, fp
    c2c4:	ubfx	r2, r2, #0, #12
    c2c8:	rsb	r9, r2, r1
    c2cc:	mov	r1, r9
    c2ce:	mov	r0, r6
    c2d0:	str	r3, [sp, #4]
    c2d2:	bl	cc30 <_sbrk_r>
    c2d6:	adds	r3, r0, #1
    c2d8:	ldr	r3, [sp, #4]
    c2da:	beq.w	c55c <_malloc_r+0x51c>
    c2de:	rsb	r2, fp, r0
    c2e2:	add	r2, r9
    c2e4:	orr.w	r2, r2, #1
    c2e8:	ldr	r1, [r3, #0]
    c2ea:	str.w	fp, [r7, #8]
    c2ee:	add	r1, r9
    c2f0:	cmp	r4, r7
    c2f2:	str.w	r2, [fp, #4]
    c2f6:	str	r1, [r3, #0]
    c2f8:	ldr.w	r9, [pc, #164]	; c3a0 <_malloc_r+0x360>
    c2fc:	beq.n	c32c <_malloc_r+0x2ec>
    c2fe:	cmp.w	r8, #15
    c302:	bls.w	c500 <_malloc_r+0x4c0>
    c306:	ldr	r2, [r4, #4]
    c308:	sub.w	r3, r8, #12
    c30c:	bic.w	r3, r3, #7
    c310:	adds	r0, r4, r3
    c312:	and.w	r2, r2, #1
    c316:	mov.w	lr, #5
    c31a:	orrs	r2, r3
    c31c:	cmp	r3, #15
    c31e:	str	r2, [r4, #4]
    c320:	str.w	lr, [r0, #4]
    c324:	str.w	lr, [r0, #8]
    c328:	bhi.w	c564 <_malloc_r+0x524>
    c32c:	ldr	r3, [pc, #116]	; (c3a4 <_malloc_r+0x364>)
    c32e:	ldr	r4, [r7, #8]
    c330:	ldr	r2, [r3, #0]
    c332:	cmp	r1, r2
    c334:	it	hi
    c336:	strhi	r1, [r3, #0]
    c338:	ldr	r3, [pc, #108]	; (c3a8 <_malloc_r+0x368>)
    c33a:	ldr	r2, [r3, #0]
    c33c:	cmp	r1, r2
    c33e:	ldr	r2, [r4, #4]
    c340:	it	hi
    c342:	strhi	r1, [r3, #0]
    c344:	bic.w	r2, r2, #3
    c348:	cmp	r5, r2
    c34a:	sub.w	r3, r2, r5
    c34e:	bhi.n	c354 <_malloc_r+0x314>
    c350:	cmp	r3, #15
    c352:	bgt.n	c35e <_malloc_r+0x31e>
    c354:	mov	r0, r6
    c356:	bl	c84c <__malloc_unlock>
    c35a:	movs	r4, #0
    c35c:	b.n	c1d0 <_malloc_r+0x190>
    c35e:	adds	r2, r4, r5
    c360:	orr.w	r3, r3, #1
    c364:	orr.w	r5, r5, #1
    c368:	str	r5, [r4, #4]
    c36a:	mov	r0, r6
    c36c:	str	r2, [r7, #8]
    c36e:	str	r3, [r2, #4]
    c370:	bl	c84c <__malloc_unlock>
    c374:	adds	r4, #8
    c376:	mov	r0, r4
    c378:	add	sp, #12
    c37a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c37e:	cmp	r3, #20
    c380:	bls.n	c466 <_malloc_r+0x426>
    c382:	cmp	r3, #84	; 0x54
    c384:	bhi.w	c4d0 <_malloc_r+0x490>
    c388:	lsrs	r0, r5, #12
    c38a:	add.w	lr, r0, #111	; 0x6f
    c38e:	mov.w	r3, lr, lsl #1
    c392:	adds	r0, #110	; 0x6e
    c394:	b.n	c084 <_malloc_r+0x44>
    c396:	nop
    c398:	.word	0x20017f70
    c39c:	.word	0x2001e204
    c3a0:	.word	0x2001e208
    c3a4:	.word	0x2001e200
    c3a8:	.word	0x2001e1fc
    c3ac:	.word	0x2001837c
    c3b0:	lsrs	r2, r3, #9
    c3b2:	cmp	r2, #4
    c3b4:	bls.n	c474 <_malloc_r+0x434>
    c3b6:	cmp	r2, #20
    c3b8:	bhi.w	c522 <_malloc_r+0x4e2>
    c3bc:	add.w	r1, r2, #92	; 0x5c
    c3c0:	lsls	r1, r1, #1
    c3c2:	adds	r2, #91	; 0x5b
    c3c4:	add.w	ip, r7, r1, lsl #2
    c3c8:	ldr.w	r1, [r7, r1, lsl #2]
    c3cc:	ldr.w	r8, [pc, #476]	; c5ac <_malloc_r+0x56c>
    c3d0:	sub.w	ip, ip, #8
    c3d4:	cmp	ip, r1
    c3d6:	beq.w	c4ea <_malloc_r+0x4aa>
    c3da:	ldr	r2, [r1, #4]
    c3dc:	bic.w	r2, r2, #3
    c3e0:	cmp	r3, r2
    c3e2:	bcs.n	c3ea <_malloc_r+0x3aa>
    c3e4:	ldr	r1, [r1, #8]
    c3e6:	cmp	ip, r1
    c3e8:	bne.n	c3da <_malloc_r+0x39a>
    c3ea:	ldr.w	ip, [r1, #12]
    c3ee:	ldr	r2, [r7, #4]
    c3f0:	str.w	ip, [r4, #12]
    c3f4:	str	r1, [r4, #8]
    c3f6:	str.w	r4, [ip, #8]
    c3fa:	str	r4, [r1, #12]
    c3fc:	b.n	c110 <_malloc_r+0xd0>
    c3fe:	adds	r3, r4, r5
    c400:	orr.w	r7, r2, #1
    c404:	orr.w	r5, r5, #1
    c408:	str	r5, [r4, #4]
    c40a:	mov	r0, r6
    c40c:	str	r3, [r1, #20]
    c40e:	str	r3, [r1, #16]
    c410:	str.w	lr, [r3, #12]
    c414:	str.w	lr, [r3, #8]
    c418:	str	r7, [r3, #4]
    c41a:	str	r2, [r3, r2]
    c41c:	adds	r4, #8
    c41e:	bl	c84c <__malloc_unlock>
    c422:	b.n	c1d0 <_malloc_r+0x190>
    c424:	ldr	r2, [r1, #4]
    c426:	b.n	c110 <_malloc_r+0xd0>
    c428:	add.w	r8, r8, #1
    c42c:	tst.w	r8, #3
    c430:	add.w	ip, ip, #8
    c434:	bne.w	c136 <_malloc_r+0xf6>
    c438:	b.n	c49c <_malloc_r+0x45c>
    c43a:	ldr	r4, [r3, #12]
    c43c:	cmp	r3, r4
    c43e:	it	eq
    c440:	addeq	r0, #2
    c442:	beq.w	c0b0 <_malloc_r+0x70>
    c446:	b.n	c1b0 <_malloc_r+0x170>
    c448:	add	r3, r1
    c44a:	mov	r4, r1
    c44c:	ldr	r2, [r3, #4]
    c44e:	ldr	r1, [r1, #12]
    c450:	ldr.w	r5, [r4, #8]!
    c454:	orr.w	r2, r2, #1
    c458:	str	r2, [r3, #4]
    c45a:	mov	r0, r6
    c45c:	str	r1, [r5, #12]
    c45e:	str	r5, [r1, #8]
    c460:	bl	c84c <__malloc_unlock>
    c464:	b.n	c1d0 <_malloc_r+0x190>
    c466:	add.w	lr, r3, #92	; 0x5c
    c46a:	add.w	r0, r3, #91	; 0x5b
    c46e:	mov.w	r3, lr, lsl #1
    c472:	b.n	c084 <_malloc_r+0x44>
    c474:	lsrs	r2, r3, #6
    c476:	add.w	r1, r2, #57	; 0x39
    c47a:	lsls	r1, r1, #1
    c47c:	adds	r2, #56	; 0x38
    c47e:	b.n	c3c4 <_malloc_r+0x384>
    c480:	cmp	r4, r7
    c482:	ldr	r3, [pc, #296]	; (c5ac <_malloc_r+0x56c>)
    c484:	beq.w	c288 <_malloc_r+0x248>
    c488:	ldr	r4, [r3, #8]
    c48a:	ldr	r2, [r4, #4]
    c48c:	bic.w	r2, r2, #3
    c490:	b.n	c348 <_malloc_r+0x308>
    c492:	ldr.w	r3, [r9], #-8
    c496:	cmp	r9, r3
    c498:	bne.w	c5a0 <_malloc_r+0x560>
    c49c:	tst.w	r0, #3
    c4a0:	add.w	r0, r0, #4294967295
    c4a4:	bne.n	c492 <_malloc_r+0x452>
    c4a6:	ldr	r3, [r7, #4]
    c4a8:	bic.w	r3, r3, r4
    c4ac:	str	r3, [r7, #4]
    c4ae:	lsls	r4, r4, #1
    c4b0:	cmp	r4, r3
    c4b2:	bhi.w	c230 <_malloc_r+0x1f0>
    c4b6:	cmp	r4, #0
    c4b8:	beq.w	c230 <_malloc_r+0x1f0>
    c4bc:	tst	r4, r3
    c4be:	mov	r0, r8
    c4c0:	bne.w	c12e <_malloc_r+0xee>
    c4c4:	lsls	r4, r4, #1
    c4c6:	tst	r4, r3
    c4c8:	add.w	r0, r0, #4
    c4cc:	beq.n	c4c4 <_malloc_r+0x484>
    c4ce:	b.n	c12e <_malloc_r+0xee>
    c4d0:	cmp.w	r3, #340	; 0x154
    c4d4:	bhi.n	c508 <_malloc_r+0x4c8>
    c4d6:	lsrs	r0, r5, #15
    c4d8:	add.w	lr, r0, #120	; 0x78
    c4dc:	mov.w	r3, lr, lsl #1
    c4e0:	adds	r0, #119	; 0x77
    c4e2:	b.n	c084 <_malloc_r+0x44>
    c4e4:	mov.w	r1, #4096	; 0x1000
    c4e8:	b.n	c2c2 <_malloc_r+0x282>
    c4ea:	movs	r1, #1
    c4ec:	ldr.w	r3, [r8, #4]
    c4f0:	asrs	r2, r2, #2
    c4f2:	lsl.w	r2, r1, r2
    c4f6:	orrs	r2, r3
    c4f8:	str.w	r2, [r8, #4]
    c4fc:	mov	r1, ip
    c4fe:	b.n	c3f0 <_malloc_r+0x3b0>
    c500:	movs	r3, #1
    c502:	str.w	r3, [fp, #4]
    c506:	b.n	c354 <_malloc_r+0x314>
    c508:	movw	r2, #1364	; 0x554
    c50c:	cmp	r3, r2
    c50e:	bhi.n	c552 <_malloc_r+0x512>
    c510:	lsrs	r0, r5, #18
    c512:	add.w	lr, r0, #125	; 0x7d
    c516:	mov.w	r3, lr, lsl #1
    c51a:	adds	r0, #124	; 0x7c
    c51c:	b.n	c084 <_malloc_r+0x44>
    c51e:	adds	r2, #16
    c520:	b.n	c26c <_malloc_r+0x22c>
    c522:	cmp	r2, #84	; 0x54
    c524:	bhi.n	c574 <_malloc_r+0x534>
    c526:	lsrs	r2, r3, #12
    c528:	add.w	r1, r2, #111	; 0x6f
    c52c:	lsls	r1, r1, #1
    c52e:	adds	r2, #110	; 0x6e
    c530:	b.n	c3c4 <_malloc_r+0x384>
    c532:	ldr	r4, [r7, #8]
    c534:	ldr	r2, [r4, #4]
    c536:	bic.w	r2, r2, #3
    c53a:	b.n	c348 <_malloc_r+0x308>
    c53c:	ubfx	r0, sl, #0, #12
    c540:	cmp	r0, #0
    c542:	bne.w	c296 <_malloc_r+0x256>
    c546:	add	r2, r8
    c548:	ldr	r3, [r7, #8]
    c54a:	orr.w	r2, r2, #1
    c54e:	str	r2, [r3, #4]
    c550:	b.n	c32c <_malloc_r+0x2ec>
    c552:	movs	r3, #254	; 0xfe
    c554:	mov.w	lr, #127	; 0x7f
    c558:	movs	r0, #126	; 0x7e
    c55a:	b.n	c084 <_malloc_r+0x44>
    c55c:	movs	r2, #1
    c55e:	mov.w	r9, #0
    c562:	b.n	c2e8 <_malloc_r+0x2a8>
    c564:	add.w	r1, r4, #8
    c568:	mov	r0, r6
    c56a:	bl	117d0 <_free_r>
    c56e:	ldr.w	r1, [r9]
    c572:	b.n	c32c <_malloc_r+0x2ec>
    c574:	cmp.w	r2, #340	; 0x154
    c578:	bhi.n	c586 <_malloc_r+0x546>
    c57a:	lsrs	r2, r3, #15
    c57c:	add.w	r1, r2, #120	; 0x78
    c580:	lsls	r1, r1, #1
    c582:	adds	r2, #119	; 0x77
    c584:	b.n	c3c4 <_malloc_r+0x384>
    c586:	movw	r1, #1364	; 0x554
    c58a:	cmp	r2, r1
    c58c:	bhi.n	c59a <_malloc_r+0x55a>
    c58e:	lsrs	r2, r3, #18
    c590:	add.w	r1, r2, #125	; 0x7d
    c594:	lsls	r1, r1, #1
    c596:	adds	r2, #124	; 0x7c
    c598:	b.n	c3c4 <_malloc_r+0x384>
    c59a:	movs	r1, #254	; 0xfe
    c59c:	movs	r2, #126	; 0x7e
    c59e:	b.n	c3c4 <_malloc_r+0x384>
    c5a0:	ldr	r3, [r7, #4]
    c5a2:	b.n	c4ae <_malloc_r+0x46e>
    c5a4:	lsrs	r0, r5, #3
    c5a6:	adds	r3, r0, #1
    c5a8:	lsls	r3, r3, #1
    c5aa:	b.n	c19e <_malloc_r+0x15e>
    c5ac:	.word	0x20017f70

0000c5b0 <__ascii_mbtowc>:
    c5b0:	sub	sp, #8
    c5b2:	cbz	r1, c5c8 <__ascii_mbtowc+0x18>
    c5b4:	cbz	r2, c5ce <__ascii_mbtowc+0x1e>
    c5b6:	cbz	r3, c5d4 <__ascii_mbtowc+0x24>
    c5b8:	ldrb	r3, [r2, #0]
    c5ba:	str	r3, [r1, #0]
    c5bc:	ldrb	r2, [r2, #0]
    c5be:	adds	r0, r2, #0
    c5c0:	it	ne
    c5c2:	movne	r0, #1
    c5c4:	add	sp, #8
    c5c6:	bx	lr
    c5c8:	add	r1, sp, #4
    c5ca:	cmp	r2, #0
    c5cc:	bne.n	c5b6 <__ascii_mbtowc+0x6>
    c5ce:	mov	r0, r2
    c5d0:	add	sp, #8
    c5d2:	bx	lr
    c5d4:	mvn.w	r0, #1
    c5d8:	b.n	c5c4 <__ascii_mbtowc+0x14>
    c5da:	nop
    c5dc:			; <UNDEFINED> instruction: 0xffffffff

0000c5e0 <memchr>:
    c5e0:	and.w	r1, r1, #255	; 0xff
    c5e4:	cmp	r2, #16
    c5e6:	blt.n	c640 <memchr+0x60>
    c5e8:	tst.w	r0, #7
    c5ec:	beq.n	c600 <memchr+0x20>
    c5ee:	ldrb.w	r3, [r0], #1
    c5f2:	subs	r2, #1
    c5f4:	cmp	r3, r1
    c5f6:	beq.n	c654 <memchr+0x74>
    c5f8:	tst.w	r0, #7
    c5fc:	cbz	r2, c650 <memchr+0x70>
    c5fe:	bne.n	c5ee <memchr+0xe>
    c600:	push	{r4, r5, r6, r7}
    c602:	orr.w	r1, r1, r1, lsl #8
    c606:	orr.w	r1, r1, r1, lsl #16
    c60a:	bic.w	r4, r2, #7
    c60e:	mvns.w	r7, #0
    c612:	movs	r3, #0
    c614:	ldrd	r5, r6, [r0], #8
    c618:	subs	r4, #8
    c61a:	eor.w	r5, r5, r1
    c61e:	eor.w	r6, r6, r1
    c622:	uadd8	r5, r5, r7
    c626:	sel	r5, r3, r7
    c62a:	uadd8	r6, r6, r7
    c62e:	sel	r6, r5, r7
    c632:	cbnz	r6, c658 <memchr+0x78>
    c634:	bne.n	c614 <memchr+0x34>
    c636:	pop	{r4, r5, r6, r7}
    c638:	and.w	r1, r1, #255	; 0xff
    c63c:	and.w	r2, r2, #7
    c640:	cbz	r2, c650 <memchr+0x70>
    c642:	ldrb.w	r3, [r0], #1
    c646:	subs	r2, #1
    c648:	eor.w	r3, r3, r1
    c64c:	cbz	r3, c654 <memchr+0x74>
    c64e:	bne.n	c642 <memchr+0x62>
    c650:	movs	r0, #0
    c652:	bx	lr
    c654:	subs	r0, #1
    c656:	bx	lr
    c658:	cmp	r5, #0
    c65a:	itte	eq
    c65c:	moveq	r5, r6
    c65e:	subeq	r0, #3
    c660:	subne	r0, #7
    c662:	tst.w	r5, #1
    c666:	bne.n	c678 <memchr+0x98>
    c668:	adds	r0, #1
    c66a:	tst.w	r5, #256	; 0x100
    c66e:	ittt	eq
    c670:	addeq	r0, #1
    c672:	tsteq.w	r5, #98304	; 0x18000
    c676:	addeq	r0, #1
    c678:	pop	{r4, r5, r6, r7}
    c67a:	subs	r0, #1
    c67c:	bx	lr
    c67e:	nop

0000c680 <memcmp>:
    c680:	cmp	r2, #3
    c682:	push	{r4, r5, r6}
    c684:	bls.n	c6d4 <memcmp+0x54>
    c686:	orr.w	r3, r0, r1
    c68a:	lsls	r3, r3, #30
    c68c:	beq.n	c6b2 <memcmp+0x32>
    c68e:	ldrb	r4, [r0, #0]
    c690:	ldrb	r5, [r1, #0]
    c692:	cmp	r4, r5
    c694:	bne.n	c6dc <memcmp+0x5c>
    c696:	add	r2, r0
    c698:	adds	r3, r0, #1
    c69a:	b.n	c6a8 <memcmp+0x28>
    c69c:	ldrb.w	r4, [r3], #1
    c6a0:	ldrb.w	r5, [r1, #1]!
    c6a4:	cmp	r4, r5
    c6a6:	bne.n	c6dc <memcmp+0x5c>
    c6a8:	cmp	r3, r2
    c6aa:	bne.n	c69c <memcmp+0x1c>
    c6ac:	movs	r0, #0
    c6ae:	pop	{r4, r5, r6}
    c6b0:	bx	lr
    c6b2:	mov	r4, r1
    c6b4:	mov	r3, r0
    c6b6:	ldr	r6, [r3, #0]
    c6b8:	ldr	r5, [r4, #0]
    c6ba:	cmp	r6, r5
    c6bc:	mov	r0, r3
    c6be:	mov	r1, r4
    c6c0:	add.w	r3, r3, #4
    c6c4:	add.w	r4, r4, #4
    c6c8:	bne.n	c68e <memcmp+0xe>
    c6ca:	subs	r2, #4
    c6cc:	cmp	r2, #3
    c6ce:	mov	r0, r3
    c6d0:	mov	r1, r4
    c6d2:	bhi.n	c6b6 <memcmp+0x36>
    c6d4:	cmp	r2, #0
    c6d6:	bne.n	c68e <memcmp+0xe>
    c6d8:	mov	r0, r2
    c6da:	b.n	c6ae <memcmp+0x2e>
    c6dc:	subs	r0, r4, r5
    c6de:	pop	{r4, r5, r6}
    c6e0:	bx	lr
    c6e2:	nop

0000c6e4 <memmove>:
    c6e4:	cmp	r0, r1
    c6e6:	push	{r4, r5, r6, r7, lr}
    c6e8:	bls.n	c706 <memmove+0x22>
    c6ea:	adds	r3, r1, r2
    c6ec:	cmp	r0, r3
    c6ee:	bcs.n	c706 <memmove+0x22>
    c6f0:	adds	r1, r0, r2
    c6f2:	cmp	r2, #0
    c6f4:	beq.n	c79a <memmove+0xb6>
    c6f6:	subs	r2, r3, r2
    c6f8:	ldrb.w	r4, [r3, #-1]!
    c6fc:	strb.w	r4, [r1, #-1]!
    c700:	cmp	r3, r2
    c702:	bne.n	c6f8 <memmove+0x14>
    c704:	pop	{r4, r5, r6, r7, pc}
    c706:	cmp	r2, #15
    c708:	bls.n	c79c <memmove+0xb8>
    c70a:	orr.w	r3, r1, r0
    c70e:	lsls	r3, r3, #30
    c710:	bne.n	c7a0 <memmove+0xbc>
    c712:	add.w	r4, r0, #16
    c716:	add.w	r3, r1, #16
    c71a:	mov	r5, r2
    c71c:	ldr.w	r6, [r3, #-16]
    c720:	str.w	r6, [r4, #-16]
    c724:	ldr.w	r6, [r3, #-12]
    c728:	str.w	r6, [r4, #-12]
    c72c:	ldr.w	r6, [r3, #-8]
    c730:	str.w	r6, [r4, #-8]
    c734:	subs	r5, #16
    c736:	ldr.w	r6, [r3, #-4]
    c73a:	str.w	r6, [r4, #-4]
    c73e:	cmp	r5, #15
    c740:	add.w	r3, r3, #16
    c744:	add.w	r4, r4, #16
    c748:	bhi.n	c71c <memmove+0x38>
    c74a:	sub.w	r3, r2, #16
    c74e:	bic.w	r3, r3, #15
    c752:	and.w	lr, r2, #15
    c756:	adds	r3, #16
    c758:	cmp.w	lr, #3
    c75c:	add	r1, r3
    c75e:	add	r3, r0
    c760:	bls.n	c7a6 <memmove+0xc2>
    c762:	subs	r6, r3, #4
    c764:	mov	r5, r1
    c766:	mov	r4, lr
    c768:	subs	r4, #4
    c76a:	ldr.w	r7, [r5], #4
    c76e:	str.w	r7, [r6, #4]!
    c772:	cmp	r4, #3
    c774:	bhi.n	c768 <memmove+0x84>
    c776:	sub.w	r4, lr, #4
    c77a:	bic.w	r4, r4, #3
    c77e:	adds	r4, #4
    c780:	add	r3, r4
    c782:	add	r1, r4
    c784:	and.w	r2, r2, #3
    c788:	cbz	r2, c7a4 <memmove+0xc0>
    c78a:	subs	r3, #1
    c78c:	add	r2, r1
    c78e:	ldrb.w	r4, [r1], #1
    c792:	strb.w	r4, [r3, #1]!
    c796:	cmp	r2, r1
    c798:	bne.n	c78e <memmove+0xaa>
    c79a:	pop	{r4, r5, r6, r7, pc}
    c79c:	mov	r3, r0
    c79e:	b.n	c788 <memmove+0xa4>
    c7a0:	mov	r3, r0
    c7a2:	b.n	c78a <memmove+0xa6>
    c7a4:	pop	{r4, r5, r6, r7, pc}
    c7a6:	mov	r2, lr
    c7a8:	b.n	c788 <memmove+0xa4>
    c7aa:	nop

0000c7ac <memset>:
    c7ac:	push	{r4, r5, r6}
    c7ae:	lsls	r4, r0, #30
    c7b0:	beq.n	c840 <memset+0x94>
    c7b2:	subs	r4, r2, #1
    c7b4:	cmp	r2, #0
    c7b6:	beq.n	c83c <memset+0x90>
    c7b8:	uxtb	r5, r1
    c7ba:	mov	r3, r0
    c7bc:	b.n	c7c4 <memset+0x18>
    c7be:	subs	r2, r4, #1
    c7c0:	cbz	r4, c83c <memset+0x90>
    c7c2:	mov	r4, r2
    c7c4:	strb.w	r5, [r3], #1
    c7c8:	lsls	r2, r3, #30
    c7ca:	bne.n	c7be <memset+0x12>
    c7cc:	cmp	r4, #3
    c7ce:	bls.n	c82e <memset+0x82>
    c7d0:	uxtb	r5, r1
    c7d2:	orr.w	r5, r5, r5, lsl #8
    c7d6:	cmp	r4, #15
    c7d8:	orr.w	r5, r5, r5, lsl #16
    c7dc:	bls.n	c812 <memset+0x66>
    c7de:	add.w	r2, r3, #16
    c7e2:	mov	r6, r4
    c7e4:	subs	r6, #16
    c7e6:	cmp	r6, #15
    c7e8:	str.w	r5, [r2, #-16]
    c7ec:	str.w	r5, [r2, #-12]
    c7f0:	str.w	r5, [r2, #-8]
    c7f4:	str.w	r5, [r2, #-4]
    c7f8:	add.w	r2, r2, #16
    c7fc:	bhi.n	c7e4 <memset+0x38>
    c7fe:	sub.w	r2, r4, #16
    c802:	bic.w	r2, r2, #15
    c806:	and.w	r4, r4, #15
    c80a:	adds	r2, #16
    c80c:	cmp	r4, #3
    c80e:	add	r3, r2
    c810:	bls.n	c82e <memset+0x82>
    c812:	mov	r6, r3
    c814:	mov	r2, r4
    c816:	subs	r2, #4
    c818:	cmp	r2, #3
    c81a:	str.w	r5, [r6], #4
    c81e:	bhi.n	c816 <memset+0x6a>
    c820:	subs	r2, r4, #4
    c822:	bic.w	r2, r2, #3
    c826:	adds	r2, #4
    c828:	add	r3, r2
    c82a:	and.w	r4, r4, #3
    c82e:	cbz	r4, c83c <memset+0x90>
    c830:	uxtb	r1, r1
    c832:	add	r4, r3
    c834:	strb.w	r1, [r3], #1
    c838:	cmp	r3, r4
    c83a:	bne.n	c834 <memset+0x88>
    c83c:	pop	{r4, r5, r6}
    c83e:	bx	lr
    c840:	mov	r4, r2
    c842:	mov	r3, r0
    c844:	b.n	c7cc <memset+0x20>
    c846:	nop

0000c848 <__malloc_lock>:
    c848:	bx	lr
    c84a:	nop

0000c84c <__malloc_unlock>:
    c84c:	bx	lr
    c84e:	nop

0000c850 <_realloc_r>:
    c850:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c854:	mov	r7, r2
    c856:	sub	sp, #12
    c858:	cmp	r1, #0
    c85a:	beq.w	c9e0 <_realloc_r+0x190>
    c85e:	mov	r6, r1
    c860:	mov	r9, r0
    c862:	add.w	r5, r7, #11
    c866:	bl	c848 <__malloc_lock>
    c86a:	ldr.w	lr, [r6, #-4]
    c86e:	cmp	r5, #22
    c870:	bic.w	r4, lr, #3
    c874:	sub.w	r8, r6, #8
    c878:	bhi.n	c8fc <_realloc_r+0xac>
    c87a:	movs	r2, #16
    c87c:	mov	r5, r2
    c87e:	cmp	r7, r5
    c880:	bhi.n	c906 <_realloc_r+0xb6>
    c882:	cmp	r4, r2
    c884:	bge.n	c972 <_realloc_r+0x122>
    c886:	ldr	r3, [pc, #804]	; (cbac <_realloc_r+0x35c>)
    c888:	ldr	r1, [r3, #8]
    c88a:	add.w	r0, r8, r4
    c88e:	cmp	r0, r1
    c890:	ldr	r1, [r0, #4]
    c892:	beq.w	ca48 <_realloc_r+0x1f8>
    c896:	bic.w	r3, r1, #1
    c89a:	add	r3, r0
    c89c:	ldr	r3, [r3, #4]
    c89e:	lsls	r3, r3, #31
    c8a0:	bpl.n	c99e <_realloc_r+0x14e>
    c8a2:	tst.w	lr, #1
    c8a6:	beq.n	c914 <_realloc_r+0xc4>
    c8a8:	mov	r1, r7
    c8aa:	mov	r0, r9
    c8ac:	bl	c040 <_malloc_r>
    c8b0:	mov	r7, r0
    c8b2:	cbz	r0, c8ee <_realloc_r+0x9e>
    c8b4:	ldr.w	r3, [r6, #-4]
    c8b8:	bic.w	r3, r3, #1
    c8bc:	add	r3, r8
    c8be:	sub.w	r2, r0, #8
    c8c2:	cmp	r2, r3
    c8c4:	beq.w	cb50 <_realloc_r+0x300>
    c8c8:	subs	r2, r4, #4
    c8ca:	cmp	r2, #36	; 0x24
    c8cc:	bhi.w	cb32 <_realloc_r+0x2e2>
    c8d0:	cmp	r2, #19
    c8d2:	bhi.w	cade <_realloc_r+0x28e>
    c8d6:	mov	r3, r0
    c8d8:	mov	r2, r6
    c8da:	ldr	r1, [r2, #0]
    c8dc:	str	r1, [r3, #0]
    c8de:	ldr	r1, [r2, #4]
    c8e0:	str	r1, [r3, #4]
    c8e2:	ldr	r2, [r2, #8]
    c8e4:	str	r2, [r3, #8]
    c8e6:	mov	r1, r6
    c8e8:	mov	r0, r9
    c8ea:	bl	117d0 <_free_r>
    c8ee:	mov	r0, r9
    c8f0:	bl	c84c <__malloc_unlock>
    c8f4:	mov	r0, r7
    c8f6:	add	sp, #12
    c8f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8fc:	bic.w	r5, r5, #7
    c900:	cmp	r5, #0
    c902:	mov	r2, r5
    c904:	bge.n	c87e <_realloc_r+0x2e>
    c906:	movs	r3, #12
    c908:	movs	r0, #0
    c90a:	str.w	r3, [r9]
    c90e:	add	sp, #12
    c910:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c914:	ldr.w	r3, [r6, #-8]
    c918:	rsb	sl, r3, r8
    c91c:	ldr.w	r3, [sl, #4]
    c920:	bic.w	ip, r3, #3
    c924:	add.w	r3, r4, ip
    c928:	cmp	r3, r2
    c92a:	blt.n	c8a8 <_realloc_r+0x58>
    c92c:	mov	r7, sl
    c92e:	ldr.w	r1, [sl, #12]
    c932:	ldr.w	r0, [r7, #8]!
    c936:	subs	r2, r4, #4
    c938:	cmp	r2, #36	; 0x24
    c93a:	str	r1, [r0, #12]
    c93c:	str	r0, [r1, #8]
    c93e:	bhi.w	cb70 <_realloc_r+0x320>
    c942:	cmp	r2, #19
    c944:	bls.w	cb6c <_realloc_r+0x31c>
    c948:	ldr	r1, [r6, #0]
    c94a:	str.w	r1, [sl, #8]
    c94e:	ldr	r1, [r6, #4]
    c950:	str.w	r1, [sl, #12]
    c954:	cmp	r2, #27
    c956:	bhi.w	cbb0 <_realloc_r+0x360>
    c95a:	adds	r6, #8
    c95c:	add.w	r2, sl, #16
    c960:	ldr	r1, [r6, #0]
    c962:	str	r1, [r2, #0]
    c964:	ldr	r1, [r6, #4]
    c966:	str	r1, [r2, #4]
    c968:	ldr	r1, [r6, #8]
    c96a:	str	r1, [r2, #8]
    c96c:	mov	r6, r7
    c96e:	mov	r4, r3
    c970:	mov	r8, sl
    c972:	subs	r3, r4, r5
    c974:	cmp	r3, #15
    c976:	bhi.n	c9b4 <_realloc_r+0x164>
    c978:	ldr.w	r3, [r8, #4]
    c97c:	and.w	r3, r3, #1
    c980:	orrs	r3, r4
    c982:	add	r4, r8
    c984:	str.w	r3, [r8, #4]
    c988:	ldr	r3, [r4, #4]
    c98a:	orr.w	r3, r3, #1
    c98e:	str	r3, [r4, #4]
    c990:	mov	r0, r9
    c992:	bl	c84c <__malloc_unlock>
    c996:	mov	r0, r6
    c998:	add	sp, #12
    c99a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c99e:	bic.w	r1, r1, #3
    c9a2:	add	r1, r4
    c9a4:	cmp	r1, r2
    c9a6:	blt.n	c9ec <_realloc_r+0x19c>
    c9a8:	ldr	r3, [r0, #12]
    c9aa:	ldr	r2, [r0, #8]
    c9ac:	mov	r4, r1
    c9ae:	str	r3, [r2, #12]
    c9b0:	str	r2, [r3, #8]
    c9b2:	b.n	c972 <_realloc_r+0x122>
    c9b4:	ldr.w	r2, [r8, #4]
    c9b8:	add.w	r1, r8, r5
    c9bc:	and.w	r2, r2, #1
    c9c0:	orrs	r5, r2
    c9c2:	orr.w	r2, r3, #1
    c9c6:	add	r3, r1
    c9c8:	str.w	r5, [r8, #4]
    c9cc:	str	r2, [r1, #4]
    c9ce:	ldr	r2, [r3, #4]
    c9d0:	orr.w	r2, r2, #1
    c9d4:	adds	r1, #8
    c9d6:	str	r2, [r3, #4]
    c9d8:	mov	r0, r9
    c9da:	bl	117d0 <_free_r>
    c9de:	b.n	c990 <_realloc_r+0x140>
    c9e0:	mov	r1, r2
    c9e2:	add	sp, #12
    c9e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9e8:	b.w	c040 <_malloc_r>
    c9ec:	tst.w	lr, #1
    c9f0:	bne.w	c8a8 <_realloc_r+0x58>
    c9f4:	ldr.w	r3, [r6, #-8]
    c9f8:	rsb	sl, r3, r8
    c9fc:	ldr.w	r3, [sl, #4]
    ca00:	bic.w	ip, r3, #3
    ca04:	add.w	lr, r1, ip
    ca08:	cmp	lr, r2
    ca0a:	blt.n	c924 <_realloc_r+0xd4>
    ca0c:	ldr	r3, [r0, #12]
    ca0e:	ldr	r2, [r0, #8]
    ca10:	mov	r7, sl
    ca12:	str	r3, [r2, #12]
    ca14:	str	r2, [r3, #8]
    ca16:	ldr.w	r1, [r7, #8]!
    ca1a:	ldr.w	r3, [sl, #12]
    ca1e:	str	r3, [r1, #12]
    ca20:	subs	r2, r4, #4
    ca22:	cmp	r2, #36	; 0x24
    ca24:	str	r1, [r3, #8]
    ca26:	bhi.w	cb5c <_realloc_r+0x30c>
    ca2a:	cmp	r2, #19
    ca2c:	bls.n	caf4 <_realloc_r+0x2a4>
    ca2e:	ldr	r3, [r6, #0]
    ca30:	str.w	r3, [sl, #8]
    ca34:	ldr	r3, [r6, #4]
    ca36:	str.w	r3, [sl, #12]
    ca3a:	cmp	r2, #27
    ca3c:	bhi.w	cb80 <_realloc_r+0x330>
    ca40:	adds	r6, #8
    ca42:	add.w	r3, sl, #16
    ca46:	b.n	caf6 <_realloc_r+0x2a6>
    ca48:	bic.w	fp, r1, #3
    ca4c:	add	fp, r4
    ca4e:	add.w	r0, r5, #16
    ca52:	cmp	fp, r0
    ca54:	bge.n	cb0a <_realloc_r+0x2ba>
    ca56:	tst.w	lr, #1
    ca5a:	bne.w	c8a8 <_realloc_r+0x58>
    ca5e:	ldr.w	r1, [r6, #-8]
    ca62:	rsb	sl, r1, r8
    ca66:	ldr.w	r1, [sl, #4]
    ca6a:	bic.w	ip, r1, #3
    ca6e:	add	fp, ip
    ca70:	cmp	r0, fp
    ca72:	bgt.w	c924 <_realloc_r+0xd4>
    ca76:	mov	r7, sl
    ca78:	ldr.w	r1, [sl, #12]
    ca7c:	ldr.w	r0, [r7, #8]!
    ca80:	subs	r2, r4, #4
    ca82:	cmp	r2, #36	; 0x24
    ca84:	str	r1, [r0, #12]
    ca86:	str	r0, [r1, #8]
    ca88:	bhi.w	cbf4 <_realloc_r+0x3a4>
    ca8c:	cmp	r2, #19
    ca8e:	bls.w	cbdc <_realloc_r+0x38c>
    ca92:	ldr	r1, [r6, #0]
    ca94:	str.w	r1, [sl, #8]
    ca98:	ldr	r1, [r6, #4]
    ca9a:	str.w	r1, [sl, #12]
    ca9e:	cmp	r2, #27
    caa0:	bhi.w	cc02 <_realloc_r+0x3b2>
    caa4:	adds	r6, #8
    caa6:	add.w	r2, sl, #16
    caaa:	ldr	r1, [r6, #0]
    caac:	str	r1, [r2, #0]
    caae:	ldr	r1, [r6, #4]
    cab0:	str	r1, [r2, #4]
    cab2:	ldr	r1, [r6, #8]
    cab4:	str	r1, [r2, #8]
    cab6:	add.w	r1, sl, r5
    caba:	rsb	r2, r5, fp
    cabe:	orr.w	r2, r2, #1
    cac2:	str	r1, [r3, #8]
    cac4:	str	r2, [r1, #4]
    cac6:	ldr.w	r3, [sl, #4]
    caca:	and.w	r3, r3, #1
    cace:	orrs	r5, r3
    cad0:	mov	r0, r9
    cad2:	str.w	r5, [sl, #4]
    cad6:	bl	c84c <__malloc_unlock>
    cada:	mov	r0, r7
    cadc:	b.n	c998 <_realloc_r+0x148>
    cade:	ldr	r3, [r6, #0]
    cae0:	str	r3, [r0, #0]
    cae2:	ldr	r3, [r6, #4]
    cae4:	str	r3, [r0, #4]
    cae6:	cmp	r2, #27
    cae8:	bhi.n	cb3a <_realloc_r+0x2ea>
    caea:	add.w	r3, r0, #8
    caee:	add.w	r2, r6, #8
    caf2:	b.n	c8da <_realloc_r+0x8a>
    caf4:	mov	r3, r7
    caf6:	ldr	r2, [r6, #0]
    caf8:	str	r2, [r3, #0]
    cafa:	ldr	r2, [r6, #4]
    cafc:	str	r2, [r3, #4]
    cafe:	ldr	r2, [r6, #8]
    cb00:	str	r2, [r3, #8]
    cb02:	mov	r6, r7
    cb04:	mov	r4, lr
    cb06:	mov	r8, sl
    cb08:	b.n	c972 <_realloc_r+0x122>
    cb0a:	add.w	r1, r8, r5
    cb0e:	rsb	fp, r5, fp
    cb12:	orr.w	r2, fp, #1
    cb16:	str	r1, [r3, #8]
    cb18:	str	r2, [r1, #4]
    cb1a:	ldr.w	r3, [r6, #-4]
    cb1e:	and.w	r3, r3, #1
    cb22:	orrs	r5, r3
    cb24:	mov	r0, r9
    cb26:	str.w	r5, [r6, #-4]
    cb2a:	bl	c84c <__malloc_unlock>
    cb2e:	mov	r0, r6
    cb30:	b.n	c998 <_realloc_r+0x148>
    cb32:	mov	r1, r6
    cb34:	bl	c6e4 <memmove>
    cb38:	b.n	c8e6 <_realloc_r+0x96>
    cb3a:	ldr	r3, [r6, #8]
    cb3c:	str	r3, [r0, #8]
    cb3e:	ldr	r3, [r6, #12]
    cb40:	str	r3, [r0, #12]
    cb42:	cmp	r2, #36	; 0x24
    cb44:	beq.n	cb98 <_realloc_r+0x348>
    cb46:	add.w	r3, r0, #16
    cb4a:	add.w	r2, r6, #16
    cb4e:	b.n	c8da <_realloc_r+0x8a>
    cb50:	ldr.w	r3, [r0, #-4]
    cb54:	bic.w	r3, r3, #3
    cb58:	add	r4, r3
    cb5a:	b.n	c972 <_realloc_r+0x122>
    cb5c:	mov	r1, r6
    cb5e:	mov	r0, r7
    cb60:	mov	r4, lr
    cb62:	mov	r8, sl
    cb64:	bl	c6e4 <memmove>
    cb68:	mov	r6, r7
    cb6a:	b.n	c972 <_realloc_r+0x122>
    cb6c:	mov	r2, r7
    cb6e:	b.n	c960 <_realloc_r+0x110>
    cb70:	mov	r1, r6
    cb72:	mov	r0, r7
    cb74:	mov	r4, r3
    cb76:	mov	r8, sl
    cb78:	bl	c6e4 <memmove>
    cb7c:	mov	r6, r7
    cb7e:	b.n	c972 <_realloc_r+0x122>
    cb80:	ldr	r3, [r6, #8]
    cb82:	str.w	r3, [sl, #16]
    cb86:	ldr	r3, [r6, #12]
    cb88:	str.w	r3, [sl, #20]
    cb8c:	cmp	r2, #36	; 0x24
    cb8e:	beq.n	cbc8 <_realloc_r+0x378>
    cb90:	adds	r6, #16
    cb92:	add.w	r3, sl, #24
    cb96:	b.n	caf6 <_realloc_r+0x2a6>
    cb98:	ldr	r3, [r6, #16]
    cb9a:	str	r3, [r0, #16]
    cb9c:	ldr	r3, [r6, #20]
    cb9e:	str	r3, [r0, #20]
    cba0:	add.w	r2, r6, #24
    cba4:	add.w	r3, r0, #24
    cba8:	b.n	c8da <_realloc_r+0x8a>
    cbaa:	nop
    cbac:	.word	0x20017f70
    cbb0:	ldr	r1, [r6, #8]
    cbb2:	str.w	r1, [sl, #16]
    cbb6:	ldr	r1, [r6, #12]
    cbb8:	str.w	r1, [sl, #20]
    cbbc:	cmp	r2, #36	; 0x24
    cbbe:	beq.n	cbe0 <_realloc_r+0x390>
    cbc0:	adds	r6, #16
    cbc2:	add.w	r2, sl, #24
    cbc6:	b.n	c960 <_realloc_r+0x110>
    cbc8:	ldr	r3, [r6, #16]
    cbca:	str.w	r3, [sl, #24]
    cbce:	ldr	r3, [r6, #20]
    cbd0:	str.w	r3, [sl, #28]
    cbd4:	adds	r6, #24
    cbd6:	add.w	r3, sl, #32
    cbda:	b.n	caf6 <_realloc_r+0x2a6>
    cbdc:	mov	r2, r7
    cbde:	b.n	caaa <_realloc_r+0x25a>
    cbe0:	ldr	r2, [r6, #16]
    cbe2:	str.w	r2, [sl, #24]
    cbe6:	ldr	r2, [r6, #20]
    cbe8:	str.w	r2, [sl, #28]
    cbec:	adds	r6, #24
    cbee:	add.w	r2, sl, #32
    cbf2:	b.n	c960 <_realloc_r+0x110>
    cbf4:	mov	r1, r6
    cbf6:	mov	r0, r7
    cbf8:	str	r3, [sp, #4]
    cbfa:	bl	c6e4 <memmove>
    cbfe:	ldr	r3, [sp, #4]
    cc00:	b.n	cab6 <_realloc_r+0x266>
    cc02:	ldr	r1, [r6, #8]
    cc04:	str.w	r1, [sl, #16]
    cc08:	ldr	r1, [r6, #12]
    cc0a:	str.w	r1, [sl, #20]
    cc0e:	cmp	r2, #36	; 0x24
    cc10:	beq.n	cc1a <_realloc_r+0x3ca>
    cc12:	adds	r6, #16
    cc14:	add.w	r2, sl, #24
    cc18:	b.n	caaa <_realloc_r+0x25a>
    cc1a:	ldr	r2, [r6, #16]
    cc1c:	str.w	r2, [sl, #24]
    cc20:	ldr	r2, [r6, #20]
    cc22:	str.w	r2, [sl, #28]
    cc26:	adds	r6, #24
    cc28:	add.w	r2, sl, #32
    cc2c:	b.n	caaa <_realloc_r+0x25a>
    cc2e:	nop

0000cc30 <_sbrk_r>:
    cc30:	push	{r3, r4, r5, lr}
    cc32:	ldr	r4, [pc, #28]	; (cc50 <_sbrk_r+0x20>)
    cc34:	movs	r3, #0
    cc36:	mov	r5, r0
    cc38:	mov	r0, r1
    cc3a:	str	r3, [r4, #0]
    cc3c:	bl	8d44 <_sbrk>
    cc40:	adds	r3, r0, #1
    cc42:	beq.n	cc46 <_sbrk_r+0x16>
    cc44:	pop	{r3, r4, r5, pc}
    cc46:	ldr	r3, [r4, #0]
    cc48:	cmp	r3, #0
    cc4a:	beq.n	cc44 <_sbrk_r+0x14>
    cc4c:	str	r3, [r5, #0]
    cc4e:	pop	{r3, r4, r5, pc}
    cc50:	.word	0x2001e244

0000cc54 <sprintf>:
    cc54:	push	{r1, r2, r3}
    cc56:	push	{r4, r5, r6, r7, lr}
    cc58:	sub	sp, #112	; 0x70
    cc5a:	add	r3, sp, #132	; 0x84
    cc5c:	ldr	r1, [pc, #60]	; (cc9c <sprintf+0x48>)
    cc5e:	ldr.w	r2, [r3], #4
    cc62:	str	r3, [sp, #4]
    cc64:	mov	r5, r0
    cc66:	mvn.w	r4, #2147483648	; 0x80000000
    cc6a:	ldr	r0, [r1, #0]
    cc6c:	str	r5, [sp, #8]
    cc6e:	mov.w	r7, #520	; 0x208
    cc72:	movw	r6, #65535	; 0xffff
    cc76:	add	r1, sp, #8
    cc78:	str	r5, [sp, #24]
    cc7a:	strh.w	r7, [sp, #20]
    cc7e:	str	r4, [sp, #16]
    cc80:	str	r4, [sp, #28]
    cc82:	strh.w	r6, [sp, #22]
    cc86:	bl	e0d0 <_svfprintf_r>
    cc8a:	ldr	r3, [sp, #8]
    cc8c:	movs	r2, #0
    cc8e:	strb	r2, [r3, #0]
    cc90:	add	sp, #112	; 0x70
    cc92:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    cc96:	add	sp, #12
    cc98:	bx	lr
    cc9a:	nop
    cc9c:	.word	0x20017e00

0000cca0 <sscanf>:
    cca0:	push	{r1, r2, r3}
    cca2:	push	{r4, r5, r6, r7, lr}
    cca4:	sub	sp, #112	; 0x70
    cca6:	add	r4, sp, #132	; 0x84
    cca8:	mov.w	r2, #516	; 0x204
    ccac:	ldr.w	r6, [r4], #4
    ccb0:	strh.w	r2, [sp, #20]
    ccb4:	str	r0, [sp, #8]
    ccb6:	str	r0, [sp, #24]
    ccb8:	bl	cec0 <strlen>
    ccbc:	ldr	r3, [pc, #48]	; (ccf0 <sscanf+0x50>)
    ccbe:	str	r4, [sp, #4]
    ccc0:	mov	r5, r0
    ccc2:	mov	r2, r6
    ccc4:	ldr	r7, [pc, #44]	; (ccf4 <sscanf+0x54>)
    ccc6:	ldr	r0, [r3, #0]
    ccc8:	str	r5, [sp, #12]
    ccca:	mov	r3, r4
    cccc:	movw	r6, #65535	; 0xffff
    ccd0:	movs	r4, #0
    ccd2:	add	r1, sp, #8
    ccd4:	str	r5, [sp, #28]
    ccd6:	str	r7, [sp, #40]	; 0x28
    ccd8:	str	r4, [sp, #56]	; 0x38
    ccda:	str	r4, [sp, #76]	; 0x4c
    ccdc:	strh.w	r6, [sp, #22]
    cce0:	bl	f7b4 <__ssvfscanf_r>
    cce4:	add	sp, #112	; 0x70
    cce6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ccea:	add	sp, #12
    ccec:	bx	lr
    ccee:	nop
    ccf0:	.word	0x20017e00
    ccf4:	.word	0x0000ccf9

0000ccf8 <__seofread>:
    ccf8:	movs	r0, #0
    ccfa:	bx	lr

0000ccfc <strchr>:
    ccfc:	push	{r4, r5, r6}
    ccfe:	ands.w	r4, r1, #255	; 0xff
    cd02:	beq.n	cd6e <strchr+0x72>
    cd04:	lsls	r5, r0, #30
    cd06:	beq.n	cd28 <strchr+0x2c>
    cd08:	ldrb	r3, [r0, #0]
    cd0a:	cmp	r3, #0
    cd0c:	beq.n	cdc4 <strchr+0xc8>
    cd0e:	cmp	r4, r3
    cd10:	beq.n	cd6a <strchr+0x6e>
    cd12:	adds	r3, r0, #1
    cd14:	b.n	cd22 <strchr+0x26>
    cd16:	ldrb.w	r2, [r3], #1
    cd1a:	cmp	r2, #0
    cd1c:	beq.n	cdbe <strchr+0xc2>
    cd1e:	cmp	r4, r2
    cd20:	beq.n	cd6a <strchr+0x6e>
    cd22:	lsls	r2, r3, #30
    cd24:	mov	r0, r3
    cd26:	bne.n	cd16 <strchr+0x1a>
    cd28:	lsls	r6, r1, #8
    cd2a:	and.w	r6, r6, #65280	; 0xff00
    cd2e:	orrs	r6, r4
    cd30:	ldr	r3, [r0, #0]
    cd32:	orr.w	r6, r6, r6, lsl #16
    cd36:	b.n	cd3c <strchr+0x40>
    cd38:	ldr.w	r3, [r0, #4]!
    cd3c:	eor.w	r5, r6, r3
    cd40:	sub.w	r2, r5, #16843009	; 0x1010101
    cd44:	sub.w	r1, r3, #16843009	; 0x1010101
    cd48:	bic.w	r2, r2, r5
    cd4c:	bic.w	r3, r1, r3
    cd50:	orrs	r3, r2
    cd52:	tst.w	r3, #2155905152	; 0x80808080
    cd56:	beq.n	cd38 <strchr+0x3c>
    cd58:	ldrb	r3, [r0, #0]
    cd5a:	cbnz	r3, cd66 <strchr+0x6a>
    cd5c:	b.n	cdc4 <strchr+0xc8>
    cd5e:	ldrb.w	r3, [r0, #1]!
    cd62:	cmp	r3, #0
    cd64:	beq.n	cdc4 <strchr+0xc8>
    cd66:	cmp	r4, r3
    cd68:	bne.n	cd5e <strchr+0x62>
    cd6a:	pop	{r4, r5, r6}
    cd6c:	bx	lr
    cd6e:	lsls	r4, r0, #30
    cd70:	beq.n	cd8a <strchr+0x8e>
    cd72:	ldrb	r3, [r0, #0]
    cd74:	cmp	r3, #0
    cd76:	beq.n	cd6a <strchr+0x6e>
    cd78:	adds	r3, r0, #1
    cd7a:	b.n	cd84 <strchr+0x88>
    cd7c:	ldrb	r2, [r0, #0]
    cd7e:	adds	r3, #1
    cd80:	cmp	r2, #0
    cd82:	beq.n	cd6a <strchr+0x6e>
    cd84:	lsls	r1, r3, #30
    cd86:	mov	r0, r3
    cd88:	bne.n	cd7c <strchr+0x80>
    cd8a:	ldr	r2, [r0, #0]
    cd8c:	sub.w	r3, r2, #16843009	; 0x1010101
    cd90:	bic.w	r3, r3, r2
    cd94:	tst.w	r3, #2155905152	; 0x80808080
    cd98:	bne.n	cdac <strchr+0xb0>
    cd9a:	ldr.w	r2, [r0, #4]!
    cd9e:	sub.w	r3, r2, #16843009	; 0x1010101
    cda2:	bic.w	r3, r3, r2
    cda6:	tst.w	r3, #2155905152	; 0x80808080
    cdaa:	beq.n	cd9a <strchr+0x9e>
    cdac:	ldrb	r3, [r0, #0]
    cdae:	cmp	r3, #0
    cdb0:	beq.n	cd6a <strchr+0x6e>
    cdb2:	ldrb.w	r3, [r0, #1]!
    cdb6:	cmp	r3, #0
    cdb8:	bne.n	cdb2 <strchr+0xb6>
    cdba:	pop	{r4, r5, r6}
    cdbc:	bx	lr
    cdbe:	mov	r0, r2
    cdc0:	pop	{r4, r5, r6}
    cdc2:	bx	lr
    cdc4:	mov	r0, r3
    cdc6:	pop	{r4, r5, r6}
    cdc8:	bx	lr
    cdca:	nop

0000cdcc <strcpy>:
    cdcc:	eor.w	r2, r0, r1
    cdd0:	mov	ip, r0
    cdd2:	tst.w	r2, #3
    cdd6:	bne.n	ce78 <strcpy+0xac>
    cdd8:	tst.w	r1, #3
    cddc:	bne.n	ce44 <strcpy+0x78>
    cdde:	str.w	r4, [sp, #-4]!
    cde2:	tst.w	r1, #4
    cde6:	ldr.w	r3, [r1], #4
    cdea:	beq.n	ce04 <strcpy+0x38>
    cdec:	sub.w	r2, r3, #16843009	; 0x1010101
    cdf0:	bics	r2, r3
    cdf2:	tst.w	r2, #2155905152	; 0x80808080
    cdf6:	itt	eq
    cdf8:	streq.w	r3, [ip], #4
    cdfc:	ldreq.w	r3, [r1], #4
    ce00:	bne.n	ce30 <strcpy+0x64>
    ce02:	nop
    ce04:	ldr.w	r4, [r1], #4
    ce08:	sub.w	r2, r3, #16843009	; 0x1010101
    ce0c:	bics	r2, r3
    ce0e:	tst.w	r2, #2155905152	; 0x80808080
    ce12:	sub.w	r2, r4, #16843009	; 0x1010101
    ce16:	bne.n	ce30 <strcpy+0x64>
    ce18:	str.w	r3, [ip], #4
    ce1c:	bics	r2, r4
    ce1e:	tst.w	r2, #2155905152	; 0x80808080
    ce22:	itt	eq
    ce24:	ldreq.w	r3, [r1], #4
    ce28:	streq.w	r4, [ip], #4
    ce2c:	beq.n	ce04 <strcpy+0x38>
    ce2e:	mov	r3, r4
    ce30:	strb.w	r3, [ip], #1
    ce34:	tst.w	r3, #255	; 0xff
    ce38:	mov.w	r3, r3, ror #8
    ce3c:	bne.n	ce30 <strcpy+0x64>
    ce3e:	ldr.w	r4, [sp], #4
    ce42:	bx	lr
    ce44:	tst.w	r1, #1
    ce48:	beq.n	ce58 <strcpy+0x8c>
    ce4a:	ldrb.w	r2, [r1], #1
    ce4e:	strb.w	r2, [ip], #1
    ce52:	cmp	r2, #0
    ce54:	it	eq
    ce56:	bxeq	lr
    ce58:	tst.w	r1, #2
    ce5c:	beq.n	cdde <strcpy+0x12>
    ce5e:	ldrh.w	r2, [r1], #2
    ce62:	tst.w	r2, #255	; 0xff
    ce66:	itet	ne
    ce68:	strhne.w	r2, [ip], #2
    ce6c:	strbeq.w	r2, [ip]
    ce70:	tstne.w	r2, #65280	; 0xff00
    ce74:	bne.n	cdde <strcpy+0x12>
    ce76:	bx	lr
    ce78:	ldrb.w	r2, [r1], #1
    ce7c:	strb.w	r2, [ip], #1
    ce80:	cmp	r2, #0
    ce82:	bne.n	ce78 <strcpy+0xac>
    ce84:	bx	lr
    ce86:	nop
    ce88:			; <UNDEFINED> instruction: 0xffffffff
    ce8c:			; <UNDEFINED> instruction: 0xffffffff
    ce90:			; <UNDEFINED> instruction: 0xffffffff
    ce94:			; <UNDEFINED> instruction: 0xffffffff
    ce98:			; <UNDEFINED> instruction: 0xffffffff
    ce9c:			; <UNDEFINED> instruction: 0xffffffff
    cea0:			; <UNDEFINED> instruction: 0xffffffff
    cea4:			; <UNDEFINED> instruction: 0xffffffff
    cea8:			; <UNDEFINED> instruction: 0xffffffff
    ceac:			; <UNDEFINED> instruction: 0xffffffff
    ceb0:			; <UNDEFINED> instruction: 0xffffffff
    ceb4:			; <UNDEFINED> instruction: 0xffffffff
    ceb8:			; <UNDEFINED> instruction: 0xffffffff
    cebc:			; <UNDEFINED> instruction: 0xffffffff

0000cec0 <strlen>:
    cec0:	pld	[r0]
    cec4:	strd	r4, r5, [sp, #-8]!
    cec8:	bic.w	r1, r0, #7
    cecc:	mvn.w	ip, #0
    ced0:	ands.w	r4, r0, #7
    ced4:	pld	[r1, #32]
    ced8:	bne.w	cf6e <strlen+0xae>
    cedc:	mov.w	r4, #0
    cee0:	mvn.w	r0, #7
    cee4:	ldrd	r2, r3, [r1]
    cee8:	pld	[r1, #64]	; 0x40
    ceec:	add.w	r0, r0, #8
    cef0:	uadd8	r2, r2, ip
    cef4:	sel	r2, r4, ip
    cef8:	uadd8	r3, r3, ip
    cefc:	sel	r3, r2, ip
    cf00:	cbnz	r3, cf56 <strlen+0x96>
    cf02:	ldrd	r2, r3, [r1, #8]
    cf06:	uadd8	r2, r2, ip
    cf0a:	add.w	r0, r0, #8
    cf0e:	sel	r2, r4, ip
    cf12:	uadd8	r3, r3, ip
    cf16:	sel	r3, r2, ip
    cf1a:	cbnz	r3, cf56 <strlen+0x96>
    cf1c:	ldrd	r2, r3, [r1, #16]
    cf20:	uadd8	r2, r2, ip
    cf24:	add.w	r0, r0, #8
    cf28:	sel	r2, r4, ip
    cf2c:	uadd8	r3, r3, ip
    cf30:	sel	r3, r2, ip
    cf34:	cbnz	r3, cf56 <strlen+0x96>
    cf36:	ldrd	r2, r3, [r1, #24]
    cf3a:	add.w	r1, r1, #32
    cf3e:	uadd8	r2, r2, ip
    cf42:	add.w	r0, r0, #8
    cf46:	sel	r2, r4, ip
    cf4a:	uadd8	r3, r3, ip
    cf4e:	sel	r3, r2, ip
    cf52:	cmp	r3, #0
    cf54:	beq.n	cee4 <strlen+0x24>
    cf56:	cmp	r2, #0
    cf58:	itt	eq
    cf5a:	addeq	r0, #4
    cf5c:	moveq	r2, r3
    cf5e:	rev	r2, r2
    cf60:	clz	r2, r2
    cf64:	ldrd	r4, r5, [sp], #8
    cf68:	add.w	r0, r0, r2, lsr #3
    cf6c:	bx	lr
    cf6e:	ldrd	r2, r3, [r1]
    cf72:	and.w	r5, r4, #3
    cf76:	rsb	r0, r4, #0
    cf7a:	mov.w	r5, r5, lsl #3
    cf7e:	tst.w	r4, #4
    cf82:	pld	[r1, #64]	; 0x40
    cf86:	lsl.w	r5, ip, r5
    cf8a:	orn	r2, r2, r5
    cf8e:	itt	ne
    cf90:	ornne	r3, r3, r5
    cf94:	movne	r2, ip
    cf96:	mov.w	r4, #0
    cf9a:	b.n	cef0 <strlen+0x30>

0000cf9c <strncmp>:
    cf9c:	cmp	r2, #0
    cf9e:	beq.n	d024 <strncmp+0x88>
    cfa0:	orr.w	r3, r0, r1
    cfa4:	ands.w	r3, r3, #3
    cfa8:	push	{r4, r5, r6, r7}
    cfaa:	bne.n	cff8 <strncmp+0x5c>
    cfac:	cmp	r2, #3
    cfae:	bls.n	cff8 <strncmp+0x5c>
    cfb0:	ldr	r4, [r0, #0]
    cfb2:	ldr	r5, [r1, #0]
    cfb4:	cmp	r4, r5
    cfb6:	bne.n	cff8 <strncmp+0x5c>
    cfb8:	subs	r2, #4
    cfba:	beq.n	d028 <strncmp+0x8c>
    cfbc:	sub.w	r5, r4, #16843009	; 0x1010101
    cfc0:	bic.w	r4, r5, r4
    cfc4:	tst.w	r4, #2155905152	; 0x80808080
    cfc8:	bne.n	d02e <strncmp+0x92>
    cfca:	adds	r7, r0, #4
    cfcc:	adds	r5, r1, #4
    cfce:	b.n	cfec <strncmp+0x50>
    cfd0:	ldr.w	r3, [r7], #4
    cfd4:	ldr	r6, [r1, #0]
    cfd6:	sub.w	r4, r3, #16843009	; 0x1010101
    cfda:	cmp	r3, r6
    cfdc:	bic.w	r4, r4, r3
    cfe0:	bne.n	cff8 <strncmp+0x5c>
    cfe2:	subs	r2, #4
    cfe4:	beq.n	d028 <strncmp+0x8c>
    cfe6:	tst.w	r4, #2155905152	; 0x80808080
    cfea:	bne.n	d034 <strncmp+0x98>
    cfec:	cmp	r2, #3
    cfee:	mov	r1, r5
    cff0:	mov	r0, r7
    cff2:	add.w	r5, r5, #4
    cff6:	bhi.n	cfd0 <strncmp+0x34>
    cff8:	ldrb	r3, [r0, #0]
    cffa:	ldrb	r4, [r1, #0]
    cffc:	cmp	r4, r3
    cffe:	add.w	r2, r2, #4294967295
    d002:	bne.n	d01e <strncmp+0x82>
    d004:	cbz	r2, d028 <strncmp+0x8c>
    d006:	cbnz	r4, d00e <strncmp+0x72>
    d008:	b.n	d038 <strncmp+0x9c>
    d00a:	cbz	r2, d028 <strncmp+0x8c>
    d00c:	cbz	r3, d02e <strncmp+0x92>
    d00e:	ldrb.w	r3, [r0, #1]!
    d012:	ldrb.w	r4, [r1, #1]!
    d016:	cmp	r3, r4
    d018:	add.w	r2, r2, #4294967295
    d01c:	beq.n	d00a <strncmp+0x6e>
    d01e:	subs	r0, r3, r4
    d020:	pop	{r4, r5, r6, r7}
    d022:	bx	lr
    d024:	mov	r0, r2
    d026:	bx	lr
    d028:	mov	r0, r2
    d02a:	pop	{r4, r5, r6, r7}
    d02c:	bx	lr
    d02e:	mov	r0, r3
    d030:	pop	{r4, r5, r6, r7}
    d032:	bx	lr
    d034:	movs	r0, #0
    d036:	b.n	d020 <strncmp+0x84>
    d038:	mov	r0, r4
    d03a:	b.n	d020 <strncmp+0x84>

0000d03c <sulp>:
    d03c:	push	{r4, r5, r6, lr}
    d03e:	mov	r4, r0
    d040:	mov	r5, r1
    d042:	vmov	d0, r4, r5
    d046:	mov	r6, r2
    d048:	bl	127a0 <__ulp>
    d04c:	vmov	r0, r1, d0
    d050:	cbz	r6, d072 <sulp+0x36>
    d052:	ubfx	r3, r5, #20, #11
    d056:	rsb	r3, r3, #107	; 0x6b
    d05a:	cmp	r3, #0
    d05c:	ble.n	d072 <sulp+0x36>
    d05e:	lsls	r3, r3, #20
    d060:	add.w	r5, r3, #1069547520	; 0x3fc00000
    d064:	movs	r4, #0
    d066:	add.w	r5, r5, #3145728	; 0x300000
    d06a:	mov	r2, r4
    d06c:	mov	r3, r5
    d06e:	bl	b294 <__aeabi_dmul>
    d072:	pop	{r4, r5, r6, pc}
    d074:			; <UNDEFINED> instruction: 0xffffffff

0000d078 <_strtod_l>:
    d078:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d07c:	mov	r5, r3
    d07e:	sub	sp, #132	; 0x84
    d080:	movs	r3, #0
    d082:	mov	fp, r0
    d084:	mov	r0, r5
    d086:	mov	r6, r1
    d088:	str	r2, [sp, #24]
    d08a:	str	r3, [sp, #112]	; 0x70
    d08c:	bl	12124 <__localeconv_l>
    d090:	movs	r4, #0
    d092:	movs	r3, #0
    d094:	mov	sl, r0
    d096:	ldr	r0, [r0, #0]
    d098:	strd	r3, r4, [sp, #16]
    d09c:	bl	cec0 <strlen>
    d0a0:	str	r6, [sp, #108]	; 0x6c
    d0a2:	mov	r9, r0
    d0a4:	mov	r2, r6
    d0a6:	mov	r4, r2
    d0a8:	ldrb.w	r7, [r2], #1
    d0ac:	cmp	r7, #45	; 0x2d
    d0ae:	bhi.w	d210 <_strtod_l+0x198>
    d0b2:	tbb	[pc, r7]
    d0b6:	.short	0xad17
    d0b8:	.word	0xadadadad
    d0bc:	.word	0x81adadad
    d0c0:	.word	0x81818181
    d0c4:	.word	0xadadadad
    d0c8:	.word	0xadadadad
    d0cc:	.word	0xadadadad
    d0d0:	.word	0xadadadad
    d0d4:	.word	0xad81adad
    d0d8:	.word	0xadadadad
    d0dc:	.word	0xadadadad
    d0e0:	.word	0x7ead2bad
    d0e4:	ldr	r3, [sp, #24]
    d0e6:	mov.w	r8, #0
    d0ea:	mov.w	r9, #0
    d0ee:	cbz	r3, d102 <_strtod_l+0x8a>
    d0f0:	movs	r3, #0
    d0f2:	str	r3, [sp, #28]
    d0f4:	ldr	r3, [sp, #24]
    d0f6:	str	r6, [r3, #0]
    d0f8:	ldr	r3, [sp, #28]
    d0fa:	cbz	r3, d102 <_strtod_l+0x8a>
    d0fc:	add.w	r3, r9, #2147483648	; 0x80000000
    d100:	mov	r9, r3
    d102:	vmov	d0, r8, r9
    d106:	add	sp, #132	; 0x84
    d108:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d10c:	movs	r3, #0
    d10e:	str	r3, [sp, #28]
    d110:	adds	r2, r4, #1
    d112:	str	r2, [sp, #108]	; 0x6c
    d114:	ldrb	r7, [r4, #1]
    d116:	cmp	r7, #0
    d118:	beq.n	d0e4 <_strtod_l+0x6c>
    d11a:	cmp	r7, #48	; 0x30
    d11c:	mov	r4, r2
    d11e:	beq.n	d218 <_strtod_l+0x1a0>
    d120:	movs	r3, #0
    d122:	str	r4, [sp, #32]
    d124:	str	r3, [sp, #40]	; 0x28
    d126:	sub.w	r3, r7, #48	; 0x30
    d12a:	cmp	r3, #9
    d12c:	bhi.w	d93e <_strtod_l+0x8c6>
    d130:	mov.w	r8, #0
    d134:	mov	r0, r4
    d136:	mov	r5, r8
    d138:	mov	r4, r8
    d13a:	cmp	r4, #8
    d13c:	it	gt
    d13e:	addgt.w	r8, r8, r8, lsl #2
    d142:	add.w	r3, r5, r5, lsl #2
    d146:	add.w	r0, r0, #1
    d14a:	add.w	r3, r7, r3, lsl #1
    d14e:	str	r0, [sp, #108]	; 0x6c
    d150:	itt	gt
    d152:	addgt.w	r7, r7, r8, lsl #1
    d156:	subgt.w	r8, r7, #48	; 0x30
    d15a:	ldrb	r7, [r0, #0]
    d15c:	it	le
    d15e:	suble.w	r5, r3, #48	; 0x30
    d162:	sub.w	r3, r7, #48	; 0x30
    d166:	cmp	r3, #9
    d168:	add.w	r4, r4, #1
    d16c:	bls.n	d13a <_strtod_l+0xc2>
    d16e:	ldr.w	r1, [sl]
    d172:	mov	r2, r9
    d174:	bl	cf9c <strncmp>
    d178:	cbz	r0, d1bc <_strtod_l+0x144>
    d17a:	movs	r0, #0
    d17c:	mov	r3, r7
    d17e:	mov	r9, r0
    d180:	mov	r7, r0
    d182:	mov	sl, r4
    d184:	cmp	r3, #101	; 0x65
    d186:	beq.w	d2ee <_strtod_l+0x276>
    d18a:	cmp	r3, #69	; 0x45
    d18c:	beq.w	d2ee <_strtod_l+0x276>
    d190:	movs	r2, #0
    d192:	cmp	r4, #0
    d194:	bne.n	d23c <_strtod_l+0x1c4>
    d196:	cbnz	r0, d1a0 <_strtod_l+0x128>
    d198:	ldr	r2, [sp, #40]	; 0x28
    d19a:	cmp	r2, #0
    d19c:	beq.w	d742 <_strtod_l+0x6ca>
    d1a0:	mov.w	r8, #0
    d1a4:	mov.w	r9, #0
    d1a8:	ldr	r3, [sp, #24]
    d1aa:	cmp	r3, #0
    d1ac:	beq.n	d0f8 <_strtod_l+0x80>
    d1ae:	ldr	r6, [sp, #108]	; 0x6c
    d1b0:	b.n	d0f4 <_strtod_l+0x7c>
    d1b2:	movs	r3, #1
    d1b4:	str	r3, [sp, #28]
    d1b6:	b.n	d110 <_strtod_l+0x98>
    d1b8:	str	r2, [sp, #108]	; 0x6c
    d1ba:	b.n	d0a6 <_strtod_l+0x2e>
    d1bc:	ldr	r3, [sp, #108]	; 0x6c
    d1be:	add.w	r2, r3, r9
    d1c2:	str	r2, [sp, #108]	; 0x6c
    d1c4:	ldrb.w	r3, [r3, r9]
    d1c8:	mov	r7, r0
    d1ca:	mov	sl, r4
    d1cc:	sub.w	r2, r3, #48	; 0x30
    d1d0:	cmp	r2, #9
    d1d2:	bhi.w	d6c8 <_strtod_l+0x650>
    d1d6:	adds	r1, r0, #1
    d1d8:	mov	r3, r2
    d1da:	cmp	r2, #0
    d1dc:	beq.w	df1e <_strtod_l+0xea6>
    d1e0:	cmp	r1, #1
    d1e2:	add	r7, r1
    d1e4:	it	ne
    d1e6:	addne	r0, r0, r4
    d1e8:	bne.n	d1f6 <_strtod_l+0x17e>
    d1ea:	b.w	df16 <_strtod_l+0xe9e>
    d1ee:	lsls	r5, r1, #1
    d1f0:	cmp	r4, r0
    d1f2:	beq.w	db6c <_strtod_l+0xaf4>
    d1f6:	adds	r4, #1
    d1f8:	subs	r1, r4, #1
    d1fa:	cmp	r1, #8
    d1fc:	add.w	r1, r5, r5, lsl #2
    d200:	ble.n	d1ee <_strtod_l+0x176>
    d202:	cmp	r4, #16
    d204:	itt	le
    d206:	addle.w	r8, r8, r8, lsl #2
    d20a:	movle.w	r8, r8, lsl #1
    d20e:	b.n	d1f0 <_strtod_l+0x178>
    d210:	movs	r3, #0
    d212:	cmp	r7, #48	; 0x30
    d214:	str	r3, [sp, #28]
    d216:	bne.n	d120 <_strtod_l+0xa8>
    d218:	ldrb	r3, [r4, #1]
    d21a:	cmp	r3, #88	; 0x58
    d21c:	beq.w	d906 <_strtod_l+0x88e>
    d220:	cmp	r3, #120	; 0x78
    d222:	beq.w	d906 <_strtod_l+0x88e>
    d226:	adds	r4, #1
    d228:	str	r4, [sp, #108]	; 0x6c
    d22a:	ldrb	r7, [r4, #0]
    d22c:	cmp	r7, #48	; 0x30
    d22e:	beq.n	d226 <_strtod_l+0x1ae>
    d230:	cmp	r7, #0
    d232:	beq.n	d1a0 <_strtod_l+0x128>
    d234:	movs	r3, #1
    d236:	str	r4, [sp, #32]
    d238:	str	r3, [sp, #40]	; 0x28
    d23a:	b.n	d126 <_strtod_l+0xae>
    d23c:	cmp	r4, #16
    d23e:	sub.w	r3, r2, r7
    d242:	mov	r0, r5
    d244:	mov	r9, r4
    d246:	str	r3, [sp, #44]	; 0x2c
    d248:	it	ge
    d24a:	movge.w	r9, #16
    d24e:	bl	b1a8 <__aeabi_ui2d>
    d252:	cmp.w	sl, #0
    d256:	it	eq
    d258:	moveq	sl, r4
    d25a:	cmp.w	r9, #9
    d25e:	strd	r0, r1, [sp, #16]
    d262:	ble.n	d28c <_strtod_l+0x214>
    d264:	ldr	r3, [pc, #292]	; (d38c <_strtod_l+0x314>)
    d266:	add.w	r3, r3, r9, lsl #3
    d26a:	ldrd	r2, r3, [r3, #-72]	; 0x48
    d26e:	bl	b294 <__aeabi_dmul>
    d272:	mov	r6, r0
    d274:	mov	r0, r8
    d276:	mov	r7, r1
    d278:	bl	b1a8 <__aeabi_ui2d>
    d27c:	mov	r2, r0
    d27e:	mov	r3, r1
    d280:	mov	r0, r6
    d282:	mov	r1, r7
    d284:	bl	af30 <__adddf3>
    d288:	strd	r0, r1, [sp, #16]
    d28c:	cmp	r4, #15
    d28e:	bgt.w	d39c <_strtod_l+0x324>
    d292:	ldr	r3, [sp, #44]	; 0x2c
    d294:	cmp	r3, #0
    d296:	beq.n	d2e8 <_strtod_l+0x270>
    d298:	ble.w	dcd4 <_strtod_l+0xc5c>
    d29c:	ldr	r3, [sp, #44]	; 0x2c
    d29e:	cmp	r3, #22
    d2a0:	bgt.w	dba0 <_strtod_l+0xb28>
    d2a4:	ldr	r7, [pc, #228]	; (d38c <_strtod_l+0x314>)
    d2a6:	add.w	r7, r7, r3, lsl #3
    d2aa:	ldrd	r0, r1, [r7]
    d2ae:	ldrd	r2, r3, [sp, #16]
    d2b2:	bl	b294 <__aeabi_dmul>
    d2b6:	mov	r8, r0
    d2b8:	mov	r9, r1
    d2ba:	b.n	d1a8 <_strtod_l+0x130>
    d2bc:	add	r0, sp, #108	; 0x6c
    d2be:	ldr	r1, [pc, #208]	; (d390 <_strtod_l+0x318>)
    d2c0:	bl	11f58 <__match>
    d2c4:	cmp	r0, #0
    d2c6:	beq.w	d0e4 <_strtod_l+0x6c>
    d2ca:	ldr	r3, [sp, #108]	; 0x6c
    d2cc:	ldr	r1, [pc, #196]	; (d394 <_strtod_l+0x31c>)
    d2ce:	subs	r3, #1
    d2d0:	add	r0, sp, #108	; 0x6c
    d2d2:	str	r3, [sp, #108]	; 0x6c
    d2d4:	bl	11f58 <__match>
    d2d8:	cbnz	r0, d2e0 <_strtod_l+0x268>
    d2da:	ldr	r3, [sp, #108]	; 0x6c
    d2dc:	adds	r3, #1
    d2de:	str	r3, [sp, #108]	; 0x6c
    d2e0:	ldr	r3, [pc, #180]	; (d398 <_strtod_l+0x320>)
    d2e2:	str	r3, [sp, #20]
    d2e4:	movs	r3, #0
    d2e6:	str	r3, [sp, #16]
    d2e8:	ldrd	r8, r9, [sp, #16]
    d2ec:	b.n	d1a8 <_strtod_l+0x130>
    d2ee:	cmp	r4, #0
    d2f0:	beq.w	d688 <_strtod_l+0x610>
    d2f4:	ldr	r6, [sp, #108]	; 0x6c
    d2f6:	adds	r3, r6, #1
    d2f8:	str	r3, [sp, #108]	; 0x6c
    d2fa:	ldrb	r3, [r6, #1]
    d2fc:	cmp	r3, #43	; 0x2b
    d2fe:	beq.w	d8bc <_strtod_l+0x844>
    d302:	cmp	r3, #45	; 0x2d
    d304:	beq.w	d732 <_strtod_l+0x6ba>
    d308:	mov.w	ip, #0
    d30c:	sub.w	r2, r3, #48	; 0x30
    d310:	cmp	r2, #9
    d312:	bhi.w	d8b6 <_strtod_l+0x83e>
    d316:	cmp	r3, #48	; 0x30
    d318:	bne.n	d326 <_strtod_l+0x2ae>
    d31a:	ldr	r2, [sp, #108]	; 0x6c
    d31c:	adds	r2, #1
    d31e:	str	r2, [sp, #108]	; 0x6c
    d320:	ldrb	r3, [r2, #0]
    d322:	cmp	r3, #48	; 0x30
    d324:	beq.n	d31c <_strtod_l+0x2a4>
    d326:	sub.w	r2, r3, #49	; 0x31
    d32a:	cmp	r2, #8
    d32c:	bhi.w	d190 <_strtod_l+0x118>
    d330:	ldr	r2, [sp, #108]	; 0x6c
    d332:	str	r2, [sp, #48]	; 0x30
    d334:	adds	r1, r2, #1
    d336:	subs	r3, #48	; 0x30
    d338:	str	r1, [sp, #108]	; 0x6c
    d33a:	str	r3, [sp, #44]	; 0x2c
    d33c:	ldrb	r3, [r2, #1]
    d33e:	sub.w	lr, r3, #48	; 0x30
    d342:	cmp.w	lr, #9
    d346:	bhi.n	d368 <_strtod_l+0x2f0>
    d348:	ldr	r2, [sp, #44]	; 0x2c
    d34a:	adds	r1, #1
    d34c:	str	r1, [sp, #108]	; 0x6c
    d34e:	add.w	r2, r2, r2, lsl #2
    d352:	add.w	r2, r3, r2, lsl #1
    d356:	ldrb	r3, [r1, #0]
    d358:	sub.w	lr, r3, #48	; 0x30
    d35c:	cmp.w	lr, #9
    d360:	sub.w	r2, r2, #48	; 0x30
    d364:	bls.n	d34a <_strtod_l+0x2d2>
    d366:	str	r2, [sp, #44]	; 0x2c
    d368:	ldr	r2, [sp, #48]	; 0x30
    d36a:	subs	r1, r1, r2
    d36c:	cmp	r1, #8
    d36e:	bgt.w	db8e <_strtod_l+0xb16>
    d372:	ldr	r2, [sp, #44]	; 0x2c
    d374:	movw	r1, #19999	; 0x4e1f
    d378:	cmp	r2, r1
    d37a:	it	ge
    d37c:	movge	r2, r1
    d37e:	cmp.w	ip, #0
    d382:	beq.w	d192 <_strtod_l+0x11a>
    d386:	negs	r2, r2
    d388:	b.n	d192 <_strtod_l+0x11a>
    d38a:	nop
    d38c:	.word	0x00014198
    d390:	.word	0x00013ea4
    d394:	.word	0x00013ea8
    d398:	.word	0x7ff00000
    d39c:	ldr	r3, [sp, #44]	; 0x2c
    d39e:	rsb	r9, r9, r4
    d3a2:	add	r9, r3
    d3a4:	cmp.w	r9, #0
    d3a8:	ble.w	daba <_strtod_l+0xa42>
    d3ac:	ands.w	r1, r9, #15
    d3b0:	beq.n	d3c8 <_strtod_l+0x350>
    d3b2:	ldr	r3, [pc, #756]	; (d6a8 <_strtod_l+0x630>)
    d3b4:	add.w	r1, r3, r1, lsl #3
    d3b8:	ldrd	r0, r1, [r1]
    d3bc:	ldrd	r2, r3, [sp, #16]
    d3c0:	bl	b294 <__aeabi_dmul>
    d3c4:	strd	r0, r1, [sp, #16]
    d3c8:	bics.w	r6, r9, #15
    d3cc:	bne.w	d7f0 <_strtod_l+0x778>
    d3d0:	movs	r3, #0
    d3d2:	str	r3, [sp, #40]	; 0x28
    d3d4:	str	r5, [sp, #0]
    d3d6:	mov	r3, r4
    d3d8:	mov	r2, sl
    d3da:	ldr	r1, [sp, #32]
    d3dc:	mov	r0, fp
    d3de:	bl	12280 <__s2b>
    d3e2:	str	r0, [sp, #72]	; 0x48
    d3e4:	cmp	r0, #0
    d3e6:	beq.w	da36 <_strtod_l+0x9be>
    d3ea:	ldr	r2, [sp, #44]	; 0x2c
    d3ec:	movs	r7, #0
    d3ee:	cmp	r2, #0
    d3f0:	rsb	r3, r2, #0
    d3f4:	it	ge
    d3f6:	movge	r3, r7
    d3f8:	str	r3, [sp, #48]	; 0x30
    d3fa:	bic.w	r3, r2, r2, asr #31
    d3fe:	str	r3, [sp, #44]	; 0x2c
    d400:	mov	sl, r7
    d402:	ldr	r4, [sp, #72]	; 0x48
    d404:	mov	r0, fp
    d406:	ldr	r1, [r4, #4]
    d408:	bl	121a0 <_Balloc>
    d40c:	mov	r6, r0
    d40e:	cmp	r0, #0
    d410:	beq.w	d8c8 <_strtod_l+0x850>
    d414:	ldr	r2, [r4, #16]
    d416:	vldr	d7, [sp, #16]
    d41a:	adds	r2, #2
    d41c:	lsls	r2, r2, #2
    d41e:	add.w	r1, r4, #12
    d422:	adds	r0, #12
    d424:	vstr	d7, [sp, #32]
    d428:	bl	87fc <memcpy>
    d42c:	vldr	d0, [sp, #32]
    d430:	add	r2, sp, #120	; 0x78
    d432:	add	r1, sp, #116	; 0x74
    d434:	mov	r0, fp
    d436:	bl	128c4 <__d2b>
    d43a:	str	r0, [sp, #112]	; 0x70
    d43c:	cmp	r0, #0
    d43e:	beq.w	d8ca <_strtod_l+0x852>
    d442:	movs	r1, #1
    d444:	mov	r0, fp
    d446:	bl	123b4 <__i2b>
    d44a:	mov	sl, r0
    d44c:	cmp	r0, #0
    d44e:	beq.w	d8c8 <_strtod_l+0x850>
    d452:	ldr	r2, [sp, #116]	; 0x74
    d454:	cmp	r2, #0
    d456:	blt.w	d6c0 <_strtod_l+0x648>
    d45a:	ldr	r3, [sp, #48]	; 0x30
    d45c:	ldr	r4, [sp, #44]	; 0x2c
    d45e:	adds	r5, r3, r2
    d460:	ldr	r0, [sp, #40]	; 0x28
    d462:	ldr	r3, [sp, #120]	; 0x78
    d464:	ldr	r1, [pc, #580]	; (d6ac <_strtod_l+0x634>)
    d466:	subs	r2, r2, r0
    d468:	add	r2, r3
    d46a:	subs	r2, #1
    d46c:	cmp	r2, r1
    d46e:	rsb	r3, r3, #54	; 0x36
    d472:	bge.w	d652 <_strtod_l+0x5da>
    d476:	subs	r1, r1, r2
    d478:	cmp	r1, #31
    d47a:	sub.w	r3, r3, r1
    d47e:	bgt.w	d6ce <_strtod_l+0x656>
    d482:	movs	r2, #1
    d484:	lsls	r2, r1
    d486:	str	r2, [sp, #56]	; 0x38
    d488:	movs	r2, #0
    d48a:	str	r2, [sp, #76]	; 0x4c
    d48c:	add.w	r9, r5, r3
    d490:	add	r4, r3
    d492:	ldr	r3, [sp, #40]	; 0x28
    d494:	cmp	r5, r9
    d496:	mov	r2, r5
    d498:	add	r4, r3
    d49a:	it	ge
    d49c:	movge	r2, r9
    d49e:	cmp	r2, r4
    d4a0:	it	ge
    d4a2:	movge	r2, r4
    d4a4:	cmp	r2, #0
    d4a6:	ble.n	d4b0 <_strtod_l+0x438>
    d4a8:	rsb	r9, r2, r9
    d4ac:	subs	r4, r4, r2
    d4ae:	subs	r5, r5, r2
    d4b0:	ldr	r3, [sp, #48]	; 0x30
    d4b2:	cbz	r3, d4e4 <_strtod_l+0x46c>
    d4b4:	mov	r1, sl
    d4b6:	mov	r2, r3
    d4b8:	mov	r0, fp
    d4ba:	bl	124f8 <__pow5mult>
    d4be:	mov	sl, r0
    d4c0:	cmp	r0, #0
    d4c2:	beq.w	d8c8 <_strtod_l+0x850>
    d4c6:	mov	r1, r0
    d4c8:	ldr	r2, [sp, #112]	; 0x70
    d4ca:	mov	r0, fp
    d4cc:	bl	123c8 <__multiply>
    d4d0:	cmp	r0, #0
    d4d2:	beq.w	d8c8 <_strtod_l+0x850>
    d4d6:	str	r0, [sp, #52]	; 0x34
    d4d8:	ldr	r1, [sp, #112]	; 0x70
    d4da:	mov	r0, fp
    d4dc:	bl	121ec <_Bfree>
    d4e0:	ldr	r2, [sp, #52]	; 0x34
    d4e2:	str	r2, [sp, #112]	; 0x70
    d4e4:	cmp.w	r9, #0
    d4e8:	ble.n	d4fc <_strtod_l+0x484>
    d4ea:	mov	r2, r9
    d4ec:	ldr	r1, [sp, #112]	; 0x70
    d4ee:	mov	r0, fp
    d4f0:	bl	12598 <__lshift>
    d4f4:	str	r0, [sp, #112]	; 0x70
    d4f6:	cmp	r0, #0
    d4f8:	beq.w	d8ca <_strtod_l+0x852>
    d4fc:	ldr	r3, [sp, #44]	; 0x2c
    d4fe:	cbz	r3, d512 <_strtod_l+0x49a>
    d500:	mov	r1, r6
    d502:	ldr	r2, [sp, #44]	; 0x2c
    d504:	mov	r0, fp
    d506:	bl	124f8 <__pow5mult>
    d50a:	mov	r6, r0
    d50c:	cmp	r0, #0
    d50e:	beq.w	d8c8 <_strtod_l+0x850>
    d512:	cmp	r4, #0
    d514:	ble.n	d528 <_strtod_l+0x4b0>
    d516:	mov	r1, r6
    d518:	mov	r2, r4
    d51a:	mov	r0, fp
    d51c:	bl	12598 <__lshift>
    d520:	mov	r6, r0
    d522:	cmp	r0, #0
    d524:	beq.w	d8c8 <_strtod_l+0x850>
    d528:	cmp	r5, #0
    d52a:	ble.n	d53e <_strtod_l+0x4c6>
    d52c:	mov	r1, sl
    d52e:	mov	r2, r5
    d530:	mov	r0, fp
    d532:	bl	12598 <__lshift>
    d536:	mov	sl, r0
    d538:	cmp	r0, #0
    d53a:	beq.w	d8c8 <_strtod_l+0x850>
    d53e:	mov	r2, r6
    d540:	ldr	r1, [sp, #112]	; 0x70
    d542:	mov	r0, fp
    d544:	bl	1268c <__mdiff>
    d548:	mov	r7, r0
    d54a:	cmp	r0, #0
    d54c:	beq.w	d8c8 <_strtod_l+0x850>
    d550:	movs	r3, #0
    d552:	ldr	r2, [r0, #12]
    d554:	str	r3, [r0, #12]
    d556:	mov	r1, sl
    d558:	str	r2, [sp, #52]	; 0x34
    d55a:	bl	12648 <__mcmp>
    d55e:	cmp	r0, #0
    d560:	blt.w	dd7e <_strtod_l+0xd06>
    d564:	beq.w	dcf8 <_strtod_l+0xc80>
    d568:	mov	r1, sl
    d56a:	mov	r0, r7
    d56c:	bl	12980 <__ratio>
    d570:	vmov	r4, r5, d0
    d574:	movs	r2, #0
    d576:	mov.w	r3, #1073741824	; 0x40000000
    d57a:	vmov	r0, s0
    d57e:	mov	r1, r5
    d580:	bl	b78c <__aeabi_dcmple>
    d584:	cmp	r0, #0
    d586:	beq.n	d65c <_strtod_l+0x5e4>
    d588:	ldr	r3, [sp, #52]	; 0x34
    d58a:	cmp	r3, #0
    d58c:	beq.w	d6de <_strtod_l+0x666>
    d590:	vldr	d7, [pc, #260]	; d698 <_strtod_l+0x620>
    d594:	ldr	r3, [sp, #20]
    d596:	ldr	r5, [pc, #280]	; (d6b0 <_strtod_l+0x638>)
    d598:	vstr	d7, [sp, #56]	; 0x38
    d59c:	movs	r4, #0
    d59e:	mov	r8, r3
    d5a0:	ldr.w	r9, [pc, #276]	; d6b8 <_strtod_l+0x640>
    d5a4:	ldr	r3, [pc, #268]	; (d6b4 <_strtod_l+0x63c>)
    d5a6:	and.w	r9, r8, r9
    d5aa:	cmp	r9, r3
    d5ac:	beq.w	d9dc <_strtod_l+0x964>
    d5b0:	ldr	r3, [sp, #40]	; 0x28
    d5b2:	cbz	r3, d600 <_strtod_l+0x588>
    d5b4:	cmp.w	r9, #111149056	; 0x6a00000
    d5b8:	bhi.n	d600 <_strtod_l+0x588>
    d5ba:	add	r3, pc, #228	; (adr r3, d6a0 <_strtod_l+0x628>)
    d5bc:	ldrd	r2, r3, [r3]
    d5c0:	ldrd	r0, r1, [sp, #56]	; 0x38
    d5c4:	bl	b78c <__aeabi_dcmple>
    d5c8:	cbz	r0, d5f8 <_strtod_l+0x580>
    d5ca:	ldrd	r0, r1, [sp, #56]	; 0x38
    d5ce:	bl	b844 <__aeabi_d2uiz>
    d5d2:	cmp	r0, #0
    d5d4:	beq.w	dc58 <_strtod_l+0xbe0>
    d5d8:	bl	b1a8 <__aeabi_ui2d>
    d5dc:	strd	r0, r1, [sp, #56]	; 0x38
    d5e0:	ldr	r3, [sp, #52]	; 0x34
    d5e2:	cmp	r3, #0
    d5e4:	bne.w	dc4e <_strtod_l+0xbd6>
    d5e8:	ldrd	r1, r2, [sp, #56]	; 0x38
    d5ec:	add.w	r3, r2, #2147483648	; 0x80000000
    d5f0:	str	r1, [sp, #80]	; 0x50
    d5f2:	str	r3, [sp, #84]	; 0x54
    d5f4:	ldrd	r4, r5, [sp, #80]	; 0x50
    d5f8:	add.w	r3, r5, #112197632	; 0x6b00000
    d5fc:	rsb	r5, r9, r3
    d600:	vldr	d0, [sp, #32]
    d604:	bl	127a0 <__ulp>
    d608:	mov	r0, r4
    d60a:	vmov	r2, r3, d0
    d60e:	mov	r1, r5
    d610:	bl	b294 <__aeabi_dmul>
    d614:	ldrd	r2, r3, [sp, #32]
    d618:	bl	af30 <__adddf3>
    d61c:	strd	r0, r1, [sp, #16]
    d620:	mov	r4, r1
    d622:	ldr	r3, [sp, #40]	; 0x28
    d624:	cbnz	r3, d630 <_strtod_l+0x5b8>
    d626:	ldr	r3, [pc, #144]	; (d6b8 <_strtod_l+0x640>)
    d628:	ands	r3, r4
    d62a:	cmp	r9, r3
    d62c:	beq.w	da4c <_strtod_l+0x9d4>
    d630:	ldr	r1, [sp, #112]	; 0x70
    d632:	mov	r0, fp
    d634:	bl	121ec <_Bfree>
    d638:	mov	r1, r6
    d63a:	mov	r0, fp
    d63c:	bl	121ec <_Bfree>
    d640:	mov	r1, sl
    d642:	mov	r0, fp
    d644:	bl	121ec <_Bfree>
    d648:	mov	r1, r7
    d64a:	mov	r0, fp
    d64c:	bl	121ec <_Bfree>
    d650:	b.n	d402 <_strtod_l+0x38a>
    d652:	movs	r2, #0
    d654:	str	r2, [sp, #76]	; 0x4c
    d656:	movs	r2, #1
    d658:	str	r2, [sp, #56]	; 0x38
    d65a:	b.n	d48c <_strtod_l+0x414>
    d65c:	ldr	r3, [pc, #92]	; (d6bc <_strtod_l+0x644>)
    d65e:	mov	r0, r4
    d660:	mov	r1, r5
    d662:	movs	r2, #0
    d664:	bl	b294 <__aeabi_dmul>
    d668:	ldr	r3, [sp, #52]	; 0x34
    d66a:	strd	r0, r1, [sp, #56]	; 0x38
    d66e:	cmp	r3, #0
    d670:	bne.n	d728 <_strtod_l+0x6b0>
    d672:	add.w	r3, r1, #2147483648	; 0x80000000
    d676:	str	r0, [sp, #64]	; 0x40
    d678:	str	r3, [sp, #68]	; 0x44
    d67a:	ldr	r3, [sp, #20]
    d67c:	ldrd	r4, r5, [sp, #64]	; 0x40
    d680:	mov	r8, r3
    d682:	b.n	d5a0 <_strtod_l+0x528>
    d684:	mov.w	r9, #1
    d688:	cmp	r0, #0
    d68a:	bne.n	d73e <_strtod_l+0x6c6>
    d68c:	ldr	r3, [sp, #40]	; 0x28
    d68e:	cmp	r3, #0
    d690:	beq.w	d0e4 <_strtod_l+0x6c>
    d694:	mov	r4, r0
    d696:	b.n	d2f4 <_strtod_l+0x27c>
    d698:	.word	0x00000000
    d69c:	.word	0x3ff00000
    d6a0:	.word	0xffc00000
    d6a4:	.word	0x41dfffff
    d6a8:	.word	0x00014198
    d6ac:	.word	0xfffffc02
    d6b0:	.word	0x3ff00000
    d6b4:	.word	0x7fe00000
    d6b8:	.word	0x7ff00000
    d6bc:	.word	0x3fe00000
    d6c0:	ldr	r3, [sp, #44]	; 0x2c
    d6c2:	ldr	r5, [sp, #48]	; 0x30
    d6c4:	subs	r4, r3, r2
    d6c6:	b.n	d460 <_strtod_l+0x3e8>
    d6c8:	mov.w	r9, #1
    d6cc:	b.n	d184 <_strtod_l+0x10c>
    d6ce:	ldr	r1, [pc, #736]	; (d9b0 <_strtod_l+0x938>)
    d6d0:	subs	r1, r1, r2
    d6d2:	movs	r2, #1
    d6d4:	lsl.w	r1, r2, r1
    d6d8:	str	r1, [sp, #76]	; 0x4c
    d6da:	str	r2, [sp, #56]	; 0x38
    d6dc:	b.n	d48c <_strtod_l+0x414>
    d6de:	ldrd	r1, r2, [sp, #16]
    d6e2:	cmp	r1, #0
    d6e4:	bne.w	d87a <_strtod_l+0x802>
    d6e8:	ubfx	r3, r2, #0, #20
    d6ec:	mov	r8, r2
    d6ee:	cmp	r3, #0
    d6f0:	bne.w	d886 <_strtod_l+0x80e>
    d6f4:	movs	r2, #0
    d6f6:	ldr	r3, [pc, #700]	; (d9b4 <_strtod_l+0x93c>)
    d6f8:	mov	r0, r4
    d6fa:	mov	r1, r5
    d6fc:	bl	b778 <__aeabi_dcmplt>
    d700:	cmp	r0, #0
    d702:	bne.w	de02 <_strtod_l+0xd8a>
    d706:	movs	r2, #0
    d708:	ldr	r3, [pc, #684]	; (d9b8 <_strtod_l+0x940>)
    d70a:	mov	r0, r4
    d70c:	mov	r1, r5
    d70e:	bl	b294 <__aeabi_dmul>
    d712:	mov	r2, r1
    d714:	mov	r1, r0
    d716:	strd	r1, r2, [sp, #56]	; 0x38
    d71a:	add.w	r3, r2, #2147483648	; 0x80000000
    d71e:	str	r0, [sp, #96]	; 0x60
    d720:	str	r3, [sp, #100]	; 0x64
    d722:	ldrd	r4, r5, [sp, #96]	; 0x60
    d726:	b.n	d5a0 <_strtod_l+0x528>
    d728:	vldr	d7, [sp, #56]	; 0x38
    d72c:	vstr	d7, [sp, #64]	; 0x40
    d730:	b.n	d67a <_strtod_l+0x602>
    d732:	mov.w	ip, #1
    d736:	adds	r3, r6, #2
    d738:	str	r3, [sp, #108]	; 0x6c
    d73a:	ldrb	r3, [r6, #2]
    d73c:	b.n	d30c <_strtod_l+0x294>
    d73e:	movs	r4, #0
    d740:	b.n	d2f4 <_strtod_l+0x27c>
    d742:	cmp.w	r9, #0
    d746:	bne.w	d0e4 <_strtod_l+0x6c>
    d74a:	subs	r3, #73	; 0x49
    d74c:	cmp	r3, #37	; 0x25
    d74e:	bhi.w	d0e4 <_strtod_l+0x6c>
    d752:	add	r2, pc, #4	; (adr r2, d758 <_strtod_l+0x6e0>)
    d754:	ldr.w	pc, [r2, r3, lsl #2]
    d758:	.word	0x0000d2bd
    d75c:	.word	0x0000d0e5
    d760:	.word	0x0000d0e5
    d764:	.word	0x0000d0e5
    d768:	.word	0x0000d0e5
    d76c:	.word	0x0000d895
    d770:	.word	0x0000d0e5
    d774:	.word	0x0000d0e5
    d778:	.word	0x0000d0e5
    d77c:	.word	0x0000d0e5
    d780:	.word	0x0000d0e5
    d784:	.word	0x0000d0e5
    d788:	.word	0x0000d0e5
    d78c:	.word	0x0000d0e5
    d790:	.word	0x0000d0e5
    d794:	.word	0x0000d0e5
    d798:	.word	0x0000d0e5
    d79c:	.word	0x0000d0e5
    d7a0:	.word	0x0000d0e5
    d7a4:	.word	0x0000d0e5
    d7a8:	.word	0x0000d0e5
    d7ac:	.word	0x0000d0e5
    d7b0:	.word	0x0000d0e5
    d7b4:	.word	0x0000d0e5
    d7b8:	.word	0x0000d0e5
    d7bc:	.word	0x0000d0e5
    d7c0:	.word	0x0000d0e5
    d7c4:	.word	0x0000d0e5
    d7c8:	.word	0x0000d0e5
    d7cc:	.word	0x0000d0e5
    d7d0:	.word	0x0000d0e5
    d7d4:	.word	0x0000d0e5
    d7d8:	.word	0x0000d2bd
    d7dc:	.word	0x0000d0e5
    d7e0:	.word	0x0000d0e5
    d7e4:	.word	0x0000d0e5
    d7e8:	.word	0x0000d0e5
    d7ec:	.word	0x0000d895
    d7f0:	cmp.w	r6, #308	; 0x134
    d7f4:	bgt.w	da36 <_strtod_l+0x9be>
    d7f8:	asrs	r6, r6, #4
    d7fa:	cmp	r6, #1
    d7fc:	ldr.w	r9, [pc, #472]	; d9d8 <_strtod_l+0x960>
    d800:	ble.w	de36 <_strtod_l+0xdbe>
    d804:	ldrd	r0, r1, [sp, #16]
    d808:	movs	r3, #0
    d80a:	mov	r7, r9
    d80c:	mov	r8, r3
    d80e:	tst.w	r6, #1
    d812:	add.w	r8, r8, #1
    d816:	mov.w	r6, r6, asr #1
    d81a:	beq.n	d826 <_strtod_l+0x7ae>
    d81c:	ldrd	r2, r3, [r7]
    d820:	bl	b294 <__aeabi_dmul>
    d824:	movs	r3, #1
    d826:	cmp	r6, #1
    d828:	add.w	r7, r7, #8
    d82c:	bne.n	d80e <_strtod_l+0x796>
    d82e:	cmp	r3, #0
    d830:	bne.w	defa <_strtod_l+0xe82>
    d834:	ldr	r3, [sp, #20]
    d836:	sub.w	r3, r3, #55574528	; 0x3500000
    d83a:	str	r3, [sp, #20]
    d83c:	add.w	r8, r9, r8, lsl #3
    d840:	ldrd	r2, r3, [sp, #16]
    d844:	ldrd	r0, r1, [r8]
    d848:	bl	b294 <__aeabi_dmul>
    d84c:	bic.w	r3, r1, #2147483648	; 0x80000000
    d850:	lsrs	r3, r3, #20
    d852:	ldr	r2, [pc, #360]	; (d9bc <_strtod_l+0x944>)
    d854:	lsls	r3, r3, #20
    d856:	cmp	r3, r2
    d858:	strd	r0, r1, [sp, #16]
    d85c:	bhi.w	da36 <_strtod_l+0x9be>
    d860:	sub.w	r2, r2, #1048576	; 0x100000
    d864:	cmp	r3, r2
    d866:	bls.w	ddf8 <_strtod_l+0xd80>
    d86a:	ldr	r3, [pc, #340]	; (d9c0 <_strtod_l+0x948>)
    d86c:	str	r3, [sp, #20]
    d86e:	movs	r3, #0
    d870:	str	r3, [sp, #40]	; 0x28
    d872:	mov.w	r3, #4294967295
    d876:	str	r3, [sp, #16]
    d878:	b.n	d3d4 <_strtod_l+0x35c>
    d87a:	ldrd	r1, r2, [sp, #16]
    d87e:	cmp	r1, #1
    d880:	beq.w	dc62 <_strtod_l+0xbea>
    d884:	mov	r8, r2
    d886:	vldr	d7, [pc, #288]	; d9a8 <_strtod_l+0x930>
    d88a:	movs	r4, #0
    d88c:	ldr	r5, [pc, #308]	; (d9c4 <_strtod_l+0x94c>)
    d88e:	vstr	d7, [sp, #56]	; 0x38
    d892:	b.n	d5a0 <_strtod_l+0x528>
    d894:	add	r0, sp, #108	; 0x6c
    d896:	ldr	r1, [pc, #304]	; (d9c8 <_strtod_l+0x950>)
    d898:	bl	11f58 <__match>
    d89c:	cmp	r0, #0
    d89e:	beq.w	d0e4 <_strtod_l+0x6c>
    d8a2:	ldr	r3, [sp, #108]	; 0x6c
    d8a4:	ldrb	r3, [r3, #0]
    d8a6:	cmp	r3, #40	; 0x28
    d8a8:	beq.w	deb0 <_strtod_l+0xe38>
    d8ac:	ldr	r3, [pc, #284]	; (d9cc <_strtod_l+0x954>)
    d8ae:	str	r3, [sp, #20]
    d8b0:	movs	r3, #0
    d8b2:	str	r3, [sp, #16]
    d8b4:	b.n	d2e8 <_strtod_l+0x270>
    d8b6:	str	r6, [sp, #108]	; 0x6c
    d8b8:	movs	r2, #0
    d8ba:	b.n	d192 <_strtod_l+0x11a>
    d8bc:	mov.w	ip, #0
    d8c0:	b.n	d736 <_strtod_l+0x6be>
    d8c2:	adds	r3, #1
    d8c4:	bne.w	de96 <_strtod_l+0xe1e>
    d8c8:	ldr	r0, [sp, #112]	; 0x70
    d8ca:	ldr	r3, [pc, #260]	; (d9d0 <_strtod_l+0x958>)
    d8cc:	str	r3, [sp, #20]
    d8ce:	movs	r2, #0
    d8d0:	str	r2, [sp, #16]
    d8d2:	ldrd	r8, r9, [sp, #16]
    d8d6:	movs	r3, #34	; 0x22
    d8d8:	str.w	r3, [fp]
    d8dc:	mov	r1, r0
    d8de:	mov	r0, fp
    d8e0:	bl	121ec <_Bfree>
    d8e4:	mov	r1, r6
    d8e6:	mov	r0, fp
    d8e8:	bl	121ec <_Bfree>
    d8ec:	mov	r1, sl
    d8ee:	mov	r0, fp
    d8f0:	bl	121ec <_Bfree>
    d8f4:	ldr	r1, [sp, #72]	; 0x48
    d8f6:	mov	r0, fp
    d8f8:	bl	121ec <_Bfree>
    d8fc:	mov	r1, r7
    d8fe:	mov	r0, fp
    d900:	bl	121ec <_Bfree>
    d904:	b.n	d1a8 <_strtod_l+0x130>
    d906:	ldr	r2, [sp, #28]
    d908:	str	r5, [sp, #8]
    d90a:	add	r3, sp, #112	; 0x70
    d90c:	str	r2, [sp, #4]
    d90e:	str	r3, [sp, #0]
    d910:	ldr	r2, [pc, #192]	; (d9d4 <_strtod_l+0x95c>)
    d912:	add	r3, sp, #116	; 0x74
    d914:	add	r1, sp, #108	; 0x6c
    d916:	mov	r0, fp
    d918:	bl	11a48 <__gethex>
    d91c:	ands.w	r6, r0, #7
    d920:	mov	r5, r0
    d922:	beq.w	d1a0 <_strtod_l+0x128>
    d926:	cmp	r6, #6
    d928:	bne.w	dbd8 <_strtod_l+0xb60>
    d92c:	adds	r4, #1
    d92e:	movs	r3, #0
    d930:	str	r4, [sp, #108]	; 0x6c
    d932:	mov.w	r8, #0
    d936:	mov.w	r9, #0
    d93a:	str	r3, [sp, #28]
    d93c:	b.n	d1a8 <_strtod_l+0x130>
    d93e:	ldr.w	r1, [sl]
    d942:	mov	r0, r4
    d944:	mov	r2, r9
    d946:	bl	cf9c <strncmp>
    d94a:	cbz	r0, d960 <_strtod_l+0x8e8>
    d94c:	mov.w	sl, #0
    d950:	mov	r3, r7
    d952:	mov	r8, sl
    d954:	mov	r5, sl
    d956:	mov	r0, sl
    d958:	mov	r7, sl
    d95a:	mov	r4, sl
    d95c:	mov	r9, sl
    d95e:	b.n	d184 <_strtod_l+0x10c>
    d960:	ldr	r3, [sp, #108]	; 0x6c
    d962:	add.w	r2, r3, r9
    d966:	str	r2, [sp, #108]	; 0x6c
    d968:	ldrb.w	r3, [r3, r9]
    d96c:	cmp	r3, #48	; 0x30
    d96e:	bne.n	d97e <_strtod_l+0x906>
    d970:	adds	r2, #1
    d972:	str	r2, [sp, #108]	; 0x6c
    d974:	ldrb	r3, [r2, #0]
    d976:	cmp	r3, #48	; 0x30
    d978:	add.w	r0, r0, #1
    d97c:	beq.n	d970 <_strtod_l+0x8f8>
    d97e:	sub.w	r2, r3, #49	; 0x31
    d982:	cmp	r2, #8
    d984:	bls.w	dc80 <_strtod_l+0xc08>
    d988:	mov.w	sl, #0
    d98c:	cmp	r3, #101	; 0x65
    d98e:	mov	r8, sl
    d990:	mov	r5, sl
    d992:	mov	r7, sl
    d994:	beq.w	d684 <_strtod_l+0x60c>
    d998:	mov	r4, sl
    d99a:	mov.w	r9, #1
    d99e:	b.w	d18a <_strtod_l+0x112>
    d9a2:	nop
    d9a4:	nop.w
    d9a8:	.word	0x00000000
    d9ac:	.word	0x3ff00000
    d9b0:	.word	0xfffffbe2
    d9b4:	.word	0x3ff00000
    d9b8:	.word	0x3fe00000
    d9bc:	.word	0x7ca00000
    d9c0:	.word	0x7fefffff
    d9c4:	.word	0xbff00000
    d9c8:	.word	0x00013eb0
    d9cc:	.word	0xfff80000
    d9d0:	.word	0x7ff00000
    d9d4:	.word	0x00013e90
    d9d8:	.word	0x00014260
    d9dc:	sub.w	r3, r8, #55574528	; 0x3500000
    d9e0:	str	r3, [sp, #20]
    d9e2:	vldr	d7, [sp, #16]
    d9e6:	vmov.f32	s0, s14
    d9ea:	vmov.f32	s1, s15
    d9ee:	bl	127a0 <__ulp>
    d9f2:	mov	r0, r4
    d9f4:	vmov	r2, r3, d0
    d9f8:	mov	r1, r5
    d9fa:	bl	b294 <__aeabi_dmul>
    d9fe:	ldrd	r2, r3, [sp, #16]
    da02:	bl	af30 <__adddf3>
    da06:	bic.w	r3, r1, #2147483648	; 0x80000000
    da0a:	strd	r0, r1, [sp, #16]
    da0e:	lsrs	r3, r3, #20
    da10:	ldr	r2, [pc, #684]	; (dcc0 <_strtod_l+0xc48>)
    da12:	ldrd	r0, r1, [sp, #32]
    da16:	lsls	r3, r3, #20
    da18:	cmp	r3, r2
    da1a:	strd	r0, r1, [sp, #88]	; 0x58
    da1e:	bls.w	db96 <_strtod_l+0xb1e>
    da22:	ldr	r3, [pc, #672]	; (dcc4 <_strtod_l+0xc4c>)
    da24:	cmp	r1, r3
    da26:	beq.w	ddee <_strtod_l+0xd76>
    da2a:	ldr	r3, [pc, #664]	; (dcc4 <_strtod_l+0xc4c>)
    da2c:	str	r3, [sp, #20]
    da2e:	mov.w	r3, #4294967295
    da32:	str	r3, [sp, #16]
    da34:	b.n	d630 <_strtod_l+0x5b8>
    da36:	ldr	r3, [pc, #656]	; (dcc8 <_strtod_l+0xc50>)
    da38:	str	r3, [sp, #20]
    da3a:	movs	r2, #0
    da3c:	movs	r3, #34	; 0x22
    da3e:	str	r2, [sp, #16]
    da40:	ldrd	r8, r9, [sp, #16]
    da44:	str.w	r3, [fp]
    da48:	b.w	d1a8 <_strtod_l+0x130>
    da4c:	ldrd	r8, r9, [sp, #56]	; 0x38
    da50:	mov	r1, r9
    da52:	mov	r0, r8
    da54:	bl	b7f4 <__aeabi_d2iz>
    da58:	bl	b1c8 <__aeabi_i2d>
    da5c:	mov	r3, r1
    da5e:	mov	r2, r0
    da60:	mov	r1, r9
    da62:	mov	r0, r8
    da64:	bl	af2c <__aeabi_dsub>
    da68:	ldr	r3, [sp, #52]	; 0x34
    da6a:	mov	r8, r0
    da6c:	mov	r9, r1
    da6e:	cbnz	r3, da92 <_strtod_l+0xa1a>
    da70:	ldr	r3, [sp, #16]
    da72:	cbnz	r3, da92 <_strtod_l+0xa1a>
    da74:	ubfx	r4, r4, #0, #20
    da78:	cbnz	r4, da92 <_strtod_l+0xa1a>
    da7a:	add	r3, pc, #548	; (adr r3, dca0 <_strtod_l+0xc28>)
    da7c:	ldrd	r2, r3, [r3]
    da80:	bl	b778 <__aeabi_dcmplt>
    da84:	cmp	r0, #0
    da86:	beq.w	d630 <_strtod_l+0x5b8>
    da8a:	ldrd	r8, r9, [sp, #16]
    da8e:	ldr	r0, [sp, #112]	; 0x70
    da90:	b.n	d8dc <_strtod_l+0x864>
    da92:	add	r3, pc, #532	; (adr r3, dca8 <_strtod_l+0xc30>)
    da94:	ldrd	r2, r3, [r3]
    da98:	mov	r0, r8
    da9a:	mov	r1, r9
    da9c:	bl	b778 <__aeabi_dcmplt>
    daa0:	cmp	r0, #0
    daa2:	bne.n	da8a <_strtod_l+0xa12>
    daa4:	mov	r0, r8
    daa6:	mov	r1, r9
    daa8:	add	r3, pc, #516	; (adr r3, dcb0 <_strtod_l+0xc38>)
    daaa:	ldrd	r2, r3, [r3]
    daae:	bl	b7b4 <__aeabi_dcmpgt>
    dab2:	cmp	r0, #0
    dab4:	beq.w	d630 <_strtod_l+0x5b8>
    dab8:	b.n	da8a <_strtod_l+0xa12>
    daba:	beq.w	d3d0 <_strtod_l+0x358>
    dabe:	rsb	r6, r9, #0
    dac2:	ands.w	r2, r6, #15
    dac6:	beq.n	dade <_strtod_l+0xa66>
    dac8:	ldr	r3, [pc, #512]	; (dccc <_strtod_l+0xc54>)
    daca:	add.w	r3, r3, r2, lsl #3
    dace:	ldrd	r0, r1, [sp, #16]
    dad2:	ldrd	r2, r3, [r3]
    dad6:	bl	b4e8 <__aeabi_ddiv>
    dada:	strd	r0, r1, [sp, #16]
    dade:	asrs	r6, r6, #4
    dae0:	beq.w	d3d0 <_strtod_l+0x358>
    dae4:	cmp	r6, #31
    dae6:	bgt.n	db5a <_strtod_l+0xae2>
    dae8:	ands.w	r3, r6, #16
    daec:	beq.w	de60 <_strtod_l+0xde8>
    daf0:	movs	r3, #106	; 0x6a
    daf2:	cmp	r6, #0
    daf4:	str	r3, [sp, #40]	; 0x28
    daf6:	ble.n	db20 <_strtod_l+0xaa8>
    daf8:	ldrd	r0, r1, [sp, #16]
    dafc:	ldr	r7, [pc, #464]	; (dcd0 <_strtod_l+0xc58>)
    dafe:	movs	r3, #0
    db00:	lsls	r2, r6, #31
    db02:	bpl.n	db0e <_strtod_l+0xa96>
    db04:	ldrd	r2, r3, [r7]
    db08:	bl	b294 <__aeabi_dmul>
    db0c:	movs	r3, #1
    db0e:	asrs	r6, r6, #1
    db10:	add.w	r7, r7, #8
    db14:	bne.n	db00 <_strtod_l+0xa88>
    db16:	cmp	r3, #0
    db18:	bne.w	df00 <_strtod_l+0xe88>
    db1c:	ldr	r3, [sp, #40]	; 0x28
    db1e:	cbz	r3, db48 <_strtod_l+0xad0>
    db20:	ldrd	r1, r2, [sp, #16]
    db24:	ubfx	r3, r2, #20, #11
    db28:	rsb	r3, r3, #107	; 0x6b
    db2c:	cmp	r3, #0
    db2e:	mov	r1, r2
    db30:	ble.n	db48 <_strtod_l+0xad0>
    db32:	cmp	r3, #31
    db34:	ble.w	deea <_strtod_l+0xe72>
    db38:	movs	r2, #0
    db3a:	cmp	r3, #52	; 0x34
    db3c:	str	r2, [sp, #16]
    db3e:	ble.w	df06 <_strtod_l+0xe8e>
    db42:	mov.w	r3, #57671680	; 0x3700000
    db46:	str	r3, [sp, #20]
    db48:	movs	r2, #0
    db4a:	movs	r3, #0
    db4c:	ldrd	r0, r1, [sp, #16]
    db50:	bl	b764 <__aeabi_dcmpeq>
    db54:	cmp	r0, #0
    db56:	beq.w	d3d4 <_strtod_l+0x35c>
    db5a:	movs	r3, #34	; 0x22
    db5c:	str.w	r3, [fp]
    db60:	mov.w	r8, #0
    db64:	mov.w	r9, #0
    db68:	b.w	d1a8 <_strtod_l+0x130>
    db6c:	ldr	r1, [sp, #108]	; 0x6c
    db6e:	adds	r4, #1
    db70:	cmp	r0, #8
    db72:	ble.w	dc92 <_strtod_l+0xc1a>
    db76:	cmp	r4, #16
    db78:	itt	le
    db7a:	addle.w	r8, r8, r8, lsl #2
    db7e:	addle.w	r8, r2, r8, lsl #1
    db82:	movs	r0, #0
    db84:	adds	r3, r1, #1
    db86:	str	r3, [sp, #108]	; 0x6c
    db88:	ldrb	r3, [r1, #1]
    db8a:	b.w	d1cc <_strtod_l+0x154>
    db8e:	movw	r2, #19999	; 0x4e1f
    db92:	b.w	d37e <_strtod_l+0x306>
    db96:	ldr	r3, [sp, #20]
    db98:	add.w	r4, r3, #55574528	; 0x3500000
    db9c:	str	r4, [sp, #20]
    db9e:	b.n	d622 <_strtod_l+0x5aa>
    dba0:	ldr	r6, [sp, #44]	; 0x2c
    dba2:	rsb	r3, r4, #37	; 0x25
    dba6:	cmp	r6, r3
    dba8:	bgt.w	d39c <_strtod_l+0x324>
    dbac:	ldr	r5, [pc, #284]	; (dccc <_strtod_l+0xc54>)
    dbae:	rsb	r4, r4, #15
    dbb2:	add.w	r1, r5, r4, lsl #3
    dbb6:	subs	r4, r6, r4
    dbb8:	ldrd	r2, r3, [sp, #16]
    dbbc:	ldrd	r0, r1, [r1]
    dbc0:	add.w	r5, r5, r4, lsl #3
    dbc4:	bl	b294 <__aeabi_dmul>
    dbc8:	ldrd	r2, r3, [r5]
    dbcc:	bl	b294 <__aeabi_dmul>
    dbd0:	mov	r8, r0
    dbd2:	mov	r9, r1
    dbd4:	b.w	d1a8 <_strtod_l+0x130>
    dbd8:	ldr	r2, [sp, #112]	; 0x70
    dbda:	cbz	r2, dbec <_strtod_l+0xb74>
    dbdc:	movs	r1, #53	; 0x35
    dbde:	add	r0, sp, #120	; 0x78
    dbe0:	bl	129e0 <__copybits>
    dbe4:	mov	r0, fp
    dbe6:	ldr	r1, [sp, #112]	; 0x70
    dbe8:	bl	121ec <_Bfree>
    dbec:	cmp	r6, #6
    dbee:	bhi.n	dc08 <_strtod_l+0xb90>
    dbf0:	tbb	[pc, r6]
    dbf4:	.word	0x1318211d
    dbf8:	.short	0x2104
    dbfa:	.byte	0x1d
    dbfb:	.byte	0x00
    dbfc:	mvn.w	r3, #2147483648	; 0x80000000
    dc00:	str	r3, [sp, #20]
    dc02:	mov.w	r3, #4294967295
    dc06:	str	r3, [sp, #16]
    dc08:	lsls	r1, r5, #28
    dc0a:	bpl.w	d2e8 <_strtod_l+0x270>
    dc0e:	ldr	r3, [sp, #20]
    dc10:	orr.w	r3, r3, #2147483648	; 0x80000000
    dc14:	str	r3, [sp, #20]
    dc16:	b.w	d2e8 <_strtod_l+0x270>
    dc1a:	ldr	r3, [pc, #172]	; (dcc8 <_strtod_l+0xc50>)
    dc1c:	str	r3, [sp, #20]
    dc1e:	movs	r3, #0
    dc20:	str	r3, [sp, #16]
    dc22:	b.n	dc08 <_strtod_l+0xb90>
    dc24:	ldr	r3, [sp, #120]	; 0x78
    dc26:	str	r3, [sp, #16]
    dc28:	ldr	r3, [sp, #124]	; 0x7c
    dc2a:	str	r3, [sp, #20]
    dc2c:	b.n	dc08 <_strtod_l+0xb90>
    dc2e:	movs	r3, #0
    dc30:	str	r3, [sp, #20]
    dc32:	str	r3, [sp, #16]
    dc34:	b.n	dc08 <_strtod_l+0xb90>
    dc36:	ldr	r2, [sp, #116]	; 0x74
    dc38:	ldr	r3, [sp, #124]	; 0x7c
    dc3a:	ldr	r1, [sp, #120]	; 0x78
    dc3c:	str	r1, [sp, #16]
    dc3e:	addw	r2, r2, #1075	; 0x433
    dc42:	bic.w	r3, r3, #1048576	; 0x100000
    dc46:	orr.w	r3, r3, r2, lsl #20
    dc4a:	str	r3, [sp, #20]
    dc4c:	b.n	dc08 <_strtod_l+0xb90>
    dc4e:	vldr	d7, [sp, #56]	; 0x38
    dc52:	vstr	d7, [sp, #80]	; 0x50
    dc56:	b.n	d5f4 <_strtod_l+0x57c>
    dc58:	vldr	d7, [pc, #92]	; dcb8 <_strtod_l+0xc40>
    dc5c:	vstr	d7, [sp, #56]	; 0x38
    dc60:	b.n	d5e0 <_strtod_l+0x568>
    dc62:	ldrd	r1, r2, [sp, #16]
    dc66:	mov	r8, r2
    dc68:	cmp	r2, #0
    dc6a:	bne.w	d886 <_strtod_l+0x80e>
    dc6e:	movs	r3, #34	; 0x22
    dc70:	str.w	r3, [fp]
    dc74:	ldr	r0, [sp, #112]	; 0x70
    dc76:	mov.w	r8, #0
    dc7a:	mov.w	r9, #0
    dc7e:	b.n	d8dc <_strtod_l+0x864>
    dc80:	ldr	r2, [sp, #108]	; 0x6c
    dc82:	str	r2, [sp, #32]
    dc84:	movs	r5, #0
    dc86:	subs	r3, #48	; 0x30
    dc88:	adds	r7, r0, #1
    dc8a:	mov	r1, r2
    dc8c:	mov	sl, r5
    dc8e:	mov	r8, r5
    dc90:	movs	r4, #1
    dc92:	add.w	r5, r5, r5, lsl #2
    dc96:	add.w	r5, r3, r5, lsl #1
    dc9a:	movs	r0, #0
    dc9c:	b.n	db84 <_strtod_l+0xb0c>
    dc9e:	nop
    dca0:	.word	0x94a03595
    dca4:	.word	0x3fcfffff
    dca8:	.word	0x94a03595
    dcac:	.word	0x3fdfffff
    dcb0:	.word	0x35afe535
    dcb4:	.word	0x3fe00000
    dcb8:	.word	0x00000000
    dcbc:	.word	0x3ff00000
    dcc0:	.word	0x7c9fffff
    dcc4:	.word	0x7fefffff
    dcc8:	.word	0x7ff00000
    dccc:	.word	0x00014198
    dcd0:	.word	0x00013ec8
    dcd4:	ldr	r1, [sp, #44]	; 0x2c
    dcd6:	cmn.w	r1, #22
    dcda:	blt.w	d39c <_strtod_l+0x324>
    dcde:	ldr	r2, [pc, #600]	; (df38 <_strtod_l+0xec0>)
    dce0:	sub.w	r2, r2, r1, lsl #3
    dce4:	ldrd	r2, r3, [r2]
    dce8:	ldrd	r0, r1, [sp, #16]
    dcec:	bl	b4e8 <__aeabi_ddiv>
    dcf0:	mov	r8, r0
    dcf2:	mov	r9, r1
    dcf4:	b.w	d1a8 <_strtod_l+0x130>
    dcf8:	ldr	r3, [sp, #52]	; 0x34
    dcfa:	ldrd	r8, r9, [sp, #32]
    dcfe:	cmp	r3, #0
    dd00:	beq.w	de14 <_strtod_l+0xd9c>
    dd04:	ldrd	r4, r5, [sp, #16]
    dd08:	ldr	r3, [pc, #560]	; (df3c <_strtod_l+0xec4>)
    dd0a:	ubfx	r1, r5, #0, #20
    dd0e:	cmp	r1, r3
    dd10:	mov	r2, r5
    dd12:	beq.w	de6a <_strtod_l+0xdf2>
    dd16:	ldr	r3, [sp, #76]	; 0x4c
    dd18:	cmp	r3, #0
    dd1a:	beq.w	de2c <_strtod_l+0xdb4>
    dd1e:	ldr	r2, [sp, #20]
    dd20:	tst	r3, r2
    dd22:	beq.n	dd46 <_strtod_l+0xcce>
    dd24:	ldr	r3, [sp, #52]	; 0x34
    dd26:	ldr	r2, [sp, #40]	; 0x28
    dd28:	ldrd	r0, r1, [sp, #16]
    dd2c:	cmp	r3, #0
    dd2e:	beq.w	de3c <_strtod_l+0xdc4>
    dd32:	bl	d03c <sulp>
    dd36:	mov	r2, r0
    dd38:	mov	r3, r1
    dd3a:	mov	r0, r8
    dd3c:	mov	r1, r9
    dd3e:	bl	af30 <__adddf3>
    dd42:	mov	r8, r0
    dd44:	mov	r9, r1
    dd46:	ldr	r3, [sp, #40]	; 0x28
    dd48:	cbz	r3, dd7a <_strtod_l+0xd02>
    dd4a:	ldr	r3, [pc, #500]	; (df40 <_strtod_l+0xec8>)
    dd4c:	str	r3, [sp, #92]	; 0x5c
    dd4e:	movs	r3, #0
    dd50:	str	r3, [sp, #88]	; 0x58
    dd52:	ldrd	r2, r3, [sp, #88]	; 0x58
    dd56:	mov	r0, r8
    dd58:	mov	r1, r9
    dd5a:	bl	b294 <__aeabi_dmul>
    dd5e:	mov	r3, r0
    dd60:	mov	r4, r1
    dd62:	mov	r8, r0
    dd64:	mov	r9, r1
    dd66:	strd	r3, r4, [sp, #16]
    dd6a:	cbnz	r1, dd7a <_strtod_l+0xd02>
    dd6c:	ldr	r3, [sp, #16]
    dd6e:	cbnz	r3, dd7a <_strtod_l+0xd02>
    dd70:	movs	r3, #34	; 0x22
    dd72:	ldr	r0, [sp, #112]	; 0x70
    dd74:	str.w	r3, [fp]
    dd78:	b.n	d8dc <_strtod_l+0x864>
    dd7a:	ldr	r0, [sp, #112]	; 0x70
    dd7c:	b.n	d8dc <_strtod_l+0x864>
    dd7e:	ldr	r3, [sp, #52]	; 0x34
    dd80:	ldrd	r8, r9, [sp, #32]
    dd84:	cmp	r3, #0
    dd86:	bne.n	dd46 <_strtod_l+0xcce>
    dd88:	ldrd	r1, r2, [sp, #16]
    dd8c:	cmp	r1, #0
    dd8e:	bne.n	dd46 <_strtod_l+0xcce>
    dd90:	ubfx	r3, r2, #0, #20
    dd94:	mov	r4, r2
    dd96:	cmp	r3, #0
    dd98:	bne.n	dd46 <_strtod_l+0xcce>
    dd9a:	bic.w	r3, r2, #2147483648	; 0x80000000
    dd9e:	lsrs	r3, r3, #20
    dda0:	lsls	r3, r3, #20
    dda2:	cmp.w	r3, #112197632	; 0x6b00000
    dda6:	bls.n	dd46 <_strtod_l+0xcce>
    dda8:	ldr	r3, [r7, #20]
    ddaa:	cbnz	r3, ddb2 <_strtod_l+0xd3a>
    ddac:	ldr	r3, [r7, #16]
    ddae:	cmp	r3, #1
    ddb0:	ble.n	dd46 <_strtod_l+0xcce>
    ddb2:	mov	r1, r7
    ddb4:	movs	r2, #1
    ddb6:	mov	r0, fp
    ddb8:	bl	12598 <__lshift>
    ddbc:	mov	r1, sl
    ddbe:	mov	r7, r0
    ddc0:	bl	12648 <__mcmp>
    ddc4:	cmp	r0, #0
    ddc6:	ble.n	dd46 <_strtod_l+0xcce>
    ddc8:	ldr	r3, [sp, #40]	; 0x28
    ddca:	cmp	r3, #0
    ddcc:	bne.w	ded4 <_strtod_l+0xe5c>
    ddd0:	ldr	r3, [pc, #368]	; (df44 <_strtod_l+0xecc>)
    ddd2:	ands	r3, r4
    ddd4:	sub.w	r3, r3, #1048576	; 0x100000
    ddd8:	mvn.w	r3, r3, lsr #20
    dddc:	mvn.w	r3, r3, lsl #20
    dde0:	str	r3, [sp, #20]
    dde2:	mov.w	r3, #4294967295
    dde6:	str	r3, [sp, #16]
    dde8:	ldrd	r8, r9, [sp, #16]
    ddec:	b.n	dd46 <_strtod_l+0xcce>
    ddee:	ldr	r3, [sp, #88]	; 0x58
    ddf0:	adds	r3, #1
    ddf2:	bne.w	da2a <_strtod_l+0x9b2>
    ddf6:	b.n	d8c8 <_strtod_l+0x850>
    ddf8:	add.w	r3, r1, #55574528	; 0x3500000
    ddfc:	str	r3, [sp, #20]
    ddfe:	b.w	d3d0 <_strtod_l+0x358>
    de02:	vldr	d7, [pc, #292]	; df28 <_strtod_l+0xeb0>
    de06:	vstr	d7, [sp, #96]	; 0x60
    de0a:	vldr	d7, [pc, #292]	; df30 <_strtod_l+0xeb8>
    de0e:	vstr	d7, [sp, #56]	; 0x38
    de12:	b.n	d722 <_strtod_l+0x6aa>
    de14:	ldrd	r1, r2, [sp, #16]
    de18:	ubfx	r3, r2, #0, #20
    de1c:	mov	r4, r2
    de1e:	cmp	r3, #0
    de20:	bne.w	dd16 <_strtod_l+0xc9e>
    de24:	cmp	r1, #0
    de26:	bne.w	dd16 <_strtod_l+0xc9e>
    de2a:	b.n	ddc8 <_strtod_l+0xd50>
    de2c:	ldr	r3, [sp, #56]	; 0x38
    de2e:	ldr	r2, [sp, #16]
    de30:	tst	r3, r2
    de32:	beq.n	dd46 <_strtod_l+0xcce>
    de34:	b.n	dd24 <_strtod_l+0xcac>
    de36:	mov.w	r8, #0
    de3a:	b.n	d834 <_strtod_l+0x7bc>
    de3c:	bl	d03c <sulp>
    de40:	mov	r2, r0
    de42:	mov	r3, r1
    de44:	mov	r0, r8
    de46:	mov	r1, r9
    de48:	bl	af2c <__aeabi_dsub>
    de4c:	movs	r2, #0
    de4e:	movs	r3, #0
    de50:	mov	r8, r0
    de52:	mov	r9, r1
    de54:	bl	b764 <__aeabi_dcmpeq>
    de58:	cmp	r0, #0
    de5a:	bne.w	dc6e <_strtod_l+0xbf6>
    de5e:	b.n	dd46 <_strtod_l+0xcce>
    de60:	cmp	r6, #0
    de62:	str	r3, [sp, #40]	; 0x28
    de64:	bgt.w	daf8 <_strtod_l+0xa80>
    de68:	b.n	db48 <_strtod_l+0xad0>
    de6a:	ldr	r3, [sp, #40]	; 0x28
    de6c:	ldr	r1, [sp, #16]
    de6e:	cbz	r3, deaa <_strtod_l+0xe32>
    de70:	ldr	r3, [pc, #208]	; (df44 <_strtod_l+0xecc>)
    de72:	ands	r3, r5
    de74:	cmp.w	r3, #111149056	; 0x6a00000
    de78:	bhi.n	deaa <_strtod_l+0xe32>
    de7a:	lsrs	r3, r3, #20
    de7c:	rsb	r3, r3, #107	; 0x6b
    de80:	mov.w	r0, #4294967295
    de84:	lsl.w	r3, r0, r3
    de88:	cmp	r3, r1
    de8a:	bne.w	dd16 <_strtod_l+0xc9e>
    de8e:	ldr	r1, [pc, #184]	; (df48 <_strtod_l+0xed0>)
    de90:	cmp	r2, r1
    de92:	beq.w	d8c2 <_strtod_l+0x84a>
    de96:	ldr	r3, [pc, #172]	; (df44 <_strtod_l+0xecc>)
    de98:	ands	r3, r2
    de9a:	add.w	r3, r3, #1048576	; 0x100000
    de9e:	str	r3, [sp, #20]
    dea0:	movs	r3, #0
    dea2:	str	r3, [sp, #16]
    dea4:	ldrd	r8, r9, [sp, #16]
    dea8:	b.n	dd46 <_strtod_l+0xcce>
    deaa:	mov.w	r3, #4294967295
    deae:	b.n	de88 <_strtod_l+0xe10>
    deb0:	add	r0, sp, #108	; 0x6c
    deb2:	add	r2, sp, #120	; 0x78
    deb4:	ldr	r1, [pc, #148]	; (df4c <_strtod_l+0xed4>)
    deb6:	bl	11f88 <__hexnan>
    deba:	cmp	r0, #5
    debc:	bne.w	d8ac <_strtod_l+0x834>
    dec0:	ldr	r3, [sp, #124]	; 0x7c
    dec2:	orr.w	r3, r3, #2139095040	; 0x7f800000
    dec6:	orr.w	r3, r3, #7340032	; 0x700000
    deca:	str	r3, [sp, #20]
    decc:	ldr	r3, [sp, #120]	; 0x78
    dece:	str	r3, [sp, #16]
    ded0:	b.w	d2e8 <_strtod_l+0x270>
    ded4:	ldr	r3, [pc, #108]	; (df44 <_strtod_l+0xecc>)
    ded6:	ands	r3, r4
    ded8:	cmp.w	r3, #112197632	; 0x6b00000
    dedc:	bgt.w	ddd4 <_strtod_l+0xd5c>
    dee0:	cmp.w	r3, #57671680	; 0x3700000
    dee4:	bgt.w	dd4a <_strtod_l+0xcd2>
    dee8:	b.n	dc6e <_strtod_l+0xbf6>
    deea:	mov.w	r2, #4294967295
    deee:	lsl.w	r3, r2, r3
    def2:	ldr	r2, [sp, #16]
    def4:	ands	r2, r3
    def6:	str	r2, [sp, #16]
    def8:	b.n	db48 <_strtod_l+0xad0>
    defa:	strd	r0, r1, [sp, #16]
    defe:	b.n	d834 <_strtod_l+0x7bc>
    df00:	strd	r0, r1, [sp, #16]
    df04:	b.n	db1c <_strtod_l+0xaa4>
    df06:	subs	r3, #32
    df08:	mov.w	r2, #4294967295
    df0c:	lsl.w	r3, r2, r3
    df10:	ands	r3, r1
    df12:	str	r3, [sp, #20]
    df14:	b.n	db48 <_strtod_l+0xad0>
    df16:	mov	r0, r4
    df18:	ldr	r1, [sp, #108]	; 0x6c
    df1a:	adds	r4, #1
    df1c:	b.n	db70 <_strtod_l+0xaf8>
    df1e:	mov	r0, r1
    df20:	ldr	r1, [sp, #108]	; 0x6c
    df22:	b.n	db84 <_strtod_l+0xb0c>
    df24:	nop.w
    df28:	.word	0x00000000
    df2c:	.word	0xbfe00000
    df30:	.word	0x00000000
    df34:	.word	0x3fe00000
    df38:	.word	0x00014198
    df3c:	.word	0x000fffff
    df40:	.word	0x39500000
    df44:	.word	0x7ff00000
    df48:	.word	0x7fefffff
    df4c:	.word	0x00013eb4

0000df50 <_strtod_r>:
    df50:	ldr	r3, [pc, #20]	; (df68 <_strtod_r+0x18>)
    df52:	ldr	r3, [r3, #0]
    df54:	push	{r4}
    df56:	ldr	r3, [r3, #52]	; 0x34
    df58:	ldr	r4, [pc, #16]	; (df6c <_strtod_r+0x1c>)
    df5a:	cmp	r3, #0
    df5c:	it	eq
    df5e:	moveq	r3, r4
    df60:	ldr.w	r4, [sp], #4
    df64:	b.w	d078 <_strtod_l>
    df68:	.word	0x20017e00
    df6c:	.word	0x20017e04

0000df70 <_strtol_l.isra.0>:
    df70:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df74:	ldr.w	r9, [sp, #40]	; 0x28
    df78:	mov	r7, r1
    df7a:	mov	r8, r0
    df7c:	mov	r6, r2
    df7e:	mov	r5, r3
    df80:	mov	fp, r1
    df82:	b.n	df86 <_strtol_l.isra.0+0x16>
    df84:	mov	fp, r4
    df86:	mov	r4, fp
    df88:	mov	r0, r9
    df8a:	ldrb.w	sl, [r4], #1
    df8e:	bl	c004 <__locale_ctype_ptr_l>
    df92:	add	r0, sl
    df94:	ldrb	r1, [r0, #1]
    df96:	and.w	r1, r1, #8
    df9a:	and.w	ip, r1, #255	; 0xff
    df9e:	cmp	r1, #0
    dfa0:	bne.n	df84 <_strtol_l.isra.0+0x14>
    dfa2:	mov	r2, sl
    dfa4:	cmp	r2, #45	; 0x2d
    dfa6:	beq.n	e06c <_strtol_l.isra.0+0xfc>
    dfa8:	cmp	r2, #43	; 0x2b
    dfaa:	itt	eq
    dfac:	ldrbeq.w	r2, [fp, #1]
    dfb0:	addeq.w	r4, fp, #2
    dfb4:	cmp	r5, #0
    dfb6:	beq.n	e040 <_strtol_l.isra.0+0xd0>
    dfb8:	cmp	r5, #16
    dfba:	beq.n	e088 <_strtol_l.isra.0+0x118>
    dfbc:	mov	r9, r5
    dfbe:	cmp.w	ip, #0
    dfc2:	ite	eq
    dfc4:	mvneq.w	sl, #2147483648	; 0x80000000
    dfc8:	movne.w	sl, #2147483648	; 0x80000000
    dfcc:	movs	r1, #0
    dfce:	udiv	lr, sl, r9
    dfd2:	mov	r0, r1
    dfd4:	mls	sl, r9, lr, sl
    dfd8:	b.n	dfe6 <_strtol_l.isra.0+0x76>
    dfda:	beq.n	e030 <_strtol_l.isra.0+0xc0>
    dfdc:	mla	r0, r9, r0, r3
    dfe0:	movs	r1, #1
    dfe2:	ldrb.w	r2, [r4], #1
    dfe6:	sub.w	r3, r2, #48	; 0x30
    dfea:	cmp	r3, #9
    dfec:	bls.n	dffa <_strtol_l.isra.0+0x8a>
    dfee:	sub.w	r3, r2, #65	; 0x41
    dff2:	cmp	r3, #25
    dff4:	bhi.n	e00c <_strtol_l.isra.0+0x9c>
    dff6:	sub.w	r3, r2, #55	; 0x37
    dffa:	cmp	r5, r3
    dffc:	ble.n	e01c <_strtol_l.isra.0+0xac>
    dffe:	adds	r2, r1, #1
    e000:	beq.n	dfe2 <_strtol_l.isra.0+0x72>
    e002:	cmp	lr, r0
    e004:	bcs.n	dfda <_strtol_l.isra.0+0x6a>
    e006:	mov.w	r1, #4294967295
    e00a:	b.n	dfe2 <_strtol_l.isra.0+0x72>
    e00c:	sub.w	r3, r2, #97	; 0x61
    e010:	cmp	r3, #25
    e012:	bhi.n	e01c <_strtol_l.isra.0+0xac>
    e014:	sub.w	r3, r2, #87	; 0x57
    e018:	cmp	r5, r3
    e01a:	bgt.n	dffe <_strtol_l.isra.0+0x8e>
    e01c:	adds	r3, r1, #1
    e01e:	beq.n	e04c <_strtol_l.isra.0+0xdc>
    e020:	cmp.w	ip, #0
    e024:	bne.n	e048 <_strtol_l.isra.0+0xd8>
    e026:	cbz	r6, e03c <_strtol_l.isra.0+0xcc>
    e028:	cbnz	r1, e064 <_strtol_l.isra.0+0xf4>
    e02a:	str	r7, [r6, #0]
    e02c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e030:	cmp	sl, r3
    e032:	bge.n	dfdc <_strtol_l.isra.0+0x6c>
    e034:	mov	r0, lr
    e036:	mov.w	r1, #4294967295
    e03a:	b.n	dfe2 <_strtol_l.isra.0+0x72>
    e03c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e040:	cmp	r2, #48	; 0x30
    e042:	beq.n	e07a <_strtol_l.isra.0+0x10a>
    e044:	movs	r5, #10
    e046:	b.n	dfbc <_strtol_l.isra.0+0x4c>
    e048:	negs	r0, r0
    e04a:	b.n	e026 <_strtol_l.isra.0+0xb6>
    e04c:	cmp.w	ip, #0
    e050:	mov.w	r3, #34	; 0x22
    e054:	ite	eq
    e056:	mvneq.w	r0, #2147483648	; 0x80000000
    e05a:	movne.w	r0, #2147483648	; 0x80000000
    e05e:	str.w	r3, [r8]
    e062:	cbz	r6, e0a2 <_strtol_l.isra.0+0x132>
    e064:	subs	r7, r4, #1
    e066:	str	r7, [r6, #0]
    e068:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e06c:	add.w	r4, fp, #2
    e070:	ldrb.w	r2, [fp, #1]
    e074:	mov.w	ip, #1
    e078:	b.n	dfb4 <_strtol_l.isra.0+0x44>
    e07a:	ldrb	r3, [r4, #0]
    e07c:	and.w	r3, r3, #223	; 0xdf
    e080:	cmp	r3, #88	; 0x58
    e082:	beq.n	e096 <_strtol_l.isra.0+0x126>
    e084:	movs	r5, #8
    e086:	b.n	dfbc <_strtol_l.isra.0+0x4c>
    e088:	cmp	r2, #48	; 0x30
    e08a:	bne.n	dfbc <_strtol_l.isra.0+0x4c>
    e08c:	ldrb	r3, [r4, #0]
    e08e:	and.w	r3, r3, #223	; 0xdf
    e092:	cmp	r3, #88	; 0x58
    e094:	bne.n	dfbc <_strtol_l.isra.0+0x4c>
    e096:	mov.w	r9, #16
    e09a:	ldrb	r2, [r4, #1]
    e09c:	mov	r5, r9
    e09e:	adds	r4, #2
    e0a0:	b.n	dfbe <_strtol_l.isra.0+0x4e>
    e0a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0a6:	nop

0000e0a8 <_strtol_r>:
    e0a8:	push	{r4, r5, lr}
    e0aa:	ldr	r4, [pc, #24]	; (e0c4 <_strtol_r+0x1c>)
    e0ac:	ldr	r5, [pc, #24]	; (e0c8 <_strtol_r+0x20>)
    e0ae:	ldr	r4, [r4, #0]
    e0b0:	ldr	r4, [r4, #52]	; 0x34
    e0b2:	sub	sp, #12
    e0b4:	cmp	r4, #0
    e0b6:	it	eq
    e0b8:	moveq	r4, r5
    e0ba:	str	r4, [sp, #0]
    e0bc:	bl	df70 <_strtol_l.isra.0>
    e0c0:	add	sp, #12
    e0c2:	pop	{r4, r5, pc}
    e0c4:	.word	0x20017e00
    e0c8:	.word	0x20017e04
    e0cc:	.word	0xffffffff

0000e0d0 <_svfprintf_r>:
    e0d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0d4:	sub	sp, #260	; 0x104
    e0d6:	mov	r4, r1
    e0d8:	str	r1, [sp, #20]
    e0da:	mov	r5, r2
    e0dc:	str	r3, [sp, #40]	; 0x28
    e0de:	str	r0, [sp, #24]
    e0e0:	bl	12128 <_localeconv_r>
    e0e4:	ldr	r3, [r0, #0]
    e0e6:	str	r3, [sp, #76]	; 0x4c
    e0e8:	mov	r0, r3
    e0ea:	bl	cec0 <strlen>
    e0ee:	ldrh	r3, [r4, #12]
    e0f0:	str	r0, [sp, #72]	; 0x48
    e0f2:	lsls	r6, r3, #24
    e0f4:	bpl.n	e0fe <_svfprintf_r+0x2e>
    e0f6:	ldr	r3, [r4, #16]
    e0f8:	cmp	r3, #0
    e0fa:	beq.w	f360 <_svfprintf_r+0x1290>
    e0fe:	vldr	d7, [pc, #664]	; e398 <_svfprintf_r+0x2c8>
    e102:	movs	r3, #0
    e104:	vstr	d7, [sp, #64]	; 0x40
    e108:	str	r3, [sp, #56]	; 0x38
    e10a:	str	r3, [sp, #148]	; 0x94
    e10c:	str	r3, [sp, #144]	; 0x90
    e10e:	str	r3, [sp, #84]	; 0x54
    e110:	str	r3, [sp, #28]
    e112:	ldr.w	sl, [pc, #656]	; e3a4 <_svfprintf_r+0x2d4>
    e116:	add	r3, sp, #192	; 0xc0
    e118:	str	r3, [sp, #140]	; 0x8c
    e11a:	mov	r9, r3
    e11c:	mov	r8, r5
    e11e:	ldrb.w	r3, [r8]
    e122:	mov	r4, r8
    e124:	cbz	r3, e162 <_svfprintf_r+0x92>
    e126:	cmp	r3, #37	; 0x25
    e128:	bne.n	e130 <_svfprintf_r+0x60>
    e12a:	b.n	e162 <_svfprintf_r+0x92>
    e12c:	cmp	r3, #37	; 0x25
    e12e:	beq.n	e138 <_svfprintf_r+0x68>
    e130:	ldrb.w	r3, [r4, #1]!
    e134:	cmp	r3, #0
    e136:	bne.n	e12c <_svfprintf_r+0x5c>
    e138:	rsb	r5, r8, r4
    e13c:	cbz	r5, e162 <_svfprintf_r+0x92>
    e13e:	ldr	r3, [sp, #144]	; 0x90
    e140:	ldr	r2, [sp, #148]	; 0x94
    e142:	str.w	r8, [r9]
    e146:	adds	r3, #1
    e148:	add	r2, r5
    e14a:	cmp	r3, #7
    e14c:	str.w	r5, [r9, #4]
    e150:	str	r2, [sp, #148]	; 0x94
    e152:	str	r3, [sp, #144]	; 0x90
    e154:	bgt.w	e2a4 <_svfprintf_r+0x1d4>
    e158:	add.w	r9, r9, #8
    e15c:	ldr	r3, [sp, #28]
    e15e:	add	r3, r5
    e160:	str	r3, [sp, #28]
    e162:	ldrb	r3, [r4, #0]
    e164:	cmp	r3, #0
    e166:	beq.w	e2b6 <_svfprintf_r+0x1e6>
    e16a:	movs	r3, #0
    e16c:	mov	r2, r3
    e16e:	strb.w	r3, [sp, #111]	; 0x6f
    e172:	mov	r1, r3
    e174:	str	r3, [sp, #32]
    e176:	str	r3, [sp, #12]
    e178:	mov.w	fp, #4294967295
    e17c:	ldrb	r3, [r4, #1]
    e17e:	add.w	r8, r4, #1
    e182:	mov	r5, fp
    e184:	add.w	r8, r8, #1
    e188:	sub.w	r0, r3, #32
    e18c:	cmp	r0, #88	; 0x58
    e18e:	bhi.w	e9fa <_svfprintf_r+0x92a>
    e192:	tbh	[pc, r0, lsl #1]
    e196:	.short	0x03a0
    e198:	.word	0x04320432
    e19c:	.word	0x043203a8
    e1a0:	.word	0x04320432
    e1a4:	.word	0x04320432
    e1a8:	.word	0x03af0432
    e1ac:	.word	0x043203bd
    e1b0:	.word	0x00e2005d
    e1b4:	.word	0x01090432
    e1b8:	.word	0x01100110
    e1bc:	.word	0x01100110
    e1c0:	.word	0x01100110
    e1c4:	.word	0x01100110
    e1c8:	.word	0x04320110
    e1cc:	.word	0x04320432
    e1d0:	.word	0x04320432
    e1d4:	.word	0x04320432
    e1d8:	.word	0x04320432
    e1dc:	.word	0x01200432
    e1e0:	.word	0x04320286
    e1e4:	.word	0x04320286
    e1e8:	.word	0x04320432
    e1ec:	.word	0x02d40432
    e1f0:	.word	0x04320432
    e1f4:	.word	0x043202e5
    e1f8:	.word	0x04320432
    e1fc:	.word	0x04320432
    e200:	.word	0x0432030f
    e204:	.word	0x033d0432
    e208:	.word	0x04320432
    e20c:	.word	0x04320432
    e210:	.word	0x04320432
    e214:	.word	0x04320432
    e218:	.word	0x04320432
    e21c:	.word	0x0391037e
    e220:	.word	0x02860286
    e224:	.word	0x03990286
    e228:	.word	0x04320391
    e22c:	.word	0x04070432
    e230:	.word	0x04120432
    e234:	.word	0x006400a3
    e238:	.word	0x043203c2
    e23c:	.word	0x043203c9
    e240:	.word	0x043203ea
    e244:	.word	0x03f20432
    e248:	ldr	r0, [sp, #32]
    e24a:	str	r3, [sp, #40]	; 0x28
    e24c:	negs	r0, r0
    e24e:	str	r0, [sp, #32]
    e250:	ldr	r3, [sp, #12]
    e252:	orr.w	r3, r3, #4
    e256:	str	r3, [sp, #12]
    e258:	ldrb.w	r3, [r8]
    e25c:	b.n	e184 <_svfprintf_r+0xb4>
    e25e:	ldr	r0, [sp, #40]	; 0x28
    e260:	mov	fp, r5
    e262:	movs	r1, #0
    e264:	ldr	r4, [r0, #0]
    e266:	strb.w	r1, [sp, #111]	; 0x6f
    e26a:	adds	r7, r0, #4
    e26c:	ldr	r0, [sp, #12]
    e26e:	movs	r3, #48	; 0x30
    e270:	movs	r2, #120	; 0x78
    e272:	cmp	fp, r1
    e274:	strb.w	r3, [sp, #112]	; 0x70
    e278:	mov.w	r5, #0
    e27c:	strb.w	r2, [sp, #113]	; 0x71
    e280:	orr.w	r3, r0, #2
    e284:	blt.w	ea34 <_svfprintf_r+0x964>
    e288:	bic.w	r3, r0, #128	; 0x80
    e28c:	orr.w	r3, r3, #2
    e290:	str	r3, [sp, #12]
    e292:	orrs.w	r3, r4, r5
    e296:	str	r7, [sp, #40]	; 0x28
    e298:	beq.w	e9e0 <_svfprintf_r+0x910>
    e29c:	mov	r7, r1
    e29e:	str	r2, [sp, #52]	; 0x34
    e2a0:	ldr	r0, [pc, #252]	; (e3a0 <_svfprintf_r+0x2d0>)
    e2a2:	b.n	e872 <_svfprintf_r+0x7a2>
    e2a4:	add	r2, sp, #140	; 0x8c
    e2a6:	ldr	r1, [sp, #20]
    e2a8:	ldr	r0, [sp, #24]
    e2aa:	bl	13068 <__ssprint_r>
    e2ae:	cbnz	r0, e2c4 <_svfprintf_r+0x1f4>
    e2b0:	add.w	r9, sp, #192	; 0xc0
    e2b4:	b.n	e15c <_svfprintf_r+0x8c>
    e2b6:	ldr	r3, [sp, #148]	; 0x94
    e2b8:	cbz	r3, e2c4 <_svfprintf_r+0x1f4>
    e2ba:	ldr	r0, [sp, #24]
    e2bc:	ldr	r1, [sp, #20]
    e2be:	add	r2, sp, #140	; 0x8c
    e2c0:	bl	13068 <__ssprint_r>
    e2c4:	ldr	r3, [sp, #20]
    e2c6:	ldrh	r3, [r3, #12]
    e2c8:	tst.w	r3, #64	; 0x40
    e2cc:	ldr	r3, [sp, #28]
    e2ce:	it	ne
    e2d0:	movne.w	r3, #4294967295
    e2d4:	mov	r0, r3
    e2d6:	add	sp, #260	; 0x104
    e2d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2dc:	str	r3, [sp, #52]	; 0x34
    e2de:	mov	fp, r5
    e2e0:	cmp	r2, #0
    e2e2:	bne.w	f74c <_svfprintf_r+0x167c>
    e2e6:	ldr	r2, [sp, #12]
    e2e8:	ands.w	r3, r2, #32
    e2ec:	beq.w	e77c <_svfprintf_r+0x6ac>
    e2f0:	ldr	r7, [sp, #40]	; 0x28
    e2f2:	adds	r7, #7
    e2f4:	bic.w	r3, r7, #7
    e2f8:	movs	r7, #0
    e2fa:	add.w	r1, r3, #8
    e2fe:	cmp	fp, r7
    e300:	str	r1, [sp, #40]	; 0x28
    e302:	ldrd	r4, r5, [r3]
    e306:	strb.w	r7, [sp, #111]	; 0x6f
    e30a:	blt.w	f1d2 <_svfprintf_r+0x1102>
    e30e:	bic.w	r3, r2, #128	; 0x80
    e312:	str	r3, [sp, #12]
    e314:	orrs.w	r3, r4, r5
    e318:	beq.w	ea24 <_svfprintf_r+0x954>
    e31c:	add	r6, sp, #192	; 0xc0
    e31e:	lsrs	r2, r4, #3
    e320:	orr.w	r2, r2, r5, lsl #29
    e324:	lsrs	r1, r5, #3
    e326:	and.w	r3, r4, #7
    e32a:	mov	r5, r1
    e32c:	mov	r4, r2
    e32e:	adds	r3, #48	; 0x30
    e330:	orrs.w	r2, r4, r5
    e334:	strb.w	r3, [r6, #-1]!
    e338:	bne.n	e31e <_svfprintf_r+0x24e>
    e33a:	ldr	r2, [sp, #12]
    e33c:	lsls	r1, r2, #31
    e33e:	bpl.w	e460 <_svfprintf_r+0x390>
    e342:	cmp	r3, #48	; 0x30
    e344:	beq.w	e460 <_svfprintf_r+0x390>
    e348:	movs	r2, #48	; 0x30
    e34a:	subs	r3, r6, #1
    e34c:	strb.w	r2, [r6, #-1]
    e350:	add	r2, sp, #192	; 0xc0
    e352:	subs	r2, r2, r3
    e354:	str	r2, [sp, #36]	; 0x24
    e356:	mov	r6, r3
    e358:	b.n	e466 <_svfprintf_r+0x396>
    e35a:	ldrb.w	r3, [r8]
    e35e:	cmp	r3, #42	; 0x2a
    e360:	add.w	r4, r8, #1
    e364:	beq.w	f730 <_svfprintf_r+0x1660>
    e368:	sub.w	r0, r3, #48	; 0x30
    e36c:	cmp	r0, #9
    e36e:	it	ls
    e370:	movls	r5, #0
    e372:	bhi.w	f682 <_svfprintf_r+0x15b2>
    e376:	ldrb.w	r3, [r4], #1
    e37a:	add.w	r5, r5, r5, lsl #2
    e37e:	add.w	r5, r0, r5, lsl #1
    e382:	sub.w	r0, r3, #48	; 0x30
    e386:	cmp	r0, #9
    e388:	bls.n	e376 <_svfprintf_r+0x2a6>
    e38a:	orr.w	r5, r5, r5, asr #31
    e38e:	mov	r8, r4
    e390:	b.n	e188 <_svfprintf_r+0xb8>
    e392:	nop
    e394:	nop.w
	...
    e3a0:	.word	0x00013f24
    e3a4:	.word	0x00013ef0
    e3a8:	ldr	r3, [sp, #12]
    e3aa:	orr.w	r3, r3, #128	; 0x80
    e3ae:	str	r3, [sp, #12]
    e3b0:	ldrb.w	r3, [r8]
    e3b4:	b.n	e184 <_svfprintf_r+0xb4>
    e3b6:	sub.w	r0, r3, #48	; 0x30
    e3ba:	movs	r3, #0
    e3bc:	mov	r4, r3
    e3be:	ldrb.w	r3, [r8], #1
    e3c2:	add.w	r4, r4, r4, lsl #2
    e3c6:	add.w	r4, r0, r4, lsl #1
    e3ca:	sub.w	r0, r3, #48	; 0x30
    e3ce:	cmp	r0, #9
    e3d0:	bls.n	e3be <_svfprintf_r+0x2ee>
    e3d2:	str	r4, [sp, #32]
    e3d4:	b.n	e188 <_svfprintf_r+0xb8>
    e3d6:	str	r3, [sp, #52]	; 0x34
    e3d8:	mov	fp, r5
    e3da:	cmp	r2, #0
    e3dc:	bne.w	f768 <_svfprintf_r+0x1698>
    e3e0:	ldr	r3, [sp, #12]
    e3e2:	orr.w	r3, r3, #16
    e3e6:	str	r3, [sp, #12]
    e3e8:	ldr	r3, [sp, #12]
    e3ea:	lsls	r4, r3, #26
    e3ec:	bpl.w	ee5e <_svfprintf_r+0xd8e>
    e3f0:	ldr	r7, [sp, #40]	; 0x28
    e3f2:	adds	r7, #7
    e3f4:	bic.w	r7, r7, #7
    e3f8:	ldrd	r2, r3, [r7]
    e3fc:	add.w	r1, r7, #8
    e400:	str	r1, [sp, #40]	; 0x28
    e402:	mov	r4, r2
    e404:	mov	r5, r3
    e406:	cmp	r2, #0
    e408:	sbcs.w	r3, r3, #0
    e40c:	blt.w	eed4 <_svfprintf_r+0xe04>
    e410:	cmp.w	fp, #0
    e414:	ldrb.w	r7, [sp, #111]	; 0x6f
    e418:	blt.w	ee9a <_svfprintf_r+0xdca>
    e41c:	ldr	r3, [sp, #12]
    e41e:	bic.w	r3, r3, #128	; 0x80
    e422:	str	r3, [sp, #12]
    e424:	orrs.w	r3, r4, r5
    e428:	beq.w	e7fc <_svfprintf_r+0x72c>
    e42c:	cmp	r5, #0
    e42e:	it	eq
    e430:	cmpeq	r4, #10
    e432:	bcc.w	e806 <_svfprintf_r+0x736>
    e436:	add	r6, sp, #192	; 0xc0
    e438:	mov	r0, r4
    e43a:	mov	r1, r5
    e43c:	movs	r2, #10
    e43e:	movs	r3, #0
    e440:	bl	bbe0 <__aeabi_uldivmod>
    e444:	adds	r2, #48	; 0x30
    e446:	strb.w	r2, [r6, #-1]!
    e44a:	mov	r0, r4
    e44c:	mov	r1, r5
    e44e:	movs	r3, #0
    e450:	movs	r2, #10
    e452:	bl	bbe0 <__aeabi_uldivmod>
    e456:	mov	r4, r0
    e458:	mov	r5, r1
    e45a:	orrs.w	r3, r4, r5
    e45e:	bne.n	e438 <_svfprintf_r+0x368>
    e460:	add	r3, sp, #192	; 0xc0
    e462:	subs	r3, r3, r6
    e464:	str	r3, [sp, #36]	; 0x24
    e466:	ldr	r3, [sp, #36]	; 0x24
    e468:	cmp	r3, fp
    e46a:	it	lt
    e46c:	movlt	r3, fp
    e46e:	str	r3, [sp, #16]
    e470:	movs	r3, #0
    e472:	str	r3, [sp, #60]	; 0x3c
    e474:	cbz	r7, e47c <_svfprintf_r+0x3ac>
    e476:	ldr	r3, [sp, #16]
    e478:	adds	r3, #1
    e47a:	str	r3, [sp, #16]
    e47c:	ldr	r3, [sp, #12]
    e47e:	ands.w	r3, r3, #2
    e482:	str	r3, [sp, #44]	; 0x2c
    e484:	beq.n	e48c <_svfprintf_r+0x3bc>
    e486:	ldr	r3, [sp, #16]
    e488:	adds	r3, #2
    e48a:	str	r3, [sp, #16]
    e48c:	ldr	r3, [sp, #12]
    e48e:	ands.w	r3, r3, #132	; 0x84
    e492:	str	r3, [sp, #48]	; 0x30
    e494:	bne.w	ea4e <_svfprintf_r+0x97e>
    e498:	ldr	r3, [sp, #32]
    e49a:	ldr	r2, [sp, #16]
    e49c:	subs	r5, r3, r2
    e49e:	cmp	r5, #0
    e4a0:	ble.w	ea4e <_svfprintf_r+0x97e>
    e4a4:	cmp	r5, #16
    e4a6:	ldr	r1, [sp, #148]	; 0x94
    e4a8:	ldr	r2, [sp, #144]	; 0x90
    e4aa:	ldr	r7, [pc, #672]	; (e74c <_svfprintf_r+0x67c>)
    e4ac:	ble.n	e4fe <_svfprintf_r+0x42e>
    e4ae:	str	r6, [sp, #80]	; 0x50
    e4b0:	mov	r0, r9
    e4b2:	movs	r4, #16
    e4b4:	mov	r9, r7
    e4b6:	ldr	r6, [sp, #20]
    e4b8:	mov	r7, r5
    e4ba:	ldr	r5, [sp, #24]
    e4bc:	b.n	e4c8 <_svfprintf_r+0x3f8>
    e4be:	subs	r7, #16
    e4c0:	cmp	r7, #16
    e4c2:	add.w	r0, r0, #8
    e4c6:	ble.n	e4f6 <_svfprintf_r+0x426>
    e4c8:	adds	r2, #1
    e4ca:	ldr	r3, [pc, #640]	; (e74c <_svfprintf_r+0x67c>)
    e4cc:	str	r2, [sp, #144]	; 0x90
    e4ce:	adds	r1, #16
    e4d0:	cmp	r2, #7
    e4d2:	str	r1, [sp, #148]	; 0x94
    e4d4:	stmia.w	r0, {r3, r4}
    e4d8:	ble.n	e4be <_svfprintf_r+0x3ee>
    e4da:	add	r2, sp, #140	; 0x8c
    e4dc:	mov	r1, r6
    e4de:	mov	r0, r5
    e4e0:	bl	13068 <__ssprint_r>
    e4e4:	cmp	r0, #0
    e4e6:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    e4ea:	subs	r7, #16
    e4ec:	cmp	r7, #16
    e4ee:	ldr	r1, [sp, #148]	; 0x94
    e4f0:	ldr	r2, [sp, #144]	; 0x90
    e4f2:	add	r0, sp, #192	; 0xc0
    e4f4:	bgt.n	e4c8 <_svfprintf_r+0x3f8>
    e4f6:	ldr	r6, [sp, #80]	; 0x50
    e4f8:	mov	r5, r7
    e4fa:	mov	r7, r9
    e4fc:	mov	r9, r0
    e4fe:	adds	r2, #1
    e500:	adds	r4, r5, r1
    e502:	cmp	r2, #7
    e504:	str	r4, [sp, #148]	; 0x94
    e506:	str	r2, [sp, #144]	; 0x90
    e508:	str.w	r7, [r9]
    e50c:	str.w	r5, [r9, #4]
    e510:	bgt.w	ed6e <_svfprintf_r+0xc9e>
    e514:	ldrb.w	r7, [sp, #111]	; 0x6f
    e518:	add.w	r9, r9, #8
    e51c:	cbz	r7, e53c <_svfprintf_r+0x46c>
    e51e:	ldr	r3, [sp, #144]	; 0x90
    e520:	adds	r3, #1
    e522:	adds	r4, #1
    e524:	add.w	r1, sp, #111	; 0x6f
    e528:	movs	r2, #1
    e52a:	cmp	r3, #7
    e52c:	str	r4, [sp, #148]	; 0x94
    e52e:	str	r3, [sp, #144]	; 0x90
    e530:	stmia.w	r9, {r1, r2}
    e534:	bgt.w	ec82 <_svfprintf_r+0xbb2>
    e538:	add.w	r9, r9, #8
    e53c:	ldr	r3, [sp, #44]	; 0x2c
    e53e:	cbz	r3, e55c <_svfprintf_r+0x48c>
    e540:	ldr	r3, [sp, #144]	; 0x90
    e542:	adds	r3, #1
    e544:	adds	r4, #2
    e546:	add	r1, sp, #112	; 0x70
    e548:	movs	r2, #2
    e54a:	cmp	r3, #7
    e54c:	str	r4, [sp, #148]	; 0x94
    e54e:	str	r3, [sp, #144]	; 0x90
    e550:	stmia.w	r9, {r1, r2}
    e554:	bgt.w	ec9a <_svfprintf_r+0xbca>
    e558:	add.w	r9, r9, #8
    e55c:	ldr	r3, [sp, #48]	; 0x30
    e55e:	cmp	r3, #128	; 0x80
    e560:	beq.w	eb26 <_svfprintf_r+0xa56>
    e564:	ldr	r3, [sp, #36]	; 0x24
    e566:	rsb	r7, r3, fp
    e56a:	cmp	r7, #0
    e56c:	ble.n	e5d6 <_svfprintf_r+0x506>
    e56e:	ldr	r2, [pc, #480]	; (e750 <_svfprintf_r+0x680>)
    e570:	ldr	r3, [sp, #144]	; 0x90
    e572:	str	r2, [sp, #44]	; 0x2c
    e574:	cmp	r7, #16
    e576:	ble.n	e5be <_svfprintf_r+0x4ee>
    e578:	mov	r2, r4
    e57a:	mov.w	fp, #16
    e57e:	ldr	r5, [sp, #24]
    e580:	ldr	r4, [sp, #20]
    e582:	b.n	e58e <_svfprintf_r+0x4be>
    e584:	subs	r7, #16
    e586:	cmp	r7, #16
    e588:	add.w	r9, r9, #8
    e58c:	ble.n	e5bc <_svfprintf_r+0x4ec>
    e58e:	adds	r3, #1
    e590:	adds	r2, #16
    e592:	cmp	r3, #7
    e594:	str	r2, [sp, #148]	; 0x94
    e596:	str	r3, [sp, #144]	; 0x90
    e598:	stmia.w	r9, {sl, fp}
    e59c:	ble.n	e584 <_svfprintf_r+0x4b4>
    e59e:	add	r2, sp, #140	; 0x8c
    e5a0:	mov	r1, r4
    e5a2:	mov	r0, r5
    e5a4:	bl	13068 <__ssprint_r>
    e5a8:	cmp	r0, #0
    e5aa:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    e5ae:	subs	r7, #16
    e5b0:	cmp	r7, #16
    e5b2:	ldr	r2, [sp, #148]	; 0x94
    e5b4:	ldr	r3, [sp, #144]	; 0x90
    e5b6:	add.w	r9, sp, #192	; 0xc0
    e5ba:	bgt.n	e58e <_svfprintf_r+0x4be>
    e5bc:	mov	r4, r2
    e5be:	adds	r3, #1
    e5c0:	ldr	r2, [sp, #44]	; 0x2c
    e5c2:	str	r3, [sp, #144]	; 0x90
    e5c4:	add	r4, r7
    e5c6:	cmp	r3, #7
    e5c8:	str	r4, [sp, #148]	; 0x94
    e5ca:	stmia.w	r9, {r2, r7}
    e5ce:	bgt.w	ec6a <_svfprintf_r+0xb9a>
    e5d2:	add.w	r9, r9, #8
    e5d6:	ldr	r3, [sp, #12]
    e5d8:	lsls	r2, r3, #23
    e5da:	bmi.w	ea52 <_svfprintf_r+0x982>
    e5de:	ldr	r3, [sp, #144]	; 0x90
    e5e0:	ldr	r1, [sp, #36]	; 0x24
    e5e2:	str.w	r6, [r9]
    e5e6:	adds	r3, #1
    e5e8:	add	r4, r1
    e5ea:	cmp	r3, #7
    e5ec:	str	r4, [sp, #148]	; 0x94
    e5ee:	str.w	r1, [r9, #4]
    e5f2:	str	r3, [sp, #144]	; 0x90
    e5f4:	bgt.w	ec3e <_svfprintf_r+0xb6e>
    e5f8:	add.w	r9, r9, #8
    e5fc:	ldr	r3, [sp, #12]
    e5fe:	lsls	r1, r3, #29
    e600:	bpl.n	e682 <_svfprintf_r+0x5b2>
    e602:	ldr	r3, [sp, #32]
    e604:	ldr	r2, [sp, #16]
    e606:	subs	r5, r3, r2
    e608:	cmp	r5, #0
    e60a:	ble.n	e682 <_svfprintf_r+0x5b2>
    e60c:	cmp	r5, #16
    e60e:	ldr	r3, [sp, #144]	; 0x90
    e610:	ldr	r7, [pc, #312]	; (e74c <_svfprintf_r+0x67c>)
    e612:	ble.n	e65c <_svfprintf_r+0x58c>
    e614:	mov	r2, r4
    e616:	movs	r6, #16
    e618:	ldr.w	fp, [sp, #24]
    e61c:	ldr	r4, [sp, #20]
    e61e:	b.n	e62a <_svfprintf_r+0x55a>
    e620:	subs	r5, #16
    e622:	cmp	r5, #16
    e624:	add.w	r9, r9, #8
    e628:	ble.n	e65a <_svfprintf_r+0x58a>
    e62a:	adds	r3, #1
    e62c:	ldr	r1, [pc, #284]	; (e74c <_svfprintf_r+0x67c>)
    e62e:	str	r3, [sp, #144]	; 0x90
    e630:	adds	r2, #16
    e632:	cmp	r3, #7
    e634:	str	r2, [sp, #148]	; 0x94
    e636:	stmia.w	r9, {r1, r6}
    e63a:	ble.n	e620 <_svfprintf_r+0x550>
    e63c:	add	r2, sp, #140	; 0x8c
    e63e:	mov	r1, r4
    e640:	mov	r0, fp
    e642:	bl	13068 <__ssprint_r>
    e646:	cmp	r0, #0
    e648:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    e64c:	subs	r5, #16
    e64e:	cmp	r5, #16
    e650:	ldr	r2, [sp, #148]	; 0x94
    e652:	ldr	r3, [sp, #144]	; 0x90
    e654:	add.w	r9, sp, #192	; 0xc0
    e658:	bgt.n	e62a <_svfprintf_r+0x55a>
    e65a:	mov	r4, r2
    e65c:	adds	r3, #1
    e65e:	add	r4, r5
    e660:	cmp	r3, #7
    e662:	str	r4, [sp, #148]	; 0x94
    e664:	str	r3, [sp, #144]	; 0x90
    e666:	str.w	r7, [r9]
    e66a:	str.w	r5, [r9, #4]
    e66e:	ble.n	e682 <_svfprintf_r+0x5b2>
    e670:	add	r2, sp, #140	; 0x8c
    e672:	ldr	r1, [sp, #20]
    e674:	ldr	r0, [sp, #24]
    e676:	bl	13068 <__ssprint_r>
    e67a:	cmp	r0, #0
    e67c:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    e680:	ldr	r4, [sp, #148]	; 0x94
    e682:	ldr	r3, [sp, #28]
    e684:	ldr	r2, [sp, #32]
    e686:	ldr	r1, [sp, #16]
    e688:	cmp	r2, r1
    e68a:	ite	ge
    e68c:	addge	r3, r3, r2
    e68e:	addlt	r3, r3, r1
    e690:	str	r3, [sp, #28]
    e692:	cmp	r4, #0
    e694:	bne.w	ec56 <_svfprintf_r+0xb86>
    e698:	movs	r3, #0
    e69a:	str	r3, [sp, #144]	; 0x90
    e69c:	add.w	r9, sp, #192	; 0xc0
    e6a0:	b.n	e11e <_svfprintf_r+0x4e>
    e6a2:	str	r3, [sp, #52]	; 0x34
    e6a4:	mov	fp, r5
    e6a6:	cmp	r2, #0
    e6a8:	bne.w	f770 <_svfprintf_r+0x16a0>
    e6ac:	ldr	r3, [sp, #12]
    e6ae:	ldr	r7, [sp, #40]	; 0x28
    e6b0:	lsls	r2, r3, #28
    e6b2:	add.w	r7, r7, #7
    e6b6:	bpl.w	f1a2 <_svfprintf_r+0x10d2>
    e6ba:	bic.w	r3, r7, #7
    e6be:	vldr	d7, [r3]
    e6c2:	vstr	d7, [sp, #64]	; 0x40
    e6c6:	add.w	r2, r3, #8
    e6ca:	str	r2, [sp, #40]	; 0x28
    e6cc:	ldrd	r1, r2, [sp, #64]	; 0x40
    e6d0:	bic.w	r3, r2, #2147483648	; 0x80000000
    e6d4:	str	r1, [sp, #88]	; 0x58
    e6d6:	str	r3, [sp, #92]	; 0x5c
    e6d8:	ldrd	r4, r5, [sp, #88]	; 0x58
    e6dc:	mov.w	r2, #4294967295
    e6e0:	mov	r0, r4
    e6e2:	mov	r1, r5
    e6e4:	ldr	r3, [pc, #108]	; (e754 <_svfprintf_r+0x684>)
    e6e6:	bl	b7c8 <__aeabi_dcmpun>
    e6ea:	cmp	r0, #0
    e6ec:	bne.w	f0a4 <_svfprintf_r+0xfd4>
    e6f0:	mov.w	r2, #4294967295
    e6f4:	ldr	r3, [pc, #92]	; (e754 <_svfprintf_r+0x684>)
    e6f6:	mov	r0, r4
    e6f8:	mov	r1, r5
    e6fa:	bl	b78c <__aeabi_dcmple>
    e6fe:	cmp	r0, #0
    e700:	bne.w	f0a4 <_svfprintf_r+0xfd4>
    e704:	movs	r2, #0
    e706:	movs	r3, #0
    e708:	ldrd	r0, r1, [sp, #64]	; 0x40
    e70c:	bl	b778 <__aeabi_dcmplt>
    e710:	cmp	r0, #0
    e712:	bne.w	f5ba <_svfprintf_r+0x14ea>
    e716:	ldrb.w	r7, [sp, #111]	; 0x6f
    e71a:	ldr	r6, [pc, #60]	; (e758 <_svfprintf_r+0x688>)
    e71c:	ldr	r3, [pc, #60]	; (e75c <_svfprintf_r+0x68c>)
    e71e:	ldr	r1, [sp, #12]
    e720:	bic.w	r1, r1, #128	; 0x80
    e724:	str	r1, [sp, #12]
    e726:	ldr	r1, [sp, #52]	; 0x34
    e728:	movs	r2, #3
    e72a:	mov.w	fp, #0
    e72e:	str	r2, [sp, #16]
    e730:	cmp	r1, #71	; 0x47
    e732:	it	le
    e734:	movle	r6, r3
    e736:	str	r2, [sp, #36]	; 0x24
    e738:	str.w	fp, [sp, #60]	; 0x3c
    e73c:	b.n	e474 <_svfprintf_r+0x3a4>
    e73e:	ldr	r3, [sp, #12]
    e740:	orr.w	r3, r3, #8
    e744:	str	r3, [sp, #12]
    e746:	ldrb.w	r3, [r8]
    e74a:	b.n	e184 <_svfprintf_r+0xb4>
    e74c:	.word	0x00013f44
    e750:	.word	0x00013ef0
    e754:	.word	0x7fefffff
    e758:	.word	0x00013f04
    e75c:	.word	0x00013f00
    e760:	str	r3, [sp, #52]	; 0x34
    e762:	mov	fp, r5
    e764:	cmp	r2, #0
    e766:	bne.w	f788 <_svfprintf_r+0x16b8>
    e76a:	ldr	r3, [sp, #12]
    e76c:	orr.w	r3, r3, #16
    e770:	str	r3, [sp, #12]
    e772:	ldr	r2, [sp, #12]
    e774:	ands.w	r3, r2, #32
    e778:	bne.w	e2f0 <_svfprintf_r+0x220>
    e77c:	ldr	r1, [sp, #12]
    e77e:	ands.w	r2, r1, #16
    e782:	beq.w	f03c <_svfprintf_r+0xf6c>
    e786:	ldr	r0, [sp, #40]	; 0x28
    e788:	strb.w	r3, [sp, #111]	; 0x6f
    e78c:	cmp.w	fp, #0
    e790:	ldr	r4, [r0, #0]
    e792:	add.w	r7, r0, #4
    e796:	mov.w	r5, #0
    e79a:	blt.w	f1d0 <_svfprintf_r+0x1100>
    e79e:	mov	r2, r1
    e7a0:	bic.w	r2, r2, #128	; 0x80
    e7a4:	str	r2, [sp, #12]
    e7a6:	orrs.w	r2, r4, r5
    e7aa:	str	r7, [sp, #40]	; 0x28
    e7ac:	beq.w	ea24 <_svfprintf_r+0x954>
    e7b0:	mov	r7, r3
    e7b2:	b.n	e31c <_svfprintf_r+0x24c>
    e7b4:	str	r3, [sp, #52]	; 0x34
    e7b6:	mov	fp, r5
    e7b8:	cmp	r2, #0
    e7ba:	bne.w	f780 <_svfprintf_r+0x16b0>
    e7be:	ldr	r3, [sp, #12]
    e7c0:	orr.w	r3, r3, #16
    e7c4:	str	r3, [sp, #12]
    e7c6:	ldr	r2, [sp, #12]
    e7c8:	ands.w	r3, r2, #32
    e7cc:	beq.w	ee28 <_svfprintf_r+0xd58>
    e7d0:	ldr	r7, [sp, #40]	; 0x28
    e7d2:	adds	r7, #7
    e7d4:	bic.w	r3, r7, #7
    e7d8:	movs	r7, #0
    e7da:	add.w	r1, r3, #8
    e7de:	cmp	fp, r7
    e7e0:	str	r1, [sp, #40]	; 0x28
    e7e2:	ldrd	r4, r5, [r3]
    e7e6:	strb.w	r7, [sp, #111]	; 0x6f
    e7ea:	blt.w	ee9a <_svfprintf_r+0xdca>
    e7ee:	bic.w	r3, r2, #128	; 0x80
    e7f2:	str	r3, [sp, #12]
    e7f4:	orrs.w	r3, r4, r5
    e7f8:	bne.w	e42c <_svfprintf_r+0x35c>
    e7fc:	cmp.w	fp, #0
    e800:	beq.w	e9ee <_svfprintf_r+0x91e>
    e804:	movs	r4, #0
    e806:	add	r6, sp, #256	; 0x100
    e808:	adds	r4, #48	; 0x30
    e80a:	strb.w	r4, [r6, #-65]!
    e80e:	b.n	e460 <_svfprintf_r+0x390>
    e810:	str	r3, [sp, #52]	; 0x34
    e812:	mov	fp, r5
    e814:	cmp	r2, #0
    e816:	bne.w	f778 <_svfprintf_r+0x16a8>
    e81a:	ldr	r3, [sp, #12]
    e81c:	ldr	r0, [pc, #700]	; (eadc <_svfprintf_r+0xa0c>)
    e81e:	lsls	r5, r3, #26
    e820:	bpl.w	e98e <_svfprintf_r+0x8be>
    e824:	ldr	r7, [sp, #40]	; 0x28
    e826:	adds	r7, #7
    e828:	bic.w	r3, r7, #7
    e82c:	ldrd	r4, r5, [r3]
    e830:	add.w	r2, r3, #8
    e834:	str	r2, [sp, #40]	; 0x28
    e836:	ldr	r2, [sp, #12]
    e838:	ands.w	r7, r2, #1
    e83c:	beq.w	ecb2 <_svfprintf_r+0xbe2>
    e840:	orrs.w	r3, r4, r5
    e844:	beq.w	f24c <_svfprintf_r+0x117c>
    e848:	ldrb.w	r2, [sp, #52]	; 0x34
    e84c:	strb.w	r2, [sp, #113]	; 0x71
    e850:	movs	r7, #0
    e852:	ldr	r2, [sp, #12]
    e854:	strb.w	r7, [sp, #111]	; 0x6f
    e858:	movs	r3, #48	; 0x30
    e85a:	cmp	fp, r7
    e85c:	strb.w	r3, [sp, #112]	; 0x70
    e860:	orr.w	r3, r2, #2
    e864:	blt.w	f5c4 <_svfprintf_r+0x14f4>
    e868:	bic.w	r3, r2, #128	; 0x80
    e86c:	orr.w	r3, r3, #2
    e870:	str	r3, [sp, #12]
    e872:	add	r6, sp, #192	; 0xc0
    e874:	lsrs	r3, r4, #4
    e876:	and.w	r1, r4, #15
    e87a:	orr.w	r3, r3, r5, lsl #28
    e87e:	lsrs	r2, r5, #4
    e880:	mov	r4, r3
    e882:	mov	r5, r2
    e884:	ldrb	r3, [r0, r1]
    e886:	strb.w	r3, [r6, #-1]!
    e88a:	orrs.w	r3, r4, r5
    e88e:	bne.n	e874 <_svfprintf_r+0x7a4>
    e890:	b.n	e460 <_svfprintf_r+0x390>
    e892:	ldr	r1, [sp, #40]	; 0x28
    e894:	str	r3, [sp, #52]	; 0x34
    e896:	ldr	r2, [r1, #0]
    e898:	strb.w	r2, [sp, #152]	; 0x98
    e89c:	movs	r3, #0
    e89e:	mov	r2, r1
    e8a0:	mov	r7, r3
    e8a2:	strb.w	r3, [sp, #111]	; 0x6f
    e8a6:	adds	r2, #4
    e8a8:	movs	r3, #1
    e8aa:	str	r3, [sp, #16]
    e8ac:	mov	fp, r7
    e8ae:	str	r7, [sp, #60]	; 0x3c
    e8b0:	str	r2, [sp, #40]	; 0x28
    e8b2:	str	r3, [sp, #36]	; 0x24
    e8b4:	add	r6, sp, #152	; 0x98
    e8b6:	b.n	e47c <_svfprintf_r+0x3ac>
    e8b8:	str	r3, [sp, #52]	; 0x34
    e8ba:	mov	fp, r5
    e8bc:	cmp	r2, #0
    e8be:	beq.w	e3e8 <_svfprintf_r+0x318>
    e8c2:	strb.w	r1, [sp, #111]	; 0x6f
    e8c6:	b.n	e3e8 <_svfprintf_r+0x318>
    e8c8:	ldr	r3, [sp, #12]
    e8ca:	orr.w	r3, r3, #64	; 0x40
    e8ce:	str	r3, [sp, #12]
    e8d0:	ldrb.w	r3, [r8]
    e8d4:	b.n	e184 <_svfprintf_r+0xb4>
    e8d6:	ldrb.w	r3, [r8]
    e8da:	cmp	r1, #0
    e8dc:	bne.w	e184 <_svfprintf_r+0xb4>
    e8e0:	movs	r2, #1
    e8e2:	movs	r1, #32
    e8e4:	b.n	e184 <_svfprintf_r+0xb4>
    e8e6:	ldr	r3, [sp, #12]
    e8e8:	orr.w	r3, r3, #1
    e8ec:	str	r3, [sp, #12]
    e8ee:	ldrb.w	r3, [r8]
    e8f2:	b.n	e184 <_svfprintf_r+0xb4>
    e8f4:	ldr	r4, [sp, #40]	; 0x28
    e8f6:	ldr	r3, [r4, #0]
    e8f8:	str	r3, [sp, #32]
    e8fa:	mov	r0, r3
    e8fc:	cmp	r0, #0
    e8fe:	mov	r3, r4
    e900:	add.w	r3, r3, #4
    e904:	blt.w	e248 <_svfprintf_r+0x178>
    e908:	str	r3, [sp, #40]	; 0x28
    e90a:	ldrb.w	r3, [r8]
    e90e:	b.n	e184 <_svfprintf_r+0xb4>
    e910:	ldrb.w	r3, [r8]
    e914:	movs	r2, #1
    e916:	movs	r1, #43	; 0x2b
    e918:	b.n	e184 <_svfprintf_r+0xb4>
    e91a:	ldr	r3, [sp, #12]
    e91c:	orr.w	r3, r3, #32
    e920:	str	r3, [sp, #12]
    e922:	ldrb.w	r3, [r8]
    e926:	b.n	e184 <_svfprintf_r+0xb4>
    e928:	ldr	r2, [sp, #40]	; 0x28
    e92a:	str	r3, [sp, #52]	; 0x34
    e92c:	ldr	r6, [r2, #0]
    e92e:	movs	r4, #0
    e930:	strb.w	r4, [sp, #111]	; 0x6f
    e934:	adds	r7, r2, #4
    e936:	cmp	r6, #0
    e938:	beq.w	f574 <_svfprintf_r+0x14a4>
    e93c:	cmp	r5, #0
    e93e:	blt.w	f404 <_svfprintf_r+0x1334>
    e942:	mov	r2, r5
    e944:	mov	r1, r4
    e946:	mov	r0, r6
    e948:	bl	c5e0 <memchr>
    e94c:	cmp	r0, #0
    e94e:	beq.w	f618 <_svfprintf_r+0x1548>
    e952:	subs	r3, r0, r6
    e954:	str	r3, [sp, #36]	; 0x24
    e956:	mov	fp, r4
    e958:	bic.w	r3, r3, r3, asr #31
    e95c:	str	r7, [sp, #40]	; 0x28
    e95e:	str	r3, [sp, #16]
    e960:	str.w	fp, [sp, #60]	; 0x3c
    e964:	ldrb.w	r7, [sp, #111]	; 0x6f
    e968:	b.n	e474 <_svfprintf_r+0x3a4>
    e96a:	str	r3, [sp, #52]	; 0x34
    e96c:	mov	fp, r5
    e96e:	cmp	r2, #0
    e970:	beq.w	e7c6 <_svfprintf_r+0x6f6>
    e974:	strb.w	r1, [sp, #111]	; 0x6f
    e978:	b.n	e7c6 <_svfprintf_r+0x6f6>
    e97a:	str	r3, [sp, #52]	; 0x34
    e97c:	mov	fp, r5
    e97e:	cmp	r2, #0
    e980:	bne.w	f7a0 <_svfprintf_r+0x16d0>
    e984:	ldr	r3, [sp, #12]
    e986:	ldr	r0, [pc, #344]	; (eae0 <_svfprintf_r+0xa10>)
    e988:	lsls	r5, r3, #26
    e98a:	bmi.w	e824 <_svfprintf_r+0x754>
    e98e:	ldr	r3, [sp, #12]
    e990:	lsls	r4, r3, #27
    e992:	bpl.w	f212 <_svfprintf_r+0x1142>
    e996:	ldr	r2, [sp, #40]	; 0x28
    e998:	mov	r3, r2
    e99a:	adds	r3, #4
    e99c:	ldr	r4, [r2, #0]
    e99e:	str	r3, [sp, #40]	; 0x28
    e9a0:	movs	r5, #0
    e9a2:	b.n	e836 <_svfprintf_r+0x766>
    e9a4:	ldrb.w	r3, [r8]
    e9a8:	cmp	r3, #108	; 0x6c
    e9aa:	beq.w	f332 <_svfprintf_r+0x1262>
    e9ae:	ldr	r0, [sp, #12]
    e9b0:	orr.w	r0, r0, #16
    e9b4:	str	r0, [sp, #12]
    e9b6:	b.w	e184 <_svfprintf_r+0xb4>
    e9ba:	cmp	r2, #0
    e9bc:	bne.w	f798 <_svfprintf_r+0x16c8>
    e9c0:	ldr	r3, [sp, #12]
    e9c2:	lsls	r3, r3, #26
    e9c4:	bpl.w	f076 <_svfprintf_r+0xfa6>
    e9c8:	ldr	r2, [sp, #40]	; 0x28
    e9ca:	ldr	r1, [sp, #28]
    e9cc:	ldr	r3, [r2, #0]
    e9ce:	asrs	r5, r1, #31
    e9d0:	mov	r0, r1
    e9d2:	adds	r2, #4
    e9d4:	mov	r1, r5
    e9d6:	str	r2, [sp, #40]	; 0x28
    e9d8:	strd	r0, r1, [r3]
    e9dc:	b.w	e11e <_svfprintf_r+0x4e>
    e9e0:	ldr	r0, [pc, #252]	; (eae0 <_svfprintf_r+0xa10>)
    e9e2:	str	r2, [sp, #52]	; 0x34
    e9e4:	cmp.w	fp, #0
    e9e8:	bne.w	ecd4 <_svfprintf_r+0xc04>
    e9ec:	mov	r7, fp
    e9ee:	mov.w	fp, #0
    e9f2:	str.w	fp, [sp, #36]	; 0x24
    e9f6:	add	r6, sp, #192	; 0xc0
    e9f8:	b.n	e466 <_svfprintf_r+0x396>
    e9fa:	str	r3, [sp, #52]	; 0x34
    e9fc:	cmp	r2, #0
    e9fe:	bne.w	f790 <_svfprintf_r+0x16c0>
    ea02:	ldr	r2, [sp, #52]	; 0x34
    ea04:	cmp	r2, #0
    ea06:	beq.w	e2b6 <_svfprintf_r+0x1e6>
    ea0a:	movs	r3, #0
    ea0c:	movs	r1, #1
    ea0e:	mov	r7, r3
    ea10:	str	r1, [sp, #16]
    ea12:	strb.w	r2, [sp, #152]	; 0x98
    ea16:	strb.w	r3, [sp, #111]	; 0x6f
    ea1a:	mov	fp, r3
    ea1c:	str	r3, [sp, #60]	; 0x3c
    ea1e:	str	r1, [sp, #36]	; 0x24
    ea20:	add	r6, sp, #152	; 0x98
    ea22:	b.n	e47c <_svfprintf_r+0x3ac>
    ea24:	cmp.w	fp, #0
    ea28:	beq.w	f648 <_svfprintf_r+0x1578>
    ea2c:	movs	r7, #0
    ea2e:	movs	r4, #0
    ea30:	movs	r5, #0
    ea32:	b.n	e31c <_svfprintf_r+0x24c>
    ea34:	ldr	r0, [pc, #168]	; (eae0 <_svfprintf_r+0xa10>)
    ea36:	str	r3, [sp, #12]
    ea38:	str	r2, [sp, #52]	; 0x34
    ea3a:	orrs.w	r3, r4, r5
    ea3e:	str	r7, [sp, #40]	; 0x28
    ea40:	mov.w	r7, #0
    ea44:	bne.w	e872 <_svfprintf_r+0x7a2>
    ea48:	movs	r4, #0
    ea4a:	movs	r5, #0
    ea4c:	b.n	e872 <_svfprintf_r+0x7a2>
    ea4e:	ldr	r4, [sp, #148]	; 0x94
    ea50:	b.n	e51c <_svfprintf_r+0x44c>
    ea52:	ldr	r3, [sp, #52]	; 0x34
    ea54:	cmp	r3, #101	; 0x65
    ea56:	ble.w	ebae <_svfprintf_r+0xade>
    ea5a:	movs	r2, #0
    ea5c:	movs	r3, #0
    ea5e:	ldrd	r0, r1, [sp, #64]	; 0x40
    ea62:	bl	b764 <__aeabi_dcmpeq>
    ea66:	cmp	r0, #0
    ea68:	beq.w	ecd8 <_svfprintf_r+0xc08>
    ea6c:	ldr	r3, [sp, #144]	; 0x90
    ea6e:	ldr	r2, [pc, #116]	; (eae4 <_svfprintf_r+0xa14>)
    ea70:	str.w	r2, [r9]
    ea74:	adds	r3, #1
    ea76:	adds	r4, #1
    ea78:	movs	r2, #1
    ea7a:	cmp	r3, #7
    ea7c:	str	r4, [sp, #148]	; 0x94
    ea7e:	str	r3, [sp, #144]	; 0x90
    ea80:	str.w	r2, [r9, #4]
    ea84:	bgt.w	f264 <_svfprintf_r+0x1194>
    ea88:	add.w	r9, r9, #8
    ea8c:	ldr	r3, [sp, #116]	; 0x74
    ea8e:	ldr	r2, [sp, #56]	; 0x38
    ea90:	cmp	r3, r2
    ea92:	blt.n	ea9c <_svfprintf_r+0x9cc>
    ea94:	ldr	r3, [sp, #12]
    ea96:	lsls	r3, r3, #31
    ea98:	bpl.w	e5fc <_svfprintf_r+0x52c>
    ea9c:	ldr	r3, [sp, #144]	; 0x90
    ea9e:	ldr	r1, [sp, #72]	; 0x48
    eaa0:	ldr	r2, [sp, #76]	; 0x4c
    eaa2:	str.w	r2, [r9]
    eaa6:	adds	r3, #1
    eaa8:	add	r4, r1
    eaaa:	cmp	r3, #7
    eaac:	str	r4, [sp, #148]	; 0x94
    eaae:	str.w	r1, [r9, #4]
    eab2:	str	r3, [sp, #144]	; 0x90
    eab4:	bgt.w	f346 <_svfprintf_r+0x1276>
    eab8:	add.w	r9, r9, #8
    eabc:	ldr	r3, [sp, #56]	; 0x38
    eabe:	subs	r5, r3, #1
    eac0:	cmp	r5, #0
    eac2:	ble.w	e5fc <_svfprintf_r+0x52c>
    eac6:	ldr	r2, [pc, #32]	; (eae8 <_svfprintf_r+0xa18>)
    eac8:	ldr	r3, [sp, #144]	; 0x90
    eaca:	str	r2, [sp, #44]	; 0x2c
    eacc:	cmp	r5, #16
    eace:	ble.w	eea4 <_svfprintf_r+0xdd4>
    ead2:	movs	r6, #16
    ead4:	ldr	r7, [sp, #24]
    ead6:	ldr.w	fp, [sp, #20]
    eada:	b.n	eaf8 <_svfprintf_r+0xa28>
    eadc:	.word	0x00013f10
    eae0:	.word	0x00013f24
    eae4:	.word	0x00013f40
    eae8:	.word	0x00013ef0
    eaec:	add.w	r9, r9, #8
    eaf0:	subs	r5, #16
    eaf2:	cmp	r5, #16
    eaf4:	ble.w	eea4 <_svfprintf_r+0xdd4>
    eaf8:	adds	r3, #1
    eafa:	adds	r4, #16
    eafc:	cmp	r3, #7
    eafe:	str	r4, [sp, #148]	; 0x94
    eb00:	str	r3, [sp, #144]	; 0x90
    eb02:	str.w	sl, [r9]
    eb06:	str.w	r6, [r9, #4]
    eb0a:	ble.n	eaec <_svfprintf_r+0xa1c>
    eb0c:	add	r2, sp, #140	; 0x8c
    eb0e:	mov	r1, fp
    eb10:	mov	r0, r7
    eb12:	bl	13068 <__ssprint_r>
    eb16:	cmp	r0, #0
    eb18:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    eb1c:	ldr	r4, [sp, #148]	; 0x94
    eb1e:	ldr	r3, [sp, #144]	; 0x90
    eb20:	add.w	r9, sp, #192	; 0xc0
    eb24:	b.n	eaf0 <_svfprintf_r+0xa20>
    eb26:	ldr	r3, [sp, #32]
    eb28:	ldr	r2, [sp, #16]
    eb2a:	subs	r7, r3, r2
    eb2c:	cmp	r7, #0
    eb2e:	ble.w	e564 <_svfprintf_r+0x494>
    eb32:	ldr	r2, [pc, #752]	; (ee24 <_svfprintf_r+0xd54>)
    eb34:	ldr	r3, [sp, #144]	; 0x90
    eb36:	str	r2, [sp, #44]	; 0x2c
    eb38:	cmp	r7, #16
    eb3a:	ble.n	eb94 <_svfprintf_r+0xac4>
    eb3c:	mov	r2, r9
    eb3e:	mov	r1, r4
    eb40:	mov	r9, r7
    eb42:	movs	r5, #16
    eb44:	mov	r7, r6
    eb46:	ldr	r4, [sp, #24]
    eb48:	ldr	r6, [sp, #20]
    eb4a:	b.n	eb5a <_svfprintf_r+0xa8a>
    eb4c:	sub.w	r9, r9, #16
    eb50:	cmp.w	r9, #16
    eb54:	add.w	r2, r2, #8
    eb58:	ble.n	eb8c <_svfprintf_r+0xabc>
    eb5a:	adds	r3, #1
    eb5c:	adds	r1, #16
    eb5e:	cmp	r3, #7
    eb60:	str	r1, [sp, #148]	; 0x94
    eb62:	str	r3, [sp, #144]	; 0x90
    eb64:	str.w	sl, [r2]
    eb68:	str	r5, [r2, #4]
    eb6a:	ble.n	eb4c <_svfprintf_r+0xa7c>
    eb6c:	add	r2, sp, #140	; 0x8c
    eb6e:	mov	r1, r6
    eb70:	mov	r0, r4
    eb72:	bl	13068 <__ssprint_r>
    eb76:	cmp	r0, #0
    eb78:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    eb7c:	sub.w	r9, r9, #16
    eb80:	cmp.w	r9, #16
    eb84:	ldr	r1, [sp, #148]	; 0x94
    eb86:	ldr	r3, [sp, #144]	; 0x90
    eb88:	add	r2, sp, #192	; 0xc0
    eb8a:	bgt.n	eb5a <_svfprintf_r+0xa8a>
    eb8c:	mov	r6, r7
    eb8e:	mov	r4, r1
    eb90:	mov	r7, r9
    eb92:	mov	r9, r2
    eb94:	adds	r3, #1
    eb96:	ldr	r2, [sp, #44]	; 0x2c
    eb98:	str	r3, [sp, #144]	; 0x90
    eb9a:	add	r4, r7
    eb9c:	cmp	r3, #7
    eb9e:	str	r4, [sp, #148]	; 0x94
    eba0:	stmia.w	r9, {r2, r7}
    eba4:	bgt.w	f022 <_svfprintf_r+0xf52>
    eba8:	add.w	r9, r9, #8
    ebac:	b.n	e564 <_svfprintf_r+0x494>
    ebae:	ldr	r3, [sp, #56]	; 0x38
    ebb0:	ldr	r5, [sp, #144]	; 0x90
    ebb2:	cmp	r3, #1
    ebb4:	ble.w	efcc <_svfprintf_r+0xefc>
    ebb8:	adds	r5, #1
    ebba:	adds	r4, #1
    ebbc:	movs	r3, #1
    ebbe:	cmp	r5, #7
    ebc0:	str	r4, [sp, #148]	; 0x94
    ebc2:	str	r5, [sp, #144]	; 0x90
    ebc4:	str.w	r6, [r9]
    ebc8:	str.w	r3, [r9, #4]
    ebcc:	bgt.w	efee <_svfprintf_r+0xf1e>
    ebd0:	add.w	r9, r9, #8
    ebd4:	ldr	r2, [sp, #72]	; 0x48
    ebd6:	ldr	r3, [sp, #76]	; 0x4c
    ebd8:	str.w	r3, [r9]
    ebdc:	adds	r5, #1
    ebde:	add	r4, r2
    ebe0:	cmp	r5, #7
    ebe2:	str	r4, [sp, #148]	; 0x94
    ebe4:	str	r5, [sp, #144]	; 0x90
    ebe6:	str.w	r2, [r9, #4]
    ebea:	bgt.w	f008 <_svfprintf_r+0xf38>
    ebee:	add.w	r9, r9, #8
    ebf2:	movs	r3, #0
    ebf4:	movs	r2, #0
    ebf6:	ldrd	r0, r1, [sp, #64]	; 0x40
    ebfa:	bl	b764 <__aeabi_dcmpeq>
    ebfe:	ldr	r3, [sp, #56]	; 0x38
    ec00:	cmp	r0, #0
    ec02:	bne.w	ed8c <_svfprintf_r+0xcbc>
    ec06:	subs	r3, #1
    ec08:	adds	r5, #1
    ec0a:	adds	r6, #1
    ec0c:	add	r4, r3
    ec0e:	cmp	r5, #7
    ec10:	str	r5, [sp, #144]	; 0x90
    ec12:	str	r4, [sp, #148]	; 0x94
    ec14:	str.w	r6, [r9]
    ec18:	str.w	r3, [r9, #4]
    ec1c:	bgt.w	ee0a <_svfprintf_r+0xd3a>
    ec20:	add.w	r9, r9, #8
    ec24:	ldr	r2, [sp, #84]	; 0x54
    ec26:	str.w	r2, [r9, #4]
    ec2a:	adds	r5, #1
    ec2c:	add	r4, r2
    ec2e:	add	r3, sp, #124	; 0x7c
    ec30:	cmp	r5, #7
    ec32:	str	r4, [sp, #148]	; 0x94
    ec34:	str	r5, [sp, #144]	; 0x90
    ec36:	str.w	r3, [r9]
    ec3a:	ble.w	e5f8 <_svfprintf_r+0x528>
    ec3e:	add	r2, sp, #140	; 0x8c
    ec40:	ldr	r1, [sp, #20]
    ec42:	ldr	r0, [sp, #24]
    ec44:	bl	13068 <__ssprint_r>
    ec48:	cmp	r0, #0
    ec4a:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    ec4e:	ldr	r4, [sp, #148]	; 0x94
    ec50:	add.w	r9, sp, #192	; 0xc0
    ec54:	b.n	e5fc <_svfprintf_r+0x52c>
    ec56:	add	r2, sp, #140	; 0x8c
    ec58:	ldr	r1, [sp, #20]
    ec5a:	ldr	r0, [sp, #24]
    ec5c:	bl	13068 <__ssprint_r>
    ec60:	cmp	r0, #0
    ec62:	beq.w	e698 <_svfprintf_r+0x5c8>
    ec66:	b.w	e2c4 <_svfprintf_r+0x1f4>
    ec6a:	add	r2, sp, #140	; 0x8c
    ec6c:	ldr	r1, [sp, #20]
    ec6e:	ldr	r0, [sp, #24]
    ec70:	bl	13068 <__ssprint_r>
    ec74:	cmp	r0, #0
    ec76:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    ec7a:	ldr	r4, [sp, #148]	; 0x94
    ec7c:	add.w	r9, sp, #192	; 0xc0
    ec80:	b.n	e5d6 <_svfprintf_r+0x506>
    ec82:	add	r2, sp, #140	; 0x8c
    ec84:	ldr	r1, [sp, #20]
    ec86:	ldr	r0, [sp, #24]
    ec88:	bl	13068 <__ssprint_r>
    ec8c:	cmp	r0, #0
    ec8e:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    ec92:	ldr	r4, [sp, #148]	; 0x94
    ec94:	add.w	r9, sp, #192	; 0xc0
    ec98:	b.n	e53c <_svfprintf_r+0x46c>
    ec9a:	add	r2, sp, #140	; 0x8c
    ec9c:	ldr	r1, [sp, #20]
    ec9e:	ldr	r0, [sp, #24]
    eca0:	bl	13068 <__ssprint_r>
    eca4:	cmp	r0, #0
    eca6:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    ecaa:	ldr	r4, [sp, #148]	; 0x94
    ecac:	add.w	r9, sp, #192	; 0xc0
    ecb0:	b.n	e55c <_svfprintf_r+0x48c>
    ecb2:	cmp.w	fp, #0
    ecb6:	strb.w	r7, [sp, #111]	; 0x6f
    ecba:	blt.w	f27c <_svfprintf_r+0x11ac>
    ecbe:	bic.w	r3, r2, #128	; 0x80
    ecc2:	str	r3, [sp, #12]
    ecc4:	orrs.w	r3, r4, r5
    ecc8:	bne.w	e872 <_svfprintf_r+0x7a2>
    eccc:	cmp.w	fp, #0
    ecd0:	beq.w	e9ec <_svfprintf_r+0x91c>
    ecd4:	movs	r7, #0
    ecd6:	b.n	ea48 <_svfprintf_r+0x978>
    ecd8:	ldr	r5, [sp, #116]	; 0x74
    ecda:	cmp	r5, #0
    ecdc:	ble.w	f282 <_svfprintf_r+0x11b2>
    ece0:	ldr	r3, [sp, #60]	; 0x3c
    ece2:	ldr	r2, [sp, #56]	; 0x38
    ece4:	cmp	r3, r2
    ece6:	it	ge
    ece8:	movge	r3, r2
    ecea:	cmp	r3, #0
    ecec:	mov	r5, r3
    ecee:	ble.n	ed0c <_svfprintf_r+0xc3c>
    ecf0:	ldr	r3, [sp, #144]	; 0x90
    ecf2:	str.w	r6, [r9]
    ecf6:	adds	r3, #1
    ecf8:	add	r4, r5
    ecfa:	cmp	r3, #7
    ecfc:	str	r4, [sp, #148]	; 0x94
    ecfe:	str.w	r5, [r9, #4]
    ed02:	str	r3, [sp, #144]	; 0x90
    ed04:	bgt.w	f45a <_svfprintf_r+0x138a>
    ed08:	add.w	r9, r9, #8
    ed0c:	ldr	r3, [sp, #60]	; 0x3c
    ed0e:	cmp	r5, #0
    ed10:	it	ge
    ed12:	subge	r3, r3, r5
    ed14:	cmp	r3, #0
    ed16:	mov	r5, r3
    ed18:	ble.w	ef0c <_svfprintf_r+0xe3c>
    ed1c:	ldr	r2, [pc, #260]	; (ee24 <_svfprintf_r+0xd54>)
    ed1e:	ldr	r3, [sp, #144]	; 0x90
    ed20:	str	r2, [sp, #44]	; 0x2c
    ed22:	cmp	r5, #16
    ed24:	ble.w	f22e <_svfprintf_r+0x115e>
    ed28:	mov	r2, r4
    ed2a:	movs	r7, #16
    ed2c:	ldr.w	fp, [sp, #24]
    ed30:	ldr	r4, [sp, #20]
    ed32:	b.n	ed40 <_svfprintf_r+0xc70>
    ed34:	add.w	r9, r9, #8
    ed38:	subs	r5, #16
    ed3a:	cmp	r5, #16
    ed3c:	ble.w	f22c <_svfprintf_r+0x115c>
    ed40:	adds	r3, #1
    ed42:	adds	r2, #16
    ed44:	cmp	r3, #7
    ed46:	str	r2, [sp, #148]	; 0x94
    ed48:	str	r3, [sp, #144]	; 0x90
    ed4a:	str.w	sl, [r9]
    ed4e:	str.w	r7, [r9, #4]
    ed52:	ble.n	ed34 <_svfprintf_r+0xc64>
    ed54:	add	r2, sp, #140	; 0x8c
    ed56:	mov	r1, r4
    ed58:	mov	r0, fp
    ed5a:	bl	13068 <__ssprint_r>
    ed5e:	cmp	r0, #0
    ed60:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    ed64:	ldr	r2, [sp, #148]	; 0x94
    ed66:	ldr	r3, [sp, #144]	; 0x90
    ed68:	add.w	r9, sp, #192	; 0xc0
    ed6c:	b.n	ed38 <_svfprintf_r+0xc68>
    ed6e:	add	r2, sp, #140	; 0x8c
    ed70:	ldr	r1, [sp, #20]
    ed72:	ldr	r0, [sp, #24]
    ed74:	bl	13068 <__ssprint_r>
    ed78:	cmp	r0, #0
    ed7a:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    ed7e:	ldrb.w	r7, [sp, #111]	; 0x6f
    ed82:	ldr	r4, [sp, #148]	; 0x94
    ed84:	add.w	r9, sp, #192	; 0xc0
    ed88:	b.w	e51c <_svfprintf_r+0x44c>
    ed8c:	subs	r6, r3, #1
    ed8e:	cmp	r6, #0
    ed90:	ble.w	ec24 <_svfprintf_r+0xb54>
    ed94:	ldr	r3, [pc, #140]	; (ee24 <_svfprintf_r+0xd54>)
    ed96:	str	r3, [sp, #44]	; 0x2c
    ed98:	cmp	r6, #16
    ed9a:	ble.n	edf6 <_svfprintf_r+0xd26>
    ed9c:	str.w	r8, [sp, #36]	; 0x24
    eda0:	movs	r7, #16
    eda2:	mov	r8, r6
    eda4:	ldr.w	fp, [sp, #24]
    eda8:	ldr	r6, [sp, #20]
    edaa:	b.n	edba <_svfprintf_r+0xcea>
    edac:	sub.w	r8, r8, #16
    edb0:	cmp.w	r8, #16
    edb4:	add.w	r9, r9, #8
    edb8:	ble.n	edf0 <_svfprintf_r+0xd20>
    edba:	adds	r5, #1
    edbc:	adds	r4, #16
    edbe:	cmp	r5, #7
    edc0:	str	r4, [sp, #148]	; 0x94
    edc2:	str	r5, [sp, #144]	; 0x90
    edc4:	str.w	sl, [r9]
    edc8:	str.w	r7, [r9, #4]
    edcc:	ble.n	edac <_svfprintf_r+0xcdc>
    edce:	add	r2, sp, #140	; 0x8c
    edd0:	mov	r1, r6
    edd2:	mov	r0, fp
    edd4:	bl	13068 <__ssprint_r>
    edd8:	cmp	r0, #0
    edda:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    edde:	sub.w	r8, r8, #16
    ede2:	cmp.w	r8, #16
    ede6:	ldr	r4, [sp, #148]	; 0x94
    ede8:	ldr	r5, [sp, #144]	; 0x90
    edea:	add.w	r9, sp, #192	; 0xc0
    edee:	bgt.n	edba <_svfprintf_r+0xcea>
    edf0:	mov	r6, r8
    edf2:	ldr.w	r8, [sp, #36]	; 0x24
    edf6:	ldr	r3, [sp, #44]	; 0x2c
    edf8:	adds	r5, #1
    edfa:	add	r4, r6
    edfc:	cmp	r5, #7
    edfe:	str	r4, [sp, #148]	; 0x94
    ee00:	str	r5, [sp, #144]	; 0x90
    ee02:	stmia.w	r9, {r3, r6}
    ee06:	ble.w	ec20 <_svfprintf_r+0xb50>
    ee0a:	add	r2, sp, #140	; 0x8c
    ee0c:	ldr	r1, [sp, #20]
    ee0e:	ldr	r0, [sp, #24]
    ee10:	bl	13068 <__ssprint_r>
    ee14:	cmp	r0, #0
    ee16:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    ee1a:	ldr	r4, [sp, #148]	; 0x94
    ee1c:	ldr	r5, [sp, #144]	; 0x90
    ee1e:	add.w	r9, sp, #192	; 0xc0
    ee22:	b.n	ec24 <_svfprintf_r+0xb54>
    ee24:	.word	0x00013ef0
    ee28:	ldr	r1, [sp, #12]
    ee2a:	ands.w	r2, r1, #16
    ee2e:	beq.w	f1d8 <_svfprintf_r+0x1108>
    ee32:	ldr	r0, [sp, #40]	; 0x28
    ee34:	strb.w	r3, [sp, #111]	; 0x6f
    ee38:	cmp.w	fp, #0
    ee3c:	ldr	r4, [r0, #0]
    ee3e:	add.w	r7, r0, #4
    ee42:	mov.w	r5, #0
    ee46:	blt.n	ee96 <_svfprintf_r+0xdc6>
    ee48:	mov	r2, r1
    ee4a:	bic.w	r2, r2, #128	; 0x80
    ee4e:	str	r2, [sp, #12]
    ee50:	orrs.w	r2, r4, r5
    ee54:	str	r7, [sp, #40]	; 0x28
    ee56:	mov	r7, r3
    ee58:	bne.w	e42c <_svfprintf_r+0x35c>
    ee5c:	b.n	e7fc <_svfprintf_r+0x72c>
    ee5e:	ldr	r3, [sp, #12]
    ee60:	lsls	r0, r3, #27
    ee62:	bmi.n	eeba <_svfprintf_r+0xdea>
    ee64:	ldr	r3, [sp, #12]
    ee66:	lsls	r1, r3, #25
    ee68:	bpl.n	eeba <_svfprintf_r+0xdea>
    ee6a:	ldr	r1, [sp, #40]	; 0x28
    ee6c:	ldrsh.w	r4, [r1]
    ee70:	adds	r1, #4
    ee72:	asrs	r5, r4, #31
    ee74:	mov	r2, r4
    ee76:	mov	r3, r5
    ee78:	str	r1, [sp, #40]	; 0x28
    ee7a:	b.w	e406 <_svfprintf_r+0x336>
    ee7e:	ldr	r1, [sp, #40]	; 0x28
    ee80:	strb.w	r3, [sp, #111]	; 0x6f
    ee84:	cmp.w	fp, #0
    ee88:	ldr	r4, [r1, #0]
    ee8a:	add.w	r7, r1, #4
    ee8e:	mov.w	r5, #0
    ee92:	bge.w	f32e <_svfprintf_r+0x125e>
    ee96:	str	r7, [sp, #40]	; 0x28
    ee98:	mov	r7, r3
    ee9a:	orrs.w	r3, r4, r5
    ee9e:	bne.w	e42c <_svfprintf_r+0x35c>
    eea2:	b.n	e806 <_svfprintf_r+0x736>
    eea4:	adds	r3, #1
    eea6:	ldr	r2, [sp, #44]	; 0x2c
    eea8:	str	r3, [sp, #144]	; 0x90
    eeaa:	add	r4, r5
    eeac:	cmp	r3, #7
    eeae:	str	r4, [sp, #148]	; 0x94
    eeb0:	stmia.w	r9, {r2, r5}
    eeb4:	ble.w	e5f8 <_svfprintf_r+0x528>
    eeb8:	b.n	ec3e <_svfprintf_r+0xb6e>
    eeba:	ldr	r2, [sp, #40]	; 0x28
    eebc:	ldr	r4, [r2, #0]
    eebe:	mov	r3, r2
    eec0:	adds	r3, #4
    eec2:	asrs	r5, r4, #31
    eec4:	mov	r2, r4
    eec6:	str	r3, [sp, #40]	; 0x28
    eec8:	cmp	r2, #0
    eeca:	mov	r3, r5
    eecc:	sbcs.w	r3, r3, #0
    eed0:	bge.w	e410 <_svfprintf_r+0x340>
    eed4:	negs	r4, r4
    eed6:	mov.w	r7, #45	; 0x2d
    eeda:	sbc.w	r5, r5, r5, lsl #1
    eede:	cmp.w	fp, #0
    eee2:	strb.w	r7, [sp, #111]	; 0x6f
    eee6:	blt.w	e42c <_svfprintf_r+0x35c>
    eeea:	ldr	r3, [sp, #12]
    eeec:	bic.w	r3, r3, #128	; 0x80
    eef0:	str	r3, [sp, #12]
    eef2:	b.w	e42c <_svfprintf_r+0x35c>
    eef6:	add	r2, sp, #140	; 0x8c
    eef8:	ldr	r1, [sp, #20]
    eefa:	ldr	r0, [sp, #24]
    eefc:	bl	13068 <__ssprint_r>
    ef00:	cmp	r0, #0
    ef02:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    ef06:	ldr	r4, [sp, #148]	; 0x94
    ef08:	add.w	r9, sp, #192	; 0xc0
    ef0c:	ldr	r2, [sp, #60]	; 0x3c
    ef0e:	ldr	r3, [sp, #116]	; 0x74
    ef10:	add	r2, r6
    ef12:	mov	r7, r2
    ef14:	ldr	r2, [sp, #56]	; 0x38
    ef16:	cmp	r3, r2
    ef18:	blt.n	efaa <_svfprintf_r+0xeda>
    ef1a:	ldr	r2, [sp, #12]
    ef1c:	lsls	r5, r2, #31
    ef1e:	bmi.n	efaa <_svfprintf_r+0xeda>
    ef20:	ldr	r1, [sp, #56]	; 0x38
    ef22:	add	r6, r1
    ef24:	subs	r5, r6, r7
    ef26:	subs	r3, r1, r3
    ef28:	cmp	r5, r3
    ef2a:	it	ge
    ef2c:	movge	r5, r3
    ef2e:	cmp	r5, #0
    ef30:	mov	r6, r5
    ef32:	ble.n	ef50 <_svfprintf_r+0xe80>
    ef34:	ldr	r2, [sp, #144]	; 0x90
    ef36:	str.w	r7, [r9]
    ef3a:	adds	r2, #1
    ef3c:	add	r4, r5
    ef3e:	cmp	r2, #7
    ef40:	str	r4, [sp, #148]	; 0x94
    ef42:	str.w	r5, [r9, #4]
    ef46:	str	r2, [sp, #144]	; 0x90
    ef48:	bgt.w	f548 <_svfprintf_r+0x1478>
    ef4c:	add.w	r9, r9, #8
    ef50:	cmp	r6, #0
    ef52:	ite	ge
    ef54:	subge	r5, r3, r6
    ef56:	movlt	r5, r3
    ef58:	cmp	r5, #0
    ef5a:	ble.w	e5fc <_svfprintf_r+0x52c>
    ef5e:	ldr	r2, [pc, #744]	; (f248 <_svfprintf_r+0x1178>)
    ef60:	ldr	r3, [sp, #144]	; 0x90
    ef62:	str	r2, [sp, #44]	; 0x2c
    ef64:	cmp	r5, #16
    ef66:	ble.n	eea4 <_svfprintf_r+0xdd4>
    ef68:	movs	r6, #16
    ef6a:	ldr	r7, [sp, #24]
    ef6c:	ldr.w	fp, [sp, #20]
    ef70:	b.n	ef7c <_svfprintf_r+0xeac>
    ef72:	add.w	r9, r9, #8
    ef76:	subs	r5, #16
    ef78:	cmp	r5, #16
    ef7a:	ble.n	eea4 <_svfprintf_r+0xdd4>
    ef7c:	adds	r3, #1
    ef7e:	adds	r4, #16
    ef80:	cmp	r3, #7
    ef82:	str	r4, [sp, #148]	; 0x94
    ef84:	str	r3, [sp, #144]	; 0x90
    ef86:	str.w	sl, [r9]
    ef8a:	str.w	r6, [r9, #4]
    ef8e:	ble.n	ef72 <_svfprintf_r+0xea2>
    ef90:	add	r2, sp, #140	; 0x8c
    ef92:	mov	r1, fp
    ef94:	mov	r0, r7
    ef96:	bl	13068 <__ssprint_r>
    ef9a:	cmp	r0, #0
    ef9c:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    efa0:	ldr	r4, [sp, #148]	; 0x94
    efa2:	ldr	r3, [sp, #144]	; 0x90
    efa4:	add.w	r9, sp, #192	; 0xc0
    efa8:	b.n	ef76 <_svfprintf_r+0xea6>
    efaa:	ldr	r2, [sp, #144]	; 0x90
    efac:	ldr	r0, [sp, #72]	; 0x48
    efae:	ldr	r1, [sp, #76]	; 0x4c
    efb0:	str.w	r1, [r9]
    efb4:	adds	r2, #1
    efb6:	add	r4, r0
    efb8:	cmp	r2, #7
    efba:	str	r4, [sp, #148]	; 0x94
    efbc:	str.w	r0, [r9, #4]
    efc0:	str	r2, [sp, #144]	; 0x90
    efc2:	bgt.w	f52e <_svfprintf_r+0x145e>
    efc6:	add.w	r9, r9, #8
    efca:	b.n	ef20 <_svfprintf_r+0xe50>
    efcc:	ldr	r3, [sp, #12]
    efce:	lsls	r0, r3, #31
    efd0:	bmi.w	ebb8 <_svfprintf_r+0xae8>
    efd4:	adds	r5, #1
    efd6:	adds	r4, #1
    efd8:	movs	r3, #1
    efda:	cmp	r5, #7
    efdc:	str	r4, [sp, #148]	; 0x94
    efde:	str	r5, [sp, #144]	; 0x90
    efe0:	str.w	r6, [r9]
    efe4:	str.w	r3, [r9, #4]
    efe8:	ble.w	ec20 <_svfprintf_r+0xb50>
    efec:	b.n	ee0a <_svfprintf_r+0xd3a>
    efee:	add	r2, sp, #140	; 0x8c
    eff0:	ldr	r1, [sp, #20]
    eff2:	ldr	r0, [sp, #24]
    eff4:	bl	13068 <__ssprint_r>
    eff8:	cmp	r0, #0
    effa:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    effe:	ldr	r4, [sp, #148]	; 0x94
    f000:	ldr	r5, [sp, #144]	; 0x90
    f002:	add.w	r9, sp, #192	; 0xc0
    f006:	b.n	ebd4 <_svfprintf_r+0xb04>
    f008:	add	r2, sp, #140	; 0x8c
    f00a:	ldr	r1, [sp, #20]
    f00c:	ldr	r0, [sp, #24]
    f00e:	bl	13068 <__ssprint_r>
    f012:	cmp	r0, #0
    f014:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f018:	ldr	r4, [sp, #148]	; 0x94
    f01a:	ldr	r5, [sp, #144]	; 0x90
    f01c:	add.w	r9, sp, #192	; 0xc0
    f020:	b.n	ebf2 <_svfprintf_r+0xb22>
    f022:	add	r2, sp, #140	; 0x8c
    f024:	ldr	r1, [sp, #20]
    f026:	ldr	r0, [sp, #24]
    f028:	bl	13068 <__ssprint_r>
    f02c:	cmp	r0, #0
    f02e:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f032:	ldr	r4, [sp, #148]	; 0x94
    f034:	add.w	r9, sp, #192	; 0xc0
    f038:	b.w	e564 <_svfprintf_r+0x494>
    f03c:	ldr	r1, [sp, #12]
    f03e:	ands.w	r3, r1, #64	; 0x40
    f042:	beq.w	f1b8 <_svfprintf_r+0x10e8>
    f046:	ldr	r0, [sp, #40]	; 0x28
    f048:	strb.w	r2, [sp, #111]	; 0x6f
    f04c:	mov	r3, r0
    f04e:	cmp.w	fp, #0
    f052:	add.w	r3, r3, #4
    f056:	ldrh	r4, [r0, #0]
    f058:	mov.w	r5, #0
    f05c:	blt.w	f3e0 <_svfprintf_r+0x1310>
    f060:	bic.w	r1, r1, #128	; 0x80
    f064:	str	r1, [sp, #12]
    f066:	orrs.w	r1, r4, r5
    f06a:	str	r3, [sp, #40]	; 0x28
    f06c:	beq.w	ea24 <_svfprintf_r+0x954>
    f070:	mov	r7, r2
    f072:	b.w	e31c <_svfprintf_r+0x24c>
    f076:	ldr	r3, [sp, #12]
    f078:	lsls	r7, r3, #27
    f07a:	bmi.n	f094 <_svfprintf_r+0xfc4>
    f07c:	ldr	r3, [sp, #12]
    f07e:	lsls	r6, r3, #25
    f080:	bpl.n	f094 <_svfprintf_r+0xfc4>
    f082:	ldr	r2, [sp, #40]	; 0x28
    f084:	ldr	r3, [r2, #0]
    f086:	adds	r2, #4
    f088:	str	r2, [sp, #40]	; 0x28
    f08a:	ldrh.w	r2, [sp, #28]
    f08e:	strh	r2, [r3, #0]
    f090:	b.w	e11e <_svfprintf_r+0x4e>
    f094:	ldr	r2, [sp, #40]	; 0x28
    f096:	ldr	r3, [r2, #0]
    f098:	adds	r2, #4
    f09a:	str	r2, [sp, #40]	; 0x28
    f09c:	ldr	r2, [sp, #28]
    f09e:	str	r2, [r3, #0]
    f0a0:	b.w	e11e <_svfprintf_r+0x4e>
    f0a4:	ldrd	r0, r1, [sp, #64]	; 0x40
    f0a8:	mov	r2, r0
    f0aa:	mov	r3, r1
    f0ac:	bl	b7c8 <__aeabi_dcmpun>
    f0b0:	cmp	r0, #0
    f0b2:	bne.w	f6b0 <_svfprintf_r+0x15e0>
    f0b6:	ldr	r3, [sp, #52]	; 0x34
    f0b8:	cmp.w	fp, #4294967295
    f0bc:	bic.w	r7, r3, #32
    f0c0:	beq.w	f592 <_svfprintf_r+0x14c2>
    f0c4:	cmp	r7, #71	; 0x47
    f0c6:	beq.w	f3ce <_svfprintf_r+0x12fe>
    f0ca:	ldr	r3, [sp, #68]	; 0x44
    f0cc:	ldr	r2, [sp, #12]
    f0ce:	cmp	r3, #0
    f0d0:	orr.w	r2, r2, #256	; 0x100
    f0d4:	str	r2, [sp, #44]	; 0x2c
    f0d6:	blt.w	f5ca <_svfprintf_r+0x14fa>
    f0da:	vldr	d7, [sp, #64]	; 0x40
    f0de:	vstr	d7, [sp, #96]	; 0x60
    f0e2:	movs	r3, #0
    f0e4:	str	r3, [sp, #16]
    f0e6:	ldr	r3, [sp, #52]	; 0x34
    f0e8:	cmp	r3, #102	; 0x66
    f0ea:	beq.w	f598 <_svfprintf_r+0x14c8>
    f0ee:	cmp	r3, #70	; 0x46
    f0f0:	beq.w	f37e <_svfprintf_r+0x12ae>
    f0f4:	cmp	r7, #69	; 0x45
    f0f6:	ite	eq
    f0f8:	addeq.w	r5, fp, #1
    f0fc:	movne	r5, fp
    f0fe:	add	r2, sp, #132	; 0x84
    f100:	add	r3, sp, #120	; 0x78
    f102:	str	r2, [sp, #4]
    f104:	str	r3, [sp, #0]
    f106:	mov	r2, r5
    f108:	add	r3, sp, #116	; 0x74
    f10a:	movs	r1, #2
    f10c:	vldr	d0, [sp, #96]	; 0x60
    f110:	ldr	r0, [sp, #24]
    f112:	bl	108d8 <_dtoa_r>
    f116:	ldr	r3, [sp, #52]	; 0x34
    f118:	cmp	r3, #103	; 0x67
    f11a:	mov	r6, r0
    f11c:	bne.w	f5f6 <_svfprintf_r+0x1526>
    f120:	ldr	r3, [sp, #12]
    f122:	lsls	r2, r3, #31
    f124:	bpl.w	f69a <_svfprintf_r+0x15ca>
    f128:	adds	r4, r6, r5
    f12a:	movs	r2, #0
    f12c:	movs	r3, #0
    f12e:	ldrd	r0, r1, [sp, #96]	; 0x60
    f132:	bl	b764 <__aeabi_dcmpeq>
    f136:	cmp	r0, #0
    f138:	bne.w	f456 <_svfprintf_r+0x1386>
    f13c:	ldr	r3, [sp, #132]	; 0x84
    f13e:	cmp	r4, r3
    f140:	bls.n	f150 <_svfprintf_r+0x1080>
    f142:	movs	r1, #48	; 0x30
    f144:	adds	r2, r3, #1
    f146:	str	r2, [sp, #132]	; 0x84
    f148:	strb	r1, [r3, #0]
    f14a:	ldr	r3, [sp, #132]	; 0x84
    f14c:	cmp	r4, r3
    f14e:	bhi.n	f144 <_svfprintf_r+0x1074>
    f150:	subs	r3, r3, r6
    f152:	cmp	r7, #71	; 0x47
    f154:	str	r3, [sp, #56]	; 0x38
    f156:	beq.w	f448 <_svfprintf_r+0x1378>
    f15a:	ldr	r3, [sp, #52]	; 0x34
    f15c:	cmp	r3, #101	; 0x65
    f15e:	ble.w	f614 <_svfprintf_r+0x1544>
    f162:	ldr	r3, [sp, #52]	; 0x34
    f164:	cmp	r3, #102	; 0x66
    f166:	ldr	r3, [sp, #116]	; 0x74
    f168:	str	r3, [sp, #60]	; 0x3c
    f16a:	beq.w	f62e <_svfprintf_r+0x155e>
    f16e:	ldr	r2, [sp, #60]	; 0x3c
    f170:	ldr	r1, [sp, #56]	; 0x38
    f172:	cmp	r2, r1
    f174:	blt.w	f5dc <_svfprintf_r+0x150c>
    f178:	ldr	r3, [sp, #12]
    f17a:	lsls	r1, r3, #31
    f17c:	bmi.w	f69e <_svfprintf_r+0x15ce>
    f180:	bic.w	r3, r2, r2, asr #31
    f184:	str	r2, [sp, #36]	; 0x24
    f186:	movs	r2, #103	; 0x67
    f188:	str	r2, [sp, #52]	; 0x34
    f18a:	ldr	r2, [sp, #16]
    f18c:	cmp	r2, #0
    f18e:	bne.w	f3f0 <_svfprintf_r+0x1320>
    f192:	str	r3, [sp, #16]
    f194:	ldr	r3, [sp, #44]	; 0x2c
    f196:	str	r3, [sp, #12]
    f198:	mov	fp, r2
    f19a:	ldrb.w	r7, [sp, #111]	; 0x6f
    f19e:	b.w	e474 <_svfprintf_r+0x3a4>
    f1a2:	bic.w	r7, r7, #7
    f1a6:	vldr	d7, [r7]
    f1aa:	add.w	r3, r7, #8
    f1ae:	vstr	d7, [sp, #64]	; 0x40
    f1b2:	str	r3, [sp, #40]	; 0x28
    f1b4:	b.w	e6cc <_svfprintf_r+0x5fc>
    f1b8:	ldr	r1, [sp, #40]	; 0x28
    f1ba:	strb.w	r3, [sp, #111]	; 0x6f
    f1be:	cmp.w	fp, #0
    f1c2:	ldr	r4, [r1, #0]
    f1c4:	add.w	r7, r1, #4
    f1c8:	mov.w	r5, #0
    f1cc:	bge.w	f328 <_svfprintf_r+0x1258>
    f1d0:	str	r7, [sp, #40]	; 0x28
    f1d2:	movs	r7, #0
    f1d4:	b.w	e31c <_svfprintf_r+0x24c>
    f1d8:	ldr	r1, [sp, #12]
    f1da:	ands.w	r3, r1, #64	; 0x40
    f1de:	beq.w	ee7e <_svfprintf_r+0xdae>
    f1e2:	ldr	r0, [sp, #40]	; 0x28
    f1e4:	strb.w	r2, [sp, #111]	; 0x6f
    f1e8:	mov	r3, r0
    f1ea:	cmp.w	fp, #0
    f1ee:	add.w	r3, r3, #4
    f1f2:	ldrh	r4, [r0, #0]
    f1f4:	mov.w	r5, #0
    f1f8:	blt.w	f3da <_svfprintf_r+0x130a>
    f1fc:	bic.w	r1, r1, #128	; 0x80
    f200:	str	r1, [sp, #12]
    f202:	orrs.w	r1, r4, r5
    f206:	str	r3, [sp, #40]	; 0x28
    f208:	mov	r7, r2
    f20a:	bne.w	e42c <_svfprintf_r+0x35c>
    f20e:	b.w	e7fc <_svfprintf_r+0x72c>
    f212:	ldr	r3, [sp, #12]
    f214:	ldr	r2, [sp, #40]	; 0x28
    f216:	tst.w	r3, #64	; 0x40
    f21a:	mov	r3, r2
    f21c:	beq.w	f3e4 <_svfprintf_r+0x1314>
    f220:	adds	r3, #4
    f222:	ldrh	r4, [r2, #0]
    f224:	str	r3, [sp, #40]	; 0x28
    f226:	movs	r5, #0
    f228:	b.w	e836 <_svfprintf_r+0x766>
    f22c:	mov	r4, r2
    f22e:	adds	r3, #1
    f230:	ldr	r2, [sp, #44]	; 0x2c
    f232:	str	r3, [sp, #144]	; 0x90
    f234:	add	r4, r5
    f236:	cmp	r3, #7
    f238:	str	r4, [sp, #148]	; 0x94
    f23a:	stmia.w	r9, {r2, r5}
    f23e:	bgt.w	eef6 <_svfprintf_r+0xe26>
    f242:	add.w	r9, r9, #8
    f246:	b.n	ef0c <_svfprintf_r+0xe3c>
    f248:	.word	0x00013ef0
    f24c:	movs	r7, #0
    f24e:	cmp	fp, r7
    f250:	strb.w	r7, [sp, #111]	; 0x6f
    f254:	blt.w	ea48 <_svfprintf_r+0x978>
    f258:	ldr	r3, [sp, #12]
    f25a:	bic.w	r3, r3, #128	; 0x80
    f25e:	str	r3, [sp, #12]
    f260:	b.w	e9e4 <_svfprintf_r+0x914>
    f264:	add	r2, sp, #140	; 0x8c
    f266:	ldr	r1, [sp, #20]
    f268:	ldr	r0, [sp, #24]
    f26a:	bl	13068 <__ssprint_r>
    f26e:	cmp	r0, #0
    f270:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f274:	ldr	r4, [sp, #148]	; 0x94
    f276:	add.w	r9, sp, #192	; 0xc0
    f27a:	b.n	ea8c <_svfprintf_r+0x9bc>
    f27c:	ldr	r7, [sp, #40]	; 0x28
    f27e:	b.w	ea3a <_svfprintf_r+0x96a>
    f282:	ldr	r3, [sp, #144]	; 0x90
    f284:	ldr	r2, [pc, #736]	; (f568 <_svfprintf_r+0x1498>)
    f286:	str.w	r2, [r9]
    f28a:	adds	r3, #1
    f28c:	adds	r4, #1
    f28e:	movs	r2, #1
    f290:	cmp	r3, #7
    f292:	str	r4, [sp, #148]	; 0x94
    f294:	str	r3, [sp, #144]	; 0x90
    f296:	str.w	r2, [r9, #4]
    f29a:	bgt.w	f3b4 <_svfprintf_r+0x12e4>
    f29e:	add.w	r9, r9, #8
    f2a2:	cbnz	r5, f2b0 <_svfprintf_r+0x11e0>
    f2a4:	ldr	r3, [sp, #56]	; 0x38
    f2a6:	cbnz	r3, f2b0 <_svfprintf_r+0x11e0>
    f2a8:	ldr	r3, [sp, #12]
    f2aa:	lsls	r7, r3, #31
    f2ac:	bpl.w	e5fc <_svfprintf_r+0x52c>
    f2b0:	ldr	r3, [sp, #144]	; 0x90
    f2b2:	ldr	r1, [sp, #72]	; 0x48
    f2b4:	ldr	r2, [sp, #76]	; 0x4c
    f2b6:	str.w	r2, [r9]
    f2ba:	adds	r3, #1
    f2bc:	add	r4, r1
    f2be:	cmp	r3, #7
    f2c0:	str	r4, [sp, #148]	; 0x94
    f2c2:	str.w	r1, [r9, #4]
    f2c6:	str	r3, [sp, #144]	; 0x90
    f2c8:	bgt.w	f666 <_svfprintf_r+0x1596>
    f2cc:	add.w	r9, r9, #8
    f2d0:	negs	r5, r5
    f2d2:	cmp	r5, #0
    f2d4:	ble.w	f42c <_svfprintf_r+0x135c>
    f2d8:	ldr	r2, [pc, #656]	; (f56c <_svfprintf_r+0x149c>)
    f2da:	str	r2, [sp, #44]	; 0x2c
    f2dc:	cmp	r5, #16
    f2de:	ble.w	f474 <_svfprintf_r+0x13a4>
    f2e2:	mov	r2, r4
    f2e4:	movs	r7, #16
    f2e6:	ldr.w	fp, [sp, #24]
    f2ea:	ldr	r4, [sp, #20]
    f2ec:	b.n	f2fa <_svfprintf_r+0x122a>
    f2ee:	add.w	r9, r9, #8
    f2f2:	subs	r5, #16
    f2f4:	cmp	r5, #16
    f2f6:	ble.w	f472 <_svfprintf_r+0x13a2>
    f2fa:	adds	r3, #1
    f2fc:	adds	r2, #16
    f2fe:	cmp	r3, #7
    f300:	str	r2, [sp, #148]	; 0x94
    f302:	str	r3, [sp, #144]	; 0x90
    f304:	str.w	sl, [r9]
    f308:	str.w	r7, [r9, #4]
    f30c:	ble.n	f2ee <_svfprintf_r+0x121e>
    f30e:	add	r2, sp, #140	; 0x8c
    f310:	mov	r1, r4
    f312:	mov	r0, fp
    f314:	bl	13068 <__ssprint_r>
    f318:	cmp	r0, #0
    f31a:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f31e:	ldr	r2, [sp, #148]	; 0x94
    f320:	ldr	r3, [sp, #144]	; 0x90
    f322:	add.w	r9, sp, #192	; 0xc0
    f326:	b.n	f2f2 <_svfprintf_r+0x1222>
    f328:	ldr	r2, [sp, #12]
    f32a:	b.w	e7a0 <_svfprintf_r+0x6d0>
    f32e:	ldr	r2, [sp, #12]
    f330:	b.n	ee4a <_svfprintf_r+0xd7a>
    f332:	ldr	r3, [sp, #12]
    f334:	orr.w	r3, r3, #32
    f338:	str	r3, [sp, #12]
    f33a:	add.w	r8, r8, #1
    f33e:	ldrb.w	r3, [r8]
    f342:	b.w	e184 <_svfprintf_r+0xb4>
    f346:	add	r2, sp, #140	; 0x8c
    f348:	ldr	r1, [sp, #20]
    f34a:	ldr	r0, [sp, #24]
    f34c:	bl	13068 <__ssprint_r>
    f350:	cmp	r0, #0
    f352:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f356:	ldr	r4, [sp, #148]	; 0x94
    f358:	add.w	r9, sp, #192	; 0xc0
    f35c:	b.w	eabc <_svfprintf_r+0x9ec>
    f360:	movs	r1, #64	; 0x40
    f362:	ldr	r0, [sp, #24]
    f364:	bl	c040 <_malloc_r>
    f368:	ldr	r2, [sp, #20]
    f36a:	str	r0, [r2, #0]
    f36c:	str	r0, [r2, #16]
    f36e:	cmp	r0, #0
    f370:	beq.w	f75a <_svfprintf_r+0x168a>
    f374:	ldr	r2, [sp, #20]
    f376:	movs	r3, #64	; 0x40
    f378:	str	r3, [r2, #20]
    f37a:	b.w	e0fe <_svfprintf_r+0x2e>
    f37e:	add	r2, sp, #132	; 0x84
    f380:	add	r3, sp, #120	; 0x78
    f382:	str	r2, [sp, #4]
    f384:	str	r3, [sp, #0]
    f386:	mov	r2, fp
    f388:	add	r3, sp, #116	; 0x74
    f38a:	movs	r1, #3
    f38c:	vldr	d0, [sp, #96]	; 0x60
    f390:	ldr	r0, [sp, #24]
    f392:	bl	108d8 <_dtoa_r>
    f396:	mov	r5, fp
    f398:	mov	r6, r0
    f39a:	ldr	r3, [sp, #52]	; 0x34
    f39c:	cmp	r3, #70	; 0x46
    f39e:	add.w	r4, r6, r5
    f3a2:	bne.w	f12a <_svfprintf_r+0x105a>
    f3a6:	ldrb	r3, [r6, #0]
    f3a8:	cmp	r3, #48	; 0x30
    f3aa:	beq.w	f6bc <_svfprintf_r+0x15ec>
    f3ae:	ldr	r5, [sp, #116]	; 0x74
    f3b0:	add	r4, r5
    f3b2:	b.n	f12a <_svfprintf_r+0x105a>
    f3b4:	add	r2, sp, #140	; 0x8c
    f3b6:	ldr	r1, [sp, #20]
    f3b8:	ldr	r0, [sp, #24]
    f3ba:	bl	13068 <__ssprint_r>
    f3be:	cmp	r0, #0
    f3c0:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f3c4:	ldr	r5, [sp, #116]	; 0x74
    f3c6:	ldr	r4, [sp, #148]	; 0x94
    f3c8:	add.w	r9, sp, #192	; 0xc0
    f3cc:	b.n	f2a2 <_svfprintf_r+0x11d2>
    f3ce:	cmp.w	fp, #0
    f3d2:	it	eq
    f3d4:	moveq.w	fp, #1
    f3d8:	b.n	f0ca <_svfprintf_r+0xffa>
    f3da:	str	r3, [sp, #40]	; 0x28
    f3dc:	mov	r7, r2
    f3de:	b.n	ee9a <_svfprintf_r+0xdca>
    f3e0:	str	r3, [sp, #40]	; 0x28
    f3e2:	b.n	f1d2 <_svfprintf_r+0x1102>
    f3e4:	adds	r3, #4
    f3e6:	ldr	r4, [r2, #0]
    f3e8:	str	r3, [sp, #40]	; 0x28
    f3ea:	movs	r5, #0
    f3ec:	b.w	e836 <_svfprintf_r+0x766>
    f3f0:	movs	r7, #45	; 0x2d
    f3f2:	str	r3, [sp, #16]
    f3f4:	ldr	r3, [sp, #44]	; 0x2c
    f3f6:	str	r3, [sp, #12]
    f3f8:	strb.w	r7, [sp, #111]	; 0x6f
    f3fc:	mov.w	fp, #0
    f400:	b.w	e476 <_svfprintf_r+0x3a6>
    f404:	mov	r0, r6
    f406:	bl	cec0 <strlen>
    f40a:	mov	fp, r4
    f40c:	mov	r3, r0
    f40e:	str	r0, [sp, #36]	; 0x24
    f410:	b.w	e958 <_svfprintf_r+0x888>
    f414:	add	r2, sp, #140	; 0x8c
    f416:	ldr	r1, [sp, #20]
    f418:	ldr	r0, [sp, #24]
    f41a:	bl	13068 <__ssprint_r>
    f41e:	cmp	r0, #0
    f420:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f424:	ldr	r4, [sp, #148]	; 0x94
    f426:	ldr	r3, [sp, #144]	; 0x90
    f428:	add.w	r9, sp, #192	; 0xc0
    f42c:	ldr	r1, [sp, #56]	; 0x38
    f42e:	str.w	r6, [r9]
    f432:	adds	r3, #1
    f434:	add	r4, r1
    f436:	cmp	r3, #7
    f438:	str	r4, [sp, #148]	; 0x94
    f43a:	str	r3, [sp, #144]	; 0x90
    f43c:	str.w	r1, [r9, #4]
    f440:	ble.w	e5f8 <_svfprintf_r+0x528>
    f444:	b.w	ec3e <_svfprintf_r+0xb6e>
    f448:	ldr	r3, [sp, #116]	; 0x74
    f44a:	adds	r5, r3, #3
    f44c:	blt.n	f48c <_svfprintf_r+0x13bc>
    f44e:	cmp	fp, r3
    f450:	blt.n	f48c <_svfprintf_r+0x13bc>
    f452:	str	r3, [sp, #60]	; 0x3c
    f454:	b.n	f16e <_svfprintf_r+0x109e>
    f456:	mov	r3, r4
    f458:	b.n	f150 <_svfprintf_r+0x1080>
    f45a:	add	r2, sp, #140	; 0x8c
    f45c:	ldr	r1, [sp, #20]
    f45e:	ldr	r0, [sp, #24]
    f460:	bl	13068 <__ssprint_r>
    f464:	cmp	r0, #0
    f466:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f46a:	ldr	r4, [sp, #148]	; 0x94
    f46c:	add.w	r9, sp, #192	; 0xc0
    f470:	b.n	ed0c <_svfprintf_r+0xc3c>
    f472:	mov	r4, r2
    f474:	adds	r3, #1
    f476:	ldr	r2, [sp, #44]	; 0x2c
    f478:	str	r3, [sp, #144]	; 0x90
    f47a:	add	r4, r5
    f47c:	cmp	r3, #7
    f47e:	str	r4, [sp, #148]	; 0x94
    f480:	stmia.w	r9, {r2, r5}
    f484:	bgt.n	f414 <_svfprintf_r+0x1344>
    f486:	add.w	r9, r9, #8
    f48a:	b.n	f42c <_svfprintf_r+0x135c>
    f48c:	ldr	r2, [sp, #52]	; 0x34
    f48e:	subs	r2, #2
    f490:	str	r2, [sp, #52]	; 0x34
    f492:	subs	r3, #1
    f494:	cmp	r3, #0
    f496:	ldrb.w	r2, [sp, #52]	; 0x34
    f49a:	str	r3, [sp, #116]	; 0x74
    f49c:	it	lt
    f49e:	neglt	r3, r3
    f4a0:	strb.w	r2, [sp, #124]	; 0x7c
    f4a4:	ite	lt
    f4a6:	movlt	r2, #45	; 0x2d
    f4a8:	movge	r2, #43	; 0x2b
    f4aa:	cmp	r3, #9
    f4ac:	strb.w	r2, [sp, #125]	; 0x7d
    f4b0:	ble.w	f68a <_svfprintf_r+0x15ba>
    f4b4:	add.w	r0, sp, #139	; 0x8b
    f4b8:	mov	r4, r0
    f4ba:	ldr	r2, [pc, #180]	; (f570 <_svfprintf_r+0x14a0>)
    f4bc:	smull	r2, r1, r2, r3
    f4c0:	asrs	r2, r3, #31
    f4c2:	rsb	r2, r2, r1, asr #2
    f4c6:	add.w	r1, r2, r2, lsl #2
    f4ca:	sub.w	r3, r3, r1, lsl #1
    f4ce:	add.w	r1, r3, #48	; 0x30
    f4d2:	cmp	r2, #9
    f4d4:	mov	r3, r2
    f4d6:	strb.w	r1, [r4, #-1]!
    f4da:	bgt.n	f4ba <_svfprintf_r+0x13ea>
    f4dc:	mov	r1, r4
    f4de:	adds	r3, #48	; 0x30
    f4e0:	uxtb	r2, r3
    f4e2:	strb.w	r2, [r1, #-1]!
    f4e6:	cmp	r0, r1
    f4e8:	bls.w	f754 <_svfprintf_r+0x1684>
    f4ec:	add.w	r1, sp, #126	; 0x7e
    f4f0:	mov	r3, r4
    f4f2:	b.n	f4f8 <_svfprintf_r+0x1428>
    f4f4:	ldrb.w	r2, [r3], #1
    f4f8:	strb.w	r2, [r1], #1
    f4fc:	cmp	r0, r3
    f4fe:	bne.n	f4f4 <_svfprintf_r+0x1424>
    f500:	adds	r3, r0, #1
    f502:	subs	r3, r3, r4
    f504:	add.w	r2, sp, #126	; 0x7e
    f508:	add	r3, r2
    f50a:	add	r2, sp, #124	; 0x7c
    f50c:	subs	r3, r3, r2
    f50e:	ldr	r2, [sp, #56]	; 0x38
    f510:	str	r3, [sp, #84]	; 0x54
    f512:	cmp	r2, #1
    f514:	add	r3, r2
    f516:	str	r3, [sp, #36]	; 0x24
    f518:	ble.w	f6ea <_svfprintf_r+0x161a>
    f51c:	ldr	r3, [sp, #36]	; 0x24
    f51e:	ldr	r2, [sp, #72]	; 0x48
    f520:	add	r3, r2
    f522:	movs	r2, #0
    f524:	str	r3, [sp, #36]	; 0x24
    f526:	str	r2, [sp, #60]	; 0x3c
    f528:	bic.w	r3, r3, r3, asr #31
    f52c:	b.n	f18a <_svfprintf_r+0x10ba>
    f52e:	add	r2, sp, #140	; 0x8c
    f530:	ldr	r1, [sp, #20]
    f532:	ldr	r0, [sp, #24]
    f534:	bl	13068 <__ssprint_r>
    f538:	cmp	r0, #0
    f53a:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f53e:	ldr	r3, [sp, #116]	; 0x74
    f540:	ldr	r4, [sp, #148]	; 0x94
    f542:	add.w	r9, sp, #192	; 0xc0
    f546:	b.n	ef20 <_svfprintf_r+0xe50>
    f548:	add	r2, sp, #140	; 0x8c
    f54a:	ldr	r1, [sp, #20]
    f54c:	ldr	r0, [sp, #24]
    f54e:	bl	13068 <__ssprint_r>
    f552:	cmp	r0, #0
    f554:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f558:	ldr	r3, [sp, #116]	; 0x74
    f55a:	ldr	r2, [sp, #56]	; 0x38
    f55c:	ldr	r4, [sp, #148]	; 0x94
    f55e:	subs	r3, r2, r3
    f560:	add.w	r9, sp, #192	; 0xc0
    f564:	b.n	ef50 <_svfprintf_r+0xe80>
    f566:	nop
    f568:	.word	0x00013f40
    f56c:	.word	0x00013ef0
    f570:	.word	0x66666667
    f574:	cmp	r5, #6
    f576:	mov	r3, r5
    f578:	it	cs
    f57a:	movcs	r3, #6
    f57c:	str	r3, [sp, #36]	; 0x24
    f57e:	bic.w	r3, r3, r3, asr #31
    f582:	mov	fp, r6
    f584:	str	r7, [sp, #40]	; 0x28
    f586:	str	r6, [sp, #60]	; 0x3c
    f588:	mov	r7, r6
    f58a:	str	r3, [sp, #16]
    f58c:	ldr	r6, [pc, #536]	; (f7a8 <_svfprintf_r+0x16d8>)
    f58e:	b.w	e474 <_svfprintf_r+0x3a4>
    f592:	mov.w	fp, #6
    f596:	b.n	f0ca <_svfprintf_r+0xffa>
    f598:	add	r2, sp, #132	; 0x84
    f59a:	add	r3, sp, #120	; 0x78
    f59c:	str	r2, [sp, #4]
    f59e:	str	r3, [sp, #0]
    f5a0:	mov	r2, fp
    f5a2:	add	r3, sp, #116	; 0x74
    f5a4:	movs	r1, #3
    f5a6:	vldr	d0, [sp, #96]	; 0x60
    f5aa:	ldr	r0, [sp, #24]
    f5ac:	bl	108d8 <_dtoa_r>
    f5b0:	mov	r5, fp
    f5b2:	mov	r6, r0
    f5b4:	add.w	r4, r0, fp
    f5b8:	b.n	f3a6 <_svfprintf_r+0x12d6>
    f5ba:	movs	r7, #45	; 0x2d
    f5bc:	strb.w	r7, [sp, #111]	; 0x6f
    f5c0:	b.w	e71a <_svfprintf_r+0x64a>
    f5c4:	str	r3, [sp, #12]
    f5c6:	b.w	e872 <_svfprintf_r+0x7a2>
    f5ca:	ldrd	r1, r2, [sp, #64]	; 0x40
    f5ce:	add.w	r3, r2, #2147483648	; 0x80000000
    f5d2:	str	r3, [sp, #100]	; 0x64
    f5d4:	movs	r3, #45	; 0x2d
    f5d6:	str	r1, [sp, #96]	; 0x60
    f5d8:	str	r3, [sp, #16]
    f5da:	b.n	f0e6 <_svfprintf_r+0x1016>
    f5dc:	ldr	r2, [sp, #72]	; 0x48
    f5de:	ldr	r3, [sp, #56]	; 0x38
    f5e0:	add	r3, r2
    f5e2:	ldr	r2, [sp, #60]	; 0x3c
    f5e4:	str	r3, [sp, #36]	; 0x24
    f5e6:	cmp	r2, #0
    f5e8:	ble.w	f6fe <_svfprintf_r+0x162e>
    f5ec:	movs	r2, #103	; 0x67
    f5ee:	bic.w	r3, r3, r3, asr #31
    f5f2:	str	r2, [sp, #52]	; 0x34
    f5f4:	b.n	f18a <_svfprintf_r+0x10ba>
    f5f6:	ldr	r3, [sp, #52]	; 0x34
    f5f8:	cmp	r3, #71	; 0x47
    f5fa:	bne.w	f128 <_svfprintf_r+0x1058>
    f5fe:	ldr	r3, [sp, #12]
    f600:	lsls	r3, r3, #31
    f602:	bmi.w	f39a <_svfprintf_r+0x12ca>
    f606:	ldr	r3, [sp, #132]	; 0x84
    f608:	cmp	r7, #71	; 0x47
    f60a:	sub.w	r3, r3, r6
    f60e:	str	r3, [sp, #56]	; 0x38
    f610:	beq.w	f448 <_svfprintf_r+0x1378>
    f614:	ldr	r3, [sp, #116]	; 0x74
    f616:	b.n	f492 <_svfprintf_r+0x13c2>
    f618:	bic.w	r3, r5, r5, asr #31
    f61c:	str	r7, [sp, #40]	; 0x28
    f61e:	str	r3, [sp, #16]
    f620:	str	r5, [sp, #36]	; 0x24
    f622:	mov	fp, r0
    f624:	str	r0, [sp, #60]	; 0x3c
    f626:	ldrb.w	r7, [sp, #111]	; 0x6f
    f62a:	b.w	e474 <_svfprintf_r+0x3a4>
    f62e:	cmp	r3, #0
    f630:	ble.n	f70e <_svfprintf_r+0x163e>
    f632:	cmp.w	fp, #0
    f636:	bne.n	f6d8 <_svfprintf_r+0x1608>
    f638:	ldr	r2, [sp, #12]
    f63a:	lsls	r4, r2, #31
    f63c:	bmi.n	f6d8 <_svfprintf_r+0x1608>
    f63e:	mov	r2, r3
    f640:	str	r2, [sp, #36]	; 0x24
    f642:	bic.w	r3, r3, r3, asr #31
    f646:	b.n	f18a <_svfprintf_r+0x10ba>
    f648:	ldr	r3, [sp, #12]
    f64a:	lsls	r3, r3, #31
    f64c:	mov	r7, fp
    f64e:	bpl.n	f65c <_svfprintf_r+0x158c>
    f650:	add	r6, sp, #256	; 0x100
    f652:	movs	r3, #48	; 0x30
    f654:	strb.w	r3, [r6, #-65]!
    f658:	b.w	e460 <_svfprintf_r+0x390>
    f65c:	str.w	fp, [sp, #36]	; 0x24
    f660:	add	r6, sp, #192	; 0xc0
    f662:	b.w	e466 <_svfprintf_r+0x396>
    f666:	add	r2, sp, #140	; 0x8c
    f668:	ldr	r1, [sp, #20]
    f66a:	ldr	r0, [sp, #24]
    f66c:	bl	13068 <__ssprint_r>
    f670:	cmp	r0, #0
    f672:	bne.w	e2c4 <_svfprintf_r+0x1f4>
    f676:	ldr	r5, [sp, #116]	; 0x74
    f678:	ldr	r4, [sp, #148]	; 0x94
    f67a:	ldr	r3, [sp, #144]	; 0x90
    f67c:	add.w	r9, sp, #192	; 0xc0
    f680:	b.n	f2d0 <_svfprintf_r+0x1200>
    f682:	mov	r8, r4
    f684:	movs	r5, #0
    f686:	b.w	e188 <_svfprintf_r+0xb8>
    f68a:	adds	r3, #48	; 0x30
    f68c:	movs	r2, #48	; 0x30
    f68e:	strb.w	r3, [sp, #127]	; 0x7f
    f692:	strb.w	r2, [sp, #126]	; 0x7e
    f696:	add	r3, sp, #128	; 0x80
    f698:	b.n	f50a <_svfprintf_r+0x143a>
    f69a:	ldr	r3, [sp, #132]	; 0x84
    f69c:	b.n	f150 <_svfprintf_r+0x1080>
    f69e:	ldr	r2, [sp, #72]	; 0x48
    f6a0:	ldr	r3, [sp, #60]	; 0x3c
    f6a2:	add	r3, r2
    f6a4:	movs	r2, #103	; 0x67
    f6a6:	str	r3, [sp, #36]	; 0x24
    f6a8:	str	r2, [sp, #52]	; 0x34
    f6aa:	bic.w	r3, r3, r3, asr #31
    f6ae:	b.n	f18a <_svfprintf_r+0x10ba>
    f6b0:	ldr	r6, [pc, #248]	; (f7ac <_svfprintf_r+0x16dc>)
    f6b2:	ldr	r3, [pc, #252]	; (f7b0 <_svfprintf_r+0x16e0>)
    f6b4:	ldrb.w	r7, [sp, #111]	; 0x6f
    f6b8:	b.w	e71e <_svfprintf_r+0x64e>
    f6bc:	movs	r2, #0
    f6be:	movs	r3, #0
    f6c0:	ldrd	r0, r1, [sp, #96]	; 0x60
    f6c4:	bl	b764 <__aeabi_dcmpeq>
    f6c8:	cmp	r0, #0
    f6ca:	bne.w	f3ae <_svfprintf_r+0x12de>
    f6ce:	rsb	r5, r5, #1
    f6d2:	str	r5, [sp, #116]	; 0x74
    f6d4:	add	r4, r5
    f6d6:	b.n	f12a <_svfprintf_r+0x105a>
    f6d8:	ldr	r3, [sp, #60]	; 0x3c
    f6da:	ldr	r2, [sp, #72]	; 0x48
    f6dc:	adds	r5, r3, r2
    f6de:	add.w	r3, r5, fp
    f6e2:	str	r3, [sp, #36]	; 0x24
    f6e4:	bic.w	r3, r3, r3, asr #31
    f6e8:	b.n	f18a <_svfprintf_r+0x10ba>
    f6ea:	ldr	r3, [sp, #12]
    f6ec:	ands.w	r3, r3, #1
    f6f0:	bne.w	f51c <_svfprintf_r+0x144c>
    f6f4:	str	r3, [sp, #60]	; 0x3c
    f6f6:	ldr	r3, [sp, #36]	; 0x24
    f6f8:	bic.w	r3, r3, r3, asr #31
    f6fc:	b.n	f18a <_svfprintf_r+0x10ba>
    f6fe:	ldr	r3, [sp, #60]	; 0x3c
    f700:	ldr	r2, [sp, #36]	; 0x24
    f702:	rsb	r3, r3, #1
    f706:	add	r2, r3
    f708:	mov	r3, r2
    f70a:	str	r2, [sp, #36]	; 0x24
    f70c:	b.n	f5ec <_svfprintf_r+0x151c>
    f70e:	cmp.w	fp, #0
    f712:	bne.n	f71a <_svfprintf_r+0x164a>
    f714:	ldr	r3, [sp, #12]
    f716:	lsls	r0, r3, #31
    f718:	bpl.n	f72a <_svfprintf_r+0x165a>
    f71a:	ldr	r3, [sp, #72]	; 0x48
    f71c:	adds	r5, r3, #1
    f71e:	add.w	r3, r5, fp
    f722:	str	r3, [sp, #36]	; 0x24
    f724:	bic.w	r3, r3, r3, asr #31
    f728:	b.n	f18a <_svfprintf_r+0x10ba>
    f72a:	movs	r3, #1
    f72c:	str	r3, [sp, #36]	; 0x24
    f72e:	b.n	f18a <_svfprintf_r+0x10ba>
    f730:	ldr	r0, [sp, #40]	; 0x28
    f732:	ldrb.w	r3, [r8, #1]
    f736:	ldr	r5, [r0, #0]
    f738:	adds	r0, #4
    f73a:	cmp	r5, #0
    f73c:	str	r0, [sp, #40]	; 0x28
    f73e:	mov	r8, r4
    f740:	bge.w	e184 <_svfprintf_r+0xb4>
    f744:	mov.w	r5, #4294967295
    f748:	b.w	e184 <_svfprintf_r+0xb4>
    f74c:	strb.w	r1, [sp, #111]	; 0x6f
    f750:	b.w	e2e6 <_svfprintf_r+0x216>
    f754:	add.w	r3, sp, #126	; 0x7e
    f758:	b.n	f50a <_svfprintf_r+0x143a>
    f75a:	ldr	r2, [sp, #24]
    f75c:	movs	r3, #12
    f75e:	str	r3, [r2, #0]
    f760:	mov.w	r0, #4294967295
    f764:	b.w	e2d6 <_svfprintf_r+0x206>
    f768:	strb.w	r1, [sp, #111]	; 0x6f
    f76c:	b.w	e3e0 <_svfprintf_r+0x310>
    f770:	strb.w	r1, [sp, #111]	; 0x6f
    f774:	b.w	e6ac <_svfprintf_r+0x5dc>
    f778:	strb.w	r1, [sp, #111]	; 0x6f
    f77c:	b.w	e81a <_svfprintf_r+0x74a>
    f780:	strb.w	r1, [sp, #111]	; 0x6f
    f784:	b.w	e7be <_svfprintf_r+0x6ee>
    f788:	strb.w	r1, [sp, #111]	; 0x6f
    f78c:	b.w	e76a <_svfprintf_r+0x69a>
    f790:	strb.w	r1, [sp, #111]	; 0x6f
    f794:	b.w	ea02 <_svfprintf_r+0x932>
    f798:	strb.w	r1, [sp, #111]	; 0x6f
    f79c:	b.w	e9c0 <_svfprintf_r+0x8f0>
    f7a0:	strb.w	r1, [sp, #111]	; 0x6f
    f7a4:	b.w	e984 <_svfprintf_r+0x8b4>
    f7a8:	.word	0x00013f38
    f7ac:	.word	0x00013f0c
    f7b0:	.word	0x00013f08

0000f7b4 <__ssvfscanf_r>:
    f7b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7b8:	mov	fp, r1
    f7ba:	ldrsh.w	r1, [r1, #12]
    f7be:	sub.w	sp, sp, #692	; 0x2b4
    f7c2:	mov	sl, r0
    f7c4:	lsls	r0, r1, #18
    f7c6:	mov	r4, r2
    f7c8:	str	r3, [sp, #20]
    f7ca:	bmi.n	f7e0 <__ssvfscanf_r+0x2c>
    f7cc:	ldr.w	r3, [fp, #100]	; 0x64
    f7d0:	orr.w	r1, r1, #8192	; 0x2000
    f7d4:	bic.w	r3, r3, #8192	; 0x2000
    f7d8:	strh.w	r1, [fp, #12]
    f7dc:	str.w	r3, [fp, #100]	; 0x64
    f7e0:	mov	r6, r4
    f7e2:	movs	r3, #0
    f7e4:	str	r3, [sp, #28]
    f7e6:	str	r3, [sp, #16]
    f7e8:	mov	r7, r3
    f7ea:	str	r3, [sp, #24]
    f7ec:	ldrb.w	r3, [r6], #1
    f7f0:	str	r3, [sp, #68]	; 0x44
    f7f2:	cbz	r3, f850 <__ssvfscanf_r+0x9c>
    f7f4:	bl	c00c <__locale_ctype_ptr>
    f7f8:	ldr	r2, [sp, #68]	; 0x44
    f7fa:	add	r0, r2
    f7fc:	ldrb	r3, [r0, #1]
    f7fe:	and.w	r3, r3, #8
    f802:	and.w	r5, r3, #255	; 0xff
    f806:	cbz	r3, f85a <__ssvfscanf_r+0xa6>
    f808:	ldr.w	r3, [fp, #4]
    f80c:	b.n	f832 <__ssvfscanf_r+0x7e>
    f80e:	bl	c00c <__locale_ctype_ptr>
    f812:	ldr.w	r3, [fp]
    f816:	ldrb	r2, [r3, #0]
    f818:	add	r0, r2
    f81a:	adds	r3, #1
    f81c:	ldrb	r2, [r0, #1]
    f81e:	lsls	r1, r2, #28
    f820:	bpl.n	f842 <__ssvfscanf_r+0x8e>
    f822:	ldr.w	r2, [fp, #4]
    f826:	str.w	r3, [fp]
    f82a:	subs	r3, r2, #1
    f82c:	adds	r7, #1
    f82e:	str.w	r3, [fp, #4]
    f832:	cmp	r3, #0
    f834:	bgt.n	f80e <__ssvfscanf_r+0x5a>
    f836:	mov	r1, fp
    f838:	mov	r0, sl
    f83a:	bl	131ec <__ssrefill_r>
    f83e:	cmp	r0, #0
    f840:	beq.n	f80e <__ssvfscanf_r+0x5a>
    f842:	mov	r4, r6
    f844:	mov	r6, r4
    f846:	ldrb.w	r3, [r6], #1
    f84a:	str	r3, [sp, #68]	; 0x44
    f84c:	cmp	r3, #0
    f84e:	bne.n	f7f4 <__ssvfscanf_r+0x40>
    f850:	ldr	r0, [sp, #24]
    f852:	add.w	sp, sp, #692	; 0x2b4
    f856:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f85a:	cmp	r2, #37	; 0x25
    f85c:	bne.w	f968 <__ssvfscanf_r+0x1b4>
    f860:	ldrb.w	r8, [r4, #1]
    f864:	mov	r4, r5
    f866:	adds	r3, r6, #1
    f868:	cmp.w	r8, #120	; 0x78
    f86c:	bhi.w	fcf6 <__ssvfscanf_r+0x542>
    f870:	tbh	[pc, r8, lsl #1]
    f874:	.word	0x02410092
    f878:	.word	0x02410241
    f87c:	.word	0x02410241
    f880:	.word	0x02410241
    f884:	.word	0x02410241
    f888:	.word	0x02410241
    f88c:	.word	0x02410241
    f890:	.word	0x02410241
    f894:	.word	0x02410241
    f898:	.word	0x02410241
    f89c:	.word	0x02410241
    f8a0:	.word	0x02410241
    f8a4:	.word	0x02410241
    f8a8:	.word	0x02410241
    f8ac:	.word	0x02410241
    f8b0:	.word	0x02410241
    f8b4:	.word	0x02410241
    f8b8:	.word	0x02410241
    f8bc:	.word	0x00790241
    f8c0:	.word	0x02410241
    f8c4:	.word	0x02410241
    f8c8:	.word	0x024101d8
    f8cc:	.word	0x02410241
    f8d0:	.word	0x02410241
    f8d4:	.word	0x01cf01cf
    f8d8:	.word	0x01cf01cf
    f8dc:	.word	0x01cf01cf
    f8e0:	.word	0x01cf01cf
    f8e4:	.word	0x01cf01cf
    f8e8:	.word	0x02410241
    f8ec:	.word	0x02410241
    f8f0:	.word	0x02410241
    f8f4:	.word	0x02410241
    f8f8:	.word	0x02410241
    f8fc:	.word	0x01b901c1
    f900:	.word	0x01b90241
    f904:	.word	0x02410241
    f908:	.word	0x02410241
    f90c:	.word	0x024101b3
    f910:	.word	0x01a30241
    f914:	.word	0x02410241
    f918:	.word	0x02410241
    f91c:	.word	0x02410241
    f920:	.word	0x02410241
    f924:	.word	0x02410193
    f928:	.word	0x01510241
    f92c:	.word	0x02410241
    f930:	.word	0x02410241
    f934:	.word	0x02410241
    f938:	.word	0x01220241
    f93c:	.word	0x01b90188
    f940:	.word	0x01b901b9
    f944:	.word	0x0098011c
    f948:	.word	0x02410241
    f94c:	.word	0x024100d5
    f950:	.word	0x0101010d
    f954:	.word	0x024100f3
    f958:	.word	0x00eb0241
    f95c:	.word	0x00df0241
    f960:	.word	0x02410241
    f964:	.short	0x0193
    f966:	mov	r6, r3
    f968:	ldr.w	r3, [fp, #4]
    f96c:	cmp	r3, #0
    f96e:	ble.w	fe18 <__ssvfscanf_r+0x664>
    f972:	ldr.w	r3, [fp]
    f976:	ldrb.w	r2, [r6, #-1]
    f97a:	ldrb	r1, [r3, #0]
    f97c:	cmp	r1, r2
    f97e:	bne.w	f850 <__ssvfscanf_r+0x9c>
    f982:	ldr.w	r2, [fp, #4]
    f986:	adds	r3, #1
    f988:	subs	r2, #1
    f98a:	str.w	r3, [fp]
    f98e:	adds	r7, #1
    f990:	str.w	r2, [fp, #4]
    f994:	mov	r4, r6
    f996:	b.n	f844 <__ssvfscanf_r+0x90>
    f998:	mov.w	r0, #4294967295
    f99c:	add.w	sp, sp, #692	; 0x2b4
    f9a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9a4:	str	r3, [sp, #12]
    f9a6:	ldr.w	r3, [fp, #4]
    f9aa:	cmp	r3, #0
    f9ac:	ble.w	fe76 <__ssvfscanf_r+0x6c2>
    f9b0:	ldr	r3, [pc, #736]	; (fc94 <__ssvfscanf_r+0x4e0>)
    f9b2:	str	r3, [sp, #28]
    f9b4:	movs	r3, #0
    f9b6:	str	r3, [sp, #16]
    f9b8:	movs	r6, #3
    f9ba:	b.n	f9c0 <__ssvfscanf_r+0x20c>
    f9bc:	str.w	lr, [fp]
    f9c0:	bl	c00c <__locale_ctype_ptr>
    f9c4:	ldr.w	r2, [fp]
    f9c8:	ldrb	r1, [r2, #0]
    f9ca:	add	r0, r1
    f9cc:	add.w	lr, r2, #1
    f9d0:	ldrb	r3, [r0, #1]
    f9d2:	and.w	r3, r3, #8
    f9d6:	and.w	r8, r3, #255	; 0xff
    f9da:	cmp	r3, #0
    f9dc:	beq.w	fede <__ssvfscanf_r+0x72a>
    f9e0:	ldr.w	r3, [fp, #4]
    f9e4:	subs	r3, #1
    f9e6:	cmp	r3, #0
    f9e8:	add.w	r7, r7, #1
    f9ec:	str.w	r3, [fp, #4]
    f9f0:	bgt.n	f9bc <__ssvfscanf_r+0x208>
    f9f2:	mov	r1, fp
    f9f4:	mov	r0, sl
    f9f6:	bl	131ec <__ssrefill_r>
    f9fa:	cmp	r0, #0
    f9fc:	beq.n	f9c0 <__ssvfscanf_r+0x20c>
    f9fe:	ldr	r2, [sp, #24]
    fa00:	cmp	r2, #0
    fa02:	beq.n	f998 <__ssvfscanf_r+0x1e4>
    fa04:	ldrh.w	r3, [fp, #12]
    fa08:	tst.w	r3, #64	; 0x40
    fa0c:	mov	r3, r2
    fa0e:	it	ne
    fa10:	movne.w	r3, #4294967295
    fa14:	mov	r0, r3
    fa16:	add.w	sp, sp, #692	; 0x2b4
    fa1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa1e:	ldrb.w	r8, [r6, #1]
    fa22:	cmp.w	r8, #108	; 0x6c
    fa26:	beq.w	fe2e <__ssvfscanf_r+0x67a>
    fa2a:	orr.w	r5, r5, #1
    fa2e:	mov	r6, r3
    fa30:	b.n	f866 <__ssvfscanf_r+0xb2>
    fa32:	str	r3, [sp, #12]
    fa34:	ldr.w	r3, [fp, #4]
    fa38:	cmp	r3, #0
    fa3a:	ble.w	fece <__ssvfscanf_r+0x71a>
    fa3e:	ldr	r3, [pc, #600]	; (fc98 <__ssvfscanf_r+0x4e4>)
    fa40:	str	r3, [sp, #28]
    fa42:	movs	r3, #10
    fa44:	str	r3, [sp, #16]
    fa46:	movs	r6, #3
    fa48:	b.n	f9c0 <__ssvfscanf_r+0x20c>
    fa4a:	str	r3, [sp, #12]
    fa4c:	ldr.w	r3, [fp, #4]
    fa50:	cmp	r3, #0
    fa52:	ble.w	febe <__ssvfscanf_r+0x70a>
    fa56:	movs	r6, #2
    fa58:	b.n	f9c0 <__ssvfscanf_r+0x20c>
    fa5a:	str	r3, [sp, #12]
    fa5c:	ldr.w	r3, [fp, #4]
    fa60:	cmp	r3, #0
    fa62:	orr.w	r5, r5, #544	; 0x220
    fa66:	ble.w	fbaa <__ssvfscanf_r+0x3f6>
    fa6a:	ldr	r3, [pc, #556]	; (fc98 <__ssvfscanf_r+0x4e4>)
    fa6c:	str	r3, [sp, #28]
    fa6e:	movs	r3, #16
    fa70:	str	r3, [sp, #16]
    fa72:	movs	r6, #3
    fa74:	b.n	f9c0 <__ssvfscanf_r+0x20c>
    fa76:	str	r3, [sp, #12]
    fa78:	ldr.w	r3, [fp, #4]
    fa7c:	cmp	r3, #0
    fa7e:	ble.w	fbca <__ssvfscanf_r+0x416>
    fa82:	ldr	r3, [pc, #532]	; (fc98 <__ssvfscanf_r+0x4e4>)
    fa84:	str	r3, [sp, #28]
    fa86:	movs	r3, #8
    fa88:	str	r3, [sp, #16]
    fa8a:	movs	r6, #3
    fa8c:	b.n	f9c0 <__ssvfscanf_r+0x20c>
    fa8e:	lsls	r2, r5, #27
    fa90:	mov	r6, r3
    fa92:	str	r3, [sp, #12]
    fa94:	bmi.w	fc7c <__ssvfscanf_r+0x4c8>
    fa98:	lsls	r3, r5, #29
    fa9a:	bpl.w	fe46 <__ssvfscanf_r+0x692>
    fa9e:	ldr	r1, [sp, #20]
    faa0:	ldr	r3, [r1, #0]
    faa2:	strh	r7, [r3, #0]
    faa4:	adds	r3, r1, #4
    faa6:	str	r3, [sp, #20]
    faa8:	mov	r4, r6
    faaa:	b.n	f844 <__ssvfscanf_r+0x90>
    faac:	ldrb.w	r8, [r6, #1]
    fab0:	orr.w	r5, r5, #4
    fab4:	mov	r6, r3
    fab6:	b.n	f866 <__ssvfscanf_r+0xb2>
    fab8:	str	r3, [sp, #12]
    faba:	ldr.w	r3, [fp, #4]
    fabe:	cmp	r3, #0
    fac0:	ble.w	fe9e <__ssvfscanf_r+0x6ea>
    fac4:	cmp	r4, #0
    fac6:	it	eq
    fac8:	moveq	r4, #1
    faca:	ands.w	r3, r5, #1
    face:	bne.w	fd16 <__ssvfscanf_r+0x562>
    fad2:	lsls	r2, r5, #27
    fad4:	bpl.w	fdee <__ssvfscanf_r+0x63a>
    fad8:	mov	r5, r3
    fada:	b.n	faf0 <__ssvfscanf_r+0x33c>
    fadc:	add	r3, r2
    fade:	str.w	r3, [fp]
    fae2:	add	r5, r2
    fae4:	subs	r4, r4, r2
    fae6:	bl	131ec <__ssrefill_r>
    faea:	cmp	r0, #0
    faec:	bne.w	fde6 <__ssvfscanf_r+0x632>
    faf0:	ldr.w	r2, [fp, #4]
    faf4:	ldr.w	r3, [fp]
    faf8:	cmp	r2, r4
    fafa:	mov	r1, fp
    fafc:	mov	r0, sl
    fafe:	blt.n	fadc <__ssvfscanf_r+0x328>
    fb00:	subs	r2, r2, r4
    fb02:	add	r3, r4
    fb04:	str.w	r2, [fp, #4]
    fb08:	add	r5, r4
    fb0a:	str.w	r3, [fp]
    fb0e:	ldr	r6, [sp, #12]
    fb10:	add	r7, r5
    fb12:	mov	r4, r6
    fb14:	b.n	f844 <__ssvfscanf_r+0x90>
    fb16:	add.w	r9, sp, #80	; 0x50
    fb1a:	mov	r1, r3
    fb1c:	mov	r0, r9
    fb1e:	bl	12a88 <__sccl>
    fb22:	ldr.w	r3, [fp, #4]
    fb26:	cmp	r3, #0
    fb28:	mov	r6, r0
    fb2a:	ble.w	fe8e <__ssvfscanf_r+0x6da>
    fb2e:	cmp	r4, #0
    fb30:	ldr.w	r2, [fp]
    fb34:	it	eq
    fb36:	moveq.w	r4, #4294967295
    fb3a:	lsls	r3, r5, #27
    fb3c:	ldrb	r1, [r2, #0]
    fb3e:	bpl.w	fc82 <__ssvfscanf_r+0x4ce>
    fb42:	mov	r8, r4
    fb44:	movs	r5, #0
    fb46:	b.n	fb4a <__ssvfscanf_r+0x396>
    fb48:	ldrb	r1, [r2, #0]
    fb4a:	ldrb.w	r3, [r9, r1]
    fb4e:	adds	r2, #1
    fb50:	cmp	r3, #0
    fb52:	beq.w	fddc <__ssvfscanf_r+0x628>
    fb56:	ldr.w	r3, [fp, #4]
    fb5a:	str.w	r2, [fp]
    fb5e:	adds	r5, #1
    fb60:	subs	r3, #1
    fb62:	cmp	r5, r4
    fb64:	str.w	r3, [fp, #4]
    fb68:	beq.w	fdd6 <__ssvfscanf_r+0x622>
    fb6c:	cmp	r3, #0
    fb6e:	bgt.n	fb48 <__ssvfscanf_r+0x394>
    fb70:	mov	r1, fp
    fb72:	mov	r0, sl
    fb74:	bl	131ec <__ssrefill_r>
    fb78:	cmp	r0, #0
    fb7a:	bne.w	fdd4 <__ssvfscanf_r+0x620>
    fb7e:	ldr.w	r2, [fp]
    fb82:	b.n	fb48 <__ssvfscanf_r+0x394>
    fb84:	str	r3, [sp, #12]
    fb86:	ldr.w	r3, [fp, #4]
    fb8a:	cmp	r3, #0
    fb8c:	ble.n	fc04 <__ssvfscanf_r+0x450>
    fb8e:	ldr	r3, [pc, #260]	; (fc94 <__ssvfscanf_r+0x4e0>)
    fb90:	str	r3, [sp, #28]
    fb92:	movs	r3, #10
    fb94:	str	r3, [sp, #16]
    fb96:	movs	r6, #3
    fb98:	b.n	f9c0 <__ssvfscanf_r+0x20c>
    fb9a:	str	r3, [sp, #12]
    fb9c:	ldr.w	r3, [fp, #4]
    fba0:	cmp	r3, #0
    fba2:	orr.w	r5, r5, #512	; 0x200
    fba6:	bgt.w	fa6a <__ssvfscanf_r+0x2b6>
    fbaa:	mov	r1, fp
    fbac:	mov	r0, sl
    fbae:	bl	131ec <__ssrefill_r>
    fbb2:	cmp	r0, #0
    fbb4:	beq.w	fa6a <__ssvfscanf_r+0x2b6>
    fbb8:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fbba:	str	r3, [sp, #12]
    fbbc:	ldr.w	r3, [fp, #4]
    fbc0:	cmp	r3, #0
    fbc2:	orr.w	r5, r5, #1
    fbc6:	bgt.w	fa82 <__ssvfscanf_r+0x2ce>
    fbca:	mov	r1, fp
    fbcc:	mov	r0, sl
    fbce:	bl	131ec <__ssrefill_r>
    fbd2:	cmp	r0, #0
    fbd4:	beq.w	fa82 <__ssvfscanf_r+0x2ce>
    fbd8:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fbda:	ldrb.w	r8, [r6, #1]
    fbde:	orr.w	r5, r5, #2
    fbe2:	mov	r6, r3
    fbe4:	b.n	f866 <__ssvfscanf_r+0xb2>
    fbe6:	str	r3, [sp, #12]
    fbe8:	ldr.w	r3, [fp, #4]
    fbec:	cmp	r3, #0
    fbee:	ble.w	feae <__ssvfscanf_r+0x6fa>
    fbf2:	movs	r6, #4
    fbf4:	b.n	f9c0 <__ssvfscanf_r+0x20c>
    fbf6:	str	r3, [sp, #12]
    fbf8:	ldr.w	r3, [fp, #4]
    fbfc:	cmp	r3, #0
    fbfe:	orr.w	r5, r5, #1
    fc02:	bgt.n	fb8e <__ssvfscanf_r+0x3da>
    fc04:	mov	r1, fp
    fc06:	mov	r0, sl
    fc08:	bl	131ec <__ssrefill_r>
    fc0c:	cmp	r0, #0
    fc0e:	beq.n	fb8e <__ssvfscanf_r+0x3da>
    fc10:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fc12:	add.w	r4, r4, r4, lsl #2
    fc16:	add.w	r4, r8, r4, lsl #1
    fc1a:	subs	r4, #48	; 0x30
    fc1c:	ldrb.w	r8, [r6, #1]
    fc20:	mov	r6, r3
    fc22:	b.n	f866 <__ssvfscanf_r+0xb2>
    fc24:	ldrb.w	r8, [r6, #1]
    fc28:	orr.w	r5, r5, #16
    fc2c:	mov	r6, r3
    fc2e:	b.n	f866 <__ssvfscanf_r+0xb2>
    fc30:	add	r3, sp, #72	; 0x48
    fc32:	mov	r1, r8
    fc34:	mov	r0, r3
    fc36:	movs	r2, #8
    fc38:	str	r3, [sp, #32]
    fc3a:	bl	c7ac <memset>
    fc3e:	ands.w	r9, r5, #16
    fc42:	bne.w	10508 <__ssvfscanf_r+0xd54>
    fc46:	ldr	r2, [sp, #20]
    fc48:	mov	r3, r2
    fc4a:	adds	r3, #4
    fc4c:	ldr.w	r8, [r2]
    fc50:	str	r3, [sp, #20]
    fc52:	movs	r6, #0
    fc54:	bl	c00c <__locale_ctype_ptr>
    fc58:	ldr.w	r3, [fp]
    fc5c:	ldrb	r3, [r3, #0]
    fc5e:	add	r0, r3
    fc60:	ldrb	r3, [r0, #1]
    fc62:	lsls	r0, r3, #28
    fc64:	bmi.n	fc6c <__ssvfscanf_r+0x4b8>
    fc66:	cmp	r4, #0
    fc68:	bne.w	1046c <__ssvfscanf_r+0xcb8>
    fc6c:	cmp.w	r9, #0
    fc70:	bne.n	fc7c <__ssvfscanf_r+0x4c8>
    fc72:	str.w	r9, [r8]
    fc76:	ldr	r3, [sp, #24]
    fc78:	adds	r3, #1
    fc7a:	str	r3, [sp, #24]
    fc7c:	ldr	r6, [sp, #12]
    fc7e:	mov	r4, r6
    fc80:	b.n	f844 <__ssvfscanf_r+0x90>
    fc82:	ldr	r0, [sp, #20]
    fc84:	ldr	r5, [r0, #0]
    fc86:	mov	r3, r0
    fc88:	adds	r3, #4
    fc8a:	add.w	r8, r5, r4
    fc8e:	str	r3, [sp, #12]
    fc90:	mov	r4, r5
    fc92:	b.n	fca2 <__ssvfscanf_r+0x4ee>
    fc94:	.word	0x0000e0a9
    fc98:	.word	0x00012e35
    fc9c:	ldr.w	r2, [fp]
    fca0:	ldrb	r1, [r2, #0]
    fca2:	ldrb.w	r3, [r9, r1]
    fca6:	adds	r0, r2, #1
    fca8:	cbz	r3, fcdc <__ssvfscanf_r+0x528>
    fcaa:	ldr.w	r3, [fp, #4]
    fcae:	str.w	r0, [fp]
    fcb2:	subs	r3, #1
    fcb4:	str.w	r3, [fp, #4]
    fcb8:	ldrb	r3, [r2, #0]
    fcba:	strb.w	r3, [r4], #1
    fcbe:	cmp	r8, r4
    fcc0:	beq.n	fcdc <__ssvfscanf_r+0x528>
    fcc2:	ldr.w	r3, [fp, #4]
    fcc6:	cmp	r3, #0
    fcc8:	bgt.n	fc9c <__ssvfscanf_r+0x4e8>
    fcca:	mov	r1, fp
    fccc:	mov	r0, sl
    fcce:	bl	131ec <__ssrefill_r>
    fcd2:	cmp	r0, #0
    fcd4:	beq.n	fc9c <__ssvfscanf_r+0x4e8>
    fcd6:	cmp	r5, r4
    fcd8:	beq.w	f9fe <__ssvfscanf_r+0x24a>
    fcdc:	subs	r5, r4, r5
    fcde:	beq.w	f850 <__ssvfscanf_r+0x9c>
    fce2:	ldr	r2, [sp, #24]
    fce4:	adds	r2, #1
    fce6:	movs	r3, #0
    fce8:	str	r2, [sp, #24]
    fcea:	ldr	r2, [sp, #12]
    fcec:	str	r2, [sp, #20]
    fcee:	strb	r3, [r4, #0]
    fcf0:	add	r7, r5
    fcf2:	mov	r4, r6
    fcf4:	b.n	f844 <__ssvfscanf_r+0x90>
    fcf6:	str	r3, [sp, #12]
    fcf8:	bl	c00c <__locale_ctype_ptr>
    fcfc:	add	r0, r8
    fcfe:	ldrb	r3, [r0, #1]
    fd00:	and.w	r3, r3, #3
    fd04:	cmp	r3, #1
    fd06:	ldr.w	r3, [fp, #4]
    fd0a:	beq.w	fe3a <__ssvfscanf_r+0x686>
    fd0e:	cmp	r3, #0
    fd10:	bgt.w	fb8e <__ssvfscanf_r+0x3da>
    fd14:	b.n	fc04 <__ssvfscanf_r+0x450>
    fd16:	add	r3, sp, #72	; 0x48
    fd18:	mov	r0, r3
    fd1a:	movs	r2, #8
    fd1c:	movs	r1, #0
    fd1e:	str	r3, [sp, #32]
    fd20:	bl	c7ac <memset>
    fd24:	ands.w	r3, r5, #16
    fd28:	str	r3, [sp, #40]	; 0x28
    fd2a:	bne.n	fe28 <__ssvfscanf_r+0x674>
    fd2c:	ldr	r2, [sp, #20]
    fd2e:	mov	r3, r2
    fd30:	adds	r3, #4
    fd32:	ldr.w	r9, [r2]
    fd36:	str	r3, [sp, #20]
    fd38:	movs	r5, #0
    fd3a:	add.w	r8, sp, #336	; 0x150
    fd3e:	bl	bfe8 <__locale_mb_cur_max>
    fd42:	cmp	r0, r5
    fd44:	beq.w	f9fe <__ssvfscanf_r+0x24a>
    fd48:	ldmia.w	fp, {r2, r3}
    fd4c:	ldrb.w	r0, [r2], #1
    fd50:	str.w	r2, [fp]
    fd54:	subs	r3, #1
    fd56:	ldr	r2, [sp, #32]
    fd58:	str	r2, [sp, #0]
    fd5a:	adds	r6, r5, #1
    fd5c:	str.w	r3, [fp, #4]
    fd60:	mov	r1, r9
    fd62:	strb.w	r0, [r8, r5]
    fd66:	mov	r3, r6
    fd68:	mov	r2, r8
    fd6a:	mov	r0, sl
    fd6c:	bl	12144 <_mbrtowc_r>
    fd70:	adds	r1, r0, #1
    fd72:	beq.w	f9fe <__ssvfscanf_r+0x24a>
    fd76:	cbnz	r0, fda2 <__ssvfscanf_r+0x5ee>
    fd78:	ldr	r3, [sp, #40]	; 0x28
    fd7a:	cbnz	r3, fdc2 <__ssvfscanf_r+0x60e>
    fd7c:	str.w	r3, [r9]
    fd80:	add	r7, r6
    fd82:	subs	r4, #1
    fd84:	add.w	r9, r9, #4
    fd88:	ldr.w	r3, [fp, #4]
    fd8c:	cmp	r3, #0
    fd8e:	mov.w	r5, #0
    fd92:	ble.n	fdb0 <__ssvfscanf_r+0x5fc>
    fd94:	cmp	r4, #0
    fd96:	bne.n	fd3e <__ssvfscanf_r+0x58a>
    fd98:	ldr	r3, [sp, #40]	; 0x28
    fd9a:	cmp	r3, #0
    fd9c:	beq.w	fc76 <__ssvfscanf_r+0x4c2>
    fda0:	b.n	fc7c <__ssvfscanf_r+0x4c8>
    fda2:	adds	r0, #2
    fda4:	bne.n	fdc8 <__ssvfscanf_r+0x614>
    fda6:	ldr.w	r3, [fp, #4]
    fdaa:	cmp	r3, #0
    fdac:	mov	r5, r6
    fdae:	bgt.n	fd3e <__ssvfscanf_r+0x58a>
    fdb0:	mov	r1, fp
    fdb2:	mov	r0, sl
    fdb4:	bl	131ec <__ssrefill_r>
    fdb8:	cmp	r0, #0
    fdba:	beq.n	fd94 <__ssvfscanf_r+0x5e0>
    fdbc:	cmp	r5, #0
    fdbe:	beq.n	fd98 <__ssvfscanf_r+0x5e4>
    fdc0:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fdc2:	add	r7, r6
    fdc4:	subs	r4, #1
    fdc6:	b.n	fd88 <__ssvfscanf_r+0x5d4>
    fdc8:	ldr	r3, [sp, #40]	; 0x28
    fdca:	add	r7, r6
    fdcc:	subs	r4, #1
    fdce:	cmp	r3, #0
    fdd0:	bne.n	fd88 <__ssvfscanf_r+0x5d4>
    fdd2:	b.n	fd84 <__ssvfscanf_r+0x5d0>
    fdd4:	mov	r8, r5
    fdd6:	mov	r5, r8
    fdd8:	add	r7, r5
    fdda:	b.n	fcf2 <__ssvfscanf_r+0x53e>
    fddc:	cmp	r5, #0
    fdde:	beq.w	f850 <__ssvfscanf_r+0x9c>
    fde2:	add	r7, r5
    fde4:	b.n	fcf2 <__ssvfscanf_r+0x53e>
    fde6:	cmp	r5, #0
    fde8:	bne.w	fb0e <__ssvfscanf_r+0x35a>
    fdec:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fdee:	ldr	r5, [sp, #20]
    fdf0:	mov	r3, r4
    fdf2:	ldr	r1, [r5, #0]
    fdf4:	str.w	fp, [sp]
    fdf8:	movs	r2, #1
    fdfa:	mov	r0, sl
    fdfc:	bl	13228 <_sfread_r>
    fe00:	adds	r6, r5, #4
    fe02:	cmp	r0, #0
    fe04:	beq.w	f9fe <__ssvfscanf_r+0x24a>
    fe08:	ldr	r3, [sp, #24]
    fe0a:	str	r6, [sp, #20]
    fe0c:	ldr	r6, [sp, #12]
    fe0e:	adds	r3, #1
    fe10:	add	r7, r0
    fe12:	str	r3, [sp, #24]
    fe14:	mov	r4, r6
    fe16:	b.n	f844 <__ssvfscanf_r+0x90>
    fe18:	mov	r1, fp
    fe1a:	mov	r0, sl
    fe1c:	bl	131ec <__ssrefill_r>
    fe20:	cmp	r0, #0
    fe22:	beq.w	f972 <__ssvfscanf_r+0x1be>
    fe26:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fe28:	mov.w	r9, #0
    fe2c:	b.n	fd38 <__ssvfscanf_r+0x584>
    fe2e:	ldrb.w	r8, [r6, #2]
    fe32:	orr.w	r5, r5, #2
    fe36:	adds	r6, #2
    fe38:	b.n	f866 <__ssvfscanf_r+0xb2>
    fe3a:	cmp	r3, #0
    fe3c:	orr.w	r5, r5, #1
    fe40:	bgt.w	fb8e <__ssvfscanf_r+0x3da>
    fe44:	b.n	fc04 <__ssvfscanf_r+0x450>
    fe46:	lsls	r4, r5, #31
    fe48:	bmi.n	fe64 <__ssvfscanf_r+0x6b0>
    fe4a:	lsls	r0, r5, #30
    fe4c:	bpl.n	fe64 <__ssvfscanf_r+0x6b0>
    fe4e:	ldr	r2, [sp, #20]
    fe50:	ldr	r6, [sp, #12]
    fe52:	ldr	r3, [r2, #0]
    fe54:	mov	r0, r7
    fe56:	asrs	r1, r7, #31
    fe58:	adds	r2, #4
    fe5a:	str	r2, [sp, #20]
    fe5c:	strd	r0, r1, [r3]
    fe60:	mov	r4, r6
    fe62:	b.n	f844 <__ssvfscanf_r+0x90>
    fe64:	ldr	r2, [sp, #20]
    fe66:	ldr	r6, [sp, #12]
    fe68:	ldr	r3, [r2, #0]
    fe6a:	str	r7, [r3, #0]
    fe6c:	mov	r3, r2
    fe6e:	adds	r3, #4
    fe70:	str	r3, [sp, #20]
    fe72:	mov	r4, r6
    fe74:	b.n	f844 <__ssvfscanf_r+0x90>
    fe76:	mov	r1, fp
    fe78:	mov	r0, sl
    fe7a:	bl	131ec <__ssrefill_r>
    fe7e:	cmp	r0, #0
    fe80:	bne.w	f9fe <__ssvfscanf_r+0x24a>
    fe84:	ldr	r3, [pc, #504]	; (10080 <__ssvfscanf_r+0x8cc>)
    fe86:	str	r0, [sp, #16]
    fe88:	str	r3, [sp, #28]
    fe8a:	movs	r6, #3
    fe8c:	b.n	f9c0 <__ssvfscanf_r+0x20c>
    fe8e:	mov	r1, fp
    fe90:	mov	r0, sl
    fe92:	bl	131ec <__ssrefill_r>
    fe96:	cmp	r0, #0
    fe98:	beq.w	fb2e <__ssvfscanf_r+0x37a>
    fe9c:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fe9e:	mov	r1, fp
    fea0:	mov	r0, sl
    fea2:	bl	131ec <__ssrefill_r>
    fea6:	cmp	r0, #0
    fea8:	beq.w	fac4 <__ssvfscanf_r+0x310>
    feac:	b.n	f9fe <__ssvfscanf_r+0x24a>
    feae:	mov	r1, fp
    feb0:	mov	r0, sl
    feb2:	bl	131ec <__ssrefill_r>
    feb6:	cmp	r0, #0
    feb8:	beq.w	fbf2 <__ssvfscanf_r+0x43e>
    febc:	b.n	f9fe <__ssvfscanf_r+0x24a>
    febe:	mov	r1, fp
    fec0:	mov	r0, sl
    fec2:	bl	131ec <__ssrefill_r>
    fec6:	cmp	r0, #0
    fec8:	beq.w	fa56 <__ssvfscanf_r+0x2a2>
    fecc:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fece:	mov	r1, fp
    fed0:	mov	r0, sl
    fed2:	bl	131ec <__ssrefill_r>
    fed6:	cmp	r0, #0
    fed8:	beq.w	fa3e <__ssvfscanf_r+0x28a>
    fedc:	b.n	f9fe <__ssvfscanf_r+0x24a>
    fede:	cmp	r6, #3
    fee0:	beq.w	10222 <__ssvfscanf_r+0xa6e>
    fee4:	cmp	r6, #4
    fee6:	bne.w	10364 <__ssvfscanf_r+0xbb0>
    feea:	mov	r0, sl
    feec:	bl	12128 <_localeconv_r>
    fef0:	subs	r3, r4, #1
    fef2:	ldr	r2, [r0, #0]
    fef4:	str	r2, [sp, #48]	; 0x30
    fef6:	cmp.w	r3, #348	; 0x15c
    fefa:	bls.w	103cc <__ssvfscanf_r+0xc18>
    fefe:	mvn.w	r1, #348	; 0x15c
    ff02:	adds	r3, r4, r1
    ff04:	str	r3, [sp, #56]	; 0x38
    ff06:	movw	r4, #349	; 0x15d
    ff0a:	add	r3, sp, #336	; 0x150
    ff0c:	mov.w	r8, #0
    ff10:	mov	r2, r3
    ff12:	str	r3, [sp, #40]	; 0x28
    ff14:	orr.w	r5, r5, #1920	; 0x780
    ff18:	mov	r3, r8
    ff1a:	str.w	r8, [sp, #60]	; 0x3c
    ff1e:	str.w	r8, [sp, #52]	; 0x34
    ff22:	mov	r6, r8
    ff24:	str.w	r8, [sp, #44]	; 0x2c
    ff28:	mov	r9, r2
    ff2a:	ldr.w	r0, [fp]
    ff2e:	ldrb	r1, [r0, #0]
    ff30:	sub.w	lr, r1, #43	; 0x2b
    ff34:	cmp.w	lr, #78	; 0x4e
    ff38:	bhi.w	101d2 <__ssvfscanf_r+0xa1e>
    ff3c:	tbh	[pc, lr, lsl #1]
    ff40:	.word	0x0149007a
    ff44:	.word	0x0149007a
    ff48:	.word	0x006e0149
    ff4c:	.word	0x004f004f
    ff50:	.word	0x004f004f
    ff54:	.word	0x004f004f
    ff58:	.word	0x004f004f
    ff5c:	.word	0x0149004f
    ff60:	.word	0x01490149
    ff64:	.word	0x01490149
    ff68:	.word	0x01490149
    ff6c:	.word	0x01490144
    ff70:	.word	0x01490149
    ff74:	.word	0x0125012c
    ff78:	.word	0x01490149
    ff7c:	.word	0x014900a2
    ff80:	.word	0x01490149
    ff84:	.word	0x008b0149
    ff88:	.word	0x01490149
    ff8c:	.word	0x01490149
    ff90:	.word	0x00850149
    ff94:	.word	0x01490149
    ff98:	.word	0x01490149
    ff9c:	.word	0x0149007f
    ffa0:	.word	0x01490149
    ffa4:	.word	0x01490149
    ffa8:	.word	0x01490149
    ffac:	.word	0x01490144
    ffb0:	.word	0x01490149
    ffb4:	.word	0x0125012c
    ffb8:	.word	0x01490149
    ffbc:	.word	0x014900a2
    ffc0:	.word	0x01490149
    ffc4:	.word	0x008b0149
    ffc8:	.word	0x01490149
    ffcc:	.word	0x01490149
    ffd0:	.word	0x00850149
    ffd4:	.word	0x01490149
    ffd8:	.word	0x01490149
    ffdc:	.short	0x007f
    ffde:	cmn.w	r3, r8
    ffe2:	bne.n	10012 <__ssvfscanf_r+0x85e>
    ffe4:	bic.w	r5, r5, #384	; 0x180
    ffe8:	strb.w	r1, [r9]
    ffec:	add.w	r9, r9, #1
    fff0:	ldr.w	r1, [fp, #4]
    fff4:	subs	r1, #1
    fff6:	cmp	r1, #0
    fff8:	add.w	r4, r4, #4294967295
    fffc:	add.w	r7, r7, #1
   10000:	str.w	r1, [fp, #4]
   10004:	ble.w	101ec <__ssvfscanf_r+0xa38>
   10008:	adds	r0, #1
   1000a:	str.w	r0, [fp]
   1000e:	cmp	r4, #0
   10010:	bne.n	ff2a <__ssvfscanf_r+0x776>
   10012:	cmp	r6, #0
   10014:	beq.n	1009c <__ssvfscanf_r+0x8e8>
   10016:	bic.w	r5, r5, #256	; 0x100
   1001a:	b.n	1009c <__ssvfscanf_r+0x8e8>
   1001c:	lsls	r2, r5, #23
   1001e:	bpl.n	ffde <__ssvfscanf_r+0x82a>
   10020:	ldr	r2, [sp, #56]	; 0x38
   10022:	bic.w	r5, r5, #128	; 0x80
   10026:	adds	r6, #1
   10028:	cmp	r2, #0
   1002a:	beq.n	fff0 <__ssvfscanf_r+0x83c>
   1002c:	subs	r2, #1
   1002e:	str	r2, [sp, #56]	; 0x38
   10030:	adds	r4, #1
   10032:	b.n	fff0 <__ssvfscanf_r+0x83c>
   10034:	lsls	r2, r5, #24
   10036:	bpl.n	10012 <__ssvfscanf_r+0x85e>
   10038:	bic.w	r5, r5, #128	; 0x80
   1003c:	b.n	ffe8 <__ssvfscanf_r+0x834>
   1003e:	cmp.w	r8, #7
   10042:	bne.n	10012 <__ssvfscanf_r+0x85e>
   10044:	mov.w	r8, #8
   10048:	b.n	ffe8 <__ssvfscanf_r+0x834>
   1004a:	cmp.w	r8, #6
   1004e:	bne.n	10012 <__ssvfscanf_r+0x85e>
   10050:	mov.w	r8, #7
   10054:	b.n	ffe8 <__ssvfscanf_r+0x834>
   10056:	cmp	r3, #0
   10058:	bne.w	10218 <__ssvfscanf_r+0xa64>
   1005c:	cbnz	r6, 1006a <__ssvfscanf_r+0x8b6>
   1005e:	and.w	lr, r5, #1792	; 0x700
   10062:	cmp.w	lr, #1792	; 0x700
   10066:	beq.w	104f0 <__ssvfscanf_r+0xd3c>
   1006a:	cmp.w	r8, #1
   1006e:	beq.n	10076 <__ssvfscanf_r+0x8c2>
   10070:	cmp.w	r8, #4
   10074:	bne.n	10012 <__ssvfscanf_r+0x85e>
   10076:	add.w	r8, r8, #1
   1007a:	uxtb.w	r8, r8
   1007e:	b.n	ffe8 <__ssvfscanf_r+0x834>
   10080:	.word	0x0000e0a9
   10084:	cmp.w	r8, #0
   10088:	bne.w	10206 <__ssvfscanf_r+0xa52>
   1008c:	cmp	r6, #0
   1008e:	bne.n	10016 <__ssvfscanf_r+0x862>
   10090:	and.w	lr, r5, #1792	; 0x700
   10094:	cmp.w	lr, #1792	; 0x700
   10098:	beq.w	10510 <__ssvfscanf_r+0xd5c>
   1009c:	subs	r3, #1
   1009e:	cmp	r3, #1
   100a0:	bls.w	105a6 <__ssvfscanf_r+0xdf2>
   100a4:	add.w	r3, r8, #4294967295
   100a8:	cmp	r3, #6
   100aa:	bhi.n	100da <__ssvfscanf_r+0x926>
   100ac:	cmp.w	r8, #2
   100b0:	bls.w	105f4 <__ssvfscanf_r+0xe40>
   100b4:	cmp.w	r8, #3
   100b8:	beq.n	100da <__ssvfscanf_r+0x926>
   100ba:	sub.w	r4, r8, #4
   100be:	uxtb	r4, r4
   100c0:	mvn.w	r8, r4
   100c4:	add	r8, r9
   100c6:	ldrb.w	r1, [r9, #-1]!
   100ca:	mov	r2, fp
   100cc:	mov	r0, sl
   100ce:	bl	13168 <_sungetc_r>
   100d2:	cmp	r8, r9
   100d4:	bne.n	100c6 <__ssvfscanf_r+0x912>
   100d6:	subs	r7, #1
   100d8:	subs	r7, r7, r4
   100da:	lsls	r1, r5, #23
   100dc:	bpl.n	10118 <__ssvfscanf_r+0x964>
   100de:	lsls	r2, r5, #21
   100e0:	bmi.w	105ca <__ssvfscanf_r+0xe16>
   100e4:	ldrb.w	r1, [r9, #-1]
   100e8:	cmp	r1, #101	; 0x65
   100ea:	add.w	r4, r9, #4294967295
   100ee:	add.w	r8, r7, #4294967295
   100f2:	beq.n	1010c <__ssvfscanf_r+0x958>
   100f4:	cmp	r1, #69	; 0x45
   100f6:	beq.n	1010c <__ssvfscanf_r+0x958>
   100f8:	mov	r2, fp
   100fa:	mov	r0, sl
   100fc:	bl	13168 <_sungetc_r>
   10100:	ldrb.w	r1, [r9, #-2]
   10104:	sub.w	r8, r7, #2
   10108:	sub.w	r4, r9, #2
   1010c:	mov	r2, fp
   1010e:	mov	r0, sl
   10110:	bl	13168 <_sungetc_r>
   10114:	mov	r7, r8
   10116:	mov	r9, r4
   10118:	ands.w	r2, r5, #16
   1011c:	bne.w	fc7c <__ssvfscanf_r+0x4c8>
   10120:	and.w	r3, r5, #1536	; 0x600
   10124:	cmp.w	r3, #1024	; 0x400
   10128:	strb.w	r2, [r9]
   1012c:	beq.w	1051a <__ssvfscanf_r+0xd66>
   10130:	ldr	r3, [sp, #52]	; 0x34
   10132:	cmp	r3, #0
   10134:	bne.w	1053c <__ssvfscanf_r+0xd88>
   10138:	ldr	r1, [sp, #40]	; 0x28
   1013a:	movs	r2, #0
   1013c:	mov	r0, sl
   1013e:	bl	df50 <_strtod_r>
   10142:	lsls	r3, r5, #31
   10144:	bmi.w	103d2 <__ssvfscanf_r+0xc1e>
   10148:	ands.w	r5, r5, #2
   1014c:	bne.w	103d2 <__ssvfscanf_r+0xc1e>
   10150:	vmov	r2, r3, d0
   10154:	vmov	r0, r1, d0
   10158:	vstr	d0, [sp, #32]
   1015c:	bl	b7c8 <__aeabi_dcmpun>
   10160:	ldr	r4, [sp, #20]
   10162:	vldr	d0, [sp, #32]
   10166:	adds	r6, r4, #4
   10168:	ldr	r4, [r4, #0]
   1016a:	cmp	r0, #0
   1016c:	bne.w	10628 <__ssvfscanf_r+0xe74>
   10170:	vmov	r0, r1, d0
   10174:	bl	b884 <__aeabi_d2f>
   10178:	str	r6, [sp, #20]
   1017a:	str	r0, [r4, #0]
   1017c:	ldr	r3, [sp, #24]
   1017e:	ldr	r6, [sp, #12]
   10180:	adds	r3, #1
   10182:	str	r3, [sp, #24]
   10184:	mov	r4, r6
   10186:	b.w	f844 <__ssvfscanf_r+0x90>
   1018a:	cmp.w	r8, #2
   1018e:	bne.w	10012 <__ssvfscanf_r+0x85e>
   10192:	mov.w	r8, #3
   10196:	b.n	ffe8 <__ssvfscanf_r+0x834>
   10198:	and.w	lr, r5, #1280	; 0x500
   1019c:	cmp.w	lr, #1024	; 0x400
   101a0:	beq.n	101ae <__ssvfscanf_r+0x9fa>
   101a2:	lsls	r2, r5, #21
   101a4:	bpl.w	10012 <__ssvfscanf_r+0x85e>
   101a8:	cmp	r6, #0
   101aa:	beq.w	1009c <__ssvfscanf_r+0x8e8>
   101ae:	lsls	r2, r5, #22
   101b0:	bmi.n	101bc <__ssvfscanf_r+0xa08>
   101b2:	ldr	r2, [sp, #44]	; 0x2c
   101b4:	str.w	r9, [sp, #60]	; 0x3c
   101b8:	subs	r2, r6, r2
   101ba:	str	r2, [sp, #52]	; 0x34
   101bc:	bic.w	r5, r5, #1920	; 0x780
   101c0:	orr.w	r5, r5, #384	; 0x180
   101c4:	movs	r6, #0
   101c6:	b.n	ffe8 <__ssvfscanf_r+0x834>
   101c8:	cmp	r3, #1
   101ca:	bne.w	10012 <__ssvfscanf_r+0x85e>
   101ce:	movs	r3, #2
   101d0:	b.n	ffe8 <__ssvfscanf_r+0x834>
   101d2:	ldr	r2, [sp, #48]	; 0x30
   101d4:	ldrb.w	lr, [r2]
   101d8:	cmp	lr, r1
   101da:	bne.w	10012 <__ssvfscanf_r+0x85e>
   101de:	lsls	r2, r5, #22
   101e0:	bpl.w	10012 <__ssvfscanf_r+0x85e>
   101e4:	bic.w	r5, r5, #640	; 0x280
   101e8:	str	r6, [sp, #44]	; 0x2c
   101ea:	b.n	ffe8 <__ssvfscanf_r+0x834>
   101ec:	mov	r1, fp
   101ee:	mov	r0, sl
   101f0:	str	r3, [sp, #32]
   101f2:	bl	131ec <__ssrefill_r>
   101f6:	ldr	r3, [sp, #32]
   101f8:	cmp	r0, #0
   101fa:	bne.w	10012 <__ssvfscanf_r+0x85e>
   101fe:	cmp	r4, #0
   10200:	bne.w	ff2a <__ssvfscanf_r+0x776>
   10204:	b.n	10012 <__ssvfscanf_r+0x85e>
   10206:	cmp.w	r8, #3
   1020a:	beq.w	10076 <__ssvfscanf_r+0x8c2>
   1020e:	cmp.w	r8, #5
   10212:	beq.w	10076 <__ssvfscanf_r+0x8c2>
   10216:	b.n	10012 <__ssvfscanf_r+0x85e>
   10218:	cmp	r3, #2
   1021a:	bne.w	1006a <__ssvfscanf_r+0x8b6>
   1021e:	movs	r3, #3
   10220:	b.n	ffe8 <__ssvfscanf_r+0x834>
   10222:	subs	r3, r4, #1
   10224:	cmp.w	r3, #348	; 0x15c
   10228:	itte	hi
   1022a:	mvnhi.w	r0, #348	; 0x15c
   1022e:	addhi.w	r9, r4, r0
   10232:	movls	r9, r8
   10234:	add	r3, sp, #336	; 0x150
   10236:	mov	r0, r2
   10238:	mov	r2, r7
   1023a:	mov	r7, r9
   1023c:	ldr.w	r9, [sp, #16]
   10240:	str	r3, [sp, #40]	; 0x28
   10242:	it	hi
   10244:	movwhi	r4, #349	; 0x15d
   10248:	orr.w	r5, r5, #3456	; 0xd80
   1024c:	mov	r6, r3
   1024e:	mov.w	r8, #0
   10252:	sub.w	r3, r1, #43	; 0x2b
   10256:	cmp	r3, #77	; 0x4d
   10258:	bhi.n	102fe <__ssvfscanf_r+0xb4a>
   1025a:	tbb	[pc, r3]
   1025e:	.short	0x507e
   10260:	.word	0x6f50507e
   10264:	.word	0x69696969
   10268:	.word	0x4a696969
   1026c:	.word	0x5050504a
   10270:	.word	0x50505050
   10274:	.word	0x44444444
   10278:	.word	0x50504444
   1027c:	.word	0x50505050
   10280:	.word	0x50505050
   10284:	.word	0x50505050
   10288:	.word	0x27505050
   1028c:	.word	0x50505050
   10290:	.word	0x50505050
   10294:	.word	0x44444444
   10298:	.word	0x50504444
   1029c:	.word	0x50505050
   102a0:	.word	0x50505050
   102a4:	.word	0x50505050
   102a8:	.word	0x27505050
   102ac:	and.w	r3, r5, #1536	; 0x600
   102b0:	cmp.w	r3, #512	; 0x200
   102b4:	bne.n	102fe <__ssvfscanf_r+0xb4a>
   102b6:	bic.w	r5, r5, #512	; 0x200
   102ba:	orr.w	r5, r5, #1280	; 0x500
   102be:	mov.w	r9, #16
   102c2:	strb	r1, [r6, #0]
   102c4:	adds	r6, #1
   102c6:	ldr.w	r3, [fp, #4]
   102ca:	subs	r3, #1
   102cc:	cmp	r3, #0
   102ce:	str.w	r3, [fp, #4]
   102d2:	ble.n	103ba <__ssvfscanf_r+0xc06>
   102d4:	adds	r0, #1
   102d6:	str.w	r0, [fp]
   102da:	subs	r4, #1
   102dc:	beq.n	102fe <__ssvfscanf_r+0xb4a>
   102de:	ldr.w	r0, [fp]
   102e2:	ldrb	r1, [r0, #0]
   102e4:	b.n	10252 <__ssvfscanf_r+0xa9e>
   102e6:	cmp.w	r9, #10
   102ea:	ble.n	102fe <__ssvfscanf_r+0xb4a>
   102ec:	bic.w	r5, r5, #2944	; 0xb80
   102f0:	b.n	102c2 <__ssvfscanf_r+0xb0e>
   102f2:	ldr	r3, [pc, #756]	; (105e8 <__ssvfscanf_r+0xe34>)
   102f4:	ldrsh.w	r9, [r3, r9, lsl #1]
   102f8:	cmp.w	r9, #8
   102fc:	bgt.n	102ec <__ssvfscanf_r+0xb38>
   102fe:	lsls	r1, r5, #23
   10300:	mov	r7, r2
   10302:	str.w	r9, [sp, #16]
   10306:	bpl.n	10318 <__ssvfscanf_r+0xb64>
   10308:	ldr	r3, [sp, #40]	; 0x28
   1030a:	cmp	r6, r3
   1030c:	bhi.w	104f8 <__ssvfscanf_r+0xd44>
   10310:	ldr	r3, [sp, #40]	; 0x28
   10312:	cmp	r6, r3
   10314:	beq.w	f850 <__ssvfscanf_r+0x9c>
   10318:	ands.w	r4, r5, #16
   1031c:	beq.w	10444 <__ssvfscanf_r+0xc90>
   10320:	ldr	r3, [sp, #40]	; 0x28
   10322:	subs	r6, r6, r3
   10324:	add	r6, r8
   10326:	add	r7, r6
   10328:	ldr	r6, [sp, #12]
   1032a:	mov	r4, r6
   1032c:	b.w	f844 <__ssvfscanf_r+0x90>
   10330:	ldr	r3, [pc, #692]	; (105e8 <__ssvfscanf_r+0xe34>)
   10332:	bic.w	r5, r5, #2944	; 0xb80
   10336:	ldrsh.w	r9, [r3, r9, lsl #1]
   1033a:	b.n	102c2 <__ssvfscanf_r+0xb0e>
   1033c:	lsls	r3, r5, #20
   1033e:	bpl.n	102c2 <__ssvfscanf_r+0xb0e>
   10340:	cmp.w	r9, #0
   10344:	bne.n	1034e <__ssvfscanf_r+0xb9a>
   10346:	orr.w	r5, r5, #512	; 0x200
   1034a:	mov.w	r9, #8
   1034e:	lsls	r3, r5, #21
   10350:	bpl.w	104d4 <__ssvfscanf_r+0xd20>
   10354:	bic.w	r5, r5, #1408	; 0x580
   10358:	b.n	102c2 <__ssvfscanf_r+0xb0e>
   1035a:	lsls	r3, r5, #24
   1035c:	bpl.n	102fe <__ssvfscanf_r+0xb4a>
   1035e:	bic.w	r5, r5, #128	; 0x80
   10362:	b.n	102c2 <__ssvfscanf_r+0xb0e>
   10364:	cmp	r4, #0
   10366:	it	eq
   10368:	moveq.w	r4, #4294967295
   1036c:	ands.w	r3, r5, #1
   10370:	bne.w	fc30 <__ssvfscanf_r+0x47c>
   10374:	lsls	r1, r5, #27
   10376:	bpl.n	103e0 <__ssvfscanf_r+0xc2c>
   10378:	mov	r5, r3
   1037a:	bl	c00c <__locale_ctype_ptr>
   1037e:	ldr.w	r3, [fp]
   10382:	ldrb	r2, [r3, #0]
   10384:	add	r0, r2
   10386:	adds	r3, #1
   10388:	ldrb	r2, [r0, #1]
   1038a:	lsls	r2, r2, #28
   1038c:	bmi.w	fb0e <__ssvfscanf_r+0x35a>
   10390:	ldr.w	r2, [fp, #4]
   10394:	str.w	r3, [fp]
   10398:	adds	r5, #1
   1039a:	subs	r3, r2, #1
   1039c:	cmp	r4, r5
   1039e:	str.w	r3, [fp, #4]
   103a2:	beq.w	fb0e <__ssvfscanf_r+0x35a>
   103a6:	cmp	r3, #0
   103a8:	bgt.n	1037a <__ssvfscanf_r+0xbc6>
   103aa:	mov	r1, fp
   103ac:	mov	r0, sl
   103ae:	bl	131ec <__ssrefill_r>
   103b2:	cmp	r0, #0
   103b4:	beq.n	1037a <__ssvfscanf_r+0xbc6>
   103b6:	b.w	fb0e <__ssvfscanf_r+0x35a>
   103ba:	mov	r1, fp
   103bc:	mov	r0, sl
   103be:	str	r2, [sp, #16]
   103c0:	bl	131ec <__ssrefill_r>
   103c4:	ldr	r2, [sp, #16]
   103c6:	cmp	r0, #0
   103c8:	beq.n	102da <__ssvfscanf_r+0xb26>
   103ca:	b.n	102fe <__ssvfscanf_r+0xb4a>
   103cc:	str.w	r8, [sp, #56]	; 0x38
   103d0:	b.n	ff0a <__ssvfscanf_r+0x756>
   103d2:	ldr	r2, [sp, #20]
   103d4:	ldr	r3, [r2, #0]
   103d6:	adds	r2, #4
   103d8:	str	r2, [sp, #20]
   103da:	vstr	d0, [r3]
   103de:	b.n	1017c <__ssvfscanf_r+0x9c8>
   103e0:	ldr	r2, [sp, #20]
   103e2:	ldr	r5, [r2, #0]
   103e4:	adds	r6, r2, #4
   103e6:	add	r4, r5
   103e8:	mov	r8, r5
   103ea:	bl	c00c <__locale_ctype_ptr>
   103ee:	ldr.w	r2, [fp]
   103f2:	ldrb	r3, [r2, #0]
   103f4:	add	r0, r3
   103f6:	adds	r1, r2, #1
   103f8:	ldrb	r3, [r0, #1]
   103fa:	lsls	r3, r3, #28
   103fc:	bmi.n	1042a <__ssvfscanf_r+0xc76>
   103fe:	ldr.w	r3, [fp, #4]
   10402:	str.w	r1, [fp]
   10406:	subs	r3, #1
   10408:	str.w	r3, [fp, #4]
   1040c:	ldrb	r3, [r2, #0]
   1040e:	strb.w	r3, [r8], #1
   10412:	cmp	r4, r8
   10414:	beq.n	1042c <__ssvfscanf_r+0xc78>
   10416:	ldr.w	r3, [fp, #4]
   1041a:	cmp	r3, #0
   1041c:	bgt.n	103ea <__ssvfscanf_r+0xc36>
   1041e:	mov	r1, fp
   10420:	mov	r0, sl
   10422:	bl	131ec <__ssrefill_r>
   10426:	cmp	r0, #0
   10428:	beq.n	103ea <__ssvfscanf_r+0xc36>
   1042a:	mov	r4, r8
   1042c:	ldr	r2, [sp, #24]
   1042e:	str	r6, [sp, #20]
   10430:	ldr	r6, [sp, #12]
   10432:	subs	r5, r4, r5
   10434:	movs	r3, #0
   10436:	adds	r2, #1
   10438:	strb	r3, [r4, #0]
   1043a:	add	r7, r5
   1043c:	str	r2, [sp, #24]
   1043e:	mov	r4, r6
   10440:	b.w	f844 <__ssvfscanf_r+0x90>
   10444:	mov	r2, r4
   10446:	strb	r4, [r6, #0]
   10448:	ldr	r3, [sp, #16]
   1044a:	ldr	r1, [sp, #40]	; 0x28
   1044c:	ldr	r4, [sp, #28]
   1044e:	mov	r0, sl
   10450:	blx	r4
   10452:	lsls	r2, r5, #26
   10454:	bmi.n	104e4 <__ssvfscanf_r+0xd30>
   10456:	lsls	r3, r5, #29
   10458:	bpl.n	10552 <__ssvfscanf_r+0xd9e>
   1045a:	ldr	r2, [sp, #20]
   1045c:	ldr	r3, [r2, #0]
   1045e:	adds	r2, #4
   10460:	str	r2, [sp, #20]
   10462:	strh	r0, [r3, #0]
   10464:	ldr	r3, [sp, #24]
   10466:	adds	r3, #1
   10468:	str	r3, [sp, #24]
   1046a:	b.n	10320 <__ssvfscanf_r+0xb6c>
   1046c:	bl	bfe8 <__locale_mb_cur_max>
   10470:	cmp	r6, r0
   10472:	beq.w	f9fe <__ssvfscanf_r+0x24a>
   10476:	ldmia.w	fp, {r2, r3}
   1047a:	ldrb.w	r0, [r2], #1
   1047e:	str.w	r2, [fp]
   10482:	ldr	r2, [sp, #32]
   10484:	str	r2, [sp, #0]
   10486:	add	r2, sp, #336	; 0x150
   10488:	adds	r5, r6, #1
   1048a:	subs	r3, #1
   1048c:	strb	r0, [r2, r6]
   1048e:	str.w	r3, [fp, #4]
   10492:	mov	r1, r8
   10494:	mov	r3, r5
   10496:	mov	r0, sl
   10498:	bl	12144 <_mbrtowc_r>
   1049c:	adds	r6, r0, #1
   1049e:	beq.w	f9fe <__ssvfscanf_r+0x24a>
   104a2:	cmp	r0, #0
   104a4:	bne.n	1057e <__ssvfscanf_r+0xdca>
   104a6:	str.w	r0, [r8]
   104aa:	bl	12108 <iswspace>
   104ae:	cmp	r0, #0
   104b0:	beq.w	10612 <__ssvfscanf_r+0xe5e>
   104b4:	cmp	r5, #0
   104b6:	beq.w	fc6c <__ssvfscanf_r+0x4b8>
   104ba:	add	r3, sp, #336	; 0x150
   104bc:	adds	r4, r3, r5
   104be:	subs	r5, #1
   104c0:	mov	r2, fp
   104c2:	ldrb.w	r1, [r4, #-1]!
   104c6:	mov	r0, sl
   104c8:	bl	13168 <_sungetc_r>
   104cc:	cmp	r5, #0
   104ce:	bne.n	104be <__ssvfscanf_r+0xd0a>
   104d0:	b.w	fc6c <__ssvfscanf_r+0x4b8>
   104d4:	bic.w	r5, r5, #896	; 0x380
   104d8:	cbz	r7, 104de <__ssvfscanf_r+0xd2a>
   104da:	subs	r7, #1
   104dc:	adds	r4, #1
   104de:	add.w	r8, r8, #1
   104e2:	b.n	102c6 <__ssvfscanf_r+0xb12>
   104e4:	ldr	r2, [sp, #20]
   104e6:	ldr	r3, [r2, #0]
   104e8:	adds	r2, #4
   104ea:	str	r2, [sp, #20]
   104ec:	str	r0, [r3, #0]
   104ee:	b.n	10464 <__ssvfscanf_r+0xcb0>
   104f0:	bic.w	r5, r5, #1920	; 0x780
   104f4:	movs	r3, #1
   104f6:	b.n	ffe8 <__ssvfscanf_r+0x834>
   104f8:	ldrb.w	r1, [r6, #-1]
   104fc:	mov	r2, fp
   104fe:	mov	r0, sl
   10500:	bl	13168 <_sungetc_r>
   10504:	subs	r6, #1
   10506:	b.n	10310 <__ssvfscanf_r+0xb5c>
   10508:	add.w	r8, sp, #68	; 0x44
   1050c:	b.w	fc52 <__ssvfscanf_r+0x49e>
   10510:	bic.w	r5, r5, #1920	; 0x780
   10514:	mov.w	r8, #1
   10518:	b.n	ffe8 <__ssvfscanf_r+0x834>
   1051a:	ldr	r3, [sp, #44]	; 0x2c
   1051c:	subs	r6, r6, r3
   1051e:	negs	r2, r6
   10520:	cmp	r6, #0
   10522:	beq.w	10138 <__ssvfscanf_r+0x984>
   10526:	addw	r3, sp, #675	; 0x2a3
   1052a:	cmp	r9, r3
   1052c:	it	cs
   1052e:	addwcs	r9, sp, #674	; 0x2a2
   10532:	mov	r0, r9
   10534:	ldr	r1, [pc, #180]	; (105ec <__ssvfscanf_r+0xe38>)
   10536:	bl	cc54 <sprintf>
   1053a:	b.n	10138 <__ssvfscanf_r+0x984>
   1053c:	ldr	r4, [sp, #60]	; 0x3c
   1053e:	mov	r1, r4
   10540:	movs	r3, #10
   10542:	adds	r1, #1
   10544:	mov	r0, sl
   10546:	bl	e0a8 <_strtol_r>
   1054a:	ldr	r3, [sp, #52]	; 0x34
   1054c:	mov	r9, r4
   1054e:	subs	r2, r0, r3
   10550:	b.n	10526 <__ssvfscanf_r+0xd72>
   10552:	ands.w	r2, r5, #1
   10556:	bne.n	104e4 <__ssvfscanf_r+0xd30>
   10558:	lsls	r4, r5, #30
   1055a:	bpl.n	104e4 <__ssvfscanf_r+0xd30>
   1055c:	ldr	r3, [sp, #28]
   1055e:	mov	r1, r3
   10560:	ldr	r3, [pc, #140]	; (105f0 <__ssvfscanf_r+0xe3c>)
   10562:	cmp	r1, r3
   10564:	mov	r0, sl
   10566:	ldr	r3, [sp, #16]
   10568:	ldr	r1, [sp, #40]	; 0x28
   1056a:	beq.n	10636 <__ssvfscanf_r+0xe82>
   1056c:	bl	12ca8 <_strtoll_r>
   10570:	ldr	r2, [sp, #20]
   10572:	ldr	r3, [r2, #0]
   10574:	adds	r2, #4
   10576:	str	r2, [sp, #20]
   10578:	strd	r0, r1, [r3]
   1057c:	b.n	10464 <__ssvfscanf_r+0xcb0>
   1057e:	adds	r0, #2
   10580:	bne.n	105c4 <__ssvfscanf_r+0xe10>
   10582:	mov	r6, r5
   10584:	ldr.w	r3, [fp, #4]
   10588:	cmp	r3, #0
   1058a:	bgt.w	fc54 <__ssvfscanf_r+0x4a0>
   1058e:	mov	r1, fp
   10590:	mov	r0, sl
   10592:	bl	131ec <__ssrefill_r>
   10596:	cmp	r0, #0
   10598:	beq.w	fc54 <__ssvfscanf_r+0x4a0>
   1059c:	cmp	r6, #0
   1059e:	bne.w	f9fe <__ssvfscanf_r+0x24a>
   105a2:	b.w	fc6c <__ssvfscanf_r+0x4b8>
   105a6:	ldr	r3, [sp, #40]	; 0x28
   105a8:	cmp	r9, r3
   105aa:	bls.w	f850 <__ssvfscanf_r+0x9c>
   105ae:	ldrb.w	r1, [r9, #-1]!
   105b2:	mov	r2, fp
   105b4:	mov	r0, sl
   105b6:	bl	13168 <_sungetc_r>
   105ba:	ldr	r3, [sp, #40]	; 0x28
   105bc:	cmp	r9, r3
   105be:	bne.n	105ae <__ssvfscanf_r+0xdfa>
   105c0:	b.w	f850 <__ssvfscanf_r+0x9c>
   105c4:	ldr.w	r0, [r8]
   105c8:	b.n	104aa <__ssvfscanf_r+0xcf6>
   105ca:	ldr	r3, [sp, #40]	; 0x28
   105cc:	cmp	r9, r3
   105ce:	bls.w	f850 <__ssvfscanf_r+0x9c>
   105d2:	ldrb.w	r1, [r9, #-1]!
   105d6:	mov	r2, fp
   105d8:	mov	r0, sl
   105da:	bl	13168 <_sungetc_r>
   105de:	ldr	r3, [sp, #40]	; 0x28
   105e0:	cmp	r9, r3
   105e2:	bne.n	105d2 <__ssvfscanf_r+0xe1e>
   105e4:	b.w	f850 <__ssvfscanf_r+0x9c>
   105e8:	.word	0x00013f54
   105ec:	.word	0x00013f78
   105f0:	.word	0x00012e35
   105f4:	ldr	r3, [sp, #40]	; 0x28
   105f6:	cmp	r9, r3
   105f8:	bls.w	f850 <__ssvfscanf_r+0x9c>
   105fc:	ldrb.w	r1, [r9, #-1]!
   10600:	mov	r2, fp
   10602:	mov	r0, sl
   10604:	bl	13168 <_sungetc_r>
   10608:	ldr	r3, [sp, #40]	; 0x28
   1060a:	cmp	r9, r3
   1060c:	bne.n	105fc <__ssvfscanf_r+0xe48>
   1060e:	b.w	f850 <__ssvfscanf_r+0x9c>
   10612:	add	r7, r5
   10614:	subs	r4, #1
   10616:	cmp.w	r9, #0
   1061a:	bne.n	10624 <__ssvfscanf_r+0xe70>
   1061c:	add.w	r8, r8, #4
   10620:	mov	r6, r9
   10622:	b.n	10584 <__ssvfscanf_r+0xdd0>
   10624:	mov	r6, r0
   10626:	b.n	10584 <__ssvfscanf_r+0xdd0>
   10628:	mov	r0, r5
   1062a:	bl	af0c <nanf>
   1062e:	str	r6, [sp, #20]
   10630:	vstr	s0, [r4]
   10634:	b.n	1017c <__ssvfscanf_r+0x9c8>
   10636:	bl	13044 <_strtoull_r>
   1063a:	b.n	10570 <__ssvfscanf_r+0xdbc>

0001063c <_vdprintf_r>:
   1063c:	push	{r4, r5, r6, r7, lr}
   1063e:	sub.w	sp, sp, #532	; 0x214
   10642:	add	r5, sp, #16
   10644:	str	r3, [sp, #0]
   10646:	mov	r7, r1
   10648:	mov	r3, r2
   1064a:	mov.w	r4, #512	; 0x200
   1064e:	add	r2, sp, #12
   10650:	mov	r1, r5
   10652:	str	r4, [sp, #12]
   10654:	mov	r6, r0
   10656:	bl	13324 <_vasnprintf_r>
   1065a:	cbz	r0, 10680 <_vdprintf_r+0x44>
   1065c:	mov	r4, r0
   1065e:	mov	r2, r0
   10660:	mov	r1, r7
   10662:	ldr	r3, [sp, #12]
   10664:	mov	r0, r6
   10666:	bl	106bc <_write_r>
   1066a:	cmp	r4, r5
   1066c:	str	r0, [sp, #12]
   1066e:	beq.n	1067a <_vdprintf_r+0x3e>
   10670:	mov	r0, r6
   10672:	mov	r1, r4
   10674:	bl	117d0 <_free_r>
   10678:	ldr	r0, [sp, #12]
   1067a:	add.w	sp, sp, #532	; 0x214
   1067e:	pop	{r4, r5, r6, r7, pc}
   10680:	mov.w	r0, #4294967295
   10684:	b.n	1067a <_vdprintf_r+0x3e>
   10686:	nop

00010688 <vdprintf>:
   10688:	push	{r4}
   1068a:	ldr	r4, [pc, #16]	; (1069c <vdprintf+0x14>)
   1068c:	mov	r3, r2
   1068e:	mov	r2, r1
   10690:	mov	r1, r0
   10692:	ldr	r0, [r4, #0]
   10694:	ldr.w	r4, [sp], #4
   10698:	b.w	1063c <_vdprintf_r>
   1069c:	.word	0x20017e00

000106a0 <__ascii_wctomb>:
   106a0:	cbz	r1, 106ac <__ascii_wctomb+0xc>
   106a2:	cmp	r2, #255	; 0xff
   106a4:	bhi.n	106b0 <__ascii_wctomb+0x10>
   106a6:	strb	r2, [r1, #0]
   106a8:	movs	r0, #1
   106aa:	bx	lr
   106ac:	mov	r0, r1
   106ae:	bx	lr
   106b0:	movs	r3, #138	; 0x8a
   106b2:	str	r3, [r0, #0]
   106b4:	mov.w	r0, #4294967295
   106b8:	bx	lr
   106ba:	nop

000106bc <_write_r>:
   106bc:	push	{r4, r5, r6, lr}
   106be:	mov	r5, r1
   106c0:	ldr	r4, [pc, #32]	; (106e4 <_write_r+0x28>)
   106c2:	mov	r1, r2
   106c4:	mov	r6, r0
   106c6:	mov	r2, r3
   106c8:	mov	r0, r5
   106ca:	movs	r3, #0
   106cc:	str	r3, [r4, #0]
   106ce:	bl	a314 <_write>
   106d2:	adds	r3, r0, #1
   106d4:	beq.n	106d8 <_write_r+0x1c>
   106d6:	pop	{r4, r5, r6, pc}
   106d8:	ldr	r3, [r4, #0]
   106da:	cmp	r3, #0
   106dc:	beq.n	106d6 <_write_r+0x1a>
   106de:	str	r3, [r6, #0]
   106e0:	pop	{r4, r5, r6, pc}
   106e2:	nop
   106e4:	.word	0x2001e244

000106e8 <__register_exitproc>:
   106e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   106ec:	ldr	r4, [pc, #148]	; (10784 <__register_exitproc+0x9c>)
   106ee:	ldr	r5, [r4, #0]
   106f0:	ldr.w	r4, [r5, #328]	; 0x148
   106f4:	mov	r6, r0
   106f6:	mov	r8, r1
   106f8:	mov	sl, r2
   106fa:	mov	r9, r3
   106fc:	cbz	r4, 10770 <__register_exitproc+0x88>
   106fe:	ldr	r0, [r4, #4]
   10700:	cmp	r0, #31
   10702:	bgt.n	10734 <__register_exitproc+0x4c>
   10704:	adds	r3, r0, #1
   10706:	cbz	r6, 10726 <__register_exitproc+0x3e>
   10708:	add.w	r5, r4, r0, lsl #2
   1070c:	movs	r2, #1
   1070e:	str.w	sl, [r5, #136]	; 0x88
   10712:	ldr.w	r1, [r4, #392]	; 0x188
   10716:	lsls	r2, r0
   10718:	orrs	r1, r2
   1071a:	cmp	r6, #2
   1071c:	str.w	r1, [r4, #392]	; 0x188
   10720:	str.w	r9, [r5, #264]	; 0x108
   10724:	beq.n	10764 <__register_exitproc+0x7c>
   10726:	adds	r0, #2
   10728:	str	r3, [r4, #4]
   1072a:	str.w	r8, [r4, r0, lsl #2]
   1072e:	movs	r0, #0
   10730:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10734:	ldr	r3, [pc, #80]	; (10788 <__register_exitproc+0xa0>)
   10736:	cbz	r3, 1077a <__register_exitproc+0x92>
   10738:	mov.w	r0, #400	; 0x190
   1073c:	bl	c020 <malloc>
   10740:	mov	r4, r0
   10742:	cbz	r0, 1077a <__register_exitproc+0x92>
   10744:	ldr.w	r3, [r5, #328]	; 0x148
   10748:	movs	r7, #0
   1074a:	stmia.w	r0, {r3, r7}
   1074e:	str.w	r4, [r5, #328]	; 0x148
   10752:	mov	r0, r7
   10754:	movs	r3, #1
   10756:	str.w	r7, [r4, #392]	; 0x188
   1075a:	str.w	r7, [r4, #396]	; 0x18c
   1075e:	cmp	r6, #0
   10760:	beq.n	10726 <__register_exitproc+0x3e>
   10762:	b.n	10708 <__register_exitproc+0x20>
   10764:	ldr.w	r1, [r4, #396]	; 0x18c
   10768:	orrs	r2, r1
   1076a:	str.w	r2, [r4, #396]	; 0x18c
   1076e:	b.n	10726 <__register_exitproc+0x3e>
   10770:	add.w	r4, r5, #332	; 0x14c
   10774:	str.w	r4, [r5, #328]	; 0x148
   10778:	b.n	106fe <__register_exitproc+0x16>
   1077a:	mov.w	r0, #4294967295
   1077e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10782:	nop
   10784:	.word	0x00013e7c
   10788:	.word	0x0000c021

0001078c <register_fini>:
   1078c:	ldr	r3, [pc, #8]	; (10798 <register_fini+0xc>)
   1078e:	cbz	r3, 10796 <register_fini+0xa>
   10790:	ldr	r0, [pc, #8]	; (1079c <register_fini+0x10>)
   10792:	b.w	107a0 <atexit>
   10796:	bx	lr
   10798:	.word	0x00000000
   1079c:	.word	0x0001170d

000107a0 <atexit>:
   107a0:	movs	r3, #0
   107a2:	mov	r1, r0
   107a4:	mov	r2, r3
   107a6:	mov	r0, r3
   107a8:	b.w	106e8 <__register_exitproc>

000107ac <quorem>:
   107ac:	ldr	r2, [r0, #16]
   107ae:	ldr	r3, [r1, #16]
   107b0:	cmp	r3, r2
   107b2:	bgt.w	108d0 <quorem+0x124>
   107b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107ba:	add.w	r8, r3, #4294967295
   107be:	add.w	r7, r1, #20
   107c2:	add.w	fp, r0, #20
   107c6:	ldr.w	r2, [r7, r8, lsl #2]
   107ca:	ldr.w	r3, [fp, r8, lsl #2]
   107ce:	mov.w	r4, r8, lsl #2
   107d2:	sub	sp, #12
   107d4:	adds	r2, #1
   107d6:	udiv	r9, r3, r2
   107da:	add.w	r3, fp, r4
   107de:	str	r4, [sp, #0]
   107e0:	add.w	sl, r7, r4
   107e4:	str	r3, [sp, #4]
   107e6:	cmp.w	r9, #0
   107ea:	beq.n	10860 <quorem+0xb4>
   107ec:	movs	r5, #0
   107ee:	mov	ip, r7
   107f0:	mov	lr, fp
   107f2:	mov	r3, r5
   107f4:	ldr.w	r6, [ip], #4
   107f8:	ldr.w	r2, [lr]
   107fc:	uxth	r4, r6
   107fe:	mla	r5, r9, r4, r5
   10802:	lsrs	r6, r6, #16
   10804:	lsrs	r4, r5, #16
   10806:	mla	r4, r9, r6, r4
   1080a:	uxth	r5, r5
   1080c:	subs	r3, r3, r5
   1080e:	uxth	r6, r4
   10810:	uxtah	r3, r3, r2
   10814:	rsb	r6, r6, r2, lsr #16
   10818:	add.w	r6, r6, r3, asr #16
   1081c:	uxth	r3, r3
   1081e:	orr.w	r3, r3, r6, lsl #16
   10822:	cmp	sl, ip
   10824:	str.w	r3, [lr], #4
   10828:	mov.w	r5, r4, lsr #16
   1082c:	mov.w	r3, r6, asr #16
   10830:	bcs.n	107f4 <quorem+0x48>
   10832:	ldr	r3, [sp, #0]
   10834:	ldr.w	r3, [fp, r3]
   10838:	cbnz	r3, 10860 <quorem+0xb4>
   1083a:	ldr	r4, [sp, #4]
   1083c:	subs	r3, r4, #4
   1083e:	cmp	fp, r3
   10840:	bcs.n	1085c <quorem+0xb0>
   10842:	ldr.w	r3, [r4, #-4]
   10846:	cbnz	r3, 1085c <quorem+0xb0>
   10848:	sub.w	r3, r4, #8
   1084c:	b.n	10854 <quorem+0xa8>
   1084e:	ldr	r2, [r3, #0]
   10850:	subs	r3, #4
   10852:	cbnz	r2, 1085c <quorem+0xb0>
   10854:	cmp	fp, r3
   10856:	add.w	r8, r8, #4294967295
   1085a:	bcc.n	1084e <quorem+0xa2>
   1085c:	str.w	r8, [r0, #16]
   10860:	mov	r4, r0
   10862:	bl	12648 <__mcmp>
   10866:	cmp	r0, #0
   10868:	blt.n	108c8 <quorem+0x11c>
   1086a:	add.w	r9, r9, #1
   1086e:	mov	r5, fp
   10870:	movs	r3, #0
   10872:	ldr.w	r1, [r7], #4
   10876:	ldr	r0, [r5, #0]
   10878:	uxth	r2, r1
   1087a:	subs	r2, r3, r2
   1087c:	lsrs	r1, r1, #16
   1087e:	uxtah	r2, r2, r0
   10882:	rsb	r3, r1, r0, lsr #16
   10886:	add.w	r3, r3, r2, asr #16
   1088a:	uxth	r1, r2
   1088c:	orr.w	r1, r1, r3, lsl #16
   10890:	cmp	sl, r7
   10892:	str.w	r1, [r5], #4
   10896:	mov.w	r3, r3, asr #16
   1089a:	bcs.n	10872 <quorem+0xc6>
   1089c:	ldr.w	r2, [fp, r8, lsl #2]
   108a0:	add.w	r3, fp, r8, lsl #2
   108a4:	cbnz	r2, 108c8 <quorem+0x11c>
   108a6:	subs	r2, r3, #4
   108a8:	cmp	fp, r2
   108aa:	bcs.n	108c4 <quorem+0x118>
   108ac:	ldr.w	r2, [r3, #-4]
   108b0:	cbnz	r2, 108c4 <quorem+0x118>
   108b2:	subs	r3, #8
   108b4:	b.n	108bc <quorem+0x110>
   108b6:	ldr	r2, [r3, #0]
   108b8:	subs	r3, #4
   108ba:	cbnz	r2, 108c4 <quorem+0x118>
   108bc:	cmp	fp, r3
   108be:	add.w	r8, r8, #4294967295
   108c2:	bcc.n	108b6 <quorem+0x10a>
   108c4:	str.w	r8, [r4, #16]
   108c8:	mov	r0, r9
   108ca:	add	sp, #12
   108cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108d0:	movs	r0, #0
   108d2:	bx	lr
   108d4:			; <UNDEFINED> instruction: 0xffffffff

000108d8 <_dtoa_r>:
   108d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108dc:	vmov	r6, r7, d0
   108e0:	sub	sp, #108	; 0x6c
   108e2:	ldr	r4, [r0, #64]	; 0x40
   108e4:	ldr	r5, [sp, #144]	; 0x90
   108e6:	str	r1, [sp, #0]
   108e8:	mov	r9, r0
   108ea:	str	r2, [sp, #20]
   108ec:	str	r3, [sp, #12]
   108ee:	vmov	sl, s0
   108f2:	mov	fp, r7
   108f4:	cbz	r4, 1090c <_dtoa_r+0x34>
   108f6:	ldr	r2, [r0, #68]	; 0x44
   108f8:	str	r2, [r4, #4]
   108fa:	movs	r3, #1
   108fc:	lsls	r3, r2
   108fe:	str	r3, [r4, #8]
   10900:	mov	r1, r4
   10902:	bl	121ec <_Bfree>
   10906:	movs	r3, #0
   10908:	str.w	r3, [r9, #64]	; 0x40
   1090c:	cmp.w	fp, #0
   10910:	mov	r4, fp
   10912:	blt.n	1097e <_dtoa_r+0xa6>
   10914:	movs	r3, #0
   10916:	str	r3, [r5, #0]
   10918:	ldr	r3, [pc, #644]	; (10ba0 <_dtoa_r+0x2c8>)
   1091a:	mov	r2, r3
   1091c:	ands	r3, r4
   1091e:	cmp	r3, r2
   10920:	beq.n	10950 <_dtoa_r+0x78>
   10922:	movs	r2, #0
   10924:	movs	r3, #0
   10926:	mov	r0, sl
   10928:	mov	r1, fp
   1092a:	bl	b764 <__aeabi_dcmpeq>
   1092e:	mov	r6, sl
   10930:	mov	r7, fp
   10932:	mov	r8, r0
   10934:	cbz	r0, 1098a <_dtoa_r+0xb2>
   10936:	ldr	r2, [sp, #12]
   10938:	movs	r3, #1
   1093a:	str	r3, [r2, #0]
   1093c:	ldr	r3, [sp, #148]	; 0x94
   1093e:	cmp	r3, #0
   10940:	beq.w	10ac0 <_dtoa_r+0x1e8>
   10944:	ldr	r0, [pc, #604]	; (10ba4 <_dtoa_r+0x2cc>)
   10946:	str	r0, [r3, #0]
   10948:	subs	r0, #1
   1094a:	add	sp, #108	; 0x6c
   1094c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10950:	ldr	r2, [sp, #12]
   10952:	movw	r3, #9999	; 0x270f
   10956:	str	r3, [r2, #0]
   10958:	cmp.w	sl, #0
   1095c:	beq.w	10a94 <_dtoa_r+0x1bc>
   10960:	ldr	r0, [pc, #580]	; (10ba8 <_dtoa_r+0x2d0>)
   10962:	ldr	r3, [sp, #148]	; 0x94
   10964:	cmp	r3, #0
   10966:	beq.n	1094a <_dtoa_r+0x72>
   10968:	ldrb	r3, [r0, #3]
   1096a:	cmp	r3, #0
   1096c:	beq.w	10ac4 <_dtoa_r+0x1ec>
   10970:	add.w	r3, r0, #8
   10974:	ldr	r2, [sp, #148]	; 0x94
   10976:	str	r3, [r2, #0]
   10978:	add	sp, #108	; 0x6c
   1097a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1097e:	movs	r3, #1
   10980:	bic.w	r4, fp, #2147483648	; 0x80000000
   10984:	str	r3, [r5, #0]
   10986:	mov	fp, r4
   10988:	b.n	10918 <_dtoa_r+0x40>
   1098a:	add	r2, sp, #96	; 0x60
   1098c:	add	r1, sp, #100	; 0x64
   1098e:	vmov	d0, r6, r7
   10992:	mov	r0, r9
   10994:	bl	128c4 <__d2b>
   10998:	lsrs	r5, r4, #20
   1099a:	str	r0, [sp, #40]	; 0x28
   1099c:	bne.w	10aa6 <_dtoa_r+0x1ce>
   109a0:	ldr	r5, [sp, #96]	; 0x60
   109a2:	ldr	r6, [sp, #100]	; 0x64
   109a4:	add	r6, r5
   109a6:	addw	r3, r6, #1074	; 0x432
   109aa:	cmp	r3, #32
   109ac:	ble.w	10ec0 <_dtoa_r+0x5e8>
   109b0:	rsb	r3, r3, #64	; 0x40
   109b4:	addw	r0, r6, #1042	; 0x412
   109b8:	lsls	r4, r3
   109ba:	lsr.w	r0, sl, r0
   109be:	orrs	r0, r4
   109c0:	bl	b1a8 <__aeabi_ui2d>
   109c4:	movs	r3, #1
   109c6:	subs	r4, r6, #1
   109c8:	sub.w	r1, r1, #32505856	; 0x1f00000
   109cc:	str	r3, [sp, #60]	; 0x3c
   109ce:	movs	r2, #0
   109d0:	ldr	r3, [pc, #472]	; (10bac <_dtoa_r+0x2d4>)
   109d2:	bl	af2c <__aeabi_dsub>
   109d6:	add	r3, pc, #432	; (adr r3, 10b88 <_dtoa_r+0x2b0>)
   109d8:	ldrd	r2, r3, [r3]
   109dc:	bl	b294 <__aeabi_dmul>
   109e0:	add	r3, pc, #428	; (adr r3, 10b90 <_dtoa_r+0x2b8>)
   109e2:	ldrd	r2, r3, [r3]
   109e6:	bl	af30 <__adddf3>
   109ea:	mov	r6, r0
   109ec:	mov	r0, r4
   109ee:	mov	r7, r1
   109f0:	bl	b1c8 <__aeabi_i2d>
   109f4:	add	r3, pc, #416	; (adr r3, 10b98 <_dtoa_r+0x2c0>)
   109f6:	ldrd	r2, r3, [r3]
   109fa:	bl	b294 <__aeabi_dmul>
   109fe:	mov	r2, r0
   10a00:	mov	r3, r1
   10a02:	mov	r0, r6
   10a04:	mov	r1, r7
   10a06:	bl	af30 <__adddf3>
   10a0a:	mov	r6, r0
   10a0c:	mov	r7, r1
   10a0e:	bl	b7f4 <__aeabi_d2iz>
   10a12:	movs	r2, #0
   10a14:	str	r0, [sp, #16]
   10a16:	movs	r3, #0
   10a18:	mov	r0, r6
   10a1a:	mov	r1, r7
   10a1c:	bl	b778 <__aeabi_dcmplt>
   10a20:	cmp	r0, #0
   10a22:	bne.w	10e76 <_dtoa_r+0x59e>
   10a26:	ldr	r6, [sp, #16]
   10a28:	cmp	r6, #22
   10a2a:	bhi.w	10e70 <_dtoa_r+0x598>
   10a2e:	ldr	r3, [pc, #384]	; (10bb0 <_dtoa_r+0x2d8>)
   10a30:	add.w	r3, r3, r6, lsl #3
   10a34:	ldrd	r0, r1, [r3]
   10a38:	mov	r2, sl
   10a3a:	mov	r3, fp
   10a3c:	bl	b7b4 <__aeabi_dcmpgt>
   10a40:	cmp	r0, #0
   10a42:	beq.w	10eca <_dtoa_r+0x5f2>
   10a46:	subs	r3, r6, #1
   10a48:	str	r3, [sp, #16]
   10a4a:	movs	r3, #0
   10a4c:	str	r3, [sp, #52]	; 0x34
   10a4e:	subs	r5, r5, r4
   10a50:	subs.w	r8, r5, #1
   10a54:	bmi.w	10eac <_dtoa_r+0x5d4>
   10a58:	movs	r3, #0
   10a5a:	str	r3, [sp, #28]
   10a5c:	ldr	r3, [sp, #16]
   10a5e:	cmp	r3, #0
   10a60:	blt.w	10e9a <_dtoa_r+0x5c2>
   10a64:	add	r8, r3
   10a66:	str	r3, [sp, #48]	; 0x30
   10a68:	movs	r3, #0
   10a6a:	str	r3, [sp, #24]
   10a6c:	ldr	r3, [sp, #0]
   10a6e:	cmp	r3, #9
   10a70:	bhi.n	10ac8 <_dtoa_r+0x1f0>
   10a72:	cmp	r3, #5
   10a74:	ble.w	11700 <_dtoa_r+0xe28>
   10a78:	subs	r3, #4
   10a7a:	str	r3, [sp, #0]
   10a7c:	movs	r6, #0
   10a7e:	ldr	r3, [sp, #0]
   10a80:	subs	r3, #2
   10a82:	cmp	r3, #3
   10a84:	bhi.w	116ce <_dtoa_r+0xdf6>
   10a88:	tbh	[pc, r3, lsl #1]
   10a8c:	.word	0x0224032b
   10a90:	.word	0x04500336
   10a94:	ldr	r3, [pc, #272]	; (10ba8 <_dtoa_r+0x2d0>)
   10a96:	ldr	r2, [pc, #284]	; (10bb4 <_dtoa_r+0x2dc>)
   10a98:	ubfx	r0, r4, #0, #20
   10a9c:	cmp	r0, #0
   10a9e:	ite	ne
   10aa0:	movne	r0, r3
   10aa2:	moveq	r0, r2
   10aa4:	b.n	10962 <_dtoa_r+0x8a>
   10aa6:	ubfx	r3, fp, #0, #20
   10aaa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10aae:	subw	r4, r5, #1023	; 0x3ff
   10ab2:	mov	r0, sl
   10ab4:	str.w	r8, [sp, #60]	; 0x3c
   10ab8:	orr.w	r1, r1, #3145728	; 0x300000
   10abc:	ldr	r5, [sp, #96]	; 0x60
   10abe:	b.n	109ce <_dtoa_r+0xf6>
   10ac0:	ldr	r0, [pc, #244]	; (10bb8 <_dtoa_r+0x2e0>)
   10ac2:	b.n	1094a <_dtoa_r+0x72>
   10ac4:	adds	r3, r0, #3
   10ac6:	b.n	10974 <_dtoa_r+0x9c>
   10ac8:	movs	r1, #0
   10aca:	str.w	r1, [r9, #68]	; 0x44
   10ace:	mov	r0, r9
   10ad0:	mov	r4, r1
   10ad2:	str	r1, [sp, #0]
   10ad4:	bl	121a0 <_Balloc>
   10ad8:	mov.w	r3, #4294967295
   10adc:	str	r3, [sp, #32]
   10ade:	str	r3, [sp, #56]	; 0x38
   10ae0:	movs	r3, #1
   10ae2:	str	r0, [sp, #36]	; 0x24
   10ae4:	str.w	r0, [r9, #64]	; 0x40
   10ae8:	str	r4, [sp, #20]
   10aea:	str	r3, [sp, #44]	; 0x2c
   10aec:	ldr	r3, [sp, #100]	; 0x64
   10aee:	cmp	r3, #0
   10af0:	blt.w	10c94 <_dtoa_r+0x3bc>
   10af4:	ldr	r2, [sp, #16]
   10af6:	cmp	r2, #14
   10af8:	bgt.w	10c94 <_dtoa_r+0x3bc>
   10afc:	ldr	r3, [pc, #176]	; (10bb0 <_dtoa_r+0x2d8>)
   10afe:	add.w	r3, r3, r2, lsl #3
   10b02:	vldr	d7, [r3]
   10b06:	ldr	r3, [sp, #20]
   10b08:	cmp	r3, #0
   10b0a:	vstr	d7, [sp]
   10b0e:	blt.w	1110e <_dtoa_r+0x836>
   10b12:	mov	r6, sl
   10b14:	mov	r7, fp
   10b16:	ldrd	sl, fp, [sp]
   10b1a:	mov	r0, r6
   10b1c:	mov	r2, sl
   10b1e:	mov	r3, fp
   10b20:	mov	r1, r7
   10b22:	bl	b4e8 <__aeabi_ddiv>
   10b26:	bl	b7f4 <__aeabi_d2iz>
   10b2a:	mov	r4, r0
   10b2c:	bl	b1c8 <__aeabi_i2d>
   10b30:	mov	r2, sl
   10b32:	mov	r3, fp
   10b34:	bl	b294 <__aeabi_dmul>
   10b38:	mov	r3, r1
   10b3a:	mov	r2, r0
   10b3c:	mov	r1, r7
   10b3e:	mov	r0, r6
   10b40:	bl	af2c <__aeabi_dsub>
   10b44:	ldr	r5, [sp, #36]	; 0x24
   10b46:	add.w	r3, r4, #48	; 0x30
   10b4a:	strb	r3, [r5, #0]
   10b4c:	ldr	r3, [sp, #32]
   10b4e:	cmp	r3, #1
   10b50:	mov	r6, r0
   10b52:	mov	r7, r1
   10b54:	add.w	r5, r5, #1
   10b58:	beq.n	10c1e <_dtoa_r+0x346>
   10b5a:	movs	r2, #0
   10b5c:	ldr	r3, [pc, #92]	; (10bbc <_dtoa_r+0x2e4>)
   10b5e:	bl	b294 <__aeabi_dmul>
   10b62:	movs	r2, #0
   10b64:	movs	r3, #0
   10b66:	mov	r6, r0
   10b68:	mov	r7, r1
   10b6a:	bl	b764 <__aeabi_dcmpeq>
   10b6e:	cmp	r0, #0
   10b70:	bne.n	10c6e <_dtoa_r+0x396>
   10b72:	str.w	r9, [sp, #20]
   10b76:	ldr.w	sl, [sp, #32]
   10b7a:	ldr.w	fp, [sp, #36]	; 0x24
   10b7e:	ldrd	r8, r9, [sp]
   10b82:	b.n	10bd6 <_dtoa_r+0x2fe>
   10b84:	nop.w
   10b88:	.word	0x636f4361
   10b8c:	.word	0x3fd287a7
   10b90:	.word	0x8b60c8b3
   10b94:	.word	0x3fc68a28
   10b98:	.word	0x509f79fb
   10b9c:	.word	0x3fd34413
   10ba0:	.word	0x7ff00000
   10ba4:	.word	0x00013f41
   10ba8:	.word	0x00014090
   10bac:	.word	0x3ff80000
   10bb0:	.word	0x00014198
   10bb4:	.word	0x00014084
   10bb8:	.word	0x00013f40
   10bbc:	.word	0x40240000
   10bc0:	bl	b294 <__aeabi_dmul>
   10bc4:	movs	r2, #0
   10bc6:	movs	r3, #0
   10bc8:	mov	r6, r0
   10bca:	mov	r7, r1
   10bcc:	bl	b764 <__aeabi_dcmpeq>
   10bd0:	cmp	r0, #0
   10bd2:	bne.w	11332 <_dtoa_r+0xa5a>
   10bd6:	mov	r2, r8
   10bd8:	mov	r3, r9
   10bda:	mov	r0, r6
   10bdc:	mov	r1, r7
   10bde:	bl	b4e8 <__aeabi_ddiv>
   10be2:	bl	b7f4 <__aeabi_d2iz>
   10be6:	mov	r4, r0
   10be8:	bl	b1c8 <__aeabi_i2d>
   10bec:	mov	r2, r8
   10bee:	mov	r3, r9
   10bf0:	bl	b294 <__aeabi_dmul>
   10bf4:	mov	r2, r0
   10bf6:	mov	r3, r1
   10bf8:	mov	r0, r6
   10bfa:	mov	r1, r7
   10bfc:	bl	af2c <__aeabi_dsub>
   10c00:	add.w	lr, r4, #48	; 0x30
   10c04:	strb.w	lr, [r5], #1
   10c08:	rsb	lr, fp, r5
   10c0c:	cmp	lr, sl
   10c0e:	mov	r6, r0
   10c10:	mov	r7, r1
   10c12:	mov.w	r2, #0
   10c16:	ldr	r3, [pc, #696]	; (10ed0 <_dtoa_r+0x5f8>)
   10c18:	bne.n	10bc0 <_dtoa_r+0x2e8>
   10c1a:	ldr.w	r9, [sp, #20]
   10c1e:	mov	r2, r6
   10c20:	mov	r3, r7
   10c22:	mov	r0, r6
   10c24:	mov	r1, r7
   10c26:	bl	af30 <__adddf3>
   10c2a:	mov	r6, r0
   10c2c:	mov	r7, r1
   10c2e:	mov	r2, r0
   10c30:	mov	r3, r1
   10c32:	ldrd	r0, r1, [sp]
   10c36:	bl	b778 <__aeabi_dcmplt>
   10c3a:	cbnz	r0, 10c4e <_dtoa_r+0x376>
   10c3c:	mov	r2, r6
   10c3e:	mov	r3, r7
   10c40:	ldrd	r0, r1, [sp]
   10c44:	bl	b764 <__aeabi_dcmpeq>
   10c48:	cbz	r0, 10c6e <_dtoa_r+0x396>
   10c4a:	lsls	r3, r4, #31
   10c4c:	bpl.n	10c6e <_dtoa_r+0x396>
   10c4e:	ldrb.w	r4, [r5, #-1]
   10c52:	ldr	r2, [sp, #36]	; 0x24
   10c54:	subs	r3, r5, #1
   10c56:	b.n	10c62 <_dtoa_r+0x38a>
   10c58:	cmp	r2, r3
   10c5a:	beq.w	11456 <_dtoa_r+0xb7e>
   10c5e:	ldrb.w	r4, [r3, #-1]!
   10c62:	cmp	r4, #57	; 0x39
   10c64:	add.w	r5, r3, #1
   10c68:	beq.n	10c58 <_dtoa_r+0x380>
   10c6a:	adds	r4, #1
   10c6c:	strb	r4, [r3, #0]
   10c6e:	ldr	r1, [sp, #40]	; 0x28
   10c70:	mov	r0, r9
   10c72:	bl	121ec <_Bfree>
   10c76:	movs	r2, #0
   10c78:	ldr	r3, [sp, #16]
   10c7a:	strb	r2, [r5, #0]
   10c7c:	ldr	r2, [sp, #12]
   10c7e:	adds	r3, #1
   10c80:	str	r3, [r2, #0]
   10c82:	ldr	r3, [sp, #148]	; 0x94
   10c84:	cmp	r3, #0
   10c86:	beq.w	113c0 <_dtoa_r+0xae8>
   10c8a:	ldr	r0, [sp, #36]	; 0x24
   10c8c:	str	r5, [r3, #0]
   10c8e:	add	sp, #108	; 0x6c
   10c90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c94:	ldr	r2, [sp, #44]	; 0x2c
   10c96:	cmp	r2, #0
   10c98:	beq.w	10eb8 <_dtoa_r+0x5e0>
   10c9c:	ldr	r2, [sp, #0]
   10c9e:	cmp	r2, #1
   10ca0:	ble.w	11152 <_dtoa_r+0x87a>
   10ca4:	ldr	r3, [sp, #32]
   10ca6:	ldr	r2, [sp, #24]
   10ca8:	subs	r7, r3, #1
   10caa:	cmp	r2, r7
   10cac:	blt.w	113c6 <_dtoa_r+0xaee>
   10cb0:	subs	r7, r2, r7
   10cb2:	ldr	r3, [sp, #32]
   10cb4:	cmp	r3, #0
   10cb6:	blt.w	115ba <_dtoa_r+0xce2>
   10cba:	ldr	r5, [sp, #28]
   10cbc:	ldr	r3, [sp, #32]
   10cbe:	ldr	r2, [sp, #28]
   10cc0:	movs	r1, #1
   10cc2:	add	r2, r3
   10cc4:	mov	r0, r9
   10cc6:	str	r2, [sp, #28]
   10cc8:	add	r8, r3
   10cca:	bl	123b4 <__i2b>
   10cce:	mov	r6, r0
   10cd0:	cbz	r5, 10cec <_dtoa_r+0x414>
   10cd2:	cmp.w	r8, #0
   10cd6:	ble.n	10cec <_dtoa_r+0x414>
   10cd8:	cmp	r5, r8
   10cda:	ldr	r2, [sp, #28]
   10cdc:	mov	r3, r5
   10cde:	it	ge
   10ce0:	movge	r3, r8
   10ce2:	subs	r2, r2, r3
   10ce4:	str	r2, [sp, #28]
   10ce6:	subs	r5, r5, r3
   10ce8:	rsb	r8, r3, r8
   10cec:	ldr	r3, [sp, #24]
   10cee:	cmp	r3, #0
   10cf0:	ble.w	112de <_dtoa_r+0xa06>
   10cf4:	ldr	r2, [sp, #44]	; 0x2c
   10cf6:	cmp	r2, #0
   10cf8:	beq.w	11100 <_dtoa_r+0x828>
   10cfc:	cmp	r7, #0
   10cfe:	beq.w	11100 <_dtoa_r+0x828>
   10d02:	mov	r1, r6
   10d04:	mov	r2, r7
   10d06:	mov	r0, r9
   10d08:	bl	124f8 <__pow5mult>
   10d0c:	ldr	r2, [sp, #40]	; 0x28
   10d0e:	mov	r1, r0
   10d10:	mov	r6, r0
   10d12:	mov	r0, r9
   10d14:	bl	123c8 <__multiply>
   10d18:	ldr	r1, [sp, #40]	; 0x28
   10d1a:	mov	r4, r0
   10d1c:	mov	r0, r9
   10d1e:	bl	121ec <_Bfree>
   10d22:	ldr	r3, [sp, #24]
   10d24:	subs	r3, r3, r7
   10d26:	str	r3, [sp, #24]
   10d28:	bne.w	110fe <_dtoa_r+0x826>
   10d2c:	movs	r1, #1
   10d2e:	mov	r0, r9
   10d30:	bl	123b4 <__i2b>
   10d34:	ldr	r3, [sp, #48]	; 0x30
   10d36:	str	r0, [sp, #24]
   10d38:	cmp	r3, #0
   10d3a:	beq.w	11168 <_dtoa_r+0x890>
   10d3e:	mov	r1, r0
   10d40:	mov	r2, r3
   10d42:	mov	r0, r9
   10d44:	bl	124f8 <__pow5mult>
   10d48:	ldr	r3, [sp, #0]
   10d4a:	str	r0, [sp, #24]
   10d4c:	cmp	r3, #1
   10d4e:	ble.w	11338 <_dtoa_r+0xa60>
   10d52:	movs	r7, #0
   10d54:	ldr	r2, [sp, #24]
   10d56:	ldr	r3, [r2, #16]
   10d58:	add.w	r3, r2, r3, lsl #2
   10d5c:	ldr	r0, [r3, #16]
   10d5e:	bl	12318 <__hi0bits>
   10d62:	rsb	r0, r0, #32
   10d66:	add	r0, r8
   10d68:	ands.w	r0, r0, #31
   10d6c:	beq.w	11164 <_dtoa_r+0x88c>
   10d70:	rsb	r3, r0, #32
   10d74:	cmp	r3, #4
   10d76:	ble.w	116f4 <_dtoa_r+0xe1c>
   10d7a:	rsb	r0, r0, #28
   10d7e:	ldr	r3, [sp, #28]
   10d80:	add	r3, r0
   10d82:	str	r3, [sp, #28]
   10d84:	add	r5, r0
   10d86:	add	r8, r0
   10d88:	ldr	r3, [sp, #28]
   10d8a:	cmp	r3, #0
   10d8c:	ble.n	10d9a <_dtoa_r+0x4c2>
   10d8e:	mov	r1, r4
   10d90:	mov	r2, r3
   10d92:	mov	r0, r9
   10d94:	bl	12598 <__lshift>
   10d98:	mov	r4, r0
   10d9a:	cmp.w	r8, #0
   10d9e:	ble.n	10dac <_dtoa_r+0x4d4>
   10da0:	mov	r2, r8
   10da2:	ldr	r1, [sp, #24]
   10da4:	mov	r0, r9
   10da6:	bl	12598 <__lshift>
   10daa:	str	r0, [sp, #24]
   10dac:	ldr	r3, [sp, #52]	; 0x34
   10dae:	cmp	r3, #0
   10db0:	bne.w	112a8 <_dtoa_r+0x9d0>
   10db4:	ldr	r3, [sp, #32]
   10db6:	cmp	r3, #0
   10db8:	ble.w	112e2 <_dtoa_r+0xa0a>
   10dbc:	ldr	r3, [sp, #44]	; 0x2c
   10dbe:	cmp	r3, #0
   10dc0:	bne.w	111ac <_dtoa_r+0x8d4>
   10dc4:	ldr.w	fp, [sp, #36]	; 0x24
   10dc8:	ldr	r7, [sp, #32]
   10dca:	ldr.w	r8, [sp, #24]
   10dce:	mov	r5, fp
   10dd0:	b.n	10dd8 <_dtoa_r+0x500>
   10dd2:	bl	12200 <__multadd>
   10dd6:	mov	r4, r0
   10dd8:	mov	r1, r8
   10dda:	mov	r0, r4
   10ddc:	bl	107ac <quorem>
   10de0:	add.w	sl, r0, #48	; 0x30
   10de4:	strb.w	sl, [r5], #1
   10de8:	rsb	r3, fp, r5
   10dec:	cmp	r3, r7
   10dee:	mov.w	r2, #10
   10df2:	mov.w	r3, #0
   10df6:	mov	r1, r4
   10df8:	mov	r0, r9
   10dfa:	blt.n	10dd2 <_dtoa_r+0x4fa>
   10dfc:	ldr	r3, [sp, #36]	; 0x24
   10dfe:	ldr	r2, [sp, #32]
   10e00:	cmp	r2, #1
   10e02:	ite	ge
   10e04:	addge	r3, r3, r2
   10e06:	addlt	r3, #1
   10e08:	mov	r5, r3
   10e0a:	mov.w	fp, #0
   10e0e:	mov	r1, r4
   10e10:	movs	r2, #1
   10e12:	mov	r0, r9
   10e14:	bl	12598 <__lshift>
   10e18:	ldr	r1, [sp, #24]
   10e1a:	str	r0, [sp, #40]	; 0x28
   10e1c:	bl	12648 <__mcmp>
   10e20:	cmp	r0, #0
   10e22:	ble.w	11430 <_dtoa_r+0xb58>
   10e26:	ldrb.w	r2, [r5, #-1]
   10e2a:	ldr	r1, [sp, #36]	; 0x24
   10e2c:	subs	r3, r5, #1
   10e2e:	b.n	10e3a <_dtoa_r+0x562>
   10e30:	cmp	r3, r1
   10e32:	beq.w	1131e <_dtoa_r+0xa46>
   10e36:	ldrb.w	r2, [r3, #-1]!
   10e3a:	cmp	r2, #57	; 0x39
   10e3c:	add.w	r5, r3, #1
   10e40:	beq.n	10e30 <_dtoa_r+0x558>
   10e42:	adds	r2, #1
   10e44:	strb	r2, [r3, #0]
   10e46:	ldr	r1, [sp, #24]
   10e48:	mov	r0, r9
   10e4a:	bl	121ec <_Bfree>
   10e4e:	cmp	r6, #0
   10e50:	beq.w	10c6e <_dtoa_r+0x396>
   10e54:	cmp.w	fp, #0
   10e58:	beq.n	10e66 <_dtoa_r+0x58e>
   10e5a:	cmp	fp, r6
   10e5c:	beq.n	10e66 <_dtoa_r+0x58e>
   10e5e:	mov	r1, fp
   10e60:	mov	r0, r9
   10e62:	bl	121ec <_Bfree>
   10e66:	mov	r1, r6
   10e68:	mov	r0, r9
   10e6a:	bl	121ec <_Bfree>
   10e6e:	b.n	10c6e <_dtoa_r+0x396>
   10e70:	movs	r3, #1
   10e72:	str	r3, [sp, #52]	; 0x34
   10e74:	b.n	10a4e <_dtoa_r+0x176>
   10e76:	ldr.w	r8, [sp, #16]
   10e7a:	mov	r0, r8
   10e7c:	bl	b1c8 <__aeabi_i2d>
   10e80:	mov	r2, r0
   10e82:	mov	r3, r1
   10e84:	mov	r0, r6
   10e86:	mov	r1, r7
   10e88:	bl	b764 <__aeabi_dcmpeq>
   10e8c:	cmp	r0, #0
   10e8e:	bne.w	10a26 <_dtoa_r+0x14e>
   10e92:	add.w	r3, r8, #4294967295
   10e96:	str	r3, [sp, #16]
   10e98:	b.n	10a26 <_dtoa_r+0x14e>
   10e9a:	ldr	r2, [sp, #28]
   10e9c:	ldr	r3, [sp, #16]
   10e9e:	subs	r2, r2, r3
   10ea0:	negs	r3, r3
   10ea2:	str	r3, [sp, #24]
   10ea4:	movs	r3, #0
   10ea6:	str	r2, [sp, #28]
   10ea8:	str	r3, [sp, #48]	; 0x30
   10eaa:	b.n	10a6c <_dtoa_r+0x194>
   10eac:	rsb	r3, r8, #0
   10eb0:	str	r3, [sp, #28]
   10eb2:	mov.w	r8, #0
   10eb6:	b.n	10a5c <_dtoa_r+0x184>
   10eb8:	ldr	r7, [sp, #24]
   10eba:	ldr	r5, [sp, #28]
   10ebc:	ldr	r6, [sp, #44]	; 0x2c
   10ebe:	b.n	10cd0 <_dtoa_r+0x3f8>
   10ec0:	rsb	r4, r3, #32
   10ec4:	lsl.w	r0, sl, r4
   10ec8:	b.n	109c0 <_dtoa_r+0xe8>
   10eca:	str	r0, [sp, #52]	; 0x34
   10ecc:	b.n	10a4e <_dtoa_r+0x176>
   10ece:	nop
   10ed0:	.word	0x40240000
   10ed4:	movs	r3, #0
   10ed6:	str	r3, [sp, #44]	; 0x2c
   10ed8:	ldr	r3, [sp, #16]
   10eda:	ldr	r2, [sp, #20]
   10edc:	add	r3, r2
   10ede:	str	r3, [sp, #56]	; 0x38
   10ee0:	adds	r3, #1
   10ee2:	cmp	r3, #0
   10ee4:	str	r3, [sp, #32]
   10ee6:	ble.w	113e4 <_dtoa_r+0xb0c>
   10eea:	ldr	r4, [sp, #32]
   10eec:	mov	r5, r4
   10eee:	movs	r1, #0
   10ef0:	cmp	r5, #23
   10ef2:	str.w	r1, [r9, #68]	; 0x44
   10ef6:	bls.n	10f10 <_dtoa_r+0x638>
   10ef8:	movs	r2, #1
   10efa:	movs	r3, #4
   10efc:	lsls	r3, r3, #1
   10efe:	add.w	r0, r3, #20
   10f02:	cmp	r0, r5
   10f04:	mov	r1, r2
   10f06:	add.w	r2, r2, #1
   10f0a:	bls.n	10efc <_dtoa_r+0x624>
   10f0c:	str.w	r1, [r9, #68]	; 0x44
   10f10:	mov	r0, r9
   10f12:	bl	121a0 <_Balloc>
   10f16:	cmp	r4, #14
   10f18:	str	r0, [sp, #36]	; 0x24
   10f1a:	str.w	r0, [r9, #64]	; 0x40
   10f1e:	bhi.w	10aec <_dtoa_r+0x214>
   10f22:	cmp	r6, #0
   10f24:	beq.w	10aec <_dtoa_r+0x214>
   10f28:	ldr	r1, [sp, #16]
   10f2a:	cmp	r1, #0
   10f2c:	strd	sl, fp, [sp, #64]	; 0x40
   10f30:	ble.w	11468 <_dtoa_r+0xb90>
   10f34:	ldr	r3, [pc, #576]	; (11178 <_dtoa_r+0x8a0>)
   10f36:	and.w	r2, r1, #15
   10f3a:	asrs	r6, r1, #4
   10f3c:	add.w	r3, r3, r2, lsl #3
   10f40:	lsls	r0, r6, #27
   10f42:	ldrd	r4, r5, [r3]
   10f46:	bpl.w	113d6 <_dtoa_r+0xafe>
   10f4a:	ldr	r3, [pc, #560]	; (1117c <_dtoa_r+0x8a4>)
   10f4c:	mov	r0, sl
   10f4e:	mov	r1, fp
   10f50:	ldrd	r2, r3, [r3, #32]
   10f54:	bl	b4e8 <__aeabi_ddiv>
   10f58:	strd	r0, r1, [sp, #72]	; 0x48
   10f5c:	and.w	r6, r6, #15
   10f60:	mov.w	sl, #3
   10f64:	cbz	r6, 10f88 <_dtoa_r+0x6b0>
   10f66:	ldr	r7, [pc, #532]	; (1117c <_dtoa_r+0x8a4>)
   10f68:	lsls	r1, r6, #31
   10f6a:	bpl.n	10f80 <_dtoa_r+0x6a8>
   10f6c:	mov	r0, r4
   10f6e:	mov	r1, r5
   10f70:	ldrd	r2, r3, [r7]
   10f74:	bl	b294 <__aeabi_dmul>
   10f78:	add.w	sl, sl, #1
   10f7c:	mov	r4, r0
   10f7e:	mov	r5, r1
   10f80:	asrs	r6, r6, #1
   10f82:	add.w	r7, r7, #8
   10f86:	bne.n	10f68 <_dtoa_r+0x690>
   10f88:	mov	r2, r4
   10f8a:	mov	r3, r5
   10f8c:	ldrd	r0, r1, [sp, #72]	; 0x48
   10f90:	bl	b4e8 <__aeabi_ddiv>
   10f94:	mov	r6, r0
   10f96:	mov	r7, r1
   10f98:	ldr	r3, [sp, #52]	; 0x34
   10f9a:	cbz	r3, 10fae <_dtoa_r+0x6d6>
   10f9c:	movs	r2, #0
   10f9e:	ldr	r3, [pc, #480]	; (11180 <_dtoa_r+0x8a8>)
   10fa0:	mov	r0, r6
   10fa2:	mov	r1, r7
   10fa4:	bl	b778 <__aeabi_dcmplt>
   10fa8:	cmp	r0, #0
   10faa:	bne.w	115e2 <_dtoa_r+0xd0a>
   10fae:	mov	r0, sl
   10fb0:	bl	b1c8 <__aeabi_i2d>
   10fb4:	mov	r2, r6
   10fb6:	mov	r3, r7
   10fb8:	bl	b294 <__aeabi_dmul>
   10fbc:	ldr	r3, [pc, #452]	; (11184 <_dtoa_r+0x8ac>)
   10fbe:	movs	r2, #0
   10fc0:	bl	af30 <__adddf3>
   10fc4:	ldr	r3, [sp, #32]
   10fc6:	mov	r4, r0
   10fc8:	sub.w	r5, r1, #54525952	; 0x3400000
   10fcc:	cmp	r3, #0
   10fce:	beq.w	11388 <_dtoa_r+0xab0>
   10fd2:	ldr	r3, [sp, #16]
   10fd4:	str	r3, [sp, #88]	; 0x58
   10fd6:	ldr	r3, [sp, #32]
   10fd8:	str	r3, [sp, #72]	; 0x48
   10fda:	ldr	r3, [sp, #44]	; 0x2c
   10fdc:	cmp	r3, #0
   10fde:	beq.w	1150a <_dtoa_r+0xc32>
   10fe2:	ldr	r2, [sp, #72]	; 0x48
   10fe4:	ldr	r3, [pc, #400]	; (11178 <_dtoa_r+0x8a0>)
   10fe6:	ldr	r1, [pc, #416]	; (11188 <_dtoa_r+0x8b0>)
   10fe8:	add.w	r3, r3, r2, lsl #3
   10fec:	ldrd	r2, r3, [r3, #-8]
   10ff0:	movs	r0, #0
   10ff2:	bl	b4e8 <__aeabi_ddiv>
   10ff6:	mov	r2, r4
   10ff8:	mov	r3, r5
   10ffa:	bl	af2c <__aeabi_dsub>
   10ffe:	mov	sl, r0
   11000:	mov	fp, r1
   11002:	mov	r0, r6
   11004:	mov	r1, r7
   11006:	bl	b7f4 <__aeabi_d2iz>
   1100a:	mov	r4, r0
   1100c:	bl	b1c8 <__aeabi_i2d>
   11010:	mov	r2, r0
   11012:	mov	r3, r1
   11014:	mov	r0, r6
   11016:	mov	r1, r7
   11018:	bl	af2c <__aeabi_dsub>
   1101c:	adds	r4, #48	; 0x30
   1101e:	ldr	r5, [sp, #36]	; 0x24
   11020:	uxtb	r4, r4
   11022:	mov	r6, r0
   11024:	mov	r7, r1
   11026:	strb	r4, [r5, #0]
   11028:	mov	r2, r0
   1102a:	mov	r3, r1
   1102c:	mov	r0, sl
   1102e:	mov	r1, fp
   11030:	adds	r5, #1
   11032:	bl	b7b4 <__aeabi_dcmpgt>
   11036:	cmp	r0, #0
   11038:	bne.n	110dc <_dtoa_r+0x804>
   1103a:	mov	r2, r6
   1103c:	mov	r3, r7
   1103e:	movs	r0, #0
   11040:	ldr	r1, [pc, #316]	; (11180 <_dtoa_r+0x8a8>)
   11042:	bl	af2c <__aeabi_dsub>
   11046:	mov	r2, r0
   11048:	mov	r3, r1
   1104a:	mov	r0, sl
   1104c:	mov	r1, fp
   1104e:	bl	b7b4 <__aeabi_dcmpgt>
   11052:	cmp	r0, #0
   11054:	bne.w	11668 <_dtoa_r+0xd90>
   11058:	ldr	r2, [sp, #72]	; 0x48
   1105a:	cmp	r2, #1
   1105c:	ble.w	1144e <_dtoa_r+0xb76>
   11060:	ldr	r3, [sp, #72]	; 0x48
   11062:	ldr	r2, [sp, #36]	; 0x24
   11064:	str.w	r8, [sp, #72]	; 0x48
   11068:	add	r3, r2
   1106a:	mov	r8, r3
   1106c:	b.n	1108a <_dtoa_r+0x7b2>
   1106e:	movs	r0, #0
   11070:	ldr	r1, [pc, #268]	; (11180 <_dtoa_r+0x8a8>)
   11072:	bl	af2c <__aeabi_dsub>
   11076:	mov	r2, sl
   11078:	mov	r3, fp
   1107a:	bl	b778 <__aeabi_dcmplt>
   1107e:	cmp	r0, #0
   11080:	bne.w	11668 <_dtoa_r+0xd90>
   11084:	cmp	r5, r8
   11086:	beq.w	1144a <_dtoa_r+0xb72>
   1108a:	mov	r0, sl
   1108c:	mov	r1, fp
   1108e:	movs	r2, #0
   11090:	ldr	r3, [pc, #248]	; (1118c <_dtoa_r+0x8b4>)
   11092:	bl	b294 <__aeabi_dmul>
   11096:	movs	r2, #0
   11098:	ldr	r3, [pc, #240]	; (1118c <_dtoa_r+0x8b4>)
   1109a:	mov	sl, r0
   1109c:	mov	fp, r1
   1109e:	mov	r0, r6
   110a0:	mov	r1, r7
   110a2:	bl	b294 <__aeabi_dmul>
   110a6:	mov	r7, r1
   110a8:	mov	r6, r0
   110aa:	bl	b7f4 <__aeabi_d2iz>
   110ae:	mov	r4, r0
   110b0:	bl	b1c8 <__aeabi_i2d>
   110b4:	mov	r2, r0
   110b6:	mov	r3, r1
   110b8:	mov	r0, r6
   110ba:	mov	r1, r7
   110bc:	bl	af2c <__aeabi_dsub>
   110c0:	adds	r4, #48	; 0x30
   110c2:	uxtb	r4, r4
   110c4:	mov	r2, sl
   110c6:	mov	r3, fp
   110c8:	strb.w	r4, [r5], #1
   110cc:	mov	r6, r0
   110ce:	mov	r7, r1
   110d0:	bl	b778 <__aeabi_dcmplt>
   110d4:	mov	r2, r6
   110d6:	mov	r3, r7
   110d8:	cmp	r0, #0
   110da:	beq.n	1106e <_dtoa_r+0x796>
   110dc:	ldr	r3, [sp, #88]	; 0x58
   110de:	str	r3, [sp, #16]
   110e0:	b.n	10c6e <_dtoa_r+0x396>
   110e2:	movs	r3, #0
   110e4:	str	r3, [sp, #44]	; 0x2c
   110e6:	ldr	r3, [sp, #20]
   110e8:	cmp	r3, #0
   110ea:	ble.w	113ee <_dtoa_r+0xb16>
   110ee:	mov	r5, r3
   110f0:	mov	r4, r3
   110f2:	str	r3, [sp, #56]	; 0x38
   110f4:	str	r3, [sp, #32]
   110f6:	b.n	10eee <_dtoa_r+0x616>
   110f8:	movs	r3, #1
   110fa:	str	r3, [sp, #44]	; 0x2c
   110fc:	b.n	110e6 <_dtoa_r+0x80e>
   110fe:	str	r4, [sp, #40]	; 0x28
   11100:	ldr	r2, [sp, #24]
   11102:	ldr	r1, [sp, #40]	; 0x28
   11104:	mov	r0, r9
   11106:	bl	124f8 <__pow5mult>
   1110a:	mov	r4, r0
   1110c:	b.n	10d2c <_dtoa_r+0x454>
   1110e:	ldr	r3, [sp, #32]
   11110:	cmp	r3, #0
   11112:	bgt.w	10b12 <_dtoa_r+0x23a>
   11116:	bne.w	113b8 <_dtoa_r+0xae0>
   1111a:	movs	r2, #0
   1111c:	ldr	r3, [pc, #112]	; (11190 <_dtoa_r+0x8b8>)
   1111e:	ldrd	r0, r1, [sp]
   11122:	bl	b294 <__aeabi_dmul>
   11126:	mov	r3, fp
   11128:	mov	r2, sl
   1112a:	bl	b7a0 <__aeabi_dcmpge>
   1112e:	ldr	r3, [sp, #32]
   11130:	str	r3, [sp, #24]
   11132:	mov	r6, r3
   11134:	cmp	r0, #0
   11136:	beq.w	1130e <_dtoa_r+0xa36>
   1113a:	ldr	r3, [sp, #20]
   1113c:	ldr	r5, [sp, #36]	; 0x24
   1113e:	mvns	r3, r3
   11140:	str	r3, [sp, #16]
   11142:	ldr	r1, [sp, #24]
   11144:	mov	r0, r9
   11146:	bl	121ec <_Bfree>
   1114a:	cmp	r6, #0
   1114c:	beq.w	10c6e <_dtoa_r+0x396>
   11150:	b.n	10e66 <_dtoa_r+0x58e>
   11152:	ldr	r2, [sp, #60]	; 0x3c
   11154:	cmp	r2, #0
   11156:	beq.w	115ca <_dtoa_r+0xcf2>
   1115a:	addw	r3, r3, #1075	; 0x433
   1115e:	ldr	r7, [sp, #24]
   11160:	ldr	r5, [sp, #28]
   11162:	b.n	10cbe <_dtoa_r+0x3e6>
   11164:	movs	r0, #28
   11166:	b.n	10d7e <_dtoa_r+0x4a6>
   11168:	ldr	r3, [sp, #0]
   1116a:	cmp	r3, #1
   1116c:	ble.w	11670 <_dtoa_r+0xd98>
   11170:	ldr	r7, [sp, #48]	; 0x30
   11172:	movs	r0, #1
   11174:	b.n	10d66 <_dtoa_r+0x48e>
   11176:	nop
   11178:	.word	0x00014198
   1117c:	.word	0x00014260
   11180:	.word	0x3ff00000
   11184:	.word	0x401c0000
   11188:	.word	0x3fe00000
   1118c:	.word	0x40240000
   11190:	.word	0x40140000
   11194:	mov	r1, r6
   11196:	movs	r3, #0
   11198:	movs	r2, #10
   1119a:	mov	r0, r9
   1119c:	bl	12200 <__multadd>
   111a0:	ldr	r3, [sp, #56]	; 0x38
   111a2:	cmp	r3, #0
   111a4:	mov	r6, r0
   111a6:	ble.w	116c4 <_dtoa_r+0xdec>
   111aa:	str	r3, [sp, #32]
   111ac:	cmp	r5, #0
   111ae:	ble.n	111bc <_dtoa_r+0x8e4>
   111b0:	mov	r1, r6
   111b2:	mov	r2, r5
   111b4:	mov	r0, r9
   111b6:	bl	12598 <__lshift>
   111ba:	mov	r6, r0
   111bc:	cmp	r7, #0
   111be:	bne.w	114ba <_dtoa_r+0xbe2>
   111c2:	mov	r8, r6
   111c4:	ldr	r3, [sp, #32]
   111c6:	ldr	r2, [sp, #36]	; 0x24
   111c8:	subs	r3, #1
   111ca:	adds	r3, r2, r3
   111cc:	str	r3, [sp, #32]
   111ce:	and.w	r3, sl, #1
   111d2:	str	r3, [sp, #40]	; 0x28
   111d4:	mov	r7, r2
   111d6:	ldr.w	fp, [sp, #24]
   111da:	mov	r0, r4
   111dc:	mov	r1, fp
   111de:	bl	107ac <quorem>
   111e2:	mov	r1, r6
   111e4:	mov	r5, r0
   111e6:	mov	r0, r4
   111e8:	bl	12648 <__mcmp>
   111ec:	mov	r2, r8
   111ee:	mov	r1, fp
   111f0:	mov	sl, r0
   111f2:	mov	r0, r9
   111f4:	bl	1268c <__mdiff>
   111f8:	ldr	r2, [r0, #12]
   111fa:	mov	fp, r0
   111fc:	add.w	r3, r5, #48	; 0x30
   11200:	cmp	r2, #0
   11202:	bne.n	11298 <_dtoa_r+0x9c0>
   11204:	mov	r1, r0
   11206:	mov	r0, r4
   11208:	str	r3, [sp, #28]
   1120a:	bl	12648 <__mcmp>
   1120e:	mov	r1, fp
   11210:	str	r0, [sp, #20]
   11212:	mov	r0, r9
   11214:	bl	121ec <_Bfree>
   11218:	ldr	r2, [sp, #20]
   1121a:	ldr	r3, [sp, #28]
   1121c:	cbnz	r2, 1122a <_dtoa_r+0x952>
   1121e:	ldr	r1, [sp, #0]
   11220:	cbnz	r1, 1122a <_dtoa_r+0x952>
   11222:	ldr	r1, [sp, #40]	; 0x28
   11224:	cmp	r1, #0
   11226:	beq.w	11694 <_dtoa_r+0xdbc>
   1122a:	cmp.w	sl, #0
   1122e:	blt.w	113f8 <_dtoa_r+0xb20>
   11232:	bne.n	11240 <_dtoa_r+0x968>
   11234:	ldr	r1, [sp, #0]
   11236:	cbnz	r1, 11240 <_dtoa_r+0x968>
   11238:	ldr	r1, [sp, #40]	; 0x28
   1123a:	cmp	r1, #0
   1123c:	beq.w	113f8 <_dtoa_r+0xb20>
   11240:	cmp	r2, #0
   11242:	bgt.w	114e2 <_dtoa_r+0xc0a>
   11246:	ldr	r2, [sp, #32]
   11248:	strb	r3, [r7, #0]
   1124a:	add.w	sl, r7, #1
   1124e:	cmp	r7, r2
   11250:	mov	r5, sl
   11252:	beq.w	114fa <_dtoa_r+0xc22>
   11256:	mov	r1, r4
   11258:	movs	r3, #0
   1125a:	movs	r2, #10
   1125c:	mov	r0, r9
   1125e:	bl	12200 <__multadd>
   11262:	cmp	r6, r8
   11264:	mov	r4, r0
   11266:	mov	r1, r6
   11268:	mov.w	r3, #0
   1126c:	mov.w	r2, #10
   11270:	mov	r0, r9
   11272:	beq.n	1128c <_dtoa_r+0x9b4>
   11274:	bl	12200 <__multadd>
   11278:	mov	r1, r8
   1127a:	mov	r6, r0
   1127c:	movs	r3, #0
   1127e:	movs	r2, #10
   11280:	mov	r0, r9
   11282:	bl	12200 <__multadd>
   11286:	mov	r7, sl
   11288:	mov	r8, r0
   1128a:	b.n	111d6 <_dtoa_r+0x8fe>
   1128c:	bl	12200 <__multadd>
   11290:	mov	r7, sl
   11292:	mov	r6, r0
   11294:	mov	r8, r0
   11296:	b.n	111d6 <_dtoa_r+0x8fe>
   11298:	mov	r1, r0
   1129a:	mov	r0, r9
   1129c:	str	r3, [sp, #20]
   1129e:	bl	121ec <_Bfree>
   112a2:	movs	r2, #1
   112a4:	ldr	r3, [sp, #20]
   112a6:	b.n	1122a <_dtoa_r+0x952>
   112a8:	ldr	r1, [sp, #24]
   112aa:	mov	r0, r4
   112ac:	bl	12648 <__mcmp>
   112b0:	cmp	r0, #0
   112b2:	bge.w	10db4 <_dtoa_r+0x4dc>
   112b6:	mov	r1, r4
   112b8:	ldr	r4, [sp, #16]
   112ba:	movs	r3, #0
   112bc:	subs	r4, #1
   112be:	movs	r2, #10
   112c0:	mov	r0, r9
   112c2:	str	r4, [sp, #16]
   112c4:	bl	12200 <__multadd>
   112c8:	ldr	r3, [sp, #44]	; 0x2c
   112ca:	mov	r4, r0
   112cc:	cmp	r3, #0
   112ce:	bne.w	11194 <_dtoa_r+0x8bc>
   112d2:	ldr	r3, [sp, #56]	; 0x38
   112d4:	cmp	r3, #0
   112d6:	ble.w	116b4 <_dtoa_r+0xddc>
   112da:	str	r3, [sp, #32]
   112dc:	b.n	10dc4 <_dtoa_r+0x4ec>
   112de:	ldr	r4, [sp, #40]	; 0x28
   112e0:	b.n	10d2c <_dtoa_r+0x454>
   112e2:	ldr	r3, [sp, #0]
   112e4:	cmp	r3, #2
   112e6:	ble.w	10dbc <_dtoa_r+0x4e4>
   112ea:	ldr	r3, [sp, #32]
   112ec:	cmp	r3, #0
   112ee:	bne.w	1162c <_dtoa_r+0xd54>
   112f2:	ldr	r1, [sp, #24]
   112f4:	movs	r2, #5
   112f6:	mov	r0, r9
   112f8:	bl	12200 <__multadd>
   112fc:	mov	r1, r0
   112fe:	str	r0, [sp, #24]
   11300:	mov	r0, r4
   11302:	bl	12648 <__mcmp>
   11306:	cmp	r0, #0
   11308:	str	r4, [sp, #40]	; 0x28
   1130a:	ble.w	1113a <_dtoa_r+0x862>
   1130e:	ldr	r2, [sp, #16]
   11310:	ldr	r1, [sp, #36]	; 0x24
   11312:	movs	r3, #49	; 0x31
   11314:	adds	r2, #1
   11316:	str	r2, [sp, #16]
   11318:	strb	r3, [r1, #0]
   1131a:	adds	r5, r1, #1
   1131c:	b.n	11142 <_dtoa_r+0x86a>
   1131e:	ldr	r2, [sp, #16]
   11320:	adds	r2, #1
   11322:	str	r2, [sp, #16]
   11324:	ldr	r2, [sp, #36]	; 0x24
   11326:	movs	r3, #49	; 0x31
   11328:	strb	r3, [r2, #0]
   1132a:	b.n	10e46 <_dtoa_r+0x56e>
   1132c:	movs	r3, #1
   1132e:	str	r3, [sp, #44]	; 0x2c
   11330:	b.n	10ed8 <_dtoa_r+0x600>
   11332:	ldr.w	r9, [sp, #20]
   11336:	b.n	10c6e <_dtoa_r+0x396>
   11338:	cmp.w	sl, #0
   1133c:	bne.w	10d52 <_dtoa_r+0x47a>
   11340:	ubfx	r3, fp, #0, #20
   11344:	cmp	r3, #0
   11346:	bne.w	115c6 <_dtoa_r+0xcee>
   1134a:	bic.w	r7, fp, #2147483648	; 0x80000000
   1134e:	lsrs	r7, r7, #20
   11350:	lsls	r7, r7, #20
   11352:	cbz	r7, 11360 <_dtoa_r+0xa88>
   11354:	ldr	r3, [sp, #28]
   11356:	adds	r3, #1
   11358:	str	r3, [sp, #28]
   1135a:	add.w	r8, r8, #1
   1135e:	movs	r7, #1
   11360:	ldr	r3, [sp, #48]	; 0x30
   11362:	movs	r0, #1
   11364:	cmp	r3, #0
   11366:	beq.w	10d66 <_dtoa_r+0x48e>
   1136a:	b.n	10d54 <_dtoa_r+0x47c>
   1136c:	mov	r0, sl
   1136e:	bl	b1c8 <__aeabi_i2d>
   11372:	mov	r2, r6
   11374:	mov	r3, r7
   11376:	bl	b294 <__aeabi_dmul>
   1137a:	movs	r2, #0
   1137c:	ldr	r3, [pc, #764]	; (1167c <_dtoa_r+0xda4>)
   1137e:	bl	af30 <__adddf3>
   11382:	mov	r4, r0
   11384:	sub.w	r5, r1, #54525952	; 0x3400000
   11388:	mov	r0, r6
   1138a:	mov	r1, r7
   1138c:	movs	r2, #0
   1138e:	ldr	r3, [pc, #752]	; (11680 <_dtoa_r+0xda8>)
   11390:	bl	af2c <__aeabi_dsub>
   11394:	mov	r2, r4
   11396:	mov	r3, r5
   11398:	mov	r6, r0
   1139a:	mov	r7, r1
   1139c:	bl	b7b4 <__aeabi_dcmpgt>
   113a0:	cmp	r0, #0
   113a2:	bne.w	11502 <_dtoa_r+0xc2a>
   113a6:	mov	r2, r4
   113a8:	add.w	r3, r5, #2147483648	; 0x80000000
   113ac:	mov	r0, r6
   113ae:	mov	r1, r7
   113b0:	bl	b778 <__aeabi_dcmplt>
   113b4:	cmp	r0, #0
   113b6:	beq.n	1144e <_dtoa_r+0xb76>
   113b8:	movs	r3, #0
   113ba:	str	r3, [sp, #24]
   113bc:	mov	r6, r3
   113be:	b.n	1113a <_dtoa_r+0x862>
   113c0:	ldr	r0, [sp, #36]	; 0x24
   113c2:	b.w	1094a <_dtoa_r+0x72>
   113c6:	ldr	r3, [sp, #24]
   113c8:	ldr	r2, [sp, #48]	; 0x30
   113ca:	str	r7, [sp, #24]
   113cc:	subs	r3, r7, r3
   113ce:	add	r2, r3
   113d0:	str	r2, [sp, #48]	; 0x30
   113d2:	movs	r7, #0
   113d4:	b.n	10cb2 <_dtoa_r+0x3da>
   113d6:	vldr	d7, [sp, #64]	; 0x40
   113da:	mov.w	sl, #2
   113de:	vstr	d7, [sp, #72]	; 0x48
   113e2:	b.n	10f64 <_dtoa_r+0x68c>
   113e4:	mov	r4, r3
   113e6:	movs	r1, #0
   113e8:	str.w	r1, [r9, #68]	; 0x44
   113ec:	b.n	10f10 <_dtoa_r+0x638>
   113ee:	movs	r4, #1
   113f0:	str	r4, [sp, #56]	; 0x38
   113f2:	str	r4, [sp, #32]
   113f4:	str	r4, [sp, #20]
   113f6:	b.n	113e6 <_dtoa_r+0xb0e>
   113f8:	cmp	r2, #0
   113fa:	mov	sl, r3
   113fc:	ble.n	11422 <_dtoa_r+0xb4a>
   113fe:	mov	r1, r4
   11400:	movs	r2, #1
   11402:	mov	r0, r9
   11404:	bl	12598 <__lshift>
   11408:	ldr	r1, [sp, #24]
   1140a:	mov	r4, r0
   1140c:	bl	12648 <__mcmp>
   11410:	cmp	r0, #0
   11412:	ble.w	116a6 <_dtoa_r+0xdce>
   11416:	cmp.w	sl, #57	; 0x39
   1141a:	beq.w	11630 <_dtoa_r+0xd58>
   1141e:	add.w	sl, r5, #49	; 0x31
   11422:	mov	fp, r6
   11424:	strb.w	sl, [r7]
   11428:	adds	r5, r7, #1
   1142a:	mov	r6, r8
   1142c:	str	r4, [sp, #40]	; 0x28
   1142e:	b.n	10e46 <_dtoa_r+0x56e>
   11430:	bne.n	1143c <_dtoa_r+0xb64>
   11432:	tst.w	sl, #1
   11436:	beq.n	1143c <_dtoa_r+0xb64>
   11438:	b.n	10e26 <_dtoa_r+0x54e>
   1143a:	mov	r5, r2
   1143c:	ldrb.w	r3, [r5, #-1]
   11440:	cmp	r3, #48	; 0x30
   11442:	add.w	r2, r5, #4294967295
   11446:	beq.n	1143a <_dtoa_r+0xb62>
   11448:	b.n	10e46 <_dtoa_r+0x56e>
   1144a:	ldr.w	r8, [sp, #72]	; 0x48
   1144e:	ldrd	sl, fp, [sp, #64]	; 0x40
   11452:	b.w	10aec <_dtoa_r+0x214>
   11456:	ldr	r1, [sp, #36]	; 0x24
   11458:	movs	r2, #48	; 0x30
   1145a:	strb	r2, [r1, #0]
   1145c:	ldr	r2, [sp, #16]
   1145e:	ldrb.w	r4, [r5, #-1]
   11462:	adds	r2, #1
   11464:	str	r2, [sp, #16]
   11466:	b.n	10c6a <_dtoa_r+0x392>
   11468:	ldr	r3, [sp, #16]
   1146a:	negs	r4, r3
   1146c:	cmp	r4, #0
   1146e:	beq.w	115d8 <_dtoa_r+0xd00>
   11472:	ldr	r3, [pc, #528]	; (11684 <_dtoa_r+0xdac>)
   11474:	and.w	r2, r4, #15
   11478:	add.w	r3, r3, r2, lsl #3
   1147c:	ldrd	r2, r3, [r3]
   11480:	ldrd	r0, r1, [sp, #64]	; 0x40
   11484:	bl	b294 <__aeabi_dmul>
   11488:	asrs	r4, r4, #4
   1148a:	mov	r6, r0
   1148c:	mov	r7, r1
   1148e:	beq.w	116be <_dtoa_r+0xde6>
   11492:	ldr	r5, [pc, #500]	; (11688 <_dtoa_r+0xdb0>)
   11494:	mov.w	sl, #2
   11498:	lsls	r2, r4, #31
   1149a:	bpl.n	114b0 <_dtoa_r+0xbd8>
   1149c:	mov	r0, r6
   1149e:	mov	r1, r7
   114a0:	ldrd	r2, r3, [r5]
   114a4:	bl	b294 <__aeabi_dmul>
   114a8:	add.w	sl, sl, #1
   114ac:	mov	r6, r0
   114ae:	mov	r7, r1
   114b0:	asrs	r4, r4, #1
   114b2:	add.w	r5, r5, #8
   114b6:	bne.n	11498 <_dtoa_r+0xbc0>
   114b8:	b.n	10f98 <_dtoa_r+0x6c0>
   114ba:	ldr	r1, [r6, #4]
   114bc:	mov	r0, r9
   114be:	bl	121a0 <_Balloc>
   114c2:	ldr	r3, [r6, #16]
   114c4:	adds	r2, r3, #2
   114c6:	mov	r5, r0
   114c8:	lsls	r2, r2, #2
   114ca:	add.w	r1, r6, #12
   114ce:	adds	r0, #12
   114d0:	bl	87fc <memcpy>
   114d4:	mov	r1, r5
   114d6:	movs	r2, #1
   114d8:	mov	r0, r9
   114da:	bl	12598 <__lshift>
   114de:	mov	r8, r0
   114e0:	b.n	111c4 <_dtoa_r+0x8ec>
   114e2:	cmp	r3, #57	; 0x39
   114e4:	beq.w	11630 <_dtoa_r+0xd58>
   114e8:	add.w	sl, r3, #1
   114ec:	mov	fp, r6
   114ee:	strb.w	sl, [r7]
   114f2:	adds	r5, r7, #1
   114f4:	mov	r6, r8
   114f6:	str	r4, [sp, #40]	; 0x28
   114f8:	b.n	10e46 <_dtoa_r+0x56e>
   114fa:	mov	fp, r6
   114fc:	mov	sl, r3
   114fe:	mov	r6, r8
   11500:	b.n	10e0e <_dtoa_r+0x536>
   11502:	movs	r3, #0
   11504:	str	r3, [sp, #24]
   11506:	mov	r6, r3
   11508:	b.n	1130e <_dtoa_r+0xa36>
   1150a:	ldr	r3, [sp, #72]	; 0x48
   1150c:	ldr	r1, [pc, #372]	; (11684 <_dtoa_r+0xdac>)
   1150e:	subs	r2, r3, #1
   11510:	add.w	r1, r1, r2, lsl #3
   11514:	mov	r3, r5
   11516:	str	r2, [sp, #92]	; 0x5c
   11518:	ldrd	r0, r1, [r1]
   1151c:	mov	r2, r4
   1151e:	bl	b294 <__aeabi_dmul>
   11522:	strd	r0, r1, [sp, #80]	; 0x50
   11526:	mov	r1, r7
   11528:	mov	r0, r6
   1152a:	bl	b7f4 <__aeabi_d2iz>
   1152e:	mov	r4, r0
   11530:	bl	b1c8 <__aeabi_i2d>
   11534:	mov	r3, r1
   11536:	mov	r2, r0
   11538:	mov	r1, r7
   1153a:	mov	r0, r6
   1153c:	bl	af2c <__aeabi_dsub>
   11540:	ldr	r3, [sp, #72]	; 0x48
   11542:	mov	r7, r1
   11544:	ldr	r1, [sp, #36]	; 0x24
   11546:	adds	r4, #48	; 0x30
   11548:	cmp	r3, #1
   1154a:	mov	r6, r0
   1154c:	strb	r4, [r1, #0]
   1154e:	add.w	r5, r1, #1
   11552:	beq.n	11596 <_dtoa_r+0xcbe>
   11554:	ldr	r3, [sp, #72]	; 0x48
   11556:	ldr	r2, [sp, #36]	; 0x24
   11558:	add	r3, r2
   1155a:	mov	sl, r3
   1155c:	mov	fp, r5
   1155e:	movs	r2, #0
   11560:	ldr	r3, [pc, #296]	; (1168c <_dtoa_r+0xdb4>)
   11562:	mov	r0, r6
   11564:	mov	r1, r7
   11566:	bl	b294 <__aeabi_dmul>
   1156a:	mov	r7, r1
   1156c:	mov	r6, r0
   1156e:	bl	b7f4 <__aeabi_d2iz>
   11572:	mov	r4, r0
   11574:	bl	b1c8 <__aeabi_i2d>
   11578:	adds	r4, #48	; 0x30
   1157a:	mov	r2, r0
   1157c:	mov	r3, r1
   1157e:	mov	r0, r6
   11580:	mov	r1, r7
   11582:	bl	af2c <__aeabi_dsub>
   11586:	strb.w	r4, [fp], #1
   1158a:	cmp	sl, fp
   1158c:	mov	r6, r0
   1158e:	mov	r7, r1
   11590:	bne.n	1155e <_dtoa_r+0xc86>
   11592:	ldr	r3, [sp, #92]	; 0x5c
   11594:	add	r5, r3
   11596:	movs	r2, #0
   11598:	ldr	r3, [pc, #244]	; (11690 <_dtoa_r+0xdb8>)
   1159a:	ldrd	r0, r1, [sp, #80]	; 0x50
   1159e:	bl	af30 <__adddf3>
   115a2:	mov	r2, r6
   115a4:	mov	r3, r7
   115a6:	bl	b778 <__aeabi_dcmplt>
   115aa:	cmp	r0, #0
   115ac:	beq.n	11640 <_dtoa_r+0xd68>
   115ae:	ldr	r3, [sp, #88]	; 0x58
   115b0:	str	r3, [sp, #16]
   115b2:	ldrb.w	r4, [r5, #-1]
   115b6:	b.w	10c52 <_dtoa_r+0x37a>
   115ba:	ldr	r3, [sp, #28]
   115bc:	ldr	r2, [sp, #32]
   115be:	subs	r5, r3, r2
   115c0:	movs	r3, #0
   115c2:	b.w	10cbe <_dtoa_r+0x3e6>
   115c6:	movs	r7, #0
   115c8:	b.n	11360 <_dtoa_r+0xa88>
   115ca:	ldr	r3, [sp, #96]	; 0x60
   115cc:	ldr	r7, [sp, #24]
   115ce:	ldr	r5, [sp, #28]
   115d0:	rsb	r3, r3, #54	; 0x36
   115d4:	b.w	10cbe <_dtoa_r+0x3e6>
   115d8:	ldrd	r6, r7, [sp, #64]	; 0x40
   115dc:	mov.w	sl, #2
   115e0:	b.n	10f98 <_dtoa_r+0x6c0>
   115e2:	ldr	r3, [sp, #32]
   115e4:	cmp	r3, #0
   115e6:	beq.w	1136c <_dtoa_r+0xa94>
   115ea:	ldr	r3, [sp, #56]	; 0x38
   115ec:	cmp	r3, #0
   115ee:	ble.w	1144e <_dtoa_r+0xb76>
   115f2:	movs	r2, #0
   115f4:	ldr	r3, [pc, #148]	; (1168c <_dtoa_r+0xdb4>)
   115f6:	mov	r0, r6
   115f8:	mov	r1, r7
   115fa:	bl	b294 <__aeabi_dmul>
   115fe:	mov	r6, r0
   11600:	mov	r7, r1
   11602:	add.w	r0, sl, #1
   11606:	bl	b1c8 <__aeabi_i2d>
   1160a:	mov	r2, r6
   1160c:	mov	r3, r7
   1160e:	bl	b294 <__aeabi_dmul>
   11612:	movs	r2, #0
   11614:	ldr	r3, [pc, #100]	; (1167c <_dtoa_r+0xda4>)
   11616:	bl	af30 <__adddf3>
   1161a:	ldr	r2, [sp, #16]
   1161c:	ldr	r3, [sp, #56]	; 0x38
   1161e:	str	r3, [sp, #72]	; 0x48
   11620:	subs	r2, #1
   11622:	mov	r4, r0
   11624:	sub.w	r5, r1, #54525952	; 0x3400000
   11628:	str	r2, [sp, #88]	; 0x58
   1162a:	b.n	10fda <_dtoa_r+0x702>
   1162c:	str	r4, [sp, #40]	; 0x28
   1162e:	b.n	1113a <_dtoa_r+0x862>
   11630:	movs	r2, #57	; 0x39
   11632:	mov	fp, r6
   11634:	str	r4, [sp, #40]	; 0x28
   11636:	mov	r6, r8
   11638:	strb	r2, [r7, #0]
   1163a:	adds	r5, r7, #1
   1163c:	b.w	10e2a <_dtoa_r+0x552>
   11640:	ldrd	r2, r3, [sp, #80]	; 0x50
   11644:	movs	r0, #0
   11646:	ldr	r1, [pc, #72]	; (11690 <_dtoa_r+0xdb8>)
   11648:	bl	af2c <__aeabi_dsub>
   1164c:	mov	r2, r6
   1164e:	mov	r3, r7
   11650:	bl	b7b4 <__aeabi_dcmpgt>
   11654:	cbnz	r0, 1165a <_dtoa_r+0xd82>
   11656:	b.n	1144e <_dtoa_r+0xb76>
   11658:	mov	r5, r2
   1165a:	ldrb.w	r3, [r5, #-1]
   1165e:	cmp	r3, #48	; 0x30
   11660:	add.w	r2, r5, #4294967295
   11664:	beq.n	11658 <_dtoa_r+0xd80>
   11666:	b.n	110dc <_dtoa_r+0x804>
   11668:	ldr	r3, [sp, #88]	; 0x58
   1166a:	str	r3, [sp, #16]
   1166c:	b.w	10c52 <_dtoa_r+0x37a>
   11670:	cmp.w	sl, #0
   11674:	bne.w	11170 <_dtoa_r+0x898>
   11678:	b.n	11340 <_dtoa_r+0xa68>
   1167a:	nop
   1167c:	.word	0x401c0000
   11680:	.word	0x40140000
   11684:	.word	0x00014198
   11688:	.word	0x00014260
   1168c:	.word	0x40240000
   11690:	.word	0x3fe00000
   11694:	cmp	r3, #57	; 0x39
   11696:	mov	fp, sl
   11698:	mov	sl, r3
   1169a:	beq.n	11630 <_dtoa_r+0xd58>
   1169c:	cmp.w	fp, #0
   116a0:	bgt.w	1141e <_dtoa_r+0xb46>
   116a4:	b.n	11422 <_dtoa_r+0xb4a>
   116a6:	bne.w	11422 <_dtoa_r+0xb4a>
   116aa:	tst.w	sl, #1
   116ae:	beq.w	11422 <_dtoa_r+0xb4a>
   116b2:	b.n	11416 <_dtoa_r+0xb3e>
   116b4:	ldr	r3, [sp, #0]
   116b6:	cmp	r3, #2
   116b8:	bgt.n	11706 <_dtoa_r+0xe2e>
   116ba:	ldr	r3, [sp, #56]	; 0x38
   116bc:	b.n	112da <_dtoa_r+0xa02>
   116be:	mov.w	sl, #2
   116c2:	b.n	10f98 <_dtoa_r+0x6c0>
   116c4:	ldr	r3, [sp, #0]
   116c6:	cmp	r3, #2
   116c8:	bgt.n	11706 <_dtoa_r+0xe2e>
   116ca:	ldr	r3, [sp, #56]	; 0x38
   116cc:	b.n	111aa <_dtoa_r+0x8d2>
   116ce:	movs	r4, #0
   116d0:	str.w	r4, [r9, #68]	; 0x44
   116d4:	mov	r1, r4
   116d6:	mov	r0, r9
   116d8:	bl	121a0 <_Balloc>
   116dc:	mov.w	r3, #4294967295
   116e0:	str	r3, [sp, #32]
   116e2:	str	r3, [sp, #56]	; 0x38
   116e4:	movs	r3, #1
   116e6:	str	r0, [sp, #36]	; 0x24
   116e8:	str	r4, [sp, #20]
   116ea:	str.w	r0, [r9, #64]	; 0x40
   116ee:	str	r3, [sp, #44]	; 0x2c
   116f0:	b.w	10aec <_dtoa_r+0x214>
   116f4:	beq.w	10d88 <_dtoa_r+0x4b0>
   116f8:	rsb	r0, r0, #60	; 0x3c
   116fc:	b.w	10d7e <_dtoa_r+0x4a6>
   11700:	movs	r6, #1
   11702:	b.w	10a7e <_dtoa_r+0x1a6>
   11706:	ldr	r3, [sp, #56]	; 0x38
   11708:	str	r3, [sp, #32]
   1170a:	b.n	112ea <_dtoa_r+0xa12>

0001170c <__libc_fini_array>:
   1170c:	push	{r3, r4, r5, lr}
   1170e:	ldr	r5, [pc, #28]	; (1172c <__libc_fini_array+0x20>)
   11710:	ldr	r4, [pc, #28]	; (11730 <__libc_fini_array+0x24>)
   11712:	subs	r4, r5, r4
   11714:	asrs	r4, r4, #2
   11716:	beq.n	11724 <__libc_fini_array+0x18>
   11718:	subs	r4, #1
   1171a:	ldr.w	r3, [r5, #-4]!
   1171e:	blx	r3
   11720:	cmp	r4, #0
   11722:	bne.n	11718 <__libc_fini_array+0xc>
   11724:	ldmia.w	sp!, {r3, r4, r5, lr}
   11728:	b.w	142f8 <__init_array_end>
	...

00011734 <_malloc_trim_r>:
   11734:	push	{r3, r4, r5, r6, r7, lr}
   11736:	ldr	r7, [pc, #140]	; (117c4 <_malloc_trim_r+0x90>)
   11738:	mov	r4, r1
   1173a:	mov	r6, r0
   1173c:	bl	c848 <__malloc_lock>
   11740:	ldr	r3, [r7, #8]
   11742:	ldr	r5, [r3, #4]
   11744:	bic.w	r5, r5, #3
   11748:	subs	r1, r5, r4
   1174a:	addw	r1, r1, #4079	; 0xfef
   1174e:	bic.w	r1, r1, #4080	; 0xff0
   11752:	bic.w	r1, r1, #15
   11756:	sub.w	r4, r1, #4096	; 0x1000
   1175a:	cmp.w	r4, #4096	; 0x1000
   1175e:	blt.n	11770 <_malloc_trim_r+0x3c>
   11760:	movs	r1, #0
   11762:	mov	r0, r6
   11764:	bl	cc30 <_sbrk_r>
   11768:	ldr	r3, [r7, #8]
   1176a:	add	r3, r5
   1176c:	cmp	r0, r3
   1176e:	beq.n	1177a <_malloc_trim_r+0x46>
   11770:	mov	r0, r6
   11772:	bl	c84c <__malloc_unlock>
   11776:	movs	r0, #0
   11778:	pop	{r3, r4, r5, r6, r7, pc}
   1177a:	negs	r1, r4
   1177c:	mov	r0, r6
   1177e:	bl	cc30 <_sbrk_r>
   11782:	adds	r0, #1
   11784:	beq.n	117a2 <_malloc_trim_r+0x6e>
   11786:	ldr	r3, [pc, #64]	; (117c8 <_malloc_trim_r+0x94>)
   11788:	ldr	r2, [r7, #8]
   1178a:	ldr	r1, [r3, #0]
   1178c:	subs	r5, r5, r4
   1178e:	orr.w	r5, r5, #1
   11792:	mov	r0, r6
   11794:	subs	r1, r1, r4
   11796:	str	r5, [r2, #4]
   11798:	str	r1, [r3, #0]
   1179a:	bl	c84c <__malloc_unlock>
   1179e:	movs	r0, #1
   117a0:	pop	{r3, r4, r5, r6, r7, pc}
   117a2:	movs	r1, #0
   117a4:	mov	r0, r6
   117a6:	bl	cc30 <_sbrk_r>
   117aa:	ldr	r2, [r7, #8]
   117ac:	subs	r3, r0, r2
   117ae:	cmp	r3, #15
   117b0:	ble.n	11770 <_malloc_trim_r+0x3c>
   117b2:	ldr	r4, [pc, #24]	; (117cc <_malloc_trim_r+0x98>)
   117b4:	ldr	r1, [pc, #16]	; (117c8 <_malloc_trim_r+0x94>)
   117b6:	ldr	r4, [r4, #0]
   117b8:	orr.w	r3, r3, #1
   117bc:	subs	r0, r0, r4
   117be:	str	r3, [r2, #4]
   117c0:	str	r0, [r1, #0]
   117c2:	b.n	11770 <_malloc_trim_r+0x3c>
   117c4:	.word	0x20017f70
   117c8:	.word	0x2001e208
   117cc:	.word	0x2001837c

000117d0 <_free_r>:
   117d0:	cmp	r1, #0
   117d2:	beq.n	11860 <_free_r+0x90>
   117d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117d8:	mov	r5, r1
   117da:	mov	r8, r0
   117dc:	bl	c848 <__malloc_lock>
   117e0:	ldr.w	r7, [r5, #-4]
   117e4:	ldr	r1, [pc, #424]	; (11990 <_free_r+0x1c0>)
   117e6:	bic.w	r3, r7, #1
   117ea:	sub.w	r4, r5, #8
   117ee:	adds	r2, r4, r3
   117f0:	ldr	r6, [r1, #8]
   117f2:	ldr	r0, [r2, #4]
   117f4:	cmp	r2, r6
   117f6:	bic.w	r0, r0, #3
   117fa:	beq.n	118c2 <_free_r+0xf2>
   117fc:	lsls	r6, r7, #31
   117fe:	str	r0, [r2, #4]
   11800:	bmi.n	1181a <_free_r+0x4a>
   11802:	ldr.w	r7, [r5, #-8]
   11806:	subs	r4, r4, r7
   11808:	add.w	lr, r1, #8
   1180c:	ldr	r5, [r4, #8]
   1180e:	cmp	r5, lr
   11810:	add	r3, r7
   11812:	beq.n	118f4 <_free_r+0x124>
   11814:	ldr	r7, [r4, #12]
   11816:	str	r7, [r5, #12]
   11818:	str	r5, [r7, #8]
   1181a:	adds	r5, r2, r0
   1181c:	ldr	r5, [r5, #4]
   1181e:	lsls	r5, r5, #31
   11820:	bpl.n	118a8 <_free_r+0xd8>
   11822:	orr.w	r2, r3, #1
   11826:	str	r2, [r4, #4]
   11828:	str	r3, [r4, r3]
   1182a:	cmp.w	r3, #512	; 0x200
   1182e:	bcs.n	11862 <_free_r+0x92>
   11830:	lsrs	r3, r3, #3
   11832:	adds	r2, r3, #1
   11834:	ldr	r5, [r1, #4]
   11836:	ldr.w	r7, [r1, r2, lsl #3]
   1183a:	str	r7, [r4, #8]
   1183c:	movs	r0, #1
   1183e:	asrs	r3, r3, #2
   11840:	lsl.w	r3, r0, r3
   11844:	add.w	r0, r1, r2, lsl #3
   11848:	orrs	r5, r3
   1184a:	subs	r0, #8
   1184c:	str	r0, [r4, #12]
   1184e:	str	r5, [r1, #4]
   11850:	str.w	r4, [r1, r2, lsl #3]
   11854:	str	r4, [r7, #12]
   11856:	mov	r0, r8
   11858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1185c:	b.w	c84c <__malloc_unlock>
   11860:	bx	lr
   11862:	lsrs	r2, r3, #9
   11864:	cmp	r2, #4
   11866:	bhi.n	11910 <_free_r+0x140>
   11868:	lsrs	r2, r3, #6
   1186a:	add.w	r7, r2, #57	; 0x39
   1186e:	lsls	r7, r7, #1
   11870:	add.w	r5, r2, #56	; 0x38
   11874:	add.w	r0, r1, r7, lsl #2
   11878:	ldr.w	r2, [r1, r7, lsl #2]
   1187c:	ldr	r1, [pc, #272]	; (11990 <_free_r+0x1c0>)
   1187e:	subs	r0, #8
   11880:	cmp	r0, r2
   11882:	beq.n	11920 <_free_r+0x150>
   11884:	ldr	r1, [r2, #4]
   11886:	bic.w	r1, r1, #3
   1188a:	cmp	r3, r1
   1188c:	bcs.n	11894 <_free_r+0xc4>
   1188e:	ldr	r2, [r2, #8]
   11890:	cmp	r0, r2
   11892:	bne.n	11884 <_free_r+0xb4>
   11894:	ldr	r0, [r2, #12]
   11896:	str	r0, [r4, #12]
   11898:	str	r2, [r4, #8]
   1189a:	str	r4, [r0, #8]
   1189c:	str	r4, [r2, #12]
   1189e:	mov	r0, r8
   118a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   118a4:	b.w	c84c <__malloc_unlock>
   118a8:	ldr	r5, [r2, #8]
   118aa:	ldr	r7, [pc, #232]	; (11994 <_free_r+0x1c4>)
   118ac:	cmp	r5, r7
   118ae:	add	r3, r0
   118b0:	beq.n	11932 <_free_r+0x162>
   118b2:	ldr	r0, [r2, #12]
   118b4:	str	r0, [r5, #12]
   118b6:	orr.w	r2, r3, #1
   118ba:	str	r5, [r0, #8]
   118bc:	str	r2, [r4, #4]
   118be:	str	r3, [r4, r3]
   118c0:	b.n	1182a <_free_r+0x5a>
   118c2:	lsls	r7, r7, #31
   118c4:	add	r3, r0
   118c6:	bmi.n	118d8 <_free_r+0x108>
   118c8:	ldr.w	r2, [r5, #-8]
   118cc:	subs	r4, r4, r2
   118ce:	add	r3, r2
   118d0:	ldr	r0, [r4, #8]
   118d2:	ldr	r2, [r4, #12]
   118d4:	str	r2, [r0, #12]
   118d6:	str	r0, [r2, #8]
   118d8:	ldr	r2, [pc, #188]	; (11998 <_free_r+0x1c8>)
   118da:	ldr	r2, [r2, #0]
   118dc:	orr.w	r0, r3, #1
   118e0:	cmp	r3, r2
   118e2:	str	r0, [r4, #4]
   118e4:	str	r4, [r1, #8]
   118e6:	bcc.n	11856 <_free_r+0x86>
   118e8:	ldr	r3, [pc, #176]	; (1199c <_free_r+0x1cc>)
   118ea:	mov	r0, r8
   118ec:	ldr	r1, [r3, #0]
   118ee:	bl	11734 <_malloc_trim_r>
   118f2:	b.n	11856 <_free_r+0x86>
   118f4:	adds	r1, r2, r0
   118f6:	ldr	r1, [r1, #4]
   118f8:	lsls	r1, r1, #31
   118fa:	bmi.n	11986 <_free_r+0x1b6>
   118fc:	ldr	r1, [r2, #8]
   118fe:	ldr	r2, [r2, #12]
   11900:	str	r2, [r1, #12]
   11902:	add	r3, r0
   11904:	orr.w	r0, r3, #1
   11908:	str	r1, [r2, #8]
   1190a:	str	r0, [r4, #4]
   1190c:	str	r3, [r4, r3]
   1190e:	b.n	11856 <_free_r+0x86>
   11910:	cmp	r2, #20
   11912:	bhi.n	11944 <_free_r+0x174>
   11914:	add.w	r7, r2, #92	; 0x5c
   11918:	lsls	r7, r7, #1
   1191a:	add.w	r5, r2, #91	; 0x5b
   1191e:	b.n	11874 <_free_r+0xa4>
   11920:	asrs	r2, r5, #2
   11922:	ldr	r3, [r1, #4]
   11924:	movs	r5, #1
   11926:	lsl.w	r2, r5, r2
   1192a:	orrs	r3, r2
   1192c:	str	r3, [r1, #4]
   1192e:	mov	r2, r0
   11930:	b.n	11896 <_free_r+0xc6>
   11932:	orr.w	r2, r3, #1
   11936:	str	r4, [r1, #20]
   11938:	str	r4, [r1, #16]
   1193a:	str	r5, [r4, #12]
   1193c:	str	r5, [r4, #8]
   1193e:	str	r2, [r4, #4]
   11940:	str	r3, [r4, r3]
   11942:	b.n	11856 <_free_r+0x86>
   11944:	cmp	r2, #84	; 0x54
   11946:	bhi.n	11956 <_free_r+0x186>
   11948:	lsrs	r2, r3, #12
   1194a:	add.w	r7, r2, #111	; 0x6f
   1194e:	lsls	r7, r7, #1
   11950:	add.w	r5, r2, #110	; 0x6e
   11954:	b.n	11874 <_free_r+0xa4>
   11956:	cmp.w	r2, #340	; 0x154
   1195a:	bhi.n	1196a <_free_r+0x19a>
   1195c:	lsrs	r2, r3, #15
   1195e:	add.w	r7, r2, #120	; 0x78
   11962:	lsls	r7, r7, #1
   11964:	add.w	r5, r2, #119	; 0x77
   11968:	b.n	11874 <_free_r+0xa4>
   1196a:	movw	r0, #1364	; 0x554
   1196e:	cmp	r2, r0
   11970:	bhi.n	11980 <_free_r+0x1b0>
   11972:	lsrs	r2, r3, #18
   11974:	add.w	r7, r2, #125	; 0x7d
   11978:	lsls	r7, r7, #1
   1197a:	add.w	r5, r2, #124	; 0x7c
   1197e:	b.n	11874 <_free_r+0xa4>
   11980:	movs	r7, #254	; 0xfe
   11982:	movs	r5, #126	; 0x7e
   11984:	b.n	11874 <_free_r+0xa4>
   11986:	orr.w	r2, r3, #1
   1198a:	str	r2, [r4, #4]
   1198c:	str	r3, [r4, r3]
   1198e:	b.n	11856 <_free_r+0x86>
   11990:	.word	0x20017f70
   11994:	.word	0x20017f78
   11998:	.word	0x20018378
   1199c:	.word	0x2001e204

000119a0 <rshift>:
   119a0:	ldr	r2, [r0, #16]
   119a2:	asrs	r3, r1, #5
   119a4:	cmp	r3, r2
   119a6:	bge.n	11a06 <rshift+0x66>
   119a8:	push	{r4, r5, r6, r7, lr}
   119aa:	ands.w	r1, r1, #31
   119ae:	add.w	r6, r0, #20
   119b2:	add.w	r2, r6, r2, lsl #2
   119b6:	add.w	lr, r6, r3, lsl #2
   119ba:	beq.n	11a10 <rshift+0x70>
   119bc:	ldr.w	r3, [r6, r3, lsl #2]
   119c0:	add.w	r5, lr, #4
   119c4:	cmp	r2, r5
   119c6:	lsr.w	r4, r3, r1
   119ca:	rsb	ip, r1, #32
   119ce:	bls.n	11a44 <rshift+0xa4>
   119d0:	add.w	r7, r0, #16
   119d4:	ldr	r3, [r5, #0]
   119d6:	lsl.w	r3, r3, ip
   119da:	orrs	r3, r4
   119dc:	str.w	r3, [r7, #4]!
   119e0:	ldr.w	r3, [r5], #4
   119e4:	cmp	r2, r5
   119e6:	lsr.w	r4, r3, r1
   119ea:	bhi.n	119d4 <rshift+0x34>
   119ec:	rsb	r2, lr, r2
   119f0:	subs	r2, #5
   119f2:	bic.w	r2, r2, #3
   119f6:	adds	r2, #4
   119f8:	add	r2, r6
   119fa:	str	r4, [r2, #0]
   119fc:	cbz	r4, 11a00 <rshift+0x60>
   119fe:	adds	r2, #4
   11a00:	subs	r3, r2, r6
   11a02:	asrs	r3, r3, #2
   11a04:	b.n	11a34 <rshift+0x94>
   11a06:	movs	r3, #0
   11a08:	str	r3, [r0, #16]
   11a0a:	movs	r3, #0
   11a0c:	str	r3, [r0, #20]
   11a0e:	bx	lr
   11a10:	cmp	r2, lr
   11a12:	bls.n	11a3a <rshift+0x9a>
   11a14:	add.w	r4, r0, #16
   11a18:	mov	r1, lr
   11a1a:	ldr.w	r5, [r1], #4
   11a1e:	str.w	r5, [r4, #4]!
   11a22:	cmp	r2, r1
   11a24:	bhi.n	11a1a <rshift+0x7a>
   11a26:	mvn.w	r3, lr
   11a2a:	add	r3, r2
   11a2c:	bic.w	r3, r3, #3
   11a30:	adds	r3, #4
   11a32:	asrs	r3, r3, #2
   11a34:	str	r3, [r0, #16]
   11a36:	cbz	r3, 11a3e <rshift+0x9e>
   11a38:	pop	{r4, r5, r6, r7, pc}
   11a3a:	movs	r3, #0
   11a3c:	str	r3, [r0, #16]
   11a3e:	movs	r3, #0
   11a40:	str	r3, [r0, #20]
   11a42:	pop	{r4, r5, r6, r7, pc}
   11a44:	mov	r2, r6
   11a46:	b.n	119fa <rshift+0x5a>

00011a48 <__gethex>:
   11a48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a4c:	sub	sp, #44	; 0x2c
   11a4e:	mov	r9, r1
   11a50:	str	r0, [sp, #20]
   11a52:	ldr	r0, [sp, #88]	; 0x58
   11a54:	str	r2, [sp, #12]
   11a56:	str	r3, [sp, #32]
   11a58:	bl	12124 <__localeconv_l>
   11a5c:	ldr	r3, [r0, #0]
   11a5e:	str	r3, [sp, #8]
   11a60:	mov	r0, r3
   11a62:	mov	r4, r3
   11a64:	bl	cec0 <strlen>
   11a68:	ldr.w	r3, [r9]
   11a6c:	str	r0, [sp, #0]
   11a6e:	ldrb	r2, [r3, #2]
   11a70:	adds	r1, r4, r0
   11a72:	cmp	r2, #48	; 0x30
   11a74:	ldrb.w	fp, [r1, #-1]
   11a78:	bne.w	11dce <__gethex+0x386>
   11a7c:	adds	r3, #3
   11a7e:	mov.w	r8, #0
   11a82:	mov	r4, r3
   11a84:	ldrb.w	r2, [r3], #1
   11a88:	cmp	r2, #48	; 0x30
   11a8a:	add.w	r8, r8, #1
   11a8e:	beq.n	11a82 <__gethex+0x3a>
   11a90:	ldr	r6, [pc, #712]	; (11d5c <__gethex+0x314>)
   11a92:	ldrb	r3, [r6, r2]
   11a94:	cmp	r3, #0
   11a96:	beq.w	11c7a <__gethex+0x232>
   11a9a:	ldrb	r3, [r4, #0]
   11a9c:	mov.w	sl, #0
   11aa0:	ldrb	r3, [r6, r3]
   11aa2:	mov	r5, sl
   11aa4:	mov	r7, r4
   11aa6:	cbz	r3, 11ab2 <__gethex+0x6a>
   11aa8:	ldrb.w	r3, [r7, #1]!
   11aac:	ldrb	r3, [r6, r3]
   11aae:	cmp	r3, #0
   11ab0:	bne.n	11aa8 <__gethex+0x60>
   11ab2:	ldr	r2, [sp, #0]
   11ab4:	ldr	r1, [sp, #8]
   11ab6:	mov	r0, r7
   11ab8:	bl	cf9c <strncmp>
   11abc:	cmp	r0, #0
   11abe:	beq.w	11be6 <__gethex+0x19e>
   11ac2:	ldrb	r3, [r7, #0]
   11ac4:	cmp	r5, #0
   11ac6:	beq.w	11dac <__gethex+0x364>
   11aca:	subs	r5, r5, r7
   11acc:	lsls	r2, r5, #2
   11ace:	str	r2, [sp, #4]
   11ad0:	cmp	r3, #80	; 0x50
   11ad2:	beq.w	11bf8 <__gethex+0x1b0>
   11ad6:	cmp	r3, #112	; 0x70
   11ad8:	beq.w	11bf8 <__gethex+0x1b0>
   11adc:	mov	r5, r7
   11ade:	str.w	r7, [r9]
   11ae2:	cmp.w	sl, #0
   11ae6:	bne.w	11c58 <__gethex+0x210>
   11aea:	subs	r3, r5, r4
   11aec:	subs	r3, #1
   11aee:	cmp	r3, #7
   11af0:	mov	r1, sl
   11af2:	ble.n	11afe <__gethex+0xb6>
   11af4:	asrs	r3, r3, #1
   11af6:	cmp	r3, #7
   11af8:	add.w	r1, r1, #1
   11afc:	bgt.n	11af4 <__gethex+0xac>
   11afe:	ldr	r0, [sp, #20]
   11b00:	bl	121a0 <_Balloc>
   11b04:	mov	r3, r0
   11b06:	adds	r3, #20
   11b08:	cmp	r5, r4
   11b0a:	str	r0, [sp, #16]
   11b0c:	str	r3, [sp, #28]
   11b0e:	bls.w	11eb8 <__gethex+0x470>
   11b12:	mov	r9, r3
   11b14:	ldr	r3, [sp, #0]
   11b16:	mov.w	r8, #0
   11b1a:	rsb	r3, r3, #1
   11b1e:	mov	r7, r8
   11b20:	str	r3, [sp, #24]
   11b22:	b.n	11b44 <__gethex+0xfc>
   11b24:	cmp	r7, #32
   11b26:	beq.w	11c68 <__gethex+0x220>
   11b2a:	mov	r2, r7
   11b2c:	adds	r7, #4
   11b2e:	ldrb.w	r3, [r5, #-1]
   11b32:	ldrb	r3, [r6, r3]
   11b34:	mov	r5, sl
   11b36:	and.w	r3, r3, #15
   11b3a:	lsls	r3, r2
   11b3c:	cmp	r5, r4
   11b3e:	orr.w	r8, r8, r3
   11b42:	bls.n	11b70 <__gethex+0x128>
   11b44:	ldrb.w	r3, [r5, #-1]
   11b48:	cmp	r3, fp
   11b4a:	add.w	sl, r5, #4294967295
   11b4e:	bne.n	11b24 <__gethex+0xdc>
   11b50:	ldr	r3, [sp, #24]
   11b52:	add	r3, sl
   11b54:	cmp	r3, r4
   11b56:	bcc.n	11b24 <__gethex+0xdc>
   11b58:	mov	r0, r3
   11b5a:	ldr	r2, [sp, #0]
   11b5c:	ldr	r1, [sp, #8]
   11b5e:	str	r3, [sp, #36]	; 0x24
   11b60:	bl	cf9c <strncmp>
   11b64:	ldr	r3, [sp, #36]	; 0x24
   11b66:	cmp	r0, #0
   11b68:	bne.n	11b24 <__gethex+0xdc>
   11b6a:	mov	r5, r3
   11b6c:	cmp	r5, r4
   11b6e:	bhi.n	11b44 <__gethex+0xfc>
   11b70:	str.w	r8, [r9], #4
   11b74:	ldr	r3, [sp, #28]
   11b76:	ldr	r2, [sp, #16]
   11b78:	rsb	r9, r3, r9
   11b7c:	mov.w	r3, r9, asr #2
   11b80:	str	r3, [r2, #16]
   11b82:	mov	r0, r8
   11b84:	mov.w	r9, r3, lsl #5
   11b88:	bl	12318 <__hi0bits>
   11b8c:	ldr	r3, [sp, #12]
   11b8e:	ldr	r6, [r3, #0]
   11b90:	rsb	r0, r0, r9
   11b94:	cmp	r0, r6
   11b96:	bgt.w	11d60 <__gethex+0x318>
   11b9a:	blt.w	11db0 <__gethex+0x368>
   11b9e:	movs	r7, #0
   11ba0:	ldr	r3, [sp, #12]
   11ba2:	ldr	r2, [sp, #4]
   11ba4:	ldr	r3, [r3, #8]
   11ba6:	cmp	r2, r3
   11ba8:	bgt.w	11cda <__gethex+0x292>
   11bac:	ldr	r0, [sp, #12]
   11bae:	ldr	r1, [sp, #4]
   11bb0:	ldr	r3, [r0, #4]
   11bb2:	cmp	r1, r3
   11bb4:	bge.w	11d22 <__gethex+0x2da>
   11bb8:	subs	r5, r3, r1
   11bba:	cmp	r6, r5
   11bbc:	bgt.w	11dde <__gethex+0x396>
   11bc0:	ldr	r2, [r0, #12]
   11bc2:	cmp	r2, #2
   11bc4:	beq.w	11ec6 <__gethex+0x47e>
   11bc8:	cmp	r2, #3
   11bca:	beq.w	11e86 <__gethex+0x43e>
   11bce:	cmp	r2, #1
   11bd0:	beq.w	11ece <__gethex+0x486>
   11bd4:	ldr	r0, [sp, #20]
   11bd6:	ldr	r1, [sp, #16]
   11bd8:	bl	121ec <_Bfree>
   11bdc:	ldr	r2, [sp, #80]	; 0x50
   11bde:	movs	r3, #0
   11be0:	str	r3, [r2, #0]
   11be2:	movs	r0, #80	; 0x50
   11be4:	b.n	11c62 <__gethex+0x21a>
   11be6:	cmp	r5, #0
   11be8:	beq.w	11e1e <__gethex+0x3d6>
   11bec:	ldrb	r3, [r7, #0]
   11bee:	b.n	11aca <__gethex+0x82>
   11bf0:	movs	r3, #0
   11bf2:	str	r3, [sp, #4]
   11bf4:	mov.w	sl, #1
   11bf8:	ldrb	r3, [r7, #1]
   11bfa:	cmp	r3, #43	; 0x2b
   11bfc:	beq.w	11d58 <__gethex+0x310>
   11c00:	cmp	r3, #45	; 0x2d
   11c02:	beq.n	11cf0 <__gethex+0x2a8>
   11c04:	adds	r1, r7, #1
   11c06:	movs	r5, #0
   11c08:	ldrb	r3, [r6, r3]
   11c0a:	ldr	r0, [pc, #336]	; (11d5c <__gethex+0x314>)
   11c0c:	subs	r2, r3, #1
   11c0e:	cmp	r2, #24
   11c10:	bhi.w	11adc <__gethex+0x94>
   11c14:	ldrb	r2, [r1, #1]
   11c16:	ldrb	r2, [r0, r2]
   11c18:	subs	r0, r2, #1
   11c1a:	cmp	r0, #24
   11c1c:	sub.w	r3, r3, #16
   11c20:	add.w	r1, r1, #1
   11c24:	bhi.n	11c3e <__gethex+0x1f6>
   11c26:	ldrb.w	r0, [r1, #1]!
   11c2a:	add.w	r3, r3, r3, lsl #2
   11c2e:	add.w	r3, r2, r3, lsl #1
   11c32:	ldrb	r2, [r6, r0]
   11c34:	subs	r0, r2, #1
   11c36:	cmp	r0, #24
   11c38:	sub.w	r3, r3, #16
   11c3c:	bls.n	11c26 <__gethex+0x1de>
   11c3e:	cbz	r5, 11c42 <__gethex+0x1fa>
   11c40:	negs	r3, r3
   11c42:	ldr	r2, [sp, #4]
   11c44:	mov	r5, r7
   11c46:	add	r2, r3
   11c48:	mov	r7, r1
   11c4a:	str	r2, [sp, #4]
   11c4c:	str.w	r7, [r9]
   11c50:	cmp.w	sl, #0
   11c54:	beq.w	11aea <__gethex+0xa2>
   11c58:	cmp.w	r8, #0
   11c5c:	ite	eq
   11c5e:	moveq	r0, #6
   11c60:	movne	r0, #0
   11c62:	add	sp, #44	; 0x2c
   11c64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c68:	str.w	r8, [r9]
   11c6c:	mov.w	r8, #0
   11c70:	add.w	r9, r9, #4
   11c74:	mov	r2, r8
   11c76:	movs	r7, #4
   11c78:	b.n	11b2e <__gethex+0xe6>
   11c7a:	ldr	r5, [sp, #0]
   11c7c:	ldr	r1, [sp, #8]
   11c7e:	mov	r2, r5
   11c80:	mov	r0, r4
   11c82:	bl	cf9c <strncmp>
   11c86:	cmp	r0, #0
   11c88:	beq.n	11cf8 <__gethex+0x2b0>
   11c8a:	ldrb	r3, [r4, #0]
   11c8c:	mov	r7, r4
   11c8e:	cmp	r3, #80	; 0x50
   11c90:	beq.n	11bf0 <__gethex+0x1a8>
   11c92:	cmp	r3, #112	; 0x70
   11c94:	beq.n	11bf0 <__gethex+0x1a8>
   11c96:	str.w	r7, [r9]
   11c9a:	b.n	11c58 <__gethex+0x210>
   11c9c:	ldr	r3, [sp, #16]
   11c9e:	ldr	r3, [r3, #8]
   11ca0:	cmp	r7, r3
   11ca2:	bge.w	11f0e <__gethex+0x4c6>
   11ca6:	mov	r3, r7
   11ca8:	ldr	r0, [sp, #16]
   11caa:	add.w	r2, r0, r3, lsl #2
   11cae:	movs	r1, #1
   11cb0:	adds	r3, #1
   11cb2:	cmp	r4, #2
   11cb4:	str	r3, [r0, #16]
   11cb6:	str	r1, [r2, #20]
   11cb8:	beq.w	11eec <__gethex+0x4a4>
   11cbc:	cmp	r7, r3
   11cbe:	bge.w	11e78 <__gethex+0x430>
   11cc2:	movs	r1, #1
   11cc4:	ldr	r0, [sp, #16]
   11cc6:	bl	119a0 <rshift>
   11cca:	ldr	r3, [sp, #12]
   11ccc:	ldr	r2, [sp, #4]
   11cce:	ldr	r3, [r3, #8]
   11cd0:	adds	r2, #1
   11cd2:	cmp	r2, r3
   11cd4:	str	r2, [sp, #4]
   11cd6:	ble.w	11e7e <__gethex+0x436>
   11cda:	ldr	r0, [sp, #20]
   11cdc:	ldr	r1, [sp, #16]
   11cde:	bl	121ec <_Bfree>
   11ce2:	ldr	r2, [sp, #80]	; 0x50
   11ce4:	movs	r3, #0
   11ce6:	movs	r0, #163	; 0xa3
   11ce8:	str	r3, [r2, #0]
   11cea:	add	sp, #44	; 0x2c
   11cec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cf0:	movs	r5, #1
   11cf2:	ldrb	r3, [r7, #2]
   11cf4:	adds	r1, r7, #2
   11cf6:	b.n	11c08 <__gethex+0x1c0>
   11cf8:	ldrb	r2, [r4, r5]
   11cfa:	ldrb	r3, [r6, r2]
   11cfc:	adds	r7, r4, r5
   11cfe:	cmp	r3, #0
   11d00:	beq.n	11dd6 <__gethex+0x38e>
   11d02:	cmp	r2, #48	; 0x30
   11d04:	mov	r4, r7
   11d06:	bne.n	11d12 <__gethex+0x2ca>
   11d08:	ldrb.w	r3, [r4, #1]!
   11d0c:	cmp	r3, #48	; 0x30
   11d0e:	beq.n	11d08 <__gethex+0x2c0>
   11d10:	ldrb	r3, [r6, r3]
   11d12:	clz	sl, r3
   11d16:	mov	r5, r7
   11d18:	mov.w	sl, sl, lsr #5
   11d1c:	mov.w	r8, #1
   11d20:	b.n	11aa4 <__gethex+0x5c>
   11d22:	movs	r4, #1
   11d24:	cbz	r7, 11d40 <__gethex+0x2f8>
   11d26:	ldr	r3, [sp, #12]
   11d28:	ldr	r3, [r3, #12]
   11d2a:	cmp	r3, #2
   11d2c:	beq.w	11e3a <__gethex+0x3f2>
   11d30:	cmp	r3, #3
   11d32:	beq.w	11e42 <__gethex+0x3fa>
   11d36:	cmp	r3, #1
   11d38:	beq.w	11ea6 <__gethex+0x45e>
   11d3c:	orr.w	r4, r4, #16
   11d40:	ldr	r3, [sp, #80]	; 0x50
   11d42:	mov	r2, r3
   11d44:	ldr	r3, [sp, #16]
   11d46:	str	r3, [r2, #0]
   11d48:	ldr	r3, [sp, #32]
   11d4a:	mov	r2, r3
   11d4c:	ldr	r3, [sp, #4]
   11d4e:	str	r3, [r2, #0]
   11d50:	mov	r0, r4
   11d52:	add	sp, #44	; 0x2c
   11d54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d58:	movs	r5, #0
   11d5a:	b.n	11cf2 <__gethex+0x2aa>
   11d5c:	.word	0x00014094
   11d60:	subs	r4, r0, r6
   11d62:	mov	r1, r4
   11d64:	ldr	r0, [sp, #16]
   11d66:	bl	12a28 <__any_on>
   11d6a:	cmp	r0, #0
   11d6c:	beq.n	11dda <__gethex+0x392>
   11d6e:	subs	r2, r4, #1
   11d70:	asrs	r1, r2, #5
   11d72:	ldr	r0, [sp, #28]
   11d74:	and.w	r3, r2, #31
   11d78:	ldr.w	r1, [r0, r1, lsl #2]
   11d7c:	movs	r7, #1
   11d7e:	lsl.w	r3, r7, r3
   11d82:	tst	r3, r1
   11d84:	beq.n	11d9c <__gethex+0x354>
   11d86:	cmp	r2, r7
   11d88:	ble.w	11ec2 <__gethex+0x47a>
   11d8c:	subs	r1, r4, #2
   11d8e:	ldr	r0, [sp, #16]
   11d90:	bl	12a28 <__any_on>
   11d94:	cmp	r0, #0
   11d96:	beq.w	11ec2 <__gethex+0x47a>
   11d9a:	movs	r7, #3
   11d9c:	ldr	r3, [sp, #4]
   11d9e:	ldr	r0, [sp, #16]
   11da0:	add	r3, r4
   11da2:	mov	r1, r4
   11da4:	str	r3, [sp, #4]
   11da6:	bl	119a0 <rshift>
   11daa:	b.n	11ba0 <__gethex+0x158>
   11dac:	str	r5, [sp, #4]
   11dae:	b.n	11ad0 <__gethex+0x88>
   11db0:	subs	r4, r6, r0
   11db2:	ldr	r1, [sp, #16]
   11db4:	ldr	r0, [sp, #20]
   11db6:	mov	r2, r4
   11db8:	bl	12598 <__lshift>
   11dbc:	ldr	r3, [sp, #4]
   11dbe:	str	r0, [sp, #16]
   11dc0:	subs	r3, r3, r4
   11dc2:	str	r3, [sp, #4]
   11dc4:	mov	r3, r0
   11dc6:	adds	r3, #20
   11dc8:	str	r3, [sp, #28]
   11dca:	movs	r7, #0
   11dcc:	b.n	11ba0 <__gethex+0x158>
   11dce:	adds	r4, r3, #2
   11dd0:	mov.w	r8, #0
   11dd4:	b.n	11a90 <__gethex+0x48>
   11dd6:	mov	r3, r2
   11dd8:	b.n	11c8e <__gethex+0x246>
   11dda:	mov	r7, r0
   11ddc:	b.n	11d9c <__gethex+0x354>
   11dde:	subs	r4, r5, #1
   11de0:	cmp	r7, #0
   11de2:	bne.n	11e82 <__gethex+0x43a>
   11de4:	cbz	r4, 11df0 <__gethex+0x3a8>
   11de6:	mov	r1, r4
   11de8:	ldr	r0, [sp, #16]
   11dea:	bl	12a28 <__any_on>
   11dee:	mov	r7, r0
   11df0:	asrs	r3, r4, #5
   11df2:	ldr	r2, [sp, #28]
   11df4:	ldr	r0, [sp, #16]
   11df6:	ldr.w	r2, [r2, r3, lsl #2]
   11dfa:	and.w	r4, r4, #31
   11dfe:	movs	r3, #1
   11e00:	lsl.w	r4, r3, r4
   11e04:	tst	r4, r2
   11e06:	mov	r1, r5
   11e08:	it	ne
   11e0a:	orrne.w	r7, r7, #2
   11e0e:	bl	119a0 <rshift>
   11e12:	ldr	r3, [sp, #12]
   11e14:	ldr	r3, [r3, #4]
   11e16:	str	r3, [sp, #4]
   11e18:	subs	r6, r6, r5
   11e1a:	movs	r4, #2
   11e1c:	b.n	11d24 <__gethex+0x2dc>
   11e1e:	ldr	r1, [sp, #0]
   11e20:	ldrb	r3, [r7, r1]
   11e22:	ldrb	r2, [r6, r3]
   11e24:	adds	r5, r7, r1
   11e26:	mov	r7, r5
   11e28:	cmp	r2, #0
   11e2a:	beq.w	11aca <__gethex+0x82>
   11e2e:	ldrb.w	r3, [r7, #1]!
   11e32:	ldrb	r2, [r6, r3]
   11e34:	cmp	r2, #0
   11e36:	bne.n	11e2e <__gethex+0x3e6>
   11e38:	b.n	11aca <__gethex+0x82>
   11e3a:	ldr	r3, [sp, #84]	; 0x54
   11e3c:	rsb	r3, r3, #1
   11e40:	str	r3, [sp, #84]	; 0x54
   11e42:	ldr	r3, [sp, #84]	; 0x54
   11e44:	cmp	r3, #0
   11e46:	beq.w	11d3c <__gethex+0x2f4>
   11e4a:	ldr	r3, [sp, #16]
   11e4c:	ldr	r5, [sp, #28]
   11e4e:	ldr	r7, [r3, #16]
   11e50:	mov.w	r8, r7, lsl #2
   11e54:	add.w	r0, r5, r8
   11e58:	mov	r3, r5
   11e5a:	movs	r1, #0
   11e5c:	b.n	11e68 <__gethex+0x420>
   11e5e:	str.w	r1, [r3], #4
   11e62:	cmp	r0, r3
   11e64:	bls.w	11c9c <__gethex+0x254>
   11e68:	ldr	r2, [r3, #0]
   11e6a:	cmp.w	r2, #4294967295
   11e6e:	beq.n	11e5e <__gethex+0x416>
   11e70:	adds	r2, #1
   11e72:	cmp	r4, #2
   11e74:	str	r2, [r3, #0]
   11e76:	beq.n	11eec <__gethex+0x4a4>
   11e78:	ands.w	r6, r6, #31
   11e7c:	bne.n	11efa <__gethex+0x4b2>
   11e7e:	movs	r4, #33	; 0x21
   11e80:	b.n	11d40 <__gethex+0x2f8>
   11e82:	movs	r7, #1
   11e84:	b.n	11df0 <__gethex+0x3a8>
   11e86:	ldr	r2, [sp, #84]	; 0x54
   11e88:	cmp	r2, #0
   11e8a:	beq.w	11bd4 <__gethex+0x18c>
   11e8e:	ldr	r1, [sp, #32]
   11e90:	str	r3, [r1, #0]
   11e92:	ldr	r3, [sp, #28]
   11e94:	ldr	r1, [sp, #16]
   11e96:	movs	r2, #1
   11e98:	str	r2, [r1, #16]
   11e9a:	str	r2, [r3, #0]
   11e9c:	ldr	r3, [sp, #80]	; 0x50
   11e9e:	mov	r2, r3
   11ea0:	movs	r0, #98	; 0x62
   11ea2:	str	r1, [r2, #0]
   11ea4:	b.n	11c62 <__gethex+0x21a>
   11ea6:	lsls	r2, r7, #30
   11ea8:	bpl.w	11d3c <__gethex+0x2f4>
   11eac:	ldr	r3, [sp, #28]
   11eae:	ldr	r3, [r3, #0]
   11eb0:	orrs	r3, r7
   11eb2:	lsls	r3, r3, #31
   11eb4:	bmi.n	11e4a <__gethex+0x402>
   11eb6:	b.n	11d3c <__gethex+0x2f4>
   11eb8:	ldr.w	r9, [sp, #28]
   11ebc:	mov.w	r8, #0
   11ec0:	b.n	11b70 <__gethex+0x128>
   11ec2:	movs	r7, #2
   11ec4:	b.n	11d9c <__gethex+0x354>
   11ec6:	ldr	r2, [sp, #84]	; 0x54
   11ec8:	cmp	r2, #0
   11eca:	beq.n	11e8e <__gethex+0x446>
   11ecc:	b.n	11bd4 <__gethex+0x18c>
   11ece:	cmp	r6, r5
   11ed0:	bne.w	11bd4 <__gethex+0x18c>
   11ed4:	cmp	r6, #1
   11ed6:	ble.n	11e8e <__gethex+0x446>
   11ed8:	subs	r1, r6, #1
   11eda:	ldr	r0, [sp, #16]
   11edc:	bl	12a28 <__any_on>
   11ee0:	cmp	r0, #0
   11ee2:	beq.w	11bd4 <__gethex+0x18c>
   11ee6:	ldr	r3, [sp, #12]
   11ee8:	ldr	r3, [r3, #4]
   11eea:	b.n	11e8e <__gethex+0x446>
   11eec:	ldr	r3, [sp, #12]
   11eee:	ldr	r3, [r3, #0]
   11ef0:	subs	r3, #1
   11ef2:	cmp	r6, r3
   11ef4:	beq.n	11f40 <__gethex+0x4f8>
   11ef6:	movs	r4, #34	; 0x22
   11ef8:	b.n	11d40 <__gethex+0x2f8>
   11efa:	add	r5, r8
   11efc:	rsb	r6, r6, #32
   11f00:	ldr.w	r0, [r5, #-4]
   11f04:	bl	12318 <__hi0bits>
   11f08:	cmp	r0, r6
   11f0a:	bge.n	11e7e <__gethex+0x436>
   11f0c:	b.n	11cc2 <__gethex+0x27a>
   11f0e:	ldr	r3, [sp, #16]
   11f10:	ldr.w	r9, [sp, #20]
   11f14:	ldr	r1, [r3, #4]
   11f16:	mov	r0, r9
   11f18:	adds	r1, #1
   11f1a:	bl	121a0 <_Balloc>
   11f1e:	ldr	r1, [sp, #16]
   11f20:	ldr	r3, [r1, #16]
   11f22:	adds	r2, r3, #2
   11f24:	mov	r5, r0
   11f26:	lsls	r2, r2, #2
   11f28:	adds	r1, #12
   11f2a:	adds	r0, #12
   11f2c:	bl	87fc <memcpy>
   11f30:	ldr	r1, [sp, #16]
   11f32:	mov	r0, r9
   11f34:	bl	121ec <_Bfree>
   11f38:	str	r5, [sp, #16]
   11f3a:	ldr	r3, [r5, #16]
   11f3c:	adds	r5, #20
   11f3e:	b.n	11ca8 <__gethex+0x260>
   11f40:	asrs	r3, r6, #5
   11f42:	and.w	r6, r6, #31
   11f46:	ldr.w	r2, [r5, r3, lsl #2]
   11f4a:	movs	r3, #1
   11f4c:	lsls	r3, r6
   11f4e:	tst	r3, r2
   11f50:	ite	ne
   11f52:	movne	r4, #33	; 0x21
   11f54:	moveq	r4, #34	; 0x22
   11f56:	b.n	11d40 <__gethex+0x2f8>

00011f58 <__match>:
   11f58:	push	{r4, r5}
   11f5a:	ldr	r4, [r0, #0]
   11f5c:	b.n	11f70 <__match+0x18>
   11f5e:	ldrb.w	r3, [r4, #1]!
   11f62:	sub.w	r5, r3, #65	; 0x41
   11f66:	cmp	r5, #25
   11f68:	it	ls
   11f6a:	addls	r3, #32
   11f6c:	cmp	r3, r2
   11f6e:	bne.n	11f82 <__match+0x2a>
   11f70:	ldrb.w	r2, [r1], #1
   11f74:	cmp	r2, #0
   11f76:	bne.n	11f5e <__match+0x6>
   11f78:	adds	r4, #1
   11f7a:	str	r4, [r0, #0]
   11f7c:	movs	r0, #1
   11f7e:	pop	{r4, r5}
   11f80:	bx	lr
   11f82:	movs	r0, #0
   11f84:	pop	{r4, r5}
   11f86:	bx	lr

00011f88 <__hexnan>:
   11f88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f8c:	ldr	r3, [r1, #0]
   11f8e:	ldr.w	r9, [pc, #372]	; 12104 <__hexnan+0x17c>
   11f92:	sub	sp, #20
   11f94:	asrs	r1, r3, #5
   11f96:	add.w	r1, r2, r1, lsl #2
   11f9a:	ands.w	r3, r3, #31
   11f9e:	str	r1, [sp, #4]
   11fa0:	itt	ne
   11fa2:	addne	r1, #4
   11fa4:	strne	r1, [sp, #4]
   11fa6:	ldr	r4, [sp, #4]
   11fa8:	str	r0, [sp, #8]
   11faa:	str	r3, [sp, #12]
   11fac:	movs	r3, #0
   11fae:	mov	r1, r3
   11fb0:	str.w	r3, [r4, #-4]
   11fb4:	mov	sl, r3
   11fb6:	mov	lr, r3
   11fb8:	ldr	r3, [sp, #8]
   11fba:	sub.w	ip, r4, #4
   11fbe:	ldr	r5, [r3, #0]
   11fc0:	mov	r8, ip
   11fc2:	mov	r0, ip
   11fc4:	ldrb.w	r3, [r5, #1]!
   11fc8:	cbz	r3, 12014 <__hexnan+0x8c>
   11fca:	ldrb.w	r4, [r9, r3]
   11fce:	cmp	r4, #0
   11fd0:	bne.n	1205a <__hexnan+0xd2>
   11fd2:	cmp	r3, #32
   11fd4:	bhi.n	12092 <__hexnan+0x10a>
   11fd6:	cmp	lr, sl
   11fd8:	ble.n	11fc4 <__hexnan+0x3c>
   11fda:	cmp	r0, r8
   11fdc:	bcs.n	12006 <__hexnan+0x7e>
   11fde:	cmp	r1, #7
   11fe0:	bgt.n	12006 <__hexnan+0x7e>
   11fe2:	rsb	r1, r1, #8
   11fe6:	lsls	r1, r1, #2
   11fe8:	ldr	r6, [r0, #0]
   11fea:	rsb	fp, r1, #32
   11fee:	mov	r3, r0
   11ff0:	ldr	r7, [r3, #4]
   11ff2:	lsl.w	r4, r7, fp
   11ff6:	orrs	r4, r6
   11ff8:	lsr.w	r6, r7, r1
   11ffc:	str	r4, [r3, #0]
   11ffe:	str.w	r6, [r3, #4]!
   12002:	cmp	r8, r3
   12004:	bhi.n	11ff0 <__hexnan+0x68>
   12006:	cmp	r0, r2
   12008:	bhi.n	12080 <__hexnan+0xf8>
   1200a:	ldrb.w	r3, [r5, #1]!
   1200e:	movs	r1, #8
   12010:	cmp	r3, #0
   12012:	bne.n	11fca <__hexnan+0x42>
   12014:	cmp.w	lr, #0
   12018:	beq.n	12096 <__hexnan+0x10e>
   1201a:	cmp	r0, r8
   1201c:	bcs.n	12022 <__hexnan+0x9a>
   1201e:	cmp	r1, #7
   12020:	ble.n	120dc <__hexnan+0x154>
   12022:	cmp	r0, r2
   12024:	bls.n	1209e <__hexnan+0x116>
   12026:	mov	r3, r2
   12028:	ldr.w	r1, [r0], #4
   1202c:	str.w	r1, [r3], #4
   12030:	cmp	ip, r0
   12032:	bcs.n	12028 <__hexnan+0xa0>
   12034:	movs	r1, #0
   12036:	str.w	r1, [r3], #4
   1203a:	cmp	ip, r3
   1203c:	bcs.n	12036 <__hexnan+0xae>
   1203e:	ldr	r3, [sp, #4]
   12040:	ldr.w	r3, [r3, #-4]
   12044:	cbnz	r3, 12052 <__hexnan+0xca>
   12046:	cmp	r2, ip
   12048:	beq.n	120c0 <__hexnan+0x138>
   1204a:	ldr.w	r3, [ip, #-4]!
   1204e:	cmp	r3, #0
   12050:	beq.n	12046 <__hexnan+0xbe>
   12052:	movs	r0, #5
   12054:	add	sp, #20
   12056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1205a:	adds	r1, #1
   1205c:	cmp	r1, #8
   1205e:	add.w	lr, lr, #1
   12062:	ble.n	12072 <__hexnan+0xea>
   12064:	cmp	r0, r2
   12066:	bls.n	11fc4 <__hexnan+0x3c>
   12068:	movs	r3, #0
   1206a:	str.w	r3, [r0, #-4]
   1206e:	movs	r1, #1
   12070:	subs	r0, #4
   12072:	ldr	r3, [r0, #0]
   12074:	and.w	r4, r4, #15
   12078:	orr.w	r4, r4, r3, lsl #4
   1207c:	str	r4, [r0, #0]
   1207e:	b.n	11fc4 <__hexnan+0x3c>
   12080:	movs	r3, #0
   12082:	sub.w	r8, r0, #4
   12086:	str.w	r3, [r0, #-4]
   1208a:	mov	sl, lr
   1208c:	mov	r0, r8
   1208e:	mov	r1, r3
   12090:	b.n	11fc4 <__hexnan+0x3c>
   12092:	cmp	r3, #41	; 0x29
   12094:	beq.n	120ce <__hexnan+0x146>
   12096:	movs	r0, #4
   12098:	add	sp, #20
   1209a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1209e:	ldr	r3, [sp, #12]
   120a0:	cmp	r3, #0
   120a2:	beq.n	1203e <__hexnan+0xb6>
   120a4:	ldr	r4, [sp, #4]
   120a6:	ldr	r3, [sp, #12]
   120a8:	ldr.w	r1, [r4, #-4]
   120ac:	rsb	r3, r3, #32
   120b0:	mov.w	r0, #4294967295
   120b4:	lsr.w	r3, r0, r3
   120b8:	ands	r3, r1
   120ba:	str.w	r3, [r4, #-4]
   120be:	b.n	12044 <__hexnan+0xbc>
   120c0:	movs	r3, #1
   120c2:	movs	r0, #5
   120c4:	str.w	r3, [ip]
   120c8:	add	sp, #20
   120ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ce:	ldr	r3, [sp, #8]
   120d0:	adds	r5, #1
   120d2:	str	r5, [r3, #0]
   120d4:	cmp.w	lr, #0
   120d8:	bne.n	1201a <__hexnan+0x92>
   120da:	b.n	12096 <__hexnan+0x10e>
   120dc:	rsb	r3, r1, #8
   120e0:	lsls	r3, r3, #2
   120e2:	ldr	r5, [r0, #0]
   120e4:	rsb	r7, r3, #32
   120e8:	mov	r1, r0
   120ea:	ldr	r6, [r1, #4]
   120ec:	lsl.w	r4, r6, r7
   120f0:	orrs	r4, r5
   120f2:	lsr.w	r5, r6, r3
   120f6:	str	r4, [r1, #0]
   120f8:	str.w	r5, [r1, #4]!
   120fc:	cmp	r8, r1
   120fe:	bhi.n	120ea <__hexnan+0x162>
   12100:	b.n	12022 <__hexnan+0x9a>
   12102:	nop
   12104:	.word	0x00014094

00012108 <iswspace>:
   12108:	cmp	r0, #255	; 0xff
   1210a:	bls.n	12110 <iswspace+0x8>
   1210c:	movs	r0, #0
   1210e:	bx	lr
   12110:	push	{r4, lr}
   12112:	mov	r4, r0
   12114:	bl	c00c <__locale_ctype_ptr>
   12118:	add	r0, r4
   1211a:	ldrb	r0, [r0, #1]
   1211c:	and.w	r0, r0, #8
   12120:	uxtb	r0, r0
   12122:	pop	{r4, pc}

00012124 <__localeconv_l>:
   12124:	adds	r0, #240	; 0xf0
   12126:	bx	lr

00012128 <_localeconv_r>:
   12128:	ldr	r2, [pc, #16]	; (1213c <_localeconv_r+0x14>)
   1212a:	ldr	r3, [pc, #20]	; (12140 <_localeconv_r+0x18>)
   1212c:	ldr	r2, [r2, #0]
   1212e:	ldr	r0, [r2, #52]	; 0x34
   12130:	cmp	r0, #0
   12132:	it	eq
   12134:	moveq	r0, r3
   12136:	adds	r0, #240	; 0xf0
   12138:	bx	lr
   1213a:	nop
   1213c:	.word	0x20017e00
   12140:	.word	0x20017e04

00012144 <_mbrtowc_r>:
   12144:	push	{r4, r5, r6, r7, lr}
   12146:	sub	sp, #12
   12148:	mov	r7, r0
   1214a:	ldr	r5, [sp, #32]
   1214c:	cbz	r2, 12174 <_mbrtowc_r+0x30>
   1214e:	ldr	r4, [pc, #68]	; (12194 <_mbrtowc_r+0x50>)
   12150:	ldr	r6, [pc, #68]	; (12198 <_mbrtowc_r+0x54>)
   12152:	ldr	r4, [r4, #0]
   12154:	ldr	r4, [r4, #52]	; 0x34
   12156:	str	r5, [sp, #0]
   12158:	cmp	r4, #0
   1215a:	it	eq
   1215c:	moveq	r4, r6
   1215e:	ldr.w	r4, [r4, #228]	; 0xe4
   12162:	blx	r4
   12164:	adds	r3, r0, #1
   12166:	bne.n	12170 <_mbrtowc_r+0x2c>
   12168:	movs	r2, #0
   1216a:	movs	r3, #138	; 0x8a
   1216c:	str	r2, [r5, #0]
   1216e:	str	r3, [r7, #0]
   12170:	add	sp, #12
   12172:	pop	{r4, r5, r6, r7, pc}
   12174:	ldr	r3, [pc, #28]	; (12194 <_mbrtowc_r+0x50>)
   12176:	ldr	r1, [pc, #32]	; (12198 <_mbrtowc_r+0x54>)
   12178:	ldr	r3, [r3, #0]
   1217a:	ldr	r3, [r3, #52]	; 0x34
   1217c:	str	r5, [sp, #0]
   1217e:	cmp	r3, #0
   12180:	it	eq
   12182:	moveq	r3, r1
   12184:	mov	r4, r2
   12186:	mov	r1, r4
   12188:	ldr	r2, [pc, #16]	; (1219c <_mbrtowc_r+0x58>)
   1218a:	ldr.w	r4, [r3, #228]	; 0xe4
   1218e:	movs	r3, #1
   12190:	blx	r4
   12192:	b.n	12164 <_mbrtowc_r+0x20>
   12194:	.word	0x20017e00
   12198:	.word	0x20017e04
   1219c:	.word	0x000136a8

000121a0 <_Balloc>:
   121a0:	ldr	r3, [r0, #76]	; 0x4c
   121a2:	push	{r4, r5, r6, lr}
   121a4:	mov	r5, r0
   121a6:	mov	r4, r1
   121a8:	cbz	r3, 121be <_Balloc+0x1e>
   121aa:	ldr.w	r0, [r3, r4, lsl #2]
   121ae:	cbz	r0, 121d2 <_Balloc+0x32>
   121b0:	ldr	r2, [r0, #0]
   121b2:	str.w	r2, [r3, r4, lsl #2]
   121b6:	movs	r3, #0
   121b8:	str	r3, [r0, #16]
   121ba:	str	r3, [r0, #12]
   121bc:	pop	{r4, r5, r6, pc}
   121be:	movs	r2, #33	; 0x21
   121c0:	movs	r1, #4
   121c2:	bl	13384 <_calloc_r>
   121c6:	str	r0, [r5, #76]	; 0x4c
   121c8:	mov	r3, r0
   121ca:	cmp	r0, #0
   121cc:	bne.n	121aa <_Balloc+0xa>
   121ce:	movs	r0, #0
   121d0:	pop	{r4, r5, r6, pc}
   121d2:	movs	r1, #1
   121d4:	lsl.w	r6, r1, r4
   121d8:	adds	r2, r6, #5
   121da:	mov	r0, r5
   121dc:	lsls	r2, r2, #2
   121de:	bl	13384 <_calloc_r>
   121e2:	cmp	r0, #0
   121e4:	beq.n	121ce <_Balloc+0x2e>
   121e6:	str	r4, [r0, #4]
   121e8:	str	r6, [r0, #8]
   121ea:	b.n	121b6 <_Balloc+0x16>

000121ec <_Bfree>:
   121ec:	cbz	r1, 121fc <_Bfree+0x10>
   121ee:	ldr	r3, [r0, #76]	; 0x4c
   121f0:	ldr	r2, [r1, #4]
   121f2:	ldr.w	r0, [r3, r2, lsl #2]
   121f6:	str	r0, [r1, #0]
   121f8:	str.w	r1, [r3, r2, lsl #2]
   121fc:	bx	lr
   121fe:	nop

00012200 <__multadd>:
   12200:	push	{r4, r5, r6, r7, lr}
   12202:	ldr	r4, [r1, #16]
   12204:	sub	sp, #12
   12206:	mov	r5, r1
   12208:	mov	r6, r0
   1220a:	add.w	lr, r1, #20
   1220e:	movs	r7, #0
   12210:	ldr.w	r0, [lr]
   12214:	uxth	r1, r0
   12216:	mla	r1, r2, r1, r3
   1221a:	lsrs	r3, r1, #16
   1221c:	lsrs	r0, r0, #16
   1221e:	mla	r3, r2, r0, r3
   12222:	uxth	r1, r1
   12224:	adds	r7, #1
   12226:	add.w	r1, r1, r3, lsl #16
   1222a:	cmp	r4, r7
   1222c:	str.w	r1, [lr], #4
   12230:	mov.w	r3, r3, lsr #16
   12234:	bgt.n	12210 <__multadd+0x10>
   12236:	cbz	r3, 12248 <__multadd+0x48>
   12238:	ldr	r2, [r5, #8]
   1223a:	cmp	r4, r2
   1223c:	bge.n	1224e <__multadd+0x4e>
   1223e:	add.w	r2, r5, r4, lsl #2
   12242:	adds	r4, #1
   12244:	str	r3, [r2, #20]
   12246:	str	r4, [r5, #16]
   12248:	mov	r0, r5
   1224a:	add	sp, #12
   1224c:	pop	{r4, r5, r6, r7, pc}
   1224e:	ldr	r1, [r5, #4]
   12250:	str	r3, [sp, #4]
   12252:	adds	r1, #1
   12254:	mov	r0, r6
   12256:	bl	121a0 <_Balloc>
   1225a:	ldr	r2, [r5, #16]
   1225c:	adds	r2, #2
   1225e:	add.w	r1, r5, #12
   12262:	mov	r7, r0
   12264:	lsls	r2, r2, #2
   12266:	adds	r0, #12
   12268:	bl	87fc <memcpy>
   1226c:	ldr	r2, [r6, #76]	; 0x4c
   1226e:	ldr	r1, [r5, #4]
   12270:	ldr	r3, [sp, #4]
   12272:	ldr.w	r0, [r2, r1, lsl #2]
   12276:	str	r0, [r5, #0]
   12278:	str.w	r5, [r2, r1, lsl #2]
   1227c:	mov	r5, r7
   1227e:	b.n	1223e <__multadd+0x3e>

00012280 <__s2b>:
   12280:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12284:	ldr	r4, [pc, #140]	; (12314 <__s2b+0x94>)
   12286:	ldr	r5, [sp, #32]
   12288:	mov	r7, r3
   1228a:	adds	r3, #8
   1228c:	smull	r4, lr, r4, r3
   12290:	asrs	r3, r3, #31
   12292:	rsb	lr, r3, lr, asr #1
   12296:	cmp.w	lr, #1
   1229a:	mov	r6, r0
   1229c:	mov	r4, r1
   1229e:	mov	r8, r2
   122a0:	ble.n	1230e <__s2b+0x8e>
   122a2:	movs	r3, #1
   122a4:	movs	r1, #0
   122a6:	lsls	r3, r3, #1
   122a8:	cmp	lr, r3
   122aa:	add.w	r1, r1, #1
   122ae:	bgt.n	122a6 <__s2b+0x26>
   122b0:	mov	r0, r6
   122b2:	bl	121a0 <_Balloc>
   122b6:	movs	r3, #1
   122b8:	cmp.w	r8, #9
   122bc:	str	r5, [r0, #20]
   122be:	str	r3, [r0, #16]
   122c0:	ble.n	12306 <__s2b+0x86>
   122c2:	add.w	r9, r4, #9
   122c6:	mov	r5, r9
   122c8:	add	r4, r8
   122ca:	ldrb.w	r3, [r5], #1
   122ce:	mov	r1, r0
   122d0:	subs	r3, #48	; 0x30
   122d2:	movs	r2, #10
   122d4:	mov	r0, r6
   122d6:	bl	12200 <__multadd>
   122da:	cmp	r5, r4
   122dc:	bne.n	122ca <__s2b+0x4a>
   122de:	add.w	r4, r9, r8
   122e2:	subs	r4, #8
   122e4:	cmp	r7, r8
   122e6:	ble.n	12302 <__s2b+0x82>
   122e8:	rsb	r7, r8, r7
   122ec:	add	r7, r4
   122ee:	ldrb.w	r3, [r4], #1
   122f2:	mov	r1, r0
   122f4:	subs	r3, #48	; 0x30
   122f6:	movs	r2, #10
   122f8:	mov	r0, r6
   122fa:	bl	12200 <__multadd>
   122fe:	cmp	r7, r4
   12300:	bne.n	122ee <__s2b+0x6e>
   12302:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12306:	adds	r4, #10
   12308:	mov.w	r8, #9
   1230c:	b.n	122e4 <__s2b+0x64>
   1230e:	movs	r1, #0
   12310:	b.n	122b0 <__s2b+0x30>
   12312:	nop
   12314:	.word	0x38e38e39

00012318 <__hi0bits>:
   12318:	lsrs	r3, r0, #16
   1231a:	lsls	r3, r3, #16
   1231c:	cbnz	r3, 1234c <__hi0bits+0x34>
   1231e:	lsls	r0, r0, #16
   12320:	movs	r3, #16
   12322:	tst.w	r0, #4278190080	; 0xff000000
   12326:	itt	eq
   12328:	lsleq	r0, r0, #8
   1232a:	addeq	r3, #8
   1232c:	tst.w	r0, #4026531840	; 0xf0000000
   12330:	itt	eq
   12332:	lsleq	r0, r0, #4
   12334:	addeq	r3, #4
   12336:	tst.w	r0, #3221225472	; 0xc0000000
   1233a:	itt	eq
   1233c:	lsleq	r0, r0, #2
   1233e:	addeq	r3, #2
   12340:	cmp	r0, #0
   12342:	blt.n	12354 <__hi0bits+0x3c>
   12344:	lsls	r2, r0, #1
   12346:	bmi.n	12350 <__hi0bits+0x38>
   12348:	movs	r0, #32
   1234a:	bx	lr
   1234c:	movs	r3, #0
   1234e:	b.n	12322 <__hi0bits+0xa>
   12350:	adds	r0, r3, #1
   12352:	bx	lr
   12354:	mov	r0, r3
   12356:	bx	lr

00012358 <__lo0bits>:
   12358:	ldr	r3, [r0, #0]
   1235a:	ands.w	r2, r3, #7
   1235e:	beq.n	12370 <__lo0bits+0x18>
   12360:	lsls	r1, r3, #31
   12362:	bmi.n	123a6 <__lo0bits+0x4e>
   12364:	lsls	r2, r3, #30
   12366:	bmi.n	123aa <__lo0bits+0x52>
   12368:	lsrs	r3, r3, #2
   1236a:	str	r3, [r0, #0]
   1236c:	movs	r0, #2
   1236e:	bx	lr
   12370:	uxth	r1, r3
   12372:	cbnz	r1, 12378 <__lo0bits+0x20>
   12374:	lsrs	r3, r3, #16
   12376:	movs	r2, #16
   12378:	tst.w	r3, #255	; 0xff
   1237c:	itt	eq
   1237e:	lsreq	r3, r3, #8
   12380:	addeq	r2, #8
   12382:	lsls	r1, r3, #28
   12384:	itt	eq
   12386:	lsreq	r3, r3, #4
   12388:	addeq	r2, #4
   1238a:	lsls	r1, r3, #30
   1238c:	itt	eq
   1238e:	lsreq	r3, r3, #2
   12390:	addeq	r2, #2
   12392:	lsls	r1, r3, #31
   12394:	bmi.n	123a0 <__lo0bits+0x48>
   12396:	lsrs	r3, r3, #1
   12398:	bne.n	1239e <__lo0bits+0x46>
   1239a:	movs	r0, #32
   1239c:	bx	lr
   1239e:	adds	r2, #1
   123a0:	str	r3, [r0, #0]
   123a2:	mov	r0, r2
   123a4:	bx	lr
   123a6:	movs	r0, #0
   123a8:	bx	lr
   123aa:	lsrs	r3, r3, #1
   123ac:	str	r3, [r0, #0]
   123ae:	movs	r0, #1
   123b0:	bx	lr
   123b2:	nop

000123b4 <__i2b>:
   123b4:	push	{r4, lr}
   123b6:	mov	r4, r1
   123b8:	movs	r1, #1
   123ba:	bl	121a0 <_Balloc>
   123be:	movs	r2, #1
   123c0:	str	r4, [r0, #20]
   123c2:	str	r2, [r0, #16]
   123c4:	pop	{r4, pc}
   123c6:	nop

000123c8 <__multiply>:
   123c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123cc:	ldr	r5, [r1, #16]
   123ce:	ldr	r7, [r2, #16]
   123d0:	cmp	r5, r7
   123d2:	sub	sp, #12
   123d4:	mov	r4, r1
   123d6:	mov	r6, r2
   123d8:	bge.n	123e4 <__multiply+0x1c>
   123da:	mov	r2, r5
   123dc:	mov	r4, r6
   123de:	mov	r5, r7
   123e0:	mov	r6, r1
   123e2:	mov	r7, r2
   123e4:	ldr	r3, [r4, #8]
   123e6:	ldr	r1, [r4, #4]
   123e8:	add.w	r8, r5, r7
   123ec:	cmp	r8, r3
   123ee:	it	gt
   123f0:	addgt	r1, #1
   123f2:	bl	121a0 <_Balloc>
   123f6:	add.w	ip, r0, #20
   123fa:	add.w	r9, ip, r8, lsl #2
   123fe:	cmp	ip, r9
   12400:	str	r0, [sp, #0]
   12402:	bcs.n	12410 <__multiply+0x48>
   12404:	mov	r3, ip
   12406:	movs	r1, #0
   12408:	str.w	r1, [r3], #4
   1240c:	cmp	r9, r3
   1240e:	bhi.n	12408 <__multiply+0x40>
   12410:	add.w	r2, r6, #20
   12414:	add.w	sl, r2, r7, lsl #2
   12418:	add.w	r3, r4, #20
   1241c:	cmp	r2, sl
   1241e:	add.w	lr, r3, r5, lsl #2
   12422:	bcs.n	124ce <__multiply+0x106>
   12424:	str.w	r9, [sp, #4]
   12428:	mov	r9, r3
   1242a:	ldr.w	r3, [r2], #4
   1242e:	uxth.w	fp, r3
   12432:	cmp.w	fp, #0
   12436:	beq.n	1247a <__multiply+0xb2>
   12438:	movs	r0, #0
   1243a:	mov	r7, r9
   1243c:	mov	r6, ip
   1243e:	mov	r5, r0
   12440:	b.n	12444 <__multiply+0x7c>
   12442:	mov	r6, r3
   12444:	ldr.w	r4, [r7], #4
   12448:	ldr	r0, [r6, #0]
   1244a:	uxth	r1, r4
   1244c:	uxth	r3, r0
   1244e:	mla	r1, fp, r1, r3
   12452:	lsrs	r4, r4, #16
   12454:	lsrs	r0, r0, #16
   12456:	adds	r3, r1, r5
   12458:	mla	r0, fp, r4, r0
   1245c:	add.w	r0, r0, r3, lsr #16
   12460:	uxth	r1, r3
   12462:	mov	r3, r6
   12464:	orr.w	r1, r1, r0, lsl #16
   12468:	cmp	lr, r7
   1246a:	mov.w	r5, r0, lsr #16
   1246e:	str.w	r1, [r3], #4
   12472:	bhi.n	12442 <__multiply+0x7a>
   12474:	str	r5, [r6, #4]
   12476:	ldr.w	r3, [r2, #-4]
   1247a:	movs.w	fp, r3, lsr #16
   1247e:	beq.n	124c2 <__multiply+0xfa>
   12480:	ldr.w	r3, [ip]
   12484:	mov	r7, ip
   12486:	mov	r0, r3
   12488:	mov	r5, r9
   1248a:	movs	r1, #0
   1248c:	b.n	12490 <__multiply+0xc8>
   1248e:	mov	r7, r6
   12490:	ldrh	r4, [r5, #0]
   12492:	lsrs	r0, r0, #16
   12494:	mla	r0, fp, r4, r0
   12498:	add	r1, r0
   1249a:	uxth	r4, r3
   1249c:	mov	r6, r7
   1249e:	orr.w	r3, r4, r1, lsl #16
   124a2:	str.w	r3, [r6], #4
   124a6:	ldr	r0, [r7, #4]
   124a8:	ldr.w	r4, [r5], #4
   124ac:	uxth	r3, r0
   124ae:	lsrs	r4, r4, #16
   124b0:	mla	r4, fp, r4, r3
   124b4:	add.w	r3, r4, r1, lsr #16
   124b8:	cmp	lr, r5
   124ba:	mov.w	r1, r3, lsr #16
   124be:	bhi.n	1248e <__multiply+0xc6>
   124c0:	str	r3, [r7, #4]
   124c2:	cmp	sl, r2
   124c4:	add.w	ip, ip, #4
   124c8:	bhi.n	1242a <__multiply+0x62>
   124ca:	ldr.w	r9, [sp, #4]
   124ce:	cmp.w	r8, #0
   124d2:	ble.n	124ec <__multiply+0x124>
   124d4:	ldr.w	r3, [r9, #-4]
   124d8:	sub.w	r9, r9, #4
   124dc:	cbz	r3, 124e6 <__multiply+0x11e>
   124de:	b.n	124ec <__multiply+0x124>
   124e0:	ldr.w	r3, [r9, #-4]!
   124e4:	cbnz	r3, 124ec <__multiply+0x124>
   124e6:	subs.w	r8, r8, #1
   124ea:	bne.n	124e0 <__multiply+0x118>
   124ec:	ldr	r0, [sp, #0]
   124ee:	str.w	r8, [r0, #16]
   124f2:	add	sp, #12
   124f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000124f8 <__pow5mult>:
   124f8:	ands.w	r3, r2, #3
   124fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12500:	mov	r4, r2
   12502:	mov	r7, r0
   12504:	bne.n	12564 <__pow5mult+0x6c>
   12506:	mov	r6, r1
   12508:	asrs	r4, r4, #2
   1250a:	beq.n	12546 <__pow5mult+0x4e>
   1250c:	ldr	r5, [r7, #72]	; 0x48
   1250e:	cbz	r5, 12576 <__pow5mult+0x7e>
   12510:	lsls	r3, r4, #31
   12512:	mov.w	r8, #0
   12516:	bmi.n	12526 <__pow5mult+0x2e>
   12518:	asrs	r4, r4, #1
   1251a:	beq.n	12546 <__pow5mult+0x4e>
   1251c:	ldr	r0, [r5, #0]
   1251e:	cbz	r0, 1254c <__pow5mult+0x54>
   12520:	mov	r5, r0
   12522:	lsls	r3, r4, #31
   12524:	bpl.n	12518 <__pow5mult+0x20>
   12526:	mov	r2, r5
   12528:	mov	r1, r6
   1252a:	mov	r0, r7
   1252c:	bl	123c8 <__multiply>
   12530:	cbz	r6, 12560 <__pow5mult+0x68>
   12532:	ldr	r2, [r6, #4]
   12534:	ldr	r3, [r7, #76]	; 0x4c
   12536:	asrs	r4, r4, #1
   12538:	ldr.w	r1, [r3, r2, lsl #2]
   1253c:	str	r1, [r6, #0]
   1253e:	str.w	r6, [r3, r2, lsl #2]
   12542:	mov	r6, r0
   12544:	bne.n	1251c <__pow5mult+0x24>
   12546:	mov	r0, r6
   12548:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1254c:	mov	r2, r5
   1254e:	mov	r1, r5
   12550:	mov	r0, r7
   12552:	bl	123c8 <__multiply>
   12556:	str	r0, [r5, #0]
   12558:	str.w	r8, [r0]
   1255c:	mov	r5, r0
   1255e:	b.n	12522 <__pow5mult+0x2a>
   12560:	mov	r6, r0
   12562:	b.n	12518 <__pow5mult+0x20>
   12564:	subs	r2, r3, #1
   12566:	ldr	r5, [pc, #44]	; (12594 <__pow5mult+0x9c>)
   12568:	movs	r3, #0
   1256a:	ldr.w	r2, [r5, r2, lsl #2]
   1256e:	bl	12200 <__multadd>
   12572:	mov	r6, r0
   12574:	b.n	12508 <__pow5mult+0x10>
   12576:	movs	r1, #1
   12578:	mov	r0, r7
   1257a:	bl	121a0 <_Balloc>
   1257e:	movw	r1, #625	; 0x271
   12582:	movs	r2, #1
   12584:	movs	r3, #0
   12586:	str	r1, [r0, #20]
   12588:	str	r2, [r0, #16]
   1258a:	mov	r5, r0
   1258c:	str	r0, [r7, #72]	; 0x48
   1258e:	str	r3, [r0, #0]
   12590:	b.n	12510 <__pow5mult+0x18>
   12592:	nop
   12594:	.word	0x00014288

00012598 <__lshift>:
   12598:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1259c:	mov	r9, r2
   1259e:	ldr	r2, [r1, #16]
   125a0:	ldr	r3, [r1, #8]
   125a2:	mov.w	r4, r9, asr #5
   125a6:	add.w	r8, r4, r2
   125aa:	add.w	r5, r8, #1
   125ae:	cmp	r5, r3
   125b0:	mov	r6, r1
   125b2:	mov	sl, r0
   125b4:	ldr	r1, [r1, #4]
   125b6:	ble.n	125c2 <__lshift+0x2a>
   125b8:	lsls	r3, r3, #1
   125ba:	cmp	r5, r3
   125bc:	add.w	r1, r1, #1
   125c0:	bgt.n	125b8 <__lshift+0x20>
   125c2:	mov	r0, sl
   125c4:	bl	121a0 <_Balloc>
   125c8:	cmp	r4, #0
   125ca:	add.w	r2, r0, #20
   125ce:	ble.n	12642 <__lshift+0xaa>
   125d0:	add.w	r3, r2, r4, lsl #2
   125d4:	movs	r1, #0
   125d6:	str.w	r1, [r2], #4
   125da:	cmp	r3, r2
   125dc:	bne.n	125d6 <__lshift+0x3e>
   125de:	ldr	r4, [r6, #16]
   125e0:	add.w	r1, r6, #20
   125e4:	ands.w	r9, r9, #31
   125e8:	add.w	lr, r1, r4, lsl #2
   125ec:	beq.n	12632 <__lshift+0x9a>
   125ee:	rsb	r2, r9, #32
   125f2:	movs	r4, #0
   125f4:	ldr	r7, [r1, #0]
   125f6:	lsl.w	ip, r7, r9
   125fa:	orr.w	r4, ip, r4
   125fe:	mov	ip, r3
   12600:	str.w	r4, [r3], #4
   12604:	ldr.w	r4, [r1], #4
   12608:	cmp	lr, r1
   1260a:	lsr.w	r4, r4, r2
   1260e:	bhi.n	125f4 <__lshift+0x5c>
   12610:	str.w	r4, [ip, #4]
   12614:	cbz	r4, 1261a <__lshift+0x82>
   12616:	add.w	r5, r8, #2
   1261a:	ldr.w	r3, [sl, #76]	; 0x4c
   1261e:	ldr	r2, [r6, #4]
   12620:	subs	r5, #1
   12622:	ldr.w	r1, [r3, r2, lsl #2]
   12626:	str	r5, [r0, #16]
   12628:	str	r1, [r6, #0]
   1262a:	str.w	r6, [r3, r2, lsl #2]
   1262e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12632:	subs	r3, #4
   12634:	ldr.w	r2, [r1], #4
   12638:	str.w	r2, [r3, #4]!
   1263c:	cmp	lr, r1
   1263e:	bhi.n	12634 <__lshift+0x9c>
   12640:	b.n	1261a <__lshift+0x82>
   12642:	mov	r3, r2
   12644:	b.n	125de <__lshift+0x46>
   12646:	nop

00012648 <__mcmp>:
   12648:	ldr	r2, [r0, #16]
   1264a:	ldr	r3, [r1, #16]
   1264c:	subs	r2, r2, r3
   1264e:	bne.n	12678 <__mcmp+0x30>
   12650:	lsls	r3, r3, #2
   12652:	adds	r0, #20
   12654:	adds	r1, #20
   12656:	add	r1, r3
   12658:	push	{r4}
   1265a:	add	r3, r0
   1265c:	b.n	12662 <__mcmp+0x1a>
   1265e:	cmp	r0, r3
   12660:	bcs.n	1267c <__mcmp+0x34>
   12662:	ldr.w	r4, [r3, #-4]!
   12666:	ldr.w	r2, [r1, #-4]!
   1266a:	cmp	r4, r2
   1266c:	beq.n	1265e <__mcmp+0x16>
   1266e:	bcc.n	12684 <__mcmp+0x3c>
   12670:	movs	r0, #1
   12672:	ldr.w	r4, [sp], #4
   12676:	bx	lr
   12678:	mov	r0, r2
   1267a:	bx	lr
   1267c:	movs	r0, #0
   1267e:	ldr.w	r4, [sp], #4
   12682:	bx	lr
   12684:	mov.w	r0, #4294967295
   12688:	b.n	12672 <__mcmp+0x2a>
   1268a:	nop

0001268c <__mdiff>:
   1268c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12690:	ldr	r3, [r1, #16]
   12692:	mov	r7, r1
   12694:	ldr	r1, [r2, #16]
   12696:	subs	r3, r3, r1
   12698:	cmp	r3, #0
   1269a:	mov	r8, r2
   1269c:	bne.n	126ce <__mdiff+0x42>
   1269e:	lsls	r1, r1, #2
   126a0:	add.w	r2, r7, #20
   126a4:	add.w	r5, r8, #20
   126a8:	adds	r3, r2, r1
   126aa:	add	r1, r5
   126ac:	b.n	126b2 <__mdiff+0x26>
   126ae:	cmp	r2, r3
   126b0:	bcs.n	12770 <__mdiff+0xe4>
   126b2:	ldr.w	r6, [r3, #-4]!
   126b6:	ldr.w	r4, [r1, #-4]!
   126ba:	cmp	r6, r4
   126bc:	beq.n	126ae <__mdiff+0x22>
   126be:	bcs.n	12782 <__mdiff+0xf6>
   126c0:	mov	r3, r7
   126c2:	mov	r4, r2
   126c4:	mov	r7, r8
   126c6:	mov.w	r9, #1
   126ca:	mov	r8, r3
   126cc:	b.n	126dc <__mdiff+0x50>
   126ce:	blt.n	1278c <__mdiff+0x100>
   126d0:	add.w	r5, r7, #20
   126d4:	add.w	r4, r2, #20
   126d8:	mov.w	r9, #0
   126dc:	ldr	r1, [r7, #4]
   126de:	bl	121a0 <_Balloc>
   126e2:	ldr.w	r3, [r8, #16]
   126e6:	ldr	r6, [r7, #16]
   126e8:	str.w	r9, [r0, #12]
   126ec:	add.w	ip, r4, r3, lsl #2
   126f0:	mov	lr, r4
   126f2:	add.w	r7, r5, r6, lsl #2
   126f6:	add.w	r4, r0, #20
   126fa:	movs	r3, #0
   126fc:	ldr.w	r1, [lr], #4
   12700:	ldr.w	r8, [r5], #4
   12704:	uxth	r2, r1
   12706:	uxtah	r3, r3, r8
   1270a:	lsrs	r1, r1, #16
   1270c:	subs	r2, r3, r2
   1270e:	rsb	r3, r1, r8, lsr #16
   12712:	add.w	r3, r3, r2, asr #16
   12716:	uxth	r2, r2
   12718:	orr.w	r2, r2, r3, lsl #16
   1271c:	cmp	ip, lr
   1271e:	str.w	r2, [r4], #4
   12722:	mov.w	r3, r3, asr #16
   12726:	bhi.n	126fc <__mdiff+0x70>
   12728:	cmp	r7, r5
   1272a:	bls.n	1275c <__mdiff+0xd0>
   1272c:	mov	ip, r4
   1272e:	mov	r1, r5
   12730:	ldr.w	lr, [r1], #4
   12734:	uxtah	r2, r3, lr
   12738:	asrs	r3, r2, #16
   1273a:	add.w	r3, r3, lr, lsr #16
   1273e:	uxth	r2, r2
   12740:	orr.w	r2, r2, r3, lsl #16
   12744:	cmp	r7, r1
   12746:	str.w	r2, [ip], #4
   1274a:	mov.w	r3, r3, asr #16
   1274e:	bhi.n	12730 <__mdiff+0xa4>
   12750:	mvns	r5, r5
   12752:	add	r5, r7
   12754:	bic.w	r5, r5, #3
   12758:	adds	r5, #4
   1275a:	add	r4, r5
   1275c:	subs	r4, #4
   1275e:	cbnz	r2, 1276a <__mdiff+0xde>
   12760:	ldr.w	r3, [r4, #-4]!
   12764:	subs	r6, #1
   12766:	cmp	r3, #0
   12768:	beq.n	12760 <__mdiff+0xd4>
   1276a:	str	r6, [r0, #16]
   1276c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12770:	movs	r1, #0
   12772:	bl	121a0 <_Balloc>
   12776:	movs	r2, #1
   12778:	movs	r3, #0
   1277a:	str	r2, [r0, #16]
   1277c:	str	r3, [r0, #20]
   1277e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12782:	mov	r4, r5
   12784:	mov.w	r9, #0
   12788:	mov	r5, r2
   1278a:	b.n	126dc <__mdiff+0x50>
   1278c:	mov	r3, r7
   1278e:	add.w	r4, r7, #20
   12792:	add.w	r5, r8, #20
   12796:	mov	r7, r8
   12798:	mov.w	r9, #1
   1279c:	mov	r8, r3
   1279e:	b.n	126dc <__mdiff+0x50>

000127a0 <__ulp>:
   127a0:	ldr	r3, [pc, #76]	; (127f0 <__ulp+0x50>)
   127a2:	vmov	r2, s1
   127a6:	ands	r2, r3
   127a8:	sub.w	r3, r2, #54525952	; 0x3400000
   127ac:	cmp	r3, #0
   127ae:	ble.n	127ba <__ulp+0x1a>
   127b0:	movs	r0, #0
   127b2:	mov	r1, r3
   127b4:	vmov	d0, r0, r1
   127b8:	bx	lr
   127ba:	negs	r3, r3
   127bc:	asrs	r3, r3, #20
   127be:	cmp	r3, #19
   127c0:	ble.n	127de <__ulp+0x3e>
   127c2:	subs	r3, #20
   127c4:	cmp	r3, #30
   127c6:	ittte	le
   127c8:	rsble	r3, r3, #31
   127cc:	movle	r2, #1
   127ce:	lslle.w	r3, r2, r3
   127d2:	movgt	r3, #1
   127d4:	movs	r1, #0
   127d6:	mov	r0, r3
   127d8:	vmov	d0, r0, r1
   127dc:	bx	lr
   127de:	mov.w	r2, #524288	; 0x80000
   127e2:	movs	r0, #0
   127e4:	asr.w	r1, r2, r3
   127e8:	vmov	d0, r0, r1
   127ec:	bx	lr
   127ee:	nop
   127f0:	.word	0x7ff00000

000127f4 <__b2d>:
   127f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127f8:	ldr	r6, [r0, #16]
   127fa:	add.w	r8, r0, #20
   127fe:	add.w	r6, r8, r6, lsl #2
   12802:	ldr.w	r7, [r6, #-4]
   12806:	mov	r0, r7
   12808:	bl	12318 <__hi0bits>
   1280c:	rsb	r3, r0, #32
   12810:	cmp	r0, #10
   12812:	str	r3, [r1, #0]
   12814:	sub.w	r3, r6, #4
   12818:	bgt.n	1284c <__b2d+0x58>
   1281a:	cmp	r8, r3
   1281c:	rsb	r2, r0, #11
   12820:	it	cc
   12822:	ldrcc.w	r3, [r6, #-8]
   12826:	lsr.w	r1, r7, r2
   1282a:	add.w	r0, r0, #21
   1282e:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   12832:	ite	cc
   12834:	lsrcc	r3, r2
   12836:	movcs	r3, #0
   12838:	lsl.w	r0, r7, r0
   1283c:	orr.w	r5, r5, #3145728	; 0x300000
   12840:	orr.w	r4, r0, r3
   12844:	vmov	d0, r4, r5
   12848:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1284c:	cmp	r8, r3
   1284e:	bcs.n	12892 <__b2d+0x9e>
   12850:	subs.w	r3, r0, #11
   12854:	ldr.w	r2, [r6, #-8]
   12858:	beq.n	12898 <__b2d+0xa4>
   1285a:	lsl.w	r0, r7, r3
   1285e:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   12862:	rsb	lr, r3, #32
   12866:	sub.w	r1, r6, #8
   1286a:	orr.w	r7, r7, #3145728	; 0x300000
   1286e:	lsr.w	r0, r2, lr
   12872:	cmp	r8, r1
   12874:	orr.w	r5, r7, r0
   12878:	bcs.n	128bc <__b2d+0xc8>
   1287a:	ldr.w	r1, [r6, #-12]
   1287e:	lsl.w	r0, r2, r3
   12882:	lsr.w	r3, r1, lr
   12886:	orrs	r0, r3
   12888:	mov	r4, r0
   1288a:	vmov	d0, r4, r5
   1288e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12892:	subs	r0, #11
   12894:	bne.n	128aa <__b2d+0xb6>
   12896:	mov	r2, r0
   12898:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   1289c:	orr.w	r5, r5, #3145728	; 0x300000
   128a0:	mov	r4, r2
   128a2:	vmov	d0, r4, r5
   128a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128aa:	lsl.w	r0, r7, r0
   128ae:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   128b2:	movs	r0, #0
   128b4:	orr.w	r5, r5, #3145728	; 0x300000
   128b8:	mov	r4, r0
   128ba:	b.n	1288a <__b2d+0x96>
   128bc:	lsl.w	r0, r2, r3
   128c0:	mov	r4, r0
   128c2:	b.n	1288a <__b2d+0x96>

000128c4 <__d2b>:
   128c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   128c8:	vmov	r6, r7, d0
   128cc:	sub	sp, #12
   128ce:	mov	r8, r1
   128d0:	movs	r1, #1
   128d2:	mov	r4, r7
   128d4:	ubfx	r5, r7, #20, #11
   128d8:	mov	r7, r2
   128da:	bl	121a0 <_Balloc>
   128de:	ubfx	r4, r4, #0, #20
   128e2:	mov	r9, r0
   128e4:	cbz	r5, 128ea <__d2b+0x26>
   128e6:	orr.w	r4, r4, #1048576	; 0x100000
   128ea:	str	r4, [sp, #4]
   128ec:	cbz	r6, 12936 <__d2b+0x72>
   128ee:	add	r0, sp, #8
   128f0:	str.w	r6, [r0, #-8]!
   128f4:	bl	12358 <__lo0bits>
   128f8:	cmp	r0, #0
   128fa:	bne.n	12966 <__d2b+0xa2>
   128fc:	ldmia.w	sp, {r2, r3}
   12900:	str.w	r2, [r9, #20]
   12904:	cmp	r3, #0
   12906:	ite	eq
   12908:	moveq	r1, #1
   1290a:	movne	r1, #2
   1290c:	str.w	r3, [r9, #24]
   12910:	str.w	r1, [r9, #16]
   12914:	cbnz	r5, 1294e <__d2b+0x8a>
   12916:	add.w	r3, r9, r1, lsl #2
   1291a:	subw	r0, r0, #1074	; 0x432
   1291e:	str.w	r0, [r8]
   12922:	ldr	r0, [r3, #16]
   12924:	bl	12318 <__hi0bits>
   12928:	rsb	r0, r0, r1, lsl #5
   1292c:	str	r0, [r7, #0]
   1292e:	mov	r0, r9
   12930:	add	sp, #12
   12932:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12936:	add	r0, sp, #4
   12938:	bl	12358 <__lo0bits>
   1293c:	ldr	r3, [sp, #4]
   1293e:	str.w	r3, [r9, #20]
   12942:	movs	r1, #1
   12944:	adds	r0, #32
   12946:	str.w	r1, [r9, #16]
   1294a:	cmp	r5, #0
   1294c:	beq.n	12916 <__d2b+0x52>
   1294e:	subw	r5, r5, #1075	; 0x433
   12952:	add	r5, r0
   12954:	rsb	r0, r0, #53	; 0x35
   12958:	str.w	r5, [r8]
   1295c:	str	r0, [r7, #0]
   1295e:	mov	r0, r9
   12960:	add	sp, #12
   12962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12966:	ldmia.w	sp, {r2, r3}
   1296a:	rsb	r1, r0, #32
   1296e:	lsl.w	r1, r3, r1
   12972:	orrs	r2, r1
   12974:	lsrs	r3, r0
   12976:	str	r3, [sp, #4]
   12978:	str.w	r2, [r9, #20]
   1297c:	b.n	12904 <__d2b+0x40>
   1297e:	nop

00012980 <__ratio>:
   12980:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12984:	sub	sp, #12
   12986:	mov	r8, r1
   12988:	mov	r1, sp
   1298a:	mov	r9, r0
   1298c:	bl	127f4 <__b2d>
   12990:	mov	r0, r8
   12992:	add	r1, sp, #4
   12994:	vmov	r4, r5, d0
   12998:	bl	127f4 <__b2d>
   1299c:	ldmia.w	sp, {r1, r3}
   129a0:	ldr.w	r2, [r9, #16]
   129a4:	ldr.w	r0, [r8, #16]
   129a8:	subs	r1, r1, r3
   129aa:	subs	r0, r2, r0
   129ac:	add.w	r3, r1, r0, lsl #5
   129b0:	cmp	r3, #0
   129b2:	vmov	r6, r7, d0
   129b6:	ble.n	129d4 <__ratio+0x54>
   129b8:	add.w	r1, r5, r3, lsl #20
   129bc:	mov	r5, r1
   129be:	mov	r2, r6
   129c0:	mov	r3, r7
   129c2:	mov	r0, r4
   129c4:	mov	r1, r5
   129c6:	bl	b4e8 <__aeabi_ddiv>
   129ca:	vmov	d0, r0, r1
   129ce:	add	sp, #12
   129d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   129d4:	sub.w	r9, r7, r3, lsl #20
   129d8:	vmov	r6, s0
   129dc:	mov	r7, r9
   129de:	b.n	129be <__ratio+0x3e>

000129e0 <__copybits>:
   129e0:	push	{r4, r5, r6}
   129e2:	ldr	r4, [r2, #16]
   129e4:	add.w	r3, r2, #20
   129e8:	subs	r1, #1
   129ea:	asrs	r6, r1, #5
   129ec:	add.w	r4, r3, r4, lsl #2
   129f0:	adds	r6, #1
   129f2:	cmp	r3, r4
   129f4:	add.w	r6, r0, r6, lsl #2
   129f8:	bcs.n	12a14 <__copybits+0x34>
   129fa:	subs	r1, r0, #4
   129fc:	ldr.w	r5, [r3], #4
   12a00:	str.w	r5, [r1, #4]!
   12a04:	cmp	r4, r3
   12a06:	bhi.n	129fc <__copybits+0x1c>
   12a08:	subs	r3, r4, r2
   12a0a:	subs	r3, #21
   12a0c:	bic.w	r3, r3, #3
   12a10:	adds	r3, #4
   12a12:	add	r0, r3
   12a14:	cmp	r6, r0
   12a16:	bls.n	12a22 <__copybits+0x42>
   12a18:	movs	r3, #0
   12a1a:	str.w	r3, [r0], #4
   12a1e:	cmp	r6, r0
   12a20:	bhi.n	12a1a <__copybits+0x3a>
   12a22:	pop	{r4, r5, r6}
   12a24:	bx	lr
   12a26:	nop

00012a28 <__any_on>:
   12a28:	ldr	r3, [r0, #16]
   12a2a:	asrs	r2, r1, #5
   12a2c:	cmp	r3, r2
   12a2e:	push	{r4}
   12a30:	add.w	r4, r0, #20
   12a34:	bge.n	12a58 <__any_on+0x30>
   12a36:	add.w	r3, r4, r3, lsl #2
   12a3a:	cmp	r4, r3
   12a3c:	bcs.n	12a82 <__any_on+0x5a>
   12a3e:	ldr.w	r0, [r3, #-4]
   12a42:	subs	r3, #4
   12a44:	cbz	r0, 12a4e <__any_on+0x26>
   12a46:	b.n	12a74 <__any_on+0x4c>
   12a48:	ldr.w	r2, [r3, #-4]!
   12a4c:	cbnz	r2, 12a74 <__any_on+0x4c>
   12a4e:	cmp	r4, r3
   12a50:	bcc.n	12a48 <__any_on+0x20>
   12a52:	ldr.w	r4, [sp], #4
   12a56:	bx	lr
   12a58:	ble.n	12a7c <__any_on+0x54>
   12a5a:	ands.w	r1, r1, #31
   12a5e:	beq.n	12a7c <__any_on+0x54>
   12a60:	ldr.w	r0, [r4, r2, lsl #2]
   12a64:	lsr.w	r3, r0, r1
   12a68:	lsl.w	r1, r3, r1
   12a6c:	cmp	r0, r1
   12a6e:	add.w	r3, r4, r2, lsl #2
   12a72:	beq.n	12a3a <__any_on+0x12>
   12a74:	movs	r0, #1
   12a76:	ldr.w	r4, [sp], #4
   12a7a:	bx	lr
   12a7c:	add.w	r3, r4, r2, lsl #2
   12a80:	b.n	12a3a <__any_on+0x12>
   12a82:	movs	r0, #0
   12a84:	b.n	12a52 <__any_on+0x2a>
   12a86:	nop

00012a88 <__sccl>:
   12a88:	push	{r4, r5, r6}
   12a8a:	ldrb	r5, [r1, #0]
   12a8c:	cmp	r5, #94	; 0x5e
   12a8e:	beq.n	12af0 <__sccl+0x68>
   12a90:	movs	r2, #0
   12a92:	adds	r1, #1
   12a94:	mov	r6, r2
   12a96:	subs	r3, r0, #1
   12a98:	add.w	r4, r0, #255	; 0xff
   12a9c:	strb.w	r2, [r3, #1]!
   12aa0:	cmp	r3, r4
   12aa2:	bne.n	12a9c <__sccl+0x14>
   12aa4:	cbz	r5, 12ac8 <__sccl+0x40>
   12aa6:	eor.w	r2, r6, #1
   12aaa:	strb	r2, [r0, r5]
   12aac:	adds	r4, r1, #1
   12aae:	ldrb.w	r3, [r4, #-1]
   12ab2:	cmp	r3, #45	; 0x2d
   12ab4:	beq.n	12ad4 <__sccl+0x4c>
   12ab6:	cmp	r3, #93	; 0x5d
   12ab8:	beq.n	12ace <__sccl+0x46>
   12aba:	cbz	r3, 12ac2 <__sccl+0x3a>
   12abc:	mov	r5, r3
   12abe:	mov	r1, r4
   12ac0:	b.n	12aaa <__sccl+0x22>
   12ac2:	mov	r0, r1
   12ac4:	pop	{r4, r5, r6}
   12ac6:	bx	lr
   12ac8:	subs	r0, r1, #1
   12aca:	pop	{r4, r5, r6}
   12acc:	bx	lr
   12ace:	mov	r0, r4
   12ad0:	pop	{r4, r5, r6}
   12ad2:	bx	lr
   12ad4:	ldrb	r6, [r1, #1]
   12ad6:	cmp	r6, #93	; 0x5d
   12ad8:	beq.n	12abc <__sccl+0x34>
   12ada:	cmp	r5, r6
   12adc:	bgt.n	12abc <__sccl+0x34>
   12ade:	adds	r1, #2
   12ae0:	adds	r3, r0, r5
   12ae2:	adds	r5, #1
   12ae4:	cmp	r6, r5
   12ae6:	strb.w	r2, [r3, #1]!
   12aea:	bgt.n	12ae2 <__sccl+0x5a>
   12aec:	adds	r4, #2
   12aee:	b.n	12aae <__sccl+0x26>
   12af0:	movs	r2, #1
   12af2:	ldrb	r5, [r1, #1]
   12af4:	mov	r6, r2
   12af6:	adds	r1, #2
   12af8:	b.n	12a96 <__sccl+0xe>
   12afa:	nop

00012afc <_strtoll_l.isra.0>:
   12afc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b00:	sub	sp, #20
   12b02:	mov	sl, r3
   12b04:	str	r1, [sp, #8]
   12b06:	str	r0, [sp, #12]
   12b08:	str	r2, [sp, #4]
   12b0a:	mov	r7, r1
   12b0c:	ldr	r6, [sp, #56]	; 0x38
   12b0e:	b.n	12b12 <_strtoll_l.isra.0+0x16>
   12b10:	mov	r7, r5
   12b12:	mov	r5, r7
   12b14:	mov	r0, r6
   12b16:	ldrb.w	r4, [r5], #1
   12b1a:	bl	c004 <__locale_ctype_ptr_l>
   12b1e:	add	r0, r4
   12b20:	ldrb	r3, [r0, #1]
   12b22:	and.w	r3, r3, #8
   12b26:	and.w	r2, r3, #255	; 0xff
   12b2a:	cmp	r3, #0
   12b2c:	bne.n	12b10 <_strtoll_l.isra.0+0x14>
   12b2e:	cmp	r4, #45	; 0x2d
   12b30:	beq.w	12c3a <_strtoll_l.isra.0+0x13e>
   12b34:	cmp	r4, #43	; 0x2b
   12b36:	it	eq
   12b38:	ldrbeq	r4, [r7, #1]
   12b3a:	str	r2, [sp, #0]
   12b3c:	it	eq
   12b3e:	addeq	r5, r7, #2
   12b40:	cmp.w	sl, #0
   12b44:	beq.n	12b60 <_strtoll_l.isra.0+0x64>
   12b46:	cmp.w	sl, #16
   12b4a:	beq.w	12c78 <_strtoll_l.isra.0+0x17c>
   12b4e:	ldr	r3, [sp, #0]
   12b50:	mov	r6, sl
   12b52:	asrs	r7, r6, #31
   12b54:	cbnz	r3, 12b72 <_strtoll_l.isra.0+0x76>
   12b56:	mov.w	r8, #4294967295
   12b5a:	mvn.w	r9, #2147483648	; 0x80000000
   12b5e:	b.n	12b7a <_strtoll_l.isra.0+0x7e>
   12b60:	cmp	r4, #48	; 0x30
   12b62:	beq.n	12c64 <_strtoll_l.isra.0+0x168>
   12b64:	movs	r6, #10
   12b66:	movs	r7, #0
   12b68:	mov.w	sl, #10
   12b6c:	ldr	r3, [sp, #0]
   12b6e:	cmp	r3, #0
   12b70:	beq.n	12b56 <_strtoll_l.isra.0+0x5a>
   12b72:	mov.w	r8, #0
   12b76:	mov.w	r9, #2147483648	; 0x80000000
   12b7a:	mov	r2, r6
   12b7c:	mov	r3, r7
   12b7e:	mov	r0, r8
   12b80:	mov	r1, r9
   12b82:	bl	bbe0 <__aeabi_uldivmod>
   12b86:	mov	r3, r7
   12b88:	mov	fp, r2
   12b8a:	mov	r0, r8
   12b8c:	mov	r2, r6
   12b8e:	mov	r1, r9
   12b90:	bl	bbe0 <__aeabi_uldivmod>
   12b94:	mov.w	lr, #0
   12b98:	movs	r2, #0
   12b9a:	movs	r3, #0
   12b9c:	b.n	12bbe <_strtoll_l.isra.0+0xc2>
   12b9e:	beq.n	12c2c <_strtoll_l.isra.0+0x130>
   12ba0:	mul.w	r4, r2, r7
   12ba4:	mla	r4, r6, r3, r4
   12ba8:	umull	r2, r3, r2, r6
   12bac:	add	r3, r4
   12bae:	adds.w	r2, r2, ip
   12bb2:	adc.w	r3, r3, ip, asr #31
   12bb6:	mov.w	lr, #1
   12bba:	ldrb.w	r4, [r5], #1
   12bbe:	sub.w	ip, r4, #48	; 0x30
   12bc2:	cmp.w	ip, #9
   12bc6:	bls.n	12bd6 <_strtoll_l.isra.0+0xda>
   12bc8:	sub.w	ip, r4, #65	; 0x41
   12bcc:	cmp.w	ip, #25
   12bd0:	bhi.n	12bee <_strtoll_l.isra.0+0xf2>
   12bd2:	sub.w	ip, r4, #55	; 0x37
   12bd6:	cmp	sl, ip
   12bd8:	ble.n	12c00 <_strtoll_l.isra.0+0x104>
   12bda:	cmp.w	lr, #4294967295
   12bde:	beq.n	12bba <_strtoll_l.isra.0+0xbe>
   12be0:	cmp	r1, r3
   12be2:	it	eq
   12be4:	cmpeq	r0, r2
   12be6:	bcs.n	12b9e <_strtoll_l.isra.0+0xa2>
   12be8:	mov.w	lr, #4294967295
   12bec:	b.n	12bba <_strtoll_l.isra.0+0xbe>
   12bee:	sub.w	ip, r4, #97	; 0x61
   12bf2:	cmp.w	ip, #25
   12bf6:	bhi.n	12c00 <_strtoll_l.isra.0+0x104>
   12bf8:	sub.w	ip, r4, #87	; 0x57
   12bfc:	cmp	sl, ip
   12bfe:	bgt.n	12bda <_strtoll_l.isra.0+0xde>
   12c00:	cmp.w	lr, #4294967295
   12c04:	beq.n	12c44 <_strtoll_l.isra.0+0x148>
   12c06:	ldr	r1, [sp, #0]
   12c08:	cbz	r1, 12c10 <_strtoll_l.isra.0+0x114>
   12c0a:	negs	r2, r2
   12c0c:	sbc.w	r3, r3, r3, lsl #1
   12c10:	ldr	r1, [sp, #4]
   12c12:	cmp	r1, #0
   12c14:	beq.n	12c9c <_strtoll_l.isra.0+0x1a0>
   12c16:	cmp.w	lr, #0
   12c1a:	bne.n	12c5c <_strtoll_l.isra.0+0x160>
   12c1c:	ldr	r5, [sp, #8]
   12c1e:	mov	r0, r2
   12c20:	mov	r1, r3
   12c22:	ldr	r3, [sp, #4]
   12c24:	str	r5, [r3, #0]
   12c26:	add	sp, #20
   12c28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c2c:	cmp	fp, ip
   12c2e:	bge.n	12ba0 <_strtoll_l.isra.0+0xa4>
   12c30:	mov	r2, r0
   12c32:	mov	r3, r1
   12c34:	mov.w	lr, #4294967295
   12c38:	b.n	12bba <_strtoll_l.isra.0+0xbe>
   12c3a:	movs	r3, #1
   12c3c:	adds	r5, r7, #2
   12c3e:	ldrb	r4, [r7, #1]
   12c40:	str	r3, [sp, #0]
   12c42:	b.n	12b40 <_strtoll_l.isra.0+0x44>
   12c44:	ldr	r3, [sp, #0]
   12c46:	cbnz	r3, 12c94 <_strtoll_l.isra.0+0x198>
   12c48:	mov.w	r0, #4294967295
   12c4c:	mvn.w	r1, #2147483648	; 0x80000000
   12c50:	ldr	r2, [sp, #12]
   12c52:	movs	r3, #34	; 0x22
   12c54:	str	r3, [r2, #0]
   12c56:	ldr	r3, [sp, #4]
   12c58:	cbnz	r3, 12c60 <_strtoll_l.isra.0+0x164>
   12c5a:	b.n	12c26 <_strtoll_l.isra.0+0x12a>
   12c5c:	mov	r0, r2
   12c5e:	mov	r1, r3
   12c60:	subs	r5, #1
   12c62:	b.n	12c22 <_strtoll_l.isra.0+0x126>
   12c64:	ldrb	r3, [r5, #0]
   12c66:	and.w	r3, r3, #223	; 0xdf
   12c6a:	cmp	r3, #88	; 0x58
   12c6c:	beq.n	12c86 <_strtoll_l.isra.0+0x18a>
   12c6e:	movs	r6, #8
   12c70:	movs	r7, #0
   12c72:	mov.w	sl, #8
   12c76:	b.n	12b6c <_strtoll_l.isra.0+0x70>
   12c78:	cmp	r4, #48	; 0x30
   12c7a:	bne.n	12ca2 <_strtoll_l.isra.0+0x1a6>
   12c7c:	ldrb	r3, [r5, #0]
   12c7e:	and.w	r3, r3, #223	; 0xdf
   12c82:	cmp	r3, #88	; 0x58
   12c84:	bne.n	12ca2 <_strtoll_l.isra.0+0x1a6>
   12c86:	ldrb	r4, [r5, #1]
   12c88:	movs	r6, #16
   12c8a:	movs	r7, #0
   12c8c:	adds	r5, #2
   12c8e:	mov.w	sl, #16
   12c92:	b.n	12b6c <_strtoll_l.isra.0+0x70>
   12c94:	movs	r0, #0
   12c96:	mov.w	r1, #2147483648	; 0x80000000
   12c9a:	b.n	12c50 <_strtoll_l.isra.0+0x154>
   12c9c:	mov	r0, r2
   12c9e:	mov	r1, r3
   12ca0:	b.n	12c26 <_strtoll_l.isra.0+0x12a>
   12ca2:	movs	r6, #16
   12ca4:	movs	r7, #0
   12ca6:	b.n	12b6c <_strtoll_l.isra.0+0x70>

00012ca8 <_strtoll_r>:
   12ca8:	push	{r4, r5, lr}
   12caa:	ldr	r4, [pc, #24]	; (12cc4 <_strtoll_r+0x1c>)
   12cac:	ldr	r5, [pc, #24]	; (12cc8 <_strtoll_r+0x20>)
   12cae:	ldr	r4, [r4, #0]
   12cb0:	ldr	r4, [r4, #52]	; 0x34
   12cb2:	sub	sp, #12
   12cb4:	cmp	r4, #0
   12cb6:	it	eq
   12cb8:	moveq	r4, r5
   12cba:	str	r4, [sp, #0]
   12cbc:	bl	12afc <_strtoll_l.isra.0>
   12cc0:	add	sp, #12
   12cc2:	pop	{r4, r5, pc}
   12cc4:	.word	0x20017e00
   12cc8:	.word	0x20017e04

00012ccc <_strtoul_l.isra.0>:
   12ccc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cd0:	ldr.w	r9, [sp, #40]	; 0x28
   12cd4:	mov	r6, r1
   12cd6:	mov	r7, r0
   12cd8:	mov	r5, r2
   12cda:	mov	r8, r3
   12cdc:	mov	fp, r1
   12cde:	b.n	12ce2 <_strtoul_l.isra.0+0x16>
   12ce0:	mov	fp, r4
   12ce2:	mov	r4, fp
   12ce4:	mov	r0, r9
   12ce6:	ldrb.w	sl, [r4], #1
   12cea:	bl	c004 <__locale_ctype_ptr_l>
   12cee:	add	r0, sl
   12cf0:	ldrb	r0, [r0, #1]
   12cf2:	and.w	r0, r0, #8
   12cf6:	and.w	ip, r0, #255	; 0xff
   12cfa:	cmp	r0, #0
   12cfc:	bne.n	12ce0 <_strtoul_l.isra.0+0x14>
   12cfe:	mov	r1, sl
   12d00:	cmp	r1, #45	; 0x2d
   12d02:	beq.n	12dc8 <_strtoul_l.isra.0+0xfc>
   12d04:	cmp	r1, #43	; 0x2b
   12d06:	itt	eq
   12d08:	ldrbeq.w	r1, [fp, #1]
   12d0c:	addeq.w	r4, fp, #2
   12d10:	cmp.w	r8, #0
   12d14:	beq.n	12d30 <_strtoul_l.isra.0+0x64>
   12d16:	cmp.w	r8, #16
   12d1a:	beq.n	12dd6 <_strtoul_l.isra.0+0x10a>
   12d1c:	mov.w	r3, #4294967295
   12d20:	udiv	r3, r3, r8
   12d24:	mul.w	sl, r8, r3
   12d28:	mvn.w	sl, sl
   12d2c:	mov	r9, r8
   12d2e:	b.n	12d40 <_strtoul_l.isra.0+0x74>
   12d30:	cmp	r1, #48	; 0x30
   12d32:	beq.n	12df8 <_strtoul_l.isra.0+0x12c>
   12d34:	mov.w	r8, #10
   12d38:	ldr	r3, [pc, #244]	; (12e30 <_strtoul_l.isra.0+0x164>)
   12d3a:	mov	r9, r8
   12d3c:	mov.w	sl, #5
   12d40:	mov.w	lr, #0
   12d44:	mov	r0, lr
   12d46:	b.n	12d56 <_strtoul_l.isra.0+0x8a>
   12d48:	beq.n	12daa <_strtoul_l.isra.0+0xde>
   12d4a:	mla	r0, r9, r0, r2
   12d4e:	mov.w	lr, #1
   12d52:	ldrb.w	r1, [r4], #1
   12d56:	sub.w	r2, r1, #48	; 0x30
   12d5a:	cmp	r2, #9
   12d5c:	bls.n	12d6a <_strtoul_l.isra.0+0x9e>
   12d5e:	sub.w	r2, r1, #65	; 0x41
   12d62:	cmp	r2, #25
   12d64:	bhi.n	12d7e <_strtoul_l.isra.0+0xb2>
   12d66:	sub.w	r2, r1, #55	; 0x37
   12d6a:	cmp	r8, r2
   12d6c:	ble.n	12d8e <_strtoul_l.isra.0+0xc2>
   12d6e:	cmp.w	lr, #4294967295
   12d72:	beq.n	12d52 <_strtoul_l.isra.0+0x86>
   12d74:	cmp	r0, r3
   12d76:	bls.n	12d48 <_strtoul_l.isra.0+0x7c>
   12d78:	mov.w	lr, #4294967295
   12d7c:	b.n	12d52 <_strtoul_l.isra.0+0x86>
   12d7e:	sub.w	r2, r1, #97	; 0x61
   12d82:	cmp	r2, #25
   12d84:	bhi.n	12d8e <_strtoul_l.isra.0+0xc2>
   12d86:	sub.w	r2, r1, #87	; 0x57
   12d8a:	cmp	r8, r2
   12d8c:	bgt.n	12d6e <_strtoul_l.isra.0+0xa2>
   12d8e:	cmp.w	lr, #4294967295
   12d92:	beq.n	12db8 <_strtoul_l.isra.0+0xec>
   12d94:	cmp.w	ip, #0
   12d98:	beq.n	12d9c <_strtoul_l.isra.0+0xd0>
   12d9a:	negs	r0, r0
   12d9c:	cbz	r5, 12db4 <_strtoul_l.isra.0+0xe8>
   12d9e:	cmp.w	lr, #0
   12da2:	bne.n	12dc0 <_strtoul_l.isra.0+0xf4>
   12da4:	str	r6, [r5, #0]
   12da6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12daa:	cmp	r2, sl
   12dac:	ble.n	12d4a <_strtoul_l.isra.0+0x7e>
   12dae:	mov.w	lr, #4294967295
   12db2:	b.n	12d52 <_strtoul_l.isra.0+0x86>
   12db4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12db8:	movs	r3, #34	; 0x22
   12dba:	str	r3, [r7, #0]
   12dbc:	mov	r0, lr
   12dbe:	cbz	r5, 12e12 <_strtoul_l.isra.0+0x146>
   12dc0:	subs	r6, r4, #1
   12dc2:	str	r6, [r5, #0]
   12dc4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dc8:	add.w	r4, fp, #2
   12dcc:	ldrb.w	r1, [fp, #1]
   12dd0:	mov.w	ip, #1
   12dd4:	b.n	12d10 <_strtoul_l.isra.0+0x44>
   12dd6:	cmp	r1, #48	; 0x30
   12dd8:	bne.n	12e16 <_strtoul_l.isra.0+0x14a>
   12dda:	ldrb	r3, [r4, #0]
   12ddc:	and.w	r3, r3, #223	; 0xdf
   12de0:	cmp	r3, #88	; 0x58
   12de2:	bne.n	12e22 <_strtoul_l.isra.0+0x156>
   12de4:	mov.w	r9, #16
   12de8:	ldrb	r1, [r4, #1]
   12dea:	mov	r8, r9
   12dec:	mov.w	sl, #15
   12df0:	adds	r4, #2
   12df2:	mvn.w	r3, #4026531840	; 0xf0000000
   12df6:	b.n	12d40 <_strtoul_l.isra.0+0x74>
   12df8:	ldrb	r3, [r4, #0]
   12dfa:	and.w	r3, r3, #223	; 0xdf
   12dfe:	cmp	r3, #88	; 0x58
   12e00:	beq.n	12de4 <_strtoul_l.isra.0+0x118>
   12e02:	mov.w	r8, #8
   12e06:	mov	r9, r8
   12e08:	mov.w	sl, #7
   12e0c:	mvn.w	r3, #3758096384	; 0xe0000000
   12e10:	b.n	12d40 <_strtoul_l.isra.0+0x74>
   12e12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e16:	mov.w	sl, #15
   12e1a:	mvn.w	r3, #4026531840	; 0xf0000000
   12e1e:	mov	r9, r8
   12e20:	b.n	12d40 <_strtoul_l.isra.0+0x74>
   12e22:	mov	r9, r8
   12e24:	mov.w	sl, #15
   12e28:	mvn.w	r3, #4026531840	; 0xf0000000
   12e2c:	b.n	12d40 <_strtoul_l.isra.0+0x74>
   12e2e:	nop
   12e30:	.word	0x19999999

00012e34 <_strtoul_r>:
   12e34:	push	{r4, r5, lr}
   12e36:	ldr	r4, [pc, #24]	; (12e50 <_strtoul_r+0x1c>)
   12e38:	ldr	r5, [pc, #24]	; (12e54 <_strtoul_r+0x20>)
   12e3a:	ldr	r4, [r4, #0]
   12e3c:	ldr	r4, [r4, #52]	; 0x34
   12e3e:	sub	sp, #12
   12e40:	cmp	r4, #0
   12e42:	it	eq
   12e44:	moveq	r4, r5
   12e46:	str	r4, [sp, #0]
   12e48:	bl	12ccc <_strtoul_l.isra.0>
   12e4c:	add	sp, #12
   12e4e:	pop	{r4, r5, pc}
   12e50:	.word	0x20017e00
   12e54:	.word	0x20017e04

00012e58 <_strtoull_l.isra.0>:
   12e58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e5c:	sub	sp, #20
   12e5e:	mov	fp, r1
   12e60:	str	r0, [sp, #8]
   12e62:	mov	r7, r2
   12e64:	mov	r6, r3
   12e66:	mov	r8, r1
   12e68:	ldr	r4, [sp, #56]	; 0x38
   12e6a:	b.n	12e6e <_strtoull_l.isra.0+0x16>
   12e6c:	mov	r8, r5
   12e6e:	mov	r5, r8
   12e70:	mov	r0, r4
   12e72:	ldrb.w	r9, [r5], #1
   12e76:	bl	c004 <__locale_ctype_ptr_l>
   12e7a:	add	r0, r9
   12e7c:	ldrb	r3, [r0, #1]
   12e7e:	and.w	r3, r3, #8
   12e82:	and.w	r2, r3, #255	; 0xff
   12e86:	cmp	r3, #0
   12e88:	bne.n	12e6c <_strtoull_l.isra.0+0x14>
   12e8a:	mov	r4, r9
   12e8c:	cmp	r4, #45	; 0x2d
   12e8e:	beq.w	12faa <_strtoull_l.isra.0+0x152>
   12e92:	cmp	r4, #43	; 0x2b
   12e94:	it	eq
   12e96:	ldrbeq.w	r4, [r8, #1]
   12e9a:	str	r2, [sp, #4]
   12e9c:	it	eq
   12e9e:	addeq.w	r5, r8, #2
   12ea2:	cbz	r6, 12edc <_strtoull_l.isra.0+0x84>
   12ea4:	cmp	r6, #16
   12ea6:	beq.w	12fb8 <_strtoull_l.isra.0+0x160>
   12eaa:	mov.w	r9, r6, asr #31
   12eae:	mov	r2, r6
   12eb0:	mov	r3, r9
   12eb2:	mov.w	r0, #4294967295
   12eb6:	mov.w	r1, #4294967295
   12eba:	bl	bbe0 <__aeabi_uldivmod>
   12ebe:	mov	r2, r6
   12ec0:	str	r0, [sp, #12]
   12ec2:	mov	sl, r1
   12ec4:	mov	r3, r9
   12ec6:	mov.w	r0, #4294967295
   12eca:	mov.w	r1, #4294967295
   12ece:	bl	bbe0 <__aeabi_uldivmod>
   12ed2:	mov	r8, r6
   12ed4:	mov	lr, r2
   12ed6:	ldr	r2, [sp, #12]
   12ed8:	mov	r3, sl
   12eda:	b.n	12ef6 <_strtoull_l.isra.0+0x9e>
   12edc:	cmp	r4, #48	; 0x30
   12ede:	beq.w	12fe4 <_strtoull_l.isra.0+0x18c>
   12ee2:	ldr	r3, [pc, #348]	; (13040 <_strtoull_l.isra.0+0x1e8>)
   12ee4:	mov.w	lr, #5
   12ee8:	mov.w	r2, #2576980377	; 0x99999999
   12eec:	mov.w	r8, #10
   12ef0:	mov.w	r9, #0
   12ef4:	movs	r6, #10
   12ef6:	mov.w	ip, #0
   12efa:	movs	r0, #0
   12efc:	movs	r1, #0
   12efe:	b.n	12f26 <_strtoull_l.isra.0+0xce>
   12f00:	cmp	r1, r3
   12f02:	it	eq
   12f04:	cmpeq	r0, r2
   12f06:	beq.n	12f8a <_strtoull_l.isra.0+0x132>
   12f08:	mul.w	r4, r0, r9
   12f0c:	mla	r4, r8, r1, r4
   12f10:	umull	r0, r1, r0, r8
   12f14:	add	r1, r4
   12f16:	adds.w	r0, r0, sl
   12f1a:	adc.w	r1, r1, sl, asr #31
   12f1e:	mov.w	ip, #1
   12f22:	ldrb.w	r4, [r5], #1
   12f26:	sub.w	sl, r4, #48	; 0x30
   12f2a:	cmp.w	sl, #9
   12f2e:	bls.n	12f3e <_strtoull_l.isra.0+0xe6>
   12f30:	sub.w	sl, r4, #65	; 0x41
   12f34:	cmp.w	sl, #25
   12f38:	bhi.n	12f56 <_strtoull_l.isra.0+0xfe>
   12f3a:	sub.w	sl, r4, #55	; 0x37
   12f3e:	cmp	r6, sl
   12f40:	ble.n	12f68 <_strtoull_l.isra.0+0x110>
   12f42:	cmp.w	ip, #4294967295
   12f46:	beq.n	12f22 <_strtoull_l.isra.0+0xca>
   12f48:	cmp	r3, r1
   12f4a:	it	eq
   12f4c:	cmpeq	r2, r0
   12f4e:	bcs.n	12f00 <_strtoull_l.isra.0+0xa8>
   12f50:	mov.w	ip, #4294967295
   12f54:	b.n	12f22 <_strtoull_l.isra.0+0xca>
   12f56:	sub.w	sl, r4, #97	; 0x61
   12f5a:	cmp.w	sl, #25
   12f5e:	bhi.n	12f68 <_strtoull_l.isra.0+0x110>
   12f60:	sub.w	sl, r4, #87	; 0x57
   12f64:	cmp	r6, sl
   12f66:	bgt.n	12f42 <_strtoull_l.isra.0+0xea>
   12f68:	cmp.w	ip, #4294967295
   12f6c:	beq.n	12f94 <_strtoull_l.isra.0+0x13c>
   12f6e:	ldr	r3, [sp, #4]
   12f70:	cbz	r3, 12f78 <_strtoull_l.isra.0+0x120>
   12f72:	negs	r0, r0
   12f74:	sbc.w	r1, r1, r1, lsl #1
   12f78:	cbz	r7, 12f84 <_strtoull_l.isra.0+0x12c>
   12f7a:	cmp.w	ip, #0
   12f7e:	bne.n	12fa6 <_strtoull_l.isra.0+0x14e>
   12f80:	mov	r5, fp
   12f82:	str	r5, [r7, #0]
   12f84:	add	sp, #20
   12f86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f8a:	cmp	sl, lr
   12f8c:	ble.n	12f08 <_strtoull_l.isra.0+0xb0>
   12f8e:	mov.w	ip, #4294967295
   12f92:	b.n	12f22 <_strtoull_l.isra.0+0xca>
   12f94:	ldr	r2, [sp, #8]
   12f96:	movs	r3, #34	; 0x22
   12f98:	str	r3, [r2, #0]
   12f9a:	mov.w	r0, #4294967295
   12f9e:	mov.w	r1, #4294967295
   12fa2:	cmp	r7, #0
   12fa4:	beq.n	12f84 <_strtoull_l.isra.0+0x12c>
   12fa6:	subs	r5, #1
   12fa8:	b.n	12f82 <_strtoull_l.isra.0+0x12a>
   12faa:	movs	r3, #1
   12fac:	add.w	r5, r8, #2
   12fb0:	ldrb.w	r4, [r8, #1]
   12fb4:	str	r3, [sp, #4]
   12fb6:	b.n	12ea2 <_strtoull_l.isra.0+0x4a>
   12fb8:	cmp	r4, #48	; 0x30
   12fba:	bne.n	13006 <_strtoull_l.isra.0+0x1ae>
   12fbc:	ldrb	r3, [r5, #0]
   12fbe:	and.w	r3, r3, #223	; 0xdf
   12fc2:	cmp	r3, #88	; 0x58
   12fc4:	bne.n	1301c <_strtoull_l.isra.0+0x1c4>
   12fc6:	mov.w	r3, #4294967295
   12fca:	ldrb	r4, [r5, #1]
   12fcc:	str	r3, [sp, #12]
   12fce:	mov.w	lr, #15
   12fd2:	adds	r5, #2
   12fd4:	mvn.w	sl, #4026531840	; 0xf0000000
   12fd8:	mov.w	r8, #16
   12fdc:	mov.w	r9, #0
   12fe0:	movs	r6, #16
   12fe2:	b.n	12ed6 <_strtoull_l.isra.0+0x7e>
   12fe4:	ldrb	r3, [r5, #0]
   12fe6:	and.w	r3, r3, #223	; 0xdf
   12fea:	cmp	r3, #88	; 0x58
   12fec:	beq.n	12fc6 <_strtoull_l.isra.0+0x16e>
   12fee:	mov.w	lr, #7
   12ff2:	mov.w	r2, #4294967295
   12ff6:	mvn.w	r3, #3758096384	; 0xe0000000
   12ffa:	mov.w	r8, #8
   12ffe:	mov.w	r9, #0
   13002:	movs	r6, #8
   13004:	b.n	12ef6 <_strtoull_l.isra.0+0x9e>
   13006:	mov.w	lr, #15
   1300a:	mov.w	r2, #4294967295
   1300e:	mvn.w	r3, #4026531840	; 0xf0000000
   13012:	mov.w	r8, #16
   13016:	mov.w	r9, #0
   1301a:	b.n	12ef6 <_strtoull_l.isra.0+0x9e>
   1301c:	mov.w	r8, #16
   13020:	mov.w	r9, #0
   13024:	mov	r2, r8
   13026:	mov	r3, r9
   13028:	mov.w	r0, #4294967295
   1302c:	mov.w	r1, #4294967295
   13030:	bl	bbe0 <__aeabi_uldivmod>
   13034:	mvn.w	r3, #4026531840	; 0xf0000000
   13038:	mov	lr, r2
   1303a:	mov.w	r2, #4294967295
   1303e:	b.n	12ef6 <_strtoull_l.isra.0+0x9e>
   13040:	.word	0x19999999

00013044 <_strtoull_r>:
   13044:	push	{r4, r5, lr}
   13046:	ldr	r4, [pc, #24]	; (13060 <_strtoull_r+0x1c>)
   13048:	ldr	r5, [pc, #24]	; (13064 <_strtoull_r+0x20>)
   1304a:	ldr	r4, [r4, #0]
   1304c:	ldr	r4, [r4, #52]	; 0x34
   1304e:	sub	sp, #12
   13050:	cmp	r4, #0
   13052:	it	eq
   13054:	moveq	r4, r5
   13056:	str	r4, [sp, #0]
   13058:	bl	12e58 <_strtoull_l.isra.0>
   1305c:	add	sp, #12
   1305e:	pop	{r4, r5, pc}
   13060:	.word	0x20017e00
   13064:	.word	0x20017e04

00013068 <__ssprint_r>:
   13068:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1306c:	ldr	r3, [r2, #8]
   1306e:	sub	sp, #12
   13070:	mov	r8, r2
   13072:	cmp	r3, #0
   13074:	beq.n	1315c <__ssprint_r+0xf4>
   13076:	mov	fp, r0
   13078:	mov.w	r9, #0
   1307c:	ldr	r6, [r2, #0]
   1307e:	ldr	r0, [r1, #0]
   13080:	ldr	r3, [r1, #8]
   13082:	mov	r5, r1
   13084:	mov	r4, r9
   13086:	cmp	r4, #0
   13088:	beq.n	13116 <__ssprint_r+0xae>
   1308a:	cmp	r4, r3
   1308c:	mov	r7, r3
   1308e:	mov	sl, r3
   13090:	bcc.n	13120 <__ssprint_r+0xb8>
   13092:	ldrh	r3, [r5, #12]
   13094:	tst.w	r3, #1152	; 0x480
   13098:	beq.n	130f6 <__ssprint_r+0x8e>
   1309a:	ldr	r7, [r5, #20]
   1309c:	ldr	r1, [r5, #16]
   1309e:	add.w	r7, r7, r7, lsl #1
   130a2:	rsb	sl, r1, r0
   130a6:	add.w	r7, r7, r7, lsr #31
   130aa:	adds	r0, r4, #1
   130ac:	asrs	r7, r7, #1
   130ae:	add	r0, sl
   130b0:	cmp	r0, r7
   130b2:	mov	r2, r7
   130b4:	itt	hi
   130b6:	movhi	r7, r0
   130b8:	movhi	r2, r7
   130ba:	lsls	r3, r3, #21
   130bc:	bpl.n	13126 <__ssprint_r+0xbe>
   130be:	mov	r1, r2
   130c0:	mov	r0, fp
   130c2:	bl	c040 <_malloc_r>
   130c6:	cmp	r0, #0
   130c8:	beq.n	1313a <__ssprint_r+0xd2>
   130ca:	mov	r2, sl
   130cc:	ldr	r1, [r5, #16]
   130ce:	str	r0, [sp, #4]
   130d0:	bl	87fc <memcpy>
   130d4:	ldrh	r2, [r5, #12]
   130d6:	ldr	r3, [sp, #4]
   130d8:	bic.w	r2, r2, #1152	; 0x480
   130dc:	orr.w	r2, r2, #128	; 0x80
   130e0:	strh	r2, [r5, #12]
   130e2:	rsb	r2, sl, r7
   130e6:	add.w	r0, r3, sl
   130ea:	str	r7, [r5, #20]
   130ec:	str	r3, [r5, #16]
   130ee:	str	r0, [r5, #0]
   130f0:	str	r2, [r5, #8]
   130f2:	mov	r7, r4
   130f4:	mov	sl, r4
   130f6:	mov	r2, sl
   130f8:	mov	r1, r9
   130fa:	bl	c6e4 <memmove>
   130fe:	ldr.w	r2, [r8, #8]
   13102:	ldr	r3, [r5, #8]
   13104:	ldr	r0, [r5, #0]
   13106:	subs	r3, r3, r7
   13108:	add	r0, sl
   1310a:	subs	r4, r2, r4
   1310c:	str	r3, [r5, #8]
   1310e:	str	r0, [r5, #0]
   13110:	str.w	r4, [r8, #8]
   13114:	cbz	r4, 1315c <__ssprint_r+0xf4>
   13116:	ldr.w	r9, [r6]
   1311a:	ldr	r4, [r6, #4]
   1311c:	adds	r6, #8
   1311e:	b.n	13086 <__ssprint_r+0x1e>
   13120:	mov	r7, r4
   13122:	mov	sl, r4
   13124:	b.n	130f6 <__ssprint_r+0x8e>
   13126:	mov	r0, fp
   13128:	bl	c850 <_realloc_r>
   1312c:	mov	r3, r0
   1312e:	cmp	r0, #0
   13130:	bne.n	130e2 <__ssprint_r+0x7a>
   13132:	ldr	r1, [r5, #16]
   13134:	mov	r0, fp
   13136:	bl	117d0 <_free_r>
   1313a:	movs	r3, #12
   1313c:	str.w	r3, [fp]
   13140:	ldrh	r3, [r5, #12]
   13142:	movs	r2, #0
   13144:	orr.w	r3, r3, #64	; 0x40
   13148:	mov.w	r0, #4294967295
   1314c:	strh	r3, [r5, #12]
   1314e:	str.w	r2, [r8, #8]
   13152:	str.w	r2, [r8, #4]
   13156:	add	sp, #12
   13158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1315c:	movs	r0, #0
   1315e:	str.w	r0, [r8, #4]
   13162:	add	sp, #12
   13164:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013168 <_sungetc_r>:
   13168:	adds	r3, r1, #1
   1316a:	push	{r4, r5, r6, lr}
   1316c:	beq.n	131a6 <_sungetc_r+0x3e>
   1316e:	ldrh	r3, [r2, #12]
   13170:	ldr	r4, [r2, #48]	; 0x30
   13172:	bic.w	r3, r3, #32
   13176:	strh	r3, [r2, #12]
   13178:	uxtb	r5, r1
   1317a:	cbz	r4, 131ac <_sungetc_r+0x44>
   1317c:	mov	r4, r2
   1317e:	ldr	r2, [r2, #4]
   13180:	ldr	r3, [r4, #52]	; 0x34
   13182:	cmp	r2, r3
   13184:	mov	r6, r1
   13186:	bge.n	1319c <_sungetc_r+0x34>
   13188:	ldr	r3, [r4, #0]
   1318a:	subs	r2, r3, #1
   1318c:	str	r2, [r4, #0]
   1318e:	strb.w	r6, [r3, #-1]
   13192:	ldr	r3, [r4, #4]
   13194:	adds	r3, #1
   13196:	str	r3, [r4, #4]
   13198:	mov	r0, r5
   1319a:	pop	{r4, r5, r6, pc}
   1319c:	mov	r1, r4
   1319e:	bl	132ac <__submore>
   131a2:	cmp	r0, #0
   131a4:	beq.n	13188 <_sungetc_r+0x20>
   131a6:	mov.w	r5, #4294967295
   131aa:	b.n	13198 <_sungetc_r+0x30>
   131ac:	ldr	r0, [r2, #16]
   131ae:	ldr	r3, [r2, #0]
   131b0:	cbz	r0, 131be <_sungetc_r+0x56>
   131b2:	cmp	r0, r3
   131b4:	bcs.n	131be <_sungetc_r+0x56>
   131b6:	ldrb.w	r0, [r3, #-1]
   131ba:	cmp	r5, r0
   131bc:	beq.n	131de <_sungetc_r+0x76>
   131be:	str	r3, [r2, #56]	; 0x38
   131c0:	mov	r3, r2
   131c2:	ldr	r6, [r2, #4]
   131c4:	str	r6, [r2, #60]	; 0x3c
   131c6:	add.w	r4, r2, #64	; 0x40
   131ca:	movs	r0, #3
   131cc:	str	r0, [r2, #52]	; 0x34
   131ce:	str	r4, [r2, #48]	; 0x30
   131d0:	strb.w	r1, [r3, #66]!
   131d4:	movs	r1, #1
   131d6:	str	r3, [r2, #0]
   131d8:	str	r1, [r2, #4]
   131da:	mov	r0, r5
   131dc:	pop	{r4, r5, r6, pc}
   131de:	ldr	r1, [r2, #4]
   131e0:	subs	r3, #1
   131e2:	adds	r1, #1
   131e4:	str	r3, [r2, #0]
   131e6:	str	r1, [r2, #4]
   131e8:	b.n	13198 <_sungetc_r+0x30>
   131ea:	nop

000131ec <__ssrefill_r>:
   131ec:	push	{r4, lr}
   131ee:	mov	r4, r1
   131f0:	ldr	r1, [r1, #48]	; 0x30
   131f2:	cbz	r1, 13210 <__ssrefill_r+0x24>
   131f4:	add.w	r3, r4, #64	; 0x40
   131f8:	cmp	r1, r3
   131fa:	beq.n	13200 <__ssrefill_r+0x14>
   131fc:	bl	117d0 <_free_r>
   13200:	ldr	r3, [r4, #60]	; 0x3c
   13202:	str	r3, [r4, #4]
   13204:	movs	r0, #0
   13206:	str	r0, [r4, #48]	; 0x30
   13208:	cbz	r3, 13210 <__ssrefill_r+0x24>
   1320a:	ldr	r3, [r4, #56]	; 0x38
   1320c:	str	r3, [r4, #0]
   1320e:	pop	{r4, pc}
   13210:	ldrh	r3, [r4, #12]
   13212:	ldr	r2, [r4, #16]
   13214:	str	r2, [r4, #0]
   13216:	orr.w	r3, r3, #32
   1321a:	movs	r2, #0
   1321c:	strh	r3, [r4, #12]
   1321e:	str	r2, [r4, #4]
   13220:	mov.w	r0, #4294967295
   13224:	pop	{r4, pc}
   13226:	nop

00013228 <_sfread_r>:
   13228:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1322c:	sub	sp, #12
   1322e:	mul.w	r9, r2, r3
   13232:	str	r2, [sp, #4]
   13234:	mov	sl, r3
   13236:	ldr	r4, [sp, #48]	; 0x30
   13238:	cmp.w	r9, #0
   1323c:	beq.n	13292 <_sfread_r+0x6a>
   1323e:	mov	r7, r0
   13240:	mov	r6, r1
   13242:	mov	r5, r9
   13244:	mov.w	r8, #0
   13248:	b.n	1326a <_sfread_r+0x42>
   1324a:	ldr	r1, [r4, #0]
   1324c:	bl	87fc <memcpy>
   13250:	ldr	r2, [r4, #0]
   13252:	str.w	r8, [r4, #4]
   13256:	add	r2, fp
   13258:	str	r2, [r4, #0]
   1325a:	mov	r1, r4
   1325c:	mov	r0, r7
   1325e:	add	r6, fp
   13260:	rsb	r5, fp, r5
   13264:	bl	131ec <__ssrefill_r>
   13268:	cbnz	r0, 1329a <_sfread_r+0x72>
   1326a:	ldr.w	fp, [r4, #4]
   1326e:	cmp	r5, fp
   13270:	mov	r0, r6
   13272:	mov	r2, fp
   13274:	bhi.n	1324a <_sfread_r+0x22>
   13276:	mov	r2, r5
   13278:	ldr	r1, [r4, #0]
   1327a:	bl	87fc <memcpy>
   1327e:	ldr	r2, [r4, #4]
   13280:	ldr	r3, [r4, #0]
   13282:	subs	r2, r2, r5
   13284:	add	r3, r5
   13286:	mov	r0, sl
   13288:	str	r2, [r4, #4]
   1328a:	str	r3, [r4, #0]
   1328c:	add	sp, #12
   1328e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13292:	mov	r0, r9
   13294:	add	sp, #12
   13296:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1329a:	ldr	r3, [sp, #4]
   1329c:	rsb	r9, r5, r9
   132a0:	udiv	r0, r9, r3
   132a4:	add	sp, #12
   132a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132aa:	nop

000132ac <__submore>:
   132ac:	add.w	r3, r1, #64	; 0x40
   132b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132b4:	mov	r4, r1
   132b6:	ldr	r1, [r1, #48]	; 0x30
   132b8:	cmp	r1, r3
   132ba:	beq.n	132e6 <__submore+0x3a>
   132bc:	ldr	r6, [r4, #52]	; 0x34
   132be:	lsls	r7, r6, #1
   132c0:	mov	r2, r7
   132c2:	bl	c850 <_realloc_r>
   132c6:	mov	r5, r0
   132c8:	cbz	r0, 1331c <__submore+0x70>
   132ca:	add.w	r8, r0, r6
   132ce:	mov	r2, r6
   132d0:	mov	r0, r8
   132d2:	mov	r1, r5
   132d4:	bl	87fc <memcpy>
   132d8:	str.w	r8, [r4]
   132dc:	str	r5, [r4, #48]	; 0x30
   132de:	str	r7, [r4, #52]	; 0x34
   132e0:	movs	r0, #0
   132e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132e6:	mov.w	r1, #1024	; 0x400
   132ea:	bl	c040 <_malloc_r>
   132ee:	cbz	r0, 1331c <__submore+0x70>
   132f0:	ldrb.w	r3, [r4, #66]	; 0x42
   132f4:	str	r0, [r4, #48]	; 0x30
   132f6:	mov.w	r2, #1024	; 0x400
   132fa:	str	r2, [r4, #52]	; 0x34
   132fc:	strb.w	r3, [r0, #1023]	; 0x3ff
   13300:	ldrb.w	r3, [r4, #65]	; 0x41
   13304:	strb.w	r3, [r0, #1022]	; 0x3fe
   13308:	ldrb.w	r3, [r4, #64]	; 0x40
   1330c:	strb.w	r3, [r0, #1021]	; 0x3fd
   13310:	addw	r0, r0, #1021	; 0x3fd
   13314:	str	r0, [r4, #0]
   13316:	movs	r0, #0
   13318:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1331c:	mov.w	r0, #4294967295
   13320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013324 <_vasnprintf_r>:
   13324:	push	{r4, r5, r6, lr}
   13326:	mov	r5, r2
   13328:	sub	sp, #104	; 0x68
   1332a:	ldr	r4, [r2, #0]
   1332c:	cbz	r1, 13332 <_vasnprintf_r+0xe>
   1332e:	cmp	r4, #0
   13330:	bne.n	13368 <_vasnprintf_r+0x44>
   13332:	movs	r4, #0
   13334:	mov.w	r2, #648	; 0x288
   13338:	strh.w	r2, [sp, #12]
   1333c:	str	r4, [sp, #0]
   1333e:	str	r4, [sp, #16]
   13340:	mov	r2, r3
   13342:	movw	r6, #65535	; 0xffff
   13346:	ldr	r3, [sp, #120]	; 0x78
   13348:	str	r4, [sp, #8]
   1334a:	mov	r1, sp
   1334c:	str	r4, [sp, #20]
   1334e:	strh.w	r6, [sp, #14]
   13352:	bl	e0d0 <_svfprintf_r>
   13356:	cmp	r0, #0
   13358:	blt.n	1337e <_vasnprintf_r+0x5a>
   1335a:	ldr	r3, [sp, #0]
   1335c:	str	r0, [r5, #0]
   1335e:	movs	r2, #0
   13360:	strb	r2, [r3, #0]
   13362:	ldr	r0, [sp, #16]
   13364:	add	sp, #104	; 0x68
   13366:	pop	{r4, r5, r6, pc}
   13368:	mov.w	r2, #1544	; 0x608
   1336c:	str	r1, [sp, #0]
   1336e:	str	r1, [sp, #16]
   13370:	strh.w	r2, [sp, #12]
   13374:	bge.n	13340 <_vasnprintf_r+0x1c>
   13376:	movs	r3, #139	; 0x8b
   13378:	str	r3, [r0, #0]
   1337a:	movs	r0, #0
   1337c:	b.n	13364 <_vasnprintf_r+0x40>
   1337e:	movs	r0, #0
   13380:	b.n	13364 <_vasnprintf_r+0x40>
   13382:	nop

00013384 <_calloc_r>:
   13384:	push	{r4, lr}
   13386:	mul.w	r1, r2, r1
   1338a:	bl	c040 <_malloc_r>
   1338e:	mov	r4, r0
   13390:	cbz	r0, 133ca <_calloc_r+0x46>
   13392:	ldr.w	r2, [r0, #-4]
   13396:	bic.w	r2, r2, #3
   1339a:	subs	r2, #4
   1339c:	cmp	r2, #36	; 0x24
   1339e:	bhi.n	133d2 <_calloc_r+0x4e>
   133a0:	cmp	r2, #19
   133a2:	bls.n	133ce <_calloc_r+0x4a>
   133a4:	movs	r3, #0
   133a6:	cmp	r2, #27
   133a8:	str	r3, [r0, #0]
   133aa:	str	r3, [r0, #4]
   133ac:	bls.n	133dc <_calloc_r+0x58>
   133ae:	cmp	r2, #36	; 0x24
   133b0:	str	r3, [r0, #8]
   133b2:	str	r3, [r0, #12]
   133b4:	iteee	ne
   133b6:	addne.w	r2, r0, #16
   133ba:	streq	r3, [r0, #16]
   133bc:	streq	r3, [r0, #20]
   133be:	addeq.w	r2, r0, #24
   133c2:	movs	r3, #0
   133c4:	str	r3, [r2, #0]
   133c6:	str	r3, [r2, #4]
   133c8:	str	r3, [r2, #8]
   133ca:	mov	r0, r4
   133cc:	pop	{r4, pc}
   133ce:	mov	r2, r0
   133d0:	b.n	133c2 <_calloc_r+0x3e>
   133d2:	movs	r1, #0
   133d4:	bl	c7ac <memset>
   133d8:	mov	r0, r4
   133da:	pop	{r4, pc}
   133dc:	add.w	r2, r0, #8
   133e0:	b.n	133c2 <_calloc_r+0x3e>
   133e2:	nop

000133e4 <vtable for AudioStream>:
	...
   133ec:	q...

000133f0 <vtable for mRecordQueue<275>>:
	...
   133f8:	....

000133fc <vtable for mDelay<2, 12>>:
	...
   13404:	1...

00013408 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   13410:	!.......m.......
   13420:	Q...........

0001342c <vtable for FsFile>:
	...
   13434:	!.......m.......
   13444:	Q...........

00013450 <vtable for mProcess>:
	...
   13458:	U...

0001345c <vtable for I2S_32>:
	...
   13464:	=...%02d:%02d:%0
   13474:	2d..%04d/%02d/%0
   13484:	2d..mustClose...
   13494:	%d %d %d %d %d %
   134a4:	d %d....%s_%04d_
   134b4:	%02d_%02d_%02d_%
   134c4:	02d_%02d%s..%04d
   134d4:	_%02d_%02d_%02d_
   134e4:	%02d_%02d...RIFF
   134f4:	....WAVE....fmt 
   13504:	....data....file
   13514:	 Closed.Config.t
   13524:	xt..%s......%10d
   13534:	....%d..Envi_%s.
   13544:	txt.%04d_%02d_%0
   13554:	2d,.%02d_%02d_%0
   13564:	2d,.%10.1f,.clos
   13574:	e acquisition...
   13584:	Hibernate now 1.
   13594:	Hibernate now 3.
   135a4:	?!xa....oar1234n
   135b4:	dtchwseikp..%02d
   135c4:	....%04d....%c %
   135d4:	5d on_time......
   135e4:	%c %5d acq_time.
   135f4:	....%c %5d rep_r
   13604:	ate.....%c %5d f
   13614:	irst_hour...%c %
   13624:	5d second_hour..
   13634:	....%c %5d third
   13644:	_hour...%c %5d l
   13654:	ast_hour....%c %
   13664:	s name......%c %
   13674:	s date......%c %
   13684:	s time......%c %
   13694:	5d processing ty
   136a4:	pe......%c %5d t
   136b4:	hreshold....%c %
   136c4:	5d noise window.
   136d4:	....%c %5d slow 
   136e4:	window......%c %
   136f4:	5d extraction wi
   13704:	ndow....%c %5d i
   13714:	nhibit window...
   13724:	%c %5d noise rep
   13734:	etition rate....
   13744:	%c %5d pre trigg
   13754:	er delay....exte
   13764:	r 'a' to print t
   13774:	his.exter '?c' t
   13784:	o read value c=(
   13794:	o,a,r,1,2,3,4,n,
   137a4:	d,t,c,h,w,s,m,i,
   137b4:	k,p)....  e.g.: 
   137c4:	?1 will print fi
   137d4:	rst hour....exte
   137e4:	r '!cval' to rea
   137f4:	d value c=(0,a,r
   13804:	,1,2,3,4,n,d,t,c
   13814:	,h,w,s,m,i,k,p) 
   13824:	and val is new v
   13834:	alue....  e.g.: 
   13844:	!110 will set fi
   13854:	rst hour to 10..
   13864:	exter 'xval' to 
   13874:	exit menu (x is 
   13884:	delay in minutes
   13894:	, -1 means immed
   138a4:	iate)...  e.g.: 
   138b4:	x10 will exit an
   138c4:	d hibernate for 
   138d4:	10 minutes..    
   138e4:	    x-1 with exi
   138f4:	t and start imme
   13904:	diately.microSou
   13914:	ndRecorder..End 
   13924:	of Setup....SdEr
   13934:	ror: 0X.,0X.Chec
   13944:	k SD format.....
   13954:	error: .file.wri
   13964:	te data failed..
   13974:	file.open failed
   13984:	....file.preAllo
   13994:	cate failed.clos
   139a4:	ed..file closed.
   139b4:	.loop: %5d %4d; 
   139c4:	%5d %5d; %5d; ..
   139d4:	%4d; %10d %10d %
   139e4:	4d; %4d %4d %4d;
   139f4:	 ...QUEUE Empty.

00013a04 <SPIClass::spi0_hardware>:
   13a04:	<..@............
   13a14:	...../....'.....
   13a24:	................
   13a34:	................
   13a44:	................
   13a54:	..........-.....
   13a64:	................
   13a74:	................
   13a84:	................
   13a94:	.. .

00013a98 <monthDays>:
   13a98:	............

00013aa4 <TwoWire::i2c0_hardware>:
   13aa4:	4..@@.....".0...
   13ab4:	....!./.........

00013ac4 <TwoWire::i2c1_hardware>:
   13ac4:	4..@....&:......
   13ad4:	..%;............

00013ae4 <TwoWire::i2c2_hardware>:
   13ae4:	(..@@...........
   13af4:	............J...

00013b04 <vtable for TwoWire>:
	...
   13b0c:	.6...6..m....6..
   13b1c:	u6...6...6..

00013b28 <vtable for SdFile>:
	...
   13b30:	.@......m...q...
   13b40:	EXFAT...

00013b48 <vtable for SdSpiCard>:
	...
   13b50:	=p..Ap...p...t..
   13b60:	-s...v..-p..Qp..
   13b70:	.u...p...p...q..
   13b80:	%s...s..}r......
   13b90:	)p...v...t...u..

00013ba0 <vtable for SdioCard>:
	...
   13ba8:	.x...y......5~..
   13bb8:	9{......E....~..
   13bc8:	.{..5x..Ax..Iz..
   13bd8:	Mx..ix...x...y..
   13be8:	.y...|...}...|..

00013bf8 <digital_pin_to_info_PGM>:
   13bf8:	@..C@..@D..CD..@
   13c08:	...C...@0..C0..@
   13c18:	4..C4..@...C...@
   13c28:	...C...@...C...@
   13c38:	...C...@...C...@
   13c48:	...C...@...C...@
   13c58:	...C...@...C...@
   13c68:	...C...@...C...@
   13c78:	...C...@...C...@
   13c88:	...C...@...C...@
   13c98:	...C...@...C...@
   13ca8:	...C...@...C...@
   13cb8:	h .Ch..@...C...@
   13cc8:	8..C8..@<..C<..@
   13cd8:	@..C@..@H..CH..@
   13ce8:	L..CL..@(..C(..@
   13cf8:	,..C,..@` .C`..@
   13d08:	d .Cd..@ ..C ..@
   13d18:	$..C$..@(..C(..@
   13d28:	,..C,..@D..CD..@
   13d38:	p..Cp..@t..Ct..@
   13d48:	h..Ch..@P..CP..@
   13d58:	X..CX..@\..C\..@
   13d68:	T..CT..@ ..C ..@
   13d78:	$..C$..@...C...@
   13d88:	...C...@8..C8..@
   13d98:	4..C4..@0..C0..@
   13da8:	<..C<..@,..C,..@
   13db8:	( .C(..@, .C,..@
   13dc8:	. .C...@. .C...@
   13dd8:	. .C...@. .C...@
   13de8:	. .C...@. .C...@

00013df8 <vtable for usb_serial_class>:
	...
   13e00:	................
   13e10:	................
   13e20:	....

00013e24 <usb_endpoint_config_table>:
   13e24:	....

00013e28 <usb_descriptor_list>:
   13e28:	....4y. ........
   13e38:	`y. C........y. 
   13e48:	........Hy. ....
   13e58:	.....y. ........
   13e68:	.y. ............
   13e78:	....

00013e7c <_global_impure_ptr>:
   13e7c:	.y. C...POSIX...
   13e8c:	....

00013e90 <fpi.6173>:
   13e90:	5...............
   13ea0:	....nf..inity...
   13eb0:	an..

00013eb4 <fpinan.6209>:
   13eb4:	4...............
   13ec4:	....

00013ec8 <tinytens>:
   13ec8:	.......<3...#.I9
   13ed8:	=..D...2......[%
   13ee8:	Co.d(.h.

00013ef0 <zeroes.7258>:
   13ef0:	0000000000000000
   13f00:	INF.inf.NAN.nan.
   13f10:	0123456789ABCDEF
   13f20:	....0123456789ab
   13f30:	cdef....(null)..
   13f40:	0...

00013f44 <blanks.7257>:
   13f44:	                

00013f54 <basefix.7328>:
   13f54:	................
   13f64:	................
   13f74:	....e%ld....

00013f80 <_ctype_>:
   13f80:	.         ((((( 
   13f90:	                
   13fa0:	 ...............
   13fb0:	................
   13fc0:	..AAAAAA........
   13fd0:	................
   13fe0:	..BBBBBB........
   13ff0:	................
   14000:	 ...............
	...
   14080:	....Infinity....
   14090:	NaN.

00014094 <__hexdig>:
	...
   140c4:	................
   140d4:	................
	...
   140f4:	................
	...
   14194:	....

00014198 <__mprec_tens>:
   14198:	.......?......$@
   141a8:	......Y@.....@.@
   141b8:	.......@.....j.@
   141c8:	.......A......cA
   141d8:	.......A....e..A
   141e8:	... _..B....vH7B
   141f8:	......mB..@..0.B
   14208:	.......B..4&.k.C
   14218:	...7y.AC....W4vC
   14228:	..Ngm..C.=.`.X.C
   14238:	@..x...DP.....KD
   14248:	..M....D.J...-.D
   14258:	...yCx.D

00014260 <__mprec_bigtens>:
   14260:	...7y.AC.n.....F
   14270:	..?..O8M2.0.Hw.Z
   14280:	<.s..O.u

00014288 <p05.6087>:
   14288:	........}...

00014294 <_init>:
   14294:	push	{r3, r4, r5, r6, r7, lr}
   14296:	nop
   14298:	pop	{r3, r4, r5, r6, r7}
   1429a:	pop	{r3}
   1429c:	mov	lr, r3
   1429e:	bx	lr

000142a0 <__init_array_start>:
   142a0:	.word	0x0001078d

000142a4 <__frame_dummy_init_array_entry>:
   142a4:	5....)...4...4..
   142b4:	.4...5..%5..=5..
   142c4:	U5..m5...5...5..
   142d4:	.5...5...5...6..
   142e4:	-6..E6..]6..u8..
   142f4:	.E..

Disassembly of section .fini:

000142f8 <_fini>:
   142f8:	push	{r3, r4, r5, r6, r7, lr}
   142fa:	nop
