
.vsteensy/build/microSoundRecorder.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00013cdc l    d  .fini	00000000 .fini
00013ce0 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
200133d0 l    d  .usbbuffers	00000000 .usbbuffers
20013730 l    d  .data	00000000 .data
20014348 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00009250 l     F .text	0000000c startup_default_early_hook
0000925c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
20014348 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
2001434c l       .bss	00000000 object.8610
00013c8c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 myAPP.cpp
0000047c l     F .text	0000001c llwuISR()
000005c4 l     F .text	00000034 getTime(char*) [clone .constprop.33]
000005f8 l     F .text	00000034 getDate(char*) [clone .constprop.34]
000020ac l     F .text	0000012c _GLOBAL__sub_I_acqParameters
20014878 l     O .bss	00000004 loop::t3
2001487c l     O .bss	00000004 loop::t4
2001927c l     O .bss	00000028 makeFilename(char*)::filename
200192a4 l     O .bss	00000004 checkDutyCycle(ACQ_Parameters_s*, short)::t_start
200192cc l     O .bss	00000030 wavHeader(unsigned long)::wheader
20019464 l     O .bss	00000002 checkDutyCycle(ACQ_Parameters_s*, short)::recording
1fff0200 l     O .dmabuffers	00022d94 setup::data
20019480 l     O .bss	00000004 loop::loopCount
20019484 l     O .bss	00000002 loop::state
20019488 l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
000021d8 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00002588 l     F .text	00000018 refreshCache(long) [clone .part.0]
2001948c l     O .bss	00000004 cacheTime
20019490 l     O .bss	00000007 tm
20019498 l     O .bss	00000004 sysTime
2001949c l     O .bss	00000001 Status
200194a4 l     O .bss	00000004 prevMillis
2001378c l     O .data	00000004 syncInterval
000132f8 l     O .text	0000000c monthDays
200194a8 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
0000286c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00002884 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
0000289c l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
000028b4 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_adc.cpp
00002b54 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
20012fa0 l     O .dmabuffers	00000100 analog_rx_buffer
00000000 l    df *ABS*	00000000 output_dac.cpp
00002b6c l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00002b84 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00002bb4 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_dacs.cpp
00002bcc l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 play_sd_wav.cpp
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000031d4 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
000031ec l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00003204 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
0000321c l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00003234 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
0000324c l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00003264 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
0000327c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
20019554 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SD.cpp
000037c8 l     F .text	00000064 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 FsCache.cpp
0000382c l     F .text	00000046 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00004298 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000042cc l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000051d4 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.38]
000052f4 l     F .text	00000094 FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000063d4 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00007014 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]
0000702c l     F .text	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00007708 l     F .text	00000030 sdIrs()
00007738 l     F .text	00000018 isBusyCommandComplete()
00007750 l     F .text	00000010 isBusyCommandInhibit()
00007760 l     F .text	00000014 isBusyDat()
00007774 l     F .text	0000000c isBusyDMA()
00007780 l     F .text	00000014 isBusyFifoRead()
00007794 l     F .text	00000014 isBusyFifoWrite()
000077a8 l     F .text	00000018 isBusyTransferComplete()
000077c0 l     F .text	000000cc setSdclk(unsigned long)
000078f0 l     F .text	00000028 waitTimeout(bool (*)())
00007918 l     F .text	0000004c yieldTimeout(bool (*)())
00007994 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
000079f0 l     F .text	0000002c isBusyCMD13()
00007a3c l     F .text	00000064 readReg16(unsigned long, void*)
00007aa0 l     F .text	00000020 waitDmaStatus() [clone .part.4]
00007ac0 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007ccc l     F .text	00000058 waitTransferComplete() [clone .part.8]
000080a0 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
20019a20 l     O .bss	00000001 m_version2
20019a24 l     O .bss	00000010 m_cid
20019a34 l     O .bss	00000004 m_busyFcn
20019a38 l     O .bss	00000001 m_highCapacity
20019a3c l     O .bss	00000004 m_ocr
20019a40 l     O .bss	00000004 m_rca
20019a44 l     O .bss	00000001 m_transferActive
20019a48 l     O .bss	00000004 m_irqstat
200138d4 l     O .data	00000001 m_errorCode
20019a4c l     O .bss	00000001 m_initDone
20019a50 l     O .bss	00000010 m_csd
20019a60 l     O .bss	00000001 m_dmaBusy
20019a64 l     O .bss	00000004 m_sdClkKhz
20019a68 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
20019a6d l     O .bss	00000001 tx_noautoflush
20019a70 l     O .bss	00000004 tx_packet
20019a74 l     O .bss	00000001 transmit_previous_timeout
20019a78 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00008db0 l     F .text	00000144 wait_for_cal
20019a7d l     O .bss	00000001 analog_right_shift
20019a7e l     O .bss	00000001 calibrating
00013594 l     O .text	00000048 pin2sc1a
200138d5 l     O .data	00000001 analog_config_bits
20019a7f l     O .bss	00000001 analogReadBusyADC1
20019a80 l     O .bss	00000001 analogReadBusyADC0
20019a81 l     O .bss	00000001 analog_reference_internal
200138d6 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00009290 l     F .text	0000004c digitalWrite.part.1
000092dc l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
200138dc l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
20019a88 l     O .bss	00000004 ep0_tx_ptr
20019a8c l     O .bss	00000010 rx_last
20019a9c l     O .bss	00000002 ep0_tx_len
20019aa0 l     O .bss	00000040 ep0_rx0_buf
20019ae0 l     O .bss	00000010 rx_first
20019af0 l     O .bss	00000001 ep0_tx_data_toggle
20019af4 l     O .bss	00000040 ep0_rx1_buf
20019b34 l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
20019b44 l     O .bss	00000010 tx_last
20019b54 l     O .bss	00000008 setup
20019b5c l     O .bss	00000001 ep0_tx_bdt_bank
20019b60 l     O .bss	00000008 reply_buffer
20019b6c l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
20019b70 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 usb_desc.c
200138f8 l     O .data	00000012 device_descriptor
20013924 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000b9e4 l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000ca3c l     F .text	00000038 sulp
00013874 l     O .text	00000014 fpi.6173
00013898 l     O .text	00000014 fpinan.6209
000138b0 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000d970 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
000138d8 l     O .text	00000010 zeroes.7258
0001392c l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
0001393c l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001018c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000101ac l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
000113a0 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
00013c70 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoll.c
000124fc l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
000126cc l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00012858 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
200139a0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
20014348 l       .bss	00000000 __bss_start__
20019c78 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00009248  w    F .text	00000006 adc0_isr
0000b508 g     F .text	0000002c .hidden __aeabi_dcmpun
00008b54 g     F .text	0000001c usb_serial_available
00012428 g     F .text	0000005e __any_on
0000b4cc g     F .text	00000012 .hidden __aeabi_dcmple
0000c7dc g     F .text	000000ba strcpy
0000b408 g     F .text	0000007a .hidden __cmpdf2
20019b90 g     O .bss	00000004 AudioStream::memory_pool
00008018 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000a3e8  w    F .text	000000ec yield
00005db0 g     F .text	00000218 FatFile::write(void const*, unsigned int)
0000b408 g     F .text	0000007a .hidden __eqdf2
00007000  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00003d6c g     F .text	000003dc ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
2001390c g     O .data	00000018 usb_string_manufacturer_name_default
00005d38 g     F .text	00000076 FatFile::truncate()
20013868 g     O .data	0000006c Wire1
0000af78 g     F .text	0000005a .hidden __floatdidf
00009200  w    F .text	00000048 hard_fault_isr
00009248  w    F .text	00000006 dma_ch6_isr
20019b94 g     O .bss	00000001 AudioStream::update_scheduled
20019a10 g     O .bss	00000004 FsDateTime::callback
00009088 g     F .text	0000007c analogReadAveraging
20013764 g     O .data	00000028 acqParameters
0000a684 g     F .text	00000020 Print::println()
00003340 g     F .text	00000130 TwoWire::isr()
20019c0c g     O .bss	00000002 AudioStream::memory_used
00009248  w    F .text	00000006 uart0_lon_isr
00003c6c g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00009708 g     F .text	000000c8 usb_rx_memory
00006fe4  w    F .text	00000004 SdSpiCard::errorCode() const
00002c18  w    F .text	0000000c File::flush()
00009248  w    F .text	00000006 dma_ch8_isr
0000132c g     F .text	000006c4 doMenu()
0000c25c g     F .text	00000002 __malloc_unlock
00002d94  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
20019a1c g     O .bss	00000004 FsVolume::m_cwv
000055bc g     F .text	000000be FatFile::open(FatFile*, char const*, int)
00008ef4 g     F .text	000000e0 analog_init
000097d0 g     F .text	00000084 usb_tx
0000d950 g     F .text	00000020 _strtod_r
00009248  w    F .text	00000006 portcd_isr
0001003c g     F .text	0000004a _vdprintf_r
00013394  w    O .text	00000060 vtable for SDFile
00012c28 g     F .text	00000082 _sfread_r
0000c0f4 g     F .text	000000c6 memmove
20019508 g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000ba20 g     F .text	00000014 __locale_ctype_ptr
00008710 g     F .text	00000068 SdioCard::stopTransmission(bool)
00011ba0 g     F .text	0000004c _Balloc
00009248  w    F .text	00000006 can1_rx_warn_isr
00013ce8 g       .ARM.exidx	00000000 __exidx_end
00009248  w    F .text	00000006 dma_error_isr
000061cc g     F .text	0000003c FatPartition::freeChain(unsigned long)
20019b84 g     O .bss	00000001 EventResponder::runningFromYield
000088fc g     F .text	0000001a SdSpiArduinoDriver::receive()
000071d8 g     F .text	00000096 SdSpiCard::cardCommand(unsigned char, unsigned long)
00003470 g     F .text	0000000c i2c0_isr
0000a658 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b3f8 g     F .text	0000008a .hidden __gtdf2
000063fc g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000b988 g     F .text	0000000c __errno
00002fa4  w    F .text	00000026 SDFile::isDirectory()
00009248  w    F .text	00000006 portd_isr
00009248  w    F .text	00000006 enet_error_isr
00013470 g     O .text	00000020 TwoWire::i2c2_hardware
000030bc  w    F .text	00000028 File::~File()
000009a0 g     F .text	000000a0 makeFilename(char*)
20019b74 g     O .bss	00000004 EventResponder::firstInterrupt
20019468 g     O .bss	00000014 patchCord2
00011b24 g     F .text	00000004 __localeconv_l
00007004  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00006d70 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
00009248  w    F .text	00000006 tpm1_isr
00004728 g     F .text	00000018 ExFatPartition::rootLength()
0000074c  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00006fe8  w    F .text	00000004 SdSpiCard::errorData() const
0000a648  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000135dc g     O .text	00000200 digital_pin_to_info_PGM
00006124 g     F .text	000000a8 FatPartition::allocContiguous(unsigned long, unsigned long*)
20019c74 g     O .bss	00000004 errno
00007270 g     F .text	0000004c SdSpiCard::readOCR(unsigned long*)
00008918 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006968 g     F .text	00000390 FatFile::open(FatFile*, fname_t*, int)
0000451c g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000c708 g     F .text	00000004 __seofread
00013ce8 g       .ARM.exidx	00000000 _etext
20014348 g       .bss	00000000 _sbss
0000b494 g     F .text	00000010 .hidden __aeabi_cdcmple
00007898 g     F .text	0000000c SdioCard::errorData() const
00007f48 g     F .text	000000d0 SdioCard::writeSector(unsigned long, unsigned char const*)
000093a0 g     F .text	0000001c digitalRead
00009248  w    F .text	00000006 porte_isr
00001d5c g     F .text	00000350 loop
0000a8fc g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
00009248  w    F .text	00000006 portb_isr
00009248  w    F .text	00000006 spi1_isr
00009248  w    F .text	00000006 uart3_status_isr
000039d0 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009248  w    F .text	00000006 mcm_isr
000084e0 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000aaec g     F .text	00000028 Stream::peekNextDigit()
00000548  w    F .text	0000001c c_uSD::~c_uSD()
0000711c g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
20019b78 g     O .bss	00000004 EventResponder::lastInterrupt
00009248  w    F .text	00000006 uart1_status_isr
00006de8 g     F .text	00000028 FsBaseFile::close()
000089a8 g     F .text	00000134 memcpy
00009248  w    F .text	00000006 randnum_isr
00011988 g     F .text	00000180 __hexnan
0000b484 g     F .text	00000020 .hidden __aeabi_cdrcmple
00002bfc  w    F .text	0000000c File::available()
00000574  w    F .text	00000050 mRecordQueue<500>::update()
00004554 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
00005888 g     F .text	0000002a FatFile::peek()
0000dad0 g     F .text	000016e4 _svfprintf_r
0000af08 g     F .text	00000022 .hidden __floatsidf
00002d80  w    F .text	00000014 SDFile::whoami()
20019510  w    O .bss	00000001 SDFile::name()::zeroterm
20019a84 g     O .bss	00000004 systick_millis_count
0000b400 g     F .text	00000082 .hidden __ltdf2
00004de0 g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
00009200  w    F .text	00000048 bus_fault_isr
00002f10  w    F .text	00000044 SDFile::truncate(unsigned long long)
00009248  w    F .text	00000006 watchdog_isr
0000b664 g     F .text	00000000 .hidden __aeabi_uldivmod
0000347c g     F .text	0000000c i2c1_isr
20019b68 g     O .bss	00000001 usb_configuration
00009248  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
000087f8 g     F .text	0000002c SdioCard::syncDevice()
00007db0 g     F .text	0000009c SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
0000062c  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
000058b4 g     F .text	00000040 FatFile::readDirCache(bool)
00012380 g     F .text	00000060 __ratio
00003488 g     F .text	0000000c i2c2_isr
20019b98 g     O .bss	00000070 AudioStream::memory_pool_available_mask
200194e8 g     O .bss	00000008 AudioOutputAnalog::dma
2001390c  w    O .data	00000018 usb_string_manufacturer_name
20019c6c g     O .bss	00000008 usb_rx_byte_count_data
00009248  w    F .text	00000006 pit1_isr
0000ba34 g     F .text	00000010 malloc
200192c8 g     O .bss	00000004 maxNoise
00009248  w    F .text	00000006 dma_ch4_isr
00013450 g     O .text	00000020 TwoWire::i2c1_hardware
20014880 g     O .bss	000007fc queue
0000aa28 g     F .text	00000084 software_isr
00012e20  w    O .text	00000024 vtable for FsFile
00011b08 g     F .text	0000001c iswspace
00009248  w    F .text	00000006 dma_ch7_isr
000032a0  w    F .text	0000001e TwoWire::read()
00013b80 g     O .text	000000c8 __mprec_tens
0000a320 g     F .text	000000c8 usb_init
20019c0a g     O .bss	00000002 AudioStream::memory_pool_first_mask
00006ffc  w    F .text	00000004 SdSpiCard::type() const
0000b584 g     F .text	00000040 .hidden __fixunsdfsi
00009248  w    F .text	00000006 lptmr_isr
00003038  w    F .text	00000084 SDFile::seek(unsigned long long, int)
200194d8 g     O .bss	00000004 AudioInputAnalog::block_left
20019c34 g     O .bss	00000004 __malloc_top_pad
00009370 g     F .text	00000024 rtc_set
00012bec g     F .text	0000003a __ssrefill_r
00007050 g     F .text	0000007a SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00004e8c g     F .text	000000e2 ExFatFile::truncate()
20013730 g     O .data	00000000 .hidden __dso_handle
0000aee8 g     F .text	0000001e .hidden __aeabi_ui2d
00000770  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
00011b28 g     F .text	0000001c _localeconv_r
00012a44 g     F .text	00000024 _strtoull_r
00009354 g     F .text	00000010 attachInterruptVector
000088b4 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00011db4 g     F .text	00000012 __i2b
20013730 g       .data	00000000 _sdata
2001947c g     O .bss	00000004 maxValue
00013430 g     O .text	00000020 TwoWire::i2c0_hardware
00002c74  w    F .text	0000000c File::operator bool()
0000b694 g     F .text	000002e2 .hidden __udivmoddi4
0000ac64 g     F .text	00000000 .hidden __aeabi_drsub
00005208 g     F .text	00000034 FatFile::addCluster()
0000c640 g     F .text	00000024 _sbrk_r
000072bc g     F .text	0000003e SdSpiCard::readRegister(unsigned char, void*)
00007974 g     F .text	00000020 SdioCard::type() const
00002bf0  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
00008adc g     F .text	00000048 usb_serial_getchar
00009248  w    F .text	00000006 can1_bus_off_isr
00009248  w    F .text	00000006 ftm2_isr
00002e80  w    F .text	0000004c SDFile::name()
000029f4 g     F .text	00000160 AudioInputAnalog::init(unsigned char)
20019c60 g     O .bss	00000008 usb_cdc_line_coding
00009394 g     F .text	0000000a digitalWrite
20019b7c g     O .bss	00000004 EventResponder::lastYield
00009248  w    F .text	00000006 uart5_status_isr
00009248  w    F .text	00000006 lpuart0_status_isr
000039a8 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00013808 g     O .text	00000004 usb_endpoint_config_table
00009248  w    F .text	00000006 dma_ch9_isr
00000730  w    F .text	0000001c Print::write(char const*)
000006b0  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00009248  w    F .text	00000006 pit2_isr
0000b4b8 g     F .text	00000012 .hidden __aeabi_dcmplt
200193fc g     O .bss	00000050 logFile
20019c30 g     O .bss	00000004 __malloc_max_sbrked_mem
00002f70  w    F .text	0000001a SDFile::position()
000093bc g     F .text	0000000a pinMode
000075bc g     F .text	00000042 SdSpiCard::writeStop()
200192fc g     O .bss	00000100 tempBuffer
00009654 g     F .text	0000004c usb_free
00009248  w    F .text	00000006 i2c3_isr
0000af2c g     F .text	0000003a .hidden __extendsfdf2
0000f1b4 g     F .text	00000e88 __ssvfscanf_r
0000b228 g     F .text	000001d0 .hidden __aeabi_ddiv
0000ac70 g     F .text	00000276 .hidden __adddf3
20013790 g     O .data	0000006c Wire2
00007654 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00002c08  w    F .text	00000010 File::peek()
00006208 g     F .text	000000b0 FatPartition::freeClusterCount()
000036f8  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
000121f4 g     F .text	000000d0 __b2d
00001c28  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
00013ce0 g       .ARM.exidx	00000000 __exidx_start
0000afd4 g     F .text	00000254 .hidden __aeabi_dmul
00002860  w    F .text	0000000c DMAChannel::~DMAChannel()
000074b4 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
00009248  w    F .text	00000006 pit0_isr
20019b80 g     O .bss	00000004 EventResponder::firstYield
00013860 g     O .text	00000004 _global_impure_ptr
00009248  w    F .text	00000006 can1_error_isr
000006fc  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c260 g     F .text	000003de _realloc_r
00002f8c  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000b994 g     F .text	00000050 __libc_init_array
20019c78 g       .bss	00000000 __bss_end
00002ecc  w    F .text	00000044 SDFile::rewindDirectory()
00003294  w    F .text	0000000c TwoWire::available()
00009248  w    F .text	00000006 can0_wakeup_isr
00004248 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000078a4 g     F .text	0000001c SdioCard::readCID(CID*)
00013a7c g     O .text	00000100 __hexdig
00004b38 g     F .text	000000e6 ExFatFile::addDirCluster()
00009248  w    F .text	00000006 flash_cmd_isr
00007600 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00013c48 g     O .text	00000028 __mprec_bigtens
00011c80 g     F .text	00000098 __s2b
0000a630  w    F .text	00000004 usb_serial_class::clear()
0000aee8 g     F .text	0000001e .hidden __floatunsidf
00009248  w    F .text	00000006 uart2_status_isr
00009260 g     F .text	0000002c _sbrk
00012048 g     F .text	00000042 __mcmp
000134b4  w    O .text	00000028 vtable for SDClass
20019524 g     O .bss	00000008 AudioOutputTDM::dma
00002d28  w    F .text	00000012 SDFile::operator bool()
200138d8 g     O .data	00000004 __brkval
20019a7c g     O .bss	00000001 usb_cdc_line_rtsdtr
00008d68 g     F .text	00000048 usb_serial_flush_callback
00013c7c g     F .text	00000000 _init
000052d4 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
00009248  w    F .text	00000006 svcall_isr
0000a760 g     F .text	0000006c AudioStream::initialize_memory(audio_block_struct*, unsigned int)
00003498  w    F .text	00000062 SDClass::remove(char const*)
00002d3c  w    F .text	0000001c SDFile::close()
00009248  w    F .text	00000006 dma_ch15_isr
00003178  w    F .text	0000005c SDFile::~SDFile()
0000b5c4 g     F .text	0000009e .hidden __aeabi_d2f
0000279c g     F .text	00000020 day()
00013490 g     O .text	00000024 vtable for TwoWire
00009248  w    F .text	00000006 uart1_error_isr
0001110c g     F .text	00000028 __libc_fini_array
0000ca78 g     F .text	00000ed8 _strtod_l
00011958 g     F .text	00000030 __match
00009248  w    F .text	00000006 usbhs_phy_isr
200194f0 g     O .bss	00000008 AudioInputAnalogStereo::dma0
2001944c g     O .bss	00000018 acq
20019c78 g       .bss	00000000 _ebss
00007ec0 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005698 g     F .text	00000050 FatFile::preAllocate(unsigned long)
00013304 g     O .text	0000000c vtable for AudioInputAnalog
200194c4 g     O .bss	00000008 AudioOutputADAT::dma
0000069c  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00011d18 g     F .text	00000040 __hi0bits
0000b534 g     F .text	0000004e .hidden __fixdfsi
00004c20 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
00009248 g     F .text	00000006 unused_isr
00009248  w    F .text	00000006 spi0_isr
00009248  w    F .text	00000006 dma_ch3_isr
00003494  w    F .text	00000002 SDClass::~SDClass()
00002860  w    F .text	0000000c DMAChannel::~DMAChannel()
2001527c g     O .bss	00004000 diskBuffer
200192a8 g     O .bss	00000020 text
00000e78 g     F .text	00000114 c_uSD::loadConfig(unsigned long*, int, long*, int)
000030bc  w    F .text	00000028 File::~File()
00012df0  w    O .text	0000000c vtable for mRecordQueue<500>
000027dc g     F .text	00000024 year()
0000ab80 g     F .text	00000004 operator delete(void*, unsigned int)
00009248  w    F .text	00000006 flash_error_isr
0000ac70 g     F .text	00000276 .hidden __aeabi_dadd
0000b400 g     F .text	00000082 .hidden __ledf2
200194e4 g     O .bss	00000001 AudioInputAnalog::update_responsibility
00009248  w    F .text	00000006 uart5_error_isr
00009248  w    F .text	00000006 rtc_seconds_isr
00009248  w    F .text	00000006 pdb_isr
00011ef8 g     F .text	000000a0 __pow5mult
00005ac8 g     F .text	0000005c FatFile::rmdir()
0000af68 g     F .text	0000006a .hidden __aeabi_ul2d
00009200  w    F .text	00000048 usage_fault_isr
00009248  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
000060a0 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00009248  w    F .text	00000006 dma_ch14_isr
0000354c  w    F .text	0000004c SDClass::exists(char const*)
00000564 g     F .text	00000004 getTeensy3Time()
00000000  w      *UND*	00000000 __deregister_frame_info
20019c68 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a620 g     F .text	00000010 systick_isr
00009248  w    F .text	00000006 rtc_alarm_isr
00002c94  w    F .text	0000000c File::isDirectory()
00006cf8 g     F .text	00000076 FatFile::getSFN(char*)
000073f4 g     F .text	0000006c SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20019b88 g     O .bss	00000004 AudioStream::first_update
00009248  w    F .text	00000006 dma_ch2_isr
00000a40 g     F .text	0000006c wavHeader(unsigned long)
200138e4 g     O .data	00000010 Serial
20019b8c g     O .bss	00000002 AudioStream::memory_used_max
00009248  w    F .text	00000006 ftm1_isr
00002c30  w    F .text	00000016 File::seek(unsigned long long, int)
00000568  w    F .text	0000000c AudioConnection::~AudioConnection()
0000a650  w    F .text	00000006 usb_serial_class::write(unsigned char)
00006e90 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
00009250  w    F .text	0000000c startup_early_hook
00007688 g     F .text	00000064 SdSpiCard::writeSingle(unsigned long, unsigned char const*)
00009248  w    F .text	00000006 dma_ch13_isr
000047d4 g     F .text	0000008c ExFatFile::addCluster()
00013334  w    O .text	00000060 vtable for File
00009248  w    F .text	00000006 uart2_error_isr
00003598  w    F .text	00000052 SDClass::usedSize()
00008b24 g     F .text	00000030 usb_serial_peekchar
0000b4f4 g     F .text	00000012 .hidden __aeabi_dcmpgt
0000bff0 g     F .text	00000000 memchr
00006038 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
20013984 g     O .data	00000016 usb_string_serial_number_default
00009200 g     F .text	00000048 fault_isr
000111d0 g     F .text	000001d0 _free_r
00007d24 g     F .text	0000008c SdioCard::readStop()
00003874 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000b9fc g     F .text	0000001c __locale_mb_cur_max
0000b4e0 g     F .text	00000012 .hidden __aeabi_dcmpge
00009248  w    F .text	00000006 usb_charge_isr
00002800 g     F .text	00000044 setTime(long)
0000a640  w    F .text	00000004 usb_serial_class::flush()
00012b68 g     F .text	00000082 _sungetc_r
00009248  w    F .text	00000006 cmt_isr
0000ac6c g     F .text	0000027a .hidden __aeabi_dsub
000062b8 g     F .text	0000011a FatPartition::init(BlockDeviceInterface*, unsigned char)
00009248  w    F .text	00000006 usbhs_isr
000053a8 g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
20014344 g     O .data	00000004 __malloc_sbrk_base
0000a638  w    F .text	00000004 usb_serial_class::read()
00009248  w    F .text	00000006 ftm3_isr
00002cd8  w    F .text	0000000c File::rewindDirectory()
000126a8 g     F .text	00000024 _strtoll_r
00009248  w    F .text	00000006 tsi0_isr
00006788 g     F .text	00000128 FatFile::remove()
20014364 g     O .bss	00000514 uSD
0000af68 g     F .text	0000006a .hidden __floatundidf
0000928c  w    F .text	00000002 __cxa_pure_virtual
00011f98 g     F .text	000000ae __lshift
000054f8 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
00009248  w    F .text	00000006 spi2_isr
00004740 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
200194f8 g     O .bss	00000008 AudioInputAnalogStereo::dma1
00012a68 g     F .text	00000100 __ssprint_r
00012d24 g     F .text	0000005e _vasnprintf_r
0000ab78  w    F .text	00000002 serialEvent()
20019af1 g     O .bss	00000001 usb_reboot_timer
200194ac g     O .bss	00000008 AudioOutputPWM::dma
000100e8 g     F .text	000000a4 __register_exitproc
00004148 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00002844 g     F .text	0000001c setSyncProvider(long (*)())
0000c99c g     F .text	000000a0 strncmp
00001124 g     F .text	000001c4 checkDutyCycle(ACQ_Parameters_s*, short)
00004c7c g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00000770  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
00008b70 g     F .text	00000038 usb_serial_flush_input
00008fd4 g     F .text	0000004c analogReference
000045d4 g     F .text	00000072 ExFatPartition::freeClusterCount()
00011dc8 g     F .text	00000130 __multiply
000028cc g     F .text	00000078 AudioInputAnalog::isr()
00008cb0 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
20019c38 g     O .bss	00000028 __malloc_current_mallinfo
000122c4 g     F .text	000000ba __d2b
00009020 g     F .text	00000068 analogReadRes
20019c10 g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
00009248  w    F .text	00000006 can0_bus_off_isr
00007964  w    F .text	0000000e SdioCard::~SdioCard()
200194d4 g     O .bss	00000004 AudioInputAnalog::hpf_x1
000038f8 g     F .text	000000ae ExFatFile::getName(char*, unsigned int)
20019b5d g     O .bss	00000001 usb_rx_memory_needed
00007e4c g     F .text	00000074 SdioCard::writeStart(unsigned long)
00012834 g     F .text	00000024 _strtoul_r
00009854 g     F .text	00000acc usb_isr
0000b97c g     F .text	0000000c __cxa_atexit
00003a94 g     F .text	000001a8 ExFatFile::read(void*, unsigned int)
0000a9f8 g     F .text	00000030 AudioStream::update_setup()
0000af08 g     F .text	00000022 .hidden __aeabi_i2d
00002e54  w    F .text	00000018 SDFile::peek()
000038d4 g     F .text	0000000e FsCache::sync()
0000ab70 g     F .text	00000006 Stream::parseInt()
0000c090 g     F .text	00000062 memcmp
000137dc  w    O .text	00000028 vtable for usb_serial_class
00008938 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
00009248  w    F .text	00000006 uart3_error_isr
200194cc g     O .bss	00000004 AudioInputAnalog::hpf_y1
20013738 g     O .data	00000005 postfix
000089a4 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000aaac g     F .text	00000040 Stream::timedPeek()
0000c6b0 g     F .text	00000058 sscanf
0000b978  w    F .text	00000002 .hidden __aeabi_ldiv0
00004938 g     F .text	0000005a ExFatFile::rmdir()
20019534 g     O .bss	00000008 AudioInputI2SHex::dma
00009248  w    F .text	00000006 porta_isr
0000b228 g     F .text	000001d0 .hidden __divdf3
00000f8c g     F .text	00000198 setWakeupCallandSleep(unsigned long)
000123e0 g     F .text	00000046 __copybits
200133d0 g     O .usbbuffers	00000360 usb_buffer_memory
0000730c g     F .text	00000098 SdSpiCard::sectorCount()
00009248  w    F .text	00000006 low_voltage_isr
20013f38 g     O .data	00000408 __malloc_av_
00009248  w    F .text	00000006 can0_error_isr
000094a8 g     F .text	0000016c _init_Teensyduino_internal_
20013734 g     O .data	00000004 outptr
00002e6c  w    F .text	00000014 SDFile::flush()
0000afd4 g     F .text	00000254 .hidden __muldf3
00008d10 g     F .text	00000058 usb_serial_flush_output
00009248  w    F .text	00000006 dma_ch12_isr
200194b4 g     O .bss	00000008 AudioInputI2S::dma
0000c258 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000653c g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
00009248  w    F .text	00000006 can1_wakeup_isr
20013200 g     O .dmabuffers	000001d0 _VectorsRam
00008950 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00012d84 g     F .text	0000005e _calloc_r
00009248  w    F .text	00000006 pit3_isr
200194a0 g     O .bss	00000004 getTimePtr
200138e0 g     O .data	00000001 yield_active_check_flags
00009248  w    F .text	00000006 enet_rx_isr
00004ad8 g     F .text	0000005e ExFatFile::sync()
000058f4 g     F .text	000001d4 FatFile::rename(FatFile*, char const*)
00008778 g     F .text	00000080 SdioCard::isBusy()
00009248  w    F .text	00000006 portc_isr
00007460 g     F .text	00000038 SdSpiCard::readStop()
20019500 g     O .bss	00000008 AudioInputI2SQuad::dma
0000c1bc g     F .text	0000009a memset
0000a750 g     F .text	00000010 main
20019544 g     O .bss	00000008 AudioOutputI2S::dma
20019c2c g     O .bss	00000004 __malloc_max_total_mem
000042f8 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000269c g     F .text	000000a0 now()
00004f70 g     F .text	00000264 ExFatFile::write(void const*, unsigned int)
00009200  w    F .text	00000048 memmanage_fault_isr
20013740 g     O .data	00000020 snipParameters
00002fe0  w    F .text	00000058 SDFile::available()
00002c68  w    F .text	0000000c File::close()
0000ab84 g     F .text	0000007c usb_init_serialnumber
000012e8 g     F .text	00000042 setRTCTime(int, int, int, int, int, int)
0000daa8 g     F .text	00000024 _strtol_r
0000b5c4 g     F .text	0000009e .hidden __truncdfsf2
00013cdc g       .text	00000000 __init_array_end
000102d8 g     F .text	00000e34 _dtoa_r
0000ba54 g     F .text	00000570 _malloc_r
20019c28 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00009248  w    F .text	00000006 debugmonitor_isr
000100a0 g     F .text	0000001a __ascii_wctomb
00006d70 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000af78 g     F .text	0000005a .hidden __aeabi_l2d
20019a18 g     O .bss	00000004 FatVolume::m_cwv
2001951c g     O .bss	00000008 AudioInputI2SOct::dma
00012cac g     F .text	00000078 __submore
000023d0 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
61011a90 g       *ABS*	00000000 __rtc_localtime
000093c8 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00002ca0  w    F .text	00000038 File::openNextFile(unsigned char)
00000aac g     F .text	0000019c c_uSD::init()
00009248  w    F .text	00000006 cmp1_isr
00009248  w    F .text	00000006 ftm0_isr
20013760 g     O .data	00000002 mustStore
00004994 g     F .text	00000144 ExFatFile::syncDir()
00011134 g     F .text	0000009c _malloc_trim_r
20013980 g     O .data	00000004 string0
00008ba8 g     F .text	00000108 usb_serial_write
0000925c  w    F .text	00000002 startup_late_hook
0000a63c  w    F .text	00000004 usb_serial_class::available()
00000c48 g     F .text	00000108 c_uSD::close()
200138f4 g     O .data	00000001 _serialEvent_default
00005d2c g     F .text	0000000c FatFile::sync()
000034fc  w    F .text	00000050 SDClass::mkdir(char const*)
20013968  w    O .data	00000016 usb_string_product_name
0000940c g     F .text	0000009c delay
0000b408 g     F .text	0000007a .hidden __nedf2
00009248  w    F .text	00000006 tpm0_isr
20019b72 g     O .bss	00000002 dma_channel_allocated_mask
00013cdc g     F .fini	00000000 _fini
00002c80  w    F .text	00000014 File::name()
00003318 g     F .text	00000026 TwoWire::write(unsigned char)
200194bc g     O .bss	00000008 AudioOutputPT8211::dma
000027bc g     F .text	00000020 month()
00001c50 g     F .text	0000010c c_uSD::write(short*, long)
000073a4 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00004258 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
0000a6b4 g     F .text	0000001c Print::printf(char const*, ...)
0000c664 g     F .text	0000004c sprintf
00009248  w    F .text	00000006 i2s0_rx_isr
00009248  w    F .text	00000006 uart4_error_isr
00005388 g     F .text	0000001e FatFile::close()
00002c48  w    F .text	00000010 File::position()
000030e4  w    F .text	00000064 SDFile::~SDFile()
000101a0 g     F .text	0000000c atexit
000078ec  w    F .text	00000002 SdioCard::~SdioCard()
00000684  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00002d10  w    F .text	00000018 File::write(unsigned char)
000100bc g     F .text	0000002c _write_r
20019558 g     O .bss	000004b8 SD
00007be0 g     F .text	000000ec SdioCard::erase(unsigned long, unsigned long)
0000a874 g     F .text	00000054 AudioStream::release(audio_block_struct*)
00009248  w    F .text	00000006 can0_message_isr
0000ac4c g     F .text	0000000c nanf
20013dc8 g     O .data	00000004 _impure_ptr
200194d0 g     O .bss	00000002 AudioInputAnalog::block_offset
00013310  w    O .text	00000024 vtable for Stream
00009248  w    F .text	00000006 can1_message_isr
00003c3c g     F .text	0000002e ExFatFile::peek()
00012dfc  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
2001954c g     O .bss	00000008 AudioOutputSPDIF::dma
00011b44 g     F .text	0000005c _mbrtowc_r
00009248  w    F .text	00000006 nmi_isr
200137fc g     O .data	0000006c Wire
000068b0 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00002fcc  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000a8c8 g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00006fb8 g     F .text	00000028 FsVolume::open(char const*, int)
0000788c g     F .text	0000000c SdioCard::errorCode() const
0000567c g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
000006e8  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00013c88 g       .text	00000000 __preinit_array_end
00000498 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00007000  w    F .text	00000002 SdSpiCard::~SdSpiCard()
2001952c g     O .bss	00000008 AudioInputTDM::dma
00009248  w    F .text	00000006 sdhc_isr
0000275c g     F .text	00000020 minute()
00000530  w    F .text	00000018 FsFile::~FsFile()
00004648 g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004d54 g     F .text	0000008a ExFatFile::preAllocate(unsigned long long)
00004490 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007504 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000bfc4 g     F .text	0000002a __ascii_mbtowc
000070cc g     F .text	0000004e SdSpiCard::isBusy()
000121a0 g     F .text	00000054 __ulp
000134e4 g     O .text	00000058 vtable for SdSpiCard
0000a7cc g     F .text	000000a8 AudioStream::allocate()
2001507c g     O .bss	00000200 header
00007304  w    F .text	00000008 SdSpiCard::readCID(CID*)
000032c0  w    F .text	00000016 TwoWire::peek()
000032d8  w    F .text	00000002 TwoWire::flush()
000019f0 g     F .text	000001a0 setup
0001380c g     O .text	00000054 usb_descriptor_list
000096a0 g     F .text	0000003c usb_rx
00007a1c g     F .text	00000020 SdioCard::status()
000007c4 g     F .text	000001dc modifyADCS(short, unsigned short, unsigned short, unsigned short)
00009248  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000b584 g     F .text	00000040 .hidden __aeabi_d2uiz
00000d50 g     F .text	00000128 c_uSD::storeConfig(unsigned long*, int, long*, int)
00009248  w    F .text	00000006 uart0_error_isr
00002c58  w    F .text	00000010 File::size()
000035ec  w    F .text	00000062 SDClass::rmdir(char const*)
00009614 g     F .text	00000040 usb_malloc
000056e8 g     F .text	0000019e FatFile::read(void*, unsigned int)
00009248  w    F .text	00000006 i2s0_isr
0000568c g     F .text	0000000c FatFile::openRoot(FatVolume*)
20019a14 g     O .bss	00000004 ExFatVolume::m_cwv
20030000 g       .bss	00000000 _estack
00006fe0 g     F .text	00000004 operator new(unsigned int, unsigned long*)
000072fc  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000a5a0 g     F .text	00000038 DMAChannel::release()
00002ce4  w    F .text	0000002c File::read()
00008cc8 g     F .text	00000048 usb_serial_write_buffer_free
0000719c g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
00009248  w    F .text	00000006 enet_timer_isr
0000a914 g     F .text	00000068 AudioConnection::connect()
0000b4a4 g     F .text	00000012 .hidden __aeabi_dcmpeq
000025a0 g     F .text	000000fc makeTime(tmElements_t const&)
2001953c g     O .bss	00000008 AudioInputPDM::dma
000032dc g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
00003148  w    F .text	00000030 File::~File()
0000a6a4  w    F .text	0000000e _write
20014348 g       .data	00000000 _edata
00004530 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
000078ec  w    F .text	00000002 SdioCard::~SdioCard()
00009248  w    F .text	00000006 i2s0_tx_isr
00009248  w    F .text	00000006 adc1_isr
00007498 g     F .text	0000001c SdSpiCard::syncDevice()
0000523c g     F .text	00000098 FatFile::addDirCluster()
00002be4  w    F .text	0000000c File::read(void*, unsigned int)
0000a644  w    F .text	00000004 usb_serial_class::availableForWrite()
00009248  w    F .text	00000006 cmp0_isr
00002c24  w    F .text	0000000c File::truncate(unsigned long long)
0000ac00 g     F .text	0000004c ultoa
00003494  w    F .text	00000002 SDClass::~SDClass()
0000277c g     F .text	00000020 second()
00001b90  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
00006e10 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
0000ab7c g     F .text	00000004 operator new(unsigned int)
0000a5d8 g     F .text	00000044 EventResponder::runFromInterrupt()
20014340 g     O .data	00000004 __malloc_trim_threshold
0000a634  w    F .text	00000004 usb_serial_class::peek()
0000a97c g     F .text	0000007a AudioConnection::disconnect()
0001208c g     F .text	00000114 __mdiff
000078dc g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b534 g     F .text	0000004e .hidden __aeabi_d2iz
000044c4 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
20019a6c g     O .bss	00000001 usb_cdc_transmit_flush_timer
20019c0e g     O .bss	00000002 AudioStream::cpu_cycles_total
00009248  w    F .text	00000006 pit_isr
0000273c g     F .text	00000020 hour()
00007d24 g     F .text	0000008c SdioCard::writeStop()
000076ec  w    F .text	0000001c SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012488 g     F .text	00000072 __sccl
000038e4 g     F .text	00000014 ExFatFile::close()
00013968 g     O .text	00000101 _ctype_
00009248  w    F .text	00000006 dac0_isr
00006fec  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00013c88 g       .text	00000000 __init_array_start
0000b978  w    F .text	00000002 .hidden __aeabi_idiv0
00009248  w    F .text	00000006 can1_tx_warn_isr
0000b508 g     F .text	0000002c .hidden __unorddf2
00009104 g     F .text	000000fc analogRead
00003650  w    F .text	00000074 SDClass::rename(char const*, char const*)
00009248  w    F .text	00000006 uart0_status_isr
00009248  w    F .text	00000006 mcg_isr
0000ab14 g     F .text	0000005a Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
0000a4d4 g     F .text	000000cc DMAChannel::begin(bool)
0000c8c0 g     F .text	000000dc strlen
00006420 g     F .text	0000002e FatFile::openCluster(FatFile*)
0000ba18 g     F .text	00000006 __locale_ctype_ptr_l
0000b494 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b3f8 g     F .text	0000008a .hidden __gedf2
00005b24 g     F .text	000000b0 FatFile::seekSet(unsigned long)
00011448 g     F .text	00000510 __gethex
20013968 g     O .data	00000016 usb_string_product_name_default
00002944 g     F .text	000000b0 AudioInputAnalog::update()
20019514 g     O .bss	00000008 AudioOutputI2SQuad::dma
00010088 g     F .text	00000018 vdprintf
00009248  w    F .text	00000006 dma_ch1_isr
00007b74 g     F .text	0000006c SdioCard::sectorCount()
00006ef0 g     F .text	000000c8 FsVolume::begin(BlockDeviceInterface*)
00000548  w    F .text	0000001c c_uSD::~c_uSD()
000096dc g     F .text	0000002c usb_tx_packet_count
00005cac g     F .text	00000080 FatFile::openNext(FatFile*, int)
0000c70c g     F .text	000000ce strchr
0001353c g     O .text	00000058 vtable for SdioCard
0000af2c g     F .text	0000003a .hidden __aeabi_f2d
00009248  w    F .text	00000006 dma_ch5_isr
00006450 g     F .text	000000ec FatFile::getName(char*, unsigned int)
00009248  w    F .text	00000006 can0_rx_warn_isr
00009248  w    F .text	00000006 can0_tx_warn_isr
00009248  w    F .text	00000006 uart4_status_isr
000085ac g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
200194dc g     O .bss	00000008 AudioInputAnalog::dma
20019c08 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00008824 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000ac6c g     F .text	0000027a .hidden __subdf3
00013c88 g       .text	00000000 __preinit_array_start
00012de4  w    O .text	0000000c vtable for AudioStream
000043ac g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00002d58  w    F .text	00000028 File::whoami()
00011d58 g     F .text	0000005a __lo0bits
00004454 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00005bd4 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000ac58 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00000530  w    F .text	00000018 FsFile::~FsFile()
00009364 g     F .text	0000000c rtc_get
00004860 g     F .text	000000d6 ExFatFile::remove()
00009248  w    F .text	00000006 cmp2_isr
0000a61c g     F .text	00000004 pendablesrvreq_isr
000036c4  w    F .text	00000034 SDClass::totalSize()
00000568  w    F .text	0000000c AudioConnection::~AudioConnection()
0000046c  w    F .text	00000004 Print::availableForWrite()
20013dcc g     O .data	0000016c __global_locale
00009248  w    F .text	00000006 wakeup_isr
0000814c g     F .text	00000394 SdioCard::begin(SdioConfig)
00009248  w    F .text	00000006 cmp3_isr
000023d8 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000a6d0 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00005fc8 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000ba44 g     F .text	00000010 free
00009248  w    F .text	00000006 tpm2_isr
00011c00 g     F .text	00000080 __multadd
00011bec g     F .text	00000012 _Bfree
00002f54  w    F .text	0000001a SDFile::size()
00009248  w    F .text	00000006 dma_ch0_isr
00003178  w    F .text	0000005c SDFile::~SDFile()
20013984  w    O .data	00000016 usb_string_serial_number
00009248  w    F .text	00000006 enet_tx_isr
00004798 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00008620 g     F .text	000000f0 SdioCard::readSector(unsigned long, unsigned char*)
000078c0 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + (sec100 < 100 ? 0 : 1), 0);
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ....I.......
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	............I...
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	I...........!...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	I...I...I...I...
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	I...I...I...I...
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	I...I...I...I...
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	I...I...I...I...
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	I...I...I...I...
      90:	I...I...I...I...
      a0:	q4..}4..I...I...
      b0:	I...I...I...I...
      c0:	I...I...I...I...
      d0:	I...I...I...I...
      e0:	I...I...I...I...
      f0:	I...I...I...I...
     100:	I...I...I...I...
     110:	I...U...I...I...
     120:	I...I...I...I...
     130:	I...I...I...I...
     140:	)...I...I...I...
     150:	I...I...I...I...
     160:	I...I....4..I...
     170:	I...I...I...I...
     180:	I...I...I...I...
     190:	I...I...I...I...
     1a0:	I...I...I...I...
     1b0:	I...I...I...I...
     1c0:	I...I...I...I...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	9250 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	94a8 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	9370 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	9370 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	b994 <__libc_init_array>

	startup_late_hook();
     32c:	bl	925c <startup_late_hook>
	main();
     330:	bl	a750 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x20014348
     360:	.word	0x00013ce4
     364:	.word	0x20013730
     368:	.word	0x20014348
     36c:	.word	0x20019c78
     370:	.word	0x20013200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x61011a90
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x20014348
     42c:	.word	0x00000000
     430:	.word	0x00013ce0

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x2001434c
     460:	.word	0x00013ce0
     464:	.word	0x20014348
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <llwuISR()>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     47c:	ldr	r2, [pc, #16]	; (490 <llwuISR()+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     47e:	ldr	r1, [pc, #20]	; (494 <llwuISR()+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     480:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     482:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     484:	orr.w	r3, r3, #32
     488:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     48a:	str	r0, [r1, #0]
     48c:	bx	lr
     48e:	nop
     490:	.word	0x4007c00d
     494:	.word	0x4003d01c

00000498 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

#include <TimeLib.h>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     498:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     49c:	mov	r7, r1
     49e:	mov	r6, r2
     4a0:	mov	r8, r0
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     4a2:	bl	27dc <year()>
     4a6:	mov	r4, r0
     4a8:	bl	27bc <month()>
     4ac:	mov	r5, r0
     4ae:	bl	279c <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     4b2:	subw	r3, r4, #1980	; 0x7bc
     4b6:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     4b8:	cmp	r3, #127	; 0x7f
     4ba:	bhi.n	4c2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     4bc:	uxtb	r2, r5
     4be:	cmp	r2, #12
     4c0:	bls.n	51a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     4c2:	movs	r3, #0
     4c4:	strh.w	r3, [r8]

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(hour(), minute(), second());
     4c8:	bl	273c <hour()>
     4cc:	mov	r4, r0
     4ce:	bl	275c <minute()>
     4d2:	mov	r5, r0
     4d4:	bl	277c <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     4d8:	uxtb	r3, r4
     4da:	cmp	r3, #23
     4dc:	bhi.n	4e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     4de:	uxtb	r3, r5
     4e0:	cmp	r3, #59	; 0x3b
     4e2:	bls.n	4fc <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     4e4:	movs	r3, #0
     4e6:	strh	r3, [r7, #0]

  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
     4e8:	bl	277c <second()>
     4ec:	tst.w	r0, #1
     4f0:	ite	ne
     4f2:	movne	r3, #100	; 0x64
     4f4:	moveq	r3, #0
     4f6:	strb	r3, [r6, #0]
     4f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     4fc:	uxtb	r3, r0
     4fe:	cmp	r3, #59	; 0x3b
     500:	bhi.n	4e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     502:	lsls	r4, r4, #11
     504:	lsls	r3, r5, #5
     506:	and.w	r4, r4, #522240	; 0x7f800
     50a:	and.w	r3, r3, #8160	; 0x1fe0
     50e:	orrs	r3, r4
     510:	ubfx	r0, r0, #1, #7
     514:	orrs	r3, r0
     516:	uxth	r3, r3
     518:	b.n	4e6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     51a:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     51c:	cmp	r0, #31
     51e:	bhi.n	4c2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     520:	lsls	r5, r5, #5
     522:	and.w	r5, r5, #8160	; 0x1fe0
     526:	orrs	r0, r5
     528:	orr.w	r3, r0, r3, lsl #9
     52c:	uxth	r3, r3
     52e:	b.n	4c4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000530 <FsFile::~FsFile()>:
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     530:	push	{r4, lr}
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     532:	ldr	r3, [pc, #16]	; (544 <FsFile::~FsFile()+0x14>)
     534:	mov	r4, r0
     536:	str.w	r3, [r0], #16
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     53a:	bl	6de8 <FsBaseFile::close()>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     53e:	mov	r0, r4
     540:	pop	{r4, pc}
     542:	nop
     544:	.word	0x00012e04

00000548 <c_uSD::~c_uSD()>:
int16_t diskBuffer[BUFFERSIZE];
int16_t *outptr = diskBuffer;

char header[512];

class c_uSD
     548:	push	{r4, lr}
     54a:	ldr	r3, [pc, #20]	; (560 <c_uSD::~c_uSD()+0x18>)
     54c:	str.w	r3, [r0, #1204]	; 0x4b4
     550:	mov	r4, r0
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     552:	addw	r0, r0, #1220	; 0x4c4
     556:	bl	6de8 <FsBaseFile::close()>
     55a:	mov	r0, r4
     55c:	pop	{r4, pc}
     55e:	nop
     560:	.word	0x00012e04

00000564 <getTeensy3Time()>:
#ifdef __cplusplus
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     564:	b.w	9364 <rtc_get>

00000568 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     568:	push	{r4, lr}
     56a:	mov	r4, r0
		disconnect();
     56c:	bl	a97c <AudioConnection::disconnect()>
	}
     570:	mov	r0, r4
     572:	pop	{r4, pc}

00000574 <mRecordQueue<500>::update()>:
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     574:	push	{r4, lr}
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     576:	movs	r1, #0
	release(userblock);
	userblock = NULL;
}

template <int mq>
void mRecordQueue<mq>::update(void)
     578:	mov	r4, r0
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     57a:	bl	a8fc <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     57e:	cbz	r0, 5ae <mRecordQueue<500>::update()+0x3a>
	if (!enabled) {
     580:	ldrh.w	r3, [r4, #2040]	; 0x7f8
     584:	uxth	r3, r3
     586:	cbz	r3, 5b0 <mRecordQueue<500>::update()+0x3c>
		release(block);
		return;
	}
	h = head + 1;
     588:	ldrh.w	r3, [r4, #2036]	; 0x7f4
	if (h >= mq) h = 0;
	if (h == tail) {
     58c:	ldrh.w	r2, [r4, #2038]	; 0x7f6
	if (!block) return;
	if (!enabled) {
		release(block);
		return;
	}
	h = head + 1;
     590:	adds	r3, #1
     592:	uxth	r3, r3
	if (h >= mq) h = 0;
     594:	cmp.w	r3, #500	; 0x1f4
     598:	it	cs
     59a:	movcs	r3, #0
	if (h == tail) {
     59c:	uxth	r2, r2
     59e:	cmp	r3, r2
     5a0:	beq.n	5b8 <mRecordQueue<500>::update()+0x44>
		release(block); // drop incomming data
    dropCount++; // flag for main to know
	} else {
		queue[h] = block; // store incomming data
     5a2:	add.w	r2, r3, #8
     5a6:	str.w	r0, [r4, r2, lsl #2]
		head = h;
     5aa:	strh.w	r3, [r4, #2036]	; 0x7f4
     5ae:	pop	{r4, pc}
	}
}
     5b0:	ldmia.w	sp!, {r4, lr}
	uint16_t h;

	block = receiveReadOnly();
	if (!block) return;
	if (!enabled) {
		release(block);
     5b4:	b.w	a874 <AudioStream::release(audio_block_struct*)>
		return;
	}
	h = head + 1;
	if (h >= mq) h = 0;
	if (h == tail) {
		release(block); // drop incomming data
     5b8:	bl	a874 <AudioStream::release(audio_block_struct*)>
    dropCount++; // flag for main to know
     5bc:	ldr	r3, [r4, #24]
     5be:	adds	r3, #1
     5c0:	str	r3, [r4, #24]
     5c2:	pop	{r4, pc}

000005c4 <getTime(char*) [clone .constprop.33]>:
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
    return text;  
}

static char * getTime(char *text)
     5c4:	push	{r4, r5, r6, lr}
     5c6:	sub	sp, #8
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
     5c8:	bl	273c <hour()>
     5cc:	mov	r5, r0
     5ce:	bl	275c <minute()>
     5d2:	mov	r6, r0
     5d4:	bl	277c <second()>
     5d8:	ldr	r4, [pc, #20]	; (5f0 <getTime(char*) [clone .constprop.33]+0x2c>)
     5da:	str	r0, [sp, #0]
     5dc:	mov	r3, r6
     5de:	mov	r2, r5
     5e0:	mov	r0, r4
     5e2:	ldr	r1, [pc, #16]	; (5f4 <getTime(char*) [clone .constprop.33]+0x30>)
     5e4:	bl	c664 <sprintf>
    return text;
}
     5e8:	mov	r0, r4
     5ea:	add	sp, #8
     5ec:	pop	{r4, r5, r6, pc}
     5ee:	nop
     5f0:	.word	0x200192a8
     5f4:	.word	0x00012e44

000005f8 <getDate(char*) [clone .constprop.34]>:
*/


#include <TimeLib.h>

static char * getDate(char *text)
     5f8:	push	{r4, r5, r6, lr}
     5fa:	sub	sp, #8
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
     5fc:	bl	27dc <year()>
     600:	mov	r5, r0
     602:	bl	27bc <month()>
     606:	mov	r6, r0
     608:	bl	279c <day()>
     60c:	ldr	r4, [pc, #20]	; (624 <getDate(char*) [clone .constprop.34]+0x2c>)
     60e:	str	r0, [sp, #0]
     610:	mov	r3, r6
     612:	mov	r2, r5
     614:	mov	r0, r4
     616:	ldr	r1, [pc, #16]	; (628 <getDate(char*) [clone .constprop.34]+0x30>)
     618:	bl	c664 <sprintf>
    return text;  
}
     61c:	mov	r0, r4
     61e:	add	sp, #8
     620:	pop	{r4, r5, r6, pc}
     622:	nop
     624:	.word	0x200192a8
     628:	.word	0x00012e54

0000062c <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     62c:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     62e:	cbz	r2, 64a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     630:	ldrb	r3, [r2, #0]
     632:	and.w	r3, r3, #8
     636:	and.w	r0, r3, #255	; 0xff
     63a:	cbz	r3, 67e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     63c:	ldr	r3, [r2, #28]
     63e:	ldr	r0, [r2, #20]
     640:	subs	r0, r3, r0
     642:	it	mi
     644:	mvnmi.w	r0, #2147483648	; 0x80000000
     648:	bx	lr
     64a:	ldr	r1, [r0, #76]	; 0x4c
     64c:	cbz	r1, 680 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     64e:	ldrb.w	r3, [r1, #49]	; 0x31
     652:	and.w	r3, r3, #8
     656:	and.w	r0, r3, #255	; 0xff
     65a:	cbz	r3, 67e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     65c:	ldrd	r2, r3, [r1, #16]
     660:	ldrd	r0, r1, [r1]
     664:	subs	r0, r2, r0
     666:	push	{r4, r5}
     668:	sbc.w	r1, r3, r1
     66c:	movs	r5, #0
     66e:	mvn.w	r4, #2147483648	; 0x80000000
     672:	cmp	r5, r1
     674:	it	eq
     676:	cmpeq	r4, r0
     678:	bcs.n	67c <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     67a:	mov	r0, r4
    return BaseFile::available();
  }
     67c:	pop	{r4, r5}
     67e:	bx	lr
     680:	mov	r0, r1
     682:	bx	lr

00000684 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     684:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     686:	cbz	r3, 68e <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     688:	mov	r0, r3
     68a:	b.w	5888 <FatFile::peek()>
     68e:	ldr	r0, [r0, #76]	; 0x4c
     690:	cbz	r0, 696 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     692:	b.w	3c3c <ExFatFile::peek()>
    return BaseFile::peek();
  }
     696:	mov.w	r0, #4294967295
     69a:	bx	lr

0000069c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     69c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     69e:	cbz	r3, 6a6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     6a0:	mov	r0, r3
     6a2:	b.w	5d2c <FatFile::sync()>
     6a6:	ldr	r0, [r0, #76]	; 0x4c
     6a8:	cbz	r0, 6ae <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     6aa:	b.w	4ad8 <ExFatFile::sync()>
     6ae:	bx	lr

000006b0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     6b0:	push	{lr}
     6b2:	ldr	r3, [r0, #72]	; 0x48
     6b4:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     6b6:	cbz	r3, 6d2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     6b8:	mov	r0, r3
     6ba:	movs	r2, #1
     6bc:	add.w	r1, sp, #7
     6c0:	bl	56e8 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6c4:	cmp	r0, #1
     6c6:	bne.n	6e2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6c8:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     6cc:	add	sp, #12
     6ce:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     6d2:	ldr	r0, [r0, #76]	; 0x4c
     6d4:	cbz	r0, 6e2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6d6:	movs	r2, #1
     6d8:	add.w	r1, sp, #7
     6dc:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
     6e0:	b.n	6c4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6e2:	mov.w	r0, #4294967295
     6e6:	b.n	6cc <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000006e8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     6e8:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     6ea:	cbz	r3, 6f2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     6ec:	mov	r0, r3
     6ee:	b.w	5db0 <FatFile::write(void const*, unsigned int)>
     6f2:	ldr	r0, [r0, #76]	; 0x4c
     6f4:	cbz	r0, 6fa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     6f6:	b.w	4f70 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     6fa:	bx	lr

000006fc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     6fc:	push	{lr}
     6fe:	ldr	r3, [r0, #72]	; 0x48
     700:	sub	sp, #12
     702:	strb.w	r1, [sp, #7]
     706:	cbz	r3, 71a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     708:	mov	r0, r3
     70a:	movs	r2, #1
     70c:	add.w	r1, sp, #7
     710:	bl	5db0 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     714:	add	sp, #12
     716:	ldr.w	pc, [sp], #4
     71a:	ldr	r0, [r0, #76]	; 0x4c
     71c:	cmp	r0, #0
     71e:	beq.n	714 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     720:	movs	r2, #1
     722:	add.w	r1, sp, #7
     726:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
     72a:	add	sp, #12
     72c:	ldr.w	pc, [sp], #4

00000730 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     730:	push	{r4, r5, r6, lr}
     732:	mov	r4, r0
     734:	mov	r0, r1
     736:	mov	r5, r1
     738:	bl	c8c0 <strlen>
     73c:	ldr	r3, [r4, #0]
     73e:	mov	r2, r0
     740:	mov	r1, r5
     742:	mov	r0, r4
     744:	ldr	r3, [r3, #4]
     746:	ldmia.w	sp!, {r4, r5, r6, lr}
     74a:	bx	r3

0000074c <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     74c:	push	{r3, r4, r5, lr}
     74e:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     750:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     752:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     754:	bl	c8c0 <strlen>
     758:	ldr	r3, [r4, #0]
     75a:	mov	r2, r0
     75c:	mov	r1, r5
     75e:	ldr	r3, [r3, #4]
     760:	mov	r0, r4
     762:	blx	r3
     764:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     766:	mov	r0, r4
     768:	bl	a684 <Print::println()>
     76c:	add	r0, r5
     76e:	pop	{r3, r4, r5, pc}

00000770 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     770:	movs	r3, #0
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
     772:	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
     774:	ldr	r4, [pc, #68]	; (7bc <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
     776:	strb	r1, [r0, #9]
     778:	str	r2, [r0, #16]
     77a:	str	r4, [r0, #0]
			active = false;
     77c:	strb	r3, [r0, #8]
			destination_list = NULL;
     77e:	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
     780:	cbz	r1, 794 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				inputQueue[i] = NULL;
     782:	mov	r1, r3
     784:	b.n	788 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
     786:	ldr	r2, [r0, #16]
     788:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     78c:	ldrb	r2, [r0, #9]
     78e:	adds	r3, #1
     790:	cmp	r2, r3
     792:	bgt.n	786 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     794:	ldr	r3, [pc, #40]	; (7c0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x50>)
     796:	ldr	r2, [r3, #0]
     798:	cbnz	r2, 79e <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
     79a:	b.n	7b6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x46>
     79c:	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     79e:	ldr	r3, [r2, #20]
     7a0:	cmp	r3, #0
     7a2:	bne.n	79c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
				p->next_update = this;
     7a4:	str	r0, [r2, #20]
			}
			next_update = NULL;
     7a6:	movs	r3, #0
     7a8:	str	r3, [r0, #20]
			cpu_cycles = 0;
     7aa:	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
     7ac:	strh	r3, [r0, #6]
			numConnections = 0;
     7ae:	strb	r3, [r0, #10]
		}
     7b0:	ldr.w	r4, [sp], #4
     7b4:	bx	lr
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     7b6:	str	r0, [r3, #0]
     7b8:	b.n	7a6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
     7ba:	nop
     7bc:	.word	0x00012dec
     7c0:	.word	0x20019b88

000007c4 <modifyADCS(short, unsigned short, unsigned short, unsigned short)>:
#endif
  __enable_irq();
}
//
 void modifyADCS(int16_t res, uint16_t avg, uint16_t diff, uint16_t hspd)
 { // Mono only
     7c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// stop PDB
  uint32_t ch0c1 = PDB0_CH0C1; // keep old value
     7c8:	ldr.w	ip, [pc, #456]	; 994 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1d0>
  uint32_t ch1c1 = PDB0_CH1C1; // keep old value
     7cc:	ldr	r6, [pc, #344]	; (928 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x164>)
  PDB0_CH0C1 = 0;   // disable ADC triggering
  PDB0_CH1C1 = 0;   // disable ADC triggering
  PDB0_SC &= ~PDB_SC_PDBEN;
     7ce:	ldr	r7, [pc, #348]	; (92c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x168>)
}
//
 void modifyADCS(int16_t res, uint16_t avg, uint16_t diff, uint16_t hspd)
 { // Mono only
// stop PDB
  uint32_t ch0c1 = PDB0_CH0C1; // keep old value
     7d0:	ldr.w	r4, [ip]
  uint32_t ch1c1 = PDB0_CH1C1; // keep old value
     7d4:	ldr	r5, [r6, #0]
  PDB0_CH0C1 = 0;   // disable ADC triggering
     7d6:	mov.w	lr, #0
     7da:	str.w	lr, [ip]
  PDB0_CH1C1 = 0;   // disable ADC triggering
     7de:	str.w	lr, [r6]
  PDB0_SC &= ~PDB_SC_PDBEN;
     7e2:	ldr	r6, [r7, #0]
     7e4:	bic.w	r6, r6, #128	; 0x80
     7e8:	str	r6, [r7, #0]
#endif
  __enable_irq();
}
//
 void modifyADCS(int16_t res, uint16_t avg, uint16_t diff, uint16_t hspd)
 { // Mono only
     7ea:	mov	r8, r1
     7ec:	mov	r7, r3
     7ee:	mov	r6, r2
  uint32_t ch1c1 = PDB0_CH1C1; // keep old value
  PDB0_CH0C1 = 0;   // disable ADC triggering
  PDB0_CH1C1 = 0;   // disable ADC triggering
  PDB0_SC &= ~PDB_SC_PDBEN;

  analogReadRes(res);
     7f0:	bl	9020 <analogReadRes>
  analogReference(INTERNAL); // range 0 to 1.2 volts
     7f4:	movs	r0, #2
     7f6:	bl	8fd4 <analogReference>
  analogReadAveraging(avg);
     7fa:	mov	r0, r8
     7fc:	bl	9088 <analogReadAveraging>

static void analogWaitForCal(void)
{ uint16_t sum;

#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
  while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) { }
     800:	ldr	r1, [pc, #300]	; (930 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x16c>)
     802:	ldr	r3, [pc, #304]	; (934 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x170>)
     804:	ldr	r2, [r1, #0]
     806:	lsls	r0, r2, #24
     808:	bmi.n	804 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x40>
     80a:	ldr	r2, [r3, #0]
     80c:	lsls	r2, r2, #24
     80e:	bmi.n	804 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x40>
#elif defined(HAS_KINETIS_ADC0)
  while (ADC0_SC3 & ADC_SC3_CAL) { }
#endif
  __disable_irq();
     810:	cpsid	i
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
     812:	ldr	r1, [pc, #292]	; (938 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x174>)
     814:	ldr	r3, [pc, #292]	; (93c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x178>)
     816:	ldr	r2, [pc, #296]	; (940 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x17c>)
     818:	ldr.w	lr, [r1]
     81c:	ldr	r3, [r3, #0]
     81e:	ldr	r2, [r2, #0]
     820:	ldr	r0, [r1, #12]
    sum = (sum / 2) | 0x8000;
     822:	add	r3, lr
  while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) { }
#elif defined(HAS_KINETIS_ADC0)
  while (ADC0_SC3 & ADC_SC3_CAL) { }
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
     824:	adds	r1, #16
    sum = (sum / 2) | 0x8000;
     826:	add	r3, r2
  while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) { }
#elif defined(HAS_KINETIS_ADC0)
  while (ADC0_SC3 & ADC_SC3_CAL) { }
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
     828:	ldr	r2, [pc, #280]	; (944 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x180>)
     82a:	ldr	r1, [r1, #0]
     82c:	ldr	r2, [r2, #0]
    sum = (sum / 2) | 0x8000;
     82e:	add	r3, r0
     830:	add	r3, r1
     832:	add	r3, r2
     834:	ubfx	r3, r3, #1, #15
    ADC0_PG = sum;
     838:	ldr	r2, [pc, #268]	; (948 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x184>)
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     83a:	ldr	r1, [pc, #272]	; (94c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x188>)
     83c:	ldr	r0, [pc, #272]	; (950 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x18c>)
  while (ADC0_SC3 & ADC_SC3_CAL) { }
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC0_PG = sum;
     83e:	orr.w	r3, r3, #32768	; 0x8000
     842:	str	r3, [r2, #0]
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     844:	adds	r2, #52	; 0x34
     846:	ldr.w	lr, [r0]
     84a:	ldr	r3, [r1, #0]
     84c:	ldr	r2, [r2, #0]
     84e:	ldr	r0, [r1, #8]
    sum = (sum / 2) | 0x8000;
     850:	add	r3, lr
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     852:	adds	r1, #12
    sum = (sum / 2) | 0x8000;
     854:	add	r3, r2
#endif
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
     856:	ldr	r2, [pc, #252]	; (954 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x190>)
     858:	ldr	r1, [r1, #0]
     85a:	ldr	r2, [r2, #0]
    sum = (sum / 2) | 0x8000;
     85c:	add	r3, r0
     85e:	add	r3, r1
     860:	add	r3, r2
    ADC0_MG = sum;
     862:	ldr	r0, [pc, #244]	; (958 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x194>)
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     864:	ldr	r1, [pc, #244]	; (95c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x198>)
     866:	ldr	r2, [pc, #248]	; (960 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x19c>)
  __disable_irq();
    sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    sum = (sum / 2) | 0x8000;
     868:	ubfx	r3, r3, #1, #15
    ADC0_MG = sum;
     86c:	orr.w	r3, r3, #32768	; 0x8000
     870:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     872:	ldr	r3, [pc, #240]	; (964 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1a0>)
     874:	ldr.w	lr, [r1]
     878:	ldr	r2, [r2, #0]
     87a:	ldr	r3, [r3, #0]
     87c:	ldr	r0, [r1, #12]
    sum = (sum / 2) | 0x8000;
     87e:	add	r2, lr
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    sum = (sum / 2) | 0x8000;
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     880:	adds	r1, #16
    sum = (sum / 2) | 0x8000;
     882:	add	r2, r3
    ADC0_PG = sum;
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    sum = (sum / 2) | 0x8000;
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
     884:	ldr	r3, [pc, #224]	; (968 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1a4>)
     886:	ldr	r1, [r1, #0]
     888:	ldr	r3, [r3, #0]
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     88a:	ldr.w	lr, [pc, #272]	; 99c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1d8>
    sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    sum = (sum / 2) | 0x8000;
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
     88e:	add	r2, r0
     890:	add	r2, r1
     892:	add	r2, r3
     894:	ubfx	r2, r2, #1, #15
    ADC1_PG = sum;
     898:	ldr	r3, [pc, #208]	; (96c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1a8>)
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     89a:	ldr	r0, [pc, #212]	; (970 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1ac>)
     89c:	ldr	r1, [pc, #212]	; (974 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1b0>)
    sum = (sum / 2) | 0x8000;
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
     89e:	orr.w	r2, r2, #32768	; 0x8000
     8a2:	str	r2, [r3, #0]
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     8a4:	adds	r3, #52	; 0x34
     8a6:	ldr	r1, [r1, #0]
     8a8:	ldr	r2, [r0, #0]
     8aa:	ldr	r3, [r3, #0]
     8ac:	adds	r0, #8
    sum = (sum / 2) | 0x8000;
     8ae:	add	r2, r1
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     8b0:	ldr	r0, [r0, #0]
     8b2:	ldr	r1, [pc, #196]	; (978 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1b4>)
    sum = (sum / 2) | 0x8000;
     8b4:	add	r2, r3
    ADC0_MG = sum;
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
     8b6:	ldr.w	r3, [lr]
     8ba:	ldr	r1, [r1, #0]
    sum = (sum / 2) | 0x8000;
     8bc:	add	r2, r0
     8be:	add	r2, r3
     8c0:	add	r2, r1
    ADC1_MG = sum;
     8c2:	ldr	r3, [pc, #184]	; (97c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1b8>)
#ifdef HAS_KINETIS_ADC1
    sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    sum = (sum / 2) | 0x8000;
    ADC1_PG = sum;
    sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    sum = (sum / 2) | 0x8000;
     8c4:	ubfx	r2, r2, #1, #15
    ADC1_MG = sum;
     8c8:	orr.w	r2, r2, #32768	; 0x8000
     8cc:	str	r2, [r3, #0]
#endif
  __enable_irq();
     8ce:	cpsie	i
  //
//  while(ADC0_SC2&ADC_SC2_ADACT);
//    (void)ADC0_RA;
//    (void)ADC0_RB;

  if(diff)
     8d0:	cbnz	r6, 91c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x158>
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
     8d2:	cbz	r7, 8de <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x11a>
    ADC0_CFG2 |= ADC_CFG2_ADHSC;
     8d4:	ldr	r2, [pc, #168]	; (980 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1bc>)
     8d6:	ldr	r3, [r2, #0]
     8d8:	orr.w	r3, r3, #4
     8dc:	str	r3, [r2, #0]

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8de:	ldr	r1, [pc, #164]	; (984 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1c0>)
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8e0:	ldr	r2, [pc, #164]	; (988 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1c4>)
  if(diff)
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
    ADC0_CFG2 |= ADC_CFG2_ADHSC;

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8e2:	ldr	r3, [r1, #0]
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger

// restart PDB
  (void)ADC0_RA;
     8e4:	ldr	r7, [pc, #164]	; (98c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1c8>)
  (void)ADC1_RA;
     8e6:	ldr	r6, [pc, #168]	; (990 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1cc>)
  PDB0_CH0C1 = ch0c1;
     8e8:	ldr	r0, [pc, #168]	; (994 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1d0>)
  if(diff)
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
    ADC0_CFG2 |= ADC_CFG2_ADHSC;

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8ea:	orr.w	r3, r3, #68	; 0x44
     8ee:	str	r3, [r1, #0]
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8f0:	ldr	r3, [r2, #0]

// restart PDB
  (void)ADC0_RA;
  (void)ADC1_RA;
  PDB0_CH0C1 = ch0c1;
  PDB0_CH1C1 = ch1c1;
     8f2:	sub.w	r1, r1, #20352	; 0x4f80
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
    ADC0_CFG2 |= ADC_CFG2_ADHSC;

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8f6:	orr.w	r3, r3, #68	; 0x44

// restart PDB
  (void)ADC0_RA;
  (void)ADC1_RA;
  PDB0_CH0C1 = ch0c1;
  PDB0_CH1C1 = ch1c1;
     8fa:	subs	r1, #104	; 0x68
    ADC0_SC1A |= ADC_SC1_DIFF;
  if(hspd)
    ADC0_CFG2 |= ADC_CFG2_ADHSC;

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
     8fc:	str	r3, [r2, #0]
// restart PDB
  (void)ADC0_RA;
  (void)ADC1_RA;
  PDB0_CH0C1 = ch0c1;
  PDB0_CH1C1 = ch1c1;
  PDB0_SC |= PDB_SC_PDBEN ;
     8fe:	ldr	r3, [pc, #44]	; (92c <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x168>)

  ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger
  ADC1_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;  // reassert HW trigger

// restart PDB
  (void)ADC0_RA;
     900:	ldr	r2, [r7, #0]
  (void)ADC1_RA;
     902:	ldr	r2, [r6, #0]
  PDB0_CH0C1 = ch0c1;
     904:	str	r4, [r0, #0]
  PDB0_CH1C1 = ch1c1;
     906:	str	r5, [r1, #0]
  PDB0_SC |= PDB_SC_PDBEN ;
     908:	ldr	r2, [r3, #0]
     90a:	orr.w	r2, r2, #128	; 0x80
     90e:	str	r2, [r3, #0]
  PDB0_SC |= PDB_SC_SWTRIG ;  // kick off the PDB  - just once  
     910:	ldr	r2, [r3, #0]
     912:	orr.w	r2, r2, #65536	; 0x10000
     916:	str	r2, [r3, #0]
 }
     918:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
//  while(ADC0_SC2&ADC_SC2_ADACT);
//    (void)ADC0_RA;
//    (void)ADC0_RB;

  if(diff)
    ADC0_SC1A |= ADC_SC1_DIFF;
     91c:	ldr	r2, [pc, #120]	; (998 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x1d4>)
     91e:	ldr	r3, [r2, #0]
     920:	orr.w	r3, r3, #32
     924:	str	r3, [r2, #0]
     926:	b.n	8d2 <modifyADCS(short, unsigned short, unsigned short, unsigned short)+0x10e>
     928:	.word	0x40036038
     92c:	.word	0x40036000
     930:	.word	0x4003b024
     934:	.word	0x400bb024
     938:	.word	0x4003b038
     93c:	.word	0x4003b03c
     940:	.word	0x4003b040
     944:	.word	0x4003b04c
     948:	.word	0x4003b02c
     94c:	.word	0x4003b05c
     950:	.word	0x4003b058
     954:	.word	0x4003b06c
     958:	.word	0x4003b030
     95c:	.word	0x400bb038
     960:	.word	0x400bb03c
     964:	.word	0x400bb040
     968:	.word	0x400bb04c
     96c:	.word	0x400bb02c
     970:	.word	0x400bb05c
     974:	.word	0x400bb058
     978:	.word	0x400bb06c
     97c:	.word	0x400bb030
     980:	.word	0x4003b00c
     984:	.word	0x4003b020
     988:	.word	0x400bb020
     98c:	.word	0x4003b010
     990:	.word	0x400bb010
     994:	.word	0x40036010
     998:	.word	0x4003b000
     99c:	.word	0x400bb068

000009a0 <makeFilename(char*)>:
  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
}

char *makeFilename(char * prefix)
{ static char filename[40];
     9a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     9a4:	sub	sp, #28
     9a6:	mov	r4, r0

  sprintf(filename, "%s_%04d_%02d_%02d_%02d_%02d_%02d%s", prefix, 
     9a8:	bl	27dc <year()>
     9ac:	mov	r5, r0
     9ae:	bl	27bc <month()>
     9b2:	mov	r9, r0
     9b4:	bl	279c <day()>
     9b8:	mov	r6, r0
     9ba:	bl	273c <hour()>
     9be:	mov	r7, r0
     9c0:	bl	275c <minute()>
     9c4:	mov	r8, r0
     9c6:	bl	277c <second()>
                    year(), month(), day(), hour(), minute(), second(), postfix);
     9ca:	ldr	r1, [pc, #96]	; (a2c <makeFilename(char*)+0x8c>)
     9cc:	str	r0, [sp, #16]
     9ce:	mov	r2, r4
     9d0:	mov	r3, r5
     9d2:	str	r1, [sp, #20]
     9d4:	str.w	r9, [sp]
     9d8:	ldr	r1, [pc, #84]	; (a30 <makeFilename(char*)+0x90>)
     9da:	str.w	r8, [sp, #12]
     9de:	str	r7, [sp, #8]
     9e0:	str	r6, [sp, #4]
     9e2:	ldr	r0, [pc, #80]	; (a34 <makeFilename(char*)+0x94>)
     9e4:	bl	c664 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9e8:	ldr	r0, [pc, #72]	; (a34 <makeFilename(char*)+0x94>)
     9ea:	bl	c8c0 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     9ee:	mov	r1, r0
     9f0:	ldr	r0, [pc, #64]	; (a34 <makeFilename(char*)+0x94>)
     9f2:	bl	8ba8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     9f6:	ldr	r0, [pc, #64]	; (a38 <makeFilename(char*)+0x98>)
     9f8:	bl	a684 <Print::println()>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9fc:	ldr	r0, [pc, #52]	; (a34 <makeFilename(char*)+0x94>)
     9fe:	bl	c8c0 <strlen>
     a02:	ldr	r1, [pc, #56]	; (a3c <makeFilename(char*)+0x9c>)
     a04:	mov	r2, r0
     a06:	ldr	r0, [r1, #72]	; 0x48
     a08:	cbz	r0, a1e <makeFilename(char*)+0x7e>
     a0a:	ldr	r1, [pc, #40]	; (a34 <makeFilename(char*)+0x94>)
     a0c:	bl	5db0 <FatFile::write(void const*, unsigned int)>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     a10:	ldr	r0, [pc, #40]	; (a3c <makeFilename(char*)+0x9c>)
     a12:	bl	a684 <Print::println()>
  #endif
  #if DO_DEBUG>1
    logFile.println(filename);
  #endif
  return filename;  
}
     a16:	ldr	r0, [pc, #28]	; (a34 <makeFilename(char*)+0x94>)
     a18:	add	sp, #28
     a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     a1e:	ldr	r0, [r1, #76]	; 0x4c
     a20:	cmp	r0, #0
     a22:	beq.n	a10 <makeFilename(char*)+0x70>
     a24:	ldr	r1, [pc, #12]	; (a34 <makeFilename(char*)+0x94>)
     a26:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
     a2a:	b.n	a10 <makeFilename(char*)+0x70>
     a2c:	.word	0x20013738
     a30:	.word	0x00012e7c
     a34:	.word	0x2001927c
     a38:	.word	0x200138e4
     a3c:	.word	0x200193fc

00000a40 <wavHeader(unsigned long)>:

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     a40:	ldr	r3, [pc, #80]	; (a94 <wavHeader(unsigned long)+0x54>)
     a42:	ldr	r1, [pc, #84]	; (a98 <wavHeader(unsigned long)+0x58>)
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     a44:	ldr	r2, [pc, #84]	; (a9c <wavHeader(unsigned long)+0x5c>)

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     a46:	push	{r4, r5, r6, r7}
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     a48:	str	r2, [r3, #28]

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     a4a:	mov	r2, r0

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     a4c:	ldmia	r1, {r0, r1}
  strcpy(wheader+8,"WAVE");
     a4e:	ldr	r6, [pc, #80]	; (aa0 <wavHeader(unsigned long)+0x60>)

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     a50:	str	r0, [r3, #0]
  strcpy(wheader+8,"WAVE");
     a52:	ldmia.w	r6, {r0, r1}
  strcpy(wheader+12,"fmt ");
     a56:	ldr	r5, [pc, #76]	; (aa4 <wavHeader(unsigned long)+0x64>)
  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
     a58:	str	r0, [r3, #8]
  strcpy(wheader+12,"fmt ");
     a5a:	ldmia.w	r5, {r0, r1}
  strcpy(wheader+36,"data");
     a5e:	ldr	r4, [pc, #72]	; (aa8 <wavHeader(unsigned long)+0x68>)
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
     a60:	str	r0, [r3, #12]
  strcpy(wheader+36,"data");
     a62:	ldmia.w	r4, {r0, r1}
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     a66:	subs	r2, #44	; 0x2c
     a68:	bic.w	r2, r2, #1
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     a6c:	movs	r4, #16
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     a6e:	add.w	r7, r2, #36	; 0x24
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     a72:	movw	r6, #48000	; 0xbb80
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     a76:	movs	r5, #2
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     a78:	movs	r1, #1
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
     a7a:	str	r0, [r3, #36]	; 0x24
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     a7c:	str	r7, [r3, #4]
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     a7e:	str	r6, [r3, #24]
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     a80:	strh	r5, [r3, #32]
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     a82:	str	r4, [r3, #16]
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
     a84:	strh	r4, [r3, #34]	; 0x22
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     a86:	mov	r0, r3
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     a88:	str	r2, [r3, #40]	; 0x28
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     a8a:	strh	r1, [r3, #20]
  *(int16_t*)(wheader+22)=nchan;// numChannels 
     a8c:	strh	r1, [r3, #22]
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     a8e:	pop	{r4, r5, r6, r7}
     a90:	bx	lr
     a92:	nop
     a94:	.word	0x200192cc
     a98:	.word	0x00012ec0
     a9c:	.word	0x00017700
     aa0:	.word	0x00012ec8
     aa4:	.word	0x00012ed0
     aa8:	.word	0x00012ed8

00000aac <c_uSD::init()>:
  nbuf=0;
  state=0;
}
*/
void c_uSD::init()
{
     aac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ab0:	mov	r9, r0
     ab2:	sub	sp, #68	; 0x44
  delay(200);
     ab4:	movs	r0, #200	; 0xc8
     ab6:	bl	940c <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     aba:	movs	r4, #32
     abc:	ldr	r7, [pc, #348]	; (c1c <c_uSD::init()+0x170>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     abe:	ldr	r6, [pc, #352]	; (c20 <c_uSD::init()+0x174>)
     ac0:	add.w	r8, r9, #1168	; 0x490
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     ac4:	mov	r5, r4
  int SD_success = 0;
     ac6:	mov.w	sl, #0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     aca:	mov.w	r1, #0
     ace:	mov	r0, r8
     ad0:	bl	814c <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     ad4:	str.w	r8, [r9, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     ad8:	cmp.w	r8, #0
     adc:	beq.n	ae6 <c_uSD::init()+0x3a>
     ade:	mov	r0, r8
     ae0:	bl	788c <SdioCard::errorCode() const>
     ae4:	cbz	r0, b1e <c_uSD::init()+0x72>
  char SD_filename[24];

  while (!sd.begin(SD_CONFIG))
  {
     // configure pin 13 for LED      
     pinMode(13,OUTPUT);
     ae6:	movs	r1, #1
     ae8:	movs	r0, #13
     aea:	bl	93bc <pinMode>
     aee:	mov.w	fp, #8
     for(int idx = 0; idx < 8; idx++)
     {
         digitalWriteFast(13,HIGH);
         delay(200);
     af2:	movs	r0, #200	; 0xc8
     af4:	str	r5, [r7, #0]
     af6:	bl	940c <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     afa:	str	r4, [r6, #0]
         digitalWriteFast(13,LOW);
         delay(200);
     afc:	movs	r0, #200	; 0xc8
     afe:	bl	940c <delay>

  while (!sd.begin(SD_CONFIG))
  {
     // configure pin 13 for LED      
     pinMode(13,OUTPUT);
     for(int idx = 0; idx < 8; idx++)
     b02:	subs.w	fp, fp, #1
     b06:	bne.n	af2 <c_uSD::init()+0x46>
         digitalWriteFast(13,HIGH);
         delay(200);
         digitalWriteFast(13,LOW);
         delay(200);
     }
     delay(5000);
     b08:	movw	r0, #5000	; 0x1388
     b0c:	bl	940c <delay>
     SD_success++;
     // reconfigure pin 13 for I2S
     CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
     b10:	ldr	r2, [pc, #272]	; (c24 <c_uSD::init()+0x178>)
     b12:	mov.w	r3, #1024	; 0x400
         delay(200);
         digitalWriteFast(13,LOW);
         delay(200);
     }
     delay(5000);
     SD_success++;
     b16:	add.w	sl, sl, #1
     // reconfigure pin 13 for I2S
     CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
     b1a:	str	r3, [r2, #0]
  delay(200);
  int SD_success = 0;
  char text[32];
  char SD_filename[24];

  while (!sd.begin(SD_CONFIG))
     b1c:	b.n	aca <c_uSD::init()+0x1e>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     b1e:	ldr.w	r1, [r9, #1164]	; 0x48c
     b22:	mov	r0, r9
     b24:	bl	6ef0 <FsVolume::begin(BlockDeviceInterface*)>
     b28:	cmp	r0, #0
     b2a:	beq.n	ae6 <c_uSD::init()+0x3a>
     SD_success++;
     // reconfigure pin 13 for I2S
     CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
  }

  sprintf(SD_filename, "SD_s_%s.txt", acqParameters.name);
     b2c:	ldr	r1, [pc, #248]	; (c28 <c_uSD::init()+0x17c>)
     b2e:	ldr	r2, [pc, #252]	; (c2c <c_uSD::init()+0x180>)
     b30:	add	r0, sp, #8
     b32:	bl	c664 <sprintf>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     b36:	ldr	r3, [pc, #248]	; (c30 <c_uSD::init()+0x184>)
     b38:	ldr	r1, [r3, #0]
  file.open(SD_filename, O_CREAT|O_WRITE|O_APPEND);
     b3a:	addw	r4, r9, #1220	; 0x4c4
     b3e:	cbz	r1, b4c <c_uSD::init()+0xa0>
     b40:	add	r2, sp, #8
     b42:	movw	r3, #521	; 0x209
     b46:	mov	r0, r4
     b48:	bl	6e10 <FsBaseFile::open(FsVolume*, char const*, int)>
    sprintf(text, "%04d_%02d_%02d,", year(), month(), day());  file.write((char*)text, strlen(text));
     b4c:	bl	27dc <year()>
     b50:	mov	r5, r0
     b52:	bl	27bc <month()>
     b56:	mov	r6, r0
     b58:	bl	279c <day()>
     b5c:	mov	r2, r5
     b5e:	str	r0, [sp, #0]
     b60:	mov	r3, r6
     b62:	ldr	r1, [pc, #208]	; (c34 <c_uSD::init()+0x188>)
     b64:	add	r0, sp, #32
     b66:	bl	c664 <sprintf>
     b6a:	add	r0, sp, #32
     b6c:	bl	c8c0 <strlen>
     b70:	mov	r2, r0
     b72:	ldr.w	r0, [r9, #1276]	; 0x4fc
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     b76:	cmp	r0, #0
     b78:	beq.n	bec <c_uSD::init()+0x140>
     b7a:	add	r1, sp, #32
     b7c:	bl	5db0 <FatFile::write(void const*, unsigned int)>
    sprintf(text, "%02d_%02d_%02d,", hour(), minute(), second());   file.write((char*)text, strlen(text));
     b80:	bl	273c <hour()>
     b84:	mov	r5, r0
     b86:	bl	275c <minute()>
     b8a:	mov	r6, r0
     b8c:	bl	277c <second()>
     b90:	mov	r2, r5
     b92:	mov	r3, r6
     b94:	str	r0, [sp, #0]
     b96:	ldr	r1, [pc, #160]	; (c38 <c_uSD::init()+0x18c>)
     b98:	add	r0, sp, #32
     b9a:	bl	c664 <sprintf>
     b9e:	add	r0, sp, #32
     ba0:	bl	c8c0 <strlen>
     ba4:	mov	r2, r0
     ba6:	ldr.w	r0, [r9, #1276]	; 0x4fc
     baa:	cbz	r0, c0c <c_uSD::init()+0x160>
     bac:	add	r1, sp, #32
     bae:	bl	5db0 <FatFile::write(void const*, unsigned int)>
    sprintf(text, "%10d\r\n", SD_success);          file.write((char*)text, strlen(text));
     bb2:	mov	r2, sl
     bb4:	ldr	r1, [pc, #132]	; (c3c <c_uSD::init()+0x190>)
     bb6:	add	r0, sp, #32
     bb8:	bl	c664 <sprintf>
     bbc:	add	r0, sp, #32
     bbe:	bl	c8c0 <strlen>
     bc2:	mov	r2, r0
     bc4:	ldr.w	r0, [r9, #1276]	; 0x4fc
     bc8:	cbz	r0, bfc <c_uSD::init()+0x150>
     bca:	add	r1, sp, #32
     bcc:	bl	5db0 <FatFile::write(void const*, unsigned int)>
  file.close(); 
     bd0:	mov	r0, r4
     bd2:	bl	6de8 <FsBaseFile::close()>
  
  // Set Time callback
  FsDateTime::callback = dateTime;
     bd6:	ldr	r3, [pc, #104]	; (c40 <c_uSD::init()+0x194>)
     bd8:	ldr	r2, [pc, #104]	; (c44 <c_uSD::init()+0x198>)
     bda:	str	r2, [r3, #0]
  //
  nbuf=0;
     bdc:	movs	r3, #0
     bde:	strh.w	r3, [r9, #1286]	; 0x506
  state=0;
     be2:	strh.w	r3, [r9, #1284]	; 0x504
}
     be6:	add	sp, #68	; 0x44
     be8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bec:	ldr.w	r0, [r9, #1280]	; 0x500
     bf0:	cmp	r0, #0
     bf2:	beq.n	b80 <c_uSD::init()+0xd4>
     bf4:	add	r1, sp, #32
     bf6:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
     bfa:	b.n	b80 <c_uSD::init()+0xd4>
     bfc:	ldr.w	r0, [r9, #1280]	; 0x500
     c00:	cmp	r0, #0
     c02:	beq.n	bd0 <c_uSD::init()+0x124>
     c04:	add	r1, sp, #32
     c06:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
     c0a:	b.n	bd0 <c_uSD::init()+0x124>
     c0c:	ldr.w	r0, [r9, #1280]	; 0x500
     c10:	cmp	r0, #0
     c12:	beq.n	bb2 <c_uSD::init()+0x106>
     c14:	add	r1, sp, #32
     c16:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
     c1a:	b.n	bb2 <c_uSD::init()+0x106>
     c1c:	.word	0x400ff084
     c20:	.word	0x400ff088
     c24:	.word	0x4004b014
     c28:	.word	0x00012f08
     c2c:	.word	0x20013784
     c30:	.word	0x20019a1c
     c34:	.word	0x00012ee0
     c38:	.word	0x00012ef0
     c3c:	.word	0x00012f00
     c40:	.word	0x20019a10
     c44:	.word	0x00000499

00000c48 <c_uSD::close()>:
    state=close();
  }
  return state;
}
int16_t c_uSD::close(void)
{   // close file
     c48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c4c:	mov	r5, r0
     c4e:	ldr.w	r0, [r0, #1276]	; 0x4fc
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     c52:	cmp	r0, #0
     c54:	beq.n	cda <c_uSD::close()+0x92>
     c56:	bl	5d38 <FatFile::truncate()>
     c5a:	ldr.w	r3, [r5, #1276]	; 0x4fc
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c5e:	cmp	r3, #0
     c60:	beq.n	cec <c_uSD::close()+0xa4>
     c62:	ldr.w	sl, [r3, #28]
     c66:	mov.w	r9, #0
     c6a:	mov	r8, sl
    file.truncate();
    #ifdef GEN_WAV_FILE
       uint32_t fileSize = file.size();
       memcpy(header,wavHeader(fileSize),44);
     c6c:	mov	r0, sl
     c6e:	bl	a40 <wavHeader(unsigned long)>
     c72:	ldr	r7, [pc, #216]	; (d4c <c_uSD::close()+0x104>)
     c74:	mov	r4, r0
     c76:	add.w	lr, r0, #32
     c7a:	ldr	r0, [r4, #0]
     c7c:	ldr	r1, [r4, #4]
     c7e:	ldr	r2, [r4, #8]
     c80:	ldr	r3, [r4, #12]
     c82:	mov	r6, r7
     c84:	stmia	r6!, {r0, r1, r2, r3}
     c86:	adds	r4, #16
     c88:	cmp	r4, lr
     c8a:	mov	r7, r6
     c8c:	bne.n	c7a <c_uSD::close()+0x32>
     c8e:	ldr	r0, [r4, #0]
     c90:	ldr	r1, [r4, #4]
     c92:	ldr	r2, [r4, #8]
     c94:	stmia	r7!, {r0, r1, r2}
     c96:	ldr.w	r0, [r5, #1276]	; 0x4fc
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     c9a:	cmp	r0, #0
     c9c:	beq.n	d20 <c_uSD::close()+0xd8>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c9e:	movs	r1, #0
     ca0:	bl	5b24 <FatFile::seekSet(unsigned long)>
     ca4:	ldr.w	r0, [r5, #1276]	; 0x4fc
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     ca8:	cbz	r0, cfe <c_uSD::close()+0xb6>
     caa:	mov.w	r2, #512	; 0x200
     cae:	ldr	r1, [pc, #156]	; (d4c <c_uSD::close()+0x104>)
     cb0:	bl	5db0 <FatFile::write(void const*, unsigned int)>
     cb4:	ldr.w	r0, [r5, #1276]	; 0x4fc
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     cb8:	cbnz	r0, d18 <c_uSD::close()+0xd0>
     cba:	ldr.w	r0, [r5, #1280]	; 0x500
     cbe:	cbz	r0, cc8 <c_uSD::close()+0x80>
     cc0:	mov	r2, r8
     cc2:	mov	r3, r9
     cc4:	bl	3c6c <ExFatFile::seekSet(unsigned long long)>
       file.seek(0);
       file.write(header,512);
       file.seek(fileSize);
    #endif
    file.close();
     cc8:	addw	r0, r5, #1220	; 0x4c4
     ccc:	bl	6de8 <FsBaseFile::close()>
//#if DO_DEBUG>0
//    Serial.println("file Closed");    
//#endif
    state=0;  // flag to open new file
     cd0:	movs	r0, #0
     cd2:	strh.w	r0, [r5, #1284]	; 0x504
    return state;
}
     cd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     cda:	ldr.w	r0, [r5, #1280]	; 0x500
     cde:	cbz	r0, d32 <c_uSD::close()+0xea>
     ce0:	bl	4e8c <ExFatFile::truncate()>
     ce4:	ldr.w	r3, [r5, #1276]	; 0x4fc
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     ce8:	cmp	r3, #0
     cea:	bne.n	c62 <c_uSD::close()+0x1a>
     cec:	ldr.w	r3, [r5, #1280]	; 0x500
     cf0:	cbz	r3, d3e <c_uSD::close()+0xf6>
     cf2:	ldrd	r8, r9, [r3, #16]
     cf6:	mov.w	r9, #0
     cfa:	mov	sl, r8
     cfc:	b.n	c6c <c_uSD::close()+0x24>
     cfe:	ldr.w	r0, [r5, #1280]	; 0x500
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     d02:	cmp	r0, #0
     d04:	beq.n	cc8 <c_uSD::close()+0x80>
     d06:	mov.w	r2, #512	; 0x200
     d0a:	ldr	r1, [pc, #64]	; (d4c <c_uSD::close()+0x104>)
     d0c:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
     d10:	ldr.w	r0, [r5, #1276]	; 0x4fc
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     d14:	cmp	r0, #0
     d16:	beq.n	cba <c_uSD::close()+0x72>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     d18:	mov	r1, sl
     d1a:	bl	5b24 <FatFile::seekSet(unsigned long)>
     d1e:	b.n	cc8 <c_uSD::close()+0x80>
           m_xFile ? m_xFile->seekSet(pos) : false;
     d20:	ldr.w	r0, [r5, #1280]	; 0x500
     d24:	cmp	r0, #0
     d26:	beq.n	cc8 <c_uSD::close()+0x80>
     d28:	movs	r2, #0
     d2a:	movs	r3, #0
     d2c:	bl	3c6c <ExFatFile::seekSet(unsigned long long)>
     d30:	b.n	ca4 <c_uSD::close()+0x5c>
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     d32:	mov	sl, r0
     d34:	mov.w	r8, #0
     d38:	mov.w	r9, #0
     d3c:	b.n	c6c <c_uSD::close()+0x24>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     d3e:	mov	sl, r3
     d40:	mov.w	r8, #0
     d44:	mov.w	r9, #0
     d48:	b.n	c6c <c_uSD::close()+0x24>
     d4a:	nop
     d4c:	.word	0x2001507c

00000d50 <c_uSD::storeConfig(unsigned long*, int, long*, int)>:

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
     d50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     d54:	ldr	r4, [pc, #272]	; (e68 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x118>)
     d56:	sub	sp, #44	; 0x2c
     d58:	ldr	r4, [r4, #0]
     d5a:	ldr.w	r9, [sp, #80]	; 0x50
     d5e:	str	r3, [sp, #4]
     d60:	mov	r5, r0
     d62:	mov	sl, r1
     d64:	mov	r8, r2
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
     d66:	addw	fp, r0, #1220	; 0x4c4
     d6a:	cbz	r4, d7a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x2a>
     d6c:	mov	r1, r4
     d6e:	movw	r3, #1537	; 0x601
     d72:	ldr	r2, [pc, #248]	; (e6c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x11c>)
     d74:	mov	r0, fp
     d76:	bl	6e10 <FsBaseFile::open(FsVolume*, char const*, int)>
  for(int ii=0; ii<n1; ii++)
     d7a:	cmp.w	r8, #0
     d7e:	ble.n	e62 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x112>
     d80:	sub.w	r7, sl, #4
     d84:	movs	r6, #0
     d86:	add	r4, sp, #8
     d88:	b.n	d94 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     d8a:	bl	5db0 <FatFile::write(void const*, unsigned int)>
     d8e:	adds	r6, #1
     d90:	cmp	r8, r6
     d92:	beq.n	dce <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
     d94:	ldr.w	r2, [r7, #4]!
     d98:	ldr	r1, [pc, #212]	; (e70 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     d9a:	mov	r0, r4
     d9c:	bl	c664 <sprintf>
     da0:	mov	r0, r4
     da2:	bl	c8c0 <strlen>
     da6:	ldr.w	r3, [r5, #1276]	; 0x4fc
     daa:	mov	lr, r0
     dac:	mov	r2, r0
     dae:	mov	r1, r4
     db0:	mov	r0, r3
     db2:	cmp	r3, #0
     db4:	bne.n	d8a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3a>
     db6:	ldr.w	r3, [r5, #1280]	; 0x500
     dba:	mov	r2, lr
     dbc:	mov	r1, r4
     dbe:	mov	r0, r3
     dc0:	cmp	r3, #0
     dc2:	beq.n	d8e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3e>
}

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
     dc4:	adds	r6, #1
     dc6:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
     dca:	cmp	r8, r6
     dcc:	bne.n	d94 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     dce:	cmp.w	r9, #0
     dd2:	ble.n	e20 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
     dd4:	ldr	r3, [sp, #4]
     dd6:	movs	r6, #0
     dd8:	subs	r7, r3, #4
     dda:	b.n	de6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
     ddc:	bl	5db0 <FatFile::write(void const*, unsigned int)>
     de0:	adds	r6, #1
     de2:	cmp	r9, r6
     de4:	beq.n	e20 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
     de6:	ldr.w	r2, [r7, #4]!
     dea:	ldr	r1, [pc, #132]	; (e70 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     dec:	mov	r0, r4
     dee:	bl	c664 <sprintf>
     df2:	mov	r0, r4
     df4:	bl	c8c0 <strlen>
     df8:	ldr.w	r3, [r5, #1276]	; 0x4fc
     dfc:	mov	lr, r0
     dfe:	mov	r2, r0
     e00:	mov	r1, r4
     e02:	mov	r0, r3
     e04:	cmp	r3, #0
     e06:	bne.n	ddc <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x8c>
     e08:	ldr.w	r3, [r5, #1280]	; 0x500
     e0c:	mov	r2, lr
     e0e:	mov	r1, r4
     e10:	mov	r0, r3
     e12:	cmp	r3, #0
     e14:	beq.n	de0 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x90>
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     e16:	adds	r6, #1
     e18:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
     e1c:	cmp	r9, r6
     e1e:	bne.n	de6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
     e20:	add.w	r2, sl, r8, lsl #2
     e24:	ldr	r1, [pc, #76]	; (e74 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x124>)
     e26:	mov	r0, r4
     e28:	bl	c664 <sprintf>
     e2c:	ldr.w	r0, [r5, #1276]	; 0x4fc
     e30:	cbz	r0, e46 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xf6>
     e32:	mov	r1, r4
     e34:	movs	r2, #6
     e36:	bl	5db0 <FatFile::write(void const*, unsigned int)>
  file.write((uint8_t *)text,6);

  file.close();
     e3a:	mov	r0, fp
     e3c:	bl	6de8 <FsBaseFile::close()>
  
}
     e40:	add	sp, #44	; 0x2c
     e42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e46:	ldr.w	r0, [r5, #1280]	; 0x500
     e4a:	cmp	r0, #0
     e4c:	beq.n	e3a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xea>
     e4e:	mov	r1, r4
     e50:	movs	r2, #6
     e52:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
  file.write((uint8_t *)text,6);

  file.close();
     e56:	mov	r0, fp
     e58:	bl	6de8 <FsBaseFile::close()>
  
}
     e5c:	add	sp, #44	; 0x2c
     e5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e62:	add	r4, sp, #8
     e64:	b.n	dce <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
     e66:	nop
     e68:	.word	0x20019a1c
     e6c:	.word	0x00012f14
     e70:	.word	0x00012f00
     e74:	.word	0x00012f20

00000e78 <c_uSD::loadConfig(unsigned long*, int, long*, int)>:

void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
     e78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     e7c:	ldr	r4, [pc, #252]	; (f7c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x104>)
     e7e:	sub	sp, #44	; 0x2c
     e80:	ldr	r4, [r4, #0]
     e82:	ldr.w	r9, [sp, #80]	; 0x50
     e86:	cmp	r4, #0
     e88:	beq.n	f06 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
     e8a:	addw	fp, r0, #1220	; 0x4c4
     e8e:	str	r3, [sp, #4]
     e90:	mov	r8, r2
     e92:	mov	sl, r1
     e94:	mov	r5, r0
     e96:	mov	r1, r4
     e98:	mov	r0, fp
     e9a:	movs	r3, #0
     e9c:	ldr	r2, [pc, #224]	; (f80 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
     e9e:	bl	6e10 <FsBaseFile::open(FsVolume*, char const*, int)>
     ea2:	cbz	r0, f06 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8e>
  //
  for(int ii=0; ii<n1; ii++)
     ea4:	cmp.w	r8, #0
     ea8:	ldr.w	r3, [r5, #1276]	; 0x4fc
     eac:	ble.n	f0c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x94>
     eae:	mov	r7, sl
     eb0:	movs	r6, #0
     eb2:	add	r4, sp, #8
     eb4:	b.n	ed6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x5e>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     eb6:	bl	56e8 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
     eba:	cmp	r0, #0
     ebc:	ldr	r1, [pc, #196]	; (f84 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
     ebe:	ble.n	ec8 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x50>
     ec0:	mov	r2, r7
     ec2:	mov	r0, r4
     ec4:	bl	c6b0 <sscanf>
     ec8:	ldr.w	r3, [r5, #1276]	; 0x4fc
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
     ecc:	adds	r6, #1
     ece:	cmp	r8, r6
     ed0:	add.w	r7, r7, #4
     ed4:	beq.n	f0e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x96>
     ed6:	movs	r2, #12
     ed8:	mov	r1, r4
     eda:	mov	r0, r3
     edc:	cmp	r3, #0
     ede:	bne.n	eb6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
     ee0:	ldr.w	r0, [r5, #1280]	; 0x500
     ee4:	cmp	r0, #0
     ee6:	beq.n	ecc <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x54>
     ee8:	movs	r2, #12
     eea:	mov	r1, r4
     eec:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
     ef0:	b.n	eba <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x42>
     ef2:	cbz	r3, f56 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xde>
     ef4:	mov	r0, r3
     ef6:	movs	r2, #6
     ef8:	mov	r1, r4
     efa:	bl	56e8 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
     efe:	cbnz	r0, f68 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
  { text[5]=0;
    sscanf(text,"%s",(char *) &param1[n1]);
  }  
  file.close();
     f00:	mov	r0, fp
     f02:	bl	6de8 <FsBaseFile::close()>
}
     f06:	add	sp, #44	; 0x2c
     f08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f0c:	add	r4, sp, #8
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     f0e:	cmp.w	r9, #0
     f12:	ble.n	ef2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
     f14:	ldr	r6, [sp, #4]
     f16:	movs	r7, #0
     f18:	b.n	f3a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xc2>
     f1a:	bl	56e8 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
     f1e:	cmp	r0, #0
     f20:	ldr	r1, [pc, #96]	; (f84 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
     f22:	ble.n	f2c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb4>
     f24:	mov	r2, r6
     f26:	mov	r0, r4
     f28:	bl	c6b0 <sscanf>
     f2c:	ldr.w	r3, [r5, #1276]	; 0x4fc
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     f30:	adds	r7, #1
     f32:	cmp	r9, r7
     f34:	add.w	r6, r6, #4
     f38:	beq.n	ef2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x7a>
     f3a:	movs	r2, #12
     f3c:	mov	r1, r4
     f3e:	mov	r0, r3
     f40:	cmp	r3, #0
     f42:	bne.n	f1a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
     f44:	ldr.w	r0, [r5, #1280]	; 0x500
     f48:	cmp	r0, #0
     f4a:	beq.n	f30 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb8>
     f4c:	movs	r2, #12
     f4e:	mov	r1, r4
     f50:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
     f54:	b.n	f1e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa6>
     f56:	ldr.w	r0, [r5, #1280]	; 0x500
     f5a:	cbz	r0, f68 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xf0>
     f5c:	movs	r2, #6
     f5e:	mov	r1, r4
     f60:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
     f64:	cmp	r0, #0
     f66:	beq.n	f00 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
  { text[5]=0;
     f68:	movs	r3, #0
    sscanf(text,"%s",(char *) &param1[n1]);
     f6a:	add.w	r2, sl, r8, lsl #2
     f6e:	mov	r0, r4
     f70:	ldr	r1, [pc, #20]	; (f88 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x110>)
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)>0) sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
  { text[5]=0;
     f72:	strb.w	r3, [sp, #13]
    sscanf(text,"%s",(char *) &param1[n1]);
     f76:	bl	c6b0 <sscanf>
     f7a:	b.n	f00 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x88>
     f7c:	.word	0x20019a1c
     f80:	.word	0x00012f14
     f84:	.word	0x00012f28
     f88:	.word	0x00012e9c

00000f8c <setWakeupCallandSleep(unsigned long)>:
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     f8c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     f90:	ldr	r4, [pc, #308]	; (10c8 <setWakeupCallandSleep(unsigned long)+0x13c>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     f92:	ldr	r2, [pc, #312]	; (10cc <setWakeupCallandSleep(unsigned long)+0x140>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     f94:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     f96:	ldr	r1, [pc, #312]	; (10d0 <setWakeupCallandSleep(unsigned long)+0x144>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     f98:	ldr.w	r8, [pc, #376]	; 1114 <setWakeupCallandSleep(unsigned long)+0x188>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f9c:	ldr	r6, [pc, #308]	; (10d4 <setWakeupCallandSleep(unsigned long)+0x148>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     f9e:	orr.w	r3, r3, #536870912	; 0x20000000
     fa2:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     fa4:	ldr	r3, [r2, #0]
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     fa6:	ldr	r4, [pc, #304]	; (10d8 <setWakeupCallandSleep(unsigned long)+0x14c>)
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     fa8:	orr.w	r3, r3, #256	; 0x100
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     fac:	mov	r7, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     fae:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     fb0:	movs	r0, #21
     fb2:	bl	9354 <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     fb6:	ldr	r3, [pc, #292]	; (10dc <setWakeupCallandSleep(unsigned long)+0x150>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     fb8:	ldr.w	ip, [pc, #348]	; 1118 <setWakeupCallandSleep(unsigned long)+0x18c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
     fbc:	ldr	r1, [pc, #288]	; (10e0 <setWakeupCallandSleep(unsigned long)+0x154>)
  LLWU_PE3 = 0;
     fbe:	ldr	r0, [pc, #292]	; (10e4 <setWakeupCallandSleep(unsigned long)+0x158>)
  LLWU_PE4 = 0;
     fc0:	ldr	r2, [pc, #292]	; (10e8 <setWakeupCallandSleep(unsigned long)+0x15c>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     fc2:	ldr.w	lr, [pc, #344]	; 111c <setWakeupCallandSleep(unsigned long)+0x190>
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     fc6:	movs	r5, #32
     fc8:	strb	r5, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     fca:	mov.w	r3, #2097152	; 0x200000
     fce:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     fd2:	str	r3, [r4, #0]
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     fd4:	ldr	r3, [pc, #276]	; (10ec <setWakeupCallandSleep(unsigned long)+0x160>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     fd6:	movs	r4, #0
     fd8:	strb.w	r4, [lr]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     fdc:	mvn.w	ip, #1020	; 0x3fc
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
     fe0:	strb	r4, [r1, #0]
  LLWU_PE3 = 0;
     fe2:	strb	r4, [r0, #0]
  LLWU_PE4 = 0;
     fe4:	strb	r4, [r2, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     fe6:	strb	r4, [r3, #0]
  LLWU_PE6 = 0;
     fe8:	strb	r4, [r1, #4]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     fea:	sub.w	r1, r1, #216064	; 0x34c00
     fee:	add	r1, ip
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
  LLWU_PE7 = 0;
     ff0:	strb	r4, [r0, #4]
  LLWU_PE8 = 0;
     ff2:	strb	r4, [r2, #4]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
     ff4:	strb	r5, [r3, #4]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     ff6:	ldr	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     ff8:	ldr	r2, [pc, #244]	; (10f0 <setWakeupCallandSleep(unsigned long)+0x164>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
     ffa:	ldr.w	ip, [pc, #292]	; 1120 <setWakeupCallandSleep(unsigned long)+0x194>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     ffe:	orr.w	r3, r3, #67108864	; 0x4000000
    1002:	str	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
    1004:	ldr	r3, [r2, #0]
    1006:	orr.w	r3, r3, #1073741824	; 0x40000000
    100a:	str	r3, [r2, #0]
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
    100c:	add.w	r1, r1, #12288	; 0x3000
    PORTB_PCR3 = PORT_PCR_MUX(0);
    1010:	add.w	r2, r2, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    1014:	sub.w	lr, lr, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
    1018:	sub.w	r0, r0, #207872	; 0x32c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    101c:	sub.w	lr, lr, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
    1020:	subw	r0, r0, #1014	; 0x3f6

    PORTB_PCR2 = PORT_PCR_MUX(0);
    1024:	adds	r1, #4
    PORTB_PCR3 = PORT_PCR_MUX(0);
    1026:	adds	r2, #12
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    1028:	ldr	r3, [pc, #200]	; (10f4 <setWakeupCallandSleep(unsigned long)+0x168>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    102a:	str.w	r4, [r8]
    PORTA_PCR1 = PORT_PCR_MUX(0);
    102e:	str.w	r4, [ip]
    PORTA_PCR2 = PORT_PCR_MUX(0);
    1032:	str.w	r4, [lr]
    PORTA_PCR3 = PORT_PCR_MUX(0);
    1036:	str	r4, [r0, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
    1038:	str	r4, [r1, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
    103a:	str	r4, [r2, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    103c:	ldr	r3, [r3, #0]
    103e:	sub.w	r1, r1, #53248	; 0xd000
   RTC_IER |= RTC_IER_TAIE_MASK;
    1042:	sub.w	r2, r2, #52992	; 0xcf00
    1046:	subs	r2, #240	; 0xf0
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
    1048:	add	r3, r7
    104a:	str	r3, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
    104c:	ldr	r3, [r2, #0]
    104e:	orr.w	r3, r3, #4
    1052:	str	r3, [r2, #0]
void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
   rtcSetup();
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
    1054:	bl	a3e8 <yield>
    1058:	mov	r3, r4
    105a:	movs	r2, #10
    105c:	mov	r1, r7
    105e:	mov	r0, r6
    1060:	bl	a6d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1064:	mov	r0, r6
    1066:	bl	a684 <Print::println()>
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
    106a:	movs	r1, #1
    106c:	movs	r0, #13
    106e:	bl	93bc <pinMode>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1072:	ldr	r3, [pc, #132]	; (10f8 <setWakeupCallandSleep(unsigned long)+0x16c>)

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    1074:	ldr	r6, [pc, #132]	; (10fc <setWakeupCallandSleep(unsigned long)+0x170>)
    1076:	str	r5, [r3, #0]
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
    1078:	mov.w	r0, #1000	; 0x3e8
    107c:	bl	940c <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1080:	ldr	r3, [pc, #124]	; (1100 <setWakeupCallandSleep(unsigned long)+0x174>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
    1082:	ldr	r7, [pc, #128]	; (1104 <setWakeupCallandSleep(unsigned long)+0x178>)
    1084:	str	r5, [r3, #0]

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    1086:	ldrb	r2, [r6, #5]
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
    1088:	ldr	r5, [pc, #124]	; (1108 <setWakeupCallandSleep(unsigned long)+0x17c>)
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
    108a:	ldr	r0, [pc, #128]	; (110c <setWakeupCallandSleep(unsigned long)+0x180>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
    108c:	ldr	r1, [pc, #128]	; (1110 <setWakeupCallandSleep(unsigned long)+0x184>)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    108e:	sub.w	r3, r3, #528384	; 0x81000

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
    1092:	and.w	r2, r2, #223	; 0xdf
    1096:	strb	r2, [r6, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    1098:	subs	r3, #135	; 0x87
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
    109a:	movs	r2, #2
    109c:	strb	r2, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
    109e:	ldrb	r2, [r3, #0]
    10a0:	and.w	r2, r2, #248	; 0xf8
    10a4:	strb	r2, [r3, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
    10a6:	ldrb	r2, [r3, #0]
    10a8:	orr.w	r2, r2, #4
    10ac:	strb	r2, [r3, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
    10ae:	strb	r4, [r5, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
    10b0:	ldrb	r3, [r3, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
    10b2:	ldr	r3, [r0, #0]
    10b4:	bic.w	r3, r3, #2
    10b8:	str	r3, [r0, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
    10ba:	ldr	r3, [r1, #0]
    10bc:	orr.w	r3, r3, #4
    10c0:	str	r3, [r1, #0]
   
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
    10c2:	wfi
    10c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10c8:	.word	0x4004803c
    10cc:	.word	0x4003d010
    10d0:	.word	0x0000047d
    10d4:	.word	0x200138e4
    10d8:	.word	0xe000e100
    10dc:	.word	0xe000e415
    10e0:	.word	0x4007c001
    10e4:	.word	0x4007c002
    10e8:	.word	0x4007c003
    10ec:	.word	0x4007c004
    10f0:	.word	0x40047000
    10f4:	.word	0x4003d000
    10f8:	.word	0x400ff084
    10fc:	.word	0x40064000
    1100:	.word	0x400ff088
    1104:	.word	0x4007e000
    1108:	.word	0x4007e002
    110c:	.word	0xe000e010
    1110:	.word	0xe000ed10
    1114:	.word	0x40049000
    1118:	.word	0xe000e280
    111c:	.word	0x4007c000
    1120:	.word	0x40049004

00001124 <checkDutyCycle(ACQ_Parameters_s*, short)>:
  #define ShortSleepDuration 60   // i.e. wake up every 'ShortSleepDuration' seconds
#endif
//
// flag can be 0 file to be open // time to shutdown if required
int32_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
    1124:	push	{r3, r4, r5, r6, r7, lr}
    1126:	mov	r6, r0
    1128:	mov	r5, r1
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
    112a:	bl	269c <now()>
    112e:	mov	r4, r0
  uint16_t to = hour();
    1130:	bl	273c <hour()>
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
    1134:	ldrh	r7, [r6, #12]
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
    1136:	ldrh.w	lr, [r6, #24]
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
    113a:	ldrh	r3, [r6, #16]
  uint16_t T3 = acqParameters->T3;
    113c:	ldrh	r1, [r6, #20]
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    113e:	cmp	r7, lr
int32_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
  uint16_t to = hour();
    1140:	uxth	r0, r0
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    1142:	bls.n	1160 <checkDutyCycle(ACQ_Parameters_s*, short)+0x3c>
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
    1144:	cmp	r0, r1
    1146:	bcc.n	11be <checkDutyCycle(ACQ_Parameters_s*, short)+0x9a>
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
      
    if(flag>=0)
    1148:	cmp	r5, #0
    114a:	blt.n	115c <checkDutyCycle(ACQ_Parameters_s*, short)+0x38>
    { 
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
    114c:	beq.n	11d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0xb0>
    114e:	ldr	r5, [pc, #372]	; (12c4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a0>)
    1150:	ldrh	r2, [r6, #4]
    1152:	ldr	r3, [r5, #0]
    1154:	add	r3, r2
    1156:	cmp	r4, r3
    1158:	bcs.w	1288 <checkDutyCycle(ACQ_Parameters_s*, short)+0x164>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    115c:	movs	r0, #0
    115e:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));
    1160:	cmp	r0, r7
    1162:	bcc.n	1168 <checkDutyCycle(ACQ_Parameters_s*, short)+0x44>
    1164:	cmp	r0, r3
    1166:	bcc.n	1148 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    1168:	cmp	r0, r1
    116a:	bcs.n	11ee <checkDutyCycle(ACQ_Parameters_s*, short)+0xca>
    }
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    116c:	ldr	r2, [pc, #344]	; (12c8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a4>)
    116e:	ldr	r5, [pc, #348]	; (12cc <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a8>)
    1170:	umull	r6, r2, r2, r4
    1174:	lsrs	r2, r2, #16
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    1176:	cmp	r0, r3
    }
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    1178:	mls	r2, r5, r2, r4
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    117c:	bcc.n	1182 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5e>
    117e:	cmp	r0, r1
    1180:	bcc.n	120c <checkDutyCycle(ACQ_Parameters_s*, short)+0xe8>
    */
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    1182:	movs	r4, #0
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    1184:	cmp	r0, lr
    1186:	bcc.n	118c <checkDutyCycle(ACQ_Parameters_s*, short)+0x68>
    1188:	cmp	r7, lr
    118a:	bcc.n	11fc <checkDutyCycle(ACQ_Parameters_s*, short)+0xd8>
    {  nsec = (T1+24) * 3600 - tto;
    }
    //
    if(to<T1)                                            //eg: to=2:  T1=4; T2=9; T3=16; T4=20
    118c:	cmp	r0, r7
    118e:	bcs.n	119a <checkDutyCycle(ACQ_Parameters_s*, short)+0x76>
    { nsec = T1 * 3600 - tto;
    1190:	mov.w	r0, #3600	; 0xe10
    1194:	mul.w	r0, r0, r7
    1198:	subs	r4, r0, r2

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    119a:	movs	r3, #0
    119c:	movs	r2, #10
    119e:	mov	r1, r4
    11a0:	ldr	r0, [pc, #300]	; (12d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    11a2:	bl	a6d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    11a6:	ldr	r0, [pc, #296]	; (12d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    11a8:	bl	a684 <Print::println()>
    11ac:	movs	r1, #15
    11ae:	ldr	r0, [pc, #292]	; (12d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b0>)
    11b0:	bl	8ba8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    11b4:	ldr	r0, [pc, #280]	; (12d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    11b6:	bl	a684 <Print::println()>
    
#if DO_DEBUG>0
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
    11ba:	mov	r0, r4
    11bc:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
    11be:	cmp	r0, lr
    11c0:	bcc.n	1148 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    11c2:	cmp	r0, r7
    11c4:	bcc.n	116c <checkDutyCycle(ACQ_Parameters_s*, short)+0x48>
    11c6:	cmp	r0, r3
    11c8:	ite	cs
    11ca:	movcs	r2, #0
    11cc:	movcc	r2, #1
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    11ce:	cmp	r2, #0
    11d0:	beq.n	116c <checkDutyCycle(ACQ_Parameters_s*, short)+0x48>
    11d2:	b.n	1148 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
        return -1; // flag to close acquisition
      }
      
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
    11d4:	ldr	r3, [pc, #256]	; (12d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b4>)
    11d6:	ldrh	r2, [r3, #0]
    11d8:	cbz	r2, 121c <checkDutyCycle(ACQ_Parameters_s*, short)+0xf8>
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    11da:	ldrh	r3, [r6, #0]
    11dc:	ldrh	r0, [r6, #8]
    11de:	cmp	r3, r0
    11e0:	bcs.n	11ea <checkDutyCycle(ACQ_Parameters_s*, short)+0xc6>
  if (doRecording) // we can record
  {
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
    11e2:	ldr	r2, [r6, #28]
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    11e4:	add	r3, r2
    11e6:	cmp	r4, r3
    11e8:	bcs.n	122a <checkDutyCycle(ACQ_Parameters_s*, short)+0x106>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    11ea:	mov	r0, r5
}
    11ec:	pop	{r3, r4, r5, r6, r7, pc}
    11ee:	cmp	r0, lr
    11f0:	ite	cs
    11f2:	movcs	r2, #0
    11f4:	movcc	r2, #1
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    11f6:	cmp	r2, #0
    11f8:	beq.n	116c <checkDutyCycle(ACQ_Parameters_s*, short)+0x48>
    11fa:	b.n	1148 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    {  nsec = (T1+24) * 3600 - tto;
    11fc:	add.w	r4, r7, #24
    1200:	mov.w	r3, #3600	; 0xe10
    1204:	mul.w	r3, r3, r4
    1208:	subs	r4, r3, r2
    120a:	b.n	118c <checkDutyCycle(ACQ_Parameters_s*, short)+0x68>
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
    120c:	mov.w	r3, #3600	; 0xe10
    1210:	mul.w	r3, r3, r1
    1214:	cmp	r2, r3
    1216:	bcs.n	1182 <checkDutyCycle(ACQ_Parameters_s*, short)+0x5e>
      nsec = T3 * 3600 - tto;
    1218:	subs	r4, r3, r2
    121a:	b.n	1184 <checkDutyCycle(ACQ_Parameters_s*, short)+0x60>
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    121c:	ldr	r1, [pc, #164]	; (12c4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a0>)
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
    121e:	str	r4, [r6, #28]
            recording=1; 
    1220:	movs	r2, #1
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    1222:	mov	r0, r5
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    1224:	str	r4, [r1, #0]
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
    1226:	strh	r2, [r3, #0]
    1228:	pop	{r3, r4, r5, r6, r7, pc}
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
        { // need to stop
          nsec = (t_rec + t_rep - tt);
    122a:	add	r0, r2
    122c:	subs	r4, r0, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    122e:	mov	r3, r5
    1230:	movs	r2, #10
    1232:	mov	r1, r4
    1234:	ldr	r0, [pc, #152]	; (12d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    1236:	ldr	r6, [pc, #164]	; (12dc <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b8>)
    1238:	bl	a6d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    123c:	ldr	r0, [pc, #144]	; (12d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    123e:	bl	a684 <Print::println()>
    1242:	movs	r1, #15
    1244:	ldr	r0, [pc, #152]	; (12e0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1bc>)
    1246:	bl	8ba8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    124a:	ldr	r0, [pc, #132]	; (12d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    124c:	bl	a684 <Print::println()>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1250:	mov	r3, r5
    1252:	mov	r1, r4
    1254:	movs	r2, #10
    1256:	mov	r0, r6
    1258:	bl	a6d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    125c:	mov	r0, r6
    125e:	bl	a684 <Print::println()>
    1262:	ldr	r0, [r6, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1264:	cbz	r0, 1278 <checkDutyCycle(ACQ_Parameters_s*, short)+0x154>
    1266:	movs	r2, #15
    1268:	ldr	r1, [pc, #116]	; (12e0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1bc>)
    126a:	bl	5db0 <FatFile::write(void const*, unsigned int)>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    126e:	ldr	r0, [pc, #108]	; (12dc <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b8>)
    1270:	bl	a684 <Print::println()>
          #endif
          #if DO_DEBUG>1
            logFile.println(nsec); 
            logFile.println("Hibernate now 1");
          #endif
          return nsec; 
    1274:	mov	r0, r4
    1276:	pop	{r3, r4, r5, r6, r7, pc}
    1278:	ldr	r0, [r6, #76]	; 0x4c
    127a:	cmp	r0, #0
    127c:	beq.n	126e <checkDutyCycle(ACQ_Parameters_s*, short)+0x14a>
    127e:	movs	r2, #15
    1280:	ldr	r1, [pc, #92]	; (12e0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1bc>)
    1282:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
    1286:	b.n	126e <checkDutyCycle(ACQ_Parameters_s*, short)+0x14a>
    1288:	movs	r1, #17
    128a:	ldr	r0, [pc, #88]	; (12e4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1c0>)
    128c:	bl	8ba8 <usb_serial_write>
    1290:	ldr	r0, [pc, #60]	; (12d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1ac>)
    1292:	bl	a684 <Print::println()>
    1296:	ldr	r3, [pc, #68]	; (12dc <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b8>)
    1298:	ldr	r0, [r3, #72]	; 0x48
    129a:	cbz	r0, 12b2 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18e>
    129c:	movs	r2, #17
    129e:	ldr	r1, [pc, #68]	; (12e4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1c0>)
    12a0:	bl	5db0 <FatFile::write(void const*, unsigned int)>
    12a4:	ldr	r0, [pc, #52]	; (12dc <checkDutyCycle(ACQ_Parameters_s*, short)+0x1b8>)
    12a6:	bl	a684 <Print::println()>
            Serial.println("close acquisition");
        #endif
        #if DO_DEBUG>1
            logFile.println("close acquisition");
        #endif
        t_start = tt; // update start time for next file
    12aa:	str	r4, [r5, #0]
        return -1; // flag to close acquisition
    12ac:	mov.w	r0, #4294967295
    12b0:	pop	{r3, r4, r5, r6, r7, pc}
    12b2:	ldr	r0, [r3, #76]	; 0x4c
    12b4:	cmp	r0, #0
    12b6:	beq.n	12a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x180>
    12b8:	movs	r2, #17
    12ba:	ldr	r1, [pc, #40]	; (12e4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1c0>)
    12bc:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
    12c0:	b.n	12a4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x180>
    12c2:	nop
    12c4:	.word	0x200192a4
    12c8:	.word	0xc22e4507
    12cc:	.word	0x00015180
    12d0:	.word	0x200138e4
    12d4:	.word	0x00012f64
    12d8:	.word	0x20019464
    12dc:	.word	0x200193fc
    12e0:	.word	0x00012f54
    12e4:	.word	0x00012f40

000012e8 <setRTCTime(int, int, int, int, int, int)>:
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
    return text;
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
    12e8:	push	{r4, r5, r6, lr}
    12ea:	sub	sp, #8
    12ec:	mov	r6, r0
    12ee:	ldr	r4, [sp, #28]
    12f0:	ldr	r5, [sp, #24]
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
    12f2:	strb.w	r3, [sp, #4]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    12f6:	add	r0, sp, #8
}

void setRTCTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
    12f8:	cmp	r4, #99	; 0x63
      yr = yr - 1970;
    12fa:	ite	gt
    12fc:	subwgt	r4, r4, #1970	; 0x7b2
  else
      yr += 30;  
    1300:	addle	r4, #30
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
    1302:	strb.w	r2, [r0, #-8]!
  tmElements_t tm;
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
    1306:	strb.w	r1, [sp, #1]
      yr = yr - 1970;
  else
      yr += 30;  
  
  tmElements_t tm;
  tm.Year = yr;
    130a:	strb.w	r4, [sp, #6]
  tm.Month = mnth;
    130e:	strb.w	r5, [sp, #5]
  tm.Day = dy;
  tm.Hour = hr;
    1312:	strb.w	r6, [sp, #2]
  tm.Minute = min;
  tm.Second = sec;

  uint32_t tt = makeTime(tm);
    1316:	bl	25a0 <makeTime(tmElements_t const&)>
    131a:	mov	r4, r0
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
	static void set(unsigned long t) __attribute__((always_inline)) { rtc_set(t); }
    131c:	bl	9370 <rtc_set>
  Teensy3Clock.set(tt); // for RTC
  setTime(tt); // local
    1320:	mov	r0, r4
    1322:	bl	2800 <setTime(long)>
}
    1326:	add	sp, #8
    1328:	pop	{r4, r5, r6, pc}
    132a:	nop

0000132c <doMenu()>:
      }
    }  
}

int16_t doMenu(void)
{
    132c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1330:	ldr	r5, [pc, #700]	; (15f0 <doMenu()+0x2c4>)
      }
    }  
}

int16_t doMenu(void)
{
    1332:	sub	sp, #12
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1334:	bl	8b54 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!Serial.available());
    1338:	cmp	r0, #0
    133a:	beq.n	1334 <doMenu()+0x8>
        virtual int read() { return usb_serial_getchar(); }
    133c:	bl	8adc <usb_serial_getchar>
    1340:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    1342:	mov	r1, r4
    1344:	ldr	r0, [pc, #684]	; (15f4 <doMenu()+0x2c8>)
    1346:	bl	c70c <strchr>
    134a:	cmp	r0, #0
    134c:	beq.n	1334 <doMenu()+0x8>
    { switch (c)
    134e:	cmp	r4, #63	; 0x3f
    1350:	beq.n	1372 <doMenu()+0x46>
    1352:	ble.w	14a8 <doMenu()+0x17c>
    1356:	cmp	r4, #97	; 0x61
    1358:	beq.w	1600 <doMenu()+0x2d4>
    135c:	cmp	r4, #120	; 0x78
    135e:	bne.n	1334 <doMenu()+0x8>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = Serial.parseInt(); break;
    1360:	ldr	r0, [pc, #660]	; (15f8 <doMenu()+0x2cc>)
    1362:	bl	ab70 <Stream::parseInt()>
    1366:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    1368:	cmp	r0, #0
    136a:	beq.n	1334 <doMenu()+0x8>
  return ret;
}
    136c:	add	sp, #12
    136e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1372:	bl	8b54 <usb_serial_available>
  Serial.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!Serial.available());
    1376:	cmp	r0, #0
    1378:	beq.n	1372 <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    137a:	bl	8adc <usb_serial_getchar>
    137e:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    1380:	mov	r1, r4
    1382:	ldr	r0, [pc, #632]	; (15fc <doMenu()+0x2d0>)
    1384:	bl	c70c <strchr>
    1388:	cmp	r0, #0
    138a:	beq.n	1334 <doMenu()+0x8>
    { switch (c)
    138c:	subs	r4, #49	; 0x31
    138e:	cmp	r4, #67	; 0x43
    1390:	bhi.n	1334 <doMenu()+0x8>
    1392:	add	r3, pc, #4	; (adr r3, 1398 <doMenu()+0x6c>)
    1394:	ldr.w	pc, [r3, r4, lsl #2]
    1398:	.word	0x00001765
    139c:	.word	0x00001771
    13a0:	.word	0x0000177d
    13a4:	.word	0x00001789
    13a8:	.word	0x00001335
    13ac:	.word	0x00001335
    13b0:	.word	0x00001335
    13b4:	.word	0x00001335
    13b8:	.word	0x00001335
    13bc:	.word	0x00001335
    13c0:	.word	0x00001335
    13c4:	.word	0x00001335
    13c8:	.word	0x00001335
    13cc:	.word	0x00001335
    13d0:	.word	0x00001335
    13d4:	.word	0x00001335
    13d8:	.word	0x00001335
    13dc:	.word	0x00001335
    13e0:	.word	0x00001335
    13e4:	.word	0x00001335
    13e8:	.word	0x00001335
    13ec:	.word	0x00001335
    13f0:	.word	0x00001335
    13f4:	.word	0x00001335
    13f8:	.word	0x00001335
    13fc:	.word	0x00001335
    1400:	.word	0x00001335
    1404:	.word	0x00001335
    1408:	.word	0x00001335
    140c:	.word	0x00001335
    1410:	.word	0x00001335
    1414:	.word	0x00001335
    1418:	.word	0x00001335
    141c:	.word	0x00001335
    1420:	.word	0x00001335
    1424:	.word	0x00001335
    1428:	.word	0x00001335
    142c:	.word	0x00001335
    1430:	.word	0x00001335
    1434:	.word	0x00001335
    1438:	.word	0x00001335
    143c:	.word	0x00001335
    1440:	.word	0x00001335
    1444:	.word	0x00001335
    1448:	.word	0x00001335
    144c:	.word	0x00001335
    1450:	.word	0x00001335
    1454:	.word	0x00001335
    1458:	.word	0x00001795
    145c:	.word	0x00001335
    1460:	.word	0x00001335
    1464:	.word	0x000017a1
    1468:	.word	0x00001335
    146c:	.word	0x00001335
    1470:	.word	0x00001335
    1474:	.word	0x00001335
    1478:	.word	0x00001335
    147c:	.word	0x00001335
    1480:	.word	0x00001335
    1484:	.word	0x00001335
    1488:	.word	0x00001335
    148c:	.word	0x000017b1
    1490:	.word	0x000017bd
    1494:	.word	0x00001335
    1498:	.word	0x00001335
    149c:	.word	0x000017c9
    14a0:	.word	0x00001335
    14a4:	.word	0x000017d5
  {
    while(!Serial.available());
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    14a8:	cmp	r4, #33	; 0x21
    14aa:	bne.w	1334 <doMenu()+0x8>
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    14ae:	add.w	r6, r5, #12
    14b2:	ldmia.w	r6, {r6, r7, r8}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    14b6:	bl	8b54 <usb_serial_available>
    //int T4=acqParameters.T4; not used
    //
    while(!Serial.available());
    14ba:	cmp	r0, #0
    14bc:	beq.n	14b6 <doMenu()+0x18a>
        virtual int read() { return usb_serial_getchar(); }
    14be:	bl	8adc <usb_serial_getchar>
    14c2:	uxtb	r4, r0
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    14c4:	mov	r1, r4
    14c6:	ldr	r0, [pc, #308]	; (15fc <doMenu()+0x2d0>)
    14c8:	bl	c70c <strchr>
    14cc:	cmp	r0, #0
    14ce:	beq.w	1334 <doMenu()+0x8>
    { switch (c)
    14d2:	subs	r4, #49	; 0x31
    14d4:	cmp	r4, #67	; 0x43
    14d6:	bhi.w	1334 <doMenu()+0x8>
    14da:	add	r3, pc, #4	; (adr r3, 14e0 <doMenu()+0x1b4>)
    14dc:	ldr.w	pc, [r3, r4, lsl #2]
    14e0:	.word	0x000017e5
    14e4:	.word	0x000017fd
    14e8:	.word	0x0000181d
    14ec:	.word	0x00001833
    14f0:	.word	0x00001335
    14f4:	.word	0x00001335
    14f8:	.word	0x00001335
    14fc:	.word	0x00001335
    1500:	.word	0x00001335
    1504:	.word	0x00001335
    1508:	.word	0x00001335
    150c:	.word	0x00001335
    1510:	.word	0x00001335
    1514:	.word	0x00001335
    1518:	.word	0x00001335
    151c:	.word	0x00001335
    1520:	.word	0x00001335
    1524:	.word	0x00001335
    1528:	.word	0x00001335
    152c:	.word	0x00001335
    1530:	.word	0x00001335
    1534:	.word	0x00001335
    1538:	.word	0x00001335
    153c:	.word	0x00001335
    1540:	.word	0x00001335
    1544:	.word	0x00001335
    1548:	.word	0x00001335
    154c:	.word	0x00001335
    1550:	.word	0x00001335
    1554:	.word	0x00001335
    1558:	.word	0x00001335
    155c:	.word	0x00001335
    1560:	.word	0x00001335
    1564:	.word	0x00001335
    1568:	.word	0x00001335
    156c:	.word	0x00001335
    1570:	.word	0x00001335
    1574:	.word	0x00001335
    1578:	.word	0x00001335
    157c:	.word	0x00001335
    1580:	.word	0x00001335
    1584:	.word	0x00001335
    1588:	.word	0x00001335
    158c:	.word	0x00001335
    1590:	.word	0x00001335
    1594:	.word	0x00001335
    1598:	.word	0x00001335
    159c:	.word	0x00001335
    15a0:	.word	0x00001851
    15a4:	.word	0x00001335
    15a8:	.word	0x00001335
    15ac:	.word	0x0000186d
    15b0:	.word	0x00001335
    15b4:	.word	0x00001335
    15b8:	.word	0x00001335
    15bc:	.word	0x00001335
    15c0:	.word	0x00001335
    15c4:	.word	0x00001335
    15c8:	.word	0x00001335
    15cc:	.word	0x00001335
    15d0:	.word	0x00001335
    15d4:	.word	0x000018cb
    15d8:	.word	0x00001941
    15dc:	.word	0x00001335
    15e0:	.word	0x00001335
    15e4:	.word	0x0000195b
    15e8:	.word	0x00001335
    15ec:	.word	0x0000170b
    15f0:	.word	0x20013764
    15f4:	.word	0x00012f74
    15f8:	.word	0x200138e4
    15fc:	.word	0x00012f7c
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    1600:	ldr	r3, [r5, #0]
    1602:	ldr	r1, [pc, #736]	; (18e4 <doMenu()+0x5b8>)
    1604:	ldr	r0, [pc, #736]	; (18e8 <doMenu()+0x5bc>)
    1606:	movs	r2, #111	; 0x6f
    1608:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d acq_time\n\r",    'a',acqParameters.ad);
    160c:	mov	r2, r4
    160e:	ldr	r3, [r5, #4]
    1610:	ldr	r1, [pc, #728]	; (18ec <doMenu()+0x5c0>)
    1612:	ldr	r0, [pc, #724]	; (18e8 <doMenu()+0x5bc>)
    1614:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d rep_rate\n\r",    'r',acqParameters.ar);
    1618:	ldr	r3, [r5, #8]
    161a:	ldr	r1, [pc, #724]	; (18f0 <doMenu()+0x5c4>)
    161c:	ldr	r0, [pc, #712]	; (18e8 <doMenu()+0x5bc>)
    161e:	movs	r2, #114	; 0x72
    1620:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d first_hour\n\r",  '1',acqParameters.T1);
    1624:	ldr	r3, [r5, #12]
    1626:	ldr	r1, [pc, #716]	; (18f4 <doMenu()+0x5c8>)
    1628:	ldr	r0, [pc, #700]	; (18e8 <doMenu()+0x5bc>)
    162a:	movs	r2, #49	; 0x31
    162c:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d second_hour\n\r", '2',acqParameters.T2);
    1630:	ldr	r3, [r5, #16]
    1632:	ldr	r1, [pc, #708]	; (18f8 <doMenu()+0x5cc>)
    1634:	ldr	r0, [pc, #688]	; (18e8 <doMenu()+0x5bc>)
    1636:	movs	r2, #50	; 0x32
    1638:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d third_hour\n\r",  '3',acqParameters.T3);
    163c:	ldr	r3, [r5, #20]
    163e:	ldr	r1, [pc, #700]	; (18fc <doMenu()+0x5d0>)
    1640:	ldr	r0, [pc, #676]	; (18e8 <doMenu()+0x5bc>)
    1642:	movs	r2, #51	; 0x33
    1644:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d last_hour\n\r",   '4',acqParameters.T4);
    1648:	ldr	r3, [r5, #24]
    164a:	ldr	r1, [pc, #692]	; (1900 <doMenu()+0x5d4>)
    164c:	ldr	r0, [pc, #664]	; (18e8 <doMenu()+0x5bc>)
    164e:	movs	r2, #52	; 0x34
    1650:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.println();
    1654:	ldr	r0, [pc, #656]	; (18e8 <doMenu()+0x5bc>)
    1656:	bl	a684 <Print::println()>
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
    165a:	ldr	r3, [pc, #680]	; (1904 <doMenu()+0x5d8>)
    165c:	ldr	r1, [pc, #680]	; (1908 <doMenu()+0x5dc>)
    165e:	ldr	r0, [pc, #648]	; (18e8 <doMenu()+0x5bc>)
    1660:	movs	r2, #110	; 0x6e
    1662:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
    1666:	bl	5f8 <getDate(char*) [clone .constprop.34]>
    166a:	movs	r2, #100	; 0x64
    166c:	mov	r3, r0
    166e:	ldr	r1, [pc, #668]	; (190c <doMenu()+0x5e0>)
    1670:	ldr	r0, [pc, #628]	; (18e8 <doMenu()+0x5bc>)
    1672:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.printf("%c %s time\n\r",         't',getTime(text));
    1676:	bl	5c4 <getTime(char*) [clone .constprop.33]>
    167a:	movs	r2, #116	; 0x74
    167c:	mov	r3, r0
    167e:	ldr	r1, [pc, #656]	; (1910 <doMenu()+0x5e4>)
    1680:	ldr	r0, [pc, #612]	; (18e8 <doMenu()+0x5bc>)
    1682:	bl	a6b4 <Print::printf(char const*, ...)>
  Serial.println();
    1686:	ldr	r0, [pc, #608]	; (18e8 <doMenu()+0x5bc>)
    1688:	bl	a684 <Print::println()>
  Serial.printf("%c %5d inhibit window\r\n",        'i',snipParameters.inhib);
  Serial.printf("%c %5d noise repetition rate\r\n", 'k',snipParameters.nrep);
  Serial.printf("%c %5d pre trigger delay\r\n",     'p',snipParameters.ndel);
  #endif
  //
  Serial.println();
    168c:	ldr	r0, [pc, #600]	; (18e8 <doMenu()+0x5bc>)
    168e:	bl	a684 <Print::println()>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1692:	movs	r1, #23
    1694:	ldr	r0, [pc, #636]	; (1914 <doMenu()+0x5e8>)
    1696:	bl	8ba8 <usb_serial_write>
    169a:	ldr	r0, [pc, #588]	; (18e8 <doMenu()+0x5bc>)
    169c:	bl	a684 <Print::println()>
    16a0:	movs	r1, #64	; 0x40
    16a2:	ldr	r0, [pc, #628]	; (1918 <doMenu()+0x5ec>)
    16a4:	bl	8ba8 <usb_serial_write>
    16a8:	ldr	r0, [pc, #572]	; (18e8 <doMenu()+0x5bc>)
    16aa:	bl	a684 <Print::println()>
    16ae:	movs	r1, #32
    16b0:	ldr	r0, [pc, #616]	; (191c <doMenu()+0x5f0>)
    16b2:	bl	8ba8 <usb_serial_write>
    16b6:	ldr	r0, [pc, #560]	; (18e8 <doMenu()+0x5bc>)
    16b8:	bl	a684 <Print::println()>
    16bc:	movs	r1, #88	; 0x58
    16be:	ldr	r0, [pc, #608]	; (1920 <doMenu()+0x5f4>)
    16c0:	bl	8ba8 <usb_serial_write>
    16c4:	ldr	r0, [pc, #544]	; (18e8 <doMenu()+0x5bc>)
    16c6:	bl	a684 <Print::println()>
    16ca:	movs	r1, #38	; 0x26
    16cc:	ldr	r0, [pc, #596]	; (1924 <doMenu()+0x5f8>)
    16ce:	bl	8ba8 <usb_serial_write>
    16d2:	ldr	r0, [pc, #532]	; (18e8 <doMenu()+0x5bc>)
    16d4:	bl	a684 <Print::println()>
    16d8:	movs	r1, #69	; 0x45
    16da:	ldr	r0, [pc, #588]	; (1928 <doMenu()+0x5fc>)
    16dc:	bl	8ba8 <usb_serial_write>
    16e0:	ldr	r0, [pc, #516]	; (18e8 <doMenu()+0x5bc>)
    16e2:	bl	a684 <Print::println()>
    16e6:	movs	r1, #50	; 0x32
    16e8:	ldr	r0, [pc, #576]	; (192c <doMenu()+0x600>)
    16ea:	bl	8ba8 <usb_serial_write>
    16ee:	ldr	r0, [pc, #504]	; (18e8 <doMenu()+0x5bc>)
    16f0:	bl	a684 <Print::println()>
    16f4:	movs	r1, #43	; 0x2b
    16f6:	ldr	r0, [pc, #568]	; (1930 <doMenu()+0x604>)
    16f8:	bl	8ba8 <usb_serial_write>
    16fc:	ldr	r0, [pc, #488]	; (18e8 <doMenu()+0x5bc>)
    16fe:	bl	a684 <Print::println()>
  Serial.println("exter '!cval' to read value c=(0,a,r,1,2,3,4,n,d,t,c,h,w,s,m,i,k,p) and val is new value");
  Serial.println("  e.g.: !110 will set first hour to 10");
  Serial.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  Serial.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  Serial.println("        x-1 with exit and start immediately");
  Serial.println();
    1702:	ldr	r0, [pc, #484]	; (18e8 <doMenu()+0x5bc>)
    1704:	bl	a684 <Print::println()>
    1708:	b.n	1334 <doMenu()+0x8>
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
    170a:	ldr	r0, [pc, #476]	; (18e8 <doMenu()+0x5bc>)
    170c:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1710:	subs	r4, r0, #0
    1712:	blt.w	19d0 <doMenu()+0x6a4>
    if(val>maxVal) val=maxVal;
    1716:	cmp	r4, #23
    1718:	it	ge
    171a:	movge	r4, #23
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
    171c:	ldr	r0, [pc, #456]	; (18e8 <doMenu()+0x5bc>)
    171e:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1722:	subs	r6, r0, #0
    1724:	blt.w	19c8 <doMenu()+0x69c>
    if(val>maxVal) val=maxVal;
    1728:	cmp	r6, #59	; 0x3b
    172a:	it	ge
    172c:	movge	r6, #59	; 0x3b
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
    172e:	ldr	r0, [pc, #440]	; (18e8 <doMenu()+0x5bc>)
    1730:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1734:	subs	r7, r0, #0
    1736:	blt.w	19c4 <doMenu()+0x698>
    if(val>maxVal) val=maxVal;
    173a:	cmp	r7, #59	; 0x3b
    173c:	it	ge
    173e:	movge	r7, #59	; 0x3b
    setRTCTime(hour(),minute(),second(),day, month, year);
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    setRTCTime(hour,minutes,seconds,day(),month(),year());
    1740:	bl	279c <day()>
    1744:	mov	r8, r0
    1746:	bl	27bc <month()>
    174a:	mov	r9, r0
    174c:	bl	27dc <year()>
    1750:	str.w	r9, [sp]
    1754:	str	r0, [sp, #4]
    1756:	mov	r3, r8
    1758:	mov	r2, r7
    175a:	mov	r1, r6
    175c:	mov	r0, r4
    175e:	bl	12e8 <setRTCTime(int, int, int, int, int, int)>
    1762:	b.n	1334 <doMenu()+0x8>
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
    1764:	ldr	r2, [r5, #12]
    1766:	ldr	r1, [pc, #460]	; (1934 <doMenu()+0x608>)
    1768:	ldr	r0, [pc, #380]	; (18e8 <doMenu()+0x5bc>)
    176a:	bl	a6b4 <Print::printf(char const*, ...)>
    176e:	b.n	1334 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
    1770:	ldr	r2, [r5, #16]
    1772:	ldr	r1, [pc, #448]	; (1934 <doMenu()+0x608>)
    1774:	ldr	r0, [pc, #368]	; (18e8 <doMenu()+0x5bc>)
    1776:	bl	a6b4 <Print::printf(char const*, ...)>
    177a:	b.n	1334 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
    177c:	ldr	r2, [r5, #20]
    177e:	ldr	r1, [pc, #436]	; (1934 <doMenu()+0x608>)
    1780:	ldr	r0, [pc, #356]	; (18e8 <doMenu()+0x5bc>)
    1782:	bl	a6b4 <Print::printf(char const*, ...)>
    1786:	b.n	1334 <doMenu()+0x8>
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
    1788:	ldr	r2, [r5, #24]
    178a:	ldr	r1, [pc, #424]	; (1934 <doMenu()+0x608>)
    178c:	ldr	r0, [pc, #344]	; (18e8 <doMenu()+0x5bc>)
    178e:	bl	a6b4 <Print::printf(char const*, ...)>
    1792:	b.n	1334 <doMenu()+0x8>
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
    1794:	ldr	r2, [r5, #4]
    1796:	ldr	r1, [pc, #412]	; (1934 <doMenu()+0x608>)
    1798:	ldr	r0, [pc, #332]	; (18e8 <doMenu()+0x5bc>)
    179a:	bl	a6b4 <Print::printf(char const*, ...)>
    179e:	b.n	1334 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
    17a0:	bl	5f8 <getDate(char*) [clone .constprop.34]>
    17a4:	ldr	r1, [pc, #400]	; (1938 <doMenu()+0x60c>)
    17a6:	mov	r2, r0
    17a8:	ldr	r0, [pc, #316]	; (18e8 <doMenu()+0x5bc>)
    17aa:	bl	a6b4 <Print::printf(char const*, ...)>
    17ae:	b.n	1334 <doMenu()+0x8>
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
    17b0:	ldr	r2, [pc, #336]	; (1904 <doMenu()+0x5d8>)
    17b2:	ldr	r1, [pc, #388]	; (1938 <doMenu()+0x60c>)
    17b4:	ldr	r0, [pc, #304]	; (18e8 <doMenu()+0x5bc>)
    17b6:	bl	a6b4 <Print::printf(char const*, ...)>
    17ba:	b.n	1334 <doMenu()+0x8>
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
    17bc:	ldr	r2, [r5, #0]
    17be:	ldr	r1, [pc, #372]	; (1934 <doMenu()+0x608>)
    17c0:	ldr	r0, [pc, #292]	; (18e8 <doMenu()+0x5bc>)
    17c2:	bl	a6b4 <Print::printf(char const*, ...)>
    17c6:	b.n	1334 <doMenu()+0x8>
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
    17c8:	ldr	r2, [r5, #8]
    17ca:	ldr	r1, [pc, #360]	; (1934 <doMenu()+0x608>)
    17cc:	ldr	r0, [pc, #280]	; (18e8 <doMenu()+0x5bc>)
    17ce:	bl	a6b4 <Print::printf(char const*, ...)>
    17d2:	b.n	1334 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
    17d4:	bl	5c4 <getTime(char*) [clone .constprop.33]>
    17d8:	ldr	r1, [pc, #348]	; (1938 <doMenu()+0x60c>)
    17da:	mov	r2, r0
    17dc:	ldr	r0, [pc, #264]	; (18e8 <doMenu()+0x5bc>)
    17de:	bl	a6b4 <Print::printf(char const*, ...)>
    17e2:	b.n	1334 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    17e4:	ldr	r0, [pc, #256]	; (18e8 <doMenu()+0x5bc>)
    17e6:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17ea:	cmp	r0, #0
    17ec:	blt.w	19cc <doMenu()+0x6a0>
    17f0:	cmp	r0, #24
    17f2:	mov	r3, r0
    17f4:	it	ge
    17f6:	movge	r3, #24
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    17f8:	str	r3, [r5, #12]
    17fa:	b.n	1334 <doMenu()+0x8>
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    17fc:	ldr	r0, [pc, #232]	; (18e8 <doMenu()+0x5bc>)
    17fe:	bl	ab70 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    1802:	cmp	r6, #23
    1804:	bgt.w	1984 <doMenu()+0x658>
  {
    if(val<minVal) val=minVal;
    1808:	cmp	r6, r0
    180a:	bgt.n	1818 <doMenu()+0x4ec>
    if(val>maxVal) val=maxVal;
    180c:	cmp	r0, #24
    180e:	it	gt
    1810:	movgt	r0, #24
    1812:	bgt.w	198a <doMenu()+0x65e>
    1816:	mov	r6, r0
    1818:	mov	r0, r6
    181a:	b.n	198a <doMenu()+0x65e>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    181c:	ldr	r0, [pc, #200]	; (18e8 <doMenu()+0x5bc>)
    181e:	bl	ab70 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    1822:	cmp	r7, #23
    1824:	bgt.w	197a <doMenu()+0x64e>
  {
    if(val<minVal) val=minVal;
    1828:	cmp	r7, r0
    182a:	ble.w	19b8 <doMenu()+0x68c>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    182e:	str	r7, [r5, #20]
    1830:	b.n	1334 <doMenu()+0x8>
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1832:	ldr	r0, [pc, #180]	; (18e8 <doMenu()+0x5bc>)
    1834:	bl	ab70 <Stream::parseInt()>
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1838:	cmp	r6, r8
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    183a:	mov	r4, r8
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    183c:	ble.w	198e <doMenu()+0x662>
  {
    if(val<minVal) val=minVal;
    1840:	cmp	r8, r0
    1842:	bgt.n	184c <doMenu()+0x520>
    if(val>maxVal) val=maxVal;
    1844:	cmp	r6, r0
    1846:	blt.w	19b4 <doMenu()+0x688>
    184a:	mov	r4, r0
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    184c:	mov	r6, r4
    184e:	b.n	19b4 <doMenu()+0x688>
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1850:	ldr	r0, [pc, #148]	; (18e8 <doMenu()+0x5bc>)
    1852:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1856:	cmp	r0, #0
    1858:	blt.w	19e4 <doMenu()+0x6b8>
    185c:	cmp.w	r0, #131072	; 0x20000
    1860:	mov	r3, r0
    1862:	it	ge
    1864:	movge.w	r3, #131072	; 0x20000
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1868:	str	r3, [r5, #4]
    186a:	b.n	1334 <doMenu()+0x8>
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    186c:	ldr	r0, [pc, #120]	; (18e8 <doMenu()+0x5bc>)
    186e:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1872:	cmp.w	r0, #2000	; 0x7d0
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    1876:	mov	r4, r0
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1878:	blt.n	1974 <doMenu()+0x648>
    if(val>maxVal) val=maxVal;
    187a:	movw	r3, #3000	; 0xbb8
    187e:	cmp	r0, r3
    1880:	it	ge
    1882:	movge	r4, r3
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
    1884:	ldr	r0, [pc, #96]	; (18e8 <doMenu()+0x5bc>)
    1886:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    188a:	subs	r7, r0, #0
    188c:	ble.w	19e0 <doMenu()+0x6b4>
    if(val>maxVal) val=maxVal;
    1890:	cmp	r7, #12
    1892:	it	ge
    1894:	movge	r7, #12
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
    1896:	ldr	r0, [pc, #80]	; (18e8 <doMenu()+0x5bc>)
    1898:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    189c:	subs	r6, r0, #0
    189e:	ble.w	19dc <doMenu()+0x6b0>
    if(val>maxVal) val=maxVal;
    18a2:	cmp	r6, #31
    18a4:	it	ge
    18a6:	movge	r6, #31
  setTime(tt); // local
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    setRTCTime(hour(),minute(),second(),day, month, year);
    18a8:	bl	273c <hour()>
    18ac:	mov	r8, r0
    18ae:	bl	275c <minute()>
    18b2:	mov	r9, r0
    18b4:	bl	277c <second()>
    18b8:	mov	r1, r9
    18ba:	mov	r2, r0
    18bc:	str	r4, [sp, #4]
    18be:	mov	r0, r8
    18c0:	str	r7, [sp, #0]
    18c2:	mov	r3, r6
    18c4:	bl	12e8 <setRTCTime(int, int, int, int, int, int)>
    18c8:	b.n	1334 <doMenu()+0x8>
    18ca:	ldr	r4, [pc, #112]	; (193c <doMenu()+0x610>)
    18cc:	adds	r6, r4, #4
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    18ce:	bl	8adc <usb_serial_getchar>
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
    18d2:	strb.w	r0, [r4, #1]!
    18d6:	cmp	r4, r6
    18d8:	bne.n	18ce <doMenu()+0x5a2>
                  acqParameters.name[4]=0; break;
    18da:	movs	r3, #0
    18dc:	strb.w	r3, [r5, #36]	; 0x24
    18e0:	b.n	1334 <doMenu()+0x8>
    18e2:	nop
    18e4:	.word	0x00012f98
    18e8:	.word	0x200138e4
    18ec:	.word	0x00012fac
    18f0:	.word	0x00012fc0
    18f4:	.word	0x00012fd4
    18f8:	.word	0x00012fe8
    18fc:	.word	0x00013000
    1900:	.word	0x00013014
    1904:	.word	0x20013784
    1908:	.word	0x00013028
    190c:	.word	0x00013038
    1910:	.word	0x00013048
    1914:	.word	0x00013058
    1918:	.word	0x00013070
    191c:	.word	0x000130b4
    1920:	.word	0x000130d8
    1924:	.word	0x00013134
    1928:	.word	0x0001315c
    192c:	.word	0x000131a4
    1930:	.word	0x000131d8
    1934:	.word	0x00012f90
    1938:	.word	0x00012f20
    193c:	.word	0x20013783
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1940:	ldr	r0, [pc, #168]	; (19ec <doMenu()+0x6c0>)
    1942:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1946:	cmp	r0, #0
    1948:	blt.n	19d8 <doMenu()+0x6ac>
    194a:	cmp.w	r0, #131072	; 0x20000
    194e:	mov	r3, r0
    1950:	it	ge
    1952:	movge.w	r3, #131072	; 0x20000
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1956:	str	r3, [r5, #0]
    1958:	b.n	1334 <doMenu()+0x8>
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    195a:	ldr	r0, [pc, #144]	; (19ec <doMenu()+0x6c0>)
    195c:	bl	ab70 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1960:	cmp	r0, #0
    1962:	blt.n	19d4 <doMenu()+0x6a8>
    1964:	cmp.w	r0, #131072	; 0x20000
    1968:	mov	r3, r0
    196a:	it	ge
    196c:	movge.w	r3, #131072	; 0x20000
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1970:	str	r3, [r5, #8]
    1972:	b.n	1334 <doMenu()+0x8>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1974:	mov.w	r4, #2000	; 0x7d0
    1978:	b.n	1884 <doMenu()+0x558>
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if((val>maxVal) && (val<minVal)) val=maxVal;
    197a:	cmp	r0, #24
    197c:	it	ge
    197e:	movge	r0, #24
    1980:	mov	r7, r0
    1982:	b.n	182e <doMenu()+0x502>
    1984:	cmp	r0, #24
    1986:	it	ge
    1988:	movge	r0, #24
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    198a:	str	r0, [r5, #16]
    198c:	b.n	1334 <doMenu()+0x8>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    198e:	cmp	r0, #0
    1990:	blt.n	19e8 <doMenu()+0x6bc>
    if(val>modVal) val=modVal;
    1992:	cmp	r0, #24
    1994:	it	ge
    1996:	movge	r0, #24
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    1998:	cmp	r6, r0
    199a:	bge.n	19b2 <doMenu()+0x686>
    199c:	cmp	r8, r0
    199e:	ble.n	19b2 <doMenu()+0x686>
    { if(val>(minVal+maxVal)/2) val = minVal; else val=maxVal;
    19a0:	add.w	r3, r6, r8
    19a4:	add.w	r3, r3, r3, lsr #31
    19a8:	cmp.w	r0, r3, asr #1
    19ac:	it	gt
    19ae:	movgt	r6, r8
    19b0:	b.n	19b4 <doMenu()+0x688>
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    19b2:	mov	r6, r0
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    19b4:	str	r6, [r5, #24]
    19b6:	b.n	1334 <doMenu()+0x8>
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
    19b8:	cmp	r0, #24
    19ba:	it	gt
    19bc:	movgt	r7, #24
    19be:	bgt.w	182e <doMenu()+0x502>
    19c2:	b.n	1980 <doMenu()+0x654>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    19c4:	movs	r7, #0
    19c6:	b.n	1740 <doMenu()+0x414>
    19c8:	movs	r6, #0
    19ca:	b.n	172e <doMenu()+0x402>
    19cc:	movs	r3, #0
    19ce:	b.n	17f8 <doMenu()+0x4cc>
    19d0:	movs	r4, #0
    19d2:	b.n	171c <doMenu()+0x3f0>
    19d4:	movs	r3, #0
    19d6:	b.n	1970 <doMenu()+0x644>
    19d8:	movs	r3, #0
    19da:	b.n	1956 <doMenu()+0x62a>
    19dc:	movs	r6, #1
    19de:	b.n	18a8 <doMenu()+0x57c>
    19e0:	movs	r7, #1
    19e2:	b.n	1896 <doMenu()+0x56a>
    19e4:	movs	r3, #0
    19e6:	b.n	1868 <doMenu()+0x53c>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    19e8:	movs	r0, #0
    19ea:	b.n	1998 <doMenu()+0x66c>
    19ec:	.word	0x200138e4

000019f0 <setup>:
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
//int started=0;
extern "C" void setup() {
    19f0:	push	{r4, r5, r6, r7, lr}
  // put your setup code here, to run once:
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    19f2:	movs	r0, #3
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________
//int started=0;
extern "C" void setup() {
    19f4:	sub	sp, #12
  // put your setup code here, to run once:
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    19f6:	movs	r1, #2
    19f8:	bl	93bc <pinMode>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);
    19fc:	ldr	r0, [pc, #316]	; (1b3c <setup+0x14c>)
    19fe:	ldr	r4, [pc, #320]	; (1b40 <setup+0x150>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1a00:	ldr	r5, [pc, #320]	; (1b44 <setup+0x154>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1a02:	ldr	r7, [pc, #324]	; (1b48 <setup+0x158>)
    1a04:	ldr	r6, [pc, #324]	; (1b4c <setup+0x15c>)
    1a06:	bl	2844 <setSyncProvider(long (*)())>
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1a0a:	ldrb	r3, [r4, #0]

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    1a0c:	movs	r0, #3
    1a0e:	cmp	r3, #0
    1a10:	beq.w	1b2a <setup+0x13a>
    1a14:	ldrb	r3, [r5, #0]
    1a16:	lsls	r2, r3, #31
    1a18:	bpl.w	1b2a <setup+0x13a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1a1c:	ldr	r3, [r7, #0]
    1a1e:	ldr	r2, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1a20:	subs	r3, r3, r2
    1a22:	cmp	r3, #14
    1a24:	bls.w	1b2a <setup+0x13a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a28:	movs	r1, #18
    1a2a:	ldr	r0, [pc, #292]	; (1b50 <setup+0x160>)
    1a2c:	bl	8ba8 <usb_serial_write>
    1a30:	ldr	r0, [pc, #288]	; (1b54 <setup+0x164>)
    1a32:	bl	a684 <Print::println()>
  // for 16bit resolution
  temperature = -0.0293 * analogRead(70) + 440.5;
*/

#define MAUDIO (MAX_Q+MDEL+50)
	AudioMemory (MAUDIO); // 600 blocks use about 200 kB (requires Teensy 3.6)
    1a36:	movw	r1, #549	; 0x225
    1a3a:	ldr	r0, [pc, #284]	; (1b58 <setup+0x168>)
    1a3c:	bl	a760 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>

  //
  uSD.init();

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a40:	movs	r4, #8
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1a42:	ldr	r0, [pc, #280]	; (1b5c <setup+0x16c>)
    1a44:	bl	aac <c_uSD::init()>

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a48:	ldr	r3, [pc, #276]	; (1b60 <setup+0x170>)
    1a4a:	str	r4, [sp, #0]
    1a4c:	mov	r2, r4
    1a4e:	ldr	r1, [pc, #276]	; (1b64 <setup+0x174>)
    1a50:	ldr	r0, [pc, #264]	; (1b5c <setup+0x16c>)
    1a52:	bl	e78 <c_uSD::loadConfig(unsigned long*, int, long*, int)>
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
    1a56:	ldr	r3, [pc, #272]	; (1b68 <setup+0x178>)
    1a58:	ldr	r3, [r3, #0]
    1a5a:	lsls	r3, r3, #19
    1a5c:	bmi.n	1a80 <setup+0x90>
  }
*/
  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    1a5e:	bl	132c <doMenu()>
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a62:	str	r4, [sp, #0]
  }
*/
  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    1a64:	mov	r5, r0
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a66:	mov	r2, r4
    1a68:	ldr	r3, [pc, #244]	; (1b60 <setup+0x170>)
    1a6a:	ldr	r1, [pc, #248]	; (1b64 <setup+0x174>)
    1a6c:	ldr	r0, [pc, #236]	; (1b5c <setup+0x16c>)
    1a6e:	bl	d50 <c_uSD::storeConfig(unsigned long*, int, long*, int)>

    if(ret>0) 
    1a72:	cmp	r5, #0
    1a74:	ble.n	1a80 <setup+0x90>
    setWakeupCallandSleep(ret*60);  // should shutdown now and wait for start
    1a76:	rsb	r0, r5, r5, lsl #4
    1a7a:	lsls	r0, r0, #2
    1a7c:	bl	f8c <setWakeupCallandSleep(unsigned long)>
  }
  //
  #if MDEL<0
    // check if it is our time to record
    int32_t nsec;
    nsec=checkDutyCycle(&acqParameters, -1);
    1a80:	mov.w	r1, #4294967295
    1a84:	ldr	r0, [pc, #220]	; (1b64 <setup+0x174>)
    1a86:	bl	1124 <checkDutyCycle(ACQ_Parameters_s*, short)>
    if(nsec>0) 
    1a8a:	cmp	r0, #0
    1a8c:	ble.n	1a92 <setup+0xa2>
    { 
      #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // will not return if we should not continue with acquisition 
    1a8e:	bl	f8c <setWakeupCallandSleep(unsigned long)>
  if(fsamp>fmax)         // assume that limit scales with n_avg
  { n_bits=12;
    n_avg=1;    
    hspd=1;
  }
  modifyADCS(n_bits,n_avg,diff,hspd);
    1a92:	movs	r3, #0
    1a94:	mov	r2, r3
    1a96:	movs	r1, #4
    1a98:	movs	r0, #16
    1a9a:	bl	7c4 <modifyADCS(short, unsigned short, unsigned short, unsigned short)>

  // sampling rate can be modified on the fly
  uint32_t PDB_period;
  PDB_period = F_BUS/fsamp -1;

  PDB0_MOD = PDB_period;
    1a9e:	ldr	r4, [pc, #204]	; (1b6c <setup+0x17c>)
  PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    1aa0:	ldr	r3, [pc, #204]	; (1b70 <setup+0x180>)
template <int mq>
void mRecordQueue<mq>::clear(void)
{
	uint16_t t;

	if (userblock) {
    1aa2:	ldr	r5, [pc, #208]	; (1b74 <setup+0x184>)
  state=0;
}

void c_uSD::setPrefix(char *prefix)
{
  strcpy(name,prefix);
    1aa4:	ldr	r1, [pc, #208]	; (1b78 <setup+0x188>)
    1aa6:	ldr	r0, [pc, #212]	; (1b7c <setup+0x18c>)
    1aa8:	movw	r2, #36771	; 0x8fa3

  // sampling rate can be modified on the fly
  uint32_t PDB_period;
  PDB_period = F_BUS/fsamp -1;

  PDB0_MOD = PDB_period;
    1aac:	movw	r6, #999	; 0x3e7
    1ab0:	str	r6, [r4, #0]
  PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    1ab2:	str	r2, [r3, #0]
    1ab4:	bl	c7dc <strcpy>
    1ab8:	ldr.w	r0, [r5, #2032]	; 0x7f0
    1abc:	cbz	r0, 1ac8 <setup+0xd8>
		release(userblock);
    1abe:	bl	a874 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1ac2:	movs	r3, #0
    1ac4:	str.w	r3, [r5, #2032]	; 0x7f0
	}
	t = tail;
    1ac8:	ldrh.w	r4, [r5, #2038]	; 0x7f6
	while (t != head) {
    1acc:	ldrh.w	r3, [r5, #2036]	; 0x7f4

	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
    1ad0:	uxth	r4, r4
	while (t != head) {
    1ad2:	uxth	r3, r3
    1ad4:	cmp	r3, r4
    1ad6:	beq.n	1afa <setup+0x10a>
		if (++t >= mq) t = 0;
    1ad8:	adds	r4, #1
    1ada:	uxth	r4, r4
    1adc:	cmp.w	r4, #500	; 0x1f4
    1ae0:	it	cs
    1ae2:	movcs	r4, #0
    1ae4:	mov	r3, r4
		release(queue[t]);
    1ae6:	adds	r3, #8
    1ae8:	ldr.w	r0, [r5, r3, lsl #2]
    1aec:	bl	a874 <AudioStream::release(audio_block_struct*)>
	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
    1af0:	ldrh.w	r3, [r5, #2036]	; 0x7f4
    1af4:	uxth	r3, r3
    1af6:	cmp	r3, r4
    1af8:	bne.n	1ad8 <setup+0xe8>
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1afa:	movs	r3, #1
    1afc:	movs	r1, #12
	t = tail;
	while (t != head) {
		if (++t >= mq) t = 0;
		release(queue[t]);
	}
	tail = t;
    1afe:	strh.w	r4, [r5, #2038]	; 0x7f6
    1b02:	ldr	r0, [pc, #124]	; (1b80 <setup+0x190>)
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1b04:	strh.w	r3, [r5, #2040]	; 0x7f8
    1b08:	bl	8ba8 <usb_serial_write>
    1b0c:	ldr	r0, [pc, #68]	; (1b54 <setup+0x164>)
    1b0e:	bl	a684 <Print::println()>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1b12:	ldr	r3, [pc, #112]	; (1b84 <setup+0x194>)
    1b14:	ldr	r1, [r3, #0]
    1b16:	cbz	r1, 1b36 <setup+0x146>
    1b18:	ldr	r2, [pc, #108]	; (1b88 <setup+0x198>)
    1b1a:	ldr	r0, [pc, #112]	; (1b8c <setup+0x19c>)
    1b1c:	movw	r3, #522	; 0x20a
  Serial.println("End of Setup");
//  started=0;  
  #if DO_DEBUG>1
    logFile.open("logFile.txt", O_CREAT | O_RDWR | O_APPEND);
  #endif
}
    1b20:	add	sp, #12
    1b22:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1b26:	b.w	6e10 <FsBaseFile::open(FsVolume*, char const*, int)>

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    1b2a:	bl	93a0 <digitalRead>
    1b2e:	cmp	r0, #0
    1b30:	beq.w	1a0a <setup+0x1a>
    1b34:	b.n	1a28 <setup+0x38>
  Serial.println("End of Setup");
//  started=0;  
  #if DO_DEBUG>1
    logFile.open("logFile.txt", O_CREAT | O_RDWR | O_APPEND);
  #endif
}
    1b36:	add	sp, #12
    1b38:	pop	{r4, r5, r6, r7, pc}
    1b3a:	nop
    1b3c:	.word	0x00000565
    1b40:	.word	0x20019b68
    1b44:	.word	0x20019a7c
    1b48:	.word	0x20019a84
    1b4c:	.word	0x20019c68
    1b50:	.word	0x00013204
    1b54:	.word	0x200138e4
    1b58:	.word	0x1fff0200
    1b5c:	.word	0x20014364
    1b60:	.word	0x20013740
    1b64:	.word	0x20013764
    1b68:	.word	0x400ff010
    1b6c:	.word	0x40036004
    1b70:	.word	0x40036000
    1b74:	.word	0x20014880
    1b78:	.word	0x20013784
    1b7c:	.word	0x2001486e
    1b80:	.word	0x00013218
    1b84:	.word	0x20019a1c
    1b88:	.word	0x00013228
    1b8c:	.word	0x2001940c

00001b90 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    1b90:	mov	r5, r0
    1b92:	ldr.w	r0, [r0, #1164]	; 0x48c
    1b96:	push	{r3, lr}
    1b98:	mov	r4, r1
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1b9a:	cbz	r0, 1bcc <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1b9c:	ldr	r3, [r0, #0]
    1b9e:	ldr	r3, [r3, #40]	; 0x28
    1ba0:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    1ba2:	cbnz	r0, 1bcc <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1ba4:	ldr.w	r3, [r5, #1152]	; 0x480
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1ba8:	cbz	r3, 1bb4 <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    1baa:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1bac:	cbz	r3, 1bc2 <SdBase<FsVolume>::errorHalt(Print*)+0x32>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    1bae:	bl	a3e8 <yield>
    1bb2:	b.n	1bae <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1bb4:	ldr.w	r3, [r5, #1156]	; 0x484
    1bb8:	cbz	r3, 1bc2 <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    1bba:	ldrb.w	r3, [r3, #1092]	; 0x444
    1bbe:	cmp	r3, #0
    1bc0:	bne.n	1bae <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1bc2:	mov	r0, r4
    1bc4:	ldr	r1, [pc, #84]	; (1c1c <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1bc6:	bl	74c <Print::println(__FlashStringHelper const*)>
    1bca:	b.n	1bae <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1bcc:	ldr	r1, [pc, #80]	; (1c20 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1bce:	mov	r0, r4
    1bd0:	bl	730 <Print::write(char const*)>
    1bd4:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1bd8:	cbz	r0, 1c18 <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    1bda:	ldr	r3, [r0, #0]
    1bdc:	ldr	r3, [r3, #40]	; 0x28
    1bde:	blx	r3
    1be0:	mov	r1, r0
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1be2:	movs	r3, #0
    1be4:	movs	r2, #16
    1be6:	mov	r0, r4
    1be8:	bl	a6d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1bec:	ldr	r1, [pc, #52]	; (1c24 <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1bee:	mov	r0, r4
    1bf0:	bl	730 <Print::write(char const*)>
    1bf4:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1bf8:	cbz	r0, 1c14 <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    1bfa:	ldr	r3, [r0, #0]
    1bfc:	ldr	r3, [r3, #44]	; 0x2c
    1bfe:	blx	r3
    1c00:	uxtb	r1, r0
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1c02:	movs	r3, #0
    1c04:	movs	r2, #16
    1c06:	mov	r0, r4
    1c08:	bl	a6d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1c0c:	mov	r0, r4
    1c0e:	bl	a684 <Print::println()>
    1c12:	b.n	1bae <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1c14:	mov	r1, r0
    1c16:	b.n	1c02 <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1c18:	movs	r1, #42	; 0x2a
    1c1a:	b.n	1be2 <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    1c1c:	.word	0x00013244
    1c20:	.word	0x00013234
    1c24:	.word	0x00013240

00001c28 <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1c28:	ldr	r4, [pc, #28]	; (1c48 <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1c2a:	push	{r3, lr}
    1c2c:	mov	r5, r0
    1c2e:	mov	r6, r1
    1c30:	mov	r0, r4
    1c32:	ldr	r1, [pc, #24]	; (1c4c <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1c34:	bl	730 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1c38:	mov	r1, r6
    1c3a:	mov	r0, r4
    1c3c:	bl	74c <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1c40:	mov	r1, r4
    1c42:	mov	r0, r5
    1c44:	bl	1b90 <SdBase<FsVolume>::errorHalt(Print*)>
    1c48:	.word	0x200138e4
    1c4c:	.word	0x00013258

00001c50 <c_uSD::write(short*, long)>:
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1c50:	push	{r4, r5, r6, lr}
    1c52:	mov	r4, r0
  if(state == 0)
    1c54:	ldrsh.w	r0, [r0, #1284]	; 0x504
{
  strcpy(name,prefix);
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1c58:	mov	r6, r1
    1c5a:	mov	r5, r2
  if(state == 0)
    1c5c:	cbz	r0, 1c6c <c_uSD::write(short*, long)+0x1c>
    #endif
    state=1; // flag that file is open
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
    1c5e:	subs	r3, r0, #1
    1c60:	uxth	r3, r3
    1c62:	cmp	r3, #1
    1c64:	bls.n	1cb2 <c_uSD::write(short*, long)+0x62>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
  }
  
  if(state == 3)
    1c66:	cmp	r0, #3
    1c68:	beq.n	1d24 <c_uSD::write(short*, long)+0xd4>
  {
    state=close();
  }
  return state;
}
    1c6a:	pop	{r4, r5, r6, pc}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    1c6c:	addw	r0, r4, #1290	; 0x50a
    1c70:	bl	9a0 <makeFilename(char*)>
    if(!filename) {state=-1; return state;} // flag to do not anything
    1c74:	cmp	r0, #0
    1c76:	beq.n	1d30 <c_uSD::write(short*, long)+0xe0>
    1c78:	ldr	r3, [pc, #204]	; (1d48 <c_uSD::write(short*, long)+0xf8>)
    1c7a:	ldr	r1, [r3, #0]
    1c7c:	cmp	r1, #0
    1c7e:	beq.n	1cfe <c_uSD::write(short*, long)+0xae>
    1c80:	mov	r2, r0
    1c82:	movw	r3, #1538	; 0x602
    1c86:	addw	r0, r4, #1220	; 0x4c4
    1c8a:	bl	6e10 <FsBaseFile::open(FsVolume*, char const*, int)>
    1c8e:	cbz	r0, 1cfe <c_uSD::write(short*, long)+0xae>
    1c90:	ldr.w	r0, [r4, #1276]	; 0x4fc
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1c94:	cbz	r0, 1ce2 <c_uSD::write(short*, long)+0x92>
   *
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
    1c96:	mov.w	r1, #41943040	; 0x2800000
    1c9a:	bl	5698 <FatFile::preAllocate(unsigned long)>
    1c9e:	cbz	r0, 1cf6 <c_uSD::write(short*, long)+0xa6>
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    #ifdef  GEN_WAV_FILE // keep first record
          memcpy(header,(const char *)data,512);
    1ca0:	mov.w	r2, #512	; 0x200
    1ca4:	mov	r1, r6
    1ca6:	ldr	r0, [pc, #164]	; (1d4c <c_uSD::write(short*, long)+0xfc>)
    1ca8:	bl	89a8 <memcpy>
    #endif
    state=1; // flag that file is open
    nbuf=0;
    1cac:	movs	r3, #0
    1cae:	strh.w	r3, [r4, #1286]	; 0x506
    1cb2:	ldr.w	r0, [r4, #1276]	; 0x4fc
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1cb6:	movs	r3, #2
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1cb8:	lsls	r5, r5, #1
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1cba:	strh.w	r3, [r4, #1284]	; 0x504
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1cbe:	cbz	r0, 1d06 <c_uSD::write(short*, long)+0xb6>
    1cc0:	mov	r1, r6
    1cc2:	mov	r2, r5
    1cc4:	bl	5db0 <FatFile::write(void const*, unsigned int)>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1cc8:	cmp	r0, r5
    1cca:	bne.n	1d3e <c_uSD::write(short*, long)+0xee>
    nbuf++;
    1ccc:	ldrh.w	r3, [r4, #1286]	; 0x506
    if(closing) {closing=0; state=3;}
    1cd0:	ldrsh.w	r2, [r4, #1288]	; 0x508
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    1cd4:	adds	r3, #1
    1cd6:	strh.w	r3, [r4, #1286]	; 0x506
    if(closing) {closing=0; state=3;}
    1cda:	cbnz	r2, 1d18 <c_uSD::write(short*, long)+0xc8>
    1cdc:	ldrsh.w	r0, [r4, #1284]	; 0x504
    1ce0:	b.n	1c66 <c_uSD::write(short*, long)+0x16>
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1ce2:	ldr.w	r0, [r4, #1280]	; 0x500
    1ce6:	cbz	r0, 1cf6 <c_uSD::write(short*, long)+0xa6>
    1ce8:	mov.w	r2, #41943040	; 0x2800000
    1cec:	movs	r3, #0
    1cee:	bl	4d54 <ExFatFile::preAllocate(unsigned long long)>
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    1cf2:	cmp	r0, #0
    1cf4:	bne.n	1ca0 <c_uSD::write(short*, long)+0x50>
    1cf6:	mov	r0, r4
    1cf8:	ldr	r1, [pc, #84]	; (1d50 <c_uSD::write(short*, long)+0x100>)
    1cfa:	bl	1c28 <SdBase<FsVolume>::errorHalt(char const*)>
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    1cfe:	mov	r0, r4
    1d00:	ldr	r1, [pc, #80]	; (1d54 <c_uSD::write(short*, long)+0x104>)
    1d02:	bl	1c28 <SdBase<FsVolume>::errorHalt(char const*)>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1d06:	ldr.w	r0, [r4, #1280]	; 0x500
    1d0a:	cmp	r0, #0
    1d0c:	beq.n	1cc8 <c_uSD::write(short*, long)+0x78>
    1d0e:	mov	r1, r6
    1d10:	mov	r2, r5
    1d12:	bl	4f70 <ExFatFile::write(void const*, unsigned int)>
    1d16:	b.n	1cc8 <c_uSD::write(short*, long)+0x78>
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
    1d18:	movs	r2, #0
    1d1a:	movs	r3, #3
    1d1c:	strh.w	r2, [r4, #1288]	; 0x508
    1d20:	strh.w	r3, [r4, #1284]	; 0x504
  }
  
  if(state == 3)
  {
    state=close();
    1d24:	mov	r0, r4
    1d26:	bl	c48 <c_uSD::close()>
    1d2a:	strh.w	r0, [r4, #1284]	; 0x504
  }
  return state;
    1d2e:	pop	{r4, r5, r6, pc}
int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    1d30:	movw	r3, #65535	; 0xffff
    1d34:	strh.w	r3, [r4, #1284]	; 0x504
    1d38:	mov.w	r0, #4294967295
    1d3c:	pop	{r4, r5, r6, pc}
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1d3e:	mov	r0, r4
    1d40:	ldr	r1, [pc, #20]	; (1d58 <c_uSD::write(short*, long)+0x108>)
    1d42:	bl	1c28 <SdBase<FsVolume>::errorHalt(char const*)>
    1d46:	nop
    1d48:	.word	0x20019a1c
    1d4c:	.word	0x2001507c
    1d50:	.word	0x0001328c
    1d54:	.word	0x00013278
    1d58:	.word	0x00013260

00001d5c <loop>:
  int16_t mustStore=1;
#else
  int16_t mustStore=0;
#endif

extern "C" void loop() {
    1d5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    1d60:	ldr	r6, [pc, #720]	; (2034 <loop+0x2d8>)
    1d62:	ldrh.w	r3, [r6, #2036]	; 0x7f4
  t = tail;
    1d66:	ldrh.w	r1, [r6, #2038]	; 0x7f6
template <int mq>
uint16_t mRecordQueue<mq>::available(void)
{
  uint16_t h, t;

  h = head;
    1d6a:	uxth	r3, r3
  t = tail;
    1d6c:	uxth	r1, r1
  if (h >= t) return h - t;
    1d6e:	cmp	r3, r1
  return mq + h - t;
    1d70:	itte	cc
    1d72:	addcc.w	r2, r3, #500	; 0x1f4
    1d76:	subcc	r3, r2, r1
{
  uint16_t h, t;

  h = head;
  t = tail;
  if (h >= t) return h - t;
    1d78:	subcs	r3, r3, r1
    1d7a:	uxth	r3, r3
    1d7c:	sub	sp, #24
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    1d7e:	cmp	r3, #0
    1d80:	beq.n	1e78 <loop+0x11c>
  if(have_data)
  { // have data on queue
//    started=1; // flag that we have now data
    #if MDEL<0
      int32_t nsec;
      nsec=checkDutyCycle(&acqParameters, state);
    1d82:	ldr	r5, [pc, #692]	; (2038 <loop+0x2dc>)
    1d84:	ldr	r0, [pc, #692]	; (203c <loop+0x2e0>)
    1d86:	ldrsh.w	r1, [r5]
    1d8a:	bl	1124 <checkDutyCycle(ACQ_Parameters_s*, short)>
      if(nsec<0) { uSD.setClosing();} // this will be last record in file
    1d8e:	subs	r4, r0, #0
    1d90:	blt.w	1f66 <loop+0x20a>
      if(nsec>0) 
    1d94:	beq.n	1da2 <loop+0x46>
      { 
        #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
          I2S_stopClock();
        #endif
        #if DO_DEBUG>1
          logFile.close();
    1d96:	ldr	r0, [pc, #680]	; (2040 <loop+0x2e4>)
    1d98:	bl	6de8 <FsBaseFile::close()>
        #endif
        setWakeupCallandSleep(nsec); // file closed sleep now
    1d9c:	mov	r0, r4
    1d9e:	bl	f8c <setWakeupCallandSleep(unsigned long)>
template <int mq>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
    1da2:	ldr.w	r0, [r6, #2032]	; 0x7f0
    1da6:	ldr	r2, [pc, #652]	; (2034 <loop+0x2d8>)
    1da8:	cmp	r0, #0
    1daa:	beq.w	1ffa <loop+0x29e>
    1dae:	movs	r2, #0
    1db0:	ldr	r3, [pc, #656]	; (2044 <loop+0x2e8>)
    1db2:	subs	r2, #2
    1db4:	add.w	r4, r3, #256	; 0x100
    // fetch data from queues
    int16_t * data[NCH];
    for(int ii=0; ii<NCH; ii++) data[ii] = (int16_t *)queue[ii].readBuffer();
    // multiplex data
    int16_t *tmp = tempBuffer;
    for(int ii=0;ii<AUDIO_BLOCK_SAMPLES;ii++) for(int jj=0; jj<NCH; jj++) *tmp++ = *data[jj]++;
    1db8:	ldrsh.w	r1, [r2, #2]!
    1dbc:	strh.w	r1, [r3, #2]!
    1dc0:	cmp	r4, r3
    1dc2:	bne.n	1db8 <loop+0x5c>
}

template <int mq>
void mRecordQueue<mq>::freeBuffer(void)
{
	if (userblock == NULL) return;
    1dc4:	cbz	r0, 1dd0 <loop+0x74>
	release(userblock);
    1dc6:	bl	a874 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    1dca:	movs	r3, #0
    1dcc:	str.w	r3, [r6, #2032]	; 0x7f0

    #if(MDET)
      mustStore = process1.getSigCount() >  0;
    #endif

    if(mustStore)
    1dd0:	ldr	r3, [pc, #628]	; (2048 <loop+0x2ec>)
    1dd2:	ldrsh.w	r3, [r3]
    1dd6:	cmp	r3, #0
    1dd8:	beq.w	1f30 <loop+0x1d4>
    {
      if(state==0)
    1ddc:	ldrsh.w	r0, [r5]
      { // generate header before file is opened
        #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
          uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
          //
          int ndat=outptr-diskBuffer;
    1de0:	ldr	r4, [pc, #616]	; (204c <loop+0x2f0>)
      mustStore = process1.getSigCount() >  0;
    #endif

    if(mustStore)
    {
      if(state==0)
    1de2:	cmp	r0, #0
    1de4:	beq.w	1fa8 <loop+0x24c>
    1de8:	ldr	r6, [r4, #0]
      
      // number of data in tempBuffer
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1dea:	ldr	r0, [pc, #612]	; (2050 <loop+0x2f4>)
    1dec:	rsb	lr, r6, r0
    1df0:	mov.w	r7, lr, asr #1

      tmp = tempBuffer;
      if (nout>ndat)
    1df4:	cmp	r7, #128	; 0x80
      
      // number of data in tempBuffer
      int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1df6:	mov	sl, r6

      tmp = tempBuffer;
      if (nout>ndat)
    1df8:	bgt.w	1f70 <loop+0x214>
      }
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    1dfc:	cmp	r7, #0
    1dfe:	ble.w	202a <loop+0x2ce>
    1e02:	ldr.w	ip, [pc, #664]	; 209c <loop+0x340>
    1e06:	mov	r3, r6
    1e08:	mov	r2, ip
    1e0a:	ldrsh.w	r1, [r2], #2
    1e0e:	strh.w	r1, [r3], #2
    1e12:	cmp	r0, r3
    1e14:	bne.n	1e0a <loop+0xae>
    1e16:	ldr.w	sl, [pc, #568]	; 2050 <loop+0x2f4>
    1e1a:	add.w	r6, ip, lr
      }
      
      if(nout==0) //buffer has been filled, so write to disk
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
    1e1e:	bl	93c8 <micros>
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1e22:	ldr.w	r8, [pc, #572]	; 2060 <loop+0x304>
    1e26:	rsb	r2, r8, sl
    1e2a:	asrs	r2, r2, #1
      }
      
      if(nout==0) //buffer has been filled, so write to disk
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
    1e2c:	mov	r9, r0
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1e2e:	mov	r1, r8
    1e30:	ldr	r0, [pc, #544]	; (2054 <loop+0x2f8>)
    1e32:	bl	1c50 <c_uSD::write(short*, long)>
    1e36:	strh	r0, [r5, #0]
        t1=micros();
    1e38:	bl	93c8 <micros>
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
    1e3c:	ldr	r2, [pc, #536]	; (2058 <loop+0x2fc>)
    1e3e:	ldr	r3, [r2, #0]
      { int32_t nbuf=ptr-diskBuffer;
      
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
    1e40:	rsb	r0, r9, r0
        if(t2<t3) t3=t2; // accumulate some time statistics
    1e44:	cmp	r0, r3
        if(t2>t4) t4=t2;
    1e46:	ldr	r3, [pc, #532]	; (205c <loop+0x300>)
      
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
    1e48:	it	cc
    1e4a:	strcc	r0, [r2, #0]
        if(t2>t4) t4=t2;
    1e4c:	ldr	r2, [r3, #0]
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
        ndat-=nbuf;
    1e4e:	rsb	r7, r7, #128	; 0x80
        to=micros();
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        t1=micros();
        t2=t1-to;
        if(t2<t3) t3=t2; // accumulate some time statistics
        if(t2>t4) t4=t2;
    1e52:	cmp	r0, r2
    1e54:	it	hi
    1e56:	strhi	r0, [r3, #0]
    1e58:	ldr	r3, [pc, #516]	; (2060 <loop+0x304>)

        ptr=(int16_t *)diskBuffer;
      }

      if(ndat>0) // save residual data
    1e5a:	cbz	r7, 1e6c <loop+0x110>
    1e5c:	movs	r2, #0
      {
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1e5e:	adds	r2, #1
    1e60:	ldrh.w	r1, [r6], #2
    1e64:	strh.w	r1, [r3], #2
    1e68:	cmp	r7, r2
    1e6a:	bgt.n	1e5e <loop+0x102>
      }
      
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position

      if(!state)
    1e6c:	ldrsh.w	r2, [r5]
      {
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
      }
      
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position
    1e70:	str	r3, [r4, #0]

      if(!state)
    1e72:	cmp	r2, #0
    1e74:	beq.w	1f8a <loop+0x22e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e78:	ldr.w	lr, [pc, #552]	; 20a4 <loop+0x348>
#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
    1e7c:	ldr	r0, [pc, #484]	; (2064 <loop+0x308>)
    1e7e:	ldr.w	r3, [lr]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1e82:	ldr	r4, [pc, #484]	; (2068 <loop+0x30c>)
    1e84:	str	r3, [sp, #16]
  if(millis()>t0+1000)
    1e86:	ldr	r3, [r0, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1e88:	ldr	r2, [r4, #0]
	return ret;
    1e8a:	ldr	r1, [sp, #16]
  if(millis()>t0+1000)
    1e8c:	add.w	r3, r3, #1000	; 0x3e8

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1e90:	adds	r2, #1
  if(millis()>t0+1000)
    1e92:	cmp	r3, r1

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1e94:	str	r2, [r4, #0]
  if(millis()>t0+1000)
    1e96:	bcs.n	1f28 <loop+0x1cc>
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    1e98:	ldr	r6, [pc, #444]	; (2058 <loop+0x2fc>)
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    1e9a:	ldr.w	r8, [pc, #524]	; 20a8 <loop+0x34c>
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    1e9e:	ldr	r1, [r6, #0]
    1ea0:	ldr.w	r9, [pc, #432]	; 2054 <loop+0x2f8>
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    1ea4:	ldr	r7, [pc, #452]	; (206c <loop+0x310>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ea6:	ldr.w	lr, [lr]
    1eaa:	ldrh.w	r3, [r9, #1286]	; 0x506
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    1eae:	ldr	r5, [pc, #428]	; (205c <loop+0x300>)
    1eb0:	str.w	lr, [sp, #20]
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
    1eb4:	cmp	r1, r8
    1eb6:	it	hi
    1eb8:	movhi.w	r1, #4294967295
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    1ebc:	str	r1, [sp, #0]
    1ebe:	ldrh	r1, [r7, #0]
    1ec0:	str	r1, [sp, #8]
	return ret;
    1ec2:	ldr.w	lr, [sp, #20]
    1ec6:	ldr	r1, [r5, #0]
    1ec8:	str	r1, [sp, #4]
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
  {  t0=millis();
    1eca:	str.w	lr, [r0]

    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
    1ece:	ldr	r1, [pc, #416]	; (2070 <loop+0x314>)
    1ed0:	ldr	r0, [pc, #416]	; (2074 <loop+0x318>)
    1ed2:	bl	a6b4 <Print::printf(char const*, ...)>
      //
    #if DO_DEBUG>1  
      logFile.printf("\tloop: %5d %4d; %5d %5d; %5d\n",
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
    1ed6:	ldr	r1, [r6, #0]
            AudioMemoryUsageMax());
    1ed8:	ldrh	r0, [r7, #0]
    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    #if DO_DEBUG>1  
      logFile.printf("\tloop: %5d %4d; %5d %5d; %5d\n",
    1eda:	ldrh.w	r3, [r9, #1286]	; 0x506
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
            AudioMemoryUsageMax());
    1ede:	ldr	r2, [r4, #0]
    1ee0:	str	r0, [sp, #8]
    Serial.printf("\tloop: %5d %4d; %5d %5d; %5d",
          loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
          AudioMemoryUsageMax());
      //
    #if DO_DEBUG>1  
      logFile.printf("\tloop: %5d %4d; %5d %5d; %5d\n",
    1ee2:	cmp	r1, r8
    1ee4:	it	hi
    1ee6:	movhi.w	r1, #4294967295
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
            AudioMemoryUsageMax());
    1eea:	str	r1, [sp, #0]
    1eec:	ldr	r1, [r5, #0]
    1eee:	str	r1, [sp, #4]
    1ef0:	ldr	r0, [pc, #388]	; (2078 <loop+0x31c>)
    1ef2:	ldr	r1, [pc, #392]	; (207c <loop+0x320>)
    1ef4:	bl	a6b4 <Print::printf(char const*, ...)>
    #endif

    AudioMemoryUsageMaxReset();
    1ef8:	ldr	r3, [pc, #388]	; (2080 <loop+0x324>)
    queue[0].dropCount=0;
    process1.resetDetCount();
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
    1efa:	ldr	r2, [pc, #392]	; (2084 <loop+0x328>)
      logFile.printf("\tloop: %5d %4d; %5d %5d; %5d\n",
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
            AudioMemoryUsageMax());
    #endif

    AudioMemoryUsageMaxReset();
    1efc:	ldrh	r1, [r3, #0]
    1efe:	strh	r1, [r7, #0]
    queue[0].dropCount=0;
    process1.resetDetCount();
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
    1f00:	ldr	r3, [pc, #388]	; (2088 <loop+0x32c>)
    1f02:	ldr	r0, [pc, #368]	; (2074 <loop+0x318>)
            AudioMemoryUsageMax());
    #endif

    AudioMemoryUsageMaxReset();
    t3=1<<31;
    t4=0;
    1f04:	movs	r7, #0
            loopCount, uSD.getNbuf(), t3>100000?-1:t3,t4, 
            AudioMemoryUsageMax());
    #endif

    AudioMemoryUsageMaxReset();
    t3=1<<31;
    1f06:	mov.w	r1, #2147483648	; 0x80000000
    1f0a:	str	r1, [r6, #0]
    t4=0;
    1f0c:	str	r7, [r5, #0]
    queue[0].dropCount=0;
    process1.resetDetCount();
  #endif

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
    1f0e:	ldr	r2, [r2, #0]
    1f10:	ldr	r1, [pc, #376]	; (208c <loop+0x330>)
    1f12:	ldr	r3, [r3, #0]
    1f14:	bl	a6b4 <Print::printf(char const*, ...)>
  #endif
    Serial.println();
    1f18:	ldr	r0, [pc, #344]	; (2074 <loop+0x318>)
    1f1a:	bl	a684 <Print::println()>
    loopCount=0;
    maxValue=0;
    1f1e:	ldr	r2, [pc, #368]	; (2090 <loop+0x334>)
    maxNoise=0;
    1f20:	ldr	r3, [pc, #368]	; (2094 <loop+0x338>)
  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    loopCount=0;
    maxValue=0;
    1f22:	str	r7, [r2, #0]

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("; %5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
    Serial.println();
    loopCount=0;
    1f24:	str	r7, [r4, #0]
    maxValue=0;
    maxNoise=0;
    1f26:	str	r7, [r3, #0]
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
    1f28:	wfi
}
    1f2a:	add	sp, #24
    1f2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        #if DO_DEBUG>0
          Serial.println("closed");
        #endif
      }
    }
    else if(state>0)
    1f30:	ldrsh.w	r3, [r5]
    1f34:	ldr	r6, [pc, #256]	; (2038 <loop+0x2dc>)
    1f36:	cmp	r3, #0
    1f38:	ble.n	1e78 <loop+0x11c>
    { // close file
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
    1f3a:	ldr	r4, [pc, #272]	; (204c <loop+0x2f0>)
    1f3c:	ldr.w	r8, [pc, #288]	; 2060 <loop+0x304>
    1f40:	ldr	r3, [r4, #0]
    1f42:	rsb	r3, r8, r3
      if(nbuf>0)
    1f46:	asrs	r2, r3, #1
    1f48:	bne.n	1fee <loop+0x292>
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
      }
      state=uSD.close();
    1f4a:	ldr	r0, [pc, #264]	; (2054 <loop+0x2f8>)
    1f4c:	bl	c48 <c_uSD::close()>
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1f50:	movs	r2, #8
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
      if(nbuf>0)
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
      }
      state=uSD.close();
    1f52:	strh	r0, [r5, #0]
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1f54:	ldr	r3, [pc, #320]	; (2098 <loop+0x33c>)
    1f56:	str	r2, [sp, #0]
    1f58:	ldr	r1, [pc, #224]	; (203c <loop+0x2e0>)
    1f5a:	ldr	r0, [pc, #248]	; (2054 <loop+0x2f8>)
    1f5c:	bl	d50 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
      outptr = diskBuffer;
    1f60:	str.w	r8, [r4]
    1f64:	b.n	1e78 <loop+0x11c>
  public:
    c_uSD(): state(-1), closing(0) {;}
    void init();
    int16_t write(int16_t * data, int32_t ndat);
    uint16_t getNbuf(void) {return nbuf;}
    void setClosing(void) {closing=1;}
    1f66:	ldr	r3, [pc, #236]	; (2054 <loop+0x2f8>)
    1f68:	movs	r2, #1
    1f6a:	strh.w	r2, [r3, #1288]	; 0x508
    1f6e:	b.n	1da2 <loop+0x46>
      
      // number of free samples on diskbuffer
      int32_t nout = diskBuffer+BUFFERSIZE - outptr;

      tmp = tempBuffer;
      if (nout>ndat)
    1f70:	ldr	r3, [pc, #296]	; (209c <loop+0x340>)
    1f72:	subs	r2, r6, #2
    1f74:	add.w	r0, r3, #256	; 0x100
      { // sufficient space for all data
        for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1f78:	ldrsh.w	r1, [r3], #2
    1f7c:	strh.w	r1, [r2, #2]!
    1f80:	cmp	r3, r0
    1f82:	bne.n	1f78 <loop+0x21c>
    1f84:	add.w	r3, r6, #256	; 0x100
    1f88:	b.n	1e6c <loop+0x110>
      // all data are copied
      outptr=(int16_t *)ptr; // save actual write position

      if(!state)
      { // store config again if you wanted time of latest file stored
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1f8a:	movs	r2, #8
    1f8c:	str	r2, [sp, #0]
    1f8e:	ldr	r3, [pc, #264]	; (2098 <loop+0x33c>)
    1f90:	ldr	r1, [pc, #168]	; (203c <loop+0x2e0>)
    1f92:	ldr	r0, [pc, #192]	; (2054 <loop+0x2f8>)
    1f94:	bl	d50 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
    1f98:	movs	r1, #6
    1f9a:	ldr	r0, [pc, #260]	; (20a0 <loop+0x344>)
    1f9c:	bl	8ba8 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1fa0:	ldr	r0, [pc, #208]	; (2074 <loop+0x318>)
    1fa2:	bl	a684 <Print::println()>
    1fa6:	b.n	1e78 <loop+0x11c>
    if(mustStore)
    {
      if(state==0)
      { // generate header before file is opened
        #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
          uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
    1fa8:	bl	a40 <wavHeader(unsigned long)>
          //
          int ndat=outptr-diskBuffer;
    1fac:	ldr	r6, [r4, #0]
    1fae:	ldr	r2, [pc, #176]	; (2060 <loop+0x304>)
    1fb0:	subs	r7, r6, r2
    1fb2:	asrs	r7, r7, #1
          if(ndat>0)
    1fb4:	cmp	r7, #0
    1fb6:	ble.n	1fd2 <loop+0x276>
    1fb8:	add.w	r7, r7, #2147483648	; 0x80000000
    1fbc:	subs	r7, #1
    1fbe:	add.w	r7, r2, r7, lsl #1
    1fc2:	subs	r3, r2, #2
    1fc4:	adds	r2, #42	; 0x2a
          { // shift exisiting data after header, which is always at beginnig of file
            for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
    1fc6:	ldrsh.w	r1, [r3, #2]!
    1fca:	strh.w	r1, [r2, #2]!
    1fce:	cmp	r7, r3
    1fd0:	bne.n	1fc6 <loop+0x26a>
    1fd2:	ldr	r2, [pc, #140]	; (2060 <loop+0x304>)
    1fd4:	subs	r3, r0, #4
    1fd6:	adds	r0, #40	; 0x28
          }
          // copy header to disk buffer
          uint32_t *ptr=(uint32_t *) diskBuffer;
          for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
    1fd8:	ldr.w	r1, [r3, #4]!
    1fdc:	str.w	r1, [r2], #4
    1fe0:	cmp	r3, r0
    1fe2:	bne.n	1fd8 <loop+0x27c>
          outptr+=22; //(44 bytes)
    1fe4:	adds	r6, #44	; 0x2c
          uint32_t *ptr=(uint32_t *) diskBuffer;
          // copy to disk buffer
          for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
          outptr+=256; //(512 bytes)
        #endif
        state=1;
    1fe6:	movs	r3, #1
            for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
          }
          // copy header to disk buffer
          uint32_t *ptr=(uint32_t *) diskBuffer;
          for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
          outptr+=22; //(44 bytes)
    1fe8:	str	r6, [r4, #0]
          uint32_t *ptr=(uint32_t *) diskBuffer;
          // copy to disk buffer
          for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
          outptr+=256; //(512 bytes)
        #endif
        state=1;
    1fea:	strh	r3, [r5, #0]
    1fec:	b.n	1dea <loop+0x8e>
    else if(state>0)
    { // close file
      // write remaining data to disk and close file
      uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
      if(nbuf>0)
      { state=uSD.write(diskBuffer,nbuf); // this is blocking
    1fee:	mov	r1, r8
    1ff0:	ldr	r0, [pc, #96]	; (2054 <loop+0x2f8>)
    1ff2:	bl	1c50 <c_uSD::write(short*, long)>
    1ff6:	strh	r0, [r6, #0]
    1ff8:	b.n	1f4a <loop+0x1ee>
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    1ffa:	ldrh.w	r3, [r2, #2038]	; 0x7f6
	if (t == head) return NULL;
    1ffe:	ldrh.w	r2, [r2, #2036]	; 0x7f4
void * mRecordQueue<mq>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2002:	uxth	r3, r3
	if (t == head) return NULL;
    2004:	uxth	r2, r2
    2006:	cmp	r3, r2
    2008:	beq.n	202e <loop+0x2d2>
	if (++t >= mq) t = 0;
    200a:	adds	r3, #1
    200c:	uxth	r3, r3
    200e:	cmp.w	r3, #500	; 0x1f4
    2012:	ite	cc
    2014:	movcc	r0, r3
    2016:	movcs	r3, r0
	userblock = queue[t];
    2018:	adds	r0, #8
    201a:	ldr.w	r0, [r6, r0, lsl #2]
    201e:	str.w	r0, [r6, #2032]	; 0x7f0
	tail = t;
    2022:	strh.w	r3, [r6, #2038]	; 0x7f6
	return (void *) userblock->data;
    2026:	adds	r2, r0, #4
    2028:	b.n	1db0 <loop+0x54>
      }
      else
      { // fill up disk buffer
        int nbuf=nout;
        if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
        for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    202a:	ldr	r6, [pc, #112]	; (209c <loop+0x340>)
    202c:	b.n	1e1e <loop+0xc2>
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    202e:	mov	r2, r0
    2030:	b.n	1db0 <loop+0x54>
    2032:	nop
    2034:	.word	0x20014880
    2038:	.word	0x20019484
    203c:	.word	0x20013764
    2040:	.word	0x2001940c
    2044:	.word	0x200192fa
    2048:	.word	0x20013760
    204c:	.word	0x20013734
    2050:	.word	0x2001927c
    2054:	.word	0x20014364
    2058:	.word	0x20014878
    205c:	.word	0x2001487c
    2060:	.word	0x2001527c
    2064:	.word	0x20019488
    2068:	.word	0x20019480
    206c:	.word	0x20019b8c
    2070:	.word	0x000132ac
    2074:	.word	0x200138e4
    2078:	.word	0x200193fc
    207c:	.word	0x000132cc
    2080:	.word	0x20019c0c
    2084:	.word	0x40036008
    2088:	.word	0x40036004
    208c:	.word	0x000132ec
    2090:	.word	0x2001947c
    2094:	.word	0x200192c8
    2098:	.word	0x20013740
    209c:	.word	0x200192fc
    20a0:	.word	0x000132a4
    20a4:	.word	0x20019a84
    20a8:	.word	0x000186a0

000020ac <_GLOBAL__sub_I_acqParameters>:
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    20ac:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

class AudioInputAnalog : public AudioStream
{
public:
        AudioInputAnalog() : AudioStream(0, NULL) { init(A2); }
        AudioInputAnalog(uint8_t pin) : AudioStream(0, NULL) { init(pin); }
    20b0:	ldr.w	r8, [pc, #280]	; 21cc <_GLOBAL__sub_I_acqParameters+0x120>
template <int mq>
class mRecordQueue : public AudioStream
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
    20b4:	ldr	r6, [pc, #228]	; (219c <_GLOBAL__sub_I_acqParameters+0xf0>)
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    20b6:	ldr	r5, [pc, #232]	; (21a0 <_GLOBAL__sub_I_acqParameters+0xf4>)
    #include "m_delay.h" 
    mDelay<NCH,(MDEL+2)>  delay1(0); // have two buffers more in queue only to be safe 
  #endif 

  #if MDEL<0
      AudioConnection     patchCord2(acq, queue[0]); 
    20b8:	ldr	r7, [pc, #232]	; (21a4 <_GLOBAL__sub_I_acqParameters+0xf8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    20ba:	ldr.w	r9, [pc, #276]	; 21d0 <_GLOBAL__sub_I_acqParameters+0x124>
    20be:	movs	r2, #0
    20c0:	mov	r1, r2
    20c2:	mov	r0, r8
    20c4:	bl	770 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    20c8:	ldr	r3, [pc, #220]	; (21a8 <_GLOBAL__sub_I_acqParameters+0xfc>)
    20ca:	str.w	r3, [r8]
    20ce:	movs	r0, #16
    20d0:	bl	29f4 <AudioInputAnalog::init(unsigned char)>
    20d4:	add.w	r2, r6, #28
    20d8:	movs	r1, #1
    20da:	mov	r0, r6
    20dc:	movs	r4, #0
    20de:	bl	770 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    20e2:	ldr	r3, [pc, #200]	; (21ac <_GLOBAL__sub_I_acqParameters+0x100>)
    20e4:	strh.w	r4, [r6, #2036]	; 0x7f4
    20e8:	str	r3, [r6, #0]
    20ea:	strh.w	r4, [r6, #2038]	; 0x7f6
		{ isConnected = false;
		  connect(); }
    20ee:	mov	r0, r5
    20f0:	str.w	r4, [r6, #2032]	; 0x7f0
    20f4:	strh.w	r4, [r6, #2040]	; 0x7f8
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    20f8:	str.w	r8, [r5]
    20fc:	str	r6, [r5, #4]
    20fe:	strb	r4, [r5, #8]
    2100:	strb	r4, [r5, #9]
    2102:	str	r4, [r5, #12]
		{ isConnected = false;
    2104:	strb	r4, [r5, #16]
		  connect(); }
    2106:	bl	a914 <AudioConnection::connect()>
    210a:	mov	r2, r7
    210c:	mov	r0, r5
    210e:	ldr	r1, [pc, #160]	; (21b0 <_GLOBAL__sub_I_acqParameters+0x104>)
    2110:	bl	ac58 <__aeabi_atexit>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2114:	ldr	r3, [pc, #156]	; (21b4 <_GLOBAL__sub_I_acqParameters+0x108>)
// rename in SdFat-beta/src the file SdFat.h to SdFat-beta.h
// to avoid confict with stock SD library needed for Audio library
//
#include "SdFat.h" 

FsFile logFile;
    2116:	ldr	r1, [pc, #160]	; (21b8 <_GLOBAL__sub_I_acqParameters+0x10c>)
    2118:	strb	r4, [r3, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    211a:	mov.w	r5, #1000	; 0x3e8
    211e:	mov	r2, r7
    2120:	strb	r4, [r3, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    2122:	str	r4, [r3, #72]	; 0x48
    2124:	str	r4, [r3, #76]	; 0x4c
    2126:	str	r5, [r3, #8]
    2128:	mov	r0, r3
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    212a:	str.w	r9, [r3]
    212e:	bl	ac58 <__aeabi_atexit>
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    2132:	ldr	r3, [pc, #136]	; (21bc <_GLOBAL__sub_I_acqParameters+0x110>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2134:	ldr	r0, [pc, #136]	; (21c0 <_GLOBAL__sub_I_acqParameters+0x114>)
    2136:	str.w	r5, [r3, #1212]	; 0x4bc
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    213a:	movs	r5, #41	; 0x29
    213c:	ldr	r1, [pc, #132]	; (21c4 <_GLOBAL__sub_I_acqParameters+0x118>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    213e:	ldr.w	lr, [pc, #148]	; 21d4 <_GLOBAL__sub_I_acqParameters+0x128>
    2142:	str.w	r4, [r3, #1152]	; 0x480
    2146:	movs	r6, #1
    2148:	str.w	r4, [r3, #1156]	; 0x484
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    214c:	strb.w	r4, [r3, #1176]	; 0x498
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2150:	strb.w	r4, [r3, #1177]	; 0x499
    2154:	strb.w	r4, [r3, #1202]	; 0x4b2
    2158:	strb.w	r4, [r3, #1208]	; 0x4b8
    215c:	strb.w	r4, [r3, #1216]	; 0x4c0
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    2160:	str.w	r4, [r3, #1276]	; 0x4fc
    2164:	str.w	r4, [r3, #1280]	; 0x500
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    2168:	strh.w	r4, [r3, #1288]	; 0x508
    216c:	strb.w	r5, [r3, #1199]	; 0x4af
    2170:	movw	r4, #65535	; 0xffff
    2174:	str.w	r0, [r3, #1168]	; 0x490
    2178:	str.w	r1, [r3, #1180]	; 0x49c
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    217c:	mov	r2, r7
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    217e:	str.w	r9, [r3, #1204]	; 0x4b4
    2182:	mov	r0, r3
    2184:	str.w	lr, [r3, #1188]	; 0x4a4
    2188:	strb.w	r6, [r3, #1197]	; 0x4ad
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    218c:	strh.w	r4, [r3, #1284]	; 0x504
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2190:	ldr	r1, [pc, #52]	; (21c8 <_GLOBAL__sub_I_acqParameters+0x11c>)
  }

#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    2192:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2196:	b.w	ac58 <__aeabi_atexit>
    219a:	nop
    219c:	.word	0x20014880
    21a0:	.word	0x20019468
    21a4:	.word	0x20013730
    21a8:	.word	0x0001330c
    21ac:	.word	0x00012df8
    21b0:	.word	0x00000569
    21b4:	.word	0x200193fc
    21b8:	.word	0x00000531
    21bc:	.word	0x20014364
    21c0:	.word	0x00013544
    21c4:	.word	0x000134ec
    21c8:	.word	0x00000549
    21cc:	.word	0x2001944c
    21d0:	.word	0x00012e28
    21d4:	.word	0x38011001

000021d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    21d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21dc:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    21de:	ldr	r5, [r4, #12]
    21e0:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    21e4:	ldr	r5, [pc, #484]	; (23cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    21e6:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    21e8:	bne.n	2290 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    21ea:	lsls	r7, r3, #31
    21ec:	bpl.w	2356 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    21f0:	cmp	r1, #0
    21f2:	beq.w	23bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    21f6:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    21f8:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    21fa:	it	ne
    21fc:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2200:	str	r5, [r4, #52]	; 0x34
    2202:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2204:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2208:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    220c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2210:	cmp.w	ip, #0
    2214:	beq.w	2368 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    2218:	cbz	r1, 2224 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    221a:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    221c:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    2220:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2224:	ldr	r5, [r0, #4]
    2226:	ldrb	r6, [r5, #8]
			if (count == 2)
    2228:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    222c:	add.w	r6, r6, #4294967295
    2230:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2234:	ite	eq
    2236:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    223a:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    223e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2240:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2242:	sub.w	ip, ip, #2
    2246:	b.n	225a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2248:	cbz	r2, 224e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    224a:	strb	r4, [r2, #0]
    224c:	adds	r2, #1
						} 
						count_read--;
    224e:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2250:	and.w	r5, r5, #61440	; 0xf000
    2254:	cmp	r5, r6
    2256:	bls.n	2286 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    2258:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    225a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    225c:	tst.w	r5, #240	; 0xf0
    2260:	beq.n	2250 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2262:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2264:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    2268:	mov	r7, r2
    226a:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    226e:	bne.n	2248 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2270:	cbz	r2, 227a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    2272:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    2276:	strb	r4, [r2, #1]
    2278:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    227a:	and.w	r5, r5, #61440	; 0xf000
    227e:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    2280:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2284:	bhi.n	2258 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    2286:	cmp.w	ip, #0
    228a:	beq.n	2368 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    228c:	ldr	r4, [r0, #0]
    228e:	b.n	2218 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2290:	lsls	r5, r3, #31
    2292:	bpl.n	232e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    2294:	cmp	r1, #0
    2296:	beq.w	23ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    229a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    229c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    229e:	it	ne
    22a0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    22a4:	str	r5, [r4, #52]	; 0x34
    22a6:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    22a8:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    22ac:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    22b0:	cmp.w	lr, #0
    22b4:	beq.n	233a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    22b6:	cbz	r1, 22c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    22b8:	ldrb.w	ip, [r1, #1]
    22bc:	ldrb	r5, [r1, #0]
    22be:	adds	r1, #2
    22c0:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    22c4:	ldr	r5, [r0, #4]
    22c6:	ldrb	r6, [r5, #8]
			if (count == 2)
    22c8:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    22cc:	add.w	r6, r6, #4294967295
    22d0:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    22d4:	ite	eq
    22d6:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    22da:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    22de:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    22e0:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    22e2:	sub.w	lr, lr, #2
    22e6:	b.n	22fa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    22e8:	cbz	r2, 22ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    22ea:	strb	r4, [r2, #0]
    22ec:	adds	r2, #1
						} 
						count_read--;
    22ee:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    22f0:	and.w	r5, r5, #61440	; 0xf000
    22f4:	cmp	r5, r6
    22f6:	bls.n	2324 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    22f8:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    22fa:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    22fc:	tst.w	r5, #240	; 0xf0
    2300:	beq.n	22f0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2302:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    2306:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2308:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    230a:	bne.n	22e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    230c:	cbz	r2, 2318 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    230e:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    2312:	asrs	r4, r4, #8
    2314:	strb	r4, [r2, #1]
    2316:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2318:	and.w	r5, r5, #61440	; 0xf000
    231c:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    231e:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2322:	bhi.n	22f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    2324:	cmp.w	lr, #0
    2328:	beq.n	233a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    232a:	ldr	r4, [r0, #0]
    232c:	b.n	22b6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    232e:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2330:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2334:	cmp.w	lr, #0
    2338:	bne.n	22b6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    233a:	cbz	r3, 2384 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    233c:	ldr	r4, [r0, #0]
			sr = port().SR;
    233e:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2340:	tst.w	r1, #240	; 0xf0
    2344:	beq.n	233e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2346:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2348:	lsls	r4, r3, #31
    234a:	bpl.n	2388 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    234c:	cbz	r2, 2352 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    234e:	strb	r1, [r2, #0]
    2350:	adds	r2, #1
					count_read--;
    2352:	subs	r3, #1
    2354:	b.n	233a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2356:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    235a:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    235c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2360:	cmp.w	ip, #0
    2364:	bne.w	2218 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    2368:	cbz	r3, 2384 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    236a:	ldr	r4, [r0, #0]
			sr = port().SR;
    236c:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    236e:	tst.w	r1, #240	; 0xf0
    2372:	beq.n	236c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    2374:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2376:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2378:	bpl.n	239a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    237a:	cbz	r2, 2380 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    237c:	strb	r1, [r2, #0]
    237e:	adds	r2, #1
					count_read--;
    2380:	subs	r3, #1
    2382:	b.n	2368 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    2384:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    2388:	cbz	r2, 2396 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    238a:	mov	r4, r2
						*p_read++ = w >> 8;
    238c:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    238e:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    2392:	strb	r5, [r2, #1]
    2394:	mov	r2, r4
					}
					count_read -= 2;
    2396:	subs	r3, #2
    2398:	b.n	233a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    239a:	cbz	r2, 23a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    239c:	mov	r4, r2
    239e:	asrs	r5, r1, #8
    23a0:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    23a4:	strb	r1, [r2, #1]
    23a6:	mov	r2, r4
					}
					count_read -= 2;
    23a8:	subs	r3, #2
    23aa:	b.n	2368 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23ac:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    23b0:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23b2:	it	ne
    23b4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    23b8:	str	r5, [r4, #52]	; 0x34
    23ba:	b.n	22a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23bc:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    23c0:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23c2:	it	ne
    23c4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    23c8:	str	r5, [r4, #52]	; 0x34
    23ca:	b.n	2204 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    23cc:	.word	0x801f0400

000023d0 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    23d0:	cbz	r3, 23d6 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    23d2:	b.w	21d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    23d6:	bx	lr

000023d8 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    23d8:	ldr	r2, [pc, #400]	; (256c <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    23da:	ldr	r3, [pc, #404]	; (2570 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    23dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    23e0:	ldr	r6, [pc, #400]	; (2574 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    23e2:	ldr.w	sl, [pc, #416]	; 2584 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    23e6:	ldr	r4, [pc, #400]	; (2578 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    23e8:	ldr.w	r9, [pc, #400]	; 257c <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    23ec:	umull	r5, r2, r2, r0
    23f0:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    23f4:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    23f8:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    23fc:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2400:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2404:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2406:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2408:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    240c:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2410:	rsb	r6, fp, r7
    2414:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2418:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    241a:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    241c:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    241e:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2422:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2426:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    242a:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    242e:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2430:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2434:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2438:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    243c:	adds	r6, #1
    243e:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2440:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2442:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2444:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2446:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    2448:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    244a:	movw	fp, #365	; 0x16d
    244e:	mov.w	r8, #100	; 0x64
    2452:	mov.w	sl, #400	; 0x190
    2456:	b.n	2476 <breakTime(long, tmElements_t&)+0x9e>
    2458:	rsb	r5, r6, r5, asr #7
    245c:	mls	r5, sl, r5, r3
    2460:	cbnz	r0, 24c0 <breakTime(long, tmElements_t&)+0xe8>
    2462:	cmp	r5, #0
    2464:	ite	ne
    2466:	movne	r0, fp
    2468:	moveq.w	r0, #366	; 0x16e
    246c:	add	r2, r0
    246e:	cmp	ip, r2
    2470:	add.w	r4, r4, #1
    2474:	bcc.n	249e <breakTime(long, tmElements_t&)+0xc6>
    2476:	uxtb	r7, r4
    2478:	addw	r3, r7, #1970	; 0x7b2
    247c:	smull	r0, r5, r9, r3
    2480:	asrs	r6, r3, #31
    2482:	rsb	r0, r6, r5, asr #5
    2486:	ands.w	lr, r3, #3
    248a:	mls	r0, r8, r0, r3
    248e:	beq.n	2458 <breakTime(long, tmElements_t&)+0x80>
    2490:	movw	r0, #365	; 0x16d
    2494:	add	r2, r0
    2496:	cmp	ip, r2
    2498:	add.w	r4, r4, #1
    249c:	bcs.n	2476 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    249e:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    24a0:	cmp.w	lr, #0
    24a4:	bne.n	24c6 <breakTime(long, tmElements_t&)+0xee>
    24a6:	ldr	r0, [pc, #212]	; (257c <breakTime(long, tmElements_t&)+0x1a4>)
    24a8:	asrs	r6, r3, #31
    24aa:	smull	r4, r0, r0, r3
    24ae:	rsb	r4, r6, r0, asr #5
    24b2:	movs	r5, #100	; 0x64
    24b4:	mls	r4, r5, r4, r3
    24b8:	cbz	r4, 252a <breakTime(long, tmElements_t&)+0x152>
    24ba:	mov.w	r4, #366	; 0x16e
    24be:	b.n	24cc <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    24c0:	mov.w	r0, #366	; 0x16e
    24c4:	b.n	246c <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    24c6:	movw	r4, #365	; 0x16d
    24ca:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    24cc:	ldr	r0, [pc, #172]	; (257c <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    24ce:	ldr	r5, [pc, #176]	; (2580 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    24d0:	smull	r7, r0, r0, r3
    24d4:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    24d8:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    24da:	rsb	r6, r6, r0, asr #7
    24de:	movs	r4, #100	; 0x64
    24e0:	mov.w	r0, #400	; 0x190
    24e4:	mls	r6, r0, r6, r3
    24e8:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    24ec:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    24f0:	movs	r0, #1
    24f2:	movs	r3, #0
    24f4:	b.n	24fc <breakTime(long, tmElements_t&)+0x124>
    24f6:	adds	r0, #1
    24f8:	uxtb	r0, r0
    24fa:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    24fc:	cmp	r3, #1
    24fe:	uxtb	r7, r3
    2500:	beq.n	2544 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2502:	ldrb	r4, [r3, r5]
    2504:	cmp	r4, r2
    2506:	bhi.n	251c <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    2508:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    250a:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    250e:	bne.n	24f6 <breakTime(long, tmElements_t&)+0x11e>
    2510:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2512:	adds	r2, #1
    2514:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    2516:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    2518:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    251c:	adds	r7, #1
    251e:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2520:	adds	r2, #1
    2522:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    2524:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    2526:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    252a:	mov.w	r4, #400	; 0x190
    252e:	rsb	r0, r6, r0, asr #7
    2532:	mls	r0, r4, r0, r3
    2536:	cmp	r0, #0
    2538:	movw	r4, #365	; 0x16d
    253c:	it	eq
    253e:	moveq.w	r4, #366	; 0x16e
    2542:	b.n	24cc <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2544:	cmp.w	lr, #0
    2548:	bne.n	2560 <breakTime(long, tmElements_t&)+0x188>
    254a:	cmp.w	r8, #0
    254e:	bne.n	2568 <breakTime(long, tmElements_t&)+0x190>
    2550:	cmp	r6, #0
    2552:	ite	ne
    2554:	movne	r4, #28
    2556:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2558:	cmp	r2, r4
    255a:	bcc.n	2564 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    255c:	subs	r2, r2, r4
    255e:	b.n	24f6 <breakTime(long, tmElements_t&)+0x11e>
    2560:	movs	r4, #28
    2562:	b.n	2558 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2564:	movs	r7, #2
    2566:	b.n	2512 <breakTime(long, tmElements_t&)+0x13a>
    2568:	movs	r4, #29
    256a:	b.n	2558 <breakTime(long, tmElements_t&)+0x180>
    256c:	.word	0xc22e4507
    2570:	.word	0x88888889
    2574:	.word	0x91a2b3c5
    2578:	.word	0xaaaaaaab
    257c:	.word	0x51eb851f
    2580:	.word	0x000132f8
    2584:	.word	0x24924925

00002588 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    2588:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    258a:	ldr	r1, [pc, #12]	; (2598 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    258c:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    258e:	bl	23d8 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    2592:	ldr	r3, [pc, #8]	; (259c <refreshCache(long) [clone .part.0]+0x14>)
    2594:	str	r4, [r3, #0]
    2596:	pop	{r4, pc}
    2598:	.word	0x20019490
    259c:	.word	0x2001948c

000025a0 <makeTime(tmElements_t const&)>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(const tmElements_t &tm){   
    25a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    25a4:	ldr	r1, [pc, #228]	; (268c <makeTime(tmElements_t const&)+0xec>)
    25a6:	ldrb	r6, [r0, #6]
    25a8:	mul.w	r1, r1, r6
  for (i = 0; i < tm.Year; i++) {
    25ac:	cbz	r6, 25f0 <makeTime(tmElements_t const&)+0x50>
    25ae:	addw	ip, r6, #1970	; 0x7b2
    25b2:	movw	r3, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    25b6:	ldr.w	lr, [pc, #216]	; 2690 <makeTime(tmElements_t const&)+0xf0>
    25ba:	movs	r7, #100	; 0x64
    25bc:	mov.w	r8, #400	; 0x190
    25c0:	b.n	25de <makeTime(tmElements_t const&)+0x3e>
    25c2:	tst.w	r3, #3
    25c6:	bne.n	25dc <makeTime(tmElements_t const&)+0x3c>
    25c8:	rsb	r2, r2, r5, asr #7
    25cc:	mls	r2, r8, r2, r3
    25d0:	cbnz	r4, 25d4 <makeTime(tmElements_t const&)+0x34>
    25d2:	cbnz	r2, 25dc <makeTime(tmElements_t const&)+0x3c>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    25d4:	add.w	r1, r1, #86016	; 0x15000
    25d8:	add.w	r1, r1, #384	; 0x180
    25dc:	adds	r3, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    25de:	smull	r2, r5, lr, r3
    25e2:	asrs	r2, r3, #31
    25e4:	rsb	r4, r2, r5, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    25e8:	cmp	r3, ip
    if (LEAP_YEAR(i)) {
    25ea:	mls	r4, r7, r4, r3
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    25ee:	bne.n	25c2 <makeTime(tmElements_t const&)+0x22>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    25f0:	ldrb	r7, [r0, #5]
    25f2:	cmp	r7, #1
    25f4:	ble.n	2656 <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    25f6:	ldr	r4, [pc, #152]	; (2690 <makeTime(tmElements_t const&)+0xf0>)
    25f8:	ldr	r2, [pc, #152]	; (2694 <makeTime(tmElements_t const&)+0xf4>)
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    25fa:	ldr.w	lr, [pc, #156]	; 2698 <makeTime(tmElements_t const&)+0xf8>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    25fe:	addw	r3, r6, #1970	; 0x7b2
    2602:	smull	r4, r6, r4, r3
    2606:	asrs	r4, r3, #31
    2608:	rsb	ip, r4, r6, asr #5
    260c:	movs	r5, #100	; 0x64
    260e:	rsb	r6, r4, r6, asr #7
    2612:	mov.w	r4, #400	; 0x190
    2616:	mls	ip, r5, ip, r3
    261a:	mls	r6, r4, r6, r3
    261e:	and.w	r5, r3, #3
    2622:	movs	r3, #1
    2624:	b.n	2636 <makeTime(tmElements_t const&)+0x96>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2626:	ldrb	r4, [r2, #0]
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2628:	adds	r3, #1
    262a:	cmp	r3, r7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    262c:	mla	r1, lr, r4, r1
    2630:	add.w	r2, r2, #1
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2634:	beq.n	2656 <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2636:	cmp	r3, #2
    2638:	bne.n	2626 <makeTime(tmElements_t const&)+0x86>
    263a:	cmp	r5, #0
    263c:	bne.n	2626 <makeTime(tmElements_t const&)+0x86>
    263e:	cmp.w	ip, #0
    2642:	beq.n	267c <makeTime(tmElements_t const&)+0xdc>
      seconds += SECS_PER_DAY * 29;
    2644:	add.w	r1, r1, #2490368	; 0x260000
    2648:	add.w	r1, r1, #15232	; 0x3b80
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    264c:	adds	r3, #1
    264e:	cmp	r3, r7
    2650:	add.w	r2, r2, #1
    2654:	bne.n	2636 <makeTime(tmElements_t const&)+0x96>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
    2656:	ldrb	r3, [r0, #1]
    2658:	ldrb	r5, [r0, #2]
    265a:	ldrb	r4, [r0, #0]
    265c:	ldrb	r2, [r0, #4]
    265e:	ldr	r0, [pc, #56]	; (2698 <makeTime(tmElements_t const&)+0xf8>)
    2660:	rsb	r3, r3, r3, lsl #4
    2664:	mov.w	r6, #3600	; 0xe10
    2668:	lsls	r3, r3, #2
    266a:	mla	r3, r6, r5, r3
    266e:	add	r3, r4
    2670:	subs	r2, #1
    2672:	mla	r0, r0, r2, r3
}
    2676:	add	r0, r1
    2678:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    267c:	cmp	r6, #0
    267e:	bne.n	2626 <makeTime(tmElements_t const&)+0x86>
      seconds += SECS_PER_DAY * 29;
    2680:	add.w	r1, r1, #2490368	; 0x260000
    2684:	add.w	r1, r1, #15232	; 0x3b80
    2688:	b.n	264c <makeTime(tmElements_t const&)+0xac>
    268a:	nop
    268c:	.word	0x01e13380
    2690:	.word	0x51eb851f
    2694:	.word	0x000132f8
    2698:	.word	0x00015180

0000269c <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    269c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    269e:	ldr	r4, [pc, #128]	; (2720 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    26a0:	ldr	r6, [pc, #128]	; (2724 <now()+0x88>)
    26a2:	ldr	r3, [r4, #0]
    26a4:	ldr	r2, [r6, #0]
    26a6:	ldr	r5, [pc, #128]	; (2728 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    26a8:	sub	sp, #12
    26aa:	ldr	r0, [r5, #0]
    26ac:	str	r3, [sp, #0]
	return ret;
    26ae:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    26b0:	subs	r3, r3, r2
    26b2:	cmp.w	r3, #1000	; 0x3e8
    26b6:	bcc.n	26d8 <now()+0x3c>
    26b8:	adds	r0, #1
    26ba:	b.n	26be <now()+0x22>
    26bc:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26be:	ldr	r3, [r4, #0]
    26c0:	str	r3, [sp, #0]
	return ret;
    26c2:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    26c4:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    26c8:	subs	r3, r3, r2
    26ca:	cmp.w	r3, #1000	; 0x3e8
    26ce:	add.w	r1, r0, #1
    26d2:	bcs.n	26bc <now()+0x20>
    26d4:	str	r0, [r5, #0]
    26d6:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    26d8:	ldr	r7, [pc, #80]	; (272c <now()+0x90>)
    26da:	ldr	r3, [r7, #0]
    26dc:	cmp	r0, r3
    26de:	bcc.n	2700 <now()+0x64>
    if (getTimePtr != 0) {
    26e0:	ldr	r3, [pc, #76]	; (2730 <now()+0x94>)
    26e2:	ldr	r3, [r3, #0]
    26e4:	cbz	r3, 2700 <now()+0x64>
      time_t t = getTimePtr();
    26e6:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    26e8:	ldr	r3, [pc, #72]	; (2734 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    26ea:	cbnz	r0, 2704 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    26ec:	ldr	r1, [pc, #72]	; (2738 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    26ee:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    26f0:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    26f2:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    26f4:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    26f6:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    26f8:	it	ne
    26fa:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    26fc:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    26fe:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    2700:	add	sp, #12
    2702:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2704:	ldr	r2, [r4, #0]
    2706:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2708:	ldr	r3, [r3, #0]
  Status = timeSet;
    270a:	ldr	r2, [pc, #44]	; (2738 <now()+0x9c>)
	return ret;
    270c:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    270e:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    2710:	add	r3, r0
  Status = timeSet;
    2712:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2714:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2716:	str	r3, [r7, #0]
  Status = timeSet;
    2718:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    271a:	add	sp, #12
    271c:	pop	{r4, r5, r6, r7, pc}
    271e:	nop
    2720:	.word	0x20019a84
    2724:	.word	0x200194a4
    2728:	.word	0x20019498
    272c:	.word	0x200194a8
    2730:	.word	0x200194a0
    2734:	.word	0x2001378c
    2738:	.word	0x2001949c

0000273c <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    273c:	push	{r3, lr}
  return hour(now()); 
    273e:	bl	269c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2742:	ldr	r3, [pc, #16]	; (2754 <hour()+0x18>)
    2744:	ldr	r3, [r3, #0]
    2746:	cmp	r0, r3
    2748:	beq.n	274e <hour()+0x12>
    274a:	bl	2588 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    274e:	ldr	r3, [pc, #8]	; (2758 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    2750:	ldrb	r0, [r3, #2]
    2752:	pop	{r3, pc}
    2754:	.word	0x2001948c
    2758:	.word	0x20019490

0000275c <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    275c:	push	{r3, lr}
  return minute(now()); 
    275e:	bl	269c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2762:	ldr	r3, [pc, #16]	; (2774 <minute()+0x18>)
    2764:	ldr	r3, [r3, #0]
    2766:	cmp	r0, r3
    2768:	beq.n	276e <minute()+0x12>
    276a:	bl	2588 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    276e:	ldr	r3, [pc, #8]	; (2778 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    2770:	ldrb	r0, [r3, #1]
    2772:	pop	{r3, pc}
    2774:	.word	0x2001948c
    2778:	.word	0x20019490

0000277c <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    277c:	push	{r3, lr}
  return second(now()); 
    277e:	bl	269c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2782:	ldr	r3, [pc, #16]	; (2794 <second()+0x18>)
    2784:	ldr	r3, [r3, #0]
    2786:	cmp	r0, r3
    2788:	beq.n	278e <second()+0x12>
    278a:	bl	2588 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    278e:	ldr	r3, [pc, #8]	; (2798 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    2790:	ldrb	r0, [r3, #0]
    2792:	pop	{r3, pc}
    2794:	.word	0x2001948c
    2798:	.word	0x20019490

0000279c <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    279c:	push	{r3, lr}
  return(day(now())); 
    279e:	bl	269c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    27a2:	ldr	r3, [pc, #16]	; (27b4 <day()+0x18>)
    27a4:	ldr	r3, [r3, #0]
    27a6:	cmp	r0, r3
    27a8:	beq.n	27ae <day()+0x12>
    27aa:	bl	2588 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    27ae:	ldr	r3, [pc, #8]	; (27b8 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    27b0:	ldrb	r0, [r3, #4]
    27b2:	pop	{r3, pc}
    27b4:	.word	0x2001948c
    27b8:	.word	0x20019490

000027bc <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    27bc:	push	{r3, lr}
  return month(now()); 
    27be:	bl	269c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    27c2:	ldr	r3, [pc, #16]	; (27d4 <month()+0x18>)
    27c4:	ldr	r3, [r3, #0]
    27c6:	cmp	r0, r3
    27c8:	beq.n	27ce <month()+0x12>
    27ca:	bl	2588 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    27ce:	ldr	r3, [pc, #8]	; (27d8 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    27d0:	ldrb	r0, [r3, #5]
    27d2:	pop	{r3, pc}
    27d4:	.word	0x2001948c
    27d8:	.word	0x20019490

000027dc <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    27dc:	push	{r3, lr}
  return year(now()); 
    27de:	bl	269c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    27e2:	ldr	r3, [pc, #20]	; (27f8 <year()+0x1c>)
    27e4:	ldr	r3, [r3, #0]
    27e6:	cmp	r0, r3
    27e8:	beq.n	27ee <year()+0x12>
    27ea:	bl	2588 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    27ee:	ldr	r3, [pc, #12]	; (27fc <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    27f0:	ldrb	r0, [r3, #6]
}
    27f2:	addw	r0, r0, #1970	; 0x7b2
    27f6:	pop	{r3, pc}
    27f8:	.word	0x2001948c
    27fc:	.word	0x20019490

00002800 <setTime(long)>:
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    2800:	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2802:	ldr	r3, [pc, #40]	; (282c <setTime(long)+0x2c>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2804:	ldr	r2, [pc, #40]	; (2830 <setTime(long)+0x30>)
    2806:	ldr	r3, [r3, #0]
    2808:	ldr	r2, [r2, #0]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    280a:	ldr	r6, [pc, #40]	; (2834 <setTime(long)+0x34>)
  nextSyncTime = (uint32_t)t + syncInterval;
    280c:	ldr	r5, [pc, #40]	; (2838 <setTime(long)+0x38>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    280e:	ldr	r1, [pc, #44]	; (283c <setTime(long)+0x3c>)
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2810:	str	r0, [r6, #0]
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    2812:	sub	sp, #12
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2814:	add	r0, r2
    2816:	str	r3, [sp, #4]
	return ret;
    2818:	ldr	r4, [sp, #4]
  Status = timeSet;
    281a:	ldr	r3, [pc, #36]	; (2840 <setTime(long)+0x40>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    281c:	str	r0, [r5, #0]
  Status = timeSet;
    281e:	movs	r2, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2820:	str	r4, [r1, #0]
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    2822:	strb	r2, [r3, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 
    2824:	add	sp, #12
    2826:	pop	{r4, r5, r6}
    2828:	bx	lr
    282a:	nop
    282c:	.word	0x20019a84
    2830:	.word	0x2001378c
    2834:	.word	0x20019498
    2838:	.word	0x200194a8
    283c:	.word	0x200194a4
    2840:	.word	0x2001949c

00002844 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    2844:	ldr	r1, [pc, #12]	; (2854 <setSyncProvider(long (*)())+0x10>)
    2846:	ldr	r2, [pc, #16]	; (2858 <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2848:	ldr	r3, [pc, #16]	; (285c <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    284a:	ldr	r1, [r1, #0]
    284c:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    284e:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    2850:	b.w	269c <now()>
    2854:	.word	0x20019498
    2858:	.word	0x200194a8
    285c:	.word	0x200194a0

00002860 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    2860:	push	{r4, lr}
    2862:	mov	r4, r0
		release();
    2864:	bl	a5a0 <DMAChannel::release()>
	}
    2868:	mov	r0, r4
    286a:	pop	{r4, pc}

0000286c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    286c:	ldr	r2, [pc, #8]	; (2878 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    286e:	ldr	r1, [pc, #12]	; (287c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    2870:	ldr	r0, [pc, #12]	; (2880 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    2872:	b.w	ac58 <__aeabi_atexit>
    2876:	nop
    2878:	.word	0x20013730
    287c:	.word	0x00002861
    2880:	.word	0x200194ac

00002884 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    2884:	ldr	r2, [pc, #8]	; (2890 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    2886:	ldr	r1, [pc, #12]	; (2894 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    2888:	ldr	r0, [pc, #12]	; (2898 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    288a:	b.w	ac58 <__aeabi_atexit>
    288e:	nop
    2890:	.word	0x20013730
    2894:	.word	0x00002861
    2898:	.word	0x200194b4

0000289c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    289c:	ldr	r2, [pc, #8]	; (28a8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    289e:	ldr	r1, [pc, #12]	; (28ac <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    28a0:	ldr	r0, [pc, #12]	; (28b0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    28a2:	b.w	ac58 <__aeabi_atexit>
    28a6:	nop
    28a8:	.word	0x20013730
    28ac:	.word	0x00002861
    28b0:	.word	0x200194bc

000028b4 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    28b4:	ldr	r2, [pc, #8]	; (28c0 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    28b6:	ldr	r1, [pc, #12]	; (28c4 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    28b8:	ldr	r0, [pc, #12]	; (28c8 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    28ba:	b.w	ac58 <__aeabi_atexit>
    28be:	nop
    28c0:	.word	0x20013730
    28c4:	.word	0x00002861
    28c8:	.word	0x200194c4

000028cc <AudioInputAnalog::isr()>:
	uint32_t daddr, offset;
	const uint16_t *src, *end;
	uint16_t *dest_left;
	audio_block_t *left;

	daddr = (uint32_t)(dma.TCD->DADDR);
    28cc:	ldr	r2, [pc, #88]	; (2928 <AudioInputAnalog::isr()+0x5c>)
	dma.clearInterrupt();

	if (daddr < (uint32_t)analog_rx_buffer + sizeof(analog_rx_buffer) / 2) {
    28ce:	ldr	r3, [pc, #92]	; (292c <AudioInputAnalog::isr()+0x60>)
	uint32_t daddr, offset;
	const uint16_t *src, *end;
	uint16_t *dest_left;
	audio_block_t *left;

	daddr = (uint32_t)(dma.TCD->DADDR);
    28d0:	ldr	r1, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    28d2:	ldr	r0, [pc, #92]	; (2930 <AudioInputAnalog::isr()+0x64>)
    28d4:	ldr	r1, [r1, #16]
    28d6:	ldrb	r2, [r2, #4]
    28d8:	strb	r2, [r0, #0]
	dma.clearInterrupt();

	if (daddr < (uint32_t)analog_rx_buffer + sizeof(analog_rx_buffer) / 2) {
    28da:	cmp	r1, r3
    28dc:	bcs.n	28f0 <AudioInputAnalog::isr()+0x24>
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) AudioStream::update_all();
    28de:	ldr	r2, [pc, #84]	; (2934 <AudioInputAnalog::isr()+0x68>)
    28e0:	ldrb	r2, [r2, #0]
    28e2:	cbz	r2, 2922 <AudioInputAnalog::isr()+0x56>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    28e4:	ldr	r2, [pc, #80]	; (2938 <AudioInputAnalog::isr()+0x6c>)
    28e6:	movs	r1, #1
    28e8:	str	r1, [r2, #0]

	if (daddr < (uint32_t)analog_rx_buffer + sizeof(analog_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES];
    28ea:	add.w	r0, r3, #128	; 0x80
    28ee:	b.n	28f4 <AudioInputAnalog::isr()+0x28>
		if (update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (uint16_t *)&analog_rx_buffer[0];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
    28f0:	mov	r0, r3
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (uint16_t *)&analog_rx_buffer[0];
    28f2:	subs	r3, #128	; 0x80
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = block_left;
    28f4:	ldr	r2, [pc, #68]	; (293c <AudioInputAnalog::isr()+0x70>)
    28f6:	ldr	r2, [r2, #0]
	if (left != NULL) {
    28f8:	cbz	r2, 2920 <AudioInputAnalog::isr()+0x54>
	dma.attachInterrupt(isr);
}


void AudioInputAnalog::isr(void)
{
    28fa:	push	{r4}
		src = (uint16_t *)&analog_rx_buffer[0];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = block_left;
	if (left != NULL) {
		offset = block_offset;
    28fc:	ldr	r4, [pc, #64]	; (2940 <AudioInputAnalog::isr()+0x74>)
    28fe:	ldrh	r1, [r4, #0]
    2900:	cmp	r1, #64	; 0x40
    2902:	it	cs
    2904:	movcs	r1, #64	; 0x40
		if (offset > AUDIO_BLOCK_SAMPLES/2) offset = AUDIO_BLOCK_SAMPLES/2;
		dest_left = (uint16_t *)&(left->data[offset]);
    2906:	add.w	r2, r2, r1, lsl #1
		block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    290a:	adds	r1, #64	; 0x40
    290c:	strh	r1, [r4, #0]
    290e:	adds	r2, #2
		do {
			*dest_left++ = *src++;
    2910:	ldrh.w	r1, [r3], #2
    2914:	strh.w	r1, [r2, #2]!
		} while (src < end);
    2918:	cmp	r0, r3
    291a:	bhi.n	2910 <AudioInputAnalog::isr()+0x44>
	}
}
    291c:	ldr.w	r4, [sp], #4
    2920:	bx	lr

	if (daddr < (uint32_t)analog_rx_buffer + sizeof(analog_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (uint16_t *)&analog_rx_buffer[AUDIO_BLOCK_SAMPLES];
    2922:	add.w	r0, r3, #128	; 0x80
    2926:	b.n	28f4 <AudioInputAnalog::isr()+0x28>
    2928:	.word	0x200194dc
    292c:	.word	0x20013020
    2930:	.word	0x4000801f
    2934:	.word	0x200194e4
    2938:	.word	0xe000e208
    293c:	.word	0x200194d8
    2940:	.word	0x200194d0

00002944 <AudioInputAnalog::update()>:
		} while (src < end);
	}
}

void AudioInputAnalog::update(void)
{
    2944:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2948:	mov	r5, r0
	int16_t s, *p, *end;

	//Serial.println("update");

	// allocate new block (ok if NULL)
	new_left = allocate();
    294a:	bl	a7cc <AudioStream::allocate()>
    294e:	mov	r2, r0

	__disable_irq();
    2950:	cpsid	i
	offset = block_offset;
    2952:	ldr	r3, [pc, #140]	; (29e0 <AudioInputAnalog::update()+0x9c>)
	if (offset < AUDIO_BLOCK_SAMPLES) {
    2954:	ldrh	r1, [r3, #0]
    2956:	cmp	r1, #127	; 0x7f
    2958:	bhi.n	2970 <AudioInputAnalog::update()+0x2c>
		// the DMA didn't fill a block
		if (new_left != NULL) {
    295a:	cmp	r0, #0
    295c:	beq.n	29ce <AudioInputAnalog::update()+0x8a>
			// but we allocated a block
			if (block_left == NULL) {
    295e:	ldr	r4, [pc, #132]	; (29e4 <AudioInputAnalog::update()+0xa0>)
    2960:	ldr	r1, [r4, #0]
    2962:	cmp	r1, #0
    2964:	beq.n	29d4 <AudioInputAnalog::update()+0x90>
				block_offset = 0;
				__enable_irq();
	 			 //Serial.println("fail1");
			} else {
				// the DMA already has blocks, doesn't need this
				__enable_irq();
    2966:	cpsie	i
	} while (p < end);

	// then transmit the AC data
	transmit(out_left);
	release(out_left);
}
    2968:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				__enable_irq();
	 			 //Serial.println("fail1");
			} else {
				// the DMA already has blocks, doesn't need this
				__enable_irq();
				release(new_left);
    296c:	b.w	a874 <AudioStream::release(audio_block_struct*)>
		}
		return;
	}
	// the DMA filled a block, so grab it and get the
	// new block to the DMA, as quickly as possible
	out_left = block_left;
    2970:	ldr	r1, [pc, #112]	; (29e4 <AudioInputAnalog::update()+0xa0>)
	block_left = new_left;
	block_offset = 0;
    2972:	movs	r0, #0
		}
		return;
	}
	// the DMA filled a block, so grab it and get the
	// new block to the DMA, as quickly as possible
	out_left = block_left;
    2974:	ldr	r6, [r1, #0]
	block_left = new_left;
	block_offset = 0;
    2976:	strh	r0, [r3, #0]
		return;
	}
	// the DMA filled a block, so grab it and get the
	// new block to the DMA, as quickly as possible
	out_left = block_left;
	block_left = new_left;
    2978:	str	r2, [r1, #0]
	block_offset = 0;
	__enable_irq();
    297a:	cpsie	i
    297c:	ldr.w	lr, [pc, #108]	; 29ec <AudioInputAnalog::update()+0xa8>
    2980:	ldr	r7, [pc, #100]	; (29e8 <AudioInputAnalog::update()+0xa4>)
    2982:	ldr.w	r3, [lr]
    2986:	ldr	r4, [r7, #0]
    asm ("smull    %[t], %[t2], %[a], %[b]\n\t"
         "mov      %[t2], %[t2], asl %[c]\n\t"
         "orr      %[t], %[t2], %[t], lsr %[d]\n\t"
         : [t] "=&r" (t), [t2] "=&r" (t2)
         : [a] "r" (x), [b] "r" (y),
           [c] "Mr" ((z) + 1), [d] "Mr" (31 - (z)));
    2988:	ldr.w	ip, [pc, #100]	; 29f0 <AudioInputAnalog::update()+0xac>
    //   y = a*(x[n] - x[n-1] + y[n-1])
    // The coefficient "a" is as follows:
    //  a = UNITY*e^(-2*pi*fc/fs)
    //  fc = 2 @ fs = 44100
    //
	p = out_left->data;
    298c:	adds	r1, r6, #4
	end = p + AUDIO_BLOCK_SAMPLES;
    298e:	add.w	r8, r6, #260	; 0x104
	do {
		tmp = (uint16_t)(*p);
    2992:	ldrh	r2, [r1, #0]
        tmp = ( ((int32_t) tmp) << 14);
        int32_t acc = hpf_y1 - hpf_x1;
    2994:	subs	r3, r3, r4
    //
	p = out_left->data;
	end = p + AUDIO_BLOCK_SAMPLES;
	do {
		tmp = (uint16_t)(*p);
        tmp = ( ((int32_t) tmp) << 14);
    2996:	lsls	r2, r2, #14
    2998:	adds	r0, r2, r3
    299a:	smull	r3, r4, r0, ip
    299e:	mov.w	r4, r4, lsl #2
    29a2:	orr.w	r3, r4, r3, lsr #30
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    29a6:	ssat	r0, #16, r3, asr #14
        int32_t acc = hpf_y1 - hpf_x1;
        acc += tmp;
        hpf_y1 = FRACMUL_SHL(acc, COEF_HPF_DCBLOCK, 1);
        hpf_x1 = tmp;
		s = signed_saturate_rshift(hpf_y1, 16, 14);
		*p++ = s;
    29aa:	strh.w	r0, [r1], #2
	} while (p < end);
    29ae:	cmp	r8, r1
    //
	p = out_left->data;
	end = p + AUDIO_BLOCK_SAMPLES;
	do {
		tmp = (uint16_t)(*p);
        tmp = ( ((int32_t) tmp) << 14);
    29b0:	mov	r4, r2
        acc += tmp;
        hpf_y1 = FRACMUL_SHL(acc, COEF_HPF_DCBLOCK, 1);
        hpf_x1 = tmp;
		s = signed_saturate_rshift(hpf_y1, 16, 14);
		*p++ = s;
	} while (p < end);
    29b2:	bhi.n	2992 <AudioInputAnalog::update()+0x4e>

	// then transmit the AC data
	transmit(out_left);
    29b4:	mov	r0, r5
    29b6:	mov	r1, r6
    29b8:	movs	r2, #0
    29ba:	str.w	r3, [lr]
    29be:	str	r4, [r7, #0]
    29c0:	bl	a8c8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(out_left);
    29c4:	mov	r0, r6
}
    29c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		*p++ = s;
	} while (p < end);

	// then transmit the AC data
	transmit(out_left);
	release(out_left);
    29ca:	b.w	a874 <AudioStream::release(audio_block_struct*)>
			}
		} else {
			// The DMA didn't fill a block, and we could not allocate
			// memory... the system is likely starving for memory!
			// Sadly, there's nothing we can do.
			__enable_irq();
    29ce:	cpsie	i
    29d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (new_left != NULL) {
			// but we allocated a block
			if (block_left == NULL) {
				// the DMA doesn't have any blocks to fill, so
				// give it the one we just allocated
				block_left = new_left;
    29d4:	str	r0, [r4, #0]
				block_offset = 0;
    29d6:	strh	r1, [r3, #0]
				__enable_irq();
    29d8:	cpsie	i
    29da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29de:	nop
    29e0:	.word	0x200194d0
    29e4:	.word	0x200194d8
    29e8:	.word	0x200194d4
    29ec:	.word	0x200194cc
    29f0:	.word	0x3ffbb000

000029f4 <AudioInputAnalog::init(unsigned char)>:

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);

void AudioInputAnalog::init(uint8_t pin)
{
    29f4:	push	{r3, r4, r5, r6, r7, lr}
    29f6:	mov	r4, r0
	int32_t tmp;

	// Configure the ADC and run at least one software-triggered
	// conversion.  This completes the self calibration stuff and
	// leaves the ADC in a state that's mostly ready to use
	analogReadRes(16);
    29f8:	movs	r0, #16
    29fa:	bl	9020 <analogReadRes>
	analogReference(INTERNAL); // range 0 to 1.2 volts
    29fe:	movs	r0, #2
    2a00:	bl	8fd4 <analogReference>
#if F_BUS == 96000000 || F_BUS == 48000000 || F_BUS == 24000000
	analogReadAveraging(8);
    2a04:	movs	r0, #8
    2a06:	bl	9088 <analogReadAveraging>
	analogReadAveraging(4);
#endif
	// Note for review:
	// Probably not useful to spin cycles here stabilizing
	// since DC blocking is similar to te external analog filters
	tmp = (uint16_t) analogRead(pin);
    2a0a:	mov	r0, r4
    2a0c:	bl	9104 <analogRead>
	tmp = ( ((int32_t) tmp) << 14);
	hpf_x1 = tmp;   // With constant DC level x1 would be x0
    2a10:	ldr	r3, [pc, #252]	; (2b10 <AudioInputAnalog::init(unsigned char)+0x11c>)
    2a12:	ldr	r4, [pc, #256]	; (2b14 <AudioInputAnalog::init(unsigned char)+0x120>)
	hpf_y1 = 0;     // Output will settle here when stable
    2a14:	ldr	r1, [pc, #256]	; (2b18 <AudioInputAnalog::init(unsigned char)+0x124>)

	// set the programmable delay block to trigger the ADC at 44.1 kHz
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
    2a16:	ldr	r2, [pc, #260]	; (2b1c <AudioInputAnalog::init(unsigned char)+0x128>)
	// Note for review:
	// Probably not useful to spin cycles here stabilizing
	// since DC blocking is similar to te external analog filters
	tmp = (uint16_t) analogRead(pin);
	tmp = ( ((int32_t) tmp) << 14);
	hpf_x1 = tmp;   // With constant DC level x1 would be x0
    2a18:	lsls	r0, r0, #14
    2a1a:	ands	r3, r0
	hpf_y1 = 0;     // Output will settle here when stable
    2a1c:	movs	r0, #0
	// Note for review:
	// Probably not useful to spin cycles here stabilizing
	// since DC blocking is similar to te external analog filters
	tmp = (uint16_t) analogRead(pin);
	tmp = ( ((int32_t) tmp) << 14);
	hpf_x1 = tmp;   // With constant DC level x1 would be x0
    2a1e:	str	r3, [r4, #0]
	hpf_y1 = 0;     // Output will settle here when stable
    2a20:	str	r0, [r1, #0]

	// set the programmable delay block to trigger the ADC at 44.1 kHz
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
    2a22:	ldr	r3, [r2, #0]
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
    2a24:	lsls	r3, r3, #9
    2a26:	bpl.n	2a3a <AudioInputAnalog::init(unsigned char)+0x46>
	hpf_x1 = tmp;   // With constant DC level x1 would be x0
	hpf_y1 = 0;     // Output will settle here when stable

	// set the programmable delay block to trigger the ADC at 44.1 kHz
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
    2a28:	ldr	r3, [pc, #244]	; (2b20 <AudioInputAnalog::init(unsigned char)+0x12c>)
    2a2a:	ldr	r2, [r3, #0]
    2a2c:	movw	r3, #36770	; 0x8fa2
    2a30:	ands	r3, r2
    2a32:	movw	r2, #36770	; 0x8fa2
    2a36:	cmp	r3, r2
    2a38:	beq.n	2aec <AudioInputAnalog::init(unsigned char)+0xf8>
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    2a3a:	ldr	r1, [pc, #224]	; (2b1c <AudioInputAnalog::init(unsigned char)+0x128>)
		PDB0_IDLY = 1;
		PDB0_MOD = PDB_PERIOD;
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    2a3c:	ldr	r2, [pc, #224]	; (2b20 <AudioInputAnalog::init(unsigned char)+0x12c>)
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    2a3e:	ldr	r3, [r1, #0]
		PDB0_IDLY = 1;
    2a40:	ldr	r7, [pc, #224]	; (2b24 <AudioInputAnalog::init(unsigned char)+0x130>)
		PDB0_MOD = PDB_PERIOD;
    2a42:	ldr	r5, [pc, #228]	; (2b28 <AudioInputAnalog::init(unsigned char)+0x134>)
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
		PDB0_CH0C1 = 0x0101;
    2a44:	ldr	r0, [pc, #228]	; (2b2c <AudioInputAnalog::init(unsigned char)+0x138>)
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
		PDB0_IDLY = 1;
		PDB0_MOD = PDB_PERIOD;
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
    2a46:	ldr	r4, [pc, #232]	; (2b30 <AudioInputAnalog::init(unsigned char)+0x13c>)
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
    2a48:	orr.w	r3, r3, #4194304	; 0x400000
    2a4c:	str	r3, [r1, #0]
		PDB0_IDLY = 1;
    2a4e:	mov.w	lr, #1
		PDB0_MOD = PDB_PERIOD;
    2a52:	movw	r6, #1087	; 0x43f
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    2a56:	movw	r1, #36771	; 0x8fa3
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
		PDB0_CH0C1 = 0x0101;
    2a5a:	movw	r3, #257	; 0x101
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
	  || PDB0_IDLY != 1
	  || PDB0_CH0C1 != 0x0101) {
		SIM_SCGC6 |= SIM_SCGC6_PDB;
		PDB0_IDLY = 1;
    2a5e:	str.w	lr, [r7]
		PDB0_MOD = PDB_PERIOD;
    2a62:	str	r6, [r5, #0]
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
    2a64:	str	r1, [r2, #0]
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
    2a66:	str	r4, [r2, #0]
		PDB0_CH0C1 = 0x0101;
    2a68:	str	r3, [r0, #0]
	}
	// enable the ADC for hardware trigger and DMA
	ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;
    2a6a:	ldr	r2, [pc, #200]	; (2b34 <AudioInputAnalog::init(unsigned char)+0x140>)

	// set up a DMA channel to store the ADC data
	dma.begin(true);
    2a6c:	ldr	r4, [pc, #200]	; (2b38 <AudioInputAnalog::init(unsigned char)+0x144>)
		PDB0_SC = PDB_CONFIG | PDB_SC_LDOK;
		PDB0_SC = PDB_CONFIG | PDB_SC_SWTRIG;
		PDB0_CH0C1 = 0x0101;
	}
	// enable the ADC for hardware trigger and DMA
	ADC0_SC2 |= ADC_SC2_ADTRG | ADC_SC2_DMAEN;
    2a6e:	ldr	r3, [r2, #0]
    2a70:	orr.w	r3, r3, #68	; 0x44
    2a74:	str	r3, [r2, #0]

	// set up a DMA channel to store the ADC data
	dma.begin(true);
    2a76:	mov	r0, r4
    2a78:	movs	r1, #1
    2a7a:	bl	a4d4 <DMAChannel::begin(bool)>
	dma.TCD->SADDR = &ADC0_RA;
    2a7e:	ldr	r3, [r4, #0]
    2a80:	ldr	r2, [pc, #184]	; (2b3c <AudioInputAnalog::init(unsigned char)+0x148>)
    2a82:	str	r2, [r3, #0]
	dma.TCD->SOFF = 0;
    2a84:	movs	r1, #0
    2a86:	strh	r1, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    2a88:	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
    2a8a:	ldr	r0, [pc, #180]	; (2b40 <AudioInputAnalog::init(unsigned char)+0x14c>)
    2a8c:	str	r0, [r3, #16]
    2a8e:	add.w	r2, r2, #1073741824	; 0x40000000
    2a92:	add.w	r2, r2, #135168	; 0x21000

	// set up a DMA channel to store the ADC data
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    2a96:	movw	r0, #257	; 0x101
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
    2a9a:	mvn.w	r6, #255	; 0xff

	// set up a DMA channel to store the ADC data
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    2a9e:	strh	r0, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
    2aa0:	str	r6, [r3, #24]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
    2aa2:	movs	r5, #128	; 0x80
	// set up a DMA channel to store the ADC data
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    2aa4:	movs	r0, #2
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2aa6:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    2aa8:	movs	r6, #168	; 0xa8
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
    2aaa:	strh	r5, [r3, #22]
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
    2aac:	str	r1, [r3, #12]
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
    2aae:	strh	r5, [r3, #30]
	// set up a DMA channel to store the ADC data
	dma.begin(true);
	dma.TCD->SADDR = &ADC0_RA;
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    2ab0:	str	r0, [r3, #8]
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2ab2:	strh	r7, [r3, #28]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = analog_rx_buffer;
	dma.TCD->DOFF = 2;
    2ab4:	strh	r0, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    2ab6:	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    2ab8:	strb	r6, [r2, #0]
	dma.TCD->CITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(analog_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(analog_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_ADC0);
	update_responsibility = update_setup();
    2aba:	bl	a9f8 <AudioStream::update_setup()>
    2abe:	ldrb	r2, [r4, #4]
    2ac0:	ldr	r3, [pc, #128]	; (2b44 <AudioInputAnalog::init(unsigned char)+0x150>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2ac2:	ldr	r6, [pc, #132]	; (2b48 <AudioInputAnalog::init(unsigned char)+0x154>)
    2ac4:	strb	r0, [r3, #0]
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2ac6:	asrs	r3, r2, #5
    2ac8:	lsls	r3, r3, #2
    2aca:	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2ace:	ldr	r4, [pc, #124]	; (2b4c <AudioInputAnalog::init(unsigned char)+0x158>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2ad0:	strb	r2, [r6, #0]
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2ad2:	add.w	r3, r3, #57600	; 0xe100

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2ad6:	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2ada:	and.w	r7, r2, #31
    2ade:	movs	r1, #1

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2ae0:	ldr	r5, [pc, #108]	; (2b50 <AudioInputAnalog::init(unsigned char)+0x15c>)
    2ae2:	str.w	r5, [r4, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2ae6:	lsls	r1, r7
    2ae8:	str	r1, [r3, #0]
	dma.enable();
	dma.attachInterrupt(isr);
}
    2aea:	pop	{r3, r4, r5, r6, r7, pc}
	hpf_y1 = 0;     // Output will settle here when stable

	// set the programmable delay block to trigger the ADC at 44.1 kHz
	if (!(SIM_SCGC6 & SIM_SCGC6_PDB)
	  || (PDB0_SC & PDB_CONFIG) != PDB_CONFIG
	  || PDB0_MOD != PDB_PERIOD
    2aec:	ldr	r3, [pc, #56]	; (2b28 <AudioInputAnalog::init(unsigned char)+0x134>)
    2aee:	ldr	r2, [r3, #0]
    2af0:	movw	r3, #1087	; 0x43f
    2af4:	cmp	r2, r3
    2af6:	bne.n	2a3a <AudioInputAnalog::init(unsigned char)+0x46>
	  || PDB0_IDLY != 1
    2af8:	ldr	r3, [pc, #40]	; (2b24 <AudioInputAnalog::init(unsigned char)+0x130>)
    2afa:	ldr	r3, [r3, #0]
    2afc:	cmp	r3, #1
    2afe:	bne.n	2a3a <AudioInputAnalog::init(unsigned char)+0x46>
	  || PDB0_CH0C1 != 0x0101) {
    2b00:	ldr	r3, [pc, #40]	; (2b2c <AudioInputAnalog::init(unsigned char)+0x138>)
    2b02:	ldr	r2, [r3, #0]
    2b04:	movw	r3, #257	; 0x101
    2b08:	cmp	r2, r3
    2b0a:	bne.n	2a3a <AudioInputAnalog::init(unsigned char)+0x46>
    2b0c:	b.n	2a6a <AudioInputAnalog::init(unsigned char)+0x76>
    2b0e:	nop
    2b10:	.word	0x3fffc000
    2b14:	.word	0x200194d4
    2b18:	.word	0x200194cc
    2b1c:	.word	0x4004803c
    2b20:	.word	0x40036000
    2b24:	.word	0x4003600c
    2b28:	.word	0x40036004
    2b2c:	.word	0x40036010
    2b30:	.word	0x00018fa2
    2b34:	.word	0x4003b020
    2b38:	.word	0x200194dc
    2b3c:	.word	0x4003b010
    2b40:	.word	0x20012fa0
    2b44:	.word	0x200194e4
    2b48:	.word	0x4000801b
    2b4c:	.word	0x20013200
    2b50:	.word	0x000028cd

00002b54 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    2b54:	ldr	r2, [pc, #8]	; (2b60 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    2b56:	ldr	r1, [pc, #12]	; (2b64 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    2b58:	ldr	r0, [pc, #12]	; (2b68 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    2b5a:	b.w	ac58 <__aeabi_atexit>
    2b5e:	nop
    2b60:	.word	0x20013730
    2b64:	.word	0x00002861
    2b68:	.word	0x200194dc

00002b6c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    2b6c:	ldr	r2, [pc, #8]	; (2b78 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    2b6e:	ldr	r1, [pc, #12]	; (2b7c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    2b70:	ldr	r0, [pc, #12]	; (2b80 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    2b72:	b.w	ac58 <__aeabi_atexit>
    2b76:	nop
    2b78:	.word	0x20013730
    2b7c:	.word	0x00002861
    2b80:	.word	0x200194e8

00002b84 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2b84:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    2b86:	ldr	r5, [pc, #28]	; (2ba4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    2b88:	ldr	r4, [pc, #28]	; (2ba8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    2b8a:	ldr	r0, [pc, #32]	; (2bac <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    2b8c:	mov	r2, r5
    2b8e:	mov	r1, r4
    2b90:	bl	ac58 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    2b94:	mov	r2, r5
    2b96:	mov	r1, r4
    2b98:	ldr	r0, [pc, #20]	; (2bb0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2b9a:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    2b9e:	b.w	ac58 <__aeabi_atexit>
    2ba2:	nop
    2ba4:	.word	0x20013730
    2ba8:	.word	0x00002861
    2bac:	.word	0x200194f0
    2bb0:	.word	0x200194f8

00002bb4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    2bb4:	ldr	r2, [pc, #8]	; (2bc0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    2bb6:	ldr	r1, [pc, #12]	; (2bc4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    2bb8:	ldr	r0, [pc, #12]	; (2bc8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    2bba:	b.w	ac58 <__aeabi_atexit>
    2bbe:	nop
    2bc0:	.word	0x20013730
    2bc4:	.word	0x00002861
    2bc8:	.word	0x20019500

00002bcc <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    2bcc:	ldr	r2, [pc, #8]	; (2bd8 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    2bce:	ldr	r1, [pc, #12]	; (2bdc <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    2bd0:	ldr	r0, [pc, #12]	; (2be0 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    2bd2:	b.w	ac58 <__aeabi_atexit>
    2bd6:	nop
    2bd8:	.word	0x20013730
    2bdc:	.word	0x00002861
    2be0:	.word	0x20019508

00002be4 <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2be4:	ldr	r0, [r0, #16]
    2be6:	cbz	r0, 2bee <File::read(void*, unsigned int)+0xa>
    2be8:	ldr	r3, [r0, #0]
    2bea:	ldr	r3, [r3, #40]	; 0x28
    2bec:	bx	r3
	}
    2bee:	bx	lr

00002bf0 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2bf0:	ldr	r0, [r0, #16]
    2bf2:	cbz	r0, 2bfa <File::write(void const*, unsigned int)+0xa>
    2bf4:	ldr	r3, [r0, #0]
    2bf6:	ldr	r3, [r3, #44]	; 0x2c
    2bf8:	bx	r3
	}
    2bfa:	bx	lr

00002bfc <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
    2bfc:	ldr	r0, [r0, #16]
    2bfe:	cbz	r0, 2c06 <File::available()+0xa>
    2c00:	ldr	r3, [r0, #0]
    2c02:	ldr	r3, [r3, #16]
    2c04:	bx	r3
	}
    2c06:	bx	lr

00002c08 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
    2c08:	ldr	r0, [r0, #16]
    2c0a:	cbz	r0, 2c12 <File::peek()+0xa>
    2c0c:	ldr	r3, [r0, #0]
    2c0e:	ldr	r3, [r3, #24]
    2c10:	bx	r3
	}
    2c12:	mov.w	r0, #4294967295
    2c16:	bx	lr

00002c18 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
    2c18:	ldr	r0, [r0, #16]
    2c1a:	cbz	r0, 2c22 <File::flush()+0xa>
    2c1c:	ldr	r3, [r0, #0]
    2c1e:	ldr	r3, [r3, #12]
    2c20:	bx	r3
    2c22:	bx	lr

00002c24 <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
    2c24:	ldr	r0, [r0, #16]
    2c26:	cbz	r0, 2c2e <File::truncate(unsigned long long)+0xa>
    2c28:	ldr	r1, [r0, #0]
    2c2a:	ldr	r1, [r1, #48]	; 0x30
    2c2c:	bx	r1
	}
    2c2e:	bx	lr

00002c30 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
    2c30:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
    2c32:	ldr	r0, [r0, #16]
    2c34:	cbz	r0, 2c40 <File::seek(unsigned long long, int)+0x10>
    2c36:	ldr	r4, [r0, #0]
    2c38:	ldr	r1, [r4, #52]	; 0x34
	}
    2c3a:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2c3e:	bx	r1
	}
    2c40:	ldr.w	r4, [sp], #4
    2c44:	bx	lr
    2c46:	nop

00002c48 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
    2c48:	ldr	r0, [r0, #16]
    2c4a:	cbz	r0, 2c52 <File::position()+0xa>
    2c4c:	ldr	r3, [r0, #0]
    2c4e:	ldr	r3, [r3, #56]	; 0x38
    2c50:	bx	r3
	}
    2c52:	movs	r0, #0
    2c54:	movs	r1, #0
    2c56:	bx	lr

00002c58 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2c58:	ldr	r0, [r0, #16]
    2c5a:	cbz	r0, 2c62 <File::size()+0xa>
    2c5c:	ldr	r3, [r0, #0]
    2c5e:	ldr	r3, [r3, #60]	; 0x3c
    2c60:	bx	r3
	}
    2c62:	movs	r0, #0
    2c64:	movs	r1, #0
    2c66:	bx	lr

00002c68 <File::close()>:
	virtual void close() {
		if (f) f->close();
    2c68:	ldr	r0, [r0, #16]
    2c6a:	cbz	r0, 2c72 <File::close()+0xa>
    2c6c:	ldr	r3, [r0, #0]
    2c6e:	ldr	r3, [r3, #64]	; 0x40
    2c70:	bx	r3
    2c72:	bx	lr

00002c74 <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2c74:	ldr	r0, [r0, #16]
    2c76:	cbz	r0, 2c7e <File::operator bool()+0xa>
    2c78:	ldr	r3, [r0, #0]
    2c7a:	ldr	r3, [r3, #68]	; 0x44
    2c7c:	bx	r3
	}
    2c7e:	bx	lr

00002c80 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
    2c80:	ldr	r0, [r0, #16]
    2c82:	cbz	r0, 2c8a <File::name()+0xa>
    2c84:	ldr	r3, [r0, #0]
    2c86:	ldr	r3, [r3, #72]	; 0x48
    2c88:	bx	r3
	}
    2c8a:	ldr	r0, [pc, #4]	; (2c90 <File::name()+0x10>)
    2c8c:	bx	lr
    2c8e:	nop
    2c90:	.word	0x00012f24

00002c94 <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    2c94:	ldr	r0, [r0, #16]
    2c96:	cbz	r0, 2c9e <File::isDirectory()+0xa>
    2c98:	ldr	r3, [r0, #0]
    2c9a:	ldr	r3, [r3, #76]	; 0x4c
    2c9c:	bx	r3
	}
    2c9e:	bx	lr

00002ca0 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
    2ca0:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
    2ca2:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
    2ca4:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
    2ca6:	cbz	r3, 2cb4 <File::openNextFile(unsigned char)+0x14>
    2ca8:	ldr	r5, [r3, #0]
    2caa:	mov	r1, r3
    2cac:	ldr	r3, [r5, #80]	; 0x50
    2cae:	blx	r3
	}
    2cb0:	mov	r0, r4
    2cb2:	pop	{r3, r4, r5, pc}
    2cb4:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    2cb8:	ldr	r2, [pc, #24]	; (2cd4 <File::openNextFile(unsigned char)+0x34>)
    2cba:	strb	r3, [r4, #4]
    2cbc:	strb	r3, [r4, #12]
    2cbe:	str	r0, [r4, #8]
    2cc0:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    2cc2:	ldr	r3, [r1, #16]
    2cc4:	str	r3, [r4, #16]
		if (f) f->refcount++;
    2cc6:	cmp	r3, #0
    2cc8:	beq.n	2cb0 <File::openNextFile(unsigned char)+0x10>
    2cca:	ldr	r2, [r3, #16]
    2ccc:	adds	r2, #1
    2cce:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
    2cd0:	mov	r0, r4
    2cd2:	pop	{r3, r4, r5, pc}
    2cd4:	.word	0x0001333c

00002cd8 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
    2cd8:	ldr	r0, [r0, #16]
    2cda:	cbz	r0, 2ce2 <File::rewindDirectory()+0xa>
    2cdc:	ldr	r3, [r0, #0]
    2cde:	ldr	r3, [r3, #84]	; 0x54
    2ce0:	bx	r3
    2ce2:	bx	lr

00002ce4 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    2ce4:	ldr	r0, [r0, #16]
    2ce6:	cbz	r0, 2d0a <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
    2ce8:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    2cea:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
    2cec:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    2cee:	ldr	r3, [r3, #40]	; 0x28
    2cf0:	movs	r2, #1
    2cf2:	add.w	r1, sp, #7
    2cf6:	blx	r3
    2cf8:	cbz	r0, 2d04 <File::read()+0x20>
		return b;
    2cfa:	ldrb.w	r0, [sp, #7]
	}
    2cfe:	add	sp, #12
    2d00:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    2d04:	mov.w	r0, #4294967295
    2d08:	b.n	2cfe <File::read()+0x1a>
    2d0a:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
    2d0e:	bx	lr

00002d10 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
    2d10:	push	{r4, lr}
    2d12:	sub	sp, #8
    2d14:	add	r3, sp, #8
		return write(&b, 1);
    2d16:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
    2d18:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
    2d1c:	ldr	r4, [r2, #44]	; 0x2c
    2d1e:	mov	r1, r3
    2d20:	movs	r2, #1
    2d22:	blx	r4
	}
    2d24:	add	sp, #8
    2d26:	pop	{r4, pc}

00002d28 <SDFile::operator bool()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2d28:	ldr	r3, [r0, #92]	; 0x5c
    2d2a:	cbz	r3, 2d30 <SDFile::operator bool()+0x8>
    2d2c:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
    2d2e:	bx	lr
    2d30:	ldr	r0, [r0, #96]	; 0x60
    2d32:	adds	r0, #0
    2d34:	it	ne
    2d36:	movne	r0, #1
    2d38:	bx	lr
    2d3a:	nop

00002d3c <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
    2d3c:	push	{r4, lr}
    2d3e:	mov	r4, r0
		if (filename) {
    2d40:	ldr	r0, [r0, #100]	; 0x64
    2d42:	cbz	r0, 2d4c <SDFile::close()+0x10>
			free(filename);
    2d44:	bl	ba44 <free>
			filename = nullptr;
    2d48:	movs	r3, #0
    2d4a:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
    2d4c:	add.w	r0, r4, #36	; 0x24
	}
    2d50:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
    2d54:	b.w	6de8 <FsBaseFile::close()>

00002d58 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
    2d58:	push	{r4, lr}
    2d5a:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
    2d5c:	mov	r2, r0
    2d5e:	ldr	r3, [r0, #16]
    2d60:	ldr	r1, [pc, #20]	; (2d78 <File::whoami()+0x20>)
    2d62:	ldr	r0, [pc, #24]	; (2d7c <File::whoami()+0x24>)
    2d64:	bl	a6b4 <Print::printf(char const*, ...)>
		if (f) f->whoami();
    2d68:	ldr	r0, [r4, #16]
    2d6a:	cbz	r0, 2d76 <File::whoami()+0x1e>
    2d6c:	ldr	r3, [r0, #0]
	}
    2d6e:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
    2d72:	ldr	r3, [r3, #36]	; 0x24
    2d74:	bx	r3
    2d76:	pop	{r4, pc}
    2d78:	.word	0x000133f4
    2d7c:	.word	0x200138e4

00002d80 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
    2d80:	mov	r2, r0
    2d82:	ldr	r3, [r0, #16]
    2d84:	ldr	r1, [pc, #4]	; (2d8c <SDFile::whoami()+0xc>)
    2d86:	ldr	r0, [pc, #8]	; (2d90 <SDFile::whoami()+0x10>)
    2d88:	b.w	a6b4 <Print::printf(char const*, ...)>
    2d8c:	.word	0x00013410
    2d90:	.word	0x200138e4

00002d94 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
    2d94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d98:	movs	r3, #0
    2d9a:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    2d9c:	mov	r2, r3
    2d9e:	mov	r5, r0
    2da0:	adds	r1, #36	; 0x24
    2da2:	add	r0, sp, #16
    2da4:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2da8:	ldr	r7, [pc, #148]	; (2e40 <SDFile::openNextFile(unsigned char)+0xac>)
    2daa:	strb.w	r3, [sp, #4]
    2dae:	strb.w	r3, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    2db2:	str	r3, [sp, #72]	; 0x48
    2db4:	str	r3, [sp, #76]	; 0x4c
    2db6:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2db8:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    2dba:	bl	6e90 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2dbe:	ldr	r3, [sp, #72]	; 0x48
    2dc0:	cmp	r3, #0
    2dc2:	beq.n	2e2a <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
    2dc4:	movs	r0, #104	; 0x68
    2dc6:	bl	ab7c <operator new(unsigned int)>
    2dca:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    2dcc:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    2dd0:	ldr	r2, [sp, #8]
    2dd2:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2dd6:	ldr	r0, [pc, #108]	; (2e44 <SDFile::openNextFile(unsigned char)+0xb0>)
    2dd8:	ldr	r1, [pc, #108]	; (2e48 <SDFile::openNextFile(unsigned char)+0xb4>)
    2dda:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2ddc:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    2de0:	movs	r6, #0
    2de2:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    2de4:	str	r1, [r4, #20]
    2de6:	str	r2, [r4, #28]
    2de8:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    2dec:	add.w	r0, r4, #36	; 0x24
    2df0:	add	r1, sp, #16
    2df2:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2df4:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    2df6:	str	r6, [r4, #16]
    2df8:	str.w	r8, [r4, #8]
    2dfc:	bl	6d70 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    2e00:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    2e02:	ldr	r2, [pc, #72]	; (2e4c <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2e04:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    2e06:	adds	r3, #1
    2e08:	str	r6, [r4, #100]	; 0x64
    2e0a:	strb	r6, [r5, #4]
    2e0c:	str.w	r8, [r5, #8]
    2e10:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    2e12:	str	r4, [r5, #16]
		if (f) f->refcount++;
    2e14:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    2e16:	str	r2, [r5, #0]
    2e18:	ldr	r3, [pc, #52]	; (2e50 <SDFile::openNextFile(unsigned char)+0xbc>)
    2e1a:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    2e1c:	add	r0, sp, #16
    2e1e:	bl	6de8 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
    2e22:	mov	r0, r5
    2e24:	add	sp, #80	; 0x50
    2e26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2e2a:	ldr	r3, [sp, #76]	; 0x4c
    2e2c:	cmp	r3, #0
    2e2e:	bne.n	2dc4 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    2e30:	ldr	r2, [pc, #24]	; (2e4c <SDFile::openNextFile(unsigned char)+0xb8>)
    2e32:	strb	r3, [r5, #4]
    2e34:	str	r4, [r5, #8]
    2e36:	strb	r3, [r5, #12]
    2e38:	str	r3, [r5, #16]
    2e3a:	str	r2, [r5, #0]
    2e3c:	b.n	2e18 <SDFile::openNextFile(unsigned char)+0x84>
    2e3e:	nop
    2e40:	.word	0x00012e28
    2e44:	.word	0x0001339c
    2e48:	.word	0x00013318
    2e4c:	.word	0x0001333c
    2e50:	.word	0x00012e04

00002e54 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
    2e54:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
    2e56:	cbz	r3, 2e5e <SDFile::peek()+0xa>
    2e58:	mov	r0, r3
    2e5a:	b.w	5888 <FatFile::peek()>
    2e5e:	ldr	r0, [r0, #96]	; 0x60
    2e60:	cbz	r0, 2e66 <SDFile::peek()+0x12>
    2e62:	b.w	3c3c <ExFatFile::peek()>
		return sdfatfile.peek();
	}
    2e66:	mov.w	r0, #4294967295
    2e6a:	bx	lr

00002e6c <SDFile::flush()>:
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
    2e6c:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    2e6e:	cbz	r3, 2e76 <SDFile::flush()+0xa>
    2e70:	mov	r0, r3
    2e72:	b.w	5d2c <FatFile::sync()>
    2e76:	ldr	r0, [r0, #96]	; 0x60
    2e78:	cbz	r0, 2e7e <SDFile::flush()+0x12>
    2e7a:	b.w	4ad8 <ExFatFile::sync()>
    2e7e:	bx	lr

00002e80 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
    2e80:	push	{r3, r4, r5, lr}
		if (!filename) {
    2e82:	ldr	r4, [r0, #100]	; 0x64
    2e84:	cbz	r4, 2e8a <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
    2e86:	mov	r0, r4
    2e88:	pop	{r3, r4, r5, pc}
    2e8a:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
    2e8c:	mov.w	r0, #256	; 0x100
    2e90:	bl	ba34 <malloc>
    2e94:	mov	r1, r0
    2e96:	str	r0, [r5, #100]	; 0x64
			if (filename) {
    2e98:	cbz	r0, 2ebc <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
    2e9a:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    2e9c:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
    2e9e:	cbz	r0, 2eac <SDFile::name()+0x2c>
    2ea0:	mov.w	r2, #256	; 0x100
    2ea4:	bl	6450 <FatFile::getName(char*, unsigned int)>
    2ea8:	ldr	r4, [r5, #100]	; 0x64
    2eaa:	b.n	2e86 <SDFile::name()+0x6>
    2eac:	ldr	r0, [r5, #96]	; 0x60
    2eae:	cbz	r0, 2ec2 <SDFile::name()+0x42>
    2eb0:	mov.w	r2, #256	; 0x100
    2eb4:	bl	38f8 <ExFatFile::getName(char*, unsigned int)>
    2eb8:	ldr	r4, [r5, #100]	; 0x64
    2eba:	b.n	2e86 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
    2ebc:	ldr	r4, [pc, #8]	; (2ec8 <SDFile::name()+0x48>)
    2ebe:	str	r4, [r5, #100]	; 0x64
    2ec0:	b.n	2e86 <SDFile::name()+0x6>
    2ec2:	mov	r4, r1
    2ec4:	b.n	2e86 <SDFile::name()+0x6>
    2ec6:	nop
    2ec8:	.word	0x20019510

00002ecc <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
    2ecc:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2ece:	cbz	r3, 2ef8 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
    2ed0:	ldrb	r2, [r3, #0]
    2ed2:	tst.w	r2, #112	; 0x70
    2ed6:	bne.n	2eda <SDFile::rewindDirectory()+0xe>
    2ed8:	bx	lr
    2eda:	push	{r4, lr}
    2edc:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    2ede:	movs	r1, #0
    2ee0:	mov	r0, r3
    2ee2:	bl	5b24 <FatFile::seekSet(unsigned long)>
    2ee6:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
    2ee8:	cbz	r0, 2ef6 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    2eea:	movs	r2, #0
    2eec:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
    2eee:	ldmia.w	sp!, {r4, lr}
    2ef2:	b.w	3c6c <ExFatFile::seekSet(unsigned long long)>
    2ef6:	pop	{r4, pc}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2ef8:	ldr	r0, [r0, #96]	; 0x60
    2efa:	cmp	r0, #0
    2efc:	beq.n	2ed8 <SDFile::rewindDirectory()+0xc>
    2efe:	ldrb.w	r3, [r0, #49]	; 0x31
    2f02:	tst.w	r3, #80	; 0x50
    2f06:	beq.n	2ed8 <SDFile::rewindDirectory()+0xc>
    2f08:	movs	r2, #0
    2f0a:	movs	r3, #0
    2f0c:	b.w	3c6c <ExFatFile::seekSet(unsigned long long)>

00002f10 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
    2f10:	push	{r4, r6, r7, lr}
    2f12:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
    2f14:	cbz	r4, 2f3a <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
    2f16:	cmp	r3, #1
    2f18:	it	eq
    2f1a:	cmpeq	r2, #0
    2f1c:	bcc.n	2f22 <SDFile::truncate(unsigned long long)+0x12>
    2f1e:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
    2f20:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
    2f22:	mov	r1, r2
    2f24:	mov	r0, r4
    2f26:	bl	5b24 <FatFile::seekSet(unsigned long)>
    2f2a:	cmp	r0, #0
    2f2c:	beq.n	2f1e <SDFile::truncate(unsigned long long)+0xe>
    2f2e:	mov	r0, r4
    2f30:	bl	5d38 <FatFile::truncate()>
    2f34:	cmp	r0, #0
    2f36:	beq.n	2f1e <SDFile::truncate(unsigned long long)+0xe>
    2f38:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
    2f3a:	ldr	r4, [r0, #96]	; 0x60
    2f3c:	cmp	r4, #0
    2f3e:	beq.n	2f1e <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    2f40:	mov	r0, r4
    2f42:	bl	3c6c <ExFatFile::seekSet(unsigned long long)>
    2f46:	cmp	r0, #0
    2f48:	beq.n	2f1e <SDFile::truncate(unsigned long long)+0xe>
    2f4a:	mov	r0, r4
    2f4c:	ldmia.w	sp!, {r4, r6, r7, lr}
    2f50:	b.w	4e8c <ExFatFile::truncate()>

00002f54 <SDFile::size()>:
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
    2f54:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2f56:	cbz	r3, 2f5e <SDFile::size()+0xa>
    2f58:	ldr	r0, [r3, #28]
    2f5a:	movs	r1, #0
    2f5c:	bx	lr
    2f5e:	ldr	r3, [r0, #96]	; 0x60
    2f60:	cbz	r3, 2f68 <SDFile::size()+0x14>
    2f62:	ldr	r0, [r3, #16]
    2f64:	ldr	r1, [r3, #20]
    2f66:	bx	lr
    2f68:	mov	r0, r3
    2f6a:	mov	r1, r3
		return sdfatfile.size();
	}
    2f6c:	bx	lr
    2f6e:	nop

00002f70 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
    2f70:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    2f72:	cbz	r3, 2f7a <SDFile::position()+0xa>
    2f74:	ldr	r0, [r3, #20]
    2f76:	movs	r1, #0
    2f78:	bx	lr
    2f7a:	ldr	r3, [r0, #96]	; 0x60
    2f7c:	cbz	r3, 2f84 <SDFile::position()+0x14>
    2f7e:	ldmia.w	r3, {r0, r1}
    2f82:	bx	lr
    2f84:	mov	r0, r3
    2f86:	mov	r1, r3
		return sdfatfile.curPosition();
	}
    2f88:	bx	lr
    2f8a:	nop

00002f8c <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
    2f8c:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    2f8e:	cbz	r3, 2f96 <SDFile::read(void*, unsigned int)+0xa>
    2f90:	mov	r0, r3
    2f92:	b.w	56e8 <FatFile::read(void*, unsigned int)>
    2f96:	ldr	r0, [r0, #96]	; 0x60
    2f98:	cbz	r0, 2f9e <SDFile::read(void*, unsigned int)+0x12>
    2f9a:	b.w	3a94 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
    2f9e:	mov.w	r0, #4294967295
    2fa2:	bx	lr

00002fa4 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
    2fa4:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    2fa6:	cbz	r3, 2fb6 <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    2fa8:	ldrb	r3, [r3, #0]
    2faa:	tst.w	r3, #112	; 0x70
    2fae:	ite	ne
    2fb0:	movne	r0, #1
    2fb2:	moveq	r0, #0
    2fb4:	bx	lr
    2fb6:	ldr	r0, [r0, #96]	; 0x60
    2fb8:	cbz	r0, 2fc8 <SDFile::isDirectory()+0x24>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    2fba:	ldrb.w	r3, [r0, #49]	; 0x31
    2fbe:	tst.w	r3, #80	; 0x50
    2fc2:	ite	ne
    2fc4:	movne	r0, #1
    2fc6:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
    2fc8:	bx	lr
    2fca:	nop

00002fcc <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
    2fcc:	ldr	r3, [r0, #92]	; 0x5c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    2fce:	cbz	r3, 2fd6 <SDFile::write(void const*, unsigned int)+0xa>
    2fd0:	mov	r0, r3
    2fd2:	b.w	5db0 <FatFile::write(void const*, unsigned int)>
    2fd6:	ldr	r0, [r0, #96]	; 0x60
    2fd8:	cbz	r0, 2fde <SDFile::write(void const*, unsigned int)+0x12>
    2fda:	b.w	4f70 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
    2fde:	bx	lr

00002fe0 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
    2fe0:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
    2fe2:	cbz	r2, 2ffe <SDFile::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
    2fe4:	ldrb	r3, [r2, #0]
    2fe6:	and.w	r3, r3, #8
    2fea:	and.w	r0, r3, #255	; 0xff
    2fee:	cbz	r3, 3032 <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    2ff0:	ldr	r3, [r2, #28]
    2ff2:	ldr	r0, [r2, #20]
    2ff4:	subs	r0, r3, r0
    2ff6:	it	mi
    2ff8:	mvnmi.w	r0, #2147483648	; 0x80000000
    2ffc:	bx	lr
    2ffe:	ldr	r1, [r0, #96]	; 0x60
    3000:	cbz	r1, 3034 <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
    3002:	ldrb.w	r3, [r1, #49]	; 0x31
    3006:	and.w	r3, r3, #8
    300a:	and.w	r0, r3, #255	; 0xff
    300e:	cbz	r3, 3032 <SDFile::available()+0x52>
    3010:	ldrd	r2, r3, [r1, #16]
    3014:	ldrd	r0, r1, [r1]
    3018:	subs	r0, r2, r0
    301a:	push	{r4, r5}
    301c:	sbc.w	r1, r3, r1
    3020:	movs	r5, #0
    3022:	mvn.w	r4, #2147483648	; 0x80000000
    3026:	cmp	r5, r1
    3028:	it	eq
    302a:	cmpeq	r4, r0
    302c:	bcs.n	3030 <SDFile::available()+0x50>
    302e:	mov	r0, r4
		return sdfatfile.available();
	}
    3030:	pop	{r4, r5}
    3032:	bx	lr
    3034:	mov	r0, r1
    3036:	bx	lr

00003038 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    3038:	push	{r4, r6, r7}
    303a:	ldr	r4, [sp, #12]
    303c:	mov	r6, r2
    303e:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    3040:	cbz	r4, 3050 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    3042:	cmp	r4, #1
    3044:	beq.n	3084 <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    3046:	cmp	r4, #2
    3048:	beq.n	3066 <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
    304a:	movs	r0, #0
    304c:	pop	{r4, r6, r7}
    304e:	bx	lr
    3050:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    3052:	cbz	r4, 308c <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    3054:	cmp	r3, #1
    3056:	it	eq
    3058:	cmpeq	r2, #0
    305a:	bcs.n	304a <SDFile::seek(unsigned long long, int)+0x12>
    305c:	mov	r0, r4
    305e:	mov	r1, r2
    3060:	pop	{r4, r6, r7}
    3062:	b.w	5b24 <FatFile::seekSet(unsigned long)>
    3066:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    3068:	cbz	r3, 3098 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
    306a:	ldr	r2, [r3, #28]
    306c:	adds	r6, r6, r2
    306e:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    3072:	cmp	r7, #1
    3074:	it	eq
    3076:	cmpeq	r6, #0
    3078:	bcs.n	304a <SDFile::seek(unsigned long long, int)+0x12>
    307a:	mov	r1, r6
    307c:	mov	r0, r3
    307e:	pop	{r4, r6, r7}
    3080:	b.w	5b24 <FatFile::seekSet(unsigned long)>
    3084:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    3086:	cbz	r3, 30ac <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
    3088:	ldr	r2, [r3, #20]
    308a:	b.n	306c <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    308c:	ldr	r0, [r0, #96]	; 0x60
    308e:	cmp	r0, #0
    3090:	beq.n	304a <SDFile::seek(unsigned long long, int)+0x12>
    3092:	pop	{r4, r6, r7}
    3094:	b.w	3c6c <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    3098:	ldr	r0, [r0, #96]	; 0x60
    309a:	cmp	r0, #0
    309c:	beq.n	304a <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    309e:	ldrd	r2, r3, [r0, #16]
    30a2:	adds	r2, r2, r6
    30a4:	adcs	r3, r7
    30a6:	pop	{r4, r6, r7}
    30a8:	b.w	3c6c <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    30ac:	ldr	r0, [r0, #96]	; 0x60
    30ae:	cmp	r0, #0
    30b0:	beq.n	304a <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    30b2:	ldrd	r2, r3, [r0]
    30b6:	adds	r2, r2, r6
    30b8:	adcs	r3, r7
    30ba:	b.n	3092 <SDFile::seek(unsigned long long, int)+0x5a>

000030bc <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    30bc:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    30be:	ldr	r3, [pc, #32]	; (30e0 <File::~File()+0x24>)
    30c0:	push	{r4, lr}
    30c2:	mov	r4, r0
    30c4:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    30c6:	cbz	r2, 30da <File::~File()+0x1e>
    30c8:	ldr	r3, [r2, #16]
    30ca:	subs	r3, #1
    30cc:	str	r3, [r2, #16]
    30ce:	cbnz	r3, 30da <File::~File()+0x1e>
    30d0:	ldr	r0, [r0, #16]
    30d2:	cbz	r0, 30da <File::~File()+0x1e>
    30d4:	ldr	r3, [r0, #0]
    30d6:	ldr	r3, [r3, #32]
    30d8:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    30da:	mov	r0, r4
    30dc:	pop	{r4, pc}
    30de:	nop
    30e0:	.word	0x0001333c

000030e4 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    30e4:	push	{r3, r4, r5, lr}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    30e6:	ldr	r3, [r0, #92]	; 0x5c
    30e8:	ldr	r2, [pc, #80]	; (313c <SDFile::~SDFile()+0x58>)
    30ea:	str	r2, [r0, #0]
    30ec:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    30ee:	add.w	r5, r0, #36	; 0x24
    30f2:	cbz	r3, 3132 <SDFile::~SDFile()+0x4e>
    30f4:	mov	r0, r5
    30f6:	bl	6de8 <FsBaseFile::close()>
		if (filename) free(filename);
    30fa:	ldr	r0, [r4, #100]	; 0x64
    30fc:	cbz	r0, 3102 <SDFile::~SDFile()+0x1e>
    30fe:	bl	ba44 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    3102:	ldr	r3, [pc, #60]	; (3140 <SDFile::~SDFile()+0x5c>)
    3104:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    3106:	mov	r0, r5
    3108:	bl	6de8 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    310c:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    310e:	ldr	r3, [pc, #52]	; (3144 <SDFile::~SDFile()+0x60>)
    3110:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3112:	cbz	r2, 3126 <SDFile::~SDFile()+0x42>
    3114:	ldr	r3, [r2, #16]
    3116:	subs	r3, #1
    3118:	str	r3, [r2, #16]
    311a:	cbnz	r3, 3126 <SDFile::~SDFile()+0x42>
    311c:	ldr	r0, [r4, #16]
    311e:	cbz	r0, 3126 <SDFile::~SDFile()+0x42>
    3120:	ldr	r3, [r0, #0]
    3122:	ldr	r3, [r3, #32]
    3124:	blx	r3
	}
    3126:	mov	r0, r4
    3128:	movs	r1, #104	; 0x68
    312a:	bl	ab80 <operator delete(void*, unsigned int)>
    312e:	mov	r0, r4
    3130:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    3132:	ldr	r3, [r0, #96]	; 0x60
    3134:	cmp	r3, #0
    3136:	bne.n	30f4 <SDFile::~SDFile()+0x10>
    3138:	b.n	30fa <SDFile::~SDFile()+0x16>
    313a:	nop
    313c:	.word	0x0001339c
    3140:	.word	0x00012e04
    3144:	.word	0x0001333c

00003148 <File::~File()>:
    3148:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    314a:	ldr	r3, [pc, #40]	; (3174 <File::~File()+0x2c>)
    314c:	push	{r4, lr}
    314e:	mov	r4, r0
    3150:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3152:	cbz	r2, 3166 <File::~File()+0x1e>
    3154:	ldr	r3, [r2, #16]
    3156:	subs	r3, #1
    3158:	str	r3, [r2, #16]
    315a:	cbnz	r3, 3166 <File::~File()+0x1e>
    315c:	ldr	r0, [r0, #16]
    315e:	cbz	r0, 3166 <File::~File()+0x1e>
    3160:	ldr	r3, [r0, #0]
    3162:	ldr	r3, [r3, #32]
    3164:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3166:	mov	r0, r4
    3168:	movs	r1, #20
    316a:	bl	ab80 <operator delete(void*, unsigned int)>
    316e:	mov	r0, r4
    3170:	pop	{r4, pc}
    3172:	nop
    3174:	.word	0x0001333c

00003178 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    3178:	push	{r3, r4, r5, lr}
    317a:	ldr	r3, [r0, #92]	; 0x5c
    317c:	ldr	r2, [pc, #72]	; (31c8 <SDFile::~SDFile()+0x50>)
    317e:	str	r2, [r0, #0]
    3180:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    3182:	add.w	r5, r0, #36	; 0x24
    3186:	cbz	r3, 31be <SDFile::~SDFile()+0x46>
    3188:	mov	r0, r5
    318a:	bl	6de8 <FsBaseFile::close()>
		if (filename) free(filename);
    318e:	ldr	r0, [r4, #100]	; 0x64
    3190:	cbz	r0, 3196 <SDFile::~SDFile()+0x1e>
    3192:	bl	ba44 <free>
    3196:	ldr	r3, [pc, #52]	; (31cc <SDFile::~SDFile()+0x54>)
    3198:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    319a:	mov	r0, r5
    319c:	bl	6de8 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    31a0:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    31a2:	ldr	r3, [pc, #44]	; (31d0 <SDFile::~SDFile()+0x58>)
    31a4:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    31a6:	cbz	r2, 31ba <SDFile::~SDFile()+0x42>
    31a8:	ldr	r3, [r2, #16]
    31aa:	subs	r3, #1
    31ac:	str	r3, [r2, #16]
    31ae:	cbnz	r3, 31ba <SDFile::~SDFile()+0x42>
    31b0:	ldr	r0, [r4, #16]
    31b2:	cbz	r0, 31ba <SDFile::~SDFile()+0x42>
    31b4:	ldr	r3, [r0, #0]
    31b6:	ldr	r3, [r3, #32]
    31b8:	blx	r3
	}
    31ba:	mov	r0, r4
    31bc:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    31be:	ldr	r3, [r0, #96]	; 0x60
    31c0:	cmp	r3, #0
    31c2:	bne.n	3188 <SDFile::~SDFile()+0x10>
    31c4:	b.n	318e <SDFile::~SDFile()+0x16>
    31c6:	nop
    31c8:	.word	0x0001339c
    31cc:	.word	0x00012e04
    31d0:	.word	0x0001333c

000031d4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    31d4:	ldr	r2, [pc, #8]	; (31e0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    31d6:	ldr	r1, [pc, #12]	; (31e4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    31d8:	ldr	r0, [pc, #12]	; (31e8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    31da:	b.w	ac58 <__aeabi_atexit>
    31de:	nop
    31e0:	.word	0x20013730
    31e4:	.word	0x00002861
    31e8:	.word	0x20019514

000031ec <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    31ec:	ldr	r2, [pc, #8]	; (31f8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    31ee:	ldr	r1, [pc, #12]	; (31fc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    31f0:	ldr	r0, [pc, #12]	; (3200 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    31f2:	b.w	ac58 <__aeabi_atexit>
    31f6:	nop
    31f8:	.word	0x20013730
    31fc:	.word	0x00002861
    3200:	.word	0x2001951c

00003204 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    3204:	ldr	r2, [pc, #8]	; (3210 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    3206:	ldr	r1, [pc, #12]	; (3214 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    3208:	ldr	r0, [pc, #12]	; (3218 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    320a:	b.w	ac58 <__aeabi_atexit>
    320e:	nop
    3210:	.word	0x20013730
    3214:	.word	0x00002861
    3218:	.word	0x20019524

0000321c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    321c:	ldr	r2, [pc, #8]	; (3228 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    321e:	ldr	r1, [pc, #12]	; (322c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    3220:	ldr	r0, [pc, #12]	; (3230 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    3222:	b.w	ac58 <__aeabi_atexit>
    3226:	nop
    3228:	.word	0x20013730
    322c:	.word	0x00002861
    3230:	.word	0x2001952c

00003234 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    3234:	ldr	r2, [pc, #8]	; (3240 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    3236:	ldr	r1, [pc, #12]	; (3244 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    3238:	ldr	r0, [pc, #12]	; (3248 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    323a:	b.w	ac58 <__aeabi_atexit>
    323e:	nop
    3240:	.word	0x20013730
    3244:	.word	0x00002861
    3248:	.word	0x20019534

0000324c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    324c:	ldr	r2, [pc, #8]	; (3258 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    324e:	ldr	r1, [pc, #12]	; (325c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    3250:	ldr	r0, [pc, #12]	; (3260 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    3252:	b.w	ac58 <__aeabi_atexit>
    3256:	nop
    3258:	.word	0x20013730
    325c:	.word	0x00002861
    3260:	.word	0x2001953c

00003264 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    3264:	ldr	r2, [pc, #8]	; (3270 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    3266:	ldr	r1, [pc, #12]	; (3274 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    3268:	ldr	r0, [pc, #12]	; (3278 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    326a:	b.w	ac58 <__aeabi_atexit>
    326e:	nop
    3270:	.word	0x20013730
    3274:	.word	0x00002861
    3278:	.word	0x20019544

0000327c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    327c:	ldr	r2, [pc, #8]	; (3288 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    327e:	ldr	r1, [pc, #12]	; (328c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    3280:	ldr	r0, [pc, #12]	; (3290 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    3282:	b.w	ac58 <__aeabi_atexit>
    3286:	nop
    3288:	.word	0x20013730
    328c:	.word	0x00002861
    3290:	.word	0x2001954c

00003294 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    3294:	ldrb.w	r2, [r0, #57]	; 0x39
    3298:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    329c:	subs	r0, r2, r0
    329e:	bx	lr

000032a0 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    32a0:	ldrb.w	r3, [r0, #56]	; 0x38
    32a4:	ldrb.w	r2, [r0, #57]	; 0x39
    32a8:	cmp	r2, r3
    32aa:	bls.n	32b8 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    32ac:	adds	r2, r3, #1
    32ae:	add	r3, r0
    32b0:	strb.w	r2, [r0, #56]	; 0x38
    32b4:	ldrb	r0, [r3, #24]
    32b6:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    32b8:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    32bc:	bx	lr
    32be:	nop

000032c0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    32c0:	ldrb.w	r3, [r0, #56]	; 0x38
    32c4:	ldrb.w	r2, [r0, #57]	; 0x39
    32c8:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    32ca:	itte	hi
    32cc:	addhi	r3, r3, r0
    32ce:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    32d0:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    32d4:	bx	lr
    32d6:	nop

000032d8 <TwoWire::flush()>:
	virtual void flush(void) {
    32d8:	bx	lr
    32da:	nop

000032dc <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    32dc:	push	{r3, r4, r5, lr}
    32de:	mov	r5, r0
	if (transmitting || slave_mode) {
    32e0:	ldrh.w	r0, [r0, #94]	; 0x5e
    32e4:	cbz	r0, 330c <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    32e6:	ldrb.w	r3, [r5, #93]	; 0x5d
    32ea:	mov	r4, r2
    32ec:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    32f0:	cmp	r4, r2
    32f2:	bhi.n	330e <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    32f4:	add.w	r0, r5, #59	; 0x3b
    32f8:	add	r0, r3
    32fa:	mov	r2, r4
    32fc:	bl	89a8 <memcpy>
		txBufferLength += quantity;
    3300:	ldrb.w	r3, [r5, #93]	; 0x5d
    3304:	add	r3, r4
    3306:	strb.w	r3, [r5, #93]	; 0x5d
    330a:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    330c:	pop	{r3, r4, r5, pc}
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    330e:	movs	r0, #1
    3310:	mov	r4, r2
    3312:	strb	r0, [r5, #4]
    3314:	b.n	32f4 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    3316:	nop

00003318 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    3318:	ldrh.w	r3, [r0, #94]	; 0x5e
    331c:	cbz	r3, 333a <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    331e:	ldrb.w	r3, [r0, #93]	; 0x5d
    3322:	cmp	r3, #32
    3324:	bhi.n	3336 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    3326:	adds	r2, r0, r3
    3328:	adds	r3, #1
    332a:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    332e:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    3330:	strb.w	r1, [r2, #59]	; 0x3b
    3334:	bx	lr
    3336:	movs	r3, #1
    3338:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    333a:	movs	r0, #0
    333c:	bx	lr
    333e:	nop

00003340 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    3340:	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    3342:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    3344:	ldrb	r4, [r2, #3]
    3346:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    3348:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    334a:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    334c:	bpl.n	3398 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    334e:	movs	r3, #16
    3350:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    3352:	lsls	r3, r4, #25
    3354:	bpl.n	3396 <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    3356:	and.w	r4, r4, #4
    335a:	and.w	r3, r4, #255	; 0xff
    335e:	cmp	r4, #0
    3360:	beq.n	3418 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3362:	ldr	r1, [pc, #264]	; (346c <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    3364:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3366:	movs	r3, #0
    3368:	strb	r3, [r1, #0]
			txBufferLength = 0;
    336a:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    336e:	cmp	r2, #0
    3370:	beq.n	3440 <TwoWire::isr()+0x100>
				user_onRequest();
    3372:	blx	r2
			}
			if (txBufferLength == 0) {
    3374:	ldrb.w	r3, [r5, #93]	; 0x5d
    3378:	cmp	r3, #0
    337a:	beq.n	3440 <TwoWire::isr()+0x100>
    337c:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    337e:	movs	r2, #208	; 0xd0
    3380:	strb	r2, [r3, #2]
    3382:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    3384:	ldrb.w	r2, [r5, #59]	; 0x3b
    3388:	strb	r2, [r3, #4]
    338a:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    338c:	movs	r2, #1
    338e:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3392:	movs	r2, #2
    3394:	strb	r2, [r3, #3]
    3396:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    3398:	and.w	r3, r4, #64	; 0x40
    339c:	and.w	r0, r3, #255	; 0xff
    33a0:	cmp	r3, #0
    33a2:	bne.n	3356 <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    33a4:	ldrb	r3, [r2, #6]
    33a6:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    33a8:	and.w	r1, r3, #96	; 0x60
    33ac:	cmp	r1, #96	; 0x60
    33ae:	beq.n	344e <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    33b0:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    33b2:	and.w	r3, r3, #16
    33b6:	and.w	r1, r3, #255	; 0xff
    33ba:	cbz	r3, 33ea <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    33bc:	ands.w	r4, r4, #1
    33c0:	bne.n	3432 <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    33c2:	ldrb.w	r3, [r5, #92]	; 0x5c
    33c6:	ldrb.w	r1, [r5, #93]	; 0x5d
    33ca:	cmp	r1, r3
    33cc:	bls.n	3466 <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    33ce:	adds	r1, r3, #1
    33d0:	add	r3, r5
    33d2:	strb.w	r1, [r5, #92]	; 0x5c
    33d6:	ldrb.w	r3, [r3, #59]	; 0x3b
    33da:	strb	r3, [r2, #4]
    33dc:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    33de:	movs	r2, #208	; 0xd0
    33e0:	strb	r2, [r3, #2]
    33e2:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    33e4:	movs	r2, #2
    33e6:	strb	r2, [r3, #3]
    33e8:	b.n	3396 <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    33ea:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    33ee:	ldrb	r3, [r2, #6]
    33f0:	orr.w	r3, r3, #32
    33f4:	strb	r3, [r2, #6]
    33f6:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    33f8:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    33fc:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    33fe:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    3400:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    3402:	bhi.n	3392 <TwoWire::isr()+0x52>
    3404:	ldr	r0, [pc, #100]	; (346c <TwoWire::isr()+0x12c>)
    3406:	ldrb	r0, [r0, #0]
    3408:	cmp	r0, #0
    340a:	beq.n	3392 <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    340c:	adds	r0, r5, r1
    340e:	adds	r1, #1
    3410:	strb.w	r1, [r5, #57]	; 0x39
    3414:	strb	r2, [r0, #24]
    3416:	b.n	3392 <TwoWire::isr()+0x52>
    3418:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    341a:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    341e:	movs	r3, #192	; 0xc0
    3420:	strb	r3, [r2, #2]
    3422:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3424:	ldr	r2, [pc, #68]	; (346c <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    3426:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3428:	movs	r1, #1
    342a:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    342c:	movs	r2, #2
    342e:	strb	r2, [r3, #3]
    3430:	b.n	3396 <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    3432:	movs	r3, #192	; 0xc0
    3434:	strb	r3, [r2, #2]
    3436:	ldr	r3, [r5, #16]
			data = port().D;
    3438:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    343a:	movs	r2, #2
    343c:	strb	r2, [r3, #3]
    343e:	b.n	3396 <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3440:	movs	r2, #1
				txBuffer[0] = 0;
    3442:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3444:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    3448:	strb.w	r3, [r5, #59]	; 0x3b
    344c:	b.n	337c <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    344e:	and.w	r3, r3, #223	; 0xdf
    3452:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    3454:	ldr	r3, [r5, #104]	; 0x68
    3456:	cbz	r3, 3462 <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    3458:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    345c:	ldrb.w	r0, [r5, #57]	; 0x39
    3460:	blx	r3
    3462:	ldr	r2, [r5, #16]
    3464:	b.n	33b0 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    3466:	strb	r4, [r2, #4]
    3468:	b.n	33dc <TwoWire::isr()+0x9c>
    346a:	nop
    346c:	.word	0x20019554

00003470 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    3470:	ldr	r0, [pc, #4]	; (3478 <i2c0_isr+0x8>)
    3472:	b.w	3340 <TwoWire::isr()>
    3476:	nop
    3478:	.word	0x200137fc

0000347c <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    347c:	ldr	r0, [pc, #4]	; (3484 <i2c1_isr+0x8>)
    347e:	b.w	3340 <TwoWire::isr()>
    3482:	nop
    3484:	.word	0x20013868

00003488 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    3488:	ldr	r0, [pc, #4]	; (3490 <i2c2_isr+0x8>)
    348a:	b.w	3340 <TwoWire::isr()>
    348e:	nop
    3490:	.word	0x20013790

00003494 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    3494:	bx	lr
    3496:	nop

00003498 <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
    3498:	push	{r4, lr}
    349a:	ldr.w	r4, [r0, #1156]	; 0x484
    349e:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    34a0:	cbz	r4, 34cc <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    34a2:	mov	r2, r1
    34a4:	mov	r0, sp
    34a6:	mov	r1, r4
    34a8:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    34aa:	movs	r4, #0
    34ac:	strb.w	r4, [sp]
    34b0:	strb.w	r4, [sp, #1]
    34b4:	strb.w	r4, [sp, #2]
    34b8:	bl	567c <FatFile::open(FatVolume*, char const*, int)>
    34bc:	cbnz	r0, 34c2 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
    34be:	add	sp, #56	; 0x38
    34c0:	pop	{r4, pc}
    34c2:	mov	r0, sp
    34c4:	bl	6788 <FatFile::remove()>
    34c8:	add	sp, #56	; 0x38
    34ca:	pop	{r4, pc}
    34cc:	ldr.w	r0, [r0, #1160]	; 0x488
    34d0:	cmp	r0, #0
    34d2:	beq.n	34be <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    34d4:	mov	r2, r1
    34d6:	movs	r3, #1
    34d8:	mov	r1, r0
    34da:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    34dc:	strb.w	r4, [sp, #49]	; 0x31
    34e0:	strb.w	r4, [sp, #50]	; 0x32
    34e4:	strb.w	r4, [sp, #51]	; 0x33
    34e8:	bl	4248 <ExFatFile::open(ExFatVolume*, char const*, int)>
    34ec:	cmp	r0, #0
    34ee:	beq.n	34be <SDClass::remove(char const*)+0x26>
    34f0:	mov	r0, sp
    34f2:	bl	4860 <ExFatFile::remove()>
    34f6:	add	sp, #56	; 0x38
    34f8:	pop	{r4, pc}
    34fa:	nop

000034fc <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    34fc:	push	{r4, lr}
    34fe:	ldr.w	r4, [r0, #1156]	; 0x484
    3502:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    3504:	cbz	r4, 3526 <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    3506:	mov	r2, r1
    3508:	movs	r3, #1
    350a:	addw	r1, r4, #1092	; 0x444
    350e:	mov	r0, sp
    3510:	movs	r4, #0
    3512:	strb.w	r4, [sp]
    3516:	strb.w	r4, [sp, #1]
    351a:	strb.w	r4, [sp, #2]
    351e:	bl	54f8 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
    3522:	add	sp, #56	; 0x38
    3524:	pop	{r4, pc}
    3526:	ldr.w	r0, [r0, #1160]	; 0x488
    352a:	cmp	r0, #0
    352c:	beq.n	3522 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    352e:	mov	r2, r1
    3530:	movs	r3, #1
    3532:	add.w	r1, r0, #1096	; 0x448
    3536:	mov	r0, sp
    3538:	strb.w	r4, [sp, #49]	; 0x31
    353c:	strb.w	r4, [sp, #50]	; 0x32
    3540:	strb.w	r4, [sp, #51]	; 0x33
    3544:	bl	4c7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    3548:	add	sp, #56	; 0x38
    354a:	pop	{r4, pc}

0000354c <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    354c:	push	{r4, r5, lr}
    354e:	ldr.w	r4, [r0, #1156]	; 0x484
    3552:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    3554:	cbz	r4, 3574 <SDClass::exists(char const*)+0x28>
    3556:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    3558:	mov	r2, r1
    355a:	mov	r3, r5
    355c:	mov	r1, r4
    355e:	mov	r0, sp
    3560:	strb.w	r5, [sp]
    3564:	strb.w	r5, [sp, #1]
    3568:	strb.w	r5, [sp, #2]
    356c:	bl	567c <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    3570:	add	sp, #60	; 0x3c
    3572:	pop	{r4, r5, pc}
    3574:	ldr.w	r0, [r0, #1160]	; 0x488
    3578:	cmp	r0, #0
    357a:	beq.n	3570 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    357c:	mov	r2, r1
    357e:	mov	r3, r4
    3580:	mov	r1, r0
    3582:	mov	r0, sp
    3584:	strb.w	r4, [sp, #49]	; 0x31
    3588:	strb.w	r4, [sp, #50]	; 0x32
    358c:	strb.w	r4, [sp, #51]	; 0x33
    3590:	bl	4248 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3594:	add	sp, #60	; 0x3c
    3596:	pop	{r4, r5, pc}

00003598 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
    3598:	push	{r3, r4, r5, lr}
    359a:	mov	r5, r0
    359c:	ldr.w	r0, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    35a0:	cbz	r0, 35d4 <SDClass::usedSize()+0x3c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    35a2:	ldr	r4, [r0, #28]
    35a4:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    35a6:	bl	6208 <FatPartition::freeClusterCount()>
    35aa:	ldr.w	r3, [r5, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    35ae:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    35b0:	cbz	r3, 35c4 <SDClass::usedSize()+0x2c>
    35b2:	ldrb	r0, [r3, #6]
    35b4:	mov.w	r3, #512	; 0x200
    35b8:	lsl.w	r0, r3, r0
    35bc:	uxth	r0, r0
    35be:	umull	r0, r1, r0, r4
    35c2:	pop	{r3, r4, r5, pc}
    35c4:	ldr.w	r3, [r5, #1160]	; 0x488
    35c8:	cbz	r3, 35e4 <SDClass::usedSize()+0x4c>
    35ca:	ldr.w	r0, [r3, #1084]	; 0x43c
    35ce:	umull	r0, r1, r0, r4
    35d2:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    35d4:	ldr.w	r0, [r5, #1160]	; 0x488
    35d8:	cbz	r0, 35e4 <SDClass::usedSize()+0x4c>
    35da:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    35de:	bl	45d4 <ExFatPartition::freeClusterCount()>
    35e2:	b.n	35aa <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    35e4:	movs	r0, #0
    35e6:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    35e8:	pop	{r3, r4, r5, pc}
    35ea:	nop

000035ec <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    35ec:	push	{r4, r5, lr}
    35ee:	ldr.w	r4, [r0, #1156]	; 0x484
    35f2:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    35f4:	cbz	r4, 3620 <SDClass::rmdir(char const*)+0x34>
    35f6:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    35f8:	mov	r2, r1
    35fa:	mov	r3, r5
    35fc:	mov	r1, r4
    35fe:	mov	r0, sp
    3600:	strb.w	r5, [sp]
    3604:	strb.w	r5, [sp, #1]
    3608:	strb.w	r5, [sp, #2]
    360c:	bl	567c <FatFile::open(FatVolume*, char const*, int)>
    3610:	cbnz	r0, 3616 <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
    3612:	add	sp, #60	; 0x3c
    3614:	pop	{r4, r5, pc}
    3616:	mov	r0, sp
    3618:	bl	5ac8 <FatFile::rmdir()>
    361c:	add	sp, #60	; 0x3c
    361e:	pop	{r4, r5, pc}
    3620:	ldr.w	r0, [r0, #1160]	; 0x488
    3624:	cmp	r0, #0
    3626:	beq.n	3612 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    3628:	mov	r2, r1
    362a:	mov	r3, r4
    362c:	mov	r1, r0
    362e:	mov	r0, sp
    3630:	strb.w	r4, [sp, #49]	; 0x31
    3634:	strb.w	r4, [sp, #50]	; 0x32
    3638:	strb.w	r4, [sp, #51]	; 0x33
    363c:	bl	4248 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3640:	cmp	r0, #0
    3642:	beq.n	3612 <SDClass::rmdir(char const*)+0x26>
    3644:	mov	r0, sp
    3646:	bl	4938 <ExFatFile::rmdir()>
    364a:	add	sp, #60	; 0x3c
    364c:	pop	{r4, r5, pc}
    364e:	nop

00003650 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
    3650:	push	{r4, r5, r6, lr}
    3652:	ldr.w	r4, [r0, #1156]	; 0x484
    3656:	sub	sp, #56	; 0x38
    3658:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    365a:	cbz	r4, 368e <SDClass::rename(char const*, char const*)+0x3e>
    365c:	movs	r5, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    365e:	addw	r4, r4, #1092	; 0x444
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    3662:	mov	r2, r1
    3664:	mov	r3, r5
    3666:	mov	r1, r4
    3668:	mov	r0, sp
    366a:	strb.w	r5, [sp]
    366e:	strb.w	r5, [sp, #1]
    3672:	strb.w	r5, [sp, #2]
    3676:	bl	55bc <FatFile::open(FatFile*, char const*, int)>
    367a:	cbnz	r0, 3680 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
    367c:	add	sp, #56	; 0x38
    367e:	pop	{r4, r5, r6, pc}
    3680:	mov	r2, r6
    3682:	mov	r1, r4
    3684:	mov	r0, sp
    3686:	bl	58f4 <FatFile::rename(FatFile*, char const*)>
    368a:	add	sp, #56	; 0x38
    368c:	pop	{r4, r5, r6, pc}
    368e:	ldr.w	r0, [r0, #1160]	; 0x488
    3692:	cmp	r0, #0
    3694:	beq.n	367c <SDClass::rename(char const*, char const*)+0x2c>
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    3696:	add.w	r5, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    369a:	mov	r2, r1
    369c:	mov	r3, r4
    369e:	mov	r1, r5
    36a0:	mov	r0, sp
    36a2:	strb.w	r4, [sp, #49]	; 0x31
    36a6:	strb.w	r4, [sp, #50]	; 0x32
    36aa:	strb.w	r4, [sp, #51]	; 0x33
    36ae:	bl	4148 <ExFatFile::open(ExFatFile*, char const*, int)>
    36b2:	cmp	r0, #0
    36b4:	beq.n	367c <SDClass::rename(char const*, char const*)+0x2c>
    36b6:	mov	r2, r6
    36b8:	mov	r1, r5
    36ba:	mov	r0, sp
    36bc:	bl	4de0 <ExFatFile::rename(ExFatFile*, char const*)>
    36c0:	add	sp, #56	; 0x38
    36c2:	pop	{r4, r5, r6, pc}

000036c4 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    36c4:	ldr.w	r2, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    36c8:	cbz	r2, 36de <SDClass::totalSize()+0x1a>
    36ca:	ldrb	r1, [r2, #6]
    36cc:	ldr	r0, [r2, #28]
    36ce:	mov.w	r3, #512	; 0x200
    36d2:	lsls	r3, r1
    36d4:	uxth	r3, r3
    36d6:	subs	r0, #1
    36d8:	umull	r0, r1, r3, r0
    36dc:	bx	lr
    36de:	ldr.w	r2, [r0, #1160]	; 0x488
    36e2:	cbz	r2, 36f2 <SDClass::totalSize()+0x2e>
    36e4:	ldr.w	r3, [r2, #1072]	; 0x430
    36e8:	ldr.w	r0, [r2, #1084]	; 0x43c
    36ec:	umull	r0, r1, r3, r0
    36f0:	bx	lr
    36f2:	movs	r0, #0
    36f4:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
    36f6:	bx	lr

000036f8 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    36f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    36fc:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    36fe:	sub	sp, #80	; 0x50
    3700:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    3702:	beq.n	3788 <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    3704:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3706:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    370a:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    370e:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    3710:	it	ne
    3712:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3714:	bl	6fb8 <FsVolume::open(char const*, int)>
    3718:	ldr	r3, [sp, #72]	; 0x48
    371a:	cmp	r3, #0
    371c:	beq.n	379a <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
    371e:	movs	r0, #104	; 0x68
    3720:	bl	ab7c <operator new(unsigned int)>
    3724:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    3726:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    372a:	ldr	r0, [pc, #136]	; (37b4 <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    372c:	ldr	r1, [pc, #136]	; (37b8 <SDClass::open(char const*, unsigned char)+0xc0>)
    372e:	ldr	r2, [sp, #8]
    3730:	ldrb.w	r3, [sp, #12]
    3734:	str	r0, [r4, #0]
    3736:	add	r7, sp, #16
    3738:	strb	r6, [r4, #24]
    373a:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    373c:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    373e:	mov.w	r8, #1000	; 0x3e8
    3742:	mov	r1, r7
    3744:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    3748:	str	r2, [r4, #28]
    374a:	strb.w	r3, [r4, #32]
    374e:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3750:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    3752:	str	r6, [r4, #16]
    3754:	str.w	r8, [r4, #8]
    3758:	bl	6d70 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    375c:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    375e:	ldr	r1, [pc, #92]	; (37bc <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3760:	ldr	r2, [pc, #92]	; (37c0 <SDClass::open(char const*, unsigned char)+0xc8>)
    3762:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    3764:	adds	r3, #1
    3766:	strb	r6, [r5, #4]
    3768:	str.w	r8, [r5, #8]
    376c:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    376e:	str	r4, [r5, #16]
    3770:	str	r1, [r4, #20]
		if (f) f->refcount++;
    3772:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3774:	str	r2, [r5, #0]
    3776:	ldr	r3, [pc, #76]	; (37c4 <SDClass::open(char const*, unsigned char)+0xcc>)
    3778:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    377a:	mov	r0, r7
    377c:	bl	6de8 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
    3780:	mov	r0, r5
    3782:	add	sp, #80	; 0x50
    3784:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    3788:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    378c:	adds	r1, #4
    378e:	mov	r0, sp
    3790:	bl	6fb8 <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    3794:	ldr	r3, [sp, #72]	; 0x48
    3796:	cmp	r3, #0
    3798:	bne.n	371e <SDClass::open(char const*, unsigned char)+0x26>
    379a:	ldr	r3, [sp, #76]	; 0x4c
    379c:	cmp	r3, #0
    379e:	bne.n	371e <SDClass::open(char const*, unsigned char)+0x26>
    37a0:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    37a4:	ldr	r2, [pc, #24]	; (37c0 <SDClass::open(char const*, unsigned char)+0xc8>)
    37a6:	strb	r3, [r5, #4]
    37a8:	strb	r3, [r5, #12]
    37aa:	str	r3, [r5, #16]
    37ac:	str	r1, [r5, #8]
    37ae:	str	r2, [r5, #0]
    37b0:	add	r7, sp, #16
    37b2:	b.n	3776 <SDClass::open(char const*, unsigned char)+0x7e>
    37b4:	.word	0x0001339c
    37b8:	.word	0x00013318
    37bc:	.word	0x00012e28
    37c0:	.word	0x0001333c
    37c4:	.word	0x00012e04

000037c8 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    37c8:	push	{r4, r5, r6, r7}


class SDClass : public FS
{
public:
	SDClass() { }
    37ca:	ldr	r3, [pc, #68]	; (3810 <_GLOBAL__sub_I_SD+0x48>)
    37cc:	ldr	r5, [pc, #68]	; (3814 <_GLOBAL__sub_I_SD+0x4c>)
    37ce:	ldr	r4, [pc, #72]	; (3818 <_GLOBAL__sub_I_SD+0x50>)
    37d0:	str	r5, [r3, #0]
    37d2:	str.w	r4, [r3, #1184]	; 0x4a0
    37d6:	movs	r5, #41	; 0x29
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    37d8:	movs	r4, #0
    37da:	ldr	r0, [pc, #64]	; (381c <_GLOBAL__sub_I_SD+0x54>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    37dc:	ldr	r7, [pc, #64]	; (3820 <_GLOBAL__sub_I_SD+0x58>)
    37de:	strb.w	r5, [r3, #1203]	; 0x4b3
    37e2:	movs	r6, #1
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    37e4:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    37e8:	strb.w	r4, [r3, #1181]	; 0x49d
    37ec:	strb.w	r4, [r3, #1206]	; 0x4b6
    37f0:	str.w	r0, [r3, #1172]	; 0x494
    37f4:	str.w	r7, [r3, #1192]	; 0x4a8
    37f8:	strb.w	r6, [r3, #1201]	; 0x4b1
    37fc:	str.w	r4, [r3, #1156]	; 0x484
    3800:	str.w	r4, [r3, #1160]	; 0x488
    3804:	ldr	r2, [pc, #28]	; (3824 <_GLOBAL__sub_I_SD+0x5c>)
    3806:	ldr	r1, [pc, #32]	; (3828 <_GLOBAL__sub_I_SD+0x60>)
    3808:	mov	r0, r3
    380a:	pop	{r4, r5, r6, r7}
    380c:	b.w	ac58 <__aeabi_atexit>
    3810:	.word	0x20019558
    3814:	.word	0x000134bc
    3818:	.word	0x000134ec
    381c:	.word	0x00013544
    3820:	.word	0x38011001
    3824:	.word	0x20013730
    3828:	.word	0x00003495

0000382c <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    382c:	push	{r3, r4, r5, r6, r7, lr}
    382e:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    3830:	add.w	r6, r0, #16
    3834:	ldr	r0, [r0, #4]
    3836:	ldr	r1, [r4, #12]
    3838:	ldr	r3, [r0, #0]
    383a:	mov	r2, r6
    383c:	ldr	r3, [r3, #28]
    383e:	blx	r3
    3840:	cbz	r0, 3854 <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    3842:	ldrb	r3, [r4, #0]
    3844:	lsls	r2, r3, #30
    3846:	mov	r5, r0
    3848:	bmi.n	385a <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    384a:	bic.w	r3, r3, #1
    384e:	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    3850:	mov	r0, r5
    3852:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    3854:	movs	r5, #0
}
    3856:	mov	r0, r5
    3858:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    385a:	ldr	r0, [r4, #4]
    385c:	ldr	r1, [r4, #12]
    385e:	ldr	r2, [r0, #0]
    3860:	ldr	r3, [r4, #8]
    3862:	ldr	r7, [r2, #28]
    3864:	add	r1, r3
    3866:	mov	r2, r6
    3868:	blx	r7
    386a:	cmp	r0, #0
    386c:	beq.n	3854 <FsCache::sync() [clone .part.0]+0x28>
    386e:	ldrb	r3, [r4, #0]
    3870:	b.n	384a <FsCache::sync() [clone .part.0]+0x1e>
    3872:	nop

00003874 <FsCache::get(unsigned long, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    3874:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    3876:	ldr	r5, [r0, #4]
    3878:	cbz	r5, 38ba <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    387a:	ldr	r3, [r0, #12]
    387c:	cmp	r3, r1
    387e:	mov	r4, r0
    3880:	mov	r7, r2
    3882:	mov	r6, r1
    3884:	beq.n	38a4 <FsCache::get(unsigned long, unsigned char)+0x30>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3886:	ldrb	r3, [r0, #0]
    3888:	lsls	r2, r3, #31
    388a:	bmi.n	38b2 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    388c:	lsls	r3, r7, #29
    388e:	bpl.n	38be <FsCache::get(unsigned long, unsigned char)+0x4a>
    3890:	add.w	r5, r4, #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3894:	and.w	r2, r7, #3
    3898:	movs	r3, #0
    389a:	orrs	r3, r2
    389c:	strb	r3, [r4, #0]
    389e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    38a0:	str	r6, [r4, #12]
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
}
    38a2:	pop	{r3, r4, r5, r6, r7, pc}
    38a4:	ldrsb.w	r3, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    38a8:	and.w	r2, r7, #3
    38ac:	orrs	r3, r2
    38ae:	strb	r3, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    38b0:	pop	{r3, r4, r5, r6, r7, pc}
    38b2:	bl	382c <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    38b6:	cmp	r0, #0
    38b8:	bne.n	388c <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    38ba:	movs	r0, #0
    38bc:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    38be:	ldr	r0, [r4, #4]
    38c0:	ldr	r3, [r0, #0]
    38c2:	add.w	r5, r4, #16
    38c6:	ldr	r3, [r3, #12]
    38c8:	mov	r2, r5
    38ca:	mov	r1, r6
    38cc:	blx	r3
    38ce:	cmp	r0, #0
    38d0:	bne.n	3894 <FsCache::get(unsigned long, unsigned char)+0x20>
    38d2:	b.n	38ba <FsCache::get(unsigned long, unsigned char)+0x46>

000038d4 <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    38d4:	ldrb	r3, [r0, #0]
    38d6:	lsls	r3, r3, #31
    38d8:	bmi.n	38de <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    38da:	movs	r0, #1
    38dc:	bx	lr
    38de:	b.w	382c <FsCache::sync() [clone .part.0]>
    38e2:	nop

000038e4 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    38e4:	push	{r4, lr}
    38e6:	mov	r4, r0
  bool rtn = sync();
    38e8:	bl	4ad8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    38ec:	movs	r3, #0
    38ee:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    38f2:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    38f6:	pop	{r4, pc}

000038f8 <ExFatFile::getName(char*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    38f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    38fc:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    3900:	mov	r9, r0
    3902:	mov	r7, r1
    3904:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3906:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    390a:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    390c:	ldrb.w	r3, [r9, #49]	; 0x31
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3910:	add	r6, sp, #4
    3912:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    3916:	cmp	r3, #0
    3918:	beq.n	3998 <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    391a:	ldrb.w	r3, [r9, #48]	; 0x30
    391e:	cmp	r3, #1
    3920:	bls.n	39a2 <ExFatFile::getName(char*, unsigned int)+0xaa>
    3922:	mov.w	r8, #1
    3926:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    3928:	cmp.w	r8, #1
    392c:	ite	ne
    392e:	movne	r2, #32
    3930:	moveq	r2, #64	; 0x40
    3932:	mov	r1, r6
    3934:	ldr.w	r0, [r9, #32]
    3938:	bl	44c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    393c:	cmp	r0, #1
    393e:	bne.n	3998 <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    3940:	movs	r2, #0
    3942:	mov	r1, r6
    3944:	ldr.w	r0, [r9, #32]
    3948:	bl	4490 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    394c:	cbz	r0, 3998 <ExFatFile::getName(char*, unsigned int)+0xa0>
    394e:	ldrb	r3, [r0, #0]
    3950:	cmp	r3, #193	; 0xc1
    3952:	bne.n	3998 <ExFatFile::getName(char*, unsigned int)+0xa0>
    3954:	adds	r1, r7, r4
    3956:	add.w	lr, r4, #15
    395a:	b.n	395e <ExFatFile::getName(char*, unsigned int)+0x66>
    395c:	mov	r4, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    395e:	ldrh.w	r3, [r0, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
    3962:	adds	r2, r4, #1
    3964:	cbz	r3, 398c <ExFatFile::getName(char*, unsigned int)+0x94>
    3966:	cmp	r2, r5
    3968:	bcs.n	398c <ExFatFile::getName(char*, unsigned int)+0x94>
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    396a:	cmp	r3, #126	; 0x7e
    396c:	ite	ls
    396e:	uxtbls	r3, r3
    3970:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3972:	cmp	r2, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3974:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3978:	bne.n	395c <ExFatFile::getName(char*, unsigned int)+0x64>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    397a:	add.w	r8, r8, #1
    397e:	ldrb.w	r3, [r9, #48]	; 0x30
    3982:	uxtb.w	r8, r8
    3986:	cmp	r3, r8
    3988:	mov	r4, r2
    398a:	bhi.n	3928 <ExFatFile::getName(char*, unsigned int)+0x30>
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    398c:	movs	r3, #0
  return n;
    398e:	mov	r0, r4
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3990:	strb	r3, [r7, r4]
  return n;

 fail:
  *name = 0;
  return 0;
}
    3992:	add	sp, #20
    3994:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3998:	movs	r0, #0
    399a:	strb	r0, [r7, #0]
  return 0;
}
    399c:	add	sp, #20
    399e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    39a2:	movs	r4, #0
    39a4:	b.n	398c <ExFatFile::getName(char*, unsigned int)+0x94>
    39a6:	nop

000039a8 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    39a8:	ldrb.w	r2, [r0, #49]	; 0x31
    39ac:	cbz	r2, 39b2 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    39ae:	movs	r0, #0
    39b0:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    39b2:	push	{r3, r4, r5, lr}
    39b4:	mov	r4, r0
    39b6:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    39b8:	mov	r1, r2
    39ba:	movs	r2, #56	; 0x38
    39bc:	bl	c1bc <memset>
  m_attributes = FILE_ATTR_ROOT;
    39c0:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    39c2:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    39c4:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    39c8:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    39cc:	str	r5, [r4, #32]
    39ce:	pop	{r3, r4, r5, pc}

000039d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    39d0:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    39d2:	ldrb	r0, [r1, #0]
    39d4:	cmp	r0, #32
    39d6:	bne.n	39e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    39d8:	ldrb.w	r0, [r1, #1]!
    39dc:	cmp	r0, #32
    39de:	beq.n	39d8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    39e0:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    39e2:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    39e4:	cmp	r0, #0
    39e6:	beq.n	3a8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    39e8:	cmp	r0, #47	; 0x2f
    39ea:	beq.n	3a44 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    39ec:	cmp	r0, #92	; 0x5c
    39ee:	beq.n	3a32 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    39f0:	sub.w	r4, r0, #34	; 0x22
    39f4:	uxtb	r4, r4
    39f6:	cmp	r4, #29
    39f8:	bls.n	3a36 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    39fa:	ldr.w	lr, [pc, #148]	; 3a90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    39fe:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3a00:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3a02:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3a04:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3a08:	mov	r7, r6
    3a0a:	beq.n	3a32 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3a0c:	cmp	r5, #94	; 0x5e
    3a0e:	bhi.n	3a32 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3a10:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3a14:	sub.w	r5, r0, #34	; 0x22
    3a18:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3a1a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    3a1c:	cbz	r0, 3a7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    3a1e:	cmp	r0, #47	; 0x2f
    3a20:	beq.n	3a46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    3a22:	cmp	r0, #92	; 0x5c
    3a24:	lsr.w	r7, lr, r5
    3a28:	beq.n	3a32 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3a2a:	cmp	r5, #29
    3a2c:	bhi.n	3a02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    3a2e:	lsls	r5, r7, #31
    3a30:	bpl.n	3a02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3a32:	movs	r0, #0
    3a34:	pop	{r4, r5, r6, r7, pc}
    3a36:	ldr	r5, [pc, #88]	; (3a90 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    3a38:	lsr.w	r4, r5, r4
    3a3c:	lsls	r6, r4, #31
    3a3e:	bpl.n	39fa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    3a40:	movs	r0, #0
    3a42:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3a44:	movs	r4, #0
    3a46:	adds	r7, r1, r4
    3a48:	mov	r6, r7
    3a4a:	mov	r5, r4
    3a4c:	movs	r0, #47	; 0x2f
    3a4e:	b.n	3a56 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    3a50:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3a54:	adds	r5, #1
    3a56:	cmp	r0, #32
    3a58:	beq.n	3a50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    3a5a:	cmp	r0, #47	; 0x2f
    3a5c:	beq.n	3a50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    3a5e:	add	r1, r5
    3a60:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    3a62:	cbz	r4, 3a76 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    3a64:	mov	r1, r7
    c = path[len - 1];
    3a66:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    3a6a:	cmp	r3, #46	; 0x2e
    3a6c:	beq.n	3a72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    3a6e:	cmp	r3, #32
    3a70:	bne.n	3a84 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3a72:	subs	r4, #1
    3a74:	bne.n	3a66 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    3a76:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    3a78:	str	r0, [r2, #0]
  return true;
    3a7a:	movs	r0, #1
    3a7c:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3a7e:	str	r7, [r3, #0]
    3a80:	adds	r7, r1, r4
    3a82:	b.n	3a64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    3a84:	cmp	r4, #255	; 0xff
    3a86:	ble.n	3a76 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3a88:	movs	r0, #0
    3a8a:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3a8c:	str	r1, [r3, #0]
    3a8e:	b.n	3a78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    3a90:	.word	0x35000101

00003a94 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3a94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a98:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3a9c:	lsls	r6, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3a9e:	sub	sp, #12
    3aa0:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3aa2:	bpl.n	3b5a <ExFatFile::read(void*, unsigned int)+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3aa4:	lsls	r5, r3, #25
    3aa6:	mov	r6, r1
    3aa8:	mov	fp, r2
    3aaa:	bpl.w	3c1e <ExFatFile::read(void*, unsigned int)+0x18a>
    if ((m_curPosition + count) > m_validLength) {
    3aae:	ldrd	r0, r1, [r4]
    3ab2:	ldrd	r2, r3, [r4, #16]
    3ab6:	adds.w	r8, r0, fp
    3aba:	adc.w	r9, r1, #0
    3abe:	cmp	r3, r9
    3ac0:	it	eq
    3ac2:	cmpeq	r2, r8
    3ac4:	bcc.w	3c2a <ExFatFile::read(void*, unsigned int)+0x196>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3ac8:	cmp.w	fp, #0
    3acc:	beq.n	3bac <ExFatFile::read(void*, unsigned int)+0x118>
    3ace:	mov	r9, r4
    3ad0:	ldrd	r0, r1, [r9], #24
    3ad4:	mov	r5, fp
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3ad6:	ldr	r7, [r4, #32]
    3ad8:	ldr.w	r3, [r7, #1080]	; 0x438
    3adc:	ands	r3, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3ade:	ubfx	sl, r3, #0, #9
    if (clusterOffset == 0) {
    3ae2:	cmp	r3, #0
    3ae4:	bne.n	3bb8 <ExFatFile::read(void*, unsigned int)+0x124>
      if (m_curPosition == 0) {
    3ae6:	orrs.w	r2, r0, r1
    3aea:	bne.n	3bd8 <ExFatFile::read(void*, unsigned int)+0x144>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3aec:	ldrb.w	r2, [r4, #49]	; 0x31
    3af0:	lsls	r1, r2, #25
    3af2:	ite	mi
    3af4:	ldrmi.w	r2, [r7, #1076]	; 0x434
    3af8:	ldrpl	r2, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    3afa:	str	r2, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3afc:	ldr.w	r0, [r7, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3b00:	ldrb.w	lr, [r7, #1093]	; 0x445
    3b04:	lsrs	r3, r3, #9
    3b06:	subs	r2, #2
    3b08:	adds	r1, r3, r0
    3b0a:	lsl.w	r2, r2, lr
    3b0e:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    3b10:	cmp.w	sl, #0
    3b14:	bne.n	3b70 <ExFatFile::read(void*, unsigned int)+0xdc>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3b16:	cmp.w	r5, #512	; 0x200
    3b1a:	bcc.n	3b70 <ExFatFile::read(void*, unsigned int)+0xdc>
    3b1c:	ldr.w	r2, [r7, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    3b20:	cmp	r1, r2
    3b22:	beq.n	3b70 <ExFatFile::read(void*, unsigned int)+0xdc>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    3b24:	cmp.w	r5, #1024	; 0x400
    3b28:	bcc.n	3be6 <ExFatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3b2a:	mov.w	r8, #1
    3b2e:	lsl.w	r8, r8, lr
    3b32:	rsb	r3, r3, r8
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3b36:	mov.w	r8, r5, lsr #9
    3b3a:	cmp	r8, r3
    3b3c:	it	cs
    3b3e:	movcs	r8, r3
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3b40:	cmp	r1, r2
    3b42:	bhi.n	3bbc <ExFatFile::read(void*, unsigned int)+0x128>
    3b44:	add.w	r3, r8, r1
    3b48:	cmp	r2, r3
    3b4a:	bcs.n	3bbc <ExFatFile::read(void*, unsigned int)+0x128>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    3b4c:	add.w	r0, r7, #528	; 0x210
    3b50:	str	r1, [sp, #4]
    3b52:	bl	38d4 <FsCache::sync()>
    3b56:	ldr	r1, [sp, #4]
    3b58:	cbnz	r0, 3bbc <ExFatFile::read(void*, unsigned int)+0x128>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3b5a:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3b5e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3b62:	orr.w	r3, r3, #2
    3b66:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    3b6a:	add	sp, #12
    3b6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    3b70:	add.w	r0, r7, #528	; 0x210
    3b74:	movs	r2, #0
    3b76:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    3b7a:	cmp	r0, #0
    3b7c:	beq.n	3b5a <ExFatFile::read(void*, unsigned int)+0xc6>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    3b7e:	rsb	r8, sl, #512	; 0x200
    3b82:	cmp	r8, r5
    3b84:	it	cs
    3b86:	movcs	r8, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3b88:	add.w	r1, r0, sl
    3b8c:	mov	r2, r8
    3b8e:	mov	r0, r6
    3b90:	bl	89a8 <memcpy>
    3b94:	mov	r2, r8
    3b96:	movs	r3, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3b98:	ldrd	r0, r1, [r4]
    3b9c:	adds	r0, r0, r2
    3b9e:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3ba0:	subs.w	r5, r5, r8
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3ba4:	add	r6, r8
    m_curPosition += n;
    3ba6:	strd	r0, r1, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3baa:	bne.n	3ad6 <ExFatFile::read(void*, unsigned int)+0x42>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3bac:	movs	r5, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3bae:	rsb	r0, r5, fp

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    3bb2:	add	sp, #12
    3bb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bb8:	ldr	r2, [r4, #24]
    3bba:	b.n	3afc <ExFatFile::read(void*, unsigned int)+0x68>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    3bbc:	ldr.w	r0, [r7, #532]	; 0x214
    3bc0:	ldr	r3, [r0, #0]
    3bc2:	mov	r2, r6
    3bc4:	ldr	r7, [r3, #16]
    3bc6:	mov	r3, r8
    3bc8:	blx	r7
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3bca:	cmp	r0, #0
    3bcc:	beq.n	3b5a <ExFatFile::read(void*, unsigned int)+0xc6>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3bce:	mov.w	r8, r8, lsl #9
    3bd2:	mov	r2, r8
    3bd4:	movs	r3, #0
    3bd6:	b.n	3b98 <ExFatFile::read(void*, unsigned int)+0x104>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    3bd8:	ldrb.w	r2, [r4, #51]	; 0x33
    3bdc:	lsls	r2, r2, #25
    3bde:	bpl.n	3c02 <ExFatFile::read(void*, unsigned int)+0x16e>
        m_curCluster++;
    3be0:	ldr	r2, [r4, #24]
    3be2:	adds	r2, #1
    3be4:	b.n	3afa <ExFatFile::read(void*, unsigned int)+0x66>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    3be6:	ldr.w	r0, [r7, #532]	; 0x214
    3bea:	ldr	r3, [r0, #0]
    3bec:	mov	r2, r6
    3bee:	ldr	r3, [r3, #12]
    3bf0:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3bf2:	cmp	r0, #0
    3bf4:	beq.n	3b5a <ExFatFile::read(void*, unsigned int)+0xc6>
    3bf6:	mov.w	r2, #512	; 0x200
    3bfa:	movs	r3, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3bfc:	mov.w	r8, #512	; 0x200
    3c00:	b.n	3b98 <ExFatFile::read(void*, unsigned int)+0x104>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3c02:	mov	r0, r7
    3c04:	mov	r2, r9
    3c06:	ldr	r1, [r4, #24]
    3c08:	str	r3, [sp, #4]
    3c0a:	bl	451c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3c0e:	sxtb	r0, r0
        if (fg < 0) {
    3c10:	cmp	r0, #0
    3c12:	blt.n	3b5a <ExFatFile::read(void*, unsigned int)+0xc6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3c14:	beq.n	3c30 <ExFatFile::read(void*, unsigned int)+0x19c>
    3c16:	ldr	r7, [r4, #32]
    3c18:	ldr	r2, [r4, #24]
    3c1a:	ldr	r3, [sp, #4]
    3c1c:	b.n	3afc <ExFatFile::read(void*, unsigned int)+0x68>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3c1e:	ldrb.w	r3, [r0, #49]	; 0x31
    3c22:	lsls	r0, r3, #28
    3c24:	bmi.w	3aae <ExFatFile::read(void*, unsigned int)+0x1a>
    3c28:	b.n	3ac8 <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3c2a:	rsb	fp, r0, r2
    3c2e:	b.n	3ac8 <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    3c30:	ldrb.w	r3, [r4, #49]	; 0x31
    3c34:	tst.w	r3, #80	; 0x50
    3c38:	bne.n	3bae <ExFatFile::read(void*, unsigned int)+0x11a>
    3c3a:	b.n	3b5a <ExFatFile::read(void*, unsigned int)+0xc6>

00003c3c <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    3c3c:	push	{r4, r5, r6, r7, lr}
    3c3e:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3c40:	movs	r2, #1
    3c42:	add.w	r1, sp, #7
    3c46:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    3c48:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    3c4c:	ldr	r5, [r0, #24]
    3c4e:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
    3c52:	cmp	r0, #1
    3c54:	it	eq
    3c56:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3c5a:	str	r5, [r4, #24]
    3c5c:	it	ne
    3c5e:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    3c62:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3c66:	add	sp, #12
    3c68:	pop	{r4, r5, r6, r7, pc}
    3c6a:	nop

00003c6c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3c6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c70:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3c74:	ldr	r5, [r0, #24]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3c76:	sub	sp, #12
    3c78:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3c7a:	cmp.w	lr, #0
    3c7e:	beq.n	3cb8 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3c80:	ldrd	r0, r1, [r0]
    3c84:	cmp	r1, r3
    3c86:	it	eq
    3c88:	cmpeq	r0, r2
    3c8a:	mov	r6, r2
    3c8c:	mov	r7, r3
    3c8e:	beq.n	3d08 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    3c90:	orrs.w	r3, r6, r7
    3c94:	bne.n	3ca6 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    3c96:	movs	r3, #0
    3c98:	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    3c9a:	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    3c9c:	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    3ca0:	add	sp, #12
    3ca2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3ca6:	tst.w	lr, #8
    3caa:	beq.n	3cc2 <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    3cac:	ldrd	r2, r3, [r4, #16]
    3cb0:	cmp	r3, r7
    3cb2:	it	eq
    3cb4:	cmpeq	r2, r6
    3cb6:	bcs.n	3cc2 <ExFatFile::seekSet(unsigned long long)+0x56>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    3cb8:	str	r5, [r4, #24]
  return false;
    3cba:	movs	r0, #0
}
    3cbc:	add	sp, #12
    3cbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3cc2:	ldr	r3, [r4, #32]
    3cc4:	str	r3, [sp, #4]
    3cc6:	ldrb.w	ip, [r3, #1093]	; 0x445
  if (isContiguous()) {
    3cca:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3cce:	add.w	ip, ip, #9
    3cd2:	uxtb.w	ip, ip
    3cd6:	adds.w	r2, r6, #4294967295
    3cda:	adc.w	r3, r7, #4294967295
    3cde:	rsb	r8, ip, #32
    3ce2:	lsl.w	fp, r3, r8
    3ce6:	lsr.w	r2, r2, ip
    3cea:	orr.w	r2, r2, fp
    3cee:	sub.w	fp, ip, #32
    3cf2:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    3cf6:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3cfa:	orr.w	r2, r2, r3
  if (isContiguous()) {
    3cfe:	beq.n	3d0c <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    3d00:	ldr	r3, [r4, #28]
    3d02:	add	r2, r3
    3d04:	str	r2, [r4, #24]
    goto done;
    3d06:	b.n	3c9a <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3d08:	movs	r0, #1
    3d0a:	b.n	3cbc <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3d0c:	adds.w	r9, r0, #4294967295
    3d10:	adc.w	sl, r1, #4294967295
    3d14:	lsr.w	ip, r9, ip
    3d18:	lsl.w	r8, sl, r8
    3d1c:	orr.w	ip, ip, r8
    3d20:	lsr.w	fp, sl, fp
    3d24:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    3d28:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3d2a:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3d2c:	bcs.n	3d5e <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3d2e:	tst.w	lr, #64	; 0x40
    3d32:	itet	ne
    3d34:	ldrne	r3, [sp, #4]
    3d36:	ldreq	r3, [r4, #28]
    3d38:	ldrne.w	r3, [r3, #1076]	; 0x434
    3d3c:	str	r3, [r4, #24]
    3d3e:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3d40:	add.w	r9, r4, #24
    3d44:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3d46:	cmp.w	r8, #0
    3d4a:	beq.n	3c9a <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3d4c:	ldr	r1, [r4, #24]
    3d4e:	ldr	r0, [r4, #32]
    3d50:	bl	451c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3d54:	add.w	r8, r8, #4294967295
    3d58:	cmp	r0, #0
    3d5a:	bne.n	3d44 <ExFatFile::seekSet(unsigned long long)+0xd8>
    3d5c:	b.n	3cb8 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    3d5e:	orrs.w	r3, r0, r1
    3d62:	beq.n	3d2e <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3d64:	rsb	r2, ip, r2
    3d68:	b.n	3d3e <ExFatFile::seekSet(unsigned long long)+0xd2>
    3d6a:	nop

00003d6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    3d6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d70:	mov	r6, r1
    3d72:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    3d74:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    3d78:	str	r2, [sp, #0]
    3d7a:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    3d7c:	cbnz	r1, 3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3d7e:	mov	sl, r3
    3d80:	ldrb.w	r3, [r6, #49]	; 0x31
    3d84:	tst.w	r3, #80	; 0x50
    3d88:	bne.n	3d9a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    3d8a:	movs	r0, #0
    3d8c:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    3d90:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    3d94:	add	sp, #76	; 0x4c
    3d96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    3d9a:	ldr	r3, [sp, #112]	; 0x70
    3d9c:	and.w	r3, r3, #3
    3da0:	cmp	r3, #1
    3da2:	beq.n	3db2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    3da4:	cmp	r3, #2
    3da6:	beq.w	3fbc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    3daa:	cmp	r3, #0
    3dac:	bne.n	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3dae:	movs	r3, #1
    3db0:	b.n	3db4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    3db2:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3db4:	ldr	r2, [sp, #112]	; 0x70
    3db6:	and.w	r2, r2, #8
    3dba:	orrs	r3, r2
    3dbc:	str	r3, [sp, #4]
  if (name) {
    3dbe:	ldr	r3, [sp, #0]
    3dc0:	cmp	r3, #0
    3dc2:	beq.w	3fc0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    3dc6:	mov	r0, r3
    3dc8:	movs	r2, #0
    3dca:	mov	r1, sl
    3dcc:	bl	4798 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3dd0:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    3dd4:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3dd6:	cbz	r3, 3dec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3dd8:	ldrd	r2, r3, [r6]
    3ddc:	orrs	r3, r2
    3dde:	beq.n	3dec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    3de0:	movs	r2, #0
    3de2:	movs	r3, #0
    3de4:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    3de8:	movs	r1, #0
    3dea:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3dec:	ldr	r2, [pc, #736]	; (40d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    3dee:	add.w	r3, sl, #14
    3df2:	smull	r1, r2, r2, r3
    3df6:	add	r2, r3
    3df8:	asrs	r3, r3, #31
    3dfa:	rsb	r3, r3, r2, asr #3
    3dfe:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    3e00:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    3e04:	str	r3, [sp, #12]
    3e06:	adds	r3, #2
    3e08:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    3e0c:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    3e0e:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3e10:	movs	r2, #32
    3e12:	add	r1, sp, #40	; 0x28
    3e14:	mov	r0, r6
    3e16:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3e1a:	cmp	r0, #0
    3e1c:	beq.n	3e9a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    3e1e:	cmp	r0, #32
    3e20:	bne.n	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    3e22:	ldrb.w	r3, [sp, #40]	; 0x28
    3e26:	lsls	r2, r3, #24
    3e28:	bmi.n	3ef8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    3e2a:	cmp	r4, #0
    3e2c:	bne.n	3ef2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    3e2e:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    3e30:	ldr	r1, [r6, #24]
    3e32:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    3e34:	subs	r2, #32
    3e36:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    3e38:	adds	r4, #1
    3e3a:	uxtb	r4, r4
      }
      if (!buf[0]) {
    3e3c:	cbz	r3, 3e9a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    3e3e:	cmp	r3, #192	; 0xc0
    3e40:	beq.w	3f6a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    3e44:	cmp	r3, #193	; 0xc1
    3e46:	beq.n	3f0e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    3e48:	cmp	r3, #133	; 0x85
    3e4a:	bne.n	3e10 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    3e4c:	movs	r2, #56	; 0x38
    3e4e:	movs	r1, #0
    3e50:	mov	r0, r5
    3e52:	bl	c1bc <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3e56:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    3e5a:	ldrb.w	r2, [sp, #41]	; 0x29
    3e5e:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    3e62:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    3e64:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    3e68:	it	pl
    3e6a:	orrpl.w	r2, r2, #8
    3e6e:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3e72:	ldr	r3, [r6, #0]
    3e74:	ldr	r1, [r6, #32]
    3e76:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    3e78:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    3e7a:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    3e7c:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    3e7e:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    3e80:	ldrb.w	r3, [r6, #51]	; 0x33
    3e84:	ubfx	r3, r3, #6, #1
    3e88:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    3e8c:	movs	r2, #32
    3e8e:	add	r1, sp, #40	; 0x28
    3e90:	mov	r0, r6
    3e92:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3e96:	cmp	r0, #0
    3e98:	bne.n	3e1e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    3e9a:	ldr	r3, [sp, #112]	; 0x70
    3e9c:	lsls	r1, r3, #22
    3e9e:	bpl.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3ea2:	ldr	r3, [sp, #4]
    3ea4:	lsls	r2, r3, #30
    3ea6:	bpl.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    3eaa:	ldr	r3, [sp, #0]
    3eac:	cmp	r3, #0
    3eae:	beq.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3eb2:	cmp	r4, fp
    3eb4:	bcc.n	3ed0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    3eb6:	b.n	3fc6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    3eb8:	cmp	r0, #32
    3eba:	bne.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    3ebe:	cbnz	r4, 3eca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    3ec0:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    3ec2:	ldr	r1, [r6, #24]
    3ec4:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    3ec6:	subs	r2, #32
    3ec8:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3eca:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    3ecc:	cmp	fp, r4
    3ece:	bls.n	3fc6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    3ed0:	movs	r2, #32
    3ed2:	add	r1, sp, #40	; 0x28
    3ed4:	mov	r0, r6
    3ed6:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    3eda:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    3edc:	cmp	r0, #0
    3ede:	bne.n	3eb8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    3ee0:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    3ee2:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    3ee4:	bl	4b38 <ExFatFile::addDirCluster()>
    3ee8:	cmp	r0, #0
    3eea:	beq.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    3eee:	str	r7, [r6, #24]
      continue;
    3ef0:	b.n	3ecc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    3ef2:	cmp	r4, fp
    3ef4:	bcs.n	3e3c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    3ef6:	b.n	3e38 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    3ef8:	cmp.w	r9, #0
    3efc:	bne.n	3e3e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    3efe:	cmp	r4, fp
    3f00:	it	cc
    3f02:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    3f04:	cmp	r3, #133	; 0x85
    3f06:	bne.n	3e10 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    3f08:	mov.w	r9, #1
    3f0c:	b.n	3e4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    3f0e:	rsb	r8, r7, sl
    3f12:	uxtb.w	r8, r8
    3f16:	cmp.w	r8, #15
    3f1a:	it	cs
    3f1c:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    3f20:	mov	r3, r8
    3f22:	mov	r2, r7
    3f24:	ldr	r1, [sp, #0]
    3f26:	add	r0, sp, #40	; 0x28
    3f28:	bl	4740 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    3f2c:	cmp	r0, #0
    3f2e:	beq.n	3faa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    3f30:	add	r7, r8
    3f32:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    3f34:	cmp	sl, r7
    3f36:	bne.w	3e10 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    3f3a:	ldr	r3, [sp, #112]	; 0x70
    3f3c:	lsls	r3, r3, #20
    3f3e:	bmi.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    3f42:	ldr	r3, [sp, #112]	; 0x70
    3f44:	tst.w	r3, #17408	; 0x4400
    3f48:	bne.w	408c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    3f4c:	ldrb.w	r3, [r5, #51]	; 0x33
    3f50:	lsls	r7, r3, #30
    3f52:	bmi.w	408c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    3f56:	ldr	r3, [sp, #112]	; 0x70
    3f58:	lsls	r3, r3, #21
    3f5a:	bmi.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3f5e:	ldr	r3, [sp, #112]	; 0x70
    3f60:	lsls	r0, r3, #17
    3f62:	bmi.w	40d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    3f66:	movs	r0, #1
    3f68:	b.n	3d94 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3f6a:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    3f6e:	ldr	r2, [sp, #4]
    3f70:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3f74:	lsls	r1, r3, #30
    3f76:	bpl.n	3f80 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    3f78:	orr.w	r3, r2, #64	; 0x40
    3f7c:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    3f80:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    3f84:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    3f88:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    3f8c:	ldr	r3, [sp, #60]	; 0x3c
    3f8e:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    3f90:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    3f92:	strd	r0, r1, [r5, #8]
        if (!name) {
    3f96:	cmp	r3, #0
    3f98:	beq.n	3f3a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    3f9a:	ldrb.w	r3, [sp, #43]	; 0x2b
    3f9e:	cmp	r3, sl
    3fa0:	beq.n	3fae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    3fa2:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    3fa6:	mov	r7, r9
    3fa8:	b.n	3e10 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    3faa:	mov	r9, r0
    3fac:	b.n	3e10 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    3fae:	ldrh.w	r3, [sp, #44]	; 0x2c
    3fb2:	ldr	r2, [sp, #8]
    3fb4:	cmp	r3, r2
    3fb6:	bne.n	3fa2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    3fb8:	movs	r7, #0
    3fba:	b.n	3e10 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    3fbc:	movs	r3, #3
    3fbe:	b.n	3db4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    3fc0:	ldr	r3, [sp, #0]
    3fc2:	str	r3, [sp, #8]
    3fc4:	b.n	3dec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3fc6:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    3fca:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3fcc:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    3fd0:	movs	r1, #0
    3fd2:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3fd4:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    3fd8:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    3fdc:	bl	c1bc <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3fe0:	ldr	r4, [sp, #12]
    3fe2:	ldr	r3, [r6, #32]
    3fe4:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    3fe8:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    3fec:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    3ff0:	movs	r4, #8
    3ff2:	strb.w	r4, [r5, #49]	; 0x31
    3ff6:	add.w	r7, sl, #30
  m_dirPos = freePos;
    3ffa:	add.w	r4, r5, #36	; 0x24
    3ffe:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4002:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4004:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4008:	stmia.w	r4, {r0, r1, r2}
    400c:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    400e:	movs	r6, #0
    4010:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    4012:	movs	r2, #1
    4014:	mov	r1, r8
    4016:	bl	4490 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    401a:	mov	r4, r0
    401c:	cmp	r0, #0
    401e:	beq.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4022:	ldrsb.w	r3, [r0]
    4026:	cmp	r3, #0
    4028:	blt.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    402c:	movs	r2, #32
    402e:	movs	r1, #0
    4030:	bl	c1bc <memset>
    if (i == 0) {
    4034:	cmp	r6, #0
    4036:	beq.n	4106 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    4038:	cmp	r6, #1
    403a:	beq.n	40e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    403c:	rsb	r3, r6, r6, lsl #4
    4040:	cmp	r7, #15
    4042:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4046:	mov.w	r2, #193	; 0xc1
    404a:	mov	r1, r7
    404c:	it	cs
    404e:	movcs	r1, #15
    4050:	uxtb	r3, r3
    4052:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4054:	cbz	r1, 406c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4056:	adds	r4, #2
    4058:	sxth	r1, r1
    405a:	add.w	r1, r4, r1, lsl #1
    405e:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    4060:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4064:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4068:	cmp	r1, r4
    406a:	bne.n	4060 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    406c:	adds	r6, #1
    406e:	uxtb	r6, r6
    4070:	cmp	fp, r6
    4072:	bls.n	40c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4074:	movs	r2, #32
    4076:	mov	r1, r8
    4078:	ldr	r0, [r5, #32]
    407a:	bl	44c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    407e:	cmp	r0, #1
    4080:	bne.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4084:	subs	r7, #15
    4086:	uxtb	r7, r7
    4088:	ldr	r0, [r5, #32]
    408a:	b.n	4012 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    408c:	ldrb.w	r3, [r5, #49]	; 0x31
    4090:	tst.w	r3, #17
    4094:	bne.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4098:	ldr	r3, [sp, #112]	; 0x70
    409a:	lsls	r6, r3, #21
    409c:	bpl.w	3f5e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    40a0:	ldrb.w	r3, [r5, #51]	; 0x33
    40a4:	lsls	r4, r3, #30
    40a6:	bpl.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    40aa:	movs	r2, #0
    40ac:	movs	r3, #0
    40ae:	mov	r0, r5
    40b0:	bl	3c6c <ExFatFile::seekSet(unsigned long long)>
    40b4:	cmp	r0, #0
    40b6:	beq.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    40ba:	mov	r0, r5
    40bc:	bl	4e8c <ExFatFile::truncate()>
    40c0:	cmp	r0, #0
    40c2:	beq.w	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    40c6:	b.n	3f66 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    40c8:	mov	r0, r5
    40ca:	bl	4ad8 <ExFatFile::sync()>
    40ce:	b.n	3d94 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    40d0:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    40d4:	ldrd	r2, r3, [r5, #16]
    40d8:	mov	r0, r5
    40da:	bl	3c6c <ExFatFile::seekSet(unsigned long long)>
    40de:	cmp	r0, #0
    40e0:	bne.w	3f66 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    40e4:	b.n	3d8a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    40e6:	movs	r3, #192	; 0xc0
    40e8:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    40ea:	ldr	r3, [sp, #4]
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    40ec:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    40ee:	orn	r3, r3, #63	; 0x3f
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    40f2:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    40f4:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    40f8:	ldrb.w	r3, [sp, #12]
    40fc:	strb	r3, [r4, #3]
    40fe:	ldrh.w	r3, [sp, #8]
    4102:	strh	r3, [r4, #4]
    4104:	b.n	406c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    4106:	movs	r3, #133	; 0x85
    4108:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    410a:	ldr	r3, [pc, #56]	; (4144 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d8>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    410c:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    4110:	strb.w	r9, [r4, #1]

      if (FsDateTime::callback) {
    4114:	ldr	r3, [r3, #0]
    4116:	cbz	r3, 4138 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3cc>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    4118:	add.w	r2, sp, #23
    411c:	add.w	r1, sp, #26
    4120:	add	r0, sp, #24
    4122:	blx	r3
    4124:	ldrh.w	r1, [sp, #24]
    4128:	ldrh.w	r2, [sp, #26]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    412c:	ldrb.w	r3, [sp, #23]
    4130:	strh	r1, [r4, #10]
    4132:	strh	r2, [r4, #8]
    4134:	strb	r3, [r4, #20]
    4136:	b.n	406c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4138:	movw	r3, #21025	; 0x5221
    413c:	strh	r3, [r4, #10]
    413e:	strh	r3, [r4, #14]
    4140:	strh	r3, [r4, #18]
    4142:	b.n	406c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4144:	.word	0x20019a10

00004148 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4148:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    414c:	mov	r6, r0
    414e:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4150:	ldrb.w	r4, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4154:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    4156:	movs	r0, #0
    4158:	strb.w	r0, [sp, #73]	; 0x49
    415c:	strb.w	r0, [sp, #74]	; 0x4a
    4160:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4164:	cbnz	r4, 4174 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    4166:	mov	r9, r3
    4168:	ldrb.w	r3, [r1, #49]	; 0x31
    416c:	tst.w	r3, #80	; 0x50
    4170:	mov	r5, r1
    4172:	bne.n	417c <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    4174:	movs	r0, #0
}
    4176:	add	sp, #84	; 0x54
    4178:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    417c:	ldrb	r3, [r2, #0]
    417e:	cmp	r3, #47	; 0x2f
    4180:	mov	r4, r2
    4182:	beq.n	41ea <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4184:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4188:	mov	r1, r4
    418a:	add	r3, sp, #12
    418c:	add	r2, sp, #16
    418e:	mov	r0, r6
    4190:	bl	39d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4194:	cmp	r0, #0
    4196:	beq.n	4174 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    4198:	ldr	r3, [sp, #12]
    419a:	ldrb	r3, [r3, #0]
    419c:	cmp	r3, #0
    419e:	beq.n	4214 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    41a0:	ldrb.w	r3, [sp, #16]
    41a4:	ldr	r2, [sp, #20]
    41a6:	str.w	r8, [sp]
    41aa:	mov	r1, r5
    41ac:	mov	r0, r6
    41ae:	bl	3d6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    41b2:	cmp	r0, #0
    41b4:	beq.n	4174 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    41b6:	mov	r4, r6
    41b8:	add	r7, sp, #24
    41ba:	add.w	lr, r6, #48	; 0x30
    41be:	ldr	r0, [r4, #0]
    41c0:	ldr	r1, [r4, #4]
    41c2:	ldr	r2, [r4, #8]
    41c4:	ldr	r3, [r4, #12]
    41c6:	mov	r5, r7
    41c8:	stmia	r5!, {r0, r1, r2, r3}
    41ca:	adds	r4, #16
    41cc:	cmp	r4, lr
    41ce:	mov	r7, r5
    41d0:	bne.n	41be <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    41d2:	ldr	r0, [r4, #0]
    41d4:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    41d6:	mov	r0, r6
    41d8:	bl	4ad8 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    41dc:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    41de:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    41e2:	strb.w	r8, [r6, #51]	; 0x33
    41e6:	ldr	r4, [sp, #12]
    41e8:	b.n	4188 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    41ea:	adds	r4, #1
    41ec:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    41ee:	ldrb	r1, [r4, #0]
    41f0:	cmp	r1, #47	; 0x2f
    41f2:	beq.n	41ea <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    41f4:	cbz	r1, 422c <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    41f6:	movs	r2, #56	; 0x38
    41f8:	add	r0, sp, #24
    41fa:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    41fc:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    41fe:	bl	c1bc <memset>
  m_attributes = FILE_ATTR_ROOT;
    4202:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4204:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    4206:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4208:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    420a:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    420e:	strb.w	r3, [sp, #75]	; 0x4b
    4212:	b.n	4184 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    4214:	ldrb.w	r3, [sp, #16]
    4218:	ldr	r2, [sp, #20]
    421a:	str.w	r9, [sp]
    421e:	mov	r1, r5
    4220:	mov	r0, r6
    4222:	bl	3d6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
}
    4226:	add	sp, #84	; 0x54
    4228:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    422c:	movs	r2, #56	; 0x38
    422e:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4230:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4232:	bl	c1bc <memset>
  m_attributes = FILE_ATTR_ROOT;
    4236:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4238:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    423a:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    423c:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4240:	strb.w	r0, [r6, #51]	; 0x33
    4244:	b.n	4176 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    4246:	nop

00004248 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4248:	cbz	r1, 4252 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    424a:	add.w	r1, r1, #1096	; 0x448
    424e:	b.w	4148 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4252:	mov	r0, r1
    4254:	bx	lr
    4256:	nop

00004258 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4258:	ldrb.w	r3, [r0, #49]	; 0x31
    425c:	cbnz	r3, 4274 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    425e:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4260:	ldrb.w	r4, [r1, #49]	; 0x31
    4264:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    4268:	sub	sp, #12
    426a:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    426c:	bne.n	4278 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    426e:	mov	r0, r4
}
    4270:	add	sp, #12
    4272:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    4274:	movs	r0, #0
}
    4276:	bx	lr
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4278:	ldrd	r4, r5, [r5]
    427c:	movs	r5, #0
    427e:	and.w	r4, r4, #31
    4282:	orrs	r4, r5
    4284:	beq.n	428c <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    4286:	mov	r0, r3
}
    4288:	add	sp, #12
    428a:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    428c:	str	r2, [sp, #0]
    428e:	mov	r2, r3
    4290:	bl	3d6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    4294:	add	sp, #12
    4296:	pop	{r4, r5, pc}

00004298 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//------------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4298:	push	{r3, r4, r5, lr}
    429a:	mov	r4, r1
    429c:	ldr.w	r1, [r0, #1060]	; 0x424
    42a0:	mov	r5, r2
    42a2:	add.w	r1, r1, r4, lsr #7
    42a6:	add.w	r0, r0, #528	; 0x210
    42aa:	movs	r2, #0
    42ac:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    42b0:	cbz	r0, 42c4 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    42b2:	lsls	r4, r4, #2
    42b4:	ubfx	r4, r4, #0, #9
    42b8:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    42ba:	adds	r2, r3, #1
    42bc:	beq.n	42c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    42be:	str	r3, [r5, #0]
  return 1;
    42c0:	movs	r0, #1
    42c2:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    42c4:	movs	r0, #255	; 0xff
    42c6:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    42c8:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    42ca:	pop	{r3, r4, r5, pc}

000042cc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    42cc:	push	{r3, r4, r5, lr}
    42ce:	mov	r4, r1
    42d0:	ldr.w	r1, [r0, #1060]	; 0x424
    42d4:	mov	r5, r2
    42d6:	add.w	r1, r1, r4, lsr #7
    42da:	add.w	r0, r0, #528	; 0x210
    42de:	movs	r2, #1
    42e0:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    42e4:	mov	r3, r0
    42e6:	cbz	r0, 42f4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    42e8:	lsls	r4, r4, #2
    42ea:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    42ee:	movs	r0, #1
    42f0:	str	r5, [r3, r4]
    42f2:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    42f4:	pop	{r3, r4, r5, pc}
    42f6:	nop

000042f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    42f8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42fc:	mov	r8, r0
    42fe:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4300:	mov	fp, r1
    4302:	cmp	r1, #0
    4304:	beq.n	4390 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    4306:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4308:	ldr.w	r3, [r8, #1072]	; 0x430
    430c:	cmp	r7, r3
    430e:	bcs.n	4388 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4310:	and.w	r5, r7, #7
    4314:	movs	r3, #1
    4316:	lsl.w	r5, r3, r5
    431a:	uxtb	r5, r5
    431c:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4320:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4322:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4324:	ldr.w	r1, [r8, #1068]	; 0x42c
    4328:	movs	r2, #0
    432a:	add.w	r1, r1, r4, lsr #12
    432e:	mov	r0, r8
    4330:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4334:	cbz	r0, 4368 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    4336:	ldrb.w	r1, [r0, sl]
    433a:	b.n	4352 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    433c:	cmp	r2, r9
    433e:	beq.n	4396 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4340:	cmp	r7, r4
    4342:	beq.n	4366 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4344:	ldr.w	r2, [r8, #1072]	; 0x430
    4348:	cmp	r4, r2
    434a:	bcs.n	437c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    434c:	ands.w	r5, r3, #255	; 0xff
    4350:	beq.n	436c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4352:	adds	r4, #1
        if (!(mask & cache[i])) {
    4354:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4356:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    435a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    435e:	beq.n	433c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4360:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4362:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4364:	bne.n	4344 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    4366:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4368:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    436c:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4370:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4374:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4378:	bne.n	4336 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    437a:	b.n	4380 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    437c:	movs	r6, #0
    437e:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4380:	mov.w	sl, #0
    4384:	movs	r5, #1
    4386:	b.n	4324 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    4388:	movs	r7, #0
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    438a:	mov	sl, r7
    438c:	movs	r5, #1
    438e:	b.n	4320 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4390:	ldr.w	r7, [r0, #1056]	; 0x420
    4394:	b.n	4308 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    4396:	cmp.w	fp, #0
    439a:	bne.n	43a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    439c:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    43a0:	it	eq
    43a2:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    43a6:	adds	r0, r6, #2
    43a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000043ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    43ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    43b0:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    43b2:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    43b4:	ldr.w	r0, [r0, #1072]	; 0x430
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    43b8:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    43ba:	adds	r2, r1, r2
    43bc:	cmp	r2, r0
    43be:	bhi.n	4432 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    43c0:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    43c2:	ldr.w	r3, [r8, #1056]	; 0x420
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    43c6:	cmp.w	sl, #0
    43ca:	bne.n	4438 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    43cc:	cmp	r1, r3
      m_bitmapStart = start;
    43ce:	it	cc
    43d0:	strcc.w	r1, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    43d4:	and.w	r4, r1, #7
    43d8:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    43da:	ldr.w	r3, [r8, #1068]	; 0x42c
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    43de:	lsl.w	r4, r2, r4
    43e2:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    43e4:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    43e8:	ubfx	r6, r1, #3, #9
    43ec:	movs	r2, #1
    43ee:	mov	r1, r9
    43f0:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    43f2:	add	r9, r2
    43f4:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    43f8:	cbz	r0, 4432 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    43fa:	adds	r7, r0, r6
    43fc:	add.w	r0, r0, #512	; 0x200
    4400:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4404:	tst	r2, r4
    4406:	ite	ne
    4408:	movne	r6, #1
    440a:	moveq	r6, #0
    440c:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    440e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4412:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4416:	beq.n	4432 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4418:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    441a:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    441e:	beq.n	444c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4420:	ands.w	r4, r4, #255	; 0xff
    4424:	bne.n	4404 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4426:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4428:	mov	r6, r4
    442a:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    442e:	bne.n	4400 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    4430:	b.n	43ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    4432:	movs	r0, #0
    4434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4438:	cmp	r1, r3
    443a:	bhi.n	43d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    443c:	cmp	r2, r3
    443e:	bls.n	43d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4440:	cmp	r2, r0
    4442:	it	cs
    4444:	movcs	r2, #0
    4446:	str.w	r2, [r8, #1056]	; 0x420
    444a:	b.n	43d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    444c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    444e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4452:	nop

00004454 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4454:	push	{r4, r5, r6, lr}
    4456:	sub	sp, #8
    4458:	add	r6, sp, #8
    445a:	mov	r5, r0
    445c:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    4460:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4462:	ldr.w	r3, [r5, #1072]	; 0x430
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4466:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4468:	adds	r3, #1
    446a:	cmp	r1, r3
    446c:	bls.n	4474 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    446e:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    4470:	add	sp, #8
    4472:	pop	{r4, r5, r6, pc}
    4474:	mov	r2, r6
    4476:	mov	r0, r5
    4478:	bl	4298 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    447c:	sxtb	r0, r0
    if (status < 0) return 0;
    447e:	cmp	r0, #0
    4480:	blt.n	446e <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    4482:	add.w	r4, r4, #1
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    4486:	bne.n	4462 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4488:	mov	r0, r4
  } while (status);
  return n;
}
    448a:	add	sp, #8
    448c:	pop	{r4, r5, r6, pc}
    448e:	nop

00004490 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4490:	push	{r3, r4, r5, r6, r7, lr}
    4492:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4494:	ldmia.w	r6, {r3, r5}
    4498:	ldr.w	r1, [r0, #1080]	; 0x438
    449c:	ldr.w	r4, [r0, #1068]	; 0x42c
    44a0:	ldrb.w	r7, [r0, #1093]	; 0x445
    44a4:	ands	r1, r5
    44a6:	subs	r3, #2
    44a8:	add.w	r1, r4, r1, lsr #9
    44ac:	lsls	r3, r7
    44ae:	add	r1, r3
    44b0:	add.w	r0, r0, #528	; 0x210
    44b4:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    44b8:	cbz	r0, 44c2 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    44ba:	ldr	r3, [r6, #4]
    44bc:	ubfx	r3, r3, #0, #9
    44c0:	add	r0, r3
}
    44c2:	pop	{r3, r4, r5, r6, r7, pc}

000044c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    44c4:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    44c6:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    44c8:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    44ca:	adds	r3, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    44cc:	ldr.w	r1, [r0, #1080]	; 0x438
  pos->position += offset;
    44d0:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    44d2:	ldrb.w	r3, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    44d6:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    44d8:	adds	r3, #9
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    44da:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    44dc:	uxtb	r3, r3
    44de:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    44e2:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    44e4:	cbz	r4, 44f6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    44e6:	ldrb	r3, [r5, #8]
    44e8:	cbz	r3, 44fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    44ea:	ldr	r3, [r5, #0]
    44ec:	adds	r3, #1
    44ee:	str	r3, [r5, #0]
    44f0:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    44f2:	cmp	r4, #0
    44f4:	bne.n	44e6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    44f6:	movs	r0, #1
    44f8:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    44fa:	ldr.w	r3, [r6, #1072]	; 0x430
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    44fe:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4500:	adds	r3, #1
    4502:	cmp	r1, r3
    4504:	bls.n	450c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4506:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    450a:	pop	{r4, r5, r6, pc}
    450c:	mov	r2, r5
    450e:	mov	r0, r6
    4510:	bl	4298 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4514:	sxtb	r0, r0
      if (status != 1) {
    4516:	cmp	r0, #1
    4518:	beq.n	44f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    451a:	pop	{r4, r5, r6, pc}

0000451c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    451c:	ldr.w	r3, [r0, #1072]	; 0x430
    4520:	adds	r3, #1
    4522:	cmp	r3, r1
    4524:	bcs.n	452a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    4526:	movs	r0, #255	; 0xff
    4528:	bx	lr
    452a:	b.w	4298 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    452e:	nop

00004530 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4530:	cmp	r1, #1
    4532:	bls.n	4550 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    4534:	ldr.w	r3, [r0, #1072]	; 0x430
    4538:	adds	r3, #1
    453a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    453c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    453e:	bls.n	4548 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    4540:	movs	r0, #0
    4542:	ldr.w	r4, [sp], #4
    4546:	bx	lr
    4548:	ldr.w	r4, [sp], #4
    454c:	b.w	42cc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    4550:	movs	r0, #0
    4552:	bx	lr

00004554 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4554:	push	{r4, r5, r6, r7, lr}
    4556:	mov	r4, r1
    4558:	sub	sp, #12
    455a:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    455c:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    455e:	ldr.w	r3, [r5, #1072]	; 0x430
    4562:	adds	r3, #1
    4564:	cmp	r4, r3
    4566:	bls.n	456e <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    4568:	movs	r0, #0
}
    456a:	add	sp, #12
    456c:	pop	{r4, r5, r6, r7, pc}
    456e:	add	r2, sp, #4
    4570:	mov	r1, r4
    4572:	mov	r0, r5
    4574:	bl	4298 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4578:	sxtb	r7, r0
    if (status < 0) {
    457a:	cmp	r7, #0
    457c:	blt.n	4568 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    457e:	cmp	r4, #1
    4580:	bls.n	4568 <ExFatPartition::freeChain(unsigned long)+0x14>
    4582:	ldr.w	r3, [r5, #1072]	; 0x430
    4586:	adds	r3, #1
    4588:	cmp	r4, r3
    458a:	bhi.n	4568 <ExFatPartition::freeChain(unsigned long)+0x14>
    458c:	movs	r2, #0
    458e:	mov	r1, r4
    4590:	mov	r0, r5
    4592:	bl	42cc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4596:	cmp	r0, #0
    4598:	beq.n	4568 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    459a:	ldr	r3, [sp, #4]
    459c:	adds	r4, #1
    459e:	cmp	r4, r3
    45a0:	bne.n	45ba <ExFatPartition::freeChain(unsigned long)+0x66>
    45a2:	cmp	r7, #0
    45a4:	bne.n	455e <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    45a6:	mov	r3, r7
    45a8:	subs	r2, r4, r6
    45aa:	mov	r1, r6
    45ac:	mov	r0, r5
    45ae:	bl	43ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    45b2:	cmp	r0, #0
    45b4:	beq.n	4568 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    45b6:	add	sp, #12
    45b8:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    45ba:	subs	r2, r4, r6
    45bc:	mov	r1, r6
    45be:	movs	r3, #0
    45c0:	mov	r0, r5
    45c2:	bl	43ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    45c6:	cmp	r0, #0
    45c8:	beq.n	4568 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    45ca:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    45cc:	cmp	r7, #0
    45ce:	beq.n	456a <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    45d0:	mov	r6, r4
    45d2:	b.n	455e <ExFatPartition::freeChain(unsigned long)+0xa>

000045d4 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    45d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    45d8:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    45da:	ldr.w	r6, [r0, #1068]	; 0x42c

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    45de:	mov	r8, r0
    45e0:	add.w	r7, r0, #528	; 0x210
  uint32_t nc = 0;
    45e4:	mov	r5, r4
    45e6:	mov	r1, r6
    45e8:	movs	r2, #0
    45ea:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    45ec:	adds	r6, #1
    45ee:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    45f2:	cbz	r0, 4642 <ExFatPartition::freeClusterCount()+0x6e>
    45f4:	add.w	lr, r0, #4294967295
    45f8:	ldr.w	ip, [r8, #1072]	; 0x430
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    45fc:	ldrb.w	r0, [lr, #1]!
    4600:	cmp	r0, #255	; 0xff
    4602:	add.w	r9, r5, #4096	; 0x1000
    4606:	beq.n	4630 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    4608:	cbz	r0, 461e <ExFatPartition::freeClusterCount()+0x4a>
    460a:	movs	r2, #8
    460c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    460e:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4610:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    4614:	it	ne
    4616:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4618:	subs	r2, #1
    461a:	uxtb	r3, r1
    461c:	bne.n	460e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    461e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4620:	cmp	ip, r5
    4622:	bls.n	463a <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4624:	cmp	r5, r9
    4626:	beq.n	45e6 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    4628:	ldrb.w	r0, [lr, #1]!
    462c:	cmp	r0, #255	; 0xff
    462e:	bne.n	4608 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4630:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4632:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    4634:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4638:	bhi.n	4624 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    463a:	rsb	r0, r4, ip
    463e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    4642:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4646:	nop

00004648 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4648:	push	{r3, r4, r5, r6, r7, lr}
    464a:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    464c:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    464e:	mov.w	r6, #4294967295
    4652:	add.w	r7, r0, #528	; 0x210
  m_blockDev = dev;
    4656:	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    465a:	str	r1, [r0, #4]
    465c:	str.w	r1, [r0, #532]	; 0x214
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4660:	mov	r5, r2
    4662:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4664:	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4668:	strb	r3, [r4, #0]
    466a:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    466e:	str	r6, [r4, #12]
    4670:	str.w	r6, [r4, #540]	; 0x21c
    4674:	mov	r2, r3
    4676:	mov	r1, r3
    4678:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    467c:	cmp	r5, #4
    467e:	bhi.n	469a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4680:	mov	r6, r0
    4682:	cbz	r0, 469a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4684:	cbnz	r5, 469e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4686:	movs	r2, #5
    4688:	ldr	r1, [pc, #152]	; (4724 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    468a:	adds	r0, r6, #3
    468c:	bl	c99c <strncmp>
    4690:	cbnz	r0, 469a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4692:	ldrb.w	r3, [r6, #108]	; 0x6c
    4696:	cmp	r3, #9
    4698:	beq.n	46ce <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    469a:	movs	r0, #0
    469c:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    469e:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    46a0:	add.w	r3, r0, r3, lsl #4
    46a4:	ldrb.w	r2, [r3, #446]	; 0x1be
    46a8:	ands.w	r2, r2, #127	; 0x7f
    46ac:	bne.n	469a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    46ae:	ldrb.w	r3, [r3, #450]	; 0x1c2
    46b2:	cmp	r3, #0
    46b4:	beq.n	469a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    46b6:	add.w	r5, r0, r5, lsl #4
    46ba:	mov	r0, r7
    46bc:	ldr.w	r5, [r5, #438]	; 0x1b6
    46c0:	mov	r1, r5
    46c2:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    46c6:	mov	r6, r0
    46c8:	cmp	r0, #0
    46ca:	bne.n	4686 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    46cc:	b.n	469a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    46ce:	ldr	r3, [r6, #80]	; 0x50
    46d0:	add	r3, r5
    46d2:	str.w	r3, [r4, #1060]	; 0x424
    46d6:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    46d8:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    46dc:	ldr	r3, [r6, #88]	; 0x58
    46de:	add	r5, r3
    46e0:	str.w	r5, [r4, #1068]	; 0x42c
    46e4:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    46e6:	str.w	r3, [r4, #1072]	; 0x430
    46ea:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    46ec:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    46f0:	ldrb.w	r3, [r6, #109]	; 0x6d
    46f4:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    46f8:	movs	r5, #1
    46fa:	adds	r3, #9
    46fc:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4700:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4702:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    4706:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4708:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    470c:	str.w	r2, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4710:	mov	r0, r4
    4712:	mov	r2, r5
    4714:	bl	42f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4718:	movs	r3, #64	; 0x40
    471a:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    471e:	mov	r0, r5

 fail:
  return false;
}
    4720:	pop	{r3, r4, r5, r6, r7, pc}
    4722:	nop
    4724:	.word	0x000134dc

00004728 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4728:	push	{r4, lr}
    472a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    472c:	ldr.w	r1, [r0, #1076]	; 0x434
    4730:	bl	4454 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    4734:	ldrb.w	r3, [r4, #1093]	; 0x445
    4738:	adds	r3, #9
    473a:	uxtb	r3, r3
}
    473c:	lsls	r0, r3
    473e:	pop	{r4, pc}

00004740 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4740:	cbz	r3, 4794 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return true;
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4742:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4744:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4746:	cmp	r4, #126	; 0x7e
    4748:	bhi.n	4788 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    474a:	add	r3, r2
    474c:	adds	r5, r1, r3
    474e:	add	r2, r1
    4750:	adds	r0, #2
    4752:	ldrb.w	r3, [r2], #1
    4756:	uxtb	r4, r4
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4758:	sub.w	r1, r3, #97	; 0x61
    475c:	cmp	r1, #25
    475e:	sub.w	r1, r4, #97	; 0x61
    4762:	ite	ls
    4764:	movls	r6, #32
    4766:	movhi	r6, #0
    4768:	cmp	r1, #25
    476a:	ite	ls
    476c:	movls	r1, #32
    476e:	movhi	r1, #0
    4770:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4772:	subs	r4, r4, r1
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4774:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4776:	uxtb	r4, r4
    4778:	cmp	r4, r3
    477a:	bne.n	4788 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    477c:	cmp	r2, r5
    477e:	beq.n	478e <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4780:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4784:	cmp	r4, #126	; 0x7e
    4786:	bls.n	4752 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4788:	movs	r0, #0
    }
  }
  return true;
}
    478a:	pop	{r4, r5, r6}
    478c:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    478e:	movs	r0, #1
}
    4790:	pop	{r4, r5, r6}
    4792:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4794:	movs	r0, #1
}
    4796:	bx	lr

00004798 <exFatHashName(char const*, unsigned int, unsigned short)>:
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4798:	cbz	r1, 47ce <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
    hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    479a:	push	{r4}
    479c:	add	r1, r0
    479e:	lsls	r3, r2, #15
    47a0:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    47a4:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    47a8:	sub.w	r4, r2, #97	; 0x61
    47ac:	cmp	r4, #25
      c -= 'a' - 'A';
    47ae:	itt	ls
    47b0:	subls	r2, #32
    47b2:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    47b4:	uxtah	r2, r2, r3
    47b8:	uxth	r2, r2
    47ba:	lsls	r3, r2, #15
    47bc:	orr.w	r2, r3, r2, lsr #1
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    47c0:	cmp	r1, r0
    47c2:	uxth	r2, r2
    47c4:	bne.n	479e <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    47c6:	mov	r0, r2
    47c8:	ldr.w	r4, [sp], #4
    47cc:	bx	lr
    47ce:	mov	r0, r2
    47d0:	bx	lr
    47d2:	nop

000047d4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    47d4:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    47d6:	push	{r3, r4, r5, r6, r7, lr}
    47d8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    47da:	ldr	r0, [r0, #32]
    47dc:	cbz	r1, 47e0 <ExFatFile::addCluster()+0xc>
    47de:	adds	r1, #1
    47e0:	movs	r2, #1
    47e2:	bl	42f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    47e6:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    47e8:	mov	r6, r0
  if (find < 2) {
    47ea:	bls.n	484c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    47ec:	movs	r3, #1
    47ee:	mov	r1, r0
    47f0:	mov	r2, r3
    47f2:	ldr	r0, [r4, #32]
    47f4:	bl	43ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    47f8:	mov	r7, r0
    47fa:	cbz	r0, 484c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    47fc:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    47fe:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4802:	cbz	r0, 4852 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4804:	lsls	r2, r3, #25
    4806:	bpl.n	4830 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    4808:	adds	r2, r0, #1
    480a:	cmp	r6, r2
    480c:	beq.n	485a <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    480e:	bic.w	r2, r3, #64	; 0x40
    4812:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4816:	ldr	r3, [r4, #28]
    4818:	b.n	4826 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    481a:	ldr	r0, [r4, #32]
    481c:	bl	4530 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4820:	cbz	r0, 484c <ExFatFile::addCluster()+0x78>
    4822:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4824:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4826:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4828:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    482a:	mov	r1, r3
    482c:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    482e:	bcc.n	481a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4830:	mov.w	r2, #4294967295
    4834:	mov	r1, r6
    4836:	ldr	r0, [r4, #32]
    4838:	bl	4530 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    483c:	cbz	r0, 484c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    483e:	ldr	r1, [r4, #24]
    4840:	cbz	r1, 485a <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4842:	mov	r2, r6
    4844:	ldr	r0, [r4, #32]
    4846:	bl	4530 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    484a:	cbnz	r0, 485a <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    484c:	movs	r7, #0
}
    484e:	mov	r0, r7
    4850:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4852:	orr.w	r3, r3, #64	; 0x40
    4856:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    485a:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    485c:	mov	r0, r7
    485e:	pop	{r3, r4, r5, r6, r7, pc}

00004860 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4860:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    4864:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4868:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    486a:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    486e:	sub	sp, #20
    4870:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    4874:	add	r6, sp, #4
    4876:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    487a:	lsls	r2, r3, #30
    487c:	bpl.n	48b6 <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    487e:	ldr	r1, [r5, #28]
    4880:	cbnz	r1, 48be <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4882:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    4884:	movs	r2, #1
    4886:	mov	r1, r6
    4888:	ldr	r0, [r5, #32]
    488a:	bl	4490 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    488e:	adds	r4, #1
    4890:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4892:	cbz	r0, 48b6 <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4894:	ldrb	r3, [r0, #0]
    4896:	and.w	r3, r3, #127	; 0x7f
    489a:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    489c:	ldrb.w	r3, [r5, #48]	; 0x30
    48a0:	cmp	r3, r4
    48a2:	bcc.n	4908 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    48a4:	cmp	r4, #0
    48a6:	beq.n	4884 <ExFatFile::remove()+0x24>
    48a8:	movs	r2, #32
    48aa:	mov	r1, r6
    48ac:	ldr	r0, [r5, #32]
    48ae:	bl	44c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    48b2:	cmp	r0, #1
    48b4:	beq.n	4884 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    48b6:	movs	r0, #0
}
    48b8:	add	sp, #20
    48ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    48be:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    48c0:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    48c2:	bpl.n	48fe <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    48c4:	ldrd	r2, r3, [r5, #8]
    48c8:	ldrb.w	r4, [r0, #1093]	; 0x445
    48cc:	adds	r4, #9
    48ce:	uxtb	r4, r4
    48d0:	adds.w	r8, r2, #4294967295
    48d4:	adc.w	r9, r3, #4294967295
    48d8:	rsb	r7, r4, #32
    48dc:	lsl.w	r7, r9, r7
    48e0:	lsr.w	r2, r8, r4
    48e4:	sub.w	r3, r4, #32
    48e8:	lsr.w	r3, r9, r3
    48ec:	orrs	r2, r7
    48ee:	orrs	r2, r3
    48f0:	adds	r2, #1
    48f2:	movs	r3, #0
    48f4:	bl	43ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    48f8:	cmp	r0, #0
    48fa:	bne.n	4882 <ExFatFile::remove()+0x22>
    48fc:	b.n	48b6 <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    48fe:	bl	4554 <ExFatPartition::freeChain(unsigned long)>
    4902:	cmp	r0, #0
    4904:	bne.n	4882 <ExFatFile::remove()+0x22>
    4906:	b.n	48b6 <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    4908:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    490a:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    490c:	mov	r0, r4
    490e:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4912:	strb.w	r3, [r5, #51]	; 0x33
    4916:	bl	38d4 <FsCache::sync()>
    491a:	cmp	r0, #0
    491c:	beq.n	48b6 <ExFatFile::remove()+0x56>
    491e:	add.w	r0, r4, #528	; 0x210
    4922:	bl	38d4 <FsCache::sync()>
    4926:	cmp	r0, #0
    4928:	beq.n	48b6 <ExFatFile::remove()+0x56>
    492a:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    492e:	ldr	r3, [r0, #0]
    4930:	ldr	r3, [r3, #24]
    4932:	blx	r3
    4934:	b.n	48b8 <ExFatFile::remove()+0x58>
    4936:	nop

00004938 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4938:	ldrb.w	r3, [r0, #49]	; 0x31
    493c:	lsls	r1, r3, #27
    493e:	bmi.n	4944 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    4940:	movs	r0, #0
}
    4942:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4944:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4946:	movs	r2, #0
    4948:	sub	sp, #32
    494a:	movs	r3, #0
    494c:	mov	r4, r0
    494e:	bl	3c6c <ExFatFile::seekSet(unsigned long long)>
    4952:	b.n	4962 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    4954:	cmp	r0, #32
    4956:	bne.n	498c <ExFatFile::rmdir()+0x54>
    4958:	ldrb.w	r3, [sp]
    495c:	lsls	r2, r3, #24
    495e:	bmi.n	498c <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4960:	cbz	r3, 4970 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    4962:	movs	r2, #32
    4964:	mov	r1, sp
    4966:	mov	r0, r4
    4968:	bl	3a94 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    496c:	cmp	r0, #0
    496e:	bne.n	4954 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4970:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4974:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    4976:	orr.w	r3, r3, #2
    497a:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    497e:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    4982:	mov	r0, r4
    4984:	bl	4860 <ExFatFile::remove()>

 fail:
  return false;
}
    4988:	add	sp, #32
    498a:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    498c:	movs	r0, #0
}
    498e:	add	sp, #32
    4990:	pop	{r4, pc}
    4992:	nop

00004994 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4994:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4998:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    499c:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    499e:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    49a2:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    49a4:	add.w	r8, sp, #12
    49a8:	stmia.w	r8, {r0, r1, r2}
    49ac:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    49ae:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    49b0:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    49b2:	movs	r2, #0
    49b4:	mov	r1, r8
    49b6:	ldr	r0, [r6, #32]
    49b8:	bl	4490 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    49bc:	uxtb.w	r9, r7
    if (!cache) {
    49c0:	mov	r5, r0
    49c2:	cbz	r0, 49d2 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    49c4:	ldrb	r3, [r0, #0]
    49c6:	cmp	r3, #192	; 0xc0
    49c8:	beq.n	4a6e <ExFatFile::syncDir()+0xda>
    49ca:	cmp	r3, #193	; 0xc1
    49cc:	beq.n	4a6a <ExFatFile::syncDir()+0xd6>
    49ce:	cmp	r3, #133	; 0x85
    49d0:	beq.n	49e6 <ExFatFile::syncDir()+0x52>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    49d2:	ldrb.w	r3, [r6, #50]	; 0x32
    49d6:	orr.w	r3, r3, #1
    49da:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    49de:	movs	r0, #0
}
    49e0:	add	sp, #28
    49e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    49e6:	ldr	r3, [pc, #236]	; (4ad4 <ExFatFile::syncDir()+0x140>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    49e8:	ldrb.w	r2, [r6, #49]	; 0x31
    49ec:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    49ee:	ldrb.w	sl, [r0, #1]
    49f2:	and.w	r2, r2, #55	; 0x37
    49f6:	strh	r2, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    49f8:	cbz	r3, 4a1c <ExFatFile::syncDir()+0x88>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    49fa:	add.w	r2, sp, #7
    49fe:	add.w	r1, sp, #10
    4a02:	add	r0, sp, #8
    4a04:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    4a06:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    4a0a:	ldrh.w	r3, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    4a0e:	ldrb.w	r1, [sp, #7]
    4a12:	strb	r1, [r5, #21]
    4a14:	strh	r2, [r5, #12]
    4a16:	strh	r2, [r5, #16]
    4a18:	strh	r3, [r5, #14]
    4a1a:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    4a1c:	ldr	r2, [r6, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4a1e:	ldrb.w	r3, [r2, #528]	; 0x210
    4a22:	orr.w	r3, r3, #1
    4a26:	strb.w	r3, [r2, #528]	; 0x210
    4a2a:	ldrb	r0, [r5, #0]
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4a2c:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4a2e:	ldrb	r2, [r5, r1]
    4a30:	lsls	r3, r4, #15
    4a32:	orr.w	r4, r3, r4, lsr #1
    4a36:	uxtah	r4, r2, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4a3a:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4a3c:	uxth	r4, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4a3e:	add.w	r1, r1, #1
    4a42:	beq.n	4a60 <ExFatFile::syncDir()+0xcc>
    4a44:	cmp	r1, #31
    4a46:	bls.n	4a2e <ExFatFile::syncDir()+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    4a48:	cmp	sl, r9
    4a4a:	beq.n	4a9a <ExFatFile::syncDir()+0x106>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4a4c:	movs	r2, #32
    4a4e:	mov	r1, r8
    4a50:	ldr	r0, [r6, #32]
    4a52:	bl	44c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4a56:	cmp	r0, #1
    4a58:	add.w	r7, r7, #1
    4a5c:	beq.n	49b2 <ExFatFile::syncDir()+0x1e>
    4a5e:	b.n	49d2 <ExFatFile::syncDir()+0x3e>
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4a60:	cmp	r0, #133	; 0x85
    4a62:	ite	eq
    4a64:	moveq	r1, #4
    4a66:	movne	r1, #2
    4a68:	b.n	4a2e <ExFatFile::syncDir()+0x9a>
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4a6a:	mov	r0, r3
    4a6c:	b.n	4a2c <ExFatFile::syncDir()+0x98>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4a6e:	ldrb.w	r3, [r6, #51]	; 0x33
    4a72:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4a76:	ldrb	r3, [r0, #1]
    4a78:	ite	ne
    4a7a:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4a7e:	biceq.w	r3, r3, #2
    4a82:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    4a84:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4a88:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4a8c:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    4a90:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4a92:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4a94:	strd	r2, r3, [r0, #24]
    4a98:	b.n	4a1c <ExFatFile::syncDir()+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4a9a:	mov	r1, fp
    4a9c:	movs	r2, #1
    4a9e:	ldr	r0, [r6, #32]
    4aa0:	bl	4490 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4aa4:	cmp	r0, #0
    4aa6:	beq.n	49d2 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4aa8:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4aaa:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4aac:	mov	r0, r5
    4aae:	bl	38d4 <FsCache::sync()>
    4ab2:	cmp	r0, #0
    4ab4:	beq.n	49d2 <ExFatFile::syncDir()+0x3e>
    4ab6:	add.w	r0, r5, #528	; 0x210
    4aba:	bl	38d4 <FsCache::sync()>
    4abe:	cmp	r0, #0
    4ac0:	beq.n	49d2 <ExFatFile::syncDir()+0x3e>
    4ac2:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4ac6:	ldr	r3, [r0, #0]
    4ac8:	ldr	r3, [r3, #24]
    4aca:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4acc:	cmp	r0, #0
    4ace:	beq.n	49d2 <ExFatFile::syncDir()+0x3e>
    4ad0:	b.n	49e0 <ExFatFile::syncDir()+0x4c>
    4ad2:	nop
    4ad4:	.word	0x20019a10

00004ad8 <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4ad8:	ldrb.w	r2, [r0, #49]	; 0x31
    4adc:	cbz	r2, 4b04 <ExFatFile::sync()+0x2c>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    4ade:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4ae0:	ldrb.w	r2, [r0, #51]	; 0x33
    4ae4:	lsls	r1, r2, #24
    4ae6:	bmi.n	4b08 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    4ae8:	ldr	r5, [r0, #32]
    4aea:	mov	r4, r0
    4aec:	mov	r0, r5
    4aee:	bl	38d4 <FsCache::sync()>
    4af2:	cbnz	r0, 4b18 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4af4:	ldrb.w	r3, [r4, #50]	; 0x32
    4af8:	orr.w	r3, r3, #1
    4afc:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    4b00:	movs	r0, #0
}
    4b02:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4b04:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4b06:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4b08:	and.w	r2, r2, #127	; 0x7f
    4b0c:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4b10:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4b14:	b.w	4994 <ExFatFile::syncDir()>
    4b18:	add.w	r0, r5, #528	; 0x210
    4b1c:	bl	38d4 <FsCache::sync()>
    4b20:	cmp	r0, #0
    4b22:	beq.n	4af4 <ExFatFile::sync()+0x1c>
    4b24:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4b28:	ldr	r3, [r0, #0]
    4b2a:	ldr	r3, [r3, #24]
    4b2c:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4b2e:	cmp	r0, #0
    4b30:	beq.n	4af4 <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4b32:	movs	r0, #1
    4b34:	pop	{r3, r4, r5, pc}
    4b36:	nop

00004b38 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4b38:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4b3c:	ldrb.w	r3, [r0, #49]	; 0x31
    4b40:	lsls	r1, r3, #25

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4b42:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4b44:	bmi.n	4c08 <ExFatFile::addDirCluster()+0xd0>
    4b46:	ldr	r0, [r0, #8]
    4b48:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4b4a:	ldr.w	r3, [r3, #1084]	; 0x43c
    4b4e:	add	r0, r3
    4b50:	cmp.w	r0, #67108864	; 0x4000000
    4b54:	bcc.n	4b5c <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    4b56:	movs	r0, #0
    4b58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    4b5c:	mov	r0, r4
    4b5e:	bl	47d4 <ExFatFile::addCluster()>
    4b62:	cmp	r0, #0
    4b64:	beq.n	4b56 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    4b66:	ldr	r6, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4b68:	ldrb.w	r3, [r6, #528]	; 0x210
    4b6c:	lsls	r2, r3, #31
    4b6e:	bmi.n	4c10 <ExFatFile::addDirCluster()+0xd8>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4b70:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4b74:	movs	r5, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    4b76:	add.w	r8, r6, #544	; 0x220
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4b7a:	str.w	r3, [r6, #540]	; 0x21c
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4b7e:	strb.w	r5, [r6, #528]	; 0x210
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    4b82:	mov	r1, r5
    4b84:	mov.w	r2, #512	; 0x200
    4b88:	mov	r0, r8
    4b8a:	bl	c1bc <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    4b8e:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4b90:	ldr	r3, [r4, #24]
    4b92:	ldrb.w	r0, [r2, #1093]	; 0x445
    4b96:	ldr.w	r1, [r2, #1068]	; 0x42c
    4b9a:	subs	r3, #2
    4b9c:	lsls	r3, r0
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4b9e:	movs	r6, #1
    4ba0:	adds	r7, r3, r1
    4ba2:	lsls.w	r3, r6, r0
    4ba6:	beq.n	4bca <ExFatFile::addDirCluster()+0x92>
    4ba8:	ldr.w	r0, [r2, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    4bac:	ldr	r3, [r0, #0]
    4bae:	adds	r1, r7, r5
    4bb0:	ldr	r3, [r3, #28]
    4bb2:	mov	r2, r8
    4bb4:	blx	r3
    4bb6:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    4bb8:	cmp	r0, #0
    4bba:	beq.n	4b56 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4bbc:	ldr	r2, [r4, #32]
    4bbe:	ldrb.w	r3, [r2, #1093]	; 0x445
    4bc2:	lsl.w	r3, r6, r3
    4bc6:	cmp	r3, r5
    4bc8:	bhi.n	4ba8 <ExFatFile::addDirCluster()+0x70>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    4bca:	ldrb.w	r3, [r4, #49]	; 0x31
    4bce:	lsls	r3, r3, #25
    4bd0:	bmi.n	4bfe <ExFatFile::addDirCluster()+0xc6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4bd2:	ldrb.w	r3, [r4, #51]	; 0x33
    4bd6:	orn	r3, r3, #127	; 0x7f
    4bda:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4bde:	ldr.w	r6, [r2, #1084]	; 0x43c
    4be2:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4be6:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4bea:	adds	r2, r2, r6
    4bec:	mov.w	r7, #0
    4bf0:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    4bf2:	adds	r0, r0, r6
    4bf4:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4bf6:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    4bfa:	strd	r0, r1, [r4, #16]
  }
  return sync();
    4bfe:	mov	r0, r4

 fail:
  return false;
}
    4c00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    4c04:	b.w	4ad8 <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4c08:	ldr	r0, [r0, #32]
    4c0a:	bl	4728 <ExFatPartition::rootLength()>
    4c0e:	b.n	4b48 <ExFatFile::addDirCluster()+0x10>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    4c10:	add.w	r0, r6, #528	; 0x210
    4c14:	bl	38d4 <FsCache::sync()>
    4c18:	cmp	r0, #0
    4c1a:	bne.n	4b70 <ExFatFile::addDirCluster()+0x38>
    4c1c:	b.n	4b56 <ExFatFile::addDirCluster()+0x1e>
    4c1e:	nop

00004c20 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    4c20:	ldrb.w	r3, [r1, #49]	; 0x31
    4c24:	tst.w	r3, #80	; 0x50
    4c28:	bne.n	4c2e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4c2a:	movs	r0, #0
    4c2c:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4c2e:	push	{r4, r5, lr}
    4c30:	sub	sp, #12
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4c32:	movw	r5, #2562	; 0xa02
    4c36:	ldrb	r3, [r2, #0]
    4c38:	ldr	r2, [r2, #4]
    4c3a:	str	r5, [sp, #0]
    4c3c:	mov	r4, r0
    4c3e:	bl	3d6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4c42:	cbnz	r0, 4c4a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4c44:	movs	r0, #0
    4c46:	add	sp, #12
    4c48:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    4c4a:	movs	r3, #16
    4c4c:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    4c50:	mov	r0, r4
    4c52:	bl	4b38 <ExFatFile::addDirCluster()>
    4c56:	cmp	r0, #0
    4c58:	beq.n	4c44 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    4c5a:	ldr	r3, [r4, #24]
    4c5c:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4c5e:	movs	r2, #0
    4c60:	movs	r3, #0
    4c62:	mov	r0, r4
    4c64:	bl	3c6c <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4c68:	movs	r3, #193	; 0xc1
  return sync();
    4c6a:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4c6c:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    4c70:	add	sp, #12
    4c72:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    4c76:	b.w	4ad8 <ExFatFile::sync()>
    4c7a:	nop

00004c7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    4c7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c80:	mov	r6, r0
    4c82:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    4c84:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    4c88:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    4c8a:	movs	r0, #0
    4c8c:	strb.w	r0, [sp, #73]	; 0x49
    4c90:	strb.w	r0, [sp, #74]	; 0x4a
    4c94:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    4c98:	cbnz	r5, 4ca8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4c9a:	mov	r9, r3
    4c9c:	ldrb.w	r3, [r1, #49]	; 0x31
    4ca0:	tst.w	r3, #80	; 0x50
    4ca4:	mov	r4, r1
    4ca6:	bne.n	4cb0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    4ca8:	movs	r0, #0
}
    4caa:	add	sp, #84	; 0x54
    4cac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4cb0:	ldrb	r3, [r2, #0]
    4cb2:	cmp	r3, #47	; 0x2f
    4cb4:	mov	r1, r2
    4cb6:	beq.n	4d26 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4cb8:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4cbc:	add	r3, sp, #12
    4cbe:	add	r2, sp, #16
    4cc0:	mov	r0, r6
    4cc2:	bl	39d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4cc6:	cmp	r0, #0
    4cc8:	beq.n	4ca8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    4cca:	ldr	r3, [sp, #12]
    4ccc:	ldrb	r3, [r3, #0]
    4cce:	cmp	r3, #0
    4cd0:	beq.n	4d42 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    4cd2:	ldrb.w	r3, [sp, #16]
    4cd6:	ldr	r2, [sp, #20]
    4cd8:	str.w	r8, [sp]
    4cdc:	mov	r1, r4
    4cde:	mov	r0, r6
    4ce0:	bl	3d6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    4ce4:	cbnz	r0, 4cfa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    4ce6:	cmp.w	r9, #0
    4cea:	beq.n	4ca8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4cec:	mov	r1, r4
    4cee:	add	r2, sp, #16
    4cf0:	mov	r0, r6
    4cf2:	bl	4c20 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4cf6:	cmp	r0, #0
    4cf8:	beq.n	4ca8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    4cfa:	mov	r4, r6
    4cfc:	add	r7, sp, #24
    4cfe:	add.w	lr, r6, #48	; 0x30
    4d02:	ldr	r0, [r4, #0]
    4d04:	ldr	r1, [r4, #4]
    4d06:	ldr	r2, [r4, #8]
    4d08:	ldr	r3, [r4, #12]
    4d0a:	mov	r5, r7
    4d0c:	stmia	r5!, {r0, r1, r2, r3}
    4d0e:	adds	r4, #16
    4d10:	cmp	r4, lr
    4d12:	mov	r7, r5
    4d14:	bne.n	4d02 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    4d16:	ldr	r0, [r4, #0]
    4d18:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    4d1a:	mov	r0, r6
    4d1c:	bl	38e4 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    4d20:	add	r4, sp, #24
    4d22:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    4d24:	b.n	4cbc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4d26:	adds	r1, #1
    4d28:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4d2a:	ldrb	r3, [r1, #0]
    4d2c:	cmp	r3, #47	; 0x2f
    4d2e:	beq.n	4d26 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    4d30:	ldr	r1, [r4, #32]
    4d32:	add	r0, sp, #24
    4d34:	bl	39a8 <ExFatFile::openRoot(ExFatVolume*)>
    4d38:	cmp	r0, #0
    4d3a:	beq.n	4ca8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    4d3c:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    4d3e:	add	r4, sp, #24
    4d40:	b.n	4cb8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    4d42:	add	r2, sp, #16
    4d44:	mov	r1, r4
    4d46:	mov	r0, r6
    4d48:	bl	4c20 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

 fail:
  return false;
}
    4d4c:	add	sp, #84	; 0x54
    4d4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4d52:	nop

00004d54 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4d54:	orrs.w	r1, r2, r3
    4d58:	beq.n	4d62 <ExFatFile::preAllocate(unsigned long long)+0xe>
    4d5a:	ldrb.w	r1, [r0, #51]	; 0x33
    4d5e:	lsls	r1, r1, #30
    4d60:	bmi.n	4d66 <ExFatFile::preAllocate(unsigned long long)+0x12>
  }
  return true;

 fail:
  return false;
}
    4d62:	movs	r0, #0
    4d64:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    4d66:	ldr	r1, [r0, #28]
    4d68:	cmp	r1, #0
    4d6a:	bne.n	4d62 <ExFatFile::preAllocate(unsigned long long)+0xe>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    4d6c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d70:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    4d72:	ldr	r0, [r0, #32]
    4d74:	mov	r5, r3
    4d76:	ldrb.w	r3, [r0, #1093]	; 0x445
    4d7a:	adds	r3, #9
    4d7c:	adds.w	r8, r2, #4294967295
    4d80:	uxtb	r3, r3
    4d82:	adc.w	r9, r5, #4294967295
    4d86:	rsb	r7, r3, #32
    4d8a:	lsl.w	r7, r9, r7
    4d8e:	mov	r4, r2
    4d90:	lsr.w	r2, r8, r3
    4d94:	subs	r3, #32
    4d96:	orrs	r2, r7
    4d98:	lsr.w	r3, r9, r3
    4d9c:	orrs	r2, r3
    4d9e:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    4da0:	mov	r2, r7
    4da2:	bl	42f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4da6:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    4da8:	mov	r8, r0
  if (find < 2) {
    4daa:	bls.n	4dba <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    4dac:	mov	r1, r0
    4dae:	mov	r2, r7
    4db0:	movs	r3, #1
    4db2:	ldr	r0, [r6, #32]
    4db4:	bl	43ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4db8:	cbnz	r0, 4dc0 <ExFatFile::preAllocate(unsigned long long)+0x6c>
  }
  return true;

 fail:
  return false;
}
    4dba:	movs	r0, #0
    4dbc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4dc0:	ldrb.w	r3, [r6, #51]	; 0x33
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    4dc4:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    4dc8:	orn	r3, r3, #63	; 0x3f
    4dcc:	strb.w	r3, [r6, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    4dd0:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    4dd4:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    4dd6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    4dda:	b.w	4ad8 <ExFatFile::sync()>
    4dde:	nop

00004de0 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    4de0:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4de2:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    4de6:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    4de8:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4dea:	tst.w	r4, #24
    4dee:	strb.w	r3, [sp, #49]	; 0x31
    4df2:	strb.w	r3, [sp, #50]	; 0x32
    4df6:	strb.w	r3, [sp, #51]	; 0x33
    4dfa:	strb.w	r3, [sp, #105]	; 0x69
    4dfe:	strb.w	r3, [sp, #106]	; 0x6a
    4e02:	strb.w	r3, [sp, #107]	; 0x6b
    4e06:	beq.n	4e10 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    4e08:	ldr	r3, [r1, #32]
    4e0a:	ldr	r4, [r0, #32]
    4e0c:	cmp	r4, r3
    4e0e:	beq.n	4e16 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    4e10:	movs	r0, #0
}
    4e12:	add	sp, #116	; 0x74
    4e14:	pop	{r4, r5, r6, r7, pc}
    4e16:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4e18:	movw	r3, #2561	; 0xa01
    4e1c:	mov	r0, sp
    4e1e:	bl	4148 <ExFatFile::open(ExFatFile*, char const*, int)>
    4e22:	cmp	r0, #0
    4e24:	beq.n	4e10 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    4e26:	add	r7, sp, #56	; 0x38
    4e28:	mov	r5, r4
    4e2a:	add.w	lr, r4, #48	; 0x30
    4e2e:	ldr	r0, [r5, #0]
    4e30:	ldr	r1, [r5, #4]
    4e32:	ldr	r2, [r5, #8]
    4e34:	ldr	r3, [r5, #12]
    4e36:	mov	r6, r7
    4e38:	stmia	r6!, {r0, r1, r2, r3}
    4e3a:	adds	r5, #16
    4e3c:	cmp	r5, lr
    4e3e:	mov	r7, r6
    4e40:	bne.n	4e2e <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    4e42:	ldr	r0, [r5, #0]
    4e44:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    4e46:	add	r3, sp, #36	; 0x24
    4e48:	ldmia.w	r3, {r0, r1, r2}
    4e4c:	add.w	r3, r4, #36	; 0x24
    4e50:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4e54:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    4e58:	ldrb.w	r2, [sp, #48]	; 0x30
    4e5c:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4e60:	orn	r3, r3, #127	; 0x7f
    4e64:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4e68:	mov	r0, r4
    4e6a:	bl	4ad8 <ExFatFile::sync()>
    4e6e:	cmp	r0, #0
    4e70:	beq.n	4e10 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4e72:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4e74:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4e76:	movs	r3, #8
  return oldFile.remove();
    4e78:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4e7a:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4e7c:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4e80:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4e84:	bl	4860 <ExFatFile::remove()>
    4e88:	b.n	4e12 <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    4e8a:	nop

00004e8c <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4e8c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4e90:	lsls	r2, r3, #30
    4e92:	bpl.n	4ec6 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4e94:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4e96:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    4e98:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4e9a:	cbz	r5, 4ec0 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    4e9c:	and.w	r3, r3, #64	; 0x40
    4ea0:	mov	r4, r0
    4ea2:	and.w	r0, r3, #255	; 0xff
    4ea6:	cbnz	r3, 4eca <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    4ea8:	ldr	r1, [r4, #24]
    4eaa:	cmp	r1, #0
    4eac:	bne.n	4f32 <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    4eae:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4eb0:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    4eb2:	mov	r1, r5
    4eb4:	ldr	r0, [r4, #32]
    4eb6:	bl	4554 <ExFatPartition::freeChain(unsigned long)>
    4eba:	cbnz	r0, 4f0a <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4ebc:	movs	r0, #0
    4ebe:	b.n	4ec2 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    4ec0:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4ec2:	add	sp, #12
    4ec4:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    4ec6:	movs	r0, #0
}
    4ec8:	bx	lr
    4eca:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    4ecc:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4ece:	ldrb.w	r3, [r0, #1093]	; 0x445
    4ed2:	ldrd	r6, r7, [r4, #8]
    4ed6:	adds	r3, #9
    4ed8:	uxtb	r3, r3
    4eda:	adds.w	r6, r6, #4294967295
    4ede:	rsb	lr, r3, #32
    4ee2:	adc.w	r7, r7, #4294967295
    4ee6:	lsr.w	r2, r6, r3
    4eea:	lsl.w	lr, r7, lr
    4eee:	subs	r3, #32
    4ef0:	orr.w	r2, r2, lr
    4ef4:	lsr.w	r3, r7, r3
    4ef8:	orrs	r2, r3
    4efa:	adds	r2, #1
    if (m_curCluster) {
    4efc:	cbz	r1, 4f2c <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4efe:	subs	r5, #1
    4f00:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4f02:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    4f04:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    4f06:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4f08:	cbnz	r2, 4f4e <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4f0a:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4f0e:	ldrb.w	r3, [r4, #51]	; 0x33
    4f12:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    4f16:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4f1a:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4f1e:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    4f22:	mov	r0, r4
    4f24:	bl	4ad8 <ExFatFile::sync()>

 fail:
  return false;
}
    4f28:	add	sp, #12
    4f2a:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    4f2c:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4f2e:	str	r1, [r4, #28]
    4f30:	b.n	4f08 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    4f32:	add	r2, sp, #8
    4f34:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4f38:	ldr	r0, [r4, #32]
    4f3a:	bl	451c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4f3e:	sxtb	r0, r0
      if (fg < 0) {
    4f40:	cmp	r0, #0
    4f42:	blt.n	4ebc <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    4f44:	bne.n	4f5c <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    4f46:	ldr	r5, [sp, #4]
    4f48:	cmp	r5, #0
    4f4a:	beq.n	4f0a <ExFatFile::truncate()+0x7e>
    4f4c:	b.n	4eb2 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4f4e:	movs	r3, #0
    4f50:	ldr	r1, [sp, #4]
    4f52:	bl	43ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4f56:	cmp	r0, #0
    4f58:	bne.n	4f0a <ExFatFile::truncate()+0x7e>
    4f5a:	b.n	4ebc <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4f5c:	mov.w	r2, #4294967295
    4f60:	ldr	r1, [r4, #24]
    4f62:	ldr	r0, [r4, #32]
    4f64:	bl	4530 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4f68:	cmp	r0, #0
    4f6a:	bne.n	4f46 <ExFatFile::truncate()+0xba>
    4f6c:	b.n	4ebc <ExFatFile::truncate()+0x30>
    4f6e:	nop

00004f70 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4f70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f74:	ldrb.w	r3, [r0, #51]	; 0x33
    4f78:	sub	sp, #12

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4f7a:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4f7c:	mov	r4, r0
    4f7e:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4f80:	bmi.n	4f98 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4f82:	ldrb.w	r3, [r4, #50]	; 0x32
    4f86:	orr.w	r3, r3, #1
    4f8a:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    4f8e:	mov.w	r0, #4294967295
}
    4f92:	add	sp, #12
    4f94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4f98:	lsls	r2, r3, #28
    4f9a:	mov	r9, r1
    4f9c:	bmi.w	51a2 <ExFatFile::write(void const*, unsigned int)+0x232>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4fa0:	ldr	r3, [sp, #0]
    4fa2:	cmp	r3, #0
    4fa4:	beq.w	51ca <ExFatFile::write(void const*, unsigned int)+0x25a>
    4fa8:	mov	r1, r4
    4faa:	ldrd	r2, r3, [r1], #24
    4fae:	ldr.w	r8, [sp]
    4fb2:	str	r1, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4fb4:	mov.w	fp, #1
    4fb8:	mov	sl, r9
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4fba:	ldr	r0, [r4, #32]
    4fbc:	ldr.w	r5, [r0, #1080]	; 0x438
    4fc0:	ands	r5, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4fc2:	ubfx	r9, r5, #0, #9
    if (clusterOffset == 0) {
    4fc6:	cbnz	r5, 501a <ExFatFile::write(void const*, unsigned int)+0xaa>
      // start of new cluster
      if (m_curCluster != 0) {
    4fc8:	ldr	r1, [r4, #24]
    4fca:	cmp	r1, #0
    4fcc:	beq.w	512c <ExFatFile::write(void const*, unsigned int)+0x1bc>
        int fg;

        if (isContiguous()) {
    4fd0:	ldrb.w	r3, [r4, #51]	; 0x33
    4fd4:	lsls	r3, r3, #25
    4fd6:	bpl.w	5174 <ExFatFile::write(void const*, unsigned int)+0x204>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4fda:	ldrd	r6, r7, [r4, #8]
    4fde:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    4fe2:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    4fe4:	adds	r2, #9
    4fe6:	uxtb	r2, r2
    4fe8:	adds.w	r6, r6, #4294967295
    4fec:	adc.w	r7, r7, #4294967295
    4ff0:	rsb	lr, r2, #32
    4ff4:	lsrs	r6, r2
    4ff6:	lsl.w	lr, r7, lr
    4ffa:	subs	r2, #32
    4ffc:	orr.w	r6, r6, lr
    5000:	lsr.w	r2, r7, r2
    5004:	orrs	r6, r2
    5006:	add	r3, r6
    5008:	cmp	r1, r3
    500a:	bcc.w	515a <ExFatFile::write(void const*, unsigned int)+0x1ea>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    500e:	mov	r0, r4
    5010:	bl	47d4 <ExFatFile::addCluster()>
    5014:	cmp	r0, #0
    5016:	beq.n	4f82 <ExFatFile::write(void const*, unsigned int)+0x12>
    5018:	ldr	r0, [r4, #32]
    501a:	ldr	r6, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    501c:	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5020:	ldrb.w	lr, [r0, #1093]	; 0x445
    5024:	lsrs	r5, r5, #9
    5026:	subs	r6, #2
    5028:	adds	r1, r5, r7
    502a:	lsl.w	r6, r6, lr
    502e:	add	r1, r6

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5030:	cmp.w	r9, #0
    5034:	bne.n	511e <ExFatFile::write(void const*, unsigned int)+0x1ae>
    5036:	cmp.w	r8, #512	; 0x200
    503a:	bcs.n	50d8 <ExFatFile::write(void const*, unsigned int)+0x168>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    503c:	ldrd	r2, r3, [r4, #16]
    5040:	ldrd	r6, r7, [r4]
    5044:	cmp.w	r8, #512	; 0x200
    5048:	mov	r5, r8
    504a:	it	cs
    504c:	movcs.w	r5, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5050:	cmp	r7, r3
    5052:	it	eq
    5054:	cmpeq	r6, r2
    5056:	ite	cc
    5058:	movcc	r2, #1
    505a:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    505c:	add.w	r0, r0, #528	; 0x210
    5060:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5064:	cmp	r0, #0
    5066:	beq.n	4f82 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5068:	add	r0, r9
    506a:	mov	r2, r5
    506c:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    506e:	add	r9, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5070:	bl	89a8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5074:	cmp.w	r9, #512	; 0x200
    5078:	beq.w	5190 <ExFatFile::write(void const*, unsigned int)+0x220>
    507c:	mov	r0, r5
    507e:	movs	r1, #0
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5080:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5084:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5088:	adds	r2, r2, r0
    508a:	adcs	r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    508c:	cmp	r7, r3
    508e:	it	eq
    5090:	cmpeq	r6, r2
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    5092:	add	sl, r5
    toWrite -= n;
    5094:	rsb	r8, r5, r8
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5098:	strd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    509c:	bcs.n	50ae <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    509e:	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    50a2:	strd	r2, r3, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    50a6:	orn	r1, r1, #127	; 0x7f
    50aa:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    50ae:	cmp.w	r8, #0
    50b2:	bne.n	4fba <ExFatFile::write(void const*, unsigned int)+0x4a>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    50b4:	ldrd	r0, r1, [r4, #8]
    50b8:	cmp	r1, r3
    50ba:	it	eq
    50bc:	cmpeq	r0, r2
    50be:	bcc.n	51b2 <ExFatFile::write(void const*, unsigned int)+0x242>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    50c0:	ldr	r3, [pc, #268]	; (51d0 <ExFatFile::write(void const*, unsigned int)+0x260>)
    50c2:	ldr	r3, [r3, #0]
    50c4:	cmp	r3, #0
    50c6:	beq.n	51c6 <ExFatFile::write(void const*, unsigned int)+0x256>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    50c8:	ldrb.w	r3, [r4, #51]	; 0x33
    50cc:	ldr	r0, [sp, #0]
    50ce:	orn	r3, r3, #127	; 0x7f
    50d2:	strb.w	r3, [r4, #51]	; 0x33
    50d6:	b.n	4f92 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    50d8:	cmp.w	r8, #1024	; 0x400
    50dc:	bcc.n	5134 <ExFatFile::write(void const*, unsigned int)+0x1c4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    50de:	lsl.w	r3, fp, lr
    50e2:	subs	r5, r3, r5
    50e4:	ldr.w	r2, [r0, #540]	; 0x21c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    50e8:	mov.w	r3, r8, lsr #9
    50ec:	cmp	r3, r5
    50ee:	it	cs
    50f0:	movcs	r3, r5
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    50f2:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    50f4:	mov.w	r5, r3, lsl #9
    50f8:	bhi.n	510c <ExFatFile::write(void const*, unsigned int)+0x19c>
    50fa:	adds	r6, r1, r3
    50fc:	cmp	r2, r6
    50fe:	bcs.n	510c <ExFatFile::write(void const*, unsigned int)+0x19c>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5100:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5104:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5108:	str.w	r2, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    510c:	ldr.w	r0, [r0, #532]	; 0x214
    5110:	ldr	r6, [r0, #0]
    5112:	mov	r2, sl
    5114:	ldr	r6, [r6, #32]
    5116:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    5118:	cmp	r0, #0
    511a:	bne.n	507c <ExFatFile::write(void const*, unsigned int)+0x10c>
    511c:	b.n	4f82 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    511e:	rsb	r5, r9, #512	; 0x200
    5122:	cmp	r5, r8
    5124:	it	cs
    5126:	movcs	r5, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5128:	movs	r2, #1
    512a:	b.n	505c <ExFatFile::write(void const*, unsigned int)+0xec>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    512c:	ldr	r6, [r4, #28]
    512e:	cbz	r6, 5160 <ExFatFile::write(void const*, unsigned int)+0x1f0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5130:	str	r6, [r4, #24]
    5132:	b.n	501c <ExFatFile::write(void const*, unsigned int)+0xac>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    5134:	ldr.w	r3, [r0, #540]	; 0x21c
    5138:	cmp	r1, r3
    513a:	beq.n	5182 <ExFatFile::write(void const*, unsigned int)+0x212>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    513c:	ldr.w	r0, [r0, #532]	; 0x214
    5140:	ldr	r3, [r0, #0]
    5142:	mov	r2, sl
    5144:	ldr	r3, [r3, #28]
    5146:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5148:	cmp	r0, #0
    514a:	beq.w	4f82 <ExFatFile::write(void const*, unsigned int)+0x12>
    514e:	mov.w	r0, #512	; 0x200
    5152:	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    5154:	mov.w	r5, #512	; 0x200
    5158:	b.n	5080 <ExFatFile::write(void const*, unsigned int)+0x110>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    515a:	adds	r6, r1, #1
    515c:	str	r6, [r4, #24]
    515e:	b.n	501c <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5160:	mov	r0, r4
    5162:	bl	47d4 <ExFatFile::addCluster()>
    5166:	cmp	r0, #0
    5168:	beq.w	4f82 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    516c:	ldr	r6, [r4, #24]
    516e:	str	r6, [r4, #28]
    5170:	ldr	r0, [r4, #32]
    5172:	b.n	501c <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5174:	ldr	r2, [sp, #4]
    5176:	bl	451c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    517a:	cmp	r0, #0
    517c:	bne.w	5018 <ExFatFile::write(void const*, unsigned int)+0xa8>
    5180:	b.n	500e <ExFatFile::write(void const*, unsigned int)+0x9e>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5182:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5186:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    518a:	str.w	r3, [r0, #540]	; 0x21c
    518e:	b.n	513c <ExFatFile::write(void const*, unsigned int)+0x1cc>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    5190:	ldr	r0, [r4, #32]
    5192:	add.w	r0, r0, #528	; 0x210
    5196:	bl	38d4 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    519a:	cmp	r0, #0
    519c:	bne.w	507c <ExFatFile::write(void const*, unsigned int)+0x10c>
    51a0:	b.n	4f82 <ExFatFile::write(void const*, unsigned int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    51a2:	ldrd	r2, r3, [r0, #16]
    51a6:	bl	3c6c <ExFatFile::seekSet(unsigned long long)>
    51aa:	cmp	r0, #0
    51ac:	beq.w	4f82 <ExFatFile::write(void const*, unsigned int)+0x12>
    51b0:	b.n	4fa0 <ExFatFile::write(void const*, unsigned int)+0x30>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    51b2:	ldrb.w	r1, [r4, #51]	; 0x33
    51b6:	ldr	r0, [sp, #0]
    51b8:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    51bc:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    51c0:	strb.w	r1, [r4, #51]	; 0x33
    51c4:	b.n	4f92 <ExFatFile::write(void const*, unsigned int)+0x22>
    51c6:	ldr	r0, [sp, #0]
    51c8:	b.n	4f92 <ExFatFile::write(void const*, unsigned int)+0x22>
    51ca:	ldrd	r2, r3, [r4]
    51ce:	b.n	50b4 <ExFatFile::write(void const*, unsigned int)+0x144>
    51d0:	.word	0x20019a10

000051d4 <FatFile::openRoot(FatVolume*) [clone .part.38]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    51d4:	push	{r3, r4, r5, lr}
    51d6:	mov	r4, r0
    51d8:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    51da:	movs	r2, #36	; 0x24
    51dc:	movs	r1, #0
    51de:	bl	c1bc <memset>

  m_vol = vol;
    51e2:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    51e4:	ldrb	r3, [r5, #7]
    51e6:	cmp	r3, #16
    51e8:	beq.n	51fc <FatFile::openRoot(FatVolume*) [clone .part.38]+0x28>
    51ea:	cmp	r3, #32
    51ec:	bne.n	51f8 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    51ee:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51f0:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    51f2:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51f4:	strb	r0, [r4, #2]
    51f6:	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    51f8:	movs	r0, #0
}
    51fa:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    51fc:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    51fe:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5200:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5202:	strb	r0, [r4, #2]
    5204:	pop	{r3, r4, r5, pc}
    5206:	nop

00005208 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5208:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    520a:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    520c:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5210:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5212:	mov	r1, r5
    5214:	ldr	r0, [r0, #8]
    5216:	bl	60a0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    521a:	cbz	r0, 5232 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    521c:	cbz	r5, 5234 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    521e:	ldr	r3, [r4, #16]
    5220:	adds	r5, #1
    5222:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5224:	ldrb	r3, [r4, #2]
    5226:	it	ne
    5228:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    522c:	orn	r3, r3, #127	; 0x7f
    5230:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5232:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5234:	ldrb	r3, [r4, #2]
    5236:	orr.w	r3, r3, #64	; 0x40
    523a:	b.n	522c <FatFile::addCluster()+0x24>

0000523c <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    523c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5240:	ldrb	r3, [r0, #0]
    5242:	and.w	r3, r3, #32
    5246:	cbnz	r3, 5254 <FatFile::addDirCluster()+0x18>
    5248:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    524c:	ldr	r1, [r0, #20]
    524e:	ldr	r3, [pc, #128]	; (52d0 <FatFile::addDirCluster()+0x94>)
    5250:	cmp	r1, r3
    5252:	bls.n	525c <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    5254:	movs	r6, #0
}
    5256:	mov	r0, r6
    5258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    525c:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    525e:	bl	5208 <FatFile::addCluster()>
    5262:	mov	r6, r0
    5264:	cmp	r0, #0
    5266:	beq.n	5254 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5268:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    526a:	ldr	r3, [r5, #16]
    526c:	ldrb	r7, [r0, #6]
    526e:	ldr	r2, [r0, #20]
    5270:	subs	r3, #2
    5272:	lsls	r3, r7
    5274:	adds	r7, r3, r2
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5276:	adds	r0, #36	; 0x24
    5278:	mov	r1, r7
    527a:	movs	r2, #5
    527c:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5280:	mov	r8, r0
    5282:	cmp	r0, #0
    5284:	beq.n	5254 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5286:	mov.w	r2, #512	; 0x200
    528a:	mov	r1, r4
    528c:	bl	c1bc <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5290:	ldr	r3, [r5, #8]
    5292:	ldrb	r2, [r3, #4]
    5294:	cmp	r2, #1
    5296:	bls.n	52ba <FatFile::addDirCluster()+0x7e>
    5298:	movs	r4, #1
    529a:	b.n	52a4 <FatFile::addDirCluster()+0x68>
    529c:	ldr	r3, [r5, #8]
    529e:	ldrb	r2, [r3, #4]
    52a0:	cmp	r2, r4
    52a2:	bls.n	52ba <FatFile::addDirCluster()+0x7e>
    52a4:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    52a6:	ldr	r3, [r0, #0]
    52a8:	adds	r1, r4, r7
    52aa:	ldr	r3, [r3, #28]
    52ac:	mov	r2, r8
    52ae:	blx	r3
    52b0:	adds	r4, #1
    52b2:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    52b4:	cmp	r0, #0
    52b6:	bne.n	529c <FatFile::addDirCluster()+0x60>
    52b8:	b.n	5254 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    52ba:	ldrb	r3, [r3, #6]
    52bc:	ldr	r1, [r5, #20]
    52be:	mov.w	r2, #512	; 0x200
    52c2:	lsl.w	r3, r2, r3
    52c6:	uxtah	r3, r1, r3
    52ca:	str	r3, [r5, #20]
    52cc:	b.n	5256 <FatFile::addDirCluster()+0x1a>
    52ce:	nop
    52d0:	.word	0x001ffdff

000052d4 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    52d4:	push	{r4, lr}
    52d6:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    52d8:	ldr	r0, [r0, #8]
    52da:	mov	r2, r1
    52dc:	adds	r0, #36	; 0x24
    52de:	ldr	r1, [r4, #24]
    52e0:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    52e4:	cbz	r0, 52f0 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    52e6:	ldrh	r3, [r4, #4]
    52e8:	and.w	r3, r3, #15
    52ec:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    52f0:	pop	{r4, pc}
    52f2:	nop

000052f4 <FatFile::sync() [clone .part.42]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    52f4:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    52f6:	ldrsb.w	r3, [r0, #2]
    52fa:	cmp	r3, #0
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    52fc:	sub	sp, #8
    52fe:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5300:	blt.n	5336 <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5302:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5304:	add.w	r0, r5, #36	; 0x24
    5308:	bl	38d4 <FsCache::sync()>
    530c:	cbnz	r0, 531c <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    530e:	ldrb	r3, [r4, #1]
    5310:	orr.w	r3, r3, #1
    5314:	strb	r3, [r4, #1]
  return false;
    5316:	movs	r0, #0
}
    5318:	add	sp, #8
    531a:	pop	{r4, r5, r6, pc}
    531c:	add.w	r0, r5, #564	; 0x234
    5320:	bl	38d4 <FsCache::sync()>
    5324:	cmp	r0, #0
    5326:	beq.n	530e <FatFile::sync() [clone .part.42]+0x1a>
    5328:	ldr	r0, [r5, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    532a:	ldr	r3, [r0, #0]
    532c:	ldr	r3, [r3, #24]
    532e:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5330:	cmp	r0, #0
    5332:	beq.n	530e <FatFile::sync() [clone .part.42]+0x1a>
    5334:	b.n	5318 <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5336:	movs	r1, #1
    5338:	bl	52d4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    533c:	mov	r5, r0
    533e:	cmp	r0, #0
    5340:	beq.n	530e <FatFile::sync() [clone .part.42]+0x1a>
    5342:	ldrb	r3, [r0, #0]
    5344:	cmp	r3, #229	; 0xe5
    5346:	beq.n	530e <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5348:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    534a:	ldr	r2, [pc, #56]	; (5384 <FatFile::sync() [clone .part.42]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    534c:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    534e:	itt	mi
    5350:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5352:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5354:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5356:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5358:	strh	r3, [r0, #26]
    535a:	lsrs	r3, r3, #16
    535c:	strh	r3, [r0, #20]
    535e:	cbz	r6, 537a <FatFile::sync() [clone .part.42]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5360:	add.w	r2, sp, #3
    5364:	add.w	r1, sp, #6
    5368:	add	r0, sp, #4
    536a:	blx	r6
      setLe16(dir->modifyDate, date);
    536c:	ldrh.w	r3, [sp, #4]
    5370:	ldrh.w	r2, [sp, #6]
    5374:	strh	r3, [r5, #24]
    5376:	strh	r3, [r5, #18]
    5378:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    537a:	ldrb	r3, [r4, #2]
    537c:	and.w	r3, r3, #127	; 0x7f
    5380:	strb	r3, [r4, #2]
    5382:	b.n	5302 <FatFile::sync() [clone .part.42]+0xe>
    5384:	.word	0x20019a10

00005388 <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5388:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    538a:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    538c:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    538e:	cbnz	r3, 539a <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5390:	movs	r3, #0
    5392:	strb	r3, [r4, #0]
  m_flags = 0;
    5394:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5396:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    5398:	pop	{r4, pc}
    539a:	bl	52f4 <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    539e:	movs	r3, #0
    53a0:	strb	r3, [r4, #0]
  m_flags = 0;
    53a2:	strb	r3, [r4, #2]
  return rtn;
}
    53a4:	pop	{r4, pc}
    53a6:	nop

000053a8 <FatFile::mkdir(FatFile*, fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    53a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    53ac:	ldrb	r4, [r1, #0]
    53ae:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    53b2:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    53b4:	bne.n	53be <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
}
    53b6:	movs	r0, #0
    53b8:	add	sp, #36	; 0x24
    53ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    53be:	movw	r3, #2562	; 0xa02
    53c2:	mov	r5, r0
    53c4:	mov	r4, r1
    53c6:	bl	6968 <FatFile::open(FatFile*, fname_t*, int)>
    53ca:	cmp	r0, #0
    53cc:	beq.n	53b6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    53ce:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    53d0:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    53d2:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    53d4:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    53d6:	mov	r0, r5
    53d8:	bl	523c <FatFile::addDirCluster()>
    53dc:	cmp	r0, #0
    53de:	beq.n	53b6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    53e0:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    53e2:	ldr	r2, [r5, #16]
    53e4:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    53e6:	cmp	r3, #0
    53e8:	bne.n	54d6 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    53ea:	movs	r1, #1
    53ec:	mov	r0, r5
    53ee:	bl	52d4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    53f2:	mov	r6, r0
    53f4:	cmp	r0, #0
    53f6:	beq.n	53b6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    53f8:	movs	r3, #16
    53fa:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    53fc:	ldr	r2, [r0, #8]
    53fe:	ldr	r1, [r6, #4]
    5400:	ldr	r3, [r6, #12]
    5402:	ldr	r0, [r0, #0]
    5404:	ldrh.w	r8, [r6, #20]
    5408:	ldrh.w	r9, [r6, #26]
    540c:	mov	r7, sp
    540e:	stmia	r7!, {r0, r1, r2, r3}
    5410:	ldr	r1, [r6, #20]
    5412:	ldr	r2, [r6, #24]
    5414:	ldr	r3, [r6, #28]
    5416:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    5418:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    541a:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    541c:	movs	r3, #46	; 0x2e
    541e:	strb.w	r3, [r6, #-32]!
    5422:	add.w	r1, sp, #10
    5426:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    5428:	movs	r2, #32
    542a:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    542e:	cmp	r3, r1
    5430:	bne.n	542a <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    5432:	ldr	r0, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5434:	ldr	r3, [r5, #32]
    5436:	ldrb	r2, [r0, #6]
    5438:	ldr	r1, [r0, #20]
    543a:	subs	r3, #2
    543c:	lsls	r3, r2
    543e:	add	r1, r3
    5440:	adds	r0, #36	; 0x24
    5442:	movs	r2, #1
    5444:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    5448:	mov	lr, r0
    544a:	cmp	r0, #0
    544c:	beq.n	53b6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    544e:	mov	r7, r6
    5450:	strh.w	r8, [sp, #20]
    5454:	strh.w	r9, [sp, #26]
    5458:	ldmia	r7!, {r0, r1, r2, r3}
    545a:	str.w	r0, [lr]
    545e:	str.w	r1, [lr, #4]
    5462:	str.w	r2, [lr, #8]
    5466:	str.w	r3, [lr, #12]
    546a:	ldmia	r7!, {r0, r1, r2, r3}
    546c:	str.w	r0, [lr, #16]
    5470:	str.w	r1, [lr, #20]
    5474:	str.w	r2, [lr, #24]
    5478:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    547c:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    547e:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    5482:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5484:	lsrs	r3, r3, #16
    5486:	mov	r4, r6
    5488:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    548c:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    5490:	ldmia	r4!, {r0, r1, r2, r3}
    5492:	add.w	r6, lr, #32
    5496:	str.w	r0, [lr, #32]
    549a:	str	r1, [r6, #4]
    549c:	str	r2, [r6, #8]
    549e:	str	r3, [r6, #12]
    54a0:	ldmia	r4!, {r0, r1, r2, r3}
    54a2:	str	r0, [r6, #16]
    54a4:	str	r1, [r6, #20]
    54a6:	str	r2, [r6, #24]
    54a8:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    54aa:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    54ac:	add.w	r0, r4, #36	; 0x24
    54b0:	bl	38d4 <FsCache::sync()>
    54b4:	cmp	r0, #0
    54b6:	beq.w	53b6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    54ba:	add.w	r0, r4, #564	; 0x234
    54be:	bl	38d4 <FsCache::sync()>
    54c2:	cmp	r0, #0
    54c4:	beq.w	53b6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    54c8:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    54ca:	ldr	r3, [r0, #0]
    54cc:	ldr	r3, [r3, #24]

 fail:
  return false;
}
    54ce:	add	sp, #36	; 0x24
    54d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    54d4:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    54d6:	ldr	r3, [r5, #20]
    54d8:	cbz	r3, 54e8 <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    54da:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    54dc:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    54de:	bic.w	r3, r3, #32
    54e2:	strb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    54e4:	str	r2, [r5, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    54e6:	str	r2, [r5, #20]
    54e8:	mov	r0, r5
    54ea:	bl	52f4 <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    54ee:	cmp	r0, #0
    54f0:	beq.w	53b6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    54f4:	b.n	53ea <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    54f6:	nop

000054f8 <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    54f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54fc:	mov	r6, r0
    54fe:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5500:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5502:	str	r2, [sp, #4]
    5504:	movs	r0, #0
    5506:	strb.w	r0, [sp, #36]	; 0x24
    550a:	strb.w	r0, [sp, #37]	; 0x25
    550e:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5512:	cbnz	r5, 5520 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    5514:	mov	r8, r3
    5516:	ldrb	r3, [r1, #0]
    5518:	tst.w	r3, #112	; 0x70
    551c:	mov	r4, r1
    551e:	bne.n	5528 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    5520:	movs	r0, #0
}
    5522:	add	sp, #72	; 0x48
    5524:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5528:	ldrb	r3, [r2, #0]
    552a:	cmp	r3, #47	; 0x2f
    552c:	mov	r0, r2
    552e:	beq.n	5586 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5530:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5532:	add	r2, sp, #4
    5534:	add	r1, sp, #12
    5536:	bl	653c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    553a:	add	r2, sp, #12
    553c:	mov	r1, r4
    553e:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5540:	cmp	r0, #0
    5542:	beq.n	5520 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5544:	ldr	r5, [sp, #4]
    5546:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5548:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    554a:	cmp	r5, #0
    554c:	beq.n	55aa <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    554e:	bl	6968 <FatFile::open(FatFile*, fname_t*, int)>
    5552:	cbnz	r0, 5568 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    5554:	cmp.w	r8, #0
    5558:	beq.n	5520 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    555a:	mov	r1, r4
    555c:	add	r2, sp, #12
    555e:	mov	r0, r6
    5560:	bl	53a8 <FatFile::mkdir(FatFile*, fname_t*)>
    5564:	cmp	r0, #0
    5566:	beq.n	5520 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5568:	mov	r5, r6
    556a:	ldmia	r5!, {r0, r1, r2, r3}
    556c:	add	r4, sp, #36	; 0x24
    556e:	stmia	r4!, {r0, r1, r2, r3}
    5570:	ldmia	r5!, {r0, r1, r2, r3}
    5572:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5574:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5576:	ldr	r2, [r5, #0]
    5578:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    557a:	cbnz	r3, 55a2 <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    557c:	strb	r7, [r6, #0]
  m_flags = 0;
    557e:	strb	r7, [r6, #2]
    5580:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    5582:	add	r4, sp, #36	; 0x24
    5584:	b.n	5532 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5586:	adds	r0, #1
    5588:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    558a:	ldrb	r3, [r0, #0]
    558c:	cmp	r3, #47	; 0x2f
    558e:	beq.n	5586 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    5590:	ldr	r1, [r4, #8]
    5592:	add	r0, sp, #36	; 0x24
    5594:	bl	51d4 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    5598:	cmp	r0, #0
    559a:	beq.n	5520 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    559c:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    559e:	add	r4, sp, #36	; 0x24
    55a0:	b.n	5530 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    55a2:	mov	r0, r6
    55a4:	bl	52f4 <FatFile::sync() [clone .part.42]>
    55a8:	b.n	557c <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    55aa:	add	r2, sp, #12
    55ac:	mov	r1, r4
    55ae:	mov	r0, r6
    55b0:	bl	53a8 <FatFile::mkdir(FatFile*, fname_t*)>

 fail:
  return false;
}
    55b4:	add	sp, #72	; 0x48
    55b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55ba:	nop

000055bc <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    55bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55c0:	mov	r6, r0
    55c2:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    55c4:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    55c6:	str	r2, [sp, #4]
    55c8:	movs	r0, #0
    55ca:	strb.w	r0, [sp, #36]	; 0x24
    55ce:	strb.w	r0, [sp, #37]	; 0x25
    55d2:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    55d6:	cbnz	r5, 55e4 <FatFile::open(FatFile*, char const*, int)+0x28>
    55d8:	mov	r8, r3
    55da:	ldrb	r3, [r1, #0]
    55dc:	tst.w	r3, #112	; 0x70
    55e0:	mov	r4, r1
    55e2:	bne.n	55ec <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    55e4:	movs	r0, #0
}
    55e6:	add	sp, #72	; 0x48
    55e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    55ec:	ldrb	r3, [r2, #0]
    55ee:	cmp	r3, #47	; 0x2f
    55f0:	mov	r0, r2
    55f2:	beq.n	5640 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    55f4:	movs	r7, #0
    55f6:	b.n	5600 <FatFile::open(FatFile*, char const*, int)+0x44>
    55f8:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    55fa:	strb	r7, [r6, #0]
  m_flags = 0;
    55fc:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    55fe:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5600:	add	r2, sp, #4
    5602:	add	r1, sp, #12
    5604:	bl	653c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5608:	add	r2, sp, #12
    560a:	mov	r1, r4
    560c:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    560e:	cmp	r0, #0
    5610:	beq.n	55e4 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5612:	ldr	r5, [sp, #4]
    5614:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5616:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5618:	cbz	r5, 565e <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    561a:	bl	6968 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    561e:	mov	r5, r6
    5620:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5622:	cmp	r0, #0
    5624:	beq.n	55e4 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5626:	ldmia	r5!, {r0, r1, r2, r3}
    5628:	stmia	r4!, {r0, r1, r2, r3}
    562a:	ldmia	r5!, {r0, r1, r2, r3}
    562c:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    562e:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5630:	ldr	r2, [r5, #0]
    5632:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5634:	cmp	r3, #0
    5636:	beq.n	55f8 <FatFile::open(FatFile*, char const*, int)+0x3c>
    5638:	mov	r0, r6
    563a:	bl	52f4 <FatFile::sync() [clone .part.42]>
    563e:	b.n	55f8 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5640:	adds	r0, #1
    5642:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5644:	ldrb	r3, [r0, #0]
    5646:	cmp	r3, #47	; 0x2f
    5648:	beq.n	5640 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    564a:	cbz	r3, 5670 <FatFile::open(FatFile*, char const*, int)+0xb4>
    564c:	ldr	r1, [r4, #8]
    564e:	add	r0, sp, #36	; 0x24
    5650:	bl	51d4 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5654:	cmp	r0, #0
    5656:	beq.n	55e4 <FatFile::open(FatFile*, char const*, int)+0x28>
    5658:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    565a:	add	r4, sp, #36	; 0x24
    565c:	b.n	55f4 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    565e:	mov	r3, r8
    5660:	add	r2, sp, #12
    5662:	mov	r1, r4
    5664:	mov	r0, r6
    5666:	bl	6968 <FatFile::open(FatFile*, fname_t*, int)>

 fail:
  return false;
}
    566a:	add	sp, #72	; 0x48
    566c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5670:	ldr	r1, [r4, #8]
    5672:	mov	r0, r6
    5674:	bl	51d4 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    5678:	b.n	55e6 <FatFile::open(FatFile*, char const*, int)+0x2a>
    567a:	nop

0000567c <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    567c:	cbz	r1, 5686 <FatFile::open(FatVolume*, char const*, int)+0xa>
    567e:	addw	r1, r1, #1092	; 0x444
    5682:	b.w	55bc <FatFile::open(FatFile*, char const*, int)>
}
    5686:	mov	r0, r1
    5688:	bx	lr
    568a:	nop

0000568c <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    568c:	ldrb	r3, [r0, #0]
    568e:	cbz	r3, 5694 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    5690:	movs	r0, #0
    5692:	bx	lr
    5694:	b.w	51d4 <FatFile::openRoot(FatVolume*) [clone .part.38]>

00005698 <FatFile::preAllocate(unsigned long)>:
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5698:	cbnz	r1, 569e <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    569a:	movs	r0, #0
}
    569c:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    569e:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    56a0:	ldrb	r3, [r0, #2]
    56a2:	lsls	r3, r3, #30
    56a4:	bmi.n	56aa <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    56a6:	movs	r0, #0
    56a8:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    56aa:	ldr	r3, [r0, #32]
    56ac:	cmp	r3, #0
    56ae:	bne.n	56a6 <FatFile::preAllocate(unsigned long)+0xe>
    56b0:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    56b2:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    56b4:	ldrb	r3, [r0, #6]
    56b6:	adds	r3, #9
    56b8:	mov	r5, r1
    56ba:	uxtb	r3, r3
    56bc:	subs	r1, #1
    56be:	lsrs	r1, r3
    56c0:	adds	r1, #1
    56c2:	add.w	r2, r4, #32
    56c6:	bl	6124 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    56ca:	cmp	r0, #0
    56cc:	beq.n	56a6 <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    56ce:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    56d0:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    56d2:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    56d4:	orn	r3, r3, #31
    56d8:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    56da:	cbnz	r2, 56de <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    56dc:	pop	{r3, r4, r5, pc}
    56de:	mov	r0, r4
    56e0:	ldmia.w	sp!, {r3, r4, r5, lr}
    56e4:	b.w	52f4 <FatFile::sync() [clone .part.42]>

000056e8 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    56e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    56ec:	ldrb	r3, [r0, #2]
    56ee:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    56f0:	sub	sp, #12
    56f2:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    56f4:	bpl.w	581c <FatFile::read(void*, unsigned int)+0x134>
    56f8:	mov	r7, r1
    56fa:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    56fc:	lsls	r6, r1, #28
    56fe:	mov	r9, r2
    5700:	bmi.w	582e <FatFile::read(void*, unsigned int)+0x146>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5704:	lsls	r4, r1, #26
    5706:	bpl.n	571a <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5708:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    570a:	ldr	r3, [r0, #20]
    570c:	ldrh	r2, [r2, #8]
    570e:	rsb	r3, r3, r2, lsl #5
    5712:	uxth	r3, r3
    5714:	cmp	r9, r3
    5716:	it	cs
    5718:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    571a:	cmp.w	r9, #0
    571e:	beq.w	587a <FatFile::read(void*, unsigned int)+0x192>
    5722:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5724:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5726:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5728:	mov	r6, r9
    572a:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    572e:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5732:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5736:	bpl.n	57ba <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5738:	ldr	r1, [r2, #32]
    573a:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    573e:	cmp.w	fp, #0
    5742:	bne.n	57f0 <FatFile::read(void*, unsigned int)+0x108>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5744:	cmp.w	r6, #512	; 0x200
    5748:	bcc.n	57f0 <FatFile::read(void*, unsigned int)+0x108>
    574a:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    574c:	cmp	r1, r3
    574e:	beq.n	57f0 <FatFile::read(void*, unsigned int)+0x108>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5750:	cmp.w	r6, #1024	; 0x400
    5754:	bcc.n	5840 <FatFile::read(void*, unsigned int)+0x158>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5756:	ldrb	r0, [r5, #0]
    5758:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    575a:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    575e:	bmi.n	576c <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5760:	ldrb	r0, [r2, #4]
    5762:	rsb	r0, r8, r0
    5766:	cmp	fp, r0
    5768:	it	cs
    576a:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    576c:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    576e:	mov.w	r4, fp, lsl #9
    5772:	bhi.n	5790 <FatFile::read(void*, unsigned int)+0xa8>
    5774:	add.w	r0, r1, fp
    5778:	cmp	r3, r0
    577a:	bcs.n	5790 <FatFile::read(void*, unsigned int)+0xa8>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    577c:	add.w	r0, r2, #36	; 0x24
    5780:	str	r1, [sp, #4]
    5782:	str	r2, [sp, #0]
    5784:	bl	38d4 <FsCache::sync()>
    5788:	ldr	r2, [sp, #0]
    578a:	ldr	r1, [sp, #4]
    578c:	cmp	r0, #0
    578e:	beq.n	581c <FatFile::read(void*, unsigned int)+0x134>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    5790:	ldr	r0, [r2, #40]	; 0x28
    5792:	ldr	r2, [r0, #0]
    5794:	mov	r3, fp
    5796:	ldr.w	fp, [r2, #16]
    579a:	mov	r2, r7
    579c:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    579e:	cmp	r0, #0
    57a0:	beq.n	581c <FatFile::read(void*, unsigned int)+0x134>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    57a2:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    57a4:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    57a6:	add	r3, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    57a8:	add	r7, r4
    m_curPosition += n;
    57aa:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    57ac:	beq.n	587a <FatFile::read(void*, unsigned int)+0x192>
    57ae:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    57b0:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    57b2:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    57b4:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    57b8:	bmi.n	5738 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    57ba:	ldrb.w	r8, [r2, #5]
    57be:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    57c2:	cmp.w	fp, #0
    57c6:	bne.n	583c <FatFile::read(void*, unsigned int)+0x154>
    57c8:	cmp.w	r8, #0
    57cc:	bne.n	583c <FatFile::read(void*, unsigned int)+0x154>
        // start of new cluster
        if (m_curPosition == 0) {
    57ce:	cmp	r3, #0
    57d0:	bne.n	5854 <FatFile::read(void*, unsigned int)+0x16c>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    57d2:	lsls	r1, r1, #25
    57d4:	ite	mi
    57d6:	ldrmi	r4, [r2, #32]
    57d8:	ldrpl	r4, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    57da:	str	r4, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    57dc:	ldrb	r1, [r2, #6]
    57de:	ldr	r0, [r2, #20]
    57e0:	subs	r4, #2
    57e2:	lsls	r4, r1
    57e4:	add.w	r1, r8, r0
    57e8:	add	r1, r4
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    57ea:	cmp.w	fp, #0
    57ee:	beq.n	5744 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    57f0:	add.w	r0, r2, #36	; 0x24
    57f4:	movs	r2, #0
    57f6:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    57fa:	cbz	r0, 581c <FatFile::read(void*, unsigned int)+0x134>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    57fc:	rsb	r4, fp, #512	; 0x200
    5800:	cmp	r4, r6
    5802:	it	cs
    5804:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5806:	add.w	r1, r0, fp
    580a:	mov	r2, r4
    580c:	mov	r0, r7
    580e:	bl	89a8 <memcpy>
    5812:	b.n	57a2 <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5814:	ldrb	r3, [r5, #0]
    5816:	tst.w	r3, #112	; 0x70
    581a:	bne.n	587c <FatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    581c:	ldrb	r3, [r5, #1]
  return -1;
    581e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    5822:	orr.w	r3, r3, #2
    5826:	strb	r3, [r5, #1]
  return -1;
}
    5828:	add	sp, #12
    582a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    582e:	ldr	r3, [r0, #28]
    5830:	ldr	r2, [r0, #20]
    5832:	subs	r3, r3, r2
    5834:	cmp	r9, r3
    5836:	it	cs
    5838:	movcs	r9, r3
    583a:	b.n	571a <FatFile::read(void*, unsigned int)+0x32>
    583c:	ldr	r4, [r5, #16]
    583e:	b.n	57dc <FatFile::read(void*, unsigned int)+0xf4>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    5840:	ldr	r0, [r2, #40]	; 0x28
    5842:	ldr	r3, [r0, #0]
    5844:	mov	r2, r7
    5846:	ldr	r3, [r3, #12]
    5848:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    584a:	cmp	r0, #0
    584c:	beq.n	581c <FatFile::read(void*, unsigned int)+0x134>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    584e:	mov.w	r4, #512	; 0x200
    5852:	b.n	57a2 <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5854:	lsls	r3, r1, #28
    5856:	bpl.n	5864 <FatFile::read(void*, unsigned int)+0x17c>
    5858:	ldrb	r3, [r5, #2]
    585a:	lsls	r4, r3, #25
    585c:	bpl.n	5864 <FatFile::read(void*, unsigned int)+0x17c>
          m_curCluster++;
    585e:	ldr	r4, [r5, #16]
    5860:	adds	r4, #1
    5862:	b.n	57da <FatFile::read(void*, unsigned int)+0xf2>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5864:	mov	r0, r2
    5866:	ldr	r1, [r5, #16]
    5868:	mov	r2, sl
    586a:	bl	5fc8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    586e:	cmp	r0, #0
    5870:	blt.n	581c <FatFile::read(void*, unsigned int)+0x134>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5872:	beq.n	5814 <FatFile::read(void*, unsigned int)+0x12c>
    5874:	ldr	r2, [r5, #8]
    5876:	ldr	r4, [r5, #16]
    5878:	b.n	57dc <FatFile::read(void*, unsigned int)+0xf4>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    587a:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    587c:	rsb	r0, r6, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    5880:	add	sp, #12
    5882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5886:	nop

00005888 <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5888:	push	{r4, r5, r6, lr}
    588a:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    588c:	movs	r2, #1
    588e:	add.w	r1, sp, #7
    5892:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5894:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5896:	ldr	r5, [r0, #16]
    5898:	bl	56e8 <FatFile::read(void*, unsigned int)>
    589c:	cmp	r0, #1
    589e:	it	eq
    58a0:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    58a4:	str	r6, [r4, #20]
    58a6:	it	ne
    58a8:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    58ac:	str	r5, [r4, #16]
  return c;
}
    58ae:	add	sp, #8
    58b0:	pop	{r4, r5, r6, pc}
    58b2:	nop

000058b4 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    58b4:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    58b6:	ldr	r3, [r0, #20]
    58b8:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    58bc:	sub	sp, #12
    58be:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    58c0:	cbz	r5, 58c4 <FatFile::readDirCache(bool)+0x10>
    58c2:	cbnz	r1, 58e8 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    58c4:	movs	r2, #1
    58c6:	add.w	r1, sp, #7
    58ca:	mov	r0, r4
    58cc:	bl	56e8 <FatFile::read(void*, unsigned int)>
    58d0:	sxtb	r0, r0
    if  (n != 1) {
    58d2:	cmp	r0, #1
    58d4:	bne.n	58ee <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    58d6:	ldr	r3, [r4, #20]
    58d8:	adds	r3, #31
    58da:	str	r3, [r4, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    58dc:	ldr	r0, [r4, #8]
    58de:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    58e0:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    58e4:	add	sp, #12
    58e6:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    58e8:	adds	r3, #32
    58ea:	str	r3, [r0, #20]
    58ec:	b.n	58dc <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    58ee:	movs	r0, #0
}
    58f0:	add	sp, #12
    58f2:	pop	{r4, r5, pc}

000058f4 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    58f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    58f8:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    58fa:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    58fc:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    58fe:	tst.w	r5, #24
    5902:	strb.w	r4, [sp, #32]
    5906:	strb.w	r4, [sp, #33]	; 0x21
    590a:	strb.w	r4, [sp, #34]	; 0x22
    590e:	strb.w	r4, [sp, #68]	; 0x44
    5912:	strb.w	r4, [sp, #69]	; 0x45
    5916:	strb.w	r4, [sp, #70]	; 0x46
    591a:	beq.n	5926 <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    591c:	ldr	r6, [r0, #8]
    591e:	ldr	r5, [r1, #8]
    5920:	cmp	r6, r5
    5922:	mov	r3, r0
    5924:	beq.n	592e <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    5926:	movs	r0, #0
}
    5928:	add	sp, #104	; 0x68
    592a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    592e:	mov	r5, r3
    5930:	mov	r8, r2
    5932:	mov	r6, r1
    5934:	bl	52f4 <FatFile::sync() [clone .part.42]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    5938:	mov	lr, r5
    593a:	ldmia.w	lr!, {r0, r1, r2, r3}
    593e:	add	r7, sp, #68	; 0x44
    5940:	stmia	r7!, {r0, r1, r2, r3}
    5942:	ldmia.w	lr!, {r0, r1, r2, r3}
    5946:	stmia	r7!, {r0, r1, r2, r3}
    5948:	ldr.w	r3, [lr]
    594c:	str	r3, [r7, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    594e:	mov	r1, r4
    5950:	mov	r0, r5
    5952:	bl	52d4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5956:	mov	lr, r0
    5958:	cmp	r0, #0
    595a:	beq.n	5926 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    595c:	ldr.w	r1, [lr, #4]
    5960:	ldr.w	r2, [lr, #8]
    5964:	ldr.w	r3, [lr, #12]
    5968:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    596a:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    596e:	mov	r7, sp
    5970:	stmia	r7!, {r0, r1, r2, r3}
    5972:	ldr.w	r1, [lr, #20]
    5976:	ldr.w	r2, [lr, #24]
    597a:	ldr.w	r3, [lr, #28]
    597e:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    5982:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    5986:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    5988:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    598c:	mov	r2, r8
    598e:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    5990:	cmp.w	lr, #0
    5994:	beq.w	5ab8 <FatFile::rename(FatFile*, char const*)+0x1c4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5998:	movw	r3, #2561	; 0xa01
    599c:	add	r0, sp, #32
    599e:	bl	55bc <FatFile::open(FatFile*, char const*, int)>
    59a2:	cmp	r0, #0
    59a4:	beq.n	5926 <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    59a6:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    59a8:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    59ac:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    59b0:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    59b2:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    59b4:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    59b6:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    59b8:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    59ba:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    59bc:	movs	r1, #1
    59be:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    59c0:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    59c4:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    59c8:	bl	52d4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    59cc:	cmp	r0, #0
    59ce:	beq.n	5926 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    59d0:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    59d2:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    59d6:	ldr.w	r7, [r3, #-91]!
    59da:	str.w	r7, [r0, #13]
    59de:	ldr	r7, [r3, #4]
    59e0:	str.w	r7, [r0, #17]
    59e4:	ldr	r7, [r3, #8]
    59e6:	str.w	r7, [r0, #21]
    59ea:	ldr	r7, [r3, #12]
    59ec:	str.w	r7, [r0, #25]
    59f0:	ldrh	r7, [r3, #16]
    59f2:	ldrb	r3, [r3, #18]
    59f4:	strh.w	r7, [r0, #29]
    59f8:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    59fa:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    59fc:	cmp	r4, #0
    59fe:	beq.n	5a74 <FatFile::rename(FatFile*, char const*)+0x180>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    5a00:	ldr	r0, [r5, #8]
    5a02:	ldrb	r2, [r0, #6]
    5a04:	ldr	r1, [r0, #20]
    5a06:	subs	r3, r4, #2
    5a08:	lsls	r3, r2
    5a0a:	add	r1, r3
    5a0c:	mov	r2, r6
    5a0e:	adds	r0, #36	; 0x24
    5a10:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    5a14:	cmp	r0, #0
    5a16:	beq.n	5926 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    5a18:	mov	r6, r0
    5a1a:	mov	r7, sp
    5a1c:	ldr.w	r0, [r6, #32]!
    5a20:	ldr	r1, [r6, #4]
    5a22:	ldr	r2, [r6, #8]
    5a24:	ldr	r3, [r6, #12]
    5a26:	stmia	r7!, {r0, r1, r2, r3}
    5a28:	ldr	r0, [r6, #16]
    5a2a:	ldr	r1, [r6, #20]
    5a2c:	ldr	r2, [r6, #24]
    5a2e:	ldr	r3, [r6, #28]
    5a30:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    5a32:	mov	r1, r4
    5a34:	ldr	r0, [r5, #8]
    5a36:	bl	61cc <FatPartition::freeChain(unsigned long)>
    5a3a:	cmp	r0, #0
    5a3c:	beq.w	5926 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    5a40:	ldr	r0, [r5, #8]
    5a42:	ldr	r3, [r5, #32]
    5a44:	ldrb	r2, [r0, #6]
    5a46:	ldr	r1, [r0, #20]
    5a48:	subs	r3, #2
    5a4a:	lsls	r3, r2
    5a4c:	add	r1, r3
    5a4e:	adds	r0, #36	; 0x24
    5a50:	movs	r2, #1
    5a52:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    5a56:	mov	r7, r0
    5a58:	cmp	r0, #0
    5a5a:	beq.w	5926 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    5a5e:	mov	r4, sp
    5a60:	ldmia	r4!, {r0, r1, r2, r3}
    5a62:	str	r0, [r7, #32]
    5a64:	str	r1, [r7, #36]	; 0x24
    5a66:	str	r2, [r7, #40]	; 0x28
    5a68:	str	r3, [r7, #44]	; 0x2c
    5a6a:	ldmia	r4!, {r0, r1, r2, r3}
    5a6c:	str	r0, [r7, #48]	; 0x30
    5a6e:	str	r1, [r7, #52]	; 0x34
    5a70:	str	r2, [r7, #56]	; 0x38
    5a72:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5a74:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    5a76:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    5a78:	movs	r3, #8
  if (!oldFile.remove()) {
    5a7a:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5a7c:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    5a7e:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    5a82:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    5a86:	bl	6788 <FatFile::remove()>
    5a8a:	cmp	r0, #0
    5a8c:	beq.w	5926 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    5a90:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5a92:	add.w	r0, r4, #36	; 0x24
    5a96:	bl	38d4 <FsCache::sync()>
    5a9a:	cmp	r0, #0
    5a9c:	beq.w	5926 <FatFile::rename(FatFile*, char const*)+0x32>
    5aa0:	add.w	r0, r4, #564	; 0x234
    5aa4:	bl	38d4 <FsCache::sync()>
    5aa8:	cmp	r0, #0
    5aaa:	beq.w	5926 <FatFile::rename(FatFile*, char const*)+0x32>
    5aae:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5ab0:	ldr	r3, [r0, #0]
    5ab2:	ldr	r3, [r3, #24]
    5ab4:	blx	r3
    5ab6:	b.n	5928 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    5ab8:	add	r0, sp, #32
    5aba:	bl	54f8 <FatFile::mkdir(FatFile*, char const*, bool)>
    5abe:	cmp	r0, #0
    5ac0:	beq.w	5926 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    5ac4:	ldr	r4, [sp, #64]	; 0x40
    5ac6:	b.n	59a6 <FatFile::rename(FatFile*, char const*)+0xb2>

00005ac8 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    5ac8:	ldrb	r3, [r0, #0]
    5aca:	lsls	r2, r3, #27
    5acc:	bpl.n	5b04 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5ace:	ldr	r3, [r0, #20]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    5ad0:	push	{r4, lr}
    5ad2:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5ad4:	cbz	r3, 5ae4 <FatFile::rmdir()+0x1c>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5ad6:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5ad8:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5ada:	bic.w	r3, r3, #32
    5ade:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5ae0:	str	r2, [r0, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5ae2:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    5ae4:	movs	r1, #1
    5ae6:	mov	r0, r4
    5ae8:	bl	58b4 <FatFile::readDirCache(bool)>
    if (!dir) {
    5aec:	cbz	r0, 5b08 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5aee:	ldrb	r3, [r0, #0]
    5af0:	cbz	r3, 5b0e <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    5af2:	cmp	r3, #229	; 0xe5
    5af4:	beq.n	5ae4 <FatFile::rmdir()+0x1c>
    5af6:	cmp	r3, #46	; 0x2e
    5af8:	beq.n	5ae4 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    5afa:	ldrb	r3, [r0, #11]
    5afc:	lsls	r3, r3, #28
    5afe:	bmi.n	5ae4 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    5b00:	movs	r0, #0
    5b02:	pop	{r4, pc}
    5b04:	movs	r0, #0
    5b06:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    5b08:	ldrb	r3, [r4, #1]
    5b0a:	cmp	r3, #0
    5b0c:	bne.n	5b00 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    5b0e:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5b10:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    5b12:	orr.w	r3, r3, #2
    5b16:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5b18:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5b1a:	mov	r0, r4

 fail:
  return false;
}
    5b1c:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5b20:	b.w	6788 <FatFile::remove()>

00005b24 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5b24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b28:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5b2a:	ldr	r7, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5b2c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5b2e:	cbz	r3, 5b5e <FatFile::seekSet(unsigned long)+0x3a>
    5b30:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5b32:	ldr	r1, [r0, #20]
    5b34:	cmp	r1, r5
    5b36:	beq.n	5b90 <FatFile::seekSet(unsigned long)+0x6c>
    return true;
  }
  if (pos == 0) {
    5b38:	cbnz	r5, 5b4c <FatFile::seekSet(unsigned long)+0x28>
    5b3a:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    5b3c:	str	r5, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5b3e:	bic.w	r3, r3, #32
    5b42:	strb	r3, [r4, #2]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5b44:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    5b46:	movs	r0, #1
    5b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5b4c:	lsls	r0, r3, #28
    5b4e:	bmi.n	5b66 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5b50:	lsls	r2, r3, #26
    5b52:	bpl.n	5b6c <FatFile::seekSet(unsigned long)+0x48>
    5b54:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5b56:	ldrh	r3, [r3, #8]
    5b58:	cmp.w	r5, r3, lsl #5
    5b5c:	bls.n	5bc8 <FatFile::seekSet(unsigned long)+0xa4>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    5b5e:	str	r7, [r4, #16]
  return false;
    5b60:	movs	r0, #0
    5b62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    5b66:	ldr	r2, [r4, #28]
    5b68:	cmp	r5, r2
    5b6a:	bhi.n	5b5e <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5b6c:	ldr.w	lr, [r4, #8]
    5b70:	ldrb	r2, [r4, #2]
    5b72:	ldrb.w	r0, [lr, #6]
    5b76:	adds	r0, #9
    5b78:	uxtb	r0, r0
    5b7a:	subs	r6, r5, #1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    5b7c:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5b80:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    5b84:	beq.n	5b96 <FatFile::seekSet(unsigned long)+0x72>
    m_curCluster = m_firstCluster + nNew;
    5b86:	ldr	r3, [r4, #32]
    5b88:	add	r6, r3
    5b8a:	str	r6, [r4, #16]
    goto done;
    5b8c:	mov	r3, r2
    5b8e:	b.n	5b3e <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5b90:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    5b92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5b96:	subs	r2, r1, #1
    5b98:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    5b9c:	cmp	r6, r0
    5b9e:	bcs.n	5bcc <FatFile::seekSet(unsigned long)+0xa8>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5ba0:	lsls	r3, r3, #25
    5ba2:	ite	mi
    5ba4:	ldrmi.w	r3, [lr, #32]
    5ba8:	ldrpl	r3, [r4, #32]
    5baa:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5bac:	add.w	r8, r4, #16
    5bb0:	b.n	5bc2 <FatFile::seekSet(unsigned long)+0x9e>
    5bb2:	ldr	r1, [r4, #16]
    5bb4:	ldr	r0, [r4, #8]
    5bb6:	bl	5fc8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5bba:	cmp	r0, #0
    5bbc:	add.w	r6, r6, #4294967295
    5bc0:	ble.n	5b5e <FatFile::seekSet(unsigned long)+0x3a>
    5bc2:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5bc4:	cmp	r6, #0
    5bc6:	bne.n	5bb2 <FatFile::seekSet(unsigned long)+0x8e>
    5bc8:	ldrb	r3, [r4, #2]
    5bca:	b.n	5b3e <FatFile::seekSet(unsigned long)+0x1a>
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    5bcc:	cmp	r1, #0
    5bce:	beq.n	5ba0 <FatFile::seekSet(unsigned long)+0x7c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5bd0:	subs	r6, r6, r0
    5bd2:	b.n	5bac <FatFile::seekSet(unsigned long)+0x88>

00005bd4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5bd4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bd8:	mov	r5, r1
    5bda:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5bdc:	movs	r1, #0
    5bde:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5be0:	mov	r4, r0
    5be2:	mov	r7, r3
    5be4:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5be8:	bl	c1bc <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5bec:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5bee:	ldr	r3, [r5, #32]
    5bf0:	str	r3, [r4, #12]
    5bf2:	add.w	r2, r0, #52	; 0x34
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5bf6:	and.w	r3, r8, #15
    5bfa:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5bfe:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    5c00:	strh.w	r8, [r4, #4]
    5c04:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5c06:	lsls	r5, r1, #28
    5c08:	bmi.n	5c30 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5c0a:	and.w	r1, r1, #23
    5c0e:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    5c10:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5c12:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5c14:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5c18:	it	eq
    5c1a:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5c1e:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    5c22:	it	eq
    5c24:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5c26:	cmp	r3, #1
    5c28:	beq.n	5c3a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    5c2a:	cmp	r3, #2
    5c2c:	beq.n	5c82 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    5c2e:	cbz	r3, 5c78 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    5c30:	movs	r0, #0
    5c32:	strb	r0, [r4, #0]
  m_flags = 0;
    5c34:	strb	r0, [r4, #2]
  return false;
    5c36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    5c3a:	movs	r3, #2
    5c3c:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5c3e:	ldrb	r1, [r4, #0]
    5c40:	tst.w	r1, #17
    5c44:	bne.n	5c30 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5c46:	sxtb	r1, r3
    5c48:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    5c4c:	and.w	r3, r7, #8
    5c50:	orrs	r3, r1
    5c52:	uxtb	r3, r3
    5c54:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5c56:	ldrh.w	lr, [r2, #20]
    5c5a:	ldrh	r1, [r2, #26]
    5c5c:	ldr	r6, [r0, #48]	; 0x30
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    5c5e:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5c60:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    5c64:	cbz	r5, 5c88 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5c66:	cbnz	r1, 5c9e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5c68:	orn	r3, r3, #127	; 0x7f
    5c6c:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5c6e:	lsls	r3, r7, #17
    5c70:	bmi.n	5c90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5c72:	movs	r0, #1
    5c74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    5c78:	ands.w	r5, r7, #1024	; 0x400
    5c7c:	bne.n	5c30 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5c7e:	movs	r1, #1
    5c80:	b.n	5c4c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5c82:	movs	r3, #3
    5c84:	strb	r3, [r4, #2]
      break;
    5c86:	b.n	5c3e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5c88:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5c8a:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5c8c:	str	r3, [r4, #28]
    5c8e:	b.n	5c6e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5c90:	ldr	r1, [r4, #28]
    5c92:	mov	r0, r4
    5c94:	bl	5b24 <FatFile::seekSet(unsigned long)>
    5c98:	cmp	r0, #0
    5c9a:	bne.n	5c72 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    5c9c:	b.n	5c30 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5c9e:	bl	61cc <FatPartition::freeChain(unsigned long)>
    5ca2:	cmp	r0, #0
    5ca4:	beq.n	5c30 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5ca6:	ldrb	r3, [r4, #2]
    5ca8:	b.n	5c68 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    5caa:	nop

00005cac <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5cac:	ldrb	r3, [r0, #0]
    5cae:	cbnz	r3, 5cb8 <FatFile::openNext(FatFile*, int)+0xc>
    5cb0:	ldrb	r3, [r1, #0]
    5cb2:	tst.w	r3, #112	; 0x70
    5cb6:	bne.n	5cbc <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    5cb8:	movs	r0, #0
}
    5cba:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5cbc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cc0:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5cc2:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    5cc6:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    5cc8:	bne.n	5d0e <FatFile::openNext(FatFile*, int)+0x62>
    5cca:	mov	r9, r2
    5ccc:	mov	r5, r1
    5cce:	mov	r8, r0
    5cd0:	mov	sl, r7
    5cd2:	b.n	5cd8 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    5cd4:	movs	r7, #0
    5cd6:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    5cd8:	movs	r1, #0
    5cda:	mov	r0, r5
    5cdc:	bl	58b4 <FatFile::readDirCache(bool)>
    if (!dir) {
    5ce0:	cbz	r0, 5d0e <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5ce2:	ldrb	r3, [r0, #0]
    5ce4:	cbz	r3, 5d0e <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    5ce6:	cmp	r3, #46	; 0x2e
    5ce8:	beq.n	5cd4 <FatFile::openNext(FatFile*, int)+0x28>
    5cea:	cmp	r3, #229	; 0xe5
    5cec:	beq.n	5cd4 <FatFile::openNext(FatFile*, int)+0x28>
    5cee:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    5cf0:	lsls	r1, r2, #28
    5cf2:	bpl.n	5d16 <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    5cf4:	cmp	r2, #15
    5cf6:	bne.n	5cd4 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    5cf8:	lsls	r2, r3, #25
    5cfa:	bpl.n	5cd6 <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    5cfc:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    5d00:	ldrb.w	sl, [r0, #13]
    5d04:	b.n	5cd6 <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5d06:	bl	63fc <FatFile::lfnChecksum(unsigned char*)>
    5d0a:	cmp	r0, sl
    5d0c:	beq.n	5d1a <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    5d0e:	movs	r0, #0
}
    5d10:	add	sp, #8
    5d12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    5d16:	cmp	r7, #0
    5d18:	bne.n	5d06 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    5d1a:	str	r7, [sp, #0]
    5d1c:	mov	r3, r9
    5d1e:	ubfx	r2, r6, #5, #16
    5d22:	mov	r1, r5
    5d24:	mov	r0, r8
    5d26:	bl	5bd4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    5d2a:	b.n	5d10 <FatFile::openNext(FatFile*, int)+0x64>

00005d2c <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d2c:	ldrb	r3, [r0, #0]
    5d2e:	cbz	r3, 5d34 <FatFile::sync()+0x8>
    5d30:	b.w	52f4 <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5d34:	movs	r0, #1
    5d36:	bx	lr

00005d38 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5d38:	ldrb	r3, [r0, #2]
    5d3a:	lsls	r3, r3, #30
    5d3c:	bpl.n	5d74 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5d3e:	ldr	r3, [r0, #32]
    5d40:	cbz	r3, 5d70 <FatFile::truncate()+0x38>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5d42:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5d44:	ldr	r1, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5d46:	sub	sp, #8
    5d48:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5d4a:	cbnz	r1, 5d8a <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    5d4c:	str	r3, [sp, #4]
    m_firstCluster = 0;
    5d4e:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    5d50:	mov	r1, r3
    5d52:	ldr	r0, [r4, #8]
    5d54:	bl	61cc <FatPartition::freeChain(unsigned long)>
    5d58:	cbz	r0, 5d86 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5d5a:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d5c:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    5d5e:	ldr	r1, [r4, #20]
    5d60:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5d62:	orn	r3, r3, #127	; 0x7f
    5d66:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d68:	cbnz	r2, 5da6 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5d6a:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5d6c:	add	sp, #8
    5d6e:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5d70:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5d72:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    5d74:	movs	r0, #0
}
    5d76:	bx	lr
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5d78:	mvn.w	r2, #4026531840	; 0xf0000000
    5d7c:	ldr	r1, [r4, #16]
    5d7e:	ldr	r0, [r4, #8]
    5d80:	bl	6038 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    5d84:	cbnz	r0, 5d9e <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    5d86:	movs	r0, #0
    5d88:	b.n	5d6c <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    5d8a:	add	r2, sp, #8
    5d8c:	movs	r3, #0
    5d8e:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5d92:	ldr	r0, [r0, #8]
    5d94:	bl	5fc8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5d98:	cmp	r0, #0
    5d9a:	blt.n	5d86 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    5d9c:	bne.n	5d78 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    5d9e:	ldr	r3, [sp, #4]
    5da0:	cmp	r3, #0
    5da2:	beq.n	5d5a <FatFile::truncate()+0x22>
    5da4:	b.n	5d50 <FatFile::truncate()+0x18>
    5da6:	mov	r0, r4
    5da8:	bl	52f4 <FatFile::sync() [clone .part.42]>
    5dac:	b.n	5d6c <FatFile::truncate()+0x34>
    5dae:	nop

00005db0 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5db0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5db4:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5db6:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5db8:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5dba:	bmi.n	5dcc <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5dbc:	ldrb	r3, [r4, #1]
    5dbe:	orr.w	r3, r3, #1
    5dc2:	strb	r3, [r4, #1]
  return -1;
    5dc4:	mov.w	r0, #4294967295
    5dc8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5dcc:	mov	r8, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5dce:	lsls	r2, r3, #28
    5dd0:	mov	r7, r1
    5dd2:	bmi.w	5f72 <FatFile::write(void const*, unsigned int)+0x1c2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5dd6:	ldr	r2, [r4, #20]
    5dd8:	mvns	r3, r2
    5dda:	cmp	r8, r3
    5ddc:	bhi.n	5dbc <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5dde:	cmp.w	r8, #0
    5de2:	beq.w	5f94 <FatFile::write(void const*, unsigned int)+0x1e4>
    5de6:	mov	r6, r8
    5de8:	b.n	5e60 <FatFile::write(void const*, unsigned int)+0xb0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5dea:	cmp.w	r9, #0
    5dee:	bne.n	5ea2 <FatFile::write(void const*, unsigned int)+0xf2>
      // start of new cluster
      if (m_curCluster != 0) {
    5df0:	ldr	r1, [r4, #16]
    5df2:	cmp	r1, #0
    5df4:	beq.w	5f1e <FatFile::write(void const*, unsigned int)+0x16e>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5df8:	ldrb	r3, [r4, #2]
    5dfa:	lsls	r3, r3, #25
    5dfc:	bpl.w	5f32 <FatFile::write(void const*, unsigned int)+0x182>
    5e00:	ldr	r3, [r4, #28]
    5e02:	cmp	r3, r2
    5e04:	bls.w	5f32 <FatFile::write(void const*, unsigned int)+0x182>
          m_curCluster++;
    5e08:	adds	r3, r1, #1
    5e0a:	str	r3, [r4, #16]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5e0c:	ldrb	r2, [r0, #6]
    5e0e:	ldr	r3, [r0, #20]
    5e10:	subs	r1, #1
    5e12:	lsls	r1, r2
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5e14:	cmp.w	r6, #512	; 0x200
    5e18:	add	r1, r3
    5e1a:	bcs.n	5ebe <FatFile::write(void const*, unsigned int)+0x10e>
    5e1c:	cmp.w	r6, #512	; 0x200
    5e20:	mov	r5, r6
    5e22:	it	cs
    5e24:	movcs.w	r5, #512	; 0x200
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    5e28:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5e2a:	tst.w	r3, #32
    5e2e:	ite	eq
    5e30:	moveq	r2, #1
    5e32:	movne	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5e34:	adds	r0, #36	; 0x24
    5e36:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    5e3a:	cmp	r0, #0
    5e3c:	beq.n	5dbc <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5e3e:	add	r0, r9
    5e40:	mov	r2, r5
    5e42:	mov	r1, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5e44:	add	r9, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5e46:	bl	89a8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5e4a:	cmp.w	r9, #512	; 0x200
    5e4e:	beq.w	5f62 <FatFile::write(void const*, unsigned int)+0x1b2>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5e52:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5e54:	subs	r6, r6, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5e56:	add	r2, r5
    src += n;
    5e58:	add	r7, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5e5a:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5e5c:	beq.w	5f94 <FatFile::write(void const*, unsigned int)+0x1e4>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5e60:	ldr	r0, [r4, #8]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5e62:	ldrb	r3, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5e64:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    5e68:	ubfx	r9, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5e6c:	beq.n	5dea <FatFile::write(void const*, unsigned int)+0x3a>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    5e6e:	ldr	r3, [r4, #16]
    5e70:	ldrb	r1, [r0, #6]
    5e72:	ldr	r2, [r0, #20]
    5e74:	subs	r3, #2
    5e76:	lsl.w	r1, r3, r1
    5e7a:	add	r1, r2
    5e7c:	add	r1, r5

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5e7e:	cmp.w	r9, #0
    5e82:	bne.n	5eb0 <FatFile::write(void const*, unsigned int)+0x100>
    5e84:	cmp.w	r6, #512	; 0x200
    5e88:	bcs.n	5ebe <FatFile::write(void const*, unsigned int)+0x10e>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5e8a:	ldr	r2, [r4, #20]
    5e8c:	ldr	r3, [r4, #28]
    5e8e:	cmp.w	r6, #512	; 0x200
    5e92:	mov	r5, r6
    5e94:	it	cs
    5e96:	movcs.w	r5, #512	; 0x200
    5e9a:	cmp	r2, r3
    5e9c:	bcc.n	5e28 <FatFile::write(void const*, unsigned int)+0x78>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5e9e:	movs	r2, #5
    5ea0:	b.n	5e34 <FatFile::write(void const*, unsigned int)+0x84>
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5ea2:	ldr	r3, [r4, #16]
    5ea4:	ldrb	r1, [r0, #6]
    5ea6:	ldr	r2, [r0, #20]
    5ea8:	subs	r3, #2
    5eaa:	lsl.w	r1, r3, r1
    5eae:	add	r1, r2
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5eb0:	rsb	r5, r9, #512	; 0x200
    5eb4:	cmp	r5, r6
    5eb6:	it	cs
    5eb8:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5eba:	movs	r2, #1
    5ebc:	b.n	5e34 <FatFile::write(void const*, unsigned int)+0x84>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5ebe:	cmp.w	r6, #1024	; 0x400
    5ec2:	bcc.n	5f02 <FatFile::write(void const*, unsigned int)+0x152>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5ec4:	ldrb	r3, [r0, #4]
    5ec6:	ldr.w	lr, [r0, #48]	; 0x30
    5eca:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5ecc:	lsrs	r2, r6, #9
    5ece:	cmp	r3, r2
    5ed0:	it	cs
    5ed2:	movcs	r3, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    5ed4:	cmp	lr, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5ed6:	mov.w	r5, r3, lsl #9
    5eda:	bcc.n	5ef0 <FatFile::write(void const*, unsigned int)+0x140>
    5edc:	adds	r2, r3, r1
    5ede:	cmp	lr, r2
    5ee0:	bcs.n	5ef0 <FatFile::write(void const*, unsigned int)+0x140>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5ee2:	mov.w	lr, #0
    m_sector = 0XFFFFFFFF;
    5ee6:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5eea:	strb.w	lr, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    5eee:	str	r2, [r0, #48]	; 0x30
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    5ef0:	ldr	r0, [r0, #40]	; 0x28
    5ef2:	ldr	r2, [r0, #0]
    5ef4:	ldr.w	r9, [r2, #32]
    5ef8:	mov	r2, r7
    5efa:	blx	r9
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    5efc:	cmp	r0, #0
    5efe:	bne.n	5e52 <FatFile::write(void const*, unsigned int)+0xa2>
    5f00:	b.n	5dbc <FatFile::write(void const*, unsigned int)+0xc>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    5f02:	ldr	r3, [r0, #48]	; 0x30
    5f04:	cmp	r3, r1
    5f06:	beq.n	5f54 <FatFile::write(void const*, unsigned int)+0x1a4>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    5f08:	ldr	r0, [r0, #40]	; 0x28
    5f0a:	ldr	r3, [r0, #0]
    5f0c:	mov	r2, r7
    5f0e:	ldr	r3, [r3, #28]
    5f10:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5f12:	cmp	r0, #0
    5f14:	beq.w	5dbc <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5f18:	mov.w	r5, #512	; 0x200
    5f1c:	b.n	5e52 <FatFile::write(void const*, unsigned int)+0xa2>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5f1e:	ldr	r3, [r4, #32]
    5f20:	cbz	r3, 5f80 <FatFile::write(void const*, unsigned int)+0x1d0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5f22:	str	r3, [r4, #16]
    5f24:	ldrb	r1, [r0, #6]
    5f26:	ldr	r2, [r0, #20]
    5f28:	subs	r3, #2
    5f2a:	lsl.w	r1, r3, r1
    5f2e:	add	r1, r2
    5f30:	b.n	5e84 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5f32:	add.w	r2, r4, #16
    5f36:	bl	5fc8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5f3a:	cmp	r0, #0
    5f3c:	blt.w	5dbc <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    5f40:	bne.n	5f4e <FatFile::write(void const*, unsigned int)+0x19e>
          // add cluster if at end of chain
          if (!addCluster()) {
    5f42:	mov	r0, r4
    5f44:	bl	5208 <FatFile::addCluster()>
    5f48:	cmp	r0, #0
    5f4a:	beq.w	5dbc <FatFile::write(void const*, unsigned int)+0xc>
    5f4e:	ldr	r3, [r4, #16]
    5f50:	ldr	r0, [r4, #8]
    5f52:	b.n	5f24 <FatFile::write(void const*, unsigned int)+0x174>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5f54:	movs	r2, #0
    m_sector = 0XFFFFFFFF;
    5f56:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5f5a:	strb.w	r2, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    5f5e:	str	r3, [r0, #48]	; 0x30
    5f60:	b.n	5f08 <FatFile::write(void const*, unsigned int)+0x158>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5f62:	ldr	r0, [r4, #8]
    5f64:	adds	r0, #36	; 0x24
    5f66:	bl	38d4 <FsCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    5f6a:	cmp	r0, #0
    5f6c:	bne.w	5e52 <FatFile::write(void const*, unsigned int)+0xa2>
    5f70:	b.n	5dbc <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    5f72:	ldr	r1, [r0, #28]
    5f74:	bl	5b24 <FatFile::seekSet(unsigned long)>
    5f78:	cmp	r0, #0
    5f7a:	beq.w	5dbc <FatFile::write(void const*, unsigned int)+0xc>
    5f7e:	b.n	5dd6 <FatFile::write(void const*, unsigned int)+0x26>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5f80:	mov	r0, r4
    5f82:	bl	5208 <FatFile::addCluster()>
    5f86:	cmp	r0, #0
    5f88:	beq.w	5dbc <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5f8c:	ldr	r3, [r4, #16]
    5f8e:	str	r3, [r4, #32]
    5f90:	ldr	r0, [r4, #8]
    5f92:	b.n	5f24 <FatFile::write(void const*, unsigned int)+0x174>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5f94:	ldr	r3, [r4, #28]
    5f96:	cmp	r3, r2
    5f98:	bcc.n	5fae <FatFile::write(void const*, unsigned int)+0x1fe>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5f9a:	ldr	r3, [pc, #40]	; (5fc4 <FatFile::write(void const*, unsigned int)+0x214>)
    5f9c:	ldr	r3, [r3, #0]
    5f9e:	cbz	r3, 5fbe <FatFile::write(void const*, unsigned int)+0x20e>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5fa0:	ldrb	r3, [r4, #2]
    5fa2:	orn	r3, r3, #127	; 0x7f
    5fa6:	strb	r3, [r4, #2]
    5fa8:	mov	r0, r8
    5faa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5fae:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    5fb0:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5fb2:	orn	r3, r3, #127	; 0x7f
    5fb6:	strb	r3, [r4, #2]
    5fb8:	mov	r0, r8
    5fba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fbe:	mov	r0, r8
    5fc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fc4:	.word	0x20019a10

00005fc8 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5fc8:	cmp	r1, #1
    5fca:	bls.n	6030 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    5fcc:	ldr	r3, [r0, #28]
    5fce:	cmp	r1, r3
    5fd0:	bhi.n	6030 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5fd2:	push	{r4, r5, r6, lr}
    5fd4:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5fd6:	cmp	r3, #32
    5fd8:	mov	r6, r2
    5fda:	mov	r5, r0
    5fdc:	mov	r4, r1
    5fde:	beq.n	6012 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5fe0:	cmp	r3, #16
    5fe2:	bne.n	600c <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    5fe4:	ldr	r3, [r0, #24]
    5fe6:	ubfx	r1, r1, #8, #8
    5fea:	add	r1, r3
    5fec:	movs	r2, #2
    5fee:	add.w	r0, r0, #564	; 0x234
    5ff2:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    5ff6:	cbz	r0, 600c <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5ff8:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5ffa:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5ffe:	ldr	r2, [r5, #28]
    6000:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    6002:	itte	ls
    6004:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    6006:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    6008:	movhi	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    600a:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

 fail:
  return -1;
    600c:	mov.w	r0, #4294967295
    6010:	pop	{r4, r5, r6, pc}
    6012:	ldr	r1, [r0, #24]
    6014:	movs	r2, #2
    6016:	add.w	r1, r1, r4, lsr #7
    601a:	add.w	r0, r0, #564	; 0x234
    601e:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    6022:	cmp	r0, #0
    6024:	beq.n	600c <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6026:	and.w	r1, r4, #127	; 0x7f
    602a:	ldr.w	r3, [r0, r1, lsl #2]
    602e:	b.n	5ffe <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    6030:	mov.w	r0, #4294967295
}
    6034:	bx	lr
    6036:	nop

00006038 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6038:	cmp	r1, #1
    603a:	bls.n	6078 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    603c:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    603e:	ldr	r3, [r0, #28]
    6040:	cmp	r1, r3
    6042:	bhi.n	6052 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    6044:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6046:	cmp	r3, #32
    6048:	mov	r5, r2
    604a:	mov	r4, r1
    604c:	beq.n	607c <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    604e:	cmp	r3, #16
    6050:	beq.n	6056 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    6052:	movs	r0, #0
    6054:	pop	{r3, r4, r5, pc}
    6056:	ldr	r3, [r0, #24]
    6058:	ubfx	r1, r1, #8, #8
    605c:	add	r1, r3
    605e:	add.w	r0, r0, #564	; 0x234
    6062:	movs	r2, #3
    6064:	bl	3874 <FsCache::get(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    6068:	mov	r3, r0
    606a:	cmp	r0, #0
    606c:	beq.n	6052 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    606e:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    6070:	movs	r0, #1
    6072:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

 fail:
  return false;
}
    6076:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    6078:	movs	r0, #0
}
    607a:	bx	lr
    607c:	ldr	r1, [r0, #24]
    607e:	movs	r2, #3
    6080:	add.w	r0, r0, #564	; 0x234
    6084:	add.w	r1, r1, r4, lsr #7
    6088:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    608c:	mov	r3, r0
    608e:	cmp	r0, #0
    6090:	beq.n	6052 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6092:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    6096:	movs	r0, #1
    6098:	str.w	r5, [r3, r1, lsl #2]
    609c:	pop	{r3, r4, r5, pc}
    609e:	nop

000060a0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    60a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    60a4:	ldr	r4, [r0, #12]
    60a6:	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    60a8:	sub	sp, #8
    60aa:	mov	r5, r0
    60ac:	mov	r7, r1
    60ae:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    60b0:	itte	cc
    60b2:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    60b4:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    60b6:	movcs	r6, #1
    60b8:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    60ba:	adds	r4, #1
    if (find > m_lastCluster) {
    60bc:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    60be:	add	r2, sp, #4
    60c0:	mov	r0, r5
    60c2:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    60c4:	bls.n	60da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    60c6:	cbnz	r6, 6118 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    60c8:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    60ca:	adds	r4, #1
    if (find > m_lastCluster) {
    60cc:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    60ce:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    60d2:	add	r2, sp, #4
    60d4:	mov	r0, r5
    60d6:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    60d8:	bhi.n	60c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    60da:	cmp	r7, r4
    60dc:	beq.n	6118 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    60de:	bl	5fc8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    60e2:	cmp	r0, #0
    60e4:	blt.n	6118 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    60e6:	beq.n	60b8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    60e8:	ldr	r3, [sp, #4]
    60ea:	cmp	r3, #0
    60ec:	bne.n	60b8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    60ee:	cbz	r6, 60f2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    60f0:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    60f2:	mvn.w	r2, #4026531840	; 0xf0000000
    60f6:	mov	r1, r4
    60f8:	mov	r0, r5
    60fa:	bl	6038 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    60fe:	mov	r6, r0
    6100:	cbz	r0, 6118 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    6102:	cbnz	r7, 610a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    6104:	str.w	r4, [r8]
  return true;
    6108:	b.n	611a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    610a:	mov	r1, r7
    610c:	mov	r0, r5
    610e:	mov	r2, r4
    6110:	bl	6038 <FatPartition::fatPut(unsigned long, unsigned long)>
    6114:	cmp	r0, #0
    6116:	bne.n	6104 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    6118:	movs	r6, #0
}
    611a:	mov	r0, r6
    611c:	add	sp, #8
    611e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6122:	nop

00006124 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    6124:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    6128:	ldr	r4, [r0, #12]

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    612a:	ldr	r3, [r0, #28]
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    612c:	adds	r7, r4, #1

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    612e:	cmp	r7, r3
 fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    6130:	sub	sp, #8
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6132:	bhi.n	6182 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    6134:	mov	sl, r2
    6136:	mov	r9, r1
    6138:	mov	r6, r0
    613a:	adds	r4, #2
    613c:	mov.w	r8, #1
    6140:	b.n	6156 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    6142:	subs	r2, r4, r7
    6144:	mov	r3, r4
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    6146:	cbz	r0, 616c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x48>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    6148:	cmp	r2, r9
    614a:	beq.n	618c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x68>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    614c:	ldr	r2, [r6, #28]
    614e:	cmp	r3, r2
    6150:	add.w	r4, r4, #1
    6154:	bhi.n	6182 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    6156:	subs	r5, r4, #1
      // Can't find space.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    6158:	mov	r1, r5
    615a:	add	r2, sp, #4
    615c:	mov	r0, r6
    615e:	bl	5fc8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6162:	cmp	r0, #0
    6164:	blt.n	6182 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    6166:	ldr	r3, [sp, #4]
    6168:	cmp	r3, #0
    616a:	beq.n	6142 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    616c:	ldr	r2, [r6, #28]
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    616e:	mov	r3, r4
      goto fail;
    }
    if (f || fg == 0) {
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    6170:	cmp	r7, r5
    6172:	it	ne
    6174:	movne.w	r8, #0
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6178:	cmp	r3, r2
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    617a:	mov	r7, r4
    617c:	add.w	r4, r4, #1
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6180:	bls.n	6156 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

 fail:
  return false;
    6182:	movs	r4, #0
}
    6184:	mov	r0, r4
    6186:	add	sp, #8
    6188:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      break;
    }
    endCluster++;
  }
  // Remember possible next free cluster.
  if (setStart) {
    618c:	cmp.w	r8, #0
    6190:	beq.n	6194 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x70>
    m_allocSearchStart = endCluster;
    6192:	str	r5, [r6, #12]
    6194:	mvn.w	r2, #4026531840	; 0xf0000000
    6198:	mov	r1, r5
    619a:	mov	r0, r6
    619c:	bl	6038 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    61a0:	mov	r4, r0
    61a2:	cmp	r0, #0
    61a4:	beq.n	6182 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    61a6:	cmp	r7, r5
    61a8:	bcc.n	61b0 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8c>
    61aa:	b.n	61c6 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    61ac:	cmp	r5, r7
    61ae:	bls.n	61c6 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    if (!fatPut(endCluster - 1, endCluster)) {
    61b0:	add.w	r8, r5, #4294967295
    61b4:	mov	r2, r5
    61b6:	mov	r1, r8
    61b8:	mov	r0, r6
    61ba:	bl	6038 <FatPartition::fatPut(unsigned long, unsigned long)>
    61be:	mov	r5, r8
    61c0:	cmp	r0, #0
    61c2:	bne.n	61ac <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x88>
    61c4:	b.n	6182 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    61c6:	str.w	r7, [sl]
  return true;
    61ca:	b.n	6184 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x60>

000061cc <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    61cc:	push	{r4, r5, r6, lr}
    61ce:	mov	r5, r0
    61d0:	sub	sp, #8
    61d2:	mov	r4, r1
    61d4:	b.n	61ec <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    61d6:	bl	6038 <FatPartition::fatPut(unsigned long, unsigned long)>
    61da:	cbz	r0, 6202 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    61dc:	ldr	r3, [r5, #12]
    61de:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    61e0:	itt	cc
    61e2:	addcc.w	r4, r4, #4294967295
    61e6:	strcc	r4, [r5, #12]
    }
    cluster = next;
    61e8:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    61ea:	cbz	r6, 6204 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    61ec:	add	r2, sp, #4
    61ee:	mov	r1, r4
    61f0:	mov	r0, r5
    61f2:	bl	5fc8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    61f6:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    61f8:	mov	r1, r4
    61fa:	mov.w	r2, #0
    61fe:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6200:	bge.n	61d6 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

 fail:
  return false;
    6202:	movs	r0, #0
}
    6204:	add	sp, #8
    6206:	pop	{r4, r5, r6, pc}

00006208 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6208:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    620c:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    620e:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6210:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6212:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6216:	beq.n	6224 <FatPartition::freeClusterCount()+0x1c>
    6218:	cmp	r3, #32
    621a:	beq.n	6224 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

 fail:
  return -1;
    621c:	mov.w	r0, #4294967295
    6220:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    6224:	ldr	r5, [r0, #24]
    while (todo) {
    6226:	cmp.w	r8, #0
    622a:	beq.n	62aa <FatPartition::freeClusterCount()+0xa2>
    622c:	mov	r6, r0
    622e:	add.w	r7, r0, #564	; 0x234
    6232:	movs	r4, #0
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    6234:	mov	r1, r5
    6236:	movs	r2, #2
    6238:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
    623a:	adds	r5, #1
    623c:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
      if (!pc) {
    6240:	cmp	r0, #0
    6242:	beq.n	621c <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6244:	ldrb	r3, [r6, #7]
    6246:	cmp	r3, #16
    6248:	beq.n	6278 <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    624a:	cmp.w	r8, #127	; 0x7f
    624e:	bhi.n	62a2 <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    6250:	uxth.w	r1, r8
    6254:	mov	lr, r8
    6256:	subs	r1, #1
    6258:	uxth	r1, r1
    625a:	add.w	r1, r0, r1, lsl #2
    625e:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    6260:	ldr.w	r2, [r3, #4]!
    6264:	cbnz	r2, 6268 <FatPartition::freeClusterCount()+0x60>
            free++;
    6266:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    6268:	cmp	r3, r1
    626a:	bne.n	6260 <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    626c:	subs.w	r8, r8, lr
    6270:	bne.n	6234 <FatPartition::freeClusterCount()+0x2c>
    6272:	mov	r0, r4
    6274:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6278:	cmp.w	r8, #255	; 0xff
    627c:	bls.n	62b0 <FatPartition::freeClusterCount()+0xa8>
    627e:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6282:	mov	r3, lr
    6284:	subs	r1, r3, #1
    6286:	uxth	r1, r1
    6288:	add.w	r1, r0, r1, lsl #1
    628c:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    628e:	ldrh.w	r2, [r3, #2]!
    6292:	cbnz	r2, 6296 <FatPartition::freeClusterCount()+0x8e>
            free++;
    6294:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    6296:	cmp	r1, r3
    6298:	bne.n	628e <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    629a:	subs.w	r8, r8, lr
    629e:	bne.n	6234 <FatPartition::freeClusterCount()+0x2c>
    62a0:	b.n	6272 <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    62a2:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    62a6:	mov	r1, lr
    62a8:	b.n	6256 <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    62aa:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    62ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    62b0:	uxth.w	r3, r8
    62b4:	mov	lr, r8
    62b6:	b.n	6284 <FatPartition::freeClusterCount()+0x7c>

000062b8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

 fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    62b8:	push	{r3, r4, r5, r6, r7, lr}
    62ba:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    62bc:	movs	r3, #0
  m_allocSearchStart = 1;
    62be:	movs	r5, #1
    62c0:	mov.w	r0, #4294967295
    62c4:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    62c6:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    62c8:	str	r1, [r4, #40]	; 0x28
    62ca:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    62ce:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    62d0:	strb.w	r3, [r4, #36]	; 0x24
    62d4:	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    62d8:	str	r0, [r4, #48]	; 0x30
    62da:	str.w	r0, [r4, #576]	; 0x240
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    62de:	mov	r5, r2
    62e0:	cbz	r2, 631a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    62e2:	cmp	r2, #4
    62e4:	bls.n	62ea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    62e6:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    62e8:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    62ea:	add.w	r6, r4, #36	; 0x24
    62ee:	mov	r2, r3
    62f0:	mov	r1, r3
    62f2:	mov	r0, r6
    62f4:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    62f8:	add.w	r5, r5, #268435456	; 0x10000000
    62fc:	subs	r5, #1
    62fe:	lsls	r5, r5, #4
    6300:	add.w	r3, r0, #446	; 0x1be
    6304:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6306:	cmp	r0, #0
    6308:	beq.n	62e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    630a:	ldrb	r1, [r2, #4]
    630c:	cmp	r1, #0
    630e:	beq.n	62e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6310:	ldrb	r3, [r3, r5]
    6312:	lsls	r3, r3, #25
    6314:	bne.n	62e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6316:	ldr	r5, [r2, #8]
    6318:	b.n	631e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    631a:	add.w	r6, r4, #36	; 0x24
    631e:	mov	r0, r6
    6320:	movs	r2, #0
    6322:	mov	r1, r5
    6324:	bl	3874 <FsCache::get(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6328:	cmp	r0, #0
    632a:	beq.n	62e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    632c:	ldrb	r3, [r0, #16]
    632e:	cmp	r3, #2
    6330:	bne.n	62e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6332:	ldrh.w	r3, [r0, #11]
    6336:	cmp.w	r3, #512	; 0x200
    633a:	bne.n	62e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    633c:	ldrb	r6, [r0, #13]
    633e:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6340:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6342:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6344:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6346:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6348:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    634a:	beq.n	636c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    634c:	movs	r2, #1
    634e:	mov	r1, r2
    6350:	b.n	6354 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    6352:	mov	r2, r3
    6354:	lsls	r1, r1, #1
    6356:	uxtb	r1, r1
    6358:	adds	r3, r2, #1
    635a:	cmp	r6, r1
    635c:	uxtb	r3, r3
    635e:	beq.n	636a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    6360:	cmp	r3, #9
    6362:	bne.n	6352 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    6364:	strb	r2, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    6366:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6368:	pop	{r3, r4, r5, r6, r7, pc}
    636a:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    636c:	ldrh	r6, [r0, #22]
    636e:	str	r6, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6370:	cbnz	r6, 6376 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    6372:	ldr	r6, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6374:	str	r6, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6376:	ldrh	r1, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6378:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    637c:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    637e:	add	r1, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6380:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6382:	add.w	r7, r1, r6, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6386:	addw	r3, r3, #511	; 0x1ff
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    638a:	str	r1, [r4, #24]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    638c:	ldrh.w	r1, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6390:	str	r7, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6392:	add.w	r3, r7, r3, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6396:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6398:	cbnz	r1, 639c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    639a:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    639c:	subs	r5, r5, r3
    639e:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    63a0:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    63a4:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    63a8:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    63aa:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    63ac:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    63ae:	bls.n	63cc <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    63b0:	movw	r3, #65524	; 0xfff4
    63b4:	cmp	r2, r3
    63b6:	ittet	hi
    63b8:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    63ba:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    63bc:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    63be:	movhi	r3, #32
    63c0:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    63c2:	str	r6, [r4, #44]	; 0x2c
    63c4:	str.w	r6, [r4, #572]	; 0x23c
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    63c8:	movs	r0, #1
    63ca:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    63cc:	movs	r3, #12
    63ce:	strb	r3, [r4, #7]
    63d0:	b.n	62e6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    63d2:	nop

000063d4 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    63d4:	cmp	r1, #4
    63d6:	bls.n	63f2 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    63d8:	cmp	r1, #10
    63da:	bls.n	63ea <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    63dc:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    63de:	itte	ls
    63e0:	addls.w	r1, r0, r1, lsl #1
    63e4:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    63e6:	movhi	r0, #0
}
    63e8:	bx	lr
    63ea:	add.w	r1, r0, r1, lsl #1
    63ee:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    63f0:	bx	lr
    63f2:	add.w	r1, r0, r1, lsl #1
    63f6:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    63fa:	bx	lr

000063fc <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    63fc:	push	{r4}
    63fe:	subs	r2, r0, #1
    6400:	add.w	r4, r0, #10
  uint8_t sum = 0;
    6404:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6406:	ldrb.w	r1, [r2, #1]!
    640a:	lsrs	r3, r0, #1
    640c:	orr.w	r0, r3, r0, lsl #7
    6410:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6414:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6416:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6418:	bne.n	6406 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    641a:	ldr.w	r4, [sp], #4
    641e:	bx	lr

00006420 <FatFile::openCluster(FatFile*)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    6420:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6422:	ldr	r3, [r1, #12]
    6424:	cbz	r3, 6444 <FatFile::openCluster(FatFile*)+0x24>
    6426:	mov	r5, r0
    6428:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    642a:	movs	r2, #36	; 0x24
    642c:	movs	r1, #0
    642e:	bl	c1bc <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6432:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6434:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    6436:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    6438:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    643a:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    643c:	ldr	r3, [r4, #12]
    643e:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    6440:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6442:	pop	{r3, r4, r5, pc}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6444:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6446:	ldmia.w	sp!, {r3, r4, r5, lr}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    644a:	b.w	568c <FatFile::openRoot(FatVolume*)>
    644e:	nop

00006450 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    6450:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6454:	sub	sp, #52	; 0x34
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6456:	ldrb	r3, [r0, #0]
    6458:	movs	r4, #0
    645a:	strb.w	r4, [sp, #12]
    645e:	strb.w	r4, [sp, #13]
    6462:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    6466:	mov	r8, r1
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6468:	cbz	r3, 6470 <FatFile::getName(char*, unsigned int)+0x20>
    646a:	cmp	r2, #12
    646c:	mov	r9, r2
    646e:	bhi.n	647c <FatFile::getName(char*, unsigned int)+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
    6470:	movs	r0, #0
    6472:	strb.w	r0, [r8]
  return 0;
}
    6476:	add	sp, #52	; 0x34
    6478:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    647c:	ldrb	r3, [r0, #3]
    647e:	mov	r7, r0
    6480:	cmp	r3, #0
    6482:	beq.n	652a <FatFile::getName(char*, unsigned int)+0xda>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    6484:	add	r0, sp, #12
    6486:	mov	r1, r7
    6488:	bl	6420 <FatFile::openCluster(FatFile*)>
    648c:	cmp	r0, #0
    648e:	beq.n	6470 <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6490:	ldrb	r3, [r7, #3]
    6492:	cmp	r3, #0
    6494:	beq.n	6470 <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6496:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6498:	movs	r6, #1
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    649a:	add.w	r5, r9, #4294967295
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    649e:	ldrh	r1, [r7, #4]
    64a0:	subs	r1, r1, r6
    64a2:	lsls	r1, r1, #5
    64a4:	add	r0, sp, #12
    64a6:	bl	5b24 <FatFile::seekSet(unsigned long)>
    64aa:	cmp	r0, #0
    64ac:	beq.n	6470 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    64ae:	movs	r1, #0
    64b0:	add	r0, sp, #12
    64b2:	bl	58b4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    64b6:	mov	fp, r0
    64b8:	cmp	r0, #0
    64ba:	beq.n	6470 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    64bc:	ldrb	r3, [r0, #11]
    64be:	cmp	r3, #15
    64c0:	bne.n	6470 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    64c2:	ldrb	r3, [r0, #0]
    64c4:	and.w	r3, r3, #31
    64c8:	cmp	r6, r3
    64ca:	bne.n	6470 <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    64cc:	subs	r3, r6, #1
    64ce:	add.w	r4, r3, r3, lsl #1
    64d2:	add.w	r4, r3, r4, lsl #2
    64d6:	mov	r3, r4
    64d8:	add.w	sl, r8, r4
    64dc:	add.w	r2, r4, #13
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    64e0:	subs	r1, r3, r4
    64e2:	uxtb	r1, r1
    64e4:	mov	r0, fp
    64e6:	bl	63d4 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= (n - 1)) {
    64ea:	cbz	r0, 6534 <FatFile::getName(char*, unsigned int)+0xe4>
    64ec:	cmp	r5, r3
    64ee:	bls.n	6534 <FatFile::getName(char*, unsigned int)+0xe4>
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    64f0:	cmp	r0, #126	; 0x7e
    64f2:	add.w	r3, r3, #1
    64f6:	ite	ls
    64f8:	uxtbls	r0, r0
    64fa:	movhi	r0, #63	; 0x3f
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    64fc:	cmp	r2, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    64fe:	strb.w	r0, [sl], #1
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    6502:	bne.n	64e0 <FatFile::getName(char*, unsigned int)+0x90>
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  if (k >= n) {  // <<----------added
    k = n - 1;   // <<--------- added
    6504:	cmp	r9, r2
    6506:	it	ls
    6508:	movls	r2, r5
  }             // <<---------added
  name[k] = '\0';
    650a:	ldrb.w	r3, [sp, #4]
    650e:	strb.w	r3, [r8, r2]
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    n = lfnGetName(ldir, name, size);
    if (n == 0) {
    6512:	cmp	r2, #0
    6514:	beq.n	6470 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6516:	ldrb.w	r3, [fp]
    651a:	lsls	r3, r3, #25
    651c:	bmi.n	6538 <FatFile::getName(char*, unsigned int)+0xe8>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    651e:	adds	r6, #1
    6520:	ldrb	r3, [r7, #3]
    6522:	uxtb	r6, r6
    6524:	cmp	r3, r6
    6526:	bcs.n	649e <FatFile::getName(char*, unsigned int)+0x4e>
    6528:	b.n	6470 <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    652a:	bl	6cf8 <FatFile::getSFN(char*)>
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
  return 0;
}
    652e:	add	sp, #52	; 0x34
    6530:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    6534:	mov	r2, r3
    6536:	b.n	6504 <FatFile::getName(char*, unsigned int)+0xb4>
    6538:	mov	r0, r2
    653a:	b.n	6476 <FatFile::getName(char*, unsigned int)+0x26>

0000653c <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    653c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    6540:	ldrb	r3, [r0, #0]
    6542:	cmp	r3, #32
    6544:	bne.n	654e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    6546:	ldrb.w	r3, [r0, #1]!
    654a:	cmp	r3, #32
    654c:	beq.n	6546 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    654e:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    6550:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    6552:	cmp	r3, #0
    6554:	beq.w	6766 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    6558:	cmp	r3, #47	; 0x2f
    655a:	beq.n	65bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    655c:	cmp	r3, #92	; 0x5c
    655e:	beq.n	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6560:	sub.w	r4, r3, #34	; 0x22
    6564:	uxtb	r4, r4
    6566:	cmp	r4, #29
    6568:	bls.n	65ac <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    656a:	ldr.w	lr, [pc, #536]	; 6784 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    656e:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6570:	movs	r4, #0
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6572:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6574:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6578:	mov	r7, r6
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    657a:	beq.n	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    657c:	cmp	r5, #94	; 0x5e
    657e:	bhi.n	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6580:	ldrb.w	r3, [r6], #1
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6584:	sub.w	r5, r3, #34	; 0x22
    6588:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    658a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    658c:	cmp	r3, #0
    658e:	beq.w	6738 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    6592:	cmp	r3, #47	; 0x2f
    6594:	beq.n	65be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6596:	cmp	r3, #92	; 0x5c
    6598:	lsr.w	r7, lr, r5
    659c:	beq.n	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    659e:	cmp	r5, #29
    65a0:	bhi.n	6572 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    65a2:	lsls	r7, r7, #31
    65a4:	bpl.n	6572 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    65a6:	movs	r0, #0
    65a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    65ac:	ldr	r5, [pc, #468]	; (6784 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    65ae:	lsr.w	r4, r5, r4
    65b2:	lsls	r4, r4, #31
    65b4:	bpl.n	656a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    65b6:	movs	r0, #0
    65b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    65bc:	movs	r4, #0
    65be:	adds	r7, r0, r4
    65c0:	mov	r6, r7
    65c2:	mov	r5, r4
    65c4:	movs	r3, #47	; 0x2f
    65c6:	b.n	65ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    65c8:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    65cc:	adds	r5, #1
    65ce:	cmp	r3, #32
    65d0:	beq.n	65c8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    65d2:	cmp	r3, #47	; 0x2f
    65d4:	beq.n	65c8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    65d6:	add	r5, r0
    65d8:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    65da:	cbz	r4, 65f0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    65dc:	mov	r2, r7
    c = path[len - 1];
    65de:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    65e2:	cmp	r3, #46	; 0x2e
    65e4:	beq.n	65ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    65e6:	cmp	r3, #32
    65e8:	bne.w	673e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    65ec:	subs	r4, #1
    65ee:	bne.n	65de <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    65f0:	mov.w	r5, #4294967295
    65f4:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    65f6:	str	r3, [r1, #4]
    65f8:	add.w	r6, r1, #23
    65fc:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6600:	movs	r2, #32
    6602:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    6606:	cmp	r3, r6
    6608:	bne.n	6602 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    660a:	subs	r6, r0, #1
    660c:	movs	r2, #0
    660e:	b.n	6612 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    6610:	adds	r2, #1
    6612:	ldrb.w	r3, [r6, #1]!
    6616:	cmp	r3, #46	; 0x2e
    6618:	beq.n	6610 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    661a:	cmp	r3, #32
    661c:	beq.n	6610 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    661e:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6622:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    6624:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    6628:	beq.n	6644 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    662a:	ldrb	r7, [r0, r5]
    662c:	cmp	r7, #46	; 0x2e
    662e:	add.w	r6, r0, r5
    6632:	bne.n	663e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    6634:	b.n	6644 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    6636:	ldrb.w	r7, [r6, #-1]!
    663a:	cmp	r7, #46	; 0x2e
    663c:	beq.n	6644 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    663e:	adds.w	r5, r5, #4294967295
    6642:	bcs.n	6636 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    6644:	cmp	r2, r4
    6646:	mov.w	r9, #0
    664a:	bge.w	6770 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    664e:	mov	r6, r9
    6650:	mov	sl, r9
    6652:	movs	r7, #7
    6654:	mov.w	r8, #8
    6658:	b.n	66a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    665a:	cmp	r3, #46	; 0x2e
    665c:	beq.n	66ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    665e:	cmp	r3, #34	; 0x22
    6660:	beq.n	667a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6662:	cmp	r3, #124	; 0x7c
    6664:	beq.n	667a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6666:	sub.w	lr, r3, #42	; 0x2a
    666a:	cmp.w	lr, #5
    666e:	bls.n	6702 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6670:	sub.w	lr, r3, #58	; 0x3a
    6674:	cmp.w	lr, #5
    6678:	bhi.n	672c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    667a:	cmp	r5, r2
    667c:	beq.n	66f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    667e:	cmp	r7, r6
    6680:	bcc.n	66d6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6682:	mov.w	ip, #0
      c = '_';
    6686:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6688:	add.w	lr, r6, #1
    668c:	add.w	fp, r1, r6
    6690:	uxtb.w	r6, lr
      if (i < 7) {
    6694:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6696:	strb.w	r3, [fp, #13]
      if (i < 7) {
    669a:	bhi.n	669e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    669c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    669e:	adds	r2, #1
    66a0:	cmp	r2, r4
    66a2:	bge.n	66b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    66a4:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    66a6:	cmp	r3, #32
    66a8:	bne.n	665a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    66aa:	adds	r2, #1
    66ac:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    66ae:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    66b2:	blt.n	66a4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    66b4:	ldrb	r3, [r1, #13]
    66b6:	cmp	r3, #32
    66b8:	beq.w	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    66bc:	cmp.w	ip, #0
    66c0:	beq.n	6752 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    66c2:	tst.w	sl, r9
    66c6:	it	ne
    66c8:	movne.w	r9, #2
    66cc:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    66d0:	movs	r0, #1
    66d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    66d6:	cmp	r7, #10
    66d8:	beq.n	674a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    66da:	cmp	r5, r2
    66dc:	blt.n	674a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    66de:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    66e0:	movs	r7, #10
      i = 8;    // Place for extension.
    66e2:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    66e4:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    66e8:	mov.w	ip, #0
    66ec:	b.n	669e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    66ee:	cmp	r5, r2
    66f0:	bne.n	66aa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    66f2:	cmp	r7, #10
    66f4:	beq.n	674a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    66f6:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    66f8:	movs	r7, #10
      i = 8;    // Place for extension.
    66fa:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    66fc:	mov.w	r8, #16
    6700:	b.n	669e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6702:	cmp	r3, #45	; 0x2d
    6704:	bne.n	667a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6706:	sub.w	lr, r3, #33	; 0x21
    670a:	cmp.w	lr, #93	; 0x5d
    670e:	bhi.n	667a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6710:	cmp	r5, r2
    6712:	beq.n	66f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    6714:	cmp	r7, r6
    6716:	bcc.n	66d6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    6718:	sub.w	lr, r3, #97	; 0x61
    671c:	cmp.w	lr, #25
    6720:	bhi.n	6774 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    6722:	subs	r3, #32
    6724:	uxtb	r3, r3
        lc |= bit;
    6726:	orr.w	r9, r8, r9
    672a:	b.n	6688 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    672c:	sub.w	lr, r3, #91	; 0x5b
    6730:	cmp.w	lr, #2
    6734:	bls.n	667a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6736:	b.n	6706 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6738:	str	r7, [r2, #0]
    673a:	adds	r7, r0, r4
    673c:	b.n	65dc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    673e:	cmp	r4, #255	; 0xff
    6740:	bgt.w	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6744:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    6746:	mov	r3, r4
    6748:	b.n	65f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    674a:	ldrb	r3, [r1, #13]
    674c:	cmp	r3, #32
    674e:	beq.w	65a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6752:	ldrb	r3, [r1, #12]
    6754:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6756:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    6758:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    675a:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    675c:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    675e:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    6760:	strb	r2, [r3, #14]
    6762:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6766:	str	r0, [r2, #0]
    6768:	mov	r4, r3
    676a:	mov.w	r5, #4294967295
    676e:	b.n	65f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6770:	mov	sl, r9
    6772:	b.n	66b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    6774:	sub.w	lr, r3, #65	; 0x41
    6778:	cmp.w	lr, #25
        uc |= bit;
    677c:	it	ls
    677e:	orrls.w	sl, r8, sl
    6782:	b.n	6688 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    6784:	.word	0x35000101

00006788 <FatFile::remove()>:

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    6788:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    678c:	ldrb	r2, [r0, #2]

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    678e:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    6790:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    6792:	lsls	r2, r2, #30
    6794:	strb.w	r3, [sp, #4]
    6798:	strb.w	r3, [sp, #5]
    679c:	strb.w	r3, [sp, #6]
    67a0:	bpl.n	67e8 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    67a2:	ldr	r1, [r0, #32]
    67a4:	mov	r5, r0
    67a6:	cbnz	r1, 67f2 <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    67a8:	movs	r1, #1
    67aa:	mov	r0, r5
    67ac:	bl	52d4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    67b0:	cbz	r0, 67e8 <FatFile::remove()+0x60>
    67b2:	subs	r1, r0, #1
    67b4:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    67b8:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    67ba:	lsrs	r2, r4, #1
    67bc:	ldrb.w	r6, [r1, #1]!
    67c0:	orr.w	r3, r2, r4, lsl #7
    67c4:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    67c8:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    67ca:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    67cc:	bne.n	67ba <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    67ce:	mov.w	r8, #229	; 0xe5
    67d2:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    67d6:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    67d8:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    67da:	add.w	r0, r6, #36	; 0x24
    67de:	strb	r3, [r5, #0]
  m_flags = 0;
    67e0:	strb	r3, [r5, #2]
    67e2:	bl	38d4 <FsCache::sync()>
    67e6:	cbnz	r0, 67fe <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    67e8:	movs	r6, #0
}
    67ea:	mov	r0, r6
    67ec:	add	sp, #40	; 0x28
    67ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    67f2:	ldr	r0, [r0, #8]
    67f4:	bl	61cc <FatPartition::freeChain(unsigned long)>
    67f8:	cmp	r0, #0
    67fa:	bne.n	67a8 <FatFile::remove()+0x20>
    67fc:	b.n	67e8 <FatFile::remove()+0x60>
    67fe:	add.w	r0, r6, #564	; 0x234
    6802:	bl	38d4 <FsCache::sync()>
    6806:	cmp	r0, #0
    6808:	beq.n	67e8 <FatFile::remove()+0x60>
    680a:	ldr	r0, [r6, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    680c:	ldr	r3, [r0, #0]
    680e:	ldr	r3, [r3, #24]
    6810:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6812:	mov	r6, r0
    6814:	cmp	r0, #0
    6816:	beq.n	67e8 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    6818:	ldrb	r3, [r5, #3]
    681a:	cmp	r3, #0
    681c:	beq.n	67ea <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    681e:	add	r0, sp, #4
    6820:	mov	r1, r5
    6822:	bl	6420 <FatFile::openCluster(FatFile*)>
    6826:	cmp	r0, #0
    6828:	beq.n	67e8 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    682a:	ldrb	r3, [r5, #3]
    682c:	cmp	r3, #0
    682e:	beq.n	67e8 <FatFile::remove()+0x60>
    6830:	movs	r7, #1
    6832:	b.n	6874 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6834:	add	r0, sp, #4
    6836:	bl	58b4 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    683a:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    683c:	cmp	r0, #0
    683e:	beq.n	67e8 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6840:	ldrb	r2, [r0, #11]
    6842:	cmp	r2, #15
    6844:	bne.n	67e8 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    6846:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6848:	and.w	r1, r2, #31
    684c:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    684e:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6850:	bne.n	67e8 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    6852:	ldrb	r3, [r0, #13]
    6854:	cmp	r3, r4
    6856:	bne.n	67e8 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    6858:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    685c:	ldr	r1, [r5, #8]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    685e:	ldrb.w	r3, [r1, #36]	; 0x24
    6862:	orr.w	r3, r3, #1
    6866:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    686a:	lsls	r3, r2, #25
    686c:	bmi.n	6888 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    686e:	ldrb	r3, [r5, #3]
    6870:	cmp	r3, r7
    6872:	bcc.n	67e8 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6874:	ldrh	r1, [r5, #4]
    6876:	subs	r1, r1, r7
    6878:	lsls	r1, r1, #5
    687a:	add	r0, sp, #4
    687c:	bl	5b24 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6880:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6882:	cmp	r0, #0
    6884:	bne.n	6834 <FatFile::remove()+0xac>
    6886:	b.n	67e8 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    6888:	ldr	r4, [r5, #8]
    688a:	add.w	r0, r4, #36	; 0x24
    688e:	bl	38d4 <FsCache::sync()>
    6892:	cmp	r0, #0
    6894:	beq.n	67e8 <FatFile::remove()+0x60>
    6896:	add.w	r0, r4, #564	; 0x234
    689a:	bl	38d4 <FsCache::sync()>
    689e:	cmp	r0, #0
    68a0:	beq.n	67e8 <FatFile::remove()+0x60>
    68a2:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    68a4:	ldr	r3, [r0, #0]
    68a6:	ldr	r3, [r3, #24]
    68a8:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    68aa:	cmp	r0, #0
    68ac:	beq.n	67e8 <FatFile::remove()+0x60>
    68ae:	b.n	67ea <FatFile::remove()+0x62>

000068b0 <FatFile::lfnUniqueSfn(fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    68b0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    68b4:	ldrb	r7, [r1, #12]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    68b6:	mov	r6, r1
    68b8:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    68ba:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    68be:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    68c2:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    68c6:	ldr	r0, [r6, #4]
    68c8:	ldr	r1, [r6, #8]
    68ca:	add.w	r3, r8, r0
    68ce:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    68d0:	cbz	r0, 68e4 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    68d2:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    68d4:	ldrb.w	r2, [r1], #1
    68d8:	add.w	r3, r3, r3, lsl #5
    68dc:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    68de:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    68e0:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    68e2:	bne.n	68d4 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    68e4:	cmp	r7, #3
    68e6:	it	cs
    68e8:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    68ea:	adds	r2, r7, #4
    68ec:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    68ee:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    68f2:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    68f4:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    68f6:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    68f8:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    68fa:	ite	ls
    68fc:	addls	r1, #48	; 0x30
    68fe:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6900:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    6902:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6906:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6908:	bcc.n	68ee <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    690a:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    690c:	movs	r1, #0
    690e:	strb.w	r9, [r3, #13]
    6912:	mov	r0, r4
    6914:	bl	5b24 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    6918:	movs	r1, #1
    691a:	mov	r0, r4
    691c:	bl	58b4 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6920:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    6922:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6924:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    6926:	cbz	r0, 6954 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6928:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    692c:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    692e:	cmp.w	lr, #0
    6932:	beq.n	6960 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6934:	ldrb	r3, [r3, #11]
    6936:	lsls	r3, r3, #28
    6938:	bmi.n	6918 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    693a:	bl	c090 <memcmp>
    693e:	cmp	r0, #0
    6940:	bne.n	6918 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    6942:	add.w	r8, r8, #1
    6946:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    694a:	cmp.w	r8, #100	; 0x64
    694e:	bne.n	68c6 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
 fail:
  return false;

 done:
  return true;
}
    6950:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    6954:	ldrb	r0, [r4, #1]
    6956:	clz	r0, r0
    695a:	lsrs	r0, r0, #5
    695c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

 fail:
  return false;

 done:
  return true;
    6960:	movs	r0, #1
    6962:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6966:	nop

00006968 <FatFile::open(FatFile*, fname_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6968:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    696c:	ldrb	r4, [r1, #0]
    696e:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6972:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6974:	beq.n	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6976:	ldrb	r4, [r0, #0]
    6978:	cbz	r4, 6982 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    697a:	movs	r0, #0
}
    697c:	add	sp, #52	; 0x34
    697e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6982:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    6984:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6988:	lsls	r4, r4, #30
    698a:	bne.n	6a12 <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    698c:	mov.w	r8, #1
    6990:	mov	r6, r1
    6992:	mov	fp, r2
    6994:	str	r0, [sp, #36]	; 0x24
    6996:	movs	r1, #0
    6998:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    699a:	mov	r7, r1
    699c:	str	r3, [sp, #28]
    699e:	bl	5b24 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    69a2:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    69a6:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    69a8:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    69aa:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    69ac:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    69ae:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    69b0:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    69b2:	movs	r1, #1
    69b4:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    69b6:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    69b8:	bl	58b4 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    69bc:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    69c0:	mov	r3, r0
    69c2:	cmp	r0, #0
    69c4:	beq.w	6ae0 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    69c8:	ldrb	r2, [r0, #0]
    69ca:	cmp	r2, #229	; 0xe5
    69cc:	beq.n	6a44 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    69ce:	cmp	r2, #0
    69d0:	beq.n	6a44 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    69d2:	cmp	r4, r8
    69d4:	it	cc
    69d6:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    69d8:	cmp	r2, #46	; 0x2e
    69da:	beq.n	6a3e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    69dc:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    69de:	cmp	r1, #15
    69e0:	beq.n	6a60 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    69e2:	and.w	r1, r1, #8
    69e6:	and.w	r2, r1, #255	; 0xff
    69ea:	cbnz	r1, 6a3e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    69ec:	cmp.w	r9, #0
    69f0:	bne.w	6cb4 <FatFile::open(FatFile*, fname_t*, int)+0x34c>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    69f4:	mov	r0, r3
    69f6:	movs	r2, #11
    69f8:	ldr	r1, [sp, #16]
    69fa:	bl	c090 <memcmp>
    69fe:	cmp	r0, #0
    6a00:	bne.n	69b2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    6a02:	ldrb.w	r3, [fp]
    6a06:	lsls	r0, r3, #31
    6a08:	bpl.w	6cdc <FatFile::open(FatFile*, fname_t*, int)+0x374>
          goto found;
        }
        fnameFound = true;
    6a0c:	movs	r3, #1
    6a0e:	str	r3, [sp, #20]
    6a10:	b.n	69b2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6a12:	ldr	r5, [pc, #732]	; (6cf0 <FatFile::open(FatFile*, fname_t*, int)+0x388>)
    6a14:	add.w	r4, sl, #12
    6a18:	umull	r4, r8, r5, r4
    6a1c:	mov.w	r8, r8, lsr #2
    6a20:	add.w	r8, r8, #1
    6a24:	uxtb.w	r8, r8
    6a28:	b.n	6990 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    6a2a:	ldr	r1, [sp, #12]
    6a2c:	subs	r1, #1
    6a2e:	uxtb	r1, r1
    6a30:	cmp	r2, r1
    6a32:	str	r1, [sp, #12]
    6a34:	bne.n	6a3e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6a36:	ldrb	r2, [r3, #13]
    6a38:	ldr	r1, [sp, #24]
    6a3a:	cmp	r1, r2
    6a3c:	beq.n	6a76 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6a3e:	mov.w	r9, #0
    6a42:	b.n	69b2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6a44:	cmp	r4, #0
    6a46:	it	eq
    6a48:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    6a4a:	cmp	r4, r8
        freeFound++;
    6a4c:	itt	cc
    6a4e:	addcc	r4, #1
    6a50:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6a52:	cmp	r2, #0
    6a54:	beq.n	6ae8 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6a56:	cmp	r2, #229	; 0xe5
    6a58:	bne.n	69d8 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6a5a:	mov.w	r9, #0
    6a5e:	b.n	69b2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    6a60:	cmp.w	r9, #0
    6a64:	bne.n	6a2a <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    6a66:	lsls	r5, r2, #25
    6a68:	bpl.n	69b2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6a6a:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    6a6e:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6a70:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    6a74:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6a76:	ldr	r2, [sp, #12]
    6a78:	subs	r2, #1
    6a7a:	add.w	r5, r2, r2, lsl #1
    6a7e:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    6a82:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6a84:	mov	r2, r5
      if (k >= len) {
    6a86:	bls.n	6a3e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6a88:	add.w	r1, r5, #13
    6a8c:	str.w	r9, [sp, #32]
    6a90:	mov	r9, r1
    6a92:	b.n	6abc <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6a94:	ldr.w	r0, [fp, #8]
    6a98:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6a9a:	cmp.w	ip, #25
    6a9e:	it	ls
    6aa0:	addls	r1, #32
    6aa2:	sub.w	r0, r2, #65	; 0x41
    6aa6:	it	ls
    6aa8:	uxtbls	r1, r1
    6aaa:	cmp	r0, #25
    6aac:	itt	ls
    6aae:	addls	r2, #32
    6ab0:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6ab2:	cmp	r1, r2
    6ab4:	bne.n	6a3e <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    6ab6:	cmp	lr, r9
    6ab8:	beq.n	6b40 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    6aba:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    6abc:	subs	r1, r2, r5
    6abe:	uxtb	r1, r1
    6ac0:	mov	r0, r3
    6ac2:	bl	63d4 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6ac6:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6ac8:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6aca:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6ace:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6ad2:	beq.w	6ca6 <FatFile::open(FatFile*, fname_t*, int)+0x33e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6ad6:	cmp	r0, #255	; 0xff
    6ad8:	bls.n	6a94 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6ada:	mov.w	r9, #0
    6ade:	b.n	69b2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    6ae0:	ldrb	r3, [r6, #1]
    6ae2:	cmp	r3, #0
    6ae4:	bne.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6ae8:	ldr	r2, [sp, #28]
    6aea:	mov	r3, r2
    6aec:	lsls	r2, r3, #22
    6aee:	bpl.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6af2:	and.w	r3, r3, #3
    6af6:	subs	r3, #1
    6af8:	cmp	r3, #1
    6afa:	bhi.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    6afe:	cmp	r4, #0
    6b00:	it	eq
    6b02:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6b04:	cmp	r4, r8
    6b06:	bcc.n	6b10 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    6b08:	b.n	6b46 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6b0a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6b0c:	cmp	r8, r4
    6b0e:	bls.n	6b46 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    6b10:	movs	r1, #0
    6b12:	mov	r0, r6
    6b14:	bl	58b4 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6b18:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    6b1a:	cmp	r0, #0
    6b1c:	bne.n	6b0a <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    6b1e:	ldrb	r3, [r6, #1]
    6b20:	cbz	r3, 6b2c <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    6b22:	b.n	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6b24:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    6b26:	ldrb	r3, [r3, #4]
    6b28:	cmp	r3, #1
    6b2a:	bhi.n	6b46 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6b2c:	cmp	r8, r4
    6b2e:	bls.n	6b46 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6b30:	mov	r0, r6
    6b32:	bl	523c <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    6b36:	adds	r4, #16
    6b38:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    6b3a:	cmp	r0, #0
    6b3c:	bne.n	6b24 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    6b3e:	b.n	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6b40:	ldr.w	r9, [sp, #32]
    6b44:	b.n	69b2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    6b46:	ldr	r3, [sp, #20]
    6b48:	cbz	r3, 6b58 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    6b4a:	mov	r1, fp
    6b4c:	mov	r0, r6
    6b4e:	bl	68b0 <FatFile::lfnUniqueSfn(fname_t*)>
    6b52:	cmp	r0, #0
    6b54:	beq.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    6b58:	lsls	r1, r7, #5
    6b5a:	mov	r0, r6
    6b5c:	bl	5b24 <FatFile::seekSet(unsigned long)>
    6b60:	cmp	r0, #0
    6b62:	beq.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    6b66:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    6b6a:	ands.w	r9, r8, #255	; 0xff
    6b6e:	beq.n	6c24 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b70:	orr.w	r4, r9, #64	; 0x40
    6b74:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6b76:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    6b78:	movs	r7, #0
    6b7a:	movs	r1, #0
    6b7c:	mov	r0, r6
    6b7e:	bl	58b4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6b82:	cmp	r0, #0
    6b84:	beq.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6b88:	ldr	r2, [r6, #8]
    6b8a:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b8e:	cmp	r9, r5
    6b90:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6b94:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6b98:	ite	ne
    6b9a:	movne	r1, r5
    6b9c:	moveq	r1, r4
    6b9e:	strb.w	r3, [r2, #36]	; 0x24
    6ba2:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6ba6:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    6baa:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6bac:	strb	r1, [r0, #0]
    6bae:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    6bb2:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6bb4:	ldrb.w	r8, [lr, #1]!
    6bb8:	lsrs	r2, r3, #1
    6bba:	orr.w	r3, r2, r3, lsl #7
    6bbe:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6bc2:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6bc4:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6bc6:	bne.n	6bb4 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6bc8:	and.w	r1, r1, #31
    6bcc:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6bce:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6bd0:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6bd4:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6bd8:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6bda:	add.w	r2, r1, r2, lsl #2
    6bde:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    6be0:	movs	r3, #0
    6be2:	b.n	6c04 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6be4:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6be6:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6bea:	bls.n	6c16 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6bec:	cmp	r3, #10
    6bee:	ite	ls
    6bf0:	strhls	r1, [r0, #0]
    6bf2:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6bf4:	adds	r3, #1
    6bf6:	uxtb	r3, r3
    6bf8:	cmp	r3, #13
    6bfa:	add.w	r2, r2, #1
    6bfe:	add.w	r0, r0, #2
    6c02:	beq.n	6c1c <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6c04:	cmp	sl, r2
    6c06:	bhi.n	6be4 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    6c08:	ite	ne
    6c0a:	movne.w	r1, #4294967295
    6c0e:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6c10:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6c12:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6c14:	bhi.n	6bec <FatFile::open(FatFile*, fname_t*, int)+0x284>
    6c16:	strh.w	r1, [r0, #-3]
    6c1a:	b.n	6bf4 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6c1c:	subs	r5, #1
    6c1e:	ands.w	r5, r5, #255	; 0xff
    6c22:	bne.n	6b7a <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    6c24:	movs	r1, #0
    6c26:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6c28:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    6c2a:	bl	58b4 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6c2e:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    6c32:	mov	r4, r0
    6c34:	cmp	r0, #0
    6c36:	beq.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    6c3a:	movs	r2, #32
    6c3c:	movs	r1, #0
    6c3e:	bl	c1bc <memset>
  memcpy(dir->name, fname->sfn, 11);
    6c42:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    6c44:	ldr	r2, [pc, #172]	; (6cf4 <FatFile::open(FatFile*, fname_t*, int)+0x38c>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    6c46:	ldr.w	r1, [r3, #13]!
    6c4a:	ldr	r0, [r3, #4]
    6c4c:	str	r0, [r4, #4]
    6c4e:	str	r1, [r4, #0]
    6c50:	ldrh	r1, [r3, #8]
    6c52:	ldrb	r3, [r3, #10]
    6c54:	strb	r3, [r4, #10]
    6c56:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6c58:	ldrb.w	r3, [fp]

  // Set timestamps.
  if (FsDateTime::callback) {
    6c5c:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6c5e:	and.w	r3, r3, #24
    6c62:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    6c64:	cmp	r7, #0
    6c66:	beq.n	6ce4 <FatFile::open(FatFile*, fname_t*, int)+0x37c>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    6c68:	add.w	r2, sp, #43	; 0x2b
    6c6c:	add.w	r1, sp, #46	; 0x2e
    6c70:	add	r0, sp, #44	; 0x2c
    6c72:	blx	r7
    6c74:	ldrh.w	r1, [sp, #44]	; 0x2c
    6c78:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    6c7c:	ldrb.w	r3, [sp, #43]	; 0x2b
    6c80:	strh	r1, [r4, #16]
    6c82:	strh	r2, [r4, #14]
    6c84:	strb	r3, [r4, #13]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6c86:	ldr	r2, [r6, #8]
    6c88:	ldrb.w	r3, [r2, #36]	; 0x24
    6c8c:	orr.w	r3, r3, #1
    6c90:	strb.w	r3, [r2, #36]	; 0x24

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6c94:	str.w	r9, [sp]
    6c98:	ldr	r3, [sp, #28]
    6c9a:	ldr	r0, [sp, #36]	; 0x24
    6c9c:	mov	r2, r5
    6c9e:	mov	r1, r6
    6ca0:	bl	5bd4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6ca4:	b.n	697c <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6ca6:	cmp	r0, #0
    6ca8:	ldr.w	r9, [sp, #32]
    6cac:	it	ne
    6cae:	movne.w	r9, #0
    6cb2:	b.n	69b2 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6cb4:	ldr	r1, [sp, #12]
    6cb6:	cmp	r1, #1
    6cb8:	bne.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6cbc:	subs	r4, r3, #1
    6cbe:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6cc0:	ldrb.w	r0, [r4, #1]!
    6cc4:	lsrs	r1, r2, #1
    6cc6:	orr.w	r2, r1, r2, lsl #7
    6cca:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6cce:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6cd0:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6cd2:	bne.n	6cc0 <FatFile::open(FatFile*, fname_t*, int)+0x358>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6cd4:	ldr	r3, [sp, #24]
    6cd6:	cmp	r3, r2
    6cd8:	bne.w	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6cdc:	ldr	r3, [sp, #28]
    6cde:	lsls	r1, r3, #20
    6ce0:	bpl.n	6c94 <FatFile::open(FatFile*, fname_t*, int)+0x32c>
    6ce2:	b.n	697a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6ce4:	movw	r3, #21025	; 0x5221
    6ce8:	strh	r3, [r4, #16]
    6cea:	strh	r3, [r4, #24]
    6cec:	strh	r3, [r4, #18]
    6cee:	b.n	6c86 <FatFile::open(FatFile*, fname_t*, int)+0x31e>
    6cf0:	.word	0x4ec4ec4f
    6cf4:	.word	0x20019a10

00006cf8 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name) {
    6cf8:	push	{r3, r4, r5, r6, r7, lr}
    6cfa:	ldrb	r3, [r0, #0]
    6cfc:	mov	r5, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t* dir;

  if (!isOpen()) {
    6cfe:	cbz	r3, 6d12 <FatFile::getSFN(char*)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6d00:	ands.w	r4, r3, #96	; 0x60
    6d04:	beq.n	6d18 <FatFile::getSFN(char*)+0x20>
    name[0] = '/';
    6d06:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    6d08:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    6d0a:	strb	r2, [r1, #0]
    name[1] = '\0';
    6d0c:	strb	r3, [r1, #1]
    return 1;
    6d0e:	movs	r0, #1
    6d10:	pop	{r3, r4, r5, r6, r7, pc}
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    6d12:	movs	r0, #0
    6d14:	strb	r0, [r5, #0]
  return 0;
}
    6d16:	pop	{r3, r4, r5, r6, r7, pc}
    name[0] = '/';
    name[1] = '\0';
    return 1;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FsCache::CACHE_FOR_READ));
    6d18:	mov	r1, r4
    6d1a:	bl	52d4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6d1e:	cmp	r0, #0
    6d20:	beq.n	6d12 <FatFile::getSFN(char*)+0x1a>
    6d22:	mov	r1, r4
    6d24:	mov	r3, r4
    6d26:	movs	r7, #8
    6d28:	subs	r4, r0, #1
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    6d2a:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    6d2e:	ldrb.w	r2, [r4, #1]!
    6d32:	cmp	r2, #32
    6d34:	beq.n	6d52 <FatFile::getSFN(char*)+0x5a>
      continue;
    }
    if (i == 8) {
    6d36:	cmp	r1, #8
    6d38:	beq.n	6d60 <FatFile::getSFN(char*)+0x68>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6d3a:	sub.w	r6, r2, #65	; 0x41
    6d3e:	cmp	r6, #25
    6d40:	bhi.n	6d4c <FatFile::getSFN(char*)+0x54>
    6d42:	ldrb	r6, [r0, #12]
    6d44:	tst	r7, r6
      c += 'a' - 'A';
    6d46:	itt	ne
    6d48:	addne	r2, #32
    6d4a:	uxtbne	r2, r2
    }
    name[j++] = c;
    6d4c:	strb	r2, [r5, r3]
    6d4e:	adds	r3, #1
    6d50:	uxtb	r3, r3
    6d52:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    6d54:	cmp	r1, #11
    6d56:	bne.n	6d2e <FatFile::getSFN(char*)+0x36>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = '\0';
    6d58:	movs	r2, #0
    6d5a:	strb	r2, [r5, r3]
  return j;
    6d5c:	mov	r0, r3
    6d5e:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    6d60:	strb.w	lr, [r5, r3]
    6d64:	adds	r3, #1
    6d66:	uxtb	r3, r3
    6d68:	ldrb	r2, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    6d6a:	movs	r7, #16
    6d6c:	b.n	6d3a <FatFile::getSFN(char*)+0x42>
    6d6e:	nop

00006d70 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6d70:	push	{r3, r4, r5, r6, r7, lr}
    6d72:	movs	r5, #0
    6d74:	str	r5, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6d76:	ldr	r4, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    6d78:	str	r5, [r0, #60]	; 0x3c
    6d7a:	mov	r6, r0
    6d7c:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    6d7e:	cbz	r4, 6da4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    6d80:	mov	r1, r0
    6d82:	movs	r0, #36	; 0x24
    6d84:	bl	6fe0 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    6d88:	strb	r5, [r0, #0]
    6d8a:	strb	r5, [r0, #1]
    6d8c:	strb	r5, [r0, #2]
    6d8e:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    6d90:	ldr	r5, [r7, #56]	; 0x38
    6d92:	mov	r4, r0
    6d94:	ldmia	r5!, {r0, r1, r2, r3}
    6d96:	stmia	r4!, {r0, r1, r2, r3}
    6d98:	ldmia	r5!, {r0, r1, r2, r3}
    6d9a:	stmia	r4!, {r0, r1, r2, r3}
    6d9c:	ldr	r3, [r5, #0]
    6d9e:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    6da0:	mov	r0, r6
    6da2:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    6da4:	ldr	r3, [r1, #60]	; 0x3c
    6da6:	cmp	r3, #0
    6da8:	beq.n	6da0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    6daa:	mov	r1, r0
    6dac:	movs	r0, #56	; 0x38
    6dae:	bl	6fe0 <operator new(unsigned int, unsigned long*)>
    6db2:	strb.w	r4, [r0, #49]	; 0x31
    6db6:	strb.w	r4, [r0, #50]	; 0x32
    6dba:	strb.w	r4, [r0, #51]	; 0x33
    6dbe:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    6dc0:	ldr	r3, [r7, #60]	; 0x3c
    6dc2:	mov	r2, r0
    6dc4:	add.w	r1, r3, #48	; 0x30
    6dc8:	ldr	r5, [r3, #0]
    6dca:	ldr	r4, [r3, #4]
    6dcc:	ldr	r0, [r3, #8]
    6dce:	ldr	r7, [r3, #12]
    6dd0:	str	r7, [r2, #12]
    6dd2:	adds	r3, #16
    6dd4:	cmp	r3, r1
    6dd6:	str	r5, [r2, #0]
    6dd8:	str	r4, [r2, #4]
    6dda:	str	r0, [r2, #8]
    6ddc:	add.w	r2, r2, #16
    6de0:	bne.n	6dc8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    6de2:	ldr	r3, [r3, #0]
    6de4:	str	r3, [r2, #0]
    6de6:	b.n	6da0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00006de8 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6de8:	push	{r4, lr}
    6dea:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    6dec:	ldr	r0, [r0, #56]	; 0x38
    6dee:	cbz	r0, 6dfc <FsBaseFile::close()+0x14>
    6df0:	bl	5388 <FatFile::close()>
    6df4:	cbz	r0, 6dfc <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    6df6:	movs	r3, #0
    6df8:	str	r3, [r4, #56]	; 0x38
    return true;
    6dfa:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    6dfc:	ldr	r0, [r4, #60]	; 0x3c
    6dfe:	cbz	r0, 6e0c <FsBaseFile::close()+0x24>
    6e00:	bl	38e4 <ExFatFile::close()>
    6e04:	cbz	r0, 6e0c <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    6e06:	movs	r3, #0
    6e08:	str	r3, [r4, #60]	; 0x3c
    6e0a:	pop	{r4, pc}
    return true;
  }
  return false;
    6e0c:	movs	r0, #0
}
    6e0e:	pop	{r4, pc}

00006e10 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    6e10:	cbz	r1, 6e86 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    6e12:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e16:	mov	r4, r1
    6e18:	mov	r5, r0
    6e1a:	mov	r8, r3
    6e1c:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    6e1e:	bl	6de8 <FsBaseFile::close()>
  if (vol->m_fVol) {
    6e22:	ldr.w	r6, [r4, #1152]	; 0x480
    6e26:	cbz	r6, 6e54 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    6e28:	mov	r1, r5
    6e2a:	movs	r0, #36	; 0x24
    6e2c:	bl	6fe0 <operator new(unsigned int, unsigned long*)>
    6e30:	movs	r1, #0
    6e32:	strb	r1, [r0, #0]
    6e34:	strb	r1, [r0, #1]
    6e36:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6e38:	ldr.w	r1, [r4, #1152]	; 0x480
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    6e3c:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6e3e:	mov	r3, r8
    6e40:	mov	r2, r7
    6e42:	bl	567c <FatFile::open(FatVolume*, char const*, int)>
    6e46:	cbz	r0, 6e4e <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    6e48:	movs	r0, #1
    6e4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    6e4e:	str	r0, [r5, #56]	; 0x38
    6e50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    6e54:	ldr.w	r3, [r4, #1156]	; 0x484
    6e58:	cbz	r3, 6e8a <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    6e5a:	mov	r1, r5
    6e5c:	movs	r0, #56	; 0x38
    6e5e:	bl	6fe0 <operator new(unsigned int, unsigned long*)>
    6e62:	strb.w	r6, [r0, #49]	; 0x31
    6e66:	strb.w	r6, [r0, #50]	; 0x32
    6e6a:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6e6e:	ldr.w	r1, [r4, #1156]	; 0x484
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    6e72:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6e74:	mov	r3, r8
    6e76:	mov	r2, r7
    6e78:	bl	4248 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6e7c:	cmp	r0, #0
    6e7e:	bne.n	6e48 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    6e80:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    6e82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6e86:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    6e88:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6e8a:	movs	r0, #0
    6e8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006e90 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    6e90:	push	{r3, r4, r5, r6, r7, lr}
    6e92:	mov	r5, r1
    6e94:	mov	r7, r2
    6e96:	mov	r4, r0
  close();
    6e98:	bl	6de8 <FsBaseFile::close()>
  if (dir->m_fFile) {
    6e9c:	ldr	r6, [r5, #56]	; 0x38
    6e9e:	cbz	r6, 6ec4 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    6ea0:	mov	r1, r4
    6ea2:	movs	r0, #36	; 0x24
    6ea4:	bl	6fe0 <operator new(unsigned int, unsigned long*)>
    6ea8:	movs	r2, #0
    6eaa:	strb	r2, [r0, #0]
    6eac:	strb	r2, [r0, #1]
    6eae:	strb	r2, [r0, #2]
    6eb0:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    6eb2:	mov	r2, r7
    6eb4:	ldr	r1, [r5, #56]	; 0x38
    6eb6:	bl	5cac <FatFile::openNext(FatFile*, int)>
    6eba:	cbz	r0, 6ec0 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    6ebc:	movs	r0, #1
    6ebe:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    6ec0:	str	r0, [r4, #56]	; 0x38
    6ec2:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    6ec4:	ldr	r0, [r5, #60]	; 0x3c
    6ec6:	cbz	r0, 6eec <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    6ec8:	mov	r1, r4
    6eca:	movs	r0, #56	; 0x38
    6ecc:	bl	6fe0 <operator new(unsigned int, unsigned long*)>
    6ed0:	strb.w	r6, [r0, #49]	; 0x31
    6ed4:	strb.w	r6, [r0, #50]	; 0x32
    6ed8:	strb.w	r6, [r0, #51]	; 0x33
    6edc:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    6ede:	mov	r2, r7
    6ee0:	ldr	r1, [r5, #60]	; 0x3c
    6ee2:	bl	4258 <ExFatFile::openNext(ExFatFile*, int)>
    6ee6:	cmp	r0, #0
    6ee8:	bne.n	6ebc <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    6eea:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    6eec:	pop	{r3, r4, r5, r6, r7, pc}
    6eee:	nop

00006ef0 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6ef0:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6ef2:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6ef4:	mov	r4, r0
  m_blockDev = blockDev;
    6ef6:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    6efa:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    6efe:	mov	r1, r0
    6f00:	mov.w	r0, #1152	; 0x480
    6f04:	bl	6fe0 <operator new(unsigned int, unsigned long*)>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    6f08:	strb.w	r6, [r0, #1092]	; 0x444
    6f0c:	strb.w	r6, [r0, #1145]	; 0x479
    6f10:	strb.w	r6, [r0, #1146]	; 0x47a
    6f14:	strb.w	r6, [r0, #1147]	; 0x47b
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6f18:	movs	r2, #1
    6f1a:	ldr.w	r1, [r4, #1160]	; 0x488
    6f1e:	str.w	r0, [r4, #1156]	; 0x484
    6f22:	mov	r5, r0
    6f24:	bl	4648 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    6f28:	cbnz	r0, 6f66 <FsVolume::begin(BlockDeviceInterface*)+0x76>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6f2a:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6f2c:	mov	r1, r4
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6f2e:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    6f32:	mov.w	r0, #1128	; 0x468
    6f36:	bl	6fe0 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    6f3a:	strb	r6, [r0, #7]
    6f3c:	strb.w	r6, [r0, #1092]	; 0x444
    6f40:	strb.w	r6, [r0, #1093]	; 0x445
    6f44:	strb.w	r6, [r0, #1094]	; 0x446
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6f48:	movs	r2, #1
    6f4a:	ldr.w	r1, [r4, #1160]	; 0x488
    6f4e:	str.w	r0, [r4, #1152]	; 0x480
    6f52:	mov	r5, r0
    6f54:	bl	62b8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6f58:	cbnz	r0, 6f8a <FsVolume::begin(BlockDeviceInterface*)+0x9a>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    6f5a:	ldr	r3, [pc, #80]	; (6fac <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
    6f5c:	movs	r0, #0
    6f5e:	str	r0, [r3, #0]
  m_fVol = nullptr;
    6f60:	str.w	r0, [r4, #1152]	; 0x480
  return false;

 done:
  m_cwv = this;
  return true;
}
    6f64:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6f66:	add.w	r6, r5, #1096	; 0x448
    6f6a:	mov	r0, r6
    6f6c:	bl	38e4 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    6f70:	mov	r1, r5
    6f72:	mov	r0, r6
    6f74:	bl	39a8 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6f78:	cmp	r0, #0
    6f7a:	beq.n	6f2a <FsVolume::begin(BlockDeviceInterface*)+0x3a>
      return false;
    }
    if (setCwv || !m_cwv) {
    6f7c:	ldr	r3, [pc, #48]	; (6fb0 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    6f7e:	ldr	r2, [r3, #0]
    6f80:	cbz	r2, 6fa8 <FsVolume::begin(BlockDeviceInterface*)+0xb8>
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6f82:	ldr	r3, [pc, #40]	; (6fac <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
  return true;
    6f84:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    6f86:	str	r4, [r3, #0]
  return true;
    6f88:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    6f8a:	addw	r6, r5, #1092	; 0x444
    6f8e:	mov	r0, r6
    6f90:	bl	5388 <FatFile::close()>
    return m_vwd.openRoot(this);
    6f94:	mov	r1, r5
    6f96:	mov	r0, r6
    6f98:	bl	568c <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    6f9c:	cmp	r0, #0
    6f9e:	beq.n	6f5a <FsVolume::begin(BlockDeviceInterface*)+0x6a>
      return false;
    }
    if (setCwv || !m_cwv) {
    6fa0:	ldr	r3, [pc, #16]	; (6fb4 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
    6fa2:	ldr	r2, [r3, #0]
    6fa4:	cmp	r2, #0
    6fa6:	bne.n	6f82 <FsVolume::begin(BlockDeviceInterface*)+0x92>
      m_cwv = this;
    6fa8:	str	r5, [r3, #0]
    6faa:	b.n	6f82 <FsVolume::begin(BlockDeviceInterface*)+0x92>
    6fac:	.word	0x20019a1c
    6fb0:	.word	0x20019a14
    6fb4:	.word	0x20019a18

00006fb8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    6fb8:	push	{r3, r4, r5, r6, r7, lr}
    6fba:	movs	r5, #0
    6fbc:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6fc0:	ldr	r6, [pc, #24]	; (6fdc <FsVolume::open(char const*, int)+0x24>)
    6fc2:	str	r7, [r0, #8]
    6fc4:	mov	r4, r0
    6fc6:	strb	r5, [r0, #4]
    6fc8:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    6fca:	str	r5, [r0, #72]	; 0x48
    6fcc:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6fce:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    6fd2:	bl	6e10 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    6fd6:	mov	r0, r4
    6fd8:	pop	{r3, r4, r5, r6, r7, pc}
    6fda:	nop
    6fdc:	.word	0x00012e28

00006fe0 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    6fe0:	mov	r0, r1
    6fe2:	bx	lr

00006fe4 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6fe4:	ldrb	r0, [r0, #19]
    6fe6:	bx	lr

00006fe8 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6fe8:	ldrb	r0, [r0, #21]
    6fea:	bx	lr

00006fec <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    6fec:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6fee:	ldr	r4, [r0, #0]
    6ff0:	ldr	r4, [r4, #16]
    6ff2:	movs	r3, #1
    6ff4:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    6ff6:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6ffa:	bx	ip

00006ffc <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6ffc:	ldrb	r0, [r0, #22]
    6ffe:	bx	lr

00007000 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    7000:	bx	lr
    7002:	nop

00007004 <SdSpiCard::~SdSpiCard()>:
    7004:	push	{r4, lr}
    7006:	movs	r1, #24
    7008:	mov	r4, r0
    700a:	bl	ab80 <operator delete(void*, unsigned int)>
    700e:	mov	r0, r4
    7010:	pop	{r4, pc}
    7012:	nop

00007014 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    7014:	push	{r4, lr}
    7016:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    7018:	adds	r0, #4
    701a:	bl	8824 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    701e:	ldrb	r0, [r4, #18]
    7020:	movs	r1, #0
    7022:	bl	89a4 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    7026:	movs	r3, #1
    7028:	strb	r3, [r4, #20]
    702a:	pop	{r4, pc}

0000702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    702c:	push	{r3, r4, r5, lr}
    702e:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7030:	movs	r1, #1
    7032:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7034:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7036:	bl	89a4 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    703a:	mov	r0, r5
    703c:	movs	r1, #255	; 0xff
    703e:	bl	8938 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    7042:	mov	r0, r5
    7044:	bl	88b4 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7048:	movs	r3, #0
    704a:	strb	r3, [r4, #20]
    704c:	pop	{r3, r4, r5, pc}
    704e:	nop

00007050 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7050:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7054:	mov	r6, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7056:	ldrb	r1, [r0, #16]
    7058:	cmp	r1, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    705a:	mov	r5, r0
    705c:	mov	r4, r2
    705e:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7060:	beq.n	70a6 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    if (!writeStart(sector)) {
    7062:	ldr	r3, [r5, #0]
    7064:	mov	r1, r6
    7066:	ldr	r3, [r3, #72]	; 0x48
    7068:	mov	r0, r5
    706a:	blx	r3
    706c:	cbz	r0, 7092 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    706e:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    7070:	str	r6, [r5, #12]
    m_curState = WRITE_STATE;
    7072:	strb	r3, [r5, #16]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7074:	movs	r6, #0
    7076:	cbnz	r7, 707e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    7078:	b.n	70ae <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    707a:	cmp	r7, r6
    707c:	beq.n	70ae <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    if (!writeData(src)) {
    707e:	ldr	r3, [r5, #0]
    7080:	mov	r1, r4
    7082:	ldr	r3, [r3, #68]	; 0x44
    7084:	mov	r0, r5
    7086:	blx	r3
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7088:	adds	r6, #1
    708a:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    708e:	cmp	r0, #0
    7090:	bne.n	707a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7092:	ldrb	r0, [r5, #20]
    7094:	cbnz	r0, 709a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    7096:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    709a:	mov	r0, r5
    709c:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
    70a0:	movs	r0, #0
}
    70a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    70a6:	ldr	r3, [r0, #12]
    70a8:	cmp	r3, r6
    70aa:	bne.n	7062 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    70ac:	b.n	7074 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    70ae:	ldr	r3, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    70b0:	ldrb	r2, [r5, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    70b2:	add	r7, r3
    70b4:	str	r7, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    70b6:	cbnz	r2, 70be <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6e>
    70b8:	movs	r0, #1
    70ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70be:	ldr	r3, [r5, #0]
    70c0:	mov	r0, r5
    70c2:	ldr	r3, [r3, #24]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    70c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    70c8:	bx	r3
    70ca:	nop

000070cc <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    70cc:	push	{r3, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    70ce:	ldrb	r3, [r0, #16]
    70d0:	cmp	r3, #1
    70d2:	beq.n	7116 <SdSpiCard::isBusy()+0x4a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
  bool spiActive = m_spiActive;
    70d4:	ldrb	r7, [r0, #20]
    70d6:	mov	r5, r0
  if (!spiActive) {
    70d8:	cbz	r7, 7106 <SdSpiCard::isBusy()+0x3a>
    70da:	adds	r6, r5, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    70dc:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    70de:	mov	r0, r6
    70e0:	bl	88fc <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    70e4:	cmp	r0, #255	; 0xff
    70e6:	add.w	r3, r4, #4294967295
    70ea:	beq.n	70fe <SdSpiCard::isBusy()+0x32>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    70ec:	ands.w	r4, r3, #255	; 0xff
    70f0:	bne.n	70de <SdSpiCard::isBusy()+0x12>
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
    70f2:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    70f4:	cbnz	r7, 70fa <SdSpiCard::isBusy()+0x2e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    70f6:	ldrb	r3, [r5, #20]
    70f8:	cbnz	r3, 710c <SdSpiCard::isBusy()+0x40>
    }
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    70fa:	mov	r0, r4
}
    70fc:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    70fe:	movs	r4, #0
      break;
    }
  }
  if (!spiActive) {
    7100:	cmp	r7, #0
    7102:	beq.n	70f6 <SdSpiCard::isBusy()+0x2a>
    7104:	b.n	70fa <SdSpiCard::isBusy()+0x2e>
    7106:	bl	7014 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    710a:	b.n	70da <SdSpiCard::isBusy()+0xe>
    710c:	mov	r0, r5
    710e:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    spiStop();
  }
  return rtn;
    7112:	mov	r0, r4
    7114:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    7116:	movs	r0, #0
    7118:	pop	{r3, r4, r5, r6, r7, pc}
    711a:	nop

0000711c <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    711c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7120:	ldr	r6, [pc, #116]	; (7198 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    7122:	sub	sp, #12
    7124:	ldr	r3, [r6, #0]
    7126:	str	r3, [sp, #0]
	return ret;
    7128:	ldr	r5, [sp, #0]
    712a:	mov	r4, r0
    712c:	mov	r8, r1
    712e:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7130:	uxth	r5, r5
    7132:	adds	r7, r0, #4
    7134:	b.n	7146 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7136:	ldr	r3, [r6, #0]
    7138:	str	r3, [sp, #4]
	return ret;
    713a:	ldr	r3, [sp, #4]
    713c:	uxth	r3, r3
    713e:	subs	r3, r3, r5
    7140:	cmp.w	r3, #300	; 0x12c
    7144:	bgt.n	716c <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    7146:	mov	r0, r7
    7148:	bl	88fc <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    714c:	cmp	r0, #255	; 0xff
    714e:	strb	r0, [r4, #21]
    7150:	beq.n	7136 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    7152:	cmp	r0, #254	; 0xfe
    7154:	beq.n	7172 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7156:	movs	r3, #24
    7158:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    715a:	ldrb	r0, [r4, #20]
    715c:	cbz	r0, 7166 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    715e:	mov	r0, r4
    7160:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    7164:	movs	r0, #0
}
    7166:	add	sp, #12
    7168:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    716c:	movs	r3, #29
    716e:	strb	r3, [r4, #19]
    7170:	b.n	715a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    7172:	mov	r2, r9
    7174:	mov	r1, r8
    7176:	mov	r0, r7
    7178:	bl	8918 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    717c:	strb	r0, [r4, #21]
    717e:	cbz	r0, 7186 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7180:	movs	r3, #37	; 0x25
    7182:	strb	r3, [r4, #19]
    7184:	b.n	715a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7186:	mov	r0, r7
    7188:	bl	88fc <SdSpiArduinoDriver::receive()>
    718c:	mov	r0, r7
    718e:	bl	88fc <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    7192:	movs	r0, #1
    7194:	b.n	7166 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7196:	nop
    7198:	.word	0x20019a84

0000719c <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    719c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    719e:	ldr	r5, [pc, #52]	; (71d4 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    71a0:	sub	sp, #12
    71a2:	ldr	r3, [r5, #0]
    71a4:	str	r3, [sp, #0]
	return ret;
    71a6:	ldr	r4, [sp, #0]
    71a8:	mov	r7, r1
    71aa:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    71ac:	uxth	r4, r4
    71ae:	b.n	71be <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71b0:	ldr	r3, [r5, #0]
    71b2:	str	r3, [sp, #4]
	return ret;
    71b4:	ldr	r3, [sp, #4]
    71b6:	uxth	r3, r3
    71b8:	subs	r3, r3, r4
    71ba:	cmp	r3, r7
    71bc:	bgt.n	71ce <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    71be:	mov	r0, r6
    71c0:	bl	88fc <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    71c4:	cmp	r0, #255	; 0xff
    71c6:	bne.n	71b0 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    71c8:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    71ca:	add	sp, #12
    71cc:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    71ce:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    71d0:	add	sp, #12
    71d2:	pop	{r4, r5, r6, r7, pc}
    71d4:	.word	0x20019a84

000071d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    71d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71dc:	sub	sp, #8
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    71de:	ldrb	r3, [r0, #16]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    71e0:	str	r2, [sp, #4]
    71e2:	mov	r4, r0
    71e4:	mov	r7, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    71e6:	cbnz	r3, 7248 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
    return 0XFF;
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    71e8:	ldrb	r3, [r4, #20]
    71ea:	cmp	r3, #0
    71ec:	beq.n	7266 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    71ee:	cmp	r7, #0
    71f0:	bne.n	725a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x82>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    71f2:	adds	r5, r4, #4
    71f4:	mov	r0, r5
    71f6:	orr.w	r1, r7, #64	; 0x40
    71fa:	bl	8938 <SdSpiArduinoDriver::send(unsigned char)>
    71fe:	add.w	r8, sp, #4
    7202:	add	r6, sp, #8
    7204:	ldrb.w	r1, [r6, #-1]!
    7208:	mov	r0, r5
    720a:	bl	8938 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    720e:	cmp	r8, r6
    7210:	bne.n	7204 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7212:	cmp	r7, #0
    7214:	ite	eq
    7216:	moveq	r1, #149	; 0x95
    7218:	movne	r1, #135	; 0x87
    721a:	mov	r0, r5
    721c:	bl	8938 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7220:	mov	r0, r5
    7222:	bl	88fc <SdSpiArduinoDriver::receive()>
    7226:	movs	r6, #11
    7228:	mov	r0, r5
    722a:	bl	88fc <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    722e:	lsls	r3, r0, #24
    7230:	strb	r0, [r4, #21]
    7232:	bmi.n	723a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    7234:	add	sp, #8
    7236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    723a:	subs	r3, r6, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    723c:	ands.w	r6, r3, #255	; 0xff
    7240:	bne.n	7228 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    7242:	add	sp, #8
    7244:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7248:	ldr	r3, [r0, #0]
    724a:	ldr	r3, [r3, #24]
    724c:	blx	r3
    724e:	cmp	r0, #0
    7250:	bne.n	71e8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x10>
    return 0XFF;
    7252:	movs	r0, #255	; 0xff

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
  }
  return m_status;
}
    7254:	add	sp, #8
    7256:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    725a:	mov.w	r1, #300	; 0x12c
    725e:	mov	r0, r4
    7260:	bl	719c <SdSpiCard::waitNotBusy(unsigned short)>
    7264:	b.n	71f2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    7266:	mov	r0, r4
    7268:	bl	7014 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    726c:	b.n	71ee <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    726e:	nop

00007270 <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7270:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    7272:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7274:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    7276:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7278:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    727a:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    727e:	cbnz	r0, 729c <SdSpiCard::readOCR(unsigned long*)+0x2c>
    7280:	adds	r7, r6, #4
    7282:	adds	r4, r5, #4
    7284:	mov	r0, r7
    7286:	bl	88fc <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    728a:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    728e:	cmp	r5, r4
    7290:	bne.n	7284 <SdSpiCard::readOCR(unsigned long*)+0x14>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7292:	ldrb	r4, [r6, #20]
    7294:	cbnz	r4, 72b2 <SdSpiCard::readOCR(unsigned long*)+0x42>
    7296:	movs	r4, #1
  return true;

 fail:
  spiStop();
  return false;
}
    7298:	mov	r0, r4
    729a:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    729c:	ldrb	r4, [r6, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    729e:	movs	r3, #18
    72a0:	strb	r3, [r6, #19]
    72a2:	cmp	r4, #0
    72a4:	beq.n	7298 <SdSpiCard::readOCR(unsigned long*)+0x28>
    72a6:	mov	r0, r6
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    72a8:	movs	r4, #0
    72aa:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    72ae:	mov	r0, r4
    72b0:	pop	{r3, r4, r5, r6, r7, pc}
    72b2:	mov	r0, r6
    72b4:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    72b8:	mov	r0, r4
    72ba:	pop	{r3, r4, r5, r6, r7, pc}

000072bc <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    72bc:	push	{r3, r4, r5, lr}
    72be:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    72c0:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    72c2:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    72c4:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    72c8:	cbz	r0, 72dc <SdSpiCard::readRegister(unsigned char, void*)+0x20>
    72ca:	movs	r3, #27
    72cc:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    72ce:	ldrb	r0, [r4, #20]
    72d0:	cbz	r0, 72da <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    72d2:	mov	r0, r4
    72d4:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    72d8:	movs	r0, #0
}
    72da:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    72dc:	mov	r1, r5
    72de:	movs	r2, #16
    72e0:	mov	r0, r4
    72e2:	bl	711c <SdSpiCard::readData(unsigned char*, unsigned int)>
    72e6:	cmp	r0, #0
    72e8:	beq.n	72ce <SdSpiCard::readRegister(unsigned char, void*)+0x12>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    72ea:	ldrb	r5, [r4, #20]
    72ec:	cmp	r5, #0
    72ee:	beq.n	72da <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    72f0:	mov	r0, r4
    72f2:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    72f6:	mov	r0, r5
    72f8:	pop	{r3, r4, r5, pc}
    72fa:	nop

000072fc <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    72fc:	mov	r2, r1
    72fe:	movs	r1, #9
    7300:	b.w	72bc <SdSpiCard::readRegister(unsigned char, void*)>

00007304 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    7304:	mov	r2, r1
    7306:	movs	r1, #10
    7308:	b.w	72bc <SdSpiCard::readRegister(unsigned char, void*)>

0000730c <SdSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    730c:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    730e:	ldr	r3, [r0, #0]
    7310:	ldr	r2, [pc, #140]	; (73a0 <SdSpiCard::sectorCount()+0x94>)
    7312:	ldr	r3, [r3, #52]	; 0x34
    7314:	cmp	r3, r2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7316:	sub	sp, #20
    7318:	bne.n	737a <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    731a:	mov	r2, sp
    731c:	movs	r1, #9
    731e:	bl	72bc <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7322:	cbz	r0, 7334 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7324:	ldrb.w	r3, [sp]
    7328:	ands.w	r3, r3, #192	; 0xc0
    732c:	beq.n	7338 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    732e:	cmp	r3, #64	; 0x40
    7330:	beq.n	7380 <SdSpiCard::sectorCount()+0x74>
    7332:	movs	r0, #0
}
    7334:	add	sp, #20
    7336:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7338:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    733c:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7340:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7344:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7348:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    734c:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7350:	and.w	r4, r4, #3
    7354:	lsls	r4, r4, #1
    7356:	lsls	r2, r2, #2
    7358:	and.w	r3, r3, #3
    735c:	orr.w	r0, r4, r0, lsr #7
    7360:	and.w	r1, r1, #15
    7364:	orr.w	r3, r2, r3, lsl #10
    7368:	add	r0, r1
    736a:	orr.w	r3, r3, r5, lsr #6
    736e:	adds	r3, #1
    7370:	subs	r0, #7
    7372:	lsl.w	r0, r3, r0
    7376:	add	sp, #20
    7378:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    737a:	mov	r1, sp
    737c:	blx	r3
    737e:	b.n	7322 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7380:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7384:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7388:	ldrb.w	r0, [sp, #8]
    738c:	adds	r2, r3, #1
    738e:	and.w	r3, r1, #63	; 0x3f
    7392:	add.w	r3, r2, r3, lsl #16
    7396:	add.w	r0, r3, r0, lsl #8
    739a:	lsls	r0, r0, #10
}
    739c:	add	sp, #20
    739e:	pop	{r4, r5, pc}
    73a0:	.word	0x000072fd

000073a4 <SdSpiCard::readStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    73a4:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    73a6:	ldr	r3, [r0, #0]
    73a8:	ldr	r5, [pc, #68]	; (73f0 <SdSpiCard::readStart(unsigned long)+0x4c>)
    73aa:	ldr	r3, [r3, #64]	; 0x40
    73ac:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    73ae:	sub	sp, #12
    73b0:	mov	r4, r0
    73b2:	mov	r2, r1
    73b4:	bne.n	73e6 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    73b6:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    73b8:	cmp	r0, #3
    sector <<= 9;
    73ba:	it	ne
    73bc:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    73be:	movs	r1, #18
    73c0:	mov	r0, r4
    73c2:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    73c6:	cbz	r0, 73e0 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    73c8:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    73ca:	movs	r3, #12
    73cc:	strb	r3, [r4, #19]
    73ce:	cbnz	r0, 73d4 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    73d0:	add	sp, #12
    73d2:	pop	{r4, r5, pc}
    73d4:	mov	r0, r4
    73d6:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    73da:	movs	r0, #0
    73dc:	add	sp, #12
    73de:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    73e0:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    73e2:	add	sp, #12
    73e4:	pop	{r4, r5, pc}
    73e6:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    73e8:	blx	r3
    73ea:	ldr	r2, [sp, #4]
    73ec:	b.n	73b8 <SdSpiCard::readStart(unsigned long)+0x14>
    73ee:	nop
    73f0:	.word	0x00006ffd

000073f4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    73f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73f8:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    73fa:	ldrb	r1, [r0, #16]
    73fc:	cmp	r1, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    73fe:	mov	r6, r0
    7400:	mov	r4, r2
    7402:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    7404:	beq.n	743c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    if (!readStart(sector)) {
    7406:	mov	r1, r5
    7408:	mov	r0, r6
    740a:	bl	73a4 <SdSpiCard::readStart(unsigned long)>
    740e:	cbz	r0, 7436 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    7410:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    7412:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    7414:	strb	r3, [r6, #16]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    7416:	movs	r5, #0
    7418:	cbnz	r7, 7420 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    741a:	b.n	7444 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    741c:	cmp	r7, r5
    741e:	beq.n	7444 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    if (!readData(dst, 512)) {
    7420:	mov	r1, r4
    7422:	mov.w	r2, #512	; 0x200
    7426:	mov	r0, r6
    7428:	bl	711c <SdSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    742c:	adds	r5, #1
    742e:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    7432:	cmp	r0, #0
    7434:	bne.n	741c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    7436:	movs	r0, #0
    7438:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    743c:	ldr	r3, [r0, #12]
    743e:	cmp	r3, r5
    7440:	bne.n	7406 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    7442:	b.n	7416 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    7444:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    7446:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    7448:	add	r7, r3
    744a:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    744c:	cbnz	r2, 7454 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x60>
    744e:	movs	r0, #1
    7450:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7454:	ldr	r3, [r6, #0]
    7456:	mov	r0, r6
    7458:	ldr	r3, [r3, #24]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    745a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    745e:	bx	r3

00007460 <SdSpiCard::readStop()>:
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7460:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    7462:	movs	r2, #0
    7464:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    7466:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    7468:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    746c:	ldrb	r4, [r5, #20]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    746e:	cbz	r0, 747a <SdSpiCard::readStop()+0x1a>
    7470:	movs	r3, #9
    7472:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7474:	cbnz	r4, 748c <SdSpiCard::readStop()+0x2c>
  return true;

 fail:
  spiStop();
  return false;
}
    7476:	mov	r0, r4
    7478:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    747a:	cbnz	r4, 7482 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    747c:	movs	r4, #1

 fail:
  spiStop();
  return false;
}
    747e:	mov	r0, r4
    7480:	pop	{r3, r4, r5, pc}
    7482:	mov	r0, r5
    7484:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    7488:	mov	r0, r4
    748a:	pop	{r3, r4, r5, pc}
    748c:	mov	r0, r5
    748e:	movs	r4, #0
    7490:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    7494:	mov	r0, r4
    7496:	pop	{r3, r4, r5, pc}

00007498 <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    7498:	ldrb	r2, [r0, #16]
  m_curState = IDLE_STATE;
    749a:	movs	r1, #0
  if (state == WRITE_STATE) {
    749c:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    749e:	strb	r1, [r0, #16]
  if (state == WRITE_STATE) {
    74a0:	beq.n	74ae <SdSpiCard::syncDevice()+0x16>
    return writeStop();
  }
  if (state == READ_STATE) {
    74a2:	cmp	r2, #1
    74a4:	beq.n	74aa <SdSpiCard::syncDevice()+0x12>
    return readStop();
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    74a6:	movs	r0, #1
    74a8:	bx	lr
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
  }
  if (state == READ_STATE) {
    return readStop();
    74aa:	b.w	7460 <SdSpiCard::readStop()>
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
    74ae:	ldr	r3, [r0, #0]
    74b0:	ldr	r3, [r3, #76]	; 0x4c
    74b2:	bx	r3

000074b4 <SdSpiCard::writeStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    74b4:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    74b6:	ldr	r3, [r0, #0]
    74b8:	ldr	r5, [pc, #68]	; (7500 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    74ba:	ldr	r3, [r3, #64]	; 0x40
    74bc:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    74be:	sub	sp, #12
    74c0:	mov	r4, r0
    74c2:	mov	r2, r1
    74c4:	bne.n	74f6 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    74c6:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    74c8:	cmp	r0, #3
    sector <<= 9;
    74ca:	it	ne
    74cc:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    74ce:	movs	r1, #25
    74d0:	mov	r0, r4
    74d2:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    74d6:	cbz	r0, 74f0 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    74d8:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    74da:	movs	r3, #14
    74dc:	strb	r3, [r4, #19]
    74de:	cbnz	r0, 74e4 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    74e0:	add	sp, #12
    74e2:	pop	{r4, r5, pc}
    74e4:	mov	r0, r4
    74e6:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    74ea:	movs	r0, #0
    74ec:	add	sp, #12
    74ee:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    74f0:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    74f2:	add	sp, #12
    74f4:	pop	{r4, r5, pc}
    74f6:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    74f8:	blx	r3
    74fa:	ldr	r2, [sp, #4]
    74fc:	b.n	74c8 <SdSpiCard::writeStart(unsigned long)+0x14>
    74fe:	nop
    7500:	.word	0x00006ffd

00007504 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7504:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    7506:	ldr	r3, [r0, #0]
    7508:	ldr	r7, [pc, #172]	; (75b8 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    750a:	ldr	r3, [r3, #52]	; 0x34
    750c:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    750e:	sub	sp, #20
    7510:	mov	r4, r0
    7512:	mov	r5, r1
    7514:	mov	r6, r2
    7516:	bne.n	7574 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7518:	mov	r2, sp
    751a:	movs	r1, #9
    751c:	bl	72bc <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    7520:	cbz	r0, 7548 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    7522:	ldrb.w	r3, [sp, #10]
    7526:	lsls	r2, r3, #25
    7528:	bpl.n	7558 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    752a:	ldrb	r3, [r4, #22]
    752c:	cmp	r3, #3
    firstSector <<= 9;
    752e:	it	ne
    7530:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    7532:	mov	r2, r5
    7534:	mov.w	r1, #32
    7538:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    753a:	it	ne
    753c:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    753e:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    7542:	cbz	r0, 757a <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7544:	movs	r3, #38	; 0x26
    7546:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7548:	ldrb	r0, [r4, #20]
    754a:	cbz	r0, 7554 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    754c:	mov	r0, r4
    754e:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    7552:	movs	r0, #0
}
    7554:	add	sp, #20
    7556:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7558:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    755c:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7560:	lsls	r3, r3, #1
    7562:	adds	r2, r6, #1
    7564:	orr.w	r3, r3, r1, lsr #7
    7568:	orrs	r2, r5
    756a:	tst	r3, r2
    756c:	beq.n	752a <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    756e:	movs	r3, #39	; 0x27
    7570:	strb	r3, [r4, #19]
    7572:	b.n	7548 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    7574:	mov	r1, sp
    7576:	blx	r3
    7578:	b.n	7520 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    757a:	mov	r2, r6
    757c:	movs	r1, #33	; 0x21
    757e:	mov	r0, r4
    7580:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7584:	cmp	r0, #0
    7586:	bne.n	7544 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    7588:	mov	r2, r0
    758a:	movs	r1, #38	; 0x26
    758c:	mov	r0, r4
    758e:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7592:	cmp	r0, #0
    7594:	bne.n	7544 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    7596:	movw	r1, #10000	; 0x2710
    759a:	mov	r0, r4
    759c:	bl	719c <SdSpiCard::waitNotBusy(unsigned short)>
    75a0:	cbnz	r0, 75a8 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    75a2:	movs	r3, #40	; 0x28
    75a4:	strb	r3, [r4, #19]
    75a6:	b.n	7548 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75a8:	ldrb	r5, [r4, #20]
    75aa:	cmp	r5, #0
    75ac:	beq.n	7554 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    75ae:	mov	r0, r4
    75b0:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    75b4:	mov	r0, r5
    75b6:	b.n	7554 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    75b8:	.word	0x000072fd

000075bc <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    75bc:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    75be:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    75c2:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    75c4:	bl	719c <SdSpiCard::waitNotBusy(unsigned short)>
    75c8:	mov	r6, r0
    75ca:	cbnz	r0, 75e4 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75cc:	ldrb	r4, [r5, #20]
    75ce:	movs	r3, #30
    75d0:	strb	r3, [r5, #19]
    75d2:	cbnz	r4, 75d8 <SdSpiCard::writeStop()+0x1c>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    75d4:	mov	r0, r4
    75d6:	pop	{r4, r5, r6, pc}
    75d8:	mov	r0, r5
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    75da:	mov	r4, r6
    75dc:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    75e0:	mov	r0, r4
    75e2:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    75e4:	movs	r1, #253	; 0xfd
    75e6:	adds	r0, r5, #4
    75e8:	bl	8938 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    75ec:	ldrb	r4, [r5, #20]
    75ee:	cbnz	r4, 75f6 <SdSpiCard::writeStop()+0x3a>
    75f0:	mov	r4, r6

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    75f2:	mov	r0, r4
    75f4:	pop	{r4, r5, r6, pc}
    75f6:	mov	r0, r5
    75f8:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    75fc:	b.n	75d4 <SdSpiCard::writeStop()+0x18>
    75fe:	nop

00007600 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    7600:	push	{r4, r5, r6, lr}
    7602:	adds	r4, r0, #4
    7604:	mov	r6, r2
    7606:	mov	r5, r0
    7608:	mov	r0, r4
    760a:	bl	8938 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    760e:	mov.w	r2, #512	; 0x200
    7612:	mov	r1, r6
    7614:	mov	r0, r4
    7616:	bl	8950 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    761a:	mov	r0, r4
    761c:	movs	r1, #255	; 0xff
    761e:	bl	8938 <SdSpiArduinoDriver::send(unsigned char)>
    7622:	mov	r0, r4
    7624:	movs	r1, #255	; 0xff
    7626:	bl	8938 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    762a:	mov	r0, r4
    762c:	bl	88fc <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7630:	and.w	r3, r0, #31
    7634:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    7636:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7638:	beq.n	764e <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    763a:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    763c:	movs	r3, #32
    763e:	strb	r3, [r5, #19]
    7640:	cbnz	r0, 7644 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    7642:	pop	{r4, r5, r6, pc}
    7644:	mov	r0, r5
    7646:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    764a:	movs	r0, #0
    764c:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    764e:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    7650:	pop	{r4, r5, r6, pc}
    7652:	nop

00007654 <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7654:	push	{r3, r4, r5, lr}
    7656:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7658:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    765c:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    765e:	bl	719c <SdSpiCard::waitNotBusy(unsigned short)>
    7662:	cbnz	r0, 7676 <SdSpiCard::writeData(unsigned char const*)+0x22>
    7664:	movs	r3, #36	; 0x24
    7666:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7668:	ldrb	r0, [r4, #20]
    766a:	cbz	r0, 7674 <SdSpiCard::writeData(unsigned char const*)+0x20>
    766c:	mov	r0, r4
    766e:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    7672:	movs	r0, #0
}
    7674:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    7676:	mov	r2, r5
    7678:	movs	r1, #252	; 0xfc
    767a:	mov	r0, r4
    767c:	bl	7600 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    7680:	cmp	r0, #0
    7682:	beq.n	7668 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

 fail:
  spiStop();
  return false;
}
    7684:	pop	{r3, r4, r5, pc}
    7686:	nop

00007688 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    7688:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    768a:	ldr	r3, [r0, #0]
    768c:	ldr	r5, [pc, #88]	; (76e8 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x60>)
    768e:	ldr	r3, [r3, #64]	; 0x40
    7690:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    7692:	sub	sp, #8
    7694:	mov	r4, r0
    7696:	mov	r6, r2
    7698:	bne.n	76e0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x58>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    769a:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    769c:	cmp	r0, #3
    sector <<= 9;
    769e:	it	ne
    76a0:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    76a2:	mov	r2, r1
    76a4:	mov	r0, r4
    76a6:	movs	r1, #24
    76a8:	bl	71d8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    76ac:	cbz	r0, 76c2 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    76ae:	movs	r3, #13
    76b0:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76b2:	ldrb	r0, [r4, #20]
    76b4:	cbz	r0, 76be <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    76b6:	mov	r0, r4
    76b8:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    76bc:	movs	r0, #0
}
    76be:	add	sp, #8
    76c0:	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    76c2:	mov	r2, r6
    76c4:	movs	r1, #254	; 0xfe
    76c6:	mov	r0, r4
    76c8:	bl	7600 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    76cc:	cmp	r0, #0
    76ce:	beq.n	76b2 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    76d0:	ldrb	r5, [r4, #20]
    76d2:	cmp	r5, #0
    76d4:	beq.n	76be <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    76d6:	mov	r0, r4
    76d8:	bl	702c <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    76dc:	mov	r0, r5
    76de:	b.n	76be <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    76e0:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    76e2:	blx	r3
    76e4:	ldr	r1, [sp, #4]
    76e6:	b.n	769c <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x14>
    76e8:	.word	0x00006ffd

000076ec <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    76ec:	push	{r4}
    if (m_sharedSpi) {
    76ee:	ldrb	r4, [r0, #17]
    76f0:	cbnz	r4, 7700 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    76f2:	ldr	r4, [r0, #0]
    76f4:	ldr	r4, [r4, #32]
    76f6:	movs	r3, #1
    76f8:	mov	ip, r4
    }
  }
    76fa:	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    76fe:	bx	ip
    }
  }
    7700:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    7704:	b.w	7688 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>

00007708 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    7708:	push	{r4}
  SDHC_IRQSIGEN = 0;
    770a:	ldr	r4, [pc, #28]	; (7728 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    770c:	ldr	r2, [pc, #28]	; (772c <sdIrs()+0x24>)
    770e:	ldr	r1, [pc, #32]	; (7730 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7710:	ldr	r0, [pc, #32]	; (7734 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    7712:	movs	r3, #0
    7714:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    7716:	ldr	r4, [r2, #0]
    7718:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    771a:	ldr	r1, [r1, #0]
    771c:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    771e:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7722:	strb	r3, [r0, #0]
}
    7724:	bx	lr
    7726:	nop
    7728:	.word	0x400b1038
    772c:	.word	0x400b1030
    7730:	.word	0x20019a48
    7734:	.word	0x20019a60

00007738 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    7738:	ldr	r3, [pc, #12]	; (7748 <isBusyCommandComplete()+0x10>)
    773a:	ldr	r0, [pc, #16]	; (774c <isBusyCommandComplete()+0x14>)
    773c:	ldr	r3, [r3, #0]
    773e:	ands	r0, r3
}
    7740:	clz	r0, r0
    7744:	lsrs	r0, r0, #5
    7746:	bx	lr
    7748:	.word	0x400b1030
    774c:	.word	0x000f0001

00007750 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7750:	ldr	r3, [pc, #8]	; (775c <isBusyCommandInhibit()+0xc>)
    7752:	ldr	r0, [r3, #0]
}
    7754:	and.w	r0, r0, #1
    7758:	bx	lr
    775a:	nop
    775c:	.word	0x400b1024

00007760 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    7760:	ldr	r3, [pc, #12]	; (7770 <isBusyDat()+0x10>)
    7762:	ldr	r0, [r3, #0]
    7764:	eor.w	r0, r0, #16777216	; 0x1000000
}
    7768:	ubfx	r0, r0, #24, #1
    776c:	bx	lr
    776e:	nop
    7770:	.word	0x400b1024

00007774 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7774:	ldr	r3, [pc, #4]	; (777c <isBusyDMA()+0x8>)
    7776:	ldrb	r0, [r3, #0]
}
    7778:	bx	lr
    777a:	nop
    777c:	.word	0x20019a60

00007780 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    7780:	ldr	r3, [pc, #12]	; (7790 <isBusyFifoRead()+0x10>)
    7782:	ldr	r0, [r3, #0]
    7784:	eor.w	r0, r0, #2048	; 0x800
}
    7788:	ubfx	r0, r0, #11, #1
    778c:	bx	lr
    778e:	nop
    7790:	.word	0x400b1024

00007794 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    7794:	ldr	r3, [pc, #12]	; (77a4 <isBusyFifoWrite()+0x10>)
    7796:	ldr	r0, [r3, #0]
    7798:	eor.w	r0, r0, #1024	; 0x400
}
    779c:	ubfx	r0, r0, #10, #1
    77a0:	bx	lr
    77a2:	nop
    77a4:	.word	0x400b1024

000077a8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    77a8:	ldr	r3, [pc, #12]	; (77b8 <isBusyTransferComplete()+0x10>)
    77aa:	ldr	r0, [pc, #16]	; (77bc <isBusyTransferComplete()+0x14>)
    77ac:	ldr	r3, [r3, #0]
    77ae:	ands	r0, r3
}
    77b0:	clz	r0, r0
    77b4:	lsrs	r0, r0, #5
    77b6:	bx	lr
    77b8:	.word	0x400b1030
    77bc:	.word	0x117f0002

000077c0 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    77c0:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    77c4:	ldr	r3, [pc, #176]	; (7878 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    77c6:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    77ca:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    77cc:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    77ce:	bhi.n	7868 <setSdclk(unsigned long)+0xa8>
    77d0:	ldr	r5, [pc, #168]	; (787c <setSdclk(unsigned long)+0xbc>)
    77d2:	movs	r2, #8
    77d4:	movs	r1, #1
    sdclkfs <<= 1;
    77d6:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    77d8:	lsls	r3, r1, #4
    77da:	udiv	r3, r5, r3
    77de:	cmp	r0, r3
    77e0:	ldr	r4, [pc, #152]	; (787c <setSdclk(unsigned long)+0xbc>)
    77e2:	bcs.n	7860 <setSdclk(unsigned long)+0xa0>
    77e4:	subs	r2, #1
    77e6:	bne.n	77d6 <setSdclk(unsigned long)+0x16>
    77e8:	udiv	r4, r4, r1
    77ec:	lsrs	r3, r1, #1
    77ee:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    77f0:	cmp	r0, r4
    77f2:	bcs.n	7870 <setSdclk(unsigned long)+0xb0>
    77f4:	ldr	r6, [pc, #132]	; (787c <setSdclk(unsigned long)+0xbc>)
    77f6:	lsls	r3, r1, #1
    77f8:	movs	r2, #1
    77fa:	b.n	77fe <setSdclk(unsigned long)+0x3e>
    77fc:	mov	r3, r4
    77fe:	udiv	r4, r6, r3
    7802:	cmp	r0, r4
    dvs++;
    7804:	add.w	r5, r2, #1
    7808:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    780c:	bcs.n	785c <setSdclk(unsigned long)+0x9c>
    780e:	cmp	r5, #16
    7810:	mov	r2, r5
    7812:	bne.n	77fc <setSdclk(unsigned long)+0x3c>
    7814:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7816:	ldr	r6, [pc, #104]	; (7880 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    7818:	ldr	r4, [pc, #104]	; (7884 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    781a:	ldr	r0, [pc, #96]	; (787c <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    781c:	ldr	r1, [pc, #104]	; (7888 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    781e:	mov.w	r5, #1000	; 0x3e8
    7822:	mul.w	r3, r5, r3
    7826:	udiv	r3, r0, r3
    782a:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    782c:	ldr	r3, [r4, #0]
    782e:	bic.w	r3, r3, #8
    7832:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    7834:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    7836:	bic.w	r3, r0, #1044480	; 0xff000
    783a:	bic.w	r3, r3, #4080	; 0xff0
    783e:	orr.w	r3, r3, #917504	; 0xe0000
    7842:	orrs	r3, r7
    7844:	orrs	r2, r3
    7846:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    7848:	ldr	r3, [r1, #0]
    784a:	lsls	r3, r3, #28
    784c:	bpl.n	7848 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    784e:	ldr	r2, [pc, #52]	; (7884 <setSdclk(unsigned long)+0xc4>)
    7850:	ldr	r3, [r2, #0]
    7852:	orr.w	r3, r3, #8
    7856:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    7858:	pop	{r4, r5, r6, r7}
    785a:	bx	lr
    785c:	lsls	r2, r2, #4
    785e:	b.n	7816 <setSdclk(unsigned long)+0x56>
    7860:	udiv	r4, r4, r1
    7864:	lsls	r7, r1, #7
    7866:	b.n	77f0 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7868:	ldr	r4, [pc, #16]	; (787c <setSdclk(unsigned long)+0xbc>)
    786a:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    786c:	movs	r1, #1
    786e:	b.n	77f0 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7870:	mov	r3, r1
    7872:	movs	r2, #0
    7874:	b.n	7816 <setSdclk(unsigned long)+0x56>
    7876:	nop
    7878:	.word	0x005b8d7f
    787c:	.word	0x05b8d800
    7880:	.word	0x20019a64
    7884:	.word	0x400b102c
    7888:	.word	0x400b1024

0000788c <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    788c:	ldr	r3, [pc, #4]	; (7894 <SdioCard::errorCode() const+0x8>)
}
    788e:	ldrb	r0, [r3, #0]
    7890:	bx	lr
    7892:	nop
    7894:	.word	0x200138d4

00007898 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    7898:	ldr	r3, [pc, #4]	; (78a0 <SdioCard::errorData() const+0x8>)
    789a:	ldr	r0, [r3, #0]
}
    789c:	bx	lr
    789e:	nop
    78a0:	.word	0x20019a48

000078a4 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    78a4:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    78a6:	ldr	r4, [pc, #20]	; (78bc <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    78a8:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    78aa:	ldmia	r4!, {r0, r1, r2, r3}
    78ac:	str	r0, [r5, #0]
    78ae:	str	r1, [r5, #4]
    78b0:	str	r2, [r5, #8]
    78b2:	str	r3, [r5, #12]
  return true;
}
    78b4:	movs	r0, #1
    78b6:	pop	{r4, r5}
    78b8:	bx	lr
    78ba:	nop
    78bc:	.word	0x20019a24

000078c0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    78c0:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    78c2:	ldr	r4, [pc, #20]	; (78d8 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    78c4:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    78c6:	ldmia	r4!, {r0, r1, r2, r3}
    78c8:	str	r0, [r5, #0]
    78ca:	str	r1, [r5, #4]
    78cc:	str	r2, [r5, #8]
    78ce:	str	r3, [r5, #12]
  return true;
}
    78d0:	movs	r0, #1
    78d2:	pop	{r4, r5}
    78d4:	bx	lr
    78d6:	nop
    78d8:	.word	0x20019a50

000078dc <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    78dc:	ldr	r3, [pc, #8]	; (78e8 <SdioCard::readOCR(unsigned long*)+0xc>)
    78de:	ldr	r3, [r3, #0]
    78e0:	str	r3, [r1, #0]
  return true;
}
    78e2:	movs	r0, #1
    78e4:	bx	lr
    78e6:	nop
    78e8:	.word	0x20019a3c

000078ec <SdioCard::~SdioCard()>:
    78ec:	bx	lr
    78ee:	nop

000078f0 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    78f0:	push	{r3, r4, r5, r6, r7, lr}
    78f2:	mov	r5, r0
  uint32_t m = micros();
    78f4:	bl	93c8 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    78f8:	ldr	r7, [pc, #24]	; (7914 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    78fa:	mov	r6, r0
    78fc:	b.n	7908 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    78fe:	bl	93c8 <micros>
    7902:	subs	r0, r0, r6
    7904:	cmp	r0, r7
    7906:	bhi.n	7910 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7908:	blx	r5
    790a:	mov	r4, r0
    790c:	cmp	r0, #0
    790e:	bne.n	78fe <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    7910:	mov	r0, r4
    7912:	pop	{r3, r4, r5, r6, r7, pc}
    7914:	.word	0x000f4240

00007918 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7918:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    791c:	ldr.w	r8, [pc, #64]	; 7960 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7920:	ldr	r7, [pc, #56]	; (795c <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    7922:	str.w	r0, [r8]
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7926:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    7928:	bl	93c8 <micros>
    792c:	mov	r6, r0
    792e:	b.n	793e <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7930:	bl	93c8 <micros>
    7934:	subs	r0, r0, r6
    7936:	cmp	r0, r7
    7938:	bhi.n	7950 <yieldTimeout(bool (*)())+0x38>
    793a:	bl	a3e8 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    793e:	blx	r5
    7940:	mov	r4, r0
    7942:	cmp	r0, #0
    7944:	bne.n	7930 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    7946:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    794a:	mov	r0, r4
    794c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    7950:	movs	r3, #0
    7952:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    7956:	mov	r0, r4
    7958:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    795c:	.word	0x000f4240
    7960:	.word	0x20019a34

00007964 <SdioCard::~SdioCard()>:
    7964:	push	{r4, lr}
    7966:	movs	r1, #12
    7968:	mov	r4, r0
    796a:	bl	ab80 <operator delete(void*, unsigned int)>
    796e:	mov	r0, r4
    7970:	pop	{r4, pc}
    7972:	nop

00007974 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7974:	ldr	r3, [pc, #20]	; (798c <SdioCard::type() const+0x18>)
    7976:	ldrb	r3, [r3, #0]
    7978:	cbz	r3, 7988 <SdioCard::type() const+0x14>
    797a:	ldr	r3, [pc, #20]	; (7990 <SdioCard::type() const+0x1c>)
    797c:	ldrb	r3, [r3, #0]
    797e:	cmp	r3, #0
    7980:	ite	ne
    7982:	movne	r0, #3
    7984:	moveq	r0, #2
    7986:	bx	lr
    7988:	movs	r0, #1
}
    798a:	bx	lr
    798c:	.word	0x20019a20
    7990:	.word	0x20019a38

00007994 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7994:	push	{r3, r4, r5, lr}
    7996:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7998:	ldr	r0, [pc, #60]	; (79d8 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    799a:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    799c:	bl	78f0 <waitTimeout(bool (*)())>
    79a0:	cbz	r0, 79a6 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    79a2:	movs	r0, #0
    79a4:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    79a6:	ldr	r2, [pc, #52]	; (79dc <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    79a8:	ldr	r3, [pc, #52]	; (79e0 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    79aa:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    79ac:	ldr	r0, [pc, #52]	; (79e4 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    79ae:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    79b0:	bl	78f0 <waitTimeout(bool (*)())>
    79b4:	cmp	r0, #0
    79b6:	bne.n	79a2 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    79b8:	ldr	r2, [pc, #44]	; (79e8 <cardCommand(unsigned long, unsigned long)+0x54>)
    79ba:	ldr	r3, [pc, #48]	; (79ec <cardCommand(unsigned long, unsigned long)+0x58>)
    79bc:	ldr	r1, [r2, #0]
    79be:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    79c0:	ldr	r1, [r3, #0]
    79c2:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    79c4:	ldr	r2, [r3, #0]
    79c6:	lsls	r2, r2, #31
    79c8:	bpl.n	79a2 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    79ca:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    79cc:	tst.w	r3, #983040	; 0xf0000
    79d0:	bne.n	79a2 <cardCommand(unsigned long, unsigned long)+0xe>
    79d2:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    79d4:	pop	{r3, r4, r5, pc}
    79d6:	nop
    79d8:	.word	0x00007751
    79dc:	.word	0x400b1008
    79e0:	.word	0x400b100c
    79e4:	.word	0x00007739
    79e8:	.word	0x400b1030
    79ec:	.word	0x20019a48

000079f0 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    79f0:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    79f2:	ldr	r3, [pc, #28]	; (7a10 <isBusyCMD13()+0x20>)
    79f4:	ldr	r0, [pc, #28]	; (7a14 <isBusyCMD13()+0x24>)
    79f6:	ldr	r1, [r3, #0]
    79f8:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    79fc:	cbz	r0, 7a0c <isBusyCMD13()+0x1c>
    79fe:	ldr	r3, [pc, #24]	; (7a18 <isBusyCMD13()+0x28>)
    7a00:	ldr	r0, [r3, #0]
    7a02:	eor.w	r0, r0, #256	; 0x100
    7a06:	ubfx	r0, r0, #8, #1
    7a0a:	pop	{r3, pc}
    7a0c:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    7a0e:	pop	{r3, pc}
    7a10:	.word	0x20019a40
    7a14:	.word	0x0d1a0000
    7a18:	.word	0x400b1010

00007a1c <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    7a1c:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7a1e:	ldr	r3, [pc, #16]	; (7a30 <SdioCard::status()+0x14>)
    7a20:	ldr	r0, [pc, #16]	; (7a34 <SdioCard::status()+0x18>)
    7a22:	ldr	r1, [r3, #0]
    7a24:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    7a28:	cbz	r0, 7a2e <SdioCard::status()+0x12>
    7a2a:	ldr	r3, [pc, #12]	; (7a38 <SdioCard::status()+0x1c>)
    7a2c:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    7a2e:	pop	{r3, pc}
    7a30:	.word	0x20019a40
    7a34:	.word	0x0d1a0000
    7a38:	.word	0x400b1010

00007a3c <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7a3c:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7a3e:	ldr	r3, [pc, #84]	; (7a94 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7a40:	sub	sp, #20
    7a42:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7a44:	ldr	r1, [r3, #0]
    7a46:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    7a4a:	cbz	r0, 7a8e <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    7a4c:	ldr	r2, [pc, #72]	; (7a98 <readReg16(unsigned long, void*)+0x5c>)
    7a4e:	ldr	r3, [pc, #76]	; (7a9c <readReg16(unsigned long, void*)+0x60>)
    7a50:	ldr	r2, [r2, #0]
    7a52:	str	r2, [sp, #0]
    7a54:	ldr	r1, [r3, #0]
    7a56:	str	r1, [sp, #4]
    7a58:	ldr	r1, [r3, #4]
    7a5a:	str	r1, [sp, #8]
    7a5c:	adds	r3, #8
    7a5e:	add.w	r4, r5, #15
    7a62:	ldr	r3, [r3, #0]
    7a64:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    7a66:	movs	r3, #0
    7a68:	b.n	7a6e <readReg16(unsigned long, void*)+0x32>
    7a6a:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7a6e:	and.w	r1, r3, #3
    7a72:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7a74:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7a76:	lsrs	r2, r1
    7a78:	add.w	lr, sp, #16
    7a7c:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7a80:	cmp	r3, #15
    7a82:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7a84:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7a88:	bne.n	7a6a <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    7a8a:	movs	r3, #0
    7a8c:	strb	r3, [r5, #15]
  return true;
}
    7a8e:	add	sp, #20
    7a90:	pop	{r4, r5, pc}
    7a92:	nop
    7a94:	.word	0x20019a40
    7a98:	.word	0x400b1010
    7a9c:	.word	0x400b1014

00007aa0 <waitDmaStatus() [clone .part.4]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7aa0:	ldr	r3, [pc, #20]	; (7ab8 <waitDmaStatus() [clone .part.4]+0x18>)
    7aa2:	ldr	r0, [r3, #0]
    7aa4:	ands.w	r0, r0, #2
    7aa8:	beq.n	7ab6 <waitDmaStatus() [clone .part.4]+0x16>
    7aaa:	ldr	r3, [r3, #0]
    7aac:	ldr	r0, [pc, #12]	; (7abc <waitDmaStatus() [clone .part.4]+0x1c>)
    7aae:	ands	r0, r3
    7ab0:	clz	r0, r0
    7ab4:	lsrs	r0, r0, #5
}
    7ab6:	bx	lr
    7ab8:	.word	0x20019a48
    7abc:	.word	0x117f0000

00007ac0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    7ac0:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    7ac2:	lsls	r4, r2, #30
    7ac4:	bne.n	7ac8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    7ac6:	cbnz	r3, 7ada <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ac8:	ldr	r1, [pc, #124]	; (7b48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7aca:	ldr	r3, [pc, #128]	; (7b4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7acc:	movs	r0, #37	; 0x25
  m_errorLine = line;
    7ace:	movw	r2, #503	; 0x1f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ad2:	strb	r0, [r1, #0]
  m_errorLine = line;
    7ad4:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7ad6:	movs	r0, #0
    7ad8:	pop	{r3, r4, r5, r6, r7, pc}
    7ada:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7adc:	ldr	r0, [pc, #112]	; (7b50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    7ade:	mov	r4, r3
    7ae0:	mov	r7, r1
    7ae2:	mov	r5, r2
    7ae4:	bl	7918 <yieldTimeout(bool (*)())>
    7ae8:	cbnz	r0, 7b32 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7aea:	ldr	r1, [pc, #104]	; (7b54 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7aec:	ldr	r2, [pc, #104]	; (7b58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7aee:	ldr.w	lr, [pc, #128]	; 7b70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    7af2:	mov.w	ip, #1
    7af6:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7afa:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7afc:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7afe:	ldr	r4, [pc, #92]	; (7b5c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7b00:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7b02:	ldr	r2, [pc, #92]	; (7b60 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7b04:	ldr	r1, [pc, #92]	; (7b64 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    7b06:	ldr	r0, [pc, #96]	; (7b68 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7b08:	orr.w	r3, r3, #512	; 0x200
    7b0c:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7b0e:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7b10:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7b12:	cbnz	r3, 7b42 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    7b14:	lsls	r1, r7, #9
    7b16:	mov	r0, r6
    7b18:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    7b1c:	cmp	r0, #0
    7b1e:	beq.n	7ad6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7b20:	ldr	r0, [pc, #72]	; (7b6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    7b22:	bl	7918 <yieldTimeout(bool (*)())>
    7b26:	cmp	r0, #0
    7b28:	bne.n	7ad6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7b2a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7b2e:	b.w	7aa0 <waitDmaStatus() [clone .part.4]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b32:	ldr	r1, [pc, #20]	; (7b48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7b34:	ldr	r3, [pc, #20]	; (7b4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b36:	movs	r0, #10
  m_errorLine = line;
    7b38:	mov.w	r2, #506	; 0x1fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7b3c:	strb	r0, [r1, #0]
  m_errorLine = line;
    7b3e:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7b40:	b.n	7ad6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7b42:	mov	r1, r7
    7b44:	b.n	7b16 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    7b46:	nop
    7b48:	.word	0x200138d4
    7b4c:	.word	0x20019a68
    7b50:	.word	0x000079f1
    7b54:	.word	0x20019a48
    7b58:	.word	0x400b1000
    7b5c:	.word	0x400b1004
    7b60:	.word	0x20019a38
    7b64:	.word	0x400b1038
    7b68:	.word	0x117f0002
    7b6c:	.word	0x00007775
    7b70:	.word	0x20019a60

00007b74 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7b74:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7b76:	ldr	r1, [pc, #100]	; (7bdc <SdioCard::sectorCount()+0x68>)
    7b78:	ldrb	r3, [r1, #0]
    7b7a:	ands.w	r3, r3, #192	; 0xc0
    7b7e:	beq.n	7ba4 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7b80:	cmp	r3, #64	; 0x40
    7b82:	beq.n	7b8a <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7b84:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    7b86:	pop	{r4, r5, r6}
    7b88:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7b8a:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7b8c:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7b8e:	ldrb	r0, [r1, #8]
    7b90:	adds	r2, r3, #1
    7b92:	and.w	r3, r4, #63	; 0x3f
    7b96:	add.w	r3, r2, r3, lsl #16
    7b9a:	add.w	r0, r3, r0, lsl #8
    7b9e:	lsls	r0, r0, #10
    7ba0:	pop	{r4, r5, r6}
    7ba2:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7ba4:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7ba6:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7ba8:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7baa:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7bac:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7bae:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7bb0:	and.w	r1, r5, #3
    7bb4:	lsls	r1, r1, #1
    7bb6:	and.w	r3, r3, #3
    7bba:	lsls	r2, r2, #2
    7bbc:	orr.w	r0, r1, r0, lsr #7
    7bc0:	orr.w	r3, r2, r3, lsl #10
    7bc4:	and.w	r1, r4, #15
    7bc8:	orr.w	r3, r3, r6, lsr #6
    7bcc:	add	r0, r1
    7bce:	subs	r0, #7
    7bd0:	adds	r3, #1
    7bd2:	lsl.w	r0, r3, r0
    7bd6:	pop	{r4, r5, r6}
    7bd8:	bx	lr
    7bda:	nop
    7bdc:	.word	0x20019a50

00007be0 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7be0:	push	{r4, r5, r6, lr}
    7be2:	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7be4:	ldrb	r1, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7be6:	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7be8:	cbnz	r1, 7c46 <SdioCard::erase(unsigned long, unsigned long)+0x66>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7bea:	ldr	r2, [pc, #192]	; (7cac <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    7bec:	ldrb	r3, [r2, #10]
    7bee:	and.w	r0, r3, #64	; 0x40
    7bf2:	and.w	r4, r0, #255	; 0xff
    7bf6:	cbz	r0, 7c20 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    7bf8:	ldr	r3, [pc, #180]	; (7cb0 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    7bfa:	ldrb	r3, [r3, #0]
    7bfc:	cbnz	r3, 7c02 <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    7bfe:	lsls	r5, r5, #9
    lastSector <<= 9;
    7c00:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    7c02:	mov	r1, r5
    7c04:	ldr	r0, [pc, #172]	; (7cb4 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    7c06:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    7c0a:	mov	r4, r0
    7c0c:	cbnz	r0, 7c56 <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c0e:	ldr	r1, [pc, #168]	; (7cb8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7c10:	ldr	r3, [pc, #168]	; (7cbc <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c12:	movs	r0, #15
  m_errorLine = line;
    7c14:	mov.w	r2, #752	; 0x2f0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c18:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c1a:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7c1c:	mov	r0, r4
    7c1e:	pop	{r4, r5, r6, pc}
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    7c20:	ldrb	r1, [r2, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7c22:	and.w	r3, r3, #63	; 0x3f
    7c26:	lsls	r3, r3, #1
    7c28:	adds	r2, r6, #1
    7c2a:	orr.w	r3, r3, r1, lsr #7
    7c2e:	orrs	r2, r5
    7c30:	tst	r3, r2
    7c32:	beq.n	7bf8 <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c34:	ldr	r1, [pc, #128]	; (7cb8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7c36:	ldr	r3, [pc, #132]	; (7cbc <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c38:	movs	r0, #39	; 0x27
  m_errorLine = line;
    7c3a:	mov.w	r2, #744	; 0x2e8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c3e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c40:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7c42:	mov	r0, r4
    7c44:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    7c46:	ldr	r3, [r0, #0]
    7c48:	ldr	r3, [r3, #24]
    7c4a:	blx	r3
    7c4c:	mov	r4, r0
    7c4e:	cmp	r0, #0
    7c50:	bne.n	7bea <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7c52:	mov	r0, r4
    7c54:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    7c56:	mov	r1, r6
    7c58:	ldr	r0, [pc, #100]	; (7cc0 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    7c5a:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    7c5e:	mov	r4, r0
    7c60:	cbnz	r0, 7c72 <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c62:	ldr	r1, [pc, #84]	; (7cb8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7c64:	ldr	r3, [pc, #84]	; (7cbc <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c66:	movs	r0, #16
  m_errorLine = line;
    7c68:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c6c:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c6e:	str	r2, [r3, #0]
    7c70:	b.n	7c1c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    7c72:	movs	r1, #0
    7c74:	ldr	r0, [pc, #76]	; (7cc4 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    7c76:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    7c7a:	mov	r4, r0
    7c7c:	cbnz	r0, 7c8e <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c7e:	ldr	r1, [pc, #56]	; (7cb8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7c80:	ldr	r3, [pc, #56]	; (7cbc <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c82:	movs	r0, #17
  m_errorLine = line;
    7c84:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c88:	strb	r0, [r1, #0]
  m_errorLine = line;
    7c8a:	str	r2, [r3, #0]
    7c8c:	b.n	7c1c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    7c8e:	ldr	r0, [pc, #56]	; (7cc8 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    7c90:	bl	78f0 <waitTimeout(bool (*)())>
    7c94:	cmp	r0, #0
    7c96:	beq.n	7c1c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c98:	ldr	r1, [pc, #28]	; (7cb8 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    7c9a:	ldr	r3, [pc, #32]	; (7cbc <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c9c:	movs	r0, #40	; 0x28
  m_errorLine = line;
    7c9e:	movw	r2, #761	; 0x2f9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ca2:	strb	r0, [r1, #0]
  m_errorLine = line;
    7ca4:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7ca6:	movs	r4, #0
    7ca8:	b.n	7c1c <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    7caa:	nop
    7cac:	.word	0x20019a50
    7cb0:	.word	0x20019a38
    7cb4:	.word	0x201a0000
    7cb8:	.word	0x200138d4
    7cbc:	.word	0x20019a68
    7cc0:	.word	0x211a0000
    7cc4:	.word	0x261b0000
    7cc8:	.word	0x000079f1

00007ccc <waitTransferComplete() [clone .part.8]>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    7ccc:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    7cce:	ldr	r0, [pc, #56]	; (7d08 <waitTransferComplete() [clone .part.8]+0x3c>)
    7cd0:	bl	78f0 <waitTimeout(bool (*)())>
  m_transferActive = false;
    7cd4:	ldr	r1, [pc, #52]	; (7d0c <waitTransferComplete() [clone .part.8]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    7cd6:	ldr	r2, [pc, #56]	; (7d10 <waitTransferComplete() [clone .part.8]+0x44>)
    7cd8:	ldr	r3, [pc, #56]	; (7d14 <waitTransferComplete() [clone .part.8]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    7cda:	movs	r4, #0
    7cdc:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    7cde:	ldr	r1, [r2, #0]
    7ce0:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7ce2:	ldr	r1, [r3, #0]
    7ce4:	str	r1, [r2, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    7ce6:	cbnz	r0, 7cf0 <waitTransferComplete() [clone .part.8]+0x24>
    7ce8:	ldr	r2, [r3, #0]
    7cea:	ldr	r3, [pc, #44]	; (7d18 <waitTransferComplete() [clone .part.8]+0x4c>)
    7cec:	ands	r3, r2
    7cee:	cbz	r3, 7d02 <waitTransferComplete() [clone .part.8]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cf0:	ldr	r1, [pc, #40]	; (7d1c <waitTransferComplete() [clone .part.8]+0x50>)
  m_errorLine = line;
    7cf2:	ldr	r3, [pc, #44]	; (7d20 <waitTransferComplete() [clone .part.8]+0x54>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cf4:	movs	r0, #31
  m_errorLine = line;
    7cf6:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cfa:	strb	r0, [r1, #0]
  m_errorLine = line;
    7cfc:	str	r2, [r3, #0]
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    7cfe:	movs	r0, #0
  }
  return true;
}
    7d00:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    7d02:	movs	r0, #1
    7d04:	pop	{r4, pc}
    7d06:	nop
    7d08:	.word	0x000077a9
    7d0c:	.word	0x20019a44
    7d10:	.word	0x400b1030
    7d14:	.word	0x20019a48
    7d18:	.word	0x117f0000
    7d1c:	.word	0x200138d4
    7d20:	.word	0x20019a68

00007d24 <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    7d24:	push	{r4, r5, r6, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d26:	ldr	r4, [pc, #104]	; (7d90 <SdioCard::readStop()+0x6c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7d28:	ldr	r0, [pc, #104]	; (7d94 <SdioCard::readStop()+0x70>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7d2a:	ldr	r3, [r4, #0]
    7d2c:	bic.w	r3, r3, #65536	; 0x10000
    7d30:	str	r3, [r4, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7d32:	movs	r1, #0
    7d34:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    7d38:	mov	r5, r0
    7d3a:	cbnz	r0, 7d4e <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d3c:	ldr	r1, [pc, #88]	; (7d98 <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    7d3e:	ldr	r3, [pc, #92]	; (7d9c <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d40:	movs	r0, #9
  m_errorLine = line;
    7d42:	movw	r2, #575	; 0x23f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d46:	strb	r0, [r1, #0]
  m_errorLine = line;
    7d48:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7d4a:	mov	r0, r5
    7d4c:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    7d4e:	ldr	r0, [pc, #80]	; (7da0 <SdioCard::readStop()+0x7c>)
    7d50:	bl	7918 <yieldTimeout(bool (*)())>
    7d54:	cbnz	r0, 7d7a <SdioCard::readStop()+0x56>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    7d56:	ldr	r3, [pc, #76]	; (7da4 <SdioCard::readStop()+0x80>)
    7d58:	ldr	r3, [r3, #0]
    7d5a:	lsls	r3, r3, #30
    7d5c:	bpl.n	7d4a <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    7d5e:	ldr	r1, [pc, #72]	; (7da8 <SdioCard::readStop()+0x84>)
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7d60:	ldr	r0, [pc, #72]	; (7dac <SdioCard::readStop()+0x88>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    7d62:	ldr	r6, [r1, #0]
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7d64:	ldr	r3, [r4, #0]
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7d66:	ldr	r2, [r0, #0]
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7d68:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7d6c:	orr.w	r2, r2, #67108864	; 0x4000000
    7d70:	str	r2, [r0, #0]
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    7d72:	str	r6, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7d74:	mov	r0, r5
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    SDHC_PROCTL = proctl;
    7d76:	str	r3, [r4, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7d78:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d7a:	ldr	r1, [pc, #28]	; (7d98 <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    7d7c:	ldr	r3, [pc, #28]	; (7d9c <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d7e:	movs	r0, #10
  m_errorLine = line;
    7d80:	movw	r2, #579	; 0x243
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d84:	strb	r0, [r1, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7d86:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7d88:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7d8a:	mov	r0, r5
    7d8c:	pop	{r4, r5, r6, pc}
    7d8e:	nop
    7d90:	.word	0x400b1028
    7d94:	.word	0x0cdb0000
    7d98:	.word	0x200138d4
    7d9c:	.word	0x20019a68
    7da0:	.word	0x00007761
    7da4:	.word	0x400b1024
    7da8:	.word	0x400b1034
    7dac:	.word	0x400b102c

00007db0 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7db0:	push	{r4, r5, r6, lr}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    7db2:	ldr	r6, [pc, #124]	; (7e30 <SdioCard::writeData(unsigned char const*)+0x80>)
    7db4:	ldrb	r3, [r6, #0]
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7db6:	mov	r5, r1
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    7db8:	cmp	r3, #0
    7dba:	bne.n	7e24 <SdioCard::writeData(unsigned char const*)+0x74>
  if (!waitTransferComplete()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    7dbc:	ldr	r3, [pc, #116]	; (7e34 <SdioCard::writeData(unsigned char const*)+0x84>)
    7dbe:	ldr	r3, [r3, #0]
    7dc0:	lsls	r1, r3, #23
    7dc2:	bmi.n	7dd6 <SdioCard::writeData(unsigned char const*)+0x26>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7dc4:	ldr	r3, [pc, #112]	; (7e38 <SdioCard::writeData(unsigned char const*)+0x88>)
    7dc6:	ldr	r2, [r3, #0]
    7dc8:	bic.w	r2, r2, #65536	; 0x10000
    7dcc:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7dce:	ldr	r2, [r3, #0]
    7dd0:	orr.w	r2, r2, #131072	; 0x20000
    7dd4:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7dd6:	ldr	r2, [pc, #96]	; (7e38 <SdioCard::writeData(unsigned char const*)+0x88>)
  if (waitTimeout(isBusyFifoWrite)) {
    7dd8:	ldr	r0, [pc, #96]	; (7e3c <SdioCard::writeData(unsigned char const*)+0x8c>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7dda:	ldr	r3, [r2, #0]
    7ddc:	orr.w	r3, r3, #65536	; 0x10000
    7de0:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    7de2:	bl	78f0 <waitTimeout(bool (*)())>
    7de6:	cbnz	r0, 7e12 <SdioCard::writeData(unsigned char const*)+0x62>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7de8:	ldr	r4, [pc, #72]	; (7e34 <SdioCard::writeData(unsigned char const*)+0x84>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7dea:	ldr	r0, [pc, #84]	; (7e40 <SdioCard::writeData(unsigned char const*)+0x90>)
    7dec:	subs	r3, r5, #4
    7dee:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7df2:	ldr	r2, [r4, #0]
    7df4:	lsls	r2, r2, #21
    7df6:	bpl.n	7df2 <SdioCard::writeData(unsigned char const*)+0x42>
    7df8:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7dfc:	ldr.w	r2, [r3, #4]!
    7e00:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7e02:	cmp	r1, r3
    7e04:	bne.n	7dfc <SdioCard::writeData(unsigned char const*)+0x4c>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7e06:	cmp	r5, r1
    7e08:	mov	r3, r1
    7e0a:	bne.n	7df2 <SdioCard::writeData(unsigned char const*)+0x42>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    7e0c:	movs	r0, #1
    7e0e:	strb	r0, [r6, #0]
    7e10:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e12:	ldr	r1, [pc, #48]	; (7e44 <SdioCard::writeData(unsigned char const*)+0x94>)
  m_errorLine = line;
    7e14:	ldr	r3, [pc, #48]	; (7e48 <SdioCard::writeData(unsigned char const*)+0x98>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e16:	movs	r0, #33	; 0x21
  m_errorLine = line;
    7e18:	mov.w	r2, #1012	; 0x3f4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e1c:	strb	r0, [r1, #0]
  m_errorLine = line;
    7e1e:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    7e20:	movs	r0, #0
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    7e22:	pop	{r4, r5, r6, pc}
    7e24:	bl	7ccc <waitTransferComplete() [clone .part.8]>
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    7e28:	cmp	r0, #0
    7e2a:	bne.n	7dbc <SdioCard::writeData(unsigned char const*)+0xc>
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    7e2c:	pop	{r4, r5, r6, pc}
    7e2e:	nop
    7e30:	.word	0x20019a44
    7e34:	.word	0x400b1024
    7e38:	.word	0x400b1028
    7e3c:	.word	0x00007795
    7e40:	.word	0x400b1020
    7e44:	.word	0x200138d4
    7e48:	.word	0x20019a68

00007e4c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7e4c:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    7e4e:	ldr	r0, [pc, #80]	; (7ea0 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7e50:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    7e52:	bl	7918 <yieldTimeout(bool (*)())>
    7e56:	cbnz	r0, 7e8c <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7e58:	ldr	r2, [pc, #72]	; (7ea4 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7e5a:	ldr	r1, [pc, #76]	; (7ea8 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7e5c:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    7e5e:	ldr	r0, [pc, #76]	; (7eac <SdioCard::writeStart(unsigned long)+0x60>)
    7e60:	ldr	r5, [pc, #76]	; (7eb0 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7e62:	bic.w	r3, r3, #65536	; 0x10000
    7e66:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7e68:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    7e6a:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7e6c:	cbnz	r3, 7e88 <SdioCard::writeStart(unsigned long)+0x3c>
    7e6e:	lsls	r1, r4, #9
    7e70:	ldr	r0, [pc, #64]	; (7eb4 <SdioCard::writeStart(unsigned long)+0x68>)
    7e72:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    7e76:	cbnz	r0, 7e86 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e78:	ldr	r1, [pc, #60]	; (7eb8 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7e7a:	ldr	r3, [pc, #64]	; (7ebc <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e7c:	movs	r4, #14
  m_errorLine = line;
    7e7e:	mov.w	r2, #1128	; 0x468
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e82:	strb	r4, [r1, #0]
  m_errorLine = line;
    7e84:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    7e86:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7e88:	mov	r1, r4
    7e8a:	b.n	7e70 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e8c:	ldr	r1, [pc, #40]	; (7eb8 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7e8e:	ldr	r3, [pc, #44]	; (7ebc <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e90:	movs	r0, #10
  m_errorLine = line;
    7e92:	movw	r2, #1116	; 0x45c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7e96:	strb	r0, [r1, #0]
  m_errorLine = line;
    7e98:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7e9a:	movs	r0, #0
    7e9c:	pop	{r3, r4, r5, pc}
    7e9e:	nop
    7ea0:	.word	0x000079f1
    7ea4:	.word	0x400b1028
    7ea8:	.word	0x20019a38
    7eac:	.word	0x400b1004
    7eb0:	.word	0xffff0200
    7eb4:	.word	0x193a0022
    7eb8:	.word	0x200138d4
    7ebc:	.word	0x20019a68

00007ec0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7ec0:	push	{r3, r4, r5, r6, r7, lr}
    7ec2:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7ec4:	ldrb	r0, [r0, #8]
    7ec6:	lsls	r0, r0, #31
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7ec8:	mov	r4, r1
    7eca:	mov	r5, r2
    7ecc:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7ece:	bmi.n	7ef8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7ed0:	cbz	r3, 7ef4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7ed2:	add	r7, r1
    7ed4:	b.n	7eda <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    7ed6:	cmp	r4, r7
    7ed8:	beq.n	7ef4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    7eda:	ldr	r3, [r6, #0]
    7edc:	mov	r2, r5
    7ede:	mov	r1, r4
    7ee0:	ldr	r3, [r3, #28]
    7ee2:	mov	r0, r6
    7ee4:	blx	r3
    7ee6:	adds	r4, #1
    7ee8:	add.w	r5, r5, #512	; 0x200
    7eec:	cmp	r0, #0
    7eee:	bne.n	7ed6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    7ef0:	movs	r0, #0
    7ef2:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7ef4:	movs	r0, #1
    7ef6:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    7ef8:	lsls	r0, r2, #30
    7efa:	beq.n	7f22 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7efc:	cmp	r3, #0
    7efe:	beq.n	7ef4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    7f00:	add	r7, r1
    7f02:	b.n	7f08 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    7f04:	cmp	r7, r4
    7f06:	beq.n	7ef4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    7f08:	ldr	r3, [r6, #0]
    7f0a:	mov	r2, r5
    7f0c:	mov	r1, r4
    7f0e:	ldr	r3, [r3, #28]
    7f10:	mov	r0, r6
    7f12:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7f14:	adds	r4, #1
    7f16:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    7f1a:	cmp	r0, #0
    7f1c:	bne.n	7f04 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    7f1e:	movs	r0, #0
    7f20:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    7f22:	ldr	r0, [pc, #24]	; (7f3c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    7f24:	bl	7ac0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7f28:	cmp	r0, #0
    7f2a:	bne.n	7ef4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f2c:	ldr	r1, [pc, #16]	; (7f40 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    7f2e:	ldr	r3, [pc, #20]	; (7f44 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f30:	movs	r4, #14
  m_errorLine = line;
    7f32:	movw	r2, #1102	; 0x44e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f36:	strb	r4, [r1, #0]
  m_errorLine = line;
    7f38:	str	r2, [r3, #0]
    7f3a:	pop	{r3, r4, r5, r6, r7, pc}
    7f3c:	.word	0x193a0027
    7f40:	.word	0x200138d4
    7f44:	.word	0x20019a68

00007f48 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7f48:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7f4a:	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7f4c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7f4e:	lsls	r2, r3, #31
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7f50:	sub.w	sp, sp, #512	; 0x200
    7f54:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    7f56:	bpl.n	7f8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    7f58:	lsls	r3, r5, #30
    7f5a:	beq.n	7f6a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    7f5c:	mov	r1, r5
    7f5e:	mov	r0, sp
    7f60:	mov.w	r2, #512	; 0x200
    7f64:	bl	89a8 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    7f68:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    7f6a:	mov	r2, r5
    7f6c:	mov	r1, r6
    7f6e:	movs	r3, #1
    7f70:	ldr	r0, [pc, #144]	; (8004 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    7f72:	bl	7ac0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7f76:	cbnz	r0, 7f86 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f78:	ldr	r1, [pc, #140]	; (8008 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc0>)
  m_errorLine = line;
    7f7a:	ldr	r3, [pc, #144]	; (800c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f7c:	movs	r4, #13
  m_errorLine = line;
    7f7e:	movw	r2, #1046	; 0x416
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f82:	strb	r4, [r1, #0]
  m_errorLine = line;
    7f84:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    7f86:	add.w	sp, sp, #512	; 0x200
    7f8a:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    7f8c:	ldr	r3, [pc, #128]	; (8010 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    7f8e:	ldrb	r3, [r3, #0]
    7f90:	mov	r4, r0
    7f92:	cbnz	r3, 7fb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x6e>
    if (!waitTransferComplete()) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7f94:	ldr	r3, [pc, #124]	; (8014 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
    7f96:	ldr	r3, [r3, #0]
    7f98:	lsrs	r3, r3, #16
    7f9a:	lsls	r3, r3, #16
    7f9c:	cbz	r3, 7ff4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7f9e:	ldrb	r3, [r4, #9]
    7fa0:	cmp	r3, #2
    7fa2:	beq.n	7fc2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7a>
      if (!syncDevice()) {
    7fa4:	ldr	r3, [r4, #0]
    7fa6:	mov	r0, r4
    7fa8:	ldr	r3, [r3, #24]
    7faa:	blx	r3
    7fac:	cbnz	r0, 7fca <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    7fae:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    7fb0:	add.w	sp, sp, #512	; 0x200
    7fb4:	pop	{r4, r5, r6, pc}
    7fb6:	bl	7ccc <waitTransferComplete() [clone .part.8]>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    7fba:	cmp	r0, #0
    7fbc:	bne.n	7f94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    7fbe:	movs	r0, #0
    7fc0:	b.n	7fb0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x68>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7fc2:	ldr	r3, [r4, #4]
    7fc4:	cmp	r6, r3
    7fc6:	bne.n	7fa4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    7fc8:	b.n	7fde <SdioCard::writeSector(unsigned long, unsigned char const*)+0x96>
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    7fca:	ldr	r3, [r4, #0]
    7fcc:	mov	r1, r6
    7fce:	ldr	r3, [r3, #72]	; 0x48
    7fd0:	mov	r0, r4
    7fd2:	blx	r3
    7fd4:	cmp	r0, #0
    7fd6:	beq.n	7fae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    7fd8:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    7fda:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    7fdc:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    7fde:	ldr	r3, [r4, #0]
    7fe0:	mov	r1, r5
    7fe2:	ldr	r3, [r3, #68]	; 0x44
    7fe4:	mov	r0, r4
    7fe6:	blx	r3
    7fe8:	cmp	r0, #0
    7fea:	beq.n	7fae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
      return false;
    }
    m_curSector++;
    7fec:	ldr	r3, [r4, #4]
    7fee:	adds	r3, #1
    7ff0:	str	r3, [r4, #4]
    7ff2:	b.n	7f86 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    7ff4:	ldr	r3, [r4, #0]
    7ff6:	mov	r0, r4
    7ff8:	ldr	r3, [r3, #24]
    7ffa:	blx	r3
    7ffc:	cmp	r0, #0
    7ffe:	bne.n	7f9e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
    8000:	b.n	7fae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
    8002:	nop
    8004:	.word	0x183a0001
    8008:	.word	0x200138d4
    800c:	.word	0x20019a68
    8010:	.word	0x20019a44
    8014:	.word	0x400b1004

00008018 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8018:	push	{r3, r4, r5, r6, r7, lr}
    801a:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    801c:	ldrb	r0, [r0, #8]
    801e:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8020:	mov	r4, r1
    8022:	mov	r5, r2
    8024:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8026:	bmi.n	8050 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8028:	cbz	r3, 804c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    802a:	add	r7, r1
    802c:	b.n	8032 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    802e:	cmp	r4, r7
    8030:	beq.n	804c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    8032:	ldr	r3, [r6, #0]
    8034:	mov	r2, r5
    8036:	mov	r1, r4
    8038:	ldr	r3, [r3, #12]
    803a:	mov	r0, r6
    803c:	blx	r3
    803e:	adds	r4, #1
    8040:	add.w	r5, r5, #512	; 0x200
    8044:	cmp	r0, #0
    8046:	bne.n	802e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    8048:	movs	r0, #0
    804a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    804c:	movs	r0, #1
    804e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    8050:	lsls	r0, r2, #30
    8052:	beq.n	807a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8054:	cmp	r3, #0
    8056:	beq.n	804c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8058:	add	r7, r1
    805a:	b.n	8060 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    805c:	cmp	r7, r4
    805e:	beq.n	804c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    8060:	ldr	r3, [r6, #0]
    8062:	mov	r2, r5
    8064:	mov	r1, r4
    8066:	ldr	r3, [r3, #12]
    8068:	mov	r0, r6
    806a:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    806c:	adds	r4, #1
    806e:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    8072:	cmp	r0, #0
    8074:	bne.n	805c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    8076:	movs	r0, #0
    8078:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    807a:	ldr	r0, [pc, #24]	; (8094 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    807c:	bl	7ac0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8080:	cmp	r0, #0
    8082:	bne.n	804c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8084:	ldr	r1, [pc, #16]	; (8098 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    8086:	ldr	r3, [pc, #20]	; (809c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8088:	movs	r4, #12
  m_errorLine = line;
    808a:	movw	r2, #909	; 0x38d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    808e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8090:	str	r2, [r3, #0]
    8092:	pop	{r3, r4, r5, r6, r7, pc}
    8094:	.word	0x123a0037
    8098:	.word	0x200138d4
    809c:	.word	0x20019a68

000080a0 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    80a0:	push	{r3, r4, r5, r6, r7, lr}
    80a2:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    80a4:	ldr	r0, [pc, #116]	; (811c <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    80a6:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    80a8:	bl	78f0 <waitTimeout(bool (*)())>
    80ac:	cbz	r0, 80c0 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80ae:	ldr	r1, [pc, #112]	; (8120 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    80b0:	ldr	r3, [pc, #112]	; (8124 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80b2:	movs	r0, #10
  m_errorLine = line;
    80b4:	mov.w	r2, #410	; 0x19a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80b8:	strb	r0, [r1, #0]
  m_errorLine = line;
    80ba:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    80bc:	movs	r0, #0
    80be:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    80c0:	ldr	r2, [pc, #100]	; (8128 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    80c2:	ldr.w	lr, [pc, #132]	; 8148 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    80c6:	ldr	r7, [pc, #100]	; (812c <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    80c8:	ldr	r6, [pc, #100]	; (8130 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    80ca:	ldr	r3, [pc, #104]	; (8134 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    80cc:	mov.w	ip, #1
    80d0:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    80d4:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    80d6:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    80d8:	ldr	r5, [pc, #92]	; (8138 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    80da:	ldr	r2, [pc, #96]	; (813c <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    80dc:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    80de:	ldr	r0, [pc, #96]	; (8140 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    80e0:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    80e2:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    80e4:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    80e8:	cbnz	r0, 80fa <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80ea:	ldr	r1, [pc, #52]	; (8120 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    80ec:	ldr	r3, [pc, #52]	; (8124 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80ee:	movs	r4, #4
  m_errorLine = line;
    80f0:	movw	r2, #417	; 0x1a1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80f4:	strb	r4, [r1, #0]
  m_errorLine = line;
    80f6:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    80f8:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    80fa:	ldr	r0, [pc, #72]	; (8144 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    80fc:	bl	7918 <yieldTimeout(bool (*)())>
    8100:	cbnz	r0, 810a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    8102:	bl	7aa0 <waitDmaStatus() [clone .part.4]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    8106:	cbz	r0, 810a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    8108:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    810a:	ldr	r1, [pc, #20]	; (8120 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    810c:	ldr	r3, [pc, #20]	; (8124 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    810e:	movs	r0, #37	; 0x25
  m_errorLine = line;
    8110:	mov.w	r2, #420	; 0x1a4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8114:	strb	r0, [r1, #0]
  m_errorLine = line;
    8116:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    8118:	movs	r0, #0
    811a:	pop	{r3, r4, r5, r6, r7, pc}
    811c:	.word	0x000079f1
    8120:	.word	0x200138d4
    8124:	.word	0x20019a68
    8128:	.word	0x20019a48
    812c:	.word	0x400b1000
    8130:	.word	0x400b1004
    8134:	.word	0x400b1038
    8138:	.word	0x00010040
    813c:	.word	0x117f0002
    8140:	.word	0x063a0011
    8144:	.word	0x00007775
    8148:	.word	0x20019a60

0000814c <SdioCard::begin(SdioConfig)>:
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    814c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8150:	ldr	r5, [pc, #568]	; (838c <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8152:	ldr	r4, [pc, #572]	; (8390 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    8154:	ldr.w	r8, [pc, #684]	; 8404 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8158:	ldr	r7, [pc, #568]	; (8394 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    815a:	ldr	r6, [pc, #572]	; (8398 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    815c:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    815e:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8160:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8162:	strb	r3, [r0, #9]
  m_initDone = false;
    8164:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8168:	strb	r3, [r7, #0]
  m_version2 = false;
    816a:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    816c:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    816e:	ldr	r2, [pc, #556]	; (839c <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8170:	ldr	r0, [pc, #556]	; (83a0 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8172:	ldr	r1, [pc, #560]	; (83a4 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8174:	ldr.w	lr, [pc, #656]	; 8408 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8178:	orr.w	r3, r3, #201326592	; 0xc000000
    817c:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    817e:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8180:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8184:	orr.w	r3, r3, #131072	; 0x20000
    8188:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    818a:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    818c:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8190:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8194:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8198:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    819a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    819e:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    81a0:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    81a2:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    81a4:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    81a6:	ldr	r3, [r2, #0]
    81a8:	orr.w	r3, r3, #16777216	; 0x1000000
    81ac:	orr.w	r3, r3, #32768	; 0x8000
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    81b0:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    81b2:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    81b4:	ldr	r3, [r2, #0]
    81b6:	ldr	r4, [pc, #496]	; (83a8 <SdioCard::begin(SdioConfig)+0x25c>)
    81b8:	lsls	r1, r3, #7
    81ba:	bmi.n	81b4 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    81bc:	mov.w	r0, #400	; 0x190
    81c0:	bl	77c0 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    81c4:	ldr.w	ip, [pc, #472]	; 83a0 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    81c8:	ldr.w	lr, [pc, #572]	; 8408 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    81cc:	ldr	r1, [pc, #468]	; (83a4 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    81ce:	ldr	r2, [pc, #476]	; (83ac <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    81d0:	ldr	r0, [pc, #476]	; (83b0 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    81d2:	movw	r3, #1091	; 0x443
    81d6:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    81da:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    81de:	mov.w	lr, #1088	; 0x440
    81e2:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    81e6:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    81e8:	add.w	r2, r2, #409600	; 0x64000
    81ec:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    81ee:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    81f0:	ldr	r0, [pc, #448]	; (83b4 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    81f2:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    81f4:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    81f6:	ldr	r1, [pc, #448]	; (83b8 <SdioCard::begin(SdioConfig)+0x26c>)
    81f8:	movs	r0, #81	; 0x51
    81fa:	bl	9354 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    81fe:	ldr	r3, [pc, #444]	; (83bc <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8200:	ldr	r1, [pc, #444]	; (83c0 <SdioCard::begin(SdioConfig)+0x274>)
    8202:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8204:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8208:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    820a:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    820c:	ldr	r3, [r4, #0]
    820e:	orr.w	r3, r3, #134217728	; 0x8000000
    8212:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8214:	ldr	r1, [r4, #0]
    8216:	ands.w	r1, r1, #134217728	; 0x8000000
    821a:	bne.n	8214 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    821c:	mov	r0, r1
    821e:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    8222:	mov	r4, r0
    8224:	cmp	r0, #0
    8226:	beq.n	82c6 <SdioCard::begin(SdioConfig)+0x17a>
    8228:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    822a:	mov.w	r1, #426	; 0x1aa
    822e:	ldr	r0, [pc, #404]	; (83c4 <SdioCard::begin(SdioConfig)+0x278>)
    8230:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    8234:	cmp	r0, #0
    8236:	bne.n	82f4 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8238:	subs	r4, #1
    823a:	bne.n	822a <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    823c:	ldrb	r3, [r6, #0]
    823e:	ldr	r6, [pc, #392]	; (83c8 <SdioCard::begin(SdioConfig)+0x27c>)
    8240:	cmp	r3, #0
    8242:	it	eq
    8244:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    8248:	bl	93c8 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    824c:	ldr	r4, [pc, #380]	; (83cc <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    824e:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8250:	movs	r1, #0
    8252:	ldr	r0, [pc, #380]	; (83d0 <SdioCard::begin(SdioConfig)+0x284>)
    8254:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    8258:	cbnz	r0, 8270 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    825a:	ldr	r2, [pc, #376]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    825c:	mov.w	r1, #676	; 0x2a4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8260:	movs	r3, #23
  m_errorLine = line;
    8262:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8264:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    8266:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8268:	mov	r0, r4
    826a:	add	sp, #68	; 0x44
    826c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8270:	mov	r1, r6
    8272:	ldr	r0, [pc, #356]	; (83d8 <SdioCard::begin(SdioConfig)+0x28c>)
    8274:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    8278:	cmp	r0, #0
    827a:	beq.n	825a <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    827c:	bl	93c8 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8280:	ldr	r3, [pc, #344]	; (83dc <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8282:	ldr	r2, [pc, #328]	; (83cc <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8284:	rsb	r0, r9, r0
    8288:	cmp	r0, r3
    828a:	bhi.n	825a <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    828c:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    828e:	cmp	r3, #0
    8290:	bge.n	8250 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    8292:	ldr	r3, [pc, #332]	; (83e0 <SdioCard::begin(SdioConfig)+0x294>)
    8294:	ldr	r1, [r2, #0]
    8296:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    8298:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    829a:	ldr	r0, [pc, #328]	; (83e4 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    829c:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    829e:	it	mi
    82a0:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    82a2:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    82a6:	it	mi
    82a8:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    82aa:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    82ae:	mov	r4, r0
    82b0:	cbnz	r0, 82da <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82b2:	ldr	r2, [pc, #288]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    82b4:	movw	r1, #685	; 0x2ad
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82b8:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    82ba:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82bc:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82be:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    82c0:	add	sp, #68	; 0x44
    82c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82c6:	ldr	r2, [pc, #268]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    82c8:	movw	r1, #659	; 0x293
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82cc:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    82ce:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82d0:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82d2:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    82d4:	add	sp, #68	; 0x44
    82d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    82da:	movs	r1, #0
    82dc:	ldr	r0, [pc, #264]	; (83e8 <SdioCard::begin(SdioConfig)+0x29c>)
    82de:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    82e2:	mov	r4, r0
    82e4:	cbnz	r0, 8316 <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82e6:	ldr	r2, [pc, #236]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    82e8:	mov.w	r1, #688	; 0x2b0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82ec:	movs	r3, #3
  m_errorLine = line;
    82ee:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    82f0:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    82f2:	b.n	8268 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    82f4:	ldr	r3, [pc, #212]	; (83cc <SdioCard::begin(SdioConfig)+0x280>)
    82f6:	ldr	r3, [r3, #0]
    82f8:	cmp.w	r3, #426	; 0x1aa
    82fc:	beq.n	830e <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    82fe:	ldr	r2, [pc, #212]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    8300:	movw	r1, #665	; 0x299
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8304:	movs	r3, #6
  m_errorLine = line;
    8306:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8308:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    830a:	movs	r4, #0
    830c:	b.n	8268 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    830e:	movs	r3, #1
    8310:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8312:	ldr	r6, [pc, #180]	; (83c8 <SdioCard::begin(SdioConfig)+0x27c>)
    8314:	b.n	8248 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8316:	ldr	r3, [pc, #180]	; (83cc <SdioCard::begin(SdioConfig)+0x280>)
    8318:	ldr	r6, [pc, #208]	; (83ec <SdioCard::begin(SdioConfig)+0x2a0>)
    831a:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    831c:	ldr	r1, [pc, #208]	; (83f0 <SdioCard::begin(SdioConfig)+0x2a4>)
    831e:	ldr	r0, [pc, #212]	; (83f4 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8320:	lsrs	r3, r3, #16
    8322:	lsls	r3, r3, #16
    8324:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8326:	bl	7a3c <readReg16(unsigned long, void*)>
    832a:	mov	r4, r0
    832c:	cbnz	r0, 833c <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    832e:	ldr	r2, [pc, #164]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    8330:	movw	r1, #693	; 0x2b5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8334:	movs	r3, #7
  m_errorLine = line;
    8336:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8338:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    833a:	b.n	8268 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    833c:	ldr	r1, [pc, #184]	; (83f8 <SdioCard::begin(SdioConfig)+0x2ac>)
    833e:	ldr	r0, [pc, #188]	; (83fc <SdioCard::begin(SdioConfig)+0x2b0>)
    8340:	bl	7a3c <readReg16(unsigned long, void*)>
    8344:	mov	r4, r0
    8346:	cbnz	r0, 8356 <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8348:	ldr	r2, [pc, #136]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    834a:	mov.w	r1, #696	; 0x2b8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    834e:	movs	r3, #8
  m_errorLine = line;
    8350:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8352:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8354:	b.n	8268 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8356:	ldr	r1, [r6, #0]
    8358:	ldr	r0, [pc, #164]	; (8400 <SdioCard::begin(SdioConfig)+0x2b4>)
    835a:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    835e:	mov	r4, r0
    8360:	cbnz	r0, 8370 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8362:	ldr	r2, [pc, #112]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    8364:	movw	r1, #699	; 0x2bb
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8368:	movs	r3, #5
  m_errorLine = line;
    836a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    836c:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    836e:	b.n	8268 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8370:	ldr	r1, [r6, #0]
    8372:	ldr	r0, [pc, #92]	; (83d0 <SdioCard::begin(SdioConfig)+0x284>)
    8374:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    8378:	cmp	r0, #0
    837a:	bne.n	840c <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    837c:	ldr	r2, [pc, #84]	; (83d4 <SdioCard::begin(SdioConfig)+0x288>)
    837e:	movw	r1, #703	; 0x2bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8382:	movs	r3, #20
  m_errorLine = line;
    8384:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8386:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8388:	movs	r4, #0
    838a:	b.n	8268 <SdioCard::begin(SdioConfig)+0x11c>
    838c:	.word	0x200138d4
    8390:	.word	0x4000d800
    8394:	.word	0x20019a38
    8398:	.word	0x20019a20
    839c:	.word	0x40048030
    83a0:	.word	0x4004d000
    83a4:	.word	0x4004d008
    83a8:	.word	0x400b102c
    83ac:	.word	0x4004d00c
    83b0:	.word	0x4004d010
    83b4:	.word	0x117f000b
    83b8:	.word	0x00007709
    83bc:	.word	0xe000e108
    83c0:	.word	0xe000e451
    83c4:	.word	0x081a0000
    83c8:	.word	0x40300000
    83cc:	.word	0x400b1010
    83d0:	.word	0x371a0000
    83d4:	.word	0x20019a68
    83d8:	.word	0x29020000
    83dc:	.word	0x000f4240
    83e0:	.word	0x20019a3c
    83e4:	.word	0x02090000
    83e8:	.word	0x031a0000
    83ec:	.word	0x20019a40
    83f0:	.word	0x20019a50
    83f4:	.word	0x09090000
    83f8:	.word	0x20019a24
    83fc:	.word	0x0a090000
    8400:	.word	0x071b0000
    8404:	.word	0x20019a4c
    8408:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    840c:	movs	r1, #2
    840e:	ldr	r0, [pc, #168]	; (84b8 <SdioCard::begin(SdioConfig)+0x36c>)
    8410:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    8414:	mov	r4, r0
    8416:	cmp	r0, #0
    8418:	beq.n	837c <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    841a:	ldr	r3, [pc, #160]	; (84bc <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    841c:	ldr	r0, [pc, #160]	; (84c0 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    841e:	ldr	r2, [r3, #0]
    8420:	bic.w	r2, r2, #6
    8424:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8426:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8428:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    842c:	orr.w	r2, r2, #2
    8430:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8432:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8434:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8436:	mvn.w	r0, #4278190080	; 0xff000000
    843a:	bl	80a0 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    843e:	cbz	r0, 8448 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    8440:	ldrb.w	r3, [sp, #13]
    8444:	lsls	r3, r3, #30
    8446:	bmi.n	849a <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    8448:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    844c:	ldr.w	fp, [pc, #132]	; 84d4 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8450:	ldr.w	sl, [pc, #132]	; 84d8 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8454:	ldr.w	r9, [pc, #132]	; 84dc <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8458:	ldr	r7, [pc, #104]	; (84c4 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    845a:	ldr	r6, [pc, #108]	; (84c8 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    845c:	ldr	r5, [pc, #108]	; (84cc <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    845e:	movw	r3, #259	; 0x103
    8462:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8466:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    846a:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    846e:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8470:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8472:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    8474:	bl	77c0 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8478:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    847c:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8480:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8482:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8486:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    848a:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    848e:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8490:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8492:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    8494:	strb.w	r2, [r8]
  return true;
    8498:	b.n	8268 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    849a:	mov	r1, sp
    849c:	ldr	r0, [pc, #48]	; (84d0 <SdioCard::begin(SdioConfig)+0x384>)
    849e:	bl	80a0 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    84a2:	cmp	r0, #0
    84a4:	beq.n	8448 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    84a6:	ldrb.w	r3, [sp, #16]
    84aa:	and.w	r3, r3, #15
    84ae:	cmp	r3, #1
    84b0:	bne.n	8448 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    84b2:	movw	r0, #50000	; 0xc350
    84b6:	b.n	844c <SdioCard::begin(SdioConfig)+0x300>
    84b8:	.word	0x061a0000
    84bc:	.word	0x400b1028
    84c0:	.word	0x400b1044
    84c4:	.word	0x4004d00c
    84c8:	.word	0x4004d010
    84cc:	.word	0x4004d014
    84d0:	.word	0x80fffff1
    84d4:	.word	0x4004d000
    84d8:	.word	0x4004d004
    84dc:	.word	0x4004d008

000084e0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    84e0:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    84e2:	ldr	r3, [pc, #160]	; (8584 <SdioCard::readData(unsigned char*)+0xa4>)
    84e4:	ldr	r3, [r3, #0]
    84e6:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    84e8:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    84ea:	bmi.n	850a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    84ec:	ldr	r3, [pc, #152]	; (8588 <SdioCard::readData(unsigned char*)+0xa8>)
    84ee:	ldr	r2, [r3, #0]
    84f0:	bic.w	r2, r2, #65536	; 0x10000
    84f4:	str	r2, [r3, #0]
    noInterrupts();
    84f6:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    84f8:	ldr	r2, [r3, #0]
    84fa:	orr.w	r2, r2, #131072	; 0x20000
    84fe:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8500:	ldr	r2, [r3, #0]
    8502:	orr.w	r2, r2, #65536	; 0x10000
    8506:	str	r2, [r3, #0]
    interrupts();
    8508:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    850a:	ldr	r0, [pc, #128]	; (858c <SdioCard::readData(unsigned char*)+0xac>)
    850c:	bl	78f0 <waitTimeout(bool (*)())>
    8510:	cmp	r0, #0
    8512:	bne.n	8572 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    8514:	ldr	r4, [pc, #108]	; (8584 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8516:	ldr	r0, [pc, #120]	; (8590 <SdioCard::readData(unsigned char*)+0xb0>)
    8518:	subs	r3, r5, #4
    851a:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    851e:	ldr	r2, [r4, #0]
    8520:	lsls	r1, r2, #20
    8522:	bpl.n	851e <SdioCard::readData(unsigned char*)+0x3e>
    8524:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    8528:	ldr	r2, [r0, #0]
    852a:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    852e:	cmp	r1, r3
    8530:	bne.n	8528 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8532:	cmp	r5, r1
    8534:	mov	r3, r1
    8536:	bne.n	851e <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    8538:	ldr	r0, [pc, #88]	; (8594 <SdioCard::readData(unsigned char*)+0xb4>)
    853a:	bl	78f0 <waitTimeout(bool (*)())>
    853e:	cbnz	r0, 8560 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8540:	ldr	r2, [pc, #84]	; (8598 <SdioCard::readData(unsigned char*)+0xb8>)
    8542:	ldr	r3, [pc, #88]	; (859c <SdioCard::readData(unsigned char*)+0xbc>)
    8544:	ldr	r1, [r2, #0]
    8546:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8548:	ldr	r1, [r3, #0]
    854a:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    854c:	ldr	r2, [r3, #0]
    854e:	lsls	r2, r2, #30
    8550:	bpl.n	8582 <SdioCard::readData(unsigned char*)+0xa2>
    8552:	ldr	r3, [r3, #0]
    8554:	ldr	r0, [pc, #72]	; (85a0 <SdioCard::readData(unsigned char*)+0xc0>)
    8556:	ands	r0, r3
    8558:	clz	r0, r0
    855c:	lsrs	r0, r0, #5
    855e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8560:	ldr	r1, [pc, #64]	; (85a4 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8562:	ldr	r3, [pc, #68]	; (85a8 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8564:	movs	r0, #29
  m_errorLine = line;
    8566:	movw	r2, #843	; 0x34b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    856a:	strb	r0, [r1, #0]
  m_errorLine = line;
    856c:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    856e:	movs	r0, #0
    8570:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8572:	ldr	r1, [pc, #48]	; (85a4 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    8574:	ldr	r3, [pc, #48]	; (85a8 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8576:	movs	r0, #26
  m_errorLine = line;
    8578:	mov.w	r2, #832	; 0x340
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    857c:	strb	r0, [r1, #0]
  m_errorLine = line;
    857e:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    8580:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8582:	pop	{r3, r4, r5, pc}
    8584:	.word	0x400b1024
    8588:	.word	0x400b1028
    858c:	.word	0x00007781
    8590:	.word	0x400b1020
    8594:	.word	0x000077a9
    8598:	.word	0x400b1030
    859c:	.word	0x20019a48
    85a0:	.word	0x117f0000
    85a4:	.word	0x200138d4
    85a8:	.word	0x20019a68

000085ac <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    85ac:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    85ae:	ldr	r0, [pc, #80]	; (8600 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    85b0:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    85b2:	bl	7918 <yieldTimeout(bool (*)())>
    85b6:	cbnz	r0, 85ec <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    85b8:	ldr	r2, [pc, #72]	; (8604 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    85ba:	ldr	r1, [pc, #76]	; (8608 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    85bc:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    85be:	ldr	r0, [pc, #76]	; (860c <SdioCard::readStart(unsigned long)+0x60>)
    85c0:	ldr	r5, [pc, #76]	; (8610 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    85c2:	orr.w	r3, r3, #65536	; 0x10000
    85c6:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    85c8:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    85ca:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    85cc:	cbnz	r3, 85e8 <SdioCard::readStart(unsigned long)+0x3c>
    85ce:	lsls	r1, r4, #9
    85d0:	ldr	r0, [pc, #64]	; (8614 <SdioCard::readStart(unsigned long)+0x68>)
    85d2:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    85d6:	cbnz	r0, 85e6 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85d8:	ldr	r1, [pc, #60]	; (8618 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    85da:	ldr	r3, [pc, #64]	; (861c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85dc:	movs	r4, #12
  m_errorLine = line;
    85de:	movw	r2, #937	; 0x3a9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85e2:	strb	r4, [r1, #0]
  m_errorLine = line;
    85e4:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    85e6:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    85e8:	mov	r1, r4
    85ea:	b.n	85d0 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85ec:	ldr	r1, [pc, #40]	; (8618 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    85ee:	ldr	r3, [pc, #44]	; (861c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85f0:	movs	r0, #10
  m_errorLine = line;
    85f2:	movw	r2, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    85f6:	strb	r0, [r1, #0]
  m_errorLine = line;
    85f8:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    85fa:	movs	r0, #0
    85fc:	pop	{r3, r4, r5, pc}
    85fe:	nop
    8600:	.word	0x000079f1
    8604:	.word	0x400b1028
    8608:	.word	0x20019a38
    860c:	.word	0x400b1004
    8610:	.word	0xffff0200
    8614:	.word	0x123a0032
    8618:	.word	0x200138d4
    861c:	.word	0x20019a68

00008620 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8620:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8622:	ldrb	r3, [r0, #8]
    8624:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    8626:	sub.w	sp, sp, #512	; 0x200
    862a:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    862c:	bpl.n	8654 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    862e:	lsls	r3, r2, #30
    8630:	beq.n	8678 <SdioCard::readSector(unsigned long, unsigned char*)+0x58>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8632:	mov	r2, sp
    8634:	movs	r3, #1
    8636:	ldr	r0, [pc, #196]	; (86fc <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    8638:	bl	7ac0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    863c:	cbz	r0, 8684 <SdioCard::readSector(unsigned long, unsigned char*)+0x64>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    863e:	mov	r1, sp
    8640:	mov	r0, r5
    8642:	mov.w	r2, #512	; 0x200
    8646:	bl	89a8 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    864a:	movs	r5, #1
}
    864c:	mov	r0, r5
    864e:	add.w	sp, sp, #512	; 0x200
    8652:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    8654:	ldr	r3, [pc, #168]	; (8700 <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    8656:	ldrb	r3, [r3, #0]
    8658:	mov	r4, r0
    865a:	mov	r6, r1
    865c:	cbnz	r3, 86b0 <SdioCard::readSector(unsigned long, unsigned char*)+0x90>
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    865e:	ldrb	r3, [r4, #9]
    8660:	cmp	r3, #1
    8662:	beq.n	869c <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    8664:	ldr	r3, [r4, #0]
    8666:	mov	r0, r4
    8668:	ldr	r3, [r3, #24]
    866a:	blx	r3
    866c:	cbnz	r0, 86bc <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    866e:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8670:	mov	r0, r5
    8672:	add.w	sp, sp, #512	; 0x200
    8676:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    8678:	movs	r3, #1
    867a:	ldr	r0, [pc, #128]	; (86fc <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    867c:	bl	7ac0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8680:	cmp	r0, #0
    8682:	bne.n	864a <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8684:	ldr	r1, [pc, #124]	; (8704 <SdioCard::readSector(unsigned long, unsigned char*)+0xe4>)
  m_errorLine = line;
    8686:	ldr	r3, [pc, #128]	; (8708 <SdioCard::readSector(unsigned long, unsigned char*)+0xe8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8688:	movs	r0, #11
  m_errorLine = line;
    868a:	movw	r2, #862	; 0x35e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    868e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8690:	str	r2, [r3, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    8692:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8694:	mov	r0, r5
    8696:	add.w	sp, sp, #512	; 0x200
    869a:	pop	{r4, r5, r6, pc}
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    869c:	ldr	r3, [r4, #4]
    869e:	cmp	r6, r3
    86a0:	beq.n	86ce <SdioCard::readSector(unsigned long, unsigned char*)+0xae>
      if (!syncDevice()) {
    86a2:	ldr	r3, [r4, #0]
    86a4:	mov	r0, r4
    86a6:	ldr	r3, [r3, #24]
    86a8:	blx	r3
    86aa:	cmp	r0, #0
    86ac:	beq.n	866e <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    86ae:	b.n	86bc <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
    86b0:	bl	7ccc <waitTransferComplete() [clone .part.8]>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    86b4:	cmp	r0, #0
    86b6:	bne.n	865e <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
      return false;
    86b8:	movs	r5, #0
    86ba:	b.n	8670 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    86bc:	mov	r1, r6
    86be:	mov	r0, r4
    86c0:	bl	85ac <SdioCard::readStart(unsigned long)>
    86c4:	cmp	r0, #0
    86c6:	beq.n	866e <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    86c8:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    86ca:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    86cc:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    86ce:	mov	r1, r5
    86d0:	mov	r0, r4
    86d2:	bl	84e0 <SdioCard::readData(unsigned char*)>
    86d6:	mov	r5, r0
    86d8:	cmp	r0, #0
    86da:	beq.n	866e <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    86dc:	ldr	r3, [pc, #44]	; (870c <SdioCard::readSector(unsigned long, unsigned char*)+0xec>)
    86de:	ldr	r3, [r3, #0]
    86e0:	lsrs	r3, r3, #16
    86e2:	lsls	r3, r3, #16
    86e4:	cbz	r3, 86ee <SdioCard::readSector(unsigned long, unsigned char*)+0xce>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    86e6:	ldr	r3, [r4, #4]
    86e8:	adds	r3, #1
    86ea:	str	r3, [r4, #4]
    86ec:	b.n	8694 <SdioCard::readSector(unsigned long, unsigned char*)+0x74>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    86ee:	ldr	r3, [r4, #0]
    86f0:	mov	r0, r4
    86f2:	ldr	r3, [r3, #24]
    86f4:	blx	r3
    86f6:	cmp	r0, #0
    86f8:	bne.n	86e6 <SdioCard::readSector(unsigned long, unsigned char*)+0xc6>
    86fa:	b.n	866e <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    86fc:	.word	0x113a0011
    8700:	.word	0x20019a44
    8704:	.word	0x200138d4
    8708:	.word	0x20019a68
    870c:	.word	0x400b1004

00008710 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    8710:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8712:	ldr	r2, [pc, #80]	; (8764 <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    8714:	movs	r5, #0
    8716:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8718:	ldr	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    871a:	ldr	r0, [pc, #76]	; (8768 <SdioCard::stopTransmission(bool)+0x58>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    871c:	bic.w	r3, r3, #65536	; 0x10000
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    8720:	mov	r6, r1
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8722:	str	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8724:	mov	r1, r5
    8726:	bl	7994 <cardCommand(unsigned long, unsigned long)>
    872a:	mov	r4, r0
    872c:	cbz	r0, 8752 <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    872e:	cbnz	r6, 8734 <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    8730:	mov	r0, r4
    8732:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    8734:	ldr	r0, [pc, #52]	; (876c <SdioCard::stopTransmission(bool)+0x5c>)
    8736:	bl	7918 <yieldTimeout(bool (*)())>
    873a:	cmp	r0, #0
    873c:	beq.n	8730 <SdioCard::stopTransmission(bool)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    873e:	ldr	r1, [pc, #48]	; (8770 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    8740:	ldr	r3, [pc, #48]	; (8774 <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8742:	movs	r0, #10
  m_errorLine = line;
    8744:	movw	r2, #963	; 0x3c3
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    8748:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    874a:	strb	r0, [r1, #0]
  m_errorLine = line;
    874c:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    874e:	mov	r0, r4
    8750:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8752:	ldr	r1, [pc, #28]	; (8770 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    8754:	ldr	r3, [pc, #28]	; (8774 <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8756:	movs	r0, #9
  m_errorLine = line;
    8758:	movw	r2, #959	; 0x3bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    875c:	strb	r0, [r1, #0]
  m_errorLine = line;
    875e:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    8760:	mov	r0, r4
    8762:	pop	{r4, r5, r6, pc}
    8764:	.word	0x400b1028
    8768:	.word	0x0cdb0000
    876c:	.word	0x00007761
    8770:	.word	0x200138d4
    8774:	.word	0x20019a68

00008778 <SdioCard::isBusy()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
    8778:	push	{r4, r5, r6, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    877a:	ldrb	r3, [r0, #8]
    877c:	ands.w	r3, r3, #1
    8780:	beq.n	878e <SdioCard::isBusy()+0x16>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8782:	ldr	r3, [pc, #88]	; (87dc <SdioCard::isBusy()+0x64>)
    8784:	ldr	r3, [r3, #0]
    8786:	cbz	r3, 87c0 <SdioCard::isBusy()+0x48>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    8788:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    878c:	bx	r3
  } else {
    if (m_transferActive) {
    878e:	ldr	r2, [pc, #80]	; (87e0 <SdioCard::isBusy()+0x68>)
    8790:	ldrb	r4, [r2, #0]
    8792:	cbnz	r4, 87a4 <SdioCard::isBusy()+0x2c>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8794:	ldr	r3, [pc, #76]	; (87e4 <SdioCard::isBusy()+0x6c>)
    8796:	ldr	r4, [r3, #0]
    8798:	eor.w	r4, r4, #16777216	; 0x1000000
    879c:	ubfx	r4, r4, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    87a0:	mov	r0, r4
    87a2:	pop	{r4, r5, r6, pc}
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    87a4:	ldr	r5, [pc, #64]	; (87e8 <SdioCard::isBusy()+0x70>)
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    87a6:	ldr	r1, [pc, #68]	; (87ec <SdioCard::isBusy()+0x74>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    87a8:	ldr	r5, [r5, #0]
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    87aa:	ands	r1, r5
    87ac:	cmp	r1, #0
    87ae:	beq.n	87a0 <SdioCard::isBusy()+0x28>
        return true;
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
    87b0:	ldr	r1, [pc, #60]	; (87f0 <SdioCard::isBusy()+0x78>)
    87b2:	ldr	r5, [r1, #0]
    87b4:	lsrs	r5, r5, #16
    87b6:	lsls	r5, r5, #16
    87b8:	cbz	r5, 87d0 <SdioCard::isBusy()+0x58>
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    87ba:	mov	r4, r3
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    87bc:	mov	r0, r4
    87be:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    87c0:	ldr	r3, [pc, #48]	; (87f4 <SdioCard::isBusy()+0x7c>)
    87c2:	ldrb	r4, [r3, #0]
    87c4:	cmp	r4, #0
    87c6:	beq.n	87a0 <SdioCard::isBusy()+0x28>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    87c8:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    87cc:	b.w	79f0 <isBusyCMD13()>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
      stopTransmission(false);
    87d0:	mov	r1, r5
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
    87d2:	strb	r5, [r2, #0]
      stopTransmission(false);
    87d4:	bl	8710 <SdioCard::stopTransmission(bool)>
    87d8:	b.n	87a0 <SdioCard::isBusy()+0x28>
    87da:	nop
    87dc:	.word	0x20019a34
    87e0:	.word	0x20019a44
    87e4:	.word	0x400b1024
    87e8:	.word	0x400b1030
    87ec:	.word	0x117f0002
    87f0:	.word	0x400b1004
    87f4:	.word	0x20019a4c

000087f8 <SdioCard::syncDevice()>:
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    87f8:	ldr	r3, [pc, #36]	; (8820 <SdioCard::syncDevice()+0x28>)
    87fa:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    87fc:	push	{r4, lr}
    87fe:	mov	r4, r0
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    8800:	cbnz	r3, 8816 <SdioCard::syncDevice()+0x1e>
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    8802:	ldrb	r3, [r4, #9]
    8804:	cbnz	r3, 880a <SdioCard::syncDevice()+0x12>
    if (!writeStop()) {
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
    8806:	movs	r0, #1
    8808:	pop	{r4, pc}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    880a:	mov	r0, r4
    880c:	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    880e:	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    8812:	b.w	8710 <SdioCard::stopTransmission(bool)>
    8816:	bl	7ccc <waitTransferComplete() [clone .part.8]>
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    881a:	cmp	r0, #0
    881c:	bne.n	8802 <SdioCard::syncDevice()+0xa>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    881e:	pop	{r4, pc}
    8820:	.word	0x20019a44

00008824 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    8824:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    8826:	ldr	r3, [r0, #0]
    8828:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    882a:	ldrb	r1, [r3, #11]
    882c:	cbz	r1, 886e <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    882e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8830:	ldrb	r1, [r3, #11]
    8832:	lsls	r0, r1, #31
    8834:	bpl.n	8844 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    8836:	ldr	r0, [pc, #100]	; (889c <SdSpiArduinoDriver::activate()+0x78>)
    8838:	ldr	r1, [r3, #12]
    883a:	ldr	r4, [r0, #0]
    883c:	ands	r1, r4
    883e:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    8840:	str	r1, [r0, #0]
    8842:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8844:	lsls	r4, r1, #30
    8846:	bpl.n	8856 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8848:	ldr	r0, [pc, #84]	; (88a0 <SdSpiArduinoDriver::activate()+0x7c>)
    884a:	ldr	r1, [r3, #16]
    884c:	ldr	r4, [r0, #0]
    884e:	ands	r1, r4
    8850:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    8852:	str	r1, [r0, #0]
    8854:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    8856:	lsls	r0, r1, #29
    8858:	bpl.n	8868 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    885a:	ldr	r0, [pc, #72]	; (88a4 <SdSpiArduinoDriver::activate()+0x80>)
    885c:	ldr	r1, [r3, #20]
    885e:	ldr	r4, [r0, #0]
    8860:	ands	r1, r4
    8862:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    8864:	str	r1, [r0, #0]
    8866:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8868:	lsls	r1, r1, #28
    886a:	bmi.n	888c <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    886c:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    886e:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    8870:	ldr	r1, [r3, #12]
    8872:	cmp	r1, r2
    8874:	beq.n	8886 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    8876:	ldr	r0, [pc, #48]	; (88a8 <SdSpiArduinoDriver::activate()+0x84>)
    8878:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    887a:	ldr	r1, [pc, #48]	; (88ac <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    887c:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    887e:	orr.w	r0, r2, #1073741824	; 0x40000000
    8882:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    8884:	str	r1, [r3, #0]
}
    8886:	ldr.w	r4, [sp], #4
    888a:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    888c:	ldr	r0, [pc, #32]	; (88b0 <SdSpiArduinoDriver::activate()+0x8c>)
    888e:	ldr	r1, [r3, #24]
    8890:	ldr	r4, [r0, #0]
    8892:	ands	r1, r4
    8894:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    8896:	str	r1, [r0, #0]
    8898:	b.n	886c <SdSpiArduinoDriver::activate()+0x48>
    889a:	nop
    889c:	.word	0xe000e180
    88a0:	.word	0xe000e184
    88a4:	.word	0xe000e188
    88a8:	.word	0x003f4001
    88ac:	.word	0x803f0000
    88b0:	.word	0xe000e18c

000088b4 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    88b4:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    88b6:	ldrb	r3, [r2, #11]
    88b8:	cbz	r3, 88e8 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    88ba:	lsls	r1, r3, #31
    88bc:	bpl.n	88c6 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    88be:	ldr	r3, [pc, #44]	; (88ec <SdSpiArduinoDriver::deactivate()+0x38>)
    88c0:	ldr	r1, [r2, #28]
    88c2:	str	r1, [r3, #0]
    88c4:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    88c6:	lsls	r0, r3, #30
    88c8:	bpl.n	88d2 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    88ca:	ldr	r3, [pc, #36]	; (88f0 <SdSpiArduinoDriver::deactivate()+0x3c>)
    88cc:	ldr	r1, [r2, #32]
    88ce:	str	r1, [r3, #0]
    88d0:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    88d2:	lsls	r1, r3, #29
    88d4:	bpl.n	88de <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    88d6:	ldr	r3, [pc, #28]	; (88f4 <SdSpiArduinoDriver::deactivate()+0x40>)
    88d8:	ldr	r1, [r2, #36]	; 0x24
    88da:	str	r1, [r3, #0]
    88dc:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    88de:	lsls	r3, r3, #28
    88e0:	bpl.n	88e8 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    88e2:	ldr	r3, [pc, #20]	; (88f8 <SdSpiArduinoDriver::deactivate()+0x44>)
    88e4:	ldr	r2, [r2, #40]	; 0x28
    88e6:	str	r2, [r3, #0]
    88e8:	bx	lr
    88ea:	nop
    88ec:	.word	0xe000e100
    88f0:	.word	0xe000e104
    88f4:	.word	0xe000e108
    88f8:	.word	0xe000e10c

000088fc <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    88fc:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    88fe:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8900:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    8904:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8906:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8908:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    890a:	ldr	r3, [r2, #44]	; 0x2c
    890c:	cmp	r3, #0
    890e:	bge.n	890a <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    8910:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    8912:	uxtb	r0, r0
    8914:	bx	lr
    8916:	nop

00008918 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    8918:	push	{r4, r5, r6, lr}
    891a:	mov	r5, r0
    891c:	mov	r4, r1
    891e:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    8920:	mov	r0, r1
    8922:	movs	r1, #255	; 0xff
    8924:	bl	c1bc <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8928:	ldr	r0, [r5, #0]
    892a:	mov	r3, r6
    892c:	mov	r2, r4
    892e:	mov	r1, r4
    8930:	bl	23d0 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8934:	movs	r0, #0
    8936:	pop	{r4, r5, r6, pc}

00008938 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    8938:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    893a:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    893c:	mov.w	r3, #2147483648	; 0x80000000
    8940:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8942:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8944:	ldr	r3, [r2, #44]	; 0x2c
    8946:	cmp	r3, #0
    8948:	bge.n	8944 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    894a:	ldr	r3, [r2, #56]	; 0x38
    894c:	bx	lr
    894e:	nop

00008950 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8950:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    8952:	subs	r5, r2, #1
    8954:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8958:	sub.w	sp, sp, #516	; 0x204
    895c:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    895e:	bcc.n	8986 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    8960:	cbz	r2, 8980 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    8962:	ldr	r2, [r0, #0]
    8964:	ldr	r2, [r2, #0]
    8966:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8968:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    896c:	ldrb.w	r3, [r1], #1
    8970:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8972:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8974:	ldr	r3, [r2, #44]	; 0x2c
    8976:	cmp	r3, #0
    8978:	bge.n	8974 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    897a:	cmp	r1, r0
		return port().POPR;
    897c:	ldr	r3, [r2, #56]	; 0x38
    897e:	bne.n	896c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    8980:	add.w	sp, sp, #516	; 0x204
    8984:	pop	{r4, r5, pc}
    8986:	mov	r5, r0
    8988:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    898a:	mov	r0, sp
    898c:	bl	89a8 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8990:	mov	r3, r4
    8992:	mov	r2, sp
    8994:	mov	r1, sp
    8996:	ldr	r0, [r5, #0]
    8998:	bl	23d0 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    899c:	add.w	sp, sp, #516	; 0x204
    89a0:	pop	{r4, r5, pc}
    89a2:	nop

000089a4 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    89a4:	b.w	9394 <digitalWrite>

000089a8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    89a8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    89aa:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    89ae:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    89b2:	bne.n	8a90 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    89b4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    89b6:	bcc.n	8a3c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    89b8:	ldr.w	r3, [r1], #4
    89bc:	str.w	r3, [r0], #4
    89c0:	ldr.w	r3, [r1], #4
    89c4:	str.w	r3, [r0], #4
    89c8:	ldr.w	r3, [r1], #4
    89cc:	str.w	r3, [r0], #4
    89d0:	ldr.w	r3, [r1], #4
    89d4:	str.w	r3, [r0], #4
    89d8:	ldr.w	r3, [r1], #4
    89dc:	str.w	r3, [r0], #4
    89e0:	ldr.w	r3, [r1], #4
    89e4:	str.w	r3, [r0], #4
    89e8:	ldr.w	r3, [r1], #4
    89ec:	str.w	r3, [r0], #4
    89f0:	ldr.w	r3, [r1], #4
    89f4:	str.w	r3, [r0], #4
    89f8:	ldr.w	r3, [r1], #4
    89fc:	str.w	r3, [r0], #4
    8a00:	ldr.w	r3, [r1], #4
    8a04:	str.w	r3, [r0], #4
    8a08:	ldr.w	r3, [r1], #4
    8a0c:	str.w	r3, [r0], #4
    8a10:	ldr.w	r3, [r1], #4
    8a14:	str.w	r3, [r0], #4
    8a18:	ldr.w	r3, [r1], #4
    8a1c:	str.w	r3, [r0], #4
    8a20:	ldr.w	r3, [r1], #4
    8a24:	str.w	r3, [r0], #4
    8a28:	ldr.w	r3, [r1], #4
    8a2c:	str.w	r3, [r0], #4
    8a30:	ldr.w	r3, [r1], #4
    8a34:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8a38:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8a3a:	bcs.n	89b8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8a3c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8a3e:	bcc.n	8a64 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8a40:	ldr.w	r3, [r1], #4
    8a44:	str.w	r3, [r0], #4
    8a48:	ldr.w	r3, [r1], #4
    8a4c:	str.w	r3, [r0], #4
    8a50:	ldr.w	r3, [r1], #4
    8a54:	str.w	r3, [r0], #4
    8a58:	ldr.w	r3, [r1], #4
    8a5c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8a60:	subs	r2, #16
	bhs	.Lmid_block_loop
    8a62:	bcs.n	8a40 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8a64:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8a66:	bcc.n	8a74 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8a68:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8a6c:	str.w	r3, [r0], #4
	subs	r2, #4
    8a70:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8a72:	bcs.n	8a68 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8a74:	adds	r2, #4
	beq	.Ldone
    8a76:	beq.n	8a8a <memcpy+0xe2>

	lsls	r2, r2, #31
    8a78:	lsls	r2, r2, #31
	itt ne
    8a7a:	itt	ne
	ldrbne  r3, [r1], #1
    8a7c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8a80:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8a84:	bcc.n	8a8a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8a86:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8a88:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8a8a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8a8c:	bx	lr
    8a8e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8a90:	cmp	r2, #8
	blo	.Lbyte_copy
    8a92:	bcc.n	8abc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8a94:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8a96:	beq.n	89b4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8a98:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8a9c:	beq.n	89b4 <memcpy+0xc>

	rsb	r3, #4
    8a9e:	rsb	r3, r3, #4
	subs	r2, r3
    8aa2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    8aa4:	lsls	r3, r3, #31
	itt ne
    8aa6:	itt	ne
	ldrbne  r3, [r1], #1
    8aa8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8aac:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8ab0:	bcc.n	89b4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8ab2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8ab6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8aba:	b.n	89b4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8abc:	subs	r2, #4
	blo	.Lcopy_less_than_4
    8abe:	bcc.n	8a74 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8ac0:	subs	r2, #1
	ldrb    r3, [r1], #1
    8ac2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8ac6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8aca:	bcs.n	8ac0 <memcpy+0x118>

	ldrb	r3, [r1]
    8acc:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8ace:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8ad0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8ad2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8ad4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8ad6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8ad8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8ada:	bx	lr

00008adc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8adc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    8ade:	ldr	r5, [pc, #60]	; (8b1c <usb_serial_getchar+0x40>)
    8ae0:	ldr	r0, [r5, #0]
    8ae2:	cbz	r0, 8b04 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    8ae4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    8ae6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8ae8:	adds	r1, r0, r3
    8aea:	adds	r3, #1
	if (i >= rx_packet->len) {
    8aec:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8aee:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    8af0:	bcs.n	8af8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    8af2:	strh	r3, [r0, #2]
	}
	return c;
    8af4:	mov	r0, r4
}
    8af6:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    8af8:	bl	9654 <usb_free>
		rx_packet = NULL;
    8afc:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    8afe:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8b00:	str	r3, [r5, #0]
    8b02:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8b04:	ldr	r3, [pc, #24]	; (8b20 <usb_serial_getchar+0x44>)
    8b06:	ldrb	r3, [r3, #0]
    8b08:	cbz	r3, 8b16 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8b0a:	movs	r0, #3
    8b0c:	bl	96a0 <usb_rx>
    8b10:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    8b12:	cmp	r0, #0
    8b14:	bne.n	8ae4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8b16:	mov.w	r0, #4294967295
    8b1a:	pop	{r3, r4, r5, pc}
    8b1c:	.word	0x20019a78
    8b20:	.word	0x20019b68

00008b24 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    8b24:	push	{r4, lr}
	if (!rx_packet) {
    8b26:	ldr	r4, [pc, #36]	; (8b4c <usb_serial_peekchar+0x28>)
    8b28:	ldr	r0, [r4, #0]
    8b2a:	cbz	r0, 8b34 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    8b2c:	ldrh	r3, [r0, #2]
    8b2e:	add	r0, r3
    8b30:	ldrb	r0, [r0, #8]
}
    8b32:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8b34:	ldr	r3, [pc, #24]	; (8b50 <usb_serial_peekchar+0x2c>)
    8b36:	ldrb	r3, [r3, #0]
    8b38:	cbz	r3, 8b46 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8b3a:	movs	r0, #3
    8b3c:	bl	96a0 <usb_rx>
    8b40:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    8b42:	cmp	r0, #0
    8b44:	bne.n	8b2c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8b46:	mov.w	r0, #4294967295
    8b4a:	pop	{r4, pc}
    8b4c:	.word	0x20019a78
    8b50:	.word	0x20019b68

00008b54 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8b54:	ldr	r3, [pc, #16]	; (8b68 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    8b56:	ldr	r2, [pc, #20]	; (8b6c <usb_serial_available+0x18>)
    8b58:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    8b5a:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8b5c:	cbz	r3, 8b66 <usb_serial_available+0x12>
    8b5e:	ldrh	r2, [r3, #0]
    8b60:	ldrh	r3, [r3, #2]
    8b62:	subs	r3, r2, r3
    8b64:	add	r0, r3
	return count;
}
    8b66:	bx	lr
    8b68:	.word	0x20019a78
    8b6c:	.word	0x20019c6c

00008b70 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    8b70:	ldr	r3, [pc, #44]	; (8ba0 <usb_serial_flush_input+0x30>)
    8b72:	ldrb	r3, [r3, #0]
    8b74:	cbz	r3, 8b9e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8b76:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    8b78:	ldr	r4, [pc, #40]	; (8ba4 <usb_serial_flush_input+0x34>)
    8b7a:	ldr	r0, [r4, #0]
    8b7c:	cbz	r0, 8b92 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    8b7e:	bl	9654 <usb_free>
		rx_packet = NULL;
    8b82:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8b84:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8b86:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8b88:	bl	96a0 <usb_rx>
		if (!rx) break;
    8b8c:	cbz	r0, 8b9c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    8b8e:	bl	9654 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8b92:	movs	r0, #3
    8b94:	bl	96a0 <usb_rx>
		if (!rx) break;
    8b98:	cmp	r0, #0
    8b9a:	bne.n	8b8e <usb_serial_flush_input+0x1e>
    8b9c:	pop	{r4, pc}
    8b9e:	bx	lr
    8ba0:	.word	0x20019b68
    8ba4:	.word	0x20019a78

00008ba8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8ba8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8bac:	ldr.w	r9, [pc, #248]	; 8ca8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8bb0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8bb2:	movs	r2, #1
    8bb4:	strb.w	r2, [r9]
	while (size > 0) {
    8bb8:	str	r1, [sp, #4]
    8bba:	cbz	r1, 8c18 <usb_serial_write+0x70>
    8bbc:	ldr.w	r8, [pc, #236]	; 8cac <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8bc0:	ldr	r7, [pc, #216]	; (8c9c <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8bc2:	ldr	r6, [sp, #4]
    8bc4:	mov	fp, r0
		if (!tx_packet) {
    8bc6:	ldr.w	r0, [r8]
    8bca:	cbz	r0, 8c3a <usb_serial_write+0x92>
    8bcc:	ldr	r5, [pc, #208]	; (8ca0 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    8bce:	ldrh	r4, [r0, #2]
    8bd0:	rsb	r1, r4, #64	; 0x40
    8bd4:	cmp	r1, r6
    8bd6:	it	cs
    8bd8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8bda:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8bde:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8be0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8be4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    8be6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8be8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    8bec:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    8bf0:	cbz	r1, 8c08 <usb_serial_write+0x60>
    8bf2:	subs	r4, #1
    8bf4:	add	r2, r4
    8bf6:	add	r1, fp
    8bf8:	ldrb.w	r4, [fp], #1
    8bfc:	strb.w	r4, [r2, #1]!
    8c00:	cmp	fp, r1
    8c02:	bne.n	8bf8 <usb_serial_write+0x50>
    8c04:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    8c08:	cmp.w	lr, #63	; 0x3f
    8c0c:	bhi.n	8c26 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    8c0e:	ldr	r2, [pc, #148]	; (8ca4 <usb_serial_write+0xfc>)
    8c10:	movs	r1, #5
    8c12:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8c14:	cmp	r6, #0
    8c16:	bne.n	8bc6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    8c18:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    8c1a:	movs	r3, #0
    8c1c:	strb.w	r3, [r9]
	return ret;
}
    8c20:	add	sp, #12
    8c22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    8c26:	movs	r2, #64	; 0x40
    8c28:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8c2a:	mov	r1, r0
    8c2c:	movs	r0, #4
    8c2e:	bl	97d0 <usb_tx>
			tx_packet = NULL;
    8c32:	movs	r2, #0
    8c34:	str.w	r2, [r8]
    8c38:	b.n	8c0e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8c3a:	ldrb	r2, [r7, #0]
    8c3c:	cbz	r2, 8c8a <usb_serial_write+0xe2>
    8c3e:	ldr	r5, [pc, #96]	; (8ca0 <usb_serial_write+0xf8>)
    8c40:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    8c44:	mov.w	sl, #1
    8c48:	b.n	8c5a <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8c4a:	subs	r4, #1
    8c4c:	beq.n	8c7c <usb_serial_write+0xd4>
    8c4e:	ldrb	r2, [r5, #0]
    8c50:	cbnz	r2, 8c7c <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    8c52:	bl	a3e8 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8c56:	ldrb	r2, [r7, #0]
    8c58:	cbz	r2, 8c8a <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    8c5a:	movs	r0, #4
    8c5c:	bl	96dc <usb_tx_packet_count>
    8c60:	cmp	r0, #7
    8c62:	bhi.n	8c4a <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    8c64:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    8c68:	bl	9614 <usb_malloc>
    8c6c:	str.w	r0, [r8]
					if (tx_packet) break;
    8c70:	cmp	r0, #0
    8c72:	bne.n	8bce <usb_serial_write+0x26>
					tx_noautoflush = 0;
    8c74:	ldr	r3, [pc, #48]	; (8ca8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8c76:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    8c78:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8c7a:	bne.n	8c4e <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    8c7c:	movs	r3, #1
					return -1;
    8c7e:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    8c82:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8c84:	add	sp, #12
    8c86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8c8a:	movs	r3, #0
					return -1;
    8c8c:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8c90:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8c94:	add	sp, #12
    8c96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c9a:	nop
    8c9c:	.word	0x20019b68
    8ca0:	.word	0x20019a74
    8ca4:	.word	0x20019a6c
    8ca8:	.word	0x20019a6d
    8cac:	.word	0x20019a70

00008cb0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8cb0:	push	{lr}
    8cb2:	sub	sp, #12
    8cb4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    8cb6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8cb8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    8cbc:	mov	r0, r3
    8cbe:	bl	8ba8 <usb_serial_write>
}
    8cc2:	add	sp, #12
    8cc4:	ldr.w	pc, [sp], #4

00008cc8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    8cc8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    8cca:	ldr	r5, [pc, #56]	; (8d04 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8ccc:	ldr	r4, [pc, #56]	; (8d08 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    8cce:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8cd0:	movs	r3, #1
    8cd2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    8cd4:	cbz	r0, 8ce2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8cd6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    8cd8:	movs	r3, #0
    8cda:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8cdc:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    8ce0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8ce2:	ldr	r3, [pc, #40]	; (8d0c <usb_serial_write_buffer_free+0x44>)
    8ce4:	ldrb	r3, [r3, #0]
    8ce6:	cbnz	r3, 8cee <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    8ce8:	movs	r0, #0
    8cea:	strb	r0, [r4, #0]
			return 0;
    8cec:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8cee:	movs	r0, #4
    8cf0:	bl	96dc <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8cf4:	cmp	r0, #7
    8cf6:	bhi.n	8ce8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    8cf8:	bl	9614 <usb_malloc>
    8cfc:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8cfe:	cmp	r0, #0
    8d00:	bne.n	8cd6 <usb_serial_write_buffer_free+0xe>
    8d02:	b.n	8ce8 <usb_serial_write_buffer_free+0x20>
    8d04:	.word	0x20019a70
    8d08:	.word	0x20019a6d
    8d0c:	.word	0x20019b68

00008d10 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    8d10:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    8d12:	ldr	r3, [pc, #68]	; (8d58 <usb_serial_flush_output+0x48>)
    8d14:	ldrb	r3, [r3, #0]
    8d16:	cbz	r3, 8d3c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    8d18:	ldr	r6, [pc, #64]	; (8d5c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8d1a:	ldr	r5, [pc, #68]	; (8d60 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    8d1c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8d1e:	movs	r7, #1
    8d20:	strb	r7, [r5, #0]
	if (tx_packet) {
    8d22:	cbz	r4, 8d3e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    8d24:	ldr	r2, [pc, #60]	; (8d64 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    8d26:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    8d28:	movs	r7, #0
    8d2a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8d2c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    8d2e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8d30:	movs	r0, #4
    8d32:	bl	97d0 <usb_tx>
		tx_packet = NULL;
    8d36:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    8d38:	movs	r3, #0
    8d3a:	strb	r3, [r5, #0]
    8d3c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8d3e:	bl	9614 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8d42:	ldr	r3, [pc, #32]	; (8d64 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    8d44:	cbz	r0, 8d52 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    8d46:	mov	r1, r0
    8d48:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8d4a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8d4c:	bl	97d0 <usb_tx>
    8d50:	b.n	8d38 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8d52:	strb	r7, [r3, #0]
    8d54:	b.n	8d38 <usb_serial_flush_output+0x28>
    8d56:	nop
    8d58:	.word	0x20019b68
    8d5c:	.word	0x20019a70
    8d60:	.word	0x20019a6d
    8d64:	.word	0x20019a6c

00008d68 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    8d68:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    8d6a:	ldr	r3, [pc, #56]	; (8da4 <usb_serial_flush_callback+0x3c>)
    8d6c:	ldrb	r3, [r3, #0]
    8d6e:	cbnz	r3, 8d8e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    8d70:	ldr	r4, [pc, #52]	; (8da8 <usb_serial_flush_callback+0x40>)
    8d72:	ldr	r1, [r4, #0]
    8d74:	cbz	r1, 8d90 <usb_serial_flush_callback+0x28>
    8d76:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    8d7a:	ldrh	r3, [r1, #2]
    8d7c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8d7e:	movs	r0, #4
    8d80:	bl	97d0 <usb_tx>
		tx_packet = NULL;
    8d84:	str	r5, [r4, #0]
    8d86:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8d88:	ldr	r3, [pc, #32]	; (8dac <usb_serial_flush_callback+0x44>)
    8d8a:	movs	r2, #1
    8d8c:	strb	r2, [r3, #0]
    8d8e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8d90:	bl	9614 <usb_malloc>
		if (tx) {
    8d94:	cmp	r0, #0
    8d96:	beq.n	8d88 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    8d98:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    8d9a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    8d9e:	movs	r0, #4
    8da0:	b.w	97d0 <usb_tx>
    8da4:	.word	0x20019a6d
    8da8:	.word	0x20019a70
    8dac:	.word	0x20019a6c

00008db0 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    8db0:	ldr	r2, [pc, #220]	; (8e90 <wait_for_cal+0xe0>)
    8db2:	ldr	r1, [pc, #224]	; (8e94 <wait_for_cal+0xe4>)
    8db4:	ldr	r3, [r2, #0]
    8db6:	lsls	r3, r3, #24
    8db8:	bmi.n	8db4 <wait_for_cal+0x4>
    8dba:	ldr	r3, [r1, #0]
    8dbc:	ands.w	r3, r3, #128	; 0x80
    8dc0:	bne.n	8db4 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    8dc2:	cpsid	i
	if (calibrating) {
    8dc4:	ldr	r1, [pc, #208]	; (8e98 <wait_for_cal+0xe8>)
    8dc6:	ldrb	r2, [r1, #0]
    8dc8:	cmp	r2, #0
    8dca:	beq.n	8e8c <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    8dcc:	ldr	r2, [pc, #204]	; (8e9c <wait_for_cal+0xec>)
    8dce:	ldr	r0, [pc, #208]	; (8ea0 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    8dd0:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    8dd2:	ldr	r4, [pc, #208]	; (8ea4 <wait_for_cal+0xf4>)
    8dd4:	ldr	r7, [r2, #0]
    8dd6:	ldr	r6, [r0, #0]
    8dd8:	ldr	r5, [r4, #0]
    8dda:	ldr	r4, [r2, #12]
    8ddc:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    8dde:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    8de0:	adds	r2, #20
    8de2:	ldr	r0, [r0, #0]
    8de4:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    8de6:	ldr	r7, [pc, #192]	; (8ea8 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    8de8:	add	r5, r6
    8dea:	add	r4, r5
    8dec:	add	r0, r4
    8dee:	add	r2, r0
    8df0:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    8df4:	ldr	r6, [pc, #180]	; (8eac <wait_for_cal+0xfc>)
    8df6:	ldr	r0, [pc, #184]	; (8eb0 <wait_for_cal+0x100>)
    8df8:	ldr	r5, [pc, #184]	; (8eb4 <wait_for_cal+0x104>)
    8dfa:	ldr	r4, [pc, #188]	; (8eb8 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    8dfc:	orr.w	r2, r2, #32768	; 0x8000
    8e00:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    8e02:	ldr	r7, [r6, #0]
    8e04:	ldr	r6, [r0, #0]
    8e06:	ldr	r5, [r5, #0]
    8e08:	ldr	r2, [pc, #176]	; (8ebc <wait_for_cal+0x10c>)
    8e0a:	ldr	r4, [r4, #0]
    8e0c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    8e0e:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    8e10:	ldr	r0, [r0, #0]
    8e12:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    8e14:	ldr	r7, [pc, #168]	; (8ec0 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    8e16:	add	r5, r6
    8e18:	add	r4, r5
    8e1a:	add	r0, r4
    8e1c:	add	r2, r0
    8e1e:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    8e22:	ldr	r6, [pc, #160]	; (8ec4 <wait_for_cal+0x114>)
    8e24:	ldr	r0, [pc, #160]	; (8ec8 <wait_for_cal+0x118>)
    8e26:	ldr	r5, [pc, #164]	; (8ecc <wait_for_cal+0x11c>)
    8e28:	ldr	r4, [pc, #164]	; (8ed0 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    8e2a:	orr.w	r2, r2, #32768	; 0x8000
    8e2e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    8e30:	ldr	r7, [r6, #0]
    8e32:	ldr	r6, [r0, #0]
    8e34:	ldr	r5, [r5, #0]
    8e36:	ldr	r2, [pc, #156]	; (8ed4 <wait_for_cal+0x124>)
    8e38:	ldr	r4, [r4, #0]
    8e3a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    8e3c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    8e3e:	ldr	r0, [r0, #0]
    8e40:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    8e42:	ldr	r7, [pc, #148]	; (8ed8 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    8e44:	add	r5, r6
    8e46:	add	r4, r5
    8e48:	add	r0, r4
    8e4a:	add	r2, r0
    8e4c:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    8e50:	ldr	r6, [pc, #136]	; (8edc <wait_for_cal+0x12c>)
    8e52:	ldr	r0, [pc, #140]	; (8ee0 <wait_for_cal+0x130>)
    8e54:	ldr	r5, [pc, #140]	; (8ee4 <wait_for_cal+0x134>)
    8e56:	ldr	r4, [pc, #144]	; (8ee8 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    8e58:	orr.w	r2, r2, #32768	; 0x8000
    8e5c:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    8e5e:	ldr	r7, [r6, #0]
    8e60:	ldr	r6, [r0, #0]
    8e62:	ldr	r5, [r5, #0]
    8e64:	ldr	r2, [pc, #132]	; (8eec <wait_for_cal+0x13c>)
    8e66:	ldr	r4, [r4, #0]
    8e68:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    8e6a:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    8e6c:	ldr	r0, [r0, #0]
    8e6e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    8e70:	add	r5, r6
    8e72:	add	r4, r5
    8e74:	add	r0, r4
    8e76:	add	r2, r0
    8e78:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    8e7c:	ldr	r0, [pc, #112]	; (8ef0 <wait_for_cal+0x140>)
    8e7e:	orr.w	r2, r2, #32768	; 0x8000
    8e82:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    8e84:	strb	r3, [r1, #0]
	}
	__enable_irq();
    8e86:	cpsie	i
}
    8e88:	pop	{r4, r5, r6, r7}
    8e8a:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    8e8c:	cpsie	i
    8e8e:	bx	lr
    8e90:	.word	0x4003b024
    8e94:	.word	0x400bb024
    8e98:	.word	0x20019a7e
    8e9c:	.word	0x4003b038
    8ea0:	.word	0x4003b03c
    8ea4:	.word	0x4003b040
    8ea8:	.word	0x4003b02c
    8eac:	.word	0x4003b058
    8eb0:	.word	0x4003b05c
    8eb4:	.word	0x4003b060
    8eb8:	.word	0x4003b064
    8ebc:	.word	0x4003b06c
    8ec0:	.word	0x4003b030
    8ec4:	.word	0x400bb038
    8ec8:	.word	0x400bb03c
    8ecc:	.word	0x400bb040
    8ed0:	.word	0x400bb044
    8ed4:	.word	0x400bb04c
    8ed8:	.word	0x400bb02c
    8edc:	.word	0x400bb058
    8ee0:	.word	0x400bb05c
    8ee4:	.word	0x400bb060
    8ee8:	.word	0x400bb064
    8eec:	.word	0x400bb06c
    8ef0:	.word	0x400bb030

00008ef4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    8ef4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8ef6:	ldr	r0, [pc, #164]	; (8f9c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8ef8:	ldr	r2, [pc, #164]	; (8fa0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    8efa:	ldr	r3, [pc, #168]	; (8fa4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8efc:	ldr	r5, [pc, #168]	; (8fa8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8efe:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8f00:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8f02:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8f04:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    8f06:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8f08:	ldr	r4, [pc, #160]	; (8fac <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    8f0a:	cmp	r3, #8
    8f0c:	beq.n	8f70 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8f0e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8f10:	ldr	r0, [pc, #156]	; (8fb0 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8f12:	ldr	r1, [pc, #160]	; (8fb4 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8f14:	beq.n	8f86 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    8f16:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    8f18:	ite	eq
    8f1a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8f1c:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8f1e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8f20:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8f22:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8f24:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8f26:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8f28:	ldr	r3, [pc, #140]	; (8fb8 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8f2a:	ldr	r1, [pc, #144]	; (8fbc <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8f2c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8f2e:	ldr	r2, [pc, #144]	; (8fc0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8f30:	cbz	r3, 8f62 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8f32:	movs	r3, #1
    8f34:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8f36:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8f38:	ldr	r3, [pc, #136]	; (8fc4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8f3a:	ldr	r1, [pc, #140]	; (8fc8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8f3c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8f3e:	ldr	r2, [pc, #140]	; (8fcc <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    8f40:	cmp	r3, #1
    8f42:	bls.n	8f92 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    8f44:	cmp	r3, #4
    8f46:	bls.n	8f68 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    8f48:	cmp	r3, #8
    8f4a:	bls.n	8f8a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    8f4c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8f4e:	ite	ls
    8f50:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8f52:	movhi	r3, #135	; 0x87
    8f54:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8f56:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    8f58:	ldr	r3, [pc, #116]	; (8fd0 <analog_init+0xdc>)
    8f5a:	movs	r2, #1
    8f5c:	strb	r2, [r3, #0]
}
    8f5e:	pop	{r4, r5}
    8f60:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8f62:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8f64:	str	r3, [r2, #0]
    8f66:	b.n	8f38 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8f68:	movs	r3, #132	; 0x84
    8f6a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8f6c:	str	r3, [r2, #0]
    8f6e:	b.n	8f58 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8f70:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8f74:	ldr	r1, [pc, #60]	; (8fb4 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8f76:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8f78:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8f7a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8f7c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8f7e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8f80:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8f82:	str	r3, [r1, #0]
    8f84:	b.n	8f28 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8f86:	movs	r2, #57	; 0x39
    8f88:	b.n	8f7a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8f8a:	movs	r3, #133	; 0x85
    8f8c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8f8e:	str	r3, [r2, #0]
    8f90:	b.n	8f58 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8f92:	movs	r3, #128	; 0x80
    8f94:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8f96:	str	r3, [r2, #0]
    8f98:	b.n	8f58 <analog_init+0x64>
    8f9a:	nop
    8f9c:	.word	0x40074000
    8fa0:	.word	0x40074001
    8fa4:	.word	0x200138d5
    8fa8:	.word	0x4003b008
    8fac:	.word	0x4003b00c
    8fb0:	.word	0x400bb008
    8fb4:	.word	0x400bb00c
    8fb8:	.word	0x20019a81
    8fbc:	.word	0x4003b020
    8fc0:	.word	0x400bb020
    8fc4:	.word	0x200138d6
    8fc8:	.word	0x4003b024
    8fcc:	.word	0x400bb024
    8fd0:	.word	0x20019a7e

00008fd4 <analogReference>:
#define EXTERNAL        1
#endif

void analogReference(uint8_t type)
{
	if (type) {
    8fd4:	cbz	r0, 8ff2 <analogReference+0x1e>
		// internal reference requested
		if (!analog_reference_internal) {
    8fd6:	ldr	r2, [pc, #56]	; (9010 <analogReference+0x3c>)
    8fd8:	ldrb	r3, [r2, #0]
    8fda:	cbnz	r3, 900e <analogReference+0x3a>
			analog_reference_internal = 1;
			if (calibrating) {
    8fdc:	ldr	r1, [pc, #52]	; (9014 <analogReference+0x40>)
    8fde:	ldrb	r1, [r1, #0]
void analogReference(uint8_t type)
{
	if (type) {
		// internal reference requested
		if (!analog_reference_internal) {
			analog_reference_internal = 1;
    8fe0:	movs	r0, #1
    8fe2:	strb	r0, [r2, #0]
			if (calibrating) {
    8fe4:	cbz	r1, 8fee <analogReference+0x1a>
				ADC0_SC3 = 0; // cancel cal
    8fe6:	ldr	r1, [pc, #48]	; (9018 <analogReference+0x44>)
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
    8fe8:	ldr	r2, [pc, #48]	; (901c <analogReference+0x48>)
	if (type) {
		// internal reference requested
		if (!analog_reference_internal) {
			analog_reference_internal = 1;
			if (calibrating) {
				ADC0_SC3 = 0; // cancel cal
    8fea:	str	r3, [r1, #0]
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
    8fec:	str	r3, [r2, #0]
#endif
			}
			analog_init();
    8fee:	b.w	8ef4 <analog_init>
		}
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
    8ff2:	ldr	r3, [pc, #28]	; (9010 <analogReference+0x3c>)
    8ff4:	ldrb	r2, [r3, #0]
    8ff6:	cbz	r2, 900e <analogReference+0x3a>
			analog_reference_internal = 0;
			if (calibrating) {
    8ff8:	ldr	r2, [pc, #24]	; (9014 <analogReference+0x40>)
			analog_init();
		}
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
			analog_reference_internal = 0;
    8ffa:	strb	r0, [r3, #0]
			if (calibrating) {
    8ffc:	ldrb	r3, [r2, #0]
    8ffe:	cmp	r3, #0
    9000:	beq.n	8fee <analogReference+0x1a>
				ADC0_SC3 = 0; // cancel cal
    9002:	ldr	r2, [pc, #20]	; (9018 <analogReference+0x44>)
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
    9004:	ldr	r3, [pc, #20]	; (901c <analogReference+0x48>)
	} else {
		// vcc or external reference requested
		if (analog_reference_internal) {
			analog_reference_internal = 0;
			if (calibrating) {
				ADC0_SC3 = 0; // cancel cal
    9006:	str	r0, [r2, #0]
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
    9008:	str	r0, [r3, #0]
				ADC0_SC3 = 0; // cancel cal
#ifdef HAS_KINETIS_ADC1
				ADC1_SC3 = 0; // cancel cal
#endif
			}
			analog_init();
    900a:	b.w	8ef4 <analog_init>
    900e:	bx	lr
    9010:	.word	0x20019a81
    9014:	.word	0x20019a7e
    9018:	.word	0x4003b024
    901c:	.word	0x400bb024

00009020 <analogReadRes>:

void analogReadRes(unsigned int bits)
{
	unsigned int config;

	if (bits >= 13) {
    9020:	cmp	r0, #12
	}
}


void analogReadRes(unsigned int bits)
{
    9022:	push	{r4, r5}
	unsigned int config;

	if (bits >= 13) {
    9024:	bls.n	9056 <analogReadRes+0x36>
    9026:	movs	r3, #16
    9028:	cmp	r0, r3
    902a:	it	cs
    902c:	movcs	r0, r3
		if (bits > 16) bits = 16;
		config = 16;
    902e:	mov	r4, r3
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
	if (config != analog_config_bits) {
    9030:	ldr	r2, [pc, #64]	; (9074 <analogReadRes+0x54>)
	} else if (bits >= 9) {
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
    9032:	ldr	r5, [pc, #68]	; (9078 <analogReadRes+0x58>)
	if (config != analog_config_bits) {
    9034:	ldrb	r1, [r2, #0]
	} else if (bits >= 9) {
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
    9036:	subs	r0, r3, r0
	if (config != analog_config_bits) {
    9038:	cmp	r4, r1
	} else if (bits >= 9) {
		config = 10;
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
    903a:	strb	r0, [r5, #0]
	if (config != analog_config_bits) {
    903c:	beq.n	9070 <analogReadRes+0x50>
		analog_config_bits = config;
		if (calibrating) {
    903e:	ldr	r1, [pc, #60]	; (907c <analogReadRes+0x5c>)
	} else {
		config = 8;
	}
	analog_right_shift = config - bits;
	if (config != analog_config_bits) {
		analog_config_bits = config;
    9040:	strb	r3, [r2, #0]
		if (calibrating) {
    9042:	ldrb	r3, [r1, #0]
    9044:	cbz	r3, 9050 <analogReadRes+0x30>
			ADC0_SC3 = 0; // cancel cal
    9046:	ldr	r1, [pc, #56]	; (9080 <analogReadRes+0x60>)
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
    9048:	ldr	r2, [pc, #56]	; (9084 <analogReadRes+0x64>)
	}
	analog_right_shift = config - bits;
	if (config != analog_config_bits) {
		analog_config_bits = config;
		if (calibrating) {
			ADC0_SC3 = 0; // cancel cal
    904a:	movs	r3, #0
    904c:	str	r3, [r1, #0]
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
    904e:	str	r3, [r2, #0]
			#endif
		}
		analog_init();
	}
}
    9050:	pop	{r4, r5}
			ADC0_SC3 = 0; // cancel cal
			#ifdef HAS_KINETIS_ADC1
			ADC1_SC3 = 0;
			#endif
		}
		analog_init();
    9052:	b.w	8ef4 <analog_init>
	unsigned int config;

	if (bits >= 13) {
		if (bits > 16) bits = 16;
		config = 16;
	} else if (bits >= 11) {
    9056:	cmp	r0, #10
    9058:	bls.n	9060 <analogReadRes+0x40>
    905a:	movs	r3, #12
		config = 12;
    905c:	mov	r4, r3
    905e:	b.n	9030 <analogReadRes+0x10>
	} else if (bits >= 9) {
    9060:	cmp	r0, #8
    9062:	bls.n	906a <analogReadRes+0x4a>
    9064:	movs	r3, #10
		config = 10;
    9066:	mov	r4, r3
    9068:	b.n	9030 <analogReadRes+0x10>
    906a:	movs	r3, #8
	} else {
		config = 8;
    906c:	mov	r4, r3
    906e:	b.n	9030 <analogReadRes+0x10>
			ADC1_SC3 = 0;
			#endif
		}
		analog_init();
	}
}
    9070:	pop	{r4, r5}
    9072:	bx	lr
    9074:	.word	0x200138d5
    9078:	.word	0x20019a7d
    907c:	.word	0x20019a7e
    9080:	.word	0x4003b024
    9084:	.word	0x400bb024

00009088 <analogReadAveraging>:

void analogReadAveraging(unsigned int num)
{
    9088:	push	{r4, lr}

	if (calibrating) wait_for_cal();
    908a:	ldr	r3, [pc, #104]	; (90f4 <analogReadAveraging+0x6c>)
    908c:	ldrb	r3, [r3, #0]
		analog_init();
	}
}

void analogReadAveraging(unsigned int num)
{
    908e:	mov	r4, r0

	if (calibrating) wait_for_cal();
    9090:	cbnz	r3, 90c2 <analogReadAveraging+0x3a>
	if (num <= 1) {
    9092:	cmp	r4, #1
    9094:	bls.n	90ca <analogReadAveraging+0x42>
		num = 0;
		ADC0_SC3 = 0;
	} else if (num <= 4) {
    9096:	cmp	r4, #4
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9098:	ldr	r3, [pc, #92]	; (90f8 <analogReadAveraging+0x70>)
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    909a:	ldr	r1, [pc, #96]	; (90fc <analogReadAveraging+0x74>)

	if (calibrating) wait_for_cal();
	if (num <= 1) {
		num = 0;
		ADC0_SC3 = 0;
	} else if (num <= 4) {
    909c:	bls.n	90b4 <analogReadAveraging+0x2c>
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
#endif
	} else if (num <= 8) {
    909e:	cmp	r4, #8
    90a0:	bls.n	90e4 <analogReadAveraging+0x5c>
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
#endif
	} else if (num <= 16) {
    90a2:	cmp	r4, #16
    90a4:	bls.n	90d6 <analogReadAveraging+0x4e>
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
#endif
	} else {
		num = 32;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    90a6:	movs	r2, #7
    90a8:	str	r2, [r3, #0]
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    90aa:	str	r2, [r1, #0]
#endif
	}
	analog_num_average = num;
    90ac:	ldr	r2, [pc, #80]	; (9100 <analogReadAveraging+0x78>)
#endif
	} else {
		num = 32;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    90ae:	movs	r3, #32
#endif
	}
	analog_num_average = num;
    90b0:	strb	r3, [r2, #0]
    90b2:	pop	{r4, pc}
	if (num <= 1) {
		num = 0;
		ADC0_SC3 = 0;
	} else if (num <= 4) {
		num = 4;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    90b4:	movs	r2, #4
    90b6:	str	r2, [r3, #0]
    90b8:	mov	r3, r2
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    90ba:	str	r2, [r1, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#endif
	}
	analog_num_average = num;
    90bc:	ldr	r2, [pc, #64]	; (9100 <analogReadAveraging+0x78>)
    90be:	strb	r3, [r2, #0]
    90c0:	pop	{r4, pc}
}

void analogReadAveraging(unsigned int num)
{

	if (calibrating) wait_for_cal();
    90c2:	bl	8db0 <wait_for_cal>
	if (num <= 1) {
    90c6:	cmp	r4, #1
    90c8:	bhi.n	9096 <analogReadAveraging+0xe>
		num = 0;
		ADC0_SC3 = 0;
    90ca:	ldr	r2, [pc, #44]	; (90f8 <analogReadAveraging+0x70>)
    90cc:	movs	r3, #0
    90ce:	str	r3, [r2, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#endif
	}
	analog_num_average = num;
    90d0:	ldr	r2, [pc, #44]	; (9100 <analogReadAveraging+0x78>)
    90d2:	strb	r3, [r2, #0]
    90d4:	pop	{r4, pc}
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
#endif
	} else if (num <= 16) {
		num = 16;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    90d6:	movs	r2, #6
    90d8:	str	r2, [r3, #0]
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    90da:	str	r2, [r1, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#endif
	}
	analog_num_average = num;
    90dc:	ldr	r2, [pc, #32]	; (9100 <analogReadAveraging+0x78>)
    90de:	movs	r3, #16
    90e0:	strb	r3, [r2, #0]
    90e2:	pop	{r4, pc}
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(0);
#endif
	} else if (num <= 8) {
		num = 8;
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    90e4:	movs	r2, #5
    90e6:	str	r2, [r3, #0]
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    90e8:	str	r2, [r1, #0]
		ADC0_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_AVGE + ADC_SC3_AVGS(3);
#endif
	}
	analog_num_average = num;
    90ea:	ldr	r2, [pc, #20]	; (9100 <analogReadAveraging+0x78>)
    90ec:	movs	r3, #8
    90ee:	strb	r3, [r2, #0]
    90f0:	pop	{r4, pc}
    90f2:	nop
    90f4:	.word	0x20019a7e
    90f8:	.word	0x4003b024
    90fc:	.word	0x400bb024
    9100:	.word	0x200138d6

00009104 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    9104:	cmp	r0, #71	; 0x47
    9106:	bhi.n	9168 <analogRead+0x64>
	channel = pin2sc1a[pin];
    9108:	ldr	r3, [pc, #204]	; (91d8 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    910a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    910e:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    9110:	cmp	r6, #255	; 0xff
    9112:	beq.n	916c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    9114:	ldr	r3, [pc, #196]	; (91dc <analogRead+0xd8>)
    9116:	ldrb	r3, [r3, #0]
    9118:	cmp	r3, #0
    911a:	bne.n	9172 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    911c:	lsls	r2, r6, #24
    911e:	bmi.n	917a <analogRead+0x76>
#endif

	__disable_irq();
    9120:	cpsid	i
    9122:	ldr	r5, [pc, #188]	; (91e0 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    9124:	ldr	r4, [pc, #188]	; (91e4 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    9126:	mov	r7, r5
    9128:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    912a:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    912c:	strb	r3, [r5, #0]
	__enable_irq();
    912e:	cpsie	i
	while (1) {
		__disable_irq();
    9130:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    9132:	ldr	r3, [r4, #0]
    9134:	lsls	r3, r3, #24
    9136:	bmi.n	9152 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    9138:	ldrb	r3, [r7, #0]
    913a:	cbnz	r3, 9144 <analogRead+0x40>
    913c:	b.n	9128 <analogRead+0x24>
    913e:	ldrb	r3, [r5, #0]
    9140:	cmp	r3, #0
    9142:	beq.n	9128 <analogRead+0x24>
		__enable_irq();
    9144:	cpsie	i
		yield();
    9146:	bl	a3e8 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    914a:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    914c:	ldr	r3, [r4, #0]
    914e:	lsls	r0, r3, #24
    9150:	bpl.n	913e <analogRead+0x3a>
			result = ADC0_RA;
    9152:	ldr	r3, [pc, #148]	; (91e8 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    9154:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    9156:	movs	r2, #0
    9158:	strb	r2, [r5, #0]
			__enable_irq();
    915a:	cpsie	i
			result >>= analog_right_shift;
    915c:	ldr	r2, [pc, #140]	; (91ec <analogRead+0xe8>)
    915e:	ldrb	r0, [r2, #0]
    9160:	asr.w	r0, r3, r0
			return result;
    9164:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    9168:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    916a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    916c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    916e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    9172:	bl	8db0 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    9176:	lsls	r2, r6, #24
    9178:	bpl.n	9120 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    917a:	cpsid	i
    917c:	ldr	r5, [pc, #112]	; (91f0 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    917e:	ldr.w	r8, [pc, #124]	; 91fc <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    9182:	ldr	r4, [pc, #112]	; (91f4 <analogRead+0xf0>)
    9184:	and.w	r7, r6, #64	; 0x40
    9188:	uxtb	r7, r7
    918a:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    918e:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    9192:	cbz	r7, 91cc <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    9194:	bic.w	r3, r3, #16
    9198:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    919c:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    919e:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    91a0:	ldr	r2, [pc, #76]	; (91f0 <analogRead+0xec>)
    91a2:	strb	r3, [r5, #0]
	__enable_irq();
    91a4:	cpsie	i
	while (1) {
		__disable_irq();
    91a6:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    91a8:	ldr	r3, [r4, #0]
    91aa:	lsls	r1, r3, #24
    91ac:	bmi.n	91c8 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    91ae:	ldrb	r3, [r2, #0]
    91b0:	cbnz	r3, 91ba <analogRead+0xb6>
    91b2:	b.n	918e <analogRead+0x8a>
    91b4:	ldrb	r3, [r5, #0]
    91b6:	cmp	r3, #0
    91b8:	beq.n	918e <analogRead+0x8a>
		__enable_irq();
    91ba:	cpsie	i
		yield();
    91bc:	bl	a3e8 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    91c0:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    91c2:	ldr	r3, [r4, #0]
    91c4:	lsls	r3, r3, #24
    91c6:	bpl.n	91b4 <analogRead+0xb0>
			result = ADC1_RA;
    91c8:	ldr	r3, [pc, #44]	; (91f8 <analogRead+0xf4>)
    91ca:	b.n	9154 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    91cc:	orr.w	r3, r3, #16
    91d0:	str.w	r3, [r8]
    91d4:	b.n	919c <analogRead+0x98>
    91d6:	nop
    91d8:	.word	0x00013594
    91dc:	.word	0x20019a7e
    91e0:	.word	0x20019a80
    91e4:	.word	0x4003b000
    91e8:	.word	0x4003b010
    91ec:	.word	0x20019a7d
    91f0:	.word	0x20019a7f
    91f4:	.word	0x400bb000
    91f8:	.word	0x400bb010
    91fc:	.word	0x400bb00c

00009200 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    9200:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9202:	ldr	r4, [pc, #64]	; (9244 <fault_isr+0x44>)
    9204:	b.n	9218 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9206:	ldr	r3, [r4, #0]
    9208:	lsls	r1, r3, #21
    920a:	bmi.n	9228 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    920c:	ldr	r3, [r4, #0]
    920e:	lsls	r2, r3, #20
    9210:	bmi.n	9232 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9212:	ldr	r3, [r4, #0]
    9214:	lsls	r3, r3, #19
    9216:	bmi.n	923c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9218:	ldr	r3, [r4, #0]
    921a:	lsls	r0, r3, #13
    921c:	bpl.n	9206 <fault_isr+0x6>
    921e:	bl	9854 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9222:	ldr	r3, [r4, #0]
    9224:	lsls	r1, r3, #21
    9226:	bpl.n	920c <fault_isr+0xc>
    9228:	bl	9248 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    922c:	ldr	r3, [r4, #0]
    922e:	lsls	r2, r3, #20
    9230:	bpl.n	9212 <fault_isr+0x12>
    9232:	bl	9248 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9236:	ldr	r3, [r4, #0]
    9238:	lsls	r3, r3, #19
    923a:	bpl.n	9218 <fault_isr+0x18>
    923c:	bl	9248 <unused_isr>
    9240:	b.n	9218 <fault_isr+0x18>
    9242:	nop
    9244:	.word	0x40048034

00009248 <unused_isr>:
	}
}

void unused_isr(void)
{
    9248:	push	{r3, lr}
	fault_isr();
    924a:	bl	9200 <fault_isr>
    924e:	nop

00009250 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9250:	ldr	r3, [pc, #4]	; (9258 <startup_early_hook+0x8>)
    9252:	movs	r2, #16
    9254:	strh	r2, [r3, #0]
    9256:	bx	lr
    9258:	.word	0x40052000

0000925c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    925c:	bx	lr
    925e:	nop

00009260 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9260:	ldr	r1, [pc, #36]	; (9288 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    9262:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    9264:	ldr	r3, [r1, #0]
	if (incr != 0) {
    9266:	cbz	r0, 9276 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9268:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    926a:	add	r0, r3
    926c:	sub.w	r2, r2, #8192	; 0x2000
    9270:	cmp	r0, r2
    9272:	bcs.n	927a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9274:	str	r0, [r1, #0]
	}
	return prev;
    9276:	mov	r0, r3
}
    9278:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    927a:	bl	b988 <__errno>
    927e:	movs	r3, #12
    9280:	str	r3, [r0, #0]
			return (void *)-1;
    9282:	mov.w	r0, #4294967295
    9286:	pop	{r3, pc}
    9288:	.word	0x200138d8

0000928c <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    928c:	b.n	928c <__cxa_pure_virtual>
    928e:	nop

00009290 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9290:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9292:	ldr	r3, [pc, #68]	; (92d8 <digitalWrite.part.1+0x48>)
    9294:	ldr.w	r2, [r3, r0, lsl #3]
    9298:	ldrb.w	r4, [r2, #640]	; 0x280
    929c:	cbz	r4, 92ac <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    929e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    92a0:	cbz	r1, 92c2 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    92a2:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    92a6:	ldr.w	r4, [sp], #4
    92aa:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    92ac:	add.w	r3, r3, r0, lsl #3
    92b0:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    92b2:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    92b4:	cbnz	r1, 92cc <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    92b6:	bic.w	r2, r2, #2
    92ba:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    92bc:	ldr.w	r4, [sp], #4
    92c0:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    92c2:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    92c6:	ldr.w	r4, [sp], #4
    92ca:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    92cc:	orr.w	r2, r2, #3
    92d0:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    92d2:	ldr.w	r4, [sp], #4
    92d6:	bx	lr
    92d8:	.word	0x000135dc

000092dc <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    92dc:	ldr	r2, [pc, #112]	; (9350 <pinMode.part.2+0x74>)
    92de:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    92e2:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    92e4:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    92e6:	beq.n	930c <pinMode.part.2+0x30>
    92e8:	cmp	r1, #4
    92ea:	beq.n	9324 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    92ec:	ldr.w	r0, [r2, r0, lsl #3]
    92f0:	movs	r2, #0
    92f2:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    92f6:	cbz	r1, 9304 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    92f8:	cmp	r1, #2
    92fa:	beq.n	933e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    92fc:	cmp	r1, #3
    92fe:	beq.n	9346 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9300:	str	r2, [r3, #0]
    9302:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9304:	mov.w	r2, #256	; 0x100
    9308:	str	r2, [r3, #0]
    930a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    930c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9310:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9314:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9318:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    931a:	ldr	r2, [r3, #0]
    931c:	bic.w	r2, r2, #32
    9320:	str	r2, [r3, #0]
    9322:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9324:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9328:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    932c:	movs	r0, #1
    932e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9332:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    9334:	ldr	r2, [r3, #0]
    9336:	orr.w	r2, r2, #32
    933a:	str	r2, [r3, #0]
    933c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    933e:	movw	r2, #259	; 0x103
    9342:	str	r2, [r3, #0]
    9344:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    9346:	mov.w	r2, #258	; 0x102
    934a:	str	r2, [r3, #0]
    934c:	bx	lr
    934e:	nop
    9350:	.word	0x000135dc

00009354 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9354:	adds	r0, #16
    9356:	ldr	r3, [pc, #8]	; (9360 <attachInterruptVector+0xc>)
    9358:	str.w	r1, [r3, r0, lsl #2]
    935c:	bx	lr
    935e:	nop
    9360:	.word	0x20013200

00009364 <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    9364:	ldr	r3, [pc, #4]	; (936c <rtc_get+0x8>)
    9366:	ldr	r0, [r3, #0]
}
    9368:	bx	lr
    936a:	nop
    936c:	.word	0x4003d000

00009370 <rtc_set>:

void rtc_set(unsigned long t)
{
    9370:	push	{r4, r5}
	RTC_SR = 0;
    9372:	ldr	r3, [pc, #20]	; (9388 <rtc_set+0x18>)
	RTC_TPR = 0;
    9374:	ldr	r5, [pc, #20]	; (938c <rtc_set+0x1c>)
	RTC_TSR = t;
    9376:	ldr	r4, [pc, #24]	; (9390 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9378:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    937a:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    937c:	str	r2, [r3, #0]
	RTC_TPR = 0;
    937e:	str	r2, [r5, #0]
	RTC_TSR = t;
    9380:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    9382:	str	r1, [r3, #0]
}
    9384:	pop	{r4, r5}
    9386:	bx	lr
    9388:	.word	0x4003d014
    938c:	.word	0x4003d004
    9390:	.word	0x4003d000

00009394 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9394:	cmp	r0, #63	; 0x3f
    9396:	bhi.n	939c <digitalWrite+0x8>
    9398:	b.w	9290 <digitalWrite.part.1>
    939c:	bx	lr
    939e:	nop

000093a0 <digitalRead>:
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    93a0:	cmp	r0, #63	; 0x3f
    93a2:	bhi.n	93b2 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    93a4:	ldr	r3, [pc, #16]	; (93b8 <digitalRead+0x18>)
    93a6:	ldr.w	r3, [r3, r0, lsl #3]
    93aa:	ldrb.w	r0, [r3, #512]	; 0x200
    93ae:	uxtb	r0, r0
    93b0:	bx	lr
#endif
}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    93b2:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    93b4:	bx	lr
    93b6:	nop
    93b8:	.word	0x000135dc

000093bc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    93bc:	cmp	r0, #63	; 0x3f
    93be:	bhi.n	93c4 <pinMode+0x8>
    93c0:	b.w	92dc <pinMode.part.2>
    93c4:	bx	lr
    93c6:	nop

000093c8 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    93c8:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    93ca:	ldr	r1, [pc, #48]	; (93fc <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    93cc:	ldr	r3, [pc, #48]	; (9400 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    93ce:	ldr	r2, [pc, #52]	; (9404 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    93d0:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    93d2:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    93d4:	ldr	r2, [r2, #0]
	__enable_irq();
    93d6:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    93d8:	lsls	r2, r2, #5
    93da:	bpl.n	93e2 <micros+0x1a>
    93dc:	cmp	r3, #50	; 0x32
    93de:	it	hi
    93e0:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    93e2:	ldr	r1, [pc, #36]	; (9408 <micros+0x40>)
    93e4:	rsb	r3, r3, #95744	; 0x17600
    93e8:	mov.w	r2, #1000	; 0x3e8
    93ec:	adds	r3, #255	; 0xff
    93ee:	umull	r1, r3, r1, r3
    93f2:	mul.w	r0, r2, r0
}
    93f6:	add.w	r0, r0, r3, lsr #6
    93fa:	bx	lr
    93fc:	.word	0x20019a84
    9400:	.word	0xe000e018
    9404:	.word	0xe000ed04
    9408:	.word	0xaaaaaaab

0000940c <delay>:

void delay(uint32_t ms)
{
    940c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9410:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9412:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9414:	ldr	r7, [pc, #128]	; (9498 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9416:	ldr	r3, [pc, #132]	; (949c <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9418:	ldr	r2, [pc, #132]	; (94a0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    941a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    941c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    941e:	ldr	r2, [r2, #0]
	__enable_irq();
    9420:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9422:	lsls	r2, r2, #5
    9424:	bpl.n	942c <delay+0x20>
    9426:	cmp	r3, #50	; 0x32
    9428:	it	hi
    942a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    942c:	cbz	r5, 9494 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    942e:	rsb	r3, r3, #95744	; 0x17600
    9432:	ldr	r6, [pc, #112]	; (94a4 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9434:	ldr.w	r9, [pc, #100]	; 949c <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9438:	ldr.w	r8, [pc, #100]	; 94a0 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    943c:	adds	r3, #255	; 0xff
    943e:	mov.w	r2, #1000	; 0x3e8
    9442:	umull	r1, r3, r6, r3
    9446:	mul.w	r4, r2, r4
    944a:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    944e:	cpsid	i
	current = SYST_CVR;
    9450:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9454:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9456:	ldr.w	lr, [r8]
	__enable_irq();
    945a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    945c:	rsb	r3, r1, #95744	; 0x17600
    9460:	adds	r3, #255	; 0xff
    9462:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9466:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    946a:	rsb	r3, r4, r3, lsr #6
    946e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9472:	beq.n	947a <delay+0x6e>
    9474:	cmp	r1, #50	; 0x32
    9476:	it	hi
    9478:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    947a:	mla	r3, r0, r2, r3
    947e:	cmp.w	r3, #1000	; 0x3e8
    9482:	bcc.n	948e <delay+0x82>
				ms--;
				if (ms == 0) return;
    9484:	subs	r5, #1
    9486:	beq.n	9494 <delay+0x88>
				start += 1000;
    9488:	add.w	r4, r4, #1000	; 0x3e8
    948c:	b.n	944e <delay+0x42>
			}
			yield();
    948e:	bl	a3e8 <yield>
		}
    9492:	b.n	944e <delay+0x42>
    9494:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9498:	.word	0x20019a84
    949c:	.word	0xe000e018
    94a0:	.word	0xe000ed04
    94a4:	.word	0xaaaaaaab

000094a8 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    94a8:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    94aa:	ldr	r3, [pc, #312]	; (95e4 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    94ac:	ldr	r0, [pc, #312]	; (95e8 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    94ae:	ldr.w	ip, [pc, #348]	; 960c <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    94b2:	ldr	r4, [pc, #312]	; (95ec <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    94b4:	ldr	r1, [pc, #312]	; (95f0 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    94b6:	ldr.w	lr, [pc, #344]	; 9610 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    94ba:	ldr	r6, [pc, #312]	; (95f4 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    94bc:	ldr	r5, [pc, #312]	; (95f8 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    94be:	ldr	r7, [pc, #316]	; (95fc <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    94c0:	mov.w	r2, #134217728	; 0x8000000
    94c4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    94c6:	mov.w	r2, #268435456	; 0x10000000
    94ca:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    94cc:	mov.w	r2, #536870912	; 0x20000000
    94d0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    94d2:	mov.w	r2, #1073741824	; 0x40000000
    94d6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    94d8:	mov.w	r2, #2147483648	; 0x80000000
    94dc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    94de:	movs	r2, #0
    94e0:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    94e2:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    94e4:	movw	r0, #49151	; 0xbfff
    94e8:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    94ec:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    94f0:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    94f2:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    94f6:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    94f8:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    94fa:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    94fc:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    9500:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    9502:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    9506:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9508:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    950c:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    950e:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    9512:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9516:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    951a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    951e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    9522:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9524:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9528:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    952a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    952c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    952e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9532:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9534:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    9536:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9538:	ldr	r4, [pc, #196]	; (9600 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    953a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    953c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    953e:	movs	r1, #9
    9540:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9542:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    9546:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    954a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    954c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    954e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9550:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9552:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    9554:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9556:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    955a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    955e:	add.w	r7, r7, #520192	; 0x7f000
    9562:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9564:	addw	r4, r4, #2044	; 0x7fc
    9568:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    956a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    956c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    956e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9570:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9574:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    9576:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    957a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    957e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9580:	sub.w	r4, r4, #460800	; 0x70800
    9584:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    9588:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    958a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    958c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9590:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9592:	ldr	r0, [pc, #112]	; (9604 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9594:	orr.w	r1, r1, #512	; 0x200
    9598:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    959a:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    959c:	ldr	r4, [pc, #104]	; (9608 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    959e:	add.w	lr, lr, #65280	; 0xff00
    95a2:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    95a6:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    95aa:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    95ae:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    95b2:	orr.w	r1, r1, #33554432	; 0x2000000
    95b6:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    95b8:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    95bc:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    95c0:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    95c2:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    95c4:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    95c6:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    95c8:	str	r2, [r4, #0]
#endif
	analog_init();
    95ca:	bl	8ef4 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    95ce:	movs	r0, #25
    95d0:	bl	940c <delay>
	usb_init();
    95d4:	bl	a320 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    95d8:	movw	r0, #275	; 0x113
}
    95dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    95e0:	b.w	940c <delay>
    95e4:	.word	0xe000e104
    95e8:	.word	0x40038004
    95ec:	.word	0x40038014
    95f0:	.word	0x4003801c
    95f4:	.word	0x40038024
    95f8:	.word	0x4003802c
    95fc:	.word	0x40038034
    9600:	.word	0x40038000
    9604:	.word	0x40048004
    9608:	.word	0x400c9000
    960c:	.word	0x40038008
    9610:	.word	0x4003800c

00009614 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9614:	cpsid	i
	avail = usb_buffer_available;
    9616:	ldr	r0, [pc, #52]	; (964c <usb_malloc+0x38>)
    9618:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    961a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    961e:	cmp	r3, #11
    9620:	bgt.n	9644 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9622:	mov.w	r1, #2147483648	; 0x80000000
    9626:	lsrs	r1, r3
    9628:	bic.w	r2, r2, r1
    962c:	str	r2, [r0, #0]
	__enable_irq();
    962e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9630:	ldr	r0, [pc, #28]	; (9650 <usb_malloc+0x3c>)
    9632:	add.w	r3, r3, r3, lsl #3
    9636:	lsls	r3, r3, #3
    9638:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    963a:	movs	r1, #0
    963c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    963e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9640:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9642:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9644:	cpsie	i
		return NULL;
    9646:	movs	r0, #0
    9648:	bx	lr
    964a:	nop
    964c:	.word	0x200138dc
    9650:	.word	0x200133d0

00009654 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9654:	ldr	r3, [pc, #52]	; (968c <usb_free+0x38>)
    9656:	ldr	r2, [pc, #56]	; (9690 <usb_free+0x3c>)
    9658:	subs	r3, r0, r3
    965a:	umull	r2, r3, r2, r3
    965e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9660:	cmp	r3, #11
    9662:	bhi.n	967e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9664:	ldr	r2, [pc, #44]	; (9694 <usb_free+0x40>)
    9666:	ldrb	r2, [r2, #0]
    9668:	cbnz	r2, 9680 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    966a:	cpsid	i
	usb_buffer_available |= mask;
    966c:	ldr	r0, [pc, #40]	; (9698 <usb_free+0x44>)
    966e:	mov.w	r1, #2147483648	; 0x80000000
    9672:	ldr	r2, [r0, #0]
    9674:	lsr.w	r3, r1, r3
    9678:	orrs	r2, r3
    967a:	str	r2, [r0, #0]
	__enable_irq();
    967c:	cpsie	i
    967e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9680:	ldr	r2, [pc, #24]	; (969c <usb_free+0x48>)
    9682:	ldrb	r2, [r2, #0]
    9684:	cmp	r2, #0
    9686:	beq.n	966a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9688:	b.w	9708 <usb_rx_memory>
    968c:	.word	0x200133d0
    9690:	.word	0x38e38e39
    9694:	.word	0x20019b5d
    9698:	.word	0x200138dc
    969c:	.word	0x20019b68

000096a0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    96a0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    96a2:	cmp	r3, #3
    96a4:	bhi.n	96d0 <usb_rx+0x30>
	__disable_irq();
    96a6:	cpsid	i
	ret = rx_first[endpoint];
    96a8:	ldr	r1, [pc, #40]	; (96d4 <usb_rx+0x34>)
    96aa:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    96ae:	cbz	r0, 96cc <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    96b0:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    96b2:	ldr	r4, [pc, #36]	; (96d8 <usb_rx+0x38>)
    96b4:	ldrh	r5, [r0, #0]
    96b6:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    96ba:	ldr	r6, [r0, #4]
    96bc:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    96c0:	subs	r2, r2, r5
    96c2:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    96c6:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    96c8:	pop	{r4, r5, r6}
    96ca:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    96cc:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    96ce:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    96d0:	movs	r0, #0
    96d2:	bx	lr
    96d4:	.word	0x20019ae0
    96d8:	.word	0x20019c6c

000096dc <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    96dc:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    96de:	cmp	r0, #3
    96e0:	bhi.n	96fa <usb_tx_packet_count+0x1e>
	__disable_irq();
    96e2:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    96e4:	ldr	r3, [pc, #28]	; (9704 <usb_tx_packet_count+0x28>)
    96e6:	ldr.w	r3, [r3, r0, lsl #2]
    96ea:	cbz	r3, 96fe <usb_tx_packet_count+0x22>
    96ec:	movs	r0, #0
    96ee:	ldr	r3, [r3, #4]
    96f0:	adds	r0, #1
    96f2:	cmp	r3, #0
    96f4:	bne.n	96ee <usb_tx_packet_count+0x12>
	__enable_irq();
    96f6:	cpsie	i
	return count;
    96f8:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    96fa:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    96fc:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    96fe:	mov	r0, r3
    9700:	b.n	96f6 <usb_tx_packet_count+0x1a>
    9702:	nop
    9704:	.word	0x20019b34

00009708 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    9708:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    970a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    970c:	ldr	r2, [pc, #172]	; (97bc <usb_rx_memory+0xb4>)
    970e:	ldrb	r3, [r2, #0]
    9710:	lsls	r5, r3, #28
    9712:	bpl.n	9722 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9714:	ldr	r3, [pc, #168]	; (97c0 <usb_rx_memory+0xb8>)
    9716:	ldr	r1, [r3, #32]
    9718:	cmp	r1, #0
    971a:	beq.n	978a <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    971c:	ldr	r1, [r3, #40]	; 0x28
    971e:	cmp	r1, #0
    9720:	beq.n	97a6 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9722:	ldrb	r3, [r2, #1]
    9724:	lsls	r4, r3, #28
    9726:	bpl.n	9736 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9728:	ldr	r3, [pc, #148]	; (97c0 <usb_rx_memory+0xb8>)
    972a:	ldr	r1, [r3, #64]	; 0x40
    972c:	cmp	r1, #0
    972e:	beq.n	97ae <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9730:	ldr	r1, [r3, #72]	; 0x48
    9732:	cmp	r1, #0
    9734:	beq.n	97aa <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9736:	ldrb	r3, [r2, #2]
    9738:	lsls	r1, r3, #28
    973a:	bpl.n	9748 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    973c:	ldr	r3, [pc, #128]	; (97c0 <usb_rx_memory+0xb8>)
    973e:	ldr	r1, [r3, #96]	; 0x60
    9740:	cmp	r1, #0
    9742:	beq.n	97b2 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9744:	ldr	r1, [r3, #104]	; 0x68
    9746:	cbz	r1, 976c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9748:	ldrb	r3, [r2, #3]
    974a:	lsls	r3, r3, #28
    974c:	bpl.n	975e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    974e:	ldr	r3, [pc, #112]	; (97c0 <usb_rx_memory+0xb8>)
    9750:	ldr.w	r2, [r3, #128]	; 0x80
    9754:	cbz	r2, 97b6 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9756:	ldr.w	r2, [r3, #136]	; 0x88
    975a:	movs	r1, #17
    975c:	cbz	r2, 976e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    975e:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9760:	ldr	r3, [pc, #96]	; (97c4 <usb_rx_memory+0xbc>)
    9762:	movs	r2, #0
    9764:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9766:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    9768:	b.w	9654 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    976c:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    976e:	ldr	r4, [pc, #84]	; (97c4 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9770:	ldr	r5, [pc, #84]	; (97c8 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    9772:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9774:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9778:	add.w	r3, r3, r1, lsl #3
    977c:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    977e:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9780:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9782:	strb	r2, [r4, #0]
				__enable_irq();
    9784:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9786:	pop	{r4, r5}
    9788:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    978a:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    978c:	ldr	r4, [pc, #52]	; (97c4 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    978e:	ldr	r5, [pc, #60]	; (97cc <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    9790:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9792:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9796:	add.w	r3, r3, r2, lsl #3
    979a:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    979c:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    979e:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    97a0:	strb	r2, [r4, #0]
				__enable_irq();
    97a2:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    97a4:	b.n	9786 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    97a6:	movs	r1, #5
    97a8:	b.n	976e <usb_rx_memory+0x66>
    97aa:	movs	r1, #9
    97ac:	b.n	976e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    97ae:	movs	r2, #8
    97b0:	b.n	978c <usb_rx_memory+0x84>
    97b2:	movs	r2, #12
    97b4:	b.n	978c <usb_rx_memory+0x84>
    97b6:	movs	r2, #16
    97b8:	b.n	978c <usb_rx_memory+0x84>
    97ba:	nop
    97bc:	.word	0x00013808
    97c0:	.word	0x1fff0000
    97c4:	.word	0x20019b5d
    97c8:	.word	0x004000c8
    97cc:	.word	0x00400088

000097d0 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    97d0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    97d2:	cmp	r3, #3
    97d4:	bhi.n	9812 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    97d6:	ldr	r2, [pc, #108]	; (9844 <usb_tx+0x74>)
    97d8:	lsls	r0, r0, #5
    97da:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    97de:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    97e0:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    97e2:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    97e4:	ldr	r4, [pc, #96]	; (9848 <usb_tx+0x78>)
    97e6:	ldrb	r2, [r4, r3]
    97e8:	cmp	r2, #3
    97ea:	bhi.n	9824 <usb_tx+0x54>
    97ec:	tbb	[pc, r2]
    97f0:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    97f4:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    97f6:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    97f8:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    97fa:	tst.w	r0, #8
    97fe:	ite	ne
    9800:	movne	r3, #200	; 0xc8
    9802:	moveq	r3, #136	; 0x88
    9804:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9808:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    980a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    980c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    980e:	cpsie	i
}
    9810:	pop	{r4, r5}
    9812:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    9814:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    9816:	movs	r2, #2
		break;
    9818:	b.n	97f6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    981a:	movs	r2, #5
    981c:	b.n	97f6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    981e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    9820:	movs	r2, #4
		break;
    9822:	b.n	97f6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9824:	ldr	r2, [pc, #36]	; (984c <usb_tx+0x7c>)
    9826:	ldr.w	r0, [r2, r3, lsl #2]
    982a:	cbz	r0, 983c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    982c:	ldr	r2, [pc, #32]	; (9850 <usb_tx+0x80>)
    982e:	ldr.w	r0, [r2, r3, lsl #2]
    9832:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9834:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    9838:	cpsie	i
		return;
    983a:	b.n	9810 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    983c:	str.w	r1, [r2, r3, lsl #2]
    9840:	ldr	r2, [pc, #12]	; (9850 <usb_tx+0x80>)
    9842:	b.n	9834 <usb_tx+0x64>
    9844:	.word	0x1fff0000
    9848:	.word	0x20019b6c
    984c:	.word	0x20019b34
    9850:	.word	0x20019b44

00009854 <usb_isr>:
}



void usb_isr(void)
{
    9854:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9858:	ldr.w	fp, [pc, #792]	; 9b74 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    985c:	ldr.w	sl, [pc, #792]	; 9b78 <usb_isr+0x324>
}



void usb_isr(void)
{
    9860:	sub	sp, #28
    9862:	b.n	98ee <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9864:	ldr	r7, [pc, #696]	; (9b20 <usb_isr+0x2cc>)
    9866:	mov.w	r8, r3, lsr #2
    986a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    986e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9870:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9874:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9878:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    987a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    987e:	and.w	r4, r3, #255	; 0xff
    9882:	cmp	r3, #0
    9884:	bne.w	9a90 <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    9888:	ldr.w	r3, [r7, r8, lsl #3]
    988c:	lsrs	r3, r3, #16
    988e:	uxth	r1, r3
    9890:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    9894:	cmp	r3, #0
    9896:	beq.w	9a7e <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    989a:	ldr	r3, [pc, #648]	; (9b24 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    989c:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    98a0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    98a4:	ldr.w	r2, [r3, r6, lsl #2]
    98a8:	cmp	r2, #0
    98aa:	beq.w	9b8a <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    98ae:	ldr	r5, [pc, #632]	; (9b28 <usb_isr+0x2d4>)
    98b0:	ldr.w	r3, [r5, r6, lsl #2]
    98b4:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    98b6:	ldr	r4, [pc, #628]	; (9b2c <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    98b8:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    98bc:	ldrh.w	r3, [r4, r6, lsl #1]
    98c0:	add	r1, r3
    98c2:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    98c6:	bl	9614 <usb_malloc>
					if (packet) {
    98ca:	cmp	r0, #0
    98cc:	beq.w	9b7c <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    98d0:	ldr	r2, [pc, #604]	; (9b30 <usb_isr+0x2dc>)
    98d2:	ldr	r3, [pc, #608]	; (9b34 <usb_isr+0x2e0>)
    98d4:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    98d8:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    98dc:	it	ne
    98de:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    98e0:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    98e4:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    98e8:	movs	r3, #8
    98ea:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    98ee:	ldrb.w	r4, [fp]
    98f2:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    98f4:	lsls	r1, r4, #29
    98f6:	bpl.n	9930 <usb_isr+0xdc>
		if (usb_configuration) {
    98f8:	ldr	r3, [pc, #572]	; (9b38 <usb_isr+0x2e4>)
    98fa:	ldrb	r3, [r3, #0]
    98fc:	cbz	r3, 992a <usb_isr+0xd6>
			t = usb_reboot_timer;
    98fe:	ldr	r1, [pc, #572]	; (9b3c <usb_isr+0x2e8>)
    9900:	ldrb	r2, [r1, #0]
			if (t) {
    9902:	and.w	r3, r2, #255	; 0xff
    9906:	cbz	r2, 9914 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    9908:	subs	r3, #1
    990a:	uxtb	r3, r3
    990c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    990e:	cmp	r3, #0
    9910:	beq.w	a2f2 <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    9914:	ldr	r1, [pc, #552]	; (9b40 <usb_isr+0x2ec>)
    9916:	ldrb	r2, [r1, #0]
			if (t) {
    9918:	and.w	r3, r2, #255	; 0xff
    991c:	cbz	r2, 992a <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    991e:	subs	r3, #1
    9920:	uxtb	r3, r3
    9922:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9924:	cmp	r3, #0
    9926:	beq.w	9b18 <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    992a:	movs	r3, #4
    992c:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    9930:	and.w	r3, r4, #8
    9934:	and.w	r2, r3, #255	; 0xff
    9938:	cmp	r3, #0
    993a:	beq.w	9aea <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    993e:	ldrb.w	r3, [sl]
    9942:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    9944:	lsrs	r6, r3, #4
    9946:	bne.n	9864 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9948:	lsrs	r4, r3, #2
    994a:	ldr.w	r9, [pc, #468]	; 9b20 <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    994e:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9952:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9956:	ubfx	r2, r2, #2, #4
    995a:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    995c:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    995e:	cmp	r2, #12
    9960:	bhi.n	9a60 <usb_isr+0x20c>
    9962:	tbb	[pc, r2]
    9966:	.short	0x8181
    9968:	.word	0x7d7d7d7d
    996c:	.word	0x7d477d7d
    9970:	.short	0x7d7d
    9972:	.byte	0x07
    9973:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9974:	ldr	r0, [r1, #0]
    9976:	ldr	r5, [pc, #460]	; (9b44 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    9978:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    997a:	ldr	r7, [pc, #460]	; (9b48 <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    997c:	ldr	r6, [pc, #460]	; (9b4c <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    997e:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9980:	uxth	r1, r0
    9982:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9986:	ldr	r3, [pc, #424]	; (9b30 <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    9988:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    998a:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    998e:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9990:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9992:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9996:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    9998:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    999c:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    99a0:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    99a4:	ldr	r4, [pc, #376]	; (9b20 <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    99a6:	bhi.w	9b92 <usb_isr+0x33e>
    99aa:	cmp.w	r1, #1664	; 0x680
    99ae:	bcs.w	a0a2 <usb_isr+0x84e>
    99b2:	cmp.w	r1, #258	; 0x102
    99b6:	beq.w	a07e <usb_isr+0x82a>
    99ba:	bhi.w	9ecc <usb_isr+0x678>
    99be:	cmp	r1, #128	; 0x80
    99c0:	beq.w	9f9c <usb_isr+0x748>
    99c4:	cmp	r1, #130	; 0x82
    99c6:	bne.w	a006 <usb_isr+0x7b2>
    99ca:	ldrh	r1, [r5, #4]
    99cc:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    99d0:	cmp	r1, #4
    99d2:	bhi.w	a006 <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    99d6:	ldr	r0, [pc, #376]	; (9b50 <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    99d8:	ldr	r4, [pc, #376]	; (9b54 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    99da:	lsls	r1, r1, #2
    99dc:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    99de:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    99e0:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    99e2:	ldrb	r2, [r0, #0]
    99e4:	lsls	r3, r2, #30
    99e6:	bpl.w	a0dc <usb_isr+0x888>
    99ea:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    99ee:	mov.w	lr, #2
    99f2:	b.n	9fa6 <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    99f4:	ldr	r7, [pc, #336]	; (9b48 <usb_isr+0x2f4>)
    99f6:	ldr	r2, [r7, #0]
		if (data) {
    99f8:	cbz	r2, 9a4c <usb_isr+0x1f8>
			size = ep0_tx_len;
    99fa:	ldr	r3, [pc, #348]	; (9b58 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99fc:	ldr	r6, [pc, #332]	; (9b4c <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99fe:	ldr	r1, [pc, #348]	; (9b5c <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    9a00:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a02:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a04:	ldrb	r5, [r1, #0]
    9a06:	cmp	r0, #64	; 0x40
    9a08:	mov	lr, r0
    9a0a:	orr.w	r8, r5, #2
    9a0e:	it	cs
    9a10:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a14:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    9a16:	eor.w	r4, r4, #1
    9a1a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9a1c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a20:	ite	eq
    9a22:	moveq	r4, #136	; 0x88
    9a24:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a26:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9a2a:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9a2c:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a30:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a34:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9a36:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a38:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    9a3c:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9a3e:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9a40:	cbnz	r0, 9a4a <usb_isr+0x1f6>
    9a42:	cmp.w	lr, #64	; 0x40
    9a46:	it	ne
    9a48:	movne	r2, #0
    9a4a:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    9a4c:	ldr	r3, [pc, #244]	; (9b44 <usb_isr+0x2f0>)
    9a4e:	ldrh	r2, [r3, #0]
    9a50:	cmp.w	r2, #1280	; 0x500
    9a54:	bne.n	9a60 <usb_isr+0x20c>
			setup.bRequest = 0;
    9a56:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9a58:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    9a5a:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9a5c:	ldr	r3, [pc, #256]	; (9b60 <usb_isr+0x30c>)
    9a5e:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9a60:	ldr	r2, [pc, #256]	; (9b64 <usb_isr+0x310>)
    9a62:	movs	r3, #1
    9a64:	strb	r3, [r2, #0]
    9a66:	b.n	98e8 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    9a68:	ldr	r2, [pc, #216]	; (9b44 <usb_isr+0x2f0>)
    9a6a:	ldrh	r5, [r2, #0]
    9a6c:	movw	r0, #8225	; 0x2021
    9a70:	cmp	r5, r0
    9a72:	beq.w	9e74 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9a76:	ldr	r2, [pc, #184]	; (9b30 <usb_isr+0x2dc>)
    9a78:	str.w	r2, [r9, r4, lsl #3]
    9a7c:	b.n	9a60 <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9a7e:	ldr	r2, [pc, #176]	; (9b30 <usb_isr+0x2dc>)
    9a80:	ldr	r3, [pc, #176]	; (9b34 <usb_isr+0x2e0>)
    9a82:	tst.w	r9, #8
    9a86:	it	ne
    9a88:	movne	r3, r2
    9a8a:	str.w	r3, [r7, r8, lsl #3]
    9a8e:	b.n	98e8 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    9a90:	bl	9654 <usb_free>
				packet = tx_first[endpoint];
    9a94:	ldr	r2, [pc, #208]	; (9b68 <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9a96:	ldr	r1, [pc, #212]	; (9b6c <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    9a98:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    9a9c:	cmp	r3, #0
    9a9e:	beq.w	9e0e <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9aa2:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9aa4:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9aa6:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    9aaa:	add.w	r2, r3, #8
    9aae:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    9ab2:	cmp	r4, #3
    9ab4:	bhi.n	9ac2 <usb_isr+0x26e>
    9ab6:	tbb	[pc, r4]
    9aba:	.short	0x0f12
    9abc:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    9abe:	movs	r2, #4
    9ac0:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    9ac2:	ldrh	r2, [r3, #0]
    9ac4:	tst.w	r9, #8
    9ac8:	ite	eq
    9aca:	moveq	r3, #136	; 0x88
    9acc:	movne	r3, #200	; 0xc8
    9ace:	orr.w	r3, r3, r2, lsl #16
    9ad2:	str.w	r3, [r7, r8, lsl #3]
    9ad6:	b.n	98e8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    9ad8:	movs	r2, #2
    9ada:	strb	r2, [r1, r6]
						break;
    9adc:	b.n	9ac2 <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    9ade:	movs	r2, #3
    9ae0:	strb	r2, [r1, r6]
						break;
    9ae2:	b.n	9ac2 <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    9ae4:	movs	r2, #5
    9ae6:	strb	r2, [r1, r6]
						break;
    9ae8:	b.n	9ac2 <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    9aea:	lsls	r0, r4, #31
    9aec:	bmi.w	9f24 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    9af0:	lsls	r1, r4, #24
    9af2:	bmi.w	9f88 <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9af6:	lsls	r2, r4, #30
    9af8:	bpl.n	9b08 <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    9afa:	ldr	r2, [pc, #116]	; (9b70 <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9afc:	ldr	r1, [pc, #116]	; (9b74 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    9afe:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9b00:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    9b02:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    9b04:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9b06:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    9b08:	lsls	r3, r4, #27
    9b0a:	bpl.n	9b12 <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    9b0c:	ldr	r3, [pc, #100]	; (9b74 <usb_isr+0x320>)
    9b0e:	movs	r2, #16
    9b10:	strb	r2, [r3, #0]
	}

}
    9b12:	add	sp, #28
    9b14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    9b18:	bl	8d68 <usb_serial_flush_callback>
    9b1c:	b.n	992a <usb_isr+0xd6>
    9b1e:	nop
    9b20:	.word	0x1fff0000
    9b24:	.word	0x20019ae0
    9b28:	.word	0x20019a8c
    9b2c:	.word	0x20019c6c
    9b30:	.word	0x004000c8
    9b34:	.word	0x00400088
    9b38:	.word	0x20019b68
    9b3c:	.word	0x20019af1
    9b40:	.word	0x20019a6c
    9b44:	.word	0x20019b54
    9b48:	.word	0x20019a88
    9b4c:	.word	0x20019af0
    9b50:	.word	0x400720c0
    9b54:	.word	0x20019b60
    9b58:	.word	0x20019a9c
    9b5c:	.word	0x20019b5c
    9b60:	.word	0x40072098
    9b64:	.word	0x40072094
    9b68:	.word	0x20019b34
    9b6c:	.word	0x20019b6c
    9b70:	.word	0x40072088
    9b74:	.word	0x40072080
    9b78:	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9b7c:	ldr	r2, [pc, #684]	; (9e2c <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    9b7e:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    9b82:	ldrb	r3, [r2, #0]
    9b84:	adds	r3, #1
    9b86:	strb	r3, [r2, #0]
    9b88:	b.n	98e8 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    9b8a:	str.w	r0, [r3, r6, lsl #2]
    9b8e:	ldr	r5, [pc, #672]	; (9e30 <usb_isr+0x5dc>)
    9b90:	b.n	98b6 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9b92:	movw	r0, #8225	; 0x2021
    9b96:	cmp	r1, r0
    9b98:	beq.w	9e06 <usb_isr+0x5b2>
    9b9c:	bhi.w	9efe <usb_isr+0x6aa>
    9ba0:	cmp.w	r1, #2176	; 0x880
    9ba4:	beq.w	9fde <usb_isr+0x78a>
    9ba8:	cmp.w	r1, #2304	; 0x900
    9bac:	bne.w	a006 <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9bb0:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    9bb2:	ldr	r1, [pc, #640]	; (9e34 <usb_isr+0x5e0>)
    9bb4:	ldrb	r0, [r5, #2]
    9bb6:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9bb8:	lsls	r2, r2, #24
    9bba:	bmi.w	a248 <usb_isr+0x9f4>
    9bbe:	ldr.w	r2, [r9, #40]	; 0x28
    9bc2:	ldr	r1, [pc, #628]	; (9e38 <usb_isr+0x5e4>)
    9bc4:	lsls	r3, r2, #24
    9bc6:	bmi.w	a23e <usb_isr+0x9ea>
    9bca:	ldr.w	r2, [r9, #48]	; 0x30
    9bce:	ldr	r1, [pc, #616]	; (9e38 <usb_isr+0x5e4>)
    9bd0:	lsls	r5, r2, #24
    9bd2:	bmi.w	a234 <usb_isr+0x9e0>
    9bd6:	ldr.w	r2, [r9, #56]	; 0x38
    9bda:	ldr	r1, [pc, #604]	; (9e38 <usb_isr+0x5e4>)
    9bdc:	lsls	r4, r2, #24
    9bde:	bmi.w	a22a <usb_isr+0x9d6>
    9be2:	ldr.w	r2, [r9, #64]	; 0x40
    9be6:	ldr	r1, [pc, #592]	; (9e38 <usb_isr+0x5e4>)
    9be8:	lsls	r0, r2, #24
    9bea:	bmi.w	a220 <usb_isr+0x9cc>
    9bee:	ldr.w	r2, [r9, #72]	; 0x48
    9bf2:	ldr	r1, [pc, #580]	; (9e38 <usb_isr+0x5e4>)
    9bf4:	lsls	r2, r2, #24
    9bf6:	bmi.w	a216 <usb_isr+0x9c2>
    9bfa:	ldr.w	r2, [r9, #80]	; 0x50
    9bfe:	ldr	r1, [pc, #568]	; (9e38 <usb_isr+0x5e4>)
    9c00:	lsls	r3, r2, #24
    9c02:	bmi.w	a20c <usb_isr+0x9b8>
    9c06:	ldr.w	r2, [r9, #88]	; 0x58
    9c0a:	ldr	r1, [pc, #556]	; (9e38 <usb_isr+0x5e4>)
    9c0c:	lsls	r5, r2, #24
    9c0e:	bmi.w	a202 <usb_isr+0x9ae>
    9c12:	ldr.w	r2, [r9, #96]	; 0x60
    9c16:	ldr	r1, [pc, #544]	; (9e38 <usb_isr+0x5e4>)
    9c18:	lsls	r4, r2, #24
    9c1a:	bmi.w	a270 <usb_isr+0xa1c>
    9c1e:	ldr.w	r2, [r9, #104]	; 0x68
    9c22:	ldr	r1, [pc, #532]	; (9e38 <usb_isr+0x5e4>)
    9c24:	lsls	r0, r2, #24
    9c26:	bmi.w	a266 <usb_isr+0xa12>
    9c2a:	ldr.w	r2, [r9, #112]	; 0x70
    9c2e:	ldr	r1, [pc, #520]	; (9e38 <usb_isr+0x5e4>)
    9c30:	lsls	r2, r2, #24
    9c32:	bmi.w	a25c <usb_isr+0xa08>
    9c36:	ldr.w	r2, [r9, #120]	; 0x78
    9c3a:	ldr	r1, [pc, #508]	; (9e38 <usb_isr+0x5e4>)
    9c3c:	lsls	r3, r2, #24
    9c3e:	bmi.w	a252 <usb_isr+0x9fe>
    9c42:	ldr.w	r2, [r9, #128]	; 0x80
    9c46:	ldr	r1, [pc, #496]	; (9e38 <usb_isr+0x5e4>)
    9c48:	lsls	r5, r2, #24
    9c4a:	bmi.w	a286 <usb_isr+0xa32>
    9c4e:	ldr.w	r2, [r9, #136]	; 0x88
    9c52:	ldr	r1, [pc, #484]	; (9e38 <usb_isr+0x5e4>)
    9c54:	lsls	r4, r2, #24
    9c56:	bmi.w	a27a <usb_isr+0xa26>
    9c5a:	ldr.w	r2, [r9, #144]	; 0x90
    9c5e:	ldr	r1, [pc, #472]	; (9e38 <usb_isr+0x5e4>)
    9c60:	lsls	r0, r2, #24
    9c62:	bmi.w	a1f6 <usb_isr+0x9a2>
    9c66:	ldr.w	r2, [r9, #152]	; 0x98
    9c6a:	ldr	r1, [pc, #460]	; (9e38 <usb_isr+0x5e4>)
    9c6c:	lsls	r2, r2, #24
    9c6e:	bmi.w	a1ea <usb_isr+0x996>
    9c72:	ldr	r0, [pc, #456]	; (9e3c <usb_isr+0x5e8>)
    9c74:	ldr	r2, [pc, #456]	; (9e40 <usb_isr+0x5ec>)
    9c76:	ldr	r1, [pc, #460]	; (9e44 <usb_isr+0x5f0>)
    9c78:	str	r0, [sp, #4]
    9c7a:	ldr	r0, [pc, #460]	; (9e48 <usb_isr+0x5f4>)
    9c7c:	ldr	r5, [pc, #432]	; (9e30 <usb_isr+0x5dc>)
    9c7e:	ldr	r4, [pc, #460]	; (9e4c <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9c80:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    9c82:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9c84:	str	r6, [sp, #20]
    9c86:	str	r5, [sp, #8]
    9c88:	mov	r8, r0
    9c8a:	mov	r7, r2
    9c8c:	mov	r6, r1
    9c8e:	mov	r5, r3
    9c90:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    9c92:	ldr	r0, [r7, #0]
			while (p) {
    9c94:	cbz	r0, 9ca2 <usb_isr+0x44e>
				n = p->next;
    9c96:	ldr	r4, [r0, #4]
				usb_free(p);
    9c98:	bl	9654 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9c9c:	mov	r0, r4
    9c9e:	cmp	r4, #0
    9ca0:	bne.n	9c96 <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    9ca2:	movs	r3, #0
    9ca4:	str	r3, [r7, #0]
			rx_last[i] = NULL;
    9ca6:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9ca8:	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9caa:	mov	r2, r3
    9cac:	movs	r3, #0
    9cae:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    9cb2:	cbz	r0, 9cc0 <usb_isr+0x46c>
				n = p->next;
    9cb4:	ldr	r4, [r0, #4]
				usb_free(p);
    9cb6:	bl	9654 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9cba:	mov	r0, r4
    9cbc:	cmp	r4, #0
    9cbe:	bne.n	9cb4 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9cc0:	movs	r2, #0
    9cc2:	str	r2, [r6, #0]
			tx_last[i] = NULL;
    9cc4:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9cc6:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9cca:	mov	r1, r2
    9ccc:	movs	r2, #0
    9cce:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    9cd2:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9cd4:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9cd6:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9cd8:	mov.w	r1, #0
    9cdc:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    9ce0:	cmp	r3, #3
    9ce2:	bhi.n	9cf8 <usb_isr+0x4a4>
    9ce4:	tbh	[pc, r3, lsl #1]
    9ce8:	.word	0x0004014b
    9cec:	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9cf0:	mov.w	r3, #1
    9cf4:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    9cf8:	adds	r5, #1
    9cfa:	cmp	r5, #4
    9cfc:	add.w	r7, r7, #4
    9d00:	add.w	r6, r6, #4
    9d04:	add.w	r8, r8, #1
    9d08:	bne.n	9c92 <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9d0a:	ldr	r4, [pc, #324]	; (9e50 <usb_isr+0x5fc>)
			*reg = epconf;
    9d0c:	ldr	r3, [pc, #324]	; (9e54 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9d0e:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    9d10:	ldr	r5, [pc, #280]	; (9e2c <usb_isr+0x5d8>)
    9d12:	ldr	r7, [sp, #16]
    9d14:	ldr	r6, [sp, #20]
    9d16:	movs	r1, #0
    9d18:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9d1a:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9d1c:	lsls	r3, r2, #28
    9d1e:	bmi.w	a1c0 <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9d22:	ldrb	r2, [r4, #1]
			*reg = epconf;
    9d24:	ldr	r1, [pc, #304]	; (9e58 <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9d26:	ldr.w	r8, [pc, #272]	; 9e38 <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9d2a:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9d2c:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9d2e:	mov.w	r1, #0
    9d32:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    9d36:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9d3a:	bmi.w	a194 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9d3e:	ldr	r1, [pc, #284]	; (9e5c <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9d40:	ldrb	r2, [r4, #2]
			*reg = epconf;
    9d42:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9d44:	movs	r1, #0
    9d46:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    9d4a:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9d4e:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9d50:	ldr.w	r8, [pc, #228]	; 9e38 <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9d54:	bmi.w	a110 <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9d58:	ldrb	r2, [r4, #3]
			*reg = epconf;
    9d5a:	ldr	r1, [pc, #260]	; (9e60 <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9d5c:	ldr	r4, [pc, #216]	; (9e38 <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9d5e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9d60:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9d62:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9d64:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    9d68:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9d6c:	bmi.w	a0e2 <usb_isr+0x88e>
    9d70:	ldrb	r3, [r6, #0]
    9d72:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9d74:	movs	r1, #0
    9d76:	eor.w	r2, r3, #1
    9d7a:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    9d7e:	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9d82:	movs	r0, #0
    9d84:	str	r0, [sp, #8]
    9d86:	mov	r8, r0
    9d88:	mov	ip, r0
    9d8a:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d8c:	ldr	r1, [pc, #212]	; (9e64 <usb_isr+0x610>)
    9d8e:	ldrb	r5, [r1, #0]
    9d90:	orr.w	lr, r5, #2
    9d94:	add.w	r3, r9, lr, lsl #3
    9d98:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d9a:	ldr	r3, [sp, #4]
    9d9c:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d9e:	ldr	r3, [sp, #12]
    9da0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9da2:	ite	eq
    9da4:	moveq	r4, #136	; 0x88
    9da6:	movne	r4, #200	; 0xc8
    9da8:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9dac:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9db0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9db4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9db6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9db8:	ldr.w	lr, [pc, #124]	; 9e38 <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    9dbc:	ldr	r3, [pc, #168]	; (9e68 <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    9dbe:	ldr.w	r8, [pc, #164]	; 9e64 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9dc2:	cmp	r0, #0
    9dc4:	bne.w	a014 <usb_isr+0x7c0>
    9dc8:	cmp.w	ip, #64	; 0x40
    9dcc:	bne.n	9e06 <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9dce:	orr.w	ip, r4, #2
    9dd2:	add.w	r3, r9, ip, lsl #3
    9dd6:	ldr	r4, [sp, #8]
    9dd8:	ldr.w	lr, [pc, #92]	; 9e38 <usb_isr+0x5e4>
    9ddc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9dde:	cmp	r2, #0
    9de0:	bne.w	a040 <usb_isr+0x7ec>
    9de4:	lsls	r2, r0, #16
    9de6:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9dea:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9dee:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9df2:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9df4:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9df6:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9df8:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9dfa:	cmp	r0, #64	; 0x40
    9dfc:	bne.n	9e06 <usb_isr+0x5b2>
    9dfe:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    9e00:	ldr	r2, [pc, #104]	; (9e6c <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    9e02:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    9e04:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9e06:	ldr	r2, [pc, #104]	; (9e70 <usb_isr+0x61c>)
    9e08:	movs	r3, #1
    9e0a:	strb	r3, [r2, #0]
    9e0c:	b.n	9a60 <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    9e0e:	ldrb	r3, [r1, r6]
    9e10:	cmp	r3, #3
    9e12:	bhi.w	a070 <usb_isr+0x81c>
    9e16:	add	r2, pc, #4	; (adr r2, 9e1c <usb_isr+0x5c8>)
    9e18:	ldr.w	pc, [r2, r3, lsl #2]
    9e1c:	.word	0x000098e9
    9e20:	.word	0x000098e9
    9e24:	.word	0x00009f73
    9e28:	.word	0x00009f79
    9e2c:	.word	0x20019b5d
    9e30:	.word	0x20019a8c
    9e34:	.word	0x20019b68
    9e38:	.word	0x1fff0000
    9e3c:	.word	0x20019b44
    9e40:	.word	0x20019ae0
    9e44:	.word	0x20019b34
    9e48:	.word	0x20019b6c
    9e4c:	.word	0x20019c6c
    9e50:	.word	0x00013808
    9e54:	.word	0x400720c4
    9e58:	.word	0x400720c8
    9e5c:	.word	0x400720cc
    9e60:	.word	0x400720d0
    9e64:	.word	0x20019b5c
    9e68:	.word	0x20019af0
    9e6c:	.word	0x20019a9c
    9e70:	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    9e74:	ldrh	r2, [r2, #4]
    9e76:	cbnz	r2, 9e9e <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9e78:	ldr	r2, [pc, #708]	; (a140 <usb_isr+0x8ec>)
    9e7a:	ldrb	r5, [r1, #0]
    9e7c:	ldrb	r0, [r1, #1]
    9e7e:	strb	r5, [r2, #0]
    9e80:	strb	r0, [r2, #1]
    9e82:	ldrb	r5, [r1, #2]
    9e84:	ldrb	r0, [r1, #3]
    9e86:	strb	r5, [r2, #2]
    9e88:	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9e8a:	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9e8c:	ldrb	r5, [r1, #4]
    9e8e:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9e90:	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9e92:	ldrb	r5, [r1, #5]
    9e94:	ldrb	r1, [r1, #6]
    9e96:	strb	r5, [r2, #5]
    9e98:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9e9a:	beq.w	9fe8 <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9e9e:	ldr	r1, [pc, #676]	; (a144 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ea0:	ldr	r6, [pc, #676]	; (a148 <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ea2:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ea4:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9ea6:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9eaa:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9eac:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9eb0:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9eb2:	ite	eq
    9eb4:	moveq	r1, #136	; 0x88
    9eb6:	movne	r1, #200	; 0xc8
    9eb8:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ebc:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9ec0:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ec4:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9ec6:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ec8:	str	r1, [r2, #4]
    9eca:	b.n	9a76 <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9ecc:	movw	r2, #770	; 0x302
    9ed0:	cmp	r1, r2
    9ed2:	bne.w	9ff0 <usb_isr+0x79c>
    9ed6:	ldrh	r1, [r5, #4]
    9ed8:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9edc:	cmp	r1, #4
    9ede:	bhi.w	a006 <usb_isr+0x7b2>
    9ee2:	ldrh	r2, [r5, #2]
    9ee4:	cmp	r2, #0
    9ee6:	bne.w	a006 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    9eea:	ldr	r0, [pc, #608]	; (a14c <usb_isr+0x8f8>)
    9eec:	str.w	lr, [sp, #4]
    9ef0:	lsls	r1, r1, #2
    9ef2:	add	r0, r1
    9ef4:	ldrb	r1, [r0, #0]
    9ef6:	orr.w	r1, r1, #2
    9efa:	strb	r1, [r0, #0]
    9efc:	b.n	9d82 <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9efe:	movw	r0, #8737	; 0x2221
    9f02:	cmp	r1, r0
    9f04:	bne.n	9ffe <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    9f06:	ldrh	r1, [r5, #4]
    9f08:	cmp	r1, #0
    9f0a:	bne.w	a0d6 <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9f0e:	ldr	r3, [pc, #576]	; (a150 <usb_isr+0x8fc>)
    9f10:	ldr	r2, [pc, #576]	; (a154 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    9f12:	ldr	r0, [pc, #580]	; (a158 <usb_isr+0x904>)
    9f14:	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9f16:	ldr	r5, [r3, #0]
    9f18:	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9f1a:	str.w	lr, [sp, #4]
    9f1e:	mov	r2, r1
    9f20:	strb	r4, [r0, #0]
    9f22:	b.n	9d82 <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9f24:	ldr	r3, [pc, #564]	; (a15c <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9f26:	ldr	r0, [pc, #568]	; (a160 <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    9f28:	ldr	r1, [pc, #536]	; (a144 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    9f2a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9f2c:	mov.w	lr, #2
    9f30:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9f34:	ldr	r7, [pc, #532]	; (a14c <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    9f36:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9f38:	ldr	r1, [pc, #552]	; (a164 <usb_isr+0x910>)
    9f3a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9f3c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9f3e:	ldr	r6, [pc, #552]	; (a168 <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    9f40:	ldr	r5, [pc, #552]	; (a16c <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9f42:	ldr	r4, [pc, #556]	; (a170 <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    9f44:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9f46:	movs	r1, #13
    9f48:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9f4a:	movs	r1, #255	; 0xff
    9f4c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9f4e:	ldr.w	lr, [pc, #576]	; a190 <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    9f52:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9f54:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9f56:	ldr	r5, [pc, #540]	; (a174 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9f58:	ldr	r2, [pc, #540]	; (a178 <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9f5a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9f5e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9f60:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9f62:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9f66:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9f68:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9f6a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    9f6c:	add	sp, #28
    9f6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9f72:	movs	r3, #0
    9f74:	strb	r3, [r1, r6]
						break;
    9f76:	b.n	98e8 <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9f78:	movs	r3, #1
    9f7a:	strb	r3, [r1, r6]
						break;
    9f7c:	b.n	98e8 <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9f7e:	mov.w	r3, #0
    9f82:	strb.w	r3, [r8]
    9f86:	b.n	9cf8 <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9f88:	ldr	r1, [pc, #448]	; (a14c <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9f8a:	ldr	r3, [pc, #480]	; (a16c <usb_isr+0x918>)
    9f8c:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9f8e:	movs	r0, #13
    9f90:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    9f92:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9f94:	lsls	r2, r4, #30
    9f96:	bpl.w	9b08 <usb_isr+0x2b4>
    9f9a:	b.n	9afa <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9f9c:	ldr	r4, [pc, #476]	; (a17c <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    9f9e:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9fa2:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    9fa4:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9fa6:	ldrh	r2, [r5, #6]
    9fa8:	cmp	r2, lr
    9faa:	bcs.w	a2f4 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9fae:	ldr	r1, [pc, #404]	; (a144 <usb_isr+0x8f0>)
    9fb0:	ldrb	r5, [r1, #0]
    9fb2:	cmp	r2, #64	; 0x40
    9fb4:	mov	ip, r2
    9fb6:	orr.w	lr, r5, #2
    9fba:	it	cs
    9fbc:	movcs.w	ip, #64	; 0x40
    9fc0:	add.w	r3, r4, ip
    9fc4:	add.w	r0, r9, lr, lsl #3
    9fc8:	str	r3, [sp, #8]
    9fca:	movs	r3, #1
    9fcc:	str	r4, [r0, #4]
    9fce:	mov.w	r8, ip, lsl #16
    9fd2:	rsb	r0, ip, r2
    9fd6:	str	r3, [sp, #4]
    9fd8:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9fda:	movs	r4, #200	; 0xc8
    9fdc:	b.n	9da8 <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9fde:	ldr	r2, [pc, #416]	; (a180 <usb_isr+0x92c>)
    9fe0:	ldr	r4, [pc, #408]	; (a17c <usb_isr+0x928>)
    9fe2:	ldrb	r2, [r2, #0]
    9fe4:	strb	r2, [r4, #0]
    9fe6:	b.n	9fa6 <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9fe8:	ldr	r2, [pc, #408]	; (a184 <usb_isr+0x930>)
    9fea:	movs	r1, #15
    9fec:	strb	r1, [r2, #0]
    9fee:	b.n	9e9e <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9ff0:	cmp.w	r1, #1280	; 0x500
    9ff4:	bne.n	a006 <usb_isr+0x7b2>
    9ff6:	movs	r3, #1
    9ff8:	movs	r2, #0
    9ffa:	str	r3, [sp, #4]
    9ffc:	b.n	9d82 <usb_isr+0x52e>
    9ffe:	movw	r2, #8993	; 0x2321
    a002:	cmp	r1, r2
    a004:	beq.n	9ff6 <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a006:	ldr	r2, [pc, #324]	; (a14c <usb_isr+0x8f8>)
    a008:	movs	r3, #15
    a00a:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a00c:	ldr	r2, [pc, #336]	; (a160 <usb_isr+0x90c>)
    a00e:	movs	r3, #1
    a010:	strb	r3, [r2, #0]
    a012:	b.n	9a60 <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    a014:	cmp	r0, #64	; 0x40
    a016:	bls.w	9dce <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a01a:	orr.w	r4, r4, #2
    a01e:	add.w	r1, lr, r4, lsl #3
    a022:	ldr	r6, [sp, #8]
    a024:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a026:	cbz	r2, a058 <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    a028:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a02c:	ldr	r2, [pc, #344]	; (a188 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    a02e:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a030:	mov	r3, r6
    a032:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a034:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a038:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a03a:	str.w	r2, [lr, r4, lsl #3]
    a03e:	b.n	9e00 <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    a040:	ldrb.w	r3, [sp, #4]
    a044:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a046:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a048:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a04a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a04c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a050:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a052:	str.w	r2, [lr, ip, lsl #3]
    a056:	b.n	9dfa <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    a058:	ldrb.w	r1, [sp, #4]
    a05c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a05e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a060:	ldr	r2, [pc, #256]	; (a164 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a062:	strb.w	r5, [r8]
    a066:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a068:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a06a:	str.w	r2, [lr, r4, lsl #3]
    a06e:	b.n	9e00 <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    a070:	tst.w	r9, #8
    a074:	ite	eq
    a076:	moveq	r3, #2
    a078:	movne	r3, #3
    a07a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    a07c:	b.n	98e8 <usb_isr+0x94>
    a07e:	ldrh	r1, [r5, #4]
    a080:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a084:	cmp	r1, #4
    a086:	bhi.n	a006 <usb_isr+0x7b2>
    a088:	ldrh	r2, [r5, #2]
    a08a:	cmp	r2, #0
    a08c:	bne.n	a006 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a08e:	ldr	r0, [pc, #188]	; (a14c <usb_isr+0x8f8>)
    a090:	str.w	lr, [sp, #4]
    a094:	lsls	r1, r1, #2
    a096:	add	r0, r1
    a098:	ldrb	r1, [r0, #0]
    a09a:	bic.w	r1, r1, #2
    a09e:	strb	r1, [r0, #0]
    a0a0:	b.n	9d82 <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    a0a2:	ldr	r2, [pc, #232]	; (a18c <usb_isr+0x938>)
    a0a4:	ldr	r4, [r2, #4]
    a0a6:	cmp	r4, #0
    a0a8:	beq.n	a006 <usb_isr+0x7b2>
    a0aa:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a0ac:	ldrh.w	lr, [r5, #4]
    a0b0:	b.n	a0ba <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    a0b2:	adds	r2, #12
			if (list->addr == NULL) break;
    a0b4:	ldr	r4, [r2, #4]
    a0b6:	cmp	r4, #0
    a0b8:	beq.n	a006 <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a0ba:	ldrh	r3, [r2, #0]
    a0bc:	cmp	r3, r0
    a0be:	bne.n	a0b2 <usb_isr+0x85e>
    a0c0:	ldrh	r3, [r2, #2]
    a0c2:	cmp	r3, lr
    a0c4:	bne.n	a0b2 <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    a0c6:	lsrs	r0, r0, #8
    a0c8:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    a0ca:	ite	eq
    a0cc:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    a0d0:	ldrhne.w	lr, [r2, #8]
    a0d4:	b.n	9fa6 <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a0d6:	str.w	lr, [sp, #4]
    a0da:	b.n	9d82 <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    a0dc:	mov.w	lr, #2
    a0e0:	b.n	9fa6 <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a0e2:	bl	9614 <usb_malloc>
				if (p) {
    a0e6:	cmp	r0, #0
    a0e8:	beq.w	a2ce <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    a0ec:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0ee:	ldr	r2, [pc, #116]	; (a164 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a0f0:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0f4:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a0f8:	bl	9614 <usb_malloc>
				if (p) {
    a0fc:	cmp	r0, #0
    a0fe:	beq.w	a2c2 <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    a102:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a104:	ldr	r2, [pc, #128]	; (a188 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a106:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a10a:	str.w	r2, [r9, #136]	; 0x88
    a10e:	b.n	9d70 <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a110:	bl	9614 <usb_malloc>
				if (p) {
    a114:	cmp	r0, #0
    a116:	beq.w	a2e6 <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    a11a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a11c:	ldr	r2, [pc, #68]	; (a164 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a11e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a122:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a126:	bl	9614 <usb_malloc>
				if (p) {
    a12a:	cmp	r0, #0
    a12c:	beq.w	a2da <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    a130:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a132:	ldr	r2, [pc, #84]	; (a188 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a134:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a138:	str.w	r2, [r9, #104]	; 0x68
    a13c:	b.n	9d58 <usb_isr+0x504>
    a13e:	nop
    a140:	.word	0x20019c60
    a144:	.word	0x20019b5c
    a148:	.word	0x20019af0
    a14c:	.word	0x400720c0
    a150:	.word	0x20019a84
    a154:	.word	0x20019c68
    a158:	.word	0x20019a7c
    a15c:	.word	0x1fff0000
    a160:	.word	0x40072094
    a164:	.word	0x00400088
    a168:	.word	0x40072088
    a16c:	.word	0x40072080
    a170:	.word	0x40072098
    a174:	.word	0x20019aa0
    a178:	.word	0x20019af4
    a17c:	.word	0x20019b60
    a180:	.word	0x20019b68
    a184:	.word	0x20019af1
    a188:	.word	0x004000c8
    a18c:	.word	0x0001380c
    a190:	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a194:	bl	9614 <usb_malloc>
				if (p) {
    a198:	cmp	r0, #0
    a19a:	beq.w	a2b6 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    a19e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a1a0:	ldr	r2, [pc, #372]	; (a318 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a1a2:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a1a6:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a1aa:	bl	9614 <usb_malloc>
				if (p) {
    a1ae:	cmp	r0, #0
    a1b0:	beq.n	a2aa <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    a1b2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a1b4:	ldr	r2, [pc, #356]	; (a31c <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a1b6:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a1ba:	str.w	r2, [r9, #72]	; 0x48
    a1be:	b.n	9d3e <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a1c0:	bl	9614 <usb_malloc>
				if (p) {
    a1c4:	cmp	r0, #0
    a1c6:	beq.n	a29e <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    a1c8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a1ca:	ldr	r2, [pc, #332]	; (a318 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a1cc:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a1d0:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a1d4:	bl	9614 <usb_malloc>
				if (p) {
    a1d8:	cmp	r0, #0
    a1da:	beq.n	a292 <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    a1dc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a1de:	ldr	r2, [pc, #316]	; (a31c <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a1e0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a1e4:	str.w	r2, [r9, #40]	; 0x28
    a1e8:	b.n	9d22 <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a1ea:	ldr.w	r0, [r1, #156]	; 0x9c
    a1ee:	subs	r0, #8
    a1f0:	bl	9654 <usb_free>
    a1f4:	b.n	9c72 <usb_isr+0x41e>
    a1f6:	ldr.w	r0, [r1, #148]	; 0x94
    a1fa:	subs	r0, #8
    a1fc:	bl	9654 <usb_free>
    a200:	b.n	9c66 <usb_isr+0x412>
    a202:	ldr	r0, [r1, #92]	; 0x5c
    a204:	subs	r0, #8
    a206:	bl	9654 <usb_free>
    a20a:	b.n	9c12 <usb_isr+0x3be>
    a20c:	ldr	r0, [r1, #84]	; 0x54
    a20e:	subs	r0, #8
    a210:	bl	9654 <usb_free>
    a214:	b.n	9c06 <usb_isr+0x3b2>
    a216:	ldr	r0, [r1, #76]	; 0x4c
    a218:	subs	r0, #8
    a21a:	bl	9654 <usb_free>
    a21e:	b.n	9bfa <usb_isr+0x3a6>
    a220:	ldr	r0, [r1, #68]	; 0x44
    a222:	subs	r0, #8
    a224:	bl	9654 <usb_free>
    a228:	b.n	9bee <usb_isr+0x39a>
    a22a:	ldr	r0, [r1, #60]	; 0x3c
    a22c:	subs	r0, #8
    a22e:	bl	9654 <usb_free>
    a232:	b.n	9be2 <usb_isr+0x38e>
    a234:	ldr	r0, [r1, #52]	; 0x34
    a236:	subs	r0, #8
    a238:	bl	9654 <usb_free>
    a23c:	b.n	9bd6 <usb_isr+0x382>
    a23e:	ldr	r0, [r1, #44]	; 0x2c
    a240:	subs	r0, #8
    a242:	bl	9654 <usb_free>
    a246:	b.n	9bca <usb_isr+0x376>
    a248:	ldr	r0, [r4, #36]	; 0x24
    a24a:	subs	r0, #8
    a24c:	bl	9654 <usb_free>
    a250:	b.n	9bbe <usb_isr+0x36a>
    a252:	ldr	r0, [r1, #124]	; 0x7c
    a254:	subs	r0, #8
    a256:	bl	9654 <usb_free>
    a25a:	b.n	9c42 <usb_isr+0x3ee>
    a25c:	ldr	r0, [r1, #116]	; 0x74
    a25e:	subs	r0, #8
    a260:	bl	9654 <usb_free>
    a264:	b.n	9c36 <usb_isr+0x3e2>
    a266:	ldr	r0, [r1, #108]	; 0x6c
    a268:	subs	r0, #8
    a26a:	bl	9654 <usb_free>
    a26e:	b.n	9c2a <usb_isr+0x3d6>
    a270:	ldr	r0, [r1, #100]	; 0x64
    a272:	subs	r0, #8
    a274:	bl	9654 <usb_free>
    a278:	b.n	9c1e <usb_isr+0x3ca>
    a27a:	ldr.w	r0, [r1, #140]	; 0x8c
    a27e:	subs	r0, #8
    a280:	bl	9654 <usb_free>
    a284:	b.n	9c5a <usb_isr+0x406>
    a286:	ldr.w	r0, [r1, #132]	; 0x84
    a28a:	subs	r0, #8
    a28c:	bl	9654 <usb_free>
    a290:	b.n	9c4e <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a292:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a294:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    a298:	adds	r2, #1
    a29a:	strb	r2, [r5, #0]
    a29c:	b.n	9d22 <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a29e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a2a0:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    a2a4:	adds	r2, #1
    a2a6:	strb	r2, [r5, #0]
    a2a8:	b.n	a1d4 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a2aa:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a2ac:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    a2b0:	adds	r2, #1
    a2b2:	strb	r2, [r5, #0]
    a2b4:	b.n	9d3e <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a2b6:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a2b8:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    a2bc:	adds	r2, #1
    a2be:	strb	r2, [r5, #0]
    a2c0:	b.n	a1aa <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a2c2:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a2c4:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    a2c8:	adds	r2, #1
    a2ca:	strb	r2, [r5, #0]
    a2cc:	b.n	9d70 <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a2ce:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a2d0:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    a2d4:	adds	r2, #1
    a2d6:	strb	r2, [r5, #0]
    a2d8:	b.n	a0f8 <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a2da:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a2dc:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    a2e0:	adds	r2, #1
    a2e2:	strb	r2, [r5, #0]
    a2e4:	b.n	9d58 <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a2e6:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a2e8:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    a2ec:	adds	r2, #1
    a2ee:	strb	r2, [r5, #0]
    a2f0:	b.n	a126 <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    a2f2:	bkpt	0x0000
    a2f4:	cmp.w	lr, #64	; 0x40
    a2f8:	mov	ip, lr
    a2fa:	it	cs
    a2fc:	movcs.w	ip, #64	; 0x40
    a300:	add.w	r3, r4, ip
    a304:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a306:	movs	r3, #1
    a308:	rsb	r0, ip, lr
    a30c:	mov.w	r8, ip, lsl #16
    a310:	movs	r2, #0
    a312:	str	r3, [sp, #4]
    a314:	b.n	9d8c <usb_isr+0x538>
    a316:	nop
    a318:	.word	0x00400088
    a31c:	.word	0x004000c8

0000a320 <usb_init>:
}



void usb_init(void)
{
    a320:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a324:	ldr	r4, [pc, #144]	; (a3b8 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a326:	bl	ab84 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a32a:	movs	r2, #0
    a32c:	add.w	r0, r4, #160	; 0xa0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a330:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a332:	str	r2, [r3, #0]
		table[i].addr = 0;
    a334:	str	r2, [r3, #4]
    a336:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a338:	cmp	r3, r0
		table[i].desc = 0;
    a33a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a33e:	bne.n	a332 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a340:	ldr	r0, [pc, #120]	; (a3bc <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a342:	ldr	r2, [pc, #124]	; (a3c0 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a344:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a346:	ldr.w	lr, [pc, #144]	; a3d8 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a34a:	ldr	r7, [pc, #120]	; (a3c4 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a34c:	ldr	r5, [pc, #120]	; (a3c8 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a34e:	ldr	r6, [pc, #124]	; (a3cc <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a350:	ldr.w	r8, [pc, #136]	; a3dc <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    a354:	ldr.w	ip, [pc, #136]	; a3e0 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a358:	ldr.w	r9, [pc, #136]	; a3e4 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a35c:	orr.w	r3, r3, #262144	; 0x40000
    a360:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a362:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a364:	ldr	r0, [pc, #104]	; (a3d0 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a366:	orr.w	r3, r3, #50331648	; 0x3000000
    a36a:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a36c:	ubfx	r3, r4, #8, #8
    a370:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a374:	ubfx	r3, r4, #16, #8
    a378:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a37a:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a37c:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a37e:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a382:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a384:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a388:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a38c:	ldr	r5, [pc, #68]	; (a3d4 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    a38e:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    a392:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a394:	movs	r3, #1
    a396:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a39a:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a39c:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a3a0:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a3a4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    a3a6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a3aa:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a3ac:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a3ae:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a3b0:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a3b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a3b8:	.word	0x1fff0000
    a3bc:	.word	0x40048034
    a3c0:	.word	0x4000d800
    a3c4:	.word	0x400720b0
    a3c8:	.word	0x400720b4
    a3cc:	.word	0x40072010
    a3d0:	.word	0xe000e104
    a3d4:	.word	0xe000e435
    a3d8:	.word	0x4007209c
    a3dc:	.word	0x40072080
    a3e0:	.word	0x40072088
    a3e4:	.word	0x40072094

0000a3e8 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a3e8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a3ec:	ldr	r6, [pc, #196]	; (a4b4 <yield+0xcc>)
    a3ee:	ldrb	r3, [r6, #0]
    a3f0:	cbz	r3, a418 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    a3f2:	ldr	r7, [pc, #196]	; (a4b8 <yield+0xd0>)
    a3f4:	ldrb	r2, [r7, #0]
    a3f6:	cbnz	r2, a418 <yield+0x30>
	running = 1;
    a3f8:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a3fa:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a3fc:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a3fe:	bmi.n	a46e <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    a400:	lsls	r2, r3, #30
    a402:	bmi.n	a438 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a404:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a406:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a408:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a40a:	bpl.n	a418 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    a40c:	ldr	r3, [pc, #172]	; (a4bc <yield+0xd4>)
    a40e:	ldr	r2, [r3, #0]
    a410:	cbz	r2, a418 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a412:	mrs	r2, IPSR
		if (ipsr != 0) return;
    a416:	cbz	r2, a41c <yield+0x34>
    a418:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a41c:	mrs	r1, PRIMASK
		__disable_irq();
    a420:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a422:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a424:	cbz	r0, a42e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a426:	ldr	r4, [pc, #152]	; (a4c0 <yield+0xd8>)
    a428:	ldrb	r2, [r4, #0]
    a42a:	cmp	r2, #0
    a42c:	beq.n	a48c <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a42e:	cmp	r1, #0
    a430:	bne.n	a418 <yield+0x30>
    a432:	cpsie	i
    a434:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a438:	ldr.w	r8, [pc, #144]	; a4cc <yield+0xe4>
    a43c:	ldrb.w	r2, [r8]
    a440:	cmp	r2, #0
    a442:	beq.n	a404 <yield+0x1c>
    a444:	ldr.w	r9, [pc, #136]	; a4d0 <yield+0xe8>
    a448:	movs	r4, #0
    a44a:	b.n	a458 <yield+0x70>
    a44c:	adds	r4, #1
    a44e:	ldrb.w	r3, [r8]
    a452:	uxtb	r4, r4
    a454:	cmp	r3, r4
    a456:	bls.n	a47e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    a458:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    a45c:	ldr	r3, [r5, #0]
    a45e:	mov	r0, r5
    a460:	ldr	r3, [r3, #16]
    a462:	blx	r3
    a464:	cmp	r0, #0
    a466:	beq.n	a44c <yield+0x64>
    a468:	ldr	r3, [r5, #16]
    a46a:	blx	r3
    a46c:	b.n	a44c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a46e:	bl	8b54 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a472:	cbnz	r0, a4a8 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a474:	ldr	r3, [pc, #76]	; (a4c4 <yield+0xdc>)
    a476:	ldrb	r3, [r3, #0]
    a478:	cbnz	r3, a482 <yield+0x9a>
    a47a:	ldrb	r3, [r6, #0]
    a47c:	b.n	a400 <yield+0x18>
    a47e:	ldrb	r3, [r6, #0]
    a480:	b.n	a404 <yield+0x1c>
    a482:	ldrb	r3, [r6, #0]
    a484:	and.w	r3, r3, #254	; 0xfe
    a488:	strb	r3, [r6, #0]
    a48a:	b.n	a400 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    a48c:	ldr	r5, [r0, #20]
    a48e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a490:	movs	r3, #1
    a492:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    a494:	cbz	r5, a4ae <yield+0xc6>
			firstYield->_prev = nullptr;
    a496:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a498:	cbnz	r1, a49c <yield+0xb4>
    a49a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a49c:	movs	r5, #0
    a49e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a4a0:	ldr	r3, [r0, #8]
    a4a2:	blx	r3
		runningFromYield = false;
    a4a4:	strb	r5, [r4, #0]
    a4a6:	b.n	a418 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a4a8:	bl	ab78 <serialEvent()>
    a4ac:	b.n	a474 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a4ae:	ldr	r3, [pc, #24]	; (a4c8 <yield+0xe0>)
    a4b0:	str	r5, [r3, #0]
    a4b2:	b.n	a498 <yield+0xb0>
    a4b4:	.word	0x200138e0
    a4b8:	.word	0x20019b70
    a4bc:	.word	0x20019b80
    a4c0:	.word	0x20019b84
    a4c4:	.word	0x200138f4
    a4c8:	.word	0x20019b7c
    a4cc:	.word	0x20019c28
    a4d0:	.word	0x20019c10

0000a4d4 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    a4d4:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    a4d6:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    a4d8:	cbnz	r1, a502 <DMAChannel::begin(bool)+0x2e>
    a4da:	ldr	r2, [r0, #0]
    a4dc:	cbz	r2, a502 <DMAChannel::begin(bool)+0x2e>
    a4de:	ldrb	r3, [r0, #4]
    a4e0:	cmp	r3, #15
    a4e2:	bhi.n	a502 <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    a4e4:	ldr	r4, [pc, #160]	; (a588 <DMAChannel::begin(bool)+0xb4>)
    a4e6:	ldrh	r1, [r4, #0]
    a4e8:	asr.w	r5, r1, r3
    a4ec:	lsls	r5, r5, #31
    a4ee:	bpl.n	a506 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    a4f0:	add.w	r3, r3, #33554432	; 0x2000000
    a4f4:	add.w	r3, r3, #1152	; 0x480
    a4f8:	cmp.w	r2, r3, lsl #5
    a4fc:	bne.n	a506 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    a4fe:	cpsie	i
		return;
    a500:	pop	{r4, r5, r6, r7, pc}
    a502:	ldr	r4, [pc, #132]	; (a588 <DMAChannel::begin(bool)+0xb4>)
    a504:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    a506:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    a508:	asr.w	r2, r1, r3
    a50c:	ands.w	r2, r2, #1
    a510:	beq.n	a522 <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    a512:	adds	r3, #1
    a514:	cmp	r3, #16
    a516:	bne.n	a508 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    a518:	cpsie	i
			TCD = (TCD_t *)0;
    a51a:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    a51c:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    a51e:	str	r2, [r0, #0]
    a520:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    a522:	movs	r5, #1
    a524:	lsls	r5, r3
    a526:	orrs	r1, r5
    a528:	strh	r1, [r4, #0]
			__enable_irq();
    a52a:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    a52c:	ldr	r6, [pc, #92]	; (a58c <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    a52e:	ldr	r5, [pc, #96]	; (a590 <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    a530:	ldr	r7, [pc, #96]	; (a594 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    a532:	ldr.w	lr, [pc, #104]	; a59c <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    a536:	uxtb	r1, r3
    a538:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    a53a:	ldr	r4, [r6, #0]
    a53c:	orr.w	r4, r4, #2
    a540:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    a542:	ldr	r4, [r5, #0]
    a544:	orr.w	r4, r4, #2
    a548:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a54a:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    a54e:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    a552:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a556:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    a55a:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a55c:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a560:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    a562:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    a564:	ldr	r4, [pc, #48]	; (a598 <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    a566:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a56a:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a56c:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    a56e:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    a570:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a572:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    a574:	str	r2, [r3, #0]
	*p++ = 0;
    a576:	str	r2, [r3, #4]
	*p++ = 0;
    a578:	str	r2, [r3, #8]
	*p++ = 0;
    a57a:	str	r2, [r3, #12]
	*p++ = 0;
    a57c:	str	r2, [r3, #16]
	*p++ = 0;
    a57e:	str	r2, [r3, #20]
	*p++ = 0;
    a580:	str	r2, [r3, #24]
	*p++ = 0;
    a582:	str	r2, [r3, #28]
    a584:	pop	{r4, r5, r6, r7, pc}
    a586:	nop
    a588:	.word	0x20019b72
    a58c:	.word	0x40048040
    a590:	.word	0x4004803c
    a594:	.word	0x40008000
    a598:	.word	0x4000801f
    a59c:	.word	0x4000801a

0000a5a0 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    a5a0:	ldrb	r3, [r0, #4]
    a5a2:	cmp	r3, #15
    a5a4:	bhi.n	a5cc <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    a5a6:	ldr	r2, [pc, #40]	; (a5d0 <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    a5a8:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    a5aa:	strb	r3, [r2, #0]
	__disable_irq();
    a5ac:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    a5ae:	ldr	r1, [pc, #36]	; (a5d4 <DMAChannel::release()+0x34>)
    a5b0:	ldrb	r4, [r0, #4]
    a5b2:	ldrh	r2, [r1, #0]
    a5b4:	movs	r3, #1
    a5b6:	lsls	r3, r4
    a5b8:	bic.w	r3, r2, r3
    a5bc:	strh	r3, [r1, #0]
	__enable_irq();
    a5be:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    a5c0:	movs	r2, #16
	TCD = (TCD_t *)0;
    a5c2:	movs	r3, #0
}
    a5c4:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    a5c8:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    a5ca:	str	r3, [r0, #0]
}
    a5cc:	bx	lr
    a5ce:	nop
    a5d0:	.word	0x4000801a
    a5d4:	.word	0x20019b72

0000a5d8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a5d8:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a5da:	mrs	r2, PRIMASK
		__disable_irq();
    a5de:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a5e0:	ldr	r4, [pc, #48]	; (a614 <EventResponder::runFromInterrupt()+0x3c>)
    a5e2:	ldr	r0, [r4, #0]
		if (first) {
    a5e4:	cbz	r0, a608 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a5e6:	ldr	r6, [pc, #48]	; (a618 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a5e8:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a5ea:	ldr	r3, [r0, #20]
    a5ec:	str	r3, [r4, #0]
			if (firstInterrupt) {
    a5ee:	cbz	r3, a60e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a5f0:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a5f2:	cbnz	r2, a5f6 <EventResponder::runFromInterrupt()+0x1e>
    a5f4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a5f6:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a5f8:	ldr	r3, [r0, #8]
    a5fa:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a5fc:	mrs	r2, PRIMASK
		__disable_irq();
    a600:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a602:	ldr	r0, [r4, #0]
		if (first) {
    a604:	cmp	r0, #0
    a606:	bne.n	a5ea <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a608:	cbnz	r2, a60c <EventResponder::runFromInterrupt()+0x34>
    a60a:	cpsie	i
    a60c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a60e:	str	r3, [r6, #0]
    a610:	b.n	a5f2 <EventResponder::runFromInterrupt()+0x1a>
    a612:	nop
    a614:	.word	0x20019b74
    a618:	.word	0x20019b78

0000a61c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a61c:	b.w	a5d8 <EventResponder::runFromInterrupt()>

0000a620 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    a620:	ldr	r2, [pc, #8]	; (a62c <systick_isr+0xc>)
    a622:	ldr	r3, [r2, #0]
    a624:	adds	r3, #1
    a626:	str	r3, [r2, #0]
    a628:	bx	lr
    a62a:	nop
    a62c:	.word	0x20019a84

0000a630 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a630:	b.w	8b70 <usb_serial_flush_input>

0000a634 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a634:	b.w	8b24 <usb_serial_peekchar>

0000a638 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a638:	b.w	8adc <usb_serial_getchar>

0000a63c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a63c:	b.w	8b54 <usb_serial_available>

0000a640 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a640:	b.w	8d10 <usb_serial_flush_output>

0000a644 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a644:	b.w	8cc8 <usb_serial_write_buffer_free>

0000a648 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a648:	mov	r0, r1
    a64a:	mov	r1, r2
    a64c:	b.w	8ba8 <usb_serial_write>

0000a650 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a650:	mov	r0, r1
    a652:	b.w	8cb0 <usb_serial_putchar>
    a656:	nop

0000a658 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    a658:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    a65a:	mov	r6, r1
    a65c:	cbz	r1, a67c <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    a65e:	cbz	r2, a680 <Print::write(unsigned char const*, unsigned int)+0x28>
    a660:	mov	r7, r0
    a662:	mov	r4, r2
    a664:	movs	r5, #0
    a666:	ldr	r3, [r7, #0]
    a668:	ldrb.w	r1, [r6], #1
    a66c:	ldr	r3, [r3, #0]
    a66e:	mov	r0, r7
    a670:	blx	r3
    a672:	subs	r4, #1
    a674:	add	r5, r0
    a676:	bne.n	a666 <Print::write(unsigned char const*, unsigned int)+0xe>
    a678:	mov	r0, r5
    a67a:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    a67c:	mov	r0, r1
    a67e:	pop	{r3, r4, r5, r6, r7, pc}
    a680:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    a682:	pop	{r3, r4, r5, r6, r7, pc}

0000a684 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a684:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    a686:	ldr	r2, [pc, #24]	; (a6a0 <Print::println()+0x1c>)
	return write(buf, 2);
    a688:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a68a:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    a68c:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a68e:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a690:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a692:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a696:	movs	r2, #2
    a698:	blx	r3
}
    a69a:	add	sp, #12
    a69c:	ldr.w	pc, [sp], #4
    a6a0:	.word	0x00013804

0000a6a4 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a6a4:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    a6a6:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a6a8:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a6aa:	ldr	r3, [r3, #4]
    a6ac:	blx	r3
	return len;
}
    a6ae:	mov	r0, r4
    a6b0:	pop	{r4, pc}
    a6b2:	nop

0000a6b4 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a6b4:	push	{r1, r2, r3}
    a6b6:	push	{lr}
    a6b8:	sub	sp, #8
    a6ba:	add	r2, sp, #12
    a6bc:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    a6c0:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a6c2:	bl	10088 <vdprintf>
#endif
}
    a6c6:	add	sp, #8
    a6c8:	ldr.w	lr, [sp], #4
    a6cc:	add	sp, #12
    a6ce:	bx	lr

0000a6d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a6d0:	push	{r4, r5, r6, r7, lr}
    a6d2:	mov	r7, r0
    a6d4:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a6d6:	cmp	r2, #0
    a6d8:	beq.n	a742 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a6da:	cmp	r2, #1
    a6dc:	it	eq
    a6de:	moveq	r2, #10
	}


	if (n == 0) {
    a6e0:	cbz	r1, a738 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a6e2:	movs	r4, #33	; 0x21
    a6e4:	b.n	a6e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a6e6:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a6e8:	udiv	r5, r1, r2
    a6ec:	mls	r1, r2, r5, r1
    a6f0:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a6f2:	cmp	r1, #9
    a6f4:	add.w	r1, r0, #48	; 0x30
    a6f8:	it	ls
    a6fa:	uxtbls	r0, r1
    a6fc:	add	r1, sp, #40	; 0x28
    a6fe:	it	hi
    a700:	addhi	r0, #55	; 0x37
    a702:	add	r1, r4
    a704:	it	hi
    a706:	uxtbhi	r0, r0
    a708:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    a70c:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    a70e:	mov	r1, r5
    a710:	cmp	r5, #0
    a712:	bne.n	a6e6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a714:	cbz	r3, a724 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a716:	subs	r4, #1
    a718:	uxtb	r4, r4
		buf[i] = '-';
    a71a:	add	r3, sp, #40	; 0x28
    a71c:	add	r3, r4
    a71e:	movs	r2, #45	; 0x2d
    a720:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a724:	ldr	r3, [r7, #0]
    a726:	add	r2, sp, #4
    a728:	adds	r1, r2, r4
    a72a:	ldr	r3, [r3, #4]
    a72c:	mov	r0, r7
    a72e:	rsb	r2, r4, #34	; 0x22
    a732:	blx	r3
}
    a734:	add	sp, #44	; 0x2c
    a736:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a738:	movs	r2, #48	; 0x30
    a73a:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a73e:	movs	r4, #33	; 0x21
    a740:	b.n	a714 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a742:	ldr	r3, [r0, #0]
    a744:	uxtb	r1, r1
    a746:	ldr	r3, [r3, #0]
    a748:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a74a:	add	sp, #44	; 0x2c
    a74c:	pop	{r4, r5, r6, r7, pc}
    a74e:	nop

0000a750 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a750:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a752:	bl	19f0 <setup>
	while (1) {
		loop();
    a756:	bl	1d5c <loop>
		yield();
    a75a:	bl	a3e8 <yield>
    a75e:	b.n	a756 <main+0x6>

0000a760 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    a760:	cmp.w	r1, #896	; 0x380
    a764:	push	{r4, r5, r6, r7}
    a766:	it	cs
    a768:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    a76c:	cpsid	i
	memory_pool = data;
    a76e:	ldr	r2, [pc, #76]	; (a7bc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    a770:	ldr	r4, [pc, #76]	; (a7c0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)
    a772:	ldr	r3, [pc, #80]	; (a7c4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    a774:	str	r0, [r2, #0]
	memory_pool_first_mask = 0;
    a776:	movs	r2, #0
    a778:	strh	r2, [r4, #0]
    a77a:	add.w	r4, r3, #112	; 0x70
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    a77e:	str.w	r2, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
    a782:	cmp	r3, r4
    a784:	bne.n	a77e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x1e>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a786:	cbz	r1, a7b6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
    a788:	ldr	r6, [pc, #60]	; (a7c8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
    a78a:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a78c:	movs	r7, #1
    a78e:	lsrs	r5, r3, #5
    a790:	and.w	r4, r3, #31
    a794:	ldr.w	r2, [r6, r5, lsl #2]
    a798:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a79c:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a79e:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a7a0:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a7a2:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a7a6:	bne.n	a78e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    a7a8:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    a7aa:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    a7ac:	adds	r3, #1
    a7ae:	cmp	r3, r1
    a7b0:	add.w	r0, r0, #260	; 0x104
    a7b4:	bne.n	a7aa <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4a>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    a7b6:	cpsie	i

}
    a7b8:	pop	{r4, r5, r6, r7}
    a7ba:	bx	lr
    a7bc:	.word	0x20019b90
    a7c0:	.word	0x20019c0a
    a7c4:	.word	0x20019b94
    a7c8:	.word	0x20019b98

0000a7cc <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    a7cc:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    a7ce:	cpsid	i
	index = memory_pool_first_mask;
    a7d0:	ldr	r7, [pc, #140]	; (a860 <AudioStream::allocate()+0x94>)
	p += index;
    a7d2:	ldr	r6, [pc, #144]	; (a864 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    a7d4:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    a7d6:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    a7da:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    a7de:	cmp	r0, r3
    a7e0:	bcs.n	a808 <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a7e2:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    a7e6:	cbnz	r1, a810 <AudioStream::allocate()+0x44>
    a7e8:	adds	r2, r0, #4
    a7ea:	add.w	r5, r6, #115	; 0x73
    a7ee:	adds	r3, r4, #1
    a7f0:	subs	r5, r5, r2
    a7f2:	add.w	r5, r3, r5, lsr #2
    a7f6:	b.n	a800 <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a7f8:	ldr.w	r1, [r2], #4
		if (avail) break;
    a7fc:	cbnz	r1, a810 <AudioStream::allocate()+0x44>
    a7fe:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a800:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    a802:	mov	r4, r3
		p++;
    a804:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a806:	bne.n	a7f8 <AudioStream::allocate()+0x2c>
			__enable_irq();
    a808:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    a80a:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a80c:	pop	{r4, r5, r6, r7}
    a80e:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    a810:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    a814:	mov.w	r2, #2147483648	; 0x80000000
    a818:	lsrs	r2, r3
    a81a:	bic.w	r1, r1, r2
	*p = avail;
    a81e:	str	r1, [r0, #0]
	if (!avail) index++;
    a820:	cbnz	r1, a824 <AudioStream::allocate()+0x58>
    a822:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    a824:	ldr	r1, [pc, #64]	; (a868 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    a826:	strh	r4, [r7, #0]
	used = memory_used + 1;
    a828:	ldrh	r2, [r1, #0]
    a82a:	adds	r2, #1
	memory_used = used;
    a82c:	uxth	r4, r2
    a82e:	strh	r4, [r1, #0]
	__enable_irq();
    a830:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a832:	subs	r0, r0, r6
    a834:	asrs	r0, r0, #2
    a836:	rsb	r0, r3, r0, lsl #5
    a83a:	add.w	r0, r0, r0, lsl #6
    a83e:	lsls	r3, r0, #2
    a840:	ldr	r0, [pc, #40]	; (a86c <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a842:	ldr	r1, [pc, #44]	; (a870 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a844:	ldr	r0, [r0, #0]
    a846:	add.w	r3, r3, #8032	; 0x1f60
    a84a:	adds	r3, #28
	block->ref_count = 1;
    a84c:	movs	r5, #1
    a84e:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    a850:	ldrh	r5, [r1, #0]
    a852:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a854:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a856:	it	hi
    a858:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a85a:	pop	{r4, r5, r6, r7}
    a85c:	bx	lr
    a85e:	nop
    a860:	.word	0x20019c0a
    a864:	.word	0x20019b98
    a868:	.word	0x20019c0c
    a86c:	.word	0x20019b90
    a870:	.word	0x20019b8c

0000a874 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    a874:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    a876:	cpsid	i
	if (block->ref_count > 1) {
    a878:	ldrb	r3, [r0, #0]
    a87a:	cmp	r3, #1
    a87c:	bls.n	a886 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    a87e:	subs	r3, #1
    a880:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    a882:	cpsie	i
    a884:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    a886:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    a888:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a88a:	ldr	r4, [pc, #48]	; (a8bc <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a88c:	ldr	r5, [pc, #48]	; (a8c0 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a88e:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a892:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a894:	mvns	r2, r2
    a896:	mov.w	r0, #2147483648	; 0x80000000
    a89a:	and.w	r2, r2, #31
    a89e:	lsr.w	r2, r0, r2
    a8a2:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    a8a4:	ldr	r2, [pc, #28]	; (a8c4 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a8a6:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a8aa:	cmp	r3, r6
    a8ac:	it	cc
    a8ae:	strhcc	r3, [r5, #0]
		memory_used--;
    a8b0:	ldrh	r3, [r2, #0]
    a8b2:	subs	r3, #1
    a8b4:	strh	r3, [r2, #0]
	}
	__enable_irq();
    a8b6:	cpsie	i
}
    a8b8:	pop	{r4, r5, r6}
    a8ba:	bx	lr
    a8bc:	.word	0x20019b98
    a8c0:	.word	0x20019c0a
    a8c4:	.word	0x20019c0c

0000a8c8 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a8c8:	ldr	r3, [r0, #12]
    a8ca:	cbz	r3, a8fa <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    a8cc:	push	{r4, r5}
    a8ce:	b.n	a8d4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a8d0:	ldr	r3, [r3, #12]
    a8d2:	cbz	r3, a8f8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    a8d4:	ldrb	r0, [r3, #8]
    a8d6:	cmp	r0, r2
    a8d8:	bne.n	a8d0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    a8da:	ldr	r0, [r3, #4]
    a8dc:	ldrb	r4, [r3, #9]
    a8de:	ldr	r0, [r0, #16]
    a8e0:	ldr.w	r5, [r0, r4, lsl #2]
    a8e4:	cmp	r5, #0
    a8e6:	bne.n	a8d0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    a8e8:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    a8ec:	ldrb	r0, [r1, #0]
    a8ee:	adds	r0, #1
    a8f0:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    a8f2:	ldr	r3, [r3, #12]
    a8f4:	cmp	r3, #0
    a8f6:	bne.n	a8d4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    a8f8:	pop	{r4, r5}
    a8fa:	bx	lr

0000a8fc <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a8fc:	ldrb	r3, [r0, #9]
    a8fe:	cmp	r3, r1
    a900:	bls.n	a910 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    a902:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    a904:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    a906:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    a90a:	str.w	r2, [r3, r1, lsl #2]
	return in;
    a90e:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    a910:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    a912:	bx	lr

0000a914 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    a914:	ldrb	r3, [r0, #16]
    a916:	cbnz	r3, a962 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    a918:	ldr	r3, [r0, #4]
    a91a:	ldrb	r2, [r0, #9]
    a91c:	ldrb	r3, [r3, #9]
    a91e:	cmp	r2, r3
    a920:	bhi.n	a962 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    a922:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    a924:	cpsid	i
	p = src.destination_list;
    a926:	ldr	r4, [r0, #0]
    a928:	ldr	r3, [r4, #12]
	if (p == NULL) {
    a92a:	cbz	r3, a978 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a92c:	ldr	r2, [r3, #12]
    a92e:	cbz	r2, a93e <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    a930:	ldr	r1, [r3, #0]
    a932:	cmp	r4, r1
    a934:	beq.n	a964 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    a936:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    a938:	ldr	r2, [r3, #12]
    a93a:	cmp	r2, #0
    a93c:	bne.n	a930 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    a93e:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    a940:	movs	r3, #0
    a942:	str	r3, [r0, #12]
	src.numConnections++;
    a944:	ldrb	r3, [r4, #10]
    a946:	adds	r3, #1
    a948:	strb	r3, [r4, #10]
	src.active = true;
    a94a:	ldr	r2, [r0, #0]

	dst.numConnections++;
    a94c:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    a94e:	movs	r3, #1
    a950:	strb	r3, [r2, #8]

	dst.numConnections++;
    a952:	ldrb	r2, [r1, #10]
    a954:	add	r2, r3
    a956:	strb	r2, [r1, #10]
	dst.active = true;
    a958:	ldr	r2, [r0, #4]
    a95a:	strb	r3, [r2, #8]

	isConnected = true;
    a95c:	strb	r3, [r0, #16]

	__enable_irq();
    a95e:	cpsie	i
}
    a960:	pop	{r4, r5}
    a962:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    a964:	ldr	r5, [r3, #4]
    a966:	ldr	r1, [r0, #4]
    a968:	cmp	r5, r1
    a96a:	bne.n	a936 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    a96c:	ldrh	r1, [r3, #8]
    a96e:	ldrh	r3, [r0, #8]
    a970:	cmp	r1, r3
    a972:	beq.n	a95e <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    a974:	mov	r3, r2
    a976:	b.n	a938 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    a978:	str	r0, [r4, #12]
    a97a:	b.n	a940 <AudioConnection::connect()+0x2c>

0000a97c <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    a97c:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    a97e:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    a980:	cmp	r3, #0
    a982:	beq.n	a9ea <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    a984:	ldr	r3, [r0, #4]
    a986:	ldrb	r2, [r0, #9]
    a988:	ldrb	r3, [r3, #9]
    a98a:	cmp	r2, r3
    a98c:	bhi.n	a9ea <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    a98e:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    a990:	ldr	r2, [r0, #0]
    a992:	ldr	r3, [r2, #12]
	if (p == NULL) {
    a994:	cbz	r3, a9e8 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    a996:	cmp	r0, r3
    a998:	bne.n	a9a0 <AudioConnection::disconnect()+0x24>
    a99a:	b.n	a9f0 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    a99c:	cmp	r0, r3
    a99e:	beq.n	a9a6 <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    a9a0:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    a9a2:	cmp	r3, #0
    a9a4:	bne.n	a99c <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    a9a6:	ldr	r3, [r0, #4]
    a9a8:	ldrb	r1, [r0, #9]
    a9aa:	ldr	r3, [r3, #16]
    a9ac:	mov	r4, r0
    a9ae:	ldr.w	r0, [r3, r1, lsl #2]
    a9b2:	cbz	r0, a9c8 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    a9b4:	bl	a874 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    a9b8:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    a9ba:	ldr	r3, [r4, #4]
    a9bc:	ldrb	r2, [r4, #9]
    a9be:	ldr	r3, [r3, #16]
    a9c0:	movs	r1, #0
    a9c2:	str.w	r1, [r3, r2, lsl #2]
    a9c6:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    a9c8:	ldrb	r3, [r2, #10]
    a9ca:	subs	r3, #1
    a9cc:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    a9ce:	ldr	r3, [r4, #0]
    a9d0:	ldrb	r2, [r3, #10]
    a9d2:	cbnz	r2, a9d6 <AudioConnection::disconnect()+0x5a>
		src.active = false;
    a9d4:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    a9d6:	ldr	r2, [r4, #4]
    a9d8:	ldrb	r3, [r2, #10]
    a9da:	subs	r3, #1
    a9dc:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    a9de:	ldr	r3, [r4, #4]
    a9e0:	ldrb	r2, [r3, #10]
    a9e2:	cbz	r2, a9ec <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    a9e4:	movs	r3, #0
    a9e6:	strb	r3, [r4, #16]

	__enable_irq();
    a9e8:	cpsie	i
    a9ea:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    a9ec:	strb	r2, [r3, #8]
    a9ee:	b.n	a9e4 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    a9f0:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    a9f2:	str	r3, [r2, #12]
    a9f4:	b.n	a9a6 <AudioConnection::disconnect()+0x2a>
    a9f6:	nop

0000a9f8 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a9f8:	ldr	r3, [pc, #32]	; (aa1c <AudioStream::update_setup()+0x24>)
    a9fa:	ldrb	r2, [r3, #0]
    a9fc:	cbnz	r2, aa16 <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a9fe:	ldr	r0, [pc, #32]	; (aa20 <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    aa00:	ldr	r1, [pc, #32]	; (aa24 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    aa02:	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    aa04:	movs	r4, #208	; 0xd0
    aa06:	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    aa08:	movs	r2, #1
	update_scheduled = true;
	return true;
    aa0a:	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    aa0c:	str	r2, [r1, #0]
	update_scheduled = true;
    aa0e:	strb	r2, [r3, #0]
	return true;
}
    aa10:	ldr.w	r4, [sp], #4
    aa14:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    aa16:	movs	r0, #0
    aa18:	bx	lr
    aa1a:	nop
    aa1c:	.word	0x20019b94
    aa20:	.word	0xe000e440
    aa24:	.word	0xe000e108

0000aa28 <software_isr>:
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    aa28:	ldr	r1, [pc, #104]	; (aa94 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    aa2a:	ldr	r2, [pc, #108]	; (aa98 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    aa2c:	ldr	r0, [pc, #108]	; (aa9c <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    aa2e:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    aa30:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    aa32:	ldr	r5, [pc, #108]	; (aaa0 <software_isr+0x78>)
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    aa34:	ldr	r4, [r0, #0]
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    aa36:	orr.w	r3, r3, #16777216	; 0x1000000
    aa3a:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    aa3c:	ldr	r3, [r2, #0]
    aa3e:	orr.w	r3, r3, #1
    aa42:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    aa44:	ldr	r6, [r5, #0]
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    aa46:	cbnz	r4, aa4e <software_isr+0x26>
    aa48:	b.n	aa76 <software_isr+0x4e>
    aa4a:	ldr	r4, [r4, #20]
    aa4c:	cbz	r4, aa76 <software_isr+0x4e>
		if (p->active) {
    aa4e:	ldrb	r3, [r4, #8]
    aa50:	cmp	r3, #0
    aa52:	beq.n	aa4a <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    aa54:	ldr	r3, [r4, #0]
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    aa56:	ldr	r7, [r5, #0]
			p->update();
    aa58:	ldr	r3, [r3, #0]
    aa5a:	mov	r0, r4
    aa5c:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    aa5e:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    aa60:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    aa62:	subs	r3, r3, r7
    aa64:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    aa66:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    aa68:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    aa6a:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    aa6c:	it	hi
    aa6e:	strhhi	r2, [r4, #6]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    aa70:	ldr	r4, [r4, #20]
    aa72:	cmp	r4, #0
    aa74:	bne.n	aa4e <software_isr+0x26>
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    aa76:	ldr	r3, [pc, #40]	; (aaa0 <software_isr+0x78>)
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    aa78:	ldr	r2, [pc, #40]	; (aaa4 <software_isr+0x7c>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    aa7a:	ldr	r3, [r3, #0]
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    aa7c:	ldrh	r0, [r2, #0]
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    aa7e:	ldr	r4, [pc, #40]	; (aaa8 <software_isr+0x80>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    aa80:	subs	r3, r3, r6
    aa82:	lsrs	r3, r3, #4
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    aa84:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    aa86:	cmp	r3, r0
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    aa88:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    aa8a:	bls.n	aa90 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    aa8c:	strh	r1, [r2, #0]
    aa8e:	pop	{r3, r4, r5, r6, r7, pc}
    aa90:	pop	{r3, r4, r5, r6, r7, pc}
    aa92:	nop
    aa94:	.word	0xe000edfc
    aa98:	.word	0xe0001000
    aa9c:	.word	0x20019b88
    aaa0:	.word	0xe0001004
    aaa4:	.word	0x20019c08
    aaa8:	.word	0x20019c0e

0000aaac <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    aaac:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    aaae:	ldr	r5, [pc, #56]	; (aae8 <Stream::timedPeek()+0x3c>)
    aab0:	sub	sp, #8
    aab2:	ldr	r3, [r5, #0]
    aab4:	str	r3, [sp, #0]
	return ret;
    aab6:	ldr	r6, [sp, #0]
    aab8:	mov	r4, r0
    aaba:	b.n	aace <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    aabc:	bl	a3e8 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    aac0:	ldr	r3, [r5, #0]
    aac2:	str	r3, [sp, #4]
	return ret;
    aac4:	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    aac6:	ldr	r2, [r4, #8]
    aac8:	subs	r3, r3, r6
    aaca:	cmp	r3, r2
    aacc:	bcs.n	aade <Stream::timedPeek()+0x32>
    c = peek();
    aace:	ldr	r3, [r4, #0]
    aad0:	mov	r0, r4
    aad2:	ldr	r3, [r3, #24]
    aad4:	blx	r3
    if (c >= 0) return c;
    aad6:	cmp	r0, #0
    aad8:	blt.n	aabc <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    aada:	add	sp, #8
    aadc:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    aade:	mov.w	r0, #4294967295
}
    aae2:	add	sp, #8
    aae4:	pop	{r4, r5, r6, pc}
    aae6:	nop
    aae8:	.word	0x20019a84

0000aaec <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    aaec:	push	{r4, lr}
    aaee:	mov	r4, r0
    aaf0:	b.n	ab00 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    aaf2:	cmp	r3, #45	; 0x2d
    aaf4:	beq.n	ab10 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    aaf6:	cmp	r2, #9
    aaf8:	bls.n	ab10 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    aafa:	ldr	r3, [r4, #0]
    aafc:	ldr	r3, [r3, #20]
    aafe:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    ab00:	mov	r0, r4
    ab02:	bl	aaac <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    ab06:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    ab08:	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    ab0c:	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    ab0e:	bge.n	aaf2 <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    ab10:	mov	r0, r3
    ab12:	pop	{r4, pc}

0000ab14 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    ab14:	push	{r3, r4, r5, r6, r7, lr}
    ab16:	mov	r5, r1
    ab18:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    ab1a:	bl	aaec <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    ab1e:	cmp	r0, #0
    ab20:	blt.n	ab6a <Stream::parseInt(char)+0x56>
    ab22:	movs	r6, #0
    ab24:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    ab26:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    ab28:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    ab2c:	beq.n	ab42 <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    ab2e:	cmp	r0, #45	; 0x2d
    ab30:	beq.n	ab62 <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    ab32:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    ab36:	cmp	r2, #9
      value = value * 10 + c - '0';
    ab38:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    ab3c:	bhi.n	ab42 <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    ab3e:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    ab42:	ldr	r3, [r4, #0]
    ab44:	mov	r0, r4
    ab46:	ldr	r3, [r3, #20]
    ab48:	blx	r3
    c = timedPeek();
    ab4a:	mov	r0, r4
    ab4c:	bl	aaac <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    ab50:	sub.w	r3, r0, #48	; 0x30
    ab54:	cmp	r3, #9
    ab56:	bls.n	ab26 <Stream::parseInt(char)+0x12>
    ab58:	cmp	r0, r5
    ab5a:	beq.n	ab26 <Stream::parseInt(char)+0x12>

  if(isNegative)
    ab5c:	cbz	r7, ab66 <Stream::parseInt(char)+0x52>
    value = -value;
    ab5e:	negs	r0, r6
    ab60:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    ab62:	movs	r7, #1
    ab64:	b.n	ab42 <Stream::parseInt(char)+0x2e>
    ab66:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    ab68:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    ab6a:	movs	r0, #0
    ab6c:	pop	{r3, r4, r5, r6, r7, pc}
    ab6e:	nop

0000ab70 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    ab70:	movs	r1, #1
    ab72:	b.w	ab14 <Stream::parseInt(char)>
    ab76:	nop

0000ab78 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    ab78:	bx	lr
    ab7a:	nop

0000ab7c <operator new(unsigned int)>:
    ab7c:	b.w	ba34 <malloc>

0000ab80 <operator delete(void*, unsigned int)>:
    ab80:	b.w	ba44 <free>

0000ab84 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    ab84:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ab86:	ldr	r2, [pc, #96]	; (abe8 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ab88:	ldr	r3, [pc, #96]	; (abec <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ab8a:	ldr	r1, [pc, #100]	; (abf0 <usb_init_serialnumber+0x6c>)
    ab8c:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ab8e:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ab90:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ab92:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ab94:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ab96:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ab98:	ldrb	r3, [r2, #0]
    ab9a:	lsls	r3, r3, #24
    ab9c:	bpl.n	ab98 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ab9e:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    aba0:	ldr	r3, [pc, #80]	; (abf4 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    aba2:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    aba4:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    aba6:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    aba8:	ldr	r3, [pc, #76]	; (abf8 <usb_init_serialnumber+0x74>)
    abaa:	ldr	r4, [pc, #80]	; (abfc <usb_init_serialnumber+0x78>)
    abac:	cmp	r0, r3
    abae:	it	ls
    abb0:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    abb4:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    abb6:	it	ls
    abb8:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    abba:	movs	r2, #10
    abbc:	bl	ac00 <ultoa>
    abc0:	add	r1, sp, #4
    abc2:	mov	r0, r4
	for (i=0; i<10; i++) {
    abc4:	movs	r3, #0
		char c = buf[i];
    abc6:	ldrb.w	r2, [r1], #1
    abca:	adds	r3, #1
		if (!c) break;
    abcc:	cbz	r2, abde <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    abce:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    abd0:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    abd4:	bne.n	abc6 <usb_init_serialnumber+0x42>
    abd6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    abd8:	strb	r3, [r4, #0]
}
    abda:	add	sp, #16
    abdc:	pop	{r4, pc}
    abde:	lsls	r3, r3, #1
    abe0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    abe2:	strb	r3, [r4, #0]
}
    abe4:	add	sp, #16
    abe6:	pop	{r4, pc}
    abe8:	.word	0x40020004
    abec:	.word	0x40020000
    abf0:	.word	0x41070000
    abf4:	.word	0x4002000c
    abf8:	.word	0x0098967f
    abfc:	.word	0x20013984

0000ac00 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    ac00:	push	{r4, r5, r6, r7}
    ac02:	subs	r5, r1, #1
    ac04:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    ac06:	movs	r4, #0
    ac08:	b.n	ac0c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    ac0a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    ac0c:	udiv	r3, r0, r2
    ac10:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ac14:	cmp	r0, #9
    ac16:	add.w	r7, r0, #48	; 0x30
    ac1a:	itet	hi
    ac1c:	addhi	r0, #55	; 0x37
    ac1e:	uxtbls	r0, r7
    ac20:	uxtbhi	r0, r0
    ac22:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    ac26:	mov	r0, r3
    ac28:	cmp	r3, #0
    ac2a:	bne.n	ac0a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    ac2c:	adds	r2, r1, r4
    ac2e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    ac30:	cbz	r4, ac46 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    ac32:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    ac34:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    ac38:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ac3a:	adds	r3, #1
    ac3c:	subs	r0, r4, r3
    ac3e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    ac40:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ac44:	blt.n	ac32 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    ac46:	mov	r0, r1
    ac48:	pop	{r4, r5, r6, r7}
    ac4a:	bx	lr

0000ac4c <nanf>:
    ac4c:	vldr	s0, [pc, #4]	; ac54 <nanf+0x8>
    ac50:	bx	lr
    ac52:	nop
    ac54:	.word	0x7fc00000

0000ac58 <__aeabi_atexit>:
    ac58:	mov	r3, r1
    ac5a:	mov	r1, r0
    ac5c:	mov	r0, r3
    ac5e:	b.w	b97c <__cxa_atexit>
    ac62:	nop

0000ac64 <__aeabi_drsub>:
    ac64:	eor.w	r1, r1, #2147483648	; 0x80000000
    ac68:	b.n	ac70 <__adddf3>
    ac6a:	nop

0000ac6c <__aeabi_dsub>:
    ac6c:	eor.w	r3, r3, #2147483648	; 0x80000000

0000ac70 <__adddf3>:
    ac70:	push	{r4, r5, lr}
    ac72:	mov.w	r4, r1, lsl #1
    ac76:	mov.w	r5, r3, lsl #1
    ac7a:	teq	r4, r5
    ac7e:	it	eq
    ac80:	teqeq	r0, r2
    ac84:	itttt	ne
    ac86:	orrsne.w	ip, r4, r0
    ac8a:	orrsne.w	ip, r5, r2
    ac8e:	mvnsne.w	ip, r4, asr #21
    ac92:	mvnsne.w	ip, r5, asr #21
    ac96:	beq.w	ae5e <__adddf3+0x1ee>
    ac9a:	mov.w	r4, r4, lsr #21
    ac9e:	rsbs	r5, r4, r5, lsr #21
    aca2:	it	lt
    aca4:	neglt	r5, r5
    aca6:	ble.n	acc2 <__adddf3+0x52>
    aca8:	add	r4, r5
    acaa:	eor.w	r2, r0, r2
    acae:	eor.w	r3, r1, r3
    acb2:	eor.w	r0, r2, r0
    acb6:	eor.w	r1, r3, r1
    acba:	eor.w	r2, r0, r2
    acbe:	eor.w	r3, r1, r3
    acc2:	cmp	r5, #54	; 0x36
    acc4:	it	hi
    acc6:	pophi	{r4, r5, pc}
    acc8:	tst.w	r1, #2147483648	; 0x80000000
    accc:	mov.w	r1, r1, lsl #12
    acd0:	mov.w	ip, #1048576	; 0x100000
    acd4:	orr.w	r1, ip, r1, lsr #12
    acd8:	beq.n	ace0 <__adddf3+0x70>
    acda:	negs	r0, r0
    acdc:	sbc.w	r1, r1, r1, lsl #1
    ace0:	tst.w	r3, #2147483648	; 0x80000000
    ace4:	mov.w	r3, r3, lsl #12
    ace8:	orr.w	r3, ip, r3, lsr #12
    acec:	beq.n	acf4 <__adddf3+0x84>
    acee:	negs	r2, r2
    acf0:	sbc.w	r3, r3, r3, lsl #1
    acf4:	teq	r4, r5
    acf8:	beq.w	ae4a <__adddf3+0x1da>
    acfc:	sub.w	r4, r4, #1
    ad00:	rsbs	lr, r5, #32
    ad04:	blt.n	ad22 <__adddf3+0xb2>
    ad06:	lsl.w	ip, r2, lr
    ad0a:	lsr.w	r2, r2, r5
    ad0e:	adds	r0, r0, r2
    ad10:	adc.w	r1, r1, #0
    ad14:	lsl.w	r2, r3, lr
    ad18:	adds	r0, r0, r2
    ad1a:	asr.w	r3, r3, r5
    ad1e:	adcs	r1, r3
    ad20:	b.n	ad40 <__adddf3+0xd0>
    ad22:	sub.w	r5, r5, #32
    ad26:	add.w	lr, lr, #32
    ad2a:	cmp	r2, #1
    ad2c:	lsl.w	ip, r3, lr
    ad30:	it	cs
    ad32:	orrcs.w	ip, ip, #2
    ad36:	asr.w	r3, r3, r5
    ad3a:	adds	r0, r0, r3
    ad3c:	adcs.w	r1, r1, r3, asr #31
    ad40:	and.w	r5, r1, #2147483648	; 0x80000000
    ad44:	bpl.n	ad56 <__adddf3+0xe6>
    ad46:	mov.w	lr, #0
    ad4a:	rsbs	ip, ip, #0
    ad4e:	sbcs.w	r0, lr, r0
    ad52:	sbc.w	r1, lr, r1
    ad56:	cmp.w	r1, #1048576	; 0x100000
    ad5a:	bcc.n	ad94 <__adddf3+0x124>
    ad5c:	cmp.w	r1, #2097152	; 0x200000
    ad60:	bcc.n	ad7c <__adddf3+0x10c>
    ad62:	lsrs	r1, r1, #1
    ad64:	movs.w	r0, r0, rrx
    ad68:	mov.w	ip, ip, rrx
    ad6c:	add.w	r4, r4, #1
    ad70:	mov.w	r2, r4, lsl #21
    ad74:	cmn.w	r2, #4194304	; 0x400000
    ad78:	bcs.w	aeb0 <__adddf3+0x240>
    ad7c:	cmp.w	ip, #2147483648	; 0x80000000
    ad80:	it	eq
    ad82:	movseq.w	ip, r0, lsr #1
    ad86:	adcs.w	r0, r0, #0
    ad8a:	adc.w	r1, r1, r4, lsl #20
    ad8e:	orr.w	r1, r1, r5
    ad92:	pop	{r4, r5, pc}
    ad94:	movs.w	ip, ip, lsl #1
    ad98:	adcs	r0, r0
    ad9a:	adc.w	r1, r1, r1
    ad9e:	tst.w	r1, #1048576	; 0x100000
    ada2:	sub.w	r4, r4, #1
    ada6:	bne.n	ad7c <__adddf3+0x10c>
    ada8:	teq	r1, #0
    adac:	itt	eq
    adae:	moveq	r1, r0
    adb0:	moveq	r0, #0
    adb2:	clz	r3, r1
    adb6:	it	eq
    adb8:	addeq	r3, #32
    adba:	sub.w	r3, r3, #11
    adbe:	subs.w	r2, r3, #32
    adc2:	bge.n	adde <__adddf3+0x16e>
    adc4:	adds	r2, #12
    adc6:	ble.n	adda <__adddf3+0x16a>
    adc8:	add.w	ip, r2, #20
    adcc:	rsb	r2, r2, #12
    add0:	lsl.w	r0, r1, ip
    add4:	lsr.w	r1, r1, r2
    add8:	b.n	adf4 <__adddf3+0x184>
    adda:	add.w	r2, r2, #20
    adde:	it	le
    ade0:	rsble	ip, r2, #32
    ade4:	lsl.w	r1, r1, r2
    ade8:	lsr.w	ip, r0, ip
    adec:	itt	le
    adee:	orrle.w	r1, r1, ip
    adf2:	lslle	r0, r2
    adf4:	subs	r4, r4, r3
    adf6:	ittt	ge
    adf8:	addge.w	r1, r1, r4, lsl #20
    adfc:	orrge	r1, r5
    adfe:	popge	{r4, r5, pc}
    ae00:	mvn.w	r4, r4
    ae04:	subs	r4, #31
    ae06:	bge.n	ae42 <__adddf3+0x1d2>
    ae08:	adds	r4, #12
    ae0a:	bgt.n	ae2a <__adddf3+0x1ba>
    ae0c:	add.w	r4, r4, #20
    ae10:	rsb	r2, r4, #32
    ae14:	lsr.w	r0, r0, r4
    ae18:	lsl.w	r3, r1, r2
    ae1c:	orr.w	r0, r0, r3
    ae20:	lsr.w	r3, r1, r4
    ae24:	orr.w	r1, r5, r3
    ae28:	pop	{r4, r5, pc}
    ae2a:	rsb	r4, r4, #12
    ae2e:	rsb	r2, r4, #32
    ae32:	lsr.w	r0, r0, r2
    ae36:	lsl.w	r3, r1, r4
    ae3a:	orr.w	r0, r0, r3
    ae3e:	mov	r1, r5
    ae40:	pop	{r4, r5, pc}
    ae42:	lsr.w	r0, r1, r4
    ae46:	mov	r1, r5
    ae48:	pop	{r4, r5, pc}
    ae4a:	teq	r4, #0
    ae4e:	eor.w	r3, r3, #1048576	; 0x100000
    ae52:	itte	eq
    ae54:	eoreq.w	r1, r1, #1048576	; 0x100000
    ae58:	addeq	r4, #1
    ae5a:	subne	r5, #1
    ae5c:	b.n	acfc <__adddf3+0x8c>
    ae5e:	mvns.w	ip, r4, asr #21
    ae62:	it	ne
    ae64:	mvnsne.w	ip, r5, asr #21
    ae68:	beq.n	aebe <__adddf3+0x24e>
    ae6a:	teq	r4, r5
    ae6e:	it	eq
    ae70:	teqeq	r0, r2
    ae74:	beq.n	ae82 <__adddf3+0x212>
    ae76:	orrs.w	ip, r4, r0
    ae7a:	itt	eq
    ae7c:	moveq	r1, r3
    ae7e:	moveq	r0, r2
    ae80:	pop	{r4, r5, pc}
    ae82:	teq	r1, r3
    ae86:	ittt	ne
    ae88:	movne	r1, #0
    ae8a:	movne	r0, #0
    ae8c:	popne	{r4, r5, pc}
    ae8e:	movs.w	ip, r4, lsr #21
    ae92:	bne.n	aea0 <__adddf3+0x230>
    ae94:	lsls	r0, r0, #1
    ae96:	adcs	r1, r1
    ae98:	it	cs
    ae9a:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ae9e:	pop	{r4, r5, pc}
    aea0:	adds.w	r4, r4, #4194304	; 0x400000
    aea4:	itt	cc
    aea6:	addcc.w	r1, r1, #1048576	; 0x100000
    aeaa:	popcc	{r4, r5, pc}
    aeac:	and.w	r5, r1, #2147483648	; 0x80000000
    aeb0:	orr.w	r1, r5, #2130706432	; 0x7f000000
    aeb4:	orr.w	r1, r1, #15728640	; 0xf00000
    aeb8:	mov.w	r0, #0
    aebc:	pop	{r4, r5, pc}
    aebe:	mvns.w	ip, r4, asr #21
    aec2:	itte	ne
    aec4:	movne	r1, r3
    aec6:	movne	r0, r2
    aec8:	mvnseq.w	ip, r5, asr #21
    aecc:	itt	ne
    aece:	movne	r3, r1
    aed0:	movne	r2, r0
    aed2:	orrs.w	r4, r0, r1, lsl #12
    aed6:	itte	eq
    aed8:	orrseq.w	r5, r2, r3, lsl #12
    aedc:	teqeq	r1, r3
    aee0:	orrne.w	r1, r1, #524288	; 0x80000
    aee4:	pop	{r4, r5, pc}
    aee6:	nop

0000aee8 <__aeabi_ui2d>:
    aee8:	teq	r0, #0
    aeec:	itt	eq
    aeee:	moveq	r1, #0
    aef0:	bxeq	lr
    aef2:	push	{r4, r5, lr}
    aef4:	mov.w	r4, #1024	; 0x400
    aef8:	add.w	r4, r4, #50	; 0x32
    aefc:	mov.w	r5, #0
    af00:	mov.w	r1, #0
    af04:	b.n	ada8 <__adddf3+0x138>
    af06:	nop

0000af08 <__aeabi_i2d>:
    af08:	teq	r0, #0
    af0c:	itt	eq
    af0e:	moveq	r1, #0
    af10:	bxeq	lr
    af12:	push	{r4, r5, lr}
    af14:	mov.w	r4, #1024	; 0x400
    af18:	add.w	r4, r4, #50	; 0x32
    af1c:	ands.w	r5, r0, #2147483648	; 0x80000000
    af20:	it	mi
    af22:	negmi	r0, r0
    af24:	mov.w	r1, #0
    af28:	b.n	ada8 <__adddf3+0x138>
    af2a:	nop

0000af2c <__aeabi_f2d>:
    af2c:	lsls	r2, r0, #1
    af2e:	mov.w	r1, r2, asr #3
    af32:	mov.w	r1, r1, rrx
    af36:	mov.w	r0, r2, lsl #28
    af3a:	itttt	ne
    af3c:	andsne.w	r3, r2, #4278190080	; 0xff000000
    af40:	teqne	r3, #4278190080	; 0xff000000
    af44:	eorne.w	r1, r1, #939524096	; 0x38000000
    af48:	bxne	lr
    af4a:	teq	r2, #0
    af4e:	ite	ne
    af50:	teqne	r3, #4278190080	; 0xff000000
    af54:	bxeq	lr
    af56:	push	{r4, r5, lr}
    af58:	mov.w	r4, #896	; 0x380
    af5c:	and.w	r5, r1, #2147483648	; 0x80000000
    af60:	bic.w	r1, r1, #2147483648	; 0x80000000
    af64:	b.n	ada8 <__adddf3+0x138>
    af66:	nop

0000af68 <__aeabi_ul2d>:
    af68:	orrs.w	r2, r0, r1
    af6c:	it	eq
    af6e:	bxeq	lr
    af70:	push	{r4, r5, lr}
    af72:	mov.w	r5, #0
    af76:	b.n	af8e <__aeabi_l2d+0x16>

0000af78 <__aeabi_l2d>:
    af78:	orrs.w	r2, r0, r1
    af7c:	it	eq
    af7e:	bxeq	lr
    af80:	push	{r4, r5, lr}
    af82:	ands.w	r5, r1, #2147483648	; 0x80000000
    af86:	bpl.n	af8e <__aeabi_l2d+0x16>
    af88:	negs	r0, r0
    af8a:	sbc.w	r1, r1, r1, lsl #1
    af8e:	mov.w	r4, #1024	; 0x400
    af92:	add.w	r4, r4, #50	; 0x32
    af96:	movs.w	ip, r1, lsr #22
    af9a:	beq.w	ad56 <__adddf3+0xe6>
    af9e:	mov.w	r2, #3
    afa2:	movs.w	ip, ip, lsr #3
    afa6:	it	ne
    afa8:	addne	r2, #3
    afaa:	movs.w	ip, ip, lsr #3
    afae:	it	ne
    afb0:	addne	r2, #3
    afb2:	add.w	r2, r2, ip, lsr #3
    afb6:	rsb	r3, r2, #32
    afba:	lsl.w	ip, r0, r3
    afbe:	lsr.w	r0, r0, r2
    afc2:	lsl.w	lr, r1, r3
    afc6:	orr.w	r0, r0, lr
    afca:	lsr.w	r1, r1, r2
    afce:	add	r4, r2
    afd0:	b.n	ad56 <__adddf3+0xe6>
    afd2:	nop

0000afd4 <__aeabi_dmul>:
    afd4:	push	{r4, r5, r6, lr}
    afd6:	mov.w	ip, #255	; 0xff
    afda:	orr.w	ip, ip, #1792	; 0x700
    afde:	ands.w	r4, ip, r1, lsr #20
    afe2:	ittte	ne
    afe4:	andsne.w	r5, ip, r3, lsr #20
    afe8:	teqne	r4, ip
    afec:	teqne	r5, ip
    aff0:	bleq	b1b0 <__aeabi_dmul+0x1dc>
    aff4:	add	r4, r5
    aff6:	eor.w	r6, r1, r3
    affa:	bic.w	r1, r1, ip, lsl #21
    affe:	bic.w	r3, r3, ip, lsl #21
    b002:	orrs.w	r5, r0, r1, lsl #12
    b006:	it	ne
    b008:	orrsne.w	r5, r2, r3, lsl #12
    b00c:	orr.w	r1, r1, #1048576	; 0x100000
    b010:	orr.w	r3, r3, #1048576	; 0x100000
    b014:	beq.n	b088 <__aeabi_dmul+0xb4>
    b016:	umull	ip, lr, r0, r2
    b01a:	mov.w	r5, #0
    b01e:	umlal	lr, r5, r1, r2
    b022:	and.w	r2, r6, #2147483648	; 0x80000000
    b026:	umlal	lr, r5, r0, r3
    b02a:	mov.w	r6, #0
    b02e:	umlal	r5, r6, r1, r3
    b032:	teq	ip, #0
    b036:	it	ne
    b038:	orrne.w	lr, lr, #1
    b03c:	sub.w	r4, r4, #255	; 0xff
    b040:	cmp.w	r6, #512	; 0x200
    b044:	sbc.w	r4, r4, #768	; 0x300
    b048:	bcs.n	b054 <__aeabi_dmul+0x80>
    b04a:	movs.w	lr, lr, lsl #1
    b04e:	adcs	r5, r5
    b050:	adc.w	r6, r6, r6
    b054:	orr.w	r1, r2, r6, lsl #11
    b058:	orr.w	r1, r1, r5, lsr #21
    b05c:	mov.w	r0, r5, lsl #11
    b060:	orr.w	r0, r0, lr, lsr #21
    b064:	mov.w	lr, lr, lsl #11
    b068:	subs.w	ip, r4, #253	; 0xfd
    b06c:	it	hi
    b06e:	cmphi.w	ip, #1792	; 0x700
    b072:	bhi.n	b0b2 <__aeabi_dmul+0xde>
    b074:	cmp.w	lr, #2147483648	; 0x80000000
    b078:	it	eq
    b07a:	movseq.w	lr, r0, lsr #1
    b07e:	adcs.w	r0, r0, #0
    b082:	adc.w	r1, r1, r4, lsl #20
    b086:	pop	{r4, r5, r6, pc}
    b088:	and.w	r6, r6, #2147483648	; 0x80000000
    b08c:	orr.w	r1, r6, r1
    b090:	orr.w	r0, r0, r2
    b094:	eor.w	r1, r1, r3
    b098:	subs.w	r4, r4, ip, lsr #1
    b09c:	ittt	gt
    b09e:	rsbsgt	r5, r4, ip
    b0a2:	orrgt.w	r1, r1, r4, lsl #20
    b0a6:	popgt	{r4, r5, r6, pc}
    b0a8:	orr.w	r1, r1, #1048576	; 0x100000
    b0ac:	mov.w	lr, #0
    b0b0:	subs	r4, #1
    b0b2:	bgt.w	b20c <__aeabi_dmul+0x238>
    b0b6:	cmn.w	r4, #54	; 0x36
    b0ba:	ittt	le
    b0bc:	movle	r0, #0
    b0be:	andle.w	r1, r1, #2147483648	; 0x80000000
    b0c2:	pople	{r4, r5, r6, pc}
    b0c4:	rsb	r4, r4, #0
    b0c8:	subs	r4, #32
    b0ca:	bge.n	b138 <__aeabi_dmul+0x164>
    b0cc:	adds	r4, #12
    b0ce:	bgt.n	b108 <__aeabi_dmul+0x134>
    b0d0:	add.w	r4, r4, #20
    b0d4:	rsb	r5, r4, #32
    b0d8:	lsl.w	r3, r0, r5
    b0dc:	lsr.w	r0, r0, r4
    b0e0:	lsl.w	r2, r1, r5
    b0e4:	orr.w	r0, r0, r2
    b0e8:	and.w	r2, r1, #2147483648	; 0x80000000
    b0ec:	bic.w	r1, r1, #2147483648	; 0x80000000
    b0f0:	adds.w	r0, r0, r3, lsr #31
    b0f4:	lsr.w	r6, r1, r4
    b0f8:	adc.w	r1, r2, r6
    b0fc:	orrs.w	lr, lr, r3, lsl #1
    b100:	it	eq
    b102:	biceq.w	r0, r0, r3, lsr #31
    b106:	pop	{r4, r5, r6, pc}
    b108:	rsb	r4, r4, #12
    b10c:	rsb	r5, r4, #32
    b110:	lsl.w	r3, r0, r4
    b114:	lsr.w	r0, r0, r5
    b118:	lsl.w	r2, r1, r4
    b11c:	orr.w	r0, r0, r2
    b120:	and.w	r1, r1, #2147483648	; 0x80000000
    b124:	adds.w	r0, r0, r3, lsr #31
    b128:	adc.w	r1, r1, #0
    b12c:	orrs.w	lr, lr, r3, lsl #1
    b130:	it	eq
    b132:	biceq.w	r0, r0, r3, lsr #31
    b136:	pop	{r4, r5, r6, pc}
    b138:	rsb	r5, r4, #32
    b13c:	lsl.w	r2, r0, r5
    b140:	orr.w	lr, lr, r2
    b144:	lsr.w	r3, r0, r4
    b148:	lsl.w	r2, r1, r5
    b14c:	orr.w	r3, r3, r2
    b150:	lsr.w	r0, r1, r4
    b154:	and.w	r1, r1, #2147483648	; 0x80000000
    b158:	lsr.w	r2, r1, r4
    b15c:	bic.w	r0, r0, r2
    b160:	add.w	r0, r0, r3, lsr #31
    b164:	orrs.w	lr, lr, r3, lsl #1
    b168:	it	eq
    b16a:	biceq.w	r0, r0, r3, lsr #31
    b16e:	pop	{r4, r5, r6, pc}
    b170:	teq	r4, #0
    b174:	bne.n	b196 <__aeabi_dmul+0x1c2>
    b176:	and.w	r6, r1, #2147483648	; 0x80000000
    b17a:	lsls	r0, r0, #1
    b17c:	adc.w	r1, r1, r1
    b180:	tst.w	r1, #1048576	; 0x100000
    b184:	it	eq
    b186:	subeq	r4, #1
    b188:	beq.n	b17a <__aeabi_dmul+0x1a6>
    b18a:	orr.w	r1, r1, r6
    b18e:	teq	r5, #0
    b192:	it	ne
    b194:	bxne	lr
    b196:	and.w	r6, r3, #2147483648	; 0x80000000
    b19a:	lsls	r2, r2, #1
    b19c:	adc.w	r3, r3, r3
    b1a0:	tst.w	r3, #1048576	; 0x100000
    b1a4:	it	eq
    b1a6:	subeq	r5, #1
    b1a8:	beq.n	b19a <__aeabi_dmul+0x1c6>
    b1aa:	orr.w	r3, r3, r6
    b1ae:	bx	lr
    b1b0:	teq	r4, ip
    b1b4:	and.w	r5, ip, r3, lsr #20
    b1b8:	it	ne
    b1ba:	teqne	r5, ip
    b1be:	beq.n	b1da <__aeabi_dmul+0x206>
    b1c0:	orrs.w	r6, r0, r1, lsl #1
    b1c4:	it	ne
    b1c6:	orrsne.w	r6, r2, r3, lsl #1
    b1ca:	bne.n	b170 <__aeabi_dmul+0x19c>
    b1cc:	eor.w	r1, r1, r3
    b1d0:	and.w	r1, r1, #2147483648	; 0x80000000
    b1d4:	mov.w	r0, #0
    b1d8:	pop	{r4, r5, r6, pc}
    b1da:	orrs.w	r6, r0, r1, lsl #1
    b1de:	itte	eq
    b1e0:	moveq	r0, r2
    b1e2:	moveq	r1, r3
    b1e4:	orrsne.w	r6, r2, r3, lsl #1
    b1e8:	beq.n	b21e <__aeabi_dmul+0x24a>
    b1ea:	teq	r4, ip
    b1ee:	bne.n	b1f6 <__aeabi_dmul+0x222>
    b1f0:	orrs.w	r6, r0, r1, lsl #12
    b1f4:	bne.n	b21e <__aeabi_dmul+0x24a>
    b1f6:	teq	r5, ip
    b1fa:	bne.n	b208 <__aeabi_dmul+0x234>
    b1fc:	orrs.w	r6, r2, r3, lsl #12
    b200:	itt	ne
    b202:	movne	r0, r2
    b204:	movne	r1, r3
    b206:	bne.n	b21e <__aeabi_dmul+0x24a>
    b208:	eor.w	r1, r1, r3
    b20c:	and.w	r1, r1, #2147483648	; 0x80000000
    b210:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b214:	orr.w	r1, r1, #15728640	; 0xf00000
    b218:	mov.w	r0, #0
    b21c:	pop	{r4, r5, r6, pc}
    b21e:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b222:	orr.w	r1, r1, #16252928	; 0xf80000
    b226:	pop	{r4, r5, r6, pc}

0000b228 <__aeabi_ddiv>:
    b228:	push	{r4, r5, r6, lr}
    b22a:	mov.w	ip, #255	; 0xff
    b22e:	orr.w	ip, ip, #1792	; 0x700
    b232:	ands.w	r4, ip, r1, lsr #20
    b236:	ittte	ne
    b238:	andsne.w	r5, ip, r3, lsr #20
    b23c:	teqne	r4, ip
    b240:	teqne	r5, ip
    b244:	bleq	b396 <__aeabi_ddiv+0x16e>
    b248:	sub.w	r4, r4, r5
    b24c:	eor.w	lr, r1, r3
    b250:	orrs.w	r5, r2, r3, lsl #12
    b254:	mov.w	r1, r1, lsl #12
    b258:	beq.w	b36c <__aeabi_ddiv+0x144>
    b25c:	mov.w	r3, r3, lsl #12
    b260:	mov.w	r5, #268435456	; 0x10000000
    b264:	orr.w	r3, r5, r3, lsr #4
    b268:	orr.w	r3, r3, r2, lsr #24
    b26c:	mov.w	r2, r2, lsl #8
    b270:	orr.w	r5, r5, r1, lsr #4
    b274:	orr.w	r5, r5, r0, lsr #24
    b278:	mov.w	r6, r0, lsl #8
    b27c:	and.w	r1, lr, #2147483648	; 0x80000000
    b280:	cmp	r5, r3
    b282:	it	eq
    b284:	cmpeq	r6, r2
    b286:	adc.w	r4, r4, #253	; 0xfd
    b28a:	add.w	r4, r4, #768	; 0x300
    b28e:	bcs.n	b296 <__aeabi_ddiv+0x6e>
    b290:	lsrs	r3, r3, #1
    b292:	mov.w	r2, r2, rrx
    b296:	subs	r6, r6, r2
    b298:	sbc.w	r5, r5, r3
    b29c:	lsrs	r3, r3, #1
    b29e:	mov.w	r2, r2, rrx
    b2a2:	mov.w	r0, #1048576	; 0x100000
    b2a6:	mov.w	ip, #524288	; 0x80000
    b2aa:	subs.w	lr, r6, r2
    b2ae:	sbcs.w	lr, r5, r3
    b2b2:	ittt	cs
    b2b4:	subcs	r6, r6, r2
    b2b6:	movcs	r5, lr
    b2b8:	orrcs.w	r0, r0, ip
    b2bc:	lsrs	r3, r3, #1
    b2be:	mov.w	r2, r2, rrx
    b2c2:	subs.w	lr, r6, r2
    b2c6:	sbcs.w	lr, r5, r3
    b2ca:	ittt	cs
    b2cc:	subcs	r6, r6, r2
    b2ce:	movcs	r5, lr
    b2d0:	orrcs.w	r0, r0, ip, lsr #1
    b2d4:	lsrs	r3, r3, #1
    b2d6:	mov.w	r2, r2, rrx
    b2da:	subs.w	lr, r6, r2
    b2de:	sbcs.w	lr, r5, r3
    b2e2:	ittt	cs
    b2e4:	subcs	r6, r6, r2
    b2e6:	movcs	r5, lr
    b2e8:	orrcs.w	r0, r0, ip, lsr #2
    b2ec:	lsrs	r3, r3, #1
    b2ee:	mov.w	r2, r2, rrx
    b2f2:	subs.w	lr, r6, r2
    b2f6:	sbcs.w	lr, r5, r3
    b2fa:	ittt	cs
    b2fc:	subcs	r6, r6, r2
    b2fe:	movcs	r5, lr
    b300:	orrcs.w	r0, r0, ip, lsr #3
    b304:	orrs.w	lr, r5, r6
    b308:	beq.n	b33c <__aeabi_ddiv+0x114>
    b30a:	mov.w	r5, r5, lsl #4
    b30e:	orr.w	r5, r5, r6, lsr #28
    b312:	mov.w	r6, r6, lsl #4
    b316:	mov.w	r3, r3, lsl #3
    b31a:	orr.w	r3, r3, r2, lsr #29
    b31e:	mov.w	r2, r2, lsl #3
    b322:	movs.w	ip, ip, lsr #4
    b326:	bne.n	b2aa <__aeabi_ddiv+0x82>
    b328:	tst.w	r1, #1048576	; 0x100000
    b32c:	bne.n	b346 <__aeabi_ddiv+0x11e>
    b32e:	orr.w	r1, r1, r0
    b332:	mov.w	r0, #0
    b336:	mov.w	ip, #2147483648	; 0x80000000
    b33a:	b.n	b2aa <__aeabi_ddiv+0x82>
    b33c:	tst.w	r1, #1048576	; 0x100000
    b340:	itt	eq
    b342:	orreq	r1, r0
    b344:	moveq	r0, #0
    b346:	subs.w	ip, r4, #253	; 0xfd
    b34a:	it	hi
    b34c:	cmphi.w	ip, #1792	; 0x700
    b350:	bhi.w	b0b2 <__aeabi_dmul+0xde>
    b354:	subs.w	ip, r5, r3
    b358:	itt	eq
    b35a:	subseq.w	ip, r6, r2
    b35e:	movseq.w	ip, r0, lsr #1
    b362:	adcs.w	r0, r0, #0
    b366:	adc.w	r1, r1, r4, lsl #20
    b36a:	pop	{r4, r5, r6, pc}
    b36c:	and.w	lr, lr, #2147483648	; 0x80000000
    b370:	orr.w	r1, lr, r1, lsr #12
    b374:	adds.w	r4, r4, ip, lsr #1
    b378:	ittt	gt
    b37a:	rsbsgt	r5, r4, ip
    b37e:	orrgt.w	r1, r1, r4, lsl #20
    b382:	popgt	{r4, r5, r6, pc}
    b384:	orr.w	r1, r1, #1048576	; 0x100000
    b388:	mov.w	lr, #0
    b38c:	subs	r4, #1
    b38e:	b.n	b0b2 <__aeabi_dmul+0xde>
    b390:	orr.w	lr, r5, r6
    b394:	b.n	b0b2 <__aeabi_dmul+0xde>
    b396:	and.w	r5, ip, r3, lsr #20
    b39a:	teq	r4, ip
    b39e:	it	eq
    b3a0:	teqeq	r5, ip
    b3a4:	beq.w	b21e <__aeabi_dmul+0x24a>
    b3a8:	teq	r4, ip
    b3ac:	bne.n	b3c4 <__aeabi_ddiv+0x19c>
    b3ae:	orrs.w	r4, r0, r1, lsl #12
    b3b2:	bne.w	b21e <__aeabi_dmul+0x24a>
    b3b6:	teq	r5, ip
    b3ba:	bne.w	b208 <__aeabi_dmul+0x234>
    b3be:	mov	r0, r2
    b3c0:	mov	r1, r3
    b3c2:	b.n	b21e <__aeabi_dmul+0x24a>
    b3c4:	teq	r5, ip
    b3c8:	bne.n	b3d8 <__aeabi_ddiv+0x1b0>
    b3ca:	orrs.w	r5, r2, r3, lsl #12
    b3ce:	beq.w	b1cc <__aeabi_dmul+0x1f8>
    b3d2:	mov	r0, r2
    b3d4:	mov	r1, r3
    b3d6:	b.n	b21e <__aeabi_dmul+0x24a>
    b3d8:	orrs.w	r6, r0, r1, lsl #1
    b3dc:	it	ne
    b3de:	orrsne.w	r6, r2, r3, lsl #1
    b3e2:	bne.w	b170 <__aeabi_dmul+0x19c>
    b3e6:	orrs.w	r4, r0, r1, lsl #1
    b3ea:	bne.w	b208 <__aeabi_dmul+0x234>
    b3ee:	orrs.w	r5, r2, r3, lsl #1
    b3f2:	bne.w	b1cc <__aeabi_dmul+0x1f8>
    b3f6:	b.n	b21e <__aeabi_dmul+0x24a>

0000b3f8 <__gedf2>:
    b3f8:	mov.w	ip, #4294967295
    b3fc:	b.n	b40c <__cmpdf2+0x4>
    b3fe:	nop

0000b400 <__ledf2>:
    b400:	mov.w	ip, #1
    b404:	b.n	b40c <__cmpdf2+0x4>
    b406:	nop

0000b408 <__cmpdf2>:
    b408:	mov.w	ip, #1
    b40c:	str.w	ip, [sp, #-4]!
    b410:	mov.w	ip, r1, lsl #1
    b414:	mvns.w	ip, ip, asr #21
    b418:	mov.w	ip, r3, lsl #1
    b41c:	it	ne
    b41e:	mvnsne.w	ip, ip, asr #21
    b422:	beq.n	b45c <__cmpdf2+0x54>
    b424:	add	sp, #4
    b426:	orrs.w	ip, r0, r1, lsl #1
    b42a:	ite	eq
    b42c:	orrseq.w	ip, r2, r3, lsl #1
    b430:	teqne	r1, r3
    b434:	ittt	eq
    b436:	teqeq	r0, r2
    b43a:	moveq	r0, #0
    b43c:	bxeq	lr
    b43e:	cmn.w	r0, #0
    b442:	teq	r1, r3
    b446:	it	pl
    b448:	cmppl	r1, r3
    b44a:	it	eq
    b44c:	cmpeq	r0, r2
    b44e:	ite	cs
    b450:	asrcs	r0, r3, #31
    b452:	mvncc.w	r0, r3, asr #31
    b456:	orr.w	r0, r0, #1
    b45a:	bx	lr
    b45c:	mov.w	ip, r1, lsl #1
    b460:	mvns.w	ip, ip, asr #21
    b464:	bne.n	b46c <__cmpdf2+0x64>
    b466:	orrs.w	ip, r0, r1, lsl #12
    b46a:	bne.n	b47c <__cmpdf2+0x74>
    b46c:	mov.w	ip, r3, lsl #1
    b470:	mvns.w	ip, ip, asr #21
    b474:	bne.n	b424 <__cmpdf2+0x1c>
    b476:	orrs.w	ip, r2, r3, lsl #12
    b47a:	beq.n	b424 <__cmpdf2+0x1c>
    b47c:	ldr.w	r0, [sp], #4
    b480:	bx	lr
    b482:	nop

0000b484 <__aeabi_cdrcmple>:
    b484:	mov	ip, r0
    b486:	mov	r0, r2
    b488:	mov	r2, ip
    b48a:	mov	ip, r1
    b48c:	mov	r1, r3
    b48e:	mov	r3, ip
    b490:	b.n	b494 <__aeabi_cdcmpeq>
    b492:	nop

0000b494 <__aeabi_cdcmpeq>:
    b494:	push	{r0, lr}
    b496:	bl	b408 <__cmpdf2>
    b49a:	cmp	r0, #0
    b49c:	it	mi
    b49e:	cmnmi.w	r0, #0
    b4a2:	pop	{r0, pc}

0000b4a4 <__aeabi_dcmpeq>:
    b4a4:	str.w	lr, [sp, #-8]!
    b4a8:	bl	b494 <__aeabi_cdcmpeq>
    b4ac:	ite	eq
    b4ae:	moveq	r0, #1
    b4b0:	movne	r0, #0
    b4b2:	ldr.w	pc, [sp], #8
    b4b6:	nop

0000b4b8 <__aeabi_dcmplt>:
    b4b8:	str.w	lr, [sp, #-8]!
    b4bc:	bl	b494 <__aeabi_cdcmpeq>
    b4c0:	ite	cc
    b4c2:	movcc	r0, #1
    b4c4:	movcs	r0, #0
    b4c6:	ldr.w	pc, [sp], #8
    b4ca:	nop

0000b4cc <__aeabi_dcmple>:
    b4cc:	str.w	lr, [sp, #-8]!
    b4d0:	bl	b494 <__aeabi_cdcmpeq>
    b4d4:	ite	ls
    b4d6:	movls	r0, #1
    b4d8:	movhi	r0, #0
    b4da:	ldr.w	pc, [sp], #8
    b4de:	nop

0000b4e0 <__aeabi_dcmpge>:
    b4e0:	str.w	lr, [sp, #-8]!
    b4e4:	bl	b484 <__aeabi_cdrcmple>
    b4e8:	ite	ls
    b4ea:	movls	r0, #1
    b4ec:	movhi	r0, #0
    b4ee:	ldr.w	pc, [sp], #8
    b4f2:	nop

0000b4f4 <__aeabi_dcmpgt>:
    b4f4:	str.w	lr, [sp, #-8]!
    b4f8:	bl	b484 <__aeabi_cdrcmple>
    b4fc:	ite	cc
    b4fe:	movcc	r0, #1
    b500:	movcs	r0, #0
    b502:	ldr.w	pc, [sp], #8
    b506:	nop

0000b508 <__aeabi_dcmpun>:
    b508:	mov.w	ip, r1, lsl #1
    b50c:	mvns.w	ip, ip, asr #21
    b510:	bne.n	b518 <__aeabi_dcmpun+0x10>
    b512:	orrs.w	ip, r0, r1, lsl #12
    b516:	bne.n	b52e <__aeabi_dcmpun+0x26>
    b518:	mov.w	ip, r3, lsl #1
    b51c:	mvns.w	ip, ip, asr #21
    b520:	bne.n	b528 <__aeabi_dcmpun+0x20>
    b522:	orrs.w	ip, r2, r3, lsl #12
    b526:	bne.n	b52e <__aeabi_dcmpun+0x26>
    b528:	mov.w	r0, #0
    b52c:	bx	lr
    b52e:	mov.w	r0, #1
    b532:	bx	lr

0000b534 <__aeabi_d2iz>:
    b534:	mov.w	r2, r1, lsl #1
    b538:	adds.w	r2, r2, #2097152	; 0x200000
    b53c:	bcs.n	b56a <__aeabi_d2iz+0x36>
    b53e:	bpl.n	b564 <__aeabi_d2iz+0x30>
    b540:	mvn.w	r3, #992	; 0x3e0
    b544:	subs.w	r2, r3, r2, asr #21
    b548:	bls.n	b570 <__aeabi_d2iz+0x3c>
    b54a:	mov.w	r3, r1, lsl #11
    b54e:	orr.w	r3, r3, #2147483648	; 0x80000000
    b552:	orr.w	r3, r3, r0, lsr #21
    b556:	tst.w	r1, #2147483648	; 0x80000000
    b55a:	lsr.w	r0, r3, r2
    b55e:	it	ne
    b560:	negne	r0, r0
    b562:	bx	lr
    b564:	mov.w	r0, #0
    b568:	bx	lr
    b56a:	orrs.w	r0, r0, r1, lsl #12
    b56e:	bne.n	b57c <__aeabi_d2iz+0x48>
    b570:	ands.w	r0, r1, #2147483648	; 0x80000000
    b574:	it	eq
    b576:	mvneq.w	r0, #2147483648	; 0x80000000
    b57a:	bx	lr
    b57c:	mov.w	r0, #0
    b580:	bx	lr
    b582:	nop

0000b584 <__aeabi_d2uiz>:
    b584:	lsls	r2, r1, #1
    b586:	bcs.n	b5ac <__aeabi_d2uiz+0x28>
    b588:	adds.w	r2, r2, #2097152	; 0x200000
    b58c:	bcs.n	b5b2 <__aeabi_d2uiz+0x2e>
    b58e:	bpl.n	b5ac <__aeabi_d2uiz+0x28>
    b590:	mvn.w	r3, #992	; 0x3e0
    b594:	subs.w	r2, r3, r2, asr #21
    b598:	bmi.n	b5b8 <__aeabi_d2uiz+0x34>
    b59a:	mov.w	r3, r1, lsl #11
    b59e:	orr.w	r3, r3, #2147483648	; 0x80000000
    b5a2:	orr.w	r3, r3, r0, lsr #21
    b5a6:	lsr.w	r0, r3, r2
    b5aa:	bx	lr
    b5ac:	mov.w	r0, #0
    b5b0:	bx	lr
    b5b2:	orrs.w	r0, r0, r1, lsl #12
    b5b6:	bne.n	b5be <__aeabi_d2uiz+0x3a>
    b5b8:	mov.w	r0, #4294967295
    b5bc:	bx	lr
    b5be:	mov.w	r0, #0
    b5c2:	bx	lr

0000b5c4 <__aeabi_d2f>:
    b5c4:	mov.w	r2, r1, lsl #1
    b5c8:	subs.w	r3, r2, #1879048192	; 0x70000000
    b5cc:	itt	cs
    b5ce:	subscs.w	ip, r3, #2097152	; 0x200000
    b5d2:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    b5d6:	bls.n	b5f4 <__aeabi_d2f+0x30>
    b5d8:	and.w	ip, r1, #2147483648	; 0x80000000
    b5dc:	mov.w	r2, r0, lsl #3
    b5e0:	orr.w	r0, ip, r0, lsr #29
    b5e4:	cmp.w	r2, #2147483648	; 0x80000000
    b5e8:	adc.w	r0, r0, r3, lsl #2
    b5ec:	it	eq
    b5ee:	biceq.w	r0, r0, #1
    b5f2:	bx	lr
    b5f4:	tst.w	r1, #1073741824	; 0x40000000
    b5f8:	bne.n	b63e <__aeabi_d2f+0x7a>
    b5fa:	adds.w	r2, r3, #48234496	; 0x2e00000
    b5fe:	itt	lt
    b600:	andlt.w	r0, r1, #2147483648	; 0x80000000
    b604:	bxlt	lr
    b606:	orr.w	r1, r1, #1048576	; 0x100000
    b60a:	mov.w	r2, r2, lsr #21
    b60e:	rsb	r2, r2, #24
    b612:	rsb	ip, r2, #32
    b616:	lsls.w	r3, r0, ip
    b61a:	lsr.w	r0, r0, r2
    b61e:	it	ne
    b620:	orrne.w	r0, r0, #1
    b624:	mov.w	r3, r1, lsl #11
    b628:	mov.w	r3, r3, lsr #11
    b62c:	lsl.w	ip, r3, ip
    b630:	orr.w	r0, r0, ip
    b634:	lsr.w	r3, r3, r2
    b638:	mov.w	r3, r3, lsl #1
    b63c:	b.n	b5d8 <__aeabi_d2f+0x14>
    b63e:	mvns.w	r3, r2, asr #21
    b642:	bne.n	b654 <__aeabi_d2f+0x90>
    b644:	orrs.w	r3, r0, r1, lsl #12
    b648:	ittt	ne
    b64a:	movne.w	r0, #2130706432	; 0x7f000000
    b64e:	orrne.w	r0, r0, #12582912	; 0xc00000
    b652:	bxne	lr
    b654:	and.w	r0, r1, #2147483648	; 0x80000000
    b658:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b65c:	orr.w	r0, r0, #8388608	; 0x800000
    b660:	bx	lr
    b662:	nop

0000b664 <__aeabi_uldivmod>:
    b664:	cbnz	r3, b67c <__aeabi_uldivmod+0x18>
    b666:	cbnz	r2, b67c <__aeabi_uldivmod+0x18>
    b668:	cmp	r1, #0
    b66a:	it	eq
    b66c:	cmpeq	r0, #0
    b66e:	itt	ne
    b670:	movne.w	r1, #4294967295
    b674:	movne.w	r0, #4294967295
    b678:	b.w	b978 <__aeabi_idiv0>
    b67c:	sub.w	ip, sp, #8
    b680:	strd	ip, lr, [sp, #-16]!
    b684:	bl	b694 <__udivmoddi4>
    b688:	ldr.w	lr, [sp, #4]
    b68c:	ldrd	r2, r3, [sp, #8]
    b690:	add	sp, #16
    b692:	bx	lr

0000b694 <__udivmoddi4>:
    b694:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b698:	mov	ip, r1
    b69a:	mov	r6, r1
    b69c:	mov	r4, r0
    b69e:	ldr	r5, [sp, #32]
    b6a0:	cmp	r3, #0
    b6a2:	bne.n	b746 <__udivmoddi4+0xb2>
    b6a4:	cmp	r2, r1
    b6a6:	mov	r7, r2
    b6a8:	bls.n	b784 <__udivmoddi4+0xf0>
    b6aa:	clz	lr, r2
    b6ae:	cmp.w	lr, #0
    b6b2:	beq.n	b6cc <__udivmoddi4+0x38>
    b6b4:	rsb	r4, lr, #32
    b6b8:	lsr.w	r4, r0, r4
    b6bc:	lsl.w	r6, r1, lr
    b6c0:	orr.w	ip, r4, r6
    b6c4:	lsl.w	r7, r2, lr
    b6c8:	lsl.w	r4, r0, lr
    b6cc:	mov.w	r9, r7, lsr #16
    b6d0:	lsrs	r2, r4, #16
    b6d2:	udiv	r0, ip, r9
    b6d6:	uxth.w	r8, r7
    b6da:	mls	r6, r9, r0, ip
    b6de:	orr.w	r6, r2, r6, lsl #16
    b6e2:	mul.w	r3, r0, r8
    b6e6:	cmp	r3, r6
    b6e8:	bls.n	b6fe <__udivmoddi4+0x6a>
    b6ea:	adds	r6, r6, r7
    b6ec:	add.w	r2, r0, #4294967295
    b6f0:	bcs.w	b938 <__udivmoddi4+0x2a4>
    b6f4:	cmp	r3, r6
    b6f6:	bls.w	b938 <__udivmoddi4+0x2a4>
    b6fa:	subs	r0, #2
    b6fc:	add	r6, r7
    b6fe:	subs	r6, r6, r3
    b700:	uxth	r2, r4
    b702:	udiv	r3, r6, r9
    b706:	mls	r6, r9, r3, r6
    b70a:	orr.w	r4, r2, r6, lsl #16
    b70e:	mul.w	r8, r3, r8
    b712:	cmp	r8, r4
    b714:	bls.n	b72a <__udivmoddi4+0x96>
    b716:	adds	r4, r4, r7
    b718:	add.w	r2, r3, #4294967295
    b71c:	bcs.w	b934 <__udivmoddi4+0x2a0>
    b720:	cmp	r8, r4
    b722:	bls.w	b934 <__udivmoddi4+0x2a0>
    b726:	subs	r3, #2
    b728:	add	r4, r7
    b72a:	rsb	r4, r8, r4
    b72e:	orr.w	r0, r3, r0, lsl #16
    b732:	movs	r1, #0
    b734:	cmp	r5, #0
    b736:	beq.n	b7fe <__udivmoddi4+0x16a>
    b738:	lsr.w	r4, r4, lr
    b73c:	movs	r3, #0
    b73e:	str	r4, [r5, #0]
    b740:	str	r3, [r5, #4]
    b742:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b746:	cmp	r3, r1
    b748:	bls.n	b75a <__udivmoddi4+0xc6>
    b74a:	cmp	r5, #0
    b74c:	beq.n	b7fa <__udivmoddi4+0x166>
    b74e:	movs	r1, #0
    b750:	stmia.w	r5, {r0, r6}
    b754:	mov	r0, r1
    b756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b75a:	clz	r1, r3
    b75e:	cmp	r1, #0
    b760:	bne.w	b884 <__udivmoddi4+0x1f0>
    b764:	cmp	r3, r6
    b766:	bcc.n	b76e <__udivmoddi4+0xda>
    b768:	cmp	r2, r0
    b76a:	bhi.w	b95e <__udivmoddi4+0x2ca>
    b76e:	subs	r4, r0, r2
    b770:	sbc.w	r6, r6, r3
    b774:	movs	r0, #1
    b776:	mov	ip, r6
    b778:	cmp	r5, #0
    b77a:	beq.n	b7fe <__udivmoddi4+0x16a>
    b77c:	stmia.w	r5, {r4, ip}
    b780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b784:	cbnz	r2, b78c <__udivmoddi4+0xf8>
    b786:	movs	r7, #1
    b788:	udiv	r7, r7, r2
    b78c:	clz	lr, r7
    b790:	cmp.w	lr, #0
    b794:	bne.n	b802 <__udivmoddi4+0x16e>
    b796:	subs	r3, r6, r7
    b798:	mov.w	r8, r7, lsr #16
    b79c:	uxth.w	ip, r7
    b7a0:	movs	r1, #1
    b7a2:	udiv	r0, r3, r8
    b7a6:	lsrs	r2, r4, #16
    b7a8:	mls	r6, r8, r0, r3
    b7ac:	orr.w	r6, r2, r6, lsl #16
    b7b0:	mul.w	r3, ip, r0
    b7b4:	cmp	r3, r6
    b7b6:	bls.n	b7c8 <__udivmoddi4+0x134>
    b7b8:	adds	r6, r6, r7
    b7ba:	add.w	r2, r0, #4294967295
    b7be:	bcs.n	b7c6 <__udivmoddi4+0x132>
    b7c0:	cmp	r3, r6
    b7c2:	bhi.w	b962 <__udivmoddi4+0x2ce>
    b7c6:	mov	r0, r2
    b7c8:	subs	r6, r6, r3
    b7ca:	uxth	r2, r4
    b7cc:	udiv	r3, r6, r8
    b7d0:	mls	r6, r8, r3, r6
    b7d4:	orr.w	r4, r2, r6, lsl #16
    b7d8:	mul.w	ip, ip, r3
    b7dc:	cmp	ip, r4
    b7de:	bls.n	b7f0 <__udivmoddi4+0x15c>
    b7e0:	adds	r4, r4, r7
    b7e2:	add.w	r2, r3, #4294967295
    b7e6:	bcs.n	b7ee <__udivmoddi4+0x15a>
    b7e8:	cmp	ip, r4
    b7ea:	bhi.w	b958 <__udivmoddi4+0x2c4>
    b7ee:	mov	r3, r2
    b7f0:	rsb	r4, ip, r4
    b7f4:	orr.w	r0, r3, r0, lsl #16
    b7f8:	b.n	b734 <__udivmoddi4+0xa0>
    b7fa:	mov	r1, r5
    b7fc:	mov	r0, r5
    b7fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b802:	rsb	r1, lr, #32
    b806:	lsl.w	r3, r6, lr
    b80a:	lsl.w	r7, r7, lr
    b80e:	lsr.w	r9, r0, r1
    b812:	mov.w	r8, r7, lsr #16
    b816:	lsrs	r6, r1
    b818:	orr.w	r9, r9, r3
    b81c:	udiv	sl, r6, r8
    b820:	mov.w	r4, r9, lsr #16
    b824:	mls	r6, r8, sl, r6
    b828:	uxth.w	ip, r7
    b82c:	orr.w	r3, r4, r6, lsl #16
    b830:	mul.w	r2, sl, ip
    b834:	cmp	r2, r3
    b836:	lsl.w	r4, r0, lr
    b83a:	bls.n	b852 <__udivmoddi4+0x1be>
    b83c:	adds	r3, r3, r7
    b83e:	add.w	r1, sl, #4294967295
    b842:	bcs.w	b954 <__udivmoddi4+0x2c0>
    b846:	cmp	r2, r3
    b848:	bls.w	b954 <__udivmoddi4+0x2c0>
    b84c:	sub.w	sl, sl, #2
    b850:	add	r3, r7
    b852:	subs	r3, r3, r2
    b854:	uxth.w	r9, r9
    b858:	udiv	r1, r3, r8
    b85c:	mls	r3, r8, r1, r3
    b860:	orr.w	r3, r9, r3, lsl #16
    b864:	mul.w	r6, r1, ip
    b868:	cmp	r6, r3
    b86a:	bls.n	b87c <__udivmoddi4+0x1e8>
    b86c:	adds	r3, r3, r7
    b86e:	add.w	r2, r1, #4294967295
    b872:	bcs.n	b94c <__udivmoddi4+0x2b8>
    b874:	cmp	r6, r3
    b876:	bls.n	b94c <__udivmoddi4+0x2b8>
    b878:	subs	r1, #2
    b87a:	add	r3, r7
    b87c:	subs	r3, r3, r6
    b87e:	orr.w	r1, r1, sl, lsl #16
    b882:	b.n	b7a2 <__udivmoddi4+0x10e>
    b884:	rsb	lr, r1, #32
    b888:	lsr.w	r4, r2, lr
    b88c:	lsls	r3, r1
    b88e:	orrs	r3, r4
    b890:	lsr.w	r7, r0, lr
    b894:	lsl.w	r4, r6, r1
    b898:	mov.w	ip, r3, lsr #16
    b89c:	lsr.w	r6, r6, lr
    b8a0:	orrs	r4, r7
    b8a2:	udiv	r9, r6, ip
    b8a6:	lsrs	r7, r4, #16
    b8a8:	mls	r6, ip, r9, r6
    b8ac:	uxth.w	r8, r3
    b8b0:	orr.w	r6, r7, r6, lsl #16
    b8b4:	mul.w	r7, r9, r8
    b8b8:	cmp	r7, r6
    b8ba:	lsl.w	r2, r2, r1
    b8be:	lsl.w	sl, r0, r1
    b8c2:	bls.n	b8d6 <__udivmoddi4+0x242>
    b8c4:	adds	r6, r6, r3
    b8c6:	add.w	r0, r9, #4294967295
    b8ca:	bcs.n	b950 <__udivmoddi4+0x2bc>
    b8cc:	cmp	r7, r6
    b8ce:	bls.n	b950 <__udivmoddi4+0x2bc>
    b8d0:	sub.w	r9, r9, #2
    b8d4:	add	r6, r3
    b8d6:	subs	r6, r6, r7
    b8d8:	uxth	r0, r4
    b8da:	udiv	r4, r6, ip
    b8de:	mls	r6, ip, r4, r6
    b8e2:	orr.w	r7, r0, r6, lsl #16
    b8e6:	mul.w	r8, r4, r8
    b8ea:	cmp	r8, r7
    b8ec:	bls.n	b8fe <__udivmoddi4+0x26a>
    b8ee:	adds	r7, r7, r3
    b8f0:	add.w	r0, r4, #4294967295
    b8f4:	bcs.n	b948 <__udivmoddi4+0x2b4>
    b8f6:	cmp	r8, r7
    b8f8:	bls.n	b948 <__udivmoddi4+0x2b4>
    b8fa:	subs	r4, #2
    b8fc:	add	r7, r3
    b8fe:	orr.w	r0, r4, r9, lsl #16
    b902:	rsb	r7, r8, r7
    b906:	umull	r8, r9, r0, r2
    b90a:	cmp	r7, r9
    b90c:	mov	r4, r8
    b90e:	mov	r6, r9
    b910:	bcc.n	b93c <__udivmoddi4+0x2a8>
    b912:	beq.n	b968 <__udivmoddi4+0x2d4>
    b914:	cbz	r5, b970 <__udivmoddi4+0x2dc>
    b916:	subs.w	r3, sl, r4
    b91a:	sbc.w	r7, r7, r6
    b91e:	lsl.w	lr, r7, lr
    b922:	lsrs	r3, r1
    b924:	lsrs	r7, r1
    b926:	orr.w	r3, lr, r3
    b92a:	stmia.w	r5, {r3, r7}
    b92e:	movs	r1, #0
    b930:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b934:	mov	r3, r2
    b936:	b.n	b72a <__udivmoddi4+0x96>
    b938:	mov	r0, r2
    b93a:	b.n	b6fe <__udivmoddi4+0x6a>
    b93c:	subs.w	r4, r8, r2
    b940:	sbc.w	r6, r9, r3
    b944:	subs	r0, #1
    b946:	b.n	b914 <__udivmoddi4+0x280>
    b948:	mov	r4, r0
    b94a:	b.n	b8fe <__udivmoddi4+0x26a>
    b94c:	mov	r1, r2
    b94e:	b.n	b87c <__udivmoddi4+0x1e8>
    b950:	mov	r9, r0
    b952:	b.n	b8d6 <__udivmoddi4+0x242>
    b954:	mov	sl, r1
    b956:	b.n	b852 <__udivmoddi4+0x1be>
    b958:	subs	r3, #2
    b95a:	add	r4, r7
    b95c:	b.n	b7f0 <__udivmoddi4+0x15c>
    b95e:	mov	r0, r1
    b960:	b.n	b778 <__udivmoddi4+0xe4>
    b962:	subs	r0, #2
    b964:	add	r6, r7
    b966:	b.n	b7c8 <__udivmoddi4+0x134>
    b968:	cmp	sl, r8
    b96a:	bcc.n	b93c <__udivmoddi4+0x2a8>
    b96c:	mov	r6, r7
    b96e:	b.n	b914 <__udivmoddi4+0x280>
    b970:	mov	r1, r5
    b972:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b976:	nop

0000b978 <__aeabi_idiv0>:
    b978:	bx	lr
    b97a:	nop

0000b97c <__cxa_atexit>:
    b97c:	mov	r3, r2
    b97e:	mov	r2, r1
    b980:	mov	r1, r0
    b982:	movs	r0, #2
    b984:	b.w	100e8 <__register_exitproc>

0000b988 <__errno>:
    b988:	ldr	r3, [pc, #4]	; (b990 <__errno+0x8>)
    b98a:	ldr	r0, [r3, #0]
    b98c:	bx	lr
    b98e:	nop
    b990:	.word	0x20013dc8

0000b994 <__libc_init_array>:
    b994:	push	{r4, r5, r6, lr}
    b996:	ldr	r6, [pc, #60]	; (b9d4 <__libc_init_array+0x40>)
    b998:	ldr	r5, [pc, #60]	; (b9d8 <__libc_init_array+0x44>)
    b99a:	subs	r6, r6, r5
    b99c:	asrs	r6, r6, #2
    b99e:	it	ne
    b9a0:	movne	r4, #0
    b9a2:	beq.n	b9b0 <__libc_init_array+0x1c>
    b9a4:	adds	r4, #1
    b9a6:	ldr.w	r3, [r5], #4
    b9aa:	blx	r3
    b9ac:	cmp	r6, r4
    b9ae:	bne.n	b9a4 <__libc_init_array+0x10>
    b9b0:	ldr	r6, [pc, #40]	; (b9dc <__libc_init_array+0x48>)
    b9b2:	ldr	r5, [pc, #44]	; (b9e0 <__libc_init_array+0x4c>)
    b9b4:	subs	r6, r6, r5
    b9b6:	bl	13c7c <_init>
    b9ba:	asrs	r6, r6, #2
    b9bc:	it	ne
    b9be:	movne	r4, #0
    b9c0:	beq.n	b9d0 <__libc_init_array+0x3c>
    b9c2:	adds	r4, #1
    b9c4:	ldr.w	r3, [r5], #4
    b9c8:	blx	r3
    b9ca:	cmp	r6, r4
    b9cc:	bne.n	b9c2 <__libc_init_array+0x2e>
    b9ce:	pop	{r4, r5, r6, pc}
    b9d0:	pop	{r4, r5, r6, pc}
    b9d2:	nop
    b9d4:	.word	0x00013c88
    b9d8:	.word	0x00013c88
    b9dc:	.word	0x00013cdc
    b9e0:	.word	0x00013c88

0000b9e4 <__get_current_locale>:
    b9e4:	ldr	r2, [pc, #12]	; (b9f4 <__get_current_locale+0x10>)
    b9e6:	ldr	r3, [pc, #16]	; (b9f8 <__get_current_locale+0x14>)
    b9e8:	ldr	r2, [r2, #0]
    b9ea:	ldr	r0, [r2, #52]	; 0x34
    b9ec:	cmp	r0, #0
    b9ee:	it	eq
    b9f0:	moveq	r0, r3
    b9f2:	bx	lr
    b9f4:	.word	0x20013dc8
    b9f8:	.word	0x20013dcc

0000b9fc <__locale_mb_cur_max>:
    b9fc:	ldr	r3, [pc, #16]	; (ba10 <__locale_mb_cur_max+0x14>)
    b9fe:	ldr	r2, [pc, #20]	; (ba14 <__locale_mb_cur_max+0x18>)
    ba00:	ldr	r3, [r3, #0]
    ba02:	ldr	r3, [r3, #52]	; 0x34
    ba04:	cmp	r3, #0
    ba06:	it	eq
    ba08:	moveq	r3, r2
    ba0a:	ldrb.w	r0, [r3, #296]	; 0x128
    ba0e:	bx	lr
    ba10:	.word	0x20013dc8
    ba14:	.word	0x20013dcc

0000ba18 <__locale_ctype_ptr_l>:
    ba18:	ldr.w	r0, [r0, #236]	; 0xec
    ba1c:	bx	lr
    ba1e:	nop

0000ba20 <__locale_ctype_ptr>:
    ba20:	push	{r3, lr}
    ba22:	ldr	r3, [pc, #12]	; (ba30 <__locale_ctype_ptr+0x10>)
    ba24:	ldr	r0, [r3, #0]
    ba26:	bl	b9e4 <__get_current_locale>
    ba2a:	ldr.w	r0, [r0, #236]	; 0xec
    ba2e:	pop	{r3, pc}
    ba30:	.word	0x20013dc8

0000ba34 <malloc>:
    ba34:	ldr	r3, [pc, #8]	; (ba40 <malloc+0xc>)
    ba36:	mov	r1, r0
    ba38:	ldr	r0, [r3, #0]
    ba3a:	b.w	ba54 <_malloc_r>
    ba3e:	nop
    ba40:	.word	0x20013dc8

0000ba44 <free>:
    ba44:	ldr	r3, [pc, #8]	; (ba50 <free+0xc>)
    ba46:	mov	r1, r0
    ba48:	ldr	r0, [r3, #0]
    ba4a:	b.w	111d0 <_free_r>
    ba4e:	nop
    ba50:	.word	0x20013dc8

0000ba54 <_malloc_r>:
    ba54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba58:	add.w	r5, r1, #11
    ba5c:	cmp	r5, #22
    ba5e:	sub	sp, #12
    ba60:	mov	r6, r0
    ba62:	bls.w	bba4 <_malloc_r+0x150>
    ba66:	bics.w	r5, r5, #7
    ba6a:	bmi.w	bbec <_malloc_r+0x198>
    ba6e:	cmp	r1, r5
    ba70:	bhi.w	bbec <_malloc_r+0x198>
    ba74:	bl	c258 <__malloc_lock>
    ba78:	cmp.w	r5, #504	; 0x1f8
    ba7c:	bcc.w	bfb8 <_malloc_r+0x564>
    ba80:	lsrs	r3, r5, #9
    ba82:	beq.w	bbfa <_malloc_r+0x1a6>
    ba86:	cmp	r3, #4
    ba88:	bhi.w	bd92 <_malloc_r+0x33e>
    ba8c:	lsrs	r0, r5, #6
    ba8e:	add.w	lr, r0, #57	; 0x39
    ba92:	mov.w	r3, lr, lsl #1
    ba96:	adds	r0, #56	; 0x38
    ba98:	ldr	r7, [pc, #784]	; (bdac <_malloc_r+0x358>)
    ba9a:	add.w	r3, r7, r3, lsl #2
    ba9e:	sub.w	r1, r3, #8
    baa2:	ldr	r4, [r3, #4]
    baa4:	cmp	r1, r4
    baa6:	bne.n	bab8 <_malloc_r+0x64>
    baa8:	b.n	bc04 <_malloc_r+0x1b0>
    baaa:	cmp	r2, #0
    baac:	bge.w	bc08 <_malloc_r+0x1b4>
    bab0:	ldr	r4, [r4, #12]
    bab2:	cmp	r1, r4
    bab4:	beq.w	bc04 <_malloc_r+0x1b0>
    bab8:	ldr	r3, [r4, #4]
    baba:	bic.w	r3, r3, #3
    babe:	subs	r2, r3, r5
    bac0:	cmp	r2, #15
    bac2:	ble.n	baaa <_malloc_r+0x56>
    bac4:	ldr	r1, [pc, #740]	; (bdac <_malloc_r+0x358>)
    bac6:	ldr	r4, [r7, #16]
    bac8:	add.w	lr, r1, #8
    bacc:	cmp	r4, lr
    bace:	beq.w	be38 <_malloc_r+0x3e4>
    bad2:	ldr	r3, [r4, #4]
    bad4:	bic.w	r3, r3, #3
    bad8:	subs	r2, r3, r5
    bada:	cmp	r2, #15
    badc:	bgt.w	be12 <_malloc_r+0x3be>
    bae0:	cmp	r2, #0
    bae2:	str.w	lr, [r1, #20]
    bae6:	str.w	lr, [r1, #16]
    baea:	bge.w	bc2a <_malloc_r+0x1d6>
    baee:	cmp.w	r3, #512	; 0x200
    baf2:	bcs.w	bdc4 <_malloc_r+0x370>
    baf6:	lsrs	r3, r3, #3
    baf8:	add.w	ip, r3, #1
    bafc:	movs	r2, #1
    bafe:	asrs	r3, r3, #2
    bb00:	lsl.w	r3, r2, r3
    bb04:	ldr	r2, [r1, #4]
    bb06:	ldr.w	r8, [r1, ip, lsl #3]
    bb0a:	str.w	r8, [r4, #8]
    bb0e:	add.w	r9, r1, ip, lsl #3
    bb12:	orrs	r2, r3
    bb14:	sub.w	r3, r9, #8
    bb18:	str	r3, [r4, #12]
    bb1a:	str	r2, [r1, #4]
    bb1c:	str.w	r4, [r1, ip, lsl #3]
    bb20:	str.w	r4, [r8, #12]
    bb24:	asrs	r3, r0, #2
    bb26:	movs	r4, #1
    bb28:	lsls	r4, r3
    bb2a:	cmp	r4, r2
    bb2c:	bhi.w	bc44 <_malloc_r+0x1f0>
    bb30:	tst	r4, r2
    bb32:	bne.n	bb42 <_malloc_r+0xee>
    bb34:	bic.w	r0, r0, #3
    bb38:	lsls	r4, r4, #1
    bb3a:	tst	r4, r2
    bb3c:	add.w	r0, r0, #4
    bb40:	beq.n	bb38 <_malloc_r+0xe4>
    bb42:	add.w	r9, r7, r0, lsl #3
    bb46:	mov	ip, r9
    bb48:	mov	r8, r0
    bb4a:	ldr.w	r1, [ip, #12]
    bb4e:	cmp	ip, r1
    bb50:	bne.n	bb62 <_malloc_r+0x10e>
    bb52:	b.n	be3c <_malloc_r+0x3e8>
    bb54:	cmp	r2, #0
    bb56:	bge.w	be5c <_malloc_r+0x408>
    bb5a:	ldr	r1, [r1, #12]
    bb5c:	cmp	ip, r1
    bb5e:	beq.w	be3c <_malloc_r+0x3e8>
    bb62:	ldr	r3, [r1, #4]
    bb64:	bic.w	r3, r3, #3
    bb68:	subs	r2, r3, r5
    bb6a:	cmp	r2, #15
    bb6c:	ble.n	bb54 <_malloc_r+0x100>
    bb6e:	mov	r4, r1
    bb70:	ldr.w	ip, [r1, #12]
    bb74:	ldr.w	r8, [r4, #8]!
    bb78:	adds	r3, r1, r5
    bb7a:	orr.w	r5, r5, #1
    bb7e:	str	r5, [r1, #4]
    bb80:	orr.w	r1, r2, #1
    bb84:	str.w	ip, [r8, #12]
    bb88:	mov	r0, r6
    bb8a:	str.w	r8, [ip, #8]
    bb8e:	str	r3, [r7, #20]
    bb90:	str	r3, [r7, #16]
    bb92:	str.w	lr, [r3, #12]
    bb96:	str.w	lr, [r3, #8]
    bb9a:	str	r1, [r3, #4]
    bb9c:	str	r2, [r3, r2]
    bb9e:	bl	c25c <__malloc_unlock>
    bba2:	b.n	bbe4 <_malloc_r+0x190>
    bba4:	cmp	r1, #16
    bba6:	bhi.n	bbec <_malloc_r+0x198>
    bba8:	bl	c258 <__malloc_lock>
    bbac:	movs	r5, #16
    bbae:	movs	r3, #6
    bbb0:	movs	r0, #2
    bbb2:	ldr	r7, [pc, #504]	; (bdac <_malloc_r+0x358>)
    bbb4:	add.w	r3, r7, r3, lsl #2
    bbb8:	sub.w	r2, r3, #8
    bbbc:	ldr	r4, [r3, #4]
    bbbe:	cmp	r4, r2
    bbc0:	beq.w	be4e <_malloc_r+0x3fa>
    bbc4:	ldr	r3, [r4, #4]
    bbc6:	ldr	r1, [r4, #12]
    bbc8:	ldr	r5, [r4, #8]
    bbca:	bic.w	r3, r3, #3
    bbce:	add	r3, r4
    bbd0:	mov	r0, r6
    bbd2:	ldr	r2, [r3, #4]
    bbd4:	str	r1, [r5, #12]
    bbd6:	orr.w	r2, r2, #1
    bbda:	str	r5, [r1, #8]
    bbdc:	str	r2, [r3, #4]
    bbde:	bl	c25c <__malloc_unlock>
    bbe2:	adds	r4, #8
    bbe4:	mov	r0, r4
    bbe6:	add	sp, #12
    bbe8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbec:	movs	r4, #0
    bbee:	movs	r3, #12
    bbf0:	mov	r0, r4
    bbf2:	str	r3, [r6, #0]
    bbf4:	add	sp, #12
    bbf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbfa:	movs	r3, #128	; 0x80
    bbfc:	mov.w	lr, #64	; 0x40
    bc00:	movs	r0, #63	; 0x3f
    bc02:	b.n	ba98 <_malloc_r+0x44>
    bc04:	mov	r0, lr
    bc06:	b.n	bac4 <_malloc_r+0x70>
    bc08:	add	r3, r4
    bc0a:	ldr	r1, [r4, #12]
    bc0c:	ldr	r2, [r3, #4]
    bc0e:	ldr	r5, [r4, #8]
    bc10:	orr.w	r2, r2, #1
    bc14:	str	r1, [r5, #12]
    bc16:	mov	r0, r6
    bc18:	str	r5, [r1, #8]
    bc1a:	str	r2, [r3, #4]
    bc1c:	bl	c25c <__malloc_unlock>
    bc20:	adds	r4, #8
    bc22:	mov	r0, r4
    bc24:	add	sp, #12
    bc26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc2a:	add	r3, r4
    bc2c:	mov	r0, r6
    bc2e:	ldr	r2, [r3, #4]
    bc30:	orr.w	r2, r2, #1
    bc34:	str	r2, [r3, #4]
    bc36:	bl	c25c <__malloc_unlock>
    bc3a:	adds	r4, #8
    bc3c:	mov	r0, r4
    bc3e:	add	sp, #12
    bc40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc44:	ldr	r4, [r7, #8]
    bc46:	ldr	r3, [r4, #4]
    bc48:	bic.w	r8, r3, #3
    bc4c:	cmp	r8, r5
    bc4e:	bcc.n	bc5a <_malloc_r+0x206>
    bc50:	rsb	r3, r5, r8
    bc54:	cmp	r3, #15
    bc56:	bgt.w	bd72 <_malloc_r+0x31e>
    bc5a:	ldr	r3, [pc, #340]	; (bdb0 <_malloc_r+0x35c>)
    bc5c:	ldr.w	r9, [pc, #352]	; bdc0 <_malloc_r+0x36c>
    bc60:	ldr	r2, [r3, #0]
    bc62:	ldr.w	r3, [r9]
    bc66:	adds	r3, #1
    bc68:	add	r2, r5
    bc6a:	add.w	sl, r4, r8
    bc6e:	beq.w	bf32 <_malloc_r+0x4de>
    bc72:	add.w	r2, r2, #4096	; 0x1000
    bc76:	adds	r2, #15
    bc78:	bic.w	r2, r2, #4080	; 0xff0
    bc7c:	bic.w	r2, r2, #15
    bc80:	mov	r1, r2
    bc82:	mov	r0, r6
    bc84:	str	r2, [sp, #4]
    bc86:	bl	c640 <_sbrk_r>
    bc8a:	cmp.w	r0, #4294967295
    bc8e:	mov	fp, r0
    bc90:	ldr	r2, [sp, #4]
    bc92:	beq.w	bf46 <_malloc_r+0x4f2>
    bc96:	cmp	sl, r0
    bc98:	bhi.w	be94 <_malloc_r+0x440>
    bc9c:	ldr	r3, [pc, #276]	; (bdb4 <_malloc_r+0x360>)
    bc9e:	ldr	r1, [r3, #0]
    bca0:	cmp	sl, fp
    bca2:	add	r1, r2
    bca4:	str	r1, [r3, #0]
    bca6:	beq.w	bf50 <_malloc_r+0x4fc>
    bcaa:	ldr.w	r0, [r9]
    bcae:	ldr.w	lr, [pc, #272]	; bdc0 <_malloc_r+0x36c>
    bcb2:	adds	r0, #1
    bcb4:	ittet	ne
    bcb6:	rsbne	sl, sl, fp
    bcba:	addne	r1, sl
    bcbc:	streq.w	fp, [lr]
    bcc0:	strne	r1, [r3, #0]
    bcc2:	ands.w	r1, fp, #7
    bcc6:	beq.w	bef8 <_malloc_r+0x4a4>
    bcca:	rsb	r0, r1, #8
    bcce:	rsb	r1, r1, #4096	; 0x1000
    bcd2:	add	fp, r0
    bcd4:	adds	r1, #8
    bcd6:	add	r2, fp
    bcd8:	ubfx	r2, r2, #0, #12
    bcdc:	rsb	r9, r2, r1
    bce0:	mov	r1, r9
    bce2:	mov	r0, r6
    bce4:	str	r3, [sp, #4]
    bce6:	bl	c640 <_sbrk_r>
    bcea:	adds	r3, r0, #1
    bcec:	ldr	r3, [sp, #4]
    bcee:	beq.w	bf70 <_malloc_r+0x51c>
    bcf2:	rsb	r2, fp, r0
    bcf6:	add	r2, r9
    bcf8:	orr.w	r2, r2, #1
    bcfc:	ldr	r1, [r3, #0]
    bcfe:	str.w	fp, [r7, #8]
    bd02:	add	r1, r9
    bd04:	cmp	r4, r7
    bd06:	str.w	r2, [fp, #4]
    bd0a:	str	r1, [r3, #0]
    bd0c:	ldr.w	r9, [pc, #164]	; bdb4 <_malloc_r+0x360>
    bd10:	beq.n	bd40 <_malloc_r+0x2ec>
    bd12:	cmp.w	r8, #15
    bd16:	bls.w	bf14 <_malloc_r+0x4c0>
    bd1a:	ldr	r2, [r4, #4]
    bd1c:	sub.w	r3, r8, #12
    bd20:	bic.w	r3, r3, #7
    bd24:	adds	r0, r4, r3
    bd26:	and.w	r2, r2, #1
    bd2a:	mov.w	lr, #5
    bd2e:	orrs	r2, r3
    bd30:	cmp	r3, #15
    bd32:	str	r2, [r4, #4]
    bd34:	str.w	lr, [r0, #4]
    bd38:	str.w	lr, [r0, #8]
    bd3c:	bhi.w	bf78 <_malloc_r+0x524>
    bd40:	ldr	r3, [pc, #116]	; (bdb8 <_malloc_r+0x364>)
    bd42:	ldr	r4, [r7, #8]
    bd44:	ldr	r2, [r3, #0]
    bd46:	cmp	r1, r2
    bd48:	it	hi
    bd4a:	strhi	r1, [r3, #0]
    bd4c:	ldr	r3, [pc, #108]	; (bdbc <_malloc_r+0x368>)
    bd4e:	ldr	r2, [r3, #0]
    bd50:	cmp	r1, r2
    bd52:	ldr	r2, [r4, #4]
    bd54:	it	hi
    bd56:	strhi	r1, [r3, #0]
    bd58:	bic.w	r2, r2, #3
    bd5c:	cmp	r5, r2
    bd5e:	sub.w	r3, r2, r5
    bd62:	bhi.n	bd68 <_malloc_r+0x314>
    bd64:	cmp	r3, #15
    bd66:	bgt.n	bd72 <_malloc_r+0x31e>
    bd68:	mov	r0, r6
    bd6a:	bl	c25c <__malloc_unlock>
    bd6e:	movs	r4, #0
    bd70:	b.n	bbe4 <_malloc_r+0x190>
    bd72:	adds	r2, r4, r5
    bd74:	orr.w	r3, r3, #1
    bd78:	orr.w	r5, r5, #1
    bd7c:	str	r5, [r4, #4]
    bd7e:	mov	r0, r6
    bd80:	str	r2, [r7, #8]
    bd82:	str	r3, [r2, #4]
    bd84:	bl	c25c <__malloc_unlock>
    bd88:	adds	r4, #8
    bd8a:	mov	r0, r4
    bd8c:	add	sp, #12
    bd8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd92:	cmp	r3, #20
    bd94:	bls.n	be7a <_malloc_r+0x426>
    bd96:	cmp	r3, #84	; 0x54
    bd98:	bhi.w	bee4 <_malloc_r+0x490>
    bd9c:	lsrs	r0, r5, #12
    bd9e:	add.w	lr, r0, #111	; 0x6f
    bda2:	mov.w	r3, lr, lsl #1
    bda6:	adds	r0, #110	; 0x6e
    bda8:	b.n	ba98 <_malloc_r+0x44>
    bdaa:	nop
    bdac:	.word	0x20013f38
    bdb0:	.word	0x20019c34
    bdb4:	.word	0x20019c38
    bdb8:	.word	0x20019c30
    bdbc:	.word	0x20019c2c
    bdc0:	.word	0x20014344
    bdc4:	lsrs	r2, r3, #9
    bdc6:	cmp	r2, #4
    bdc8:	bls.n	be88 <_malloc_r+0x434>
    bdca:	cmp	r2, #20
    bdcc:	bhi.w	bf36 <_malloc_r+0x4e2>
    bdd0:	add.w	r1, r2, #92	; 0x5c
    bdd4:	lsls	r1, r1, #1
    bdd6:	adds	r2, #91	; 0x5b
    bdd8:	add.w	ip, r7, r1, lsl #2
    bddc:	ldr.w	r1, [r7, r1, lsl #2]
    bde0:	ldr.w	r8, [pc, #476]	; bfc0 <_malloc_r+0x56c>
    bde4:	sub.w	ip, ip, #8
    bde8:	cmp	ip, r1
    bdea:	beq.w	befe <_malloc_r+0x4aa>
    bdee:	ldr	r2, [r1, #4]
    bdf0:	bic.w	r2, r2, #3
    bdf4:	cmp	r3, r2
    bdf6:	bcs.n	bdfe <_malloc_r+0x3aa>
    bdf8:	ldr	r1, [r1, #8]
    bdfa:	cmp	ip, r1
    bdfc:	bne.n	bdee <_malloc_r+0x39a>
    bdfe:	ldr.w	ip, [r1, #12]
    be02:	ldr	r2, [r7, #4]
    be04:	str.w	ip, [r4, #12]
    be08:	str	r1, [r4, #8]
    be0a:	str.w	r4, [ip, #8]
    be0e:	str	r4, [r1, #12]
    be10:	b.n	bb24 <_malloc_r+0xd0>
    be12:	adds	r3, r4, r5
    be14:	orr.w	r7, r2, #1
    be18:	orr.w	r5, r5, #1
    be1c:	str	r5, [r4, #4]
    be1e:	mov	r0, r6
    be20:	str	r3, [r1, #20]
    be22:	str	r3, [r1, #16]
    be24:	str.w	lr, [r3, #12]
    be28:	str.w	lr, [r3, #8]
    be2c:	str	r7, [r3, #4]
    be2e:	str	r2, [r3, r2]
    be30:	adds	r4, #8
    be32:	bl	c25c <__malloc_unlock>
    be36:	b.n	bbe4 <_malloc_r+0x190>
    be38:	ldr	r2, [r1, #4]
    be3a:	b.n	bb24 <_malloc_r+0xd0>
    be3c:	add.w	r8, r8, #1
    be40:	tst.w	r8, #3
    be44:	add.w	ip, ip, #8
    be48:	bne.w	bb4a <_malloc_r+0xf6>
    be4c:	b.n	beb0 <_malloc_r+0x45c>
    be4e:	ldr	r4, [r3, #12]
    be50:	cmp	r3, r4
    be52:	it	eq
    be54:	addeq	r0, #2
    be56:	beq.w	bac4 <_malloc_r+0x70>
    be5a:	b.n	bbc4 <_malloc_r+0x170>
    be5c:	add	r3, r1
    be5e:	mov	r4, r1
    be60:	ldr	r2, [r3, #4]
    be62:	ldr	r1, [r1, #12]
    be64:	ldr.w	r5, [r4, #8]!
    be68:	orr.w	r2, r2, #1
    be6c:	str	r2, [r3, #4]
    be6e:	mov	r0, r6
    be70:	str	r1, [r5, #12]
    be72:	str	r5, [r1, #8]
    be74:	bl	c25c <__malloc_unlock>
    be78:	b.n	bbe4 <_malloc_r+0x190>
    be7a:	add.w	lr, r3, #92	; 0x5c
    be7e:	add.w	r0, r3, #91	; 0x5b
    be82:	mov.w	r3, lr, lsl #1
    be86:	b.n	ba98 <_malloc_r+0x44>
    be88:	lsrs	r2, r3, #6
    be8a:	add.w	r1, r2, #57	; 0x39
    be8e:	lsls	r1, r1, #1
    be90:	adds	r2, #56	; 0x38
    be92:	b.n	bdd8 <_malloc_r+0x384>
    be94:	cmp	r4, r7
    be96:	ldr	r3, [pc, #296]	; (bfc0 <_malloc_r+0x56c>)
    be98:	beq.w	bc9c <_malloc_r+0x248>
    be9c:	ldr	r4, [r3, #8]
    be9e:	ldr	r2, [r4, #4]
    bea0:	bic.w	r2, r2, #3
    bea4:	b.n	bd5c <_malloc_r+0x308>
    bea6:	ldr.w	r3, [r9], #-8
    beaa:	cmp	r9, r3
    beac:	bne.w	bfb4 <_malloc_r+0x560>
    beb0:	tst.w	r0, #3
    beb4:	add.w	r0, r0, #4294967295
    beb8:	bne.n	bea6 <_malloc_r+0x452>
    beba:	ldr	r3, [r7, #4]
    bebc:	bic.w	r3, r3, r4
    bec0:	str	r3, [r7, #4]
    bec2:	lsls	r4, r4, #1
    bec4:	cmp	r4, r3
    bec6:	bhi.w	bc44 <_malloc_r+0x1f0>
    beca:	cmp	r4, #0
    becc:	beq.w	bc44 <_malloc_r+0x1f0>
    bed0:	tst	r4, r3
    bed2:	mov	r0, r8
    bed4:	bne.w	bb42 <_malloc_r+0xee>
    bed8:	lsls	r4, r4, #1
    beda:	tst	r4, r3
    bedc:	add.w	r0, r0, #4
    bee0:	beq.n	bed8 <_malloc_r+0x484>
    bee2:	b.n	bb42 <_malloc_r+0xee>
    bee4:	cmp.w	r3, #340	; 0x154
    bee8:	bhi.n	bf1c <_malloc_r+0x4c8>
    beea:	lsrs	r0, r5, #15
    beec:	add.w	lr, r0, #120	; 0x78
    bef0:	mov.w	r3, lr, lsl #1
    bef4:	adds	r0, #119	; 0x77
    bef6:	b.n	ba98 <_malloc_r+0x44>
    bef8:	mov.w	r1, #4096	; 0x1000
    befc:	b.n	bcd6 <_malloc_r+0x282>
    befe:	movs	r1, #1
    bf00:	ldr.w	r3, [r8, #4]
    bf04:	asrs	r2, r2, #2
    bf06:	lsl.w	r2, r1, r2
    bf0a:	orrs	r2, r3
    bf0c:	str.w	r2, [r8, #4]
    bf10:	mov	r1, ip
    bf12:	b.n	be04 <_malloc_r+0x3b0>
    bf14:	movs	r3, #1
    bf16:	str.w	r3, [fp, #4]
    bf1a:	b.n	bd68 <_malloc_r+0x314>
    bf1c:	movw	r2, #1364	; 0x554
    bf20:	cmp	r3, r2
    bf22:	bhi.n	bf66 <_malloc_r+0x512>
    bf24:	lsrs	r0, r5, #18
    bf26:	add.w	lr, r0, #125	; 0x7d
    bf2a:	mov.w	r3, lr, lsl #1
    bf2e:	adds	r0, #124	; 0x7c
    bf30:	b.n	ba98 <_malloc_r+0x44>
    bf32:	adds	r2, #16
    bf34:	b.n	bc80 <_malloc_r+0x22c>
    bf36:	cmp	r2, #84	; 0x54
    bf38:	bhi.n	bf88 <_malloc_r+0x534>
    bf3a:	lsrs	r2, r3, #12
    bf3c:	add.w	r1, r2, #111	; 0x6f
    bf40:	lsls	r1, r1, #1
    bf42:	adds	r2, #110	; 0x6e
    bf44:	b.n	bdd8 <_malloc_r+0x384>
    bf46:	ldr	r4, [r7, #8]
    bf48:	ldr	r2, [r4, #4]
    bf4a:	bic.w	r2, r2, #3
    bf4e:	b.n	bd5c <_malloc_r+0x308>
    bf50:	ubfx	r0, sl, #0, #12
    bf54:	cmp	r0, #0
    bf56:	bne.w	bcaa <_malloc_r+0x256>
    bf5a:	add	r2, r8
    bf5c:	ldr	r3, [r7, #8]
    bf5e:	orr.w	r2, r2, #1
    bf62:	str	r2, [r3, #4]
    bf64:	b.n	bd40 <_malloc_r+0x2ec>
    bf66:	movs	r3, #254	; 0xfe
    bf68:	mov.w	lr, #127	; 0x7f
    bf6c:	movs	r0, #126	; 0x7e
    bf6e:	b.n	ba98 <_malloc_r+0x44>
    bf70:	movs	r2, #1
    bf72:	mov.w	r9, #0
    bf76:	b.n	bcfc <_malloc_r+0x2a8>
    bf78:	add.w	r1, r4, #8
    bf7c:	mov	r0, r6
    bf7e:	bl	111d0 <_free_r>
    bf82:	ldr.w	r1, [r9]
    bf86:	b.n	bd40 <_malloc_r+0x2ec>
    bf88:	cmp.w	r2, #340	; 0x154
    bf8c:	bhi.n	bf9a <_malloc_r+0x546>
    bf8e:	lsrs	r2, r3, #15
    bf90:	add.w	r1, r2, #120	; 0x78
    bf94:	lsls	r1, r1, #1
    bf96:	adds	r2, #119	; 0x77
    bf98:	b.n	bdd8 <_malloc_r+0x384>
    bf9a:	movw	r1, #1364	; 0x554
    bf9e:	cmp	r2, r1
    bfa0:	bhi.n	bfae <_malloc_r+0x55a>
    bfa2:	lsrs	r2, r3, #18
    bfa4:	add.w	r1, r2, #125	; 0x7d
    bfa8:	lsls	r1, r1, #1
    bfaa:	adds	r2, #124	; 0x7c
    bfac:	b.n	bdd8 <_malloc_r+0x384>
    bfae:	movs	r1, #254	; 0xfe
    bfb0:	movs	r2, #126	; 0x7e
    bfb2:	b.n	bdd8 <_malloc_r+0x384>
    bfb4:	ldr	r3, [r7, #4]
    bfb6:	b.n	bec2 <_malloc_r+0x46e>
    bfb8:	lsrs	r0, r5, #3
    bfba:	adds	r3, r0, #1
    bfbc:	lsls	r3, r3, #1
    bfbe:	b.n	bbb2 <_malloc_r+0x15e>
    bfc0:	.word	0x20013f38

0000bfc4 <__ascii_mbtowc>:
    bfc4:	sub	sp, #8
    bfc6:	cbz	r1, bfdc <__ascii_mbtowc+0x18>
    bfc8:	cbz	r2, bfe2 <__ascii_mbtowc+0x1e>
    bfca:	cbz	r3, bfe8 <__ascii_mbtowc+0x24>
    bfcc:	ldrb	r3, [r2, #0]
    bfce:	str	r3, [r1, #0]
    bfd0:	ldrb	r2, [r2, #0]
    bfd2:	adds	r0, r2, #0
    bfd4:	it	ne
    bfd6:	movne	r0, #1
    bfd8:	add	sp, #8
    bfda:	bx	lr
    bfdc:	add	r1, sp, #4
    bfde:	cmp	r2, #0
    bfe0:	bne.n	bfca <__ascii_mbtowc+0x6>
    bfe2:	mov	r0, r2
    bfe4:	add	sp, #8
    bfe6:	bx	lr
    bfe8:	mvn.w	r0, #1
    bfec:	b.n	bfd8 <__ascii_mbtowc+0x14>
    bfee:	nop

0000bff0 <memchr>:
    bff0:	and.w	r1, r1, #255	; 0xff
    bff4:	cmp	r2, #16
    bff6:	blt.n	c050 <memchr+0x60>
    bff8:	tst.w	r0, #7
    bffc:	beq.n	c010 <memchr+0x20>
    bffe:	ldrb.w	r3, [r0], #1
    c002:	subs	r2, #1
    c004:	cmp	r3, r1
    c006:	beq.n	c064 <memchr+0x74>
    c008:	tst.w	r0, #7
    c00c:	cbz	r2, c060 <memchr+0x70>
    c00e:	bne.n	bffe <memchr+0xe>
    c010:	push	{r4, r5, r6, r7}
    c012:	orr.w	r1, r1, r1, lsl #8
    c016:	orr.w	r1, r1, r1, lsl #16
    c01a:	bic.w	r4, r2, #7
    c01e:	mvns.w	r7, #0
    c022:	movs	r3, #0
    c024:	ldrd	r5, r6, [r0], #8
    c028:	subs	r4, #8
    c02a:	eor.w	r5, r5, r1
    c02e:	eor.w	r6, r6, r1
    c032:	uadd8	r5, r5, r7
    c036:	sel	r5, r3, r7
    c03a:	uadd8	r6, r6, r7
    c03e:	sel	r6, r5, r7
    c042:	cbnz	r6, c068 <memchr+0x78>
    c044:	bne.n	c024 <memchr+0x34>
    c046:	pop	{r4, r5, r6, r7}
    c048:	and.w	r1, r1, #255	; 0xff
    c04c:	and.w	r2, r2, #7
    c050:	cbz	r2, c060 <memchr+0x70>
    c052:	ldrb.w	r3, [r0], #1
    c056:	subs	r2, #1
    c058:	eor.w	r3, r3, r1
    c05c:	cbz	r3, c064 <memchr+0x74>
    c05e:	bne.n	c052 <memchr+0x62>
    c060:	movs	r0, #0
    c062:	bx	lr
    c064:	subs	r0, #1
    c066:	bx	lr
    c068:	cmp	r5, #0
    c06a:	itte	eq
    c06c:	moveq	r5, r6
    c06e:	subeq	r0, #3
    c070:	subne	r0, #7
    c072:	tst.w	r5, #1
    c076:	bne.n	c088 <memchr+0x98>
    c078:	adds	r0, #1
    c07a:	tst.w	r5, #256	; 0x100
    c07e:	ittt	eq
    c080:	addeq	r0, #1
    c082:	tsteq.w	r5, #98304	; 0x18000
    c086:	addeq	r0, #1
    c088:	pop	{r4, r5, r6, r7}
    c08a:	subs	r0, #1
    c08c:	bx	lr
    c08e:	nop

0000c090 <memcmp>:
    c090:	cmp	r2, #3
    c092:	push	{r4, r5, r6}
    c094:	bls.n	c0e4 <memcmp+0x54>
    c096:	orr.w	r3, r0, r1
    c09a:	lsls	r3, r3, #30
    c09c:	beq.n	c0c2 <memcmp+0x32>
    c09e:	ldrb	r4, [r0, #0]
    c0a0:	ldrb	r5, [r1, #0]
    c0a2:	cmp	r4, r5
    c0a4:	bne.n	c0ec <memcmp+0x5c>
    c0a6:	add	r2, r0
    c0a8:	adds	r3, r0, #1
    c0aa:	b.n	c0b8 <memcmp+0x28>
    c0ac:	ldrb.w	r4, [r3], #1
    c0b0:	ldrb.w	r5, [r1, #1]!
    c0b4:	cmp	r4, r5
    c0b6:	bne.n	c0ec <memcmp+0x5c>
    c0b8:	cmp	r3, r2
    c0ba:	bne.n	c0ac <memcmp+0x1c>
    c0bc:	movs	r0, #0
    c0be:	pop	{r4, r5, r6}
    c0c0:	bx	lr
    c0c2:	mov	r4, r1
    c0c4:	mov	r3, r0
    c0c6:	ldr	r6, [r3, #0]
    c0c8:	ldr	r5, [r4, #0]
    c0ca:	cmp	r6, r5
    c0cc:	mov	r0, r3
    c0ce:	mov	r1, r4
    c0d0:	add.w	r3, r3, #4
    c0d4:	add.w	r4, r4, #4
    c0d8:	bne.n	c09e <memcmp+0xe>
    c0da:	subs	r2, #4
    c0dc:	cmp	r2, #3
    c0de:	mov	r0, r3
    c0e0:	mov	r1, r4
    c0e2:	bhi.n	c0c6 <memcmp+0x36>
    c0e4:	cmp	r2, #0
    c0e6:	bne.n	c09e <memcmp+0xe>
    c0e8:	mov	r0, r2
    c0ea:	b.n	c0be <memcmp+0x2e>
    c0ec:	subs	r0, r4, r5
    c0ee:	pop	{r4, r5, r6}
    c0f0:	bx	lr
    c0f2:	nop

0000c0f4 <memmove>:
    c0f4:	cmp	r0, r1
    c0f6:	push	{r4, r5, r6, r7, lr}
    c0f8:	bls.n	c116 <memmove+0x22>
    c0fa:	adds	r3, r1, r2
    c0fc:	cmp	r0, r3
    c0fe:	bcs.n	c116 <memmove+0x22>
    c100:	adds	r1, r0, r2
    c102:	cmp	r2, #0
    c104:	beq.n	c1aa <memmove+0xb6>
    c106:	subs	r2, r3, r2
    c108:	ldrb.w	r4, [r3, #-1]!
    c10c:	strb.w	r4, [r1, #-1]!
    c110:	cmp	r3, r2
    c112:	bne.n	c108 <memmove+0x14>
    c114:	pop	{r4, r5, r6, r7, pc}
    c116:	cmp	r2, #15
    c118:	bls.n	c1ac <memmove+0xb8>
    c11a:	orr.w	r3, r1, r0
    c11e:	lsls	r3, r3, #30
    c120:	bne.n	c1b0 <memmove+0xbc>
    c122:	add.w	r4, r0, #16
    c126:	add.w	r3, r1, #16
    c12a:	mov	r5, r2
    c12c:	ldr.w	r6, [r3, #-16]
    c130:	str.w	r6, [r4, #-16]
    c134:	ldr.w	r6, [r3, #-12]
    c138:	str.w	r6, [r4, #-12]
    c13c:	ldr.w	r6, [r3, #-8]
    c140:	str.w	r6, [r4, #-8]
    c144:	subs	r5, #16
    c146:	ldr.w	r6, [r3, #-4]
    c14a:	str.w	r6, [r4, #-4]
    c14e:	cmp	r5, #15
    c150:	add.w	r3, r3, #16
    c154:	add.w	r4, r4, #16
    c158:	bhi.n	c12c <memmove+0x38>
    c15a:	sub.w	r3, r2, #16
    c15e:	bic.w	r3, r3, #15
    c162:	and.w	lr, r2, #15
    c166:	adds	r3, #16
    c168:	cmp.w	lr, #3
    c16c:	add	r1, r3
    c16e:	add	r3, r0
    c170:	bls.n	c1b6 <memmove+0xc2>
    c172:	subs	r6, r3, #4
    c174:	mov	r5, r1
    c176:	mov	r4, lr
    c178:	subs	r4, #4
    c17a:	ldr.w	r7, [r5], #4
    c17e:	str.w	r7, [r6, #4]!
    c182:	cmp	r4, #3
    c184:	bhi.n	c178 <memmove+0x84>
    c186:	sub.w	r4, lr, #4
    c18a:	bic.w	r4, r4, #3
    c18e:	adds	r4, #4
    c190:	add	r3, r4
    c192:	add	r1, r4
    c194:	and.w	r2, r2, #3
    c198:	cbz	r2, c1b4 <memmove+0xc0>
    c19a:	subs	r3, #1
    c19c:	add	r2, r1
    c19e:	ldrb.w	r4, [r1], #1
    c1a2:	strb.w	r4, [r3, #1]!
    c1a6:	cmp	r2, r1
    c1a8:	bne.n	c19e <memmove+0xaa>
    c1aa:	pop	{r4, r5, r6, r7, pc}
    c1ac:	mov	r3, r0
    c1ae:	b.n	c198 <memmove+0xa4>
    c1b0:	mov	r3, r0
    c1b2:	b.n	c19a <memmove+0xa6>
    c1b4:	pop	{r4, r5, r6, r7, pc}
    c1b6:	mov	r2, lr
    c1b8:	b.n	c198 <memmove+0xa4>
    c1ba:	nop

0000c1bc <memset>:
    c1bc:	push	{r4, r5, r6}
    c1be:	lsls	r4, r0, #30
    c1c0:	beq.n	c250 <memset+0x94>
    c1c2:	subs	r4, r2, #1
    c1c4:	cmp	r2, #0
    c1c6:	beq.n	c24c <memset+0x90>
    c1c8:	uxtb	r5, r1
    c1ca:	mov	r3, r0
    c1cc:	b.n	c1d4 <memset+0x18>
    c1ce:	subs	r2, r4, #1
    c1d0:	cbz	r4, c24c <memset+0x90>
    c1d2:	mov	r4, r2
    c1d4:	strb.w	r5, [r3], #1
    c1d8:	lsls	r2, r3, #30
    c1da:	bne.n	c1ce <memset+0x12>
    c1dc:	cmp	r4, #3
    c1de:	bls.n	c23e <memset+0x82>
    c1e0:	uxtb	r5, r1
    c1e2:	orr.w	r5, r5, r5, lsl #8
    c1e6:	cmp	r4, #15
    c1e8:	orr.w	r5, r5, r5, lsl #16
    c1ec:	bls.n	c222 <memset+0x66>
    c1ee:	add.w	r2, r3, #16
    c1f2:	mov	r6, r4
    c1f4:	subs	r6, #16
    c1f6:	cmp	r6, #15
    c1f8:	str.w	r5, [r2, #-16]
    c1fc:	str.w	r5, [r2, #-12]
    c200:	str.w	r5, [r2, #-8]
    c204:	str.w	r5, [r2, #-4]
    c208:	add.w	r2, r2, #16
    c20c:	bhi.n	c1f4 <memset+0x38>
    c20e:	sub.w	r2, r4, #16
    c212:	bic.w	r2, r2, #15
    c216:	and.w	r4, r4, #15
    c21a:	adds	r2, #16
    c21c:	cmp	r4, #3
    c21e:	add	r3, r2
    c220:	bls.n	c23e <memset+0x82>
    c222:	mov	r6, r3
    c224:	mov	r2, r4
    c226:	subs	r2, #4
    c228:	cmp	r2, #3
    c22a:	str.w	r5, [r6], #4
    c22e:	bhi.n	c226 <memset+0x6a>
    c230:	subs	r2, r4, #4
    c232:	bic.w	r2, r2, #3
    c236:	adds	r2, #4
    c238:	add	r3, r2
    c23a:	and.w	r4, r4, #3
    c23e:	cbz	r4, c24c <memset+0x90>
    c240:	uxtb	r1, r1
    c242:	add	r4, r3
    c244:	strb.w	r1, [r3], #1
    c248:	cmp	r3, r4
    c24a:	bne.n	c244 <memset+0x88>
    c24c:	pop	{r4, r5, r6}
    c24e:	bx	lr
    c250:	mov	r4, r2
    c252:	mov	r3, r0
    c254:	b.n	c1dc <memset+0x20>
    c256:	nop

0000c258 <__malloc_lock>:
    c258:	bx	lr
    c25a:	nop

0000c25c <__malloc_unlock>:
    c25c:	bx	lr
    c25e:	nop

0000c260 <_realloc_r>:
    c260:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c264:	mov	r7, r2
    c266:	sub	sp, #12
    c268:	cmp	r1, #0
    c26a:	beq.w	c3f0 <_realloc_r+0x190>
    c26e:	mov	r6, r1
    c270:	mov	r9, r0
    c272:	add.w	r5, r7, #11
    c276:	bl	c258 <__malloc_lock>
    c27a:	ldr.w	lr, [r6, #-4]
    c27e:	cmp	r5, #22
    c280:	bic.w	r4, lr, #3
    c284:	sub.w	r8, r6, #8
    c288:	bhi.n	c30c <_realloc_r+0xac>
    c28a:	movs	r2, #16
    c28c:	mov	r5, r2
    c28e:	cmp	r7, r5
    c290:	bhi.n	c316 <_realloc_r+0xb6>
    c292:	cmp	r4, r2
    c294:	bge.n	c382 <_realloc_r+0x122>
    c296:	ldr	r3, [pc, #804]	; (c5bc <_realloc_r+0x35c>)
    c298:	ldr	r1, [r3, #8]
    c29a:	add.w	r0, r8, r4
    c29e:	cmp	r0, r1
    c2a0:	ldr	r1, [r0, #4]
    c2a2:	beq.w	c458 <_realloc_r+0x1f8>
    c2a6:	bic.w	r3, r1, #1
    c2aa:	add	r3, r0
    c2ac:	ldr	r3, [r3, #4]
    c2ae:	lsls	r3, r3, #31
    c2b0:	bpl.n	c3ae <_realloc_r+0x14e>
    c2b2:	tst.w	lr, #1
    c2b6:	beq.n	c324 <_realloc_r+0xc4>
    c2b8:	mov	r1, r7
    c2ba:	mov	r0, r9
    c2bc:	bl	ba54 <_malloc_r>
    c2c0:	mov	r7, r0
    c2c2:	cbz	r0, c2fe <_realloc_r+0x9e>
    c2c4:	ldr.w	r3, [r6, #-4]
    c2c8:	bic.w	r3, r3, #1
    c2cc:	add	r3, r8
    c2ce:	sub.w	r2, r0, #8
    c2d2:	cmp	r2, r3
    c2d4:	beq.w	c560 <_realloc_r+0x300>
    c2d8:	subs	r2, r4, #4
    c2da:	cmp	r2, #36	; 0x24
    c2dc:	bhi.w	c542 <_realloc_r+0x2e2>
    c2e0:	cmp	r2, #19
    c2e2:	bhi.w	c4ee <_realloc_r+0x28e>
    c2e6:	mov	r3, r0
    c2e8:	mov	r2, r6
    c2ea:	ldr	r1, [r2, #0]
    c2ec:	str	r1, [r3, #0]
    c2ee:	ldr	r1, [r2, #4]
    c2f0:	str	r1, [r3, #4]
    c2f2:	ldr	r2, [r2, #8]
    c2f4:	str	r2, [r3, #8]
    c2f6:	mov	r1, r6
    c2f8:	mov	r0, r9
    c2fa:	bl	111d0 <_free_r>
    c2fe:	mov	r0, r9
    c300:	bl	c25c <__malloc_unlock>
    c304:	mov	r0, r7
    c306:	add	sp, #12
    c308:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30c:	bic.w	r5, r5, #7
    c310:	cmp	r5, #0
    c312:	mov	r2, r5
    c314:	bge.n	c28e <_realloc_r+0x2e>
    c316:	movs	r3, #12
    c318:	movs	r0, #0
    c31a:	str.w	r3, [r9]
    c31e:	add	sp, #12
    c320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c324:	ldr.w	r3, [r6, #-8]
    c328:	rsb	sl, r3, r8
    c32c:	ldr.w	r3, [sl, #4]
    c330:	bic.w	ip, r3, #3
    c334:	add.w	r3, r4, ip
    c338:	cmp	r3, r2
    c33a:	blt.n	c2b8 <_realloc_r+0x58>
    c33c:	mov	r7, sl
    c33e:	ldr.w	r1, [sl, #12]
    c342:	ldr.w	r0, [r7, #8]!
    c346:	subs	r2, r4, #4
    c348:	cmp	r2, #36	; 0x24
    c34a:	str	r1, [r0, #12]
    c34c:	str	r0, [r1, #8]
    c34e:	bhi.w	c580 <_realloc_r+0x320>
    c352:	cmp	r2, #19
    c354:	bls.w	c57c <_realloc_r+0x31c>
    c358:	ldr	r1, [r6, #0]
    c35a:	str.w	r1, [sl, #8]
    c35e:	ldr	r1, [r6, #4]
    c360:	str.w	r1, [sl, #12]
    c364:	cmp	r2, #27
    c366:	bhi.w	c5c0 <_realloc_r+0x360>
    c36a:	adds	r6, #8
    c36c:	add.w	r2, sl, #16
    c370:	ldr	r1, [r6, #0]
    c372:	str	r1, [r2, #0]
    c374:	ldr	r1, [r6, #4]
    c376:	str	r1, [r2, #4]
    c378:	ldr	r1, [r6, #8]
    c37a:	str	r1, [r2, #8]
    c37c:	mov	r6, r7
    c37e:	mov	r4, r3
    c380:	mov	r8, sl
    c382:	subs	r3, r4, r5
    c384:	cmp	r3, #15
    c386:	bhi.n	c3c4 <_realloc_r+0x164>
    c388:	ldr.w	r3, [r8, #4]
    c38c:	and.w	r3, r3, #1
    c390:	orrs	r3, r4
    c392:	add	r4, r8
    c394:	str.w	r3, [r8, #4]
    c398:	ldr	r3, [r4, #4]
    c39a:	orr.w	r3, r3, #1
    c39e:	str	r3, [r4, #4]
    c3a0:	mov	r0, r9
    c3a2:	bl	c25c <__malloc_unlock>
    c3a6:	mov	r0, r6
    c3a8:	add	sp, #12
    c3aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3ae:	bic.w	r1, r1, #3
    c3b2:	add	r1, r4
    c3b4:	cmp	r1, r2
    c3b6:	blt.n	c3fc <_realloc_r+0x19c>
    c3b8:	ldr	r3, [r0, #12]
    c3ba:	ldr	r2, [r0, #8]
    c3bc:	mov	r4, r1
    c3be:	str	r3, [r2, #12]
    c3c0:	str	r2, [r3, #8]
    c3c2:	b.n	c382 <_realloc_r+0x122>
    c3c4:	ldr.w	r2, [r8, #4]
    c3c8:	add.w	r1, r8, r5
    c3cc:	and.w	r2, r2, #1
    c3d0:	orrs	r5, r2
    c3d2:	orr.w	r2, r3, #1
    c3d6:	add	r3, r1
    c3d8:	str.w	r5, [r8, #4]
    c3dc:	str	r2, [r1, #4]
    c3de:	ldr	r2, [r3, #4]
    c3e0:	orr.w	r2, r2, #1
    c3e4:	adds	r1, #8
    c3e6:	str	r2, [r3, #4]
    c3e8:	mov	r0, r9
    c3ea:	bl	111d0 <_free_r>
    c3ee:	b.n	c3a0 <_realloc_r+0x140>
    c3f0:	mov	r1, r2
    c3f2:	add	sp, #12
    c3f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3f8:	b.w	ba54 <_malloc_r>
    c3fc:	tst.w	lr, #1
    c400:	bne.w	c2b8 <_realloc_r+0x58>
    c404:	ldr.w	r3, [r6, #-8]
    c408:	rsb	sl, r3, r8
    c40c:	ldr.w	r3, [sl, #4]
    c410:	bic.w	ip, r3, #3
    c414:	add.w	lr, r1, ip
    c418:	cmp	lr, r2
    c41a:	blt.n	c334 <_realloc_r+0xd4>
    c41c:	ldr	r3, [r0, #12]
    c41e:	ldr	r2, [r0, #8]
    c420:	mov	r7, sl
    c422:	str	r3, [r2, #12]
    c424:	str	r2, [r3, #8]
    c426:	ldr.w	r1, [r7, #8]!
    c42a:	ldr.w	r3, [sl, #12]
    c42e:	str	r3, [r1, #12]
    c430:	subs	r2, r4, #4
    c432:	cmp	r2, #36	; 0x24
    c434:	str	r1, [r3, #8]
    c436:	bhi.w	c56c <_realloc_r+0x30c>
    c43a:	cmp	r2, #19
    c43c:	bls.n	c504 <_realloc_r+0x2a4>
    c43e:	ldr	r3, [r6, #0]
    c440:	str.w	r3, [sl, #8]
    c444:	ldr	r3, [r6, #4]
    c446:	str.w	r3, [sl, #12]
    c44a:	cmp	r2, #27
    c44c:	bhi.w	c590 <_realloc_r+0x330>
    c450:	adds	r6, #8
    c452:	add.w	r3, sl, #16
    c456:	b.n	c506 <_realloc_r+0x2a6>
    c458:	bic.w	fp, r1, #3
    c45c:	add	fp, r4
    c45e:	add.w	r0, r5, #16
    c462:	cmp	fp, r0
    c464:	bge.n	c51a <_realloc_r+0x2ba>
    c466:	tst.w	lr, #1
    c46a:	bne.w	c2b8 <_realloc_r+0x58>
    c46e:	ldr.w	r1, [r6, #-8]
    c472:	rsb	sl, r1, r8
    c476:	ldr.w	r1, [sl, #4]
    c47a:	bic.w	ip, r1, #3
    c47e:	add	fp, ip
    c480:	cmp	r0, fp
    c482:	bgt.w	c334 <_realloc_r+0xd4>
    c486:	mov	r7, sl
    c488:	ldr.w	r1, [sl, #12]
    c48c:	ldr.w	r0, [r7, #8]!
    c490:	subs	r2, r4, #4
    c492:	cmp	r2, #36	; 0x24
    c494:	str	r1, [r0, #12]
    c496:	str	r0, [r1, #8]
    c498:	bhi.w	c604 <_realloc_r+0x3a4>
    c49c:	cmp	r2, #19
    c49e:	bls.w	c5ec <_realloc_r+0x38c>
    c4a2:	ldr	r1, [r6, #0]
    c4a4:	str.w	r1, [sl, #8]
    c4a8:	ldr	r1, [r6, #4]
    c4aa:	str.w	r1, [sl, #12]
    c4ae:	cmp	r2, #27
    c4b0:	bhi.w	c612 <_realloc_r+0x3b2>
    c4b4:	adds	r6, #8
    c4b6:	add.w	r2, sl, #16
    c4ba:	ldr	r1, [r6, #0]
    c4bc:	str	r1, [r2, #0]
    c4be:	ldr	r1, [r6, #4]
    c4c0:	str	r1, [r2, #4]
    c4c2:	ldr	r1, [r6, #8]
    c4c4:	str	r1, [r2, #8]
    c4c6:	add.w	r1, sl, r5
    c4ca:	rsb	r2, r5, fp
    c4ce:	orr.w	r2, r2, #1
    c4d2:	str	r1, [r3, #8]
    c4d4:	str	r2, [r1, #4]
    c4d6:	ldr.w	r3, [sl, #4]
    c4da:	and.w	r3, r3, #1
    c4de:	orrs	r5, r3
    c4e0:	mov	r0, r9
    c4e2:	str.w	r5, [sl, #4]
    c4e6:	bl	c25c <__malloc_unlock>
    c4ea:	mov	r0, r7
    c4ec:	b.n	c3a8 <_realloc_r+0x148>
    c4ee:	ldr	r3, [r6, #0]
    c4f0:	str	r3, [r0, #0]
    c4f2:	ldr	r3, [r6, #4]
    c4f4:	str	r3, [r0, #4]
    c4f6:	cmp	r2, #27
    c4f8:	bhi.n	c54a <_realloc_r+0x2ea>
    c4fa:	add.w	r3, r0, #8
    c4fe:	add.w	r2, r6, #8
    c502:	b.n	c2ea <_realloc_r+0x8a>
    c504:	mov	r3, r7
    c506:	ldr	r2, [r6, #0]
    c508:	str	r2, [r3, #0]
    c50a:	ldr	r2, [r6, #4]
    c50c:	str	r2, [r3, #4]
    c50e:	ldr	r2, [r6, #8]
    c510:	str	r2, [r3, #8]
    c512:	mov	r6, r7
    c514:	mov	r4, lr
    c516:	mov	r8, sl
    c518:	b.n	c382 <_realloc_r+0x122>
    c51a:	add.w	r1, r8, r5
    c51e:	rsb	fp, r5, fp
    c522:	orr.w	r2, fp, #1
    c526:	str	r1, [r3, #8]
    c528:	str	r2, [r1, #4]
    c52a:	ldr.w	r3, [r6, #-4]
    c52e:	and.w	r3, r3, #1
    c532:	orrs	r5, r3
    c534:	mov	r0, r9
    c536:	str.w	r5, [r6, #-4]
    c53a:	bl	c25c <__malloc_unlock>
    c53e:	mov	r0, r6
    c540:	b.n	c3a8 <_realloc_r+0x148>
    c542:	mov	r1, r6
    c544:	bl	c0f4 <memmove>
    c548:	b.n	c2f6 <_realloc_r+0x96>
    c54a:	ldr	r3, [r6, #8]
    c54c:	str	r3, [r0, #8]
    c54e:	ldr	r3, [r6, #12]
    c550:	str	r3, [r0, #12]
    c552:	cmp	r2, #36	; 0x24
    c554:	beq.n	c5a8 <_realloc_r+0x348>
    c556:	add.w	r3, r0, #16
    c55a:	add.w	r2, r6, #16
    c55e:	b.n	c2ea <_realloc_r+0x8a>
    c560:	ldr.w	r3, [r0, #-4]
    c564:	bic.w	r3, r3, #3
    c568:	add	r4, r3
    c56a:	b.n	c382 <_realloc_r+0x122>
    c56c:	mov	r1, r6
    c56e:	mov	r0, r7
    c570:	mov	r4, lr
    c572:	mov	r8, sl
    c574:	bl	c0f4 <memmove>
    c578:	mov	r6, r7
    c57a:	b.n	c382 <_realloc_r+0x122>
    c57c:	mov	r2, r7
    c57e:	b.n	c370 <_realloc_r+0x110>
    c580:	mov	r1, r6
    c582:	mov	r0, r7
    c584:	mov	r4, r3
    c586:	mov	r8, sl
    c588:	bl	c0f4 <memmove>
    c58c:	mov	r6, r7
    c58e:	b.n	c382 <_realloc_r+0x122>
    c590:	ldr	r3, [r6, #8]
    c592:	str.w	r3, [sl, #16]
    c596:	ldr	r3, [r6, #12]
    c598:	str.w	r3, [sl, #20]
    c59c:	cmp	r2, #36	; 0x24
    c59e:	beq.n	c5d8 <_realloc_r+0x378>
    c5a0:	adds	r6, #16
    c5a2:	add.w	r3, sl, #24
    c5a6:	b.n	c506 <_realloc_r+0x2a6>
    c5a8:	ldr	r3, [r6, #16]
    c5aa:	str	r3, [r0, #16]
    c5ac:	ldr	r3, [r6, #20]
    c5ae:	str	r3, [r0, #20]
    c5b0:	add.w	r2, r6, #24
    c5b4:	add.w	r3, r0, #24
    c5b8:	b.n	c2ea <_realloc_r+0x8a>
    c5ba:	nop
    c5bc:	.word	0x20013f38
    c5c0:	ldr	r1, [r6, #8]
    c5c2:	str.w	r1, [sl, #16]
    c5c6:	ldr	r1, [r6, #12]
    c5c8:	str.w	r1, [sl, #20]
    c5cc:	cmp	r2, #36	; 0x24
    c5ce:	beq.n	c5f0 <_realloc_r+0x390>
    c5d0:	adds	r6, #16
    c5d2:	add.w	r2, sl, #24
    c5d6:	b.n	c370 <_realloc_r+0x110>
    c5d8:	ldr	r3, [r6, #16]
    c5da:	str.w	r3, [sl, #24]
    c5de:	ldr	r3, [r6, #20]
    c5e0:	str.w	r3, [sl, #28]
    c5e4:	adds	r6, #24
    c5e6:	add.w	r3, sl, #32
    c5ea:	b.n	c506 <_realloc_r+0x2a6>
    c5ec:	mov	r2, r7
    c5ee:	b.n	c4ba <_realloc_r+0x25a>
    c5f0:	ldr	r2, [r6, #16]
    c5f2:	str.w	r2, [sl, #24]
    c5f6:	ldr	r2, [r6, #20]
    c5f8:	str.w	r2, [sl, #28]
    c5fc:	adds	r6, #24
    c5fe:	add.w	r2, sl, #32
    c602:	b.n	c370 <_realloc_r+0x110>
    c604:	mov	r1, r6
    c606:	mov	r0, r7
    c608:	str	r3, [sp, #4]
    c60a:	bl	c0f4 <memmove>
    c60e:	ldr	r3, [sp, #4]
    c610:	b.n	c4c6 <_realloc_r+0x266>
    c612:	ldr	r1, [r6, #8]
    c614:	str.w	r1, [sl, #16]
    c618:	ldr	r1, [r6, #12]
    c61a:	str.w	r1, [sl, #20]
    c61e:	cmp	r2, #36	; 0x24
    c620:	beq.n	c62a <_realloc_r+0x3ca>
    c622:	adds	r6, #16
    c624:	add.w	r2, sl, #24
    c628:	b.n	c4ba <_realloc_r+0x25a>
    c62a:	ldr	r2, [r6, #16]
    c62c:	str.w	r2, [sl, #24]
    c630:	ldr	r2, [r6, #20]
    c632:	str.w	r2, [sl, #28]
    c636:	adds	r6, #24
    c638:	add.w	r2, sl, #32
    c63c:	b.n	c4ba <_realloc_r+0x25a>
    c63e:	nop

0000c640 <_sbrk_r>:
    c640:	push	{r3, r4, r5, lr}
    c642:	ldr	r4, [pc, #28]	; (c660 <_sbrk_r+0x20>)
    c644:	movs	r3, #0
    c646:	mov	r5, r0
    c648:	mov	r0, r1
    c64a:	str	r3, [r4, #0]
    c64c:	bl	9260 <_sbrk>
    c650:	adds	r3, r0, #1
    c652:	beq.n	c656 <_sbrk_r+0x16>
    c654:	pop	{r3, r4, r5, pc}
    c656:	ldr	r3, [r4, #0]
    c658:	cmp	r3, #0
    c65a:	beq.n	c654 <_sbrk_r+0x14>
    c65c:	str	r3, [r5, #0]
    c65e:	pop	{r3, r4, r5, pc}
    c660:	.word	0x20019c74

0000c664 <sprintf>:
    c664:	push	{r1, r2, r3}
    c666:	push	{r4, r5, r6, r7, lr}
    c668:	sub	sp, #112	; 0x70
    c66a:	add	r3, sp, #132	; 0x84
    c66c:	ldr	r1, [pc, #60]	; (c6ac <sprintf+0x48>)
    c66e:	ldr.w	r2, [r3], #4
    c672:	str	r3, [sp, #4]
    c674:	mov	r5, r0
    c676:	mvn.w	r4, #2147483648	; 0x80000000
    c67a:	ldr	r0, [r1, #0]
    c67c:	str	r5, [sp, #8]
    c67e:	mov.w	r7, #520	; 0x208
    c682:	movw	r6, #65535	; 0xffff
    c686:	add	r1, sp, #8
    c688:	str	r5, [sp, #24]
    c68a:	strh.w	r7, [sp, #20]
    c68e:	str	r4, [sp, #16]
    c690:	str	r4, [sp, #28]
    c692:	strh.w	r6, [sp, #22]
    c696:	bl	dad0 <_svfprintf_r>
    c69a:	ldr	r3, [sp, #8]
    c69c:	movs	r2, #0
    c69e:	strb	r2, [r3, #0]
    c6a0:	add	sp, #112	; 0x70
    c6a2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c6a6:	add	sp, #12
    c6a8:	bx	lr
    c6aa:	nop
    c6ac:	.word	0x20013dc8

0000c6b0 <sscanf>:
    c6b0:	push	{r1, r2, r3}
    c6b2:	push	{r4, r5, r6, r7, lr}
    c6b4:	sub	sp, #112	; 0x70
    c6b6:	add	r4, sp, #132	; 0x84
    c6b8:	mov.w	r2, #516	; 0x204
    c6bc:	ldr.w	r6, [r4], #4
    c6c0:	strh.w	r2, [sp, #20]
    c6c4:	str	r0, [sp, #8]
    c6c6:	str	r0, [sp, #24]
    c6c8:	bl	c8c0 <strlen>
    c6cc:	ldr	r3, [pc, #48]	; (c700 <sscanf+0x50>)
    c6ce:	str	r4, [sp, #4]
    c6d0:	mov	r5, r0
    c6d2:	mov	r2, r6
    c6d4:	ldr	r7, [pc, #44]	; (c704 <sscanf+0x54>)
    c6d6:	ldr	r0, [r3, #0]
    c6d8:	str	r5, [sp, #12]
    c6da:	mov	r3, r4
    c6dc:	movw	r6, #65535	; 0xffff
    c6e0:	movs	r4, #0
    c6e2:	add	r1, sp, #8
    c6e4:	str	r5, [sp, #28]
    c6e6:	str	r7, [sp, #40]	; 0x28
    c6e8:	str	r4, [sp, #56]	; 0x38
    c6ea:	str	r4, [sp, #76]	; 0x4c
    c6ec:	strh.w	r6, [sp, #22]
    c6f0:	bl	f1b4 <__ssvfscanf_r>
    c6f4:	add	sp, #112	; 0x70
    c6f6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c6fa:	add	sp, #12
    c6fc:	bx	lr
    c6fe:	nop
    c700:	.word	0x20013dc8
    c704:	.word	0x0000c709

0000c708 <__seofread>:
    c708:	movs	r0, #0
    c70a:	bx	lr

0000c70c <strchr>:
    c70c:	push	{r4, r5, r6}
    c70e:	ands.w	r4, r1, #255	; 0xff
    c712:	beq.n	c77e <strchr+0x72>
    c714:	lsls	r5, r0, #30
    c716:	beq.n	c738 <strchr+0x2c>
    c718:	ldrb	r3, [r0, #0]
    c71a:	cmp	r3, #0
    c71c:	beq.n	c7d4 <strchr+0xc8>
    c71e:	cmp	r4, r3
    c720:	beq.n	c77a <strchr+0x6e>
    c722:	adds	r3, r0, #1
    c724:	b.n	c732 <strchr+0x26>
    c726:	ldrb.w	r2, [r3], #1
    c72a:	cmp	r2, #0
    c72c:	beq.n	c7ce <strchr+0xc2>
    c72e:	cmp	r4, r2
    c730:	beq.n	c77a <strchr+0x6e>
    c732:	lsls	r2, r3, #30
    c734:	mov	r0, r3
    c736:	bne.n	c726 <strchr+0x1a>
    c738:	lsls	r6, r1, #8
    c73a:	and.w	r6, r6, #65280	; 0xff00
    c73e:	orrs	r6, r4
    c740:	ldr	r3, [r0, #0]
    c742:	orr.w	r6, r6, r6, lsl #16
    c746:	b.n	c74c <strchr+0x40>
    c748:	ldr.w	r3, [r0, #4]!
    c74c:	eor.w	r5, r6, r3
    c750:	sub.w	r2, r5, #16843009	; 0x1010101
    c754:	sub.w	r1, r3, #16843009	; 0x1010101
    c758:	bic.w	r2, r2, r5
    c75c:	bic.w	r3, r1, r3
    c760:	orrs	r3, r2
    c762:	tst.w	r3, #2155905152	; 0x80808080
    c766:	beq.n	c748 <strchr+0x3c>
    c768:	ldrb	r3, [r0, #0]
    c76a:	cbnz	r3, c776 <strchr+0x6a>
    c76c:	b.n	c7d4 <strchr+0xc8>
    c76e:	ldrb.w	r3, [r0, #1]!
    c772:	cmp	r3, #0
    c774:	beq.n	c7d4 <strchr+0xc8>
    c776:	cmp	r4, r3
    c778:	bne.n	c76e <strchr+0x62>
    c77a:	pop	{r4, r5, r6}
    c77c:	bx	lr
    c77e:	lsls	r4, r0, #30
    c780:	beq.n	c79a <strchr+0x8e>
    c782:	ldrb	r3, [r0, #0]
    c784:	cmp	r3, #0
    c786:	beq.n	c77a <strchr+0x6e>
    c788:	adds	r3, r0, #1
    c78a:	b.n	c794 <strchr+0x88>
    c78c:	ldrb	r2, [r0, #0]
    c78e:	adds	r3, #1
    c790:	cmp	r2, #0
    c792:	beq.n	c77a <strchr+0x6e>
    c794:	lsls	r1, r3, #30
    c796:	mov	r0, r3
    c798:	bne.n	c78c <strchr+0x80>
    c79a:	ldr	r2, [r0, #0]
    c79c:	sub.w	r3, r2, #16843009	; 0x1010101
    c7a0:	bic.w	r3, r3, r2
    c7a4:	tst.w	r3, #2155905152	; 0x80808080
    c7a8:	bne.n	c7bc <strchr+0xb0>
    c7aa:	ldr.w	r2, [r0, #4]!
    c7ae:	sub.w	r3, r2, #16843009	; 0x1010101
    c7b2:	bic.w	r3, r3, r2
    c7b6:	tst.w	r3, #2155905152	; 0x80808080
    c7ba:	beq.n	c7aa <strchr+0x9e>
    c7bc:	ldrb	r3, [r0, #0]
    c7be:	cmp	r3, #0
    c7c0:	beq.n	c77a <strchr+0x6e>
    c7c2:	ldrb.w	r3, [r0, #1]!
    c7c6:	cmp	r3, #0
    c7c8:	bne.n	c7c2 <strchr+0xb6>
    c7ca:	pop	{r4, r5, r6}
    c7cc:	bx	lr
    c7ce:	mov	r0, r2
    c7d0:	pop	{r4, r5, r6}
    c7d2:	bx	lr
    c7d4:	mov	r0, r3
    c7d6:	pop	{r4, r5, r6}
    c7d8:	bx	lr
    c7da:	nop

0000c7dc <strcpy>:
    c7dc:	eor.w	r2, r0, r1
    c7e0:	mov	ip, r0
    c7e2:	tst.w	r2, #3
    c7e6:	bne.n	c888 <strcpy+0xac>
    c7e8:	tst.w	r1, #3
    c7ec:	bne.n	c854 <strcpy+0x78>
    c7ee:	str.w	r4, [sp, #-4]!
    c7f2:	tst.w	r1, #4
    c7f6:	ldr.w	r3, [r1], #4
    c7fa:	beq.n	c814 <strcpy+0x38>
    c7fc:	sub.w	r2, r3, #16843009	; 0x1010101
    c800:	bics	r2, r3
    c802:	tst.w	r2, #2155905152	; 0x80808080
    c806:	itt	eq
    c808:	streq.w	r3, [ip], #4
    c80c:	ldreq.w	r3, [r1], #4
    c810:	bne.n	c840 <strcpy+0x64>
    c812:	nop
    c814:	ldr.w	r4, [r1], #4
    c818:	sub.w	r2, r3, #16843009	; 0x1010101
    c81c:	bics	r2, r3
    c81e:	tst.w	r2, #2155905152	; 0x80808080
    c822:	sub.w	r2, r4, #16843009	; 0x1010101
    c826:	bne.n	c840 <strcpy+0x64>
    c828:	str.w	r3, [ip], #4
    c82c:	bics	r2, r4
    c82e:	tst.w	r2, #2155905152	; 0x80808080
    c832:	itt	eq
    c834:	ldreq.w	r3, [r1], #4
    c838:	streq.w	r4, [ip], #4
    c83c:	beq.n	c814 <strcpy+0x38>
    c83e:	mov	r3, r4
    c840:	strb.w	r3, [ip], #1
    c844:	tst.w	r3, #255	; 0xff
    c848:	mov.w	r3, r3, ror #8
    c84c:	bne.n	c840 <strcpy+0x64>
    c84e:	ldr.w	r4, [sp], #4
    c852:	bx	lr
    c854:	tst.w	r1, #1
    c858:	beq.n	c868 <strcpy+0x8c>
    c85a:	ldrb.w	r2, [r1], #1
    c85e:	strb.w	r2, [ip], #1
    c862:	cmp	r2, #0
    c864:	it	eq
    c866:	bxeq	lr
    c868:	tst.w	r1, #2
    c86c:	beq.n	c7ee <strcpy+0x12>
    c86e:	ldrh.w	r2, [r1], #2
    c872:	tst.w	r2, #255	; 0xff
    c876:	itet	ne
    c878:	strhne.w	r2, [ip], #2
    c87c:	strbeq.w	r2, [ip]
    c880:	tstne.w	r2, #65280	; 0xff00
    c884:	bne.n	c7ee <strcpy+0x12>
    c886:	bx	lr
    c888:	ldrb.w	r2, [r1], #1
    c88c:	strb.w	r2, [ip], #1
    c890:	cmp	r2, #0
    c892:	bne.n	c888 <strcpy+0xac>
    c894:	bx	lr
    c896:	nop
    c898:			; <UNDEFINED> instruction: 0xffffffff
    c89c:			; <UNDEFINED> instruction: 0xffffffff
    c8a0:			; <UNDEFINED> instruction: 0xffffffff
    c8a4:			; <UNDEFINED> instruction: 0xffffffff
    c8a8:			; <UNDEFINED> instruction: 0xffffffff
    c8ac:			; <UNDEFINED> instruction: 0xffffffff
    c8b0:			; <UNDEFINED> instruction: 0xffffffff
    c8b4:			; <UNDEFINED> instruction: 0xffffffff
    c8b8:			; <UNDEFINED> instruction: 0xffffffff
    c8bc:			; <UNDEFINED> instruction: 0xffffffff

0000c8c0 <strlen>:
    c8c0:	pld	[r0]
    c8c4:	strd	r4, r5, [sp, #-8]!
    c8c8:	bic.w	r1, r0, #7
    c8cc:	mvn.w	ip, #0
    c8d0:	ands.w	r4, r0, #7
    c8d4:	pld	[r1, #32]
    c8d8:	bne.w	c96e <strlen+0xae>
    c8dc:	mov.w	r4, #0
    c8e0:	mvn.w	r0, #7
    c8e4:	ldrd	r2, r3, [r1]
    c8e8:	pld	[r1, #64]	; 0x40
    c8ec:	add.w	r0, r0, #8
    c8f0:	uadd8	r2, r2, ip
    c8f4:	sel	r2, r4, ip
    c8f8:	uadd8	r3, r3, ip
    c8fc:	sel	r3, r2, ip
    c900:	cbnz	r3, c956 <strlen+0x96>
    c902:	ldrd	r2, r3, [r1, #8]
    c906:	uadd8	r2, r2, ip
    c90a:	add.w	r0, r0, #8
    c90e:	sel	r2, r4, ip
    c912:	uadd8	r3, r3, ip
    c916:	sel	r3, r2, ip
    c91a:	cbnz	r3, c956 <strlen+0x96>
    c91c:	ldrd	r2, r3, [r1, #16]
    c920:	uadd8	r2, r2, ip
    c924:	add.w	r0, r0, #8
    c928:	sel	r2, r4, ip
    c92c:	uadd8	r3, r3, ip
    c930:	sel	r3, r2, ip
    c934:	cbnz	r3, c956 <strlen+0x96>
    c936:	ldrd	r2, r3, [r1, #24]
    c93a:	add.w	r1, r1, #32
    c93e:	uadd8	r2, r2, ip
    c942:	add.w	r0, r0, #8
    c946:	sel	r2, r4, ip
    c94a:	uadd8	r3, r3, ip
    c94e:	sel	r3, r2, ip
    c952:	cmp	r3, #0
    c954:	beq.n	c8e4 <strlen+0x24>
    c956:	cmp	r2, #0
    c958:	itt	eq
    c95a:	addeq	r0, #4
    c95c:	moveq	r2, r3
    c95e:	rev	r2, r2
    c960:	clz	r2, r2
    c964:	ldrd	r4, r5, [sp], #8
    c968:	add.w	r0, r0, r2, lsr #3
    c96c:	bx	lr
    c96e:	ldrd	r2, r3, [r1]
    c972:	and.w	r5, r4, #3
    c976:	rsb	r0, r4, #0
    c97a:	mov.w	r5, r5, lsl #3
    c97e:	tst.w	r4, #4
    c982:	pld	[r1, #64]	; 0x40
    c986:	lsl.w	r5, ip, r5
    c98a:	orn	r2, r2, r5
    c98e:	itt	ne
    c990:	ornne	r3, r3, r5
    c994:	movne	r2, ip
    c996:	mov.w	r4, #0
    c99a:	b.n	c8f0 <strlen+0x30>

0000c99c <strncmp>:
    c99c:	cmp	r2, #0
    c99e:	beq.n	ca24 <strncmp+0x88>
    c9a0:	orr.w	r3, r0, r1
    c9a4:	ands.w	r3, r3, #3
    c9a8:	push	{r4, r5, r6, r7}
    c9aa:	bne.n	c9f8 <strncmp+0x5c>
    c9ac:	cmp	r2, #3
    c9ae:	bls.n	c9f8 <strncmp+0x5c>
    c9b0:	ldr	r4, [r0, #0]
    c9b2:	ldr	r5, [r1, #0]
    c9b4:	cmp	r4, r5
    c9b6:	bne.n	c9f8 <strncmp+0x5c>
    c9b8:	subs	r2, #4
    c9ba:	beq.n	ca28 <strncmp+0x8c>
    c9bc:	sub.w	r5, r4, #16843009	; 0x1010101
    c9c0:	bic.w	r4, r5, r4
    c9c4:	tst.w	r4, #2155905152	; 0x80808080
    c9c8:	bne.n	ca2e <strncmp+0x92>
    c9ca:	adds	r7, r0, #4
    c9cc:	adds	r5, r1, #4
    c9ce:	b.n	c9ec <strncmp+0x50>
    c9d0:	ldr.w	r3, [r7], #4
    c9d4:	ldr	r6, [r1, #0]
    c9d6:	sub.w	r4, r3, #16843009	; 0x1010101
    c9da:	cmp	r3, r6
    c9dc:	bic.w	r4, r4, r3
    c9e0:	bne.n	c9f8 <strncmp+0x5c>
    c9e2:	subs	r2, #4
    c9e4:	beq.n	ca28 <strncmp+0x8c>
    c9e6:	tst.w	r4, #2155905152	; 0x80808080
    c9ea:	bne.n	ca34 <strncmp+0x98>
    c9ec:	cmp	r2, #3
    c9ee:	mov	r1, r5
    c9f0:	mov	r0, r7
    c9f2:	add.w	r5, r5, #4
    c9f6:	bhi.n	c9d0 <strncmp+0x34>
    c9f8:	ldrb	r3, [r0, #0]
    c9fa:	ldrb	r4, [r1, #0]
    c9fc:	cmp	r4, r3
    c9fe:	add.w	r2, r2, #4294967295
    ca02:	bne.n	ca1e <strncmp+0x82>
    ca04:	cbz	r2, ca28 <strncmp+0x8c>
    ca06:	cbnz	r4, ca0e <strncmp+0x72>
    ca08:	b.n	ca38 <strncmp+0x9c>
    ca0a:	cbz	r2, ca28 <strncmp+0x8c>
    ca0c:	cbz	r3, ca2e <strncmp+0x92>
    ca0e:	ldrb.w	r3, [r0, #1]!
    ca12:	ldrb.w	r4, [r1, #1]!
    ca16:	cmp	r3, r4
    ca18:	add.w	r2, r2, #4294967295
    ca1c:	beq.n	ca0a <strncmp+0x6e>
    ca1e:	subs	r0, r3, r4
    ca20:	pop	{r4, r5, r6, r7}
    ca22:	bx	lr
    ca24:	mov	r0, r2
    ca26:	bx	lr
    ca28:	mov	r0, r2
    ca2a:	pop	{r4, r5, r6, r7}
    ca2c:	bx	lr
    ca2e:	mov	r0, r3
    ca30:	pop	{r4, r5, r6, r7}
    ca32:	bx	lr
    ca34:	movs	r0, #0
    ca36:	b.n	ca20 <strncmp+0x84>
    ca38:	mov	r0, r4
    ca3a:	b.n	ca20 <strncmp+0x84>

0000ca3c <sulp>:
    ca3c:	push	{r4, r5, r6, lr}
    ca3e:	mov	r4, r0
    ca40:	mov	r5, r1
    ca42:	vmov	d0, r4, r5
    ca46:	mov	r6, r2
    ca48:	bl	121a0 <__ulp>
    ca4c:	vmov	r0, r1, d0
    ca50:	cbz	r6, ca72 <sulp+0x36>
    ca52:	ubfx	r3, r5, #20, #11
    ca56:	rsb	r3, r3, #107	; 0x6b
    ca5a:	cmp	r3, #0
    ca5c:	ble.n	ca72 <sulp+0x36>
    ca5e:	lsls	r3, r3, #20
    ca60:	add.w	r5, r3, #1069547520	; 0x3fc00000
    ca64:	movs	r4, #0
    ca66:	add.w	r5, r5, #3145728	; 0x300000
    ca6a:	mov	r2, r4
    ca6c:	mov	r3, r5
    ca6e:	bl	afd4 <__aeabi_dmul>
    ca72:	pop	{r4, r5, r6, pc}
    ca74:			; <UNDEFINED> instruction: 0xffffffff

0000ca78 <_strtod_l>:
    ca78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca7c:	mov	r5, r3
    ca7e:	sub	sp, #132	; 0x84
    ca80:	movs	r3, #0
    ca82:	mov	fp, r0
    ca84:	mov	r0, r5
    ca86:	mov	r6, r1
    ca88:	str	r2, [sp, #24]
    ca8a:	str	r3, [sp, #112]	; 0x70
    ca8c:	bl	11b24 <__localeconv_l>
    ca90:	movs	r4, #0
    ca92:	movs	r3, #0
    ca94:	mov	sl, r0
    ca96:	ldr	r0, [r0, #0]
    ca98:	strd	r3, r4, [sp, #16]
    ca9c:	bl	c8c0 <strlen>
    caa0:	str	r6, [sp, #108]	; 0x6c
    caa2:	mov	r9, r0
    caa4:	mov	r2, r6
    caa6:	mov	r4, r2
    caa8:	ldrb.w	r7, [r2], #1
    caac:	cmp	r7, #45	; 0x2d
    caae:	bhi.w	cc10 <_strtod_l+0x198>
    cab2:	tbb	[pc, r7]
    cab6:	.short	0xad17
    cab8:	.word	0xadadadad
    cabc:	.word	0x81adadad
    cac0:	.word	0x81818181
    cac4:	.word	0xadadadad
    cac8:	.word	0xadadadad
    cacc:	.word	0xadadadad
    cad0:	.word	0xadadadad
    cad4:	.word	0xad81adad
    cad8:	.word	0xadadadad
    cadc:	.word	0xadadadad
    cae0:	.word	0x7ead2bad
    cae4:	ldr	r3, [sp, #24]
    cae6:	mov.w	r8, #0
    caea:	mov.w	r9, #0
    caee:	cbz	r3, cb02 <_strtod_l+0x8a>
    caf0:	movs	r3, #0
    caf2:	str	r3, [sp, #28]
    caf4:	ldr	r3, [sp, #24]
    caf6:	str	r6, [r3, #0]
    caf8:	ldr	r3, [sp, #28]
    cafa:	cbz	r3, cb02 <_strtod_l+0x8a>
    cafc:	add.w	r3, r9, #2147483648	; 0x80000000
    cb00:	mov	r9, r3
    cb02:	vmov	d0, r8, r9
    cb06:	add	sp, #132	; 0x84
    cb08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb0c:	movs	r3, #0
    cb0e:	str	r3, [sp, #28]
    cb10:	adds	r2, r4, #1
    cb12:	str	r2, [sp, #108]	; 0x6c
    cb14:	ldrb	r7, [r4, #1]
    cb16:	cmp	r7, #0
    cb18:	beq.n	cae4 <_strtod_l+0x6c>
    cb1a:	cmp	r7, #48	; 0x30
    cb1c:	mov	r4, r2
    cb1e:	beq.n	cc18 <_strtod_l+0x1a0>
    cb20:	movs	r3, #0
    cb22:	str	r4, [sp, #32]
    cb24:	str	r3, [sp, #40]	; 0x28
    cb26:	sub.w	r3, r7, #48	; 0x30
    cb2a:	cmp	r3, #9
    cb2c:	bhi.w	d33e <_strtod_l+0x8c6>
    cb30:	mov.w	r8, #0
    cb34:	mov	r0, r4
    cb36:	mov	r5, r8
    cb38:	mov	r4, r8
    cb3a:	cmp	r4, #8
    cb3c:	it	gt
    cb3e:	addgt.w	r8, r8, r8, lsl #2
    cb42:	add.w	r3, r5, r5, lsl #2
    cb46:	add.w	r0, r0, #1
    cb4a:	add.w	r3, r7, r3, lsl #1
    cb4e:	str	r0, [sp, #108]	; 0x6c
    cb50:	itt	gt
    cb52:	addgt.w	r7, r7, r8, lsl #1
    cb56:	subgt.w	r8, r7, #48	; 0x30
    cb5a:	ldrb	r7, [r0, #0]
    cb5c:	it	le
    cb5e:	suble.w	r5, r3, #48	; 0x30
    cb62:	sub.w	r3, r7, #48	; 0x30
    cb66:	cmp	r3, #9
    cb68:	add.w	r4, r4, #1
    cb6c:	bls.n	cb3a <_strtod_l+0xc2>
    cb6e:	ldr.w	r1, [sl]
    cb72:	mov	r2, r9
    cb74:	bl	c99c <strncmp>
    cb78:	cbz	r0, cbbc <_strtod_l+0x144>
    cb7a:	movs	r0, #0
    cb7c:	mov	r3, r7
    cb7e:	mov	r9, r0
    cb80:	mov	r7, r0
    cb82:	mov	sl, r4
    cb84:	cmp	r3, #101	; 0x65
    cb86:	beq.w	ccee <_strtod_l+0x276>
    cb8a:	cmp	r3, #69	; 0x45
    cb8c:	beq.w	ccee <_strtod_l+0x276>
    cb90:	movs	r2, #0
    cb92:	cmp	r4, #0
    cb94:	bne.n	cc3c <_strtod_l+0x1c4>
    cb96:	cbnz	r0, cba0 <_strtod_l+0x128>
    cb98:	ldr	r2, [sp, #40]	; 0x28
    cb9a:	cmp	r2, #0
    cb9c:	beq.w	d142 <_strtod_l+0x6ca>
    cba0:	mov.w	r8, #0
    cba4:	mov.w	r9, #0
    cba8:	ldr	r3, [sp, #24]
    cbaa:	cmp	r3, #0
    cbac:	beq.n	caf8 <_strtod_l+0x80>
    cbae:	ldr	r6, [sp, #108]	; 0x6c
    cbb0:	b.n	caf4 <_strtod_l+0x7c>
    cbb2:	movs	r3, #1
    cbb4:	str	r3, [sp, #28]
    cbb6:	b.n	cb10 <_strtod_l+0x98>
    cbb8:	str	r2, [sp, #108]	; 0x6c
    cbba:	b.n	caa6 <_strtod_l+0x2e>
    cbbc:	ldr	r3, [sp, #108]	; 0x6c
    cbbe:	add.w	r2, r3, r9
    cbc2:	str	r2, [sp, #108]	; 0x6c
    cbc4:	ldrb.w	r3, [r3, r9]
    cbc8:	mov	r7, r0
    cbca:	mov	sl, r4
    cbcc:	sub.w	r2, r3, #48	; 0x30
    cbd0:	cmp	r2, #9
    cbd2:	bhi.w	d0c8 <_strtod_l+0x650>
    cbd6:	adds	r1, r0, #1
    cbd8:	mov	r3, r2
    cbda:	cmp	r2, #0
    cbdc:	beq.w	d91e <_strtod_l+0xea6>
    cbe0:	cmp	r1, #1
    cbe2:	add	r7, r1
    cbe4:	it	ne
    cbe6:	addne	r0, r0, r4
    cbe8:	bne.n	cbf6 <_strtod_l+0x17e>
    cbea:	b.w	d916 <_strtod_l+0xe9e>
    cbee:	lsls	r5, r1, #1
    cbf0:	cmp	r4, r0
    cbf2:	beq.w	d56c <_strtod_l+0xaf4>
    cbf6:	adds	r4, #1
    cbf8:	subs	r1, r4, #1
    cbfa:	cmp	r1, #8
    cbfc:	add.w	r1, r5, r5, lsl #2
    cc00:	ble.n	cbee <_strtod_l+0x176>
    cc02:	cmp	r4, #16
    cc04:	itt	le
    cc06:	addle.w	r8, r8, r8, lsl #2
    cc0a:	movle.w	r8, r8, lsl #1
    cc0e:	b.n	cbf0 <_strtod_l+0x178>
    cc10:	movs	r3, #0
    cc12:	cmp	r7, #48	; 0x30
    cc14:	str	r3, [sp, #28]
    cc16:	bne.n	cb20 <_strtod_l+0xa8>
    cc18:	ldrb	r3, [r4, #1]
    cc1a:	cmp	r3, #88	; 0x58
    cc1c:	beq.w	d306 <_strtod_l+0x88e>
    cc20:	cmp	r3, #120	; 0x78
    cc22:	beq.w	d306 <_strtod_l+0x88e>
    cc26:	adds	r4, #1
    cc28:	str	r4, [sp, #108]	; 0x6c
    cc2a:	ldrb	r7, [r4, #0]
    cc2c:	cmp	r7, #48	; 0x30
    cc2e:	beq.n	cc26 <_strtod_l+0x1ae>
    cc30:	cmp	r7, #0
    cc32:	beq.n	cba0 <_strtod_l+0x128>
    cc34:	movs	r3, #1
    cc36:	str	r4, [sp, #32]
    cc38:	str	r3, [sp, #40]	; 0x28
    cc3a:	b.n	cb26 <_strtod_l+0xae>
    cc3c:	cmp	r4, #16
    cc3e:	sub.w	r3, r2, r7
    cc42:	mov	r0, r5
    cc44:	mov	r9, r4
    cc46:	str	r3, [sp, #44]	; 0x2c
    cc48:	it	ge
    cc4a:	movge.w	r9, #16
    cc4e:	bl	aee8 <__aeabi_ui2d>
    cc52:	cmp.w	sl, #0
    cc56:	it	eq
    cc58:	moveq	sl, r4
    cc5a:	cmp.w	r9, #9
    cc5e:	strd	r0, r1, [sp, #16]
    cc62:	ble.n	cc8c <_strtod_l+0x214>
    cc64:	ldr	r3, [pc, #292]	; (cd8c <_strtod_l+0x314>)
    cc66:	add.w	r3, r3, r9, lsl #3
    cc6a:	ldrd	r2, r3, [r3, #-72]	; 0x48
    cc6e:	bl	afd4 <__aeabi_dmul>
    cc72:	mov	r6, r0
    cc74:	mov	r0, r8
    cc76:	mov	r7, r1
    cc78:	bl	aee8 <__aeabi_ui2d>
    cc7c:	mov	r2, r0
    cc7e:	mov	r3, r1
    cc80:	mov	r0, r6
    cc82:	mov	r1, r7
    cc84:	bl	ac70 <__adddf3>
    cc88:	strd	r0, r1, [sp, #16]
    cc8c:	cmp	r4, #15
    cc8e:	bgt.w	cd9c <_strtod_l+0x324>
    cc92:	ldr	r3, [sp, #44]	; 0x2c
    cc94:	cmp	r3, #0
    cc96:	beq.n	cce8 <_strtod_l+0x270>
    cc98:	ble.w	d6d4 <_strtod_l+0xc5c>
    cc9c:	ldr	r3, [sp, #44]	; 0x2c
    cc9e:	cmp	r3, #22
    cca0:	bgt.w	d5a0 <_strtod_l+0xb28>
    cca4:	ldr	r7, [pc, #228]	; (cd8c <_strtod_l+0x314>)
    cca6:	add.w	r7, r7, r3, lsl #3
    ccaa:	ldrd	r0, r1, [r7]
    ccae:	ldrd	r2, r3, [sp, #16]
    ccb2:	bl	afd4 <__aeabi_dmul>
    ccb6:	mov	r8, r0
    ccb8:	mov	r9, r1
    ccba:	b.n	cba8 <_strtod_l+0x130>
    ccbc:	add	r0, sp, #108	; 0x6c
    ccbe:	ldr	r1, [pc, #208]	; (cd90 <_strtod_l+0x318>)
    ccc0:	bl	11958 <__match>
    ccc4:	cmp	r0, #0
    ccc6:	beq.w	cae4 <_strtod_l+0x6c>
    ccca:	ldr	r3, [sp, #108]	; 0x6c
    cccc:	ldr	r1, [pc, #196]	; (cd94 <_strtod_l+0x31c>)
    ccce:	subs	r3, #1
    ccd0:	add	r0, sp, #108	; 0x6c
    ccd2:	str	r3, [sp, #108]	; 0x6c
    ccd4:	bl	11958 <__match>
    ccd8:	cbnz	r0, cce0 <_strtod_l+0x268>
    ccda:	ldr	r3, [sp, #108]	; 0x6c
    ccdc:	adds	r3, #1
    ccde:	str	r3, [sp, #108]	; 0x6c
    cce0:	ldr	r3, [pc, #180]	; (cd98 <_strtod_l+0x320>)
    cce2:	str	r3, [sp, #20]
    cce4:	movs	r3, #0
    cce6:	str	r3, [sp, #16]
    cce8:	ldrd	r8, r9, [sp, #16]
    ccec:	b.n	cba8 <_strtod_l+0x130>
    ccee:	cmp	r4, #0
    ccf0:	beq.w	d088 <_strtod_l+0x610>
    ccf4:	ldr	r6, [sp, #108]	; 0x6c
    ccf6:	adds	r3, r6, #1
    ccf8:	str	r3, [sp, #108]	; 0x6c
    ccfa:	ldrb	r3, [r6, #1]
    ccfc:	cmp	r3, #43	; 0x2b
    ccfe:	beq.w	d2bc <_strtod_l+0x844>
    cd02:	cmp	r3, #45	; 0x2d
    cd04:	beq.w	d132 <_strtod_l+0x6ba>
    cd08:	mov.w	ip, #0
    cd0c:	sub.w	r2, r3, #48	; 0x30
    cd10:	cmp	r2, #9
    cd12:	bhi.w	d2b6 <_strtod_l+0x83e>
    cd16:	cmp	r3, #48	; 0x30
    cd18:	bne.n	cd26 <_strtod_l+0x2ae>
    cd1a:	ldr	r2, [sp, #108]	; 0x6c
    cd1c:	adds	r2, #1
    cd1e:	str	r2, [sp, #108]	; 0x6c
    cd20:	ldrb	r3, [r2, #0]
    cd22:	cmp	r3, #48	; 0x30
    cd24:	beq.n	cd1c <_strtod_l+0x2a4>
    cd26:	sub.w	r2, r3, #49	; 0x31
    cd2a:	cmp	r2, #8
    cd2c:	bhi.w	cb90 <_strtod_l+0x118>
    cd30:	ldr	r2, [sp, #108]	; 0x6c
    cd32:	str	r2, [sp, #48]	; 0x30
    cd34:	adds	r1, r2, #1
    cd36:	subs	r3, #48	; 0x30
    cd38:	str	r1, [sp, #108]	; 0x6c
    cd3a:	str	r3, [sp, #44]	; 0x2c
    cd3c:	ldrb	r3, [r2, #1]
    cd3e:	sub.w	lr, r3, #48	; 0x30
    cd42:	cmp.w	lr, #9
    cd46:	bhi.n	cd68 <_strtod_l+0x2f0>
    cd48:	ldr	r2, [sp, #44]	; 0x2c
    cd4a:	adds	r1, #1
    cd4c:	str	r1, [sp, #108]	; 0x6c
    cd4e:	add.w	r2, r2, r2, lsl #2
    cd52:	add.w	r2, r3, r2, lsl #1
    cd56:	ldrb	r3, [r1, #0]
    cd58:	sub.w	lr, r3, #48	; 0x30
    cd5c:	cmp.w	lr, #9
    cd60:	sub.w	r2, r2, #48	; 0x30
    cd64:	bls.n	cd4a <_strtod_l+0x2d2>
    cd66:	str	r2, [sp, #44]	; 0x2c
    cd68:	ldr	r2, [sp, #48]	; 0x30
    cd6a:	subs	r1, r1, r2
    cd6c:	cmp	r1, #8
    cd6e:	bgt.w	d58e <_strtod_l+0xb16>
    cd72:	ldr	r2, [sp, #44]	; 0x2c
    cd74:	movw	r1, #19999	; 0x4e1f
    cd78:	cmp	r2, r1
    cd7a:	it	ge
    cd7c:	movge	r2, r1
    cd7e:	cmp.w	ip, #0
    cd82:	beq.w	cb92 <_strtod_l+0x11a>
    cd86:	negs	r2, r2
    cd88:	b.n	cb92 <_strtod_l+0x11a>
    cd8a:	nop
    cd8c:	.word	0x00013b80
    cd90:	.word	0x00013888
    cd94:	.word	0x0001388c
    cd98:	.word	0x7ff00000
    cd9c:	ldr	r3, [sp, #44]	; 0x2c
    cd9e:	rsb	r9, r9, r4
    cda2:	add	r9, r3
    cda4:	cmp.w	r9, #0
    cda8:	ble.w	d4ba <_strtod_l+0xa42>
    cdac:	ands.w	r1, r9, #15
    cdb0:	beq.n	cdc8 <_strtod_l+0x350>
    cdb2:	ldr	r3, [pc, #756]	; (d0a8 <_strtod_l+0x630>)
    cdb4:	add.w	r1, r3, r1, lsl #3
    cdb8:	ldrd	r0, r1, [r1]
    cdbc:	ldrd	r2, r3, [sp, #16]
    cdc0:	bl	afd4 <__aeabi_dmul>
    cdc4:	strd	r0, r1, [sp, #16]
    cdc8:	bics.w	r6, r9, #15
    cdcc:	bne.w	d1f0 <_strtod_l+0x778>
    cdd0:	movs	r3, #0
    cdd2:	str	r3, [sp, #40]	; 0x28
    cdd4:	str	r5, [sp, #0]
    cdd6:	mov	r3, r4
    cdd8:	mov	r2, sl
    cdda:	ldr	r1, [sp, #32]
    cddc:	mov	r0, fp
    cdde:	bl	11c80 <__s2b>
    cde2:	str	r0, [sp, #72]	; 0x48
    cde4:	cmp	r0, #0
    cde6:	beq.w	d436 <_strtod_l+0x9be>
    cdea:	ldr	r2, [sp, #44]	; 0x2c
    cdec:	movs	r7, #0
    cdee:	cmp	r2, #0
    cdf0:	rsb	r3, r2, #0
    cdf4:	it	ge
    cdf6:	movge	r3, r7
    cdf8:	str	r3, [sp, #48]	; 0x30
    cdfa:	bic.w	r3, r2, r2, asr #31
    cdfe:	str	r3, [sp, #44]	; 0x2c
    ce00:	mov	sl, r7
    ce02:	ldr	r4, [sp, #72]	; 0x48
    ce04:	mov	r0, fp
    ce06:	ldr	r1, [r4, #4]
    ce08:	bl	11ba0 <_Balloc>
    ce0c:	mov	r6, r0
    ce0e:	cmp	r0, #0
    ce10:	beq.w	d2c8 <_strtod_l+0x850>
    ce14:	ldr	r2, [r4, #16]
    ce16:	vldr	d7, [sp, #16]
    ce1a:	adds	r2, #2
    ce1c:	lsls	r2, r2, #2
    ce1e:	add.w	r1, r4, #12
    ce22:	adds	r0, #12
    ce24:	vstr	d7, [sp, #32]
    ce28:	bl	89a8 <memcpy>
    ce2c:	vldr	d0, [sp, #32]
    ce30:	add	r2, sp, #120	; 0x78
    ce32:	add	r1, sp, #116	; 0x74
    ce34:	mov	r0, fp
    ce36:	bl	122c4 <__d2b>
    ce3a:	str	r0, [sp, #112]	; 0x70
    ce3c:	cmp	r0, #0
    ce3e:	beq.w	d2ca <_strtod_l+0x852>
    ce42:	movs	r1, #1
    ce44:	mov	r0, fp
    ce46:	bl	11db4 <__i2b>
    ce4a:	mov	sl, r0
    ce4c:	cmp	r0, #0
    ce4e:	beq.w	d2c8 <_strtod_l+0x850>
    ce52:	ldr	r2, [sp, #116]	; 0x74
    ce54:	cmp	r2, #0
    ce56:	blt.w	d0c0 <_strtod_l+0x648>
    ce5a:	ldr	r3, [sp, #48]	; 0x30
    ce5c:	ldr	r4, [sp, #44]	; 0x2c
    ce5e:	adds	r5, r3, r2
    ce60:	ldr	r0, [sp, #40]	; 0x28
    ce62:	ldr	r3, [sp, #120]	; 0x78
    ce64:	ldr	r1, [pc, #580]	; (d0ac <_strtod_l+0x634>)
    ce66:	subs	r2, r2, r0
    ce68:	add	r2, r3
    ce6a:	subs	r2, #1
    ce6c:	cmp	r2, r1
    ce6e:	rsb	r3, r3, #54	; 0x36
    ce72:	bge.w	d052 <_strtod_l+0x5da>
    ce76:	subs	r1, r1, r2
    ce78:	cmp	r1, #31
    ce7a:	sub.w	r3, r3, r1
    ce7e:	bgt.w	d0ce <_strtod_l+0x656>
    ce82:	movs	r2, #1
    ce84:	lsls	r2, r1
    ce86:	str	r2, [sp, #56]	; 0x38
    ce88:	movs	r2, #0
    ce8a:	str	r2, [sp, #76]	; 0x4c
    ce8c:	add.w	r9, r5, r3
    ce90:	add	r4, r3
    ce92:	ldr	r3, [sp, #40]	; 0x28
    ce94:	cmp	r5, r9
    ce96:	mov	r2, r5
    ce98:	add	r4, r3
    ce9a:	it	ge
    ce9c:	movge	r2, r9
    ce9e:	cmp	r2, r4
    cea0:	it	ge
    cea2:	movge	r2, r4
    cea4:	cmp	r2, #0
    cea6:	ble.n	ceb0 <_strtod_l+0x438>
    cea8:	rsb	r9, r2, r9
    ceac:	subs	r4, r4, r2
    ceae:	subs	r5, r5, r2
    ceb0:	ldr	r3, [sp, #48]	; 0x30
    ceb2:	cbz	r3, cee4 <_strtod_l+0x46c>
    ceb4:	mov	r1, sl
    ceb6:	mov	r2, r3
    ceb8:	mov	r0, fp
    ceba:	bl	11ef8 <__pow5mult>
    cebe:	mov	sl, r0
    cec0:	cmp	r0, #0
    cec2:	beq.w	d2c8 <_strtod_l+0x850>
    cec6:	mov	r1, r0
    cec8:	ldr	r2, [sp, #112]	; 0x70
    ceca:	mov	r0, fp
    cecc:	bl	11dc8 <__multiply>
    ced0:	cmp	r0, #0
    ced2:	beq.w	d2c8 <_strtod_l+0x850>
    ced6:	str	r0, [sp, #52]	; 0x34
    ced8:	ldr	r1, [sp, #112]	; 0x70
    ceda:	mov	r0, fp
    cedc:	bl	11bec <_Bfree>
    cee0:	ldr	r2, [sp, #52]	; 0x34
    cee2:	str	r2, [sp, #112]	; 0x70
    cee4:	cmp.w	r9, #0
    cee8:	ble.n	cefc <_strtod_l+0x484>
    ceea:	mov	r2, r9
    ceec:	ldr	r1, [sp, #112]	; 0x70
    ceee:	mov	r0, fp
    cef0:	bl	11f98 <__lshift>
    cef4:	str	r0, [sp, #112]	; 0x70
    cef6:	cmp	r0, #0
    cef8:	beq.w	d2ca <_strtod_l+0x852>
    cefc:	ldr	r3, [sp, #44]	; 0x2c
    cefe:	cbz	r3, cf12 <_strtod_l+0x49a>
    cf00:	mov	r1, r6
    cf02:	ldr	r2, [sp, #44]	; 0x2c
    cf04:	mov	r0, fp
    cf06:	bl	11ef8 <__pow5mult>
    cf0a:	mov	r6, r0
    cf0c:	cmp	r0, #0
    cf0e:	beq.w	d2c8 <_strtod_l+0x850>
    cf12:	cmp	r4, #0
    cf14:	ble.n	cf28 <_strtod_l+0x4b0>
    cf16:	mov	r1, r6
    cf18:	mov	r2, r4
    cf1a:	mov	r0, fp
    cf1c:	bl	11f98 <__lshift>
    cf20:	mov	r6, r0
    cf22:	cmp	r0, #0
    cf24:	beq.w	d2c8 <_strtod_l+0x850>
    cf28:	cmp	r5, #0
    cf2a:	ble.n	cf3e <_strtod_l+0x4c6>
    cf2c:	mov	r1, sl
    cf2e:	mov	r2, r5
    cf30:	mov	r0, fp
    cf32:	bl	11f98 <__lshift>
    cf36:	mov	sl, r0
    cf38:	cmp	r0, #0
    cf3a:	beq.w	d2c8 <_strtod_l+0x850>
    cf3e:	mov	r2, r6
    cf40:	ldr	r1, [sp, #112]	; 0x70
    cf42:	mov	r0, fp
    cf44:	bl	1208c <__mdiff>
    cf48:	mov	r7, r0
    cf4a:	cmp	r0, #0
    cf4c:	beq.w	d2c8 <_strtod_l+0x850>
    cf50:	movs	r3, #0
    cf52:	ldr	r2, [r0, #12]
    cf54:	str	r3, [r0, #12]
    cf56:	mov	r1, sl
    cf58:	str	r2, [sp, #52]	; 0x34
    cf5a:	bl	12048 <__mcmp>
    cf5e:	cmp	r0, #0
    cf60:	blt.w	d77e <_strtod_l+0xd06>
    cf64:	beq.w	d6f8 <_strtod_l+0xc80>
    cf68:	mov	r1, sl
    cf6a:	mov	r0, r7
    cf6c:	bl	12380 <__ratio>
    cf70:	vmov	r4, r5, d0
    cf74:	movs	r2, #0
    cf76:	mov.w	r3, #1073741824	; 0x40000000
    cf7a:	vmov	r0, s0
    cf7e:	mov	r1, r5
    cf80:	bl	b4cc <__aeabi_dcmple>
    cf84:	cmp	r0, #0
    cf86:	beq.n	d05c <_strtod_l+0x5e4>
    cf88:	ldr	r3, [sp, #52]	; 0x34
    cf8a:	cmp	r3, #0
    cf8c:	beq.w	d0de <_strtod_l+0x666>
    cf90:	vldr	d7, [pc, #260]	; d098 <_strtod_l+0x620>
    cf94:	ldr	r3, [sp, #20]
    cf96:	ldr	r5, [pc, #280]	; (d0b0 <_strtod_l+0x638>)
    cf98:	vstr	d7, [sp, #56]	; 0x38
    cf9c:	movs	r4, #0
    cf9e:	mov	r8, r3
    cfa0:	ldr.w	r9, [pc, #276]	; d0b8 <_strtod_l+0x640>
    cfa4:	ldr	r3, [pc, #268]	; (d0b4 <_strtod_l+0x63c>)
    cfa6:	and.w	r9, r8, r9
    cfaa:	cmp	r9, r3
    cfac:	beq.w	d3dc <_strtod_l+0x964>
    cfb0:	ldr	r3, [sp, #40]	; 0x28
    cfb2:	cbz	r3, d000 <_strtod_l+0x588>
    cfb4:	cmp.w	r9, #111149056	; 0x6a00000
    cfb8:	bhi.n	d000 <_strtod_l+0x588>
    cfba:	add	r3, pc, #228	; (adr r3, d0a0 <_strtod_l+0x628>)
    cfbc:	ldrd	r2, r3, [r3]
    cfc0:	ldrd	r0, r1, [sp, #56]	; 0x38
    cfc4:	bl	b4cc <__aeabi_dcmple>
    cfc8:	cbz	r0, cff8 <_strtod_l+0x580>
    cfca:	ldrd	r0, r1, [sp, #56]	; 0x38
    cfce:	bl	b584 <__aeabi_d2uiz>
    cfd2:	cmp	r0, #0
    cfd4:	beq.w	d658 <_strtod_l+0xbe0>
    cfd8:	bl	aee8 <__aeabi_ui2d>
    cfdc:	strd	r0, r1, [sp, #56]	; 0x38
    cfe0:	ldr	r3, [sp, #52]	; 0x34
    cfe2:	cmp	r3, #0
    cfe4:	bne.w	d64e <_strtod_l+0xbd6>
    cfe8:	ldrd	r1, r2, [sp, #56]	; 0x38
    cfec:	add.w	r3, r2, #2147483648	; 0x80000000
    cff0:	str	r1, [sp, #80]	; 0x50
    cff2:	str	r3, [sp, #84]	; 0x54
    cff4:	ldrd	r4, r5, [sp, #80]	; 0x50
    cff8:	add.w	r3, r5, #112197632	; 0x6b00000
    cffc:	rsb	r5, r9, r3
    d000:	vldr	d0, [sp, #32]
    d004:	bl	121a0 <__ulp>
    d008:	mov	r0, r4
    d00a:	vmov	r2, r3, d0
    d00e:	mov	r1, r5
    d010:	bl	afd4 <__aeabi_dmul>
    d014:	ldrd	r2, r3, [sp, #32]
    d018:	bl	ac70 <__adddf3>
    d01c:	strd	r0, r1, [sp, #16]
    d020:	mov	r4, r1
    d022:	ldr	r3, [sp, #40]	; 0x28
    d024:	cbnz	r3, d030 <_strtod_l+0x5b8>
    d026:	ldr	r3, [pc, #144]	; (d0b8 <_strtod_l+0x640>)
    d028:	ands	r3, r4
    d02a:	cmp	r9, r3
    d02c:	beq.w	d44c <_strtod_l+0x9d4>
    d030:	ldr	r1, [sp, #112]	; 0x70
    d032:	mov	r0, fp
    d034:	bl	11bec <_Bfree>
    d038:	mov	r1, r6
    d03a:	mov	r0, fp
    d03c:	bl	11bec <_Bfree>
    d040:	mov	r1, sl
    d042:	mov	r0, fp
    d044:	bl	11bec <_Bfree>
    d048:	mov	r1, r7
    d04a:	mov	r0, fp
    d04c:	bl	11bec <_Bfree>
    d050:	b.n	ce02 <_strtod_l+0x38a>
    d052:	movs	r2, #0
    d054:	str	r2, [sp, #76]	; 0x4c
    d056:	movs	r2, #1
    d058:	str	r2, [sp, #56]	; 0x38
    d05a:	b.n	ce8c <_strtod_l+0x414>
    d05c:	ldr	r3, [pc, #92]	; (d0bc <_strtod_l+0x644>)
    d05e:	mov	r0, r4
    d060:	mov	r1, r5
    d062:	movs	r2, #0
    d064:	bl	afd4 <__aeabi_dmul>
    d068:	ldr	r3, [sp, #52]	; 0x34
    d06a:	strd	r0, r1, [sp, #56]	; 0x38
    d06e:	cmp	r3, #0
    d070:	bne.n	d128 <_strtod_l+0x6b0>
    d072:	add.w	r3, r1, #2147483648	; 0x80000000
    d076:	str	r0, [sp, #64]	; 0x40
    d078:	str	r3, [sp, #68]	; 0x44
    d07a:	ldr	r3, [sp, #20]
    d07c:	ldrd	r4, r5, [sp, #64]	; 0x40
    d080:	mov	r8, r3
    d082:	b.n	cfa0 <_strtod_l+0x528>
    d084:	mov.w	r9, #1
    d088:	cmp	r0, #0
    d08a:	bne.n	d13e <_strtod_l+0x6c6>
    d08c:	ldr	r3, [sp, #40]	; 0x28
    d08e:	cmp	r3, #0
    d090:	beq.w	cae4 <_strtod_l+0x6c>
    d094:	mov	r4, r0
    d096:	b.n	ccf4 <_strtod_l+0x27c>
    d098:	.word	0x00000000
    d09c:	.word	0x3ff00000
    d0a0:	.word	0xffc00000
    d0a4:	.word	0x41dfffff
    d0a8:	.word	0x00013b80
    d0ac:	.word	0xfffffc02
    d0b0:	.word	0x3ff00000
    d0b4:	.word	0x7fe00000
    d0b8:	.word	0x7ff00000
    d0bc:	.word	0x3fe00000
    d0c0:	ldr	r3, [sp, #44]	; 0x2c
    d0c2:	ldr	r5, [sp, #48]	; 0x30
    d0c4:	subs	r4, r3, r2
    d0c6:	b.n	ce60 <_strtod_l+0x3e8>
    d0c8:	mov.w	r9, #1
    d0cc:	b.n	cb84 <_strtod_l+0x10c>
    d0ce:	ldr	r1, [pc, #736]	; (d3b0 <_strtod_l+0x938>)
    d0d0:	subs	r1, r1, r2
    d0d2:	movs	r2, #1
    d0d4:	lsl.w	r1, r2, r1
    d0d8:	str	r1, [sp, #76]	; 0x4c
    d0da:	str	r2, [sp, #56]	; 0x38
    d0dc:	b.n	ce8c <_strtod_l+0x414>
    d0de:	ldrd	r1, r2, [sp, #16]
    d0e2:	cmp	r1, #0
    d0e4:	bne.w	d27a <_strtod_l+0x802>
    d0e8:	ubfx	r3, r2, #0, #20
    d0ec:	mov	r8, r2
    d0ee:	cmp	r3, #0
    d0f0:	bne.w	d286 <_strtod_l+0x80e>
    d0f4:	movs	r2, #0
    d0f6:	ldr	r3, [pc, #700]	; (d3b4 <_strtod_l+0x93c>)
    d0f8:	mov	r0, r4
    d0fa:	mov	r1, r5
    d0fc:	bl	b4b8 <__aeabi_dcmplt>
    d100:	cmp	r0, #0
    d102:	bne.w	d802 <_strtod_l+0xd8a>
    d106:	movs	r2, #0
    d108:	ldr	r3, [pc, #684]	; (d3b8 <_strtod_l+0x940>)
    d10a:	mov	r0, r4
    d10c:	mov	r1, r5
    d10e:	bl	afd4 <__aeabi_dmul>
    d112:	mov	r2, r1
    d114:	mov	r1, r0
    d116:	strd	r1, r2, [sp, #56]	; 0x38
    d11a:	add.w	r3, r2, #2147483648	; 0x80000000
    d11e:	str	r0, [sp, #96]	; 0x60
    d120:	str	r3, [sp, #100]	; 0x64
    d122:	ldrd	r4, r5, [sp, #96]	; 0x60
    d126:	b.n	cfa0 <_strtod_l+0x528>
    d128:	vldr	d7, [sp, #56]	; 0x38
    d12c:	vstr	d7, [sp, #64]	; 0x40
    d130:	b.n	d07a <_strtod_l+0x602>
    d132:	mov.w	ip, #1
    d136:	adds	r3, r6, #2
    d138:	str	r3, [sp, #108]	; 0x6c
    d13a:	ldrb	r3, [r6, #2]
    d13c:	b.n	cd0c <_strtod_l+0x294>
    d13e:	movs	r4, #0
    d140:	b.n	ccf4 <_strtod_l+0x27c>
    d142:	cmp.w	r9, #0
    d146:	bne.w	cae4 <_strtod_l+0x6c>
    d14a:	subs	r3, #73	; 0x49
    d14c:	cmp	r3, #37	; 0x25
    d14e:	bhi.w	cae4 <_strtod_l+0x6c>
    d152:	add	r2, pc, #4	; (adr r2, d158 <_strtod_l+0x6e0>)
    d154:	ldr.w	pc, [r2, r3, lsl #2]
    d158:	.word	0x0000ccbd
    d15c:	.word	0x0000cae5
    d160:	.word	0x0000cae5
    d164:	.word	0x0000cae5
    d168:	.word	0x0000cae5
    d16c:	.word	0x0000d295
    d170:	.word	0x0000cae5
    d174:	.word	0x0000cae5
    d178:	.word	0x0000cae5
    d17c:	.word	0x0000cae5
    d180:	.word	0x0000cae5
    d184:	.word	0x0000cae5
    d188:	.word	0x0000cae5
    d18c:	.word	0x0000cae5
    d190:	.word	0x0000cae5
    d194:	.word	0x0000cae5
    d198:	.word	0x0000cae5
    d19c:	.word	0x0000cae5
    d1a0:	.word	0x0000cae5
    d1a4:	.word	0x0000cae5
    d1a8:	.word	0x0000cae5
    d1ac:	.word	0x0000cae5
    d1b0:	.word	0x0000cae5
    d1b4:	.word	0x0000cae5
    d1b8:	.word	0x0000cae5
    d1bc:	.word	0x0000cae5
    d1c0:	.word	0x0000cae5
    d1c4:	.word	0x0000cae5
    d1c8:	.word	0x0000cae5
    d1cc:	.word	0x0000cae5
    d1d0:	.word	0x0000cae5
    d1d4:	.word	0x0000cae5
    d1d8:	.word	0x0000ccbd
    d1dc:	.word	0x0000cae5
    d1e0:	.word	0x0000cae5
    d1e4:	.word	0x0000cae5
    d1e8:	.word	0x0000cae5
    d1ec:	.word	0x0000d295
    d1f0:	cmp.w	r6, #308	; 0x134
    d1f4:	bgt.w	d436 <_strtod_l+0x9be>
    d1f8:	asrs	r6, r6, #4
    d1fa:	cmp	r6, #1
    d1fc:	ldr.w	r9, [pc, #472]	; d3d8 <_strtod_l+0x960>
    d200:	ble.w	d836 <_strtod_l+0xdbe>
    d204:	ldrd	r0, r1, [sp, #16]
    d208:	movs	r3, #0
    d20a:	mov	r7, r9
    d20c:	mov	r8, r3
    d20e:	tst.w	r6, #1
    d212:	add.w	r8, r8, #1
    d216:	mov.w	r6, r6, asr #1
    d21a:	beq.n	d226 <_strtod_l+0x7ae>
    d21c:	ldrd	r2, r3, [r7]
    d220:	bl	afd4 <__aeabi_dmul>
    d224:	movs	r3, #1
    d226:	cmp	r6, #1
    d228:	add.w	r7, r7, #8
    d22c:	bne.n	d20e <_strtod_l+0x796>
    d22e:	cmp	r3, #0
    d230:	bne.w	d8fa <_strtod_l+0xe82>
    d234:	ldr	r3, [sp, #20]
    d236:	sub.w	r3, r3, #55574528	; 0x3500000
    d23a:	str	r3, [sp, #20]
    d23c:	add.w	r8, r9, r8, lsl #3
    d240:	ldrd	r2, r3, [sp, #16]
    d244:	ldrd	r0, r1, [r8]
    d248:	bl	afd4 <__aeabi_dmul>
    d24c:	bic.w	r3, r1, #2147483648	; 0x80000000
    d250:	lsrs	r3, r3, #20
    d252:	ldr	r2, [pc, #360]	; (d3bc <_strtod_l+0x944>)
    d254:	lsls	r3, r3, #20
    d256:	cmp	r3, r2
    d258:	strd	r0, r1, [sp, #16]
    d25c:	bhi.w	d436 <_strtod_l+0x9be>
    d260:	sub.w	r2, r2, #1048576	; 0x100000
    d264:	cmp	r3, r2
    d266:	bls.w	d7f8 <_strtod_l+0xd80>
    d26a:	ldr	r3, [pc, #340]	; (d3c0 <_strtod_l+0x948>)
    d26c:	str	r3, [sp, #20]
    d26e:	movs	r3, #0
    d270:	str	r3, [sp, #40]	; 0x28
    d272:	mov.w	r3, #4294967295
    d276:	str	r3, [sp, #16]
    d278:	b.n	cdd4 <_strtod_l+0x35c>
    d27a:	ldrd	r1, r2, [sp, #16]
    d27e:	cmp	r1, #1
    d280:	beq.w	d662 <_strtod_l+0xbea>
    d284:	mov	r8, r2
    d286:	vldr	d7, [pc, #288]	; d3a8 <_strtod_l+0x930>
    d28a:	movs	r4, #0
    d28c:	ldr	r5, [pc, #308]	; (d3c4 <_strtod_l+0x94c>)
    d28e:	vstr	d7, [sp, #56]	; 0x38
    d292:	b.n	cfa0 <_strtod_l+0x528>
    d294:	add	r0, sp, #108	; 0x6c
    d296:	ldr	r1, [pc, #304]	; (d3c8 <_strtod_l+0x950>)
    d298:	bl	11958 <__match>
    d29c:	cmp	r0, #0
    d29e:	beq.w	cae4 <_strtod_l+0x6c>
    d2a2:	ldr	r3, [sp, #108]	; 0x6c
    d2a4:	ldrb	r3, [r3, #0]
    d2a6:	cmp	r3, #40	; 0x28
    d2a8:	beq.w	d8b0 <_strtod_l+0xe38>
    d2ac:	ldr	r3, [pc, #284]	; (d3cc <_strtod_l+0x954>)
    d2ae:	str	r3, [sp, #20]
    d2b0:	movs	r3, #0
    d2b2:	str	r3, [sp, #16]
    d2b4:	b.n	cce8 <_strtod_l+0x270>
    d2b6:	str	r6, [sp, #108]	; 0x6c
    d2b8:	movs	r2, #0
    d2ba:	b.n	cb92 <_strtod_l+0x11a>
    d2bc:	mov.w	ip, #0
    d2c0:	b.n	d136 <_strtod_l+0x6be>
    d2c2:	adds	r3, #1
    d2c4:	bne.w	d896 <_strtod_l+0xe1e>
    d2c8:	ldr	r0, [sp, #112]	; 0x70
    d2ca:	ldr	r3, [pc, #260]	; (d3d0 <_strtod_l+0x958>)
    d2cc:	str	r3, [sp, #20]
    d2ce:	movs	r2, #0
    d2d0:	str	r2, [sp, #16]
    d2d2:	ldrd	r8, r9, [sp, #16]
    d2d6:	movs	r3, #34	; 0x22
    d2d8:	str.w	r3, [fp]
    d2dc:	mov	r1, r0
    d2de:	mov	r0, fp
    d2e0:	bl	11bec <_Bfree>
    d2e4:	mov	r1, r6
    d2e6:	mov	r0, fp
    d2e8:	bl	11bec <_Bfree>
    d2ec:	mov	r1, sl
    d2ee:	mov	r0, fp
    d2f0:	bl	11bec <_Bfree>
    d2f4:	ldr	r1, [sp, #72]	; 0x48
    d2f6:	mov	r0, fp
    d2f8:	bl	11bec <_Bfree>
    d2fc:	mov	r1, r7
    d2fe:	mov	r0, fp
    d300:	bl	11bec <_Bfree>
    d304:	b.n	cba8 <_strtod_l+0x130>
    d306:	ldr	r2, [sp, #28]
    d308:	str	r5, [sp, #8]
    d30a:	add	r3, sp, #112	; 0x70
    d30c:	str	r2, [sp, #4]
    d30e:	str	r3, [sp, #0]
    d310:	ldr	r2, [pc, #192]	; (d3d4 <_strtod_l+0x95c>)
    d312:	add	r3, sp, #116	; 0x74
    d314:	add	r1, sp, #108	; 0x6c
    d316:	mov	r0, fp
    d318:	bl	11448 <__gethex>
    d31c:	ands.w	r6, r0, #7
    d320:	mov	r5, r0
    d322:	beq.w	cba0 <_strtod_l+0x128>
    d326:	cmp	r6, #6
    d328:	bne.w	d5d8 <_strtod_l+0xb60>
    d32c:	adds	r4, #1
    d32e:	movs	r3, #0
    d330:	str	r4, [sp, #108]	; 0x6c
    d332:	mov.w	r8, #0
    d336:	mov.w	r9, #0
    d33a:	str	r3, [sp, #28]
    d33c:	b.n	cba8 <_strtod_l+0x130>
    d33e:	ldr.w	r1, [sl]
    d342:	mov	r0, r4
    d344:	mov	r2, r9
    d346:	bl	c99c <strncmp>
    d34a:	cbz	r0, d360 <_strtod_l+0x8e8>
    d34c:	mov.w	sl, #0
    d350:	mov	r3, r7
    d352:	mov	r8, sl
    d354:	mov	r5, sl
    d356:	mov	r0, sl
    d358:	mov	r7, sl
    d35a:	mov	r4, sl
    d35c:	mov	r9, sl
    d35e:	b.n	cb84 <_strtod_l+0x10c>
    d360:	ldr	r3, [sp, #108]	; 0x6c
    d362:	add.w	r2, r3, r9
    d366:	str	r2, [sp, #108]	; 0x6c
    d368:	ldrb.w	r3, [r3, r9]
    d36c:	cmp	r3, #48	; 0x30
    d36e:	bne.n	d37e <_strtod_l+0x906>
    d370:	adds	r2, #1
    d372:	str	r2, [sp, #108]	; 0x6c
    d374:	ldrb	r3, [r2, #0]
    d376:	cmp	r3, #48	; 0x30
    d378:	add.w	r0, r0, #1
    d37c:	beq.n	d370 <_strtod_l+0x8f8>
    d37e:	sub.w	r2, r3, #49	; 0x31
    d382:	cmp	r2, #8
    d384:	bls.w	d680 <_strtod_l+0xc08>
    d388:	mov.w	sl, #0
    d38c:	cmp	r3, #101	; 0x65
    d38e:	mov	r8, sl
    d390:	mov	r5, sl
    d392:	mov	r7, sl
    d394:	beq.w	d084 <_strtod_l+0x60c>
    d398:	mov	r4, sl
    d39a:	mov.w	r9, #1
    d39e:	b.w	cb8a <_strtod_l+0x112>
    d3a2:	nop
    d3a4:	nop.w
    d3a8:	.word	0x00000000
    d3ac:	.word	0x3ff00000
    d3b0:	.word	0xfffffbe2
    d3b4:	.word	0x3ff00000
    d3b8:	.word	0x3fe00000
    d3bc:	.word	0x7ca00000
    d3c0:	.word	0x7fefffff
    d3c4:	.word	0xbff00000
    d3c8:	.word	0x00013894
    d3cc:	.word	0xfff80000
    d3d0:	.word	0x7ff00000
    d3d4:	.word	0x00013874
    d3d8:	.word	0x00013c48
    d3dc:	sub.w	r3, r8, #55574528	; 0x3500000
    d3e0:	str	r3, [sp, #20]
    d3e2:	vldr	d7, [sp, #16]
    d3e6:	vmov.f32	s0, s14
    d3ea:	vmov.f32	s1, s15
    d3ee:	bl	121a0 <__ulp>
    d3f2:	mov	r0, r4
    d3f4:	vmov	r2, r3, d0
    d3f8:	mov	r1, r5
    d3fa:	bl	afd4 <__aeabi_dmul>
    d3fe:	ldrd	r2, r3, [sp, #16]
    d402:	bl	ac70 <__adddf3>
    d406:	bic.w	r3, r1, #2147483648	; 0x80000000
    d40a:	strd	r0, r1, [sp, #16]
    d40e:	lsrs	r3, r3, #20
    d410:	ldr	r2, [pc, #684]	; (d6c0 <_strtod_l+0xc48>)
    d412:	ldrd	r0, r1, [sp, #32]
    d416:	lsls	r3, r3, #20
    d418:	cmp	r3, r2
    d41a:	strd	r0, r1, [sp, #88]	; 0x58
    d41e:	bls.w	d596 <_strtod_l+0xb1e>
    d422:	ldr	r3, [pc, #672]	; (d6c4 <_strtod_l+0xc4c>)
    d424:	cmp	r1, r3
    d426:	beq.w	d7ee <_strtod_l+0xd76>
    d42a:	ldr	r3, [pc, #664]	; (d6c4 <_strtod_l+0xc4c>)
    d42c:	str	r3, [sp, #20]
    d42e:	mov.w	r3, #4294967295
    d432:	str	r3, [sp, #16]
    d434:	b.n	d030 <_strtod_l+0x5b8>
    d436:	ldr	r3, [pc, #656]	; (d6c8 <_strtod_l+0xc50>)
    d438:	str	r3, [sp, #20]
    d43a:	movs	r2, #0
    d43c:	movs	r3, #34	; 0x22
    d43e:	str	r2, [sp, #16]
    d440:	ldrd	r8, r9, [sp, #16]
    d444:	str.w	r3, [fp]
    d448:	b.w	cba8 <_strtod_l+0x130>
    d44c:	ldrd	r8, r9, [sp, #56]	; 0x38
    d450:	mov	r1, r9
    d452:	mov	r0, r8
    d454:	bl	b534 <__aeabi_d2iz>
    d458:	bl	af08 <__aeabi_i2d>
    d45c:	mov	r3, r1
    d45e:	mov	r2, r0
    d460:	mov	r1, r9
    d462:	mov	r0, r8
    d464:	bl	ac6c <__aeabi_dsub>
    d468:	ldr	r3, [sp, #52]	; 0x34
    d46a:	mov	r8, r0
    d46c:	mov	r9, r1
    d46e:	cbnz	r3, d492 <_strtod_l+0xa1a>
    d470:	ldr	r3, [sp, #16]
    d472:	cbnz	r3, d492 <_strtod_l+0xa1a>
    d474:	ubfx	r4, r4, #0, #20
    d478:	cbnz	r4, d492 <_strtod_l+0xa1a>
    d47a:	add	r3, pc, #548	; (adr r3, d6a0 <_strtod_l+0xc28>)
    d47c:	ldrd	r2, r3, [r3]
    d480:	bl	b4b8 <__aeabi_dcmplt>
    d484:	cmp	r0, #0
    d486:	beq.w	d030 <_strtod_l+0x5b8>
    d48a:	ldrd	r8, r9, [sp, #16]
    d48e:	ldr	r0, [sp, #112]	; 0x70
    d490:	b.n	d2dc <_strtod_l+0x864>
    d492:	add	r3, pc, #532	; (adr r3, d6a8 <_strtod_l+0xc30>)
    d494:	ldrd	r2, r3, [r3]
    d498:	mov	r0, r8
    d49a:	mov	r1, r9
    d49c:	bl	b4b8 <__aeabi_dcmplt>
    d4a0:	cmp	r0, #0
    d4a2:	bne.n	d48a <_strtod_l+0xa12>
    d4a4:	mov	r0, r8
    d4a6:	mov	r1, r9
    d4a8:	add	r3, pc, #516	; (adr r3, d6b0 <_strtod_l+0xc38>)
    d4aa:	ldrd	r2, r3, [r3]
    d4ae:	bl	b4f4 <__aeabi_dcmpgt>
    d4b2:	cmp	r0, #0
    d4b4:	beq.w	d030 <_strtod_l+0x5b8>
    d4b8:	b.n	d48a <_strtod_l+0xa12>
    d4ba:	beq.w	cdd0 <_strtod_l+0x358>
    d4be:	rsb	r6, r9, #0
    d4c2:	ands.w	r2, r6, #15
    d4c6:	beq.n	d4de <_strtod_l+0xa66>
    d4c8:	ldr	r3, [pc, #512]	; (d6cc <_strtod_l+0xc54>)
    d4ca:	add.w	r3, r3, r2, lsl #3
    d4ce:	ldrd	r0, r1, [sp, #16]
    d4d2:	ldrd	r2, r3, [r3]
    d4d6:	bl	b228 <__aeabi_ddiv>
    d4da:	strd	r0, r1, [sp, #16]
    d4de:	asrs	r6, r6, #4
    d4e0:	beq.w	cdd0 <_strtod_l+0x358>
    d4e4:	cmp	r6, #31
    d4e6:	bgt.n	d55a <_strtod_l+0xae2>
    d4e8:	ands.w	r3, r6, #16
    d4ec:	beq.w	d860 <_strtod_l+0xde8>
    d4f0:	movs	r3, #106	; 0x6a
    d4f2:	cmp	r6, #0
    d4f4:	str	r3, [sp, #40]	; 0x28
    d4f6:	ble.n	d520 <_strtod_l+0xaa8>
    d4f8:	ldrd	r0, r1, [sp, #16]
    d4fc:	ldr	r7, [pc, #464]	; (d6d0 <_strtod_l+0xc58>)
    d4fe:	movs	r3, #0
    d500:	lsls	r2, r6, #31
    d502:	bpl.n	d50e <_strtod_l+0xa96>
    d504:	ldrd	r2, r3, [r7]
    d508:	bl	afd4 <__aeabi_dmul>
    d50c:	movs	r3, #1
    d50e:	asrs	r6, r6, #1
    d510:	add.w	r7, r7, #8
    d514:	bne.n	d500 <_strtod_l+0xa88>
    d516:	cmp	r3, #0
    d518:	bne.w	d900 <_strtod_l+0xe88>
    d51c:	ldr	r3, [sp, #40]	; 0x28
    d51e:	cbz	r3, d548 <_strtod_l+0xad0>
    d520:	ldrd	r1, r2, [sp, #16]
    d524:	ubfx	r3, r2, #20, #11
    d528:	rsb	r3, r3, #107	; 0x6b
    d52c:	cmp	r3, #0
    d52e:	mov	r1, r2
    d530:	ble.n	d548 <_strtod_l+0xad0>
    d532:	cmp	r3, #31
    d534:	ble.w	d8ea <_strtod_l+0xe72>
    d538:	movs	r2, #0
    d53a:	cmp	r3, #52	; 0x34
    d53c:	str	r2, [sp, #16]
    d53e:	ble.w	d906 <_strtod_l+0xe8e>
    d542:	mov.w	r3, #57671680	; 0x3700000
    d546:	str	r3, [sp, #20]
    d548:	movs	r2, #0
    d54a:	movs	r3, #0
    d54c:	ldrd	r0, r1, [sp, #16]
    d550:	bl	b4a4 <__aeabi_dcmpeq>
    d554:	cmp	r0, #0
    d556:	beq.w	cdd4 <_strtod_l+0x35c>
    d55a:	movs	r3, #34	; 0x22
    d55c:	str.w	r3, [fp]
    d560:	mov.w	r8, #0
    d564:	mov.w	r9, #0
    d568:	b.w	cba8 <_strtod_l+0x130>
    d56c:	ldr	r1, [sp, #108]	; 0x6c
    d56e:	adds	r4, #1
    d570:	cmp	r0, #8
    d572:	ble.w	d692 <_strtod_l+0xc1a>
    d576:	cmp	r4, #16
    d578:	itt	le
    d57a:	addle.w	r8, r8, r8, lsl #2
    d57e:	addle.w	r8, r2, r8, lsl #1
    d582:	movs	r0, #0
    d584:	adds	r3, r1, #1
    d586:	str	r3, [sp, #108]	; 0x6c
    d588:	ldrb	r3, [r1, #1]
    d58a:	b.w	cbcc <_strtod_l+0x154>
    d58e:	movw	r2, #19999	; 0x4e1f
    d592:	b.w	cd7e <_strtod_l+0x306>
    d596:	ldr	r3, [sp, #20]
    d598:	add.w	r4, r3, #55574528	; 0x3500000
    d59c:	str	r4, [sp, #20]
    d59e:	b.n	d022 <_strtod_l+0x5aa>
    d5a0:	ldr	r6, [sp, #44]	; 0x2c
    d5a2:	rsb	r3, r4, #37	; 0x25
    d5a6:	cmp	r6, r3
    d5a8:	bgt.w	cd9c <_strtod_l+0x324>
    d5ac:	ldr	r5, [pc, #284]	; (d6cc <_strtod_l+0xc54>)
    d5ae:	rsb	r4, r4, #15
    d5b2:	add.w	r1, r5, r4, lsl #3
    d5b6:	subs	r4, r6, r4
    d5b8:	ldrd	r2, r3, [sp, #16]
    d5bc:	ldrd	r0, r1, [r1]
    d5c0:	add.w	r5, r5, r4, lsl #3
    d5c4:	bl	afd4 <__aeabi_dmul>
    d5c8:	ldrd	r2, r3, [r5]
    d5cc:	bl	afd4 <__aeabi_dmul>
    d5d0:	mov	r8, r0
    d5d2:	mov	r9, r1
    d5d4:	b.w	cba8 <_strtod_l+0x130>
    d5d8:	ldr	r2, [sp, #112]	; 0x70
    d5da:	cbz	r2, d5ec <_strtod_l+0xb74>
    d5dc:	movs	r1, #53	; 0x35
    d5de:	add	r0, sp, #120	; 0x78
    d5e0:	bl	123e0 <__copybits>
    d5e4:	mov	r0, fp
    d5e6:	ldr	r1, [sp, #112]	; 0x70
    d5e8:	bl	11bec <_Bfree>
    d5ec:	cmp	r6, #6
    d5ee:	bhi.n	d608 <_strtod_l+0xb90>
    d5f0:	tbb	[pc, r6]
    d5f4:	.word	0x1318211d
    d5f8:	.short	0x2104
    d5fa:	.byte	0x1d
    d5fb:	.byte	0x00
    d5fc:	mvn.w	r3, #2147483648	; 0x80000000
    d600:	str	r3, [sp, #20]
    d602:	mov.w	r3, #4294967295
    d606:	str	r3, [sp, #16]
    d608:	lsls	r1, r5, #28
    d60a:	bpl.w	cce8 <_strtod_l+0x270>
    d60e:	ldr	r3, [sp, #20]
    d610:	orr.w	r3, r3, #2147483648	; 0x80000000
    d614:	str	r3, [sp, #20]
    d616:	b.w	cce8 <_strtod_l+0x270>
    d61a:	ldr	r3, [pc, #172]	; (d6c8 <_strtod_l+0xc50>)
    d61c:	str	r3, [sp, #20]
    d61e:	movs	r3, #0
    d620:	str	r3, [sp, #16]
    d622:	b.n	d608 <_strtod_l+0xb90>
    d624:	ldr	r3, [sp, #120]	; 0x78
    d626:	str	r3, [sp, #16]
    d628:	ldr	r3, [sp, #124]	; 0x7c
    d62a:	str	r3, [sp, #20]
    d62c:	b.n	d608 <_strtod_l+0xb90>
    d62e:	movs	r3, #0
    d630:	str	r3, [sp, #20]
    d632:	str	r3, [sp, #16]
    d634:	b.n	d608 <_strtod_l+0xb90>
    d636:	ldr	r2, [sp, #116]	; 0x74
    d638:	ldr	r3, [sp, #124]	; 0x7c
    d63a:	ldr	r1, [sp, #120]	; 0x78
    d63c:	str	r1, [sp, #16]
    d63e:	addw	r2, r2, #1075	; 0x433
    d642:	bic.w	r3, r3, #1048576	; 0x100000
    d646:	orr.w	r3, r3, r2, lsl #20
    d64a:	str	r3, [sp, #20]
    d64c:	b.n	d608 <_strtod_l+0xb90>
    d64e:	vldr	d7, [sp, #56]	; 0x38
    d652:	vstr	d7, [sp, #80]	; 0x50
    d656:	b.n	cff4 <_strtod_l+0x57c>
    d658:	vldr	d7, [pc, #92]	; d6b8 <_strtod_l+0xc40>
    d65c:	vstr	d7, [sp, #56]	; 0x38
    d660:	b.n	cfe0 <_strtod_l+0x568>
    d662:	ldrd	r1, r2, [sp, #16]
    d666:	mov	r8, r2
    d668:	cmp	r2, #0
    d66a:	bne.w	d286 <_strtod_l+0x80e>
    d66e:	movs	r3, #34	; 0x22
    d670:	str.w	r3, [fp]
    d674:	ldr	r0, [sp, #112]	; 0x70
    d676:	mov.w	r8, #0
    d67a:	mov.w	r9, #0
    d67e:	b.n	d2dc <_strtod_l+0x864>
    d680:	ldr	r2, [sp, #108]	; 0x6c
    d682:	str	r2, [sp, #32]
    d684:	movs	r5, #0
    d686:	subs	r3, #48	; 0x30
    d688:	adds	r7, r0, #1
    d68a:	mov	r1, r2
    d68c:	mov	sl, r5
    d68e:	mov	r8, r5
    d690:	movs	r4, #1
    d692:	add.w	r5, r5, r5, lsl #2
    d696:	add.w	r5, r3, r5, lsl #1
    d69a:	movs	r0, #0
    d69c:	b.n	d584 <_strtod_l+0xb0c>
    d69e:	nop
    d6a0:	.word	0x94a03595
    d6a4:	.word	0x3fcfffff
    d6a8:	.word	0x94a03595
    d6ac:	.word	0x3fdfffff
    d6b0:	.word	0x35afe535
    d6b4:	.word	0x3fe00000
    d6b8:	.word	0x00000000
    d6bc:	.word	0x3ff00000
    d6c0:	.word	0x7c9fffff
    d6c4:	.word	0x7fefffff
    d6c8:	.word	0x7ff00000
    d6cc:	.word	0x00013b80
    d6d0:	.word	0x000138b0
    d6d4:	ldr	r1, [sp, #44]	; 0x2c
    d6d6:	cmn.w	r1, #22
    d6da:	blt.w	cd9c <_strtod_l+0x324>
    d6de:	ldr	r2, [pc, #600]	; (d938 <_strtod_l+0xec0>)
    d6e0:	sub.w	r2, r2, r1, lsl #3
    d6e4:	ldrd	r2, r3, [r2]
    d6e8:	ldrd	r0, r1, [sp, #16]
    d6ec:	bl	b228 <__aeabi_ddiv>
    d6f0:	mov	r8, r0
    d6f2:	mov	r9, r1
    d6f4:	b.w	cba8 <_strtod_l+0x130>
    d6f8:	ldr	r3, [sp, #52]	; 0x34
    d6fa:	ldrd	r8, r9, [sp, #32]
    d6fe:	cmp	r3, #0
    d700:	beq.w	d814 <_strtod_l+0xd9c>
    d704:	ldrd	r4, r5, [sp, #16]
    d708:	ldr	r3, [pc, #560]	; (d93c <_strtod_l+0xec4>)
    d70a:	ubfx	r1, r5, #0, #20
    d70e:	cmp	r1, r3
    d710:	mov	r2, r5
    d712:	beq.w	d86a <_strtod_l+0xdf2>
    d716:	ldr	r3, [sp, #76]	; 0x4c
    d718:	cmp	r3, #0
    d71a:	beq.w	d82c <_strtod_l+0xdb4>
    d71e:	ldr	r2, [sp, #20]
    d720:	tst	r3, r2
    d722:	beq.n	d746 <_strtod_l+0xcce>
    d724:	ldr	r3, [sp, #52]	; 0x34
    d726:	ldr	r2, [sp, #40]	; 0x28
    d728:	ldrd	r0, r1, [sp, #16]
    d72c:	cmp	r3, #0
    d72e:	beq.w	d83c <_strtod_l+0xdc4>
    d732:	bl	ca3c <sulp>
    d736:	mov	r2, r0
    d738:	mov	r3, r1
    d73a:	mov	r0, r8
    d73c:	mov	r1, r9
    d73e:	bl	ac70 <__adddf3>
    d742:	mov	r8, r0
    d744:	mov	r9, r1
    d746:	ldr	r3, [sp, #40]	; 0x28
    d748:	cbz	r3, d77a <_strtod_l+0xd02>
    d74a:	ldr	r3, [pc, #500]	; (d940 <_strtod_l+0xec8>)
    d74c:	str	r3, [sp, #92]	; 0x5c
    d74e:	movs	r3, #0
    d750:	str	r3, [sp, #88]	; 0x58
    d752:	ldrd	r2, r3, [sp, #88]	; 0x58
    d756:	mov	r0, r8
    d758:	mov	r1, r9
    d75a:	bl	afd4 <__aeabi_dmul>
    d75e:	mov	r3, r0
    d760:	mov	r4, r1
    d762:	mov	r8, r0
    d764:	mov	r9, r1
    d766:	strd	r3, r4, [sp, #16]
    d76a:	cbnz	r1, d77a <_strtod_l+0xd02>
    d76c:	ldr	r3, [sp, #16]
    d76e:	cbnz	r3, d77a <_strtod_l+0xd02>
    d770:	movs	r3, #34	; 0x22
    d772:	ldr	r0, [sp, #112]	; 0x70
    d774:	str.w	r3, [fp]
    d778:	b.n	d2dc <_strtod_l+0x864>
    d77a:	ldr	r0, [sp, #112]	; 0x70
    d77c:	b.n	d2dc <_strtod_l+0x864>
    d77e:	ldr	r3, [sp, #52]	; 0x34
    d780:	ldrd	r8, r9, [sp, #32]
    d784:	cmp	r3, #0
    d786:	bne.n	d746 <_strtod_l+0xcce>
    d788:	ldrd	r1, r2, [sp, #16]
    d78c:	cmp	r1, #0
    d78e:	bne.n	d746 <_strtod_l+0xcce>
    d790:	ubfx	r3, r2, #0, #20
    d794:	mov	r4, r2
    d796:	cmp	r3, #0
    d798:	bne.n	d746 <_strtod_l+0xcce>
    d79a:	bic.w	r3, r2, #2147483648	; 0x80000000
    d79e:	lsrs	r3, r3, #20
    d7a0:	lsls	r3, r3, #20
    d7a2:	cmp.w	r3, #112197632	; 0x6b00000
    d7a6:	bls.n	d746 <_strtod_l+0xcce>
    d7a8:	ldr	r3, [r7, #20]
    d7aa:	cbnz	r3, d7b2 <_strtod_l+0xd3a>
    d7ac:	ldr	r3, [r7, #16]
    d7ae:	cmp	r3, #1
    d7b0:	ble.n	d746 <_strtod_l+0xcce>
    d7b2:	mov	r1, r7
    d7b4:	movs	r2, #1
    d7b6:	mov	r0, fp
    d7b8:	bl	11f98 <__lshift>
    d7bc:	mov	r1, sl
    d7be:	mov	r7, r0
    d7c0:	bl	12048 <__mcmp>
    d7c4:	cmp	r0, #0
    d7c6:	ble.n	d746 <_strtod_l+0xcce>
    d7c8:	ldr	r3, [sp, #40]	; 0x28
    d7ca:	cmp	r3, #0
    d7cc:	bne.w	d8d4 <_strtod_l+0xe5c>
    d7d0:	ldr	r3, [pc, #368]	; (d944 <_strtod_l+0xecc>)
    d7d2:	ands	r3, r4
    d7d4:	sub.w	r3, r3, #1048576	; 0x100000
    d7d8:	mvn.w	r3, r3, lsr #20
    d7dc:	mvn.w	r3, r3, lsl #20
    d7e0:	str	r3, [sp, #20]
    d7e2:	mov.w	r3, #4294967295
    d7e6:	str	r3, [sp, #16]
    d7e8:	ldrd	r8, r9, [sp, #16]
    d7ec:	b.n	d746 <_strtod_l+0xcce>
    d7ee:	ldr	r3, [sp, #88]	; 0x58
    d7f0:	adds	r3, #1
    d7f2:	bne.w	d42a <_strtod_l+0x9b2>
    d7f6:	b.n	d2c8 <_strtod_l+0x850>
    d7f8:	add.w	r3, r1, #55574528	; 0x3500000
    d7fc:	str	r3, [sp, #20]
    d7fe:	b.w	cdd0 <_strtod_l+0x358>
    d802:	vldr	d7, [pc, #292]	; d928 <_strtod_l+0xeb0>
    d806:	vstr	d7, [sp, #96]	; 0x60
    d80a:	vldr	d7, [pc, #292]	; d930 <_strtod_l+0xeb8>
    d80e:	vstr	d7, [sp, #56]	; 0x38
    d812:	b.n	d122 <_strtod_l+0x6aa>
    d814:	ldrd	r1, r2, [sp, #16]
    d818:	ubfx	r3, r2, #0, #20
    d81c:	mov	r4, r2
    d81e:	cmp	r3, #0
    d820:	bne.w	d716 <_strtod_l+0xc9e>
    d824:	cmp	r1, #0
    d826:	bne.w	d716 <_strtod_l+0xc9e>
    d82a:	b.n	d7c8 <_strtod_l+0xd50>
    d82c:	ldr	r3, [sp, #56]	; 0x38
    d82e:	ldr	r2, [sp, #16]
    d830:	tst	r3, r2
    d832:	beq.n	d746 <_strtod_l+0xcce>
    d834:	b.n	d724 <_strtod_l+0xcac>
    d836:	mov.w	r8, #0
    d83a:	b.n	d234 <_strtod_l+0x7bc>
    d83c:	bl	ca3c <sulp>
    d840:	mov	r2, r0
    d842:	mov	r3, r1
    d844:	mov	r0, r8
    d846:	mov	r1, r9
    d848:	bl	ac6c <__aeabi_dsub>
    d84c:	movs	r2, #0
    d84e:	movs	r3, #0
    d850:	mov	r8, r0
    d852:	mov	r9, r1
    d854:	bl	b4a4 <__aeabi_dcmpeq>
    d858:	cmp	r0, #0
    d85a:	bne.w	d66e <_strtod_l+0xbf6>
    d85e:	b.n	d746 <_strtod_l+0xcce>
    d860:	cmp	r6, #0
    d862:	str	r3, [sp, #40]	; 0x28
    d864:	bgt.w	d4f8 <_strtod_l+0xa80>
    d868:	b.n	d548 <_strtod_l+0xad0>
    d86a:	ldr	r3, [sp, #40]	; 0x28
    d86c:	ldr	r1, [sp, #16]
    d86e:	cbz	r3, d8aa <_strtod_l+0xe32>
    d870:	ldr	r3, [pc, #208]	; (d944 <_strtod_l+0xecc>)
    d872:	ands	r3, r5
    d874:	cmp.w	r3, #111149056	; 0x6a00000
    d878:	bhi.n	d8aa <_strtod_l+0xe32>
    d87a:	lsrs	r3, r3, #20
    d87c:	rsb	r3, r3, #107	; 0x6b
    d880:	mov.w	r0, #4294967295
    d884:	lsl.w	r3, r0, r3
    d888:	cmp	r3, r1
    d88a:	bne.w	d716 <_strtod_l+0xc9e>
    d88e:	ldr	r1, [pc, #184]	; (d948 <_strtod_l+0xed0>)
    d890:	cmp	r2, r1
    d892:	beq.w	d2c2 <_strtod_l+0x84a>
    d896:	ldr	r3, [pc, #172]	; (d944 <_strtod_l+0xecc>)
    d898:	ands	r3, r2
    d89a:	add.w	r3, r3, #1048576	; 0x100000
    d89e:	str	r3, [sp, #20]
    d8a0:	movs	r3, #0
    d8a2:	str	r3, [sp, #16]
    d8a4:	ldrd	r8, r9, [sp, #16]
    d8a8:	b.n	d746 <_strtod_l+0xcce>
    d8aa:	mov.w	r3, #4294967295
    d8ae:	b.n	d888 <_strtod_l+0xe10>
    d8b0:	add	r0, sp, #108	; 0x6c
    d8b2:	add	r2, sp, #120	; 0x78
    d8b4:	ldr	r1, [pc, #148]	; (d94c <_strtod_l+0xed4>)
    d8b6:	bl	11988 <__hexnan>
    d8ba:	cmp	r0, #5
    d8bc:	bne.w	d2ac <_strtod_l+0x834>
    d8c0:	ldr	r3, [sp, #124]	; 0x7c
    d8c2:	orr.w	r3, r3, #2139095040	; 0x7f800000
    d8c6:	orr.w	r3, r3, #7340032	; 0x700000
    d8ca:	str	r3, [sp, #20]
    d8cc:	ldr	r3, [sp, #120]	; 0x78
    d8ce:	str	r3, [sp, #16]
    d8d0:	b.w	cce8 <_strtod_l+0x270>
    d8d4:	ldr	r3, [pc, #108]	; (d944 <_strtod_l+0xecc>)
    d8d6:	ands	r3, r4
    d8d8:	cmp.w	r3, #112197632	; 0x6b00000
    d8dc:	bgt.w	d7d4 <_strtod_l+0xd5c>
    d8e0:	cmp.w	r3, #57671680	; 0x3700000
    d8e4:	bgt.w	d74a <_strtod_l+0xcd2>
    d8e8:	b.n	d66e <_strtod_l+0xbf6>
    d8ea:	mov.w	r2, #4294967295
    d8ee:	lsl.w	r3, r2, r3
    d8f2:	ldr	r2, [sp, #16]
    d8f4:	ands	r2, r3
    d8f6:	str	r2, [sp, #16]
    d8f8:	b.n	d548 <_strtod_l+0xad0>
    d8fa:	strd	r0, r1, [sp, #16]
    d8fe:	b.n	d234 <_strtod_l+0x7bc>
    d900:	strd	r0, r1, [sp, #16]
    d904:	b.n	d51c <_strtod_l+0xaa4>
    d906:	subs	r3, #32
    d908:	mov.w	r2, #4294967295
    d90c:	lsl.w	r3, r2, r3
    d910:	ands	r3, r1
    d912:	str	r3, [sp, #20]
    d914:	b.n	d548 <_strtod_l+0xad0>
    d916:	mov	r0, r4
    d918:	ldr	r1, [sp, #108]	; 0x6c
    d91a:	adds	r4, #1
    d91c:	b.n	d570 <_strtod_l+0xaf8>
    d91e:	mov	r0, r1
    d920:	ldr	r1, [sp, #108]	; 0x6c
    d922:	b.n	d584 <_strtod_l+0xb0c>
    d924:	nop.w
    d928:	.word	0x00000000
    d92c:	.word	0xbfe00000
    d930:	.word	0x00000000
    d934:	.word	0x3fe00000
    d938:	.word	0x00013b80
    d93c:	.word	0x000fffff
    d940:	.word	0x39500000
    d944:	.word	0x7ff00000
    d948:	.word	0x7fefffff
    d94c:	.word	0x00013898

0000d950 <_strtod_r>:
    d950:	ldr	r3, [pc, #20]	; (d968 <_strtod_r+0x18>)
    d952:	ldr	r3, [r3, #0]
    d954:	push	{r4}
    d956:	ldr	r3, [r3, #52]	; 0x34
    d958:	ldr	r4, [pc, #16]	; (d96c <_strtod_r+0x1c>)
    d95a:	cmp	r3, #0
    d95c:	it	eq
    d95e:	moveq	r3, r4
    d960:	ldr.w	r4, [sp], #4
    d964:	b.w	ca78 <_strtod_l>
    d968:	.word	0x20013dc8
    d96c:	.word	0x20013dcc

0000d970 <_strtol_l.isra.0>:
    d970:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d974:	ldr.w	r9, [sp, #40]	; 0x28
    d978:	mov	r7, r1
    d97a:	mov	r8, r0
    d97c:	mov	r6, r2
    d97e:	mov	r5, r3
    d980:	mov	fp, r1
    d982:	b.n	d986 <_strtol_l.isra.0+0x16>
    d984:	mov	fp, r4
    d986:	mov	r4, fp
    d988:	mov	r0, r9
    d98a:	ldrb.w	sl, [r4], #1
    d98e:	bl	ba18 <__locale_ctype_ptr_l>
    d992:	add	r0, sl
    d994:	ldrb	r1, [r0, #1]
    d996:	and.w	r1, r1, #8
    d99a:	and.w	ip, r1, #255	; 0xff
    d99e:	cmp	r1, #0
    d9a0:	bne.n	d984 <_strtol_l.isra.0+0x14>
    d9a2:	mov	r2, sl
    d9a4:	cmp	r2, #45	; 0x2d
    d9a6:	beq.n	da6c <_strtol_l.isra.0+0xfc>
    d9a8:	cmp	r2, #43	; 0x2b
    d9aa:	itt	eq
    d9ac:	ldrbeq.w	r2, [fp, #1]
    d9b0:	addeq.w	r4, fp, #2
    d9b4:	cmp	r5, #0
    d9b6:	beq.n	da40 <_strtol_l.isra.0+0xd0>
    d9b8:	cmp	r5, #16
    d9ba:	beq.n	da88 <_strtol_l.isra.0+0x118>
    d9bc:	mov	r9, r5
    d9be:	cmp.w	ip, #0
    d9c2:	ite	eq
    d9c4:	mvneq.w	sl, #2147483648	; 0x80000000
    d9c8:	movne.w	sl, #2147483648	; 0x80000000
    d9cc:	movs	r1, #0
    d9ce:	udiv	lr, sl, r9
    d9d2:	mov	r0, r1
    d9d4:	mls	sl, r9, lr, sl
    d9d8:	b.n	d9e6 <_strtol_l.isra.0+0x76>
    d9da:	beq.n	da30 <_strtol_l.isra.0+0xc0>
    d9dc:	mla	r0, r9, r0, r3
    d9e0:	movs	r1, #1
    d9e2:	ldrb.w	r2, [r4], #1
    d9e6:	sub.w	r3, r2, #48	; 0x30
    d9ea:	cmp	r3, #9
    d9ec:	bls.n	d9fa <_strtol_l.isra.0+0x8a>
    d9ee:	sub.w	r3, r2, #65	; 0x41
    d9f2:	cmp	r3, #25
    d9f4:	bhi.n	da0c <_strtol_l.isra.0+0x9c>
    d9f6:	sub.w	r3, r2, #55	; 0x37
    d9fa:	cmp	r5, r3
    d9fc:	ble.n	da1c <_strtol_l.isra.0+0xac>
    d9fe:	adds	r2, r1, #1
    da00:	beq.n	d9e2 <_strtol_l.isra.0+0x72>
    da02:	cmp	lr, r0
    da04:	bcs.n	d9da <_strtol_l.isra.0+0x6a>
    da06:	mov.w	r1, #4294967295
    da0a:	b.n	d9e2 <_strtol_l.isra.0+0x72>
    da0c:	sub.w	r3, r2, #97	; 0x61
    da10:	cmp	r3, #25
    da12:	bhi.n	da1c <_strtol_l.isra.0+0xac>
    da14:	sub.w	r3, r2, #87	; 0x57
    da18:	cmp	r5, r3
    da1a:	bgt.n	d9fe <_strtol_l.isra.0+0x8e>
    da1c:	adds	r3, r1, #1
    da1e:	beq.n	da4c <_strtol_l.isra.0+0xdc>
    da20:	cmp.w	ip, #0
    da24:	bne.n	da48 <_strtol_l.isra.0+0xd8>
    da26:	cbz	r6, da3c <_strtol_l.isra.0+0xcc>
    da28:	cbnz	r1, da64 <_strtol_l.isra.0+0xf4>
    da2a:	str	r7, [r6, #0]
    da2c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da30:	cmp	sl, r3
    da32:	bge.n	d9dc <_strtol_l.isra.0+0x6c>
    da34:	mov	r0, lr
    da36:	mov.w	r1, #4294967295
    da3a:	b.n	d9e2 <_strtol_l.isra.0+0x72>
    da3c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da40:	cmp	r2, #48	; 0x30
    da42:	beq.n	da7a <_strtol_l.isra.0+0x10a>
    da44:	movs	r5, #10
    da46:	b.n	d9bc <_strtol_l.isra.0+0x4c>
    da48:	negs	r0, r0
    da4a:	b.n	da26 <_strtol_l.isra.0+0xb6>
    da4c:	cmp.w	ip, #0
    da50:	mov.w	r3, #34	; 0x22
    da54:	ite	eq
    da56:	mvneq.w	r0, #2147483648	; 0x80000000
    da5a:	movne.w	r0, #2147483648	; 0x80000000
    da5e:	str.w	r3, [r8]
    da62:	cbz	r6, daa2 <_strtol_l.isra.0+0x132>
    da64:	subs	r7, r4, #1
    da66:	str	r7, [r6, #0]
    da68:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da6c:	add.w	r4, fp, #2
    da70:	ldrb.w	r2, [fp, #1]
    da74:	mov.w	ip, #1
    da78:	b.n	d9b4 <_strtol_l.isra.0+0x44>
    da7a:	ldrb	r3, [r4, #0]
    da7c:	and.w	r3, r3, #223	; 0xdf
    da80:	cmp	r3, #88	; 0x58
    da82:	beq.n	da96 <_strtol_l.isra.0+0x126>
    da84:	movs	r5, #8
    da86:	b.n	d9bc <_strtol_l.isra.0+0x4c>
    da88:	cmp	r2, #48	; 0x30
    da8a:	bne.n	d9bc <_strtol_l.isra.0+0x4c>
    da8c:	ldrb	r3, [r4, #0]
    da8e:	and.w	r3, r3, #223	; 0xdf
    da92:	cmp	r3, #88	; 0x58
    da94:	bne.n	d9bc <_strtol_l.isra.0+0x4c>
    da96:	mov.w	r9, #16
    da9a:	ldrb	r2, [r4, #1]
    da9c:	mov	r5, r9
    da9e:	adds	r4, #2
    daa0:	b.n	d9be <_strtol_l.isra.0+0x4e>
    daa2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    daa6:	nop

0000daa8 <_strtol_r>:
    daa8:	push	{r4, r5, lr}
    daaa:	ldr	r4, [pc, #24]	; (dac4 <_strtol_r+0x1c>)
    daac:	ldr	r5, [pc, #24]	; (dac8 <_strtol_r+0x20>)
    daae:	ldr	r4, [r4, #0]
    dab0:	ldr	r4, [r4, #52]	; 0x34
    dab2:	sub	sp, #12
    dab4:	cmp	r4, #0
    dab6:	it	eq
    dab8:	moveq	r4, r5
    daba:	str	r4, [sp, #0]
    dabc:	bl	d970 <_strtol_l.isra.0>
    dac0:	add	sp, #12
    dac2:	pop	{r4, r5, pc}
    dac4:	.word	0x20013dc8
    dac8:	.word	0x20013dcc
    dacc:	.word	0xffffffff

0000dad0 <_svfprintf_r>:
    dad0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dad4:	sub	sp, #260	; 0x104
    dad6:	mov	r4, r1
    dad8:	str	r1, [sp, #20]
    dada:	mov	r5, r2
    dadc:	str	r3, [sp, #40]	; 0x28
    dade:	str	r0, [sp, #24]
    dae0:	bl	11b28 <_localeconv_r>
    dae4:	ldr	r3, [r0, #0]
    dae6:	str	r3, [sp, #76]	; 0x4c
    dae8:	mov	r0, r3
    daea:	bl	c8c0 <strlen>
    daee:	ldrh	r3, [r4, #12]
    daf0:	str	r0, [sp, #72]	; 0x48
    daf2:	lsls	r6, r3, #24
    daf4:	bpl.n	dafe <_svfprintf_r+0x2e>
    daf6:	ldr	r3, [r4, #16]
    daf8:	cmp	r3, #0
    dafa:	beq.w	ed60 <_svfprintf_r+0x1290>
    dafe:	vldr	d7, [pc, #664]	; dd98 <_svfprintf_r+0x2c8>
    db02:	movs	r3, #0
    db04:	vstr	d7, [sp, #64]	; 0x40
    db08:	str	r3, [sp, #56]	; 0x38
    db0a:	str	r3, [sp, #148]	; 0x94
    db0c:	str	r3, [sp, #144]	; 0x90
    db0e:	str	r3, [sp, #84]	; 0x54
    db10:	str	r3, [sp, #28]
    db12:	ldr.w	sl, [pc, #656]	; dda4 <_svfprintf_r+0x2d4>
    db16:	add	r3, sp, #192	; 0xc0
    db18:	str	r3, [sp, #140]	; 0x8c
    db1a:	mov	r9, r3
    db1c:	mov	r8, r5
    db1e:	ldrb.w	r3, [r8]
    db22:	mov	r4, r8
    db24:	cbz	r3, db62 <_svfprintf_r+0x92>
    db26:	cmp	r3, #37	; 0x25
    db28:	bne.n	db30 <_svfprintf_r+0x60>
    db2a:	b.n	db62 <_svfprintf_r+0x92>
    db2c:	cmp	r3, #37	; 0x25
    db2e:	beq.n	db38 <_svfprintf_r+0x68>
    db30:	ldrb.w	r3, [r4, #1]!
    db34:	cmp	r3, #0
    db36:	bne.n	db2c <_svfprintf_r+0x5c>
    db38:	rsb	r5, r8, r4
    db3c:	cbz	r5, db62 <_svfprintf_r+0x92>
    db3e:	ldr	r3, [sp, #144]	; 0x90
    db40:	ldr	r2, [sp, #148]	; 0x94
    db42:	str.w	r8, [r9]
    db46:	adds	r3, #1
    db48:	add	r2, r5
    db4a:	cmp	r3, #7
    db4c:	str.w	r5, [r9, #4]
    db50:	str	r2, [sp, #148]	; 0x94
    db52:	str	r3, [sp, #144]	; 0x90
    db54:	bgt.w	dca4 <_svfprintf_r+0x1d4>
    db58:	add.w	r9, r9, #8
    db5c:	ldr	r3, [sp, #28]
    db5e:	add	r3, r5
    db60:	str	r3, [sp, #28]
    db62:	ldrb	r3, [r4, #0]
    db64:	cmp	r3, #0
    db66:	beq.w	dcb6 <_svfprintf_r+0x1e6>
    db6a:	movs	r3, #0
    db6c:	mov	r2, r3
    db6e:	strb.w	r3, [sp, #111]	; 0x6f
    db72:	mov	r1, r3
    db74:	str	r3, [sp, #32]
    db76:	str	r3, [sp, #12]
    db78:	mov.w	fp, #4294967295
    db7c:	ldrb	r3, [r4, #1]
    db7e:	add.w	r8, r4, #1
    db82:	mov	r5, fp
    db84:	add.w	r8, r8, #1
    db88:	sub.w	r0, r3, #32
    db8c:	cmp	r0, #88	; 0x58
    db8e:	bhi.w	e3fa <_svfprintf_r+0x92a>
    db92:	tbh	[pc, r0, lsl #1]
    db96:	.short	0x03a0
    db98:	.word	0x04320432
    db9c:	.word	0x043203a8
    dba0:	.word	0x04320432
    dba4:	.word	0x04320432
    dba8:	.word	0x03af0432
    dbac:	.word	0x043203bd
    dbb0:	.word	0x00e2005d
    dbb4:	.word	0x01090432
    dbb8:	.word	0x01100110
    dbbc:	.word	0x01100110
    dbc0:	.word	0x01100110
    dbc4:	.word	0x01100110
    dbc8:	.word	0x04320110
    dbcc:	.word	0x04320432
    dbd0:	.word	0x04320432
    dbd4:	.word	0x04320432
    dbd8:	.word	0x04320432
    dbdc:	.word	0x01200432
    dbe0:	.word	0x04320286
    dbe4:	.word	0x04320286
    dbe8:	.word	0x04320432
    dbec:	.word	0x02d40432
    dbf0:	.word	0x04320432
    dbf4:	.word	0x043202e5
    dbf8:	.word	0x04320432
    dbfc:	.word	0x04320432
    dc00:	.word	0x0432030f
    dc04:	.word	0x033d0432
    dc08:	.word	0x04320432
    dc0c:	.word	0x04320432
    dc10:	.word	0x04320432
    dc14:	.word	0x04320432
    dc18:	.word	0x04320432
    dc1c:	.word	0x0391037e
    dc20:	.word	0x02860286
    dc24:	.word	0x03990286
    dc28:	.word	0x04320391
    dc2c:	.word	0x04070432
    dc30:	.word	0x04120432
    dc34:	.word	0x006400a3
    dc38:	.word	0x043203c2
    dc3c:	.word	0x043203c9
    dc40:	.word	0x043203ea
    dc44:	.word	0x03f20432
    dc48:	ldr	r0, [sp, #32]
    dc4a:	str	r3, [sp, #40]	; 0x28
    dc4c:	negs	r0, r0
    dc4e:	str	r0, [sp, #32]
    dc50:	ldr	r3, [sp, #12]
    dc52:	orr.w	r3, r3, #4
    dc56:	str	r3, [sp, #12]
    dc58:	ldrb.w	r3, [r8]
    dc5c:	b.n	db84 <_svfprintf_r+0xb4>
    dc5e:	ldr	r0, [sp, #40]	; 0x28
    dc60:	mov	fp, r5
    dc62:	movs	r1, #0
    dc64:	ldr	r4, [r0, #0]
    dc66:	strb.w	r1, [sp, #111]	; 0x6f
    dc6a:	adds	r7, r0, #4
    dc6c:	ldr	r0, [sp, #12]
    dc6e:	movs	r3, #48	; 0x30
    dc70:	movs	r2, #120	; 0x78
    dc72:	cmp	fp, r1
    dc74:	strb.w	r3, [sp, #112]	; 0x70
    dc78:	mov.w	r5, #0
    dc7c:	strb.w	r2, [sp, #113]	; 0x71
    dc80:	orr.w	r3, r0, #2
    dc84:	blt.w	e434 <_svfprintf_r+0x964>
    dc88:	bic.w	r3, r0, #128	; 0x80
    dc8c:	orr.w	r3, r3, #2
    dc90:	str	r3, [sp, #12]
    dc92:	orrs.w	r3, r4, r5
    dc96:	str	r7, [sp, #40]	; 0x28
    dc98:	beq.w	e3e0 <_svfprintf_r+0x910>
    dc9c:	mov	r7, r1
    dc9e:	str	r2, [sp, #52]	; 0x34
    dca0:	ldr	r0, [pc, #252]	; (dda0 <_svfprintf_r+0x2d0>)
    dca2:	b.n	e272 <_svfprintf_r+0x7a2>
    dca4:	add	r2, sp, #140	; 0x8c
    dca6:	ldr	r1, [sp, #20]
    dca8:	ldr	r0, [sp, #24]
    dcaa:	bl	12a68 <__ssprint_r>
    dcae:	cbnz	r0, dcc4 <_svfprintf_r+0x1f4>
    dcb0:	add.w	r9, sp, #192	; 0xc0
    dcb4:	b.n	db5c <_svfprintf_r+0x8c>
    dcb6:	ldr	r3, [sp, #148]	; 0x94
    dcb8:	cbz	r3, dcc4 <_svfprintf_r+0x1f4>
    dcba:	ldr	r0, [sp, #24]
    dcbc:	ldr	r1, [sp, #20]
    dcbe:	add	r2, sp, #140	; 0x8c
    dcc0:	bl	12a68 <__ssprint_r>
    dcc4:	ldr	r3, [sp, #20]
    dcc6:	ldrh	r3, [r3, #12]
    dcc8:	tst.w	r3, #64	; 0x40
    dccc:	ldr	r3, [sp, #28]
    dcce:	it	ne
    dcd0:	movne.w	r3, #4294967295
    dcd4:	mov	r0, r3
    dcd6:	add	sp, #260	; 0x104
    dcd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcdc:	str	r3, [sp, #52]	; 0x34
    dcde:	mov	fp, r5
    dce0:	cmp	r2, #0
    dce2:	bne.w	f14c <_svfprintf_r+0x167c>
    dce6:	ldr	r2, [sp, #12]
    dce8:	ands.w	r3, r2, #32
    dcec:	beq.w	e17c <_svfprintf_r+0x6ac>
    dcf0:	ldr	r7, [sp, #40]	; 0x28
    dcf2:	adds	r7, #7
    dcf4:	bic.w	r3, r7, #7
    dcf8:	movs	r7, #0
    dcfa:	add.w	r1, r3, #8
    dcfe:	cmp	fp, r7
    dd00:	str	r1, [sp, #40]	; 0x28
    dd02:	ldrd	r4, r5, [r3]
    dd06:	strb.w	r7, [sp, #111]	; 0x6f
    dd0a:	blt.w	ebd2 <_svfprintf_r+0x1102>
    dd0e:	bic.w	r3, r2, #128	; 0x80
    dd12:	str	r3, [sp, #12]
    dd14:	orrs.w	r3, r4, r5
    dd18:	beq.w	e424 <_svfprintf_r+0x954>
    dd1c:	add	r6, sp, #192	; 0xc0
    dd1e:	lsrs	r2, r4, #3
    dd20:	orr.w	r2, r2, r5, lsl #29
    dd24:	lsrs	r1, r5, #3
    dd26:	and.w	r3, r4, #7
    dd2a:	mov	r5, r1
    dd2c:	mov	r4, r2
    dd2e:	adds	r3, #48	; 0x30
    dd30:	orrs.w	r2, r4, r5
    dd34:	strb.w	r3, [r6, #-1]!
    dd38:	bne.n	dd1e <_svfprintf_r+0x24e>
    dd3a:	ldr	r2, [sp, #12]
    dd3c:	lsls	r1, r2, #31
    dd3e:	bpl.w	de60 <_svfprintf_r+0x390>
    dd42:	cmp	r3, #48	; 0x30
    dd44:	beq.w	de60 <_svfprintf_r+0x390>
    dd48:	movs	r2, #48	; 0x30
    dd4a:	subs	r3, r6, #1
    dd4c:	strb.w	r2, [r6, #-1]
    dd50:	add	r2, sp, #192	; 0xc0
    dd52:	subs	r2, r2, r3
    dd54:	str	r2, [sp, #36]	; 0x24
    dd56:	mov	r6, r3
    dd58:	b.n	de66 <_svfprintf_r+0x396>
    dd5a:	ldrb.w	r3, [r8]
    dd5e:	cmp	r3, #42	; 0x2a
    dd60:	add.w	r4, r8, #1
    dd64:	beq.w	f130 <_svfprintf_r+0x1660>
    dd68:	sub.w	r0, r3, #48	; 0x30
    dd6c:	cmp	r0, #9
    dd6e:	it	ls
    dd70:	movls	r5, #0
    dd72:	bhi.w	f082 <_svfprintf_r+0x15b2>
    dd76:	ldrb.w	r3, [r4], #1
    dd7a:	add.w	r5, r5, r5, lsl #2
    dd7e:	add.w	r5, r0, r5, lsl #1
    dd82:	sub.w	r0, r3, #48	; 0x30
    dd86:	cmp	r0, #9
    dd88:	bls.n	dd76 <_svfprintf_r+0x2a6>
    dd8a:	orr.w	r5, r5, r5, asr #31
    dd8e:	mov	r8, r4
    dd90:	b.n	db88 <_svfprintf_r+0xb8>
    dd92:	nop
    dd94:	nop.w
	...
    dda0:	.word	0x0001390c
    dda4:	.word	0x000138d8
    dda8:	ldr	r3, [sp, #12]
    ddaa:	orr.w	r3, r3, #128	; 0x80
    ddae:	str	r3, [sp, #12]
    ddb0:	ldrb.w	r3, [r8]
    ddb4:	b.n	db84 <_svfprintf_r+0xb4>
    ddb6:	sub.w	r0, r3, #48	; 0x30
    ddba:	movs	r3, #0
    ddbc:	mov	r4, r3
    ddbe:	ldrb.w	r3, [r8], #1
    ddc2:	add.w	r4, r4, r4, lsl #2
    ddc6:	add.w	r4, r0, r4, lsl #1
    ddca:	sub.w	r0, r3, #48	; 0x30
    ddce:	cmp	r0, #9
    ddd0:	bls.n	ddbe <_svfprintf_r+0x2ee>
    ddd2:	str	r4, [sp, #32]
    ddd4:	b.n	db88 <_svfprintf_r+0xb8>
    ddd6:	str	r3, [sp, #52]	; 0x34
    ddd8:	mov	fp, r5
    ddda:	cmp	r2, #0
    dddc:	bne.w	f168 <_svfprintf_r+0x1698>
    dde0:	ldr	r3, [sp, #12]
    dde2:	orr.w	r3, r3, #16
    dde6:	str	r3, [sp, #12]
    dde8:	ldr	r3, [sp, #12]
    ddea:	lsls	r4, r3, #26
    ddec:	bpl.w	e85e <_svfprintf_r+0xd8e>
    ddf0:	ldr	r7, [sp, #40]	; 0x28
    ddf2:	adds	r7, #7
    ddf4:	bic.w	r7, r7, #7
    ddf8:	ldrd	r2, r3, [r7]
    ddfc:	add.w	r1, r7, #8
    de00:	str	r1, [sp, #40]	; 0x28
    de02:	mov	r4, r2
    de04:	mov	r5, r3
    de06:	cmp	r2, #0
    de08:	sbcs.w	r3, r3, #0
    de0c:	blt.w	e8d4 <_svfprintf_r+0xe04>
    de10:	cmp.w	fp, #0
    de14:	ldrb.w	r7, [sp, #111]	; 0x6f
    de18:	blt.w	e89a <_svfprintf_r+0xdca>
    de1c:	ldr	r3, [sp, #12]
    de1e:	bic.w	r3, r3, #128	; 0x80
    de22:	str	r3, [sp, #12]
    de24:	orrs.w	r3, r4, r5
    de28:	beq.w	e1fc <_svfprintf_r+0x72c>
    de2c:	cmp	r5, #0
    de2e:	it	eq
    de30:	cmpeq	r4, #10
    de32:	bcc.w	e206 <_svfprintf_r+0x736>
    de36:	add	r6, sp, #192	; 0xc0
    de38:	mov	r0, r4
    de3a:	mov	r1, r5
    de3c:	movs	r2, #10
    de3e:	movs	r3, #0
    de40:	bl	b664 <__aeabi_uldivmod>
    de44:	adds	r2, #48	; 0x30
    de46:	strb.w	r2, [r6, #-1]!
    de4a:	mov	r0, r4
    de4c:	mov	r1, r5
    de4e:	movs	r3, #0
    de50:	movs	r2, #10
    de52:	bl	b664 <__aeabi_uldivmod>
    de56:	mov	r4, r0
    de58:	mov	r5, r1
    de5a:	orrs.w	r3, r4, r5
    de5e:	bne.n	de38 <_svfprintf_r+0x368>
    de60:	add	r3, sp, #192	; 0xc0
    de62:	subs	r3, r3, r6
    de64:	str	r3, [sp, #36]	; 0x24
    de66:	ldr	r3, [sp, #36]	; 0x24
    de68:	cmp	r3, fp
    de6a:	it	lt
    de6c:	movlt	r3, fp
    de6e:	str	r3, [sp, #16]
    de70:	movs	r3, #0
    de72:	str	r3, [sp, #60]	; 0x3c
    de74:	cbz	r7, de7c <_svfprintf_r+0x3ac>
    de76:	ldr	r3, [sp, #16]
    de78:	adds	r3, #1
    de7a:	str	r3, [sp, #16]
    de7c:	ldr	r3, [sp, #12]
    de7e:	ands.w	r3, r3, #2
    de82:	str	r3, [sp, #44]	; 0x2c
    de84:	beq.n	de8c <_svfprintf_r+0x3bc>
    de86:	ldr	r3, [sp, #16]
    de88:	adds	r3, #2
    de8a:	str	r3, [sp, #16]
    de8c:	ldr	r3, [sp, #12]
    de8e:	ands.w	r3, r3, #132	; 0x84
    de92:	str	r3, [sp, #48]	; 0x30
    de94:	bne.w	e44e <_svfprintf_r+0x97e>
    de98:	ldr	r3, [sp, #32]
    de9a:	ldr	r2, [sp, #16]
    de9c:	subs	r5, r3, r2
    de9e:	cmp	r5, #0
    dea0:	ble.w	e44e <_svfprintf_r+0x97e>
    dea4:	cmp	r5, #16
    dea6:	ldr	r1, [sp, #148]	; 0x94
    dea8:	ldr	r2, [sp, #144]	; 0x90
    deaa:	ldr	r7, [pc, #672]	; (e14c <_svfprintf_r+0x67c>)
    deac:	ble.n	defe <_svfprintf_r+0x42e>
    deae:	str	r6, [sp, #80]	; 0x50
    deb0:	mov	r0, r9
    deb2:	movs	r4, #16
    deb4:	mov	r9, r7
    deb6:	ldr	r6, [sp, #20]
    deb8:	mov	r7, r5
    deba:	ldr	r5, [sp, #24]
    debc:	b.n	dec8 <_svfprintf_r+0x3f8>
    debe:	subs	r7, #16
    dec0:	cmp	r7, #16
    dec2:	add.w	r0, r0, #8
    dec6:	ble.n	def6 <_svfprintf_r+0x426>
    dec8:	adds	r2, #1
    deca:	ldr	r3, [pc, #640]	; (e14c <_svfprintf_r+0x67c>)
    decc:	str	r2, [sp, #144]	; 0x90
    dece:	adds	r1, #16
    ded0:	cmp	r2, #7
    ded2:	str	r1, [sp, #148]	; 0x94
    ded4:	stmia.w	r0, {r3, r4}
    ded8:	ble.n	debe <_svfprintf_r+0x3ee>
    deda:	add	r2, sp, #140	; 0x8c
    dedc:	mov	r1, r6
    dede:	mov	r0, r5
    dee0:	bl	12a68 <__ssprint_r>
    dee4:	cmp	r0, #0
    dee6:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    deea:	subs	r7, #16
    deec:	cmp	r7, #16
    deee:	ldr	r1, [sp, #148]	; 0x94
    def0:	ldr	r2, [sp, #144]	; 0x90
    def2:	add	r0, sp, #192	; 0xc0
    def4:	bgt.n	dec8 <_svfprintf_r+0x3f8>
    def6:	ldr	r6, [sp, #80]	; 0x50
    def8:	mov	r5, r7
    defa:	mov	r7, r9
    defc:	mov	r9, r0
    defe:	adds	r2, #1
    df00:	adds	r4, r5, r1
    df02:	cmp	r2, #7
    df04:	str	r4, [sp, #148]	; 0x94
    df06:	str	r2, [sp, #144]	; 0x90
    df08:	str.w	r7, [r9]
    df0c:	str.w	r5, [r9, #4]
    df10:	bgt.w	e76e <_svfprintf_r+0xc9e>
    df14:	ldrb.w	r7, [sp, #111]	; 0x6f
    df18:	add.w	r9, r9, #8
    df1c:	cbz	r7, df3c <_svfprintf_r+0x46c>
    df1e:	ldr	r3, [sp, #144]	; 0x90
    df20:	adds	r3, #1
    df22:	adds	r4, #1
    df24:	add.w	r1, sp, #111	; 0x6f
    df28:	movs	r2, #1
    df2a:	cmp	r3, #7
    df2c:	str	r4, [sp, #148]	; 0x94
    df2e:	str	r3, [sp, #144]	; 0x90
    df30:	stmia.w	r9, {r1, r2}
    df34:	bgt.w	e682 <_svfprintf_r+0xbb2>
    df38:	add.w	r9, r9, #8
    df3c:	ldr	r3, [sp, #44]	; 0x2c
    df3e:	cbz	r3, df5c <_svfprintf_r+0x48c>
    df40:	ldr	r3, [sp, #144]	; 0x90
    df42:	adds	r3, #1
    df44:	adds	r4, #2
    df46:	add	r1, sp, #112	; 0x70
    df48:	movs	r2, #2
    df4a:	cmp	r3, #7
    df4c:	str	r4, [sp, #148]	; 0x94
    df4e:	str	r3, [sp, #144]	; 0x90
    df50:	stmia.w	r9, {r1, r2}
    df54:	bgt.w	e69a <_svfprintf_r+0xbca>
    df58:	add.w	r9, r9, #8
    df5c:	ldr	r3, [sp, #48]	; 0x30
    df5e:	cmp	r3, #128	; 0x80
    df60:	beq.w	e526 <_svfprintf_r+0xa56>
    df64:	ldr	r3, [sp, #36]	; 0x24
    df66:	rsb	r7, r3, fp
    df6a:	cmp	r7, #0
    df6c:	ble.n	dfd6 <_svfprintf_r+0x506>
    df6e:	ldr	r2, [pc, #480]	; (e150 <_svfprintf_r+0x680>)
    df70:	ldr	r3, [sp, #144]	; 0x90
    df72:	str	r2, [sp, #44]	; 0x2c
    df74:	cmp	r7, #16
    df76:	ble.n	dfbe <_svfprintf_r+0x4ee>
    df78:	mov	r2, r4
    df7a:	mov.w	fp, #16
    df7e:	ldr	r5, [sp, #24]
    df80:	ldr	r4, [sp, #20]
    df82:	b.n	df8e <_svfprintf_r+0x4be>
    df84:	subs	r7, #16
    df86:	cmp	r7, #16
    df88:	add.w	r9, r9, #8
    df8c:	ble.n	dfbc <_svfprintf_r+0x4ec>
    df8e:	adds	r3, #1
    df90:	adds	r2, #16
    df92:	cmp	r3, #7
    df94:	str	r2, [sp, #148]	; 0x94
    df96:	str	r3, [sp, #144]	; 0x90
    df98:	stmia.w	r9, {sl, fp}
    df9c:	ble.n	df84 <_svfprintf_r+0x4b4>
    df9e:	add	r2, sp, #140	; 0x8c
    dfa0:	mov	r1, r4
    dfa2:	mov	r0, r5
    dfa4:	bl	12a68 <__ssprint_r>
    dfa8:	cmp	r0, #0
    dfaa:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    dfae:	subs	r7, #16
    dfb0:	cmp	r7, #16
    dfb2:	ldr	r2, [sp, #148]	; 0x94
    dfb4:	ldr	r3, [sp, #144]	; 0x90
    dfb6:	add.w	r9, sp, #192	; 0xc0
    dfba:	bgt.n	df8e <_svfprintf_r+0x4be>
    dfbc:	mov	r4, r2
    dfbe:	adds	r3, #1
    dfc0:	ldr	r2, [sp, #44]	; 0x2c
    dfc2:	str	r3, [sp, #144]	; 0x90
    dfc4:	add	r4, r7
    dfc6:	cmp	r3, #7
    dfc8:	str	r4, [sp, #148]	; 0x94
    dfca:	stmia.w	r9, {r2, r7}
    dfce:	bgt.w	e66a <_svfprintf_r+0xb9a>
    dfd2:	add.w	r9, r9, #8
    dfd6:	ldr	r3, [sp, #12]
    dfd8:	lsls	r2, r3, #23
    dfda:	bmi.w	e452 <_svfprintf_r+0x982>
    dfde:	ldr	r3, [sp, #144]	; 0x90
    dfe0:	ldr	r1, [sp, #36]	; 0x24
    dfe2:	str.w	r6, [r9]
    dfe6:	adds	r3, #1
    dfe8:	add	r4, r1
    dfea:	cmp	r3, #7
    dfec:	str	r4, [sp, #148]	; 0x94
    dfee:	str.w	r1, [r9, #4]
    dff2:	str	r3, [sp, #144]	; 0x90
    dff4:	bgt.w	e63e <_svfprintf_r+0xb6e>
    dff8:	add.w	r9, r9, #8
    dffc:	ldr	r3, [sp, #12]
    dffe:	lsls	r1, r3, #29
    e000:	bpl.n	e082 <_svfprintf_r+0x5b2>
    e002:	ldr	r3, [sp, #32]
    e004:	ldr	r2, [sp, #16]
    e006:	subs	r5, r3, r2
    e008:	cmp	r5, #0
    e00a:	ble.n	e082 <_svfprintf_r+0x5b2>
    e00c:	cmp	r5, #16
    e00e:	ldr	r3, [sp, #144]	; 0x90
    e010:	ldr	r7, [pc, #312]	; (e14c <_svfprintf_r+0x67c>)
    e012:	ble.n	e05c <_svfprintf_r+0x58c>
    e014:	mov	r2, r4
    e016:	movs	r6, #16
    e018:	ldr.w	fp, [sp, #24]
    e01c:	ldr	r4, [sp, #20]
    e01e:	b.n	e02a <_svfprintf_r+0x55a>
    e020:	subs	r5, #16
    e022:	cmp	r5, #16
    e024:	add.w	r9, r9, #8
    e028:	ble.n	e05a <_svfprintf_r+0x58a>
    e02a:	adds	r3, #1
    e02c:	ldr	r1, [pc, #284]	; (e14c <_svfprintf_r+0x67c>)
    e02e:	str	r3, [sp, #144]	; 0x90
    e030:	adds	r2, #16
    e032:	cmp	r3, #7
    e034:	str	r2, [sp, #148]	; 0x94
    e036:	stmia.w	r9, {r1, r6}
    e03a:	ble.n	e020 <_svfprintf_r+0x550>
    e03c:	add	r2, sp, #140	; 0x8c
    e03e:	mov	r1, r4
    e040:	mov	r0, fp
    e042:	bl	12a68 <__ssprint_r>
    e046:	cmp	r0, #0
    e048:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e04c:	subs	r5, #16
    e04e:	cmp	r5, #16
    e050:	ldr	r2, [sp, #148]	; 0x94
    e052:	ldr	r3, [sp, #144]	; 0x90
    e054:	add.w	r9, sp, #192	; 0xc0
    e058:	bgt.n	e02a <_svfprintf_r+0x55a>
    e05a:	mov	r4, r2
    e05c:	adds	r3, #1
    e05e:	add	r4, r5
    e060:	cmp	r3, #7
    e062:	str	r4, [sp, #148]	; 0x94
    e064:	str	r3, [sp, #144]	; 0x90
    e066:	str.w	r7, [r9]
    e06a:	str.w	r5, [r9, #4]
    e06e:	ble.n	e082 <_svfprintf_r+0x5b2>
    e070:	add	r2, sp, #140	; 0x8c
    e072:	ldr	r1, [sp, #20]
    e074:	ldr	r0, [sp, #24]
    e076:	bl	12a68 <__ssprint_r>
    e07a:	cmp	r0, #0
    e07c:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e080:	ldr	r4, [sp, #148]	; 0x94
    e082:	ldr	r3, [sp, #28]
    e084:	ldr	r2, [sp, #32]
    e086:	ldr	r1, [sp, #16]
    e088:	cmp	r2, r1
    e08a:	ite	ge
    e08c:	addge	r3, r3, r2
    e08e:	addlt	r3, r3, r1
    e090:	str	r3, [sp, #28]
    e092:	cmp	r4, #0
    e094:	bne.w	e656 <_svfprintf_r+0xb86>
    e098:	movs	r3, #0
    e09a:	str	r3, [sp, #144]	; 0x90
    e09c:	add.w	r9, sp, #192	; 0xc0
    e0a0:	b.n	db1e <_svfprintf_r+0x4e>
    e0a2:	str	r3, [sp, #52]	; 0x34
    e0a4:	mov	fp, r5
    e0a6:	cmp	r2, #0
    e0a8:	bne.w	f170 <_svfprintf_r+0x16a0>
    e0ac:	ldr	r3, [sp, #12]
    e0ae:	ldr	r7, [sp, #40]	; 0x28
    e0b0:	lsls	r2, r3, #28
    e0b2:	add.w	r7, r7, #7
    e0b6:	bpl.w	eba2 <_svfprintf_r+0x10d2>
    e0ba:	bic.w	r3, r7, #7
    e0be:	vldr	d7, [r3]
    e0c2:	vstr	d7, [sp, #64]	; 0x40
    e0c6:	add.w	r2, r3, #8
    e0ca:	str	r2, [sp, #40]	; 0x28
    e0cc:	ldrd	r1, r2, [sp, #64]	; 0x40
    e0d0:	bic.w	r3, r2, #2147483648	; 0x80000000
    e0d4:	str	r1, [sp, #88]	; 0x58
    e0d6:	str	r3, [sp, #92]	; 0x5c
    e0d8:	ldrd	r4, r5, [sp, #88]	; 0x58
    e0dc:	mov.w	r2, #4294967295
    e0e0:	mov	r0, r4
    e0e2:	mov	r1, r5
    e0e4:	ldr	r3, [pc, #108]	; (e154 <_svfprintf_r+0x684>)
    e0e6:	bl	b508 <__aeabi_dcmpun>
    e0ea:	cmp	r0, #0
    e0ec:	bne.w	eaa4 <_svfprintf_r+0xfd4>
    e0f0:	mov.w	r2, #4294967295
    e0f4:	ldr	r3, [pc, #92]	; (e154 <_svfprintf_r+0x684>)
    e0f6:	mov	r0, r4
    e0f8:	mov	r1, r5
    e0fa:	bl	b4cc <__aeabi_dcmple>
    e0fe:	cmp	r0, #0
    e100:	bne.w	eaa4 <_svfprintf_r+0xfd4>
    e104:	movs	r2, #0
    e106:	movs	r3, #0
    e108:	ldrd	r0, r1, [sp, #64]	; 0x40
    e10c:	bl	b4b8 <__aeabi_dcmplt>
    e110:	cmp	r0, #0
    e112:	bne.w	efba <_svfprintf_r+0x14ea>
    e116:	ldrb.w	r7, [sp, #111]	; 0x6f
    e11a:	ldr	r6, [pc, #60]	; (e158 <_svfprintf_r+0x688>)
    e11c:	ldr	r3, [pc, #60]	; (e15c <_svfprintf_r+0x68c>)
    e11e:	ldr	r1, [sp, #12]
    e120:	bic.w	r1, r1, #128	; 0x80
    e124:	str	r1, [sp, #12]
    e126:	ldr	r1, [sp, #52]	; 0x34
    e128:	movs	r2, #3
    e12a:	mov.w	fp, #0
    e12e:	str	r2, [sp, #16]
    e130:	cmp	r1, #71	; 0x47
    e132:	it	le
    e134:	movle	r6, r3
    e136:	str	r2, [sp, #36]	; 0x24
    e138:	str.w	fp, [sp, #60]	; 0x3c
    e13c:	b.n	de74 <_svfprintf_r+0x3a4>
    e13e:	ldr	r3, [sp, #12]
    e140:	orr.w	r3, r3, #8
    e144:	str	r3, [sp, #12]
    e146:	ldrb.w	r3, [r8]
    e14a:	b.n	db84 <_svfprintf_r+0xb4>
    e14c:	.word	0x0001392c
    e150:	.word	0x000138d8
    e154:	.word	0x7fefffff
    e158:	.word	0x000138ec
    e15c:	.word	0x000138e8
    e160:	str	r3, [sp, #52]	; 0x34
    e162:	mov	fp, r5
    e164:	cmp	r2, #0
    e166:	bne.w	f188 <_svfprintf_r+0x16b8>
    e16a:	ldr	r3, [sp, #12]
    e16c:	orr.w	r3, r3, #16
    e170:	str	r3, [sp, #12]
    e172:	ldr	r2, [sp, #12]
    e174:	ands.w	r3, r2, #32
    e178:	bne.w	dcf0 <_svfprintf_r+0x220>
    e17c:	ldr	r1, [sp, #12]
    e17e:	ands.w	r2, r1, #16
    e182:	beq.w	ea3c <_svfprintf_r+0xf6c>
    e186:	ldr	r0, [sp, #40]	; 0x28
    e188:	strb.w	r3, [sp, #111]	; 0x6f
    e18c:	cmp.w	fp, #0
    e190:	ldr	r4, [r0, #0]
    e192:	add.w	r7, r0, #4
    e196:	mov.w	r5, #0
    e19a:	blt.w	ebd0 <_svfprintf_r+0x1100>
    e19e:	mov	r2, r1
    e1a0:	bic.w	r2, r2, #128	; 0x80
    e1a4:	str	r2, [sp, #12]
    e1a6:	orrs.w	r2, r4, r5
    e1aa:	str	r7, [sp, #40]	; 0x28
    e1ac:	beq.w	e424 <_svfprintf_r+0x954>
    e1b0:	mov	r7, r3
    e1b2:	b.n	dd1c <_svfprintf_r+0x24c>
    e1b4:	str	r3, [sp, #52]	; 0x34
    e1b6:	mov	fp, r5
    e1b8:	cmp	r2, #0
    e1ba:	bne.w	f180 <_svfprintf_r+0x16b0>
    e1be:	ldr	r3, [sp, #12]
    e1c0:	orr.w	r3, r3, #16
    e1c4:	str	r3, [sp, #12]
    e1c6:	ldr	r2, [sp, #12]
    e1c8:	ands.w	r3, r2, #32
    e1cc:	beq.w	e828 <_svfprintf_r+0xd58>
    e1d0:	ldr	r7, [sp, #40]	; 0x28
    e1d2:	adds	r7, #7
    e1d4:	bic.w	r3, r7, #7
    e1d8:	movs	r7, #0
    e1da:	add.w	r1, r3, #8
    e1de:	cmp	fp, r7
    e1e0:	str	r1, [sp, #40]	; 0x28
    e1e2:	ldrd	r4, r5, [r3]
    e1e6:	strb.w	r7, [sp, #111]	; 0x6f
    e1ea:	blt.w	e89a <_svfprintf_r+0xdca>
    e1ee:	bic.w	r3, r2, #128	; 0x80
    e1f2:	str	r3, [sp, #12]
    e1f4:	orrs.w	r3, r4, r5
    e1f8:	bne.w	de2c <_svfprintf_r+0x35c>
    e1fc:	cmp.w	fp, #0
    e200:	beq.w	e3ee <_svfprintf_r+0x91e>
    e204:	movs	r4, #0
    e206:	add	r6, sp, #256	; 0x100
    e208:	adds	r4, #48	; 0x30
    e20a:	strb.w	r4, [r6, #-65]!
    e20e:	b.n	de60 <_svfprintf_r+0x390>
    e210:	str	r3, [sp, #52]	; 0x34
    e212:	mov	fp, r5
    e214:	cmp	r2, #0
    e216:	bne.w	f178 <_svfprintf_r+0x16a8>
    e21a:	ldr	r3, [sp, #12]
    e21c:	ldr	r0, [pc, #700]	; (e4dc <_svfprintf_r+0xa0c>)
    e21e:	lsls	r5, r3, #26
    e220:	bpl.w	e38e <_svfprintf_r+0x8be>
    e224:	ldr	r7, [sp, #40]	; 0x28
    e226:	adds	r7, #7
    e228:	bic.w	r3, r7, #7
    e22c:	ldrd	r4, r5, [r3]
    e230:	add.w	r2, r3, #8
    e234:	str	r2, [sp, #40]	; 0x28
    e236:	ldr	r2, [sp, #12]
    e238:	ands.w	r7, r2, #1
    e23c:	beq.w	e6b2 <_svfprintf_r+0xbe2>
    e240:	orrs.w	r3, r4, r5
    e244:	beq.w	ec4c <_svfprintf_r+0x117c>
    e248:	ldrb.w	r2, [sp, #52]	; 0x34
    e24c:	strb.w	r2, [sp, #113]	; 0x71
    e250:	movs	r7, #0
    e252:	ldr	r2, [sp, #12]
    e254:	strb.w	r7, [sp, #111]	; 0x6f
    e258:	movs	r3, #48	; 0x30
    e25a:	cmp	fp, r7
    e25c:	strb.w	r3, [sp, #112]	; 0x70
    e260:	orr.w	r3, r2, #2
    e264:	blt.w	efc4 <_svfprintf_r+0x14f4>
    e268:	bic.w	r3, r2, #128	; 0x80
    e26c:	orr.w	r3, r3, #2
    e270:	str	r3, [sp, #12]
    e272:	add	r6, sp, #192	; 0xc0
    e274:	lsrs	r3, r4, #4
    e276:	and.w	r1, r4, #15
    e27a:	orr.w	r3, r3, r5, lsl #28
    e27e:	lsrs	r2, r5, #4
    e280:	mov	r4, r3
    e282:	mov	r5, r2
    e284:	ldrb	r3, [r0, r1]
    e286:	strb.w	r3, [r6, #-1]!
    e28a:	orrs.w	r3, r4, r5
    e28e:	bne.n	e274 <_svfprintf_r+0x7a4>
    e290:	b.n	de60 <_svfprintf_r+0x390>
    e292:	ldr	r1, [sp, #40]	; 0x28
    e294:	str	r3, [sp, #52]	; 0x34
    e296:	ldr	r2, [r1, #0]
    e298:	strb.w	r2, [sp, #152]	; 0x98
    e29c:	movs	r3, #0
    e29e:	mov	r2, r1
    e2a0:	mov	r7, r3
    e2a2:	strb.w	r3, [sp, #111]	; 0x6f
    e2a6:	adds	r2, #4
    e2a8:	movs	r3, #1
    e2aa:	str	r3, [sp, #16]
    e2ac:	mov	fp, r7
    e2ae:	str	r7, [sp, #60]	; 0x3c
    e2b0:	str	r2, [sp, #40]	; 0x28
    e2b2:	str	r3, [sp, #36]	; 0x24
    e2b4:	add	r6, sp, #152	; 0x98
    e2b6:	b.n	de7c <_svfprintf_r+0x3ac>
    e2b8:	str	r3, [sp, #52]	; 0x34
    e2ba:	mov	fp, r5
    e2bc:	cmp	r2, #0
    e2be:	beq.w	dde8 <_svfprintf_r+0x318>
    e2c2:	strb.w	r1, [sp, #111]	; 0x6f
    e2c6:	b.n	dde8 <_svfprintf_r+0x318>
    e2c8:	ldr	r3, [sp, #12]
    e2ca:	orr.w	r3, r3, #64	; 0x40
    e2ce:	str	r3, [sp, #12]
    e2d0:	ldrb.w	r3, [r8]
    e2d4:	b.n	db84 <_svfprintf_r+0xb4>
    e2d6:	ldrb.w	r3, [r8]
    e2da:	cmp	r1, #0
    e2dc:	bne.w	db84 <_svfprintf_r+0xb4>
    e2e0:	movs	r2, #1
    e2e2:	movs	r1, #32
    e2e4:	b.n	db84 <_svfprintf_r+0xb4>
    e2e6:	ldr	r3, [sp, #12]
    e2e8:	orr.w	r3, r3, #1
    e2ec:	str	r3, [sp, #12]
    e2ee:	ldrb.w	r3, [r8]
    e2f2:	b.n	db84 <_svfprintf_r+0xb4>
    e2f4:	ldr	r4, [sp, #40]	; 0x28
    e2f6:	ldr	r3, [r4, #0]
    e2f8:	str	r3, [sp, #32]
    e2fa:	mov	r0, r3
    e2fc:	cmp	r0, #0
    e2fe:	mov	r3, r4
    e300:	add.w	r3, r3, #4
    e304:	blt.w	dc48 <_svfprintf_r+0x178>
    e308:	str	r3, [sp, #40]	; 0x28
    e30a:	ldrb.w	r3, [r8]
    e30e:	b.n	db84 <_svfprintf_r+0xb4>
    e310:	ldrb.w	r3, [r8]
    e314:	movs	r2, #1
    e316:	movs	r1, #43	; 0x2b
    e318:	b.n	db84 <_svfprintf_r+0xb4>
    e31a:	ldr	r3, [sp, #12]
    e31c:	orr.w	r3, r3, #32
    e320:	str	r3, [sp, #12]
    e322:	ldrb.w	r3, [r8]
    e326:	b.n	db84 <_svfprintf_r+0xb4>
    e328:	ldr	r2, [sp, #40]	; 0x28
    e32a:	str	r3, [sp, #52]	; 0x34
    e32c:	ldr	r6, [r2, #0]
    e32e:	movs	r4, #0
    e330:	strb.w	r4, [sp, #111]	; 0x6f
    e334:	adds	r7, r2, #4
    e336:	cmp	r6, #0
    e338:	beq.w	ef74 <_svfprintf_r+0x14a4>
    e33c:	cmp	r5, #0
    e33e:	blt.w	ee04 <_svfprintf_r+0x1334>
    e342:	mov	r2, r5
    e344:	mov	r1, r4
    e346:	mov	r0, r6
    e348:	bl	bff0 <memchr>
    e34c:	cmp	r0, #0
    e34e:	beq.w	f018 <_svfprintf_r+0x1548>
    e352:	subs	r3, r0, r6
    e354:	str	r3, [sp, #36]	; 0x24
    e356:	mov	fp, r4
    e358:	bic.w	r3, r3, r3, asr #31
    e35c:	str	r7, [sp, #40]	; 0x28
    e35e:	str	r3, [sp, #16]
    e360:	str.w	fp, [sp, #60]	; 0x3c
    e364:	ldrb.w	r7, [sp, #111]	; 0x6f
    e368:	b.n	de74 <_svfprintf_r+0x3a4>
    e36a:	str	r3, [sp, #52]	; 0x34
    e36c:	mov	fp, r5
    e36e:	cmp	r2, #0
    e370:	beq.w	e1c6 <_svfprintf_r+0x6f6>
    e374:	strb.w	r1, [sp, #111]	; 0x6f
    e378:	b.n	e1c6 <_svfprintf_r+0x6f6>
    e37a:	str	r3, [sp, #52]	; 0x34
    e37c:	mov	fp, r5
    e37e:	cmp	r2, #0
    e380:	bne.w	f1a0 <_svfprintf_r+0x16d0>
    e384:	ldr	r3, [sp, #12]
    e386:	ldr	r0, [pc, #344]	; (e4e0 <_svfprintf_r+0xa10>)
    e388:	lsls	r5, r3, #26
    e38a:	bmi.w	e224 <_svfprintf_r+0x754>
    e38e:	ldr	r3, [sp, #12]
    e390:	lsls	r4, r3, #27
    e392:	bpl.w	ec12 <_svfprintf_r+0x1142>
    e396:	ldr	r2, [sp, #40]	; 0x28
    e398:	mov	r3, r2
    e39a:	adds	r3, #4
    e39c:	ldr	r4, [r2, #0]
    e39e:	str	r3, [sp, #40]	; 0x28
    e3a0:	movs	r5, #0
    e3a2:	b.n	e236 <_svfprintf_r+0x766>
    e3a4:	ldrb.w	r3, [r8]
    e3a8:	cmp	r3, #108	; 0x6c
    e3aa:	beq.w	ed32 <_svfprintf_r+0x1262>
    e3ae:	ldr	r0, [sp, #12]
    e3b0:	orr.w	r0, r0, #16
    e3b4:	str	r0, [sp, #12]
    e3b6:	b.w	db84 <_svfprintf_r+0xb4>
    e3ba:	cmp	r2, #0
    e3bc:	bne.w	f198 <_svfprintf_r+0x16c8>
    e3c0:	ldr	r3, [sp, #12]
    e3c2:	lsls	r3, r3, #26
    e3c4:	bpl.w	ea76 <_svfprintf_r+0xfa6>
    e3c8:	ldr	r2, [sp, #40]	; 0x28
    e3ca:	ldr	r1, [sp, #28]
    e3cc:	ldr	r3, [r2, #0]
    e3ce:	asrs	r5, r1, #31
    e3d0:	mov	r0, r1
    e3d2:	adds	r2, #4
    e3d4:	mov	r1, r5
    e3d6:	str	r2, [sp, #40]	; 0x28
    e3d8:	strd	r0, r1, [r3]
    e3dc:	b.w	db1e <_svfprintf_r+0x4e>
    e3e0:	ldr	r0, [pc, #252]	; (e4e0 <_svfprintf_r+0xa10>)
    e3e2:	str	r2, [sp, #52]	; 0x34
    e3e4:	cmp.w	fp, #0
    e3e8:	bne.w	e6d4 <_svfprintf_r+0xc04>
    e3ec:	mov	r7, fp
    e3ee:	mov.w	fp, #0
    e3f2:	str.w	fp, [sp, #36]	; 0x24
    e3f6:	add	r6, sp, #192	; 0xc0
    e3f8:	b.n	de66 <_svfprintf_r+0x396>
    e3fa:	str	r3, [sp, #52]	; 0x34
    e3fc:	cmp	r2, #0
    e3fe:	bne.w	f190 <_svfprintf_r+0x16c0>
    e402:	ldr	r2, [sp, #52]	; 0x34
    e404:	cmp	r2, #0
    e406:	beq.w	dcb6 <_svfprintf_r+0x1e6>
    e40a:	movs	r3, #0
    e40c:	movs	r1, #1
    e40e:	mov	r7, r3
    e410:	str	r1, [sp, #16]
    e412:	strb.w	r2, [sp, #152]	; 0x98
    e416:	strb.w	r3, [sp, #111]	; 0x6f
    e41a:	mov	fp, r3
    e41c:	str	r3, [sp, #60]	; 0x3c
    e41e:	str	r1, [sp, #36]	; 0x24
    e420:	add	r6, sp, #152	; 0x98
    e422:	b.n	de7c <_svfprintf_r+0x3ac>
    e424:	cmp.w	fp, #0
    e428:	beq.w	f048 <_svfprintf_r+0x1578>
    e42c:	movs	r7, #0
    e42e:	movs	r4, #0
    e430:	movs	r5, #0
    e432:	b.n	dd1c <_svfprintf_r+0x24c>
    e434:	ldr	r0, [pc, #168]	; (e4e0 <_svfprintf_r+0xa10>)
    e436:	str	r3, [sp, #12]
    e438:	str	r2, [sp, #52]	; 0x34
    e43a:	orrs.w	r3, r4, r5
    e43e:	str	r7, [sp, #40]	; 0x28
    e440:	mov.w	r7, #0
    e444:	bne.w	e272 <_svfprintf_r+0x7a2>
    e448:	movs	r4, #0
    e44a:	movs	r5, #0
    e44c:	b.n	e272 <_svfprintf_r+0x7a2>
    e44e:	ldr	r4, [sp, #148]	; 0x94
    e450:	b.n	df1c <_svfprintf_r+0x44c>
    e452:	ldr	r3, [sp, #52]	; 0x34
    e454:	cmp	r3, #101	; 0x65
    e456:	ble.w	e5ae <_svfprintf_r+0xade>
    e45a:	movs	r2, #0
    e45c:	movs	r3, #0
    e45e:	ldrd	r0, r1, [sp, #64]	; 0x40
    e462:	bl	b4a4 <__aeabi_dcmpeq>
    e466:	cmp	r0, #0
    e468:	beq.w	e6d8 <_svfprintf_r+0xc08>
    e46c:	ldr	r3, [sp, #144]	; 0x90
    e46e:	ldr	r2, [pc, #116]	; (e4e4 <_svfprintf_r+0xa14>)
    e470:	str.w	r2, [r9]
    e474:	adds	r3, #1
    e476:	adds	r4, #1
    e478:	movs	r2, #1
    e47a:	cmp	r3, #7
    e47c:	str	r4, [sp, #148]	; 0x94
    e47e:	str	r3, [sp, #144]	; 0x90
    e480:	str.w	r2, [r9, #4]
    e484:	bgt.w	ec64 <_svfprintf_r+0x1194>
    e488:	add.w	r9, r9, #8
    e48c:	ldr	r3, [sp, #116]	; 0x74
    e48e:	ldr	r2, [sp, #56]	; 0x38
    e490:	cmp	r3, r2
    e492:	blt.n	e49c <_svfprintf_r+0x9cc>
    e494:	ldr	r3, [sp, #12]
    e496:	lsls	r3, r3, #31
    e498:	bpl.w	dffc <_svfprintf_r+0x52c>
    e49c:	ldr	r3, [sp, #144]	; 0x90
    e49e:	ldr	r1, [sp, #72]	; 0x48
    e4a0:	ldr	r2, [sp, #76]	; 0x4c
    e4a2:	str.w	r2, [r9]
    e4a6:	adds	r3, #1
    e4a8:	add	r4, r1
    e4aa:	cmp	r3, #7
    e4ac:	str	r4, [sp, #148]	; 0x94
    e4ae:	str.w	r1, [r9, #4]
    e4b2:	str	r3, [sp, #144]	; 0x90
    e4b4:	bgt.w	ed46 <_svfprintf_r+0x1276>
    e4b8:	add.w	r9, r9, #8
    e4bc:	ldr	r3, [sp, #56]	; 0x38
    e4be:	subs	r5, r3, #1
    e4c0:	cmp	r5, #0
    e4c2:	ble.w	dffc <_svfprintf_r+0x52c>
    e4c6:	ldr	r2, [pc, #32]	; (e4e8 <_svfprintf_r+0xa18>)
    e4c8:	ldr	r3, [sp, #144]	; 0x90
    e4ca:	str	r2, [sp, #44]	; 0x2c
    e4cc:	cmp	r5, #16
    e4ce:	ble.w	e8a4 <_svfprintf_r+0xdd4>
    e4d2:	movs	r6, #16
    e4d4:	ldr	r7, [sp, #24]
    e4d6:	ldr.w	fp, [sp, #20]
    e4da:	b.n	e4f8 <_svfprintf_r+0xa28>
    e4dc:	.word	0x000138f8
    e4e0:	.word	0x0001390c
    e4e4:	.word	0x00013928
    e4e8:	.word	0x000138d8
    e4ec:	add.w	r9, r9, #8
    e4f0:	subs	r5, #16
    e4f2:	cmp	r5, #16
    e4f4:	ble.w	e8a4 <_svfprintf_r+0xdd4>
    e4f8:	adds	r3, #1
    e4fa:	adds	r4, #16
    e4fc:	cmp	r3, #7
    e4fe:	str	r4, [sp, #148]	; 0x94
    e500:	str	r3, [sp, #144]	; 0x90
    e502:	str.w	sl, [r9]
    e506:	str.w	r6, [r9, #4]
    e50a:	ble.n	e4ec <_svfprintf_r+0xa1c>
    e50c:	add	r2, sp, #140	; 0x8c
    e50e:	mov	r1, fp
    e510:	mov	r0, r7
    e512:	bl	12a68 <__ssprint_r>
    e516:	cmp	r0, #0
    e518:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e51c:	ldr	r4, [sp, #148]	; 0x94
    e51e:	ldr	r3, [sp, #144]	; 0x90
    e520:	add.w	r9, sp, #192	; 0xc0
    e524:	b.n	e4f0 <_svfprintf_r+0xa20>
    e526:	ldr	r3, [sp, #32]
    e528:	ldr	r2, [sp, #16]
    e52a:	subs	r7, r3, r2
    e52c:	cmp	r7, #0
    e52e:	ble.w	df64 <_svfprintf_r+0x494>
    e532:	ldr	r2, [pc, #752]	; (e824 <_svfprintf_r+0xd54>)
    e534:	ldr	r3, [sp, #144]	; 0x90
    e536:	str	r2, [sp, #44]	; 0x2c
    e538:	cmp	r7, #16
    e53a:	ble.n	e594 <_svfprintf_r+0xac4>
    e53c:	mov	r2, r9
    e53e:	mov	r1, r4
    e540:	mov	r9, r7
    e542:	movs	r5, #16
    e544:	mov	r7, r6
    e546:	ldr	r4, [sp, #24]
    e548:	ldr	r6, [sp, #20]
    e54a:	b.n	e55a <_svfprintf_r+0xa8a>
    e54c:	sub.w	r9, r9, #16
    e550:	cmp.w	r9, #16
    e554:	add.w	r2, r2, #8
    e558:	ble.n	e58c <_svfprintf_r+0xabc>
    e55a:	adds	r3, #1
    e55c:	adds	r1, #16
    e55e:	cmp	r3, #7
    e560:	str	r1, [sp, #148]	; 0x94
    e562:	str	r3, [sp, #144]	; 0x90
    e564:	str.w	sl, [r2]
    e568:	str	r5, [r2, #4]
    e56a:	ble.n	e54c <_svfprintf_r+0xa7c>
    e56c:	add	r2, sp, #140	; 0x8c
    e56e:	mov	r1, r6
    e570:	mov	r0, r4
    e572:	bl	12a68 <__ssprint_r>
    e576:	cmp	r0, #0
    e578:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e57c:	sub.w	r9, r9, #16
    e580:	cmp.w	r9, #16
    e584:	ldr	r1, [sp, #148]	; 0x94
    e586:	ldr	r3, [sp, #144]	; 0x90
    e588:	add	r2, sp, #192	; 0xc0
    e58a:	bgt.n	e55a <_svfprintf_r+0xa8a>
    e58c:	mov	r6, r7
    e58e:	mov	r4, r1
    e590:	mov	r7, r9
    e592:	mov	r9, r2
    e594:	adds	r3, #1
    e596:	ldr	r2, [sp, #44]	; 0x2c
    e598:	str	r3, [sp, #144]	; 0x90
    e59a:	add	r4, r7
    e59c:	cmp	r3, #7
    e59e:	str	r4, [sp, #148]	; 0x94
    e5a0:	stmia.w	r9, {r2, r7}
    e5a4:	bgt.w	ea22 <_svfprintf_r+0xf52>
    e5a8:	add.w	r9, r9, #8
    e5ac:	b.n	df64 <_svfprintf_r+0x494>
    e5ae:	ldr	r3, [sp, #56]	; 0x38
    e5b0:	ldr	r5, [sp, #144]	; 0x90
    e5b2:	cmp	r3, #1
    e5b4:	ble.w	e9cc <_svfprintf_r+0xefc>
    e5b8:	adds	r5, #1
    e5ba:	adds	r4, #1
    e5bc:	movs	r3, #1
    e5be:	cmp	r5, #7
    e5c0:	str	r4, [sp, #148]	; 0x94
    e5c2:	str	r5, [sp, #144]	; 0x90
    e5c4:	str.w	r6, [r9]
    e5c8:	str.w	r3, [r9, #4]
    e5cc:	bgt.w	e9ee <_svfprintf_r+0xf1e>
    e5d0:	add.w	r9, r9, #8
    e5d4:	ldr	r2, [sp, #72]	; 0x48
    e5d6:	ldr	r3, [sp, #76]	; 0x4c
    e5d8:	str.w	r3, [r9]
    e5dc:	adds	r5, #1
    e5de:	add	r4, r2
    e5e0:	cmp	r5, #7
    e5e2:	str	r4, [sp, #148]	; 0x94
    e5e4:	str	r5, [sp, #144]	; 0x90
    e5e6:	str.w	r2, [r9, #4]
    e5ea:	bgt.w	ea08 <_svfprintf_r+0xf38>
    e5ee:	add.w	r9, r9, #8
    e5f2:	movs	r3, #0
    e5f4:	movs	r2, #0
    e5f6:	ldrd	r0, r1, [sp, #64]	; 0x40
    e5fa:	bl	b4a4 <__aeabi_dcmpeq>
    e5fe:	ldr	r3, [sp, #56]	; 0x38
    e600:	cmp	r0, #0
    e602:	bne.w	e78c <_svfprintf_r+0xcbc>
    e606:	subs	r3, #1
    e608:	adds	r5, #1
    e60a:	adds	r6, #1
    e60c:	add	r4, r3
    e60e:	cmp	r5, #7
    e610:	str	r5, [sp, #144]	; 0x90
    e612:	str	r4, [sp, #148]	; 0x94
    e614:	str.w	r6, [r9]
    e618:	str.w	r3, [r9, #4]
    e61c:	bgt.w	e80a <_svfprintf_r+0xd3a>
    e620:	add.w	r9, r9, #8
    e624:	ldr	r2, [sp, #84]	; 0x54
    e626:	str.w	r2, [r9, #4]
    e62a:	adds	r5, #1
    e62c:	add	r4, r2
    e62e:	add	r3, sp, #124	; 0x7c
    e630:	cmp	r5, #7
    e632:	str	r4, [sp, #148]	; 0x94
    e634:	str	r5, [sp, #144]	; 0x90
    e636:	str.w	r3, [r9]
    e63a:	ble.w	dff8 <_svfprintf_r+0x528>
    e63e:	add	r2, sp, #140	; 0x8c
    e640:	ldr	r1, [sp, #20]
    e642:	ldr	r0, [sp, #24]
    e644:	bl	12a68 <__ssprint_r>
    e648:	cmp	r0, #0
    e64a:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e64e:	ldr	r4, [sp, #148]	; 0x94
    e650:	add.w	r9, sp, #192	; 0xc0
    e654:	b.n	dffc <_svfprintf_r+0x52c>
    e656:	add	r2, sp, #140	; 0x8c
    e658:	ldr	r1, [sp, #20]
    e65a:	ldr	r0, [sp, #24]
    e65c:	bl	12a68 <__ssprint_r>
    e660:	cmp	r0, #0
    e662:	beq.w	e098 <_svfprintf_r+0x5c8>
    e666:	b.w	dcc4 <_svfprintf_r+0x1f4>
    e66a:	add	r2, sp, #140	; 0x8c
    e66c:	ldr	r1, [sp, #20]
    e66e:	ldr	r0, [sp, #24]
    e670:	bl	12a68 <__ssprint_r>
    e674:	cmp	r0, #0
    e676:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e67a:	ldr	r4, [sp, #148]	; 0x94
    e67c:	add.w	r9, sp, #192	; 0xc0
    e680:	b.n	dfd6 <_svfprintf_r+0x506>
    e682:	add	r2, sp, #140	; 0x8c
    e684:	ldr	r1, [sp, #20]
    e686:	ldr	r0, [sp, #24]
    e688:	bl	12a68 <__ssprint_r>
    e68c:	cmp	r0, #0
    e68e:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e692:	ldr	r4, [sp, #148]	; 0x94
    e694:	add.w	r9, sp, #192	; 0xc0
    e698:	b.n	df3c <_svfprintf_r+0x46c>
    e69a:	add	r2, sp, #140	; 0x8c
    e69c:	ldr	r1, [sp, #20]
    e69e:	ldr	r0, [sp, #24]
    e6a0:	bl	12a68 <__ssprint_r>
    e6a4:	cmp	r0, #0
    e6a6:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e6aa:	ldr	r4, [sp, #148]	; 0x94
    e6ac:	add.w	r9, sp, #192	; 0xc0
    e6b0:	b.n	df5c <_svfprintf_r+0x48c>
    e6b2:	cmp.w	fp, #0
    e6b6:	strb.w	r7, [sp, #111]	; 0x6f
    e6ba:	blt.w	ec7c <_svfprintf_r+0x11ac>
    e6be:	bic.w	r3, r2, #128	; 0x80
    e6c2:	str	r3, [sp, #12]
    e6c4:	orrs.w	r3, r4, r5
    e6c8:	bne.w	e272 <_svfprintf_r+0x7a2>
    e6cc:	cmp.w	fp, #0
    e6d0:	beq.w	e3ec <_svfprintf_r+0x91c>
    e6d4:	movs	r7, #0
    e6d6:	b.n	e448 <_svfprintf_r+0x978>
    e6d8:	ldr	r5, [sp, #116]	; 0x74
    e6da:	cmp	r5, #0
    e6dc:	ble.w	ec82 <_svfprintf_r+0x11b2>
    e6e0:	ldr	r3, [sp, #60]	; 0x3c
    e6e2:	ldr	r2, [sp, #56]	; 0x38
    e6e4:	cmp	r3, r2
    e6e6:	it	ge
    e6e8:	movge	r3, r2
    e6ea:	cmp	r3, #0
    e6ec:	mov	r5, r3
    e6ee:	ble.n	e70c <_svfprintf_r+0xc3c>
    e6f0:	ldr	r3, [sp, #144]	; 0x90
    e6f2:	str.w	r6, [r9]
    e6f6:	adds	r3, #1
    e6f8:	add	r4, r5
    e6fa:	cmp	r3, #7
    e6fc:	str	r4, [sp, #148]	; 0x94
    e6fe:	str.w	r5, [r9, #4]
    e702:	str	r3, [sp, #144]	; 0x90
    e704:	bgt.w	ee5a <_svfprintf_r+0x138a>
    e708:	add.w	r9, r9, #8
    e70c:	ldr	r3, [sp, #60]	; 0x3c
    e70e:	cmp	r5, #0
    e710:	it	ge
    e712:	subge	r3, r3, r5
    e714:	cmp	r3, #0
    e716:	mov	r5, r3
    e718:	ble.w	e90c <_svfprintf_r+0xe3c>
    e71c:	ldr	r2, [pc, #260]	; (e824 <_svfprintf_r+0xd54>)
    e71e:	ldr	r3, [sp, #144]	; 0x90
    e720:	str	r2, [sp, #44]	; 0x2c
    e722:	cmp	r5, #16
    e724:	ble.w	ec2e <_svfprintf_r+0x115e>
    e728:	mov	r2, r4
    e72a:	movs	r7, #16
    e72c:	ldr.w	fp, [sp, #24]
    e730:	ldr	r4, [sp, #20]
    e732:	b.n	e740 <_svfprintf_r+0xc70>
    e734:	add.w	r9, r9, #8
    e738:	subs	r5, #16
    e73a:	cmp	r5, #16
    e73c:	ble.w	ec2c <_svfprintf_r+0x115c>
    e740:	adds	r3, #1
    e742:	adds	r2, #16
    e744:	cmp	r3, #7
    e746:	str	r2, [sp, #148]	; 0x94
    e748:	str	r3, [sp, #144]	; 0x90
    e74a:	str.w	sl, [r9]
    e74e:	str.w	r7, [r9, #4]
    e752:	ble.n	e734 <_svfprintf_r+0xc64>
    e754:	add	r2, sp, #140	; 0x8c
    e756:	mov	r1, r4
    e758:	mov	r0, fp
    e75a:	bl	12a68 <__ssprint_r>
    e75e:	cmp	r0, #0
    e760:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e764:	ldr	r2, [sp, #148]	; 0x94
    e766:	ldr	r3, [sp, #144]	; 0x90
    e768:	add.w	r9, sp, #192	; 0xc0
    e76c:	b.n	e738 <_svfprintf_r+0xc68>
    e76e:	add	r2, sp, #140	; 0x8c
    e770:	ldr	r1, [sp, #20]
    e772:	ldr	r0, [sp, #24]
    e774:	bl	12a68 <__ssprint_r>
    e778:	cmp	r0, #0
    e77a:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e77e:	ldrb.w	r7, [sp, #111]	; 0x6f
    e782:	ldr	r4, [sp, #148]	; 0x94
    e784:	add.w	r9, sp, #192	; 0xc0
    e788:	b.w	df1c <_svfprintf_r+0x44c>
    e78c:	subs	r6, r3, #1
    e78e:	cmp	r6, #0
    e790:	ble.w	e624 <_svfprintf_r+0xb54>
    e794:	ldr	r3, [pc, #140]	; (e824 <_svfprintf_r+0xd54>)
    e796:	str	r3, [sp, #44]	; 0x2c
    e798:	cmp	r6, #16
    e79a:	ble.n	e7f6 <_svfprintf_r+0xd26>
    e79c:	str.w	r8, [sp, #36]	; 0x24
    e7a0:	movs	r7, #16
    e7a2:	mov	r8, r6
    e7a4:	ldr.w	fp, [sp, #24]
    e7a8:	ldr	r6, [sp, #20]
    e7aa:	b.n	e7ba <_svfprintf_r+0xcea>
    e7ac:	sub.w	r8, r8, #16
    e7b0:	cmp.w	r8, #16
    e7b4:	add.w	r9, r9, #8
    e7b8:	ble.n	e7f0 <_svfprintf_r+0xd20>
    e7ba:	adds	r5, #1
    e7bc:	adds	r4, #16
    e7be:	cmp	r5, #7
    e7c0:	str	r4, [sp, #148]	; 0x94
    e7c2:	str	r5, [sp, #144]	; 0x90
    e7c4:	str.w	sl, [r9]
    e7c8:	str.w	r7, [r9, #4]
    e7cc:	ble.n	e7ac <_svfprintf_r+0xcdc>
    e7ce:	add	r2, sp, #140	; 0x8c
    e7d0:	mov	r1, r6
    e7d2:	mov	r0, fp
    e7d4:	bl	12a68 <__ssprint_r>
    e7d8:	cmp	r0, #0
    e7da:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e7de:	sub.w	r8, r8, #16
    e7e2:	cmp.w	r8, #16
    e7e6:	ldr	r4, [sp, #148]	; 0x94
    e7e8:	ldr	r5, [sp, #144]	; 0x90
    e7ea:	add.w	r9, sp, #192	; 0xc0
    e7ee:	bgt.n	e7ba <_svfprintf_r+0xcea>
    e7f0:	mov	r6, r8
    e7f2:	ldr.w	r8, [sp, #36]	; 0x24
    e7f6:	ldr	r3, [sp, #44]	; 0x2c
    e7f8:	adds	r5, #1
    e7fa:	add	r4, r6
    e7fc:	cmp	r5, #7
    e7fe:	str	r4, [sp, #148]	; 0x94
    e800:	str	r5, [sp, #144]	; 0x90
    e802:	stmia.w	r9, {r3, r6}
    e806:	ble.w	e620 <_svfprintf_r+0xb50>
    e80a:	add	r2, sp, #140	; 0x8c
    e80c:	ldr	r1, [sp, #20]
    e80e:	ldr	r0, [sp, #24]
    e810:	bl	12a68 <__ssprint_r>
    e814:	cmp	r0, #0
    e816:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e81a:	ldr	r4, [sp, #148]	; 0x94
    e81c:	ldr	r5, [sp, #144]	; 0x90
    e81e:	add.w	r9, sp, #192	; 0xc0
    e822:	b.n	e624 <_svfprintf_r+0xb54>
    e824:	.word	0x000138d8
    e828:	ldr	r1, [sp, #12]
    e82a:	ands.w	r2, r1, #16
    e82e:	beq.w	ebd8 <_svfprintf_r+0x1108>
    e832:	ldr	r0, [sp, #40]	; 0x28
    e834:	strb.w	r3, [sp, #111]	; 0x6f
    e838:	cmp.w	fp, #0
    e83c:	ldr	r4, [r0, #0]
    e83e:	add.w	r7, r0, #4
    e842:	mov.w	r5, #0
    e846:	blt.n	e896 <_svfprintf_r+0xdc6>
    e848:	mov	r2, r1
    e84a:	bic.w	r2, r2, #128	; 0x80
    e84e:	str	r2, [sp, #12]
    e850:	orrs.w	r2, r4, r5
    e854:	str	r7, [sp, #40]	; 0x28
    e856:	mov	r7, r3
    e858:	bne.w	de2c <_svfprintf_r+0x35c>
    e85c:	b.n	e1fc <_svfprintf_r+0x72c>
    e85e:	ldr	r3, [sp, #12]
    e860:	lsls	r0, r3, #27
    e862:	bmi.n	e8ba <_svfprintf_r+0xdea>
    e864:	ldr	r3, [sp, #12]
    e866:	lsls	r1, r3, #25
    e868:	bpl.n	e8ba <_svfprintf_r+0xdea>
    e86a:	ldr	r1, [sp, #40]	; 0x28
    e86c:	ldrsh.w	r4, [r1]
    e870:	adds	r1, #4
    e872:	asrs	r5, r4, #31
    e874:	mov	r2, r4
    e876:	mov	r3, r5
    e878:	str	r1, [sp, #40]	; 0x28
    e87a:	b.w	de06 <_svfprintf_r+0x336>
    e87e:	ldr	r1, [sp, #40]	; 0x28
    e880:	strb.w	r3, [sp, #111]	; 0x6f
    e884:	cmp.w	fp, #0
    e888:	ldr	r4, [r1, #0]
    e88a:	add.w	r7, r1, #4
    e88e:	mov.w	r5, #0
    e892:	bge.w	ed2e <_svfprintf_r+0x125e>
    e896:	str	r7, [sp, #40]	; 0x28
    e898:	mov	r7, r3
    e89a:	orrs.w	r3, r4, r5
    e89e:	bne.w	de2c <_svfprintf_r+0x35c>
    e8a2:	b.n	e206 <_svfprintf_r+0x736>
    e8a4:	adds	r3, #1
    e8a6:	ldr	r2, [sp, #44]	; 0x2c
    e8a8:	str	r3, [sp, #144]	; 0x90
    e8aa:	add	r4, r5
    e8ac:	cmp	r3, #7
    e8ae:	str	r4, [sp, #148]	; 0x94
    e8b0:	stmia.w	r9, {r2, r5}
    e8b4:	ble.w	dff8 <_svfprintf_r+0x528>
    e8b8:	b.n	e63e <_svfprintf_r+0xb6e>
    e8ba:	ldr	r2, [sp, #40]	; 0x28
    e8bc:	ldr	r4, [r2, #0]
    e8be:	mov	r3, r2
    e8c0:	adds	r3, #4
    e8c2:	asrs	r5, r4, #31
    e8c4:	mov	r2, r4
    e8c6:	str	r3, [sp, #40]	; 0x28
    e8c8:	cmp	r2, #0
    e8ca:	mov	r3, r5
    e8cc:	sbcs.w	r3, r3, #0
    e8d0:	bge.w	de10 <_svfprintf_r+0x340>
    e8d4:	negs	r4, r4
    e8d6:	mov.w	r7, #45	; 0x2d
    e8da:	sbc.w	r5, r5, r5, lsl #1
    e8de:	cmp.w	fp, #0
    e8e2:	strb.w	r7, [sp, #111]	; 0x6f
    e8e6:	blt.w	de2c <_svfprintf_r+0x35c>
    e8ea:	ldr	r3, [sp, #12]
    e8ec:	bic.w	r3, r3, #128	; 0x80
    e8f0:	str	r3, [sp, #12]
    e8f2:	b.w	de2c <_svfprintf_r+0x35c>
    e8f6:	add	r2, sp, #140	; 0x8c
    e8f8:	ldr	r1, [sp, #20]
    e8fa:	ldr	r0, [sp, #24]
    e8fc:	bl	12a68 <__ssprint_r>
    e900:	cmp	r0, #0
    e902:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e906:	ldr	r4, [sp, #148]	; 0x94
    e908:	add.w	r9, sp, #192	; 0xc0
    e90c:	ldr	r2, [sp, #60]	; 0x3c
    e90e:	ldr	r3, [sp, #116]	; 0x74
    e910:	add	r2, r6
    e912:	mov	r7, r2
    e914:	ldr	r2, [sp, #56]	; 0x38
    e916:	cmp	r3, r2
    e918:	blt.n	e9aa <_svfprintf_r+0xeda>
    e91a:	ldr	r2, [sp, #12]
    e91c:	lsls	r5, r2, #31
    e91e:	bmi.n	e9aa <_svfprintf_r+0xeda>
    e920:	ldr	r1, [sp, #56]	; 0x38
    e922:	add	r6, r1
    e924:	subs	r5, r6, r7
    e926:	subs	r3, r1, r3
    e928:	cmp	r5, r3
    e92a:	it	ge
    e92c:	movge	r5, r3
    e92e:	cmp	r5, #0
    e930:	mov	r6, r5
    e932:	ble.n	e950 <_svfprintf_r+0xe80>
    e934:	ldr	r2, [sp, #144]	; 0x90
    e936:	str.w	r7, [r9]
    e93a:	adds	r2, #1
    e93c:	add	r4, r5
    e93e:	cmp	r2, #7
    e940:	str	r4, [sp, #148]	; 0x94
    e942:	str.w	r5, [r9, #4]
    e946:	str	r2, [sp, #144]	; 0x90
    e948:	bgt.w	ef48 <_svfprintf_r+0x1478>
    e94c:	add.w	r9, r9, #8
    e950:	cmp	r6, #0
    e952:	ite	ge
    e954:	subge	r5, r3, r6
    e956:	movlt	r5, r3
    e958:	cmp	r5, #0
    e95a:	ble.w	dffc <_svfprintf_r+0x52c>
    e95e:	ldr	r2, [pc, #744]	; (ec48 <_svfprintf_r+0x1178>)
    e960:	ldr	r3, [sp, #144]	; 0x90
    e962:	str	r2, [sp, #44]	; 0x2c
    e964:	cmp	r5, #16
    e966:	ble.n	e8a4 <_svfprintf_r+0xdd4>
    e968:	movs	r6, #16
    e96a:	ldr	r7, [sp, #24]
    e96c:	ldr.w	fp, [sp, #20]
    e970:	b.n	e97c <_svfprintf_r+0xeac>
    e972:	add.w	r9, r9, #8
    e976:	subs	r5, #16
    e978:	cmp	r5, #16
    e97a:	ble.n	e8a4 <_svfprintf_r+0xdd4>
    e97c:	adds	r3, #1
    e97e:	adds	r4, #16
    e980:	cmp	r3, #7
    e982:	str	r4, [sp, #148]	; 0x94
    e984:	str	r3, [sp, #144]	; 0x90
    e986:	str.w	sl, [r9]
    e98a:	str.w	r6, [r9, #4]
    e98e:	ble.n	e972 <_svfprintf_r+0xea2>
    e990:	add	r2, sp, #140	; 0x8c
    e992:	mov	r1, fp
    e994:	mov	r0, r7
    e996:	bl	12a68 <__ssprint_r>
    e99a:	cmp	r0, #0
    e99c:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e9a0:	ldr	r4, [sp, #148]	; 0x94
    e9a2:	ldr	r3, [sp, #144]	; 0x90
    e9a4:	add.w	r9, sp, #192	; 0xc0
    e9a8:	b.n	e976 <_svfprintf_r+0xea6>
    e9aa:	ldr	r2, [sp, #144]	; 0x90
    e9ac:	ldr	r0, [sp, #72]	; 0x48
    e9ae:	ldr	r1, [sp, #76]	; 0x4c
    e9b0:	str.w	r1, [r9]
    e9b4:	adds	r2, #1
    e9b6:	add	r4, r0
    e9b8:	cmp	r2, #7
    e9ba:	str	r4, [sp, #148]	; 0x94
    e9bc:	str.w	r0, [r9, #4]
    e9c0:	str	r2, [sp, #144]	; 0x90
    e9c2:	bgt.w	ef2e <_svfprintf_r+0x145e>
    e9c6:	add.w	r9, r9, #8
    e9ca:	b.n	e920 <_svfprintf_r+0xe50>
    e9cc:	ldr	r3, [sp, #12]
    e9ce:	lsls	r0, r3, #31
    e9d0:	bmi.w	e5b8 <_svfprintf_r+0xae8>
    e9d4:	adds	r5, #1
    e9d6:	adds	r4, #1
    e9d8:	movs	r3, #1
    e9da:	cmp	r5, #7
    e9dc:	str	r4, [sp, #148]	; 0x94
    e9de:	str	r5, [sp, #144]	; 0x90
    e9e0:	str.w	r6, [r9]
    e9e4:	str.w	r3, [r9, #4]
    e9e8:	ble.w	e620 <_svfprintf_r+0xb50>
    e9ec:	b.n	e80a <_svfprintf_r+0xd3a>
    e9ee:	add	r2, sp, #140	; 0x8c
    e9f0:	ldr	r1, [sp, #20]
    e9f2:	ldr	r0, [sp, #24]
    e9f4:	bl	12a68 <__ssprint_r>
    e9f8:	cmp	r0, #0
    e9fa:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    e9fe:	ldr	r4, [sp, #148]	; 0x94
    ea00:	ldr	r5, [sp, #144]	; 0x90
    ea02:	add.w	r9, sp, #192	; 0xc0
    ea06:	b.n	e5d4 <_svfprintf_r+0xb04>
    ea08:	add	r2, sp, #140	; 0x8c
    ea0a:	ldr	r1, [sp, #20]
    ea0c:	ldr	r0, [sp, #24]
    ea0e:	bl	12a68 <__ssprint_r>
    ea12:	cmp	r0, #0
    ea14:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ea18:	ldr	r4, [sp, #148]	; 0x94
    ea1a:	ldr	r5, [sp, #144]	; 0x90
    ea1c:	add.w	r9, sp, #192	; 0xc0
    ea20:	b.n	e5f2 <_svfprintf_r+0xb22>
    ea22:	add	r2, sp, #140	; 0x8c
    ea24:	ldr	r1, [sp, #20]
    ea26:	ldr	r0, [sp, #24]
    ea28:	bl	12a68 <__ssprint_r>
    ea2c:	cmp	r0, #0
    ea2e:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ea32:	ldr	r4, [sp, #148]	; 0x94
    ea34:	add.w	r9, sp, #192	; 0xc0
    ea38:	b.w	df64 <_svfprintf_r+0x494>
    ea3c:	ldr	r1, [sp, #12]
    ea3e:	ands.w	r3, r1, #64	; 0x40
    ea42:	beq.w	ebb8 <_svfprintf_r+0x10e8>
    ea46:	ldr	r0, [sp, #40]	; 0x28
    ea48:	strb.w	r2, [sp, #111]	; 0x6f
    ea4c:	mov	r3, r0
    ea4e:	cmp.w	fp, #0
    ea52:	add.w	r3, r3, #4
    ea56:	ldrh	r4, [r0, #0]
    ea58:	mov.w	r5, #0
    ea5c:	blt.w	ede0 <_svfprintf_r+0x1310>
    ea60:	bic.w	r1, r1, #128	; 0x80
    ea64:	str	r1, [sp, #12]
    ea66:	orrs.w	r1, r4, r5
    ea6a:	str	r3, [sp, #40]	; 0x28
    ea6c:	beq.w	e424 <_svfprintf_r+0x954>
    ea70:	mov	r7, r2
    ea72:	b.w	dd1c <_svfprintf_r+0x24c>
    ea76:	ldr	r3, [sp, #12]
    ea78:	lsls	r7, r3, #27
    ea7a:	bmi.n	ea94 <_svfprintf_r+0xfc4>
    ea7c:	ldr	r3, [sp, #12]
    ea7e:	lsls	r6, r3, #25
    ea80:	bpl.n	ea94 <_svfprintf_r+0xfc4>
    ea82:	ldr	r2, [sp, #40]	; 0x28
    ea84:	ldr	r3, [r2, #0]
    ea86:	adds	r2, #4
    ea88:	str	r2, [sp, #40]	; 0x28
    ea8a:	ldrh.w	r2, [sp, #28]
    ea8e:	strh	r2, [r3, #0]
    ea90:	b.w	db1e <_svfprintf_r+0x4e>
    ea94:	ldr	r2, [sp, #40]	; 0x28
    ea96:	ldr	r3, [r2, #0]
    ea98:	adds	r2, #4
    ea9a:	str	r2, [sp, #40]	; 0x28
    ea9c:	ldr	r2, [sp, #28]
    ea9e:	str	r2, [r3, #0]
    eaa0:	b.w	db1e <_svfprintf_r+0x4e>
    eaa4:	ldrd	r0, r1, [sp, #64]	; 0x40
    eaa8:	mov	r2, r0
    eaaa:	mov	r3, r1
    eaac:	bl	b508 <__aeabi_dcmpun>
    eab0:	cmp	r0, #0
    eab2:	bne.w	f0b0 <_svfprintf_r+0x15e0>
    eab6:	ldr	r3, [sp, #52]	; 0x34
    eab8:	cmp.w	fp, #4294967295
    eabc:	bic.w	r7, r3, #32
    eac0:	beq.w	ef92 <_svfprintf_r+0x14c2>
    eac4:	cmp	r7, #71	; 0x47
    eac6:	beq.w	edce <_svfprintf_r+0x12fe>
    eaca:	ldr	r3, [sp, #68]	; 0x44
    eacc:	ldr	r2, [sp, #12]
    eace:	cmp	r3, #0
    ead0:	orr.w	r2, r2, #256	; 0x100
    ead4:	str	r2, [sp, #44]	; 0x2c
    ead6:	blt.w	efca <_svfprintf_r+0x14fa>
    eada:	vldr	d7, [sp, #64]	; 0x40
    eade:	vstr	d7, [sp, #96]	; 0x60
    eae2:	movs	r3, #0
    eae4:	str	r3, [sp, #16]
    eae6:	ldr	r3, [sp, #52]	; 0x34
    eae8:	cmp	r3, #102	; 0x66
    eaea:	beq.w	ef98 <_svfprintf_r+0x14c8>
    eaee:	cmp	r3, #70	; 0x46
    eaf0:	beq.w	ed7e <_svfprintf_r+0x12ae>
    eaf4:	cmp	r7, #69	; 0x45
    eaf6:	ite	eq
    eaf8:	addeq.w	r5, fp, #1
    eafc:	movne	r5, fp
    eafe:	add	r2, sp, #132	; 0x84
    eb00:	add	r3, sp, #120	; 0x78
    eb02:	str	r2, [sp, #4]
    eb04:	str	r3, [sp, #0]
    eb06:	mov	r2, r5
    eb08:	add	r3, sp, #116	; 0x74
    eb0a:	movs	r1, #2
    eb0c:	vldr	d0, [sp, #96]	; 0x60
    eb10:	ldr	r0, [sp, #24]
    eb12:	bl	102d8 <_dtoa_r>
    eb16:	ldr	r3, [sp, #52]	; 0x34
    eb18:	cmp	r3, #103	; 0x67
    eb1a:	mov	r6, r0
    eb1c:	bne.w	eff6 <_svfprintf_r+0x1526>
    eb20:	ldr	r3, [sp, #12]
    eb22:	lsls	r2, r3, #31
    eb24:	bpl.w	f09a <_svfprintf_r+0x15ca>
    eb28:	adds	r4, r6, r5
    eb2a:	movs	r2, #0
    eb2c:	movs	r3, #0
    eb2e:	ldrd	r0, r1, [sp, #96]	; 0x60
    eb32:	bl	b4a4 <__aeabi_dcmpeq>
    eb36:	cmp	r0, #0
    eb38:	bne.w	ee56 <_svfprintf_r+0x1386>
    eb3c:	ldr	r3, [sp, #132]	; 0x84
    eb3e:	cmp	r4, r3
    eb40:	bls.n	eb50 <_svfprintf_r+0x1080>
    eb42:	movs	r1, #48	; 0x30
    eb44:	adds	r2, r3, #1
    eb46:	str	r2, [sp, #132]	; 0x84
    eb48:	strb	r1, [r3, #0]
    eb4a:	ldr	r3, [sp, #132]	; 0x84
    eb4c:	cmp	r4, r3
    eb4e:	bhi.n	eb44 <_svfprintf_r+0x1074>
    eb50:	subs	r3, r3, r6
    eb52:	cmp	r7, #71	; 0x47
    eb54:	str	r3, [sp, #56]	; 0x38
    eb56:	beq.w	ee48 <_svfprintf_r+0x1378>
    eb5a:	ldr	r3, [sp, #52]	; 0x34
    eb5c:	cmp	r3, #101	; 0x65
    eb5e:	ble.w	f014 <_svfprintf_r+0x1544>
    eb62:	ldr	r3, [sp, #52]	; 0x34
    eb64:	cmp	r3, #102	; 0x66
    eb66:	ldr	r3, [sp, #116]	; 0x74
    eb68:	str	r3, [sp, #60]	; 0x3c
    eb6a:	beq.w	f02e <_svfprintf_r+0x155e>
    eb6e:	ldr	r2, [sp, #60]	; 0x3c
    eb70:	ldr	r1, [sp, #56]	; 0x38
    eb72:	cmp	r2, r1
    eb74:	blt.w	efdc <_svfprintf_r+0x150c>
    eb78:	ldr	r3, [sp, #12]
    eb7a:	lsls	r1, r3, #31
    eb7c:	bmi.w	f09e <_svfprintf_r+0x15ce>
    eb80:	bic.w	r3, r2, r2, asr #31
    eb84:	str	r2, [sp, #36]	; 0x24
    eb86:	movs	r2, #103	; 0x67
    eb88:	str	r2, [sp, #52]	; 0x34
    eb8a:	ldr	r2, [sp, #16]
    eb8c:	cmp	r2, #0
    eb8e:	bne.w	edf0 <_svfprintf_r+0x1320>
    eb92:	str	r3, [sp, #16]
    eb94:	ldr	r3, [sp, #44]	; 0x2c
    eb96:	str	r3, [sp, #12]
    eb98:	mov	fp, r2
    eb9a:	ldrb.w	r7, [sp, #111]	; 0x6f
    eb9e:	b.w	de74 <_svfprintf_r+0x3a4>
    eba2:	bic.w	r7, r7, #7
    eba6:	vldr	d7, [r7]
    ebaa:	add.w	r3, r7, #8
    ebae:	vstr	d7, [sp, #64]	; 0x40
    ebb2:	str	r3, [sp, #40]	; 0x28
    ebb4:	b.w	e0cc <_svfprintf_r+0x5fc>
    ebb8:	ldr	r1, [sp, #40]	; 0x28
    ebba:	strb.w	r3, [sp, #111]	; 0x6f
    ebbe:	cmp.w	fp, #0
    ebc2:	ldr	r4, [r1, #0]
    ebc4:	add.w	r7, r1, #4
    ebc8:	mov.w	r5, #0
    ebcc:	bge.w	ed28 <_svfprintf_r+0x1258>
    ebd0:	str	r7, [sp, #40]	; 0x28
    ebd2:	movs	r7, #0
    ebd4:	b.w	dd1c <_svfprintf_r+0x24c>
    ebd8:	ldr	r1, [sp, #12]
    ebda:	ands.w	r3, r1, #64	; 0x40
    ebde:	beq.w	e87e <_svfprintf_r+0xdae>
    ebe2:	ldr	r0, [sp, #40]	; 0x28
    ebe4:	strb.w	r2, [sp, #111]	; 0x6f
    ebe8:	mov	r3, r0
    ebea:	cmp.w	fp, #0
    ebee:	add.w	r3, r3, #4
    ebf2:	ldrh	r4, [r0, #0]
    ebf4:	mov.w	r5, #0
    ebf8:	blt.w	edda <_svfprintf_r+0x130a>
    ebfc:	bic.w	r1, r1, #128	; 0x80
    ec00:	str	r1, [sp, #12]
    ec02:	orrs.w	r1, r4, r5
    ec06:	str	r3, [sp, #40]	; 0x28
    ec08:	mov	r7, r2
    ec0a:	bne.w	de2c <_svfprintf_r+0x35c>
    ec0e:	b.w	e1fc <_svfprintf_r+0x72c>
    ec12:	ldr	r3, [sp, #12]
    ec14:	ldr	r2, [sp, #40]	; 0x28
    ec16:	tst.w	r3, #64	; 0x40
    ec1a:	mov	r3, r2
    ec1c:	beq.w	ede4 <_svfprintf_r+0x1314>
    ec20:	adds	r3, #4
    ec22:	ldrh	r4, [r2, #0]
    ec24:	str	r3, [sp, #40]	; 0x28
    ec26:	movs	r5, #0
    ec28:	b.w	e236 <_svfprintf_r+0x766>
    ec2c:	mov	r4, r2
    ec2e:	adds	r3, #1
    ec30:	ldr	r2, [sp, #44]	; 0x2c
    ec32:	str	r3, [sp, #144]	; 0x90
    ec34:	add	r4, r5
    ec36:	cmp	r3, #7
    ec38:	str	r4, [sp, #148]	; 0x94
    ec3a:	stmia.w	r9, {r2, r5}
    ec3e:	bgt.w	e8f6 <_svfprintf_r+0xe26>
    ec42:	add.w	r9, r9, #8
    ec46:	b.n	e90c <_svfprintf_r+0xe3c>
    ec48:	.word	0x000138d8
    ec4c:	movs	r7, #0
    ec4e:	cmp	fp, r7
    ec50:	strb.w	r7, [sp, #111]	; 0x6f
    ec54:	blt.w	e448 <_svfprintf_r+0x978>
    ec58:	ldr	r3, [sp, #12]
    ec5a:	bic.w	r3, r3, #128	; 0x80
    ec5e:	str	r3, [sp, #12]
    ec60:	b.w	e3e4 <_svfprintf_r+0x914>
    ec64:	add	r2, sp, #140	; 0x8c
    ec66:	ldr	r1, [sp, #20]
    ec68:	ldr	r0, [sp, #24]
    ec6a:	bl	12a68 <__ssprint_r>
    ec6e:	cmp	r0, #0
    ec70:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ec74:	ldr	r4, [sp, #148]	; 0x94
    ec76:	add.w	r9, sp, #192	; 0xc0
    ec7a:	b.n	e48c <_svfprintf_r+0x9bc>
    ec7c:	ldr	r7, [sp, #40]	; 0x28
    ec7e:	b.w	e43a <_svfprintf_r+0x96a>
    ec82:	ldr	r3, [sp, #144]	; 0x90
    ec84:	ldr	r2, [pc, #736]	; (ef68 <_svfprintf_r+0x1498>)
    ec86:	str.w	r2, [r9]
    ec8a:	adds	r3, #1
    ec8c:	adds	r4, #1
    ec8e:	movs	r2, #1
    ec90:	cmp	r3, #7
    ec92:	str	r4, [sp, #148]	; 0x94
    ec94:	str	r3, [sp, #144]	; 0x90
    ec96:	str.w	r2, [r9, #4]
    ec9a:	bgt.w	edb4 <_svfprintf_r+0x12e4>
    ec9e:	add.w	r9, r9, #8
    eca2:	cbnz	r5, ecb0 <_svfprintf_r+0x11e0>
    eca4:	ldr	r3, [sp, #56]	; 0x38
    eca6:	cbnz	r3, ecb0 <_svfprintf_r+0x11e0>
    eca8:	ldr	r3, [sp, #12]
    ecaa:	lsls	r7, r3, #31
    ecac:	bpl.w	dffc <_svfprintf_r+0x52c>
    ecb0:	ldr	r3, [sp, #144]	; 0x90
    ecb2:	ldr	r1, [sp, #72]	; 0x48
    ecb4:	ldr	r2, [sp, #76]	; 0x4c
    ecb6:	str.w	r2, [r9]
    ecba:	adds	r3, #1
    ecbc:	add	r4, r1
    ecbe:	cmp	r3, #7
    ecc0:	str	r4, [sp, #148]	; 0x94
    ecc2:	str.w	r1, [r9, #4]
    ecc6:	str	r3, [sp, #144]	; 0x90
    ecc8:	bgt.w	f066 <_svfprintf_r+0x1596>
    eccc:	add.w	r9, r9, #8
    ecd0:	negs	r5, r5
    ecd2:	cmp	r5, #0
    ecd4:	ble.w	ee2c <_svfprintf_r+0x135c>
    ecd8:	ldr	r2, [pc, #656]	; (ef6c <_svfprintf_r+0x149c>)
    ecda:	str	r2, [sp, #44]	; 0x2c
    ecdc:	cmp	r5, #16
    ecde:	ble.w	ee74 <_svfprintf_r+0x13a4>
    ece2:	mov	r2, r4
    ece4:	movs	r7, #16
    ece6:	ldr.w	fp, [sp, #24]
    ecea:	ldr	r4, [sp, #20]
    ecec:	b.n	ecfa <_svfprintf_r+0x122a>
    ecee:	add.w	r9, r9, #8
    ecf2:	subs	r5, #16
    ecf4:	cmp	r5, #16
    ecf6:	ble.w	ee72 <_svfprintf_r+0x13a2>
    ecfa:	adds	r3, #1
    ecfc:	adds	r2, #16
    ecfe:	cmp	r3, #7
    ed00:	str	r2, [sp, #148]	; 0x94
    ed02:	str	r3, [sp, #144]	; 0x90
    ed04:	str.w	sl, [r9]
    ed08:	str.w	r7, [r9, #4]
    ed0c:	ble.n	ecee <_svfprintf_r+0x121e>
    ed0e:	add	r2, sp, #140	; 0x8c
    ed10:	mov	r1, r4
    ed12:	mov	r0, fp
    ed14:	bl	12a68 <__ssprint_r>
    ed18:	cmp	r0, #0
    ed1a:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ed1e:	ldr	r2, [sp, #148]	; 0x94
    ed20:	ldr	r3, [sp, #144]	; 0x90
    ed22:	add.w	r9, sp, #192	; 0xc0
    ed26:	b.n	ecf2 <_svfprintf_r+0x1222>
    ed28:	ldr	r2, [sp, #12]
    ed2a:	b.w	e1a0 <_svfprintf_r+0x6d0>
    ed2e:	ldr	r2, [sp, #12]
    ed30:	b.n	e84a <_svfprintf_r+0xd7a>
    ed32:	ldr	r3, [sp, #12]
    ed34:	orr.w	r3, r3, #32
    ed38:	str	r3, [sp, #12]
    ed3a:	add.w	r8, r8, #1
    ed3e:	ldrb.w	r3, [r8]
    ed42:	b.w	db84 <_svfprintf_r+0xb4>
    ed46:	add	r2, sp, #140	; 0x8c
    ed48:	ldr	r1, [sp, #20]
    ed4a:	ldr	r0, [sp, #24]
    ed4c:	bl	12a68 <__ssprint_r>
    ed50:	cmp	r0, #0
    ed52:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ed56:	ldr	r4, [sp, #148]	; 0x94
    ed58:	add.w	r9, sp, #192	; 0xc0
    ed5c:	b.w	e4bc <_svfprintf_r+0x9ec>
    ed60:	movs	r1, #64	; 0x40
    ed62:	ldr	r0, [sp, #24]
    ed64:	bl	ba54 <_malloc_r>
    ed68:	ldr	r2, [sp, #20]
    ed6a:	str	r0, [r2, #0]
    ed6c:	str	r0, [r2, #16]
    ed6e:	cmp	r0, #0
    ed70:	beq.w	f15a <_svfprintf_r+0x168a>
    ed74:	ldr	r2, [sp, #20]
    ed76:	movs	r3, #64	; 0x40
    ed78:	str	r3, [r2, #20]
    ed7a:	b.w	dafe <_svfprintf_r+0x2e>
    ed7e:	add	r2, sp, #132	; 0x84
    ed80:	add	r3, sp, #120	; 0x78
    ed82:	str	r2, [sp, #4]
    ed84:	str	r3, [sp, #0]
    ed86:	mov	r2, fp
    ed88:	add	r3, sp, #116	; 0x74
    ed8a:	movs	r1, #3
    ed8c:	vldr	d0, [sp, #96]	; 0x60
    ed90:	ldr	r0, [sp, #24]
    ed92:	bl	102d8 <_dtoa_r>
    ed96:	mov	r5, fp
    ed98:	mov	r6, r0
    ed9a:	ldr	r3, [sp, #52]	; 0x34
    ed9c:	cmp	r3, #70	; 0x46
    ed9e:	add.w	r4, r6, r5
    eda2:	bne.w	eb2a <_svfprintf_r+0x105a>
    eda6:	ldrb	r3, [r6, #0]
    eda8:	cmp	r3, #48	; 0x30
    edaa:	beq.w	f0bc <_svfprintf_r+0x15ec>
    edae:	ldr	r5, [sp, #116]	; 0x74
    edb0:	add	r4, r5
    edb2:	b.n	eb2a <_svfprintf_r+0x105a>
    edb4:	add	r2, sp, #140	; 0x8c
    edb6:	ldr	r1, [sp, #20]
    edb8:	ldr	r0, [sp, #24]
    edba:	bl	12a68 <__ssprint_r>
    edbe:	cmp	r0, #0
    edc0:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    edc4:	ldr	r5, [sp, #116]	; 0x74
    edc6:	ldr	r4, [sp, #148]	; 0x94
    edc8:	add.w	r9, sp, #192	; 0xc0
    edcc:	b.n	eca2 <_svfprintf_r+0x11d2>
    edce:	cmp.w	fp, #0
    edd2:	it	eq
    edd4:	moveq.w	fp, #1
    edd8:	b.n	eaca <_svfprintf_r+0xffa>
    edda:	str	r3, [sp, #40]	; 0x28
    eddc:	mov	r7, r2
    edde:	b.n	e89a <_svfprintf_r+0xdca>
    ede0:	str	r3, [sp, #40]	; 0x28
    ede2:	b.n	ebd2 <_svfprintf_r+0x1102>
    ede4:	adds	r3, #4
    ede6:	ldr	r4, [r2, #0]
    ede8:	str	r3, [sp, #40]	; 0x28
    edea:	movs	r5, #0
    edec:	b.w	e236 <_svfprintf_r+0x766>
    edf0:	movs	r7, #45	; 0x2d
    edf2:	str	r3, [sp, #16]
    edf4:	ldr	r3, [sp, #44]	; 0x2c
    edf6:	str	r3, [sp, #12]
    edf8:	strb.w	r7, [sp, #111]	; 0x6f
    edfc:	mov.w	fp, #0
    ee00:	b.w	de76 <_svfprintf_r+0x3a6>
    ee04:	mov	r0, r6
    ee06:	bl	c8c0 <strlen>
    ee0a:	mov	fp, r4
    ee0c:	mov	r3, r0
    ee0e:	str	r0, [sp, #36]	; 0x24
    ee10:	b.w	e358 <_svfprintf_r+0x888>
    ee14:	add	r2, sp, #140	; 0x8c
    ee16:	ldr	r1, [sp, #20]
    ee18:	ldr	r0, [sp, #24]
    ee1a:	bl	12a68 <__ssprint_r>
    ee1e:	cmp	r0, #0
    ee20:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ee24:	ldr	r4, [sp, #148]	; 0x94
    ee26:	ldr	r3, [sp, #144]	; 0x90
    ee28:	add.w	r9, sp, #192	; 0xc0
    ee2c:	ldr	r1, [sp, #56]	; 0x38
    ee2e:	str.w	r6, [r9]
    ee32:	adds	r3, #1
    ee34:	add	r4, r1
    ee36:	cmp	r3, #7
    ee38:	str	r4, [sp, #148]	; 0x94
    ee3a:	str	r3, [sp, #144]	; 0x90
    ee3c:	str.w	r1, [r9, #4]
    ee40:	ble.w	dff8 <_svfprintf_r+0x528>
    ee44:	b.w	e63e <_svfprintf_r+0xb6e>
    ee48:	ldr	r3, [sp, #116]	; 0x74
    ee4a:	adds	r5, r3, #3
    ee4c:	blt.n	ee8c <_svfprintf_r+0x13bc>
    ee4e:	cmp	fp, r3
    ee50:	blt.n	ee8c <_svfprintf_r+0x13bc>
    ee52:	str	r3, [sp, #60]	; 0x3c
    ee54:	b.n	eb6e <_svfprintf_r+0x109e>
    ee56:	mov	r3, r4
    ee58:	b.n	eb50 <_svfprintf_r+0x1080>
    ee5a:	add	r2, sp, #140	; 0x8c
    ee5c:	ldr	r1, [sp, #20]
    ee5e:	ldr	r0, [sp, #24]
    ee60:	bl	12a68 <__ssprint_r>
    ee64:	cmp	r0, #0
    ee66:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ee6a:	ldr	r4, [sp, #148]	; 0x94
    ee6c:	add.w	r9, sp, #192	; 0xc0
    ee70:	b.n	e70c <_svfprintf_r+0xc3c>
    ee72:	mov	r4, r2
    ee74:	adds	r3, #1
    ee76:	ldr	r2, [sp, #44]	; 0x2c
    ee78:	str	r3, [sp, #144]	; 0x90
    ee7a:	add	r4, r5
    ee7c:	cmp	r3, #7
    ee7e:	str	r4, [sp, #148]	; 0x94
    ee80:	stmia.w	r9, {r2, r5}
    ee84:	bgt.n	ee14 <_svfprintf_r+0x1344>
    ee86:	add.w	r9, r9, #8
    ee8a:	b.n	ee2c <_svfprintf_r+0x135c>
    ee8c:	ldr	r2, [sp, #52]	; 0x34
    ee8e:	subs	r2, #2
    ee90:	str	r2, [sp, #52]	; 0x34
    ee92:	subs	r3, #1
    ee94:	cmp	r3, #0
    ee96:	ldrb.w	r2, [sp, #52]	; 0x34
    ee9a:	str	r3, [sp, #116]	; 0x74
    ee9c:	it	lt
    ee9e:	neglt	r3, r3
    eea0:	strb.w	r2, [sp, #124]	; 0x7c
    eea4:	ite	lt
    eea6:	movlt	r2, #45	; 0x2d
    eea8:	movge	r2, #43	; 0x2b
    eeaa:	cmp	r3, #9
    eeac:	strb.w	r2, [sp, #125]	; 0x7d
    eeb0:	ble.w	f08a <_svfprintf_r+0x15ba>
    eeb4:	add.w	r0, sp, #139	; 0x8b
    eeb8:	mov	r4, r0
    eeba:	ldr	r2, [pc, #180]	; (ef70 <_svfprintf_r+0x14a0>)
    eebc:	smull	r2, r1, r2, r3
    eec0:	asrs	r2, r3, #31
    eec2:	rsb	r2, r2, r1, asr #2
    eec6:	add.w	r1, r2, r2, lsl #2
    eeca:	sub.w	r3, r3, r1, lsl #1
    eece:	add.w	r1, r3, #48	; 0x30
    eed2:	cmp	r2, #9
    eed4:	mov	r3, r2
    eed6:	strb.w	r1, [r4, #-1]!
    eeda:	bgt.n	eeba <_svfprintf_r+0x13ea>
    eedc:	mov	r1, r4
    eede:	adds	r3, #48	; 0x30
    eee0:	uxtb	r2, r3
    eee2:	strb.w	r2, [r1, #-1]!
    eee6:	cmp	r0, r1
    eee8:	bls.w	f154 <_svfprintf_r+0x1684>
    eeec:	add.w	r1, sp, #126	; 0x7e
    eef0:	mov	r3, r4
    eef2:	b.n	eef8 <_svfprintf_r+0x1428>
    eef4:	ldrb.w	r2, [r3], #1
    eef8:	strb.w	r2, [r1], #1
    eefc:	cmp	r0, r3
    eefe:	bne.n	eef4 <_svfprintf_r+0x1424>
    ef00:	adds	r3, r0, #1
    ef02:	subs	r3, r3, r4
    ef04:	add.w	r2, sp, #126	; 0x7e
    ef08:	add	r3, r2
    ef0a:	add	r2, sp, #124	; 0x7c
    ef0c:	subs	r3, r3, r2
    ef0e:	ldr	r2, [sp, #56]	; 0x38
    ef10:	str	r3, [sp, #84]	; 0x54
    ef12:	cmp	r2, #1
    ef14:	add	r3, r2
    ef16:	str	r3, [sp, #36]	; 0x24
    ef18:	ble.w	f0ea <_svfprintf_r+0x161a>
    ef1c:	ldr	r3, [sp, #36]	; 0x24
    ef1e:	ldr	r2, [sp, #72]	; 0x48
    ef20:	add	r3, r2
    ef22:	movs	r2, #0
    ef24:	str	r3, [sp, #36]	; 0x24
    ef26:	str	r2, [sp, #60]	; 0x3c
    ef28:	bic.w	r3, r3, r3, asr #31
    ef2c:	b.n	eb8a <_svfprintf_r+0x10ba>
    ef2e:	add	r2, sp, #140	; 0x8c
    ef30:	ldr	r1, [sp, #20]
    ef32:	ldr	r0, [sp, #24]
    ef34:	bl	12a68 <__ssprint_r>
    ef38:	cmp	r0, #0
    ef3a:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ef3e:	ldr	r3, [sp, #116]	; 0x74
    ef40:	ldr	r4, [sp, #148]	; 0x94
    ef42:	add.w	r9, sp, #192	; 0xc0
    ef46:	b.n	e920 <_svfprintf_r+0xe50>
    ef48:	add	r2, sp, #140	; 0x8c
    ef4a:	ldr	r1, [sp, #20]
    ef4c:	ldr	r0, [sp, #24]
    ef4e:	bl	12a68 <__ssprint_r>
    ef52:	cmp	r0, #0
    ef54:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    ef58:	ldr	r3, [sp, #116]	; 0x74
    ef5a:	ldr	r2, [sp, #56]	; 0x38
    ef5c:	ldr	r4, [sp, #148]	; 0x94
    ef5e:	subs	r3, r2, r3
    ef60:	add.w	r9, sp, #192	; 0xc0
    ef64:	b.n	e950 <_svfprintf_r+0xe80>
    ef66:	nop
    ef68:	.word	0x00013928
    ef6c:	.word	0x000138d8
    ef70:	.word	0x66666667
    ef74:	cmp	r5, #6
    ef76:	mov	r3, r5
    ef78:	it	cs
    ef7a:	movcs	r3, #6
    ef7c:	str	r3, [sp, #36]	; 0x24
    ef7e:	bic.w	r3, r3, r3, asr #31
    ef82:	mov	fp, r6
    ef84:	str	r7, [sp, #40]	; 0x28
    ef86:	str	r6, [sp, #60]	; 0x3c
    ef88:	mov	r7, r6
    ef8a:	str	r3, [sp, #16]
    ef8c:	ldr	r6, [pc, #536]	; (f1a8 <_svfprintf_r+0x16d8>)
    ef8e:	b.w	de74 <_svfprintf_r+0x3a4>
    ef92:	mov.w	fp, #6
    ef96:	b.n	eaca <_svfprintf_r+0xffa>
    ef98:	add	r2, sp, #132	; 0x84
    ef9a:	add	r3, sp, #120	; 0x78
    ef9c:	str	r2, [sp, #4]
    ef9e:	str	r3, [sp, #0]
    efa0:	mov	r2, fp
    efa2:	add	r3, sp, #116	; 0x74
    efa4:	movs	r1, #3
    efa6:	vldr	d0, [sp, #96]	; 0x60
    efaa:	ldr	r0, [sp, #24]
    efac:	bl	102d8 <_dtoa_r>
    efb0:	mov	r5, fp
    efb2:	mov	r6, r0
    efb4:	add.w	r4, r0, fp
    efb8:	b.n	eda6 <_svfprintf_r+0x12d6>
    efba:	movs	r7, #45	; 0x2d
    efbc:	strb.w	r7, [sp, #111]	; 0x6f
    efc0:	b.w	e11a <_svfprintf_r+0x64a>
    efc4:	str	r3, [sp, #12]
    efc6:	b.w	e272 <_svfprintf_r+0x7a2>
    efca:	ldrd	r1, r2, [sp, #64]	; 0x40
    efce:	add.w	r3, r2, #2147483648	; 0x80000000
    efd2:	str	r3, [sp, #100]	; 0x64
    efd4:	movs	r3, #45	; 0x2d
    efd6:	str	r1, [sp, #96]	; 0x60
    efd8:	str	r3, [sp, #16]
    efda:	b.n	eae6 <_svfprintf_r+0x1016>
    efdc:	ldr	r2, [sp, #72]	; 0x48
    efde:	ldr	r3, [sp, #56]	; 0x38
    efe0:	add	r3, r2
    efe2:	ldr	r2, [sp, #60]	; 0x3c
    efe4:	str	r3, [sp, #36]	; 0x24
    efe6:	cmp	r2, #0
    efe8:	ble.w	f0fe <_svfprintf_r+0x162e>
    efec:	movs	r2, #103	; 0x67
    efee:	bic.w	r3, r3, r3, asr #31
    eff2:	str	r2, [sp, #52]	; 0x34
    eff4:	b.n	eb8a <_svfprintf_r+0x10ba>
    eff6:	ldr	r3, [sp, #52]	; 0x34
    eff8:	cmp	r3, #71	; 0x47
    effa:	bne.w	eb28 <_svfprintf_r+0x1058>
    effe:	ldr	r3, [sp, #12]
    f000:	lsls	r3, r3, #31
    f002:	bmi.w	ed9a <_svfprintf_r+0x12ca>
    f006:	ldr	r3, [sp, #132]	; 0x84
    f008:	cmp	r7, #71	; 0x47
    f00a:	sub.w	r3, r3, r6
    f00e:	str	r3, [sp, #56]	; 0x38
    f010:	beq.w	ee48 <_svfprintf_r+0x1378>
    f014:	ldr	r3, [sp, #116]	; 0x74
    f016:	b.n	ee92 <_svfprintf_r+0x13c2>
    f018:	bic.w	r3, r5, r5, asr #31
    f01c:	str	r7, [sp, #40]	; 0x28
    f01e:	str	r3, [sp, #16]
    f020:	str	r5, [sp, #36]	; 0x24
    f022:	mov	fp, r0
    f024:	str	r0, [sp, #60]	; 0x3c
    f026:	ldrb.w	r7, [sp, #111]	; 0x6f
    f02a:	b.w	de74 <_svfprintf_r+0x3a4>
    f02e:	cmp	r3, #0
    f030:	ble.n	f10e <_svfprintf_r+0x163e>
    f032:	cmp.w	fp, #0
    f036:	bne.n	f0d8 <_svfprintf_r+0x1608>
    f038:	ldr	r2, [sp, #12]
    f03a:	lsls	r4, r2, #31
    f03c:	bmi.n	f0d8 <_svfprintf_r+0x1608>
    f03e:	mov	r2, r3
    f040:	str	r2, [sp, #36]	; 0x24
    f042:	bic.w	r3, r3, r3, asr #31
    f046:	b.n	eb8a <_svfprintf_r+0x10ba>
    f048:	ldr	r3, [sp, #12]
    f04a:	lsls	r3, r3, #31
    f04c:	mov	r7, fp
    f04e:	bpl.n	f05c <_svfprintf_r+0x158c>
    f050:	add	r6, sp, #256	; 0x100
    f052:	movs	r3, #48	; 0x30
    f054:	strb.w	r3, [r6, #-65]!
    f058:	b.w	de60 <_svfprintf_r+0x390>
    f05c:	str.w	fp, [sp, #36]	; 0x24
    f060:	add	r6, sp, #192	; 0xc0
    f062:	b.w	de66 <_svfprintf_r+0x396>
    f066:	add	r2, sp, #140	; 0x8c
    f068:	ldr	r1, [sp, #20]
    f06a:	ldr	r0, [sp, #24]
    f06c:	bl	12a68 <__ssprint_r>
    f070:	cmp	r0, #0
    f072:	bne.w	dcc4 <_svfprintf_r+0x1f4>
    f076:	ldr	r5, [sp, #116]	; 0x74
    f078:	ldr	r4, [sp, #148]	; 0x94
    f07a:	ldr	r3, [sp, #144]	; 0x90
    f07c:	add.w	r9, sp, #192	; 0xc0
    f080:	b.n	ecd0 <_svfprintf_r+0x1200>
    f082:	mov	r8, r4
    f084:	movs	r5, #0
    f086:	b.w	db88 <_svfprintf_r+0xb8>
    f08a:	adds	r3, #48	; 0x30
    f08c:	movs	r2, #48	; 0x30
    f08e:	strb.w	r3, [sp, #127]	; 0x7f
    f092:	strb.w	r2, [sp, #126]	; 0x7e
    f096:	add	r3, sp, #128	; 0x80
    f098:	b.n	ef0a <_svfprintf_r+0x143a>
    f09a:	ldr	r3, [sp, #132]	; 0x84
    f09c:	b.n	eb50 <_svfprintf_r+0x1080>
    f09e:	ldr	r2, [sp, #72]	; 0x48
    f0a0:	ldr	r3, [sp, #60]	; 0x3c
    f0a2:	add	r3, r2
    f0a4:	movs	r2, #103	; 0x67
    f0a6:	str	r3, [sp, #36]	; 0x24
    f0a8:	str	r2, [sp, #52]	; 0x34
    f0aa:	bic.w	r3, r3, r3, asr #31
    f0ae:	b.n	eb8a <_svfprintf_r+0x10ba>
    f0b0:	ldr	r6, [pc, #248]	; (f1ac <_svfprintf_r+0x16dc>)
    f0b2:	ldr	r3, [pc, #252]	; (f1b0 <_svfprintf_r+0x16e0>)
    f0b4:	ldrb.w	r7, [sp, #111]	; 0x6f
    f0b8:	b.w	e11e <_svfprintf_r+0x64e>
    f0bc:	movs	r2, #0
    f0be:	movs	r3, #0
    f0c0:	ldrd	r0, r1, [sp, #96]	; 0x60
    f0c4:	bl	b4a4 <__aeabi_dcmpeq>
    f0c8:	cmp	r0, #0
    f0ca:	bne.w	edae <_svfprintf_r+0x12de>
    f0ce:	rsb	r5, r5, #1
    f0d2:	str	r5, [sp, #116]	; 0x74
    f0d4:	add	r4, r5
    f0d6:	b.n	eb2a <_svfprintf_r+0x105a>
    f0d8:	ldr	r3, [sp, #60]	; 0x3c
    f0da:	ldr	r2, [sp, #72]	; 0x48
    f0dc:	adds	r5, r3, r2
    f0de:	add.w	r3, r5, fp
    f0e2:	str	r3, [sp, #36]	; 0x24
    f0e4:	bic.w	r3, r3, r3, asr #31
    f0e8:	b.n	eb8a <_svfprintf_r+0x10ba>
    f0ea:	ldr	r3, [sp, #12]
    f0ec:	ands.w	r3, r3, #1
    f0f0:	bne.w	ef1c <_svfprintf_r+0x144c>
    f0f4:	str	r3, [sp, #60]	; 0x3c
    f0f6:	ldr	r3, [sp, #36]	; 0x24
    f0f8:	bic.w	r3, r3, r3, asr #31
    f0fc:	b.n	eb8a <_svfprintf_r+0x10ba>
    f0fe:	ldr	r3, [sp, #60]	; 0x3c
    f100:	ldr	r2, [sp, #36]	; 0x24
    f102:	rsb	r3, r3, #1
    f106:	add	r2, r3
    f108:	mov	r3, r2
    f10a:	str	r2, [sp, #36]	; 0x24
    f10c:	b.n	efec <_svfprintf_r+0x151c>
    f10e:	cmp.w	fp, #0
    f112:	bne.n	f11a <_svfprintf_r+0x164a>
    f114:	ldr	r3, [sp, #12]
    f116:	lsls	r0, r3, #31
    f118:	bpl.n	f12a <_svfprintf_r+0x165a>
    f11a:	ldr	r3, [sp, #72]	; 0x48
    f11c:	adds	r5, r3, #1
    f11e:	add.w	r3, r5, fp
    f122:	str	r3, [sp, #36]	; 0x24
    f124:	bic.w	r3, r3, r3, asr #31
    f128:	b.n	eb8a <_svfprintf_r+0x10ba>
    f12a:	movs	r3, #1
    f12c:	str	r3, [sp, #36]	; 0x24
    f12e:	b.n	eb8a <_svfprintf_r+0x10ba>
    f130:	ldr	r0, [sp, #40]	; 0x28
    f132:	ldrb.w	r3, [r8, #1]
    f136:	ldr	r5, [r0, #0]
    f138:	adds	r0, #4
    f13a:	cmp	r5, #0
    f13c:	str	r0, [sp, #40]	; 0x28
    f13e:	mov	r8, r4
    f140:	bge.w	db84 <_svfprintf_r+0xb4>
    f144:	mov.w	r5, #4294967295
    f148:	b.w	db84 <_svfprintf_r+0xb4>
    f14c:	strb.w	r1, [sp, #111]	; 0x6f
    f150:	b.w	dce6 <_svfprintf_r+0x216>
    f154:	add.w	r3, sp, #126	; 0x7e
    f158:	b.n	ef0a <_svfprintf_r+0x143a>
    f15a:	ldr	r2, [sp, #24]
    f15c:	movs	r3, #12
    f15e:	str	r3, [r2, #0]
    f160:	mov.w	r0, #4294967295
    f164:	b.w	dcd6 <_svfprintf_r+0x206>
    f168:	strb.w	r1, [sp, #111]	; 0x6f
    f16c:	b.w	dde0 <_svfprintf_r+0x310>
    f170:	strb.w	r1, [sp, #111]	; 0x6f
    f174:	b.w	e0ac <_svfprintf_r+0x5dc>
    f178:	strb.w	r1, [sp, #111]	; 0x6f
    f17c:	b.w	e21a <_svfprintf_r+0x74a>
    f180:	strb.w	r1, [sp, #111]	; 0x6f
    f184:	b.w	e1be <_svfprintf_r+0x6ee>
    f188:	strb.w	r1, [sp, #111]	; 0x6f
    f18c:	b.w	e16a <_svfprintf_r+0x69a>
    f190:	strb.w	r1, [sp, #111]	; 0x6f
    f194:	b.w	e402 <_svfprintf_r+0x932>
    f198:	strb.w	r1, [sp, #111]	; 0x6f
    f19c:	b.w	e3c0 <_svfprintf_r+0x8f0>
    f1a0:	strb.w	r1, [sp, #111]	; 0x6f
    f1a4:	b.w	e384 <_svfprintf_r+0x8b4>
    f1a8:	.word	0x00013920
    f1ac:	.word	0x000138f4
    f1b0:	.word	0x000138f0

0000f1b4 <__ssvfscanf_r>:
    f1b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1b8:	mov	fp, r1
    f1ba:	ldrsh.w	r1, [r1, #12]
    f1be:	sub.w	sp, sp, #692	; 0x2b4
    f1c2:	mov	sl, r0
    f1c4:	lsls	r0, r1, #18
    f1c6:	mov	r4, r2
    f1c8:	str	r3, [sp, #20]
    f1ca:	bmi.n	f1e0 <__ssvfscanf_r+0x2c>
    f1cc:	ldr.w	r3, [fp, #100]	; 0x64
    f1d0:	orr.w	r1, r1, #8192	; 0x2000
    f1d4:	bic.w	r3, r3, #8192	; 0x2000
    f1d8:	strh.w	r1, [fp, #12]
    f1dc:	str.w	r3, [fp, #100]	; 0x64
    f1e0:	mov	r6, r4
    f1e2:	movs	r3, #0
    f1e4:	str	r3, [sp, #28]
    f1e6:	str	r3, [sp, #16]
    f1e8:	mov	r7, r3
    f1ea:	str	r3, [sp, #24]
    f1ec:	ldrb.w	r3, [r6], #1
    f1f0:	str	r3, [sp, #68]	; 0x44
    f1f2:	cbz	r3, f250 <__ssvfscanf_r+0x9c>
    f1f4:	bl	ba20 <__locale_ctype_ptr>
    f1f8:	ldr	r2, [sp, #68]	; 0x44
    f1fa:	add	r0, r2
    f1fc:	ldrb	r3, [r0, #1]
    f1fe:	and.w	r3, r3, #8
    f202:	and.w	r5, r3, #255	; 0xff
    f206:	cbz	r3, f25a <__ssvfscanf_r+0xa6>
    f208:	ldr.w	r3, [fp, #4]
    f20c:	b.n	f232 <__ssvfscanf_r+0x7e>
    f20e:	bl	ba20 <__locale_ctype_ptr>
    f212:	ldr.w	r3, [fp]
    f216:	ldrb	r2, [r3, #0]
    f218:	add	r0, r2
    f21a:	adds	r3, #1
    f21c:	ldrb	r2, [r0, #1]
    f21e:	lsls	r1, r2, #28
    f220:	bpl.n	f242 <__ssvfscanf_r+0x8e>
    f222:	ldr.w	r2, [fp, #4]
    f226:	str.w	r3, [fp]
    f22a:	subs	r3, r2, #1
    f22c:	adds	r7, #1
    f22e:	str.w	r3, [fp, #4]
    f232:	cmp	r3, #0
    f234:	bgt.n	f20e <__ssvfscanf_r+0x5a>
    f236:	mov	r1, fp
    f238:	mov	r0, sl
    f23a:	bl	12bec <__ssrefill_r>
    f23e:	cmp	r0, #0
    f240:	beq.n	f20e <__ssvfscanf_r+0x5a>
    f242:	mov	r4, r6
    f244:	mov	r6, r4
    f246:	ldrb.w	r3, [r6], #1
    f24a:	str	r3, [sp, #68]	; 0x44
    f24c:	cmp	r3, #0
    f24e:	bne.n	f1f4 <__ssvfscanf_r+0x40>
    f250:	ldr	r0, [sp, #24]
    f252:	add.w	sp, sp, #692	; 0x2b4
    f256:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f25a:	cmp	r2, #37	; 0x25
    f25c:	bne.w	f368 <__ssvfscanf_r+0x1b4>
    f260:	ldrb.w	r8, [r4, #1]
    f264:	mov	r4, r5
    f266:	adds	r3, r6, #1
    f268:	cmp.w	r8, #120	; 0x78
    f26c:	bhi.w	f6f6 <__ssvfscanf_r+0x542>
    f270:	tbh	[pc, r8, lsl #1]
    f274:	.word	0x02410092
    f278:	.word	0x02410241
    f27c:	.word	0x02410241
    f280:	.word	0x02410241
    f284:	.word	0x02410241
    f288:	.word	0x02410241
    f28c:	.word	0x02410241
    f290:	.word	0x02410241
    f294:	.word	0x02410241
    f298:	.word	0x02410241
    f29c:	.word	0x02410241
    f2a0:	.word	0x02410241
    f2a4:	.word	0x02410241
    f2a8:	.word	0x02410241
    f2ac:	.word	0x02410241
    f2b0:	.word	0x02410241
    f2b4:	.word	0x02410241
    f2b8:	.word	0x02410241
    f2bc:	.word	0x00790241
    f2c0:	.word	0x02410241
    f2c4:	.word	0x02410241
    f2c8:	.word	0x024101d8
    f2cc:	.word	0x02410241
    f2d0:	.word	0x02410241
    f2d4:	.word	0x01cf01cf
    f2d8:	.word	0x01cf01cf
    f2dc:	.word	0x01cf01cf
    f2e0:	.word	0x01cf01cf
    f2e4:	.word	0x01cf01cf
    f2e8:	.word	0x02410241
    f2ec:	.word	0x02410241
    f2f0:	.word	0x02410241
    f2f4:	.word	0x02410241
    f2f8:	.word	0x02410241
    f2fc:	.word	0x01b901c1
    f300:	.word	0x01b90241
    f304:	.word	0x02410241
    f308:	.word	0x02410241
    f30c:	.word	0x024101b3
    f310:	.word	0x01a30241
    f314:	.word	0x02410241
    f318:	.word	0x02410241
    f31c:	.word	0x02410241
    f320:	.word	0x02410241
    f324:	.word	0x02410193
    f328:	.word	0x01510241
    f32c:	.word	0x02410241
    f330:	.word	0x02410241
    f334:	.word	0x02410241
    f338:	.word	0x01220241
    f33c:	.word	0x01b90188
    f340:	.word	0x01b901b9
    f344:	.word	0x0098011c
    f348:	.word	0x02410241
    f34c:	.word	0x024100d5
    f350:	.word	0x0101010d
    f354:	.word	0x024100f3
    f358:	.word	0x00eb0241
    f35c:	.word	0x00df0241
    f360:	.word	0x02410241
    f364:	.short	0x0193
    f366:	mov	r6, r3
    f368:	ldr.w	r3, [fp, #4]
    f36c:	cmp	r3, #0
    f36e:	ble.w	f818 <__ssvfscanf_r+0x664>
    f372:	ldr.w	r3, [fp]
    f376:	ldrb.w	r2, [r6, #-1]
    f37a:	ldrb	r1, [r3, #0]
    f37c:	cmp	r1, r2
    f37e:	bne.w	f250 <__ssvfscanf_r+0x9c>
    f382:	ldr.w	r2, [fp, #4]
    f386:	adds	r3, #1
    f388:	subs	r2, #1
    f38a:	str.w	r3, [fp]
    f38e:	adds	r7, #1
    f390:	str.w	r2, [fp, #4]
    f394:	mov	r4, r6
    f396:	b.n	f244 <__ssvfscanf_r+0x90>
    f398:	mov.w	r0, #4294967295
    f39c:	add.w	sp, sp, #692	; 0x2b4
    f3a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3a4:	str	r3, [sp, #12]
    f3a6:	ldr.w	r3, [fp, #4]
    f3aa:	cmp	r3, #0
    f3ac:	ble.w	f876 <__ssvfscanf_r+0x6c2>
    f3b0:	ldr	r3, [pc, #736]	; (f694 <__ssvfscanf_r+0x4e0>)
    f3b2:	str	r3, [sp, #28]
    f3b4:	movs	r3, #0
    f3b6:	str	r3, [sp, #16]
    f3b8:	movs	r6, #3
    f3ba:	b.n	f3c0 <__ssvfscanf_r+0x20c>
    f3bc:	str.w	lr, [fp]
    f3c0:	bl	ba20 <__locale_ctype_ptr>
    f3c4:	ldr.w	r2, [fp]
    f3c8:	ldrb	r1, [r2, #0]
    f3ca:	add	r0, r1
    f3cc:	add.w	lr, r2, #1
    f3d0:	ldrb	r3, [r0, #1]
    f3d2:	and.w	r3, r3, #8
    f3d6:	and.w	r8, r3, #255	; 0xff
    f3da:	cmp	r3, #0
    f3dc:	beq.w	f8de <__ssvfscanf_r+0x72a>
    f3e0:	ldr.w	r3, [fp, #4]
    f3e4:	subs	r3, #1
    f3e6:	cmp	r3, #0
    f3e8:	add.w	r7, r7, #1
    f3ec:	str.w	r3, [fp, #4]
    f3f0:	bgt.n	f3bc <__ssvfscanf_r+0x208>
    f3f2:	mov	r1, fp
    f3f4:	mov	r0, sl
    f3f6:	bl	12bec <__ssrefill_r>
    f3fa:	cmp	r0, #0
    f3fc:	beq.n	f3c0 <__ssvfscanf_r+0x20c>
    f3fe:	ldr	r2, [sp, #24]
    f400:	cmp	r2, #0
    f402:	beq.n	f398 <__ssvfscanf_r+0x1e4>
    f404:	ldrh.w	r3, [fp, #12]
    f408:	tst.w	r3, #64	; 0x40
    f40c:	mov	r3, r2
    f40e:	it	ne
    f410:	movne.w	r3, #4294967295
    f414:	mov	r0, r3
    f416:	add.w	sp, sp, #692	; 0x2b4
    f41a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f41e:	ldrb.w	r8, [r6, #1]
    f422:	cmp.w	r8, #108	; 0x6c
    f426:	beq.w	f82e <__ssvfscanf_r+0x67a>
    f42a:	orr.w	r5, r5, #1
    f42e:	mov	r6, r3
    f430:	b.n	f266 <__ssvfscanf_r+0xb2>
    f432:	str	r3, [sp, #12]
    f434:	ldr.w	r3, [fp, #4]
    f438:	cmp	r3, #0
    f43a:	ble.w	f8ce <__ssvfscanf_r+0x71a>
    f43e:	ldr	r3, [pc, #600]	; (f698 <__ssvfscanf_r+0x4e4>)
    f440:	str	r3, [sp, #28]
    f442:	movs	r3, #10
    f444:	str	r3, [sp, #16]
    f446:	movs	r6, #3
    f448:	b.n	f3c0 <__ssvfscanf_r+0x20c>
    f44a:	str	r3, [sp, #12]
    f44c:	ldr.w	r3, [fp, #4]
    f450:	cmp	r3, #0
    f452:	ble.w	f8be <__ssvfscanf_r+0x70a>
    f456:	movs	r6, #2
    f458:	b.n	f3c0 <__ssvfscanf_r+0x20c>
    f45a:	str	r3, [sp, #12]
    f45c:	ldr.w	r3, [fp, #4]
    f460:	cmp	r3, #0
    f462:	orr.w	r5, r5, #544	; 0x220
    f466:	ble.w	f5aa <__ssvfscanf_r+0x3f6>
    f46a:	ldr	r3, [pc, #556]	; (f698 <__ssvfscanf_r+0x4e4>)
    f46c:	str	r3, [sp, #28]
    f46e:	movs	r3, #16
    f470:	str	r3, [sp, #16]
    f472:	movs	r6, #3
    f474:	b.n	f3c0 <__ssvfscanf_r+0x20c>
    f476:	str	r3, [sp, #12]
    f478:	ldr.w	r3, [fp, #4]
    f47c:	cmp	r3, #0
    f47e:	ble.w	f5ca <__ssvfscanf_r+0x416>
    f482:	ldr	r3, [pc, #532]	; (f698 <__ssvfscanf_r+0x4e4>)
    f484:	str	r3, [sp, #28]
    f486:	movs	r3, #8
    f488:	str	r3, [sp, #16]
    f48a:	movs	r6, #3
    f48c:	b.n	f3c0 <__ssvfscanf_r+0x20c>
    f48e:	lsls	r2, r5, #27
    f490:	mov	r6, r3
    f492:	str	r3, [sp, #12]
    f494:	bmi.w	f67c <__ssvfscanf_r+0x4c8>
    f498:	lsls	r3, r5, #29
    f49a:	bpl.w	f846 <__ssvfscanf_r+0x692>
    f49e:	ldr	r1, [sp, #20]
    f4a0:	ldr	r3, [r1, #0]
    f4a2:	strh	r7, [r3, #0]
    f4a4:	adds	r3, r1, #4
    f4a6:	str	r3, [sp, #20]
    f4a8:	mov	r4, r6
    f4aa:	b.n	f244 <__ssvfscanf_r+0x90>
    f4ac:	ldrb.w	r8, [r6, #1]
    f4b0:	orr.w	r5, r5, #4
    f4b4:	mov	r6, r3
    f4b6:	b.n	f266 <__ssvfscanf_r+0xb2>
    f4b8:	str	r3, [sp, #12]
    f4ba:	ldr.w	r3, [fp, #4]
    f4be:	cmp	r3, #0
    f4c0:	ble.w	f89e <__ssvfscanf_r+0x6ea>
    f4c4:	cmp	r4, #0
    f4c6:	it	eq
    f4c8:	moveq	r4, #1
    f4ca:	ands.w	r3, r5, #1
    f4ce:	bne.w	f716 <__ssvfscanf_r+0x562>
    f4d2:	lsls	r2, r5, #27
    f4d4:	bpl.w	f7ee <__ssvfscanf_r+0x63a>
    f4d8:	mov	r5, r3
    f4da:	b.n	f4f0 <__ssvfscanf_r+0x33c>
    f4dc:	add	r3, r2
    f4de:	str.w	r3, [fp]
    f4e2:	add	r5, r2
    f4e4:	subs	r4, r4, r2
    f4e6:	bl	12bec <__ssrefill_r>
    f4ea:	cmp	r0, #0
    f4ec:	bne.w	f7e6 <__ssvfscanf_r+0x632>
    f4f0:	ldr.w	r2, [fp, #4]
    f4f4:	ldr.w	r3, [fp]
    f4f8:	cmp	r2, r4
    f4fa:	mov	r1, fp
    f4fc:	mov	r0, sl
    f4fe:	blt.n	f4dc <__ssvfscanf_r+0x328>
    f500:	subs	r2, r2, r4
    f502:	add	r3, r4
    f504:	str.w	r2, [fp, #4]
    f508:	add	r5, r4
    f50a:	str.w	r3, [fp]
    f50e:	ldr	r6, [sp, #12]
    f510:	add	r7, r5
    f512:	mov	r4, r6
    f514:	b.n	f244 <__ssvfscanf_r+0x90>
    f516:	add.w	r9, sp, #80	; 0x50
    f51a:	mov	r1, r3
    f51c:	mov	r0, r9
    f51e:	bl	12488 <__sccl>
    f522:	ldr.w	r3, [fp, #4]
    f526:	cmp	r3, #0
    f528:	mov	r6, r0
    f52a:	ble.w	f88e <__ssvfscanf_r+0x6da>
    f52e:	cmp	r4, #0
    f530:	ldr.w	r2, [fp]
    f534:	it	eq
    f536:	moveq.w	r4, #4294967295
    f53a:	lsls	r3, r5, #27
    f53c:	ldrb	r1, [r2, #0]
    f53e:	bpl.w	f682 <__ssvfscanf_r+0x4ce>
    f542:	mov	r8, r4
    f544:	movs	r5, #0
    f546:	b.n	f54a <__ssvfscanf_r+0x396>
    f548:	ldrb	r1, [r2, #0]
    f54a:	ldrb.w	r3, [r9, r1]
    f54e:	adds	r2, #1
    f550:	cmp	r3, #0
    f552:	beq.w	f7dc <__ssvfscanf_r+0x628>
    f556:	ldr.w	r3, [fp, #4]
    f55a:	str.w	r2, [fp]
    f55e:	adds	r5, #1
    f560:	subs	r3, #1
    f562:	cmp	r5, r4
    f564:	str.w	r3, [fp, #4]
    f568:	beq.w	f7d6 <__ssvfscanf_r+0x622>
    f56c:	cmp	r3, #0
    f56e:	bgt.n	f548 <__ssvfscanf_r+0x394>
    f570:	mov	r1, fp
    f572:	mov	r0, sl
    f574:	bl	12bec <__ssrefill_r>
    f578:	cmp	r0, #0
    f57a:	bne.w	f7d4 <__ssvfscanf_r+0x620>
    f57e:	ldr.w	r2, [fp]
    f582:	b.n	f548 <__ssvfscanf_r+0x394>
    f584:	str	r3, [sp, #12]
    f586:	ldr.w	r3, [fp, #4]
    f58a:	cmp	r3, #0
    f58c:	ble.n	f604 <__ssvfscanf_r+0x450>
    f58e:	ldr	r3, [pc, #260]	; (f694 <__ssvfscanf_r+0x4e0>)
    f590:	str	r3, [sp, #28]
    f592:	movs	r3, #10
    f594:	str	r3, [sp, #16]
    f596:	movs	r6, #3
    f598:	b.n	f3c0 <__ssvfscanf_r+0x20c>
    f59a:	str	r3, [sp, #12]
    f59c:	ldr.w	r3, [fp, #4]
    f5a0:	cmp	r3, #0
    f5a2:	orr.w	r5, r5, #512	; 0x200
    f5a6:	bgt.w	f46a <__ssvfscanf_r+0x2b6>
    f5aa:	mov	r1, fp
    f5ac:	mov	r0, sl
    f5ae:	bl	12bec <__ssrefill_r>
    f5b2:	cmp	r0, #0
    f5b4:	beq.w	f46a <__ssvfscanf_r+0x2b6>
    f5b8:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f5ba:	str	r3, [sp, #12]
    f5bc:	ldr.w	r3, [fp, #4]
    f5c0:	cmp	r3, #0
    f5c2:	orr.w	r5, r5, #1
    f5c6:	bgt.w	f482 <__ssvfscanf_r+0x2ce>
    f5ca:	mov	r1, fp
    f5cc:	mov	r0, sl
    f5ce:	bl	12bec <__ssrefill_r>
    f5d2:	cmp	r0, #0
    f5d4:	beq.w	f482 <__ssvfscanf_r+0x2ce>
    f5d8:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f5da:	ldrb.w	r8, [r6, #1]
    f5de:	orr.w	r5, r5, #2
    f5e2:	mov	r6, r3
    f5e4:	b.n	f266 <__ssvfscanf_r+0xb2>
    f5e6:	str	r3, [sp, #12]
    f5e8:	ldr.w	r3, [fp, #4]
    f5ec:	cmp	r3, #0
    f5ee:	ble.w	f8ae <__ssvfscanf_r+0x6fa>
    f5f2:	movs	r6, #4
    f5f4:	b.n	f3c0 <__ssvfscanf_r+0x20c>
    f5f6:	str	r3, [sp, #12]
    f5f8:	ldr.w	r3, [fp, #4]
    f5fc:	cmp	r3, #0
    f5fe:	orr.w	r5, r5, #1
    f602:	bgt.n	f58e <__ssvfscanf_r+0x3da>
    f604:	mov	r1, fp
    f606:	mov	r0, sl
    f608:	bl	12bec <__ssrefill_r>
    f60c:	cmp	r0, #0
    f60e:	beq.n	f58e <__ssvfscanf_r+0x3da>
    f610:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f612:	add.w	r4, r4, r4, lsl #2
    f616:	add.w	r4, r8, r4, lsl #1
    f61a:	subs	r4, #48	; 0x30
    f61c:	ldrb.w	r8, [r6, #1]
    f620:	mov	r6, r3
    f622:	b.n	f266 <__ssvfscanf_r+0xb2>
    f624:	ldrb.w	r8, [r6, #1]
    f628:	orr.w	r5, r5, #16
    f62c:	mov	r6, r3
    f62e:	b.n	f266 <__ssvfscanf_r+0xb2>
    f630:	add	r3, sp, #72	; 0x48
    f632:	mov	r1, r8
    f634:	mov	r0, r3
    f636:	movs	r2, #8
    f638:	str	r3, [sp, #32]
    f63a:	bl	c1bc <memset>
    f63e:	ands.w	r9, r5, #16
    f642:	bne.w	ff08 <__ssvfscanf_r+0xd54>
    f646:	ldr	r2, [sp, #20]
    f648:	mov	r3, r2
    f64a:	adds	r3, #4
    f64c:	ldr.w	r8, [r2]
    f650:	str	r3, [sp, #20]
    f652:	movs	r6, #0
    f654:	bl	ba20 <__locale_ctype_ptr>
    f658:	ldr.w	r3, [fp]
    f65c:	ldrb	r3, [r3, #0]
    f65e:	add	r0, r3
    f660:	ldrb	r3, [r0, #1]
    f662:	lsls	r0, r3, #28
    f664:	bmi.n	f66c <__ssvfscanf_r+0x4b8>
    f666:	cmp	r4, #0
    f668:	bne.w	fe6c <__ssvfscanf_r+0xcb8>
    f66c:	cmp.w	r9, #0
    f670:	bne.n	f67c <__ssvfscanf_r+0x4c8>
    f672:	str.w	r9, [r8]
    f676:	ldr	r3, [sp, #24]
    f678:	adds	r3, #1
    f67a:	str	r3, [sp, #24]
    f67c:	ldr	r6, [sp, #12]
    f67e:	mov	r4, r6
    f680:	b.n	f244 <__ssvfscanf_r+0x90>
    f682:	ldr	r0, [sp, #20]
    f684:	ldr	r5, [r0, #0]
    f686:	mov	r3, r0
    f688:	adds	r3, #4
    f68a:	add.w	r8, r5, r4
    f68e:	str	r3, [sp, #12]
    f690:	mov	r4, r5
    f692:	b.n	f6a2 <__ssvfscanf_r+0x4ee>
    f694:	.word	0x0000daa9
    f698:	.word	0x00012835
    f69c:	ldr.w	r2, [fp]
    f6a0:	ldrb	r1, [r2, #0]
    f6a2:	ldrb.w	r3, [r9, r1]
    f6a6:	adds	r0, r2, #1
    f6a8:	cbz	r3, f6dc <__ssvfscanf_r+0x528>
    f6aa:	ldr.w	r3, [fp, #4]
    f6ae:	str.w	r0, [fp]
    f6b2:	subs	r3, #1
    f6b4:	str.w	r3, [fp, #4]
    f6b8:	ldrb	r3, [r2, #0]
    f6ba:	strb.w	r3, [r4], #1
    f6be:	cmp	r8, r4
    f6c0:	beq.n	f6dc <__ssvfscanf_r+0x528>
    f6c2:	ldr.w	r3, [fp, #4]
    f6c6:	cmp	r3, #0
    f6c8:	bgt.n	f69c <__ssvfscanf_r+0x4e8>
    f6ca:	mov	r1, fp
    f6cc:	mov	r0, sl
    f6ce:	bl	12bec <__ssrefill_r>
    f6d2:	cmp	r0, #0
    f6d4:	beq.n	f69c <__ssvfscanf_r+0x4e8>
    f6d6:	cmp	r5, r4
    f6d8:	beq.w	f3fe <__ssvfscanf_r+0x24a>
    f6dc:	subs	r5, r4, r5
    f6de:	beq.w	f250 <__ssvfscanf_r+0x9c>
    f6e2:	ldr	r2, [sp, #24]
    f6e4:	adds	r2, #1
    f6e6:	movs	r3, #0
    f6e8:	str	r2, [sp, #24]
    f6ea:	ldr	r2, [sp, #12]
    f6ec:	str	r2, [sp, #20]
    f6ee:	strb	r3, [r4, #0]
    f6f0:	add	r7, r5
    f6f2:	mov	r4, r6
    f6f4:	b.n	f244 <__ssvfscanf_r+0x90>
    f6f6:	str	r3, [sp, #12]
    f6f8:	bl	ba20 <__locale_ctype_ptr>
    f6fc:	add	r0, r8
    f6fe:	ldrb	r3, [r0, #1]
    f700:	and.w	r3, r3, #3
    f704:	cmp	r3, #1
    f706:	ldr.w	r3, [fp, #4]
    f70a:	beq.w	f83a <__ssvfscanf_r+0x686>
    f70e:	cmp	r3, #0
    f710:	bgt.w	f58e <__ssvfscanf_r+0x3da>
    f714:	b.n	f604 <__ssvfscanf_r+0x450>
    f716:	add	r3, sp, #72	; 0x48
    f718:	mov	r0, r3
    f71a:	movs	r2, #8
    f71c:	movs	r1, #0
    f71e:	str	r3, [sp, #32]
    f720:	bl	c1bc <memset>
    f724:	ands.w	r3, r5, #16
    f728:	str	r3, [sp, #40]	; 0x28
    f72a:	bne.n	f828 <__ssvfscanf_r+0x674>
    f72c:	ldr	r2, [sp, #20]
    f72e:	mov	r3, r2
    f730:	adds	r3, #4
    f732:	ldr.w	r9, [r2]
    f736:	str	r3, [sp, #20]
    f738:	movs	r5, #0
    f73a:	add.w	r8, sp, #336	; 0x150
    f73e:	bl	b9fc <__locale_mb_cur_max>
    f742:	cmp	r0, r5
    f744:	beq.w	f3fe <__ssvfscanf_r+0x24a>
    f748:	ldmia.w	fp, {r2, r3}
    f74c:	ldrb.w	r0, [r2], #1
    f750:	str.w	r2, [fp]
    f754:	subs	r3, #1
    f756:	ldr	r2, [sp, #32]
    f758:	str	r2, [sp, #0]
    f75a:	adds	r6, r5, #1
    f75c:	str.w	r3, [fp, #4]
    f760:	mov	r1, r9
    f762:	strb.w	r0, [r8, r5]
    f766:	mov	r3, r6
    f768:	mov	r2, r8
    f76a:	mov	r0, sl
    f76c:	bl	11b44 <_mbrtowc_r>
    f770:	adds	r1, r0, #1
    f772:	beq.w	f3fe <__ssvfscanf_r+0x24a>
    f776:	cbnz	r0, f7a2 <__ssvfscanf_r+0x5ee>
    f778:	ldr	r3, [sp, #40]	; 0x28
    f77a:	cbnz	r3, f7c2 <__ssvfscanf_r+0x60e>
    f77c:	str.w	r3, [r9]
    f780:	add	r7, r6
    f782:	subs	r4, #1
    f784:	add.w	r9, r9, #4
    f788:	ldr.w	r3, [fp, #4]
    f78c:	cmp	r3, #0
    f78e:	mov.w	r5, #0
    f792:	ble.n	f7b0 <__ssvfscanf_r+0x5fc>
    f794:	cmp	r4, #0
    f796:	bne.n	f73e <__ssvfscanf_r+0x58a>
    f798:	ldr	r3, [sp, #40]	; 0x28
    f79a:	cmp	r3, #0
    f79c:	beq.w	f676 <__ssvfscanf_r+0x4c2>
    f7a0:	b.n	f67c <__ssvfscanf_r+0x4c8>
    f7a2:	adds	r0, #2
    f7a4:	bne.n	f7c8 <__ssvfscanf_r+0x614>
    f7a6:	ldr.w	r3, [fp, #4]
    f7aa:	cmp	r3, #0
    f7ac:	mov	r5, r6
    f7ae:	bgt.n	f73e <__ssvfscanf_r+0x58a>
    f7b0:	mov	r1, fp
    f7b2:	mov	r0, sl
    f7b4:	bl	12bec <__ssrefill_r>
    f7b8:	cmp	r0, #0
    f7ba:	beq.n	f794 <__ssvfscanf_r+0x5e0>
    f7bc:	cmp	r5, #0
    f7be:	beq.n	f798 <__ssvfscanf_r+0x5e4>
    f7c0:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f7c2:	add	r7, r6
    f7c4:	subs	r4, #1
    f7c6:	b.n	f788 <__ssvfscanf_r+0x5d4>
    f7c8:	ldr	r3, [sp, #40]	; 0x28
    f7ca:	add	r7, r6
    f7cc:	subs	r4, #1
    f7ce:	cmp	r3, #0
    f7d0:	bne.n	f788 <__ssvfscanf_r+0x5d4>
    f7d2:	b.n	f784 <__ssvfscanf_r+0x5d0>
    f7d4:	mov	r8, r5
    f7d6:	mov	r5, r8
    f7d8:	add	r7, r5
    f7da:	b.n	f6f2 <__ssvfscanf_r+0x53e>
    f7dc:	cmp	r5, #0
    f7de:	beq.w	f250 <__ssvfscanf_r+0x9c>
    f7e2:	add	r7, r5
    f7e4:	b.n	f6f2 <__ssvfscanf_r+0x53e>
    f7e6:	cmp	r5, #0
    f7e8:	bne.w	f50e <__ssvfscanf_r+0x35a>
    f7ec:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f7ee:	ldr	r5, [sp, #20]
    f7f0:	mov	r3, r4
    f7f2:	ldr	r1, [r5, #0]
    f7f4:	str.w	fp, [sp]
    f7f8:	movs	r2, #1
    f7fa:	mov	r0, sl
    f7fc:	bl	12c28 <_sfread_r>
    f800:	adds	r6, r5, #4
    f802:	cmp	r0, #0
    f804:	beq.w	f3fe <__ssvfscanf_r+0x24a>
    f808:	ldr	r3, [sp, #24]
    f80a:	str	r6, [sp, #20]
    f80c:	ldr	r6, [sp, #12]
    f80e:	adds	r3, #1
    f810:	add	r7, r0
    f812:	str	r3, [sp, #24]
    f814:	mov	r4, r6
    f816:	b.n	f244 <__ssvfscanf_r+0x90>
    f818:	mov	r1, fp
    f81a:	mov	r0, sl
    f81c:	bl	12bec <__ssrefill_r>
    f820:	cmp	r0, #0
    f822:	beq.w	f372 <__ssvfscanf_r+0x1be>
    f826:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f828:	mov.w	r9, #0
    f82c:	b.n	f738 <__ssvfscanf_r+0x584>
    f82e:	ldrb.w	r8, [r6, #2]
    f832:	orr.w	r5, r5, #2
    f836:	adds	r6, #2
    f838:	b.n	f266 <__ssvfscanf_r+0xb2>
    f83a:	cmp	r3, #0
    f83c:	orr.w	r5, r5, #1
    f840:	bgt.w	f58e <__ssvfscanf_r+0x3da>
    f844:	b.n	f604 <__ssvfscanf_r+0x450>
    f846:	lsls	r4, r5, #31
    f848:	bmi.n	f864 <__ssvfscanf_r+0x6b0>
    f84a:	lsls	r0, r5, #30
    f84c:	bpl.n	f864 <__ssvfscanf_r+0x6b0>
    f84e:	ldr	r2, [sp, #20]
    f850:	ldr	r6, [sp, #12]
    f852:	ldr	r3, [r2, #0]
    f854:	mov	r0, r7
    f856:	asrs	r1, r7, #31
    f858:	adds	r2, #4
    f85a:	str	r2, [sp, #20]
    f85c:	strd	r0, r1, [r3]
    f860:	mov	r4, r6
    f862:	b.n	f244 <__ssvfscanf_r+0x90>
    f864:	ldr	r2, [sp, #20]
    f866:	ldr	r6, [sp, #12]
    f868:	ldr	r3, [r2, #0]
    f86a:	str	r7, [r3, #0]
    f86c:	mov	r3, r2
    f86e:	adds	r3, #4
    f870:	str	r3, [sp, #20]
    f872:	mov	r4, r6
    f874:	b.n	f244 <__ssvfscanf_r+0x90>
    f876:	mov	r1, fp
    f878:	mov	r0, sl
    f87a:	bl	12bec <__ssrefill_r>
    f87e:	cmp	r0, #0
    f880:	bne.w	f3fe <__ssvfscanf_r+0x24a>
    f884:	ldr	r3, [pc, #504]	; (fa80 <__ssvfscanf_r+0x8cc>)
    f886:	str	r0, [sp, #16]
    f888:	str	r3, [sp, #28]
    f88a:	movs	r6, #3
    f88c:	b.n	f3c0 <__ssvfscanf_r+0x20c>
    f88e:	mov	r1, fp
    f890:	mov	r0, sl
    f892:	bl	12bec <__ssrefill_r>
    f896:	cmp	r0, #0
    f898:	beq.w	f52e <__ssvfscanf_r+0x37a>
    f89c:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f89e:	mov	r1, fp
    f8a0:	mov	r0, sl
    f8a2:	bl	12bec <__ssrefill_r>
    f8a6:	cmp	r0, #0
    f8a8:	beq.w	f4c4 <__ssvfscanf_r+0x310>
    f8ac:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f8ae:	mov	r1, fp
    f8b0:	mov	r0, sl
    f8b2:	bl	12bec <__ssrefill_r>
    f8b6:	cmp	r0, #0
    f8b8:	beq.w	f5f2 <__ssvfscanf_r+0x43e>
    f8bc:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f8be:	mov	r1, fp
    f8c0:	mov	r0, sl
    f8c2:	bl	12bec <__ssrefill_r>
    f8c6:	cmp	r0, #0
    f8c8:	beq.w	f456 <__ssvfscanf_r+0x2a2>
    f8cc:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f8ce:	mov	r1, fp
    f8d0:	mov	r0, sl
    f8d2:	bl	12bec <__ssrefill_r>
    f8d6:	cmp	r0, #0
    f8d8:	beq.w	f43e <__ssvfscanf_r+0x28a>
    f8dc:	b.n	f3fe <__ssvfscanf_r+0x24a>
    f8de:	cmp	r6, #3
    f8e0:	beq.w	fc22 <__ssvfscanf_r+0xa6e>
    f8e4:	cmp	r6, #4
    f8e6:	bne.w	fd64 <__ssvfscanf_r+0xbb0>
    f8ea:	mov	r0, sl
    f8ec:	bl	11b28 <_localeconv_r>
    f8f0:	subs	r3, r4, #1
    f8f2:	ldr	r2, [r0, #0]
    f8f4:	str	r2, [sp, #48]	; 0x30
    f8f6:	cmp.w	r3, #348	; 0x15c
    f8fa:	bls.w	fdcc <__ssvfscanf_r+0xc18>
    f8fe:	mvn.w	r1, #348	; 0x15c
    f902:	adds	r3, r4, r1
    f904:	str	r3, [sp, #56]	; 0x38
    f906:	movw	r4, #349	; 0x15d
    f90a:	add	r3, sp, #336	; 0x150
    f90c:	mov.w	r8, #0
    f910:	mov	r2, r3
    f912:	str	r3, [sp, #40]	; 0x28
    f914:	orr.w	r5, r5, #1920	; 0x780
    f918:	mov	r3, r8
    f91a:	str.w	r8, [sp, #60]	; 0x3c
    f91e:	str.w	r8, [sp, #52]	; 0x34
    f922:	mov	r6, r8
    f924:	str.w	r8, [sp, #44]	; 0x2c
    f928:	mov	r9, r2
    f92a:	ldr.w	r0, [fp]
    f92e:	ldrb	r1, [r0, #0]
    f930:	sub.w	lr, r1, #43	; 0x2b
    f934:	cmp.w	lr, #78	; 0x4e
    f938:	bhi.w	fbd2 <__ssvfscanf_r+0xa1e>
    f93c:	tbh	[pc, lr, lsl #1]
    f940:	.word	0x0149007a
    f944:	.word	0x0149007a
    f948:	.word	0x006e0149
    f94c:	.word	0x004f004f
    f950:	.word	0x004f004f
    f954:	.word	0x004f004f
    f958:	.word	0x004f004f
    f95c:	.word	0x0149004f
    f960:	.word	0x01490149
    f964:	.word	0x01490149
    f968:	.word	0x01490149
    f96c:	.word	0x01490144
    f970:	.word	0x01490149
    f974:	.word	0x0125012c
    f978:	.word	0x01490149
    f97c:	.word	0x014900a2
    f980:	.word	0x01490149
    f984:	.word	0x008b0149
    f988:	.word	0x01490149
    f98c:	.word	0x01490149
    f990:	.word	0x00850149
    f994:	.word	0x01490149
    f998:	.word	0x01490149
    f99c:	.word	0x0149007f
    f9a0:	.word	0x01490149
    f9a4:	.word	0x01490149
    f9a8:	.word	0x01490149
    f9ac:	.word	0x01490144
    f9b0:	.word	0x01490149
    f9b4:	.word	0x0125012c
    f9b8:	.word	0x01490149
    f9bc:	.word	0x014900a2
    f9c0:	.word	0x01490149
    f9c4:	.word	0x008b0149
    f9c8:	.word	0x01490149
    f9cc:	.word	0x01490149
    f9d0:	.word	0x00850149
    f9d4:	.word	0x01490149
    f9d8:	.word	0x01490149
    f9dc:	.short	0x007f
    f9de:	cmn.w	r3, r8
    f9e2:	bne.n	fa12 <__ssvfscanf_r+0x85e>
    f9e4:	bic.w	r5, r5, #384	; 0x180
    f9e8:	strb.w	r1, [r9]
    f9ec:	add.w	r9, r9, #1
    f9f0:	ldr.w	r1, [fp, #4]
    f9f4:	subs	r1, #1
    f9f6:	cmp	r1, #0
    f9f8:	add.w	r4, r4, #4294967295
    f9fc:	add.w	r7, r7, #1
    fa00:	str.w	r1, [fp, #4]
    fa04:	ble.w	fbec <__ssvfscanf_r+0xa38>
    fa08:	adds	r0, #1
    fa0a:	str.w	r0, [fp]
    fa0e:	cmp	r4, #0
    fa10:	bne.n	f92a <__ssvfscanf_r+0x776>
    fa12:	cmp	r6, #0
    fa14:	beq.n	fa9c <__ssvfscanf_r+0x8e8>
    fa16:	bic.w	r5, r5, #256	; 0x100
    fa1a:	b.n	fa9c <__ssvfscanf_r+0x8e8>
    fa1c:	lsls	r2, r5, #23
    fa1e:	bpl.n	f9de <__ssvfscanf_r+0x82a>
    fa20:	ldr	r2, [sp, #56]	; 0x38
    fa22:	bic.w	r5, r5, #128	; 0x80
    fa26:	adds	r6, #1
    fa28:	cmp	r2, #0
    fa2a:	beq.n	f9f0 <__ssvfscanf_r+0x83c>
    fa2c:	subs	r2, #1
    fa2e:	str	r2, [sp, #56]	; 0x38
    fa30:	adds	r4, #1
    fa32:	b.n	f9f0 <__ssvfscanf_r+0x83c>
    fa34:	lsls	r2, r5, #24
    fa36:	bpl.n	fa12 <__ssvfscanf_r+0x85e>
    fa38:	bic.w	r5, r5, #128	; 0x80
    fa3c:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fa3e:	cmp.w	r8, #7
    fa42:	bne.n	fa12 <__ssvfscanf_r+0x85e>
    fa44:	mov.w	r8, #8
    fa48:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fa4a:	cmp.w	r8, #6
    fa4e:	bne.n	fa12 <__ssvfscanf_r+0x85e>
    fa50:	mov.w	r8, #7
    fa54:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fa56:	cmp	r3, #0
    fa58:	bne.w	fc18 <__ssvfscanf_r+0xa64>
    fa5c:	cbnz	r6, fa6a <__ssvfscanf_r+0x8b6>
    fa5e:	and.w	lr, r5, #1792	; 0x700
    fa62:	cmp.w	lr, #1792	; 0x700
    fa66:	beq.w	fef0 <__ssvfscanf_r+0xd3c>
    fa6a:	cmp.w	r8, #1
    fa6e:	beq.n	fa76 <__ssvfscanf_r+0x8c2>
    fa70:	cmp.w	r8, #4
    fa74:	bne.n	fa12 <__ssvfscanf_r+0x85e>
    fa76:	add.w	r8, r8, #1
    fa7a:	uxtb.w	r8, r8
    fa7e:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fa80:	.word	0x0000daa9
    fa84:	cmp.w	r8, #0
    fa88:	bne.w	fc06 <__ssvfscanf_r+0xa52>
    fa8c:	cmp	r6, #0
    fa8e:	bne.n	fa16 <__ssvfscanf_r+0x862>
    fa90:	and.w	lr, r5, #1792	; 0x700
    fa94:	cmp.w	lr, #1792	; 0x700
    fa98:	beq.w	ff10 <__ssvfscanf_r+0xd5c>
    fa9c:	subs	r3, #1
    fa9e:	cmp	r3, #1
    faa0:	bls.w	ffa6 <__ssvfscanf_r+0xdf2>
    faa4:	add.w	r3, r8, #4294967295
    faa8:	cmp	r3, #6
    faaa:	bhi.n	fada <__ssvfscanf_r+0x926>
    faac:	cmp.w	r8, #2
    fab0:	bls.w	fff4 <__ssvfscanf_r+0xe40>
    fab4:	cmp.w	r8, #3
    fab8:	beq.n	fada <__ssvfscanf_r+0x926>
    faba:	sub.w	r4, r8, #4
    fabe:	uxtb	r4, r4
    fac0:	mvn.w	r8, r4
    fac4:	add	r8, r9
    fac6:	ldrb.w	r1, [r9, #-1]!
    faca:	mov	r2, fp
    facc:	mov	r0, sl
    face:	bl	12b68 <_sungetc_r>
    fad2:	cmp	r8, r9
    fad4:	bne.n	fac6 <__ssvfscanf_r+0x912>
    fad6:	subs	r7, #1
    fad8:	subs	r7, r7, r4
    fada:	lsls	r1, r5, #23
    fadc:	bpl.n	fb18 <__ssvfscanf_r+0x964>
    fade:	lsls	r2, r5, #21
    fae0:	bmi.w	ffca <__ssvfscanf_r+0xe16>
    fae4:	ldrb.w	r1, [r9, #-1]
    fae8:	cmp	r1, #101	; 0x65
    faea:	add.w	r4, r9, #4294967295
    faee:	add.w	r8, r7, #4294967295
    faf2:	beq.n	fb0c <__ssvfscanf_r+0x958>
    faf4:	cmp	r1, #69	; 0x45
    faf6:	beq.n	fb0c <__ssvfscanf_r+0x958>
    faf8:	mov	r2, fp
    fafa:	mov	r0, sl
    fafc:	bl	12b68 <_sungetc_r>
    fb00:	ldrb.w	r1, [r9, #-2]
    fb04:	sub.w	r8, r7, #2
    fb08:	sub.w	r4, r9, #2
    fb0c:	mov	r2, fp
    fb0e:	mov	r0, sl
    fb10:	bl	12b68 <_sungetc_r>
    fb14:	mov	r7, r8
    fb16:	mov	r9, r4
    fb18:	ands.w	r2, r5, #16
    fb1c:	bne.w	f67c <__ssvfscanf_r+0x4c8>
    fb20:	and.w	r3, r5, #1536	; 0x600
    fb24:	cmp.w	r3, #1024	; 0x400
    fb28:	strb.w	r2, [r9]
    fb2c:	beq.w	ff1a <__ssvfscanf_r+0xd66>
    fb30:	ldr	r3, [sp, #52]	; 0x34
    fb32:	cmp	r3, #0
    fb34:	bne.w	ff3c <__ssvfscanf_r+0xd88>
    fb38:	ldr	r1, [sp, #40]	; 0x28
    fb3a:	movs	r2, #0
    fb3c:	mov	r0, sl
    fb3e:	bl	d950 <_strtod_r>
    fb42:	lsls	r3, r5, #31
    fb44:	bmi.w	fdd2 <__ssvfscanf_r+0xc1e>
    fb48:	ands.w	r5, r5, #2
    fb4c:	bne.w	fdd2 <__ssvfscanf_r+0xc1e>
    fb50:	vmov	r2, r3, d0
    fb54:	vmov	r0, r1, d0
    fb58:	vstr	d0, [sp, #32]
    fb5c:	bl	b508 <__aeabi_dcmpun>
    fb60:	ldr	r4, [sp, #20]
    fb62:	vldr	d0, [sp, #32]
    fb66:	adds	r6, r4, #4
    fb68:	ldr	r4, [r4, #0]
    fb6a:	cmp	r0, #0
    fb6c:	bne.w	10028 <__ssvfscanf_r+0xe74>
    fb70:	vmov	r0, r1, d0
    fb74:	bl	b5c4 <__aeabi_d2f>
    fb78:	str	r6, [sp, #20]
    fb7a:	str	r0, [r4, #0]
    fb7c:	ldr	r3, [sp, #24]
    fb7e:	ldr	r6, [sp, #12]
    fb80:	adds	r3, #1
    fb82:	str	r3, [sp, #24]
    fb84:	mov	r4, r6
    fb86:	b.w	f244 <__ssvfscanf_r+0x90>
    fb8a:	cmp.w	r8, #2
    fb8e:	bne.w	fa12 <__ssvfscanf_r+0x85e>
    fb92:	mov.w	r8, #3
    fb96:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fb98:	and.w	lr, r5, #1280	; 0x500
    fb9c:	cmp.w	lr, #1024	; 0x400
    fba0:	beq.n	fbae <__ssvfscanf_r+0x9fa>
    fba2:	lsls	r2, r5, #21
    fba4:	bpl.w	fa12 <__ssvfscanf_r+0x85e>
    fba8:	cmp	r6, #0
    fbaa:	beq.w	fa9c <__ssvfscanf_r+0x8e8>
    fbae:	lsls	r2, r5, #22
    fbb0:	bmi.n	fbbc <__ssvfscanf_r+0xa08>
    fbb2:	ldr	r2, [sp, #44]	; 0x2c
    fbb4:	str.w	r9, [sp, #60]	; 0x3c
    fbb8:	subs	r2, r6, r2
    fbba:	str	r2, [sp, #52]	; 0x34
    fbbc:	bic.w	r5, r5, #1920	; 0x780
    fbc0:	orr.w	r5, r5, #384	; 0x180
    fbc4:	movs	r6, #0
    fbc6:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fbc8:	cmp	r3, #1
    fbca:	bne.w	fa12 <__ssvfscanf_r+0x85e>
    fbce:	movs	r3, #2
    fbd0:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fbd2:	ldr	r2, [sp, #48]	; 0x30
    fbd4:	ldrb.w	lr, [r2]
    fbd8:	cmp	lr, r1
    fbda:	bne.w	fa12 <__ssvfscanf_r+0x85e>
    fbde:	lsls	r2, r5, #22
    fbe0:	bpl.w	fa12 <__ssvfscanf_r+0x85e>
    fbe4:	bic.w	r5, r5, #640	; 0x280
    fbe8:	str	r6, [sp, #44]	; 0x2c
    fbea:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fbec:	mov	r1, fp
    fbee:	mov	r0, sl
    fbf0:	str	r3, [sp, #32]
    fbf2:	bl	12bec <__ssrefill_r>
    fbf6:	ldr	r3, [sp, #32]
    fbf8:	cmp	r0, #0
    fbfa:	bne.w	fa12 <__ssvfscanf_r+0x85e>
    fbfe:	cmp	r4, #0
    fc00:	bne.w	f92a <__ssvfscanf_r+0x776>
    fc04:	b.n	fa12 <__ssvfscanf_r+0x85e>
    fc06:	cmp.w	r8, #3
    fc0a:	beq.w	fa76 <__ssvfscanf_r+0x8c2>
    fc0e:	cmp.w	r8, #5
    fc12:	beq.w	fa76 <__ssvfscanf_r+0x8c2>
    fc16:	b.n	fa12 <__ssvfscanf_r+0x85e>
    fc18:	cmp	r3, #2
    fc1a:	bne.w	fa6a <__ssvfscanf_r+0x8b6>
    fc1e:	movs	r3, #3
    fc20:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fc22:	subs	r3, r4, #1
    fc24:	cmp.w	r3, #348	; 0x15c
    fc28:	itte	hi
    fc2a:	mvnhi.w	r0, #348	; 0x15c
    fc2e:	addhi.w	r9, r4, r0
    fc32:	movls	r9, r8
    fc34:	add	r3, sp, #336	; 0x150
    fc36:	mov	r0, r2
    fc38:	mov	r2, r7
    fc3a:	mov	r7, r9
    fc3c:	ldr.w	r9, [sp, #16]
    fc40:	str	r3, [sp, #40]	; 0x28
    fc42:	it	hi
    fc44:	movwhi	r4, #349	; 0x15d
    fc48:	orr.w	r5, r5, #3456	; 0xd80
    fc4c:	mov	r6, r3
    fc4e:	mov.w	r8, #0
    fc52:	sub.w	r3, r1, #43	; 0x2b
    fc56:	cmp	r3, #77	; 0x4d
    fc58:	bhi.n	fcfe <__ssvfscanf_r+0xb4a>
    fc5a:	tbb	[pc, r3]
    fc5e:	.short	0x507e
    fc60:	.word	0x6f50507e
    fc64:	.word	0x69696969
    fc68:	.word	0x4a696969
    fc6c:	.word	0x5050504a
    fc70:	.word	0x50505050
    fc74:	.word	0x44444444
    fc78:	.word	0x50504444
    fc7c:	.word	0x50505050
    fc80:	.word	0x50505050
    fc84:	.word	0x50505050
    fc88:	.word	0x27505050
    fc8c:	.word	0x50505050
    fc90:	.word	0x50505050
    fc94:	.word	0x44444444
    fc98:	.word	0x50504444
    fc9c:	.word	0x50505050
    fca0:	.word	0x50505050
    fca4:	.word	0x50505050
    fca8:	.word	0x27505050
    fcac:	and.w	r3, r5, #1536	; 0x600
    fcb0:	cmp.w	r3, #512	; 0x200
    fcb4:	bne.n	fcfe <__ssvfscanf_r+0xb4a>
    fcb6:	bic.w	r5, r5, #512	; 0x200
    fcba:	orr.w	r5, r5, #1280	; 0x500
    fcbe:	mov.w	r9, #16
    fcc2:	strb	r1, [r6, #0]
    fcc4:	adds	r6, #1
    fcc6:	ldr.w	r3, [fp, #4]
    fcca:	subs	r3, #1
    fccc:	cmp	r3, #0
    fcce:	str.w	r3, [fp, #4]
    fcd2:	ble.n	fdba <__ssvfscanf_r+0xc06>
    fcd4:	adds	r0, #1
    fcd6:	str.w	r0, [fp]
    fcda:	subs	r4, #1
    fcdc:	beq.n	fcfe <__ssvfscanf_r+0xb4a>
    fcde:	ldr.w	r0, [fp]
    fce2:	ldrb	r1, [r0, #0]
    fce4:	b.n	fc52 <__ssvfscanf_r+0xa9e>
    fce6:	cmp.w	r9, #10
    fcea:	ble.n	fcfe <__ssvfscanf_r+0xb4a>
    fcec:	bic.w	r5, r5, #2944	; 0xb80
    fcf0:	b.n	fcc2 <__ssvfscanf_r+0xb0e>
    fcf2:	ldr	r3, [pc, #756]	; (ffe8 <__ssvfscanf_r+0xe34>)
    fcf4:	ldrsh.w	r9, [r3, r9, lsl #1]
    fcf8:	cmp.w	r9, #8
    fcfc:	bgt.n	fcec <__ssvfscanf_r+0xb38>
    fcfe:	lsls	r1, r5, #23
    fd00:	mov	r7, r2
    fd02:	str.w	r9, [sp, #16]
    fd06:	bpl.n	fd18 <__ssvfscanf_r+0xb64>
    fd08:	ldr	r3, [sp, #40]	; 0x28
    fd0a:	cmp	r6, r3
    fd0c:	bhi.w	fef8 <__ssvfscanf_r+0xd44>
    fd10:	ldr	r3, [sp, #40]	; 0x28
    fd12:	cmp	r6, r3
    fd14:	beq.w	f250 <__ssvfscanf_r+0x9c>
    fd18:	ands.w	r4, r5, #16
    fd1c:	beq.w	fe44 <__ssvfscanf_r+0xc90>
    fd20:	ldr	r3, [sp, #40]	; 0x28
    fd22:	subs	r6, r6, r3
    fd24:	add	r6, r8
    fd26:	add	r7, r6
    fd28:	ldr	r6, [sp, #12]
    fd2a:	mov	r4, r6
    fd2c:	b.w	f244 <__ssvfscanf_r+0x90>
    fd30:	ldr	r3, [pc, #692]	; (ffe8 <__ssvfscanf_r+0xe34>)
    fd32:	bic.w	r5, r5, #2944	; 0xb80
    fd36:	ldrsh.w	r9, [r3, r9, lsl #1]
    fd3a:	b.n	fcc2 <__ssvfscanf_r+0xb0e>
    fd3c:	lsls	r3, r5, #20
    fd3e:	bpl.n	fcc2 <__ssvfscanf_r+0xb0e>
    fd40:	cmp.w	r9, #0
    fd44:	bne.n	fd4e <__ssvfscanf_r+0xb9a>
    fd46:	orr.w	r5, r5, #512	; 0x200
    fd4a:	mov.w	r9, #8
    fd4e:	lsls	r3, r5, #21
    fd50:	bpl.w	fed4 <__ssvfscanf_r+0xd20>
    fd54:	bic.w	r5, r5, #1408	; 0x580
    fd58:	b.n	fcc2 <__ssvfscanf_r+0xb0e>
    fd5a:	lsls	r3, r5, #24
    fd5c:	bpl.n	fcfe <__ssvfscanf_r+0xb4a>
    fd5e:	bic.w	r5, r5, #128	; 0x80
    fd62:	b.n	fcc2 <__ssvfscanf_r+0xb0e>
    fd64:	cmp	r4, #0
    fd66:	it	eq
    fd68:	moveq.w	r4, #4294967295
    fd6c:	ands.w	r3, r5, #1
    fd70:	bne.w	f630 <__ssvfscanf_r+0x47c>
    fd74:	lsls	r1, r5, #27
    fd76:	bpl.n	fde0 <__ssvfscanf_r+0xc2c>
    fd78:	mov	r5, r3
    fd7a:	bl	ba20 <__locale_ctype_ptr>
    fd7e:	ldr.w	r3, [fp]
    fd82:	ldrb	r2, [r3, #0]
    fd84:	add	r0, r2
    fd86:	adds	r3, #1
    fd88:	ldrb	r2, [r0, #1]
    fd8a:	lsls	r2, r2, #28
    fd8c:	bmi.w	f50e <__ssvfscanf_r+0x35a>
    fd90:	ldr.w	r2, [fp, #4]
    fd94:	str.w	r3, [fp]
    fd98:	adds	r5, #1
    fd9a:	subs	r3, r2, #1
    fd9c:	cmp	r4, r5
    fd9e:	str.w	r3, [fp, #4]
    fda2:	beq.w	f50e <__ssvfscanf_r+0x35a>
    fda6:	cmp	r3, #0
    fda8:	bgt.n	fd7a <__ssvfscanf_r+0xbc6>
    fdaa:	mov	r1, fp
    fdac:	mov	r0, sl
    fdae:	bl	12bec <__ssrefill_r>
    fdb2:	cmp	r0, #0
    fdb4:	beq.n	fd7a <__ssvfscanf_r+0xbc6>
    fdb6:	b.w	f50e <__ssvfscanf_r+0x35a>
    fdba:	mov	r1, fp
    fdbc:	mov	r0, sl
    fdbe:	str	r2, [sp, #16]
    fdc0:	bl	12bec <__ssrefill_r>
    fdc4:	ldr	r2, [sp, #16]
    fdc6:	cmp	r0, #0
    fdc8:	beq.n	fcda <__ssvfscanf_r+0xb26>
    fdca:	b.n	fcfe <__ssvfscanf_r+0xb4a>
    fdcc:	str.w	r8, [sp, #56]	; 0x38
    fdd0:	b.n	f90a <__ssvfscanf_r+0x756>
    fdd2:	ldr	r2, [sp, #20]
    fdd4:	ldr	r3, [r2, #0]
    fdd6:	adds	r2, #4
    fdd8:	str	r2, [sp, #20]
    fdda:	vstr	d0, [r3]
    fdde:	b.n	fb7c <__ssvfscanf_r+0x9c8>
    fde0:	ldr	r2, [sp, #20]
    fde2:	ldr	r5, [r2, #0]
    fde4:	adds	r6, r2, #4
    fde6:	add	r4, r5
    fde8:	mov	r8, r5
    fdea:	bl	ba20 <__locale_ctype_ptr>
    fdee:	ldr.w	r2, [fp]
    fdf2:	ldrb	r3, [r2, #0]
    fdf4:	add	r0, r3
    fdf6:	adds	r1, r2, #1
    fdf8:	ldrb	r3, [r0, #1]
    fdfa:	lsls	r3, r3, #28
    fdfc:	bmi.n	fe2a <__ssvfscanf_r+0xc76>
    fdfe:	ldr.w	r3, [fp, #4]
    fe02:	str.w	r1, [fp]
    fe06:	subs	r3, #1
    fe08:	str.w	r3, [fp, #4]
    fe0c:	ldrb	r3, [r2, #0]
    fe0e:	strb.w	r3, [r8], #1
    fe12:	cmp	r4, r8
    fe14:	beq.n	fe2c <__ssvfscanf_r+0xc78>
    fe16:	ldr.w	r3, [fp, #4]
    fe1a:	cmp	r3, #0
    fe1c:	bgt.n	fdea <__ssvfscanf_r+0xc36>
    fe1e:	mov	r1, fp
    fe20:	mov	r0, sl
    fe22:	bl	12bec <__ssrefill_r>
    fe26:	cmp	r0, #0
    fe28:	beq.n	fdea <__ssvfscanf_r+0xc36>
    fe2a:	mov	r4, r8
    fe2c:	ldr	r2, [sp, #24]
    fe2e:	str	r6, [sp, #20]
    fe30:	ldr	r6, [sp, #12]
    fe32:	subs	r5, r4, r5
    fe34:	movs	r3, #0
    fe36:	adds	r2, #1
    fe38:	strb	r3, [r4, #0]
    fe3a:	add	r7, r5
    fe3c:	str	r2, [sp, #24]
    fe3e:	mov	r4, r6
    fe40:	b.w	f244 <__ssvfscanf_r+0x90>
    fe44:	mov	r2, r4
    fe46:	strb	r4, [r6, #0]
    fe48:	ldr	r3, [sp, #16]
    fe4a:	ldr	r1, [sp, #40]	; 0x28
    fe4c:	ldr	r4, [sp, #28]
    fe4e:	mov	r0, sl
    fe50:	blx	r4
    fe52:	lsls	r2, r5, #26
    fe54:	bmi.n	fee4 <__ssvfscanf_r+0xd30>
    fe56:	lsls	r3, r5, #29
    fe58:	bpl.n	ff52 <__ssvfscanf_r+0xd9e>
    fe5a:	ldr	r2, [sp, #20]
    fe5c:	ldr	r3, [r2, #0]
    fe5e:	adds	r2, #4
    fe60:	str	r2, [sp, #20]
    fe62:	strh	r0, [r3, #0]
    fe64:	ldr	r3, [sp, #24]
    fe66:	adds	r3, #1
    fe68:	str	r3, [sp, #24]
    fe6a:	b.n	fd20 <__ssvfscanf_r+0xb6c>
    fe6c:	bl	b9fc <__locale_mb_cur_max>
    fe70:	cmp	r6, r0
    fe72:	beq.w	f3fe <__ssvfscanf_r+0x24a>
    fe76:	ldmia.w	fp, {r2, r3}
    fe7a:	ldrb.w	r0, [r2], #1
    fe7e:	str.w	r2, [fp]
    fe82:	ldr	r2, [sp, #32]
    fe84:	str	r2, [sp, #0]
    fe86:	add	r2, sp, #336	; 0x150
    fe88:	adds	r5, r6, #1
    fe8a:	subs	r3, #1
    fe8c:	strb	r0, [r2, r6]
    fe8e:	str.w	r3, [fp, #4]
    fe92:	mov	r1, r8
    fe94:	mov	r3, r5
    fe96:	mov	r0, sl
    fe98:	bl	11b44 <_mbrtowc_r>
    fe9c:	adds	r6, r0, #1
    fe9e:	beq.w	f3fe <__ssvfscanf_r+0x24a>
    fea2:	cmp	r0, #0
    fea4:	bne.n	ff7e <__ssvfscanf_r+0xdca>
    fea6:	str.w	r0, [r8]
    feaa:	bl	11b08 <iswspace>
    feae:	cmp	r0, #0
    feb0:	beq.w	10012 <__ssvfscanf_r+0xe5e>
    feb4:	cmp	r5, #0
    feb6:	beq.w	f66c <__ssvfscanf_r+0x4b8>
    feba:	add	r3, sp, #336	; 0x150
    febc:	adds	r4, r3, r5
    febe:	subs	r5, #1
    fec0:	mov	r2, fp
    fec2:	ldrb.w	r1, [r4, #-1]!
    fec6:	mov	r0, sl
    fec8:	bl	12b68 <_sungetc_r>
    fecc:	cmp	r5, #0
    fece:	bne.n	febe <__ssvfscanf_r+0xd0a>
    fed0:	b.w	f66c <__ssvfscanf_r+0x4b8>
    fed4:	bic.w	r5, r5, #896	; 0x380
    fed8:	cbz	r7, fede <__ssvfscanf_r+0xd2a>
    feda:	subs	r7, #1
    fedc:	adds	r4, #1
    fede:	add.w	r8, r8, #1
    fee2:	b.n	fcc6 <__ssvfscanf_r+0xb12>
    fee4:	ldr	r2, [sp, #20]
    fee6:	ldr	r3, [r2, #0]
    fee8:	adds	r2, #4
    feea:	str	r2, [sp, #20]
    feec:	str	r0, [r3, #0]
    feee:	b.n	fe64 <__ssvfscanf_r+0xcb0>
    fef0:	bic.w	r5, r5, #1920	; 0x780
    fef4:	movs	r3, #1
    fef6:	b.n	f9e8 <__ssvfscanf_r+0x834>
    fef8:	ldrb.w	r1, [r6, #-1]
    fefc:	mov	r2, fp
    fefe:	mov	r0, sl
    ff00:	bl	12b68 <_sungetc_r>
    ff04:	subs	r6, #1
    ff06:	b.n	fd10 <__ssvfscanf_r+0xb5c>
    ff08:	add.w	r8, sp, #68	; 0x44
    ff0c:	b.w	f652 <__ssvfscanf_r+0x49e>
    ff10:	bic.w	r5, r5, #1920	; 0x780
    ff14:	mov.w	r8, #1
    ff18:	b.n	f9e8 <__ssvfscanf_r+0x834>
    ff1a:	ldr	r3, [sp, #44]	; 0x2c
    ff1c:	subs	r6, r6, r3
    ff1e:	negs	r2, r6
    ff20:	cmp	r6, #0
    ff22:	beq.w	fb38 <__ssvfscanf_r+0x984>
    ff26:	addw	r3, sp, #675	; 0x2a3
    ff2a:	cmp	r9, r3
    ff2c:	it	cs
    ff2e:	addwcs	r9, sp, #674	; 0x2a2
    ff32:	mov	r0, r9
    ff34:	ldr	r1, [pc, #180]	; (ffec <__ssvfscanf_r+0xe38>)
    ff36:	bl	c664 <sprintf>
    ff3a:	b.n	fb38 <__ssvfscanf_r+0x984>
    ff3c:	ldr	r4, [sp, #60]	; 0x3c
    ff3e:	mov	r1, r4
    ff40:	movs	r3, #10
    ff42:	adds	r1, #1
    ff44:	mov	r0, sl
    ff46:	bl	daa8 <_strtol_r>
    ff4a:	ldr	r3, [sp, #52]	; 0x34
    ff4c:	mov	r9, r4
    ff4e:	subs	r2, r0, r3
    ff50:	b.n	ff26 <__ssvfscanf_r+0xd72>
    ff52:	ands.w	r2, r5, #1
    ff56:	bne.n	fee4 <__ssvfscanf_r+0xd30>
    ff58:	lsls	r4, r5, #30
    ff5a:	bpl.n	fee4 <__ssvfscanf_r+0xd30>
    ff5c:	ldr	r3, [sp, #28]
    ff5e:	mov	r1, r3
    ff60:	ldr	r3, [pc, #140]	; (fff0 <__ssvfscanf_r+0xe3c>)
    ff62:	cmp	r1, r3
    ff64:	mov	r0, sl
    ff66:	ldr	r3, [sp, #16]
    ff68:	ldr	r1, [sp, #40]	; 0x28
    ff6a:	beq.n	10036 <__ssvfscanf_r+0xe82>
    ff6c:	bl	126a8 <_strtoll_r>
    ff70:	ldr	r2, [sp, #20]
    ff72:	ldr	r3, [r2, #0]
    ff74:	adds	r2, #4
    ff76:	str	r2, [sp, #20]
    ff78:	strd	r0, r1, [r3]
    ff7c:	b.n	fe64 <__ssvfscanf_r+0xcb0>
    ff7e:	adds	r0, #2
    ff80:	bne.n	ffc4 <__ssvfscanf_r+0xe10>
    ff82:	mov	r6, r5
    ff84:	ldr.w	r3, [fp, #4]
    ff88:	cmp	r3, #0
    ff8a:	bgt.w	f654 <__ssvfscanf_r+0x4a0>
    ff8e:	mov	r1, fp
    ff90:	mov	r0, sl
    ff92:	bl	12bec <__ssrefill_r>
    ff96:	cmp	r0, #0
    ff98:	beq.w	f654 <__ssvfscanf_r+0x4a0>
    ff9c:	cmp	r6, #0
    ff9e:	bne.w	f3fe <__ssvfscanf_r+0x24a>
    ffa2:	b.w	f66c <__ssvfscanf_r+0x4b8>
    ffa6:	ldr	r3, [sp, #40]	; 0x28
    ffa8:	cmp	r9, r3
    ffaa:	bls.w	f250 <__ssvfscanf_r+0x9c>
    ffae:	ldrb.w	r1, [r9, #-1]!
    ffb2:	mov	r2, fp
    ffb4:	mov	r0, sl
    ffb6:	bl	12b68 <_sungetc_r>
    ffba:	ldr	r3, [sp, #40]	; 0x28
    ffbc:	cmp	r9, r3
    ffbe:	bne.n	ffae <__ssvfscanf_r+0xdfa>
    ffc0:	b.w	f250 <__ssvfscanf_r+0x9c>
    ffc4:	ldr.w	r0, [r8]
    ffc8:	b.n	feaa <__ssvfscanf_r+0xcf6>
    ffca:	ldr	r3, [sp, #40]	; 0x28
    ffcc:	cmp	r9, r3
    ffce:	bls.w	f250 <__ssvfscanf_r+0x9c>
    ffd2:	ldrb.w	r1, [r9, #-1]!
    ffd6:	mov	r2, fp
    ffd8:	mov	r0, sl
    ffda:	bl	12b68 <_sungetc_r>
    ffde:	ldr	r3, [sp, #40]	; 0x28
    ffe0:	cmp	r9, r3
    ffe2:	bne.n	ffd2 <__ssvfscanf_r+0xe1e>
    ffe4:	b.w	f250 <__ssvfscanf_r+0x9c>
    ffe8:	.word	0x0001393c
    ffec:	.word	0x00013960
    fff0:	.word	0x00012835
    fff4:	ldr	r3, [sp, #40]	; 0x28
    fff6:	cmp	r9, r3
    fff8:	bls.w	f250 <__ssvfscanf_r+0x9c>
    fffc:	ldrb.w	r1, [r9, #-1]!
   10000:	mov	r2, fp
   10002:	mov	r0, sl
   10004:	bl	12b68 <_sungetc_r>
   10008:	ldr	r3, [sp, #40]	; 0x28
   1000a:	cmp	r9, r3
   1000c:	bne.n	fffc <__ssvfscanf_r+0xe48>
   1000e:	b.w	f250 <__ssvfscanf_r+0x9c>
   10012:	add	r7, r5
   10014:	subs	r4, #1
   10016:	cmp.w	r9, #0
   1001a:	bne.n	10024 <__ssvfscanf_r+0xe70>
   1001c:	add.w	r8, r8, #4
   10020:	mov	r6, r9
   10022:	b.n	ff84 <__ssvfscanf_r+0xdd0>
   10024:	mov	r6, r0
   10026:	b.n	ff84 <__ssvfscanf_r+0xdd0>
   10028:	mov	r0, r5
   1002a:	bl	ac4c <nanf>
   1002e:	str	r6, [sp, #20]
   10030:	vstr	s0, [r4]
   10034:	b.n	fb7c <__ssvfscanf_r+0x9c8>
   10036:	bl	12a44 <_strtoull_r>
   1003a:	b.n	ff70 <__ssvfscanf_r+0xdbc>

0001003c <_vdprintf_r>:
   1003c:	push	{r4, r5, r6, r7, lr}
   1003e:	sub.w	sp, sp, #532	; 0x214
   10042:	add	r5, sp, #16
   10044:	str	r3, [sp, #0]
   10046:	mov	r7, r1
   10048:	mov	r3, r2
   1004a:	mov.w	r4, #512	; 0x200
   1004e:	add	r2, sp, #12
   10050:	mov	r1, r5
   10052:	str	r4, [sp, #12]
   10054:	mov	r6, r0
   10056:	bl	12d24 <_vasnprintf_r>
   1005a:	cbz	r0, 10080 <_vdprintf_r+0x44>
   1005c:	mov	r4, r0
   1005e:	mov	r2, r0
   10060:	mov	r1, r7
   10062:	ldr	r3, [sp, #12]
   10064:	mov	r0, r6
   10066:	bl	100bc <_write_r>
   1006a:	cmp	r4, r5
   1006c:	str	r0, [sp, #12]
   1006e:	beq.n	1007a <_vdprintf_r+0x3e>
   10070:	mov	r0, r6
   10072:	mov	r1, r4
   10074:	bl	111d0 <_free_r>
   10078:	ldr	r0, [sp, #12]
   1007a:	add.w	sp, sp, #532	; 0x214
   1007e:	pop	{r4, r5, r6, r7, pc}
   10080:	mov.w	r0, #4294967295
   10084:	b.n	1007a <_vdprintf_r+0x3e>
   10086:	nop

00010088 <vdprintf>:
   10088:	push	{r4}
   1008a:	ldr	r4, [pc, #16]	; (1009c <vdprintf+0x14>)
   1008c:	mov	r3, r2
   1008e:	mov	r2, r1
   10090:	mov	r1, r0
   10092:	ldr	r0, [r4, #0]
   10094:	ldr.w	r4, [sp], #4
   10098:	b.w	1003c <_vdprintf_r>
   1009c:	.word	0x20013dc8

000100a0 <__ascii_wctomb>:
   100a0:	cbz	r1, 100ac <__ascii_wctomb+0xc>
   100a2:	cmp	r2, #255	; 0xff
   100a4:	bhi.n	100b0 <__ascii_wctomb+0x10>
   100a6:	strb	r2, [r1, #0]
   100a8:	movs	r0, #1
   100aa:	bx	lr
   100ac:	mov	r0, r1
   100ae:	bx	lr
   100b0:	movs	r3, #138	; 0x8a
   100b2:	str	r3, [r0, #0]
   100b4:	mov.w	r0, #4294967295
   100b8:	bx	lr
   100ba:	nop

000100bc <_write_r>:
   100bc:	push	{r4, r5, r6, lr}
   100be:	mov	r5, r1
   100c0:	ldr	r4, [pc, #32]	; (100e4 <_write_r+0x28>)
   100c2:	mov	r1, r2
   100c4:	mov	r6, r0
   100c6:	mov	r2, r3
   100c8:	mov	r0, r5
   100ca:	movs	r3, #0
   100cc:	str	r3, [r4, #0]
   100ce:	bl	a6a4 <_write>
   100d2:	adds	r3, r0, #1
   100d4:	beq.n	100d8 <_write_r+0x1c>
   100d6:	pop	{r4, r5, r6, pc}
   100d8:	ldr	r3, [r4, #0]
   100da:	cmp	r3, #0
   100dc:	beq.n	100d6 <_write_r+0x1a>
   100de:	str	r3, [r6, #0]
   100e0:	pop	{r4, r5, r6, pc}
   100e2:	nop
   100e4:	.word	0x20019c74

000100e8 <__register_exitproc>:
   100e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100ec:	ldr	r4, [pc, #148]	; (10184 <__register_exitproc+0x9c>)
   100ee:	ldr	r5, [r4, #0]
   100f0:	ldr.w	r4, [r5, #328]	; 0x148
   100f4:	mov	r6, r0
   100f6:	mov	r8, r1
   100f8:	mov	sl, r2
   100fa:	mov	r9, r3
   100fc:	cbz	r4, 10170 <__register_exitproc+0x88>
   100fe:	ldr	r0, [r4, #4]
   10100:	cmp	r0, #31
   10102:	bgt.n	10134 <__register_exitproc+0x4c>
   10104:	adds	r3, r0, #1
   10106:	cbz	r6, 10126 <__register_exitproc+0x3e>
   10108:	add.w	r5, r4, r0, lsl #2
   1010c:	movs	r2, #1
   1010e:	str.w	sl, [r5, #136]	; 0x88
   10112:	ldr.w	r1, [r4, #392]	; 0x188
   10116:	lsls	r2, r0
   10118:	orrs	r1, r2
   1011a:	cmp	r6, #2
   1011c:	str.w	r1, [r4, #392]	; 0x188
   10120:	str.w	r9, [r5, #264]	; 0x108
   10124:	beq.n	10164 <__register_exitproc+0x7c>
   10126:	adds	r0, #2
   10128:	str	r3, [r4, #4]
   1012a:	str.w	r8, [r4, r0, lsl #2]
   1012e:	movs	r0, #0
   10130:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10134:	ldr	r3, [pc, #80]	; (10188 <__register_exitproc+0xa0>)
   10136:	cbz	r3, 1017a <__register_exitproc+0x92>
   10138:	mov.w	r0, #400	; 0x190
   1013c:	bl	ba34 <malloc>
   10140:	mov	r4, r0
   10142:	cbz	r0, 1017a <__register_exitproc+0x92>
   10144:	ldr.w	r3, [r5, #328]	; 0x148
   10148:	movs	r7, #0
   1014a:	stmia.w	r0, {r3, r7}
   1014e:	str.w	r4, [r5, #328]	; 0x148
   10152:	mov	r0, r7
   10154:	movs	r3, #1
   10156:	str.w	r7, [r4, #392]	; 0x188
   1015a:	str.w	r7, [r4, #396]	; 0x18c
   1015e:	cmp	r6, #0
   10160:	beq.n	10126 <__register_exitproc+0x3e>
   10162:	b.n	10108 <__register_exitproc+0x20>
   10164:	ldr.w	r1, [r4, #396]	; 0x18c
   10168:	orrs	r2, r1
   1016a:	str.w	r2, [r4, #396]	; 0x18c
   1016e:	b.n	10126 <__register_exitproc+0x3e>
   10170:	add.w	r4, r5, #332	; 0x14c
   10174:	str.w	r4, [r5, #328]	; 0x148
   10178:	b.n	100fe <__register_exitproc+0x16>
   1017a:	mov.w	r0, #4294967295
   1017e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10182:	nop
   10184:	.word	0x00013860
   10188:	.word	0x0000ba35

0001018c <register_fini>:
   1018c:	ldr	r3, [pc, #8]	; (10198 <register_fini+0xc>)
   1018e:	cbz	r3, 10196 <register_fini+0xa>
   10190:	ldr	r0, [pc, #8]	; (1019c <register_fini+0x10>)
   10192:	b.w	101a0 <atexit>
   10196:	bx	lr
   10198:	.word	0x00000000
   1019c:	.word	0x0001110d

000101a0 <atexit>:
   101a0:	movs	r3, #0
   101a2:	mov	r1, r0
   101a4:	mov	r2, r3
   101a6:	mov	r0, r3
   101a8:	b.w	100e8 <__register_exitproc>

000101ac <quorem>:
   101ac:	ldr	r2, [r0, #16]
   101ae:	ldr	r3, [r1, #16]
   101b0:	cmp	r3, r2
   101b2:	bgt.w	102d0 <quorem+0x124>
   101b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101ba:	add.w	r8, r3, #4294967295
   101be:	add.w	r7, r1, #20
   101c2:	add.w	fp, r0, #20
   101c6:	ldr.w	r2, [r7, r8, lsl #2]
   101ca:	ldr.w	r3, [fp, r8, lsl #2]
   101ce:	mov.w	r4, r8, lsl #2
   101d2:	sub	sp, #12
   101d4:	adds	r2, #1
   101d6:	udiv	r9, r3, r2
   101da:	add.w	r3, fp, r4
   101de:	str	r4, [sp, #0]
   101e0:	add.w	sl, r7, r4
   101e4:	str	r3, [sp, #4]
   101e6:	cmp.w	r9, #0
   101ea:	beq.n	10260 <quorem+0xb4>
   101ec:	movs	r5, #0
   101ee:	mov	ip, r7
   101f0:	mov	lr, fp
   101f2:	mov	r3, r5
   101f4:	ldr.w	r6, [ip], #4
   101f8:	ldr.w	r2, [lr]
   101fc:	uxth	r4, r6
   101fe:	mla	r5, r9, r4, r5
   10202:	lsrs	r6, r6, #16
   10204:	lsrs	r4, r5, #16
   10206:	mla	r4, r9, r6, r4
   1020a:	uxth	r5, r5
   1020c:	subs	r3, r3, r5
   1020e:	uxth	r6, r4
   10210:	uxtah	r3, r3, r2
   10214:	rsb	r6, r6, r2, lsr #16
   10218:	add.w	r6, r6, r3, asr #16
   1021c:	uxth	r3, r3
   1021e:	orr.w	r3, r3, r6, lsl #16
   10222:	cmp	sl, ip
   10224:	str.w	r3, [lr], #4
   10228:	mov.w	r5, r4, lsr #16
   1022c:	mov.w	r3, r6, asr #16
   10230:	bcs.n	101f4 <quorem+0x48>
   10232:	ldr	r3, [sp, #0]
   10234:	ldr.w	r3, [fp, r3]
   10238:	cbnz	r3, 10260 <quorem+0xb4>
   1023a:	ldr	r4, [sp, #4]
   1023c:	subs	r3, r4, #4
   1023e:	cmp	fp, r3
   10240:	bcs.n	1025c <quorem+0xb0>
   10242:	ldr.w	r3, [r4, #-4]
   10246:	cbnz	r3, 1025c <quorem+0xb0>
   10248:	sub.w	r3, r4, #8
   1024c:	b.n	10254 <quorem+0xa8>
   1024e:	ldr	r2, [r3, #0]
   10250:	subs	r3, #4
   10252:	cbnz	r2, 1025c <quorem+0xb0>
   10254:	cmp	fp, r3
   10256:	add.w	r8, r8, #4294967295
   1025a:	bcc.n	1024e <quorem+0xa2>
   1025c:	str.w	r8, [r0, #16]
   10260:	mov	r4, r0
   10262:	bl	12048 <__mcmp>
   10266:	cmp	r0, #0
   10268:	blt.n	102c8 <quorem+0x11c>
   1026a:	add.w	r9, r9, #1
   1026e:	mov	r5, fp
   10270:	movs	r3, #0
   10272:	ldr.w	r1, [r7], #4
   10276:	ldr	r0, [r5, #0]
   10278:	uxth	r2, r1
   1027a:	subs	r2, r3, r2
   1027c:	lsrs	r1, r1, #16
   1027e:	uxtah	r2, r2, r0
   10282:	rsb	r3, r1, r0, lsr #16
   10286:	add.w	r3, r3, r2, asr #16
   1028a:	uxth	r1, r2
   1028c:	orr.w	r1, r1, r3, lsl #16
   10290:	cmp	sl, r7
   10292:	str.w	r1, [r5], #4
   10296:	mov.w	r3, r3, asr #16
   1029a:	bcs.n	10272 <quorem+0xc6>
   1029c:	ldr.w	r2, [fp, r8, lsl #2]
   102a0:	add.w	r3, fp, r8, lsl #2
   102a4:	cbnz	r2, 102c8 <quorem+0x11c>
   102a6:	subs	r2, r3, #4
   102a8:	cmp	fp, r2
   102aa:	bcs.n	102c4 <quorem+0x118>
   102ac:	ldr.w	r2, [r3, #-4]
   102b0:	cbnz	r2, 102c4 <quorem+0x118>
   102b2:	subs	r3, #8
   102b4:	b.n	102bc <quorem+0x110>
   102b6:	ldr	r2, [r3, #0]
   102b8:	subs	r3, #4
   102ba:	cbnz	r2, 102c4 <quorem+0x118>
   102bc:	cmp	fp, r3
   102be:	add.w	r8, r8, #4294967295
   102c2:	bcc.n	102b6 <quorem+0x10a>
   102c4:	str.w	r8, [r4, #16]
   102c8:	mov	r0, r9
   102ca:	add	sp, #12
   102cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102d0:	movs	r0, #0
   102d2:	bx	lr
   102d4:			; <UNDEFINED> instruction: 0xffffffff

000102d8 <_dtoa_r>:
   102d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102dc:	vmov	r6, r7, d0
   102e0:	sub	sp, #108	; 0x6c
   102e2:	ldr	r4, [r0, #64]	; 0x40
   102e4:	ldr	r5, [sp, #144]	; 0x90
   102e6:	str	r1, [sp, #0]
   102e8:	mov	r9, r0
   102ea:	str	r2, [sp, #20]
   102ec:	str	r3, [sp, #12]
   102ee:	vmov	sl, s0
   102f2:	mov	fp, r7
   102f4:	cbz	r4, 1030c <_dtoa_r+0x34>
   102f6:	ldr	r2, [r0, #68]	; 0x44
   102f8:	str	r2, [r4, #4]
   102fa:	movs	r3, #1
   102fc:	lsls	r3, r2
   102fe:	str	r3, [r4, #8]
   10300:	mov	r1, r4
   10302:	bl	11bec <_Bfree>
   10306:	movs	r3, #0
   10308:	str.w	r3, [r9, #64]	; 0x40
   1030c:	cmp.w	fp, #0
   10310:	mov	r4, fp
   10312:	blt.n	1037e <_dtoa_r+0xa6>
   10314:	movs	r3, #0
   10316:	str	r3, [r5, #0]
   10318:	ldr	r3, [pc, #644]	; (105a0 <_dtoa_r+0x2c8>)
   1031a:	mov	r2, r3
   1031c:	ands	r3, r4
   1031e:	cmp	r3, r2
   10320:	beq.n	10350 <_dtoa_r+0x78>
   10322:	movs	r2, #0
   10324:	movs	r3, #0
   10326:	mov	r0, sl
   10328:	mov	r1, fp
   1032a:	bl	b4a4 <__aeabi_dcmpeq>
   1032e:	mov	r6, sl
   10330:	mov	r7, fp
   10332:	mov	r8, r0
   10334:	cbz	r0, 1038a <_dtoa_r+0xb2>
   10336:	ldr	r2, [sp, #12]
   10338:	movs	r3, #1
   1033a:	str	r3, [r2, #0]
   1033c:	ldr	r3, [sp, #148]	; 0x94
   1033e:	cmp	r3, #0
   10340:	beq.w	104c0 <_dtoa_r+0x1e8>
   10344:	ldr	r0, [pc, #604]	; (105a4 <_dtoa_r+0x2cc>)
   10346:	str	r0, [r3, #0]
   10348:	subs	r0, #1
   1034a:	add	sp, #108	; 0x6c
   1034c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10350:	ldr	r2, [sp, #12]
   10352:	movw	r3, #9999	; 0x270f
   10356:	str	r3, [r2, #0]
   10358:	cmp.w	sl, #0
   1035c:	beq.w	10494 <_dtoa_r+0x1bc>
   10360:	ldr	r0, [pc, #580]	; (105a8 <_dtoa_r+0x2d0>)
   10362:	ldr	r3, [sp, #148]	; 0x94
   10364:	cmp	r3, #0
   10366:	beq.n	1034a <_dtoa_r+0x72>
   10368:	ldrb	r3, [r0, #3]
   1036a:	cmp	r3, #0
   1036c:	beq.w	104c4 <_dtoa_r+0x1ec>
   10370:	add.w	r3, r0, #8
   10374:	ldr	r2, [sp, #148]	; 0x94
   10376:	str	r3, [r2, #0]
   10378:	add	sp, #108	; 0x6c
   1037a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1037e:	movs	r3, #1
   10380:	bic.w	r4, fp, #2147483648	; 0x80000000
   10384:	str	r3, [r5, #0]
   10386:	mov	fp, r4
   10388:	b.n	10318 <_dtoa_r+0x40>
   1038a:	add	r2, sp, #96	; 0x60
   1038c:	add	r1, sp, #100	; 0x64
   1038e:	vmov	d0, r6, r7
   10392:	mov	r0, r9
   10394:	bl	122c4 <__d2b>
   10398:	lsrs	r5, r4, #20
   1039a:	str	r0, [sp, #40]	; 0x28
   1039c:	bne.w	104a6 <_dtoa_r+0x1ce>
   103a0:	ldr	r5, [sp, #96]	; 0x60
   103a2:	ldr	r6, [sp, #100]	; 0x64
   103a4:	add	r6, r5
   103a6:	addw	r3, r6, #1074	; 0x432
   103aa:	cmp	r3, #32
   103ac:	ble.w	108c0 <_dtoa_r+0x5e8>
   103b0:	rsb	r3, r3, #64	; 0x40
   103b4:	addw	r0, r6, #1042	; 0x412
   103b8:	lsls	r4, r3
   103ba:	lsr.w	r0, sl, r0
   103be:	orrs	r0, r4
   103c0:	bl	aee8 <__aeabi_ui2d>
   103c4:	movs	r3, #1
   103c6:	subs	r4, r6, #1
   103c8:	sub.w	r1, r1, #32505856	; 0x1f00000
   103cc:	str	r3, [sp, #60]	; 0x3c
   103ce:	movs	r2, #0
   103d0:	ldr	r3, [pc, #472]	; (105ac <_dtoa_r+0x2d4>)
   103d2:	bl	ac6c <__aeabi_dsub>
   103d6:	add	r3, pc, #432	; (adr r3, 10588 <_dtoa_r+0x2b0>)
   103d8:	ldrd	r2, r3, [r3]
   103dc:	bl	afd4 <__aeabi_dmul>
   103e0:	add	r3, pc, #428	; (adr r3, 10590 <_dtoa_r+0x2b8>)
   103e2:	ldrd	r2, r3, [r3]
   103e6:	bl	ac70 <__adddf3>
   103ea:	mov	r6, r0
   103ec:	mov	r0, r4
   103ee:	mov	r7, r1
   103f0:	bl	af08 <__aeabi_i2d>
   103f4:	add	r3, pc, #416	; (adr r3, 10598 <_dtoa_r+0x2c0>)
   103f6:	ldrd	r2, r3, [r3]
   103fa:	bl	afd4 <__aeabi_dmul>
   103fe:	mov	r2, r0
   10400:	mov	r3, r1
   10402:	mov	r0, r6
   10404:	mov	r1, r7
   10406:	bl	ac70 <__adddf3>
   1040a:	mov	r6, r0
   1040c:	mov	r7, r1
   1040e:	bl	b534 <__aeabi_d2iz>
   10412:	movs	r2, #0
   10414:	str	r0, [sp, #16]
   10416:	movs	r3, #0
   10418:	mov	r0, r6
   1041a:	mov	r1, r7
   1041c:	bl	b4b8 <__aeabi_dcmplt>
   10420:	cmp	r0, #0
   10422:	bne.w	10876 <_dtoa_r+0x59e>
   10426:	ldr	r6, [sp, #16]
   10428:	cmp	r6, #22
   1042a:	bhi.w	10870 <_dtoa_r+0x598>
   1042e:	ldr	r3, [pc, #384]	; (105b0 <_dtoa_r+0x2d8>)
   10430:	add.w	r3, r3, r6, lsl #3
   10434:	ldrd	r0, r1, [r3]
   10438:	mov	r2, sl
   1043a:	mov	r3, fp
   1043c:	bl	b4f4 <__aeabi_dcmpgt>
   10440:	cmp	r0, #0
   10442:	beq.w	108ca <_dtoa_r+0x5f2>
   10446:	subs	r3, r6, #1
   10448:	str	r3, [sp, #16]
   1044a:	movs	r3, #0
   1044c:	str	r3, [sp, #52]	; 0x34
   1044e:	subs	r5, r5, r4
   10450:	subs.w	r8, r5, #1
   10454:	bmi.w	108ac <_dtoa_r+0x5d4>
   10458:	movs	r3, #0
   1045a:	str	r3, [sp, #28]
   1045c:	ldr	r3, [sp, #16]
   1045e:	cmp	r3, #0
   10460:	blt.w	1089a <_dtoa_r+0x5c2>
   10464:	add	r8, r3
   10466:	str	r3, [sp, #48]	; 0x30
   10468:	movs	r3, #0
   1046a:	str	r3, [sp, #24]
   1046c:	ldr	r3, [sp, #0]
   1046e:	cmp	r3, #9
   10470:	bhi.n	104c8 <_dtoa_r+0x1f0>
   10472:	cmp	r3, #5
   10474:	ble.w	11100 <_dtoa_r+0xe28>
   10478:	subs	r3, #4
   1047a:	str	r3, [sp, #0]
   1047c:	movs	r6, #0
   1047e:	ldr	r3, [sp, #0]
   10480:	subs	r3, #2
   10482:	cmp	r3, #3
   10484:	bhi.w	110ce <_dtoa_r+0xdf6>
   10488:	tbh	[pc, r3, lsl #1]
   1048c:	.word	0x0224032b
   10490:	.word	0x04500336
   10494:	ldr	r3, [pc, #272]	; (105a8 <_dtoa_r+0x2d0>)
   10496:	ldr	r2, [pc, #284]	; (105b4 <_dtoa_r+0x2dc>)
   10498:	ubfx	r0, r4, #0, #20
   1049c:	cmp	r0, #0
   1049e:	ite	ne
   104a0:	movne	r0, r3
   104a2:	moveq	r0, r2
   104a4:	b.n	10362 <_dtoa_r+0x8a>
   104a6:	ubfx	r3, fp, #0, #20
   104aa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   104ae:	subw	r4, r5, #1023	; 0x3ff
   104b2:	mov	r0, sl
   104b4:	str.w	r8, [sp, #60]	; 0x3c
   104b8:	orr.w	r1, r1, #3145728	; 0x300000
   104bc:	ldr	r5, [sp, #96]	; 0x60
   104be:	b.n	103ce <_dtoa_r+0xf6>
   104c0:	ldr	r0, [pc, #244]	; (105b8 <_dtoa_r+0x2e0>)
   104c2:	b.n	1034a <_dtoa_r+0x72>
   104c4:	adds	r3, r0, #3
   104c6:	b.n	10374 <_dtoa_r+0x9c>
   104c8:	movs	r1, #0
   104ca:	str.w	r1, [r9, #68]	; 0x44
   104ce:	mov	r0, r9
   104d0:	mov	r4, r1
   104d2:	str	r1, [sp, #0]
   104d4:	bl	11ba0 <_Balloc>
   104d8:	mov.w	r3, #4294967295
   104dc:	str	r3, [sp, #32]
   104de:	str	r3, [sp, #56]	; 0x38
   104e0:	movs	r3, #1
   104e2:	str	r0, [sp, #36]	; 0x24
   104e4:	str.w	r0, [r9, #64]	; 0x40
   104e8:	str	r4, [sp, #20]
   104ea:	str	r3, [sp, #44]	; 0x2c
   104ec:	ldr	r3, [sp, #100]	; 0x64
   104ee:	cmp	r3, #0
   104f0:	blt.w	10694 <_dtoa_r+0x3bc>
   104f4:	ldr	r2, [sp, #16]
   104f6:	cmp	r2, #14
   104f8:	bgt.w	10694 <_dtoa_r+0x3bc>
   104fc:	ldr	r3, [pc, #176]	; (105b0 <_dtoa_r+0x2d8>)
   104fe:	add.w	r3, r3, r2, lsl #3
   10502:	vldr	d7, [r3]
   10506:	ldr	r3, [sp, #20]
   10508:	cmp	r3, #0
   1050a:	vstr	d7, [sp]
   1050e:	blt.w	10b0e <_dtoa_r+0x836>
   10512:	mov	r6, sl
   10514:	mov	r7, fp
   10516:	ldrd	sl, fp, [sp]
   1051a:	mov	r0, r6
   1051c:	mov	r2, sl
   1051e:	mov	r3, fp
   10520:	mov	r1, r7
   10522:	bl	b228 <__aeabi_ddiv>
   10526:	bl	b534 <__aeabi_d2iz>
   1052a:	mov	r4, r0
   1052c:	bl	af08 <__aeabi_i2d>
   10530:	mov	r2, sl
   10532:	mov	r3, fp
   10534:	bl	afd4 <__aeabi_dmul>
   10538:	mov	r3, r1
   1053a:	mov	r2, r0
   1053c:	mov	r1, r7
   1053e:	mov	r0, r6
   10540:	bl	ac6c <__aeabi_dsub>
   10544:	ldr	r5, [sp, #36]	; 0x24
   10546:	add.w	r3, r4, #48	; 0x30
   1054a:	strb	r3, [r5, #0]
   1054c:	ldr	r3, [sp, #32]
   1054e:	cmp	r3, #1
   10550:	mov	r6, r0
   10552:	mov	r7, r1
   10554:	add.w	r5, r5, #1
   10558:	beq.n	1061e <_dtoa_r+0x346>
   1055a:	movs	r2, #0
   1055c:	ldr	r3, [pc, #92]	; (105bc <_dtoa_r+0x2e4>)
   1055e:	bl	afd4 <__aeabi_dmul>
   10562:	movs	r2, #0
   10564:	movs	r3, #0
   10566:	mov	r6, r0
   10568:	mov	r7, r1
   1056a:	bl	b4a4 <__aeabi_dcmpeq>
   1056e:	cmp	r0, #0
   10570:	bne.n	1066e <_dtoa_r+0x396>
   10572:	str.w	r9, [sp, #20]
   10576:	ldr.w	sl, [sp, #32]
   1057a:	ldr.w	fp, [sp, #36]	; 0x24
   1057e:	ldrd	r8, r9, [sp]
   10582:	b.n	105d6 <_dtoa_r+0x2fe>
   10584:	nop.w
   10588:	.word	0x636f4361
   1058c:	.word	0x3fd287a7
   10590:	.word	0x8b60c8b3
   10594:	.word	0x3fc68a28
   10598:	.word	0x509f79fb
   1059c:	.word	0x3fd34413
   105a0:	.word	0x7ff00000
   105a4:	.word	0x00013929
   105a8:	.word	0x00013a78
   105ac:	.word	0x3ff80000
   105b0:	.word	0x00013b80
   105b4:	.word	0x00013a6c
   105b8:	.word	0x00013928
   105bc:	.word	0x40240000
   105c0:	bl	afd4 <__aeabi_dmul>
   105c4:	movs	r2, #0
   105c6:	movs	r3, #0
   105c8:	mov	r6, r0
   105ca:	mov	r7, r1
   105cc:	bl	b4a4 <__aeabi_dcmpeq>
   105d0:	cmp	r0, #0
   105d2:	bne.w	10d32 <_dtoa_r+0xa5a>
   105d6:	mov	r2, r8
   105d8:	mov	r3, r9
   105da:	mov	r0, r6
   105dc:	mov	r1, r7
   105de:	bl	b228 <__aeabi_ddiv>
   105e2:	bl	b534 <__aeabi_d2iz>
   105e6:	mov	r4, r0
   105e8:	bl	af08 <__aeabi_i2d>
   105ec:	mov	r2, r8
   105ee:	mov	r3, r9
   105f0:	bl	afd4 <__aeabi_dmul>
   105f4:	mov	r2, r0
   105f6:	mov	r3, r1
   105f8:	mov	r0, r6
   105fa:	mov	r1, r7
   105fc:	bl	ac6c <__aeabi_dsub>
   10600:	add.w	lr, r4, #48	; 0x30
   10604:	strb.w	lr, [r5], #1
   10608:	rsb	lr, fp, r5
   1060c:	cmp	lr, sl
   1060e:	mov	r6, r0
   10610:	mov	r7, r1
   10612:	mov.w	r2, #0
   10616:	ldr	r3, [pc, #696]	; (108d0 <_dtoa_r+0x5f8>)
   10618:	bne.n	105c0 <_dtoa_r+0x2e8>
   1061a:	ldr.w	r9, [sp, #20]
   1061e:	mov	r2, r6
   10620:	mov	r3, r7
   10622:	mov	r0, r6
   10624:	mov	r1, r7
   10626:	bl	ac70 <__adddf3>
   1062a:	mov	r6, r0
   1062c:	mov	r7, r1
   1062e:	mov	r2, r0
   10630:	mov	r3, r1
   10632:	ldrd	r0, r1, [sp]
   10636:	bl	b4b8 <__aeabi_dcmplt>
   1063a:	cbnz	r0, 1064e <_dtoa_r+0x376>
   1063c:	mov	r2, r6
   1063e:	mov	r3, r7
   10640:	ldrd	r0, r1, [sp]
   10644:	bl	b4a4 <__aeabi_dcmpeq>
   10648:	cbz	r0, 1066e <_dtoa_r+0x396>
   1064a:	lsls	r3, r4, #31
   1064c:	bpl.n	1066e <_dtoa_r+0x396>
   1064e:	ldrb.w	r4, [r5, #-1]
   10652:	ldr	r2, [sp, #36]	; 0x24
   10654:	subs	r3, r5, #1
   10656:	b.n	10662 <_dtoa_r+0x38a>
   10658:	cmp	r2, r3
   1065a:	beq.w	10e56 <_dtoa_r+0xb7e>
   1065e:	ldrb.w	r4, [r3, #-1]!
   10662:	cmp	r4, #57	; 0x39
   10664:	add.w	r5, r3, #1
   10668:	beq.n	10658 <_dtoa_r+0x380>
   1066a:	adds	r4, #1
   1066c:	strb	r4, [r3, #0]
   1066e:	ldr	r1, [sp, #40]	; 0x28
   10670:	mov	r0, r9
   10672:	bl	11bec <_Bfree>
   10676:	movs	r2, #0
   10678:	ldr	r3, [sp, #16]
   1067a:	strb	r2, [r5, #0]
   1067c:	ldr	r2, [sp, #12]
   1067e:	adds	r3, #1
   10680:	str	r3, [r2, #0]
   10682:	ldr	r3, [sp, #148]	; 0x94
   10684:	cmp	r3, #0
   10686:	beq.w	10dc0 <_dtoa_r+0xae8>
   1068a:	ldr	r0, [sp, #36]	; 0x24
   1068c:	str	r5, [r3, #0]
   1068e:	add	sp, #108	; 0x6c
   10690:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10694:	ldr	r2, [sp, #44]	; 0x2c
   10696:	cmp	r2, #0
   10698:	beq.w	108b8 <_dtoa_r+0x5e0>
   1069c:	ldr	r2, [sp, #0]
   1069e:	cmp	r2, #1
   106a0:	ble.w	10b52 <_dtoa_r+0x87a>
   106a4:	ldr	r3, [sp, #32]
   106a6:	ldr	r2, [sp, #24]
   106a8:	subs	r7, r3, #1
   106aa:	cmp	r2, r7
   106ac:	blt.w	10dc6 <_dtoa_r+0xaee>
   106b0:	subs	r7, r2, r7
   106b2:	ldr	r3, [sp, #32]
   106b4:	cmp	r3, #0
   106b6:	blt.w	10fba <_dtoa_r+0xce2>
   106ba:	ldr	r5, [sp, #28]
   106bc:	ldr	r3, [sp, #32]
   106be:	ldr	r2, [sp, #28]
   106c0:	movs	r1, #1
   106c2:	add	r2, r3
   106c4:	mov	r0, r9
   106c6:	str	r2, [sp, #28]
   106c8:	add	r8, r3
   106ca:	bl	11db4 <__i2b>
   106ce:	mov	r6, r0
   106d0:	cbz	r5, 106ec <_dtoa_r+0x414>
   106d2:	cmp.w	r8, #0
   106d6:	ble.n	106ec <_dtoa_r+0x414>
   106d8:	cmp	r5, r8
   106da:	ldr	r2, [sp, #28]
   106dc:	mov	r3, r5
   106de:	it	ge
   106e0:	movge	r3, r8
   106e2:	subs	r2, r2, r3
   106e4:	str	r2, [sp, #28]
   106e6:	subs	r5, r5, r3
   106e8:	rsb	r8, r3, r8
   106ec:	ldr	r3, [sp, #24]
   106ee:	cmp	r3, #0
   106f0:	ble.w	10cde <_dtoa_r+0xa06>
   106f4:	ldr	r2, [sp, #44]	; 0x2c
   106f6:	cmp	r2, #0
   106f8:	beq.w	10b00 <_dtoa_r+0x828>
   106fc:	cmp	r7, #0
   106fe:	beq.w	10b00 <_dtoa_r+0x828>
   10702:	mov	r1, r6
   10704:	mov	r2, r7
   10706:	mov	r0, r9
   10708:	bl	11ef8 <__pow5mult>
   1070c:	ldr	r2, [sp, #40]	; 0x28
   1070e:	mov	r1, r0
   10710:	mov	r6, r0
   10712:	mov	r0, r9
   10714:	bl	11dc8 <__multiply>
   10718:	ldr	r1, [sp, #40]	; 0x28
   1071a:	mov	r4, r0
   1071c:	mov	r0, r9
   1071e:	bl	11bec <_Bfree>
   10722:	ldr	r3, [sp, #24]
   10724:	subs	r3, r3, r7
   10726:	str	r3, [sp, #24]
   10728:	bne.w	10afe <_dtoa_r+0x826>
   1072c:	movs	r1, #1
   1072e:	mov	r0, r9
   10730:	bl	11db4 <__i2b>
   10734:	ldr	r3, [sp, #48]	; 0x30
   10736:	str	r0, [sp, #24]
   10738:	cmp	r3, #0
   1073a:	beq.w	10b68 <_dtoa_r+0x890>
   1073e:	mov	r1, r0
   10740:	mov	r2, r3
   10742:	mov	r0, r9
   10744:	bl	11ef8 <__pow5mult>
   10748:	ldr	r3, [sp, #0]
   1074a:	str	r0, [sp, #24]
   1074c:	cmp	r3, #1
   1074e:	ble.w	10d38 <_dtoa_r+0xa60>
   10752:	movs	r7, #0
   10754:	ldr	r2, [sp, #24]
   10756:	ldr	r3, [r2, #16]
   10758:	add.w	r3, r2, r3, lsl #2
   1075c:	ldr	r0, [r3, #16]
   1075e:	bl	11d18 <__hi0bits>
   10762:	rsb	r0, r0, #32
   10766:	add	r0, r8
   10768:	ands.w	r0, r0, #31
   1076c:	beq.w	10b64 <_dtoa_r+0x88c>
   10770:	rsb	r3, r0, #32
   10774:	cmp	r3, #4
   10776:	ble.w	110f4 <_dtoa_r+0xe1c>
   1077a:	rsb	r0, r0, #28
   1077e:	ldr	r3, [sp, #28]
   10780:	add	r3, r0
   10782:	str	r3, [sp, #28]
   10784:	add	r5, r0
   10786:	add	r8, r0
   10788:	ldr	r3, [sp, #28]
   1078a:	cmp	r3, #0
   1078c:	ble.n	1079a <_dtoa_r+0x4c2>
   1078e:	mov	r1, r4
   10790:	mov	r2, r3
   10792:	mov	r0, r9
   10794:	bl	11f98 <__lshift>
   10798:	mov	r4, r0
   1079a:	cmp.w	r8, #0
   1079e:	ble.n	107ac <_dtoa_r+0x4d4>
   107a0:	mov	r2, r8
   107a2:	ldr	r1, [sp, #24]
   107a4:	mov	r0, r9
   107a6:	bl	11f98 <__lshift>
   107aa:	str	r0, [sp, #24]
   107ac:	ldr	r3, [sp, #52]	; 0x34
   107ae:	cmp	r3, #0
   107b0:	bne.w	10ca8 <_dtoa_r+0x9d0>
   107b4:	ldr	r3, [sp, #32]
   107b6:	cmp	r3, #0
   107b8:	ble.w	10ce2 <_dtoa_r+0xa0a>
   107bc:	ldr	r3, [sp, #44]	; 0x2c
   107be:	cmp	r3, #0
   107c0:	bne.w	10bac <_dtoa_r+0x8d4>
   107c4:	ldr.w	fp, [sp, #36]	; 0x24
   107c8:	ldr	r7, [sp, #32]
   107ca:	ldr.w	r8, [sp, #24]
   107ce:	mov	r5, fp
   107d0:	b.n	107d8 <_dtoa_r+0x500>
   107d2:	bl	11c00 <__multadd>
   107d6:	mov	r4, r0
   107d8:	mov	r1, r8
   107da:	mov	r0, r4
   107dc:	bl	101ac <quorem>
   107e0:	add.w	sl, r0, #48	; 0x30
   107e4:	strb.w	sl, [r5], #1
   107e8:	rsb	r3, fp, r5
   107ec:	cmp	r3, r7
   107ee:	mov.w	r2, #10
   107f2:	mov.w	r3, #0
   107f6:	mov	r1, r4
   107f8:	mov	r0, r9
   107fa:	blt.n	107d2 <_dtoa_r+0x4fa>
   107fc:	ldr	r3, [sp, #36]	; 0x24
   107fe:	ldr	r2, [sp, #32]
   10800:	cmp	r2, #1
   10802:	ite	ge
   10804:	addge	r3, r3, r2
   10806:	addlt	r3, #1
   10808:	mov	r5, r3
   1080a:	mov.w	fp, #0
   1080e:	mov	r1, r4
   10810:	movs	r2, #1
   10812:	mov	r0, r9
   10814:	bl	11f98 <__lshift>
   10818:	ldr	r1, [sp, #24]
   1081a:	str	r0, [sp, #40]	; 0x28
   1081c:	bl	12048 <__mcmp>
   10820:	cmp	r0, #0
   10822:	ble.w	10e30 <_dtoa_r+0xb58>
   10826:	ldrb.w	r2, [r5, #-1]
   1082a:	ldr	r1, [sp, #36]	; 0x24
   1082c:	subs	r3, r5, #1
   1082e:	b.n	1083a <_dtoa_r+0x562>
   10830:	cmp	r3, r1
   10832:	beq.w	10d1e <_dtoa_r+0xa46>
   10836:	ldrb.w	r2, [r3, #-1]!
   1083a:	cmp	r2, #57	; 0x39
   1083c:	add.w	r5, r3, #1
   10840:	beq.n	10830 <_dtoa_r+0x558>
   10842:	adds	r2, #1
   10844:	strb	r2, [r3, #0]
   10846:	ldr	r1, [sp, #24]
   10848:	mov	r0, r9
   1084a:	bl	11bec <_Bfree>
   1084e:	cmp	r6, #0
   10850:	beq.w	1066e <_dtoa_r+0x396>
   10854:	cmp.w	fp, #0
   10858:	beq.n	10866 <_dtoa_r+0x58e>
   1085a:	cmp	fp, r6
   1085c:	beq.n	10866 <_dtoa_r+0x58e>
   1085e:	mov	r1, fp
   10860:	mov	r0, r9
   10862:	bl	11bec <_Bfree>
   10866:	mov	r1, r6
   10868:	mov	r0, r9
   1086a:	bl	11bec <_Bfree>
   1086e:	b.n	1066e <_dtoa_r+0x396>
   10870:	movs	r3, #1
   10872:	str	r3, [sp, #52]	; 0x34
   10874:	b.n	1044e <_dtoa_r+0x176>
   10876:	ldr.w	r8, [sp, #16]
   1087a:	mov	r0, r8
   1087c:	bl	af08 <__aeabi_i2d>
   10880:	mov	r2, r0
   10882:	mov	r3, r1
   10884:	mov	r0, r6
   10886:	mov	r1, r7
   10888:	bl	b4a4 <__aeabi_dcmpeq>
   1088c:	cmp	r0, #0
   1088e:	bne.w	10426 <_dtoa_r+0x14e>
   10892:	add.w	r3, r8, #4294967295
   10896:	str	r3, [sp, #16]
   10898:	b.n	10426 <_dtoa_r+0x14e>
   1089a:	ldr	r2, [sp, #28]
   1089c:	ldr	r3, [sp, #16]
   1089e:	subs	r2, r2, r3
   108a0:	negs	r3, r3
   108a2:	str	r3, [sp, #24]
   108a4:	movs	r3, #0
   108a6:	str	r2, [sp, #28]
   108a8:	str	r3, [sp, #48]	; 0x30
   108aa:	b.n	1046c <_dtoa_r+0x194>
   108ac:	rsb	r3, r8, #0
   108b0:	str	r3, [sp, #28]
   108b2:	mov.w	r8, #0
   108b6:	b.n	1045c <_dtoa_r+0x184>
   108b8:	ldr	r7, [sp, #24]
   108ba:	ldr	r5, [sp, #28]
   108bc:	ldr	r6, [sp, #44]	; 0x2c
   108be:	b.n	106d0 <_dtoa_r+0x3f8>
   108c0:	rsb	r4, r3, #32
   108c4:	lsl.w	r0, sl, r4
   108c8:	b.n	103c0 <_dtoa_r+0xe8>
   108ca:	str	r0, [sp, #52]	; 0x34
   108cc:	b.n	1044e <_dtoa_r+0x176>
   108ce:	nop
   108d0:	.word	0x40240000
   108d4:	movs	r3, #0
   108d6:	str	r3, [sp, #44]	; 0x2c
   108d8:	ldr	r3, [sp, #16]
   108da:	ldr	r2, [sp, #20]
   108dc:	add	r3, r2
   108de:	str	r3, [sp, #56]	; 0x38
   108e0:	adds	r3, #1
   108e2:	cmp	r3, #0
   108e4:	str	r3, [sp, #32]
   108e6:	ble.w	10de4 <_dtoa_r+0xb0c>
   108ea:	ldr	r4, [sp, #32]
   108ec:	mov	r5, r4
   108ee:	movs	r1, #0
   108f0:	cmp	r5, #23
   108f2:	str.w	r1, [r9, #68]	; 0x44
   108f6:	bls.n	10910 <_dtoa_r+0x638>
   108f8:	movs	r2, #1
   108fa:	movs	r3, #4
   108fc:	lsls	r3, r3, #1
   108fe:	add.w	r0, r3, #20
   10902:	cmp	r0, r5
   10904:	mov	r1, r2
   10906:	add.w	r2, r2, #1
   1090a:	bls.n	108fc <_dtoa_r+0x624>
   1090c:	str.w	r1, [r9, #68]	; 0x44
   10910:	mov	r0, r9
   10912:	bl	11ba0 <_Balloc>
   10916:	cmp	r4, #14
   10918:	str	r0, [sp, #36]	; 0x24
   1091a:	str.w	r0, [r9, #64]	; 0x40
   1091e:	bhi.w	104ec <_dtoa_r+0x214>
   10922:	cmp	r6, #0
   10924:	beq.w	104ec <_dtoa_r+0x214>
   10928:	ldr	r1, [sp, #16]
   1092a:	cmp	r1, #0
   1092c:	strd	sl, fp, [sp, #64]	; 0x40
   10930:	ble.w	10e68 <_dtoa_r+0xb90>
   10934:	ldr	r3, [pc, #576]	; (10b78 <_dtoa_r+0x8a0>)
   10936:	and.w	r2, r1, #15
   1093a:	asrs	r6, r1, #4
   1093c:	add.w	r3, r3, r2, lsl #3
   10940:	lsls	r0, r6, #27
   10942:	ldrd	r4, r5, [r3]
   10946:	bpl.w	10dd6 <_dtoa_r+0xafe>
   1094a:	ldr	r3, [pc, #560]	; (10b7c <_dtoa_r+0x8a4>)
   1094c:	mov	r0, sl
   1094e:	mov	r1, fp
   10950:	ldrd	r2, r3, [r3, #32]
   10954:	bl	b228 <__aeabi_ddiv>
   10958:	strd	r0, r1, [sp, #72]	; 0x48
   1095c:	and.w	r6, r6, #15
   10960:	mov.w	sl, #3
   10964:	cbz	r6, 10988 <_dtoa_r+0x6b0>
   10966:	ldr	r7, [pc, #532]	; (10b7c <_dtoa_r+0x8a4>)
   10968:	lsls	r1, r6, #31
   1096a:	bpl.n	10980 <_dtoa_r+0x6a8>
   1096c:	mov	r0, r4
   1096e:	mov	r1, r5
   10970:	ldrd	r2, r3, [r7]
   10974:	bl	afd4 <__aeabi_dmul>
   10978:	add.w	sl, sl, #1
   1097c:	mov	r4, r0
   1097e:	mov	r5, r1
   10980:	asrs	r6, r6, #1
   10982:	add.w	r7, r7, #8
   10986:	bne.n	10968 <_dtoa_r+0x690>
   10988:	mov	r2, r4
   1098a:	mov	r3, r5
   1098c:	ldrd	r0, r1, [sp, #72]	; 0x48
   10990:	bl	b228 <__aeabi_ddiv>
   10994:	mov	r6, r0
   10996:	mov	r7, r1
   10998:	ldr	r3, [sp, #52]	; 0x34
   1099a:	cbz	r3, 109ae <_dtoa_r+0x6d6>
   1099c:	movs	r2, #0
   1099e:	ldr	r3, [pc, #480]	; (10b80 <_dtoa_r+0x8a8>)
   109a0:	mov	r0, r6
   109a2:	mov	r1, r7
   109a4:	bl	b4b8 <__aeabi_dcmplt>
   109a8:	cmp	r0, #0
   109aa:	bne.w	10fe2 <_dtoa_r+0xd0a>
   109ae:	mov	r0, sl
   109b0:	bl	af08 <__aeabi_i2d>
   109b4:	mov	r2, r6
   109b6:	mov	r3, r7
   109b8:	bl	afd4 <__aeabi_dmul>
   109bc:	ldr	r3, [pc, #452]	; (10b84 <_dtoa_r+0x8ac>)
   109be:	movs	r2, #0
   109c0:	bl	ac70 <__adddf3>
   109c4:	ldr	r3, [sp, #32]
   109c6:	mov	r4, r0
   109c8:	sub.w	r5, r1, #54525952	; 0x3400000
   109cc:	cmp	r3, #0
   109ce:	beq.w	10d88 <_dtoa_r+0xab0>
   109d2:	ldr	r3, [sp, #16]
   109d4:	str	r3, [sp, #88]	; 0x58
   109d6:	ldr	r3, [sp, #32]
   109d8:	str	r3, [sp, #72]	; 0x48
   109da:	ldr	r3, [sp, #44]	; 0x2c
   109dc:	cmp	r3, #0
   109de:	beq.w	10f0a <_dtoa_r+0xc32>
   109e2:	ldr	r2, [sp, #72]	; 0x48
   109e4:	ldr	r3, [pc, #400]	; (10b78 <_dtoa_r+0x8a0>)
   109e6:	ldr	r1, [pc, #416]	; (10b88 <_dtoa_r+0x8b0>)
   109e8:	add.w	r3, r3, r2, lsl #3
   109ec:	ldrd	r2, r3, [r3, #-8]
   109f0:	movs	r0, #0
   109f2:	bl	b228 <__aeabi_ddiv>
   109f6:	mov	r2, r4
   109f8:	mov	r3, r5
   109fa:	bl	ac6c <__aeabi_dsub>
   109fe:	mov	sl, r0
   10a00:	mov	fp, r1
   10a02:	mov	r0, r6
   10a04:	mov	r1, r7
   10a06:	bl	b534 <__aeabi_d2iz>
   10a0a:	mov	r4, r0
   10a0c:	bl	af08 <__aeabi_i2d>
   10a10:	mov	r2, r0
   10a12:	mov	r3, r1
   10a14:	mov	r0, r6
   10a16:	mov	r1, r7
   10a18:	bl	ac6c <__aeabi_dsub>
   10a1c:	adds	r4, #48	; 0x30
   10a1e:	ldr	r5, [sp, #36]	; 0x24
   10a20:	uxtb	r4, r4
   10a22:	mov	r6, r0
   10a24:	mov	r7, r1
   10a26:	strb	r4, [r5, #0]
   10a28:	mov	r2, r0
   10a2a:	mov	r3, r1
   10a2c:	mov	r0, sl
   10a2e:	mov	r1, fp
   10a30:	adds	r5, #1
   10a32:	bl	b4f4 <__aeabi_dcmpgt>
   10a36:	cmp	r0, #0
   10a38:	bne.n	10adc <_dtoa_r+0x804>
   10a3a:	mov	r2, r6
   10a3c:	mov	r3, r7
   10a3e:	movs	r0, #0
   10a40:	ldr	r1, [pc, #316]	; (10b80 <_dtoa_r+0x8a8>)
   10a42:	bl	ac6c <__aeabi_dsub>
   10a46:	mov	r2, r0
   10a48:	mov	r3, r1
   10a4a:	mov	r0, sl
   10a4c:	mov	r1, fp
   10a4e:	bl	b4f4 <__aeabi_dcmpgt>
   10a52:	cmp	r0, #0
   10a54:	bne.w	11068 <_dtoa_r+0xd90>
   10a58:	ldr	r2, [sp, #72]	; 0x48
   10a5a:	cmp	r2, #1
   10a5c:	ble.w	10e4e <_dtoa_r+0xb76>
   10a60:	ldr	r3, [sp, #72]	; 0x48
   10a62:	ldr	r2, [sp, #36]	; 0x24
   10a64:	str.w	r8, [sp, #72]	; 0x48
   10a68:	add	r3, r2
   10a6a:	mov	r8, r3
   10a6c:	b.n	10a8a <_dtoa_r+0x7b2>
   10a6e:	movs	r0, #0
   10a70:	ldr	r1, [pc, #268]	; (10b80 <_dtoa_r+0x8a8>)
   10a72:	bl	ac6c <__aeabi_dsub>
   10a76:	mov	r2, sl
   10a78:	mov	r3, fp
   10a7a:	bl	b4b8 <__aeabi_dcmplt>
   10a7e:	cmp	r0, #0
   10a80:	bne.w	11068 <_dtoa_r+0xd90>
   10a84:	cmp	r5, r8
   10a86:	beq.w	10e4a <_dtoa_r+0xb72>
   10a8a:	mov	r0, sl
   10a8c:	mov	r1, fp
   10a8e:	movs	r2, #0
   10a90:	ldr	r3, [pc, #248]	; (10b8c <_dtoa_r+0x8b4>)
   10a92:	bl	afd4 <__aeabi_dmul>
   10a96:	movs	r2, #0
   10a98:	ldr	r3, [pc, #240]	; (10b8c <_dtoa_r+0x8b4>)
   10a9a:	mov	sl, r0
   10a9c:	mov	fp, r1
   10a9e:	mov	r0, r6
   10aa0:	mov	r1, r7
   10aa2:	bl	afd4 <__aeabi_dmul>
   10aa6:	mov	r7, r1
   10aa8:	mov	r6, r0
   10aaa:	bl	b534 <__aeabi_d2iz>
   10aae:	mov	r4, r0
   10ab0:	bl	af08 <__aeabi_i2d>
   10ab4:	mov	r2, r0
   10ab6:	mov	r3, r1
   10ab8:	mov	r0, r6
   10aba:	mov	r1, r7
   10abc:	bl	ac6c <__aeabi_dsub>
   10ac0:	adds	r4, #48	; 0x30
   10ac2:	uxtb	r4, r4
   10ac4:	mov	r2, sl
   10ac6:	mov	r3, fp
   10ac8:	strb.w	r4, [r5], #1
   10acc:	mov	r6, r0
   10ace:	mov	r7, r1
   10ad0:	bl	b4b8 <__aeabi_dcmplt>
   10ad4:	mov	r2, r6
   10ad6:	mov	r3, r7
   10ad8:	cmp	r0, #0
   10ada:	beq.n	10a6e <_dtoa_r+0x796>
   10adc:	ldr	r3, [sp, #88]	; 0x58
   10ade:	str	r3, [sp, #16]
   10ae0:	b.n	1066e <_dtoa_r+0x396>
   10ae2:	movs	r3, #0
   10ae4:	str	r3, [sp, #44]	; 0x2c
   10ae6:	ldr	r3, [sp, #20]
   10ae8:	cmp	r3, #0
   10aea:	ble.w	10dee <_dtoa_r+0xb16>
   10aee:	mov	r5, r3
   10af0:	mov	r4, r3
   10af2:	str	r3, [sp, #56]	; 0x38
   10af4:	str	r3, [sp, #32]
   10af6:	b.n	108ee <_dtoa_r+0x616>
   10af8:	movs	r3, #1
   10afa:	str	r3, [sp, #44]	; 0x2c
   10afc:	b.n	10ae6 <_dtoa_r+0x80e>
   10afe:	str	r4, [sp, #40]	; 0x28
   10b00:	ldr	r2, [sp, #24]
   10b02:	ldr	r1, [sp, #40]	; 0x28
   10b04:	mov	r0, r9
   10b06:	bl	11ef8 <__pow5mult>
   10b0a:	mov	r4, r0
   10b0c:	b.n	1072c <_dtoa_r+0x454>
   10b0e:	ldr	r3, [sp, #32]
   10b10:	cmp	r3, #0
   10b12:	bgt.w	10512 <_dtoa_r+0x23a>
   10b16:	bne.w	10db8 <_dtoa_r+0xae0>
   10b1a:	movs	r2, #0
   10b1c:	ldr	r3, [pc, #112]	; (10b90 <_dtoa_r+0x8b8>)
   10b1e:	ldrd	r0, r1, [sp]
   10b22:	bl	afd4 <__aeabi_dmul>
   10b26:	mov	r3, fp
   10b28:	mov	r2, sl
   10b2a:	bl	b4e0 <__aeabi_dcmpge>
   10b2e:	ldr	r3, [sp, #32]
   10b30:	str	r3, [sp, #24]
   10b32:	mov	r6, r3
   10b34:	cmp	r0, #0
   10b36:	beq.w	10d0e <_dtoa_r+0xa36>
   10b3a:	ldr	r3, [sp, #20]
   10b3c:	ldr	r5, [sp, #36]	; 0x24
   10b3e:	mvns	r3, r3
   10b40:	str	r3, [sp, #16]
   10b42:	ldr	r1, [sp, #24]
   10b44:	mov	r0, r9
   10b46:	bl	11bec <_Bfree>
   10b4a:	cmp	r6, #0
   10b4c:	beq.w	1066e <_dtoa_r+0x396>
   10b50:	b.n	10866 <_dtoa_r+0x58e>
   10b52:	ldr	r2, [sp, #60]	; 0x3c
   10b54:	cmp	r2, #0
   10b56:	beq.w	10fca <_dtoa_r+0xcf2>
   10b5a:	addw	r3, r3, #1075	; 0x433
   10b5e:	ldr	r7, [sp, #24]
   10b60:	ldr	r5, [sp, #28]
   10b62:	b.n	106be <_dtoa_r+0x3e6>
   10b64:	movs	r0, #28
   10b66:	b.n	1077e <_dtoa_r+0x4a6>
   10b68:	ldr	r3, [sp, #0]
   10b6a:	cmp	r3, #1
   10b6c:	ble.w	11070 <_dtoa_r+0xd98>
   10b70:	ldr	r7, [sp, #48]	; 0x30
   10b72:	movs	r0, #1
   10b74:	b.n	10766 <_dtoa_r+0x48e>
   10b76:	nop
   10b78:	.word	0x00013b80
   10b7c:	.word	0x00013c48
   10b80:	.word	0x3ff00000
   10b84:	.word	0x401c0000
   10b88:	.word	0x3fe00000
   10b8c:	.word	0x40240000
   10b90:	.word	0x40140000
   10b94:	mov	r1, r6
   10b96:	movs	r3, #0
   10b98:	movs	r2, #10
   10b9a:	mov	r0, r9
   10b9c:	bl	11c00 <__multadd>
   10ba0:	ldr	r3, [sp, #56]	; 0x38
   10ba2:	cmp	r3, #0
   10ba4:	mov	r6, r0
   10ba6:	ble.w	110c4 <_dtoa_r+0xdec>
   10baa:	str	r3, [sp, #32]
   10bac:	cmp	r5, #0
   10bae:	ble.n	10bbc <_dtoa_r+0x8e4>
   10bb0:	mov	r1, r6
   10bb2:	mov	r2, r5
   10bb4:	mov	r0, r9
   10bb6:	bl	11f98 <__lshift>
   10bba:	mov	r6, r0
   10bbc:	cmp	r7, #0
   10bbe:	bne.w	10eba <_dtoa_r+0xbe2>
   10bc2:	mov	r8, r6
   10bc4:	ldr	r3, [sp, #32]
   10bc6:	ldr	r2, [sp, #36]	; 0x24
   10bc8:	subs	r3, #1
   10bca:	adds	r3, r2, r3
   10bcc:	str	r3, [sp, #32]
   10bce:	and.w	r3, sl, #1
   10bd2:	str	r3, [sp, #40]	; 0x28
   10bd4:	mov	r7, r2
   10bd6:	ldr.w	fp, [sp, #24]
   10bda:	mov	r0, r4
   10bdc:	mov	r1, fp
   10bde:	bl	101ac <quorem>
   10be2:	mov	r1, r6
   10be4:	mov	r5, r0
   10be6:	mov	r0, r4
   10be8:	bl	12048 <__mcmp>
   10bec:	mov	r2, r8
   10bee:	mov	r1, fp
   10bf0:	mov	sl, r0
   10bf2:	mov	r0, r9
   10bf4:	bl	1208c <__mdiff>
   10bf8:	ldr	r2, [r0, #12]
   10bfa:	mov	fp, r0
   10bfc:	add.w	r3, r5, #48	; 0x30
   10c00:	cmp	r2, #0
   10c02:	bne.n	10c98 <_dtoa_r+0x9c0>
   10c04:	mov	r1, r0
   10c06:	mov	r0, r4
   10c08:	str	r3, [sp, #28]
   10c0a:	bl	12048 <__mcmp>
   10c0e:	mov	r1, fp
   10c10:	str	r0, [sp, #20]
   10c12:	mov	r0, r9
   10c14:	bl	11bec <_Bfree>
   10c18:	ldr	r2, [sp, #20]
   10c1a:	ldr	r3, [sp, #28]
   10c1c:	cbnz	r2, 10c2a <_dtoa_r+0x952>
   10c1e:	ldr	r1, [sp, #0]
   10c20:	cbnz	r1, 10c2a <_dtoa_r+0x952>
   10c22:	ldr	r1, [sp, #40]	; 0x28
   10c24:	cmp	r1, #0
   10c26:	beq.w	11094 <_dtoa_r+0xdbc>
   10c2a:	cmp.w	sl, #0
   10c2e:	blt.w	10df8 <_dtoa_r+0xb20>
   10c32:	bne.n	10c40 <_dtoa_r+0x968>
   10c34:	ldr	r1, [sp, #0]
   10c36:	cbnz	r1, 10c40 <_dtoa_r+0x968>
   10c38:	ldr	r1, [sp, #40]	; 0x28
   10c3a:	cmp	r1, #0
   10c3c:	beq.w	10df8 <_dtoa_r+0xb20>
   10c40:	cmp	r2, #0
   10c42:	bgt.w	10ee2 <_dtoa_r+0xc0a>
   10c46:	ldr	r2, [sp, #32]
   10c48:	strb	r3, [r7, #0]
   10c4a:	add.w	sl, r7, #1
   10c4e:	cmp	r7, r2
   10c50:	mov	r5, sl
   10c52:	beq.w	10efa <_dtoa_r+0xc22>
   10c56:	mov	r1, r4
   10c58:	movs	r3, #0
   10c5a:	movs	r2, #10
   10c5c:	mov	r0, r9
   10c5e:	bl	11c00 <__multadd>
   10c62:	cmp	r6, r8
   10c64:	mov	r4, r0
   10c66:	mov	r1, r6
   10c68:	mov.w	r3, #0
   10c6c:	mov.w	r2, #10
   10c70:	mov	r0, r9
   10c72:	beq.n	10c8c <_dtoa_r+0x9b4>
   10c74:	bl	11c00 <__multadd>
   10c78:	mov	r1, r8
   10c7a:	mov	r6, r0
   10c7c:	movs	r3, #0
   10c7e:	movs	r2, #10
   10c80:	mov	r0, r9
   10c82:	bl	11c00 <__multadd>
   10c86:	mov	r7, sl
   10c88:	mov	r8, r0
   10c8a:	b.n	10bd6 <_dtoa_r+0x8fe>
   10c8c:	bl	11c00 <__multadd>
   10c90:	mov	r7, sl
   10c92:	mov	r6, r0
   10c94:	mov	r8, r0
   10c96:	b.n	10bd6 <_dtoa_r+0x8fe>
   10c98:	mov	r1, r0
   10c9a:	mov	r0, r9
   10c9c:	str	r3, [sp, #20]
   10c9e:	bl	11bec <_Bfree>
   10ca2:	movs	r2, #1
   10ca4:	ldr	r3, [sp, #20]
   10ca6:	b.n	10c2a <_dtoa_r+0x952>
   10ca8:	ldr	r1, [sp, #24]
   10caa:	mov	r0, r4
   10cac:	bl	12048 <__mcmp>
   10cb0:	cmp	r0, #0
   10cb2:	bge.w	107b4 <_dtoa_r+0x4dc>
   10cb6:	mov	r1, r4
   10cb8:	ldr	r4, [sp, #16]
   10cba:	movs	r3, #0
   10cbc:	subs	r4, #1
   10cbe:	movs	r2, #10
   10cc0:	mov	r0, r9
   10cc2:	str	r4, [sp, #16]
   10cc4:	bl	11c00 <__multadd>
   10cc8:	ldr	r3, [sp, #44]	; 0x2c
   10cca:	mov	r4, r0
   10ccc:	cmp	r3, #0
   10cce:	bne.w	10b94 <_dtoa_r+0x8bc>
   10cd2:	ldr	r3, [sp, #56]	; 0x38
   10cd4:	cmp	r3, #0
   10cd6:	ble.w	110b4 <_dtoa_r+0xddc>
   10cda:	str	r3, [sp, #32]
   10cdc:	b.n	107c4 <_dtoa_r+0x4ec>
   10cde:	ldr	r4, [sp, #40]	; 0x28
   10ce0:	b.n	1072c <_dtoa_r+0x454>
   10ce2:	ldr	r3, [sp, #0]
   10ce4:	cmp	r3, #2
   10ce6:	ble.w	107bc <_dtoa_r+0x4e4>
   10cea:	ldr	r3, [sp, #32]
   10cec:	cmp	r3, #0
   10cee:	bne.w	1102c <_dtoa_r+0xd54>
   10cf2:	ldr	r1, [sp, #24]
   10cf4:	movs	r2, #5
   10cf6:	mov	r0, r9
   10cf8:	bl	11c00 <__multadd>
   10cfc:	mov	r1, r0
   10cfe:	str	r0, [sp, #24]
   10d00:	mov	r0, r4
   10d02:	bl	12048 <__mcmp>
   10d06:	cmp	r0, #0
   10d08:	str	r4, [sp, #40]	; 0x28
   10d0a:	ble.w	10b3a <_dtoa_r+0x862>
   10d0e:	ldr	r2, [sp, #16]
   10d10:	ldr	r1, [sp, #36]	; 0x24
   10d12:	movs	r3, #49	; 0x31
   10d14:	adds	r2, #1
   10d16:	str	r2, [sp, #16]
   10d18:	strb	r3, [r1, #0]
   10d1a:	adds	r5, r1, #1
   10d1c:	b.n	10b42 <_dtoa_r+0x86a>
   10d1e:	ldr	r2, [sp, #16]
   10d20:	adds	r2, #1
   10d22:	str	r2, [sp, #16]
   10d24:	ldr	r2, [sp, #36]	; 0x24
   10d26:	movs	r3, #49	; 0x31
   10d28:	strb	r3, [r2, #0]
   10d2a:	b.n	10846 <_dtoa_r+0x56e>
   10d2c:	movs	r3, #1
   10d2e:	str	r3, [sp, #44]	; 0x2c
   10d30:	b.n	108d8 <_dtoa_r+0x600>
   10d32:	ldr.w	r9, [sp, #20]
   10d36:	b.n	1066e <_dtoa_r+0x396>
   10d38:	cmp.w	sl, #0
   10d3c:	bne.w	10752 <_dtoa_r+0x47a>
   10d40:	ubfx	r3, fp, #0, #20
   10d44:	cmp	r3, #0
   10d46:	bne.w	10fc6 <_dtoa_r+0xcee>
   10d4a:	bic.w	r7, fp, #2147483648	; 0x80000000
   10d4e:	lsrs	r7, r7, #20
   10d50:	lsls	r7, r7, #20
   10d52:	cbz	r7, 10d60 <_dtoa_r+0xa88>
   10d54:	ldr	r3, [sp, #28]
   10d56:	adds	r3, #1
   10d58:	str	r3, [sp, #28]
   10d5a:	add.w	r8, r8, #1
   10d5e:	movs	r7, #1
   10d60:	ldr	r3, [sp, #48]	; 0x30
   10d62:	movs	r0, #1
   10d64:	cmp	r3, #0
   10d66:	beq.w	10766 <_dtoa_r+0x48e>
   10d6a:	b.n	10754 <_dtoa_r+0x47c>
   10d6c:	mov	r0, sl
   10d6e:	bl	af08 <__aeabi_i2d>
   10d72:	mov	r2, r6
   10d74:	mov	r3, r7
   10d76:	bl	afd4 <__aeabi_dmul>
   10d7a:	movs	r2, #0
   10d7c:	ldr	r3, [pc, #764]	; (1107c <_dtoa_r+0xda4>)
   10d7e:	bl	ac70 <__adddf3>
   10d82:	mov	r4, r0
   10d84:	sub.w	r5, r1, #54525952	; 0x3400000
   10d88:	mov	r0, r6
   10d8a:	mov	r1, r7
   10d8c:	movs	r2, #0
   10d8e:	ldr	r3, [pc, #752]	; (11080 <_dtoa_r+0xda8>)
   10d90:	bl	ac6c <__aeabi_dsub>
   10d94:	mov	r2, r4
   10d96:	mov	r3, r5
   10d98:	mov	r6, r0
   10d9a:	mov	r7, r1
   10d9c:	bl	b4f4 <__aeabi_dcmpgt>
   10da0:	cmp	r0, #0
   10da2:	bne.w	10f02 <_dtoa_r+0xc2a>
   10da6:	mov	r2, r4
   10da8:	add.w	r3, r5, #2147483648	; 0x80000000
   10dac:	mov	r0, r6
   10dae:	mov	r1, r7
   10db0:	bl	b4b8 <__aeabi_dcmplt>
   10db4:	cmp	r0, #0
   10db6:	beq.n	10e4e <_dtoa_r+0xb76>
   10db8:	movs	r3, #0
   10dba:	str	r3, [sp, #24]
   10dbc:	mov	r6, r3
   10dbe:	b.n	10b3a <_dtoa_r+0x862>
   10dc0:	ldr	r0, [sp, #36]	; 0x24
   10dc2:	b.w	1034a <_dtoa_r+0x72>
   10dc6:	ldr	r3, [sp, #24]
   10dc8:	ldr	r2, [sp, #48]	; 0x30
   10dca:	str	r7, [sp, #24]
   10dcc:	subs	r3, r7, r3
   10dce:	add	r2, r3
   10dd0:	str	r2, [sp, #48]	; 0x30
   10dd2:	movs	r7, #0
   10dd4:	b.n	106b2 <_dtoa_r+0x3da>
   10dd6:	vldr	d7, [sp, #64]	; 0x40
   10dda:	mov.w	sl, #2
   10dde:	vstr	d7, [sp, #72]	; 0x48
   10de2:	b.n	10964 <_dtoa_r+0x68c>
   10de4:	mov	r4, r3
   10de6:	movs	r1, #0
   10de8:	str.w	r1, [r9, #68]	; 0x44
   10dec:	b.n	10910 <_dtoa_r+0x638>
   10dee:	movs	r4, #1
   10df0:	str	r4, [sp, #56]	; 0x38
   10df2:	str	r4, [sp, #32]
   10df4:	str	r4, [sp, #20]
   10df6:	b.n	10de6 <_dtoa_r+0xb0e>
   10df8:	cmp	r2, #0
   10dfa:	mov	sl, r3
   10dfc:	ble.n	10e22 <_dtoa_r+0xb4a>
   10dfe:	mov	r1, r4
   10e00:	movs	r2, #1
   10e02:	mov	r0, r9
   10e04:	bl	11f98 <__lshift>
   10e08:	ldr	r1, [sp, #24]
   10e0a:	mov	r4, r0
   10e0c:	bl	12048 <__mcmp>
   10e10:	cmp	r0, #0
   10e12:	ble.w	110a6 <_dtoa_r+0xdce>
   10e16:	cmp.w	sl, #57	; 0x39
   10e1a:	beq.w	11030 <_dtoa_r+0xd58>
   10e1e:	add.w	sl, r5, #49	; 0x31
   10e22:	mov	fp, r6
   10e24:	strb.w	sl, [r7]
   10e28:	adds	r5, r7, #1
   10e2a:	mov	r6, r8
   10e2c:	str	r4, [sp, #40]	; 0x28
   10e2e:	b.n	10846 <_dtoa_r+0x56e>
   10e30:	bne.n	10e3c <_dtoa_r+0xb64>
   10e32:	tst.w	sl, #1
   10e36:	beq.n	10e3c <_dtoa_r+0xb64>
   10e38:	b.n	10826 <_dtoa_r+0x54e>
   10e3a:	mov	r5, r2
   10e3c:	ldrb.w	r3, [r5, #-1]
   10e40:	cmp	r3, #48	; 0x30
   10e42:	add.w	r2, r5, #4294967295
   10e46:	beq.n	10e3a <_dtoa_r+0xb62>
   10e48:	b.n	10846 <_dtoa_r+0x56e>
   10e4a:	ldr.w	r8, [sp, #72]	; 0x48
   10e4e:	ldrd	sl, fp, [sp, #64]	; 0x40
   10e52:	b.w	104ec <_dtoa_r+0x214>
   10e56:	ldr	r1, [sp, #36]	; 0x24
   10e58:	movs	r2, #48	; 0x30
   10e5a:	strb	r2, [r1, #0]
   10e5c:	ldr	r2, [sp, #16]
   10e5e:	ldrb.w	r4, [r5, #-1]
   10e62:	adds	r2, #1
   10e64:	str	r2, [sp, #16]
   10e66:	b.n	1066a <_dtoa_r+0x392>
   10e68:	ldr	r3, [sp, #16]
   10e6a:	negs	r4, r3
   10e6c:	cmp	r4, #0
   10e6e:	beq.w	10fd8 <_dtoa_r+0xd00>
   10e72:	ldr	r3, [pc, #528]	; (11084 <_dtoa_r+0xdac>)
   10e74:	and.w	r2, r4, #15
   10e78:	add.w	r3, r3, r2, lsl #3
   10e7c:	ldrd	r2, r3, [r3]
   10e80:	ldrd	r0, r1, [sp, #64]	; 0x40
   10e84:	bl	afd4 <__aeabi_dmul>
   10e88:	asrs	r4, r4, #4
   10e8a:	mov	r6, r0
   10e8c:	mov	r7, r1
   10e8e:	beq.w	110be <_dtoa_r+0xde6>
   10e92:	ldr	r5, [pc, #500]	; (11088 <_dtoa_r+0xdb0>)
   10e94:	mov.w	sl, #2
   10e98:	lsls	r2, r4, #31
   10e9a:	bpl.n	10eb0 <_dtoa_r+0xbd8>
   10e9c:	mov	r0, r6
   10e9e:	mov	r1, r7
   10ea0:	ldrd	r2, r3, [r5]
   10ea4:	bl	afd4 <__aeabi_dmul>
   10ea8:	add.w	sl, sl, #1
   10eac:	mov	r6, r0
   10eae:	mov	r7, r1
   10eb0:	asrs	r4, r4, #1
   10eb2:	add.w	r5, r5, #8
   10eb6:	bne.n	10e98 <_dtoa_r+0xbc0>
   10eb8:	b.n	10998 <_dtoa_r+0x6c0>
   10eba:	ldr	r1, [r6, #4]
   10ebc:	mov	r0, r9
   10ebe:	bl	11ba0 <_Balloc>
   10ec2:	ldr	r3, [r6, #16]
   10ec4:	adds	r2, r3, #2
   10ec6:	mov	r5, r0
   10ec8:	lsls	r2, r2, #2
   10eca:	add.w	r1, r6, #12
   10ece:	adds	r0, #12
   10ed0:	bl	89a8 <memcpy>
   10ed4:	mov	r1, r5
   10ed6:	movs	r2, #1
   10ed8:	mov	r0, r9
   10eda:	bl	11f98 <__lshift>
   10ede:	mov	r8, r0
   10ee0:	b.n	10bc4 <_dtoa_r+0x8ec>
   10ee2:	cmp	r3, #57	; 0x39
   10ee4:	beq.w	11030 <_dtoa_r+0xd58>
   10ee8:	add.w	sl, r3, #1
   10eec:	mov	fp, r6
   10eee:	strb.w	sl, [r7]
   10ef2:	adds	r5, r7, #1
   10ef4:	mov	r6, r8
   10ef6:	str	r4, [sp, #40]	; 0x28
   10ef8:	b.n	10846 <_dtoa_r+0x56e>
   10efa:	mov	fp, r6
   10efc:	mov	sl, r3
   10efe:	mov	r6, r8
   10f00:	b.n	1080e <_dtoa_r+0x536>
   10f02:	movs	r3, #0
   10f04:	str	r3, [sp, #24]
   10f06:	mov	r6, r3
   10f08:	b.n	10d0e <_dtoa_r+0xa36>
   10f0a:	ldr	r3, [sp, #72]	; 0x48
   10f0c:	ldr	r1, [pc, #372]	; (11084 <_dtoa_r+0xdac>)
   10f0e:	subs	r2, r3, #1
   10f10:	add.w	r1, r1, r2, lsl #3
   10f14:	mov	r3, r5
   10f16:	str	r2, [sp, #92]	; 0x5c
   10f18:	ldrd	r0, r1, [r1]
   10f1c:	mov	r2, r4
   10f1e:	bl	afd4 <__aeabi_dmul>
   10f22:	strd	r0, r1, [sp, #80]	; 0x50
   10f26:	mov	r1, r7
   10f28:	mov	r0, r6
   10f2a:	bl	b534 <__aeabi_d2iz>
   10f2e:	mov	r4, r0
   10f30:	bl	af08 <__aeabi_i2d>
   10f34:	mov	r3, r1
   10f36:	mov	r2, r0
   10f38:	mov	r1, r7
   10f3a:	mov	r0, r6
   10f3c:	bl	ac6c <__aeabi_dsub>
   10f40:	ldr	r3, [sp, #72]	; 0x48
   10f42:	mov	r7, r1
   10f44:	ldr	r1, [sp, #36]	; 0x24
   10f46:	adds	r4, #48	; 0x30
   10f48:	cmp	r3, #1
   10f4a:	mov	r6, r0
   10f4c:	strb	r4, [r1, #0]
   10f4e:	add.w	r5, r1, #1
   10f52:	beq.n	10f96 <_dtoa_r+0xcbe>
   10f54:	ldr	r3, [sp, #72]	; 0x48
   10f56:	ldr	r2, [sp, #36]	; 0x24
   10f58:	add	r3, r2
   10f5a:	mov	sl, r3
   10f5c:	mov	fp, r5
   10f5e:	movs	r2, #0
   10f60:	ldr	r3, [pc, #296]	; (1108c <_dtoa_r+0xdb4>)
   10f62:	mov	r0, r6
   10f64:	mov	r1, r7
   10f66:	bl	afd4 <__aeabi_dmul>
   10f6a:	mov	r7, r1
   10f6c:	mov	r6, r0
   10f6e:	bl	b534 <__aeabi_d2iz>
   10f72:	mov	r4, r0
   10f74:	bl	af08 <__aeabi_i2d>
   10f78:	adds	r4, #48	; 0x30
   10f7a:	mov	r2, r0
   10f7c:	mov	r3, r1
   10f7e:	mov	r0, r6
   10f80:	mov	r1, r7
   10f82:	bl	ac6c <__aeabi_dsub>
   10f86:	strb.w	r4, [fp], #1
   10f8a:	cmp	sl, fp
   10f8c:	mov	r6, r0
   10f8e:	mov	r7, r1
   10f90:	bne.n	10f5e <_dtoa_r+0xc86>
   10f92:	ldr	r3, [sp, #92]	; 0x5c
   10f94:	add	r5, r3
   10f96:	movs	r2, #0
   10f98:	ldr	r3, [pc, #244]	; (11090 <_dtoa_r+0xdb8>)
   10f9a:	ldrd	r0, r1, [sp, #80]	; 0x50
   10f9e:	bl	ac70 <__adddf3>
   10fa2:	mov	r2, r6
   10fa4:	mov	r3, r7
   10fa6:	bl	b4b8 <__aeabi_dcmplt>
   10faa:	cmp	r0, #0
   10fac:	beq.n	11040 <_dtoa_r+0xd68>
   10fae:	ldr	r3, [sp, #88]	; 0x58
   10fb0:	str	r3, [sp, #16]
   10fb2:	ldrb.w	r4, [r5, #-1]
   10fb6:	b.w	10652 <_dtoa_r+0x37a>
   10fba:	ldr	r3, [sp, #28]
   10fbc:	ldr	r2, [sp, #32]
   10fbe:	subs	r5, r3, r2
   10fc0:	movs	r3, #0
   10fc2:	b.w	106be <_dtoa_r+0x3e6>
   10fc6:	movs	r7, #0
   10fc8:	b.n	10d60 <_dtoa_r+0xa88>
   10fca:	ldr	r3, [sp, #96]	; 0x60
   10fcc:	ldr	r7, [sp, #24]
   10fce:	ldr	r5, [sp, #28]
   10fd0:	rsb	r3, r3, #54	; 0x36
   10fd4:	b.w	106be <_dtoa_r+0x3e6>
   10fd8:	ldrd	r6, r7, [sp, #64]	; 0x40
   10fdc:	mov.w	sl, #2
   10fe0:	b.n	10998 <_dtoa_r+0x6c0>
   10fe2:	ldr	r3, [sp, #32]
   10fe4:	cmp	r3, #0
   10fe6:	beq.w	10d6c <_dtoa_r+0xa94>
   10fea:	ldr	r3, [sp, #56]	; 0x38
   10fec:	cmp	r3, #0
   10fee:	ble.w	10e4e <_dtoa_r+0xb76>
   10ff2:	movs	r2, #0
   10ff4:	ldr	r3, [pc, #148]	; (1108c <_dtoa_r+0xdb4>)
   10ff6:	mov	r0, r6
   10ff8:	mov	r1, r7
   10ffa:	bl	afd4 <__aeabi_dmul>
   10ffe:	mov	r6, r0
   11000:	mov	r7, r1
   11002:	add.w	r0, sl, #1
   11006:	bl	af08 <__aeabi_i2d>
   1100a:	mov	r2, r6
   1100c:	mov	r3, r7
   1100e:	bl	afd4 <__aeabi_dmul>
   11012:	movs	r2, #0
   11014:	ldr	r3, [pc, #100]	; (1107c <_dtoa_r+0xda4>)
   11016:	bl	ac70 <__adddf3>
   1101a:	ldr	r2, [sp, #16]
   1101c:	ldr	r3, [sp, #56]	; 0x38
   1101e:	str	r3, [sp, #72]	; 0x48
   11020:	subs	r2, #1
   11022:	mov	r4, r0
   11024:	sub.w	r5, r1, #54525952	; 0x3400000
   11028:	str	r2, [sp, #88]	; 0x58
   1102a:	b.n	109da <_dtoa_r+0x702>
   1102c:	str	r4, [sp, #40]	; 0x28
   1102e:	b.n	10b3a <_dtoa_r+0x862>
   11030:	movs	r2, #57	; 0x39
   11032:	mov	fp, r6
   11034:	str	r4, [sp, #40]	; 0x28
   11036:	mov	r6, r8
   11038:	strb	r2, [r7, #0]
   1103a:	adds	r5, r7, #1
   1103c:	b.w	1082a <_dtoa_r+0x552>
   11040:	ldrd	r2, r3, [sp, #80]	; 0x50
   11044:	movs	r0, #0
   11046:	ldr	r1, [pc, #72]	; (11090 <_dtoa_r+0xdb8>)
   11048:	bl	ac6c <__aeabi_dsub>
   1104c:	mov	r2, r6
   1104e:	mov	r3, r7
   11050:	bl	b4f4 <__aeabi_dcmpgt>
   11054:	cbnz	r0, 1105a <_dtoa_r+0xd82>
   11056:	b.n	10e4e <_dtoa_r+0xb76>
   11058:	mov	r5, r2
   1105a:	ldrb.w	r3, [r5, #-1]
   1105e:	cmp	r3, #48	; 0x30
   11060:	add.w	r2, r5, #4294967295
   11064:	beq.n	11058 <_dtoa_r+0xd80>
   11066:	b.n	10adc <_dtoa_r+0x804>
   11068:	ldr	r3, [sp, #88]	; 0x58
   1106a:	str	r3, [sp, #16]
   1106c:	b.w	10652 <_dtoa_r+0x37a>
   11070:	cmp.w	sl, #0
   11074:	bne.w	10b70 <_dtoa_r+0x898>
   11078:	b.n	10d40 <_dtoa_r+0xa68>
   1107a:	nop
   1107c:	.word	0x401c0000
   11080:	.word	0x40140000
   11084:	.word	0x00013b80
   11088:	.word	0x00013c48
   1108c:	.word	0x40240000
   11090:	.word	0x3fe00000
   11094:	cmp	r3, #57	; 0x39
   11096:	mov	fp, sl
   11098:	mov	sl, r3
   1109a:	beq.n	11030 <_dtoa_r+0xd58>
   1109c:	cmp.w	fp, #0
   110a0:	bgt.w	10e1e <_dtoa_r+0xb46>
   110a4:	b.n	10e22 <_dtoa_r+0xb4a>
   110a6:	bne.w	10e22 <_dtoa_r+0xb4a>
   110aa:	tst.w	sl, #1
   110ae:	beq.w	10e22 <_dtoa_r+0xb4a>
   110b2:	b.n	10e16 <_dtoa_r+0xb3e>
   110b4:	ldr	r3, [sp, #0]
   110b6:	cmp	r3, #2
   110b8:	bgt.n	11106 <_dtoa_r+0xe2e>
   110ba:	ldr	r3, [sp, #56]	; 0x38
   110bc:	b.n	10cda <_dtoa_r+0xa02>
   110be:	mov.w	sl, #2
   110c2:	b.n	10998 <_dtoa_r+0x6c0>
   110c4:	ldr	r3, [sp, #0]
   110c6:	cmp	r3, #2
   110c8:	bgt.n	11106 <_dtoa_r+0xe2e>
   110ca:	ldr	r3, [sp, #56]	; 0x38
   110cc:	b.n	10baa <_dtoa_r+0x8d2>
   110ce:	movs	r4, #0
   110d0:	str.w	r4, [r9, #68]	; 0x44
   110d4:	mov	r1, r4
   110d6:	mov	r0, r9
   110d8:	bl	11ba0 <_Balloc>
   110dc:	mov.w	r3, #4294967295
   110e0:	str	r3, [sp, #32]
   110e2:	str	r3, [sp, #56]	; 0x38
   110e4:	movs	r3, #1
   110e6:	str	r0, [sp, #36]	; 0x24
   110e8:	str	r4, [sp, #20]
   110ea:	str.w	r0, [r9, #64]	; 0x40
   110ee:	str	r3, [sp, #44]	; 0x2c
   110f0:	b.w	104ec <_dtoa_r+0x214>
   110f4:	beq.w	10788 <_dtoa_r+0x4b0>
   110f8:	rsb	r0, r0, #60	; 0x3c
   110fc:	b.w	1077e <_dtoa_r+0x4a6>
   11100:	movs	r6, #1
   11102:	b.w	1047e <_dtoa_r+0x1a6>
   11106:	ldr	r3, [sp, #56]	; 0x38
   11108:	str	r3, [sp, #32]
   1110a:	b.n	10cea <_dtoa_r+0xa12>

0001110c <__libc_fini_array>:
   1110c:	push	{r3, r4, r5, lr}
   1110e:	ldr	r5, [pc, #28]	; (1112c <__libc_fini_array+0x20>)
   11110:	ldr	r4, [pc, #28]	; (11130 <__libc_fini_array+0x24>)
   11112:	subs	r4, r5, r4
   11114:	asrs	r4, r4, #2
   11116:	beq.n	11124 <__libc_fini_array+0x18>
   11118:	subs	r4, #1
   1111a:	ldr.w	r3, [r5, #-4]!
   1111e:	blx	r3
   11120:	cmp	r4, #0
   11122:	bne.n	11118 <__libc_fini_array+0xc>
   11124:	ldmia.w	sp!, {r3, r4, r5, lr}
   11128:	b.w	13cdc <__init_array_end>
	...

00011134 <_malloc_trim_r>:
   11134:	push	{r3, r4, r5, r6, r7, lr}
   11136:	ldr	r7, [pc, #140]	; (111c4 <_malloc_trim_r+0x90>)
   11138:	mov	r4, r1
   1113a:	mov	r6, r0
   1113c:	bl	c258 <__malloc_lock>
   11140:	ldr	r3, [r7, #8]
   11142:	ldr	r5, [r3, #4]
   11144:	bic.w	r5, r5, #3
   11148:	subs	r1, r5, r4
   1114a:	addw	r1, r1, #4079	; 0xfef
   1114e:	bic.w	r1, r1, #4080	; 0xff0
   11152:	bic.w	r1, r1, #15
   11156:	sub.w	r4, r1, #4096	; 0x1000
   1115a:	cmp.w	r4, #4096	; 0x1000
   1115e:	blt.n	11170 <_malloc_trim_r+0x3c>
   11160:	movs	r1, #0
   11162:	mov	r0, r6
   11164:	bl	c640 <_sbrk_r>
   11168:	ldr	r3, [r7, #8]
   1116a:	add	r3, r5
   1116c:	cmp	r0, r3
   1116e:	beq.n	1117a <_malloc_trim_r+0x46>
   11170:	mov	r0, r6
   11172:	bl	c25c <__malloc_unlock>
   11176:	movs	r0, #0
   11178:	pop	{r3, r4, r5, r6, r7, pc}
   1117a:	negs	r1, r4
   1117c:	mov	r0, r6
   1117e:	bl	c640 <_sbrk_r>
   11182:	adds	r0, #1
   11184:	beq.n	111a2 <_malloc_trim_r+0x6e>
   11186:	ldr	r3, [pc, #64]	; (111c8 <_malloc_trim_r+0x94>)
   11188:	ldr	r2, [r7, #8]
   1118a:	ldr	r1, [r3, #0]
   1118c:	subs	r5, r5, r4
   1118e:	orr.w	r5, r5, #1
   11192:	mov	r0, r6
   11194:	subs	r1, r1, r4
   11196:	str	r5, [r2, #4]
   11198:	str	r1, [r3, #0]
   1119a:	bl	c25c <__malloc_unlock>
   1119e:	movs	r0, #1
   111a0:	pop	{r3, r4, r5, r6, r7, pc}
   111a2:	movs	r1, #0
   111a4:	mov	r0, r6
   111a6:	bl	c640 <_sbrk_r>
   111aa:	ldr	r2, [r7, #8]
   111ac:	subs	r3, r0, r2
   111ae:	cmp	r3, #15
   111b0:	ble.n	11170 <_malloc_trim_r+0x3c>
   111b2:	ldr	r4, [pc, #24]	; (111cc <_malloc_trim_r+0x98>)
   111b4:	ldr	r1, [pc, #16]	; (111c8 <_malloc_trim_r+0x94>)
   111b6:	ldr	r4, [r4, #0]
   111b8:	orr.w	r3, r3, #1
   111bc:	subs	r0, r0, r4
   111be:	str	r3, [r2, #4]
   111c0:	str	r0, [r1, #0]
   111c2:	b.n	11170 <_malloc_trim_r+0x3c>
   111c4:	.word	0x20013f38
   111c8:	.word	0x20019c38
   111cc:	.word	0x20014344

000111d0 <_free_r>:
   111d0:	cmp	r1, #0
   111d2:	beq.n	11260 <_free_r+0x90>
   111d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111d8:	mov	r5, r1
   111da:	mov	r8, r0
   111dc:	bl	c258 <__malloc_lock>
   111e0:	ldr.w	r7, [r5, #-4]
   111e4:	ldr	r1, [pc, #424]	; (11390 <_free_r+0x1c0>)
   111e6:	bic.w	r3, r7, #1
   111ea:	sub.w	r4, r5, #8
   111ee:	adds	r2, r4, r3
   111f0:	ldr	r6, [r1, #8]
   111f2:	ldr	r0, [r2, #4]
   111f4:	cmp	r2, r6
   111f6:	bic.w	r0, r0, #3
   111fa:	beq.n	112c2 <_free_r+0xf2>
   111fc:	lsls	r6, r7, #31
   111fe:	str	r0, [r2, #4]
   11200:	bmi.n	1121a <_free_r+0x4a>
   11202:	ldr.w	r7, [r5, #-8]
   11206:	subs	r4, r4, r7
   11208:	add.w	lr, r1, #8
   1120c:	ldr	r5, [r4, #8]
   1120e:	cmp	r5, lr
   11210:	add	r3, r7
   11212:	beq.n	112f4 <_free_r+0x124>
   11214:	ldr	r7, [r4, #12]
   11216:	str	r7, [r5, #12]
   11218:	str	r5, [r7, #8]
   1121a:	adds	r5, r2, r0
   1121c:	ldr	r5, [r5, #4]
   1121e:	lsls	r5, r5, #31
   11220:	bpl.n	112a8 <_free_r+0xd8>
   11222:	orr.w	r2, r3, #1
   11226:	str	r2, [r4, #4]
   11228:	str	r3, [r4, r3]
   1122a:	cmp.w	r3, #512	; 0x200
   1122e:	bcs.n	11262 <_free_r+0x92>
   11230:	lsrs	r3, r3, #3
   11232:	adds	r2, r3, #1
   11234:	ldr	r5, [r1, #4]
   11236:	ldr.w	r7, [r1, r2, lsl #3]
   1123a:	str	r7, [r4, #8]
   1123c:	movs	r0, #1
   1123e:	asrs	r3, r3, #2
   11240:	lsl.w	r3, r0, r3
   11244:	add.w	r0, r1, r2, lsl #3
   11248:	orrs	r5, r3
   1124a:	subs	r0, #8
   1124c:	str	r0, [r4, #12]
   1124e:	str	r5, [r1, #4]
   11250:	str.w	r4, [r1, r2, lsl #3]
   11254:	str	r4, [r7, #12]
   11256:	mov	r0, r8
   11258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1125c:	b.w	c25c <__malloc_unlock>
   11260:	bx	lr
   11262:	lsrs	r2, r3, #9
   11264:	cmp	r2, #4
   11266:	bhi.n	11310 <_free_r+0x140>
   11268:	lsrs	r2, r3, #6
   1126a:	add.w	r7, r2, #57	; 0x39
   1126e:	lsls	r7, r7, #1
   11270:	add.w	r5, r2, #56	; 0x38
   11274:	add.w	r0, r1, r7, lsl #2
   11278:	ldr.w	r2, [r1, r7, lsl #2]
   1127c:	ldr	r1, [pc, #272]	; (11390 <_free_r+0x1c0>)
   1127e:	subs	r0, #8
   11280:	cmp	r0, r2
   11282:	beq.n	11320 <_free_r+0x150>
   11284:	ldr	r1, [r2, #4]
   11286:	bic.w	r1, r1, #3
   1128a:	cmp	r3, r1
   1128c:	bcs.n	11294 <_free_r+0xc4>
   1128e:	ldr	r2, [r2, #8]
   11290:	cmp	r0, r2
   11292:	bne.n	11284 <_free_r+0xb4>
   11294:	ldr	r0, [r2, #12]
   11296:	str	r0, [r4, #12]
   11298:	str	r2, [r4, #8]
   1129a:	str	r4, [r0, #8]
   1129c:	str	r4, [r2, #12]
   1129e:	mov	r0, r8
   112a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   112a4:	b.w	c25c <__malloc_unlock>
   112a8:	ldr	r5, [r2, #8]
   112aa:	ldr	r7, [pc, #232]	; (11394 <_free_r+0x1c4>)
   112ac:	cmp	r5, r7
   112ae:	add	r3, r0
   112b0:	beq.n	11332 <_free_r+0x162>
   112b2:	ldr	r0, [r2, #12]
   112b4:	str	r0, [r5, #12]
   112b6:	orr.w	r2, r3, #1
   112ba:	str	r5, [r0, #8]
   112bc:	str	r2, [r4, #4]
   112be:	str	r3, [r4, r3]
   112c0:	b.n	1122a <_free_r+0x5a>
   112c2:	lsls	r7, r7, #31
   112c4:	add	r3, r0
   112c6:	bmi.n	112d8 <_free_r+0x108>
   112c8:	ldr.w	r2, [r5, #-8]
   112cc:	subs	r4, r4, r2
   112ce:	add	r3, r2
   112d0:	ldr	r0, [r4, #8]
   112d2:	ldr	r2, [r4, #12]
   112d4:	str	r2, [r0, #12]
   112d6:	str	r0, [r2, #8]
   112d8:	ldr	r2, [pc, #188]	; (11398 <_free_r+0x1c8>)
   112da:	ldr	r2, [r2, #0]
   112dc:	orr.w	r0, r3, #1
   112e0:	cmp	r3, r2
   112e2:	str	r0, [r4, #4]
   112e4:	str	r4, [r1, #8]
   112e6:	bcc.n	11256 <_free_r+0x86>
   112e8:	ldr	r3, [pc, #176]	; (1139c <_free_r+0x1cc>)
   112ea:	mov	r0, r8
   112ec:	ldr	r1, [r3, #0]
   112ee:	bl	11134 <_malloc_trim_r>
   112f2:	b.n	11256 <_free_r+0x86>
   112f4:	adds	r1, r2, r0
   112f6:	ldr	r1, [r1, #4]
   112f8:	lsls	r1, r1, #31
   112fa:	bmi.n	11386 <_free_r+0x1b6>
   112fc:	ldr	r1, [r2, #8]
   112fe:	ldr	r2, [r2, #12]
   11300:	str	r2, [r1, #12]
   11302:	add	r3, r0
   11304:	orr.w	r0, r3, #1
   11308:	str	r1, [r2, #8]
   1130a:	str	r0, [r4, #4]
   1130c:	str	r3, [r4, r3]
   1130e:	b.n	11256 <_free_r+0x86>
   11310:	cmp	r2, #20
   11312:	bhi.n	11344 <_free_r+0x174>
   11314:	add.w	r7, r2, #92	; 0x5c
   11318:	lsls	r7, r7, #1
   1131a:	add.w	r5, r2, #91	; 0x5b
   1131e:	b.n	11274 <_free_r+0xa4>
   11320:	asrs	r2, r5, #2
   11322:	ldr	r3, [r1, #4]
   11324:	movs	r5, #1
   11326:	lsl.w	r2, r5, r2
   1132a:	orrs	r3, r2
   1132c:	str	r3, [r1, #4]
   1132e:	mov	r2, r0
   11330:	b.n	11296 <_free_r+0xc6>
   11332:	orr.w	r2, r3, #1
   11336:	str	r4, [r1, #20]
   11338:	str	r4, [r1, #16]
   1133a:	str	r5, [r4, #12]
   1133c:	str	r5, [r4, #8]
   1133e:	str	r2, [r4, #4]
   11340:	str	r3, [r4, r3]
   11342:	b.n	11256 <_free_r+0x86>
   11344:	cmp	r2, #84	; 0x54
   11346:	bhi.n	11356 <_free_r+0x186>
   11348:	lsrs	r2, r3, #12
   1134a:	add.w	r7, r2, #111	; 0x6f
   1134e:	lsls	r7, r7, #1
   11350:	add.w	r5, r2, #110	; 0x6e
   11354:	b.n	11274 <_free_r+0xa4>
   11356:	cmp.w	r2, #340	; 0x154
   1135a:	bhi.n	1136a <_free_r+0x19a>
   1135c:	lsrs	r2, r3, #15
   1135e:	add.w	r7, r2, #120	; 0x78
   11362:	lsls	r7, r7, #1
   11364:	add.w	r5, r2, #119	; 0x77
   11368:	b.n	11274 <_free_r+0xa4>
   1136a:	movw	r0, #1364	; 0x554
   1136e:	cmp	r2, r0
   11370:	bhi.n	11380 <_free_r+0x1b0>
   11372:	lsrs	r2, r3, #18
   11374:	add.w	r7, r2, #125	; 0x7d
   11378:	lsls	r7, r7, #1
   1137a:	add.w	r5, r2, #124	; 0x7c
   1137e:	b.n	11274 <_free_r+0xa4>
   11380:	movs	r7, #254	; 0xfe
   11382:	movs	r5, #126	; 0x7e
   11384:	b.n	11274 <_free_r+0xa4>
   11386:	orr.w	r2, r3, #1
   1138a:	str	r2, [r4, #4]
   1138c:	str	r3, [r4, r3]
   1138e:	b.n	11256 <_free_r+0x86>
   11390:	.word	0x20013f38
   11394:	.word	0x20013f40
   11398:	.word	0x20014340
   1139c:	.word	0x20019c34

000113a0 <rshift>:
   113a0:	ldr	r2, [r0, #16]
   113a2:	asrs	r3, r1, #5
   113a4:	cmp	r3, r2
   113a6:	bge.n	11406 <rshift+0x66>
   113a8:	push	{r4, r5, r6, r7, lr}
   113aa:	ands.w	r1, r1, #31
   113ae:	add.w	r6, r0, #20
   113b2:	add.w	r2, r6, r2, lsl #2
   113b6:	add.w	lr, r6, r3, lsl #2
   113ba:	beq.n	11410 <rshift+0x70>
   113bc:	ldr.w	r3, [r6, r3, lsl #2]
   113c0:	add.w	r5, lr, #4
   113c4:	cmp	r2, r5
   113c6:	lsr.w	r4, r3, r1
   113ca:	rsb	ip, r1, #32
   113ce:	bls.n	11444 <rshift+0xa4>
   113d0:	add.w	r7, r0, #16
   113d4:	ldr	r3, [r5, #0]
   113d6:	lsl.w	r3, r3, ip
   113da:	orrs	r3, r4
   113dc:	str.w	r3, [r7, #4]!
   113e0:	ldr.w	r3, [r5], #4
   113e4:	cmp	r2, r5
   113e6:	lsr.w	r4, r3, r1
   113ea:	bhi.n	113d4 <rshift+0x34>
   113ec:	rsb	r2, lr, r2
   113f0:	subs	r2, #5
   113f2:	bic.w	r2, r2, #3
   113f6:	adds	r2, #4
   113f8:	add	r2, r6
   113fa:	str	r4, [r2, #0]
   113fc:	cbz	r4, 11400 <rshift+0x60>
   113fe:	adds	r2, #4
   11400:	subs	r3, r2, r6
   11402:	asrs	r3, r3, #2
   11404:	b.n	11434 <rshift+0x94>
   11406:	movs	r3, #0
   11408:	str	r3, [r0, #16]
   1140a:	movs	r3, #0
   1140c:	str	r3, [r0, #20]
   1140e:	bx	lr
   11410:	cmp	r2, lr
   11412:	bls.n	1143a <rshift+0x9a>
   11414:	add.w	r4, r0, #16
   11418:	mov	r1, lr
   1141a:	ldr.w	r5, [r1], #4
   1141e:	str.w	r5, [r4, #4]!
   11422:	cmp	r2, r1
   11424:	bhi.n	1141a <rshift+0x7a>
   11426:	mvn.w	r3, lr
   1142a:	add	r3, r2
   1142c:	bic.w	r3, r3, #3
   11430:	adds	r3, #4
   11432:	asrs	r3, r3, #2
   11434:	str	r3, [r0, #16]
   11436:	cbz	r3, 1143e <rshift+0x9e>
   11438:	pop	{r4, r5, r6, r7, pc}
   1143a:	movs	r3, #0
   1143c:	str	r3, [r0, #16]
   1143e:	movs	r3, #0
   11440:	str	r3, [r0, #20]
   11442:	pop	{r4, r5, r6, r7, pc}
   11444:	mov	r2, r6
   11446:	b.n	113fa <rshift+0x5a>

00011448 <__gethex>:
   11448:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1144c:	sub	sp, #44	; 0x2c
   1144e:	mov	r9, r1
   11450:	str	r0, [sp, #20]
   11452:	ldr	r0, [sp, #88]	; 0x58
   11454:	str	r2, [sp, #12]
   11456:	str	r3, [sp, #32]
   11458:	bl	11b24 <__localeconv_l>
   1145c:	ldr	r3, [r0, #0]
   1145e:	str	r3, [sp, #8]
   11460:	mov	r0, r3
   11462:	mov	r4, r3
   11464:	bl	c8c0 <strlen>
   11468:	ldr.w	r3, [r9]
   1146c:	str	r0, [sp, #0]
   1146e:	ldrb	r2, [r3, #2]
   11470:	adds	r1, r4, r0
   11472:	cmp	r2, #48	; 0x30
   11474:	ldrb.w	fp, [r1, #-1]
   11478:	bne.w	117ce <__gethex+0x386>
   1147c:	adds	r3, #3
   1147e:	mov.w	r8, #0
   11482:	mov	r4, r3
   11484:	ldrb.w	r2, [r3], #1
   11488:	cmp	r2, #48	; 0x30
   1148a:	add.w	r8, r8, #1
   1148e:	beq.n	11482 <__gethex+0x3a>
   11490:	ldr	r6, [pc, #712]	; (1175c <__gethex+0x314>)
   11492:	ldrb	r3, [r6, r2]
   11494:	cmp	r3, #0
   11496:	beq.w	1167a <__gethex+0x232>
   1149a:	ldrb	r3, [r4, #0]
   1149c:	mov.w	sl, #0
   114a0:	ldrb	r3, [r6, r3]
   114a2:	mov	r5, sl
   114a4:	mov	r7, r4
   114a6:	cbz	r3, 114b2 <__gethex+0x6a>
   114a8:	ldrb.w	r3, [r7, #1]!
   114ac:	ldrb	r3, [r6, r3]
   114ae:	cmp	r3, #0
   114b0:	bne.n	114a8 <__gethex+0x60>
   114b2:	ldr	r2, [sp, #0]
   114b4:	ldr	r1, [sp, #8]
   114b6:	mov	r0, r7
   114b8:	bl	c99c <strncmp>
   114bc:	cmp	r0, #0
   114be:	beq.w	115e6 <__gethex+0x19e>
   114c2:	ldrb	r3, [r7, #0]
   114c4:	cmp	r5, #0
   114c6:	beq.w	117ac <__gethex+0x364>
   114ca:	subs	r5, r5, r7
   114cc:	lsls	r2, r5, #2
   114ce:	str	r2, [sp, #4]
   114d0:	cmp	r3, #80	; 0x50
   114d2:	beq.w	115f8 <__gethex+0x1b0>
   114d6:	cmp	r3, #112	; 0x70
   114d8:	beq.w	115f8 <__gethex+0x1b0>
   114dc:	mov	r5, r7
   114de:	str.w	r7, [r9]
   114e2:	cmp.w	sl, #0
   114e6:	bne.w	11658 <__gethex+0x210>
   114ea:	subs	r3, r5, r4
   114ec:	subs	r3, #1
   114ee:	cmp	r3, #7
   114f0:	mov	r1, sl
   114f2:	ble.n	114fe <__gethex+0xb6>
   114f4:	asrs	r3, r3, #1
   114f6:	cmp	r3, #7
   114f8:	add.w	r1, r1, #1
   114fc:	bgt.n	114f4 <__gethex+0xac>
   114fe:	ldr	r0, [sp, #20]
   11500:	bl	11ba0 <_Balloc>
   11504:	mov	r3, r0
   11506:	adds	r3, #20
   11508:	cmp	r5, r4
   1150a:	str	r0, [sp, #16]
   1150c:	str	r3, [sp, #28]
   1150e:	bls.w	118b8 <__gethex+0x470>
   11512:	mov	r9, r3
   11514:	ldr	r3, [sp, #0]
   11516:	mov.w	r8, #0
   1151a:	rsb	r3, r3, #1
   1151e:	mov	r7, r8
   11520:	str	r3, [sp, #24]
   11522:	b.n	11544 <__gethex+0xfc>
   11524:	cmp	r7, #32
   11526:	beq.w	11668 <__gethex+0x220>
   1152a:	mov	r2, r7
   1152c:	adds	r7, #4
   1152e:	ldrb.w	r3, [r5, #-1]
   11532:	ldrb	r3, [r6, r3]
   11534:	mov	r5, sl
   11536:	and.w	r3, r3, #15
   1153a:	lsls	r3, r2
   1153c:	cmp	r5, r4
   1153e:	orr.w	r8, r8, r3
   11542:	bls.n	11570 <__gethex+0x128>
   11544:	ldrb.w	r3, [r5, #-1]
   11548:	cmp	r3, fp
   1154a:	add.w	sl, r5, #4294967295
   1154e:	bne.n	11524 <__gethex+0xdc>
   11550:	ldr	r3, [sp, #24]
   11552:	add	r3, sl
   11554:	cmp	r3, r4
   11556:	bcc.n	11524 <__gethex+0xdc>
   11558:	mov	r0, r3
   1155a:	ldr	r2, [sp, #0]
   1155c:	ldr	r1, [sp, #8]
   1155e:	str	r3, [sp, #36]	; 0x24
   11560:	bl	c99c <strncmp>
   11564:	ldr	r3, [sp, #36]	; 0x24
   11566:	cmp	r0, #0
   11568:	bne.n	11524 <__gethex+0xdc>
   1156a:	mov	r5, r3
   1156c:	cmp	r5, r4
   1156e:	bhi.n	11544 <__gethex+0xfc>
   11570:	str.w	r8, [r9], #4
   11574:	ldr	r3, [sp, #28]
   11576:	ldr	r2, [sp, #16]
   11578:	rsb	r9, r3, r9
   1157c:	mov.w	r3, r9, asr #2
   11580:	str	r3, [r2, #16]
   11582:	mov	r0, r8
   11584:	mov.w	r9, r3, lsl #5
   11588:	bl	11d18 <__hi0bits>
   1158c:	ldr	r3, [sp, #12]
   1158e:	ldr	r6, [r3, #0]
   11590:	rsb	r0, r0, r9
   11594:	cmp	r0, r6
   11596:	bgt.w	11760 <__gethex+0x318>
   1159a:	blt.w	117b0 <__gethex+0x368>
   1159e:	movs	r7, #0
   115a0:	ldr	r3, [sp, #12]
   115a2:	ldr	r2, [sp, #4]
   115a4:	ldr	r3, [r3, #8]
   115a6:	cmp	r2, r3
   115a8:	bgt.w	116da <__gethex+0x292>
   115ac:	ldr	r0, [sp, #12]
   115ae:	ldr	r1, [sp, #4]
   115b0:	ldr	r3, [r0, #4]
   115b2:	cmp	r1, r3
   115b4:	bge.w	11722 <__gethex+0x2da>
   115b8:	subs	r5, r3, r1
   115ba:	cmp	r6, r5
   115bc:	bgt.w	117de <__gethex+0x396>
   115c0:	ldr	r2, [r0, #12]
   115c2:	cmp	r2, #2
   115c4:	beq.w	118c6 <__gethex+0x47e>
   115c8:	cmp	r2, #3
   115ca:	beq.w	11886 <__gethex+0x43e>
   115ce:	cmp	r2, #1
   115d0:	beq.w	118ce <__gethex+0x486>
   115d4:	ldr	r0, [sp, #20]
   115d6:	ldr	r1, [sp, #16]
   115d8:	bl	11bec <_Bfree>
   115dc:	ldr	r2, [sp, #80]	; 0x50
   115de:	movs	r3, #0
   115e0:	str	r3, [r2, #0]
   115e2:	movs	r0, #80	; 0x50
   115e4:	b.n	11662 <__gethex+0x21a>
   115e6:	cmp	r5, #0
   115e8:	beq.w	1181e <__gethex+0x3d6>
   115ec:	ldrb	r3, [r7, #0]
   115ee:	b.n	114ca <__gethex+0x82>
   115f0:	movs	r3, #0
   115f2:	str	r3, [sp, #4]
   115f4:	mov.w	sl, #1
   115f8:	ldrb	r3, [r7, #1]
   115fa:	cmp	r3, #43	; 0x2b
   115fc:	beq.w	11758 <__gethex+0x310>
   11600:	cmp	r3, #45	; 0x2d
   11602:	beq.n	116f0 <__gethex+0x2a8>
   11604:	adds	r1, r7, #1
   11606:	movs	r5, #0
   11608:	ldrb	r3, [r6, r3]
   1160a:	ldr	r0, [pc, #336]	; (1175c <__gethex+0x314>)
   1160c:	subs	r2, r3, #1
   1160e:	cmp	r2, #24
   11610:	bhi.w	114dc <__gethex+0x94>
   11614:	ldrb	r2, [r1, #1]
   11616:	ldrb	r2, [r0, r2]
   11618:	subs	r0, r2, #1
   1161a:	cmp	r0, #24
   1161c:	sub.w	r3, r3, #16
   11620:	add.w	r1, r1, #1
   11624:	bhi.n	1163e <__gethex+0x1f6>
   11626:	ldrb.w	r0, [r1, #1]!
   1162a:	add.w	r3, r3, r3, lsl #2
   1162e:	add.w	r3, r2, r3, lsl #1
   11632:	ldrb	r2, [r6, r0]
   11634:	subs	r0, r2, #1
   11636:	cmp	r0, #24
   11638:	sub.w	r3, r3, #16
   1163c:	bls.n	11626 <__gethex+0x1de>
   1163e:	cbz	r5, 11642 <__gethex+0x1fa>
   11640:	negs	r3, r3
   11642:	ldr	r2, [sp, #4]
   11644:	mov	r5, r7
   11646:	add	r2, r3
   11648:	mov	r7, r1
   1164a:	str	r2, [sp, #4]
   1164c:	str.w	r7, [r9]
   11650:	cmp.w	sl, #0
   11654:	beq.w	114ea <__gethex+0xa2>
   11658:	cmp.w	r8, #0
   1165c:	ite	eq
   1165e:	moveq	r0, #6
   11660:	movne	r0, #0
   11662:	add	sp, #44	; 0x2c
   11664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11668:	str.w	r8, [r9]
   1166c:	mov.w	r8, #0
   11670:	add.w	r9, r9, #4
   11674:	mov	r2, r8
   11676:	movs	r7, #4
   11678:	b.n	1152e <__gethex+0xe6>
   1167a:	ldr	r5, [sp, #0]
   1167c:	ldr	r1, [sp, #8]
   1167e:	mov	r2, r5
   11680:	mov	r0, r4
   11682:	bl	c99c <strncmp>
   11686:	cmp	r0, #0
   11688:	beq.n	116f8 <__gethex+0x2b0>
   1168a:	ldrb	r3, [r4, #0]
   1168c:	mov	r7, r4
   1168e:	cmp	r3, #80	; 0x50
   11690:	beq.n	115f0 <__gethex+0x1a8>
   11692:	cmp	r3, #112	; 0x70
   11694:	beq.n	115f0 <__gethex+0x1a8>
   11696:	str.w	r7, [r9]
   1169a:	b.n	11658 <__gethex+0x210>
   1169c:	ldr	r3, [sp, #16]
   1169e:	ldr	r3, [r3, #8]
   116a0:	cmp	r7, r3
   116a2:	bge.w	1190e <__gethex+0x4c6>
   116a6:	mov	r3, r7
   116a8:	ldr	r0, [sp, #16]
   116aa:	add.w	r2, r0, r3, lsl #2
   116ae:	movs	r1, #1
   116b0:	adds	r3, #1
   116b2:	cmp	r4, #2
   116b4:	str	r3, [r0, #16]
   116b6:	str	r1, [r2, #20]
   116b8:	beq.w	118ec <__gethex+0x4a4>
   116bc:	cmp	r7, r3
   116be:	bge.w	11878 <__gethex+0x430>
   116c2:	movs	r1, #1
   116c4:	ldr	r0, [sp, #16]
   116c6:	bl	113a0 <rshift>
   116ca:	ldr	r3, [sp, #12]
   116cc:	ldr	r2, [sp, #4]
   116ce:	ldr	r3, [r3, #8]
   116d0:	adds	r2, #1
   116d2:	cmp	r2, r3
   116d4:	str	r2, [sp, #4]
   116d6:	ble.w	1187e <__gethex+0x436>
   116da:	ldr	r0, [sp, #20]
   116dc:	ldr	r1, [sp, #16]
   116de:	bl	11bec <_Bfree>
   116e2:	ldr	r2, [sp, #80]	; 0x50
   116e4:	movs	r3, #0
   116e6:	movs	r0, #163	; 0xa3
   116e8:	str	r3, [r2, #0]
   116ea:	add	sp, #44	; 0x2c
   116ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116f0:	movs	r5, #1
   116f2:	ldrb	r3, [r7, #2]
   116f4:	adds	r1, r7, #2
   116f6:	b.n	11608 <__gethex+0x1c0>
   116f8:	ldrb	r2, [r4, r5]
   116fa:	ldrb	r3, [r6, r2]
   116fc:	adds	r7, r4, r5
   116fe:	cmp	r3, #0
   11700:	beq.n	117d6 <__gethex+0x38e>
   11702:	cmp	r2, #48	; 0x30
   11704:	mov	r4, r7
   11706:	bne.n	11712 <__gethex+0x2ca>
   11708:	ldrb.w	r3, [r4, #1]!
   1170c:	cmp	r3, #48	; 0x30
   1170e:	beq.n	11708 <__gethex+0x2c0>
   11710:	ldrb	r3, [r6, r3]
   11712:	clz	sl, r3
   11716:	mov	r5, r7
   11718:	mov.w	sl, sl, lsr #5
   1171c:	mov.w	r8, #1
   11720:	b.n	114a4 <__gethex+0x5c>
   11722:	movs	r4, #1
   11724:	cbz	r7, 11740 <__gethex+0x2f8>
   11726:	ldr	r3, [sp, #12]
   11728:	ldr	r3, [r3, #12]
   1172a:	cmp	r3, #2
   1172c:	beq.w	1183a <__gethex+0x3f2>
   11730:	cmp	r3, #3
   11732:	beq.w	11842 <__gethex+0x3fa>
   11736:	cmp	r3, #1
   11738:	beq.w	118a6 <__gethex+0x45e>
   1173c:	orr.w	r4, r4, #16
   11740:	ldr	r3, [sp, #80]	; 0x50
   11742:	mov	r2, r3
   11744:	ldr	r3, [sp, #16]
   11746:	str	r3, [r2, #0]
   11748:	ldr	r3, [sp, #32]
   1174a:	mov	r2, r3
   1174c:	ldr	r3, [sp, #4]
   1174e:	str	r3, [r2, #0]
   11750:	mov	r0, r4
   11752:	add	sp, #44	; 0x2c
   11754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11758:	movs	r5, #0
   1175a:	b.n	116f2 <__gethex+0x2aa>
   1175c:	.word	0x00013a7c
   11760:	subs	r4, r0, r6
   11762:	mov	r1, r4
   11764:	ldr	r0, [sp, #16]
   11766:	bl	12428 <__any_on>
   1176a:	cmp	r0, #0
   1176c:	beq.n	117da <__gethex+0x392>
   1176e:	subs	r2, r4, #1
   11770:	asrs	r1, r2, #5
   11772:	ldr	r0, [sp, #28]
   11774:	and.w	r3, r2, #31
   11778:	ldr.w	r1, [r0, r1, lsl #2]
   1177c:	movs	r7, #1
   1177e:	lsl.w	r3, r7, r3
   11782:	tst	r3, r1
   11784:	beq.n	1179c <__gethex+0x354>
   11786:	cmp	r2, r7
   11788:	ble.w	118c2 <__gethex+0x47a>
   1178c:	subs	r1, r4, #2
   1178e:	ldr	r0, [sp, #16]
   11790:	bl	12428 <__any_on>
   11794:	cmp	r0, #0
   11796:	beq.w	118c2 <__gethex+0x47a>
   1179a:	movs	r7, #3
   1179c:	ldr	r3, [sp, #4]
   1179e:	ldr	r0, [sp, #16]
   117a0:	add	r3, r4
   117a2:	mov	r1, r4
   117a4:	str	r3, [sp, #4]
   117a6:	bl	113a0 <rshift>
   117aa:	b.n	115a0 <__gethex+0x158>
   117ac:	str	r5, [sp, #4]
   117ae:	b.n	114d0 <__gethex+0x88>
   117b0:	subs	r4, r6, r0
   117b2:	ldr	r1, [sp, #16]
   117b4:	ldr	r0, [sp, #20]
   117b6:	mov	r2, r4
   117b8:	bl	11f98 <__lshift>
   117bc:	ldr	r3, [sp, #4]
   117be:	str	r0, [sp, #16]
   117c0:	subs	r3, r3, r4
   117c2:	str	r3, [sp, #4]
   117c4:	mov	r3, r0
   117c6:	adds	r3, #20
   117c8:	str	r3, [sp, #28]
   117ca:	movs	r7, #0
   117cc:	b.n	115a0 <__gethex+0x158>
   117ce:	adds	r4, r3, #2
   117d0:	mov.w	r8, #0
   117d4:	b.n	11490 <__gethex+0x48>
   117d6:	mov	r3, r2
   117d8:	b.n	1168e <__gethex+0x246>
   117da:	mov	r7, r0
   117dc:	b.n	1179c <__gethex+0x354>
   117de:	subs	r4, r5, #1
   117e0:	cmp	r7, #0
   117e2:	bne.n	11882 <__gethex+0x43a>
   117e4:	cbz	r4, 117f0 <__gethex+0x3a8>
   117e6:	mov	r1, r4
   117e8:	ldr	r0, [sp, #16]
   117ea:	bl	12428 <__any_on>
   117ee:	mov	r7, r0
   117f0:	asrs	r3, r4, #5
   117f2:	ldr	r2, [sp, #28]
   117f4:	ldr	r0, [sp, #16]
   117f6:	ldr.w	r2, [r2, r3, lsl #2]
   117fa:	and.w	r4, r4, #31
   117fe:	movs	r3, #1
   11800:	lsl.w	r4, r3, r4
   11804:	tst	r4, r2
   11806:	mov	r1, r5
   11808:	it	ne
   1180a:	orrne.w	r7, r7, #2
   1180e:	bl	113a0 <rshift>
   11812:	ldr	r3, [sp, #12]
   11814:	ldr	r3, [r3, #4]
   11816:	str	r3, [sp, #4]
   11818:	subs	r6, r6, r5
   1181a:	movs	r4, #2
   1181c:	b.n	11724 <__gethex+0x2dc>
   1181e:	ldr	r1, [sp, #0]
   11820:	ldrb	r3, [r7, r1]
   11822:	ldrb	r2, [r6, r3]
   11824:	adds	r5, r7, r1
   11826:	mov	r7, r5
   11828:	cmp	r2, #0
   1182a:	beq.w	114ca <__gethex+0x82>
   1182e:	ldrb.w	r3, [r7, #1]!
   11832:	ldrb	r2, [r6, r3]
   11834:	cmp	r2, #0
   11836:	bne.n	1182e <__gethex+0x3e6>
   11838:	b.n	114ca <__gethex+0x82>
   1183a:	ldr	r3, [sp, #84]	; 0x54
   1183c:	rsb	r3, r3, #1
   11840:	str	r3, [sp, #84]	; 0x54
   11842:	ldr	r3, [sp, #84]	; 0x54
   11844:	cmp	r3, #0
   11846:	beq.w	1173c <__gethex+0x2f4>
   1184a:	ldr	r3, [sp, #16]
   1184c:	ldr	r5, [sp, #28]
   1184e:	ldr	r7, [r3, #16]
   11850:	mov.w	r8, r7, lsl #2
   11854:	add.w	r0, r5, r8
   11858:	mov	r3, r5
   1185a:	movs	r1, #0
   1185c:	b.n	11868 <__gethex+0x420>
   1185e:	str.w	r1, [r3], #4
   11862:	cmp	r0, r3
   11864:	bls.w	1169c <__gethex+0x254>
   11868:	ldr	r2, [r3, #0]
   1186a:	cmp.w	r2, #4294967295
   1186e:	beq.n	1185e <__gethex+0x416>
   11870:	adds	r2, #1
   11872:	cmp	r4, #2
   11874:	str	r2, [r3, #0]
   11876:	beq.n	118ec <__gethex+0x4a4>
   11878:	ands.w	r6, r6, #31
   1187c:	bne.n	118fa <__gethex+0x4b2>
   1187e:	movs	r4, #33	; 0x21
   11880:	b.n	11740 <__gethex+0x2f8>
   11882:	movs	r7, #1
   11884:	b.n	117f0 <__gethex+0x3a8>
   11886:	ldr	r2, [sp, #84]	; 0x54
   11888:	cmp	r2, #0
   1188a:	beq.w	115d4 <__gethex+0x18c>
   1188e:	ldr	r1, [sp, #32]
   11890:	str	r3, [r1, #0]
   11892:	ldr	r3, [sp, #28]
   11894:	ldr	r1, [sp, #16]
   11896:	movs	r2, #1
   11898:	str	r2, [r1, #16]
   1189a:	str	r2, [r3, #0]
   1189c:	ldr	r3, [sp, #80]	; 0x50
   1189e:	mov	r2, r3
   118a0:	movs	r0, #98	; 0x62
   118a2:	str	r1, [r2, #0]
   118a4:	b.n	11662 <__gethex+0x21a>
   118a6:	lsls	r2, r7, #30
   118a8:	bpl.w	1173c <__gethex+0x2f4>
   118ac:	ldr	r3, [sp, #28]
   118ae:	ldr	r3, [r3, #0]
   118b0:	orrs	r3, r7
   118b2:	lsls	r3, r3, #31
   118b4:	bmi.n	1184a <__gethex+0x402>
   118b6:	b.n	1173c <__gethex+0x2f4>
   118b8:	ldr.w	r9, [sp, #28]
   118bc:	mov.w	r8, #0
   118c0:	b.n	11570 <__gethex+0x128>
   118c2:	movs	r7, #2
   118c4:	b.n	1179c <__gethex+0x354>
   118c6:	ldr	r2, [sp, #84]	; 0x54
   118c8:	cmp	r2, #0
   118ca:	beq.n	1188e <__gethex+0x446>
   118cc:	b.n	115d4 <__gethex+0x18c>
   118ce:	cmp	r6, r5
   118d0:	bne.w	115d4 <__gethex+0x18c>
   118d4:	cmp	r6, #1
   118d6:	ble.n	1188e <__gethex+0x446>
   118d8:	subs	r1, r6, #1
   118da:	ldr	r0, [sp, #16]
   118dc:	bl	12428 <__any_on>
   118e0:	cmp	r0, #0
   118e2:	beq.w	115d4 <__gethex+0x18c>
   118e6:	ldr	r3, [sp, #12]
   118e8:	ldr	r3, [r3, #4]
   118ea:	b.n	1188e <__gethex+0x446>
   118ec:	ldr	r3, [sp, #12]
   118ee:	ldr	r3, [r3, #0]
   118f0:	subs	r3, #1
   118f2:	cmp	r6, r3
   118f4:	beq.n	11940 <__gethex+0x4f8>
   118f6:	movs	r4, #34	; 0x22
   118f8:	b.n	11740 <__gethex+0x2f8>
   118fa:	add	r5, r8
   118fc:	rsb	r6, r6, #32
   11900:	ldr.w	r0, [r5, #-4]
   11904:	bl	11d18 <__hi0bits>
   11908:	cmp	r0, r6
   1190a:	bge.n	1187e <__gethex+0x436>
   1190c:	b.n	116c2 <__gethex+0x27a>
   1190e:	ldr	r3, [sp, #16]
   11910:	ldr.w	r9, [sp, #20]
   11914:	ldr	r1, [r3, #4]
   11916:	mov	r0, r9
   11918:	adds	r1, #1
   1191a:	bl	11ba0 <_Balloc>
   1191e:	ldr	r1, [sp, #16]
   11920:	ldr	r3, [r1, #16]
   11922:	adds	r2, r3, #2
   11924:	mov	r5, r0
   11926:	lsls	r2, r2, #2
   11928:	adds	r1, #12
   1192a:	adds	r0, #12
   1192c:	bl	89a8 <memcpy>
   11930:	ldr	r1, [sp, #16]
   11932:	mov	r0, r9
   11934:	bl	11bec <_Bfree>
   11938:	str	r5, [sp, #16]
   1193a:	ldr	r3, [r5, #16]
   1193c:	adds	r5, #20
   1193e:	b.n	116a8 <__gethex+0x260>
   11940:	asrs	r3, r6, #5
   11942:	and.w	r6, r6, #31
   11946:	ldr.w	r2, [r5, r3, lsl #2]
   1194a:	movs	r3, #1
   1194c:	lsls	r3, r6
   1194e:	tst	r3, r2
   11950:	ite	ne
   11952:	movne	r4, #33	; 0x21
   11954:	moveq	r4, #34	; 0x22
   11956:	b.n	11740 <__gethex+0x2f8>

00011958 <__match>:
   11958:	push	{r4, r5}
   1195a:	ldr	r4, [r0, #0]
   1195c:	b.n	11970 <__match+0x18>
   1195e:	ldrb.w	r3, [r4, #1]!
   11962:	sub.w	r5, r3, #65	; 0x41
   11966:	cmp	r5, #25
   11968:	it	ls
   1196a:	addls	r3, #32
   1196c:	cmp	r3, r2
   1196e:	bne.n	11982 <__match+0x2a>
   11970:	ldrb.w	r2, [r1], #1
   11974:	cmp	r2, #0
   11976:	bne.n	1195e <__match+0x6>
   11978:	adds	r4, #1
   1197a:	str	r4, [r0, #0]
   1197c:	movs	r0, #1
   1197e:	pop	{r4, r5}
   11980:	bx	lr
   11982:	movs	r0, #0
   11984:	pop	{r4, r5}
   11986:	bx	lr

00011988 <__hexnan>:
   11988:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1198c:	ldr	r3, [r1, #0]
   1198e:	ldr.w	r9, [pc, #372]	; 11b04 <__hexnan+0x17c>
   11992:	sub	sp, #20
   11994:	asrs	r1, r3, #5
   11996:	add.w	r1, r2, r1, lsl #2
   1199a:	ands.w	r3, r3, #31
   1199e:	str	r1, [sp, #4]
   119a0:	itt	ne
   119a2:	addne	r1, #4
   119a4:	strne	r1, [sp, #4]
   119a6:	ldr	r4, [sp, #4]
   119a8:	str	r0, [sp, #8]
   119aa:	str	r3, [sp, #12]
   119ac:	movs	r3, #0
   119ae:	mov	r1, r3
   119b0:	str.w	r3, [r4, #-4]
   119b4:	mov	sl, r3
   119b6:	mov	lr, r3
   119b8:	ldr	r3, [sp, #8]
   119ba:	sub.w	ip, r4, #4
   119be:	ldr	r5, [r3, #0]
   119c0:	mov	r8, ip
   119c2:	mov	r0, ip
   119c4:	ldrb.w	r3, [r5, #1]!
   119c8:	cbz	r3, 11a14 <__hexnan+0x8c>
   119ca:	ldrb.w	r4, [r9, r3]
   119ce:	cmp	r4, #0
   119d0:	bne.n	11a5a <__hexnan+0xd2>
   119d2:	cmp	r3, #32
   119d4:	bhi.n	11a92 <__hexnan+0x10a>
   119d6:	cmp	lr, sl
   119d8:	ble.n	119c4 <__hexnan+0x3c>
   119da:	cmp	r0, r8
   119dc:	bcs.n	11a06 <__hexnan+0x7e>
   119de:	cmp	r1, #7
   119e0:	bgt.n	11a06 <__hexnan+0x7e>
   119e2:	rsb	r1, r1, #8
   119e6:	lsls	r1, r1, #2
   119e8:	ldr	r6, [r0, #0]
   119ea:	rsb	fp, r1, #32
   119ee:	mov	r3, r0
   119f0:	ldr	r7, [r3, #4]
   119f2:	lsl.w	r4, r7, fp
   119f6:	orrs	r4, r6
   119f8:	lsr.w	r6, r7, r1
   119fc:	str	r4, [r3, #0]
   119fe:	str.w	r6, [r3, #4]!
   11a02:	cmp	r8, r3
   11a04:	bhi.n	119f0 <__hexnan+0x68>
   11a06:	cmp	r0, r2
   11a08:	bhi.n	11a80 <__hexnan+0xf8>
   11a0a:	ldrb.w	r3, [r5, #1]!
   11a0e:	movs	r1, #8
   11a10:	cmp	r3, #0
   11a12:	bne.n	119ca <__hexnan+0x42>
   11a14:	cmp.w	lr, #0
   11a18:	beq.n	11a96 <__hexnan+0x10e>
   11a1a:	cmp	r0, r8
   11a1c:	bcs.n	11a22 <__hexnan+0x9a>
   11a1e:	cmp	r1, #7
   11a20:	ble.n	11adc <__hexnan+0x154>
   11a22:	cmp	r0, r2
   11a24:	bls.n	11a9e <__hexnan+0x116>
   11a26:	mov	r3, r2
   11a28:	ldr.w	r1, [r0], #4
   11a2c:	str.w	r1, [r3], #4
   11a30:	cmp	ip, r0
   11a32:	bcs.n	11a28 <__hexnan+0xa0>
   11a34:	movs	r1, #0
   11a36:	str.w	r1, [r3], #4
   11a3a:	cmp	ip, r3
   11a3c:	bcs.n	11a36 <__hexnan+0xae>
   11a3e:	ldr	r3, [sp, #4]
   11a40:	ldr.w	r3, [r3, #-4]
   11a44:	cbnz	r3, 11a52 <__hexnan+0xca>
   11a46:	cmp	r2, ip
   11a48:	beq.n	11ac0 <__hexnan+0x138>
   11a4a:	ldr.w	r3, [ip, #-4]!
   11a4e:	cmp	r3, #0
   11a50:	beq.n	11a46 <__hexnan+0xbe>
   11a52:	movs	r0, #5
   11a54:	add	sp, #20
   11a56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a5a:	adds	r1, #1
   11a5c:	cmp	r1, #8
   11a5e:	add.w	lr, lr, #1
   11a62:	ble.n	11a72 <__hexnan+0xea>
   11a64:	cmp	r0, r2
   11a66:	bls.n	119c4 <__hexnan+0x3c>
   11a68:	movs	r3, #0
   11a6a:	str.w	r3, [r0, #-4]
   11a6e:	movs	r1, #1
   11a70:	subs	r0, #4
   11a72:	ldr	r3, [r0, #0]
   11a74:	and.w	r4, r4, #15
   11a78:	orr.w	r4, r4, r3, lsl #4
   11a7c:	str	r4, [r0, #0]
   11a7e:	b.n	119c4 <__hexnan+0x3c>
   11a80:	movs	r3, #0
   11a82:	sub.w	r8, r0, #4
   11a86:	str.w	r3, [r0, #-4]
   11a8a:	mov	sl, lr
   11a8c:	mov	r0, r8
   11a8e:	mov	r1, r3
   11a90:	b.n	119c4 <__hexnan+0x3c>
   11a92:	cmp	r3, #41	; 0x29
   11a94:	beq.n	11ace <__hexnan+0x146>
   11a96:	movs	r0, #4
   11a98:	add	sp, #20
   11a9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a9e:	ldr	r3, [sp, #12]
   11aa0:	cmp	r3, #0
   11aa2:	beq.n	11a3e <__hexnan+0xb6>
   11aa4:	ldr	r4, [sp, #4]
   11aa6:	ldr	r3, [sp, #12]
   11aa8:	ldr.w	r1, [r4, #-4]
   11aac:	rsb	r3, r3, #32
   11ab0:	mov.w	r0, #4294967295
   11ab4:	lsr.w	r3, r0, r3
   11ab8:	ands	r3, r1
   11aba:	str.w	r3, [r4, #-4]
   11abe:	b.n	11a44 <__hexnan+0xbc>
   11ac0:	movs	r3, #1
   11ac2:	movs	r0, #5
   11ac4:	str.w	r3, [ip]
   11ac8:	add	sp, #20
   11aca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ace:	ldr	r3, [sp, #8]
   11ad0:	adds	r5, #1
   11ad2:	str	r5, [r3, #0]
   11ad4:	cmp.w	lr, #0
   11ad8:	bne.n	11a1a <__hexnan+0x92>
   11ada:	b.n	11a96 <__hexnan+0x10e>
   11adc:	rsb	r3, r1, #8
   11ae0:	lsls	r3, r3, #2
   11ae2:	ldr	r5, [r0, #0]
   11ae4:	rsb	r7, r3, #32
   11ae8:	mov	r1, r0
   11aea:	ldr	r6, [r1, #4]
   11aec:	lsl.w	r4, r6, r7
   11af0:	orrs	r4, r5
   11af2:	lsr.w	r5, r6, r3
   11af6:	str	r4, [r1, #0]
   11af8:	str.w	r5, [r1, #4]!
   11afc:	cmp	r8, r1
   11afe:	bhi.n	11aea <__hexnan+0x162>
   11b00:	b.n	11a22 <__hexnan+0x9a>
   11b02:	nop
   11b04:	.word	0x00013a7c

00011b08 <iswspace>:
   11b08:	cmp	r0, #255	; 0xff
   11b0a:	bls.n	11b10 <iswspace+0x8>
   11b0c:	movs	r0, #0
   11b0e:	bx	lr
   11b10:	push	{r4, lr}
   11b12:	mov	r4, r0
   11b14:	bl	ba20 <__locale_ctype_ptr>
   11b18:	add	r0, r4
   11b1a:	ldrb	r0, [r0, #1]
   11b1c:	and.w	r0, r0, #8
   11b20:	uxtb	r0, r0
   11b22:	pop	{r4, pc}

00011b24 <__localeconv_l>:
   11b24:	adds	r0, #240	; 0xf0
   11b26:	bx	lr

00011b28 <_localeconv_r>:
   11b28:	ldr	r2, [pc, #16]	; (11b3c <_localeconv_r+0x14>)
   11b2a:	ldr	r3, [pc, #20]	; (11b40 <_localeconv_r+0x18>)
   11b2c:	ldr	r2, [r2, #0]
   11b2e:	ldr	r0, [r2, #52]	; 0x34
   11b30:	cmp	r0, #0
   11b32:	it	eq
   11b34:	moveq	r0, r3
   11b36:	adds	r0, #240	; 0xf0
   11b38:	bx	lr
   11b3a:	nop
   11b3c:	.word	0x20013dc8
   11b40:	.word	0x20013dcc

00011b44 <_mbrtowc_r>:
   11b44:	push	{r4, r5, r6, r7, lr}
   11b46:	sub	sp, #12
   11b48:	mov	r7, r0
   11b4a:	ldr	r5, [sp, #32]
   11b4c:	cbz	r2, 11b74 <_mbrtowc_r+0x30>
   11b4e:	ldr	r4, [pc, #68]	; (11b94 <_mbrtowc_r+0x50>)
   11b50:	ldr	r6, [pc, #68]	; (11b98 <_mbrtowc_r+0x54>)
   11b52:	ldr	r4, [r4, #0]
   11b54:	ldr	r4, [r4, #52]	; 0x34
   11b56:	str	r5, [sp, #0]
   11b58:	cmp	r4, #0
   11b5a:	it	eq
   11b5c:	moveq	r4, r6
   11b5e:	ldr.w	r4, [r4, #228]	; 0xe4
   11b62:	blx	r4
   11b64:	adds	r3, r0, #1
   11b66:	bne.n	11b70 <_mbrtowc_r+0x2c>
   11b68:	movs	r2, #0
   11b6a:	movs	r3, #138	; 0x8a
   11b6c:	str	r2, [r5, #0]
   11b6e:	str	r3, [r7, #0]
   11b70:	add	sp, #12
   11b72:	pop	{r4, r5, r6, r7, pc}
   11b74:	ldr	r3, [pc, #28]	; (11b94 <_mbrtowc_r+0x50>)
   11b76:	ldr	r1, [pc, #32]	; (11b98 <_mbrtowc_r+0x54>)
   11b78:	ldr	r3, [r3, #0]
   11b7a:	ldr	r3, [r3, #52]	; 0x34
   11b7c:	str	r5, [sp, #0]
   11b7e:	cmp	r3, #0
   11b80:	it	eq
   11b82:	moveq	r3, r1
   11b84:	mov	r4, r2
   11b86:	mov	r1, r4
   11b88:	ldr	r2, [pc, #16]	; (11b9c <_mbrtowc_r+0x58>)
   11b8a:	ldr.w	r4, [r3, #228]	; 0xe4
   11b8e:	movs	r3, #1
   11b90:	blx	r4
   11b92:	b.n	11b64 <_mbrtowc_r+0x20>
   11b94:	.word	0x20013dc8
   11b98:	.word	0x20013dcc
   11b9c:	.word	0x00012f24

00011ba0 <_Balloc>:
   11ba0:	ldr	r3, [r0, #76]	; 0x4c
   11ba2:	push	{r4, r5, r6, lr}
   11ba4:	mov	r5, r0
   11ba6:	mov	r4, r1
   11ba8:	cbz	r3, 11bbe <_Balloc+0x1e>
   11baa:	ldr.w	r0, [r3, r4, lsl #2]
   11bae:	cbz	r0, 11bd2 <_Balloc+0x32>
   11bb0:	ldr	r2, [r0, #0]
   11bb2:	str.w	r2, [r3, r4, lsl #2]
   11bb6:	movs	r3, #0
   11bb8:	str	r3, [r0, #16]
   11bba:	str	r3, [r0, #12]
   11bbc:	pop	{r4, r5, r6, pc}
   11bbe:	movs	r2, #33	; 0x21
   11bc0:	movs	r1, #4
   11bc2:	bl	12d84 <_calloc_r>
   11bc6:	str	r0, [r5, #76]	; 0x4c
   11bc8:	mov	r3, r0
   11bca:	cmp	r0, #0
   11bcc:	bne.n	11baa <_Balloc+0xa>
   11bce:	movs	r0, #0
   11bd0:	pop	{r4, r5, r6, pc}
   11bd2:	movs	r1, #1
   11bd4:	lsl.w	r6, r1, r4
   11bd8:	adds	r2, r6, #5
   11bda:	mov	r0, r5
   11bdc:	lsls	r2, r2, #2
   11bde:	bl	12d84 <_calloc_r>
   11be2:	cmp	r0, #0
   11be4:	beq.n	11bce <_Balloc+0x2e>
   11be6:	str	r4, [r0, #4]
   11be8:	str	r6, [r0, #8]
   11bea:	b.n	11bb6 <_Balloc+0x16>

00011bec <_Bfree>:
   11bec:	cbz	r1, 11bfc <_Bfree+0x10>
   11bee:	ldr	r3, [r0, #76]	; 0x4c
   11bf0:	ldr	r2, [r1, #4]
   11bf2:	ldr.w	r0, [r3, r2, lsl #2]
   11bf6:	str	r0, [r1, #0]
   11bf8:	str.w	r1, [r3, r2, lsl #2]
   11bfc:	bx	lr
   11bfe:	nop

00011c00 <__multadd>:
   11c00:	push	{r4, r5, r6, r7, lr}
   11c02:	ldr	r4, [r1, #16]
   11c04:	sub	sp, #12
   11c06:	mov	r5, r1
   11c08:	mov	r6, r0
   11c0a:	add.w	lr, r1, #20
   11c0e:	movs	r7, #0
   11c10:	ldr.w	r0, [lr]
   11c14:	uxth	r1, r0
   11c16:	mla	r1, r2, r1, r3
   11c1a:	lsrs	r3, r1, #16
   11c1c:	lsrs	r0, r0, #16
   11c1e:	mla	r3, r2, r0, r3
   11c22:	uxth	r1, r1
   11c24:	adds	r7, #1
   11c26:	add.w	r1, r1, r3, lsl #16
   11c2a:	cmp	r4, r7
   11c2c:	str.w	r1, [lr], #4
   11c30:	mov.w	r3, r3, lsr #16
   11c34:	bgt.n	11c10 <__multadd+0x10>
   11c36:	cbz	r3, 11c48 <__multadd+0x48>
   11c38:	ldr	r2, [r5, #8]
   11c3a:	cmp	r4, r2
   11c3c:	bge.n	11c4e <__multadd+0x4e>
   11c3e:	add.w	r2, r5, r4, lsl #2
   11c42:	adds	r4, #1
   11c44:	str	r3, [r2, #20]
   11c46:	str	r4, [r5, #16]
   11c48:	mov	r0, r5
   11c4a:	add	sp, #12
   11c4c:	pop	{r4, r5, r6, r7, pc}
   11c4e:	ldr	r1, [r5, #4]
   11c50:	str	r3, [sp, #4]
   11c52:	adds	r1, #1
   11c54:	mov	r0, r6
   11c56:	bl	11ba0 <_Balloc>
   11c5a:	ldr	r2, [r5, #16]
   11c5c:	adds	r2, #2
   11c5e:	add.w	r1, r5, #12
   11c62:	mov	r7, r0
   11c64:	lsls	r2, r2, #2
   11c66:	adds	r0, #12
   11c68:	bl	89a8 <memcpy>
   11c6c:	ldr	r2, [r6, #76]	; 0x4c
   11c6e:	ldr	r1, [r5, #4]
   11c70:	ldr	r3, [sp, #4]
   11c72:	ldr.w	r0, [r2, r1, lsl #2]
   11c76:	str	r0, [r5, #0]
   11c78:	str.w	r5, [r2, r1, lsl #2]
   11c7c:	mov	r5, r7
   11c7e:	b.n	11c3e <__multadd+0x3e>

00011c80 <__s2b>:
   11c80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11c84:	ldr	r4, [pc, #140]	; (11d14 <__s2b+0x94>)
   11c86:	ldr	r5, [sp, #32]
   11c88:	mov	r7, r3
   11c8a:	adds	r3, #8
   11c8c:	smull	r4, lr, r4, r3
   11c90:	asrs	r3, r3, #31
   11c92:	rsb	lr, r3, lr, asr #1
   11c96:	cmp.w	lr, #1
   11c9a:	mov	r6, r0
   11c9c:	mov	r4, r1
   11c9e:	mov	r8, r2
   11ca0:	ble.n	11d0e <__s2b+0x8e>
   11ca2:	movs	r3, #1
   11ca4:	movs	r1, #0
   11ca6:	lsls	r3, r3, #1
   11ca8:	cmp	lr, r3
   11caa:	add.w	r1, r1, #1
   11cae:	bgt.n	11ca6 <__s2b+0x26>
   11cb0:	mov	r0, r6
   11cb2:	bl	11ba0 <_Balloc>
   11cb6:	movs	r3, #1
   11cb8:	cmp.w	r8, #9
   11cbc:	str	r5, [r0, #20]
   11cbe:	str	r3, [r0, #16]
   11cc0:	ble.n	11d06 <__s2b+0x86>
   11cc2:	add.w	r9, r4, #9
   11cc6:	mov	r5, r9
   11cc8:	add	r4, r8
   11cca:	ldrb.w	r3, [r5], #1
   11cce:	mov	r1, r0
   11cd0:	subs	r3, #48	; 0x30
   11cd2:	movs	r2, #10
   11cd4:	mov	r0, r6
   11cd6:	bl	11c00 <__multadd>
   11cda:	cmp	r5, r4
   11cdc:	bne.n	11cca <__s2b+0x4a>
   11cde:	add.w	r4, r9, r8
   11ce2:	subs	r4, #8
   11ce4:	cmp	r7, r8
   11ce6:	ble.n	11d02 <__s2b+0x82>
   11ce8:	rsb	r7, r8, r7
   11cec:	add	r7, r4
   11cee:	ldrb.w	r3, [r4], #1
   11cf2:	mov	r1, r0
   11cf4:	subs	r3, #48	; 0x30
   11cf6:	movs	r2, #10
   11cf8:	mov	r0, r6
   11cfa:	bl	11c00 <__multadd>
   11cfe:	cmp	r7, r4
   11d00:	bne.n	11cee <__s2b+0x6e>
   11d02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d06:	adds	r4, #10
   11d08:	mov.w	r8, #9
   11d0c:	b.n	11ce4 <__s2b+0x64>
   11d0e:	movs	r1, #0
   11d10:	b.n	11cb0 <__s2b+0x30>
   11d12:	nop
   11d14:	.word	0x38e38e39

00011d18 <__hi0bits>:
   11d18:	lsrs	r3, r0, #16
   11d1a:	lsls	r3, r3, #16
   11d1c:	cbnz	r3, 11d4c <__hi0bits+0x34>
   11d1e:	lsls	r0, r0, #16
   11d20:	movs	r3, #16
   11d22:	tst.w	r0, #4278190080	; 0xff000000
   11d26:	itt	eq
   11d28:	lsleq	r0, r0, #8
   11d2a:	addeq	r3, #8
   11d2c:	tst.w	r0, #4026531840	; 0xf0000000
   11d30:	itt	eq
   11d32:	lsleq	r0, r0, #4
   11d34:	addeq	r3, #4
   11d36:	tst.w	r0, #3221225472	; 0xc0000000
   11d3a:	itt	eq
   11d3c:	lsleq	r0, r0, #2
   11d3e:	addeq	r3, #2
   11d40:	cmp	r0, #0
   11d42:	blt.n	11d54 <__hi0bits+0x3c>
   11d44:	lsls	r2, r0, #1
   11d46:	bmi.n	11d50 <__hi0bits+0x38>
   11d48:	movs	r0, #32
   11d4a:	bx	lr
   11d4c:	movs	r3, #0
   11d4e:	b.n	11d22 <__hi0bits+0xa>
   11d50:	adds	r0, r3, #1
   11d52:	bx	lr
   11d54:	mov	r0, r3
   11d56:	bx	lr

00011d58 <__lo0bits>:
   11d58:	ldr	r3, [r0, #0]
   11d5a:	ands.w	r2, r3, #7
   11d5e:	beq.n	11d70 <__lo0bits+0x18>
   11d60:	lsls	r1, r3, #31
   11d62:	bmi.n	11da6 <__lo0bits+0x4e>
   11d64:	lsls	r2, r3, #30
   11d66:	bmi.n	11daa <__lo0bits+0x52>
   11d68:	lsrs	r3, r3, #2
   11d6a:	str	r3, [r0, #0]
   11d6c:	movs	r0, #2
   11d6e:	bx	lr
   11d70:	uxth	r1, r3
   11d72:	cbnz	r1, 11d78 <__lo0bits+0x20>
   11d74:	lsrs	r3, r3, #16
   11d76:	movs	r2, #16
   11d78:	tst.w	r3, #255	; 0xff
   11d7c:	itt	eq
   11d7e:	lsreq	r3, r3, #8
   11d80:	addeq	r2, #8
   11d82:	lsls	r1, r3, #28
   11d84:	itt	eq
   11d86:	lsreq	r3, r3, #4
   11d88:	addeq	r2, #4
   11d8a:	lsls	r1, r3, #30
   11d8c:	itt	eq
   11d8e:	lsreq	r3, r3, #2
   11d90:	addeq	r2, #2
   11d92:	lsls	r1, r3, #31
   11d94:	bmi.n	11da0 <__lo0bits+0x48>
   11d96:	lsrs	r3, r3, #1
   11d98:	bne.n	11d9e <__lo0bits+0x46>
   11d9a:	movs	r0, #32
   11d9c:	bx	lr
   11d9e:	adds	r2, #1
   11da0:	str	r3, [r0, #0]
   11da2:	mov	r0, r2
   11da4:	bx	lr
   11da6:	movs	r0, #0
   11da8:	bx	lr
   11daa:	lsrs	r3, r3, #1
   11dac:	str	r3, [r0, #0]
   11dae:	movs	r0, #1
   11db0:	bx	lr
   11db2:	nop

00011db4 <__i2b>:
   11db4:	push	{r4, lr}
   11db6:	mov	r4, r1
   11db8:	movs	r1, #1
   11dba:	bl	11ba0 <_Balloc>
   11dbe:	movs	r2, #1
   11dc0:	str	r4, [r0, #20]
   11dc2:	str	r2, [r0, #16]
   11dc4:	pop	{r4, pc}
   11dc6:	nop

00011dc8 <__multiply>:
   11dc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dcc:	ldr	r5, [r1, #16]
   11dce:	ldr	r7, [r2, #16]
   11dd0:	cmp	r5, r7
   11dd2:	sub	sp, #12
   11dd4:	mov	r4, r1
   11dd6:	mov	r6, r2
   11dd8:	bge.n	11de4 <__multiply+0x1c>
   11dda:	mov	r2, r5
   11ddc:	mov	r4, r6
   11dde:	mov	r5, r7
   11de0:	mov	r6, r1
   11de2:	mov	r7, r2
   11de4:	ldr	r3, [r4, #8]
   11de6:	ldr	r1, [r4, #4]
   11de8:	add.w	r8, r5, r7
   11dec:	cmp	r8, r3
   11dee:	it	gt
   11df0:	addgt	r1, #1
   11df2:	bl	11ba0 <_Balloc>
   11df6:	add.w	ip, r0, #20
   11dfa:	add.w	r9, ip, r8, lsl #2
   11dfe:	cmp	ip, r9
   11e00:	str	r0, [sp, #0]
   11e02:	bcs.n	11e10 <__multiply+0x48>
   11e04:	mov	r3, ip
   11e06:	movs	r1, #0
   11e08:	str.w	r1, [r3], #4
   11e0c:	cmp	r9, r3
   11e0e:	bhi.n	11e08 <__multiply+0x40>
   11e10:	add.w	r2, r6, #20
   11e14:	add.w	sl, r2, r7, lsl #2
   11e18:	add.w	r3, r4, #20
   11e1c:	cmp	r2, sl
   11e1e:	add.w	lr, r3, r5, lsl #2
   11e22:	bcs.n	11ece <__multiply+0x106>
   11e24:	str.w	r9, [sp, #4]
   11e28:	mov	r9, r3
   11e2a:	ldr.w	r3, [r2], #4
   11e2e:	uxth.w	fp, r3
   11e32:	cmp.w	fp, #0
   11e36:	beq.n	11e7a <__multiply+0xb2>
   11e38:	movs	r0, #0
   11e3a:	mov	r7, r9
   11e3c:	mov	r6, ip
   11e3e:	mov	r5, r0
   11e40:	b.n	11e44 <__multiply+0x7c>
   11e42:	mov	r6, r3
   11e44:	ldr.w	r4, [r7], #4
   11e48:	ldr	r0, [r6, #0]
   11e4a:	uxth	r1, r4
   11e4c:	uxth	r3, r0
   11e4e:	mla	r1, fp, r1, r3
   11e52:	lsrs	r4, r4, #16
   11e54:	lsrs	r0, r0, #16
   11e56:	adds	r3, r1, r5
   11e58:	mla	r0, fp, r4, r0
   11e5c:	add.w	r0, r0, r3, lsr #16
   11e60:	uxth	r1, r3
   11e62:	mov	r3, r6
   11e64:	orr.w	r1, r1, r0, lsl #16
   11e68:	cmp	lr, r7
   11e6a:	mov.w	r5, r0, lsr #16
   11e6e:	str.w	r1, [r3], #4
   11e72:	bhi.n	11e42 <__multiply+0x7a>
   11e74:	str	r5, [r6, #4]
   11e76:	ldr.w	r3, [r2, #-4]
   11e7a:	movs.w	fp, r3, lsr #16
   11e7e:	beq.n	11ec2 <__multiply+0xfa>
   11e80:	ldr.w	r3, [ip]
   11e84:	mov	r7, ip
   11e86:	mov	r0, r3
   11e88:	mov	r5, r9
   11e8a:	movs	r1, #0
   11e8c:	b.n	11e90 <__multiply+0xc8>
   11e8e:	mov	r7, r6
   11e90:	ldrh	r4, [r5, #0]
   11e92:	lsrs	r0, r0, #16
   11e94:	mla	r0, fp, r4, r0
   11e98:	add	r1, r0
   11e9a:	uxth	r4, r3
   11e9c:	mov	r6, r7
   11e9e:	orr.w	r3, r4, r1, lsl #16
   11ea2:	str.w	r3, [r6], #4
   11ea6:	ldr	r0, [r7, #4]
   11ea8:	ldr.w	r4, [r5], #4
   11eac:	uxth	r3, r0
   11eae:	lsrs	r4, r4, #16
   11eb0:	mla	r4, fp, r4, r3
   11eb4:	add.w	r3, r4, r1, lsr #16
   11eb8:	cmp	lr, r5
   11eba:	mov.w	r1, r3, lsr #16
   11ebe:	bhi.n	11e8e <__multiply+0xc6>
   11ec0:	str	r3, [r7, #4]
   11ec2:	cmp	sl, r2
   11ec4:	add.w	ip, ip, #4
   11ec8:	bhi.n	11e2a <__multiply+0x62>
   11eca:	ldr.w	r9, [sp, #4]
   11ece:	cmp.w	r8, #0
   11ed2:	ble.n	11eec <__multiply+0x124>
   11ed4:	ldr.w	r3, [r9, #-4]
   11ed8:	sub.w	r9, r9, #4
   11edc:	cbz	r3, 11ee6 <__multiply+0x11e>
   11ede:	b.n	11eec <__multiply+0x124>
   11ee0:	ldr.w	r3, [r9, #-4]!
   11ee4:	cbnz	r3, 11eec <__multiply+0x124>
   11ee6:	subs.w	r8, r8, #1
   11eea:	bne.n	11ee0 <__multiply+0x118>
   11eec:	ldr	r0, [sp, #0]
   11eee:	str.w	r8, [r0, #16]
   11ef2:	add	sp, #12
   11ef4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011ef8 <__pow5mult>:
   11ef8:	ands.w	r3, r2, #3
   11efc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f00:	mov	r4, r2
   11f02:	mov	r7, r0
   11f04:	bne.n	11f64 <__pow5mult+0x6c>
   11f06:	mov	r6, r1
   11f08:	asrs	r4, r4, #2
   11f0a:	beq.n	11f46 <__pow5mult+0x4e>
   11f0c:	ldr	r5, [r7, #72]	; 0x48
   11f0e:	cbz	r5, 11f76 <__pow5mult+0x7e>
   11f10:	lsls	r3, r4, #31
   11f12:	mov.w	r8, #0
   11f16:	bmi.n	11f26 <__pow5mult+0x2e>
   11f18:	asrs	r4, r4, #1
   11f1a:	beq.n	11f46 <__pow5mult+0x4e>
   11f1c:	ldr	r0, [r5, #0]
   11f1e:	cbz	r0, 11f4c <__pow5mult+0x54>
   11f20:	mov	r5, r0
   11f22:	lsls	r3, r4, #31
   11f24:	bpl.n	11f18 <__pow5mult+0x20>
   11f26:	mov	r2, r5
   11f28:	mov	r1, r6
   11f2a:	mov	r0, r7
   11f2c:	bl	11dc8 <__multiply>
   11f30:	cbz	r6, 11f60 <__pow5mult+0x68>
   11f32:	ldr	r2, [r6, #4]
   11f34:	ldr	r3, [r7, #76]	; 0x4c
   11f36:	asrs	r4, r4, #1
   11f38:	ldr.w	r1, [r3, r2, lsl #2]
   11f3c:	str	r1, [r6, #0]
   11f3e:	str.w	r6, [r3, r2, lsl #2]
   11f42:	mov	r6, r0
   11f44:	bne.n	11f1c <__pow5mult+0x24>
   11f46:	mov	r0, r6
   11f48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f4c:	mov	r2, r5
   11f4e:	mov	r1, r5
   11f50:	mov	r0, r7
   11f52:	bl	11dc8 <__multiply>
   11f56:	str	r0, [r5, #0]
   11f58:	str.w	r8, [r0]
   11f5c:	mov	r5, r0
   11f5e:	b.n	11f22 <__pow5mult+0x2a>
   11f60:	mov	r6, r0
   11f62:	b.n	11f18 <__pow5mult+0x20>
   11f64:	subs	r2, r3, #1
   11f66:	ldr	r5, [pc, #44]	; (11f94 <__pow5mult+0x9c>)
   11f68:	movs	r3, #0
   11f6a:	ldr.w	r2, [r5, r2, lsl #2]
   11f6e:	bl	11c00 <__multadd>
   11f72:	mov	r6, r0
   11f74:	b.n	11f08 <__pow5mult+0x10>
   11f76:	movs	r1, #1
   11f78:	mov	r0, r7
   11f7a:	bl	11ba0 <_Balloc>
   11f7e:	movw	r1, #625	; 0x271
   11f82:	movs	r2, #1
   11f84:	movs	r3, #0
   11f86:	str	r1, [r0, #20]
   11f88:	str	r2, [r0, #16]
   11f8a:	mov	r5, r0
   11f8c:	str	r0, [r7, #72]	; 0x48
   11f8e:	str	r3, [r0, #0]
   11f90:	b.n	11f10 <__pow5mult+0x18>
   11f92:	nop
   11f94:	.word	0x00013c70

00011f98 <__lshift>:
   11f98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11f9c:	mov	r9, r2
   11f9e:	ldr	r2, [r1, #16]
   11fa0:	ldr	r3, [r1, #8]
   11fa2:	mov.w	r4, r9, asr #5
   11fa6:	add.w	r8, r4, r2
   11faa:	add.w	r5, r8, #1
   11fae:	cmp	r5, r3
   11fb0:	mov	r6, r1
   11fb2:	mov	sl, r0
   11fb4:	ldr	r1, [r1, #4]
   11fb6:	ble.n	11fc2 <__lshift+0x2a>
   11fb8:	lsls	r3, r3, #1
   11fba:	cmp	r5, r3
   11fbc:	add.w	r1, r1, #1
   11fc0:	bgt.n	11fb8 <__lshift+0x20>
   11fc2:	mov	r0, sl
   11fc4:	bl	11ba0 <_Balloc>
   11fc8:	cmp	r4, #0
   11fca:	add.w	r2, r0, #20
   11fce:	ble.n	12042 <__lshift+0xaa>
   11fd0:	add.w	r3, r2, r4, lsl #2
   11fd4:	movs	r1, #0
   11fd6:	str.w	r1, [r2], #4
   11fda:	cmp	r3, r2
   11fdc:	bne.n	11fd6 <__lshift+0x3e>
   11fde:	ldr	r4, [r6, #16]
   11fe0:	add.w	r1, r6, #20
   11fe4:	ands.w	r9, r9, #31
   11fe8:	add.w	lr, r1, r4, lsl #2
   11fec:	beq.n	12032 <__lshift+0x9a>
   11fee:	rsb	r2, r9, #32
   11ff2:	movs	r4, #0
   11ff4:	ldr	r7, [r1, #0]
   11ff6:	lsl.w	ip, r7, r9
   11ffa:	orr.w	r4, ip, r4
   11ffe:	mov	ip, r3
   12000:	str.w	r4, [r3], #4
   12004:	ldr.w	r4, [r1], #4
   12008:	cmp	lr, r1
   1200a:	lsr.w	r4, r4, r2
   1200e:	bhi.n	11ff4 <__lshift+0x5c>
   12010:	str.w	r4, [ip, #4]
   12014:	cbz	r4, 1201a <__lshift+0x82>
   12016:	add.w	r5, r8, #2
   1201a:	ldr.w	r3, [sl, #76]	; 0x4c
   1201e:	ldr	r2, [r6, #4]
   12020:	subs	r5, #1
   12022:	ldr.w	r1, [r3, r2, lsl #2]
   12026:	str	r5, [r0, #16]
   12028:	str	r1, [r6, #0]
   1202a:	str.w	r6, [r3, r2, lsl #2]
   1202e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12032:	subs	r3, #4
   12034:	ldr.w	r2, [r1], #4
   12038:	str.w	r2, [r3, #4]!
   1203c:	cmp	lr, r1
   1203e:	bhi.n	12034 <__lshift+0x9c>
   12040:	b.n	1201a <__lshift+0x82>
   12042:	mov	r3, r2
   12044:	b.n	11fde <__lshift+0x46>
   12046:	nop

00012048 <__mcmp>:
   12048:	ldr	r2, [r0, #16]
   1204a:	ldr	r3, [r1, #16]
   1204c:	subs	r2, r2, r3
   1204e:	bne.n	12078 <__mcmp+0x30>
   12050:	lsls	r3, r3, #2
   12052:	adds	r0, #20
   12054:	adds	r1, #20
   12056:	add	r1, r3
   12058:	push	{r4}
   1205a:	add	r3, r0
   1205c:	b.n	12062 <__mcmp+0x1a>
   1205e:	cmp	r0, r3
   12060:	bcs.n	1207c <__mcmp+0x34>
   12062:	ldr.w	r4, [r3, #-4]!
   12066:	ldr.w	r2, [r1, #-4]!
   1206a:	cmp	r4, r2
   1206c:	beq.n	1205e <__mcmp+0x16>
   1206e:	bcc.n	12084 <__mcmp+0x3c>
   12070:	movs	r0, #1
   12072:	ldr.w	r4, [sp], #4
   12076:	bx	lr
   12078:	mov	r0, r2
   1207a:	bx	lr
   1207c:	movs	r0, #0
   1207e:	ldr.w	r4, [sp], #4
   12082:	bx	lr
   12084:	mov.w	r0, #4294967295
   12088:	b.n	12072 <__mcmp+0x2a>
   1208a:	nop

0001208c <__mdiff>:
   1208c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12090:	ldr	r3, [r1, #16]
   12092:	mov	r7, r1
   12094:	ldr	r1, [r2, #16]
   12096:	subs	r3, r3, r1
   12098:	cmp	r3, #0
   1209a:	mov	r8, r2
   1209c:	bne.n	120ce <__mdiff+0x42>
   1209e:	lsls	r1, r1, #2
   120a0:	add.w	r2, r7, #20
   120a4:	add.w	r5, r8, #20
   120a8:	adds	r3, r2, r1
   120aa:	add	r1, r5
   120ac:	b.n	120b2 <__mdiff+0x26>
   120ae:	cmp	r2, r3
   120b0:	bcs.n	12170 <__mdiff+0xe4>
   120b2:	ldr.w	r6, [r3, #-4]!
   120b6:	ldr.w	r4, [r1, #-4]!
   120ba:	cmp	r6, r4
   120bc:	beq.n	120ae <__mdiff+0x22>
   120be:	bcs.n	12182 <__mdiff+0xf6>
   120c0:	mov	r3, r7
   120c2:	mov	r4, r2
   120c4:	mov	r7, r8
   120c6:	mov.w	r9, #1
   120ca:	mov	r8, r3
   120cc:	b.n	120dc <__mdiff+0x50>
   120ce:	blt.n	1218c <__mdiff+0x100>
   120d0:	add.w	r5, r7, #20
   120d4:	add.w	r4, r2, #20
   120d8:	mov.w	r9, #0
   120dc:	ldr	r1, [r7, #4]
   120de:	bl	11ba0 <_Balloc>
   120e2:	ldr.w	r3, [r8, #16]
   120e6:	ldr	r6, [r7, #16]
   120e8:	str.w	r9, [r0, #12]
   120ec:	add.w	ip, r4, r3, lsl #2
   120f0:	mov	lr, r4
   120f2:	add.w	r7, r5, r6, lsl #2
   120f6:	add.w	r4, r0, #20
   120fa:	movs	r3, #0
   120fc:	ldr.w	r1, [lr], #4
   12100:	ldr.w	r8, [r5], #4
   12104:	uxth	r2, r1
   12106:	uxtah	r3, r3, r8
   1210a:	lsrs	r1, r1, #16
   1210c:	subs	r2, r3, r2
   1210e:	rsb	r3, r1, r8, lsr #16
   12112:	add.w	r3, r3, r2, asr #16
   12116:	uxth	r2, r2
   12118:	orr.w	r2, r2, r3, lsl #16
   1211c:	cmp	ip, lr
   1211e:	str.w	r2, [r4], #4
   12122:	mov.w	r3, r3, asr #16
   12126:	bhi.n	120fc <__mdiff+0x70>
   12128:	cmp	r7, r5
   1212a:	bls.n	1215c <__mdiff+0xd0>
   1212c:	mov	ip, r4
   1212e:	mov	r1, r5
   12130:	ldr.w	lr, [r1], #4
   12134:	uxtah	r2, r3, lr
   12138:	asrs	r3, r2, #16
   1213a:	add.w	r3, r3, lr, lsr #16
   1213e:	uxth	r2, r2
   12140:	orr.w	r2, r2, r3, lsl #16
   12144:	cmp	r7, r1
   12146:	str.w	r2, [ip], #4
   1214a:	mov.w	r3, r3, asr #16
   1214e:	bhi.n	12130 <__mdiff+0xa4>
   12150:	mvns	r5, r5
   12152:	add	r5, r7
   12154:	bic.w	r5, r5, #3
   12158:	adds	r5, #4
   1215a:	add	r4, r5
   1215c:	subs	r4, #4
   1215e:	cbnz	r2, 1216a <__mdiff+0xde>
   12160:	ldr.w	r3, [r4, #-4]!
   12164:	subs	r6, #1
   12166:	cmp	r3, #0
   12168:	beq.n	12160 <__mdiff+0xd4>
   1216a:	str	r6, [r0, #16]
   1216c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12170:	movs	r1, #0
   12172:	bl	11ba0 <_Balloc>
   12176:	movs	r2, #1
   12178:	movs	r3, #0
   1217a:	str	r2, [r0, #16]
   1217c:	str	r3, [r0, #20]
   1217e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12182:	mov	r4, r5
   12184:	mov.w	r9, #0
   12188:	mov	r5, r2
   1218a:	b.n	120dc <__mdiff+0x50>
   1218c:	mov	r3, r7
   1218e:	add.w	r4, r7, #20
   12192:	add.w	r5, r8, #20
   12196:	mov	r7, r8
   12198:	mov.w	r9, #1
   1219c:	mov	r8, r3
   1219e:	b.n	120dc <__mdiff+0x50>

000121a0 <__ulp>:
   121a0:	ldr	r3, [pc, #76]	; (121f0 <__ulp+0x50>)
   121a2:	vmov	r2, s1
   121a6:	ands	r2, r3
   121a8:	sub.w	r3, r2, #54525952	; 0x3400000
   121ac:	cmp	r3, #0
   121ae:	ble.n	121ba <__ulp+0x1a>
   121b0:	movs	r0, #0
   121b2:	mov	r1, r3
   121b4:	vmov	d0, r0, r1
   121b8:	bx	lr
   121ba:	negs	r3, r3
   121bc:	asrs	r3, r3, #20
   121be:	cmp	r3, #19
   121c0:	ble.n	121de <__ulp+0x3e>
   121c2:	subs	r3, #20
   121c4:	cmp	r3, #30
   121c6:	ittte	le
   121c8:	rsble	r3, r3, #31
   121cc:	movle	r2, #1
   121ce:	lslle.w	r3, r2, r3
   121d2:	movgt	r3, #1
   121d4:	movs	r1, #0
   121d6:	mov	r0, r3
   121d8:	vmov	d0, r0, r1
   121dc:	bx	lr
   121de:	mov.w	r2, #524288	; 0x80000
   121e2:	movs	r0, #0
   121e4:	asr.w	r1, r2, r3
   121e8:	vmov	d0, r0, r1
   121ec:	bx	lr
   121ee:	nop
   121f0:	.word	0x7ff00000

000121f4 <__b2d>:
   121f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121f8:	ldr	r6, [r0, #16]
   121fa:	add.w	r8, r0, #20
   121fe:	add.w	r6, r8, r6, lsl #2
   12202:	ldr.w	r7, [r6, #-4]
   12206:	mov	r0, r7
   12208:	bl	11d18 <__hi0bits>
   1220c:	rsb	r3, r0, #32
   12210:	cmp	r0, #10
   12212:	str	r3, [r1, #0]
   12214:	sub.w	r3, r6, #4
   12218:	bgt.n	1224c <__b2d+0x58>
   1221a:	cmp	r8, r3
   1221c:	rsb	r2, r0, #11
   12220:	it	cc
   12222:	ldrcc.w	r3, [r6, #-8]
   12226:	lsr.w	r1, r7, r2
   1222a:	add.w	r0, r0, #21
   1222e:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   12232:	ite	cc
   12234:	lsrcc	r3, r2
   12236:	movcs	r3, #0
   12238:	lsl.w	r0, r7, r0
   1223c:	orr.w	r5, r5, #3145728	; 0x300000
   12240:	orr.w	r4, r0, r3
   12244:	vmov	d0, r4, r5
   12248:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1224c:	cmp	r8, r3
   1224e:	bcs.n	12292 <__b2d+0x9e>
   12250:	subs.w	r3, r0, #11
   12254:	ldr.w	r2, [r6, #-8]
   12258:	beq.n	12298 <__b2d+0xa4>
   1225a:	lsl.w	r0, r7, r3
   1225e:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   12262:	rsb	lr, r3, #32
   12266:	sub.w	r1, r6, #8
   1226a:	orr.w	r7, r7, #3145728	; 0x300000
   1226e:	lsr.w	r0, r2, lr
   12272:	cmp	r8, r1
   12274:	orr.w	r5, r7, r0
   12278:	bcs.n	122bc <__b2d+0xc8>
   1227a:	ldr.w	r1, [r6, #-12]
   1227e:	lsl.w	r0, r2, r3
   12282:	lsr.w	r3, r1, lr
   12286:	orrs	r0, r3
   12288:	mov	r4, r0
   1228a:	vmov	d0, r4, r5
   1228e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12292:	subs	r0, #11
   12294:	bne.n	122aa <__b2d+0xb6>
   12296:	mov	r2, r0
   12298:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   1229c:	orr.w	r5, r5, #3145728	; 0x300000
   122a0:	mov	r4, r2
   122a2:	vmov	d0, r4, r5
   122a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122aa:	lsl.w	r0, r7, r0
   122ae:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   122b2:	movs	r0, #0
   122b4:	orr.w	r5, r5, #3145728	; 0x300000
   122b8:	mov	r4, r0
   122ba:	b.n	1228a <__b2d+0x96>
   122bc:	lsl.w	r0, r2, r3
   122c0:	mov	r4, r0
   122c2:	b.n	1228a <__b2d+0x96>

000122c4 <__d2b>:
   122c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   122c8:	vmov	r6, r7, d0
   122cc:	sub	sp, #12
   122ce:	mov	r8, r1
   122d0:	movs	r1, #1
   122d2:	mov	r4, r7
   122d4:	ubfx	r5, r7, #20, #11
   122d8:	mov	r7, r2
   122da:	bl	11ba0 <_Balloc>
   122de:	ubfx	r4, r4, #0, #20
   122e2:	mov	r9, r0
   122e4:	cbz	r5, 122ea <__d2b+0x26>
   122e6:	orr.w	r4, r4, #1048576	; 0x100000
   122ea:	str	r4, [sp, #4]
   122ec:	cbz	r6, 12336 <__d2b+0x72>
   122ee:	add	r0, sp, #8
   122f0:	str.w	r6, [r0, #-8]!
   122f4:	bl	11d58 <__lo0bits>
   122f8:	cmp	r0, #0
   122fa:	bne.n	12366 <__d2b+0xa2>
   122fc:	ldmia.w	sp, {r2, r3}
   12300:	str.w	r2, [r9, #20]
   12304:	cmp	r3, #0
   12306:	ite	eq
   12308:	moveq	r1, #1
   1230a:	movne	r1, #2
   1230c:	str.w	r3, [r9, #24]
   12310:	str.w	r1, [r9, #16]
   12314:	cbnz	r5, 1234e <__d2b+0x8a>
   12316:	add.w	r3, r9, r1, lsl #2
   1231a:	subw	r0, r0, #1074	; 0x432
   1231e:	str.w	r0, [r8]
   12322:	ldr	r0, [r3, #16]
   12324:	bl	11d18 <__hi0bits>
   12328:	rsb	r0, r0, r1, lsl #5
   1232c:	str	r0, [r7, #0]
   1232e:	mov	r0, r9
   12330:	add	sp, #12
   12332:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12336:	add	r0, sp, #4
   12338:	bl	11d58 <__lo0bits>
   1233c:	ldr	r3, [sp, #4]
   1233e:	str.w	r3, [r9, #20]
   12342:	movs	r1, #1
   12344:	adds	r0, #32
   12346:	str.w	r1, [r9, #16]
   1234a:	cmp	r5, #0
   1234c:	beq.n	12316 <__d2b+0x52>
   1234e:	subw	r5, r5, #1075	; 0x433
   12352:	add	r5, r0
   12354:	rsb	r0, r0, #53	; 0x35
   12358:	str.w	r5, [r8]
   1235c:	str	r0, [r7, #0]
   1235e:	mov	r0, r9
   12360:	add	sp, #12
   12362:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12366:	ldmia.w	sp, {r2, r3}
   1236a:	rsb	r1, r0, #32
   1236e:	lsl.w	r1, r3, r1
   12372:	orrs	r2, r1
   12374:	lsrs	r3, r0
   12376:	str	r3, [sp, #4]
   12378:	str.w	r2, [r9, #20]
   1237c:	b.n	12304 <__d2b+0x40>
   1237e:	nop

00012380 <__ratio>:
   12380:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12384:	sub	sp, #12
   12386:	mov	r8, r1
   12388:	mov	r1, sp
   1238a:	mov	r9, r0
   1238c:	bl	121f4 <__b2d>
   12390:	mov	r0, r8
   12392:	add	r1, sp, #4
   12394:	vmov	r4, r5, d0
   12398:	bl	121f4 <__b2d>
   1239c:	ldmia.w	sp, {r1, r3}
   123a0:	ldr.w	r2, [r9, #16]
   123a4:	ldr.w	r0, [r8, #16]
   123a8:	subs	r1, r1, r3
   123aa:	subs	r0, r2, r0
   123ac:	add.w	r3, r1, r0, lsl #5
   123b0:	cmp	r3, #0
   123b2:	vmov	r6, r7, d0
   123b6:	ble.n	123d4 <__ratio+0x54>
   123b8:	add.w	r1, r5, r3, lsl #20
   123bc:	mov	r5, r1
   123be:	mov	r2, r6
   123c0:	mov	r3, r7
   123c2:	mov	r0, r4
   123c4:	mov	r1, r5
   123c6:	bl	b228 <__aeabi_ddiv>
   123ca:	vmov	d0, r0, r1
   123ce:	add	sp, #12
   123d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   123d4:	sub.w	r9, r7, r3, lsl #20
   123d8:	vmov	r6, s0
   123dc:	mov	r7, r9
   123de:	b.n	123be <__ratio+0x3e>

000123e0 <__copybits>:
   123e0:	push	{r4, r5, r6}
   123e2:	ldr	r4, [r2, #16]
   123e4:	add.w	r3, r2, #20
   123e8:	subs	r1, #1
   123ea:	asrs	r6, r1, #5
   123ec:	add.w	r4, r3, r4, lsl #2
   123f0:	adds	r6, #1
   123f2:	cmp	r3, r4
   123f4:	add.w	r6, r0, r6, lsl #2
   123f8:	bcs.n	12414 <__copybits+0x34>
   123fa:	subs	r1, r0, #4
   123fc:	ldr.w	r5, [r3], #4
   12400:	str.w	r5, [r1, #4]!
   12404:	cmp	r4, r3
   12406:	bhi.n	123fc <__copybits+0x1c>
   12408:	subs	r3, r4, r2
   1240a:	subs	r3, #21
   1240c:	bic.w	r3, r3, #3
   12410:	adds	r3, #4
   12412:	add	r0, r3
   12414:	cmp	r6, r0
   12416:	bls.n	12422 <__copybits+0x42>
   12418:	movs	r3, #0
   1241a:	str.w	r3, [r0], #4
   1241e:	cmp	r6, r0
   12420:	bhi.n	1241a <__copybits+0x3a>
   12422:	pop	{r4, r5, r6}
   12424:	bx	lr
   12426:	nop

00012428 <__any_on>:
   12428:	ldr	r3, [r0, #16]
   1242a:	asrs	r2, r1, #5
   1242c:	cmp	r3, r2
   1242e:	push	{r4}
   12430:	add.w	r4, r0, #20
   12434:	bge.n	12458 <__any_on+0x30>
   12436:	add.w	r3, r4, r3, lsl #2
   1243a:	cmp	r4, r3
   1243c:	bcs.n	12482 <__any_on+0x5a>
   1243e:	ldr.w	r0, [r3, #-4]
   12442:	subs	r3, #4
   12444:	cbz	r0, 1244e <__any_on+0x26>
   12446:	b.n	12474 <__any_on+0x4c>
   12448:	ldr.w	r2, [r3, #-4]!
   1244c:	cbnz	r2, 12474 <__any_on+0x4c>
   1244e:	cmp	r4, r3
   12450:	bcc.n	12448 <__any_on+0x20>
   12452:	ldr.w	r4, [sp], #4
   12456:	bx	lr
   12458:	ble.n	1247c <__any_on+0x54>
   1245a:	ands.w	r1, r1, #31
   1245e:	beq.n	1247c <__any_on+0x54>
   12460:	ldr.w	r0, [r4, r2, lsl #2]
   12464:	lsr.w	r3, r0, r1
   12468:	lsl.w	r1, r3, r1
   1246c:	cmp	r0, r1
   1246e:	add.w	r3, r4, r2, lsl #2
   12472:	beq.n	1243a <__any_on+0x12>
   12474:	movs	r0, #1
   12476:	ldr.w	r4, [sp], #4
   1247a:	bx	lr
   1247c:	add.w	r3, r4, r2, lsl #2
   12480:	b.n	1243a <__any_on+0x12>
   12482:	movs	r0, #0
   12484:	b.n	12452 <__any_on+0x2a>
   12486:	nop

00012488 <__sccl>:
   12488:	push	{r4, r5, r6}
   1248a:	ldrb	r5, [r1, #0]
   1248c:	cmp	r5, #94	; 0x5e
   1248e:	beq.n	124f0 <__sccl+0x68>
   12490:	movs	r2, #0
   12492:	adds	r1, #1
   12494:	mov	r6, r2
   12496:	subs	r3, r0, #1
   12498:	add.w	r4, r0, #255	; 0xff
   1249c:	strb.w	r2, [r3, #1]!
   124a0:	cmp	r3, r4
   124a2:	bne.n	1249c <__sccl+0x14>
   124a4:	cbz	r5, 124c8 <__sccl+0x40>
   124a6:	eor.w	r2, r6, #1
   124aa:	strb	r2, [r0, r5]
   124ac:	adds	r4, r1, #1
   124ae:	ldrb.w	r3, [r4, #-1]
   124b2:	cmp	r3, #45	; 0x2d
   124b4:	beq.n	124d4 <__sccl+0x4c>
   124b6:	cmp	r3, #93	; 0x5d
   124b8:	beq.n	124ce <__sccl+0x46>
   124ba:	cbz	r3, 124c2 <__sccl+0x3a>
   124bc:	mov	r5, r3
   124be:	mov	r1, r4
   124c0:	b.n	124aa <__sccl+0x22>
   124c2:	mov	r0, r1
   124c4:	pop	{r4, r5, r6}
   124c6:	bx	lr
   124c8:	subs	r0, r1, #1
   124ca:	pop	{r4, r5, r6}
   124cc:	bx	lr
   124ce:	mov	r0, r4
   124d0:	pop	{r4, r5, r6}
   124d2:	bx	lr
   124d4:	ldrb	r6, [r1, #1]
   124d6:	cmp	r6, #93	; 0x5d
   124d8:	beq.n	124bc <__sccl+0x34>
   124da:	cmp	r5, r6
   124dc:	bgt.n	124bc <__sccl+0x34>
   124de:	adds	r1, #2
   124e0:	adds	r3, r0, r5
   124e2:	adds	r5, #1
   124e4:	cmp	r6, r5
   124e6:	strb.w	r2, [r3, #1]!
   124ea:	bgt.n	124e2 <__sccl+0x5a>
   124ec:	adds	r4, #2
   124ee:	b.n	124ae <__sccl+0x26>
   124f0:	movs	r2, #1
   124f2:	ldrb	r5, [r1, #1]
   124f4:	mov	r6, r2
   124f6:	adds	r1, #2
   124f8:	b.n	12496 <__sccl+0xe>
   124fa:	nop

000124fc <_strtoll_l.isra.0>:
   124fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12500:	sub	sp, #20
   12502:	mov	sl, r3
   12504:	str	r1, [sp, #8]
   12506:	str	r0, [sp, #12]
   12508:	str	r2, [sp, #4]
   1250a:	mov	r7, r1
   1250c:	ldr	r6, [sp, #56]	; 0x38
   1250e:	b.n	12512 <_strtoll_l.isra.0+0x16>
   12510:	mov	r7, r5
   12512:	mov	r5, r7
   12514:	mov	r0, r6
   12516:	ldrb.w	r4, [r5], #1
   1251a:	bl	ba18 <__locale_ctype_ptr_l>
   1251e:	add	r0, r4
   12520:	ldrb	r3, [r0, #1]
   12522:	and.w	r3, r3, #8
   12526:	and.w	r2, r3, #255	; 0xff
   1252a:	cmp	r3, #0
   1252c:	bne.n	12510 <_strtoll_l.isra.0+0x14>
   1252e:	cmp	r4, #45	; 0x2d
   12530:	beq.w	1263a <_strtoll_l.isra.0+0x13e>
   12534:	cmp	r4, #43	; 0x2b
   12536:	it	eq
   12538:	ldrbeq	r4, [r7, #1]
   1253a:	str	r2, [sp, #0]
   1253c:	it	eq
   1253e:	addeq	r5, r7, #2
   12540:	cmp.w	sl, #0
   12544:	beq.n	12560 <_strtoll_l.isra.0+0x64>
   12546:	cmp.w	sl, #16
   1254a:	beq.w	12678 <_strtoll_l.isra.0+0x17c>
   1254e:	ldr	r3, [sp, #0]
   12550:	mov	r6, sl
   12552:	asrs	r7, r6, #31
   12554:	cbnz	r3, 12572 <_strtoll_l.isra.0+0x76>
   12556:	mov.w	r8, #4294967295
   1255a:	mvn.w	r9, #2147483648	; 0x80000000
   1255e:	b.n	1257a <_strtoll_l.isra.0+0x7e>
   12560:	cmp	r4, #48	; 0x30
   12562:	beq.n	12664 <_strtoll_l.isra.0+0x168>
   12564:	movs	r6, #10
   12566:	movs	r7, #0
   12568:	mov.w	sl, #10
   1256c:	ldr	r3, [sp, #0]
   1256e:	cmp	r3, #0
   12570:	beq.n	12556 <_strtoll_l.isra.0+0x5a>
   12572:	mov.w	r8, #0
   12576:	mov.w	r9, #2147483648	; 0x80000000
   1257a:	mov	r2, r6
   1257c:	mov	r3, r7
   1257e:	mov	r0, r8
   12580:	mov	r1, r9
   12582:	bl	b664 <__aeabi_uldivmod>
   12586:	mov	r3, r7
   12588:	mov	fp, r2
   1258a:	mov	r0, r8
   1258c:	mov	r2, r6
   1258e:	mov	r1, r9
   12590:	bl	b664 <__aeabi_uldivmod>
   12594:	mov.w	lr, #0
   12598:	movs	r2, #0
   1259a:	movs	r3, #0
   1259c:	b.n	125be <_strtoll_l.isra.0+0xc2>
   1259e:	beq.n	1262c <_strtoll_l.isra.0+0x130>
   125a0:	mul.w	r4, r2, r7
   125a4:	mla	r4, r6, r3, r4
   125a8:	umull	r2, r3, r2, r6
   125ac:	add	r3, r4
   125ae:	adds.w	r2, r2, ip
   125b2:	adc.w	r3, r3, ip, asr #31
   125b6:	mov.w	lr, #1
   125ba:	ldrb.w	r4, [r5], #1
   125be:	sub.w	ip, r4, #48	; 0x30
   125c2:	cmp.w	ip, #9
   125c6:	bls.n	125d6 <_strtoll_l.isra.0+0xda>
   125c8:	sub.w	ip, r4, #65	; 0x41
   125cc:	cmp.w	ip, #25
   125d0:	bhi.n	125ee <_strtoll_l.isra.0+0xf2>
   125d2:	sub.w	ip, r4, #55	; 0x37
   125d6:	cmp	sl, ip
   125d8:	ble.n	12600 <_strtoll_l.isra.0+0x104>
   125da:	cmp.w	lr, #4294967295
   125de:	beq.n	125ba <_strtoll_l.isra.0+0xbe>
   125e0:	cmp	r1, r3
   125e2:	it	eq
   125e4:	cmpeq	r0, r2
   125e6:	bcs.n	1259e <_strtoll_l.isra.0+0xa2>
   125e8:	mov.w	lr, #4294967295
   125ec:	b.n	125ba <_strtoll_l.isra.0+0xbe>
   125ee:	sub.w	ip, r4, #97	; 0x61
   125f2:	cmp.w	ip, #25
   125f6:	bhi.n	12600 <_strtoll_l.isra.0+0x104>
   125f8:	sub.w	ip, r4, #87	; 0x57
   125fc:	cmp	sl, ip
   125fe:	bgt.n	125da <_strtoll_l.isra.0+0xde>
   12600:	cmp.w	lr, #4294967295
   12604:	beq.n	12644 <_strtoll_l.isra.0+0x148>
   12606:	ldr	r1, [sp, #0]
   12608:	cbz	r1, 12610 <_strtoll_l.isra.0+0x114>
   1260a:	negs	r2, r2
   1260c:	sbc.w	r3, r3, r3, lsl #1
   12610:	ldr	r1, [sp, #4]
   12612:	cmp	r1, #0
   12614:	beq.n	1269c <_strtoll_l.isra.0+0x1a0>
   12616:	cmp.w	lr, #0
   1261a:	bne.n	1265c <_strtoll_l.isra.0+0x160>
   1261c:	ldr	r5, [sp, #8]
   1261e:	mov	r0, r2
   12620:	mov	r1, r3
   12622:	ldr	r3, [sp, #4]
   12624:	str	r5, [r3, #0]
   12626:	add	sp, #20
   12628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1262c:	cmp	fp, ip
   1262e:	bge.n	125a0 <_strtoll_l.isra.0+0xa4>
   12630:	mov	r2, r0
   12632:	mov	r3, r1
   12634:	mov.w	lr, #4294967295
   12638:	b.n	125ba <_strtoll_l.isra.0+0xbe>
   1263a:	movs	r3, #1
   1263c:	adds	r5, r7, #2
   1263e:	ldrb	r4, [r7, #1]
   12640:	str	r3, [sp, #0]
   12642:	b.n	12540 <_strtoll_l.isra.0+0x44>
   12644:	ldr	r3, [sp, #0]
   12646:	cbnz	r3, 12694 <_strtoll_l.isra.0+0x198>
   12648:	mov.w	r0, #4294967295
   1264c:	mvn.w	r1, #2147483648	; 0x80000000
   12650:	ldr	r2, [sp, #12]
   12652:	movs	r3, #34	; 0x22
   12654:	str	r3, [r2, #0]
   12656:	ldr	r3, [sp, #4]
   12658:	cbnz	r3, 12660 <_strtoll_l.isra.0+0x164>
   1265a:	b.n	12626 <_strtoll_l.isra.0+0x12a>
   1265c:	mov	r0, r2
   1265e:	mov	r1, r3
   12660:	subs	r5, #1
   12662:	b.n	12622 <_strtoll_l.isra.0+0x126>
   12664:	ldrb	r3, [r5, #0]
   12666:	and.w	r3, r3, #223	; 0xdf
   1266a:	cmp	r3, #88	; 0x58
   1266c:	beq.n	12686 <_strtoll_l.isra.0+0x18a>
   1266e:	movs	r6, #8
   12670:	movs	r7, #0
   12672:	mov.w	sl, #8
   12676:	b.n	1256c <_strtoll_l.isra.0+0x70>
   12678:	cmp	r4, #48	; 0x30
   1267a:	bne.n	126a2 <_strtoll_l.isra.0+0x1a6>
   1267c:	ldrb	r3, [r5, #0]
   1267e:	and.w	r3, r3, #223	; 0xdf
   12682:	cmp	r3, #88	; 0x58
   12684:	bne.n	126a2 <_strtoll_l.isra.0+0x1a6>
   12686:	ldrb	r4, [r5, #1]
   12688:	movs	r6, #16
   1268a:	movs	r7, #0
   1268c:	adds	r5, #2
   1268e:	mov.w	sl, #16
   12692:	b.n	1256c <_strtoll_l.isra.0+0x70>
   12694:	movs	r0, #0
   12696:	mov.w	r1, #2147483648	; 0x80000000
   1269a:	b.n	12650 <_strtoll_l.isra.0+0x154>
   1269c:	mov	r0, r2
   1269e:	mov	r1, r3
   126a0:	b.n	12626 <_strtoll_l.isra.0+0x12a>
   126a2:	movs	r6, #16
   126a4:	movs	r7, #0
   126a6:	b.n	1256c <_strtoll_l.isra.0+0x70>

000126a8 <_strtoll_r>:
   126a8:	push	{r4, r5, lr}
   126aa:	ldr	r4, [pc, #24]	; (126c4 <_strtoll_r+0x1c>)
   126ac:	ldr	r5, [pc, #24]	; (126c8 <_strtoll_r+0x20>)
   126ae:	ldr	r4, [r4, #0]
   126b0:	ldr	r4, [r4, #52]	; 0x34
   126b2:	sub	sp, #12
   126b4:	cmp	r4, #0
   126b6:	it	eq
   126b8:	moveq	r4, r5
   126ba:	str	r4, [sp, #0]
   126bc:	bl	124fc <_strtoll_l.isra.0>
   126c0:	add	sp, #12
   126c2:	pop	{r4, r5, pc}
   126c4:	.word	0x20013dc8
   126c8:	.word	0x20013dcc

000126cc <_strtoul_l.isra.0>:
   126cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126d0:	ldr.w	r9, [sp, #40]	; 0x28
   126d4:	mov	r6, r1
   126d6:	mov	r7, r0
   126d8:	mov	r5, r2
   126da:	mov	r8, r3
   126dc:	mov	fp, r1
   126de:	b.n	126e2 <_strtoul_l.isra.0+0x16>
   126e0:	mov	fp, r4
   126e2:	mov	r4, fp
   126e4:	mov	r0, r9
   126e6:	ldrb.w	sl, [r4], #1
   126ea:	bl	ba18 <__locale_ctype_ptr_l>
   126ee:	add	r0, sl
   126f0:	ldrb	r0, [r0, #1]
   126f2:	and.w	r0, r0, #8
   126f6:	and.w	ip, r0, #255	; 0xff
   126fa:	cmp	r0, #0
   126fc:	bne.n	126e0 <_strtoul_l.isra.0+0x14>
   126fe:	mov	r1, sl
   12700:	cmp	r1, #45	; 0x2d
   12702:	beq.n	127c8 <_strtoul_l.isra.0+0xfc>
   12704:	cmp	r1, #43	; 0x2b
   12706:	itt	eq
   12708:	ldrbeq.w	r1, [fp, #1]
   1270c:	addeq.w	r4, fp, #2
   12710:	cmp.w	r8, #0
   12714:	beq.n	12730 <_strtoul_l.isra.0+0x64>
   12716:	cmp.w	r8, #16
   1271a:	beq.n	127d6 <_strtoul_l.isra.0+0x10a>
   1271c:	mov.w	r3, #4294967295
   12720:	udiv	r3, r3, r8
   12724:	mul.w	sl, r8, r3
   12728:	mvn.w	sl, sl
   1272c:	mov	r9, r8
   1272e:	b.n	12740 <_strtoul_l.isra.0+0x74>
   12730:	cmp	r1, #48	; 0x30
   12732:	beq.n	127f8 <_strtoul_l.isra.0+0x12c>
   12734:	mov.w	r8, #10
   12738:	ldr	r3, [pc, #244]	; (12830 <_strtoul_l.isra.0+0x164>)
   1273a:	mov	r9, r8
   1273c:	mov.w	sl, #5
   12740:	mov.w	lr, #0
   12744:	mov	r0, lr
   12746:	b.n	12756 <_strtoul_l.isra.0+0x8a>
   12748:	beq.n	127aa <_strtoul_l.isra.0+0xde>
   1274a:	mla	r0, r9, r0, r2
   1274e:	mov.w	lr, #1
   12752:	ldrb.w	r1, [r4], #1
   12756:	sub.w	r2, r1, #48	; 0x30
   1275a:	cmp	r2, #9
   1275c:	bls.n	1276a <_strtoul_l.isra.0+0x9e>
   1275e:	sub.w	r2, r1, #65	; 0x41
   12762:	cmp	r2, #25
   12764:	bhi.n	1277e <_strtoul_l.isra.0+0xb2>
   12766:	sub.w	r2, r1, #55	; 0x37
   1276a:	cmp	r8, r2
   1276c:	ble.n	1278e <_strtoul_l.isra.0+0xc2>
   1276e:	cmp.w	lr, #4294967295
   12772:	beq.n	12752 <_strtoul_l.isra.0+0x86>
   12774:	cmp	r0, r3
   12776:	bls.n	12748 <_strtoul_l.isra.0+0x7c>
   12778:	mov.w	lr, #4294967295
   1277c:	b.n	12752 <_strtoul_l.isra.0+0x86>
   1277e:	sub.w	r2, r1, #97	; 0x61
   12782:	cmp	r2, #25
   12784:	bhi.n	1278e <_strtoul_l.isra.0+0xc2>
   12786:	sub.w	r2, r1, #87	; 0x57
   1278a:	cmp	r8, r2
   1278c:	bgt.n	1276e <_strtoul_l.isra.0+0xa2>
   1278e:	cmp.w	lr, #4294967295
   12792:	beq.n	127b8 <_strtoul_l.isra.0+0xec>
   12794:	cmp.w	ip, #0
   12798:	beq.n	1279c <_strtoul_l.isra.0+0xd0>
   1279a:	negs	r0, r0
   1279c:	cbz	r5, 127b4 <_strtoul_l.isra.0+0xe8>
   1279e:	cmp.w	lr, #0
   127a2:	bne.n	127c0 <_strtoul_l.isra.0+0xf4>
   127a4:	str	r6, [r5, #0]
   127a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127aa:	cmp	r2, sl
   127ac:	ble.n	1274a <_strtoul_l.isra.0+0x7e>
   127ae:	mov.w	lr, #4294967295
   127b2:	b.n	12752 <_strtoul_l.isra.0+0x86>
   127b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127b8:	movs	r3, #34	; 0x22
   127ba:	str	r3, [r7, #0]
   127bc:	mov	r0, lr
   127be:	cbz	r5, 12812 <_strtoul_l.isra.0+0x146>
   127c0:	subs	r6, r4, #1
   127c2:	str	r6, [r5, #0]
   127c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c8:	add.w	r4, fp, #2
   127cc:	ldrb.w	r1, [fp, #1]
   127d0:	mov.w	ip, #1
   127d4:	b.n	12710 <_strtoul_l.isra.0+0x44>
   127d6:	cmp	r1, #48	; 0x30
   127d8:	bne.n	12816 <_strtoul_l.isra.0+0x14a>
   127da:	ldrb	r3, [r4, #0]
   127dc:	and.w	r3, r3, #223	; 0xdf
   127e0:	cmp	r3, #88	; 0x58
   127e2:	bne.n	12822 <_strtoul_l.isra.0+0x156>
   127e4:	mov.w	r9, #16
   127e8:	ldrb	r1, [r4, #1]
   127ea:	mov	r8, r9
   127ec:	mov.w	sl, #15
   127f0:	adds	r4, #2
   127f2:	mvn.w	r3, #4026531840	; 0xf0000000
   127f6:	b.n	12740 <_strtoul_l.isra.0+0x74>
   127f8:	ldrb	r3, [r4, #0]
   127fa:	and.w	r3, r3, #223	; 0xdf
   127fe:	cmp	r3, #88	; 0x58
   12800:	beq.n	127e4 <_strtoul_l.isra.0+0x118>
   12802:	mov.w	r8, #8
   12806:	mov	r9, r8
   12808:	mov.w	sl, #7
   1280c:	mvn.w	r3, #3758096384	; 0xe0000000
   12810:	b.n	12740 <_strtoul_l.isra.0+0x74>
   12812:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12816:	mov.w	sl, #15
   1281a:	mvn.w	r3, #4026531840	; 0xf0000000
   1281e:	mov	r9, r8
   12820:	b.n	12740 <_strtoul_l.isra.0+0x74>
   12822:	mov	r9, r8
   12824:	mov.w	sl, #15
   12828:	mvn.w	r3, #4026531840	; 0xf0000000
   1282c:	b.n	12740 <_strtoul_l.isra.0+0x74>
   1282e:	nop
   12830:	.word	0x19999999

00012834 <_strtoul_r>:
   12834:	push	{r4, r5, lr}
   12836:	ldr	r4, [pc, #24]	; (12850 <_strtoul_r+0x1c>)
   12838:	ldr	r5, [pc, #24]	; (12854 <_strtoul_r+0x20>)
   1283a:	ldr	r4, [r4, #0]
   1283c:	ldr	r4, [r4, #52]	; 0x34
   1283e:	sub	sp, #12
   12840:	cmp	r4, #0
   12842:	it	eq
   12844:	moveq	r4, r5
   12846:	str	r4, [sp, #0]
   12848:	bl	126cc <_strtoul_l.isra.0>
   1284c:	add	sp, #12
   1284e:	pop	{r4, r5, pc}
   12850:	.word	0x20013dc8
   12854:	.word	0x20013dcc

00012858 <_strtoull_l.isra.0>:
   12858:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1285c:	sub	sp, #20
   1285e:	mov	fp, r1
   12860:	str	r0, [sp, #8]
   12862:	mov	r7, r2
   12864:	mov	r6, r3
   12866:	mov	r8, r1
   12868:	ldr	r4, [sp, #56]	; 0x38
   1286a:	b.n	1286e <_strtoull_l.isra.0+0x16>
   1286c:	mov	r8, r5
   1286e:	mov	r5, r8
   12870:	mov	r0, r4
   12872:	ldrb.w	r9, [r5], #1
   12876:	bl	ba18 <__locale_ctype_ptr_l>
   1287a:	add	r0, r9
   1287c:	ldrb	r3, [r0, #1]
   1287e:	and.w	r3, r3, #8
   12882:	and.w	r2, r3, #255	; 0xff
   12886:	cmp	r3, #0
   12888:	bne.n	1286c <_strtoull_l.isra.0+0x14>
   1288a:	mov	r4, r9
   1288c:	cmp	r4, #45	; 0x2d
   1288e:	beq.w	129aa <_strtoull_l.isra.0+0x152>
   12892:	cmp	r4, #43	; 0x2b
   12894:	it	eq
   12896:	ldrbeq.w	r4, [r8, #1]
   1289a:	str	r2, [sp, #4]
   1289c:	it	eq
   1289e:	addeq.w	r5, r8, #2
   128a2:	cbz	r6, 128dc <_strtoull_l.isra.0+0x84>
   128a4:	cmp	r6, #16
   128a6:	beq.w	129b8 <_strtoull_l.isra.0+0x160>
   128aa:	mov.w	r9, r6, asr #31
   128ae:	mov	r2, r6
   128b0:	mov	r3, r9
   128b2:	mov.w	r0, #4294967295
   128b6:	mov.w	r1, #4294967295
   128ba:	bl	b664 <__aeabi_uldivmod>
   128be:	mov	r2, r6
   128c0:	str	r0, [sp, #12]
   128c2:	mov	sl, r1
   128c4:	mov	r3, r9
   128c6:	mov.w	r0, #4294967295
   128ca:	mov.w	r1, #4294967295
   128ce:	bl	b664 <__aeabi_uldivmod>
   128d2:	mov	r8, r6
   128d4:	mov	lr, r2
   128d6:	ldr	r2, [sp, #12]
   128d8:	mov	r3, sl
   128da:	b.n	128f6 <_strtoull_l.isra.0+0x9e>
   128dc:	cmp	r4, #48	; 0x30
   128de:	beq.w	129e4 <_strtoull_l.isra.0+0x18c>
   128e2:	ldr	r3, [pc, #348]	; (12a40 <_strtoull_l.isra.0+0x1e8>)
   128e4:	mov.w	lr, #5
   128e8:	mov.w	r2, #2576980377	; 0x99999999
   128ec:	mov.w	r8, #10
   128f0:	mov.w	r9, #0
   128f4:	movs	r6, #10
   128f6:	mov.w	ip, #0
   128fa:	movs	r0, #0
   128fc:	movs	r1, #0
   128fe:	b.n	12926 <_strtoull_l.isra.0+0xce>
   12900:	cmp	r1, r3
   12902:	it	eq
   12904:	cmpeq	r0, r2
   12906:	beq.n	1298a <_strtoull_l.isra.0+0x132>
   12908:	mul.w	r4, r0, r9
   1290c:	mla	r4, r8, r1, r4
   12910:	umull	r0, r1, r0, r8
   12914:	add	r1, r4
   12916:	adds.w	r0, r0, sl
   1291a:	adc.w	r1, r1, sl, asr #31
   1291e:	mov.w	ip, #1
   12922:	ldrb.w	r4, [r5], #1
   12926:	sub.w	sl, r4, #48	; 0x30
   1292a:	cmp.w	sl, #9
   1292e:	bls.n	1293e <_strtoull_l.isra.0+0xe6>
   12930:	sub.w	sl, r4, #65	; 0x41
   12934:	cmp.w	sl, #25
   12938:	bhi.n	12956 <_strtoull_l.isra.0+0xfe>
   1293a:	sub.w	sl, r4, #55	; 0x37
   1293e:	cmp	r6, sl
   12940:	ble.n	12968 <_strtoull_l.isra.0+0x110>
   12942:	cmp.w	ip, #4294967295
   12946:	beq.n	12922 <_strtoull_l.isra.0+0xca>
   12948:	cmp	r3, r1
   1294a:	it	eq
   1294c:	cmpeq	r2, r0
   1294e:	bcs.n	12900 <_strtoull_l.isra.0+0xa8>
   12950:	mov.w	ip, #4294967295
   12954:	b.n	12922 <_strtoull_l.isra.0+0xca>
   12956:	sub.w	sl, r4, #97	; 0x61
   1295a:	cmp.w	sl, #25
   1295e:	bhi.n	12968 <_strtoull_l.isra.0+0x110>
   12960:	sub.w	sl, r4, #87	; 0x57
   12964:	cmp	r6, sl
   12966:	bgt.n	12942 <_strtoull_l.isra.0+0xea>
   12968:	cmp.w	ip, #4294967295
   1296c:	beq.n	12994 <_strtoull_l.isra.0+0x13c>
   1296e:	ldr	r3, [sp, #4]
   12970:	cbz	r3, 12978 <_strtoull_l.isra.0+0x120>
   12972:	negs	r0, r0
   12974:	sbc.w	r1, r1, r1, lsl #1
   12978:	cbz	r7, 12984 <_strtoull_l.isra.0+0x12c>
   1297a:	cmp.w	ip, #0
   1297e:	bne.n	129a6 <_strtoull_l.isra.0+0x14e>
   12980:	mov	r5, fp
   12982:	str	r5, [r7, #0]
   12984:	add	sp, #20
   12986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1298a:	cmp	sl, lr
   1298c:	ble.n	12908 <_strtoull_l.isra.0+0xb0>
   1298e:	mov.w	ip, #4294967295
   12992:	b.n	12922 <_strtoull_l.isra.0+0xca>
   12994:	ldr	r2, [sp, #8]
   12996:	movs	r3, #34	; 0x22
   12998:	str	r3, [r2, #0]
   1299a:	mov.w	r0, #4294967295
   1299e:	mov.w	r1, #4294967295
   129a2:	cmp	r7, #0
   129a4:	beq.n	12984 <_strtoull_l.isra.0+0x12c>
   129a6:	subs	r5, #1
   129a8:	b.n	12982 <_strtoull_l.isra.0+0x12a>
   129aa:	movs	r3, #1
   129ac:	add.w	r5, r8, #2
   129b0:	ldrb.w	r4, [r8, #1]
   129b4:	str	r3, [sp, #4]
   129b6:	b.n	128a2 <_strtoull_l.isra.0+0x4a>
   129b8:	cmp	r4, #48	; 0x30
   129ba:	bne.n	12a06 <_strtoull_l.isra.0+0x1ae>
   129bc:	ldrb	r3, [r5, #0]
   129be:	and.w	r3, r3, #223	; 0xdf
   129c2:	cmp	r3, #88	; 0x58
   129c4:	bne.n	12a1c <_strtoull_l.isra.0+0x1c4>
   129c6:	mov.w	r3, #4294967295
   129ca:	ldrb	r4, [r5, #1]
   129cc:	str	r3, [sp, #12]
   129ce:	mov.w	lr, #15
   129d2:	adds	r5, #2
   129d4:	mvn.w	sl, #4026531840	; 0xf0000000
   129d8:	mov.w	r8, #16
   129dc:	mov.w	r9, #0
   129e0:	movs	r6, #16
   129e2:	b.n	128d6 <_strtoull_l.isra.0+0x7e>
   129e4:	ldrb	r3, [r5, #0]
   129e6:	and.w	r3, r3, #223	; 0xdf
   129ea:	cmp	r3, #88	; 0x58
   129ec:	beq.n	129c6 <_strtoull_l.isra.0+0x16e>
   129ee:	mov.w	lr, #7
   129f2:	mov.w	r2, #4294967295
   129f6:	mvn.w	r3, #3758096384	; 0xe0000000
   129fa:	mov.w	r8, #8
   129fe:	mov.w	r9, #0
   12a02:	movs	r6, #8
   12a04:	b.n	128f6 <_strtoull_l.isra.0+0x9e>
   12a06:	mov.w	lr, #15
   12a0a:	mov.w	r2, #4294967295
   12a0e:	mvn.w	r3, #4026531840	; 0xf0000000
   12a12:	mov.w	r8, #16
   12a16:	mov.w	r9, #0
   12a1a:	b.n	128f6 <_strtoull_l.isra.0+0x9e>
   12a1c:	mov.w	r8, #16
   12a20:	mov.w	r9, #0
   12a24:	mov	r2, r8
   12a26:	mov	r3, r9
   12a28:	mov.w	r0, #4294967295
   12a2c:	mov.w	r1, #4294967295
   12a30:	bl	b664 <__aeabi_uldivmod>
   12a34:	mvn.w	r3, #4026531840	; 0xf0000000
   12a38:	mov	lr, r2
   12a3a:	mov.w	r2, #4294967295
   12a3e:	b.n	128f6 <_strtoull_l.isra.0+0x9e>
   12a40:	.word	0x19999999

00012a44 <_strtoull_r>:
   12a44:	push	{r4, r5, lr}
   12a46:	ldr	r4, [pc, #24]	; (12a60 <_strtoull_r+0x1c>)
   12a48:	ldr	r5, [pc, #24]	; (12a64 <_strtoull_r+0x20>)
   12a4a:	ldr	r4, [r4, #0]
   12a4c:	ldr	r4, [r4, #52]	; 0x34
   12a4e:	sub	sp, #12
   12a50:	cmp	r4, #0
   12a52:	it	eq
   12a54:	moveq	r4, r5
   12a56:	str	r4, [sp, #0]
   12a58:	bl	12858 <_strtoull_l.isra.0>
   12a5c:	add	sp, #12
   12a5e:	pop	{r4, r5, pc}
   12a60:	.word	0x20013dc8
   12a64:	.word	0x20013dcc

00012a68 <__ssprint_r>:
   12a68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a6c:	ldr	r3, [r2, #8]
   12a6e:	sub	sp, #12
   12a70:	mov	r8, r2
   12a72:	cmp	r3, #0
   12a74:	beq.n	12b5c <__ssprint_r+0xf4>
   12a76:	mov	fp, r0
   12a78:	mov.w	r9, #0
   12a7c:	ldr	r6, [r2, #0]
   12a7e:	ldr	r0, [r1, #0]
   12a80:	ldr	r3, [r1, #8]
   12a82:	mov	r5, r1
   12a84:	mov	r4, r9
   12a86:	cmp	r4, #0
   12a88:	beq.n	12b16 <__ssprint_r+0xae>
   12a8a:	cmp	r4, r3
   12a8c:	mov	r7, r3
   12a8e:	mov	sl, r3
   12a90:	bcc.n	12b20 <__ssprint_r+0xb8>
   12a92:	ldrh	r3, [r5, #12]
   12a94:	tst.w	r3, #1152	; 0x480
   12a98:	beq.n	12af6 <__ssprint_r+0x8e>
   12a9a:	ldr	r7, [r5, #20]
   12a9c:	ldr	r1, [r5, #16]
   12a9e:	add.w	r7, r7, r7, lsl #1
   12aa2:	rsb	sl, r1, r0
   12aa6:	add.w	r7, r7, r7, lsr #31
   12aaa:	adds	r0, r4, #1
   12aac:	asrs	r7, r7, #1
   12aae:	add	r0, sl
   12ab0:	cmp	r0, r7
   12ab2:	mov	r2, r7
   12ab4:	itt	hi
   12ab6:	movhi	r7, r0
   12ab8:	movhi	r2, r7
   12aba:	lsls	r3, r3, #21
   12abc:	bpl.n	12b26 <__ssprint_r+0xbe>
   12abe:	mov	r1, r2
   12ac0:	mov	r0, fp
   12ac2:	bl	ba54 <_malloc_r>
   12ac6:	cmp	r0, #0
   12ac8:	beq.n	12b3a <__ssprint_r+0xd2>
   12aca:	mov	r2, sl
   12acc:	ldr	r1, [r5, #16]
   12ace:	str	r0, [sp, #4]
   12ad0:	bl	89a8 <memcpy>
   12ad4:	ldrh	r2, [r5, #12]
   12ad6:	ldr	r3, [sp, #4]
   12ad8:	bic.w	r2, r2, #1152	; 0x480
   12adc:	orr.w	r2, r2, #128	; 0x80
   12ae0:	strh	r2, [r5, #12]
   12ae2:	rsb	r2, sl, r7
   12ae6:	add.w	r0, r3, sl
   12aea:	str	r7, [r5, #20]
   12aec:	str	r3, [r5, #16]
   12aee:	str	r0, [r5, #0]
   12af0:	str	r2, [r5, #8]
   12af2:	mov	r7, r4
   12af4:	mov	sl, r4
   12af6:	mov	r2, sl
   12af8:	mov	r1, r9
   12afa:	bl	c0f4 <memmove>
   12afe:	ldr.w	r2, [r8, #8]
   12b02:	ldr	r3, [r5, #8]
   12b04:	ldr	r0, [r5, #0]
   12b06:	subs	r3, r3, r7
   12b08:	add	r0, sl
   12b0a:	subs	r4, r2, r4
   12b0c:	str	r3, [r5, #8]
   12b0e:	str	r0, [r5, #0]
   12b10:	str.w	r4, [r8, #8]
   12b14:	cbz	r4, 12b5c <__ssprint_r+0xf4>
   12b16:	ldr.w	r9, [r6]
   12b1a:	ldr	r4, [r6, #4]
   12b1c:	adds	r6, #8
   12b1e:	b.n	12a86 <__ssprint_r+0x1e>
   12b20:	mov	r7, r4
   12b22:	mov	sl, r4
   12b24:	b.n	12af6 <__ssprint_r+0x8e>
   12b26:	mov	r0, fp
   12b28:	bl	c260 <_realloc_r>
   12b2c:	mov	r3, r0
   12b2e:	cmp	r0, #0
   12b30:	bne.n	12ae2 <__ssprint_r+0x7a>
   12b32:	ldr	r1, [r5, #16]
   12b34:	mov	r0, fp
   12b36:	bl	111d0 <_free_r>
   12b3a:	movs	r3, #12
   12b3c:	str.w	r3, [fp]
   12b40:	ldrh	r3, [r5, #12]
   12b42:	movs	r2, #0
   12b44:	orr.w	r3, r3, #64	; 0x40
   12b48:	mov.w	r0, #4294967295
   12b4c:	strh	r3, [r5, #12]
   12b4e:	str.w	r2, [r8, #8]
   12b52:	str.w	r2, [r8, #4]
   12b56:	add	sp, #12
   12b58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b5c:	movs	r0, #0
   12b5e:	str.w	r0, [r8, #4]
   12b62:	add	sp, #12
   12b64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012b68 <_sungetc_r>:
   12b68:	adds	r3, r1, #1
   12b6a:	push	{r4, r5, r6, lr}
   12b6c:	beq.n	12ba6 <_sungetc_r+0x3e>
   12b6e:	ldrh	r3, [r2, #12]
   12b70:	ldr	r4, [r2, #48]	; 0x30
   12b72:	bic.w	r3, r3, #32
   12b76:	strh	r3, [r2, #12]
   12b78:	uxtb	r5, r1
   12b7a:	cbz	r4, 12bac <_sungetc_r+0x44>
   12b7c:	mov	r4, r2
   12b7e:	ldr	r2, [r2, #4]
   12b80:	ldr	r3, [r4, #52]	; 0x34
   12b82:	cmp	r2, r3
   12b84:	mov	r6, r1
   12b86:	bge.n	12b9c <_sungetc_r+0x34>
   12b88:	ldr	r3, [r4, #0]
   12b8a:	subs	r2, r3, #1
   12b8c:	str	r2, [r4, #0]
   12b8e:	strb.w	r6, [r3, #-1]
   12b92:	ldr	r3, [r4, #4]
   12b94:	adds	r3, #1
   12b96:	str	r3, [r4, #4]
   12b98:	mov	r0, r5
   12b9a:	pop	{r4, r5, r6, pc}
   12b9c:	mov	r1, r4
   12b9e:	bl	12cac <__submore>
   12ba2:	cmp	r0, #0
   12ba4:	beq.n	12b88 <_sungetc_r+0x20>
   12ba6:	mov.w	r5, #4294967295
   12baa:	b.n	12b98 <_sungetc_r+0x30>
   12bac:	ldr	r0, [r2, #16]
   12bae:	ldr	r3, [r2, #0]
   12bb0:	cbz	r0, 12bbe <_sungetc_r+0x56>
   12bb2:	cmp	r0, r3
   12bb4:	bcs.n	12bbe <_sungetc_r+0x56>
   12bb6:	ldrb.w	r0, [r3, #-1]
   12bba:	cmp	r5, r0
   12bbc:	beq.n	12bde <_sungetc_r+0x76>
   12bbe:	str	r3, [r2, #56]	; 0x38
   12bc0:	mov	r3, r2
   12bc2:	ldr	r6, [r2, #4]
   12bc4:	str	r6, [r2, #60]	; 0x3c
   12bc6:	add.w	r4, r2, #64	; 0x40
   12bca:	movs	r0, #3
   12bcc:	str	r0, [r2, #52]	; 0x34
   12bce:	str	r4, [r2, #48]	; 0x30
   12bd0:	strb.w	r1, [r3, #66]!
   12bd4:	movs	r1, #1
   12bd6:	str	r3, [r2, #0]
   12bd8:	str	r1, [r2, #4]
   12bda:	mov	r0, r5
   12bdc:	pop	{r4, r5, r6, pc}
   12bde:	ldr	r1, [r2, #4]
   12be0:	subs	r3, #1
   12be2:	adds	r1, #1
   12be4:	str	r3, [r2, #0]
   12be6:	str	r1, [r2, #4]
   12be8:	b.n	12b98 <_sungetc_r+0x30>
   12bea:	nop

00012bec <__ssrefill_r>:
   12bec:	push	{r4, lr}
   12bee:	mov	r4, r1
   12bf0:	ldr	r1, [r1, #48]	; 0x30
   12bf2:	cbz	r1, 12c10 <__ssrefill_r+0x24>
   12bf4:	add.w	r3, r4, #64	; 0x40
   12bf8:	cmp	r1, r3
   12bfa:	beq.n	12c00 <__ssrefill_r+0x14>
   12bfc:	bl	111d0 <_free_r>
   12c00:	ldr	r3, [r4, #60]	; 0x3c
   12c02:	str	r3, [r4, #4]
   12c04:	movs	r0, #0
   12c06:	str	r0, [r4, #48]	; 0x30
   12c08:	cbz	r3, 12c10 <__ssrefill_r+0x24>
   12c0a:	ldr	r3, [r4, #56]	; 0x38
   12c0c:	str	r3, [r4, #0]
   12c0e:	pop	{r4, pc}
   12c10:	ldrh	r3, [r4, #12]
   12c12:	ldr	r2, [r4, #16]
   12c14:	str	r2, [r4, #0]
   12c16:	orr.w	r3, r3, #32
   12c1a:	movs	r2, #0
   12c1c:	strh	r3, [r4, #12]
   12c1e:	str	r2, [r4, #4]
   12c20:	mov.w	r0, #4294967295
   12c24:	pop	{r4, pc}
   12c26:	nop

00012c28 <_sfread_r>:
   12c28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c2c:	sub	sp, #12
   12c2e:	mul.w	r9, r2, r3
   12c32:	str	r2, [sp, #4]
   12c34:	mov	sl, r3
   12c36:	ldr	r4, [sp, #48]	; 0x30
   12c38:	cmp.w	r9, #0
   12c3c:	beq.n	12c92 <_sfread_r+0x6a>
   12c3e:	mov	r7, r0
   12c40:	mov	r6, r1
   12c42:	mov	r5, r9
   12c44:	mov.w	r8, #0
   12c48:	b.n	12c6a <_sfread_r+0x42>
   12c4a:	ldr	r1, [r4, #0]
   12c4c:	bl	89a8 <memcpy>
   12c50:	ldr	r2, [r4, #0]
   12c52:	str.w	r8, [r4, #4]
   12c56:	add	r2, fp
   12c58:	str	r2, [r4, #0]
   12c5a:	mov	r1, r4
   12c5c:	mov	r0, r7
   12c5e:	add	r6, fp
   12c60:	rsb	r5, fp, r5
   12c64:	bl	12bec <__ssrefill_r>
   12c68:	cbnz	r0, 12c9a <_sfread_r+0x72>
   12c6a:	ldr.w	fp, [r4, #4]
   12c6e:	cmp	r5, fp
   12c70:	mov	r0, r6
   12c72:	mov	r2, fp
   12c74:	bhi.n	12c4a <_sfread_r+0x22>
   12c76:	mov	r2, r5
   12c78:	ldr	r1, [r4, #0]
   12c7a:	bl	89a8 <memcpy>
   12c7e:	ldr	r2, [r4, #4]
   12c80:	ldr	r3, [r4, #0]
   12c82:	subs	r2, r2, r5
   12c84:	add	r3, r5
   12c86:	mov	r0, sl
   12c88:	str	r2, [r4, #4]
   12c8a:	str	r3, [r4, #0]
   12c8c:	add	sp, #12
   12c8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c92:	mov	r0, r9
   12c94:	add	sp, #12
   12c96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c9a:	ldr	r3, [sp, #4]
   12c9c:	rsb	r9, r5, r9
   12ca0:	udiv	r0, r9, r3
   12ca4:	add	sp, #12
   12ca6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12caa:	nop

00012cac <__submore>:
   12cac:	add.w	r3, r1, #64	; 0x40
   12cb0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cb4:	mov	r4, r1
   12cb6:	ldr	r1, [r1, #48]	; 0x30
   12cb8:	cmp	r1, r3
   12cba:	beq.n	12ce6 <__submore+0x3a>
   12cbc:	ldr	r6, [r4, #52]	; 0x34
   12cbe:	lsls	r7, r6, #1
   12cc0:	mov	r2, r7
   12cc2:	bl	c260 <_realloc_r>
   12cc6:	mov	r5, r0
   12cc8:	cbz	r0, 12d1c <__submore+0x70>
   12cca:	add.w	r8, r0, r6
   12cce:	mov	r2, r6
   12cd0:	mov	r0, r8
   12cd2:	mov	r1, r5
   12cd4:	bl	89a8 <memcpy>
   12cd8:	str.w	r8, [r4]
   12cdc:	str	r5, [r4, #48]	; 0x30
   12cde:	str	r7, [r4, #52]	; 0x34
   12ce0:	movs	r0, #0
   12ce2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ce6:	mov.w	r1, #1024	; 0x400
   12cea:	bl	ba54 <_malloc_r>
   12cee:	cbz	r0, 12d1c <__submore+0x70>
   12cf0:	ldrb.w	r3, [r4, #66]	; 0x42
   12cf4:	str	r0, [r4, #48]	; 0x30
   12cf6:	mov.w	r2, #1024	; 0x400
   12cfa:	str	r2, [r4, #52]	; 0x34
   12cfc:	strb.w	r3, [r0, #1023]	; 0x3ff
   12d00:	ldrb.w	r3, [r4, #65]	; 0x41
   12d04:	strb.w	r3, [r0, #1022]	; 0x3fe
   12d08:	ldrb.w	r3, [r4, #64]	; 0x40
   12d0c:	strb.w	r3, [r0, #1021]	; 0x3fd
   12d10:	addw	r0, r0, #1021	; 0x3fd
   12d14:	str	r0, [r4, #0]
   12d16:	movs	r0, #0
   12d18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d1c:	mov.w	r0, #4294967295
   12d20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012d24 <_vasnprintf_r>:
   12d24:	push	{r4, r5, r6, lr}
   12d26:	mov	r5, r2
   12d28:	sub	sp, #104	; 0x68
   12d2a:	ldr	r4, [r2, #0]
   12d2c:	cbz	r1, 12d32 <_vasnprintf_r+0xe>
   12d2e:	cmp	r4, #0
   12d30:	bne.n	12d68 <_vasnprintf_r+0x44>
   12d32:	movs	r4, #0
   12d34:	mov.w	r2, #648	; 0x288
   12d38:	strh.w	r2, [sp, #12]
   12d3c:	str	r4, [sp, #0]
   12d3e:	str	r4, [sp, #16]
   12d40:	mov	r2, r3
   12d42:	movw	r6, #65535	; 0xffff
   12d46:	ldr	r3, [sp, #120]	; 0x78
   12d48:	str	r4, [sp, #8]
   12d4a:	mov	r1, sp
   12d4c:	str	r4, [sp, #20]
   12d4e:	strh.w	r6, [sp, #14]
   12d52:	bl	dad0 <_svfprintf_r>
   12d56:	cmp	r0, #0
   12d58:	blt.n	12d7e <_vasnprintf_r+0x5a>
   12d5a:	ldr	r3, [sp, #0]
   12d5c:	str	r0, [r5, #0]
   12d5e:	movs	r2, #0
   12d60:	strb	r2, [r3, #0]
   12d62:	ldr	r0, [sp, #16]
   12d64:	add	sp, #104	; 0x68
   12d66:	pop	{r4, r5, r6, pc}
   12d68:	mov.w	r2, #1544	; 0x608
   12d6c:	str	r1, [sp, #0]
   12d6e:	str	r1, [sp, #16]
   12d70:	strh.w	r2, [sp, #12]
   12d74:	bge.n	12d40 <_vasnprintf_r+0x1c>
   12d76:	movs	r3, #139	; 0x8b
   12d78:	str	r3, [r0, #0]
   12d7a:	movs	r0, #0
   12d7c:	b.n	12d64 <_vasnprintf_r+0x40>
   12d7e:	movs	r0, #0
   12d80:	b.n	12d64 <_vasnprintf_r+0x40>
   12d82:	nop

00012d84 <_calloc_r>:
   12d84:	push	{r4, lr}
   12d86:	mul.w	r1, r2, r1
   12d8a:	bl	ba54 <_malloc_r>
   12d8e:	mov	r4, r0
   12d90:	cbz	r0, 12dca <_calloc_r+0x46>
   12d92:	ldr.w	r2, [r0, #-4]
   12d96:	bic.w	r2, r2, #3
   12d9a:	subs	r2, #4
   12d9c:	cmp	r2, #36	; 0x24
   12d9e:	bhi.n	12dd2 <_calloc_r+0x4e>
   12da0:	cmp	r2, #19
   12da2:	bls.n	12dce <_calloc_r+0x4a>
   12da4:	movs	r3, #0
   12da6:	cmp	r2, #27
   12da8:	str	r3, [r0, #0]
   12daa:	str	r3, [r0, #4]
   12dac:	bls.n	12ddc <_calloc_r+0x58>
   12dae:	cmp	r2, #36	; 0x24
   12db0:	str	r3, [r0, #8]
   12db2:	str	r3, [r0, #12]
   12db4:	iteee	ne
   12db6:	addne.w	r2, r0, #16
   12dba:	streq	r3, [r0, #16]
   12dbc:	streq	r3, [r0, #20]
   12dbe:	addeq.w	r2, r0, #24
   12dc2:	movs	r3, #0
   12dc4:	str	r3, [r2, #0]
   12dc6:	str	r3, [r2, #4]
   12dc8:	str	r3, [r2, #8]
   12dca:	mov	r0, r4
   12dcc:	pop	{r4, pc}
   12dce:	mov	r2, r0
   12dd0:	b.n	12dc2 <_calloc_r+0x3e>
   12dd2:	movs	r1, #0
   12dd4:	bl	c1bc <memset>
   12dd8:	mov	r0, r4
   12dda:	pop	{r4, pc}
   12ddc:	add.w	r2, r0, #8
   12de0:	b.n	12dc2 <_calloc_r+0x3e>
   12de2:	nop

00012de4 <vtable for AudioStream>:
	...
   12dec:	....

00012df0 <vtable for mRecordQueue<500>>:
	...
   12df8:	u...

00012dfc <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   12e04:	........m.......
   12e14:	-...........

00012e20 <vtable for FsFile>:
	...
   12e28:	........m.......
   12e38:	-...........%02d
   12e48:	:%02d:%02d..%04d
   12e58:	/%02d/%02d..%d %
   12e68:	d %d %d %d %d %d
   12e78:	....%s_%04d_%02d
   12e88:	_%02d_%02d_%02d_
   12e98:	%02d%s..%04d_%02
   12ea8:	d_%02d_%02d_%02d
   12eb8:	_%02d...RIFF....
   12ec8:	WAVE....fmt ....
   12ed8:	data....%04d_%02
   12ee8:	d_%02d,.%02d_%02
   12ef8:	d_%02d,.%10d....
   12f08:	SD_s_%s.txt.Conf
   12f18:	ig.txt..%s......
   12f28:	%d..Envi_%s.txt.
   12f38:	%10.1f,.close ac
   12f48:	quisition...Hibe
   12f58:	rnate now 1.Hibe
   12f68:	rnate now 3.?!xa
   12f78:	....oar1234ndtch
   12f88:	wseikp..%02d....
   12f98:	%c %5d on_time..
   12fa8:	....%c %5d acq_t
   12fb8:	ime.....%c %5d r
   12fc8:	ep_rate.....%c %
   12fd8:	5d first_hour...
   12fe8:	%c %5d second_ho
   12ff8:	ur......%c %5d t
   13008:	hird_hour...%c %
   13018:	5d last_hour....
   13028:	%c %s name......
   13038:	%c %s date......
   13048:	%c %s time......
   13058:	exter 'a' to pri
   13068:	nt this.exter '?
   13078:	c' to read value
   13088:	 c=(o,a,r,1,2,3,
   13098:	4,n,d,t,c,h,w,s,
   130a8:	m,i,k,p)....  e.
   130b8:	g.: ?1 will prin
   130c8:	t first hour....
   130d8:	exter '!cval' to
   130e8:	 read value c=(0
   130f8:	,a,r,1,2,3,4,n,d
   13108:	,t,c,h,w,s,m,i,k
   13118:	,p) and val is n
   13128:	ew value....  e.
   13138:	g.: !110 will se
   13148:	t first hour to 
   13158:	10..exter 'xval'
   13168:	 to exit menu (x
   13178:	 is delay in min
   13188:	utes, -1 means i
   13198:	mmediate)...  e.
   131a8:	g.: x10 will exi
   131b8:	t and hibernate 
   131c8:	for 10 minutes..
   131d8:	        x-1 with
   131e8:	 exit and start 
   131f8:	immediately.micr
   13208:	oSoundRecorder..
   13218:	End of Setup....
   13228:	logFile.txt.SdEr
   13238:	ror: 0X.,0X.Chec
   13248:	k SD format.....
   13258:	error: .file.wri
   13268:	te data failed..
   13278:	file.open failed
   13288:	....file.preAllo
   13298:	cate failed.clos
   132a8:	ed...loop: %5d %
   132b8:	4d; %5d %5d; %5d
   132c8:	.....loop: %5d %
   132d8:	4d; %5d %5d; %5d
   132e8:	....; %5d %5d...

000132f8 <monthDays>:
   132f8:	............

00013304 <vtable for AudioInputAnalog>:
	...
   1330c:	E)..

00013310 <vtable for Stream>:
	...
   13318:	....Y...m...q...
   13328:	............

00013334 <vtable for File>:
	...
   1333c:	.-..Y...m....,..
   1334c:	.+...,...,...0..
   1335c:	I1..Y-...+...+..
   1336c:	%,..1,..I,..Y,..
   1337c:	i,..u,...,...,..
   1338c:	.,...,..

00013394 <vtable for SDFile>:
	...
   1339c:	.-..Y...m...m...
   133ac:	./...,..U...y1..
   133bc:	.0...-.../.../..
   133cc:	./..90..q/..U/..
   133dc:	=-..)-......./..
   133ec:	.-......  File  
   133fc:	  this=%x, f=%x.
   1340c:	....   SDFile th
   1341c:	is=%x, refcount=
   1342c:	%u..

00013430 <TwoWire::i2c0_hardware>:
   13430:	4..@@.....".0...
   13440:	....!./.........

00013450 <TwoWire::i2c1_hardware>:
   13450:	4..@....&:......
   13460:	..%;............

00013470 <TwoWire::i2c2_hardware>:
   13470:	(..@@...........
   13480:	............J...

00013490 <vtable for TwoWire>:
	...
   13498:	.3...2..m....2..
   134a8:	.2...2...2..

000134b4 <vtable for SDClass>:
	...
   134bc:	.6..M5...4..Q6..
   134cc:	.4...5...5...6..
   134dc:	EXFAT...

000134e4 <vtable for SdSpiCard>:
	...
   134ec:	.p...p...p...o..
   134fc:	.s...s...t...v..
   1350c:	Qp...u...o...o..
   1351c:	.s...r..qr..u...
   1352c:	.o..Uv...t...u..

0001353c <vtable for SdioCard>:
	...
   13544:	.x..ey..y...!...
   13554:	....u{......I...
   13564:	.~...{...x...x..
   13574:	.x...x...x...z..
   13584:	uy...}..M~..%}..

00013594 <pin2sc1a>:
   13594:	................
   135a4:	................
   135b4:	................
   135c4:	................
   135d4:	........

000135dc <digital_pin_to_info_PGM>:
   135dc:	@..C@..@D..CD..@
   135ec:	...C...@0..C0..@
   135fc:	4..C4..@...C...@
   1360c:	...C...@...C...@
   1361c:	...C...@...C...@
   1362c:	...C...@...C...@
   1363c:	...C...@...C...@
   1364c:	...C...@...C...@
   1365c:	...C...@...C...@
   1366c:	...C...@...C...@
   1367c:	...C...@...C...@
   1368c:	...C...@...C...@
   1369c:	h .Ch..@...C...@
   136ac:	8..C8..@<..C<..@
   136bc:	@..C@..@H..CH..@
   136cc:	L..CL..@(..C(..@
   136dc:	,..C,..@` .C`..@
   136ec:	d .Cd..@ ..C ..@
   136fc:	$..C$..@(..C(..@
   1370c:	,..C,..@D..CD..@
   1371c:	p..Cp..@t..Ct..@
   1372c:	h..Ch..@P..CP..@
   1373c:	X..CX..@\..C\..@
   1374c:	T..CT..@ ..C ..@
   1375c:	$..C$..@...C...@
   1376c:	...C...@8..C8..@
   1377c:	4..C4..@0..C0..@
   1378c:	<..C<..@,..C,..@
   1379c:	( .C(..@, .C,..@
   137ac:	. .C...@. .C...@
   137bc:	. .C...@. .C...@
   137cc:	. .C...@. .C...@

000137dc <vtable for usb_serial_class>:
	...
   137e4:	Q...I...E...A...
   137f4:	=...9...5...1...
   13804:	....

00013808 <usb_endpoint_config_table>:
   13808:	....

0001380c <usb_descriptor_list>:
   1380c:	.....8. ........
   1381c:	$9. C........9. 
   1382c:	.........9. ....
   1383c:	....h9. ........
   1384c:	.9. ............
   1385c:	....

00013860 <_global_impure_ptr>:
   13860:	.9. C...POSIX...
   13870:	....

00013874 <fpi.6173>:
   13874:	5...............
   13884:	....nf..inity...
   13894:	an..

00013898 <fpinan.6209>:
   13898:	4...............
   138a8:	........

000138b0 <tinytens>:
   138b0:	.......<3...#.I9
   138c0:	=..D...2......[%
   138d0:	Co.d(.h.

000138d8 <zeroes.7258>:
   138d8:	0000000000000000
   138e8:	INF.inf.NAN.nan.
   138f8:	0123456789ABCDEF
   13908:	....0123456789ab
   13918:	cdef....(null)..
   13928:	0...

0001392c <blanks.7257>:
   1392c:	                

0001393c <basefix.7328>:
   1393c:	................
   1394c:	................
   1395c:	....e%ld....

00013968 <_ctype_>:
   13968:	.         ((((( 
   13978:	                
   13988:	 ...............
   13998:	................
   139a8:	..AAAAAA........
   139b8:	................
   139c8:	..BBBBBB........
   139d8:	................
   139e8:	 ...............
	...
   13a68:	....Infinity....
   13a78:	NaN.

00013a7c <__hexdig>:
	...
   13aac:	................
   13abc:	................
	...
   13adc:	................
	...
   13b7c:	....

00013b80 <__mprec_tens>:
   13b80:	.......?......$@
   13b90:	......Y@.....@.@
   13ba0:	.......@.....j.@
   13bb0:	.......A......cA
   13bc0:	.......A....e..A
   13bd0:	... _..B....vH7B
   13be0:	......mB..@..0.B
   13bf0:	.......B..4&.k.C
   13c00:	...7y.AC....W4vC
   13c10:	..Ngm..C.=.`.X.C
   13c20:	@..x...DP.....KD
   13c30:	..M....D.J...-.D
   13c40:	...yCx.D

00013c48 <__mprec_bigtens>:
   13c48:	...7y.AC.n.....F
   13c58:	..?..O8M2.0.Hw.Z
   13c68:	<.s..O.u

00013c70 <p05.6087>:
   13c70:	........}...

00013c7c <_init>:
   13c7c:	push	{r3, r4, r5, r6, r7, lr}
   13c7e:	nop
   13c80:	pop	{r3, r4, r5, r6, r7}
   13c82:	pop	{r3}
   13c84:	mov	lr, r3
   13c86:	bx	lr

00013c88 <__init_array_start>:
   13c88:	.word	0x0001018d

00013c8c <__frame_dummy_init_array_entry>:
   13c8c:	5.... ..m(...(..
   13c9c:	.(...(..U+..m+..
   13cac:	.+...+...+...1..
   13cbc:	.1...2...2..52..
   13ccc:	M2..e2..}2...7..

Disassembly of section .fini:

00013cdc <_fini>:
   13cdc:	push	{r3, r4, r5, r6, r7, lr}
   13cde:	nop
